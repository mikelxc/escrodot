{
	"id": "0e235a8cefb2b425e842fb583df8a32b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"EscroDot.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\nimport \"./ECDSA.sol\";\nimport \"./SignatureVerifier.sol\";\n\n/**\n * @title EscroDot – minimal escrow & staking framework for AI‑agent services\n * @author Mike Liu (mikelxc)\n *\n /**\n * @title EscroDot – AI‑Agent Escrow (v0.4 – CCIP‑Read + Buyer‑Signed Claim + Open Arbiter)\n *\n * • Off‑chain delivery (ERC‑3668): `checkDelivery()` triggers CCIP‑Read. Gateway returns the\n *   AI result. The buyer inspects the output off‑chain and, if satisfied, signs a message that\n *   lets the provider claim funds.\n * • Buyer‑signed claim: `claimPayment()` is called by the provider, supplying the buyer's\n *   signature. Contract verifies and releases payment.\n * • Open Dispute Resolution: Any address can become an arbiter – it just needs to deposit a\n *   stake ≥ purchase value when calling `resolveDispute()`. (For brevity we return the stake in\n *   the same tx; extend with lock‑and‑slash logic in later versions.)\n */\ncontract ServiceEscrow {\n    using ECDSA for bytes32;\n\n    /// @notice Address of the factory that deployed this contract.\n    address public immutable factory;\n\n    /// @notice Deterministic service identifier = keccak256(serviceName).\n    bytes32 public immutable serviceId;\n\n    /// @notice Wallet address that owns the service and receives payments.\n    address public immutable provider;\n\n    /// @notice Fixed price (in wei) per purchase.\n    uint256 public immutable price;\n\n    /// @notice Human‑readable description or IPFS CID (mutable by provider).\n    string  public description;\n\n    /// @notice CCIP‑Read gateway URL (mutable by provider).\n    string  public gateway;\n\n    /// @notice CCIP‑Read gateway signer address (mutable by provider).\n    address public gatewaySigner;\n\n    /// @dev Incremental identifier for purchases.\n    uint256 public nextPurchaseId;\n\n    /**\n     * @dev Track the lifecycle of each purchase.\n     * @param buyer     Address that paid for the service.\n     * @param amount    Amount of ETH locked (should equal `price`).\n     * @param claimed   True if provider has successfully claimed the funds.\n     * @param disputed  True if buyer raised a dispute.\n     * @param resolved  True if factory resolved the dispute.\n     */\n    struct Purchase {\n        address buyer;\n        uint256 amount;\n        bool    claimed;\n        bool    disputed;\n        bool    resolved;\n    }\n    mapping(uint256 => Purchase) public purchases; // pid ⇒ Purchase\n\n     /// @notice Buyer successfully paid for the service.\n    event ServicePurchased(uint256 indexed purchaseId, address indexed buyer, uint256 amount);\n\n    /// @notice Off‑chain gateway supplied a deliverable hash for a purchase.\n    event OffchainDelivery(uint256 indexed purchaseId, bytes32 deliverableHash);\n\n    /// @notice Provider claimed the locked payment (buyer signature verified).\n    event PaymentClaimed(uint256 indexed purchaseId);\n\n    /// @notice Buyer flagged the purchase for dispute.\n    event DisputeRaised(uint256 indexed purchaseId);\n\n    /// @dev See EIP‑3668 for parameter semantics.\n    error OffchainLookup(\n        address sender,\n        string[] urls,\n        bytes callData,\n        bytes4 callbackFunction,\n        bytes extraData\n    );\n\n    /// @dev Restrict a function to the provider of this service.\n    modifier onlyProvider() {\n        require(msg.sender == provider, \"Escrow: caller is not the provider\");\n        _;\n    }\n\n    /// @dev Restrict a function to the factory that deployed this contract.\n    modifier onlyFactory() {\n        require(msg.sender == factory, \"Escrow: caller is not the factory\");\n        _;\n    }\n\n    uint256 private _locked = 1;\n    modifier nonReentrant() {\n        require(_locked == 1, \"Escrow: reentrant call\");\n        _locked = 2;\n        _;\n        _locked = 1;\n    }\n\n    /**\n     * @param _factory      Address of the EscroDotFactory contract.\n     * @param _serviceId    keccak256 hash of the chosen service name.\n     * @param _provider     Owner of the service.\n     * @param _price        Fixed price per purchase (wei).\n     * @param _gateway      HTTPS/IPFS URL implementing the CCIP‑Read spec.\n     * @param _gatewaySigner Address of the CCIP‑Read gateway signer.\n     * @param _description  Short text or IPFS CID describing the service.\n     */\n    constructor(\n        address _factory,\n        bytes32 _serviceId,\n        address _provider,\n        uint256 _price,\n        string memory _gateway,\n        address _gatewaySigner,\n        string memory _description\n    ) {\n        require(_factory != address(0), \"Escrow: factory is zero address\");\n        require(_provider != address(0), \"Escrow: provider is zero address\");\n        require(_price > 0, \"Escrow: price must be > 0\");\n        require(bytes(_gateway).length > 0, \"Escrow: gateway cannot be empty\");\n        require(_gatewaySigner != address(0), \"Escrow: gateway signer cannot be zero address\");\n        factory      = _factory;\n        serviceId    = _serviceId;\n        provider     = _provider;\n        price        = _price;\n        gateway      = _gateway;\n        gatewaySigner = _gatewaySigner;\n        description  = _description;\n    }\n\n    /**\n     * @notice Purchase the service by locking `price` ETH in this contract.\n     * @return purchaseId  A unique identifier for this purchase.\n     */\n    function buyService() external payable nonReentrant returns (uint256 purchaseId) {\n        require(msg.value == price, \"Escrow: incorrect payment amount\");\n\n        purchaseId = nextPurchaseId++;\n        purchases[purchaseId] = Purchase({\n            buyer: msg.sender,\n            amount: msg.value,\n            claimed: false,\n            disputed: false,\n            resolved: false\n        });\n\n        emit ServicePurchased(purchaseId, msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Trigger an ERC‑3668 OffchainLookup so that a gateway can return the deliverable.\n     * @param purchaseId  Identifier of the purchase to query.\n     * @param userInput   Arbitrary payload forwarded to the gateway (e.g., API key, prompt).\n     *\n     * The caller MUST handle the OffchainLookup error, perform the HTTPS request(s) to the\n     * provided `gateway`, then call `ccipCallback` with the ABI‑encoded response.\n     */\n    function checkDelivery(uint256 purchaseId, bytes calldata userInput) external view {\n        require(purchases[purchaseId].amount > 0, \"Escrow: invalid purchase id\");\n\n        string[] memory urls = new string[](1);\n        urls[0] = gateway;\n\n        revert OffchainLookup({\n            sender: address(this),\n            urls: urls,\n            callData: abi.encode(userInput, purchaseId),\n            callbackFunction: this.ccipCallback.selector,\n            extraData: abi.encode(purchaseId)\n        });\n    }\n\n    /**\n     * @notice CCIP‑Read callback that simply logs the deliverable hash off‑chain.\n     * @dev  No state change other than the event emission so the provider can later claim.\n     */\n    function ccipCallback(bytes calldata response, bytes calldata extraData)\n        external\n        view\n        returns (bytes memory)\n    {\n        (address signer, bytes memory result) = SignatureVerifier.verify(\n            extraData,\n            response\n        );\n        require(signer == gatewaySigner, \"SignatureVerifier: Invalid signature\");\n        return result;\n    }\n\n    /**\n     * @notice Provider claims funds by presenting a buyer‑signed message.\n     * @param purchaseId       Identifier of the purchase to claim.\n     * @param deliverableHash  Hash returned by the CCIP gateway (buyer has inspected).\n     * @param buyerSignature   ECDSA signature of the buyer over the claim digest.\n     */\n    function claimPayment(\n        uint256 purchaseId,\n        bytes32 deliverableHash,\n        bytes calldata buyerSignature\n    ) external nonReentrant onlyProvider {\n        Purchase storage purchase = purchases[purchaseId];\n\n        require(!purchase.claimed,  \"Escrow: payment already claimed\");\n        require(!purchase.disputed, \"Escrow: purchase is in dispute\");\n\n        // Verify buyer signature.\n        bytes32 digest = _claimDigest(purchaseId, deliverableHash);\n        address signer = ECDSA.recover(digest, buyerSignature);\n        require(signer == purchase.buyer, \"SignatureVerifier: Invalid signature\");\n\n        purchase.claimed = true;\n        _sendETH(payable(provider), purchase.amount);\n\n        emit PaymentClaimed(purchaseId);\n    }\n\n    function raiseDispute(uint256 purchaseId) external {\n        Purchase storage purchase = purchases[purchaseId];\n\n        require(msg.sender == purchase.buyer, \"Escrow: caller is not the buyer\");\n        require(!purchase.claimed,           \"Escrow: payment already claimed\");\n        require(!purchase.disputed,          \"Escrow: dispute already raised\");\n\n        purchase.disputed = true;\n        emit DisputeRaised(purchaseId);\n    }\n\n    /**\n     * @dev Refunds the buyer – callable only by the factory after successful arbitration.\n     */\n    function factoryRefundBuyer(uint256 purchaseId) external onlyFactory nonReentrant {\n        Purchase storage purchase = purchases[purchaseId];\n        require(purchase.disputed && !purchase.resolved, \"Escrow: invalid state\");\n\n        purchase.resolved = true;\n        _sendETH(payable(purchase.buyer), purchase.amount);\n    }\n\n    /**\n     * @dev Releases funds to the provider – callable only by the factory.\n     */\n    function factoryReleaseToProvider(uint256 purchaseId) external onlyFactory nonReentrant {\n        Purchase storage purchase = purchases[purchaseId];\n        require(!purchase.claimed && purchase.disputed && !purchase.resolved, \"Escrow: invalid state\");\n\n        purchase.resolved = true;\n        _sendETH(payable(provider), purchase.amount);\n    }\n\n    /**\n     * @notice Update the CCIP gateway URL.\n     */\n    function updateGateway(string calldata newGateway) external onlyProvider {\n        require(bytes(newGateway).length > 0, \"Escrow: gateway cannot be empty\");\n        gateway = newGateway;\n    }\n\n    /**\n     * @notice Update the human‑readable description.\n     */\n    function updateDescription(string calldata newDescription) external onlyProvider {\n        description = newDescription;\n    }\n\n    /**\n     * @notice Update the CCIP gateway signer address.\n     */\n    function updateGatewaySigner(address newSigner) external onlyProvider {\n        require(newSigner != address(0), \"Escrow: signer cannot be zero address\");\n        gatewaySigner = newSigner;\n    }\n\n    /**\n     * @dev Compute the digest that a buyer must sign to authorise payment.\n     */\n    function claimDigest(uint256 purchaseId, bytes32 deliverableHash) external view returns (bytes32) {\n        return _claimDigest(purchaseId, deliverableHash);\n    }\n\n    /**\n     * @dev Internal: generate claim digest without message prefix.\n     */\n    function _claimDigest(uint256 purchaseId, bytes32 deliverableHash) internal view returns (bytes32) {\n        return keccak256(abi.encode(address(this), purchaseId, deliverableHash));\n    }\n\n    /**\n     * @dev Internal helper to send ETH and bubble up any failure.\n     */\n    function _sendETH(address payable to, uint256 amount) private {\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Escrow: ETH transfer failed\");\n    }\n\n    /// @notice Receive function – allows provider to top‑up escrow if ever needed.\n    receive() external payable {}\n}\n\n/**\n * @title EscroDotFactory\n * @notice Deploys ServiceEscrow contracts and manages provider stakes & arbitration.\n */\ncontract EscroDotFactory {\n    /* ---------------------------------------------------------------------- */\n    /*                              Service Registry                           */\n    /* ---------------------------------------------------------------------- */\n\n    /// @notice Map: serviceId ⇒ ServiceEscrow contract address.\n    mapping(bytes32 => address) public services;\n\n    /// @notice List of all serviceIds (for off‑chain pagination).\n    bytes32[] public serviceIds;\n\n    /* ---------------------------------------------------------------------- */\n    /*                                 Stakes                                  */\n    /* ---------------------------------------------------------------------- */\n\n    /// @notice Map: serviceId ⇒ provider's collateral (held by factory).\n    mapping(bytes32 => uint256) public stakes;\n\n    /* ---------------------------------------------------------------------- */\n    /*                                   Events                                */\n    /* ---------------------------------------------------------------------- */\n\n    /// @notice New service deployed.\n    event ServiceDeployed(bytes32 indexed serviceId, string name, address escrow, address indexed provider, uint256 stake);\n\n    /// @notice Provider topped up their stake.\n    event StakeToppedUp(bytes32 indexed serviceId, uint256 amount, uint256 newTotal);\n\n    /// @notice Provider withdrew part of their stake.\n    event StakeWithdrawn(bytes32 indexed serviceId, uint256 amount, uint256 newTotal);\n\n    /// @notice Dispute resolved by an arbiter.\n    event DisputeResolved(bytes32 indexed serviceId, uint256 indexed purchaseId, bool refunded, address indexed arbiter);\n\n    /**\n     * @param name         Human‑readable service name (unique).\n     * @param price        Fixed price in wei.\n     * @param gateway      CCIP‑Read endpoint.\n     * @param description  IPFS CID or text description.\n     *\n     * `msg.value` – initial stake (must be ≥ `price`).\n     */\n    function createService(\n        string calldata name,\n        uint256 price,\n        string calldata gateway,\n        address gatewaySigner,\n        string calldata description\n    ) external payable returns (address escrow) {\n        require(bytes(name).length > 0, \"Factory: name cannot be empty\");\n        require(msg.value >= price,     \"Factory: stake must cover at least one refund\");\n\n        bytes32 serviceId = keccak256(bytes(name));\n        require(services[serviceId] == address(0), \"Factory: service name already taken\");\n\n        ServiceEscrow newEscrow = new ServiceEscrow({\n            _factory: address(this),\n            _serviceId: serviceId,\n            _provider: msg.sender,\n            _price: price,\n            _gateway: gateway,\n            _gatewaySigner: gatewaySigner,\n            _description: description\n        });\n\n        services[serviceId] = address(newEscrow);\n        serviceIds.push(serviceId);\n        stakes[serviceId] = msg.value;\n\n        emit ServiceDeployed(serviceId, name, address(newEscrow), msg.sender, msg.value);\n\n        return address(newEscrow);\n    }\n\n    /** @notice Increase stake for a service. */\n    function topUpStake(bytes32 serviceId) external payable {\n        address escrowAddr = services[serviceId];\n        require(escrowAddr != address(0), \"Factory: unknown service\");\n\n        // Only the service provider can top‑up\n        require(msg.sender == ServiceEscrow(payable(escrowAddr)).provider(), \"Factory: caller is not provider\");\n\n        stakes[serviceId] += msg.value;\n        emit StakeToppedUp(serviceId, msg.value, stakes[serviceId]);\n    }\n\n    /**\n     * @notice Withdraw unused stake (cannot exceed balance held by factory).\n     */\n    function withdrawStake(bytes32 serviceId, uint256 amount) external {\n        address escrowAddr = services[serviceId];\n        require(escrowAddr != address(0), \"Factory: unknown service\");\n\n        ServiceEscrow escrow = ServiceEscrow(payable(escrowAddr));\n        require(msg.sender == escrow.provider(), \"Factory: caller is not provider\");\n        require(amount <= stakes[serviceId], \"Factory: insufficient stake balance\");\n\n        stakes[serviceId] -= amount;\n        _sendETH(payable(msg.sender), amount);\n\n        emit StakeWithdrawn(serviceId, amount, stakes[serviceId]);\n    }\n\n    /**\n     * @notice Resolve a dispute. Anyone can act as arbiter by bonding ≥ price.\n     * @param serviceId   Service identifier.\n     * @param purchaseId  Identifier within the ServiceEscrow contract.\n     * @param refundBuyer If true, refund buyer; otherwise release to provider.\n     */\n    function resolveDispute(\n        bytes32 serviceId,\n        uint256 purchaseId,\n        bool refundBuyer\n    ) external payable {\n        address escrowAddr = services[serviceId];\n        require(escrowAddr != address(0), \"Factory: unknown service\");\n\n        ServiceEscrow escrow = ServiceEscrow(payable(escrowAddr));\n\n        // Require a bond ≥ price to discourage frivolous rulings.\n        require(msg.value >= escrow.price(), \"Factory: arbiter bond too low\");\n\n        if (refundBuyer) {\n            require(stakes[serviceId] >= escrow.price(), \"Factory: provider stake insufficient\");\n            stakes[serviceId] -= escrow.price();\n            escrow.factoryRefundBuyer(purchaseId);\n        } else {\n            // Provider wins; no slash.\n            escrow.factoryReleaseToProvider(purchaseId);\n        }\n\n        // Return arbiter bond immediately in v1.2. Extend with delayed release in prod.\n        _sendETH(payable(msg.sender), msg.value);\n\n        emit DisputeResolved(serviceId, purchaseId, refundBuyer, msg.sender);\n    }\n\n    /// @return ids         Array of all service IDs.\n    /// @return escrows     Parallel array of escrow contract addresses.\n    function listServices() external view returns (bytes32[] memory ids, address[] memory escrows) {\n        ids     = serviceIds;\n        escrows = new address[](ids.length);\n        for (uint256 i = 0; i < ids.length; ++i) {\n            escrows[i] = services[ids[i]];\n        }\n    }\n\n    function _sendETH(address payable to, uint256 amount) private {\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Factory: ETH transfer failed\");\n    }\n\n    receive() external payable {\n        revert(\"Factory: direct ETH not accepted\");\n    }\n}"
			},
			"SignatureVerifier.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\nimport \"./ECDSA.sol\";\n\nlibrary SignatureVerifier {\n    /**\n     * @dev Generates a hash for signing/verifying.\n     * @param target: The address the signature is for.\n     * @param request: The original request that was sent.\n     * @param result: The `result` field of the response (not including the signature part).\n     */\n    function makeSignatureHash(\n        address target,\n        uint64 expires,\n        bytes memory request,\n        bytes memory result\n    ) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encodePacked(\n                    hex\"1900\",\n                    target,\n                    expires,\n                    keccak256(request),\n                    keccak256(result)\n                )\n            );\n    }\n\n    /**\n     * @dev Verifies a signed message returned from a callback.\n     * @param request: The original request that was sent.\n     * @param response: An ABI encoded tuple of `(bytes result, uint64 expires, bytes sig)`, where `result` is the data to return\n     *        to the caller, and `sig` is the (r,s,v) encoded message signature.\n     * @return signer: The address that signed this message.\n     * @return result: The `result` decoded from `response`.\n     */\n    function verify(\n        bytes calldata request,\n        bytes calldata response\n    ) internal view returns (address, bytes memory) {\n        (bytes memory result, uint64 expires, bytes memory sig) = abi.decode(\n            response,\n            (bytes, uint64, bytes)\n        );\n        address signer = ECDSA.recover(\n            makeSignatureHash(address(this), expires, request, result),\n            sig\n        );\n        require(\n            expires >= block.timestamp,\n            \"SignatureVerifier: Signature expired\"\n        );\n        return (signer, result);\n    }\n}"
			},
			"ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 4/65584 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 462\n// Code size = 1356 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20004]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20004] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 [@dyn 1] (gas: 71)\n    64: a1 = reverse s1\n    66: a2 = reverse s0\n    68: a3 = u64 [sp]\n    70: a3 = reverse a3\n    72: a4 = u64 [sp + 0x8]\n    75: a4 = reverse a4\n    77: u8 [a0 + 0x18] = a4\n    80: u8 [a0 + 0x10] = a3\n    83: u8 [a0 + 0x8] = a2\n    86: u8 [a0] = a1\n    88: a5 = a4 >> 0x38\n    91: u8 [a0 + 0x1f] = a5\n    94: a5 = a4 >> 0x30\n    97: u8 [a0 + 0x1e] = a5\n   100: a5 = a4 >> 0x28\n   103: u8 [a0 + 0x1d] = a5\n   106: a5 = a4 >> 0x20\n   109: u8 [a0 + 0x1c] = a5\n   112: a5 = a4 >> 0x18\n   115: u8 [a0 + 0x1b] = a5\n   118: a5 = a4 >> 0x10\n   121: u8 [a0 + 0x1a] = a5\n   124: a4 = a4 >> 0x8\n   127: u8 [a0 + 0x19] = a4\n   130: a4 = a3 >> 0x38\n   133: u8 [a0 + 0x17] = a4\n   136: a4 = a3 >> 0x30\n   139: u8 [a0 + 0x16] = a4\n   142: a4 = a3 >> 0x28\n   145: u8 [a0 + 0x15] = a4\n   148: a4 = a3 >> 0x20\n   151: u8 [a0 + 0x14] = a4\n   154: a4 = a3 >> 0x18\n   157: u8 [a0 + 0x13] = a4\n   160: a4 = a3 >> 0x10\n   163: u8 [a0 + 0x12] = a4\n   166: a3 = a3 >> 0x8\n   169: u8 [a0 + 0x11] = a3\n   172: a3 = a2 >> 0x38\n   175: u8 [a0 + 0xf] = a3\n   178: a3 = a2 >> 0x30\n   181: u8 [a0 + 0xe] = a3\n   184: a3 = a2 >> 0x28\n   187: u8 [a0 + 0xd] = a3\n   190: a3 = a2 >> 0x20\n   193: u8 [a0 + 0xc] = a3\n   196: a3 = a2 >> 0x18\n   199: u8 [a0 + 0xb] = a3\n   202: a3 = a2 >> 0x10\n   205: u8 [a0 + 0xa] = a3\n   208: a2 = a2 >> 0x8\n   211: u8 [a0 + 0x9] = a2\n   214: a2 = a1 >> 0x38\n   217: u8 [a0 + 0x7] = a2\n   220: a2 = a1 >> 0x30\n   223: u8 [a0 + 0x6] = a2\n   226: a2 = a1 >> 0x28\n   229: u8 [a0 + 0x5] = a2\n   232: a2 = a1 >> 0x20\n   235: u8 [a0 + 0x4] = a2\n   238: a2 = a1 >> 0x18\n   241: u8 [a0 + 0x3] = a2\n   244: a2 = a1 >> 0x10\n   247: u8 [a0 + 0x2] = a2\n   250: a1 = a1 >> 0x8\n   253: u8 [a0 + 0x1] = a1\n   256: ra = u64 [sp + 0x20]\n   259: s0 = u64 [sp + 0x18]\n   262: s1 = u64 [sp + 0x10]\n   265: sp = sp + 0x28\n   268: ret\n      : @9 (gas: 6)\n   270: sp = sp + 0xfffffffffffffff0\n   273: u64 [sp + 0x8] = ra\n   276: u64 [sp] = s0\n   278: s0 = a0 & 0x1\n   281: ecalli 2 // 'call_data_size'\n   283: fallthrough\n      : @10 (gas: 2)\n   284: u32 [0x20008] = a0\n   289: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   292: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   296: ra = 6, jump @27\n      : @13 [@dyn 3] (gas: 9)\n   301: sp = sp + 0xffffffffffffffa0\n   304: u64 [sp + 0x58] = ra\n   307: u64 [sp + 0x50] = s0\n   310: u64 [sp + 0x48] = s1\n   313: s0 = sp + 0x60\n   316: sp = sp & 0xffffffffffffffe0\n   319: a0 = 0x40\n   322: a1 = 0x20\n   325: ra = 8, jump @0\n      : @14 [@dyn 4] (gas: 39)\n   330: u8 [a0 + 31] = 0x80\n   335: u8 [a0 + 30] = 0\n   338: u8 [a0 + 29] = 0\n   341: u8 [a0 + 28] = 0\n   344: u8 [a0 + 27] = 0\n   347: u8 [a0 + 26] = 0\n   350: u8 [a0 + 25] = 0\n   353: u8 [a0 + 24] = 0\n   356: u8 [a0 + 23] = 0\n   359: u8 [a0 + 22] = 0\n   362: u8 [a0 + 21] = 0\n   365: u8 [a0 + 20] = 0\n   368: u8 [a0 + 19] = 0\n   371: u8 [a0 + 18] = 0\n   374: u8 [a0 + 17] = 0\n   377: u8 [a0 + 16] = 0\n   380: u8 [a0 + 15] = 0\n   383: u8 [a0 + 14] = 0\n   386: u8 [a0 + 13] = 0\n   389: u8 [a0 + 12] = 0\n   392: u8 [a0 + 11] = 0\n   395: u8 [a0 + 10] = 0\n   398: u8 [a0 + 9] = 0\n   401: u8 [a0 + 8] = 0\n   404: u8 [a0 + 7] = 0\n   407: u8 [a0 + 6] = 0\n   410: u8 [a0 + 5] = 0\n   413: u8 [a0 + 4] = 0\n   416: u8 [a0 + 3] = 0\n   419: u8 [a0 + 2] = 0\n   422: u8 [a0 + 1] = 0\n   425: u8 [a0 + 0] = 0\n   427: u64 [sp + 24] = 0\n   430: u64 [sp + 0] = 0\n   432: u64 [sp + 8] = 0\n   435: u64 [sp + 16] = 0\n   438: i32 a0 = sp + 0\n   440: ecalli 5 // 'value_transferred'\n   442: fallthrough\n      : @15 (gas: 8)\n   443: a0 = u64 [sp + 0x10]\n   446: a1 = u64 [sp + 0x18]\n   449: a2 = u64 [sp + 0x8]\n   452: a3 = u64 [sp]\n   454: a1 = a1 | a2\n   457: a0 = a0 | a3\n   460: a0 = a0 | a1\n   463: jump @19 if a0 != 0\n      : @16 (gas: 3)\n   467: a0 = 0x40\n   470: a1 = 0x20\n   473: ra = 10, jump @0\n      : @17 [@dyn 5] (gas: 100)\n   478: a1 = u8 [a0 + 0x11]\n   481: a2 = u8 [a0 + 0x10]\n   484: a3 = u8 [a0 + 0x12]\n   487: a4 = u8 [a0 + 0x13]\n   490: a1 = a1 << 0x8\n   493: a1 = a1 | a2\n   496: a3 = a3 << 0x10\n   499: a4 = a4 << 0x18\n   502: a3 = a3 | a4\n   505: a1 = a1 | a3\n   508: a2 = u8 [a0 + 0x15]\n   511: a3 = u8 [a0 + 0x14]\n   514: a4 = u8 [a0 + 0x16]\n   517: a5 = u8 [a0 + 0x17]\n   520: a2 = a2 << 0x8\n   523: a2 = a2 | a3\n   526: a4 = a4 << 0x10\n   529: a5 = a5 << 0x18\n   532: a4 = a4 | a5\n   535: a2 = a2 | a4\n   538: a2 = a2 << 0x20\n   541: t0 = a2 | a1\n   544: a2 = u8 [a0 + 0x1]\n   547: a3 = u8 [a0]\n   549: a4 = u8 [a0 + 0x2]\n   552: a5 = u8 [a0 + 0x3]\n   555: a2 = a2 << 0x8\n   558: a2 = a2 | a3\n   561: a4 = a4 << 0x10\n   564: a5 = a5 << 0x18\n   567: a4 = a4 | a5\n   570: a2 = a2 | a4\n   573: a3 = u8 [a0 + 0x5]\n   576: a4 = u8 [a0 + 0x4]\n   579: a5 = u8 [a0 + 0x6]\n   582: s1 = u8 [a0 + 0x7]\n   585: a3 = a3 << 0x8\n   588: a3 = a3 | a4\n   591: a5 = a5 << 0x10\n   594: s1 = s1 << 0x18\n   597: a5 = a5 | s1\n   600: a3 = a3 | a5\n   603: a3 = a3 << 0x20\n   606: a2 = a2 | a3\n   609: a3 = u8 [a0 + 0x19]\n   612: a4 = u8 [a0 + 0x18]\n   615: a5 = u8 [a0 + 0x1a]\n   618: s1 = u8 [a0 + 0x1b]\n   621: a3 = a3 << 0x8\n   624: a3 = a3 | a4\n   627: a5 = a5 << 0x10\n   630: s1 = s1 << 0x18\n   633: a5 = a5 | s1\n   636: a3 = a3 | a5\n   639: a4 = u8 [a0 + 0x1d]\n   642: a5 = u8 [a0 + 0x1c]\n   645: s1 = u8 [a0 + 0x1e]\n   648: a1 = u8 [a0 + 0x1f]\n   651: a4 = a4 << 0x8\n   654: a4 = a4 | a5\n   657: s1 = s1 << 0x10\n   660: a1 = a1 << 0x18\n   663: a1 = a1 | s1\n   666: a1 = a1 | a4\n   669: a1 = a1 << 0x20\n   672: a3 = a3 | a1\n   675: a1 = u8 [a0 + 0x9]\n   678: a4 = u8 [a0 + 0x8]\n   681: a5 = u8 [a0 + 0xa]\n   684: s1 = u8 [a0 + 0xb]\n   687: a1 = a1 << 0x8\n   690: a1 = a1 | a4\n   693: a5 = a5 << 0x10\n   696: s1 = s1 << 0x18\n   699: a5 = a5 | s1\n   702: a1 = a1 | a5\n   705: a4 = u8 [a0 + 0xd]\n   708: a5 = u8 [a0 + 0xc]\n   711: s1 = u8 [a0 + 0xe]\n   714: a0 = u8 [a0 + 0xf]\n   717: a4 = a4 << 0x8\n   720: a4 = a4 | a5\n   723: s1 = s1 << 0x10\n   726: a0 = a0 << 0x18\n   729: a0 = a0 | s1\n   732: a0 = a0 | a4\n   735: a0 = a0 << 0x20\n   738: a0 = a0 | a1\n   741: a0 = reverse a0\n   743: s1 = reverse a3\n   745: a1 = reverse a2\n   747: a2 = reverse t0\n   749: a1 = a1 | a2\n   752: a2 = s1 | a0\n   755: a2 = a2 | a1\n   758: a2 = a2 >> 0x20\n   761: a0 = a0 | a1\n   764: a0 = a0 << 0x20\n   767: a0 = a0 | a2\n   770: jump @21 if a0 == 0\n      : @18 (gas: 1)\n   773: trap\n      : @19 (gas: 3)\n   774: a0 = 0\n   776: a1 = 0\n   778: ra = 12, jump @0\n      : @20 [@dyn 6] (gas: 5)\n   783: i32 a1 = a0 + 0\n   785: a0 = 0x1\n   788: a2 = 0\n   790: ecalli 3 // 'seal_return'\n   792: fallthrough\n      : @21 (gas: 4)\n   793: i32 s1 = s1 + 0\n   795: a0 = s1\n   797: a1 = 0\n   799: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 7)\n   804: i32 a0 = a0 + 0\n   806: a1 = 0\n   808: a2 = 0\n   810: ecalli 1 // 'call_data_copy'\n   812: i32 a0 = sp + 0x20\n   815: ecalli 0 // 'address'\n   816: fallthrough\n      : @23 (gas: 21)\n   817: a0 = u64 [sp + 0x28]\n   820: a1 = i32 [sp + 0x30]\n   823: a2 = u64 [sp + 0x20]\n   826: a0 = reverse a0\n   828: a3 = a0 << 0x20\n   831: a1 = reverse a1\n   833: a1 = a1 >> 0x20\n   836: a3 = a3 | a1\n   839: a1 = a0 >> 0x20\n   842: a2 = reverse a2\n   844: a4 = a2 << 0x20\n   847: a5 = 0x20000\n   852: a0 = 0x30010\n   857: a4 = a4 | a1\n   860: a2 = a2 >> 0x20\n   863: a1 = i32 [0x20000]\n   868: u64 [0x30020] = a2\n   873: u64 [0x30028] = 0\n   878: u64 [0x30018] = a4\n   883: u64 [0x30010] = a3\n   888: jump @25 if a1 == 0\n      : @24 (gas: 3)\n   891: i32 a0 = a0 + 0\n   893: ecalli 4 // 'set_immutable_data'\n   895: fallthrough\n      : @25 (gas: 3)\n   896: a0 = s1\n   898: a1 = 0\n   900: ra = 16, jump @0\n      : @26 [@dyn 8] (gas: 6)\n   905: i32 a1 = a0 + 0\n   907: a0 = 0\n   909: a2 = 0\n   911: ra = 0x12\n   914: ecalli 3 // 'seal_return'\n   916: fallthrough\n      : @27 [@dyn 9] (gas: 25)\n   917: sp = sp + 0xffffffffffffffd0\n   920: u64 [sp + 0x28] = ra\n   923: u64 [sp + 0x20] = s0\n   926: s0 = sp + 0x30\n   929: sp = sp & 0xfffffffffffffff0\n   932: u64 [sp + 24] = 0\n   935: u64 [sp + 16] = 0\n   938: u64 [sp + 0] = 0x80\n   942: a1 = sp\n   944: u64 [sp + 8] = 0\n   947: ra = 0x14\n   950: sp = sp + 0xffffffffffffffd8\n   953: u64 [sp + 0x20] = ra\n   956: u64 [sp + 0x18] = s0\n   959: u64 [sp + 0x10] = s1\n   962: a2 = u64 [a1]\n   964: u64 [sp + 0x8] = a2\n   967: a2 = u64 [a1 + 0x8]\n   970: u64 [sp] = a2\n   972: s0 = u64 [a1 + 0x10]\n   975: s1 = u64 [a1 + 0x18]\n   978: a0 = 0x40\n   981: a1 = 0x20\n   984: ra = 0x2\n   987: jump @0\n      : @28 [@dyn 10] (gas: 1)\n   990: ra = 22, jump @31\n      : @29 [@dyn 11] (gas: 7)\n   995: sp = sp + 0xfffffffffffffff0\n   998: u64 [sp + 0x8] = ra\n  1001: u64 [sp] = s0\n  1003: s0 = a0\n  1005: a0 = 0x40\n  1008: a1 = 0x20\n  1011: ra = 24, jump @0\n      : @30 [@dyn 12] (gas: 100)\n  1016: a1 = u8 [a0 + 0x1]\n  1019: a2 = u8 [a0]\n  1021: a3 = u8 [a0 + 0x2]\n  1024: a4 = u8 [a0 + 0x3]\n  1027: a1 = a1 << 0x8\n  1030: a1 = a1 | a2\n  1033: a3 = a3 << 0x10\n  1036: a4 = a4 << 0x18\n  1039: a3 = a3 | a4\n  1042: a1 = a1 | a3\n  1045: a2 = u8 [a0 + 0x5]\n  1048: a3 = u8 [a0 + 0x4]\n  1051: a4 = u8 [a0 + 0x6]\n  1054: a5 = u8 [a0 + 0x7]\n  1057: a2 = a2 << 0x8\n  1060: a2 = a2 | a3\n  1063: a4 = a4 << 0x10\n  1066: a5 = a5 << 0x18\n  1069: a4 = a4 | a5\n  1072: a2 = a2 | a4\n  1075: a2 = a2 << 0x20\n  1078: t0 = a2 | a1\n  1081: a2 = u8 [a0 + 0x9]\n  1084: a3 = u8 [a0 + 0x8]\n  1087: a4 = u8 [a0 + 0xa]\n  1090: a5 = u8 [a0 + 0xb]\n  1093: a2 = a2 << 0x8\n  1096: a2 = a2 | a3\n  1099: a4 = a4 << 0x10\n  1102: a5 = a5 << 0x18\n  1105: a4 = a4 | a5\n  1108: a2 = a2 | a4\n  1111: a3 = u8 [a0 + 0xd]\n  1114: a4 = u8 [a0 + 0xc]\n  1117: a5 = u8 [a0 + 0xe]\n  1120: a1 = u8 [a0 + 0xf]\n  1123: a3 = a3 << 0x8\n  1126: a3 = a3 | a4\n  1129: a5 = a5 << 0x10\n  1132: a1 = a1 << 0x18\n  1135: a1 = a1 | a5\n  1138: a1 = a1 | a3\n  1141: a1 = a1 << 0x20\n  1144: t1 = a1 | a2\n  1147: a1 = u8 [a0 + 0x11]\n  1150: a3 = u8 [a0 + 0x10]\n  1153: a4 = u8 [a0 + 0x12]\n  1156: a5 = u8 [a0 + 0x13]\n  1159: a1 = a1 << 0x8\n  1162: a1 = a1 | a3\n  1165: a4 = a4 << 0x10\n  1168: a5 = a5 << 0x18\n  1171: a4 = a4 | a5\n  1174: a1 = a1 | a4\n  1177: a3 = u8 [a0 + 0x15]\n  1180: a4 = u8 [a0 + 0x14]\n  1183: a5 = u8 [a0 + 0x16]\n  1186: a2 = u8 [a0 + 0x17]\n  1189: a3 = a3 << 0x8\n  1192: a3 = a3 | a4\n  1195: a5 = a5 << 0x10\n  1198: a2 = a2 << 0x18\n  1201: a2 = a2 | a5\n  1204: a2 = a2 | a3\n  1207: a2 = a2 << 0x20\n  1210: a3 = a2 | a1\n  1213: a1 = u8 [a0 + 0x19]\n  1216: a2 = u8 [a0 + 0x18]\n  1219: a4 = u8 [a0 + 0x1a]\n  1222: a5 = u8 [a0 + 0x1b]\n  1225: a1 = a1 << 0x8\n  1228: a1 = a1 | a2\n  1231: a4 = a4 << 0x10\n  1234: a5 = a5 << 0x18\n  1237: a4 = a4 | a5\n  1240: a1 = a1 | a4\n  1243: a2 = u8 [a0 + 0x1d]\n  1246: a4 = u8 [a0 + 0x1c]\n  1249: a5 = u8 [a0 + 0x1e]\n  1252: a0 = u8 [a0 + 0x1f]\n  1255: a2 = a2 << 0x8\n  1258: a2 = a2 | a4\n  1261: a5 = a5 << 0x10\n  1264: a0 = a0 << 0x18\n  1267: a0 = a0 | a5\n  1270: a0 = a0 | a2\n  1273: a0 = a0 << 0x20\n  1276: a0 = a0 | a1\n  1279: a0 = reverse a0\n  1281: a1 = reverse a3\n  1283: a2 = reverse t1\n  1285: a3 = reverse t0\n  1287: u64 [s0 + 0x18] = a3\n  1290: u64 [s0 + 0x10] = a2\n  1293: u64 [s0 + 0x8] = a1\n  1296: u64 [s0] = a0\n  1298: ra = u64 [sp + 0x8]\n  1301: s0 = u64 [sp]\n  1303: sp = sp + 0x10\n  1306: ret\n      : @31 (gas: 5)\n  1308: sp = sp + 0xfffffffffffffff8\n  1311: u64 [sp] = ra\n  1313: a0 = 0\n  1315: a1 = 0\n  1317: ra = 26, jump @0\n      : @32 [@dyn 13] (gas: 7)\n  1322: i32 a1 = a0 + 0\n  1324: a0 = 0x1\n  1327: a2 = 0\n  1329: ecalli 3 // 'seal_return'\n  1331: a0 = 0\n  1333: ra = 0x1c\n  1336: jump @9\n      : @33 [export #0: 'call'] (gas: 2)\n  1339: a0 = 0\n  1341: ra = 28, jump @9\n      : @34 [@dyn 14] [export #1: 'deploy'] (gas: 2)\n  1346: a0 = 0x1\n  1349: ra = 30, jump @9\n      : @35 [@dyn 15] (gas: 1)\n  1354: jump @31\n",
						"bytecode": {
							"object": "50564d0000b706000000000000010700c13000c00040030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102853b0463616c6c8542066465706c6f790686180f02854c400028012d014a01de010f03240389039503de03e303f8032a0542054a058b791052093b3309010001ae9833c8780883881f8488e0553801000128390a040002ae8a123d080400023308100002c8870732003308100002c88707320000006f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a02013d07080002510507501004095010066d029511a07b10587b15507b16489515608411e0330740330820501008bbfe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a0501821710821818821908821ad49808d4a707d487075207370133074033082050100a27fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cf6fc837833070133090a030183666467330850100ee1fc8377330833090a018317200a018217288118308219206f77977a206f88988820d48a0a9878206f99979b20330c0000023307100003d48b0b98992039080000023e0920000321032800033e0b1800033e0a10000351080883770a0401646733085010107cfc8378330733093300120a03019511d07b10287b15209515308411f04911184911104901800064184911083300149511d87b10207b15187b161082897b19088289087b198285108286183307403308203300022825fc5010163e019511f07b10087b1564753307403308205010180dfc7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511f87b103307330850101adbfa837833070133090a03330733001c28d6fb330750101cd1fb33070150101ec9fb28d249489220248414d25529494992244992244992244992244992244992244992244952521a12214992248424499224499224499224494a494d529248429224499224499224294992244992244992244992244992244992244992244992a42a4992648552ab5095939492941092104208a915aa34499244499294942449482a09294992244992244992244992244992244992244992244992244992244992244992aa24a5942a942a29240400"
						},
						"deployedBytecode": {
							"object": "50564d0000b706000000000000010700c13000c00040030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102853b0463616c6c8542066465706c6f790686180f02854c400028012d014a01de010f03240389039503de03e303f8032a0542054a058b791052093b3309010001ae9833c8780883881f8488e0553801000128390a040002ae8a123d080400023308100002c8870732003308100002c88707320000006f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a02013d07080002510507501004095010066d029511a07b10587b15507b16489515608411e0330740330820501008bbfe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a0501821710821818821908821ad49808d4a707d487075207370133074033082050100a27fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cf6fc837833070133090a030183666467330850100ee1fc8377330833090a018317200a018217288118308219206f77977a206f88988820d48a0a9878206f99979b20330c0000023307100003d48b0b98992039080000023e0920000321032800033e0b1800033e0a10000351080883770a0401646733085010107cfc8378330733093300120a03019511d07b10287b15209515308411f04911184911104901800064184911083300149511d87b10207b15187b161082897b19088289087b198285108286183307403308203300022825fc5010163e019511f07b10087b1564753307403308205010180dfc7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511f87b103307330850101adbfa837833070133090a03330733001c28d6fb330750101cd1fb33070150101ec9fb28d249489220248414d25529494992244992244992244992244992244992244992244952521a12214992248424499224499224499224494a494d529248429224499224499224294992244992244992244992244992244992244992244992a42a4992648552ab5095939492941092104208a915aa34499244499294942449482a09294992244992244992244992244992244992244992244992244992244992244992aa24a5942a942a29240400"
						},
						"methodIdentifiers": {}
					},
					"irOptimized": "/// @use-src 0:\"ECDSA.sol\"\nobject \"ECDSA_347\" {\n    code {\n        {\n            /// @src 0:344:7730  \"library ECDSA {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"ECDSA_347_deployed\"), datasize(\"ECDSA_347_deployed\"))\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, datasize(\"ECDSA_347_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"ECDSA.sol\"\n    object \"ECDSA_347_deployed\" {\n        code {\n            {\n                /// @src 0:344:7730  \"library ECDSA {...\"\n                mstore(64, memoryguard(0x80))\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n        }\n        data \".metadata\" hex\"a2646970667358221220b6f9c04b57eb7b95b30149f94c3f0969ea0f2767964317ba9dc684d72a1b581864736f6c634300081c0033\"\n    }\n}\n",
					"hash": "fab3d82f9929e7670e2b5da35abe1f8496614c48168bb74d24f035eb11c39480",
					"factoryDependencies": {}
				}
			},
			"EscroDot.sol": {
				"EscroDotFactory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "refunded",
									"type": "bool"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "arbiter",
									"type": "address"
								}
							],
							"name": "DisputeResolved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "address",
									"name": "escrow",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "provider",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "stake",
									"type": "uint256"
								}
							],
							"name": "ServiceDeployed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newTotal",
									"type": "uint256"
								}
							],
							"name": "StakeToppedUp",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newTotal",
									"type": "uint256"
								}
							],
							"name": "StakeWithdrawn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "gateway",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "gatewaySigner",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "description",
									"type": "string"
								}
							],
							"name": "createService",
							"outputs": [
								{
									"internalType": "address",
									"name": "escrow",
									"type": "address"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "listServices",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "ids",
									"type": "bytes32[]"
								},
								{
									"internalType": "address[]",
									"name": "escrows",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "refundBuyer",
									"type": "bool"
								}
							],
							"name": "resolveDispute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "serviceIds",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "services",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "stakes",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								}
							],
							"name": "topUpStake",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"ServiceDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"StakeToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gateway\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"gatewaySigner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createService\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"escrow\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listServices\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"escrows\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refundBuyer\",\"type\":\"bool\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"serviceIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"services\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"name\":\"topUpStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"createService(string,uint256,string,address,string)\":{\"params\":{\"description\":\"IPFS CID or text description. `msg.value` \\u2013 initial stake (must be \\u2265 `price`).\",\"gateway\":\"CCIP\\u2011Read endpoint.\",\"name\":\"Human\\u2011readable service name (unique).\",\"price\":\"Fixed price in wei.\"}},\"listServices()\":{\"returns\":{\"escrows\":\"    Parallel array of escrow contract addresses.\",\"ids\":\"        Array of all service IDs.\"}},\"resolveDispute(bytes32,uint256,bool)\":{\"params\":{\"purchaseId\":\"Identifier within the ServiceEscrow contract.\",\"refundBuyer\":\"If true, refund buyer; otherwise release to provider.\",\"serviceId\":\"Service identifier.\"}}},\"title\":\"EscroDotFactory\",\"version\":1},\"userdoc\":{\"events\":{\"DisputeResolved(bytes32,uint256,bool,address)\":{\"notice\":\"Dispute resolved by an arbiter.\"},\"ServiceDeployed(bytes32,string,address,address,uint256)\":{\"notice\":\"New service deployed.\"},\"StakeToppedUp(bytes32,uint256,uint256)\":{\"notice\":\"Provider topped up their stake.\"},\"StakeWithdrawn(bytes32,uint256,uint256)\":{\"notice\":\"Provider withdrew part of their stake.\"}},\"kind\":\"user\",\"methods\":{\"resolveDispute(bytes32,uint256,bool)\":{\"notice\":\"Resolve a dispute. Anyone can act as arbiter by bonding \\u2265 price.\"},\"serviceIds(uint256)\":{\"notice\":\"List of all serviceIds (for off\\u2011chain pagination).\"},\"services(bytes32)\":{\"notice\":\"Map: serviceId \\u21d2 ServiceEscrow contract address.\"},\"stakes(bytes32)\":{\"notice\":\"Map: serviceId \\u21d2 provider's collateral (held by factory).\"},\"topUpStake(bytes32)\":{\"notice\":\"Increase stake for a service. \"},\"withdrawStake(bytes32,uint256)\":{\"notice\":\"Withdraw unused stake (cannot exceed balance held by factory).\"}},\"notice\":\"Deploys ServiceEscrow contracts and manages provider stakes & arbitration.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"EscroDot.sol\":\"EscroDotFactory\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"EscroDot.sol\":{\"keccak256\":\"0x0da4595324bb2cfbe77aa9158c4a3583f5995d28b5a14a164faca98fa08db07f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3a058c9ce1f2048f06828ac2089712453a7ac9dd7a9546bfc31d87594ca86487\",\"dweb:/ipfs/QmWT2psySkPwmPxYneg9AvEsqGar5tpmg1U2cJ9T1Hhzyy\"]},\"SignatureVerifier.sol\":{\"keccak256\":\"0xc1d30621557da515270569c4b5ee5abed3c1266b4ea44ad0ce6bd2f7eff30f29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30d2453fb9dc02e392a8243a577d39357d4f253661c6f02f845b9051bea4037a\",\"dweb:/ipfs/QmXb4TDEWAXwTHi3awHes3XEWEXMwTwbHHY5rh3rephNuh\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {
							"createService(string,uint256,string,address,string)": {
								"params": {
									"description": "IPFS CID or text description. `msg.value` – initial stake (must be ≥ `price`).",
									"gateway": "CCIP‑Read endpoint.",
									"name": "Human‑readable service name (unique).",
									"price": "Fixed price in wei."
								}
							},
							"listServices()": {
								"returns": {
									"escrows": "    Parallel array of escrow contract addresses.",
									"ids": "        Array of all service IDs."
								}
							},
							"resolveDispute(bytes32,uint256,bool)": {
								"params": {
									"purchaseId": "Identifier within the ServiceEscrow contract.",
									"refundBuyer": "If true, refund buyer; otherwise release to provider.",
									"serviceId": "Service identifier."
								}
							}
						},
						"title": "EscroDotFactory",
						"version": 1
					},
					"userdoc": {
						"events": {
							"DisputeResolved(bytes32,uint256,bool,address)": {
								"notice": "Dispute resolved by an arbiter."
							},
							"ServiceDeployed(bytes32,string,address,address,uint256)": {
								"notice": "New service deployed."
							},
							"StakeToppedUp(bytes32,uint256,uint256)": {
								"notice": "Provider topped up their stake."
							},
							"StakeWithdrawn(bytes32,uint256,uint256)": {
								"notice": "Provider withdrew part of their stake."
							}
						},
						"kind": "user",
						"methods": {
							"resolveDispute(bytes32,uint256,bool)": {
								"notice": "Resolve a dispute. Anyone can act as arbiter by bonding ≥ price."
							},
							"serviceIds(uint256)": {
								"notice": "List of all serviceIds (for off‑chain pagination)."
							},
							"services(bytes32)": {
								"notice": "Map: serviceId ⇒ ServiceEscrow contract address."
							},
							"stakes(bytes32)": {
								"notice": "Map: serviceId ⇒ provider's collateral (held by factory)."
							},
							"topUpStake(bytes32)": {
								"notice": "Increase stake for a service. "
							},
							"withdrawStake(bytes32,uint256)": {
								"notice": "Withdraw unused stake (cannot exceed balance held by factory)."
							}
						},
						"notice": "Deploys ServiceEscrow contracts and manages provider stakes & arbitration.",
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 1058,
								"contract": "EscroDot.sol:EscroDotFactory",
								"label": "services",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_address)"
							},
							{
								"astId": 1062,
								"contract": "EscroDot.sol:EscroDotFactory",
								"label": "serviceIds",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_bytes32)dyn_storage"
							},
							{
								"astId": 1067,
								"contract": "EscroDot.sol:EscroDotFactory",
								"label": "stakes",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_bytes32,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_bytes32)dyn_storage": {
								"base": "t_bytes32",
								"encoding": "dynamic_array",
								"label": "bytes32[]",
								"numberOfBytes": "32"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_bytes32,t_address)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_mapping(t_bytes32,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 128/65680 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 23584\n// Code size = 75031 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20080]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20080] = a1\n    42: a1 = 0x20090\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20090\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 13)\n    64: sp = sp + 0xffffffffffffffd8\n    67: u64 [sp + 0x20] = ra\n    70: u64 [sp + 0x18] = s0\n    73: u64 [sp + 0x10] = s1\n    76: a2 = u64 [a1]\n    78: u64 [sp + 0x8] = a2\n    81: a2 = u64 [a1 + 0x8]\n    84: u64 [sp] = a2\n    86: s0 = u64 [a1 + 0x10]\n    89: s1 = u64 [a1 + 0x18]\n    92: i32 a0 = a0 + 0\n    94: a1 = 0x20\n    97: ra = 2, jump @0\n      : @9 [@dyn 1] (gas: 71)\n   101: a1 = reverse s1\n   103: a2 = reverse s0\n   105: a3 = u64 [sp]\n   107: a3 = reverse a3\n   109: a4 = u64 [sp + 0x8]\n   112: a4 = reverse a4\n   114: u8 [a0 + 0x18] = a4\n   117: u8 [a0 + 0x10] = a3\n   120: u8 [a0 + 0x8] = a2\n   123: u8 [a0] = a1\n   125: a5 = a4 >> 0x38\n   128: u8 [a0 + 0x1f] = a5\n   131: a5 = a4 >> 0x30\n   134: u8 [a0 + 0x1e] = a5\n   137: a5 = a4 >> 0x28\n   140: u8 [a0 + 0x1d] = a5\n   143: a5 = a4 >> 0x20\n   146: u8 [a0 + 0x1c] = a5\n   149: a5 = a4 >> 0x18\n   152: u8 [a0 + 0x1b] = a5\n   155: a5 = a4 >> 0x10\n   158: u8 [a0 + 0x1a] = a5\n   161: a4 = a4 >> 0x8\n   164: u8 [a0 + 0x19] = a4\n   167: a4 = a3 >> 0x38\n   170: u8 [a0 + 0x17] = a4\n   173: a4 = a3 >> 0x30\n   176: u8 [a0 + 0x16] = a4\n   179: a4 = a3 >> 0x28\n   182: u8 [a0 + 0x15] = a4\n   185: a4 = a3 >> 0x20\n   188: u8 [a0 + 0x14] = a4\n   191: a4 = a3 >> 0x18\n   194: u8 [a0 + 0x13] = a4\n   197: a4 = a3 >> 0x10\n   200: u8 [a0 + 0x12] = a4\n   203: a3 = a3 >> 0x8\n   206: u8 [a0 + 0x11] = a3\n   209: a3 = a2 >> 0x38\n   212: u8 [a0 + 0xf] = a3\n   215: a3 = a2 >> 0x30\n   218: u8 [a0 + 0xe] = a3\n   221: a3 = a2 >> 0x28\n   224: u8 [a0 + 0xd] = a3\n   227: a3 = a2 >> 0x20\n   230: u8 [a0 + 0xc] = a3\n   233: a3 = a2 >> 0x18\n   236: u8 [a0 + 0xb] = a3\n   239: a3 = a2 >> 0x10\n   242: u8 [a0 + 0xa] = a3\n   245: a2 = a2 >> 0x8\n   248: u8 [a0 + 0x9] = a2\n   251: a2 = a1 >> 0x38\n   254: u8 [a0 + 0x7] = a2\n   257: a2 = a1 >> 0x30\n   260: u8 [a0 + 0x6] = a2\n   263: a2 = a1 >> 0x28\n   266: u8 [a0 + 0x5] = a2\n   269: a2 = a1 >> 0x20\n   272: u8 [a0 + 0x4] = a2\n   275: a2 = a1 >> 0x18\n   278: u8 [a0 + 0x3] = a2\n   281: a2 = a1 >> 0x10\n   284: u8 [a0 + 0x2] = a2\n   287: a1 = a1 >> 0x8\n   290: u8 [a0 + 0x1] = a1\n   293: ra = u64 [sp + 0x20]\n   296: s0 = u64 [sp + 0x18]\n   299: s1 = u64 [sp + 0x10]\n   302: sp = sp + 0x28\n   305: ret\n      : @10 (gas: 6)\n   307: sp = sp + 0xfffffffffffffff0\n   310: u64 [sp + 0x8] = ra\n   313: u64 [sp] = s0\n   315: s0 = a0 & 0x1\n   318: ecalli 4 // 'call_data_size'\n   320: fallthrough\n      : @11 (gas: 2)\n   321: u32 [0x20084] = a0\n   326: jump @13 if s0 == 0\n      : @12 (gas: 1)\n   329: ra = 4, jump @14\n      : @13 [@dyn 2] (gas: 1)\n   333: ra = 6, jump @28\n      : @14 [@dyn 3] (gas: 9)\n   338: sp = sp + 0xffffffffffffffc0\n   341: u64 [sp + 0x38] = ra\n   344: u64 [sp + 0x30] = s0\n   347: u64 [sp + 0x28] = s1\n   350: s0 = sp + 0x40\n   353: sp = sp & 0xffffffffffffffe0\n   356: a0 = 0x40\n   359: a1 = 0x20\n   362: ra = 8, jump @0\n      : @15 [@dyn 4] (gas: 39)\n   367: u8 [a0 + 31] = 0x80\n   372: u8 [a0 + 30] = 0\n   375: u8 [a0 + 29] = 0\n   378: u8 [a0 + 28] = 0\n   381: u8 [a0 + 27] = 0\n   384: u8 [a0 + 26] = 0\n   387: u8 [a0 + 25] = 0\n   390: u8 [a0 + 24] = 0\n   393: u8 [a0 + 23] = 0\n   396: u8 [a0 + 22] = 0\n   399: u8 [a0 + 21] = 0\n   402: u8 [a0 + 20] = 0\n   405: u8 [a0 + 19] = 0\n   408: u8 [a0 + 18] = 0\n   411: u8 [a0 + 17] = 0\n   414: u8 [a0 + 16] = 0\n   417: u8 [a0 + 15] = 0\n   420: u8 [a0 + 14] = 0\n   423: u8 [a0 + 13] = 0\n   426: u8 [a0 + 12] = 0\n   429: u8 [a0 + 11] = 0\n   432: u8 [a0 + 10] = 0\n   435: u8 [a0 + 9] = 0\n   438: u8 [a0 + 8] = 0\n   441: u8 [a0 + 7] = 0\n   444: u8 [a0 + 6] = 0\n   447: u8 [a0 + 5] = 0\n   450: u8 [a0 + 4] = 0\n   453: u8 [a0 + 3] = 0\n   456: u8 [a0 + 2] = 0\n   459: u8 [a0 + 1] = 0\n   462: u8 [a0 + 0] = 0\n   464: u64 [sp + 24] = 0\n   467: u64 [sp + 0] = 0\n   469: u64 [sp + 8] = 0\n   472: u64 [sp + 16] = 0\n   475: i32 a0 = sp + 0\n   477: ecalli 17 // 'value_transferred'\n   479: fallthrough\n      : @16 (gas: 8)\n   480: a0 = u64 [sp + 0x10]\n   483: a1 = u64 [sp + 0x18]\n   486: a2 = u64 [sp + 0x8]\n   489: a3 = u64 [sp]\n   491: a1 = a1 | a2\n   494: a0 = a0 | a3\n   497: a0 = a0 | a1\n   500: jump @20 if a0 != 0\n      : @17 (gas: 3)\n   504: a0 = 0x40\n   507: a1 = 0x20\n   510: ra = 10, jump @0\n      : @18 [@dyn 5] (gas: 100)\n   515: a1 = u8 [a0 + 0x11]\n   518: a2 = u8 [a0 + 0x10]\n   521: a3 = u8 [a0 + 0x12]\n   524: a4 = u8 [a0 + 0x13]\n   527: a1 = a1 << 0x8\n   530: a1 = a1 | a2\n   533: a3 = a3 << 0x10\n   536: a4 = a4 << 0x18\n   539: a3 = a3 | a4\n   542: a1 = a1 | a3\n   545: a2 = u8 [a0 + 0x15]\n   548: a3 = u8 [a0 + 0x14]\n   551: a4 = u8 [a0 + 0x16]\n   554: a5 = u8 [a0 + 0x17]\n   557: a2 = a2 << 0x8\n   560: a2 = a2 | a3\n   563: a4 = a4 << 0x10\n   566: a5 = a5 << 0x18\n   569: a4 = a4 | a5\n   572: a2 = a2 | a4\n   575: a2 = a2 << 0x20\n   578: t0 = a2 | a1\n   581: a2 = u8 [a0 + 0x1]\n   584: a3 = u8 [a0]\n   586: a4 = u8 [a0 + 0x2]\n   589: a5 = u8 [a0 + 0x3]\n   592: a2 = a2 << 0x8\n   595: a2 = a2 | a3\n   598: a4 = a4 << 0x10\n   601: a5 = a5 << 0x18\n   604: a4 = a4 | a5\n   607: a2 = a2 | a4\n   610: a3 = u8 [a0 + 0x5]\n   613: a4 = u8 [a0 + 0x4]\n   616: a5 = u8 [a0 + 0x6]\n   619: s1 = u8 [a0 + 0x7]\n   622: a3 = a3 << 0x8\n   625: a3 = a3 | a4\n   628: a5 = a5 << 0x10\n   631: s1 = s1 << 0x18\n   634: a5 = a5 | s1\n   637: a3 = a3 | a5\n   640: a3 = a3 << 0x20\n   643: a2 = a2 | a3\n   646: a3 = u8 [a0 + 0x19]\n   649: a4 = u8 [a0 + 0x18]\n   652: a5 = u8 [a0 + 0x1a]\n   655: s1 = u8 [a0 + 0x1b]\n   658: a3 = a3 << 0x8\n   661: a3 = a3 | a4\n   664: a5 = a5 << 0x10\n   667: s1 = s1 << 0x18\n   670: a5 = a5 | s1\n   673: a3 = a3 | a5\n   676: a4 = u8 [a0 + 0x1d]\n   679: a5 = u8 [a0 + 0x1c]\n   682: s1 = u8 [a0 + 0x1e]\n   685: a1 = u8 [a0 + 0x1f]\n   688: a4 = a4 << 0x8\n   691: a4 = a4 | a5\n   694: s1 = s1 << 0x10\n   697: a1 = a1 << 0x18\n   700: a1 = a1 | s1\n   703: a1 = a1 | a4\n   706: a1 = a1 << 0x20\n   709: a3 = a3 | a1\n   712: a1 = u8 [a0 + 0x9]\n   715: a4 = u8 [a0 + 0x8]\n   718: a5 = u8 [a0 + 0xa]\n   721: s1 = u8 [a0 + 0xb]\n   724: a1 = a1 << 0x8\n   727: a1 = a1 | a4\n   730: a5 = a5 << 0x10\n   733: s1 = s1 << 0x18\n   736: a5 = a5 | s1\n   739: a1 = a1 | a5\n   742: a4 = u8 [a0 + 0xd]\n   745: a5 = u8 [a0 + 0xc]\n   748: s1 = u8 [a0 + 0xe]\n   751: a0 = u8 [a0 + 0xf]\n   754: a4 = a4 << 0x8\n   757: a4 = a4 | a5\n   760: s1 = s1 << 0x10\n   763: a0 = a0 << 0x18\n   766: a0 = a0 | s1\n   769: a0 = a0 | a4\n   772: a0 = a0 << 0x20\n   775: a0 = a0 | a1\n   778: a0 = reverse a0\n   780: s1 = reverse a3\n   782: a1 = reverse a2\n   784: a2 = reverse t0\n   786: a1 = a1 | a2\n   789: a2 = s1 | a0\n   792: a2 = a2 | a1\n   795: a2 = a2 >> 0x20\n   798: a0 = a0 | a1\n   801: a0 = a0 << 0x20\n   804: a0 = a0 | a2\n   807: jump @22 if a0 == 0\n      : @19 (gas: 1)\n   810: trap\n      : @20 (gas: 3)\n   811: a0 = 0\n   813: a1 = 0\n   815: ra = 12, jump @0\n      : @21 [@dyn 6] (gas: 5)\n   820: i32 a1 = a0 + 0\n   822: a0 = 0x1\n   825: a2 = 0\n   827: ecalli 14 // 'seal_return'\n   829: fallthrough\n      : @22 (gas: 4)\n   830: i32 s1 = s1 + 0\n   832: a0 = s1\n   834: a1 = 0\n   836: ra = 14, jump @0\n      : @23 [@dyn 7] (gas: 5)\n   841: i32 a0 = a0 + 0\n   843: a1 = 0\n   845: a2 = 0\n   847: ecalli 2 // 'call_data_copy'\n   849: fallthrough\n      : @24 (gas: 2)\n   850: a1 = i32 [0x20088]\n   855: jump @26 if a1 == 0\n      : @25 (gas: 4)\n   858: a0 = 0x30090\n   863: i32 a0 = a0 + 0\n   865: ecalli 15 // 'set_immutable_data'\n   867: fallthrough\n      : @26 (gas: 3)\n   868: a0 = s1\n   870: a1 = 0\n   872: ra = 16, jump @0\n      : @27 [@dyn 8] (gas: 6)\n   877: i32 a1 = a0 + 0\n   879: a0 = 0\n   881: a2 = 0\n   883: ra = 0x12\n   886: ecalli 14 // 'seal_return'\n   888: fallthrough\n      : @28 [@dyn 9] (gas: 9)\n   889: sp = sp + 0xfffffffffffffea0\n   893: u64 [sp + 0x158] = ra\n   897: u64 [sp + 0x150] = s0\n   901: u64 [sp + 0x148] = s1\n   905: s0 = sp + 0x160\n   909: sp = sp & 0xffffffffffffffe0\n   912: a0 = 0x40\n   915: a1 = 0x20\n   918: ra = 20, jump @0\n      : @29 [@dyn 10] (gas: 35)\n   923: u8 [a0 + 31] = 0x80\n   928: u8 [a0 + 30] = 0\n   931: u8 [a0 + 29] = 0\n   934: u8 [a0 + 28] = 0\n   937: u8 [a0 + 27] = 0\n   940: u8 [a0 + 26] = 0\n   943: u8 [a0 + 25] = 0\n   946: u8 [a0 + 24] = 0\n   949: u8 [a0 + 23] = 0\n   952: u8 [a0 + 22] = 0\n   955: u8 [a0 + 21] = 0\n   958: u8 [a0 + 20] = 0\n   961: u8 [a0 + 19] = 0\n   964: u8 [a0 + 18] = 0\n   967: u8 [a0 + 17] = 0\n   970: u8 [a0 + 16] = 0\n   973: u8 [a0 + 15] = 0\n   976: u8 [a0 + 14] = 0\n   979: u8 [a0 + 13] = 0\n   982: u8 [a0 + 12] = 0\n   985: u8 [a0 + 11] = 0\n   988: u8 [a0 + 10] = 0\n   991: u8 [a0 + 9] = 0\n   994: u8 [a0 + 8] = 0\n   997: u8 [a0 + 7] = 0\n  1000: u8 [a0 + 3] = 0\n  1003: s1 = 0x20084\n  1008: u8 [a0 + 2] = 0\n  1011: u8 [a0 + 1] = 0\n  1014: u8 [a0 + 0] = 0\n  1016: a1 = i32 [0x20084]\n  1021: u8 [a0 + 6] = 0\n  1024: u8 [a0 + 5] = 0\n  1027: u8 [a0 + 4] = 0\n  1030: jump @55 if a1 <u 4\n      : @30 (gas: 4)\n  1035: i32 a0 = sp + 0x120\n  1039: a1 = 0\n  1041: ecalli 3 // 'call_data_load'\n  1043: fallthrough\n      : @31 (gas: 2)\n  1044: a0 = i32 [sp + 0x13c]\n  1048: jump @36 if a0 >s 4210080702\n      : @32 (gas: 2)\n  1055: a1 = 0xffffffffde1c5000\n  1061: jump @40 if a0 >s 3726398599\n      : @33 (gas: 1)\n  1069: jump @46 if a0 == 2414765063\n      : @34 (gas: 1)\n  1077: jump @54 if a0 != 2724851380\n      : @35 (gas: 21)\n  1085: ra = 0x16\n  1088: sp = sp + 0xfffffffffffffcb0\n  1092: u64 [sp + 0x348] = ra\n  1096: u64 [sp + 0x340] = s0\n  1100: u64 [sp + 0x338] = s1\n  1104: s0 = sp + 0x350\n  1108: sp = sp & 0xfffffffffffffff0\n  1111: a0 = u32 [0x20084]\n  1116: u64 [sp + 520] = 0\n  1120: u64 [sp + 512] = 0\n  1124: u64 [sp + 504] = 0\n  1128: u64 [sp + 0x1f0] = a0\n  1132: u64 [sp + 552] = 0\n  1136: u64 [sp + 544] = 0\n  1140: u64 [sp + 528] = 0x4\n  1145: a0 = sp + 0x230\n  1149: a1 = sp + 0x210\n  1153: a2 = sp + 0x1f0\n  1157: u64 [sp + 536] = 0\n  1161: ra = 0x9a\n  1165: jump @155\n      : @36 [@dyn 11] (gas: 2)\n  1168: a1 = 0x19dc5000\n  1174: jump @43 if a0 >s 433870613\n      : @37 (gas: 1)\n  1181: jump @47 if a0 == 4210080703\n      : @38 (gas: 1)\n  1189: jump @54 if a0 != 175705783\n      : @39 (gas: 14)\n  1197: ra = 0x18\n  1200: sp = sp + 0xffffffffffffff60\n  1204: u64 [sp + 0x98] = ra\n  1208: u64 [sp + 0x90] = s0\n  1212: u64 [sp + 0x88] = s1\n  1216: s0 = sp + 0xa0\n  1220: sp = sp & 0xffffffffffffffe0\n  1223: u64 [sp + 56] = 0\n  1226: u64 [sp + 48] = 0\n  1229: u64 [sp + 40] = 0\n  1232: u64 [sp + 32] = 0\n  1235: i32 a0 = sp + 0x20\n  1238: ecalli 17 // 'value_transferred'\n  1240: jump @62\n      : @40 [@dyn 12] (gas: 2)\n  1243: i32 a1 = a1 + 0x488\n  1247: jump @52 if a0 == a1\n      : @41 (gas: 1)\n  1251: jump @54 if a0 != 3936577167\n      : @42 (gas: 1)\n  1259: ra = 26, jump @242\n      : @43 [@dyn 13] (gas: 2)\n  1264: i32 a1 = a1 + 0x716\n  1268: jump @53 if a0 == a1\n      : @44 (gas: 1)\n  1272: jump @54 if a0 != 1775397171\n      : @45 (gas: 14)\n  1280: ra = 0x1c\n  1283: sp = sp + 0xffffffffffffff40\n  1287: u64 [sp + 0xb8] = ra\n  1291: u64 [sp + 0xb0] = s0\n  1295: u64 [sp + 0xa8] = s1\n  1299: s0 = sp + 0xc0\n  1303: sp = sp & 0xffffffffffffffe0\n  1306: u64 [sp + 120] = 0\n  1309: u64 [sp + 112] = 0\n  1312: u64 [sp + 104] = 0\n  1315: u64 [sp + 96] = 0\n  1318: i32 a0 = sp + 0x60\n  1321: ecalli 17 // 'value_transferred'\n  1323: jump @110\n      : @46 [@dyn 14] (gas: 14)\n  1326: ra = 0x1e\n  1329: sp = sp + 0xffffffffffffff60\n  1333: u64 [sp + 0x98] = ra\n  1337: u64 [sp + 0x90] = s0\n  1341: u64 [sp + 0x88] = s1\n  1345: s0 = sp + 0xa0\n  1349: sp = sp & 0xffffffffffffffe0\n  1352: u64 [sp + 56] = 0\n  1355: u64 [sp + 48] = 0\n  1358: u64 [sp + 40] = 0\n  1361: u64 [sp + 32] = 0\n  1364: i32 a0 = sp + 0x20\n  1367: ecalli 17 // 'value_transferred'\n  1369: jump @122\n      : @47 [@dyn 15] (gas: 13)\n  1372: a0 = u32 [s1]\n  1374: u64 [sp + 152] = 0\n  1378: u64 [sp + 144] = 0\n  1382: u64 [sp + 136] = 0\n  1386: u64 [sp + 0x80] = a0\n  1390: u64 [sp + 184] = 0\n  1394: u64 [sp + 176] = 0\n  1398: u64 [sp + 160] = 0x4\n  1403: a0 = sp + 0xc0\n  1407: a1 = sp + 0xa0\n  1411: a2 = sp + 0x80\n  1415: u64 [sp + 168] = 0\n  1419: ra = 32, jump @252\n      : @48 [@dyn 16] (gas: 30)\n  1424: a0 = u64 [sp + 0xc0]\n  1428: u64 [sp + 0x18] = a0\n  1431: t1 = u64 [sp + 0xc8]\n  1435: t2 = u64 [sp + 0xd0]\n  1439: ra = u64 [sp + 0xd8]\n  1443: t0 = u64 [sp + 0xe0]\n  1447: a5 = u64 [sp + 0xe8]\n  1451: s1 = u64 [sp + 0xf0]\n  1455: a4 = u64 [sp + 0xf8]\n  1459: a3 = u64 [sp + 0x100]\n  1463: a1 = u64 [sp + 0x108]\n  1467: a2 = u64 [sp + 0x110]\n  1471: a0 = u64 [sp + 0x118]\n  1475: u64 [sp + 0x38] = a0\n  1478: u64 [sp + 0x30] = a2\n  1481: u64 [sp + 0x28] = a1\n  1484: u64 [sp + 0x20] = a3\n  1487: u64 [sp + 0x58] = a4\n  1490: u64 [sp + 0x50] = s1\n  1493: u64 [sp + 0x48] = a5\n  1496: u64 [sp + 0x40] = t0\n  1499: u64 [sp + 0x78] = ra\n  1502: u64 [sp + 0x70] = t2\n  1505: u64 [sp + 0x68] = t1\n  1508: a0 = sp + 0x60\n  1511: a1 = sp + 0x40\n  1514: a2 = sp + 0x20\n  1517: a3 = u64 [sp + 0x18]\n  1520: u64 [sp + 0x60] = a3\n  1523: ra = 34, jump @774\n      : @49 [@dyn 17] (gas: 3)\n  1529: a0 = 0x40\n  1532: a1 = 0x20\n  1535: ra = 36, jump @0\n      : @50 [@dyn 18] (gas: 100)\n  1540: a1 = u8 [a0 + 0x11]\n  1543: a2 = u8 [a0 + 0x10]\n  1546: a3 = u8 [a0 + 0x12]\n  1549: a4 = u8 [a0 + 0x13]\n  1552: a1 = a1 << 0x8\n  1555: a1 = a1 | a2\n  1558: a3 = a3 << 0x10\n  1561: a4 = a4 << 0x18\n  1564: a3 = a3 | a4\n  1567: a1 = a1 | a3\n  1570: a2 = u8 [a0 + 0x15]\n  1573: a3 = u8 [a0 + 0x14]\n  1576: a4 = u8 [a0 + 0x16]\n  1579: a5 = u8 [a0 + 0x17]\n  1582: a2 = a2 << 0x8\n  1585: a2 = a2 | a3\n  1588: a4 = a4 << 0x10\n  1591: a5 = a5 << 0x18\n  1594: a4 = a4 | a5\n  1597: a2 = a2 | a4\n  1600: a2 = a2 << 0x20\n  1603: t0 = a2 | a1\n  1606: a2 = u8 [a0 + 0x1]\n  1609: a3 = u8 [a0]\n  1611: a4 = u8 [a0 + 0x2]\n  1614: a5 = u8 [a0 + 0x3]\n  1617: a2 = a2 << 0x8\n  1620: a2 = a2 | a3\n  1623: a4 = a4 << 0x10\n  1626: a5 = a5 << 0x18\n  1629: a4 = a4 | a5\n  1632: a2 = a2 | a4\n  1635: a3 = u8 [a0 + 0x5]\n  1638: a4 = u8 [a0 + 0x4]\n  1641: a5 = u8 [a0 + 0x6]\n  1644: s1 = u8 [a0 + 0x7]\n  1647: a3 = a3 << 0x8\n  1650: a3 = a3 | a4\n  1653: a5 = a5 << 0x10\n  1656: s1 = s1 << 0x18\n  1659: a5 = a5 | s1\n  1662: a3 = a3 | a5\n  1665: a3 = a3 << 0x20\n  1668: a2 = a2 | a3\n  1671: a3 = u8 [a0 + 0x19]\n  1674: a4 = u8 [a0 + 0x18]\n  1677: a5 = u8 [a0 + 0x1a]\n  1680: s1 = u8 [a0 + 0x1b]\n  1683: a3 = a3 << 0x8\n  1686: a3 = a3 | a4\n  1689: a5 = a5 << 0x10\n  1692: s1 = s1 << 0x18\n  1695: a5 = a5 | s1\n  1698: a3 = a3 | a5\n  1701: a4 = u8 [a0 + 0x1d]\n  1704: a5 = u8 [a0 + 0x1c]\n  1707: s1 = u8 [a0 + 0x1e]\n  1710: a1 = u8 [a0 + 0x1f]\n  1713: a4 = a4 << 0x8\n  1716: a4 = a4 | a5\n  1719: s1 = s1 << 0x10\n  1722: a1 = a1 << 0x18\n  1725: a1 = a1 | s1\n  1728: a1 = a1 | a4\n  1731: a1 = a1 << 0x20\n  1734: a3 = a3 | a1\n  1737: a1 = u8 [a0 + 0x9]\n  1740: a4 = u8 [a0 + 0x8]\n  1743: a5 = u8 [a0 + 0xa]\n  1746: s1 = u8 [a0 + 0xb]\n  1749: a1 = a1 << 0x8\n  1752: a1 = a1 | a4\n  1755: a5 = a5 << 0x10\n  1758: s1 = s1 << 0x18\n  1761: a5 = a5 | s1\n  1764: a1 = a1 | a5\n  1767: a4 = u8 [a0 + 0xd]\n  1770: a5 = u8 [a0 + 0xc]\n  1773: s1 = u8 [a0 + 0xe]\n  1776: a0 = u8 [a0 + 0xf]\n  1779: a4 = a4 << 0x8\n  1782: a4 = a4 | a5\n  1785: s1 = s1 << 0x10\n  1788: a0 = a0 << 0x18\n  1791: a0 = a0 | s1\n  1794: a0 = a0 | a4\n  1797: a0 = a0 << 0x20\n  1800: a0 = a0 | a1\n  1803: a1 = reverse a0\n  1805: a0 = reverse a3\n  1807: a2 = reverse a2\n  1809: a3 = reverse t0\n  1811: a2 = a2 | a3\n  1814: a3 = a0 | a1\n  1817: a3 = a3 | a2\n  1820: a3 = a3 >> 0x20\n  1823: a1 = a1 | a2\n  1826: a1 = a1 << 0x20\n  1829: a1 = a1 | a3\n  1832: jump @58 if a1 == 0\n      : @51 (gas: 1)\n  1836: trap\n      : @52 (gas: 14)\n  1837: ra = 0x26\n  1840: sp = sp + 0xfffffffffffffea0\n  1844: u64 [sp + 0x158] = ra\n  1848: u64 [sp + 0x150] = s0\n  1852: u64 [sp + 0x148] = s1\n  1856: s0 = sp + 0x160\n  1860: sp = sp & 0xffffffffffffffe0\n  1863: u64 [sp + 312] = 0\n  1867: u64 [sp + 304] = 0\n  1871: u64 [sp + 296] = 0\n  1875: u64 [sp + 288] = 0\n  1879: i32 a0 = sp + 0x120\n  1883: ecalli 17 // 'value_transferred'\n  1885: jump @230\n      : @53 [@dyn 19] (gas: 14)\n  1888: ra = 0x28\n  1891: sp = sp + 0xffffffffffffff40\n  1895: u64 [sp + 0xb8] = ra\n  1899: u64 [sp + 0xb0] = s0\n  1903: u64 [sp + 0xa8] = s1\n  1907: s0 = sp + 0xc0\n  1911: sp = sp & 0xffffffffffffffe0\n  1914: u64 [sp + 120] = 0\n  1917: u64 [sp + 112] = 0\n  1920: u64 [sp + 104] = 0\n  1923: u64 [sp + 96] = 0\n  1926: i32 a0 = sp + 0x60\n  1929: ecalli 17 // 'value_transferred'\n  1931: jump @76\n      : @54 [@dyn 20] (gas: 2)\n  1934: a1 = i32 [s1]\n  1936: fallthrough\n      : @55 (gas: 1)\n  1937: jump @57 if a1 != 0\n      : @56 (gas: 9)\n  1940: ra = 0x2a\n  1943: sp = sp + 0xffffffffffffffc8\n  1946: u64 [sp + 0x30] = ra\n  1949: u64 [sp + 0x28] = s0\n  1952: u64 [sp + 0x20] = s1\n  1955: a0 = 0x40\n  1958: a1 = 0x20\n  1961: ra = 0x346\n  1965: jump @0\n      : @57 [@dyn 21] (gas: 7)\n  1968: ra = 0x2c\n  1971: sp = sp + 0xfffffffffffffff8\n  1974: u64 [sp] = ra\n  1976: a0 = 0\n  1978: a1 = 0\n  1980: ra = 0xee\n  1984: jump @0\n      : @58 [@dyn 22] (gas: 2)\n  1987: i32 a0 = a0 + 0\n  1989: ra = 46, jump @0\n      : @59 [@dyn 23] (gas: 6)\n  1994: i32 a1 = a0 + 0\n  1996: a0 = 0\n  1998: a2 = 0\n  2000: ra = 0x30\n  2003: ecalli 14 // 'seal_return'\n  2005: fallthrough\n      : @60 [@dyn 24] (gas: 7)\n  2006: sp = sp + 0xfffffffffffffff0\n  2009: u64 [sp + 0x8] = ra\n  2012: u64 [sp] = s0\n  2014: s0 = a0\n  2016: a0 = 0x40\n  2019: a1 = 0x20\n  2022: ra = 50, jump @0\n      : @61 [@dyn 25] (gas: 100)\n  2027: a1 = u8 [a0 + 0x1]\n  2030: a2 = u8 [a0]\n  2032: a3 = u8 [a0 + 0x2]\n  2035: a4 = u8 [a0 + 0x3]\n  2038: a1 = a1 << 0x8\n  2041: a1 = a1 | a2\n  2044: a3 = a3 << 0x10\n  2047: a4 = a4 << 0x18\n  2050: a3 = a3 | a4\n  2053: a1 = a1 | a3\n  2056: a2 = u8 [a0 + 0x5]\n  2059: a3 = u8 [a0 + 0x4]\n  2062: a4 = u8 [a0 + 0x6]\n  2065: a5 = u8 [a0 + 0x7]\n  2068: a2 = a2 << 0x8\n  2071: a2 = a2 | a3\n  2074: a4 = a4 << 0x10\n  2077: a5 = a5 << 0x18\n  2080: a4 = a4 | a5\n  2083: a2 = a2 | a4\n  2086: a2 = a2 << 0x20\n  2089: t0 = a2 | a1\n  2092: a2 = u8 [a0 + 0x9]\n  2095: a3 = u8 [a0 + 0x8]\n  2098: a4 = u8 [a0 + 0xa]\n  2101: a5 = u8 [a0 + 0xb]\n  2104: a2 = a2 << 0x8\n  2107: a2 = a2 | a3\n  2110: a4 = a4 << 0x10\n  2113: a5 = a5 << 0x18\n  2116: a4 = a4 | a5\n  2119: a2 = a2 | a4\n  2122: a3 = u8 [a0 + 0xd]\n  2125: a4 = u8 [a0 + 0xc]\n  2128: a5 = u8 [a0 + 0xe]\n  2131: a1 = u8 [a0 + 0xf]\n  2134: a3 = a3 << 0x8\n  2137: a3 = a3 | a4\n  2140: a5 = a5 << 0x10\n  2143: a1 = a1 << 0x18\n  2146: a1 = a1 | a5\n  2149: a1 = a1 | a3\n  2152: a1 = a1 << 0x20\n  2155: t1 = a1 | a2\n  2158: a1 = u8 [a0 + 0x11]\n  2161: a3 = u8 [a0 + 0x10]\n  2164: a4 = u8 [a0 + 0x12]\n  2167: a5 = u8 [a0 + 0x13]\n  2170: a1 = a1 << 0x8\n  2173: a1 = a1 | a3\n  2176: a4 = a4 << 0x10\n  2179: a5 = a5 << 0x18\n  2182: a4 = a4 | a5\n  2185: a1 = a1 | a4\n  2188: a3 = u8 [a0 + 0x15]\n  2191: a4 = u8 [a0 + 0x14]\n  2194: a5 = u8 [a0 + 0x16]\n  2197: a2 = u8 [a0 + 0x17]\n  2200: a3 = a3 << 0x8\n  2203: a3 = a3 | a4\n  2206: a5 = a5 << 0x10\n  2209: a2 = a2 << 0x18\n  2212: a2 = a2 | a5\n  2215: a2 = a2 | a3\n  2218: a2 = a2 << 0x20\n  2221: a3 = a2 | a1\n  2224: a1 = u8 [a0 + 0x19]\n  2227: a2 = u8 [a0 + 0x18]\n  2230: a4 = u8 [a0 + 0x1a]\n  2233: a5 = u8 [a0 + 0x1b]\n  2236: a1 = a1 << 0x8\n  2239: a1 = a1 | a2\n  2242: a4 = a4 << 0x10\n  2245: a5 = a5 << 0x18\n  2248: a4 = a4 | a5\n  2251: a1 = a1 | a4\n  2254: a2 = u8 [a0 + 0x1d]\n  2257: a4 = u8 [a0 + 0x1c]\n  2260: a5 = u8 [a0 + 0x1e]\n  2263: a0 = u8 [a0 + 0x1f]\n  2266: a2 = a2 << 0x8\n  2269: a2 = a2 | a4\n  2272: a5 = a5 << 0x10\n  2275: a0 = a0 << 0x18\n  2278: a0 = a0 | a5\n  2281: a0 = a0 | a2\n  2284: a0 = a0 << 0x20\n  2287: a0 = a0 | a1\n  2290: a0 = reverse a0\n  2292: a1 = reverse a3\n  2294: a2 = reverse t1\n  2296: a3 = reverse t0\n  2298: u64 [s0 + 0x18] = a3\n  2301: u64 [s0 + 0x10] = a2\n  2304: u64 [s0 + 0x8] = a1\n  2307: u64 [s0] = a0\n  2309: ra = u64 [sp + 0x8]\n  2312: s0 = u64 [sp]\n  2314: sp = sp + 0x10\n  2317: ret\n      : @62 (gas: 8)\n  2319: a0 = u64 [sp + 0x30]\n  2322: a1 = u64 [sp + 0x38]\n  2325: a2 = u64 [sp + 0x28]\n  2328: a3 = u64 [sp + 0x20]\n  2331: a1 = a1 | a2\n  2334: a0 = a0 | a3\n  2337: a0 = a0 | a1\n  2340: jump @70 if a0 != 0\n      : @63 (gas: 2)\n  2344: a0 = i32 [0x20084]\n  2349: jump @70 if a0 <=u 35\n      : @64 (gas: 13)\n  2354: i32 a0 = sp + 0x60\n  2357: a1 = 0x4\n  2360: ecalli 3 // 'call_data_load'\n  2362: a0 = u64 [sp + 0x60]\n  2365: u64 [sp + 0x18] = a0\n  2368: a0 = u64 [sp + 0x68]\n  2371: u64 [sp + 0x10] = a0\n  2374: a0 = u64 [sp + 0x70]\n  2377: u64 [sp + 0x8] = a0\n  2380: s1 = u64 [sp + 0x78]\n  2383: a1 = 0x20\n  2386: a0 = 0\n  2388: ra = 52, jump @0\n      : @65 [@dyn 26] (gas: 70)\n  2393: a1 = reverse s1\n  2395: a2 = u64 [sp + 0x8]\n  2398: a2 = reverse a2\n  2400: a3 = u64 [sp + 0x10]\n  2403: a3 = reverse a3\n  2405: a4 = u64 [sp + 0x18]\n  2408: a4 = reverse a4\n  2410: a5 = a4 >> 0x38\n  2413: u8 [a0 + 0x1f] = a5\n  2416: a5 = a4 >> 0x30\n  2419: u8 [a0 + 0x1e] = a5\n  2422: a5 = a4 >> 0x28\n  2425: u8 [a0 + 0x1d] = a5\n  2428: a5 = a4 >> 0x20\n  2431: u8 [a0 + 0x1c] = a5\n  2434: a5 = a4 >> 0x18\n  2437: u8 [a0 + 0x1b] = a5\n  2440: a5 = a4 >> 0x10\n  2443: u8 [a0 + 0x1a] = a5\n  2446: a5 = a4 >> 0x8\n  2449: u8 [a0 + 0x19] = a5\n  2452: u8 [a0 + 0x18] = a4\n  2455: a4 = a3 >> 0x38\n  2458: u8 [a0 + 0x17] = a4\n  2461: a4 = a3 >> 0x30\n  2464: u8 [a0 + 0x16] = a4\n  2467: a4 = a3 >> 0x28\n  2470: u8 [a0 + 0x15] = a4\n  2473: a4 = a3 >> 0x20\n  2476: u8 [a0 + 0x14] = a4\n  2479: a4 = a3 >> 0x18\n  2482: u8 [a0 + 0x13] = a4\n  2485: a4 = a3 >> 0x10\n  2488: u8 [a0 + 0x12] = a4\n  2491: a4 = a3 >> 0x8\n  2494: u8 [a0 + 0x11] = a4\n  2497: u8 [a0 + 0x10] = a3\n  2500: a3 = a2 >> 0x38\n  2503: u8 [a0 + 0xf] = a3\n  2506: a3 = a2 >> 0x30\n  2509: u8 [a0 + 0xe] = a3\n  2512: a3 = a2 >> 0x28\n  2515: u8 [a0 + 0xd] = a3\n  2518: a3 = a2 >> 0x20\n  2521: u8 [a0 + 0xc] = a3\n  2524: a3 = a2 >> 0x18\n  2527: u8 [a0 + 0xb] = a3\n  2530: a3 = a2 >> 0x10\n  2533: u8 [a0 + 0xa] = a3\n  2536: a3 = a2 >> 0x8\n  2539: u8 [a0 + 0x9] = a3\n  2542: u8 [a0 + 0x8] = a2\n  2545: a2 = a1 >> 0x38\n  2548: u8 [a0 + 0x7] = a2\n  2551: a2 = a1 >> 0x30\n  2554: u8 [a0 + 0x6] = a2\n  2557: a2 = a1 >> 0x28\n  2560: u8 [a0 + 0x5] = a2\n  2563: a2 = a1 >> 0x20\n  2566: u8 [a0 + 0x4] = a2\n  2569: a2 = a1 >> 0x18\n  2572: u8 [a0 + 0x3] = a2\n  2575: a2 = a1 >> 0x10\n  2578: u8 [a0 + 0x2] = a2\n  2581: a2 = a1 >> 0x8\n  2584: u8 [a0 + 0x1] = a2\n  2587: u8 [a0] = a1\n  2589: a0 = 0x20\n  2592: a1 = 0x20\n  2595: ra = 54, jump @0\n      : @66 [@dyn 27] (gas: 35)\n  2600: u8 [a0 + 31] = 0\n  2603: u8 [a0 + 30] = 0\n  2606: u8 [a0 + 29] = 0\n  2609: u8 [a0 + 28] = 0\n  2612: u8 [a0 + 27] = 0\n  2615: u8 [a0 + 26] = 0\n  2618: u8 [a0 + 25] = 0\n  2621: u8 [a0 + 24] = 0\n  2624: u8 [a0 + 23] = 0\n  2627: u8 [a0 + 22] = 0\n  2630: u8 [a0 + 21] = 0\n  2633: u8 [a0 + 20] = 0\n  2636: u8 [a0 + 19] = 0\n  2639: u8 [a0 + 18] = 0\n  2642: u8 [a0 + 17] = 0\n  2645: u8 [a0 + 16] = 0\n  2648: u8 [a0 + 15] = 0\n  2651: u8 [a0 + 14] = 0\n  2654: u8 [a0 + 13] = 0\n  2657: u8 [a0 + 12] = 0\n  2660: u8 [a0 + 11] = 0\n  2663: u8 [a0 + 10] = 0\n  2666: u8 [a0 + 9] = 0\n  2669: u8 [a0 + 8] = 0\n  2672: u8 [a0 + 7] = 0\n  2675: u8 [a0 + 6] = 0\n  2678: u8 [a0 + 5] = 0\n  2681: u8 [a0 + 4] = 0\n  2684: u8 [a0 + 3] = 0\n  2687: u8 [a0 + 2] = 0\n  2690: u8 [a0 + 1] = 0\n  2693: u8 [a0 + 0] = 0\n  2695: a1 = 0x40\n  2698: a0 = 0\n  2700: ra = 56, jump @0\n      : @67 [@dyn 28] (gas: 36)\n  2705: i32 a0 = a0 + 0\n  2707: i32 a2 = sp + 0x60\n  2710: a1 = 0x40\n  2713: ecalli 9 // 'hash_keccak_256'\n  2715: a0 = u64 [sp + 0x78]\n  2718: a1 = u64 [sp + 0x70]\n  2721: a2 = u64 [sp + 0x68]\n  2724: a3 = u64 [sp + 0x60]\n  2727: a0 = reverse a0\n  2729: a1 = reverse a1\n  2731: a2 = reverse a2\n  2733: a3 = reverse a3\n  2735: u64 [sp + 0x58] = a3\n  2738: u64 [sp + 0x50] = a2\n  2741: u64 [sp + 0x48] = a1\n  2744: u64 [sp + 0x40] = a0\n  2747: u64 [sp + 120] = 0\n  2750: u64 [sp + 112] = 0\n  2753: u64 [sp + 104] = 0\n  2756: u64 [sp + 96] = 0\n  2759: u32 [sp + 128] = 0x20\n  2764: i32 a1 = sp + 0x40\n  2767: i32 a3 = sp + 0x60\n  2770: i32 a4 = sp + 0x80\n  2774: a2 = 0xffffffffffffffff\n  2777: a0 = 0\n  2779: ecalli 8 // 'get_storage'\n  2781: a0 = u64 [sp + 0x70]\n  2784: u64 [sp + 0x8] = a0\n  2787: a0 = u64 [sp + 0x68]\n  2790: u64 [sp + 0x10] = a0\n  2793: a0 = u64 [sp + 0x60]\n  2796: u64 [sp + 0x18] = a0\n  2799: a0 = 0x40\n  2802: a1 = 0x20\n  2805: ra = 58, jump @0\n      : @68 [@dyn 29] (gas: 100)\n  2810: a1 = u8 [a0 + 0x11]\n  2813: a2 = u8 [a0 + 0x10]\n  2816: a3 = u8 [a0 + 0x12]\n  2819: a4 = u8 [a0 + 0x13]\n  2822: a1 = a1 << 0x8\n  2825: a1 = a1 | a2\n  2828: a3 = a3 << 0x10\n  2831: a4 = a4 << 0x18\n  2834: a3 = a3 | a4\n  2837: a1 = a1 | a3\n  2840: a2 = u8 [a0 + 0x15]\n  2843: a3 = u8 [a0 + 0x14]\n  2846: a4 = u8 [a0 + 0x16]\n  2849: a5 = u8 [a0 + 0x17]\n  2852: a2 = a2 << 0x8\n  2855: a2 = a2 | a3\n  2858: a4 = a4 << 0x10\n  2861: a5 = a5 << 0x18\n  2864: a4 = a4 | a5\n  2867: a2 = a2 | a4\n  2870: a2 = a2 << 0x20\n  2873: t0 = a2 | a1\n  2876: a2 = u8 [a0 + 0x1]\n  2879: a3 = u8 [a0]\n  2881: a4 = u8 [a0 + 0x2]\n  2884: a5 = u8 [a0 + 0x3]\n  2887: a2 = a2 << 0x8\n  2890: a2 = a2 | a3\n  2893: a4 = a4 << 0x10\n  2896: a5 = a5 << 0x18\n  2899: a4 = a4 | a5\n  2902: a2 = a2 | a4\n  2905: a3 = u8 [a0 + 0x5]\n  2908: a4 = u8 [a0 + 0x4]\n  2911: a5 = u8 [a0 + 0x6]\n  2914: s1 = u8 [a0 + 0x7]\n  2917: a3 = a3 << 0x8\n  2920: a3 = a3 | a4\n  2923: a5 = a5 << 0x10\n  2926: s1 = s1 << 0x18\n  2929: a5 = a5 | s1\n  2932: a3 = a3 | a5\n  2935: a3 = a3 << 0x20\n  2938: a2 = a2 | a3\n  2941: a3 = u8 [a0 + 0x19]\n  2944: a4 = u8 [a0 + 0x18]\n  2947: a5 = u8 [a0 + 0x1a]\n  2950: s1 = u8 [a0 + 0x1b]\n  2953: a3 = a3 << 0x8\n  2956: a3 = a3 | a4\n  2959: a5 = a5 << 0x10\n  2962: s1 = s1 << 0x18\n  2965: a5 = a5 | s1\n  2968: a3 = a3 | a5\n  2971: a4 = u8 [a0 + 0x1d]\n  2974: a5 = u8 [a0 + 0x1c]\n  2977: s1 = u8 [a0 + 0x1e]\n  2980: a1 = u8 [a0 + 0x1f]\n  2983: a4 = a4 << 0x8\n  2986: a4 = a4 | a5\n  2989: s1 = s1 << 0x10\n  2992: a1 = a1 << 0x18\n  2995: a1 = a1 | s1\n  2998: a1 = a1 | a4\n  3001: a1 = a1 << 0x20\n  3004: a3 = a3 | a1\n  3007: a1 = u8 [a0 + 0x9]\n  3010: a4 = u8 [a0 + 0x8]\n  3013: a5 = u8 [a0 + 0xa]\n  3016: s1 = u8 [a0 + 0xb]\n  3019: a1 = a1 << 0x8\n  3022: a1 = a1 | a4\n  3025: a5 = a5 << 0x10\n  3028: s1 = s1 << 0x18\n  3031: a5 = a5 | s1\n  3034: a1 = a1 | a5\n  3037: a4 = u8 [a0 + 0xd]\n  3040: a5 = u8 [a0 + 0xc]\n  3043: s1 = u8 [a0 + 0xe]\n  3046: a0 = u8 [a0 + 0xf]\n  3049: a4 = a4 << 0x8\n  3052: a4 = a4 | a5\n  3055: s1 = s1 << 0x10\n  3058: a0 = a0 << 0x18\n  3061: a0 = a0 | s1\n  3064: a0 = a0 | a4\n  3067: a0 = a0 << 0x20\n  3070: a0 = a0 | a1\n  3073: a1 = reverse a0\n  3075: a0 = reverse a3\n  3077: a2 = reverse a2\n  3079: a3 = reverse t0\n  3081: a2 = a2 | a3\n  3084: a3 = a0 | a1\n  3087: a3 = a3 | a2\n  3090: a3 = a3 >> 0x20\n  3093: a1 = a1 | a2\n  3096: a1 = a1 << 0x20\n  3099: a1 = a1 | a3\n  3102: jump @72 if a1 == 0\n      : @69 (gas: 1)\n  3105: trap\n      : @70 (gas: 3)\n  3106: a0 = 0\n  3108: a1 = 0\n  3110: ra = 60, jump @0\n      : @71 [@dyn 30] (gas: 5)\n  3115: i32 a1 = a0 + 0\n  3117: a0 = 0x1\n  3120: a2 = 0\n  3122: ecalli 14 // 'seal_return'\n  3124: fallthrough\n      : @72 (gas: 7)\n  3125: a1 = u64 [sp + 0x8]\n  3128: a1 = a1 << 0x20\n  3131: s1 = a1 >> 0x20\n  3134: i32 a0 = a0 + 0\n  3136: u64 [sp + 0x8] = a0\n  3139: a1 = 0x20\n  3142: ra = 62, jump @0\n      : @73 [@dyn 31] (gas: 58)\n  3147: a1 = reverse s1\n  3149: a2 = u64 [sp + 0x10]\n  3152: a2 = reverse a2\n  3154: a3 = u64 [sp + 0x18]\n  3157: a3 = reverse a3\n  3159: a4 = a3 >> 0x38\n  3162: u8 [a0 + 0x1f] = a4\n  3165: a4 = a3 >> 0x30\n  3168: u8 [a0 + 0x1e] = a4\n  3171: a4 = a3 >> 0x28\n  3174: u8 [a0 + 0x1d] = a4\n  3177: a4 = a3 >> 0x20\n  3180: u8 [a0 + 0x1c] = a4\n  3183: a4 = a3 >> 0x18\n  3186: u8 [a0 + 0x1b] = a4\n  3189: a4 = a3 >> 0x10\n  3192: u8 [a0 + 0x1a] = a4\n  3195: a4 = a3 >> 0x8\n  3198: u8 [a0 + 0x19] = a4\n  3201: u8 [a0 + 0x18] = a3\n  3204: u8 [a0 + 0x10] = a2\n  3207: u8 [a0 + 11] = 0\n  3210: u8 [a0 + 10] = 0\n  3213: u8 [a0 + 9] = 0\n  3216: u8 [a0 + 7] = 0\n  3219: u8 [a0 + 6] = 0\n  3222: u8 [a0 + 5] = 0\n  3225: u8 [a0 + 4] = 0\n  3228: u8 [a0 + 3] = 0\n  3231: u8 [a0 + 2] = 0\n  3234: u8 [a0 + 1] = 0\n  3237: u8 [a0 + 0] = 0\n  3239: a3 = a2 >> 0x38\n  3242: u8 [a0 + 0x17] = a3\n  3245: a3 = a2 >> 0x30\n  3248: u8 [a0 + 0x16] = a3\n  3251: a3 = a2 >> 0x28\n  3254: u8 [a0 + 0x15] = a3\n  3257: a3 = a2 >> 0x20\n  3260: u8 [a0 + 0x14] = a3\n  3263: a3 = a2 >> 0x18\n  3266: u8 [a0 + 0x13] = a3\n  3269: a3 = a2 >> 0x10\n  3272: u8 [a0 + 0x12] = a3\n  3275: a2 = a2 >> 0x8\n  3278: u8 [a0 + 0x11] = a2\n  3281: u8 [a0 + 0x8] = a1\n  3284: a2 = a1 >> 0x38\n  3287: u8 [a0 + 0xf] = a2\n  3290: a2 = a1 >> 0x30\n  3293: u8 [a0 + 0xe] = a2\n  3296: a2 = a1 >> 0x28\n  3299: u8 [a0 + 0xd] = a2\n  3302: a1 = a1 >> 0x20\n  3305: u8 [a0 + 0xc] = a1\n  3308: a1 = 0x20\n  3311: a0 = u64 [sp + 0x8]\n  3314: ra = 64, jump @0\n      : @74 [@dyn 32] (gas: 6)\n  3319: i32 a1 = a0 + 0\n  3321: a2 = 0x20\n  3324: a0 = 0\n  3326: ra = 0x42\n  3329: ecalli 14 // 'seal_return'\n  3331: fallthrough\n      : @75 [@dyn 33] (gas: 9)\n  3332: a2 = u64 [a1 + 0x18]\n  3335: a3 = u64 [a1 + 0x10]\n  3338: a4 = u64 [a1 + 0x8]\n  3341: a1 = u64 [a1]\n  3343: u64 [a0 + 0x18] = a2\n  3346: u64 [a0 + 0x10] = a3\n  3349: u64 [a0 + 0x8] = a4\n  3352: u64 [a0] = a1\n  3354: ret\n      : @76 (gas: 8)\n  3356: a0 = u64 [sp + 0x70]\n  3359: a1 = u64 [sp + 0x78]\n  3362: a2 = u64 [sp + 0x68]\n  3365: a3 = u64 [sp + 0x60]\n  3368: a1 = a1 | a2\n  3371: a0 = a0 | a3\n  3374: a0 = a0 | a1\n  3377: jump @82 if a0 != 0\n      : @77 (gas: 2)\n  3381: a0 = i32 [0x20084]\n  3386: jump @82 if a0 <=u 67\n      : @78 (gas: 56)\n  3391: i32 a0 = sp + 0x80\n  3395: a1 = 0x4\n  3398: ecalli 3 // 'call_data_load'\n  3400: a0 = u64 [sp + 0x80]\n  3404: u64 [sp + 0x18] = a0\n  3407: a0 = u64 [sp + 0x88]\n  3411: u64 [sp + 0x10] = a0\n  3414: a0 = u64 [sp + 0x90]\n  3418: u64 [sp + 0x8] = a0\n  3421: s1 = u64 [sp + 0x98]\n  3425: i32 a0 = sp + 0x80\n  3429: a1 = 0x24\n  3432: ecalli 3 // 'call_data_load'\n  3434: a0 = u64 [sp + 0x80]\n  3438: a1 = u64 [sp + 0x88]\n  3442: a2 = u64 [sp + 0x90]\n  3446: a3 = u64 [sp + 0x98]\n  3450: u64 [sp + 0x38] = a3\n  3453: u64 [sp + 0x30] = a2\n  3456: u64 [sp + 0x28] = a1\n  3459: u64 [sp + 0x20] = a0\n  3462: u64 [sp + 0x58] = s1\n  3465: a0 = u64 [sp + 0x8]\n  3468: u64 [sp + 0x50] = a0\n  3471: a0 = u64 [sp + 0x10]\n  3474: u64 [sp + 0x48] = a0\n  3477: a0 = sp + 0x40\n  3480: a1 = sp + 0x20\n  3483: a2 = u64 [sp + 0x18]\n  3486: u64 [sp + 0x40] = a2\n  3489: ra = 0x44\n  3492: sp = sp + 0xfffffffffffffba0\n  3496: u64 [sp + 0x458] = ra\n  3500: u64 [sp + 0x450] = s0\n  3504: u64 [sp + 0x448] = s1\n  3508: s0 = sp + 0x460\n  3512: sp = sp & 0xffffffffffffffe0\n  3515: a2 = u64 [a1 + 0x18]\n  3518: u64 [sp + 0x168] = a2\n  3522: a2 = u64 [a1 + 0x10]\n  3525: u64 [sp + 0x160] = a2\n  3529: a2 = u64 [a1 + 0x8]\n  3532: u64 [sp + 0x170] = a2\n  3536: a1 = u64 [a1]\n  3538: u64 [sp + 0x178] = a1\n  3542: a1 = u64 [a0]\n  3544: u64 [sp + 0x158] = a1\n  3548: a1 = u64 [a0 + 0x8]\n  3551: u64 [sp + 0x150] = a1\n  3555: a1 = u64 [a0 + 0x10]\n  3558: u64 [sp + 0x148] = a1\n  3562: s1 = u64 [a0 + 0x18]\n  3565: a1 = 0x20\n  3568: a0 = 0\n  3570: ra = 0x10a\n  3574: jump @0\n      : @79 [@dyn 34] (gas: 3)\n  3577: a0 = 0x40\n  3580: a1 = 0x20\n  3583: ra = 70, jump @0\n      : @80 [@dyn 35] (gas: 100)\n  3588: a1 = u8 [a0 + 0x11]\n  3591: a2 = u8 [a0 + 0x10]\n  3594: a3 = u8 [a0 + 0x12]\n  3597: a4 = u8 [a0 + 0x13]\n  3600: a1 = a1 << 0x8\n  3603: a1 = a1 | a2\n  3606: a3 = a3 << 0x10\n  3609: a4 = a4 << 0x18\n  3612: a3 = a3 | a4\n  3615: a1 = a1 | a3\n  3618: a2 = u8 [a0 + 0x15]\n  3621: a3 = u8 [a0 + 0x14]\n  3624: a4 = u8 [a0 + 0x16]\n  3627: a5 = u8 [a0 + 0x17]\n  3630: a2 = a2 << 0x8\n  3633: a2 = a2 | a3\n  3636: a4 = a4 << 0x10\n  3639: a5 = a5 << 0x18\n  3642: a4 = a4 | a5\n  3645: a2 = a2 | a4\n  3648: a2 = a2 << 0x20\n  3651: t0 = a2 | a1\n  3654: a2 = u8 [a0 + 0x1]\n  3657: a3 = u8 [a0]\n  3659: a4 = u8 [a0 + 0x2]\n  3662: a5 = u8 [a0 + 0x3]\n  3665: a2 = a2 << 0x8\n  3668: a2 = a2 | a3\n  3671: a4 = a4 << 0x10\n  3674: a5 = a5 << 0x18\n  3677: a4 = a4 | a5\n  3680: a2 = a2 | a4\n  3683: a3 = u8 [a0 + 0x5]\n  3686: a4 = u8 [a0 + 0x4]\n  3689: a5 = u8 [a0 + 0x6]\n  3692: s1 = u8 [a0 + 0x7]\n  3695: a3 = a3 << 0x8\n  3698: a3 = a3 | a4\n  3701: a5 = a5 << 0x10\n  3704: s1 = s1 << 0x18\n  3707: a5 = a5 | s1\n  3710: a3 = a3 | a5\n  3713: a3 = a3 << 0x20\n  3716: a2 = a2 | a3\n  3719: a3 = u8 [a0 + 0x19]\n  3722: a4 = u8 [a0 + 0x18]\n  3725: a5 = u8 [a0 + 0x1a]\n  3728: s1 = u8 [a0 + 0x1b]\n  3731: a3 = a3 << 0x8\n  3734: a3 = a3 | a4\n  3737: a5 = a5 << 0x10\n  3740: s1 = s1 << 0x18\n  3743: a5 = a5 | s1\n  3746: a3 = a3 | a5\n  3749: a4 = u8 [a0 + 0x1d]\n  3752: a5 = u8 [a0 + 0x1c]\n  3755: s1 = u8 [a0 + 0x1e]\n  3758: a1 = u8 [a0 + 0x1f]\n  3761: a4 = a4 << 0x8\n  3764: a4 = a4 | a5\n  3767: s1 = s1 << 0x10\n  3770: a1 = a1 << 0x18\n  3773: a1 = a1 | s1\n  3776: a1 = a1 | a4\n  3779: a1 = a1 << 0x20\n  3782: a3 = a3 | a1\n  3785: a1 = u8 [a0 + 0x9]\n  3788: a4 = u8 [a0 + 0x8]\n  3791: a5 = u8 [a0 + 0xa]\n  3794: s1 = u8 [a0 + 0xb]\n  3797: a1 = a1 << 0x8\n  3800: a1 = a1 | a4\n  3803: a5 = a5 << 0x10\n  3806: s1 = s1 << 0x18\n  3809: a5 = a5 | s1\n  3812: a1 = a1 | a5\n  3815: a4 = u8 [a0 + 0xd]\n  3818: a5 = u8 [a0 + 0xc]\n  3821: s1 = u8 [a0 + 0xe]\n  3824: a0 = u8 [a0 + 0xf]\n  3827: a4 = a4 << 0x8\n  3830: a4 = a4 | a5\n  3833: s1 = s1 << 0x10\n  3836: a0 = a0 << 0x18\n  3839: a0 = a0 | s1\n  3842: a0 = a0 | a4\n  3845: a0 = a0 << 0x20\n  3848: a0 = a0 | a1\n  3851: a1 = reverse a0\n  3853: a0 = reverse a3\n  3855: a2 = reverse a2\n  3857: a3 = reverse t0\n  3859: a2 = a2 | a3\n  3862: a3 = a0 | a1\n  3865: a3 = a3 | a2\n  3868: a3 = a3 >> 0x20\n  3871: a1 = a1 | a2\n  3874: a1 = a1 << 0x20\n  3877: a1 = a1 | a3\n  3880: jump @84 if a1 == 0\n      : @81 (gas: 1)\n  3883: trap\n      : @82 (gas: 3)\n  3884: a0 = 0\n  3886: a1 = 0\n  3888: ra = 72, jump @0\n      : @83 [@dyn 36] (gas: 7)\n  3893: i32 a1 = a0 + 0\n  3895: a0 = 0x1\n  3898: a2 = 0\n  3900: ecalli 14 // 'seal_return'\n  3902: i32 a0 = a0 + 0\n  3904: ra = 0x4a\n  3907: jump @0\n      : @84 (gas: 2)\n  3910: i32 a0 = a0 + 0\n  3912: ra = 74, jump @0\n      : @85 [@dyn 37] (gas: 6)\n  3917: i32 a1 = a0 + 0\n  3919: a0 = 0\n  3921: a2 = 0\n  3923: ra = 0x4c\n  3926: ecalli 14 // 'seal_return'\n  3928: fallthrough\n      : @86 [@dyn 38] (gas: 13)\n  3929: sp = sp + 0xffffffffffffffb0\n  3932: u64 [sp + 0x48] = ra\n  3935: u64 [sp + 0x40] = s0\n  3938: s0 = sp + 0x50\n  3941: sp = sp & 0xfffffffffffffff0\n  3944: u64 [sp + 48] = 0\n  3947: u64 [sp + 40] = 0\n  3950: u64 [sp + 32] = 0\n  3953: a0 = 0x4e487b7100000000\n  3963: a1 = sp + 0x20\n  3966: u64 [sp + 0x38] = a0\n  3969: a0 = 0\n  3971: ra = 78, jump @8\n      : @87 [@dyn 39] (gas: 7)\n  3976: u64 [sp + 24] = 0\n  3979: u64 [sp + 16] = 0\n  3982: u64 [sp + 0] = 0x32\n  3985: a0 = 0x4\n  3988: a1 = sp\n  3990: u64 [sp + 8] = 0\n  3993: ra = 80, jump @8\n      : @88 [@dyn 40] (gas: 3)\n  3998: a1 = 0x24\n  4001: a0 = 0\n  4003: ra = 82, jump @0\n      : @89 [@dyn 41] (gas: 6)\n  4008: i32 a1 = a0 + 0\n  4010: a0 = 0x1\n  4013: a2 = 0x24\n  4016: ra = 0x54\n  4019: ecalli 14 // 'seal_return'\n  4021: fallthrough\n      : @90 [@dyn 42] (gas: 40)\n  4022: sp = sp + 0xffffffffffffffa0\n  4025: u64 [sp + 0x58] = ra\n  4028: u64 [sp + 0x50] = s0\n  4031: u64 [sp + 0x48] = s1\n  4034: s0 = sp + 0x60\n  4037: sp = sp & 0xffffffffffffffe0\n  4040: s1 = a0\n  4042: a0 = u64 [a1 + 0x18]\n  4045: a2 = u64 [a1 + 0x10]\n  4048: a3 = u64 [a1 + 0x8]\n  4051: a1 = u64 [a1]\n  4053: u64 [sp + 0x18] = a0\n  4056: u64 [sp + 0x10] = a2\n  4059: u64 [sp + 0x8] = a3\n  4062: u64 [sp] = a1\n  4064: u64 [sp + 56] = 0\n  4067: u64 [sp + 48] = 0\n  4070: u64 [sp + 40] = 0\n  4073: u64 [sp + 32] = 0\n  4076: u32 [sp + 64] = 0x20\n  4080: i32 a1 = sp + 0\n  4082: i32 a3 = sp + 0x20\n  4085: i32 a4 = sp + 0x40\n  4088: a2 = 0xffffffffffffffff\n  4091: a0 = 0\n  4093: ecalli 8 // 'get_storage'\n  4095: a0 = u64 [sp + 0x38]\n  4098: a1 = u64 [sp + 0x30]\n  4101: a2 = u64 [sp + 0x28]\n  4104: a3 = u64 [sp + 0x20]\n  4107: u64 [s1 + 0x18] = a0\n  4110: u64 [s1 + 0x10] = a1\n  4113: u64 [s1 + 0x8] = a2\n  4116: u64 [s1] = a3\n  4118: sp = s0 + 0xffffffffffffffa0\n  4121: ra = u64 [sp + 0x58]\n  4124: s0 = u64 [sp + 0x50]\n  4127: s1 = u64 [sp + 0x48]\n  4130: sp = sp + 0x60\n  4133: ret\n      : @91 (gas: 38)\n  4135: sp = sp + 0xfffffffffffffee0\n  4139: u64 [sp + 0x118] = ra\n  4143: u64 [sp + 0x110] = s0\n  4147: u64 [sp + 0x108] = s1\n  4151: s0 = sp + 0x120\n  4155: sp = sp & 0xffffffffffffffe0\n  4158: u64 [sp + 0x40] = a0\n  4161: a0 = u64 [a2]\n  4163: u64 [sp + 0x48] = a0\n  4166: a0 = u64 [a2 + 0x8]\n  4169: u64 [sp + 0x50] = a0\n  4172: a0 = u64 [a2 + 0x10]\n  4175: u64 [sp + 0x58] = a0\n  4178: s1 = u64 [a2 + 0x18]\n  4181: a4 = u64 [a1 + 0x18]\n  4184: a3 = u64 [a1 + 0x10]\n  4187: a2 = u64 [a1 + 0x8]\n  4190: a0 = u64 [a1]\n  4192: u64 [sp + 0x18] = a4\n  4195: u64 [sp + 0xb8] = a4\n  4199: u64 [sp + 0x20] = a3\n  4202: u64 [sp + 0xb0] = a3\n  4206: u64 [sp + 0x28] = a2\n  4209: u64 [sp + 0xa8] = a2\n  4213: u64 [sp + 0x30] = a0\n  4216: u64 [sp + 0xa0] = a0\n  4220: u64 [sp + 248] = 0\n  4224: u64 [sp + 240] = 0\n  4228: u64 [sp + 232] = 0\n  4232: u64 [sp + 224] = 0\n  4236: u32 [sp + 192] = 0x20\n  4241: i32 a1 = sp + 0xa0\n  4245: i32 a3 = sp + 0xe0\n  4249: i32 a4 = sp + 0xc0\n  4253: a2 = 0xffffffffffffffff\n  4256: a0 = 0\n  4258: ecalli 8 // 'get_storage'\n  4260: fallthrough\n      : @92 (gas: 20)\n  4261: a0 = u64 [sp + 0xf8]\n  4265: t0 = u64 [sp + 0xe0]\n  4269: a2 = u64 [sp + 0xf0]\n  4273: a3 = u64 [sp + 0xe8]\n  4277: a4 = a0 ^ s1\n  4280: u64 [sp + 0x38] = s1\n  4283: a1 = s1 <u a0\n  4286: a0 = u64 [sp + 0x58]\n  4289: a5 = a0 <u a2\n  4292: a5 = a1 if a4 != 0\n  4295: a1 = u64 [sp + 0x50]\n  4298: t1 = a3 ^ a1\n  4301: a3 = a1 <u a3\n  4304: a1 = u64 [sp + 0x48]\n  4307: a1 = a1 <u t0\n  4310: a1 = a3 if t1 != 0\n  4313: a0 = a0 ^ a2\n  4316: a0 = a0 | a4\n  4319: a1 = a5 if a0 != 0\n  4322: jump @96 if a1 == 0\n      : @93 (gas: 3)\n  4326: a1 = 0x20\n  4329: a0 = 0\n  4331: ra = 86, jump @0\n      : @94 [@dyn 43] (gas: 71)\n  4336: a1 = u64 [sp + 0x18]\n  4339: a1 = reverse a1\n  4341: a2 = u64 [sp + 0x20]\n  4344: a2 = reverse a2\n  4346: a3 = u64 [sp + 0x28]\n  4349: a3 = reverse a3\n  4351: a4 = u64 [sp + 0x30]\n  4354: a4 = reverse a4\n  4356: a5 = a4 >> 0x38\n  4359: u8 [a0 + 0x1f] = a5\n  4362: a5 = a4 >> 0x30\n  4365: u8 [a0 + 0x1e] = a5\n  4368: a5 = a4 >> 0x28\n  4371: u8 [a0 + 0x1d] = a5\n  4374: a5 = a4 >> 0x20\n  4377: u8 [a0 + 0x1c] = a5\n  4380: a5 = a4 >> 0x18\n  4383: u8 [a0 + 0x1b] = a5\n  4386: a5 = a4 >> 0x10\n  4389: u8 [a0 + 0x1a] = a5\n  4392: a5 = a4 >> 0x8\n  4395: u8 [a0 + 0x19] = a5\n  4398: u8 [a0 + 0x18] = a4\n  4401: u8 [a0 + 0x10] = a3\n  4404: a4 = a3 >> 0x38\n  4407: u8 [a0 + 0x17] = a4\n  4410: a4 = a3 >> 0x30\n  4413: u8 [a0 + 0x16] = a4\n  4416: a4 = a3 >> 0x28\n  4419: u8 [a0 + 0x15] = a4\n  4422: a4 = a3 >> 0x20\n  4425: u8 [a0 + 0x14] = a4\n  4428: a4 = a3 >> 0x18\n  4431: u8 [a0 + 0x13] = a4\n  4434: a4 = a3 >> 0x10\n  4437: u8 [a0 + 0x12] = a4\n  4440: a3 = a3 >> 0x8\n  4443: u8 [a0 + 0x11] = a3\n  4446: u8 [a0 + 0x8] = a2\n  4449: a3 = a2 >> 0x38\n  4452: u8 [a0 + 0xf] = a3\n  4455: a3 = a2 >> 0x30\n  4458: u8 [a0 + 0xe] = a3\n  4461: a3 = a2 >> 0x28\n  4464: u8 [a0 + 0xd] = a3\n  4467: a3 = a2 >> 0x20\n  4470: u8 [a0 + 0xc] = a3\n  4473: a3 = a2 >> 0x18\n  4476: u8 [a0 + 0xb] = a3\n  4479: a3 = a2 >> 0x10\n  4482: u8 [a0 + 0xa] = a3\n  4485: a2 = a2 >> 0x8\n  4488: u8 [a0 + 0x9] = a2\n  4491: u8 [a0] = a1\n  4493: a2 = a1 >> 0x38\n  4496: u8 [a0 + 0x7] = a2\n  4499: a2 = a1 >> 0x30\n  4502: u8 [a0 + 0x6] = a2\n  4505: a2 = a1 >> 0x28\n  4508: u8 [a0 + 0x5] = a2\n  4511: a2 = a1 >> 0x20\n  4514: u8 [a0 + 0x4] = a2\n  4517: a2 = a1 >> 0x18\n  4520: u8 [a0 + 0x3] = a2\n  4523: a2 = a1 >> 0x10\n  4526: u8 [a0 + 0x2] = a2\n  4529: a1 = a1 >> 0x8\n  4532: u8 [a0 + 0x1] = a1\n  4535: a1 = 0x20\n  4538: a0 = 0\n  4540: ra = 88, jump @0\n      : @95 [@dyn 44] (gas: 45)\n  4545: i32 a0 = a0 + 0\n  4547: i32 a2 = sp + 0xe0\n  4551: a1 = 0x20\n  4554: ecalli 9 // 'hash_keccak_256'\n  4556: a0 = u64 [sp + 0xe0]\n  4560: a1 = u64 [sp + 0xe8]\n  4564: a2 = u64 [sp + 0xf8]\n  4568: a3 = u64 [sp + 0xf0]\n  4572: t0 = reverse a0\n  4574: a1 = reverse a1\n  4576: a2 = reverse a2\n  4578: a3 = reverse a3\n  4580: a4 = u64 [sp + 0x50]\n  4583: a4 = a4 + a3\n  4586: a5 = u64 [sp + 0x48]\n  4589: a5 = a5 + a2\n  4592: a2 = a5 <u a2\n  4595: a4 = a4 + a2\n  4598: s1 = a4 ^ a3\n  4601: a3 = a4 <u a3\n  4604: a3 = a2 if s1 == 0\n  4607: a2 = u64 [sp + 0x58]\n  4610: a2 = a2 + a1\n  4613: a3 = a3 + a2\n  4616: s1 = a3 <u a2\n  4619: a0 = u64 [sp + 0x38]\n  4622: a0 = a0 + t0\n  4625: a1 = a2 <u a1\n  4628: a0 = a0 + a1\n  4631: a0 = a0 + s1\n  4634: a1 = u64 [sp + 0x40]\n  4637: u64 [a1 + 56] = 0\n  4640: u64 [a1 + 48] = 0\n  4643: u64 [a1 + 40] = 0\n  4646: u64 [a1 + 32] = 0\n  4649: u64 [a1] = a5\n  4651: u64 [a1 + 0x8] = a4\n  4654: u64 [a1 + 0x10] = a3\n  4657: u64 [a1 + 0x18] = a0\n  4660: sp = s0 + 0xfffffffffffffee0\n  4664: ra = u64 [sp + 0x118]\n  4668: s0 = u64 [sp + 0x110]\n  4672: s1 = u64 [sp + 0x108]\n  4676: sp = sp + 0x120\n  4680: ret\n      : @96 (gas: 8)\n  4682: u64 [sp + 144] = 0\n  4686: u64 [sp + 136] = 0\n  4690: u64 [sp + 128] = 0\n  4694: a0 = 0x4e487b7100000000\n  4704: a1 = sp + 0x80\n  4708: u64 [sp + 0x98] = a0\n  4712: a0 = 0\n  4714: ra = 90, jump @8\n      : @97 [@dyn 45] (gas: 7)\n  4719: u64 [sp + 120] = 0\n  4722: u64 [sp + 112] = 0\n  4725: u64 [sp + 96] = 0x32\n  4729: a0 = 0x4\n  4732: a1 = sp + 0x60\n  4735: u64 [sp + 104] = 0\n  4738: ra = 92, jump @8\n      : @98 [@dyn 46] (gas: 3)\n  4743: a1 = 0x24\n  4746: a0 = 0\n  4748: ra = 94, jump @0\n      : @99 [@dyn 47] (gas: 6)\n  4753: i32 a1 = a0 + 0\n  4755: a0 = 0x1\n  4758: a2 = 0x24\n  4761: ra = 0x60\n  4764: ecalli 14 // 'seal_return'\n  4766: fallthrough\n      : @100 [@dyn 48] (gas: 9)\n  4767: a2 = u64 [a1 + 0x18]\n  4770: a3 = u64 [a1 + 0x10]\n  4773: a4 = u64 [a1 + 0x8]\n  4776: a1 = u64 [a1]\n  4778: u64 [a0 + 0x18] = a2\n  4781: u64 [a0 + 0x10] = a3\n  4784: u64 [a0 + 0x8] = a4\n  4787: u64 [a0] = a1\n  4789: ret\n      : @101 (gas: 19)\n  4791: t1 = u64 [sp + 0x8]\n  4794: t0 = u64 [sp]\n  4796: a0 = u64 [sp + 0x118]\n  4800: a1 = u64 [sp + 0x100]\n  4804: t2 = u64 [sp + 0x110]\n  4808: a3 = u64 [sp + 0x108]\n  4812: a4 = a0 ^ s1\n  4815: a0 = s1 <u a0\n  4818: a2 = u64 [sp + 0x10]\n  4821: a5 = a2 <u t2\n  4824: a5 = a0 if a4 != 0\n  4827: a0 = a3 ^ t0\n  4830: a3 = t0 <u a3\n  4833: a1 = t1 <u a1\n  4836: a1 = a3 if a0 != 0\n  4839: a0 = t2 ^ a2\n  4842: a0 = a0 | a4\n  4845: a1 = a5 if a0 != 0\n  4848: jump @104 if a1 == 0\n      : @102 (gas: 12)\n  4852: u64 [sp + 0x60] = t1\n  4855: u64 [sp + 152] = 0\n  4859: u64 [sp + 144] = 0\n  4863: u64 [sp + 136] = 0\n  4867: u64 [sp + 128] = 0x1\n  4872: u64 [sp + 0x68] = t0\n  4875: u64 [sp + 0x70] = a2\n  4878: a0 = sp + 0xa0\n  4882: a1 = sp + 0x80\n  4886: a2 = sp + 0x60\n  4889: u64 [sp + 0x78] = s1\n  4892: ra = 98, jump @91\n      : @103 [@dyn 49] (gas: 250)\n  4897: a0 = u64 [sp + 0xd8]\n  4901: u64 [sp + 0x10] = a0\n  4904: a0 = u64 [sp + 0xd0]\n  4908: u64 [sp + 0x8] = a0\n  4911: s1 = u64 [sp + 0xc8]\n  4915: a0 = u64 [sp + 0xc0]\n  4919: u64 [sp] = a0\n  4921: a0 = u64 [sp + 0xb8]\n  4925: a1 = u64 [sp + 0xb0]\n  4929: a2 = u64 [sp + 0xa8]\n  4933: a3 = u64 [sp + 0xa0]\n  4937: u64 [sp + 0xf8] = a0\n  4941: u64 [sp + 0xf0] = a1\n  4945: u64 [sp + 0xe8] = a2\n  4949: u64 [sp + 0xe0] = a3\n  4953: u64 [sp + 280] = 0\n  4957: u64 [sp + 272] = 0\n  4961: u64 [sp + 264] = 0\n  4965: u64 [sp + 256] = 0\n  4969: u32 [sp + 288] = 0x20\n  4974: i32 a1 = sp + 0xe0\n  4978: i32 a3 = sp + 0x100\n  4982: i32 a4 = sp + 0x120\n  4986: a2 = 0xffffffffffffffff\n  4989: a0 = 0\n  4991: ecalli 8 // 'get_storage'\n  4993: t0 = u64 [sp + 0x100]\n  4997: a2 = u64 [sp + 0x108]\n  5001: a3 = u64 [sp + 0x110]\n  5005: t2 = u64 [sp]\n  5007: a0 = t2 >> 0x3d\n  5010: a4 = s1 << 0x3\n  5013: a4 = a4 | a0\n  5016: s1 = s1 >> 0x3d\n  5019: a1 = u64 [sp + 0x8]\n  5022: a0 = a1 << 0x3\n  5025: s1 = s1 | a0\n  5028: a0 = a1 >> 0x3d\n  5031: a5 = u64 [sp + 0x10]\n  5034: a5 = a5 << 0x3\n  5037: a5 = a5 | a0\n  5040: a0 = t2 << 0x3\n  5043: a1 = a4 >u 0\n  5045: a0 = a0 <u 0x100\n  5049: t1 = a0 ^ 0x1\n  5052: t1 = a1 if a4 != 0\n  5055: a1 = a5 >u 0\n  5057: a0 = s1 >u 0\n  5059: a0 = a1 if a5 != 0\n  5062: a4 = u64 [sp + 0x118]\n  5066: a5 = a5 | s1\n  5069: t1 = a0 if a5 != 0\n  5072: u8 [sp + 95] = 0\n  5075: u8 [sp + 94] = 0\n  5078: u8 [sp + 93] = 0\n  5081: u8 [sp + 92] = 0\n  5084: u8 [sp + 91] = 0\n  5087: u8 [sp + 90] = 0\n  5090: u8 [sp + 89] = 0\n  5093: u8 [sp + 88] = 0\n  5096: u8 [sp + 87] = 0\n  5099: u8 [sp + 86] = 0\n  5102: u8 [sp + 85] = 0\n  5105: u8 [sp + 84] = 0\n  5108: u8 [sp + 83] = 0\n  5111: u8 [sp + 82] = 0\n  5114: u8 [sp + 81] = 0\n  5117: u8 [sp + 80] = 0\n  5120: u8 [sp + 79] = 0\n  5123: u8 [sp + 78] = 0\n  5126: u8 [sp + 77] = 0\n  5129: u8 [sp + 76] = 0\n  5132: u8 [sp + 75] = 0\n  5135: u8 [sp + 74] = 0\n  5138: u8 [sp + 73] = 0\n  5141: u8 [sp + 72] = 0\n  5144: u8 [sp + 71] = 0\n  5147: u8 [sp + 70] = 0\n  5150: u8 [sp + 69] = 0\n  5153: u8 [sp + 68] = 0\n  5156: u8 [sp + 67] = 0\n  5159: u8 [sp + 66] = 0\n  5162: u8 [sp + 65] = 0\n  5165: u8 [sp + 64] = 0\n  5168: u8 [sp + 0x38] = a4\n  5171: u8 [sp + 0x30] = a3\n  5174: u8 [sp + 0x28] = a2\n  5177: u8 [sp + 0x20] = t0\n  5180: a0 = a4 >> 0x38\n  5183: u8 [sp + 0x3f] = a0\n  5186: a0 = a4 >> 0x30\n  5189: u8 [sp + 0x3e] = a0\n  5192: a0 = a4 >> 0x28\n  5195: u8 [sp + 0x3d] = a0\n  5198: a0 = a4 >> 0x20\n  5201: u8 [sp + 0x3c] = a0\n  5204: a0 = a4 >> 0x18\n  5207: u8 [sp + 0x3b] = a0\n  5210: a0 = a4 >> 0x10\n  5213: u8 [sp + 0x3a] = a0\n  5216: a4 = a4 >> 0x8\n  5219: u8 [sp + 0x39] = a4\n  5222: a0 = a3 >> 0x38\n  5225: u8 [sp + 0x37] = a0\n  5228: a0 = a3 >> 0x30\n  5231: u8 [sp + 0x36] = a0\n  5234: a0 = a3 >> 0x28\n  5237: u8 [sp + 0x35] = a0\n  5240: a0 = a3 >> 0x20\n  5243: u8 [sp + 0x34] = a0\n  5246: a0 = a3 >> 0x18\n  5249: u8 [sp + 0x33] = a0\n  5252: a0 = a3 >> 0x10\n  5255: u8 [sp + 0x32] = a0\n  5258: a3 = a3 >> 0x8\n  5261: u8 [sp + 0x31] = a3\n  5264: a0 = a2 >> 0x38\n  5267: u8 [sp + 0x2f] = a0\n  5270: a0 = a2 >> 0x30\n  5273: u8 [sp + 0x2e] = a0\n  5276: a0 = a2 >> 0x28\n  5279: u8 [sp + 0x2d] = a0\n  5282: a0 = a2 >> 0x20\n  5285: u8 [sp + 0x2c] = a0\n  5288: a0 = a2 >> 0x18\n  5291: u8 [sp + 0x2b] = a0\n  5294: a0 = a2 >> 0x10\n  5297: u8 [sp + 0x2a] = a0\n  5300: a2 = a2 >> 0x8\n  5303: u8 [sp + 0x29] = a2\n  5306: a0 = t0 >> 0x38\n  5309: u8 [sp + 0x27] = a0\n  5312: a0 = t0 >> 0x30\n  5315: u8 [sp + 0x26] = a0\n  5318: a0 = t0 >> 0x28\n  5321: u8 [sp + 0x25] = a0\n  5324: a0 = t0 >> 0x20\n  5327: u8 [sp + 0x24] = a0\n  5330: a0 = t0 >> 0x18\n  5333: u8 [sp + 0x23] = a0\n  5336: a0 = t0 >> 0x10\n  5339: u8 [sp + 0x22] = a0\n  5342: a0 = t0 >> 0x8\n  5345: u8 [sp + 0x21] = a0\n  5348: a1 = t2 & 0x1f\n  5351: a0 = sp + 0x20\n  5354: a1 = a1 + a0\n  5357: a0 = u8 [a1 + 0x19]\n  5360: a2 = u8 [a1 + 0x18]\n  5363: a3 = u8 [a1 + 0x1a]\n  5366: a4 = u8 [a1 + 0x1b]\n  5369: a0 = a0 << 0x8\n  5372: a0 = a0 | a2\n  5375: a3 = a3 << 0x10\n  5378: a4 = a4 << 0x18\n  5381: a3 = a3 | a4\n  5384: a0 = a0 | a3\n  5387: a2 = u8 [a1 + 0x1d]\n  5390: a3 = u8 [a1 + 0x1c]\n  5393: a4 = u8 [a1 + 0x1e]\n  5396: a5 = u8 [a1 + 0x1f]\n  5399: a2 = a2 << 0x8\n  5402: a2 = a2 | a3\n  5405: a4 = a4 << 0x10\n  5408: a5 = a5 << 0x18\n  5411: a4 = a4 | a5\n  5414: a2 = a2 | a4\n  5417: a2 = a2 << 0x20\n  5420: t0 = a2 | a0\n  5423: a0 = u8 [a1 + 0x11]\n  5426: a3 = u8 [a1 + 0x10]\n  5429: a4 = u8 [a1 + 0x12]\n  5432: a5 = u8 [a1 + 0x13]\n  5435: a0 = a0 << 0x8\n  5438: a0 = a0 | a3\n  5441: a4 = a4 << 0x10\n  5444: a5 = a5 << 0x18\n  5447: a4 = a4 | a5\n  5450: a0 = a0 | a4\n  5453: a3 = u8 [a1 + 0x15]\n  5456: a4 = u8 [a1 + 0x14]\n  5459: a5 = u8 [a1 + 0x16]\n  5462: s1 = u8 [a1 + 0x17]\n  5465: a3 = a3 << 0x8\n  5468: a3 = a3 | a4\n  5471: a5 = a5 << 0x10\n  5474: s1 = s1 << 0x18\n  5477: a5 = a5 | s1\n  5480: a3 = a3 | a5\n  5483: a3 = a3 << 0x20\n  5486: a3 = a3 | a0\n  5489: a0 = u8 [a1 + 0x9]\n  5492: a4 = u8 [a1 + 0x8]\n  5495: a5 = u8 [a1 + 0xa]\n  5498: s1 = u8 [a1 + 0xb]\n  5501: a0 = a0 << 0x8\n  5504: a0 = a0 | a4\n  5507: a5 = a5 << 0x10\n  5510: s1 = s1 << 0x18\n  5513: a5 = a5 | s1\n  5516: a0 = a0 | a5\n  5519: a4 = u8 [a1 + 0xd]\n  5522: a5 = u8 [a1 + 0xc]\n  5525: s1 = u8 [a1 + 0xe]\n  5528: a2 = u8 [a1 + 0xf]\n  5531: a4 = a4 << 0x8\n  5534: a4 = a4 | a5\n  5537: s1 = s1 << 0x10\n  5540: a2 = a2 << 0x18\n  5543: a2 = a2 | s1\n  5546: a2 = a2 | a4\n  5549: a2 = a2 << 0x20\n  5552: a4 = a2 | a0\n  5555: a0 = u8 [a1 + 0x1]\n  5558: a2 = u8 [a1]\n  5560: a5 = u8 [a1 + 0x2]\n  5563: s1 = u8 [a1 + 0x3]\n  5566: a0 = a0 << 0x8\n  5569: a0 = a0 | a2\n  5572: a5 = a5 << 0x10\n  5575: s1 = s1 << 0x18\n  5578: a5 = a5 | s1\n  5581: a0 = a0 | a5\n  5584: a2 = u8 [a1 + 0x5]\n  5587: a5 = u8 [a1 + 0x4]\n  5590: s1 = u8 [a1 + 0x6]\n  5593: a1 = u8 [a1 + 0x7]\n  5596: a2 = a2 << 0x8\n  5599: a2 = a2 | a5\n  5602: s1 = s1 << 0x10\n  5605: a1 = a1 << 0x18\n  5608: a1 = a1 | s1\n  5611: a1 = a1 | a2\n  5614: a1 = a1 << 0x20\n  5617: a0 = a0 | a1\n  5620: a0 = 0 if t1 != 0\n  5622: a4 = 0 if t1 != 0\n  5624: a3 = 0 if t1 != 0\n  5626: t0 = 0 if t1 != 0\n  5628: a1 = u64 [sp + 0x18]\n  5631: u64 [a1 + 0x18] = t0\n  5634: u64 [a1 + 0x10] = a3\n  5637: u64 [a1 + 0x8] = a4\n  5640: u64 [a1] = a0\n  5642: sp = s0 + 0xfffffffffffffec0\n  5646: ra = u64 [sp + 0x138]\n  5650: s0 = u64 [sp + 0x130]\n  5654: s1 = u64 [sp + 0x128]\n  5658: sp = sp + 0x140\n  5662: ret\n      : @104 (gas: 2)\n  5664: a0 = 0\n  5666: ra = 100, jump @0\n      : @105 [@dyn 50] (gas: 6)\n  5671: i32 a1 = a0 + 0\n  5673: a0 = 0x1\n  5676: a2 = 0\n  5678: ra = 0x66\n  5681: ecalli 14 // 'seal_return'\n  5683: fallthrough\n      : @106 [@dyn 51] (gas: 17)\n  5684: sp = sp + 0xffffffffffffffa8\n  5687: u64 [sp + 0x50] = ra\n  5690: u64 [sp + 0x48] = s0\n  5693: u64 [sp + 0x40] = s1\n  5696: a3 = u64 [a1 + 0x10]\n  5699: s1 = u64 [a1 + 0x18]\n  5702: a5 = u64 [a1 + 0x8]\n  5705: s0 = u64 [a1]\n  5707: a4 = a5 | s1\n  5710: a1 = s0 | a3\n  5713: a1 = a1 | a4\n  5716: a1 = a1 >> 0x20\n  5719: a4 = a4 | a3\n  5722: a4 = a4 << 0x20\n  5725: a1 = a1 | a4\n  5728: u64 [sp + 0x38] = a0\n  5731: jump @109 if a1 != 0\n      : @107 (gas: 22)\n  5735: a0 = u64 [a2 + 0x18]\n  5738: u64 [sp] = a0\n  5740: a0 = u64 [a2 + 0x10]\n  5743: u64 [sp + 0x8] = a0\n  5746: a0 = u64 [a2 + 0x8]\n  5749: u64 [sp + 0x10] = a0\n  5752: a0 = u64 [a2]\n  5754: u64 [sp + 0x18] = a0\n  5757: a0 = s0 + 0x20\n  5760: u64 [sp + 0x30] = a0\n  5763: a0 = a0 <u s0\n  5766: a1 = a5 + a0\n  5769: u64 [sp + 0x28] = a1\n  5772: a1 = a1 <u a5\n  5775: a1 = a0 if a0 == 0\n  5778: a1 = a1 + a3\n  5781: u64 [sp + 0x20] = a1\n  5784: a0 = a1 <u a3\n  5787: s1 = s1 + a0\n  5790: i32 a0 = s0 + 0\n  5792: a1 = 0x20\n  5795: ra = 104, jump @0\n      : @108 [@dyn 52] (gas: 81)\n  5800: a1 = u64 [sp]\n  5802: a1 = reverse a1\n  5804: a2 = u64 [sp + 0x8]\n  5807: a2 = reverse a2\n  5809: a3 = u64 [sp + 0x10]\n  5812: a3 = reverse a3\n  5814: a4 = u64 [sp + 0x18]\n  5817: a4 = reverse a4\n  5819: a5 = a4 >> 0x38\n  5822: u8 [a0 + 0x1f] = a5\n  5825: a5 = a4 >> 0x30\n  5828: u8 [a0 + 0x1e] = a5\n  5831: a5 = a4 >> 0x28\n  5834: u8 [a0 + 0x1d] = a5\n  5837: a5 = a4 >> 0x20\n  5840: u8 [a0 + 0x1c] = a5\n  5843: a5 = a4 >> 0x18\n  5846: u8 [a0 + 0x1b] = a5\n  5849: a5 = a4 >> 0x10\n  5852: u8 [a0 + 0x1a] = a5\n  5855: a5 = a4 >> 0x8\n  5858: u8 [a0 + 0x19] = a5\n  5861: u8 [a0 + 0x18] = a4\n  5864: u8 [a0 + 0x10] = a3\n  5867: a4 = a3 >> 0x38\n  5870: u8 [a0 + 0x17] = a4\n  5873: a4 = a3 >> 0x30\n  5876: u8 [a0 + 0x16] = a4\n  5879: a4 = a3 >> 0x28\n  5882: u8 [a0 + 0x15] = a4\n  5885: a4 = a3 >> 0x20\n  5888: u8 [a0 + 0x14] = a4\n  5891: a4 = a3 >> 0x18\n  5894: u8 [a0 + 0x13] = a4\n  5897: a4 = a3 >> 0x10\n  5900: u8 [a0 + 0x12] = a4\n  5903: a3 = a3 >> 0x8\n  5906: u8 [a0 + 0x11] = a3\n  5909: u8 [a0 + 0x8] = a2\n  5912: a3 = a2 >> 0x38\n  5915: u8 [a0 + 0xf] = a3\n  5918: a3 = a2 >> 0x30\n  5921: u8 [a0 + 0xe] = a3\n  5924: a3 = a2 >> 0x28\n  5927: u8 [a0 + 0xd] = a3\n  5930: a3 = a2 >> 0x20\n  5933: u8 [a0 + 0xc] = a3\n  5936: a3 = a2 >> 0x18\n  5939: u8 [a0 + 0xb] = a3\n  5942: a3 = a2 >> 0x10\n  5945: u8 [a0 + 0xa] = a3\n  5948: a2 = a2 >> 0x8\n  5951: u8 [a0 + 0x9] = a2\n  5954: u8 [a0] = a1\n  5956: a2 = a1 >> 0x38\n  5959: u8 [a0 + 0x7] = a2\n  5962: a2 = a1 >> 0x30\n  5965: u8 [a0 + 0x6] = a2\n  5968: a2 = a1 >> 0x28\n  5971: u8 [a0 + 0x5] = a2\n  5974: a2 = a1 >> 0x20\n  5977: u8 [a0 + 0x4] = a2\n  5980: a2 = a1 >> 0x18\n  5983: u8 [a0 + 0x3] = a2\n  5986: a2 = a1 >> 0x10\n  5989: u8 [a0 + 0x2] = a2\n  5992: a1 = a1 >> 0x8\n  5995: u8 [a0 + 0x1] = a1\n  5998: a0 = u64 [sp + 0x38]\n  6001: a1 = u64 [sp + 0x30]\n  6004: u64 [a0] = a1\n  6006: a1 = u64 [sp + 0x28]\n  6009: u64 [a0 + 0x8] = a1\n  6012: a1 = u64 [sp + 0x20]\n  6015: u64 [a0 + 0x10] = a1\n  6018: u64 [a0 + 0x18] = s1\n  6021: ra = u64 [sp + 0x50]\n  6024: s0 = u64 [sp + 0x48]\n  6027: s1 = u64 [sp + 0x40]\n  6030: sp = sp + 0x58\n  6033: ret\n      : @109 (gas: 1)\n  6035: trap\n      : @110 (gas: 8)\n  6036: a0 = u64 [sp + 0x70]\n  6039: a1 = u64 [sp + 0x78]\n  6042: a2 = u64 [sp + 0x68]\n  6045: a3 = u64 [sp + 0x60]\n  6048: a1 = a1 | a2\n  6051: a0 = a0 | a3\n  6054: a0 = a0 | a1\n  6057: jump @116 if a0 != 0\n      : @111 (gas: 2)\n  6061: a0 = i32 [0x20084]\n  6066: jump @116 if a0 <=u 35\n      : @112 (gas: 44)\n  6071: i32 a0 = sp + 0x80\n  6075: a1 = 0x4\n  6078: ecalli 3 // 'call_data_load'\n  6080: a2 = u64 [sp + 0x80]\n  6084: a0 = u64 [sp + 0x88]\n  6088: a1 = u64 [sp + 0x90]\n  6092: a3 = u64 [sp + 0x98]\n  6096: u64 [sp + 0x38] = a3\n  6099: u64 [sp + 0x30] = a1\n  6102: u64 [sp + 0x28] = a0\n  6105: a0 = sp + 0x40\n  6108: a1 = sp + 0x20\n  6111: u64 [sp + 0x20] = a2\n  6114: ra = 0x6a\n  6117: sp = sp + 0xfffffffffffffec0\n  6121: u64 [sp + 0x138] = ra\n  6125: u64 [sp + 0x130] = s0\n  6129: u64 [sp + 0x128] = s1\n  6133: s0 = sp + 0x140\n  6137: sp = sp & 0xffffffffffffffe0\n  6140: u64 [sp + 0x18] = a0\n  6143: a0 = u64 [a1]\n  6145: u64 [sp + 0x8] = a0\n  6148: a0 = u64 [a1 + 0x8]\n  6151: u64 [sp] = a0\n  6153: a0 = u64 [a1 + 0x10]\n  6156: u64 [sp + 0x10] = a0\n  6159: s1 = u64 [a1 + 0x18]\n  6162: u64 [sp + 248] = 0\n  6166: u64 [sp + 240] = 0\n  6170: u64 [sp + 232] = 0\n  6174: u64 [sp + 224] = 0x1\n  6179: u64 [sp + 280] = 0\n  6183: u64 [sp + 272] = 0\n  6187: u64 [sp + 264] = 0\n  6191: u64 [sp + 256] = 0\n  6195: u32 [sp + 288] = 0x20\n  6200: i32 a1 = sp + 0xe0\n  6204: i32 a3 = sp + 0x100\n  6208: i32 a4 = sp + 0x120\n  6212: a2 = 0xffffffffffffffff\n  6215: a0 = 0\n  6217: ecalli 8 // 'get_storage'\n  6219: jump @101\n      : @113 [@dyn 53] (gas: 11)\n  6222: a0 = u64 [sp + 0x58]\n  6225: u64 [sp] = a0\n  6227: a0 = u64 [sp + 0x50]\n  6230: u64 [sp + 0x8] = a0\n  6233: a0 = u64 [sp + 0x48]\n  6236: u64 [sp + 0x10] = a0\n  6239: a0 = u64 [sp + 0x40]\n  6242: u64 [sp + 0x18] = a0\n  6245: a0 = 0x40\n  6248: a1 = 0x20\n  6251: ra = 108, jump @0\n      : @114 [@dyn 54] (gas: 100)\n  6256: a1 = u8 [a0 + 0x11]\n  6259: a2 = u8 [a0 + 0x10]\n  6262: a3 = u8 [a0 + 0x12]\n  6265: a4 = u8 [a0 + 0x13]\n  6268: a1 = a1 << 0x8\n  6271: a1 = a1 | a2\n  6274: a3 = a3 << 0x10\n  6277: a4 = a4 << 0x18\n  6280: a3 = a3 | a4\n  6283: a1 = a1 | a3\n  6286: a2 = u8 [a0 + 0x15]\n  6289: a3 = u8 [a0 + 0x14]\n  6292: a4 = u8 [a0 + 0x16]\n  6295: a5 = u8 [a0 + 0x17]\n  6298: a2 = a2 << 0x8\n  6301: a2 = a2 | a3\n  6304: a4 = a4 << 0x10\n  6307: a5 = a5 << 0x18\n  6310: a4 = a4 | a5\n  6313: a2 = a2 | a4\n  6316: a2 = a2 << 0x20\n  6319: t0 = a2 | a1\n  6322: a2 = u8 [a0 + 0x1]\n  6325: a3 = u8 [a0]\n  6327: a4 = u8 [a0 + 0x2]\n  6330: a5 = u8 [a0 + 0x3]\n  6333: a2 = a2 << 0x8\n  6336: a2 = a2 | a3\n  6339: a4 = a4 << 0x10\n  6342: a5 = a5 << 0x18\n  6345: a4 = a4 | a5\n  6348: a2 = a2 | a4\n  6351: a3 = u8 [a0 + 0x5]\n  6354: a4 = u8 [a0 + 0x4]\n  6357: a5 = u8 [a0 + 0x6]\n  6360: s1 = u8 [a0 + 0x7]\n  6363: a3 = a3 << 0x8\n  6366: a3 = a3 | a4\n  6369: a5 = a5 << 0x10\n  6372: s1 = s1 << 0x18\n  6375: a5 = a5 | s1\n  6378: a3 = a3 | a5\n  6381: a3 = a3 << 0x20\n  6384: a2 = a2 | a3\n  6387: a3 = u8 [a0 + 0x19]\n  6390: a4 = u8 [a0 + 0x18]\n  6393: a5 = u8 [a0 + 0x1a]\n  6396: s1 = u8 [a0 + 0x1b]\n  6399: a3 = a3 << 0x8\n  6402: a3 = a3 | a4\n  6405: a5 = a5 << 0x10\n  6408: s1 = s1 << 0x18\n  6411: a5 = a5 | s1\n  6414: a3 = a3 | a5\n  6417: a4 = u8 [a0 + 0x1d]\n  6420: a5 = u8 [a0 + 0x1c]\n  6423: s1 = u8 [a0 + 0x1e]\n  6426: a1 = u8 [a0 + 0x1f]\n  6429: a4 = a4 << 0x8\n  6432: a4 = a4 | a5\n  6435: s1 = s1 << 0x10\n  6438: a1 = a1 << 0x18\n  6441: a1 = a1 | s1\n  6444: a1 = a1 | a4\n  6447: a1 = a1 << 0x20\n  6450: a3 = a3 | a1\n  6453: a1 = u8 [a0 + 0x9]\n  6456: a4 = u8 [a0 + 0x8]\n  6459: a5 = u8 [a0 + 0xa]\n  6462: s1 = u8 [a0 + 0xb]\n  6465: a1 = a1 << 0x8\n  6468: a1 = a1 | a4\n  6471: a5 = a5 << 0x10\n  6474: s1 = s1 << 0x18\n  6477: a5 = a5 | s1\n  6480: a1 = a1 | a5\n  6483: a4 = u8 [a0 + 0xd]\n  6486: a5 = u8 [a0 + 0xc]\n  6489: s1 = u8 [a0 + 0xe]\n  6492: a0 = u8 [a0 + 0xf]\n  6495: a4 = a4 << 0x8\n  6498: a4 = a4 | a5\n  6501: s1 = s1 << 0x10\n  6504: a0 = a0 << 0x18\n  6507: a0 = a0 | s1\n  6510: a0 = a0 | a4\n  6513: a0 = a0 << 0x20\n  6516: a0 = a0 | a1\n  6519: a1 = reverse a0\n  6521: a0 = reverse a3\n  6523: a2 = reverse a2\n  6525: a3 = reverse t0\n  6527: a2 = a2 | a3\n  6530: a3 = a0 | a1\n  6533: a3 = a3 | a2\n  6536: a3 = a3 >> 0x20\n  6539: a1 = a1 | a2\n  6542: a1 = a1 << 0x20\n  6545: a1 = a1 | a3\n  6548: jump @118 if a1 == 0\n      : @115 (gas: 1)\n  6551: trap\n      : @116 (gas: 3)\n  6552: a0 = 0\n  6554: a1 = 0\n  6556: ra = 110, jump @0\n      : @117 [@dyn 55] (gas: 5)\n  6561: i32 a1 = a0 + 0\n  6563: a0 = 0x1\n  6566: a2 = 0\n  6568: ecalli 14 // 'seal_return'\n  6570: fallthrough\n      : @118 (gas: 4)\n  6571: i32 s1 = a0 + 0\n  6573: a1 = 0x20\n  6576: a0 = s1\n  6578: ra = 112, jump @0\n      : @119 [@dyn 56] (gas: 71)\n  6583: a1 = u64 [sp]\n  6585: a1 = reverse a1\n  6587: a2 = u64 [sp + 0x8]\n  6590: a2 = reverse a2\n  6592: a3 = u64 [sp + 0x10]\n  6595: a3 = reverse a3\n  6597: a4 = u64 [sp + 0x18]\n  6600: a4 = reverse a4\n  6602: a5 = a4 >> 0x38\n  6605: u8 [a0 + 0x1f] = a5\n  6608: a5 = a4 >> 0x30\n  6611: u8 [a0 + 0x1e] = a5\n  6614: a5 = a4 >> 0x28\n  6617: u8 [a0 + 0x1d] = a5\n  6620: a5 = a4 >> 0x20\n  6623: u8 [a0 + 0x1c] = a5\n  6626: a5 = a4 >> 0x18\n  6629: u8 [a0 + 0x1b] = a5\n  6632: a5 = a4 >> 0x10\n  6635: u8 [a0 + 0x1a] = a5\n  6638: a5 = a4 >> 0x8\n  6641: u8 [a0 + 0x19] = a5\n  6644: u8 [a0 + 0x18] = a4\n  6647: u8 [a0 + 0x10] = a3\n  6650: a4 = a3 >> 0x38\n  6653: u8 [a0 + 0x17] = a4\n  6656: a4 = a3 >> 0x30\n  6659: u8 [a0 + 0x16] = a4\n  6662: a4 = a3 >> 0x28\n  6665: u8 [a0 + 0x15] = a4\n  6668: a4 = a3 >> 0x20\n  6671: u8 [a0 + 0x14] = a4\n  6674: a4 = a3 >> 0x18\n  6677: u8 [a0 + 0x13] = a4\n  6680: a4 = a3 >> 0x10\n  6683: u8 [a0 + 0x12] = a4\n  6686: a3 = a3 >> 0x8\n  6689: u8 [a0 + 0x11] = a3\n  6692: u8 [a0 + 0x8] = a2\n  6695: a3 = a2 >> 0x38\n  6698: u8 [a0 + 0xf] = a3\n  6701: a3 = a2 >> 0x30\n  6704: u8 [a0 + 0xe] = a3\n  6707: a3 = a2 >> 0x28\n  6710: u8 [a0 + 0xd] = a3\n  6713: a3 = a2 >> 0x20\n  6716: u8 [a0 + 0xc] = a3\n  6719: a3 = a2 >> 0x18\n  6722: u8 [a0 + 0xb] = a3\n  6725: a3 = a2 >> 0x10\n  6728: u8 [a0 + 0xa] = a3\n  6731: a2 = a2 >> 0x8\n  6734: u8 [a0 + 0x9] = a2\n  6737: u8 [a0] = a1\n  6739: a2 = a1 >> 0x38\n  6742: u8 [a0 + 0x7] = a2\n  6745: a2 = a1 >> 0x30\n  6748: u8 [a0 + 0x6] = a2\n  6751: a2 = a1 >> 0x28\n  6754: u8 [a0 + 0x5] = a2\n  6757: a2 = a1 >> 0x20\n  6760: u8 [a0 + 0x4] = a2\n  6763: a2 = a1 >> 0x18\n  6766: u8 [a0 + 0x3] = a2\n  6769: a2 = a1 >> 0x10\n  6772: u8 [a0 + 0x2] = a2\n  6775: a1 = a1 >> 0x8\n  6778: u8 [a0 + 0x1] = a1\n  6781: a1 = 0x20\n  6784: a0 = s1\n  6786: ra = 114, jump @0\n      : @120 [@dyn 57] (gas: 6)\n  6791: i32 a1 = a0 + 0\n  6793: a2 = 0x20\n  6796: a0 = 0\n  6798: ra = 0x74\n  6801: ecalli 14 // 'seal_return'\n  6803: fallthrough\n      : @121 [@dyn 58] (gas: 9)\n  6804: a2 = u64 [a1 + 0x18]\n  6807: a3 = u64 [a1 + 0x10]\n  6810: a4 = u64 [a1 + 0x8]\n  6813: a1 = u64 [a1]\n  6815: u64 [a0 + 0x18] = a2\n  6818: u64 [a0 + 0x10] = a3\n  6821: u64 [a0 + 0x8] = a4\n  6824: u64 [a0] = a1\n  6826: ret\n      : @122 (gas: 8)\n  6828: a0 = u64 [sp + 0x30]\n  6831: a1 = u64 [sp + 0x38]\n  6834: a2 = u64 [sp + 0x28]\n  6837: a3 = u64 [sp + 0x20]\n  6840: a1 = a1 | a2\n  6843: a0 = a0 | a3\n  6846: a0 = a0 | a1\n  6849: jump @130 if a0 != 0\n      : @123 (gas: 2)\n  6853: a0 = i32 [0x20084]\n  6858: jump @130 if a0 <=u 35\n      : @124 (gas: 13)\n  6863: i32 a0 = sp + 0x60\n  6866: a1 = 0x4\n  6869: ecalli 3 // 'call_data_load'\n  6871: a0 = u64 [sp + 0x60]\n  6874: u64 [sp + 0x18] = a0\n  6877: a0 = u64 [sp + 0x68]\n  6880: u64 [sp + 0x10] = a0\n  6883: a0 = u64 [sp + 0x70]\n  6886: u64 [sp + 0x8] = a0\n  6889: s1 = u64 [sp + 0x78]\n  6892: a1 = 0x20\n  6895: a0 = 0\n  6897: ra = 118, jump @0\n      : @125 [@dyn 59] (gas: 70)\n  6902: a1 = reverse s1\n  6904: a2 = u64 [sp + 0x8]\n  6907: a2 = reverse a2\n  6909: a3 = u64 [sp + 0x10]\n  6912: a3 = reverse a3\n  6914: a4 = u64 [sp + 0x18]\n  6917: a4 = reverse a4\n  6919: a5 = a4 >> 0x38\n  6922: u8 [a0 + 0x1f] = a5\n  6925: a5 = a4 >> 0x30\n  6928: u8 [a0 + 0x1e] = a5\n  6931: a5 = a4 >> 0x28\n  6934: u8 [a0 + 0x1d] = a5\n  6937: a5 = a4 >> 0x20\n  6940: u8 [a0 + 0x1c] = a5\n  6943: a5 = a4 >> 0x18\n  6946: u8 [a0 + 0x1b] = a5\n  6949: a5 = a4 >> 0x10\n  6952: u8 [a0 + 0x1a] = a5\n  6955: a5 = a4 >> 0x8\n  6958: u8 [a0 + 0x19] = a5\n  6961: u8 [a0 + 0x18] = a4\n  6964: a4 = a3 >> 0x38\n  6967: u8 [a0 + 0x17] = a4\n  6970: a4 = a3 >> 0x30\n  6973: u8 [a0 + 0x16] = a4\n  6976: a4 = a3 >> 0x28\n  6979: u8 [a0 + 0x15] = a4\n  6982: a4 = a3 >> 0x20\n  6985: u8 [a0 + 0x14] = a4\n  6988: a4 = a3 >> 0x18\n  6991: u8 [a0 + 0x13] = a4\n  6994: a4 = a3 >> 0x10\n  6997: u8 [a0 + 0x12] = a4\n  7000: a4 = a3 >> 0x8\n  7003: u8 [a0 + 0x11] = a4\n  7006: u8 [a0 + 0x10] = a3\n  7009: a3 = a2 >> 0x38\n  7012: u8 [a0 + 0xf] = a3\n  7015: a3 = a2 >> 0x30\n  7018: u8 [a0 + 0xe] = a3\n  7021: a3 = a2 >> 0x28\n  7024: u8 [a0 + 0xd] = a3\n  7027: a3 = a2 >> 0x20\n  7030: u8 [a0 + 0xc] = a3\n  7033: a3 = a2 >> 0x18\n  7036: u8 [a0 + 0xb] = a3\n  7039: a3 = a2 >> 0x10\n  7042: u8 [a0 + 0xa] = a3\n  7045: a3 = a2 >> 0x8\n  7048: u8 [a0 + 0x9] = a3\n  7051: u8 [a0 + 0x8] = a2\n  7054: a2 = a1 >> 0x38\n  7057: u8 [a0 + 0x7] = a2\n  7060: a2 = a1 >> 0x30\n  7063: u8 [a0 + 0x6] = a2\n  7066: a2 = a1 >> 0x28\n  7069: u8 [a0 + 0x5] = a2\n  7072: a2 = a1 >> 0x20\n  7075: u8 [a0 + 0x4] = a2\n  7078: a2 = a1 >> 0x18\n  7081: u8 [a0 + 0x3] = a2\n  7084: a2 = a1 >> 0x10\n  7087: u8 [a0 + 0x2] = a2\n  7090: a2 = a1 >> 0x8\n  7093: u8 [a0 + 0x1] = a2\n  7096: u8 [a0] = a1\n  7098: a0 = 0x20\n  7101: a1 = 0x20\n  7104: ra = 120, jump @0\n      : @126 [@dyn 60] (gas: 35)\n  7109: u8 [a0 + 31] = 0x2\n  7113: u8 [a0 + 30] = 0\n  7116: u8 [a0 + 29] = 0\n  7119: u8 [a0 + 28] = 0\n  7122: u8 [a0 + 27] = 0\n  7125: u8 [a0 + 26] = 0\n  7128: u8 [a0 + 25] = 0\n  7131: u8 [a0 + 24] = 0\n  7134: u8 [a0 + 23] = 0\n  7137: u8 [a0 + 22] = 0\n  7140: u8 [a0 + 21] = 0\n  7143: u8 [a0 + 20] = 0\n  7146: u8 [a0 + 19] = 0\n  7149: u8 [a0 + 18] = 0\n  7152: u8 [a0 + 17] = 0\n  7155: u8 [a0 + 16] = 0\n  7158: u8 [a0 + 15] = 0\n  7161: u8 [a0 + 14] = 0\n  7164: u8 [a0 + 13] = 0\n  7167: u8 [a0 + 12] = 0\n  7170: u8 [a0 + 11] = 0\n  7173: u8 [a0 + 10] = 0\n  7176: u8 [a0 + 9] = 0\n  7179: u8 [a0 + 8] = 0\n  7182: u8 [a0 + 7] = 0\n  7185: u8 [a0 + 6] = 0\n  7188: u8 [a0 + 5] = 0\n  7191: u8 [a0 + 4] = 0\n  7194: u8 [a0 + 3] = 0\n  7197: u8 [a0 + 2] = 0\n  7200: u8 [a0 + 1] = 0\n  7203: u8 [a0 + 0] = 0\n  7205: a1 = 0x40\n  7208: a0 = 0\n  7210: ra = 122, jump @0\n      : @127 [@dyn 61] (gas: 38)\n  7215: i32 a0 = a0 + 0\n  7217: i32 a2 = sp + 0x60\n  7220: a1 = 0x40\n  7223: ecalli 9 // 'hash_keccak_256'\n  7225: a0 = u64 [sp + 0x78]\n  7228: a1 = u64 [sp + 0x70]\n  7231: a2 = u64 [sp + 0x68]\n  7234: a3 = u64 [sp + 0x60]\n  7237: a0 = reverse a0\n  7239: a1 = reverse a1\n  7241: a2 = reverse a2\n  7243: a3 = reverse a3\n  7245: u64 [sp + 0x58] = a3\n  7248: u64 [sp + 0x50] = a2\n  7251: u64 [sp + 0x48] = a1\n  7254: u64 [sp + 0x40] = a0\n  7257: u64 [sp + 120] = 0\n  7260: u64 [sp + 112] = 0\n  7263: u64 [sp + 104] = 0\n  7266: u64 [sp + 96] = 0\n  7269: u32 [sp + 128] = 0x20\n  7274: i32 a1 = sp + 0x40\n  7277: i32 a3 = sp + 0x60\n  7280: i32 a4 = sp + 0x80\n  7284: a2 = 0xffffffffffffffff\n  7287: a0 = 0\n  7289: ecalli 8 // 'get_storage'\n  7291: a0 = u64 [sp + 0x78]\n  7294: u64 [sp] = a0\n  7296: a0 = u64 [sp + 0x70]\n  7299: u64 [sp + 0x8] = a0\n  7302: a0 = u64 [sp + 0x68]\n  7305: u64 [sp + 0x10] = a0\n  7308: a0 = u64 [sp + 0x60]\n  7311: u64 [sp + 0x18] = a0\n  7314: a0 = 0x40\n  7317: a1 = 0x20\n  7320: ra = 124, jump @0\n      : @128 [@dyn 62] (gas: 100)\n  7325: a1 = u8 [a0 + 0x11]\n  7328: a2 = u8 [a0 + 0x10]\n  7331: a3 = u8 [a0 + 0x12]\n  7334: a4 = u8 [a0 + 0x13]\n  7337: a1 = a1 << 0x8\n  7340: a1 = a1 | a2\n  7343: a3 = a3 << 0x10\n  7346: a4 = a4 << 0x18\n  7349: a3 = a3 | a4\n  7352: a1 = a1 | a3\n  7355: a2 = u8 [a0 + 0x15]\n  7358: a3 = u8 [a0 + 0x14]\n  7361: a4 = u8 [a0 + 0x16]\n  7364: a5 = u8 [a0 + 0x17]\n  7367: a2 = a2 << 0x8\n  7370: a2 = a2 | a3\n  7373: a4 = a4 << 0x10\n  7376: a5 = a5 << 0x18\n  7379: a4 = a4 | a5\n  7382: a2 = a2 | a4\n  7385: a2 = a2 << 0x20\n  7388: t0 = a2 | a1\n  7391: a2 = u8 [a0 + 0x1]\n  7394: a3 = u8 [a0]\n  7396: a4 = u8 [a0 + 0x2]\n  7399: a5 = u8 [a0 + 0x3]\n  7402: a2 = a2 << 0x8\n  7405: a2 = a2 | a3\n  7408: a4 = a4 << 0x10\n  7411: a5 = a5 << 0x18\n  7414: a4 = a4 | a5\n  7417: a2 = a2 | a4\n  7420: a3 = u8 [a0 + 0x5]\n  7423: a4 = u8 [a0 + 0x4]\n  7426: a5 = u8 [a0 + 0x6]\n  7429: s1 = u8 [a0 + 0x7]\n  7432: a3 = a3 << 0x8\n  7435: a3 = a3 | a4\n  7438: a5 = a5 << 0x10\n  7441: s1 = s1 << 0x18\n  7444: a5 = a5 | s1\n  7447: a3 = a3 | a5\n  7450: a3 = a3 << 0x20\n  7453: a2 = a2 | a3\n  7456: a3 = u8 [a0 + 0x19]\n  7459: a4 = u8 [a0 + 0x18]\n  7462: a5 = u8 [a0 + 0x1a]\n  7465: s1 = u8 [a0 + 0x1b]\n  7468: a3 = a3 << 0x8\n  7471: a3 = a3 | a4\n  7474: a5 = a5 << 0x10\n  7477: s1 = s1 << 0x18\n  7480: a5 = a5 | s1\n  7483: a3 = a3 | a5\n  7486: a4 = u8 [a0 + 0x1d]\n  7489: a5 = u8 [a0 + 0x1c]\n  7492: s1 = u8 [a0 + 0x1e]\n  7495: a1 = u8 [a0 + 0x1f]\n  7498: a4 = a4 << 0x8\n  7501: a4 = a4 | a5\n  7504: s1 = s1 << 0x10\n  7507: a1 = a1 << 0x18\n  7510: a1 = a1 | s1\n  7513: a1 = a1 | a4\n  7516: a1 = a1 << 0x20\n  7519: a3 = a3 | a1\n  7522: a1 = u8 [a0 + 0x9]\n  7525: a4 = u8 [a0 + 0x8]\n  7528: a5 = u8 [a0 + 0xa]\n  7531: s1 = u8 [a0 + 0xb]\n  7534: a1 = a1 << 0x8\n  7537: a1 = a1 | a4\n  7540: a5 = a5 << 0x10\n  7543: s1 = s1 << 0x18\n  7546: a5 = a5 | s1\n  7549: a1 = a1 | a5\n  7552: a4 = u8 [a0 + 0xd]\n  7555: a5 = u8 [a0 + 0xc]\n  7558: s1 = u8 [a0 + 0xe]\n  7561: a0 = u8 [a0 + 0xf]\n  7564: a4 = a4 << 0x8\n  7567: a4 = a4 | a5\n  7570: s1 = s1 << 0x10\n  7573: a0 = a0 << 0x18\n  7576: a0 = a0 | s1\n  7579: a0 = a0 | a4\n  7582: a0 = a0 << 0x20\n  7585: a0 = a0 | a1\n  7588: a1 = reverse a0\n  7590: a0 = reverse a3\n  7592: a2 = reverse a2\n  7594: a3 = reverse t0\n  7596: a2 = a2 | a3\n  7599: a3 = a0 | a1\n  7602: a3 = a3 | a2\n  7605: a3 = a3 >> 0x20\n  7608: a1 = a1 | a2\n  7611: a1 = a1 << 0x20\n  7614: a1 = a1 | a3\n  7617: jump @132 if a1 == 0\n      : @129 (gas: 1)\n  7620: trap\n      : @130 (gas: 3)\n  7621: a0 = 0\n  7623: a1 = 0\n  7625: ra = 126, jump @0\n      : @131 [@dyn 63] (gas: 5)\n  7630: i32 a1 = a0 + 0\n  7632: a0 = 0x1\n  7635: a2 = 0\n  7637: ecalli 14 // 'seal_return'\n  7639: fallthrough\n      : @132 (gas: 4)\n  7640: i32 s1 = a0 + 0\n  7642: a1 = 0x20\n  7645: a0 = s1\n  7647: ra = 128, jump @0\n      : @133 [@dyn 64] (gas: 71)\n  7653: a1 = u64 [sp]\n  7655: a1 = reverse a1\n  7657: a2 = u64 [sp + 0x8]\n  7660: a2 = reverse a2\n  7662: a3 = u64 [sp + 0x10]\n  7665: a3 = reverse a3\n  7667: a4 = u64 [sp + 0x18]\n  7670: a4 = reverse a4\n  7672: a5 = a4 >> 0x38\n  7675: u8 [a0 + 0x1f] = a5\n  7678: a5 = a4 >> 0x30\n  7681: u8 [a0 + 0x1e] = a5\n  7684: a5 = a4 >> 0x28\n  7687: u8 [a0 + 0x1d] = a5\n  7690: a5 = a4 >> 0x20\n  7693: u8 [a0 + 0x1c] = a5\n  7696: a5 = a4 >> 0x18\n  7699: u8 [a0 + 0x1b] = a5\n  7702: a5 = a4 >> 0x10\n  7705: u8 [a0 + 0x1a] = a5\n  7708: a5 = a4 >> 0x8\n  7711: u8 [a0 + 0x19] = a5\n  7714: u8 [a0 + 0x18] = a4\n  7717: u8 [a0 + 0x10] = a3\n  7720: a4 = a3 >> 0x38\n  7723: u8 [a0 + 0x17] = a4\n  7726: a4 = a3 >> 0x30\n  7729: u8 [a0 + 0x16] = a4\n  7732: a4 = a3 >> 0x28\n  7735: u8 [a0 + 0x15] = a4\n  7738: a4 = a3 >> 0x20\n  7741: u8 [a0 + 0x14] = a4\n  7744: a4 = a3 >> 0x18\n  7747: u8 [a0 + 0x13] = a4\n  7750: a4 = a3 >> 0x10\n  7753: u8 [a0 + 0x12] = a4\n  7756: a3 = a3 >> 0x8\n  7759: u8 [a0 + 0x11] = a3\n  7762: u8 [a0 + 0x8] = a2\n  7765: a3 = a2 >> 0x38\n  7768: u8 [a0 + 0xf] = a3\n  7771: a3 = a2 >> 0x30\n  7774: u8 [a0 + 0xe] = a3\n  7777: a3 = a2 >> 0x28\n  7780: u8 [a0 + 0xd] = a3\n  7783: a3 = a2 >> 0x20\n  7786: u8 [a0 + 0xc] = a3\n  7789: a3 = a2 >> 0x18\n  7792: u8 [a0 + 0xb] = a3\n  7795: a3 = a2 >> 0x10\n  7798: u8 [a0 + 0xa] = a3\n  7801: a2 = a2 >> 0x8\n  7804: u8 [a0 + 0x9] = a2\n  7807: u8 [a0] = a1\n  7809: a2 = a1 >> 0x38\n  7812: u8 [a0 + 0x7] = a2\n  7815: a2 = a1 >> 0x30\n  7818: u8 [a0 + 0x6] = a2\n  7821: a2 = a1 >> 0x28\n  7824: u8 [a0 + 0x5] = a2\n  7827: a2 = a1 >> 0x20\n  7830: u8 [a0 + 0x4] = a2\n  7833: a2 = a1 >> 0x18\n  7836: u8 [a0 + 0x3] = a2\n  7839: a2 = a1 >> 0x10\n  7842: u8 [a0 + 0x2] = a2\n  7845: a1 = a1 >> 0x8\n  7848: u8 [a0 + 0x1] = a1\n  7851: a1 = 0x20\n  7854: a0 = s1\n  7856: ra = 130, jump @0\n      : @134 [@dyn 65] (gas: 6)\n  7862: i32 a1 = a0 + 0\n  7864: a2 = 0x20\n  7867: a0 = 0\n  7869: ra = 0x84\n  7873: ecalli 14 // 'seal_return'\n  7875: fallthrough\n      : @135 [@dyn 66] (gas: 37)\n  7876: sp = sp + 0xffffffffffffff60\n  7880: u64 [sp + 0x98] = ra\n  7884: u64 [sp + 0x90] = s0\n  7888: u64 [sp + 0x88] = s1\n  7892: s0 = sp + 0xa0\n  7896: sp = sp & 0xffffffffffffffe0\n  7899: a4 = u64 [a1]\n  7901: s1 = u64 [a2 + 0x8]\n  7904: ra = u64 [a1 + 0x8]\n  7907: t1 = u64 [a2]\n  7909: a3 = a4 + 0x1f\n  7912: u64 [sp + 0x58] = a4\n  7915: t0 = a3 <u a4\n  7918: a5 = ra + t0\n  7921: u64 [sp + 0x40] = t1\n  7924: t1 = a3 <u t1\n  7927: a3 = a5 ^ s1\n  7930: u64 [sp + 0x48] = s1\n  7933: a4 = a5 <u s1\n  7936: a4 = t1 if a3 == 0\n  7939: t2 = u64 [a1 + 0x10]\n  7942: a3 = a5 <u ra\n  7945: a3 = t0 if t0 == 0\n  7948: t0 = u64 [a2 + 0x18]\n  7951: t1 = u64 [a1 + 0x18]\n  7954: s1 = u64 [a2 + 0x10]\n  7957: a3 = a3 + t2\n  7960: a1 = a3 <u t2\n  7963: a1 = a1 + t1\n  7966: a2 = a1 ^ t0\n  7969: a1 = a1 <s t0\n  7972: a5 = a3 <u s1\n  7975: a1 = a5 if a2 == 0\n  7978: a3 = a3 ^ s1\n  7981: a2 = a2 | a3\n  7984: a4 = a1 if a2 != 0\n  7987: jump @142 if a4 == 0\n      : @136 (gas: 14)\n  7991: u64 [sp + 0x28] = t0\n  7994: u64 [sp + 0x30] = s1\n  7997: u64 [sp + 0x38] = a0\n  8000: a0 = u64 [sp + 0x58]\n  8003: a0 = a0 | t2\n  8006: u64 [sp + 0x18] = t1\n  8009: a1 = ra | t1\n  8012: a0 = a0 | a1\n  8015: a0 = a0 >> 0x20\n  8018: u64 [sp + 0x20] = t2\n  8021: a1 = a1 | t2\n  8024: a1 = a1 << 0x20\n  8027: a0 = a0 | a1\n  8030: jump @141 if a0 != 0\n      : @137 (gas: 5)\n  8034: s1 = ra\n  8036: a1 = i32 [sp + 0x58]\n  8039: i32 a0 = sp + 0x60\n  8042: ecalli 3 // 'call_data_load'\n  8044: fallthrough\n      : @138 (gas: 8)\n  8045: a0 = u64 [sp + 0x78]\n  8048: a1 = u64 [sp + 0x70]\n  8051: t1 = u64 [sp + 0x68]\n  8054: u64 [sp + 0x50] = a0\n  8057: a0 = a0 | a1\n  8060: a3 = t1 <u 0x1\n  8063: a3 = 0 if a0 != 0\n  8065: jump @142 if a3 == 0\n      : @139 (gas: 46)\n  8069: a2 = u64 [sp + 0x60]\n  8072: a0 = u64 [sp + 0x58]\n  8075: a4 = a0 + 0x20\n  8078: a0 = a4 <u a0\n  8081: ra = s1 + a0\n  8084: u64 [sp + 0x10] = a4\n  8087: a4 = a4 + a2\n  8090: u64 [sp + 0x58] = a2\n  8093: t0 = a4 <u a2\n  8096: a5 = t1 + ra\n  8099: a5 = a5 + t0\n  8102: a2 = a5 ^ t1\n  8105: a3 = a5 <u t1\n  8108: a3 = t0 if a2 == 0\n  8111: a2 = ra <u s1\n  8114: a2 = a0 if a0 == 0\n  8117: a0 = u64 [sp + 0x20]\n  8120: t2 = a0 + a2\n  8123: s1 = t2 <u a0\n  8126: a0 = u64 [sp + 0x18]\n  8129: a0 = a0 + s1\n  8132: s1 = u64 [sp + 0x48]\n  8135: a2 = a5 ^ s1\n  8138: a5 = s1 <u a5\n  8141: s1 = u64 [sp + 0x40]\n  8144: a4 = s1 <u a4\n  8147: a4 = a5 if a2 != 0\n  8150: a2 = a1 + t2\n  8153: a5 = a2 <u a1\n  8156: s1 = u64 [sp + 0x50]\n  8159: u64 [sp + 0x48] = a0\n  8162: s1 = s1 + a0\n  8165: a5 = a5 + s1\n  8168: a3 = a3 + a2\n  8171: a2 = a3 <u a2\n  8174: a2 = a2 + a5\n  8177: s1 = u64 [sp + 0x28]\n  8180: a5 = a2 ^ s1\n  8183: t0 = s1 <u a2\n  8186: a2 = u64 [sp + 0x30]\n  8189: s1 = a2 <u a3\n  8192: s1 = t0 if a5 != 0\n  8195: a2 = a2 ^ a3\n  8198: a2 = a2 | a5\n  8201: a4 = s1 if a2 != 0\n  8204: jump @142 if a4 != 0\n      : @140 (gas: 19)\n  8207: a2 = u64 [sp + 0x38]\n  8210: a0 = u64 [sp + 0x58]\n  8213: u64 [a2 + 0x20] = a0\n  8216: a0 = u64 [sp + 0x10]\n  8219: u64 [a2] = a0\n  8221: u64 [a2 + 0x28] = t1\n  8224: u64 [a2 + 0x8] = ra\n  8227: u64 [a2 + 0x30] = a1\n  8230: u64 [a2 + 0x10] = t2\n  8233: a0 = u64 [sp + 0x50]\n  8236: u64 [a2 + 0x38] = a0\n  8239: a0 = u64 [sp + 0x48]\n  8242: u64 [a2 + 0x18] = a0\n  8245: sp = s0 + 0xffffffffffffff60\n  8249: ra = u64 [sp + 0x98]\n  8253: s0 = u64 [sp + 0x90]\n  8257: s1 = u64 [sp + 0x88]\n  8261: sp = sp + 0xa0\n  8265: ret\n      : @141 (gas: 1)\n  8267: trap\n      : @142 (gas: 3)\n  8268: a0 = 0\n  8270: a1 = 0\n  8272: ra = 134, jump @0\n      : @143 [@dyn 67] (gas: 6)\n  8278: i32 a1 = a0 + 0\n  8280: a0 = 0x1\n  8283: a2 = 0\n  8285: ra = 0x88\n  8289: ecalli 14 // 'seal_return'\n  8291: fallthrough\n      : @144 [@dyn 68] (gas: 10)\n  8292: a1 = u64 [a0 + 0x10]\n  8295: a0 = u64 [a0 + 0x18]\n  8298: a2 = 0x100000000\n  8308: a2 = a2 ^ a1\n  8311: a2 = a2 | a0\n  8314: a1 = a1 >> 0x20\n  8317: a1 = a1 <u 0x1\n  8320: a1 = 0 if a0 != 0\n  8322: a1 = 0 if a2 == 0\n  8324: jump @146 if a1 == 0\n      : @145 (gas: 1)\n  8327: ret\n      : @146 (gas: 4)\n  8329: sp = sp + 0xfffffffffffffff8\n  8332: u64 [sp] = ra\n  8334: a0 = 0\n  8336: ra = 138, jump @0\n      : @147 [@dyn 69] (gas: 6)\n  8342: i32 a1 = a0 + 0\n  8344: a0 = 0x1\n  8347: a2 = 0\n  8349: ra = 0x8c\n  8353: ecalli 14 // 'seal_return'\n  8355: fallthrough\n      : @148 [@dyn 70] (gas: 18)\n  8356: sp = sp + 0xffffffffffffffc0\n  8359: u64 [sp + 0x38] = ra\n  8362: u64 [sp + 0x30] = s0\n  8365: u64 [sp + 0x28] = s1\n  8368: s0 = sp + 0x40\n  8371: sp = sp & 0xffffffffffffffe0\n  8374: a2 = u64 [a1 + 0x10]\n  8377: a3 = u64 [a1 + 0x18]\n  8380: a4 = u64 [a1 + 0x8]\n  8383: a1 = u64 [a1]\n  8385: a3 = a3 | a4\n  8388: a4 = a1 | a2\n  8391: a4 = a4 | a3\n  8394: a4 = a4 >> 0x20\n  8397: a2 = a2 | a3\n  8400: a2 = a2 << 0x20\n  8403: a2 = a2 | a4\n  8406: jump @152 if a2 != 0\n      : @149 (gas: 5)\n  8409: s1 = a0\n  8411: i32 a1 = a1 + 0\n  8413: i32 a0 = sp + 0\n  8415: ecalli 3 // 'call_data_load'\n  8417: fallthrough\n      : @150 (gas: 10)\n  8418: a0 = u64 [sp + 0x10]\n  8421: a1 = u64 [sp + 0x18]\n  8424: a2 = 0x100000000\n  8434: a2 = a2 ^ a0\n  8437: a2 = a2 | a1\n  8440: a3 = a0 >> 0x20\n  8443: a3 = a3 <u 0x1\n  8446: a3 = 0 if a1 != 0\n  8448: a3 = 0 if a2 == 0\n  8450: jump @153 if a3 == 0\n      : @151 (gas: 12)\n  8453: a2 = u64 [sp]\n  8455: a3 = u64 [sp + 0x8]\n  8458: u64 [s1] = a2\n  8460: u64 [s1 + 0x8] = a3\n  8463: u64 [s1 + 0x10] = a0\n  8466: u64 [s1 + 0x18] = a1\n  8469: sp = s0 + 0xffffffffffffffc0\n  8472: ra = u64 [sp + 0x38]\n  8475: s0 = u64 [sp + 0x30]\n  8478: s1 = u64 [sp + 0x28]\n  8481: sp = sp + 0x40\n  8484: ret\n      : @152 (gas: 1)\n  8486: trap\n      : @153 (gas: 3)\n  8487: a0 = 0\n  8489: a1 = 0\n  8491: ra = 142, jump @0\n      : @154 [@dyn 71] (gas: 6)\n  8497: i32 a1 = a0 + 0\n  8499: a0 = 0x1\n  8502: a2 = 0\n  8504: ra = 0x90\n  8508: ecalli 14 // 'seal_return'\n  8510: fallthrough\n      : @155 [@dyn 72] (gas: 44)\n  8511: sp = sp + 0xfffffffffffffcc0\n  8515: u64 [sp + 0x338] = ra\n  8519: u64 [sp + 0x330] = s0\n  8523: u64 [sp + 0x328] = s1\n  8527: s0 = sp + 0x340\n  8531: sp = sp & 0xffffffffffffffe0\n  8534: s1 = u64 [a2 + 0x8]\n  8537: t2 = u64 [a1 + 0x8]\n  8540: a5 = u64 [a2]\n  8542: a3 = u64 [a1]\n  8544: t0 = u64 [a2 + 0x10]\n  8547: a4 = s1 ^ t2\n  8550: ra = s1 <u t2\n  8553: t1 = a5 <u a3\n  8556: ra = t1 if a4 == 0\n  8559: u64 [sp + 0xf0] = s1\n  8563: a4 = s1 - t2\n  8566: a4 = a4 - t1\n  8569: u64 [sp + 0xe0] = a5\n  8573: u64 [sp + 0x118] = a3\n  8577: a5 = a5 - a3\n  8580: a5 = a5 <u 0xa0\n  8584: a5 = a5 ^ 0x1\n  8587: t1 = u64 [a1 + 0x10]\n  8590: s1 = a4 >u 0\n  8592: a5 = s1 if a4 != 0\n  8595: a4 = u64 [a2 + 0x18]\n  8598: s1 = u64 [a1 + 0x18]\n  8601: a1 = t0 - t1\n  8604: a2 = a1 - ra\n  8607: ra = a1 <u ra\n  8610: u64 [sp + 0xe8] = t0\n  8614: a3 = t0 <u t1\n  8617: a1 = s1\n  8619: u64 [sp + 0xd8] = a4\n  8623: a4 = a4 - s1\n  8626: a4 = a4 - a3\n  8629: a4 = a4 - ra\n  8632: s1 = a4 >s 0\n  8634: a3 = a2 >u 0\n  8636: a3 = s1 if a4 != 0\n  8639: a2 = a2 | a4\n  8642: a5 = a3 if a2 != 0\n  8645: jump @175 if a5 == 0\n      : @156 (gas: 13)\n  8649: s1 = a0\n  8651: a2 = u64 [sp + 0x118]\n  8655: a0 = a2 | t1\n  8658: u64 [sp + 0x110] = t2\n  8662: u64 [sp + 0x100] = a1\n  8666: a1 = t2 | a1\n  8669: a0 = a0 | a1\n  8672: a0 = a0 >> 0x20\n  8675: u64 [sp + 0x108] = t1\n  8679: a1 = a1 | t1\n  8682: a1 = a1 << 0x20\n  8685: a0 = a0 | a1\n  8688: jump @174 if a0 != 0\n      : @157 (gas: 5)\n  8692: i32 a1 = a2 + 0\n  8694: i32 a0 = sp + 0x2a0\n  8698: u64 [sp + 0xf8] = a1\n  8702: ecalli 3 // 'call_data_load'\n  8704: fallthrough\n      : @158 (gas: 7)\n  8705: t0 = u64 [sp + 0x2b8]\n  8709: a1 = u64 [sp + 0x2b0]\n  8713: a2 = u64 [sp + 0x2a8]\n  8717: a3 = a1 | t0\n  8720: a4 = a2 <u 0x1\n  8723: a4 = 0 if a3 != 0\n  8725: jump @175 if a4 == 0\n      : @159 (gas: 35)\n  8729: a3 = u64 [sp + 0x2a0]\n  8733: a4 = u64 [sp + 0x118]\n  8737: a4 = a4 + a3\n  8740: a3 = a4 <u a3\n  8743: a5 = u64 [sp + 0x110]\n  8747: a5 = a5 + a2\n  8750: a5 = a5 + a3\n  8753: a0 = a5 ^ a2\n  8756: a2 = a5 <u a2\n  8759: a2 = a3 if a0 == 0\n  8762: a0 = u64 [sp + 0x108]\n  8766: a0 = a0 + a1\n  8769: a2 = a2 + a0\n  8772: a3 = a2 <u a0\n  8775: a0 = a0 <u a1\n  8778: a1 = u64 [sp + 0x100]\n  8782: t0 = t0 + a1\n  8785: a0 = a0 + t0\n  8788: a3 = a3 + a0\n  8791: a0 = u64 [sp + 0xe0]\n  8795: u64 [sp + 0x220] = a0\n  8799: a0 = u64 [sp + 0xf0]\n  8803: u64 [sp + 0x228] = a0\n  8807: u64 [sp + 0x240] = a4\n  8811: a0 = u64 [sp + 0xe8]\n  8815: u64 [sp + 0x230] = a0\n  8819: a0 = u64 [sp + 0xd8]\n  8823: u64 [sp + 0x238] = a0\n  8827: u64 [sp + 0x248] = a5\n  8831: u64 [sp + 0x250] = a2\n  8835: a0 = sp + 0x260\n  8839: a1 = sp + 0x240\n  8843: a2 = sp + 0x220\n  8847: u64 [sp + 0x258] = a3\n  8851: ra = 146, jump @135\n      : @160 [@dyn 73] (gas: 13)\n  8857: a0 = u64 [sp + 0x108]\n  8861: a2 = u64 [sp + 0x100]\n  8865: a2 = a2 | a0\n  8868: a0 = 0x100000000\n  8878: u64 [sp + 0xc8] = a0\n  8882: a0 = 0xffffffe0\n  8892: a1 = u64 [sp + 0x118]\n  8896: a0 = a1 <u a0\n  8899: a1 = u64 [sp + 0x110]\n  8903: a0 = 0 if a1 != 0\n  8905: u64 [sp + 0xd0] = a2\n  8909: a0 = 0 if a2 != 0\n  8911: jump @174 if a0 == 0\n      : @161 (gas: 21)\n  8915: a0 = u64 [sp + 0x298]\n  8919: u64 [sp + 0xa8] = a0\n  8923: a0 = u64 [sp + 0x290]\n  8927: u64 [sp + 0x88] = a0\n  8931: a0 = u64 [sp + 0x288]\n  8935: u64 [sp + 0xb0] = a0\n  8939: a0 = u64 [sp + 0x280]\n  8943: u64 [sp + 0x90] = a0\n  8947: a0 = u64 [sp + 0x278]\n  8951: u64 [sp + 0xb8] = a0\n  8955: a0 = u64 [sp + 0x270]\n  8959: u64 [sp + 0x98] = a0\n  8963: a0 = u64 [sp + 0x268]\n  8967: u64 [sp + 0xc0] = a0\n  8971: a0 = u64 [sp + 0x260]\n  8975: u64 [sp + 0xa0] = a0\n  8979: a0 = u64 [sp + 0xf8]\n  8983: i32 a1 = a0 + 0x20\n  8986: i32 a0 = sp + 0x300\n  8990: ecalli 3 // 'call_data_load'\n  8992: fallthrough\n      : @162 (gas: 9)\n  8993: a0 = u64 [sp + 0xc8]\n  8997: a0 = a0 + 0xffffffffffffffc0\n  9000: a1 = u64 [sp + 0x118]\n  9004: a0 = a1 <u a0\n  9007: a1 = u64 [sp + 0x110]\n  9011: a0 = 0 if a1 != 0\n  9013: a1 = u64 [sp + 0xd0]\n  9017: a0 = 0 if a1 != 0\n  9019: jump @174 if a0 == 0\n      : @163 (gas: 13)\n  9023: a0 = u64 [sp + 0x318]\n  9027: u64 [sp + 0x78] = a0\n  9030: a0 = u64 [sp + 0x310]\n  9034: u64 [sp + 0x68] = a0\n  9037: a0 = u64 [sp + 0x308]\n  9041: u64 [sp + 0x80] = a0\n  9045: a0 = u64 [sp + 0x300]\n  9049: u64 [sp + 0x70] = a0\n  9052: a0 = u64 [sp + 0xf8]\n  9056: i32 a1 = a0 + 0x40\n  9059: i32 a0 = sp + 0x2c0\n  9063: ecalli 3 // 'call_data_load'\n  9065: fallthrough\n      : @164 (gas: 7)\n  9066: t0 = u64 [sp + 0x2d8]\n  9070: a1 = u64 [sp + 0x2d0]\n  9074: a2 = u64 [sp + 0x2c8]\n  9078: a3 = a1 | t0\n  9081: a4 = a2 <u 0x1\n  9084: a4 = 0 if a3 != 0\n  9086: jump @175 if a4 == 0\n      : @165 (gas: 35)\n  9090: a3 = u64 [sp + 0x2c0]\n  9094: a4 = u64 [sp + 0x118]\n  9098: a4 = a4 + a3\n  9101: a3 = a4 <u a3\n  9104: a5 = u64 [sp + 0x110]\n  9108: a5 = a5 + a2\n  9111: a5 = a5 + a3\n  9114: a0 = a5 ^ a2\n  9117: a2 = a5 <u a2\n  9120: a2 = a3 if a0 == 0\n  9123: a0 = u64 [sp + 0x108]\n  9127: a0 = a0 + a1\n  9130: a2 = a2 + a0\n  9133: a3 = a2 <u a0\n  9136: a0 = a0 <u a1\n  9139: a1 = u64 [sp + 0x100]\n  9143: t0 = t0 + a1\n  9146: a0 = a0 + t0\n  9149: a3 = a3 + a0\n  9152: a0 = u64 [sp + 0xe0]\n  9156: u64 [sp + 0x1a0] = a0\n  9160: a0 = u64 [sp + 0xf0]\n  9164: u64 [sp + 0x1a8] = a0\n  9168: u64 [sp + 0x1c0] = a4\n  9172: a0 = u64 [sp + 0xe8]\n  9176: u64 [sp + 0x1b0] = a0\n  9180: a0 = u64 [sp + 0xd8]\n  9184: u64 [sp + 0x1b8] = a0\n  9188: u64 [sp + 0x1c8] = a5\n  9192: u64 [sp + 0x1d0] = a2\n  9196: a0 = sp + 0x1e0\n  9200: a1 = sp + 0x1c0\n  9204: a2 = sp + 0x1a0\n  9208: u64 [sp + 0x1d8] = a3\n  9212: ra = 148, jump @135\n      : @166 [@dyn 74] (gas: 10)\n  9218: a0 = 0x100000000\n  9228: u64 [sp + 0xc8] = a0\n  9232: a0 = 0xffffffa0\n  9242: a1 = u64 [sp + 0x118]\n  9246: a0 = a1 <u a0\n  9249: a1 = u64 [sp + 0x110]\n  9253: a0 = 0 if a1 != 0\n  9255: a1 = u64 [sp + 0xd0]\n  9259: a0 = 0 if a1 != 0\n  9261: jump @174 if a0 == 0\n      : @167 (gas: 21)\n  9265: a0 = u64 [sp + 0x218]\n  9269: u64 [sp + 0x48] = a0\n  9272: a0 = u64 [sp + 0x210]\n  9276: u64 [sp + 0x28] = a0\n  9279: a0 = u64 [sp + 0x208]\n  9283: u64 [sp + 0x50] = a0\n  9286: a0 = u64 [sp + 0x200]\n  9290: u64 [sp + 0x30] = a0\n  9293: a0 = u64 [sp + 0x1f8]\n  9297: u64 [sp + 0x58] = a0\n  9300: a0 = u64 [sp + 0x1f0]\n  9304: u64 [sp + 0x38] = a0\n  9307: a0 = u64 [sp + 0x1e8]\n  9311: u64 [sp + 0x60] = a0\n  9314: a0 = u64 [sp + 0x1e0]\n  9318: u64 [sp + 0x40] = a0\n  9321: a0 = u64 [sp + 0xf8]\n  9325: i32 a1 = a0 + 0x60\n  9328: i32 a0 = sp + 0x300\n  9332: ecalli 3 // 'call_data_load'\n  9334: fallthrough\n      : @168 (gas: 10)\n  9335: a2 = u64 [sp + 0x310]\n  9339: a3 = u64 [sp + 0x318]\n  9343: a0 = u64 [sp + 0xc8]\n  9347: a0 = a0 ^ a2\n  9350: a0 = a0 | a3\n  9353: a1 = a2 >> 0x20\n  9356: a1 = a1 <u 0x1\n  9359: a1 = 0 if a3 != 0\n  9361: a1 = 0 if a0 == 0\n  9363: jump @177 if a1 == 0\n      : @169 (gas: 10)\n  9367: u64 [sp + 0x20] = a3\n  9370: u64 [sp + 0xc8] = a2\n  9374: a0 = 0xffffff80\n  9384: a1 = u64 [sp + 0x118]\n  9388: a0 = a1 <u a0\n  9391: a1 = u64 [sp + 0x110]\n  9395: a0 = 0 if a1 != 0\n  9397: a1 = u64 [sp + 0xd0]\n  9401: a0 = 0 if a1 != 0\n  9403: jump @174 if a0 == 0\n      : @170 (gas: 9)\n  9407: a0 = u64 [sp + 0x308]\n  9411: u64 [sp + 0xd0] = a0\n  9415: a0 = u64 [sp + 0x300]\n  9419: u64 [sp + 0x18] = a0\n  9422: a0 = u64 [sp + 0xf8]\n  9426: i32 a1 = a0 + 0x80\n  9430: i32 a0 = sp + 0x2e0\n  9434: ecalli 3 // 'call_data_load'\n  9436: fallthrough\n      : @171 (gas: 7)\n  9437: t0 = u64 [sp + 0x2f8]\n  9441: a1 = u64 [sp + 0x2f0]\n  9445: a2 = u64 [sp + 0x2e8]\n  9449: a3 = a1 | t0\n  9452: a4 = a2 <u 0x1\n  9455: a4 = 0 if a3 != 0\n  9457: jump @175 if a4 == 0\n      : @172 (gas: 35)\n  9461: a3 = u64 [sp + 0x2e0]\n  9465: a4 = u64 [sp + 0x118]\n  9469: a4 = a4 + a3\n  9472: a3 = a4 <u a3\n  9475: a5 = u64 [sp + 0x110]\n  9479: a5 = a5 + a2\n  9482: a5 = a5 + a3\n  9485: a0 = a5 ^ a2\n  9488: a2 = a5 <u a2\n  9491: a2 = a3 if a0 == 0\n  9494: a0 = u64 [sp + 0x108]\n  9498: a0 = a0 + a1\n  9501: a2 = a2 + a0\n  9504: a3 = a2 <u a0\n  9507: a0 = a0 <u a1\n  9510: a1 = u64 [sp + 0x100]\n  9514: t0 = t0 + a1\n  9517: a0 = a0 + t0\n  9520: a3 = a3 + a0\n  9523: a0 = u64 [sp + 0xe0]\n  9527: u64 [sp + 0x120] = a0\n  9531: a0 = u64 [sp + 0xf0]\n  9535: u64 [sp + 0x128] = a0\n  9539: u64 [sp + 0x140] = a4\n  9543: a0 = u64 [sp + 0xe8]\n  9547: u64 [sp + 0x130] = a0\n  9551: a0 = u64 [sp + 0xd8]\n  9555: u64 [sp + 0x138] = a0\n  9559: u64 [sp + 0x148] = a5\n  9563: u64 [sp + 0x150] = a2\n  9567: a0 = sp + 0x160\n  9571: a1 = sp + 0x140\n  9575: a2 = sp + 0x120\n  9579: u64 [sp + 0x158] = a3\n  9583: ra = 150, jump @135\n      : @173 [@dyn 75] (gas: 70)\n  9589: t0 = u64 [sp + 0x168]\n  9593: t1 = u64 [sp + 0x160]\n  9597: a2 = u64 [sp + 0x178]\n  9601: a3 = u64 [sp + 0x170]\n  9605: a4 = u64 [sp + 0x190]\n  9609: a5 = u64 [sp + 0x198]\n  9613: a0 = u64 [sp + 0x180]\n  9617: a1 = u64 [sp + 0x188]\n  9621: u64 [s1 + 0xf0] = a4\n  9625: u64 [s1 + 0xf8] = a5\n  9629: u64 [s1 + 0xe0] = a0\n  9633: u64 [s1 + 0xe8] = a1\n  9637: u64 [s1 + 0xd0] = a3\n  9641: u64 [s1 + 0xd8] = a2\n  9645: u64 [s1 + 0xc0] = t1\n  9649: u64 [s1 + 0xc8] = t0\n  9653: a0 = u64 [sp + 0xc8]\n  9657: u64 [s1 + 0xb0] = a0\n  9661: a0 = u64 [sp + 0x20]\n  9664: u64 [s1 + 0xb8] = a0\n  9668: a0 = u64 [sp + 0x18]\n  9671: u64 [s1 + 0xa0] = a0\n  9675: a0 = u64 [sp + 0xd0]\n  9679: u64 [s1 + 0xa8] = a0\n  9683: a0 = u64 [sp + 0x28]\n  9686: u64 [s1 + 0x90] = a0\n  9690: a0 = u64 [sp + 0x48]\n  9693: u64 [s1 + 0x98] = a0\n  9697: a0 = u64 [sp + 0x30]\n  9700: u64 [s1 + 0x80] = a0\n  9704: a0 = u64 [sp + 0x50]\n  9707: u64 [s1 + 0x88] = a0\n  9711: a0 = u64 [sp + 0x38]\n  9714: u64 [s1 + 0x70] = a0\n  9717: a0 = u64 [sp + 0x58]\n  9720: u64 [s1 + 0x78] = a0\n  9723: a0 = u64 [sp + 0x40]\n  9726: u64 [s1 + 0x60] = a0\n  9729: a0 = u64 [sp + 0x60]\n  9732: u64 [s1 + 0x68] = a0\n  9735: a0 = u64 [sp + 0x68]\n  9738: u64 [s1 + 0x50] = a0\n  9741: a0 = u64 [sp + 0x78]\n  9744: u64 [s1 + 0x58] = a0\n  9747: a0 = u64 [sp + 0x70]\n  9750: u64 [s1 + 0x40] = a0\n  9753: a0 = u64 [sp + 0x80]\n  9757: u64 [s1 + 0x48] = a0\n  9760: a0 = u64 [sp + 0x88]\n  9764: u64 [s1 + 0x30] = a0\n  9767: a0 = u64 [sp + 0xa8]\n  9771: u64 [s1 + 0x38] = a0\n  9774: a0 = u64 [sp + 0x90]\n  9778: u64 [s1 + 0x20] = a0\n  9781: a0 = u64 [sp + 0xb0]\n  9785: u64 [s1 + 0x28] = a0\n  9788: a0 = u64 [sp + 0x98]\n  9792: u64 [s1 + 0x10] = a0\n  9795: a0 = u64 [sp + 0xb8]\n  9799: u64 [s1 + 0x18] = a0\n  9802: a0 = u64 [sp + 0xa0]\n  9806: u64 [s1] = a0\n  9808: a0 = u64 [sp + 0xc0]\n  9812: u64 [s1 + 0x8] = a0\n  9815: sp = s0 + 0xfffffffffffffcc0\n  9819: ra = u64 [sp + 0x338]\n  9823: s0 = u64 [sp + 0x330]\n  9827: s1 = u64 [sp + 0x328]\n  9831: sp = sp + 0x340\n  9835: ret\n      : @174 (gas: 1)\n  9837: trap\n      : @175 (gas: 3)\n  9838: a0 = 0\n  9840: a1 = 0\n  9842: ra = 152, jump @0\n      : @176 [@dyn 76] (gas: 7)\n  9848: i32 a1 = a0 + 0\n  9850: a0 = 0x1\n  9853: a2 = 0\n  9855: ecalli 14 // 'seal_return'\n  9857: a0 = 0\n  9859: ra = 0x98\n  9863: jump @0\n      : @177 (gas: 3)\n  9866: a0 = 0\n  9868: ra = 0x98\n  9872: jump @0\n      : @178 [@dyn 77] (gas: 123)\n  9875: a0 = u64 [sp + 0x230]\n  9879: u64 [sp + 0xc8] = a0\n  9883: a0 = u64 [sp + 0x238]\n  9887: u64 [sp + 0xc0] = a0\n  9891: a0 = u64 [sp + 0x240]\n  9895: u64 [sp + 0xb8] = a0\n  9899: a0 = u64 [sp + 0x248]\n  9903: u64 [sp + 0xb0] = a0\n  9907: a0 = u64 [sp + 0x250]\n  9911: u64 [sp + 0xa8] = a0\n  9915: a0 = u64 [sp + 0x258]\n  9919: u64 [sp + 0xa0] = a0\n  9923: a0 = u64 [sp + 0x260]\n  9927: u64 [sp + 0x98] = a0\n  9931: a0 = u64 [sp + 0x268]\n  9935: u64 [sp + 0x90] = a0\n  9939: a0 = u64 [sp + 0x270]\n  9943: u64 [sp + 0x88] = a0\n  9947: a0 = u64 [sp + 0x278]\n  9951: u64 [sp + 0x80] = a0\n  9955: a0 = u64 [sp + 0x280]\n  9959: u64 [sp + 0x78] = a0\n  9962: a0 = u64 [sp + 0x288]\n  9966: u64 [sp + 0x70] = a0\n  9969: a0 = u64 [sp + 0x290]\n  9973: u64 [sp + 0x68] = a0\n  9976: a0 = u64 [sp + 0x298]\n  9980: u64 [sp + 0x60] = a0\n  9983: a0 = u64 [sp + 0x2a0]\n  9987: u64 [sp + 0x58] = a0\n  9990: a0 = u64 [sp + 0x2a8]\n  9994: u64 [sp + 0x50] = a0\n  9997: a0 = u64 [sp + 0x2b0]\n 10001: u64 [sp + 0x48] = a0\n 10004: a0 = u64 [sp + 0x2b8]\n 10008: u64 [sp + 0x40] = a0\n 10011: a0 = u64 [sp + 0x2c0]\n 10015: u64 [sp + 0x38] = a0\n 10018: a0 = u64 [sp + 0x2c8]\n 10022: u64 [sp + 0x30] = a0\n 10025: a0 = u64 [sp + 0x2d0]\n 10029: u64 [sp + 0x28] = a0\n 10032: a0 = u64 [sp + 0x2d8]\n 10036: u64 [sp + 0x20] = a0\n 10039: a0 = u64 [sp + 0x2e0]\n 10043: u64 [sp + 0x18] = a0\n 10046: t2 = u64 [sp + 0x2e8]\n 10050: t1 = u64 [sp + 0x2f0]\n 10054: t0 = u64 [sp + 0x2f8]\n 10058: a5 = u64 [sp + 0x300]\n 10062: a4 = u64 [sp + 0x308]\n 10066: a3 = u64 [sp + 0x310]\n 10070: a2 = u64 [sp + 0x318]\n 10074: a1 = u64 [sp + 0x320]\n 10078: a0 = u64 [sp + 0x328]\n 10082: ra = sp + 0xd0\n 10086: u64 [sp + 0x10] = ra\n 10089: s1 = sp + 0xf0\n 10093: u64 [sp + 0x8] = s1\n 10096: s1 = sp + 0x110\n 10100: u64 [sp] = s1\n 10102: u64 [sp + 0xe8] = a0\n 10106: u64 [sp + 0xe0] = a1\n 10110: u64 [sp + 0xd8] = a2\n 10114: u64 [sp + 0xd0] = a3\n 10118: u64 [sp + 0x108] = a4\n 10122: u64 [sp + 0x100] = a5\n 10126: u64 [sp + 0xf8] = t0\n 10130: u64 [sp + 0xf0] = t1\n 10134: u64 [sp + 0x128] = t2\n 10138: a0 = u64 [sp + 0x18]\n 10141: u64 [sp + 0x120] = a0\n 10145: a0 = u64 [sp + 0x20]\n 10148: u64 [sp + 0x118] = a0\n 10152: a0 = u64 [sp + 0x28]\n 10155: u64 [sp + 0x110] = a0\n 10159: a0 = u64 [sp + 0x30]\n 10162: u64 [sp + 0x148] = a0\n 10166: a0 = u64 [sp + 0x38]\n 10169: u64 [sp + 0x140] = a0\n 10173: a0 = u64 [sp + 0x40]\n 10176: u64 [sp + 0x138] = a0\n 10180: a0 = u64 [sp + 0x48]\n 10183: u64 [sp + 0x130] = a0\n 10187: a0 = u64 [sp + 0x50]\n 10190: u64 [sp + 0x168] = a0\n 10194: a0 = u64 [sp + 0x58]\n 10197: u64 [sp + 0x160] = a0\n 10201: a0 = u64 [sp + 0x60]\n 10204: u64 [sp + 0x158] = a0\n 10208: a0 = u64 [sp + 0x68]\n 10211: u64 [sp + 0x150] = a0\n 10215: a0 = u64 [sp + 0x70]\n 10218: u64 [sp + 0x188] = a0\n 10222: a0 = u64 [sp + 0x78]\n 10225: u64 [sp + 0x180] = a0\n 10229: a0 = u64 [sp + 0x80]\n 10233: u64 [sp + 0x178] = a0\n 10237: a0 = u64 [sp + 0x88]\n 10241: u64 [sp + 0x170] = a0\n 10245: a0 = u64 [sp + 0x90]\n 10249: u64 [sp + 0x1a8] = a0\n 10253: a0 = u64 [sp + 0x98]\n 10257: u64 [sp + 0x1a0] = a0\n 10261: a0 = u64 [sp + 0xa0]\n 10265: u64 [sp + 0x198] = a0\n 10269: a0 = u64 [sp + 0xa8]\n 10273: u64 [sp + 0x190] = a0\n 10277: a0 = u64 [sp + 0xb0]\n 10281: u64 [sp + 0x1c8] = a0\n 10285: a0 = u64 [sp + 0xb8]\n 10289: u64 [sp + 0x1c0] = a0\n 10293: a0 = u64 [sp + 0xc0]\n 10297: u64 [sp + 0x1b8] = a0\n 10301: a0 = sp + 0x1d0\n 10305: a1 = sp + 0x1b0\n 10309: a2 = sp + 0x190\n 10313: a3 = sp + 0x170\n 10317: a4 = sp + 0x150\n 10321: a5 = sp + 0x130\n 10325: s1 = u64 [sp + 0xc8]\n 10329: u64 [sp + 0x1b0] = s1\n 10333: ra = 156, jump @520\n      : @179 [@dyn 78] (gas: 11)\n 10339: a0 = u64 [sp + 0x1e8]\n 10343: u64 [sp + 0xb0] = a0\n 10347: a0 = u64 [sp + 0x1e0]\n 10351: u64 [sp + 0xb8] = a0\n 10355: a0 = u64 [sp + 0x1d8]\n 10359: u64 [sp + 0xc0] = a0\n 10363: a0 = u64 [sp + 0x1d0]\n 10367: u64 [sp + 0xc8] = a0\n 10371: a0 = 0x40\n 10374: a1 = 0x20\n 10377: ra = 158, jump @0\n      : @180 [@dyn 79] (gas: 100)\n 10383: a1 = u8 [a0 + 0x11]\n 10386: a2 = u8 [a0 + 0x10]\n 10389: a3 = u8 [a0 + 0x12]\n 10392: a4 = u8 [a0 + 0x13]\n 10395: a1 = a1 << 0x8\n 10398: a1 = a1 | a2\n 10401: a3 = a3 << 0x10\n 10404: a4 = a4 << 0x18\n 10407: a3 = a3 | a4\n 10410: a1 = a1 | a3\n 10413: a2 = u8 [a0 + 0x15]\n 10416: a3 = u8 [a0 + 0x14]\n 10419: a4 = u8 [a0 + 0x16]\n 10422: a5 = u8 [a0 + 0x17]\n 10425: a2 = a2 << 0x8\n 10428: a2 = a2 | a3\n 10431: a4 = a4 << 0x10\n 10434: a5 = a5 << 0x18\n 10437: a4 = a4 | a5\n 10440: a2 = a2 | a4\n 10443: a2 = a2 << 0x20\n 10446: t0 = a2 | a1\n 10449: a2 = u8 [a0 + 0x1]\n 10452: a3 = u8 [a0]\n 10454: a4 = u8 [a0 + 0x2]\n 10457: a5 = u8 [a0 + 0x3]\n 10460: a2 = a2 << 0x8\n 10463: a2 = a2 | a3\n 10466: a4 = a4 << 0x10\n 10469: a5 = a5 << 0x18\n 10472: a4 = a4 | a5\n 10475: a2 = a2 | a4\n 10478: a3 = u8 [a0 + 0x5]\n 10481: a4 = u8 [a0 + 0x4]\n 10484: a5 = u8 [a0 + 0x6]\n 10487: s1 = u8 [a0 + 0x7]\n 10490: a3 = a3 << 0x8\n 10493: a3 = a3 | a4\n 10496: a5 = a5 << 0x10\n 10499: s1 = s1 << 0x18\n 10502: a5 = a5 | s1\n 10505: a3 = a3 | a5\n 10508: a3 = a3 << 0x20\n 10511: a2 = a2 | a3\n 10514: a3 = u8 [a0 + 0x19]\n 10517: a4 = u8 [a0 + 0x18]\n 10520: a5 = u8 [a0 + 0x1a]\n 10523: s1 = u8 [a0 + 0x1b]\n 10526: a3 = a3 << 0x8\n 10529: a3 = a3 | a4\n 10532: a5 = a5 << 0x10\n 10535: s1 = s1 << 0x18\n 10538: a5 = a5 | s1\n 10541: a3 = a3 | a5\n 10544: a4 = u8 [a0 + 0x1d]\n 10547: a5 = u8 [a0 + 0x1c]\n 10550: s1 = u8 [a0 + 0x1e]\n 10553: a1 = u8 [a0 + 0x1f]\n 10556: a4 = a4 << 0x8\n 10559: a4 = a4 | a5\n 10562: s1 = s1 << 0x10\n 10565: a1 = a1 << 0x18\n 10568: a1 = a1 | s1\n 10571: a1 = a1 | a4\n 10574: a1 = a1 << 0x20\n 10577: a3 = a3 | a1\n 10580: a1 = u8 [a0 + 0x9]\n 10583: a4 = u8 [a0 + 0x8]\n 10586: a5 = u8 [a0 + 0xa]\n 10589: s1 = u8 [a0 + 0xb]\n 10592: a1 = a1 << 0x8\n 10595: a1 = a1 | a4\n 10598: a5 = a5 << 0x10\n 10601: s1 = s1 << 0x18\n 10604: a5 = a5 | s1\n 10607: a1 = a1 | a5\n 10610: a4 = u8 [a0 + 0xd]\n 10613: a5 = u8 [a0 + 0xc]\n 10616: s1 = u8 [a0 + 0xe]\n 10619: a0 = u8 [a0 + 0xf]\n 10622: a4 = a4 << 0x8\n 10625: a4 = a4 | a5\n 10628: s1 = s1 << 0x10\n 10631: a0 = a0 << 0x18\n 10634: a0 = a0 | s1\n 10637: a0 = a0 | a4\n 10640: a0 = a0 << 0x20\n 10643: a0 = a0 | a1\n 10646: a1 = reverse a0\n 10648: a0 = reverse a3\n 10650: a2 = reverse a2\n 10652: a3 = reverse t0\n 10654: a2 = a2 | a3\n 10657: a3 = a0 | a1\n 10660: a3 = a3 | a2\n 10663: a3 = a3 >> 0x20\n 10666: a1 = a1 | a2\n 10669: a1 = a1 << 0x20\n 10672: a1 = a1 | a3\n 10675: jump @182 if a1 == 0\n      : @181 (gas: 1)\n 10678: trap\n      : @182 (gas: 4)\n 10679: i32 s1 = a0 + 0\n 10681: a1 = 0x20\n 10684: a0 = s1\n 10686: ra = 160, jump @0\n      : @183 [@dyn 80] (gas: 71)\n 10692: a1 = u64 [sp + 0xb0]\n 10696: a1 = reverse a1\n 10698: a2 = u64 [sp + 0xb8]\n 10702: a2 = reverse a2\n 10704: a3 = u64 [sp + 0xc0]\n 10708: a3 = reverse a3\n 10710: a4 = u64 [sp + 0xc8]\n 10714: a4 = reverse a4\n 10716: a5 = a4 >> 0x38\n 10719: u8 [a0 + 0x1f] = a5\n 10722: a5 = a4 >> 0x30\n 10725: u8 [a0 + 0x1e] = a5\n 10728: a5 = a4 >> 0x28\n 10731: u8 [a0 + 0x1d] = a5\n 10734: a5 = a4 >> 0x20\n 10737: u8 [a0 + 0x1c] = a5\n 10740: a5 = a4 >> 0x18\n 10743: u8 [a0 + 0x1b] = a5\n 10746: a5 = a4 >> 0x10\n 10749: u8 [a0 + 0x1a] = a5\n 10752: a5 = a4 >> 0x8\n 10755: u8 [a0 + 0x19] = a5\n 10758: u8 [a0 + 0x18] = a4\n 10761: u8 [a0 + 0x10] = a3\n 10764: a4 = a3 >> 0x38\n 10767: u8 [a0 + 0x17] = a4\n 10770: a4 = a3 >> 0x30\n 10773: u8 [a0 + 0x16] = a4\n 10776: a4 = a3 >> 0x28\n 10779: u8 [a0 + 0x15] = a4\n 10782: a4 = a3 >> 0x20\n 10785: u8 [a0 + 0x14] = a4\n 10788: a4 = a3 >> 0x18\n 10791: u8 [a0 + 0x13] = a4\n 10794: a4 = a3 >> 0x10\n 10797: u8 [a0 + 0x12] = a4\n 10800: a3 = a3 >> 0x8\n 10803: u8 [a0 + 0x11] = a3\n 10806: u8 [a0 + 0x8] = a2\n 10809: a3 = a2 >> 0x38\n 10812: u8 [a0 + 0xf] = a3\n 10815: a3 = a2 >> 0x30\n 10818: u8 [a0 + 0xe] = a3\n 10821: a3 = a2 >> 0x28\n 10824: u8 [a0 + 0xd] = a3\n 10827: a3 = a2 >> 0x20\n 10830: u8 [a0 + 0xc] = a3\n 10833: a3 = a2 >> 0x18\n 10836: u8 [a0 + 0xb] = a3\n 10839: a3 = a2 >> 0x10\n 10842: u8 [a0 + 0xa] = a3\n 10845: a2 = a2 >> 0x8\n 10848: u8 [a0 + 0x9] = a2\n 10851: u8 [a0] = a1\n 10853: a2 = a1 >> 0x38\n 10856: u8 [a0 + 0x7] = a2\n 10859: a2 = a1 >> 0x30\n 10862: u8 [a0 + 0x6] = a2\n 10865: a2 = a1 >> 0x28\n 10868: u8 [a0 + 0x5] = a2\n 10871: a2 = a1 >> 0x20\n 10874: u8 [a0 + 0x4] = a2\n 10877: a2 = a1 >> 0x18\n 10880: u8 [a0 + 0x3] = a2\n 10883: a2 = a1 >> 0x10\n 10886: u8 [a0 + 0x2] = a2\n 10889: a1 = a1 >> 0x8\n 10892: u8 [a0 + 0x1] = a1\n 10895: a1 = 0x20\n 10898: a0 = s1\n 10900: ra = 162, jump @0\n      : @184 [@dyn 81] (gas: 6)\n 10906: i32 a1 = a0 + 0\n 10908: a2 = 0x20\n 10911: a0 = 0\n 10913: ra = 0xa4\n 10917: ecalli 14 // 'seal_return'\n 10919: fallthrough\n      : @185 [@dyn 82] (gas: 19)\n 10920: t0 = u64 [a0 + 0x18]\n 10923: t1 = u64 [a1 + 0x18]\n 10926: a4 = u64 [a0 + 0x10]\n 10929: a5 = u64 [a0 + 0x8]\n 10932: a2 = u64 [a1 + 0x8]\n 10935: t2 = u64 [a0]\n 10937: a3 = u64 [a1]\n 10939: a1 = u64 [a1 + 0x10]\n 10942: a0 = a2 ^ a5\n 10945: a2 = a2 <u a5\n 10948: a3 = a3 <u t2\n 10951: a3 = a2 if a0 != 0\n 10954: a0 = a1 - a4\n 10957: a0 = a0 <u a3\n 10960: a1 = a1 <u a4\n 10963: a2 = t1 - t0\n 10966: a2 = a2 - a1\n 10969: a2 = a2 - a0\n 10972: jump @187 if a2 <s 0\n      : @186 (gas: 1)\n 10975: ret\n      : @187 (gas: 5)\n 10977: sp = sp + 0xfffffffffffffff8\n 10980: u64 [sp] = ra\n 10982: a0 = 0\n 10984: a1 = 0\n 10986: ra = 166, jump @0\n      : @188 [@dyn 83] (gas: 6)\n 10992: i32 a1 = a0 + 0\n 10994: a0 = 0x1\n 10997: a2 = 0\n 10999: ra = 0xa8\n 11003: ecalli 14 // 'seal_return'\n 11005: fallthrough\n      : @189 [@dyn 84] (gas: 12)\n 11006: a2 = u64 [a1 + 0x10]\n 11009: a3 = u64 [a1 + 0x18]\n 11012: a4 = u64 [a1 + 0x8]\n 11015: a1 = u64 [a1]\n 11017: a3 = a3 | a4\n 11020: a4 = a1 | a2\n 11023: a4 = a4 | a3\n 11026: a4 = a4 >> 0x20\n 11029: a2 = a2 | a3\n 11032: a2 = a2 << 0x20\n 11035: a2 = a2 | a4\n 11038: jump @192 if a2 != 0\n      : @190 (gas: 13)\n 11042: sp = sp + 0xffffffffffffffd8\n 11045: u64 [sp + 0x20] = ra\n 11048: u64 [sp + 0x18] = s0\n 11051: u64 [sp + 0x10] = s1\n 11054: s0 = u64 [a0 + 0x18]\n 11057: s1 = u64 [a0 + 0x10]\n 11060: a2 = u64 [a0 + 0x8]\n 11063: u64 [sp] = a2\n 11065: a0 = u64 [a0]\n 11067: u64 [sp + 0x8] = a0\n 11070: i32 a0 = a1 + 0\n 11072: a1 = 0x20\n 11075: ra = 170, jump @0\n      : @191 [@dyn 85] (gas: 71)\n 11081: a1 = reverse s0\n 11083: a2 = reverse s1\n 11085: a3 = u64 [sp]\n 11087: a3 = reverse a3\n 11089: a4 = u64 [sp + 0x8]\n 11092: a4 = reverse a4\n 11094: a5 = a4 >> 0x38\n 11097: u8 [a0 + 0x1f] = a5\n 11100: a5 = a4 >> 0x30\n 11103: u8 [a0 + 0x1e] = a5\n 11106: a5 = a4 >> 0x28\n 11109: u8 [a0 + 0x1d] = a5\n 11112: a5 = a4 >> 0x20\n 11115: u8 [a0 + 0x1c] = a5\n 11118: a5 = a4 >> 0x18\n 11121: u8 [a0 + 0x1b] = a5\n 11124: a5 = a4 >> 0x10\n 11127: u8 [a0 + 0x1a] = a5\n 11130: a5 = a4 >> 0x8\n 11133: u8 [a0 + 0x19] = a5\n 11136: u8 [a0 + 0x18] = a4\n 11139: u8 [a0 + 0x10] = a3\n 11142: a4 = a3 >> 0x38\n 11145: u8 [a0 + 0x17] = a4\n 11148: a4 = a3 >> 0x30\n 11151: u8 [a0 + 0x16] = a4\n 11154: a4 = a3 >> 0x28\n 11157: u8 [a0 + 0x15] = a4\n 11160: a4 = a3 >> 0x20\n 11163: u8 [a0 + 0x14] = a4\n 11166: a4 = a3 >> 0x18\n 11169: u8 [a0 + 0x13] = a4\n 11172: a4 = a3 >> 0x10\n 11175: u8 [a0 + 0x12] = a4\n 11178: a3 = a3 >> 0x8\n 11181: u8 [a0 + 0x11] = a3\n 11184: u8 [a0 + 0x8] = a2\n 11187: a3 = a2 >> 0x38\n 11190: u8 [a0 + 0xf] = a3\n 11193: a3 = a2 >> 0x30\n 11196: u8 [a0 + 0xe] = a3\n 11199: a3 = a2 >> 0x28\n 11202: u8 [a0 + 0xd] = a3\n 11205: a3 = a2 >> 0x20\n 11208: u8 [a0 + 0xc] = a3\n 11211: a3 = a2 >> 0x18\n 11214: u8 [a0 + 0xb] = a3\n 11217: a3 = a2 >> 0x10\n 11220: u8 [a0 + 0xa] = a3\n 11223: a2 = a2 >> 0x8\n 11226: u8 [a0 + 0x9] = a2\n 11229: u8 [a0] = a1\n 11231: a2 = a1 >> 0x38\n 11234: u8 [a0 + 0x7] = a2\n 11237: a2 = a1 >> 0x30\n 11240: u8 [a0 + 0x6] = a2\n 11243: a2 = a1 >> 0x28\n 11246: u8 [a0 + 0x5] = a2\n 11249: a2 = a1 >> 0x20\n 11252: u8 [a0 + 0x4] = a2\n 11255: a2 = a1 >> 0x18\n 11258: u8 [a0 + 0x3] = a2\n 11261: a2 = a1 >> 0x10\n 11264: u8 [a0 + 0x2] = a2\n 11267: a1 = a1 >> 0x8\n 11270: u8 [a0 + 0x1] = a1\n 11273: ra = u64 [sp + 0x20]\n 11276: s0 = u64 [sp + 0x18]\n 11279: s1 = u64 [sp + 0x10]\n 11282: sp = sp + 0x28\n 11285: ret\n      : @192 (gas: 1)\n 11287: trap\n      : @193 (gas: 20)\n 11288: sp = sp + 0xffffffffffffffb0\n 11291: u64 [sp + 0x48] = ra\n 11294: u64 [sp + 0x40] = s0\n 11297: u64 [sp + 0x38] = s1\n 11300: a4 = u64 [a1 + 0x10]\n 11303: a3 = u64 [a1 + 0x18]\n 11306: a5 = u64 [a1 + 0x8]\n 11309: s0 = u64 [a1]\n 11311: u64 [sp + 0x28] = a3\n 11314: u64 [sp + 0x20] = a5\n 11317: a1 = a5 | a3\n 11320: a3 = s0 | a4\n 11323: a3 = a3 | a1\n 11326: a3 = a3 >> 0x20\n 11329: u64 [sp + 0x30] = a4\n 11332: a1 = a1 | a4\n 11335: a1 = a1 << 0x20\n 11338: a1 = a1 | a3\n 11341: u64 [sp + 0x18] = a0\n 11344: jump @196 if a1 != 0\n      : @194 (gas: 10)\n 11348: a0 = u64 [a2 + 0x18]\n 11351: u64 [sp] = a0\n 11353: s1 = u64 [a2 + 0x10]\n 11356: a0 = u64 [a2 + 0x8]\n 11359: u64 [sp + 0x8] = a0\n 11362: a0 = u64 [a2]\n 11364: u64 [sp + 0x10] = a0\n 11367: i32 a0 = s0 + 0\n 11369: a1 = 0x20\n 11372: ra = 172, jump @0\n      : @195 [@dyn 86] (gas: 88)\n 11378: a1 = u64 [sp]\n 11380: a1 = reverse a1\n 11382: a2 = reverse s1\n 11384: a3 = u64 [sp + 0x8]\n 11387: a3 = reverse a3\n 11389: a4 = u64 [sp + 0x10]\n 11392: a4 = reverse a4\n 11394: a5 = a4 >> 0x38\n 11397: u8 [a0 + 0x1f] = a5\n 11400: a5 = a4 >> 0x30\n 11403: u8 [a0 + 0x1e] = a5\n 11406: a5 = a4 >> 0x28\n 11409: u8 [a0 + 0x1d] = a5\n 11412: a5 = a4 >> 0x20\n 11415: u8 [a0 + 0x1c] = a5\n 11418: a5 = a4 >> 0x18\n 11421: u8 [a0 + 0x1b] = a5\n 11424: a5 = a4 >> 0x10\n 11427: u8 [a0 + 0x1a] = a5\n 11430: a5 = a4 >> 0x8\n 11433: u8 [a0 + 0x19] = a5\n 11436: u8 [a0 + 0x18] = a4\n 11439: u8 [a0 + 0x10] = a3\n 11442: a4 = a3 >> 0x38\n 11445: u8 [a0 + 0x17] = a4\n 11448: a4 = a3 >> 0x30\n 11451: u8 [a0 + 0x16] = a4\n 11454: a4 = a3 >> 0x28\n 11457: u8 [a0 + 0x15] = a4\n 11460: a4 = a3 >> 0x20\n 11463: u8 [a0 + 0x14] = a4\n 11466: a4 = a3 >> 0x18\n 11469: u8 [a0 + 0x13] = a4\n 11472: a4 = a3 >> 0x10\n 11475: u8 [a0 + 0x12] = a4\n 11478: a3 = a3 >> 0x8\n 11481: u8 [a0 + 0x11] = a3\n 11484: u8 [a0 + 0x8] = a2\n 11487: a3 = a2 >> 0x38\n 11490: u8 [a0 + 0xf] = a3\n 11493: a3 = a2 >> 0x30\n 11496: u8 [a0 + 0xe] = a3\n 11499: a3 = a2 >> 0x28\n 11502: u8 [a0 + 0xd] = a3\n 11505: a3 = a2 >> 0x20\n 11508: u8 [a0 + 0xc] = a3\n 11511: a3 = a2 >> 0x18\n 11514: u8 [a0 + 0xb] = a3\n 11517: a3 = a2 >> 0x10\n 11520: u8 [a0 + 0xa] = a3\n 11523: a2 = a2 >> 0x8\n 11526: u8 [a0 + 0x9] = a2\n 11529: u8 [a0] = a1\n 11531: a2 = a1 >> 0x38\n 11534: u8 [a0 + 0x7] = a2\n 11537: a2 = a1 >> 0x30\n 11540: u8 [a0 + 0x6] = a2\n 11543: a2 = a1 >> 0x28\n 11546: u8 [a0 + 0x5] = a2\n 11549: a2 = a1 >> 0x20\n 11552: u8 [a0 + 0x4] = a2\n 11555: a2 = a1 >> 0x18\n 11558: u8 [a0 + 0x3] = a2\n 11561: a2 = a1 >> 0x10\n 11564: u8 [a0 + 0x2] = a2\n 11567: a1 = a1 >> 0x8\n 11570: u8 [a0 + 0x1] = a1\n 11573: a0 = s0 + 0x20\n 11576: a1 = a0 <u s0\n 11579: a3 = u64 [sp + 0x20]\n 11582: a2 = a3 + a1\n 11585: a3 = a2 <u a3\n 11588: a3 = a1 if a1 == 0\n 11591: a1 = u64 [sp + 0x30]\n 11594: a3 = a3 + a1\n 11597: a1 = a3 <u a1\n 11600: a4 = u64 [sp + 0x28]\n 11603: a1 = a1 + a4\n 11606: a4 = u64 [sp + 0x18]\n 11609: u64 [a4] = a0\n 11611: u64 [a4 + 0x8] = a2\n 11614: u64 [a4 + 0x10] = a3\n 11617: u64 [a4 + 0x18] = a1\n 11620: ra = u64 [sp + 0x48]\n 11623: s0 = u64 [sp + 0x40]\n 11626: s1 = u64 [sp + 0x38]\n 11629: sp = sp + 0x50\n 11632: ret\n      : @196 (gas: 1)\n 11634: trap\n      : @197 (gas: 18)\n 11635: sp = sp + 0xfffffffffffffeb0\n 11639: u64 [sp + 0x148] = ra\n 11643: u64 [sp + 0x140] = s0\n 11647: u64 [sp + 0x138] = s1\n 11651: a4 = u64 [a1 + 0x10]\n 11654: a3 = u64 [a1 + 0x18]\n 11657: a5 = u64 [a1 + 0x8]\n 11660: s0 = u64 [a1]\n 11662: u64 [sp + 0xf0] = a5\n 11666: u64 [sp + 0x130] = a3\n 11670: a1 = a5 | a3\n 11673: a3 = s0 | a4\n 11676: a3 = a3 | a1\n 11679: a3 = a3 >> 0x20\n 11682: a1 = a1 | a4\n 11685: a1 = a1 << 0x20\n 11688: a1 = a1 | a3\n 11691: jump @209 if a1 != 0\n      : @198 (gas: 13)\n 11695: u64 [sp + 0xe8] = a4\n 11699: u64 [sp] = a0\n 11701: a0 = u64 [a2 + 0x18]\n 11704: u64 [sp + 0x110] = a0\n 11708: s1 = u64 [a2 + 0x10]\n 11711: a1 = u64 [a2 + 0x8]\n 11714: a0 = u64 [a2]\n 11716: u64 [sp + 0x118] = a0\n 11720: u64 [sp + 0xd8] = s0\n 11724: i32 a0 = s0 + 0\n 11726: s0 = a1\n 11728: a1 = 0x20\n 11731: ra = 174, jump @0\n      : @199 [@dyn 87] (gas: 12)\n 11737: t0 = u64 [sp + 0x118]\n 11741: a1 = t0 | s1\n 11744: u64 [sp + 0x108] = s0\n 11748: a2 = u64 [sp + 0x110]\n 11752: a2 = a2 | s0\n 11755: a1 = a1 | a2\n 11758: a1 = a1 >> 0x20\n 11761: u64 [sp + 0x100] = s1\n 11765: a2 = a2 | s1\n 11768: a2 = a2 << 0x20\n 11771: a1 = a1 | a2\n 11774: jump @209 if a1 != 0\n      : @200 (gas: 93)\n 11778: a1 = u8 [a0 + 0x19]\n 11781: a2 = u8 [a0 + 0x18]\n 11784: a3 = u8 [a0 + 0x1a]\n 11787: a4 = u8 [a0 + 0x1b]\n 11790: a1 = a1 << 0x8\n 11793: a1 = a1 | a2\n 11796: a3 = a3 << 0x10\n 11799: a4 = a4 << 0x18\n 11802: a3 = a3 | a4\n 11805: a1 = a1 | a3\n 11808: a2 = u8 [a0 + 0x1d]\n 11811: a3 = u8 [a0 + 0x1c]\n 11814: a4 = u8 [a0 + 0x1e]\n 11817: a5 = u8 [a0 + 0x1f]\n 11820: a2 = a2 << 0x8\n 11823: a2 = a2 | a3\n 11826: a4 = a4 << 0x10\n 11829: a5 = a5 << 0x18\n 11832: a4 = a4 | a5\n 11835: a2 = a2 | a4\n 11838: a2 = a2 << 0x20\n 11841: a1 = a1 | a2\n 11844: u64 [sp + 0x120] = a1\n 11848: a1 = u8 [a0 + 0x11]\n 11851: a2 = u8 [a0 + 0x10]\n 11854: a3 = u8 [a0 + 0x12]\n 11857: a4 = u8 [a0 + 0x13]\n 11860: a1 = a1 << 0x8\n 11863: a1 = a1 | a2\n 11866: a3 = a3 << 0x10\n 11869: a4 = a4 << 0x18\n 11872: a3 = a3 | a4\n 11875: a1 = a1 | a3\n 11878: a2 = u8 [a0 + 0x15]\n 11881: a3 = u8 [a0 + 0x14]\n 11884: a4 = u8 [a0 + 0x16]\n 11887: a5 = u8 [a0 + 0x17]\n 11890: a2 = a2 << 0x8\n 11893: a2 = a2 | a3\n 11896: a4 = a4 << 0x10\n 11899: a5 = a5 << 0x18\n 11902: a4 = a4 | a5\n 11905: a2 = a2 | a4\n 11908: a2 = a2 << 0x20\n 11911: a1 = a1 | a2\n 11914: u64 [sp + 0x128] = a1\n 11918: a1 = u8 [a0 + 0x9]\n 11921: a2 = u8 [a0 + 0x8]\n 11924: a3 = u8 [a0 + 0xa]\n 11927: a4 = u8 [a0 + 0xb]\n 11930: a1 = a1 << 0x8\n 11933: a1 = a1 | a2\n 11936: a3 = a3 << 0x10\n 11939: a4 = a4 << 0x18\n 11942: a3 = a3 | a4\n 11945: a1 = a1 | a3\n 11948: a2 = u8 [a0 + 0xd]\n 11951: a3 = u8 [a0 + 0xc]\n 11954: a4 = u8 [a0 + 0xe]\n 11957: a5 = u8 [a0 + 0xf]\n 11960: a2 = a2 << 0x8\n 11963: a2 = a2 | a3\n 11966: a4 = a4 << 0x10\n 11969: a5 = a5 << 0x18\n 11972: a4 = a4 | a5\n 11975: a2 = a2 | a4\n 11978: a2 = a2 << 0x20\n 11981: s0 = a2 | a1\n 11984: a1 = u8 [a0 + 0x1]\n 11987: a2 = u8 [a0]\n 11989: a3 = u8 [a0 + 0x2]\n 11992: a4 = u8 [a0 + 0x3]\n 11995: a1 = a1 << 0x8\n 11998: a1 = a1 | a2\n 12001: a3 = a3 << 0x10\n 12004: a4 = a4 << 0x18\n 12007: a3 = a3 | a4\n 12010: a1 = a1 | a3\n 12013: a2 = u8 [a0 + 0x5]\n 12016: a3 = u8 [a0 + 0x4]\n 12019: a4 = u8 [a0 + 0x6]\n 12022: a0 = u8 [a0 + 0x7]\n 12025: a2 = a2 << 0x8\n 12028: a2 = a2 | a3\n 12031: a4 = a4 << 0x10\n 12034: a0 = a0 << 0x18\n 12037: a0 = a0 | a4\n 12040: a0 = a0 | a2\n 12043: a0 = a0 << 0x20\n 12046: s1 = a0 | a1\n 12049: i32 a0 = t0 + 0\n 12051: a1 = 0x20\n 12054: ra = 176, jump @0\n      : @201 [@dyn 88] (gas: 82)\n 12060: a2 = u64 [sp + 0x128]\n 12064: u8 [a0 + 0x10] = a2\n 12067: a1 = s0 >> 0x38\n 12070: u8 [a0 + 0xf] = a1\n 12073: a1 = s0 >> 0x30\n 12076: u8 [a0 + 0xe] = a1\n 12079: a1 = s0 >> 0x28\n 12082: u8 [a0 + 0xd] = a1\n 12085: a1 = s0 >> 0x20\n 12088: u8 [a0 + 0xc] = a1\n 12091: a1 = s0 >> 0x18\n 12094: u8 [a0 + 0xb] = a1\n 12097: a1 = s0 >> 0x10\n 12100: u8 [a0 + 0xa] = a1\n 12103: a1 = s0 >> 0x8\n 12106: u8 [a0 + 0x9] = a1\n 12109: u8 [a0 + 0x8] = s0\n 12112: a1 = s1 >> 0x38\n 12115: u8 [a0 + 0x7] = a1\n 12118: a1 = s1 >> 0x30\n 12121: u8 [a0 + 0x6] = a1\n 12124: a1 = s1 >> 0x28\n 12127: u8 [a0 + 0x5] = a1\n 12130: a1 = s1 >> 0x20\n 12133: u8 [a0 + 0x4] = a1\n 12136: a1 = s1 >> 0x18\n 12139: u8 [a0 + 0x3] = a1\n 12142: a1 = s1 >> 0x10\n 12145: u8 [a0 + 0x2] = a1\n 12148: a1 = s1 >> 0x8\n 12151: u8 [a0 + 0x1] = a1\n 12154: u8 [a0] = s1\n 12156: a3 = u64 [sp + 0x120]\n 12160: u8 [a0 + 0x18] = a3\n 12163: a1 = a2 >> 0x38\n 12166: u8 [a0 + 0x17] = a1\n 12169: a1 = a2 >> 0x30\n 12172: u8 [a0 + 0x16] = a1\n 12175: a1 = a2 >> 0x28\n 12178: u8 [a0 + 0x15] = a1\n 12181: a1 = a2 >> 0x20\n 12184: u8 [a0 + 0x14] = a1\n 12187: a1 = a2 >> 0x18\n 12190: u8 [a0 + 0x13] = a1\n 12193: a1 = a2 >> 0x10\n 12196: u8 [a0 + 0x12] = a1\n 12199: a1 = a2 >> 0x8\n 12202: a4 = a2\n 12204: u8 [a0 + 0x11] = a1\n 12207: a1 = a3 >> 0x38\n 12210: u8 [a0 + 0x1f] = a1\n 12213: a1 = a3 >> 0x30\n 12216: u8 [a0 + 0x1e] = a1\n 12219: a1 = a3 >> 0x28\n 12222: u8 [a0 + 0x1d] = a1\n 12225: a1 = a3 >> 0x20\n 12228: u8 [a0 + 0x1c] = a1\n 12231: a1 = a3 >> 0x18\n 12234: u8 [a0 + 0x1b] = a1\n 12237: a1 = a3 >> 0x10\n 12240: u8 [a0 + 0x1a] = a1\n 12243: a1 = a3 >> 0x8\n 12246: u8 [a0 + 0x19] = a1\n 12249: a0 = u64 [sp + 0x118]\n 12253: t1 = a0 + 0x20\n 12256: a2 = t1 <u a0\n 12259: a0 = a3\n 12261: a3 = u64 [sp + 0x108]\n 12265: t2 = a3 + a2\n 12268: a3 = t2 <u a3\n 12271: a3 = a2 if a2 == 0\n 12274: a5 = u64 [sp + 0x100]\n 12278: ra = a5 + a3\n 12281: a3 = s1 | a4\n 12284: u64 [sp + 0xd0] = s0\n 12288: a4 = s0 | a0\n 12291: a4 = a4 | a3\n 12294: a3 = ra <u a5\n 12297: t0 = u64 [sp + 0x110]\n 12301: a5 = t0 + a3\n 12304: u64 [sp + 0xf8] = a5\n 12308: jump @208 if a4 == 0\n      : @202 (gas: 21)\n 12312: a0 = 0\n 12314: a1 = 0\n 12316: u64 [sp + 224] = 0\n 12320: a2 = 0\n 12322: a3 = reverse s1\n 12324: u64 [sp + 0x20] = a3\n 12327: a3 = u64 [sp + 0xd0]\n 12331: a3 = reverse a3\n 12333: u64 [sp + 0x18] = a3\n 12336: a3 = u64 [sp + 0x128]\n 12340: a3 = reverse a3\n 12342: u64 [sp + 0x10] = a3\n 12345: a3 = u64 [sp + 0x120]\n 12349: a3 = reverse a3\n 12351: u64 [sp + 0x8] = a3\n 12354: a4 = 0xffffffe0\n 12364: u64 [sp + 0x28] = a4\n 12367: t0 = u64 [sp + 0xe8]\n 12371: a3 = u64 [sp + 0xf0]\n 12375: s0 = u64 [sp + 0xd8]\n 12379: fallthrough\n      : @203 (gas: 16)\n 12380: u64 [sp + 0xc8] = a2\n 12384: u64 [sp + 0xd0] = a1\n 12388: u64 [sp + 0xd8] = a0\n 12392: a4 = u64 [sp + 0x130]\n 12396: a4 = t0 | a4\n 12399: s1 = u64 [sp + 0x28]\n 12402: a5 = s0 <u s1\n 12405: u64 [sp + 0xf0] = a3\n 12409: a5 = 0 if a3 != 0\n 12411: a5 = 0 if a4 != 0\n 12413: a0 = u64 [sp + 0xf8]\n 12417: u64 [sp + 0xc0] = a0\n 12421: u64 [sp + 0xb8] = ra\n 12425: u64 [sp + 0xb0] = t2\n 12429: u64 [sp + 0x128] = t1\n 12433: jump @209 if a5 == 0\n      : @204 (gas: 6)\n 12437: u64 [sp + 0xe8] = t0\n 12441: a0 = s0 + 0x20\n 12444: u64 [sp + 0x120] = a0\n 12448: i32 a0 = a0 + 0\n 12450: a1 = 0x20\n 12453: ra = 178, jump @0\n      : @205 [@dyn 89] (gas: 9)\n 12459: a1 = u64 [sp + 0x100]\n 12463: a2 = u64 [sp + 0x110]\n 12467: a1 = a1 | a2\n 12470: a2 = u64 [sp + 0x118]\n 12474: a2 = a2 <u s1\n 12477: a3 = u64 [sp + 0x108]\n 12481: a2 = 0 if a3 != 0\n 12483: a2 = 0 if a1 != 0\n 12485: jump @209 if a2 == 0\n      : @206 (gas: 58)\n 12489: a1 = u64 [sp + 0x120]\n 12493: a2 = a1 <u s0\n 12496: s0 = u64 [sp + 0xf0]\n 12500: a1 = s0 + a2\n 12503: u64 [sp + 0x118] = a1\n 12507: a1 = a1 <u s0\n 12510: a1 = a2 if a2 == 0\n 12513: a2 = u8 [a0 + 0xc]\n 12516: u64 [sp + 0x108] = a2\n 12520: a2 = u8 [a0 + 0xd]\n 12523: u64 [sp + 0x100] = a2\n 12527: a2 = u8 [a0 + 0xe]\n 12530: u64 [sp + 0xf8] = a2\n 12534: a2 = u8 [a0 + 0xf]\n 12537: u64 [sp + 0xf0] = a2\n 12541: a2 = u8 [a0 + 0x10]\n 12544: u64 [sp + 0xa8] = a2\n 12548: a2 = u8 [a0 + 0x11]\n 12551: u64 [sp + 0xa0] = a2\n 12555: a2 = u8 [a0 + 0x12]\n 12558: u64 [sp + 0x98] = a2\n 12562: a2 = u8 [a0 + 0x13]\n 12565: u64 [sp + 0x90] = a2\n 12569: a2 = u8 [a0 + 0x14]\n 12572: u64 [sp + 0x88] = a2\n 12576: a2 = u8 [a0 + 0x15]\n 12579: u64 [sp + 0x80] = a2\n 12583: a2 = u8 [a0 + 0x16]\n 12586: u64 [sp + 0x78] = a2\n 12589: a2 = u8 [a0 + 0x17]\n 12592: u64 [sp + 0x70] = a2\n 12595: a2 = u8 [a0 + 0x18]\n 12598: u64 [sp + 0x68] = a2\n 12601: a2 = u8 [a0 + 0x19]\n 12604: u64 [sp + 0x60] = a2\n 12607: a2 = u8 [a0 + 0x1a]\n 12610: u64 [sp + 0x58] = a2\n 12613: a2 = u8 [a0 + 0x1b]\n 12616: u64 [sp + 0x50] = a2\n 12619: a2 = u8 [a0 + 0x1c]\n 12622: u64 [sp + 0x48] = a2\n 12625: a2 = u8 [a0 + 0x1d]\n 12628: u64 [sp + 0x40] = a2\n 12631: a2 = u8 [a0 + 0x1e]\n 12634: u64 [sp + 0x38] = a2\n 12637: a0 = u8 [a0 + 0x1f]\n 12640: u64 [sp + 0x30] = a0\n 12643: s1 = u64 [sp + 0xe8]\n 12647: a1 = a1 + s1\n 12650: u64 [sp + 0x110] = a1\n 12654: a0 = a1 <u s1\n 12657: a1 = u64 [sp + 0x130]\n 12661: a1 = a1 + a0\n 12664: u64 [sp + 0x130] = a1\n 12668: s0 = u64 [sp + 0x128]\n 12672: i32 a0 = s0 + 0\n 12674: a1 = 0x20\n 12677: ra = 180, jump @0\n      : @207 [@dyn 90] (gas: 110)\n 12683: a1 = u64 [sp + 0x30]\n 12686: u8 [a0 + 0x1f] = a1\n 12689: a1 = u64 [sp + 0x38]\n 12692: u8 [a0 + 0x1e] = a1\n 12695: a1 = u64 [sp + 0x40]\n 12698: u8 [a0 + 0x1d] = a1\n 12701: a1 = u64 [sp + 0x48]\n 12704: u8 [a0 + 0x1c] = a1\n 12707: a1 = u64 [sp + 0x50]\n 12710: u8 [a0 + 0x1b] = a1\n 12713: a1 = u64 [sp + 0x58]\n 12716: u8 [a0 + 0x1a] = a1\n 12719: a1 = u64 [sp + 0x60]\n 12722: u8 [a0 + 0x19] = a1\n 12725: a1 = u64 [sp + 0x68]\n 12728: u8 [a0 + 0x18] = a1\n 12731: a1 = u64 [sp + 0x70]\n 12734: u8 [a0 + 0x17] = a1\n 12737: a1 = u64 [sp + 0x78]\n 12740: u8 [a0 + 0x16] = a1\n 12743: a1 = u64 [sp + 0x80]\n 12747: u8 [a0 + 0x15] = a1\n 12750: a1 = u64 [sp + 0x88]\n 12754: u8 [a0 + 0x14] = a1\n 12757: a1 = u64 [sp + 0x90]\n 12761: u8 [a0 + 0x13] = a1\n 12764: a1 = u64 [sp + 0x98]\n 12768: u8 [a0 + 0x12] = a1\n 12771: a1 = u64 [sp + 0xa0]\n 12775: u8 [a0 + 0x11] = a1\n 12778: a1 = u64 [sp + 0xa8]\n 12782: u8 [a0 + 0x10] = a1\n 12785: a1 = u64 [sp + 0xf0]\n 12789: u8 [a0 + 0xf] = a1\n 12792: a1 = u64 [sp + 0xf8]\n 12796: u8 [a0 + 0xe] = a1\n 12799: a1 = u64 [sp + 0x100]\n 12803: u8 [a0 + 0xd] = a1\n 12806: a1 = u64 [sp + 0x108]\n 12810: u8 [a0 + 0xc] = a1\n 12813: u8 [a0 + 11] = 0\n 12816: u8 [a0 + 10] = 0\n 12819: u8 [a0 + 9] = 0\n 12822: u8 [a0 + 8] = 0\n 12825: u8 [a0 + 7] = 0\n 12828: u8 [a0 + 6] = 0\n 12831: u8 [a0 + 5] = 0\n 12834: u8 [a0 + 4] = 0\n 12837: u8 [a0 + 3] = 0\n 12840: u8 [a0 + 2] = 0\n 12843: u8 [a0 + 1] = 0\n 12846: u8 [a0 + 0] = 0\n 12848: t1 = u64 [sp + 0xd8]\n 12852: t1 = t1 + 0x1\n 12855: a0 = t1 <u 0x1\n 12858: t2 = u64 [sp + 0xd0]\n 12862: t2 = t2 + a0\n 12865: a0 = t1 | t2\n 12868: a4 = a0 <u 0x1\n 12871: a0 = u64 [sp + 0xe0]\n 12875: a4 = a4 + a0\n 12878: a0 = a4 <u a0\n 12881: ra = u64 [sp + 0xc8]\n 12885: ra = ra + a0\n 12888: a0 = u64 [sp + 0x8]\n 12891: a0 = t1 <u a0\n 12894: a2 = u64 [sp + 0x10]\n 12897: a1 = t2 ^ a2\n 12900: a2 = t2 <u a2\n 12903: a2 = a0 if a1 == 0\n 12906: a0 = u64 [sp + 0x18]\n 12909: s1 = a4 <u a0\n 12912: a3 = u64 [sp + 0x20]\n 12915: a1 = ra ^ a3\n 12918: a5 = ra <u a3\n 12921: a5 = s1 if a1 == 0\n 12924: a0 = a0 ^ a4\n 12927: a1 = a1 | a0\n 12930: a0 = s0 + 0x20\n 12933: u64 [sp + 0xf0] = a0\n 12937: a5 = a2 if a1 == 0\n 12940: a2 = a0 <u s0\n 12943: s1 = u64 [sp + 0xb0]\n 12947: a0 = s1 + a2\n 12950: u64 [sp + 0xe8] = a0\n 12954: a3 = a0 <u s1\n 12957: a3 = a2 if a2 == 0\n 12960: a1 = u64 [sp + 0xb8]\n 12964: a3 = a3 + a1\n 12967: u64 [sp + 0xd8] = a3\n 12971: a3 = a3 <u a1\n 12974: a0 = u64 [sp + 0xc0]\n 12978: a3 = a3 + a0\n 12981: u64 [sp + 0xf8] = a3\n 12985: u64 [sp + 0xe0] = a4\n 12989: s0 = u64 [sp + 0x120]\n 12993: a3 = u64 [sp + 0x118]\n 12997: t0 = u64 [sp + 0x110]\n 13001: a2 = u64 [sp + 0x128]\n 13005: u64 [sp + 0x118] = a2\n 13009: u64 [sp + 0x108] = s1\n 13013: u64 [sp + 0x100] = a1\n 13017: u64 [sp + 0x110] = a0\n 13021: a0 = t1\n 13023: t1 = u64 [sp + 0xf0]\n 13027: a1 = t2\n 13029: t2 = u64 [sp + 0xe8]\n 13033: a2 = ra\n 13035: ra = u64 [sp + 0xd8]\n 13039: jump @203 if a5 != 0\n      : @208 (gas: 11)\n 13043: a4 = u64 [sp]\n 13045: u64 [a4] = t1\n 13047: u64 [a4 + 0x8] = t2\n 13050: u64 [a4 + 0x10] = ra\n 13053: a0 = u64 [sp + 0xf8]\n 13057: u64 [a4 + 0x18] = a0\n 13060: ra = u64 [sp + 0x148]\n 13064: s0 = u64 [sp + 0x140]\n 13068: s1 = u64 [sp + 0x138]\n 13072: sp = sp + 0x150\n 13076: ret\n      : @209 (gas: 1)\n 13078: trap\n      : @210 (gas: 22)\n 13079: sp = sp + 0xfffffffffffffda0\n 13083: u64 [sp + 0x258] = ra\n 13087: u64 [sp + 0x250] = s0\n 13091: u64 [sp + 0x248] = s1\n 13095: s0 = sp + 0x260\n 13099: sp = sp & 0xfffffffffffffff0\n 13102: a5 = u64 [a1 + 0x18]\n 13105: s1 = u64 [a1 + 0x10]\n 13108: a4 = u64 [a1 + 0x8]\n 13111: t0 = u64 [a1]\n 13113: u64 [sp + 0x40] = a4\n 13116: u64 [sp + 0x48] = a5\n 13119: a1 = a4 | a5\n 13122: a4 = t0 | s1\n 13125: a4 = a4 | a1\n 13128: a4 = a4 >> 0x20\n 13131: u64 [sp + 0x38] = s1\n 13134: a1 = a1 | s1\n 13137: a1 = a1 << 0x20\n 13140: a1 = a1 | a4\n 13143: u64 [sp + 0x28] = a0\n 13146: jump @229 if a1 != 0\n      : @211 (gas: 20)\n 13150: a0 = u64 [a3 + 0x18]\n 13153: u64 [sp + 0x8] = a0\n 13156: a0 = u64 [a3 + 0x10]\n 13159: u64 [sp + 0x10] = a0\n 13162: a0 = u64 [a3 + 0x8]\n 13165: u64 [sp + 0x18] = a0\n 13168: a0 = u64 [a3]\n 13170: u64 [sp + 0x20] = a0\n 13173: a0 = u64 [a2 + 0x18]\n 13176: u64 [sp + 0x1b8] = a0\n 13180: a0 = u64 [a2 + 0x10]\n 13183: u64 [sp + 0x1c8] = a0\n 13187: a0 = u64 [a2 + 0x8]\n 13190: u64 [sp + 0x1c0] = a0\n 13194: s1 = u64 [a2]\n 13196: i32 a0 = t0 + 0\n 13198: a1 = 0x20\n 13201: u64 [sp] = a0\n 13203: u64 [sp + 0x30] = t0\n 13206: ra = 182, jump @0\n      : @212 [@dyn 91] (gas: 43)\n 13212: u8 [a0 + 31] = 0x40\n 13216: a4 = u64 [sp + 0x1c8]\n 13220: a1 = s1 | a4\n 13223: a2 = u64 [sp + 0x1b8]\n 13227: a5 = u64 [sp + 0x1c0]\n 13231: a2 = a2 | a5\n 13234: a1 = a1 | a2\n 13237: a1 = a1 >> 0x20\n 13240: a2 = a2 | a4\n 13243: a2 = a2 << 0x20\n 13246: a1 = a1 | a2\n 13249: u8 [a0 + 30] = 0\n 13252: u8 [a0 + 29] = 0\n 13255: u8 [a0 + 28] = 0\n 13258: u8 [a0 + 27] = 0\n 13261: u8 [a0 + 26] = 0\n 13264: u8 [a0 + 25] = 0\n 13267: u8 [a0 + 24] = 0\n 13270: u8 [a0 + 23] = 0\n 13273: u8 [a0 + 22] = 0\n 13276: u8 [a0 + 21] = 0\n 13279: u8 [a0 + 20] = 0\n 13282: u8 [a0 + 19] = 0\n 13285: u8 [a0 + 18] = 0\n 13288: u8 [a0 + 17] = 0\n 13291: u8 [a0 + 16] = 0\n 13294: u8 [a0 + 15] = 0\n 13297: u8 [a0 + 14] = 0\n 13300: u8 [a0 + 13] = 0\n 13303: u8 [a0 + 12] = 0\n 13306: u8 [a0 + 11] = 0\n 13309: u8 [a0 + 10] = 0\n 13312: u8 [a0 + 9] = 0\n 13315: u8 [a0 + 8] = 0\n 13318: u8 [a0 + 7] = 0\n 13321: u8 [a0 + 6] = 0\n 13324: u8 [a0 + 5] = 0\n 13327: u8 [a0 + 4] = 0\n 13330: u8 [a0 + 3] = 0\n 13333: u8 [a0 + 2] = 0\n 13336: u8 [a0 + 1] = 0\n 13339: u8 [a0 + 0] = 0\n 13341: jump @229 if a1 != 0\n      : @213 (gas: 20)\n 13345: a3 = s1\n 13347: a0 = u64 [sp + 0x30]\n 13350: a1 = a0 + 0x40\n 13353: u64 [sp + 0x1a8] = a1\n 13357: a0 = a1 <u a0\n 13360: a1 = u64 [sp + 0x40]\n 13363: a2 = a1 + a0\n 13366: u64 [sp + 0x1a0] = a2\n 13370: a1 = a2 <u a1\n 13373: a1 = a0 if a0 == 0\n 13376: a0 = u64 [sp + 0x38]\n 13379: s1 = a0 + a1\n 13382: a0 = s1 <u a0\n 13385: a1 = u64 [sp + 0x48]\n 13388: a0 = a0 + a1\n 13391: u64 [sp + 0x198] = a0\n 13395: u64 [sp + 0x170] = a3\n 13399: i32 a0 = a3 + 0\n 13401: a1 = 0x20\n 13404: ra = 184, jump @0\n      : @214 [@dyn 92] (gas: 12)\n 13410: t0 = u64 [sp + 0x1a8]\n 13414: a1 = t0 | s1\n 13417: a2 = u64 [sp + 0x1a0]\n 13421: a3 = u64 [sp + 0x198]\n 13425: a2 = a2 | a3\n 13428: a1 = a1 | a2\n 13431: a1 = a1 >> 0x20\n 13434: u64 [sp + 0x190] = s1\n 13438: a2 = a2 | s1\n 13441: a2 = a2 << 0x20\n 13444: a1 = a1 | a2\n 13447: jump @229 if a1 != 0\n      : @215 (gas: 94)\n 13451: a1 = u8 [a0 + 0x19]\n 13454: a2 = u8 [a0 + 0x18]\n 13457: a3 = u8 [a0 + 0x1a]\n 13460: a4 = u8 [a0 + 0x1b]\n 13463: a1 = a1 << 0x8\n 13466: a1 = a1 | a2\n 13469: a3 = a3 << 0x10\n 13472: a4 = a4 << 0x18\n 13475: a3 = a3 | a4\n 13478: a1 = a1 | a3\n 13481: a2 = u8 [a0 + 0x1d]\n 13484: a3 = u8 [a0 + 0x1c]\n 13487: a4 = u8 [a0 + 0x1e]\n 13490: a5 = u8 [a0 + 0x1f]\n 13493: a2 = a2 << 0x8\n 13496: a2 = a2 | a3\n 13499: a4 = a4 << 0x10\n 13502: a5 = a5 << 0x18\n 13505: a4 = a4 | a5\n 13508: a2 = a2 | a4\n 13511: a2 = a2 << 0x20\n 13514: a1 = a1 | a2\n 13517: u64 [sp + 0x1d8] = a1\n 13521: a1 = u8 [a0 + 0x11]\n 13524: a2 = u8 [a0 + 0x10]\n 13527: a3 = u8 [a0 + 0x12]\n 13530: a4 = u8 [a0 + 0x13]\n 13533: a1 = a1 << 0x8\n 13536: a1 = a1 | a2\n 13539: a3 = a3 << 0x10\n 13542: a4 = a4 << 0x18\n 13545: a3 = a3 | a4\n 13548: a1 = a1 | a3\n 13551: a2 = u8 [a0 + 0x15]\n 13554: a3 = u8 [a0 + 0x14]\n 13557: a4 = u8 [a0 + 0x16]\n 13560: a5 = u8 [a0 + 0x17]\n 13563: a2 = a2 << 0x8\n 13566: a2 = a2 | a3\n 13569: a4 = a4 << 0x10\n 13572: a5 = a5 << 0x18\n 13575: a4 = a4 | a5\n 13578: a2 = a2 | a4\n 13581: a2 = a2 << 0x20\n 13584: a1 = a1 | a2\n 13587: u64 [sp + 0x1d0] = a1\n 13591: a1 = u8 [a0 + 0x9]\n 13594: a2 = u8 [a0 + 0x8]\n 13597: a3 = u8 [a0 + 0xa]\n 13600: a4 = u8 [a0 + 0xb]\n 13603: a1 = a1 << 0x8\n 13606: a1 = a1 | a2\n 13609: a3 = a3 << 0x10\n 13612: a4 = a4 << 0x18\n 13615: a3 = a3 | a4\n 13618: a1 = a1 | a3\n 13621: a2 = u8 [a0 + 0xd]\n 13624: a3 = u8 [a0 + 0xc]\n 13627: a4 = u8 [a0 + 0xe]\n 13630: a5 = u8 [a0 + 0xf]\n 13633: a2 = a2 << 0x8\n 13636: a2 = a2 | a3\n 13639: a4 = a4 << 0x10\n 13642: a5 = a5 << 0x18\n 13645: a4 = a4 | a5\n 13648: a2 = a2 | a4\n 13651: a2 = a2 << 0x20\n 13654: a1 = a1 | a2\n 13657: u64 [sp + 0x188] = a1\n 13661: a1 = u8 [a0 + 0x1]\n 13664: a2 = u8 [a0]\n 13666: a3 = u8 [a0 + 0x2]\n 13669: a4 = u8 [a0 + 0x3]\n 13672: a1 = a1 << 0x8\n 13675: a1 = a1 | a2\n 13678: a3 = a3 << 0x10\n 13681: a4 = a4 << 0x18\n 13684: a3 = a3 | a4\n 13687: a1 = a1 | a3\n 13690: a2 = u8 [a0 + 0x5]\n 13693: a3 = u8 [a0 + 0x4]\n 13696: a4 = u8 [a0 + 0x6]\n 13699: a0 = u8 [a0 + 0x7]\n 13702: a2 = a2 << 0x8\n 13705: a2 = a2 | a3\n 13708: a4 = a4 << 0x10\n 13711: a0 = a0 << 0x18\n 13714: a0 = a0 | a4\n 13717: a0 = a0 | a2\n 13720: a0 = a0 << 0x20\n 13723: s1 = a0 | a1\n 13726: i32 a0 = t0 + 0\n 13728: a1 = 0x20\n 13731: ra = 186, jump @0\n      : @216 [@dyn 93] (gas: 82)\n 13737: a4 = u64 [sp + 0x1d8]\n 13741: t2 = u64 [sp + 0x188]\n 13745: a3 = u64 [sp + 0x1d0]\n 13749: u8 [a0 + 0x10] = a3\n 13752: a1 = t2 >> 0x38\n 13755: u8 [a0 + 0xf] = a1\n 13758: a1 = t2 >> 0x30\n 13761: u8 [a0 + 0xe] = a1\n 13764: a1 = t2 >> 0x28\n 13767: u8 [a0 + 0xd] = a1\n 13770: a1 = t2 >> 0x20\n 13773: u8 [a0 + 0xc] = a1\n 13776: a1 = t2 >> 0x18\n 13779: u8 [a0 + 0xb] = a1\n 13782: a1 = t2 >> 0x10\n 13785: u8 [a0 + 0xa] = a1\n 13788: a1 = t2 >> 0x8\n 13791: u8 [a0 + 0x9] = a1\n 13794: u8 [a0 + 0x8] = t2\n 13797: a1 = s1 >> 0x38\n 13800: u8 [a0 + 0x7] = a1\n 13803: a1 = s1 >> 0x30\n 13806: u8 [a0 + 0x6] = a1\n 13809: a1 = s1 >> 0x28\n 13812: u8 [a0 + 0x5] = a1\n 13815: a1 = s1 >> 0x20\n 13818: u8 [a0 + 0x4] = a1\n 13821: a1 = s1 >> 0x18\n 13824: u8 [a0 + 0x3] = a1\n 13827: a1 = s1 >> 0x10\n 13830: u8 [a0 + 0x2] = a1\n 13833: a1 = s1 >> 0x8\n 13836: u8 [a0 + 0x1] = a1\n 13839: u8 [a0] = s1\n 13841: u8 [a0 + 0x18] = a4\n 13844: a1 = a3 >> 0x38\n 13847: u8 [a0 + 0x17] = a1\n 13850: a1 = a3 >> 0x30\n 13853: u8 [a0 + 0x16] = a1\n 13856: a1 = a3 >> 0x28\n 13859: u8 [a0 + 0x15] = a1\n 13862: a1 = a3 >> 0x20\n 13865: u8 [a0 + 0x14] = a1\n 13868: a1 = a3 >> 0x18\n 13871: u8 [a0 + 0x13] = a1\n 13874: a1 = a3 >> 0x10\n 13877: u8 [a0 + 0x12] = a1\n 13880: a1 = a3 >> 0x8\n 13883: u8 [a0 + 0x11] = a1\n 13886: a1 = a4 >> 0x38\n 13889: u8 [a0 + 0x1f] = a1\n 13892: a1 = a4 >> 0x30\n 13895: u8 [a0 + 0x1e] = a1\n 13898: a1 = a4 >> 0x28\n 13901: u8 [a0 + 0x1d] = a1\n 13904: a1 = a4 >> 0x20\n 13907: u8 [a0 + 0x1c] = a1\n 13910: a1 = a4 >> 0x18\n 13913: u8 [a0 + 0x1b] = a1\n 13916: a1 = a4 >> 0x10\n 13919: u8 [a0 + 0x1a] = a1\n 13922: a1 = a4 >> 0x8\n 13925: u8 [a0 + 0x19] = a1\n 13928: a0 = u64 [sp + 0x30]\n 13931: a1 = a0 + 0x60\n 13934: u64 [sp + 0x1b0] = a1\n 13938: a0 = a1 <u a0\n 13941: a1 = u64 [sp + 0x40]\n 13944: a2 = a1 + a0\n 13947: t0 = a2\n 13949: a1 = a2 <u a1\n 13952: a1 = a0 if a0 == 0\n 13955: a2 = u64 [sp + 0x38]\n 13958: t1 = a2 + a1\n 13961: u64 [sp + 0x168] = s1\n 13965: a0 = s1 | a3\n 13968: a1 = t2 | a4\n 13971: a0 = a0 | a1\n 13974: a1 = t1 <u a2\n 13977: a2 = u64 [sp + 0x48]\n 13980: ra = a2 + a1\n 13983: jump @225 if a0 == 0\n      : @217 (gas: 21)\n 13987: s1 = a4\n 13989: a4 = 0\n 13991: a5 = 0\n 13993: u64 [sp + 376] = 0\n 13997: u64 [sp + 384] = 0\n 14001: a0 = u64 [sp + 0x168]\n 14005: a0 = reverse a0\n 14007: u64 [sp + 0x68] = a0\n 14010: a0 = reverse t2\n 14012: u64 [sp + 0x60] = a0\n 14015: a0 = reverse a3\n 14017: u64 [sp + 0x58] = a0\n 14020: a0 = reverse s1\n 14022: u64 [sp + 0x50] = a0\n 14025: a0 = 0xffffffe0\n 14035: u64 [sp + 0x188] = a0\n 14039: s1 = u64 [sp + 0x1b8]\n 14043: a0 = u64 [sp + 0x1c8]\n 14047: a2 = u64 [sp + 0x1c0]\n 14051: a3 = u64 [sp + 0x170]\n 14055: fallthrough\n      : @218 (gas: 15)\n 14056: u64 [sp + 0x168] = a5\n 14060: u64 [sp + 0x170] = a4\n 14064: u64 [sp + 0x1c8] = a0\n 14068: a0 = a0 | s1\n 14071: a1 = u64 [sp + 0x188]\n 14075: a1 = a3 <u a1\n 14078: u64 [sp + 0x1c0] = a2\n 14082: a1 = 0 if a2 != 0\n 14084: a1 = 0 if a0 != 0\n 14086: u64 [sp + 0x160] = ra\n 14090: u64 [sp + 0x158] = t1\n 14094: u64 [sp + 0x150] = t0\n 14098: a0 = u64 [sp + 0x1b0]\n 14102: u64 [sp + 0x1d8] = a0\n 14106: jump @229 if a1 == 0\n      : @219 (gas: 7)\n 14110: u64 [sp + 0x1b8] = s1\n 14114: a0 = a3 + 0x20\n 14117: u64 [sp + 0x1d0] = a0\n 14121: i32 a0 = a0 + 0\n 14123: a1 = 0x20\n 14126: s1 = a3\n 14128: ra = 188, jump @0\n      : @220 [@dyn 94] (gas: 10)\n 14134: a1 = u64 [sp + 0x190]\n 14138: a2 = u64 [sp + 0x198]\n 14142: a1 = a1 | a2\n 14145: a2 = u64 [sp + 0x1a8]\n 14149: a3 = u64 [sp + 0x188]\n 14153: a2 = a2 <u a3\n 14156: a3 = u64 [sp + 0x1a0]\n 14160: a2 = 0 if a3 != 0\n 14162: a2 = 0 if a1 != 0\n 14164: jump @229 if a2 == 0\n      : @221 (gas: 80)\n 14168: a1 = u64 [sp + 0x1d0]\n 14172: a2 = a1 <u s1\n 14175: a1 = u64 [sp + 0x1c0]\n 14179: a3 = a1 + a2\n 14182: u64 [sp + 0x1a8] = a3\n 14186: a1 = a3 <u a1\n 14189: a1 = a2 if a2 == 0\n 14192: a2 = u8 [a0]\n 14194: u64 [sp + 0x1c0] = a2\n 14198: a2 = u8 [a0 + 0x1]\n 14201: u64 [sp + 0x1b0] = a2\n 14205: a2 = u8 [a0 + 0x2]\n 14208: u64 [sp + 0x198] = a2\n 14212: a2 = u8 [a0 + 0x3]\n 14215: u64 [sp + 0x190] = a2\n 14219: a2 = u8 [a0 + 0x4]\n 14222: u64 [sp + 0x148] = a2\n 14226: a2 = u8 [a0 + 0x5]\n 14229: u64 [sp + 0x140] = a2\n 14233: a2 = u8 [a0 + 0x6]\n 14236: u64 [sp + 0x138] = a2\n 14240: a2 = u8 [a0 + 0x7]\n 14243: u64 [sp + 0x130] = a2\n 14247: a2 = u8 [a0 + 0x8]\n 14250: u64 [sp + 0x128] = a2\n 14254: a2 = u8 [a0 + 0x9]\n 14257: u64 [sp + 0x120] = a2\n 14261: a2 = u8 [a0 + 0xa]\n 14264: u64 [sp + 0x118] = a2\n 14268: a2 = u8 [a0 + 0xb]\n 14271: u64 [sp + 0x110] = a2\n 14275: a2 = u8 [a0 + 0xc]\n 14278: u64 [sp + 0x108] = a2\n 14282: a2 = u8 [a0 + 0xd]\n 14285: u64 [sp + 0x100] = a2\n 14289: a2 = u8 [a0 + 0xe]\n 14292: u64 [sp + 0xf8] = a2\n 14296: a2 = u8 [a0 + 0xf]\n 14299: u64 [sp + 0xf0] = a2\n 14303: a2 = u8 [a0 + 0x10]\n 14306: u64 [sp + 0xe8] = a2\n 14310: a2 = u8 [a0 + 0x11]\n 14313: u64 [sp + 0xe0] = a2\n 14317: a2 = u8 [a0 + 0x12]\n 14320: u64 [sp + 0xd8] = a2\n 14324: a2 = u8 [a0 + 0x13]\n 14327: u64 [sp + 0xd0] = a2\n 14331: a2 = u8 [a0 + 0x14]\n 14334: u64 [sp + 0xc8] = a2\n 14338: a2 = u8 [a0 + 0x15]\n 14341: u64 [sp + 0xc0] = a2\n 14345: a2 = u8 [a0 + 0x16]\n 14348: u64 [sp + 0xb8] = a2\n 14352: a2 = u8 [a0 + 0x17]\n 14355: u64 [sp + 0xb0] = a2\n 14359: a2 = u8 [a0 + 0x18]\n 14362: u64 [sp + 0xa8] = a2\n 14366: a2 = u8 [a0 + 0x19]\n 14369: u64 [sp + 0xa0] = a2\n 14373: a2 = u8 [a0 + 0x1a]\n 14376: u64 [sp + 0x98] = a2\n 14380: a2 = u8 [a0 + 0x1b]\n 14383: u64 [sp + 0x90] = a2\n 14387: a2 = u8 [a0 + 0x1c]\n 14390: u64 [sp + 0x88] = a2\n 14394: a2 = u8 [a0 + 0x1d]\n 14397: u64 [sp + 0x80] = a2\n 14401: a2 = u8 [a0 + 0x1e]\n 14404: u64 [sp + 0x78] = a2\n 14407: a0 = u8 [a0 + 0x1f]\n 14410: u64 [sp + 0x70] = a0\n 14413: a0 = u64 [sp + 0x1c8]\n 14417: a1 = a1 + a0\n 14420: u64 [sp + 0x1a0] = a1\n 14424: a0 = a1 <u a0\n 14427: s1 = u64 [sp + 0x1b8]\n 14431: s1 = s1 + a0\n 14434: a0 = i32 [sp + 0x1d8]\n 14438: a1 = 0x20\n 14441: ra = 190, jump @0\n      : @222 [@dyn 95] (gas: 123)\n 14447: a1 = u64 [sp + 0x70]\n 14450: u8 [a0 + 0x1f] = a1\n 14453: a1 = u64 [sp + 0x78]\n 14456: u8 [a0 + 0x1e] = a1\n 14459: a1 = u64 [sp + 0x80]\n 14463: u8 [a0 + 0x1d] = a1\n 14466: a1 = u64 [sp + 0x88]\n 14470: u8 [a0 + 0x1c] = a1\n 14473: a1 = u64 [sp + 0x90]\n 14477: u8 [a0 + 0x1b] = a1\n 14480: a1 = u64 [sp + 0x98]\n 14484: u8 [a0 + 0x1a] = a1\n 14487: a1 = u64 [sp + 0xa0]\n 14491: u8 [a0 + 0x19] = a1\n 14494: a1 = u64 [sp + 0xa8]\n 14498: u8 [a0 + 0x18] = a1\n 14501: a1 = u64 [sp + 0xb0]\n 14505: u8 [a0 + 0x17] = a1\n 14508: a1 = u64 [sp + 0xb8]\n 14512: u8 [a0 + 0x16] = a1\n 14515: a1 = u64 [sp + 0xc0]\n 14519: u8 [a0 + 0x15] = a1\n 14522: a1 = u64 [sp + 0xc8]\n 14526: u8 [a0 + 0x14] = a1\n 14529: a1 = u64 [sp + 0xd0]\n 14533: u8 [a0 + 0x13] = a1\n 14536: a1 = u64 [sp + 0xd8]\n 14540: u8 [a0 + 0x12] = a1\n 14543: a1 = u64 [sp + 0xe0]\n 14547: u8 [a0 + 0x11] = a1\n 14550: a1 = u64 [sp + 0xe8]\n 14554: u8 [a0 + 0x10] = a1\n 14557: a1 = u64 [sp + 0xf0]\n 14561: u8 [a0 + 0xf] = a1\n 14564: a1 = u64 [sp + 0xf8]\n 14568: u8 [a0 + 0xe] = a1\n 14571: a1 = u64 [sp + 0x100]\n 14575: u8 [a0 + 0xd] = a1\n 14578: a1 = u64 [sp + 0x108]\n 14582: u8 [a0 + 0xc] = a1\n 14585: a1 = u64 [sp + 0x110]\n 14589: u8 [a0 + 0xb] = a1\n 14592: a1 = u64 [sp + 0x118]\n 14596: u8 [a0 + 0xa] = a1\n 14599: a1 = u64 [sp + 0x120]\n 14603: u8 [a0 + 0x9] = a1\n 14606: a1 = u64 [sp + 0x128]\n 14610: u8 [a0 + 0x8] = a1\n 14613: a1 = u64 [sp + 0x130]\n 14617: u8 [a0 + 0x7] = a1\n 14620: a1 = u64 [sp + 0x138]\n 14624: u8 [a0 + 0x6] = a1\n 14627: a1 = u64 [sp + 0x140]\n 14631: u8 [a0 + 0x5] = a1\n 14634: a1 = u64 [sp + 0x148]\n 14638: u8 [a0 + 0x4] = a1\n 14641: a1 = u64 [sp + 0x190]\n 14645: u8 [a0 + 0x3] = a1\n 14648: a1 = u64 [sp + 0x198]\n 14652: u8 [a0 + 0x2] = a1\n 14655: a1 = u64 [sp + 0x1b0]\n 14659: u8 [a0 + 0x1] = a1\n 14662: a1 = u64 [sp + 0x1c0]\n 14666: u8 [a0] = a1\n 14668: ra = u64 [sp + 0x170]\n 14672: ra = ra + 0x1\n 14675: a0 = ra <u 0x1\n 14678: t1 = u64 [sp + 0x168]\n 14682: t1 = t1 + a0\n 14685: a0 = ra | t1\n 14688: a0 = a0 <u 0x1\n 14691: a1 = u64 [sp + 0x178]\n 14695: a0 = a0 + a1\n 14698: a1 = a0 <u a1\n 14701: a5 = u64 [sp + 0x180]\n 14705: a5 = a5 + a1\n 14708: a1 = u64 [sp + 0x50]\n 14711: a1 = ra <u a1\n 14714: a3 = u64 [sp + 0x58]\n 14717: a2 = t1 ^ a3\n 14720: a3 = t1 <u a3\n 14723: a3 = a1 if a2 == 0\n 14726: a2 = u64 [sp + 0x60]\n 14729: t0 = a0 <u a2\n 14732: a1 = u64 [sp + 0x68]\n 14735: a4 = a5 ^ a1\n 14738: u64 [sp + 0x180] = a5\n 14742: a1 = a5 <u a1\n 14745: a1 = t0 if a4 == 0\n 14748: a2 = a2 ^ a0\n 14751: a2 = a2 | a4\n 14754: a1 = a3 if a2 == 0\n 14757: a3 = u64 [sp + 0x1d8]\n 14761: a2 = a3 + 0x20\n 14764: u64 [sp + 0x1b0] = a2\n 14768: a2 = a2 <u a3\n 14771: t0 = u64 [sp + 0x150]\n 14775: a3 = t0 + a2\n 14778: u64 [sp + 0x1c8] = a3\n 14782: a3 = a3 <u t0\n 14785: a3 = a2 if a2 == 0\n 14788: a5 = u64 [sp + 0x158]\n 14792: a3 = a3 + a5\n 14795: u64 [sp + 0x1c0] = a3\n 14799: a2 = a3 <u a5\n 14802: a4 = u64 [sp + 0x160]\n 14806: a2 = a2 + a4\n 14809: u64 [sp + 0x1b8] = a2\n 14813: u64 [sp + 0x178] = a0\n 14817: a3 = u64 [sp + 0x1d0]\n 14821: a2 = u64 [sp + 0x1a8]\n 14825: a0 = u64 [sp + 0x1a0]\n 14829: t2 = u64 [sp + 0x1d8]\n 14833: u64 [sp + 0x1a8] = t2\n 14837: u64 [sp + 0x1a0] = t0\n 14841: t0 = u64 [sp + 0x1c8]\n 14845: u64 [sp + 0x190] = a5\n 14849: u64 [sp + 0x198] = a4\n 14853: a4 = ra\n 14855: ra = u64 [sp + 0x1b8]\n 14859: a5 = t1\n 14861: t1 = u64 [sp + 0x1c0]\n 14865: jump @218 if a1 != 0\n      : @223 (gas: 10)\n 14869: a0 = u64 [sp + 0x38]\n 14872: a2 = u64 [sp + 0x48]\n 14875: a2 = a2 | a0\n 14878: a1 = 0xffffffe0\n 14888: a3 = u64 [sp + 0x30]\n 14891: a1 = a3 <u a1\n 14894: s1 = u64 [sp + 0x40]\n 14897: a1 = 0 if s1 != 0\n 14899: a1 = 0 if a2 != 0\n 14901: jump @229 if a1 == 0\n      : @224 (gas: 21)\n 14905: a4 = u64 [sp + 0x1b0]\n 14909: a5 = a4 <u a3\n 14912: a1 = t0 ^ s1\n 14915: a2 = t0 <u s1\n 14918: a2 = a5 if a1 == 0\n 14921: t2 = t1 - a0\n 14924: a1 = t2 - a2\n 14927: u64 [sp + 0x1d8] = a1\n 14931: a1 = t2 <u a2\n 14934: a2 = t1 <u a0\n 14937: a1 = a1 + a2\n 14940: a0 = u64 [sp + 0x48]\n 14943: a2 = ra - a0\n 14946: a2 = a2 - a1\n 14949: u64 [sp + 0x1a8] = a2\n 14953: a1 = t0 - s1\n 14956: a1 = a1 - a5\n 14959: u64 [sp + 0x1d0] = a1\n 14963: s1 = a4 - a3\n 14966: a0 = u64 [sp]\n 14968: jump @226\n      : @225 (gas: 9)\n 14970: u64 [sp + 464] = 0\n 14974: u64 [sp + 472] = 0\n 14978: u64 [sp + 424] = 0\n 14982: s1 = 0x60\n 14985: a0 = u64 [sp]\n 14987: u64 [sp + 0x1c8] = t0\n 14991: u64 [sp + 0x1c0] = t1\n 14995: u64 [sp + 0x1b8] = ra\n 14999: fallthrough\n      : @226 (gas: 3)\n 15000: i32 a0 = a0 + 0x20\n 15003: a1 = 0x20\n 15006: ra = 192, jump @0\n      : @227 [@dyn 96] (gas: 87)\n 15012: a1 = u64 [sp + 0x1a8]\n 15016: a1 = reverse a1\n 15018: a2 = u64 [sp + 0x1d8]\n 15022: a2 = reverse a2\n 15024: a3 = u64 [sp + 0x1d0]\n 15028: a3 = reverse a3\n 15030: a4 = reverse s1\n 15032: a5 = a4 >> 0x38\n 15035: u8 [a0 + 0x1f] = a5\n 15038: a5 = a4 >> 0x30\n 15041: u8 [a0 + 0x1e] = a5\n 15044: a5 = a4 >> 0x28\n 15047: u8 [a0 + 0x1d] = a5\n 15050: a5 = a4 >> 0x20\n 15053: u8 [a0 + 0x1c] = a5\n 15056: a5 = a4 >> 0x18\n 15059: u8 [a0 + 0x1b] = a5\n 15062: a5 = a4 >> 0x10\n 15065: u8 [a0 + 0x1a] = a5\n 15068: a5 = a4 >> 0x8\n 15071: u8 [a0 + 0x19] = a5\n 15074: u8 [a0 + 0x18] = a4\n 15077: u8 [a0 + 0x10] = a3\n 15080: a4 = a3 >> 0x38\n 15083: u8 [a0 + 0x17] = a4\n 15086: a4 = a3 >> 0x30\n 15089: u8 [a0 + 0x16] = a4\n 15092: a4 = a3 >> 0x28\n 15095: u8 [a0 + 0x15] = a4\n 15098: a4 = a3 >> 0x20\n 15101: u8 [a0 + 0x14] = a4\n 15104: a4 = a3 >> 0x18\n 15107: u8 [a0 + 0x13] = a4\n 15110: a4 = a3 >> 0x10\n 15113: u8 [a0 + 0x12] = a4\n 15116: a3 = a3 >> 0x8\n 15119: u8 [a0 + 0x11] = a3\n 15122: u8 [a0 + 0x8] = a2\n 15125: a3 = a2 >> 0x38\n 15128: u8 [a0 + 0xf] = a3\n 15131: a3 = a2 >> 0x30\n 15134: u8 [a0 + 0xe] = a3\n 15137: a3 = a2 >> 0x28\n 15140: u8 [a0 + 0xd] = a3\n 15143: a3 = a2 >> 0x20\n 15146: u8 [a0 + 0xc] = a3\n 15149: a3 = a2 >> 0x18\n 15152: u8 [a0 + 0xb] = a3\n 15155: a3 = a2 >> 0x10\n 15158: u8 [a0 + 0xa] = a3\n 15161: a2 = a2 >> 0x8\n 15164: u8 [a0 + 0x9] = a2\n 15167: u8 [a0] = a1\n 15169: a2 = a1 >> 0x38\n 15172: u8 [a0 + 0x7] = a2\n 15175: a2 = a1 >> 0x30\n 15178: u8 [a0 + 0x6] = a2\n 15181: a2 = a1 >> 0x28\n 15184: u8 [a0 + 0x5] = a2\n 15187: a2 = a1 >> 0x20\n 15190: u8 [a0 + 0x4] = a2\n 15193: a2 = a1 >> 0x18\n 15196: u8 [a0 + 0x3] = a2\n 15199: a2 = a1 >> 0x10\n 15202: u8 [a0 + 0x2] = a2\n 15205: a1 = a1 >> 0x8\n 15208: u8 [a0 + 0x1] = a1\n 15211: a0 = u64 [sp + 0x1b8]\n 15215: u64 [sp + 0x1f8] = a0\n 15219: a0 = u64 [sp + 0x1c0]\n 15223: u64 [sp + 0x1f0] = a0\n 15227: a0 = u64 [sp + 0x1c8]\n 15231: u64 [sp + 0x1e8] = a0\n 15235: a0 = u64 [sp + 0x1b0]\n 15239: u64 [sp + 0x1e0] = a0\n 15243: a0 = u64 [sp + 0x8]\n 15246: u64 [sp + 0x218] = a0\n 15250: a0 = u64 [sp + 0x10]\n 15253: u64 [sp + 0x210] = a0\n 15257: a0 = u64 [sp + 0x18]\n 15260: u64 [sp + 0x208] = a0\n 15264: a0 = sp + 0x220\n 15268: a1 = sp + 0x200\n 15272: a2 = sp + 0x1e0\n 15276: a3 = u64 [sp + 0x20]\n 15279: u64 [sp + 0x200] = a3\n 15283: ra = 194, jump @197\n      : @228 [@dyn 97] (gas: 15)\n 15289: a0 = u64 [sp + 0x230]\n 15293: a1 = u64 [sp + 0x238]\n 15297: a2 = u64 [sp + 0x220]\n 15301: a3 = u64 [sp + 0x228]\n 15305: a4 = u64 [sp + 0x28]\n 15308: u64 [a4 + 0x10] = a0\n 15311: u64 [a4 + 0x18] = a1\n 15314: u64 [a4] = a2\n 15316: u64 [a4 + 0x8] = a3\n 15319: sp = s0 + 0xfffffffffffffda0\n 15323: ra = u64 [sp + 0x258]\n 15327: s0 = u64 [sp + 0x250]\n 15331: s1 = u64 [sp + 0x248]\n 15335: sp = sp + 0x260\n 15339: ret\n      : @229 (gas: 1)\n 15341: trap\n      : @230 (gas: 8)\n 15342: a0 = u64 [sp + 0x130]\n 15346: a1 = u64 [sp + 0x138]\n 15350: a2 = u64 [sp + 0x128]\n 15354: a3 = u64 [sp + 0x120]\n 15358: a1 = a1 | a2\n 15361: a0 = a0 | a3\n 15364: a0 = a0 | a1\n 15367: jump @238 if a0 != 0\n      : @231 (gas: 2)\n 15371: a0 = i32 [0x20084]\n 15376: jump @238 if a0 <=u 3\n      : @232 (gas: 17)\n 15381: a0 = sp + 0xe0\n 15385: ra = 0xc4\n 15389: sp = sp + 0xfffffffffffffcc0\n 15393: u64 [sp + 0x338] = ra\n 15397: u64 [sp + 0x330] = s0\n 15401: u64 [sp + 0x328] = s1\n 15405: s0 = sp + 0x340\n 15409: sp = sp & 0xffffffffffffffe0\n 15412: u64 [sp + 0x8] = a0\n 15415: u64 [sp + 696] = 0\n 15419: u64 [sp + 688] = 0\n 15423: u64 [sp + 672] = 0x1\n 15428: a0 = sp + 0x2c0\n 15432: a1 = sp + 0x2a0\n 15436: u64 [sp + 680] = 0\n 15440: ra = 0x250\n 15444: jump @606\n      : @233 [@dyn 98] (gas: 19)\n 15447: a0 = u64 [sp + 0xe0]\n 15451: u64 [sp + 0x58] = a0\n 15454: a0 = u64 [sp + 0xe8]\n 15458: u64 [sp + 0x50] = a0\n 15461: a0 = u64 [sp + 0xf0]\n 15465: u64 [sp + 0x48] = a0\n 15468: a0 = u64 [sp + 0xf8]\n 15472: u64 [sp + 0x40] = a0\n 15475: a0 = u64 [sp + 0x100]\n 15479: u64 [sp + 0x38] = a0\n 15482: a0 = u64 [sp + 0x108]\n 15486: u64 [sp + 0x30] = a0\n 15489: a0 = u64 [sp + 0x110]\n 15493: u64 [sp + 0x28] = a0\n 15496: a0 = u64 [sp + 0x118]\n 15500: u64 [sp + 0x20] = a0\n 15503: a0 = 0x40\n 15506: a1 = 0x20\n 15509: ra = 198, jump @0\n      : @234 [@dyn 99] (gas: 120)\n 15515: a1 = u8 [a0 + 0x1]\n 15518: a2 = u8 [a0]\n 15520: a3 = u8 [a0 + 0x2]\n 15523: a4 = u8 [a0 + 0x3]\n 15526: a1 = a1 << 0x8\n 15529: a1 = a1 | a2\n 15532: a3 = a3 << 0x10\n 15535: a4 = a4 << 0x18\n 15538: a3 = a3 | a4\n 15541: a1 = a1 | a3\n 15544: a2 = u8 [a0 + 0x5]\n 15547: a3 = u8 [a0 + 0x4]\n 15550: a4 = u8 [a0 + 0x6]\n 15553: a5 = u8 [a0 + 0x7]\n 15556: a2 = a2 << 0x8\n 15559: a2 = a2 | a3\n 15562: a4 = a4 << 0x10\n 15565: a5 = a5 << 0x18\n 15568: a4 = a4 | a5\n 15571: a2 = a2 | a4\n 15574: a2 = a2 << 0x20\n 15577: t0 = a2 | a1\n 15580: a2 = u8 [a0 + 0x9]\n 15583: a3 = u8 [a0 + 0x8]\n 15586: a4 = u8 [a0 + 0xa]\n 15589: a5 = u8 [a0 + 0xb]\n 15592: a2 = a2 << 0x8\n 15595: a2 = a2 | a3\n 15598: a4 = a4 << 0x10\n 15601: a5 = a5 << 0x18\n 15604: a4 = a4 | a5\n 15607: a2 = a2 | a4\n 15610: a3 = u8 [a0 + 0xd]\n 15613: a4 = u8 [a0 + 0xc]\n 15616: a5 = u8 [a0 + 0xe]\n 15619: s1 = u8 [a0 + 0xf]\n 15622: a3 = a3 << 0x8\n 15625: a3 = a3 | a4\n 15628: a5 = a5 << 0x10\n 15631: s1 = s1 << 0x18\n 15634: a5 = a5 | s1\n 15637: a3 = a3 | a5\n 15640: a3 = a3 << 0x20\n 15643: a2 = a2 | a3\n 15646: a3 = u8 [a0 + 0x11]\n 15649: a4 = u8 [a0 + 0x10]\n 15652: a5 = u8 [a0 + 0x12]\n 15655: s1 = u8 [a0 + 0x13]\n 15658: a3 = a3 << 0x8\n 15661: a3 = a3 | a4\n 15664: a5 = a5 << 0x10\n 15667: s1 = s1 << 0x18\n 15670: a5 = a5 | s1\n 15673: a3 = a3 | a5\n 15676: a4 = u8 [a0 + 0x15]\n 15679: a5 = u8 [a0 + 0x14]\n 15682: s1 = u8 [a0 + 0x16]\n 15685: a1 = u8 [a0 + 0x17]\n 15688: a4 = a4 << 0x8\n 15691: a4 = a4 | a5\n 15694: s1 = s1 << 0x10\n 15697: a1 = a1 << 0x18\n 15700: a1 = a1 | s1\n 15703: a1 = a1 | a4\n 15706: a1 = a1 << 0x20\n 15709: a3 = a3 | a1\n 15712: a1 = u8 [a0 + 0x19]\n 15715: a4 = u8 [a0 + 0x18]\n 15718: a5 = u8 [a0 + 0x1a]\n 15721: s1 = u8 [a0 + 0x1b]\n 15724: a1 = a1 << 0x8\n 15727: a1 = a1 | a4\n 15730: a5 = a5 << 0x10\n 15733: s1 = s1 << 0x18\n 15736: a5 = a5 | s1\n 15739: a1 = a1 | a5\n 15742: a4 = u8 [a0 + 0x1d]\n 15745: a5 = u8 [a0 + 0x1c]\n 15748: s1 = u8 [a0 + 0x1e]\n 15751: a0 = u8 [a0 + 0x1f]\n 15754: a4 = a4 << 0x8\n 15757: a4 = a4 | a5\n 15760: s1 = s1 << 0x10\n 15763: a0 = a0 << 0x18\n 15766: a0 = a0 | s1\n 15769: a0 = a0 | a4\n 15772: a0 = a0 << 0x20\n 15775: a0 = a0 | a1\n 15778: a4 = reverse a0\n 15780: u64 [sp + 0x8] = a4\n 15783: a3 = reverse a3\n 15785: u64 [sp + 0x10] = a3\n 15788: a1 = reverse a2\n 15790: u64 [sp + 0x18] = a1\n 15793: s1 = reverse t0\n 15795: a0 = u64 [sp + 0x20]\n 15798: u64 [sp + 0x78] = a0\n 15801: a0 = u64 [sp + 0x28]\n 15804: u64 [sp + 0x70] = a0\n 15807: a0 = u64 [sp + 0x30]\n 15810: u64 [sp + 0x68] = a0\n 15813: a0 = u64 [sp + 0x38]\n 15816: u64 [sp + 0x60] = a0\n 15819: a0 = u64 [sp + 0x40]\n 15822: u64 [sp + 0x98] = a0\n 15826: a0 = u64 [sp + 0x48]\n 15829: u64 [sp + 0x90] = a0\n 15833: a0 = u64 [sp + 0x50]\n 15836: u64 [sp + 0x88] = a0\n 15840: a0 = u64 [sp + 0x58]\n 15843: u64 [sp + 0x80] = a0\n 15847: u64 [sp + 0xb8] = s1\n 15851: u64 [sp + 0xb0] = a1\n 15855: u64 [sp + 0xa8] = a3\n 15859: a0 = sp + 0xc0\n 15863: a1 = sp + 0xa0\n 15867: a2 = sp + 0x80\n 15871: a3 = sp + 0x60\n 15874: u64 [sp + 0xa0] = a4\n 15878: ra = 200, jump @210\n      : @235 [@dyn 100] (gas: 12)\n 15884: a4 = u64 [sp + 0x10]\n 15887: a2 = u64 [sp + 0x8]\n 15890: u64 [sp + 0x58] = s1\n 15893: a0 = a4 | s1\n 15896: s1 = u64 [sp + 0x18]\n 15899: a1 = a2 | s1\n 15902: a1 = a1 | a0\n 15905: a1 = a1 >> 0x20\n 15908: a0 = a0 | s1\n 15911: a0 = a0 << 0x20\n 15914: a0 = a0 | a1\n 15917: jump @237 if a0 != 0\n      : @236 (gas: 29)\n 15920: a0 = u64 [sp + 0xc8]\n 15924: a1 = u64 [sp + 0xd8]\n 15928: u64 [sp + 0x50] = a1\n 15931: t1 = u64 [sp + 0xc0]\n 15935: a1 = u64 [sp + 0xd0]\n 15939: t2 = a0 ^ a4\n 15942: a5 = a0 <u a4\n 15945: ra = t1 <u a2\n 15948: a5 = ra if t2 == 0\n 15951: a3 = a1 - s1\n 15954: t2 = a3 - a5\n 15957: t0 = a3 <u a5\n 15960: a3 = a1 <u s1\n 15963: a1 = u64 [sp + 0x58]\n 15966: a5 = u64 [sp + 0x50]\n 15969: a5 = a5 - a1\n 15972: a5 = a5 - a3\n 15975: a5 = a5 - t0\n 15978: a0 = a0 - a4\n 15981: a0 = a0 - ra\n 15984: s1 = t1 - a2\n 15987: a0 = a0 | a5\n 15990: a1 = s1 | t2\n 15993: a1 = a1 | a0\n 15996: a0 = a0 | t2\n 15999: a1 = a1 >> 0x20\n 16002: a0 = a0 << 0x20\n 16005: a0 = a0 | a1\n 16008: jump @240 if a0 == 0\n      : @237 (gas: 1)\n 16011: trap\n      : @238 (gas: 3)\n 16012: a0 = 0\n 16014: a1 = 0\n 16016: ra = 202, jump @0\n      : @239 [@dyn 101] (gas: 5)\n 16022: i32 a1 = a0 + 0\n 16024: a0 = 0x1\n 16027: a2 = 0\n 16029: ecalli 14 // 'seal_return'\n 16031: fallthrough\n      : @240 (gas: 4)\n 16032: i32 a0 = a2 + 0\n 16034: i32 s1 = s1 + 0\n 16036: a1 = s1\n 16038: ra = 204, jump @0\n      : @241 [@dyn 102] (gas: 6)\n 16044: i32 a1 = a0 + 0\n 16046: a0 = 0\n 16048: a2 = s1\n 16050: ra = 0xce\n 16054: ecalli 14 // 'seal_return'\n 16056: fallthrough\n      : @242 [@dyn 103] (gas: 7)\n 16057: sp = sp + 0xffffffffffffffa0\n 16060: u64 [sp + 0x58] = ra\n 16063: u64 [sp + 0x50] = s0\n 16066: s0 = sp + 0x60\n 16069: sp = sp & 0xffffffffffffffe0\n 16072: a0 = i32 [0x20084]\n 16077: jump @247 if a0 <=u 35\n      : @243 (gas: 13)\n 16082: i32 a0 = sp + 0x20\n 16085: a1 = 0x4\n 16088: ecalli 3 // 'call_data_load'\n 16090: a1 = u64 [sp + 0x20]\n 16093: a0 = u64 [sp + 0x28]\n 16096: a2 = u64 [sp + 0x30]\n 16099: a3 = u64 [sp + 0x38]\n 16102: u64 [sp + 0x18] = a3\n 16105: u64 [sp + 0x10] = a2\n 16108: u64 [sp + 0x8] = a0\n 16111: a0 = sp\n 16113: u64 [sp] = a1\n 16115: ra = 208, jump @690\n      : @244 [@dyn 104] (gas: 3)\n 16122: a0 = 0x40\n 16125: a1 = 0x20\n 16128: ra = 210, jump @0\n      : @245 [@dyn 105] (gas: 100)\n 16134: a1 = u8 [a0 + 0x11]\n 16137: a2 = u8 [a0 + 0x10]\n 16140: a3 = u8 [a0 + 0x12]\n 16143: a4 = u8 [a0 + 0x13]\n 16146: a1 = a1 << 0x8\n 16149: a1 = a1 | a2\n 16152: a3 = a3 << 0x10\n 16155: a4 = a4 << 0x18\n 16158: a3 = a3 | a4\n 16161: a1 = a1 | a3\n 16164: a2 = u8 [a0 + 0x15]\n 16167: a3 = u8 [a0 + 0x14]\n 16170: a4 = u8 [a0 + 0x16]\n 16173: a5 = u8 [a0 + 0x17]\n 16176: a2 = a2 << 0x8\n 16179: a2 = a2 | a3\n 16182: a4 = a4 << 0x10\n 16185: a5 = a5 << 0x18\n 16188: a4 = a4 | a5\n 16191: a2 = a2 | a4\n 16194: a2 = a2 << 0x20\n 16197: t0 = a2 | a1\n 16200: a2 = u8 [a0 + 0x1]\n 16203: a3 = u8 [a0]\n 16205: a4 = u8 [a0 + 0x2]\n 16208: a5 = u8 [a0 + 0x3]\n 16211: a2 = a2 << 0x8\n 16214: a2 = a2 | a3\n 16217: a4 = a4 << 0x10\n 16220: a5 = a5 << 0x18\n 16223: a4 = a4 | a5\n 16226: a2 = a2 | a4\n 16229: a3 = u8 [a0 + 0x5]\n 16232: a4 = u8 [a0 + 0x4]\n 16235: a5 = u8 [a0 + 0x6]\n 16238: a1 = u8 [a0 + 0x7]\n 16241: a3 = a3 << 0x8\n 16244: a3 = a3 | a4\n 16247: a5 = a5 << 0x10\n 16250: a1 = a1 << 0x18\n 16253: a1 = a1 | a5\n 16256: a1 = a1 | a3\n 16259: a1 = a1 << 0x20\n 16262: t1 = a1 | a2\n 16265: a1 = u8 [a0 + 0x19]\n 16268: a3 = u8 [a0 + 0x18]\n 16271: a4 = u8 [a0 + 0x1a]\n 16274: a5 = u8 [a0 + 0x1b]\n 16277: a1 = a1 << 0x8\n 16280: a1 = a1 | a3\n 16283: a4 = a4 << 0x10\n 16286: a5 = a5 << 0x18\n 16289: a4 = a4 | a5\n 16292: a1 = a1 | a4\n 16295: a3 = u8 [a0 + 0x1d]\n 16298: a4 = u8 [a0 + 0x1c]\n 16301: a5 = u8 [a0 + 0x1e]\n 16304: a2 = u8 [a0 + 0x1f]\n 16307: a3 = a3 << 0x8\n 16310: a3 = a3 | a4\n 16313: a5 = a5 << 0x10\n 16316: a2 = a2 << 0x18\n 16319: a2 = a2 | a5\n 16322: a2 = a2 | a3\n 16325: a2 = a2 << 0x20\n 16328: a3 = a2 | a1\n 16331: a1 = u8 [a0 + 0x9]\n 16334: a2 = u8 [a0 + 0x8]\n 16337: a4 = u8 [a0 + 0xa]\n 16340: a5 = u8 [a0 + 0xb]\n 16343: a1 = a1 << 0x8\n 16346: a1 = a1 | a2\n 16349: a4 = a4 << 0x10\n 16352: a5 = a5 << 0x18\n 16355: a4 = a4 | a5\n 16358: a1 = a1 | a4\n 16361: a2 = u8 [a0 + 0xd]\n 16364: a4 = u8 [a0 + 0xc]\n 16367: a5 = u8 [a0 + 0xe]\n 16370: a0 = u8 [a0 + 0xf]\n 16373: a2 = a2 << 0x8\n 16376: a2 = a2 | a4\n 16379: a5 = a5 << 0x10\n 16382: a0 = a0 << 0x18\n 16385: a0 = a0 | a5\n 16388: a0 = a0 | a2\n 16391: a0 = a0 << 0x20\n 16394: a0 = a0 | a1\n 16397: a1 = reverse a0\n 16399: a0 = reverse a3\n 16401: a2 = reverse t1\n 16403: a3 = reverse t0\n 16405: a2 = a2 | a3\n 16408: a3 = a0 | a1\n 16411: a3 = a3 | a2\n 16414: a3 = a3 >> 0x20\n 16417: a1 = a1 | a2\n 16420: a1 = a1 << 0x20\n 16423: a1 = a1 | a3\n 16426: jump @249 if a1 == 0\n      : @246 (gas: 1)\n 16429: trap\n      : @247 (gas: 3)\n 16430: a0 = 0\n 16432: a1 = 0\n 16434: ra = 212, jump @0\n      : @248 [@dyn 106] (gas: 7)\n 16440: i32 a1 = a0 + 0\n 16442: a0 = 0x1\n 16445: a2 = 0\n 16447: ecalli 14 // 'seal_return'\n 16449: i32 a0 = a0 + 0\n 16451: ra = 0xd6\n 16455: jump @0\n      : @249 (gas: 2)\n 16458: i32 a0 = a0 + 0\n 16460: ra = 214, jump @0\n      : @250 [@dyn 107] (gas: 6)\n 16466: i32 a1 = a0 + 0\n 16468: a0 = 0\n 16470: a2 = 0\n 16472: ra = 0xd8\n 16476: ecalli 14 // 'seal_return'\n 16478: fallthrough\n      : @251 [@dyn 108] (gas: 13)\n 16479: a2 = u64 [a1 + 0x10]\n 16482: a3 = u64 [a1 + 0x18]\n 16485: a4 = u64 [a1 + 0x8]\n 16488: a1 = u64 [a1]\n 16490: a3 = a3 | a4\n 16493: a1 = a1 | a2\n 16496: a1 = a1 | a3\n 16499: a1 = a1 >u 0\n 16501: u64 [a0 + 24] = 0\n 16504: u64 [a0 + 16] = 0\n 16507: u64 [a0 + 8] = 0\n 16510: u64 [a0] = a1\n 16512: ret\n      : @252 (gas: 48)\n 16514: sp = sp + 0xffffffffffffff60\n 16518: u64 [sp + 0x98] = ra\n 16522: u64 [sp + 0x90] = s0\n 16526: u64 [sp + 0x88] = s1\n 16530: s0 = sp + 0xa0\n 16534: sp = sp & 0xffffffffffffffe0\n 16537: t0 = u64 [a1 + 0x10]\n 16540: a5 = u64 [a1 + 0x8]\n 16543: a3 = u64 [a2 + 0x8]\n 16546: t2 = u64 [a1]\n 16548: a4 = u64 [a2]\n 16550: u64 [sp + 0x40] = a4\n 16553: ra = u64 [a2 + 0x10]\n 16556: t1 = a3 ^ a5\n 16559: s1 = a3 <u a5\n 16562: a4 = a4 <u t2\n 16565: u64 [sp + 0x38] = a4\n 16568: s1 = a4 if t1 == 0\n 16571: t1 = u64 [a1 + 0x18]\n 16574: a1 = u64 [a2 + 0x18]\n 16577: u64 [sp + 0x30] = a1\n 16580: a2 = ra - t0\n 16583: a1 = a2 - s1\n 16586: u64 [sp + 0x48] = a1\n 16589: a1 = a2 <u s1\n 16592: u64 [sp + 0x58] = t0\n 16595: a4 = ra <u t0\n 16598: u64 [sp + 0x50] = t1\n 16601: a2 = u64 [sp + 0x30]\n 16604: a2 = a2 - t1\n 16607: a2 = a2 - a4\n 16610: a2 = a2 - a1\n 16613: a1 = a3 - a5\n 16616: a3 = u64 [sp + 0x38]\n 16619: a1 = a1 - a3\n 16622: a3 = u64 [sp + 0x40]\n 16625: a3 = a3 - t2\n 16628: a4 = a1 >u 0\n 16630: a3 = a3 <u 0x60\n 16633: a3 = a3 ^ 0x1\n 16636: a3 = a4 if a1 != 0\n 16639: s1 = a2 >s 0\n 16641: a1 = u64 [sp + 0x48]\n 16644: a4 = a1 >u 0\n 16646: a4 = s1 if a2 != 0\n 16649: a1 = a1 | a2\n 16652: a3 = a4 if a1 != 0\n 16655: jump @262 if a3 == 0\n      : @253 (gas: 12)\n 16659: s1 = a0\n 16661: a2 = u64 [sp + 0x58]\n 16664: a0 = t2 | a2\n 16667: u64 [sp + 0x48] = a5\n 16670: a1 = u64 [sp + 0x50]\n 16673: a1 = a1 | a5\n 16676: a0 = a0 | a1\n 16679: a0 = a0 >> 0x20\n 16682: a1 = a1 | a2\n 16685: a1 = a1 << 0x20\n 16688: a0 = a0 | a1\n 16691: jump @261 if a0 != 0\n      : @254 (gas: 6)\n 16695: i32 a1 = t2 + 0\n 16697: i32 a0 = sp + 0x60\n 16700: u64 [sp + 0x38] = a1\n 16703: u64 [sp + 0x40] = t2\n 16706: ecalli 3 // 'call_data_load'\n 16708: fallthrough\n      : @255 (gas: 13)\n 16709: a0 = u64 [sp + 0x58]\n 16712: a1 = u64 [sp + 0x50]\n 16715: a2 = a0 | a1\n 16718: a0 = 0x100000000\n 16728: u64 [sp + 0x50] = a0\n 16731: a0 = 0xffffffe0\n 16741: a1 = u64 [sp + 0x40]\n 16744: a0 = a1 <u a0\n 16747: a1 = u64 [sp + 0x48]\n 16750: a0 = 0 if a1 != 0\n 16752: u64 [sp + 0x58] = a2\n 16755: a0 = 0 if a2 != 0\n 16757: jump @261 if a0 == 0\n      : @256 (gas: 13)\n 16761: a0 = u64 [sp + 0x78]\n 16764: u64 [sp + 0x30] = a0\n 16767: a0 = u64 [sp + 0x70]\n 16770: u64 [sp + 0x28] = a0\n 16773: a0 = u64 [sp + 0x68]\n 16776: u64 [sp + 0x18] = a0\n 16779: a0 = u64 [sp + 0x60]\n 16782: u64 [sp + 0x20] = a0\n 16785: a0 = u64 [sp + 0x38]\n 16788: i32 a1 = a0 + 0x20\n 16791: i32 a0 = sp + 0x60\n 16794: ecalli 3 // 'call_data_load'\n 16796: fallthrough\n      : @257 (gas: 9)\n 16797: a0 = u64 [sp + 0x50]\n 16800: a0 = a0 + 0xffffffffffffffc0\n 16803: a1 = u64 [sp + 0x40]\n 16806: a0 = a1 <u a0\n 16809: a1 = u64 [sp + 0x48]\n 16812: a0 = 0 if a1 != 0\n 16814: a1 = u64 [sp + 0x58]\n 16817: a0 = 0 if a1 != 0\n 16819: jump @261 if a0 == 0\n      : @258 (gas: 13)\n 16823: a0 = u64 [sp + 0x78]\n 16826: u64 [sp + 0x58] = a0\n 16829: a0 = u64 [sp + 0x70]\n 16832: u64 [sp + 0x50] = a0\n 16835: a0 = u64 [sp + 0x68]\n 16838: u64 [sp + 0x40] = a0\n 16841: a0 = u64 [sp + 0x60]\n 16844: u64 [sp + 0x48] = a0\n 16847: a0 = u64 [sp + 0x38]\n 16850: i32 a1 = a0 + 0x40\n 16853: i32 a0 = sp + 0x60\n 16856: ecalli 3 // 'call_data_load'\n 16858: fallthrough\n      : @259 (gas: 9)\n 16859: a0 = u64 [sp + 0x78]\n 16862: a1 = u64 [sp + 0x70]\n 16865: a2 = u64 [sp + 0x60]\n 16868: a3 = u64 [sp + 0x68]\n 16871: a4 = a1 | a0\n 16874: a5 = a2 <u 0x2\n 16877: a5 = 0 if a3 != 0\n 16879: a5 = 0 if a4 != 0\n 16881: jump @262 if a5 == 0\n      : @260 (gas: 26)\n 16884: u64 [s1 + 0x48] = a3\n 16887: u64 [s1 + 0x40] = a2\n 16890: a2 = u64 [sp + 0x40]\n 16893: u64 [s1 + 0x28] = a2\n 16896: a2 = u64 [sp + 0x48]\n 16899: u64 [s1 + 0x20] = a2\n 16902: a2 = u64 [sp + 0x18]\n 16905: u64 [s1 + 0x8] = a2\n 16908: a2 = u64 [sp + 0x20]\n 16911: u64 [s1] = a2\n 16913: u64 [s1 + 0x50] = a1\n 16916: a1 = u64 [sp + 0x50]\n 16919: u64 [s1 + 0x30] = a1\n 16922: a1 = u64 [sp + 0x28]\n 16925: u64 [s1 + 0x10] = a1\n 16928: u64 [s1 + 0x58] = a0\n 16931: a0 = u64 [sp + 0x58]\n 16934: u64 [s1 + 0x38] = a0\n 16937: a0 = u64 [sp + 0x30]\n 16940: u64 [s1 + 0x18] = a0\n 16943: sp = s0 + 0xffffffffffffff60\n 16947: ra = u64 [sp + 0x98]\n 16951: s0 = u64 [sp + 0x90]\n 16955: s1 = u64 [sp + 0x88]\n 16959: sp = sp + 0xa0\n 16963: ret\n      : @261 (gas: 1)\n 16965: trap\n      : @262 (gas: 3)\n 16966: a0 = 0\n 16968: a1 = 0\n 16970: ra = 218, jump @0\n      : @263 [@dyn 109] (gas: 6)\n 16976: i32 a1 = a0 + 0\n 16978: a0 = 0x1\n 16981: a2 = 0\n 16983: ra = 0xdc\n 16987: ecalli 14 // 'seal_return'\n 16989: fallthrough\n      : @264 [@dyn 110] (gas: 19)\n 16990: sp = sp + 0xfffffffffffffed0\n 16994: u64 [sp + 0x128] = ra\n 16998: u64 [sp + 0x120] = s0\n 17002: u64 [sp + 0x118] = s1\n 17006: s0 = sp + 0x130\n 17010: sp = sp & 0xfffffffffffffff0\n 17013: a0 = u32 [0x20084]\n 17018: u64 [sp + 136] = 0\n 17022: u64 [sp + 128] = 0\n 17026: u64 [sp + 120] = 0\n 17029: u64 [sp + 0x70] = a0\n 17032: u64 [sp + 168] = 0\n 17036: u64 [sp + 160] = 0\n 17040: u64 [sp + 144] = 0x4\n 17045: a0 = sp + 0xb0\n 17049: a1 = sp + 0x90\n 17053: a2 = sp + 0x70\n 17056: u64 [sp + 152] = 0\n 17060: ra = 222, jump @252\n      : @265 [@dyn 111] (gas: 30)\n 17066: a0 = u64 [sp + 0xb0]\n 17070: u64 [sp + 0x8] = a0\n 17073: t1 = u64 [sp + 0xb8]\n 17077: t2 = u64 [sp + 0xc0]\n 17081: ra = u64 [sp + 0xc8]\n 17085: t0 = u64 [sp + 0xd0]\n 17089: a5 = u64 [sp + 0xd8]\n 17093: a4 = u64 [sp + 0xe0]\n 17097: a3 = u64 [sp + 0xe8]\n 17101: a1 = u64 [sp + 0xf0]\n 17105: s1 = u64 [sp + 0xf8]\n 17109: a2 = u64 [sp + 0x100]\n 17113: a0 = u64 [sp + 0x108]\n 17117: u64 [sp + 0x28] = a0\n 17120: u64 [sp + 0x20] = a2\n 17123: u64 [sp + 0x18] = s1\n 17126: u64 [sp + 0x10] = a1\n 17129: u64 [sp + 0x48] = a3\n 17132: u64 [sp + 0x40] = a4\n 17135: u64 [sp + 0x38] = a5\n 17138: u64 [sp + 0x30] = t0\n 17141: u64 [sp + 0x68] = ra\n 17144: u64 [sp + 0x60] = t2\n 17147: u64 [sp + 0x58] = t1\n 17150: a0 = sp + 0x50\n 17153: a1 = sp + 0x30\n 17156: a2 = sp + 0x10\n 17159: a3 = u64 [sp + 0x8]\n 17162: u64 [sp + 0x50] = a3\n 17165: ra = 224, jump @774\n      : @266 [@dyn 112] (gas: 3)\n 17172: a0 = 0x40\n 17175: a1 = 0x20\n 17178: ra = 226, jump @0\n      : @267 [@dyn 113] (gas: 100)\n 17184: a1 = u8 [a0 + 0x11]\n 17187: a2 = u8 [a0 + 0x10]\n 17190: a3 = u8 [a0 + 0x12]\n 17193: a4 = u8 [a0 + 0x13]\n 17196: a1 = a1 << 0x8\n 17199: a1 = a1 | a2\n 17202: a3 = a3 << 0x10\n 17205: a4 = a4 << 0x18\n 17208: a3 = a3 | a4\n 17211: a1 = a1 | a3\n 17214: a2 = u8 [a0 + 0x15]\n 17217: a3 = u8 [a0 + 0x14]\n 17220: a4 = u8 [a0 + 0x16]\n 17223: a5 = u8 [a0 + 0x17]\n 17226: a2 = a2 << 0x8\n 17229: a2 = a2 | a3\n 17232: a4 = a4 << 0x10\n 17235: a5 = a5 << 0x18\n 17238: a4 = a4 | a5\n 17241: a2 = a2 | a4\n 17244: a2 = a2 << 0x20\n 17247: t0 = a2 | a1\n 17250: a2 = u8 [a0 + 0x1]\n 17253: a3 = u8 [a0]\n 17255: a4 = u8 [a0 + 0x2]\n 17258: a5 = u8 [a0 + 0x3]\n 17261: a2 = a2 << 0x8\n 17264: a2 = a2 | a3\n 17267: a4 = a4 << 0x10\n 17270: a5 = a5 << 0x18\n 17273: a4 = a4 | a5\n 17276: a2 = a2 | a4\n 17279: a3 = u8 [a0 + 0x5]\n 17282: a4 = u8 [a0 + 0x4]\n 17285: a5 = u8 [a0 + 0x6]\n 17288: s1 = u8 [a0 + 0x7]\n 17291: a3 = a3 << 0x8\n 17294: a3 = a3 | a4\n 17297: a5 = a5 << 0x10\n 17300: s1 = s1 << 0x18\n 17303: a5 = a5 | s1\n 17306: a3 = a3 | a5\n 17309: a3 = a3 << 0x20\n 17312: a2 = a2 | a3\n 17315: a3 = u8 [a0 + 0x19]\n 17318: a4 = u8 [a0 + 0x18]\n 17321: a5 = u8 [a0 + 0x1a]\n 17324: s1 = u8 [a0 + 0x1b]\n 17327: a3 = a3 << 0x8\n 17330: a3 = a3 | a4\n 17333: a5 = a5 << 0x10\n 17336: s1 = s1 << 0x18\n 17339: a5 = a5 | s1\n 17342: a3 = a3 | a5\n 17345: a4 = u8 [a0 + 0x1d]\n 17348: a5 = u8 [a0 + 0x1c]\n 17351: s1 = u8 [a0 + 0x1e]\n 17354: a1 = u8 [a0 + 0x1f]\n 17357: a4 = a4 << 0x8\n 17360: a4 = a4 | a5\n 17363: s1 = s1 << 0x10\n 17366: a1 = a1 << 0x18\n 17369: a1 = a1 | s1\n 17372: a1 = a1 | a4\n 17375: a1 = a1 << 0x20\n 17378: a3 = a3 | a1\n 17381: a1 = u8 [a0 + 0x9]\n 17384: a4 = u8 [a0 + 0x8]\n 17387: a5 = u8 [a0 + 0xa]\n 17390: s1 = u8 [a0 + 0xb]\n 17393: a1 = a1 << 0x8\n 17396: a1 = a1 | a4\n 17399: a5 = a5 << 0x10\n 17402: s1 = s1 << 0x18\n 17405: a5 = a5 | s1\n 17408: a1 = a1 | a5\n 17411: a4 = u8 [a0 + 0xd]\n 17414: a5 = u8 [a0 + 0xc]\n 17417: s1 = u8 [a0 + 0xe]\n 17420: a0 = u8 [a0 + 0xf]\n 17423: a4 = a4 << 0x8\n 17426: a4 = a4 | a5\n 17429: s1 = s1 << 0x10\n 17432: a0 = a0 << 0x18\n 17435: a0 = a0 | s1\n 17438: a0 = a0 | a4\n 17441: a0 = a0 << 0x20\n 17444: a0 = a0 | a1\n 17447: a1 = reverse a0\n 17449: a0 = reverse a3\n 17451: a2 = reverse a2\n 17453: a3 = reverse t0\n 17455: a2 = a2 | a3\n 17458: a3 = a0 | a1\n 17461: a3 = a3 | a2\n 17464: a3 = a3 >> 0x20\n 17467: a1 = a1 | a2\n 17470: a1 = a1 << 0x20\n 17473: a1 = a1 | a3\n 17476: jump @269 if a1 == 0\n      : @268 (gas: 1)\n 17479: trap\n      : @269 (gas: 2)\n 17480: i32 a0 = a0 + 0\n 17482: ra = 228, jump @0\n      : @270 [@dyn 114] (gas: 6)\n 17488: i32 a1 = a0 + 0\n 17490: a0 = 0\n 17492: a2 = 0\n 17494: ra = 0xe6\n 17498: ecalli 14 // 'seal_return'\n 17500: fallthrough\n      : @271 [@dyn 115] (gas: 9)\n 17501: a2 = u64 [a1 + 0x18]\n 17504: a3 = u64 [a1 + 0x10]\n 17507: a4 = u64 [a1 + 0x8]\n 17510: a1 = u64 [a1]\n 17512: u64 [a0 + 0x18] = a2\n 17515: u64 [a0 + 0x10] = a3\n 17518: u64 [a0 + 0x8] = a4\n 17521: u64 [a0] = a1\n 17523: ret\n      : @272 (gas: 17)\n 17525: sp = sp + 0xffffffffffffffa0\n 17528: u64 [sp + 0x58] = ra\n 17531: u64 [sp + 0x50] = s0\n 17534: u64 [sp + 0x48] = s1\n 17537: a3 = u64 [a1 + 0x18]\n 17540: a4 = u64 [a1 + 0x10]\n 17543: a5 = u64 [a1 + 0x8]\n 17546: s1 = u64 [a1]\n 17548: a1 = a5 | a3\n 17551: a2 = s1 | a4\n 17554: a2 = a2 | a1\n 17557: a2 = a2 >> 0x20\n 17560: a1 = a1 | a4\n 17563: a1 = a1 << 0x20\n 17566: a1 = a1 | a2\n 17569: u64 [sp + 0x28] = a0\n 17572: jump @279 if a1 != 0\n      : @273 (gas: 19)\n 17576: a0 = s1 + 0x20\n 17579: u64 [sp + 0x30] = a0\n 17582: a0 = a0 <u s1\n 17585: a1 = a5 + a0\n 17588: u64 [sp + 0x40] = a1\n 17591: u64 [sp + 0x8] = a5\n 17594: s0 = a1 <u a5\n 17597: s0 = a0 if a0 == 0\n 17600: s0 = s0 + a4\n 17603: u64 [sp + 0x10] = a4\n 17606: a0 = s0 <u a4\n 17609: u64 [sp + 0x18] = a3\n 17612: a0 = a0 + a3\n 17615: u64 [sp + 0x38] = a0\n 17618: u64 [sp] = s1\n 17620: i32 a0 = s1 + 0\n 17622: a1 = 0x20\n 17625: s1 = 0x20\n 17628: ra = 232, jump @0\n      : @274 [@dyn 116] (gas: 45)\n 17634: u8 [a0 + 0x1f] = s1\n 17637: a1 = u64 [sp + 0x30]\n 17640: s1 = a1\n 17642: a1 = a1 | s0\n 17645: a2 = u64 [sp + 0x40]\n 17648: a4 = u64 [sp + 0x38]\n 17651: a2 = a2 | a4\n 17654: a1 = a1 | a2\n 17657: a1 = a1 >> 0x20\n 17660: u64 [sp + 0x20] = s0\n 17663: a2 = a2 | s0\n 17666: a2 = a2 << 0x20\n 17669: a1 = a1 | a2\n 17672: u8 [a0 + 30] = 0\n 17675: u8 [a0 + 29] = 0\n 17678: u8 [a0 + 28] = 0\n 17681: u8 [a0 + 27] = 0\n 17684: u8 [a0 + 26] = 0\n 17687: u8 [a0 + 25] = 0\n 17690: u8 [a0 + 24] = 0\n 17693: u8 [a0 + 23] = 0\n 17696: u8 [a0 + 22] = 0\n 17699: u8 [a0 + 21] = 0\n 17702: u8 [a0 + 20] = 0\n 17705: u8 [a0 + 19] = 0\n 17708: u8 [a0 + 18] = 0\n 17711: u8 [a0 + 17] = 0\n 17714: u8 [a0 + 16] = 0\n 17717: u8 [a0 + 15] = 0\n 17720: u8 [a0 + 14] = 0\n 17723: u8 [a0 + 13] = 0\n 17726: u8 [a0 + 12] = 0\n 17729: u8 [a0 + 11] = 0\n 17732: u8 [a0 + 10] = 0\n 17735: u8 [a0 + 9] = 0\n 17738: u8 [a0 + 8] = 0\n 17741: u8 [a0 + 7] = 0\n 17744: u8 [a0 + 6] = 0\n 17747: u8 [a0 + 5] = 0\n 17750: u8 [a0 + 4] = 0\n 17753: u8 [a0 + 3] = 0\n 17756: u8 [a0 + 2] = 0\n 17759: u8 [a0 + 1] = 0\n 17762: u8 [a0 + 0] = 0\n 17764: jump @279 if a1 != 0\n      : @275 (gas: 4)\n 17768: i32 s0 = s1 + 0\n 17770: a1 = 0x20\n 17773: a0 = s0\n 17775: ra = 234, jump @0\n      : @276 [@dyn 117] (gas: 41)\n 17781: u8 [a0 + 31] = 0x18\n 17785: u8 [a0 + 30] = 0\n 17788: u8 [a0 + 29] = 0\n 17791: u8 [a0 + 28] = 0\n 17794: u8 [a0 + 27] = 0\n 17797: u8 [a0 + 26] = 0\n 17800: u8 [a0 + 25] = 0\n 17803: u8 [a0 + 24] = 0\n 17806: u8 [a0 + 23] = 0\n 17809: u8 [a0 + 22] = 0\n 17812: u8 [a0 + 21] = 0\n 17815: u8 [a0 + 20] = 0\n 17818: u8 [a0 + 19] = 0\n 17821: u8 [a0 + 18] = 0\n 17824: u8 [a0 + 17] = 0\n 17827: u8 [a0 + 16] = 0\n 17830: u8 [a0 + 15] = 0\n 17833: u8 [a0 + 14] = 0\n 17836: u8 [a0 + 13] = 0\n 17839: u8 [a0 + 12] = 0\n 17842: u8 [a0 + 11] = 0\n 17845: u8 [a0 + 10] = 0\n 17848: u8 [a0 + 9] = 0\n 17851: u8 [a0 + 8] = 0\n 17854: u8 [a0 + 7] = 0\n 17857: u8 [a0 + 6] = 0\n 17860: u8 [a0 + 5] = 0\n 17863: u8 [a0 + 4] = 0\n 17866: u8 [a0 + 3] = 0\n 17869: u8 [a0 + 2] = 0\n 17872: u8 [a0 + 1] = 0\n 17875: a1 = u64 [sp + 0x20]\n 17878: a2 = u64 [sp + 0x38]\n 17881: a1 = a1 | a2\n 17884: a2 = 0xffffffe0\n 17894: a2 = s1 <u a2\n 17897: a3 = u64 [sp + 0x40]\n 17900: a2 = 0 if a3 != 0\n 17902: a2 = 0 if a1 != 0\n 17904: u8 [a0 + 0] = 0\n 17906: jump @279 if a2 == 0\n      : @277 (gas: 3)\n 17910: i32 a0 = s0 + 0x20\n 17913: a1 = 0x20\n 17916: ra = 236, jump @0\n      : @278 [@dyn 118] (gas: 55)\n 17922: u8 [a0 + 31] = 0\n 17925: u8 [a0 + 30] = 0\n 17928: u8 [a0 + 29] = 0\n 17931: u8 [a0 + 28] = 0\n 17934: u8 [a0 + 27] = 0\n 17937: u8 [a0 + 26] = 0\n 17940: u8 [a0 + 25] = 0\n 17943: u8 [a0 + 24] = 0\n 17946: u8 [a0 + 23] = 0x65\n 17950: u8 [a0 + 22] = 0x63\n 17954: u8 [a0 + 21] = 0x69\n 17958: u8 [a0 + 20] = 0x76\n 17962: u8 [a0 + 19] = 0x72\n 17966: u8 [a0 + 18] = 0x65\n 17970: u8 [a0 + 17] = 0x73\n 17974: u8 [a0 + 16] = 0x20\n 17978: u8 [a0 + 15] = 0x6e\n 17982: u8 [a0 + 14] = 0x77\n 17986: u8 [a0 + 13] = 0x6f\n 17990: u8 [a0 + 12] = 0x6e\n 17994: a5 = 0x6b\n 17997: u8 [a0 + 0xb] = a5\n 18000: u8 [a0 + 10] = 0x6e\n 18004: u8 [a0 + 9] = 0x75\n 18008: u8 [a0 + 8] = 0x20\n 18012: u8 [a0 + 7] = 0x3a\n 18016: u8 [a0 + 6] = 0x79\n 18020: u8 [a0 + 5] = 0x72\n 18024: u8 [a0 + 4] = 0x6f\n 18028: u8 [a0 + 3] = 0x74\n 18032: u8 [a0 + 2] = 0x63\n 18036: u8 [a0 + 1] = 0x61\n 18040: u8 [a0 + 0] = 0x46\n 18043: a1 = u64 [sp]\n 18045: a0 = a1 + 0x60\n 18048: a1 = a0 <u a1\n 18051: a3 = u64 [sp + 0x8]\n 18054: a2 = a3 + a1\n 18057: a3 = a2 <u a3\n 18060: a3 = a1 if a1 == 0\n 18063: a1 = u64 [sp + 0x10]\n 18066: a3 = a3 + a1\n 18069: a1 = a3 <u a1\n 18072: a4 = u64 [sp + 0x18]\n 18075: a1 = a1 + a4\n 18078: a4 = u64 [sp + 0x28]\n 18081: u64 [a4] = a0\n 18083: u64 [a4 + 0x8] = a2\n 18086: u64 [a4 + 0x10] = a3\n 18089: u64 [a4 + 0x18] = a1\n 18092: ra = u64 [sp + 0x58]\n 18095: s0 = u64 [sp + 0x50]\n 18098: s1 = u64 [sp + 0x48]\n 18101: sp = sp + 0x60\n 18104: ret\n      : @279 (gas: 1)\n 18106: trap\n      : @280 [@dyn 119] (gas: 6)\n 18107: i32 a1 = a0 + 0\n 18109: a0 = 0x1\n 18112: a2 = 0\n 18114: ra = 0xf0\n 18118: ecalli 14 // 'seal_return'\n 18120: fallthrough\n      : @281 [@dyn 120] (gas: 18)\n 18121: a2 = u64 [a1]\n 18123: t0 = u64 [a1 + 0x18]\n 18126: a4 = u64 [a1 + 0x8]\n 18129: a1 = u64 [a1 + 0x10]\n 18132: a5 = a2 + 0x1f\n 18135: a2 = a5 <u a2\n 18138: a3 = a4 + a2\n 18141: a4 = a3 <u a4\n 18144: a4 = a2 if a2 == 0\n 18147: a4 = a4 + a1\n 18150: a1 = a4 <u a1\n 18153: a1 = a1 + t0\n 18156: a5 = a5 & 0xffffffffffffffe0\n 18159: u64 [a0] = a5\n 18161: u64 [a0 + 0x8] = a3\n 18164: u64 [a0 + 0x10] = a4\n 18167: u64 [a0 + 0x18] = a1\n 18170: ret\n      : @282 (gas: 9)\n 18172: sp = sp + 0xffffffffffffffc0\n 18175: u64 [sp + 0x38] = ra\n 18178: u64 [sp + 0x30] = s0\n 18181: u64 [sp + 0x28] = s1\n 18184: s0 = sp + 0x40\n 18187: sp = sp & 0xffffffffffffffe0\n 18190: a0 = 0x40\n 18193: a1 = 0x20\n 18196: ra = 242, jump @0\n      : @283 [@dyn 121] (gas: 97)\n 18202: a1 = u8 [a0 + 0x11]\n 18205: a2 = u8 [a0 + 0x10]\n 18208: a3 = u8 [a0 + 0x12]\n 18211: a4 = u8 [a0 + 0x13]\n 18214: a1 = a1 << 0x8\n 18217: a1 = a1 | a2\n 18220: a3 = a3 << 0x10\n 18223: a4 = a4 << 0x18\n 18226: a3 = a3 | a4\n 18229: a1 = a1 | a3\n 18232: a2 = u8 [a0 + 0x15]\n 18235: a3 = u8 [a0 + 0x14]\n 18238: a4 = u8 [a0 + 0x16]\n 18241: a5 = u8 [a0 + 0x17]\n 18244: a2 = a2 << 0x8\n 18247: a2 = a2 | a3\n 18250: a4 = a4 << 0x10\n 18253: a5 = a5 << 0x18\n 18256: a4 = a4 | a5\n 18259: a2 = a2 | a4\n 18262: a2 = a2 << 0x20\n 18265: t0 = a2 | a1\n 18268: a2 = u8 [a0 + 0x1]\n 18271: a3 = u8 [a0]\n 18273: a4 = u8 [a0 + 0x2]\n 18276: a5 = u8 [a0 + 0x3]\n 18279: a2 = a2 << 0x8\n 18282: a2 = a2 | a3\n 18285: a4 = a4 << 0x10\n 18288: a5 = a5 << 0x18\n 18291: a4 = a4 | a5\n 18294: a2 = a2 | a4\n 18297: a3 = u8 [a0 + 0x5]\n 18300: a4 = u8 [a0 + 0x4]\n 18303: a5 = u8 [a0 + 0x6]\n 18306: s1 = u8 [a0 + 0x7]\n 18309: a3 = a3 << 0x8\n 18312: a3 = a3 | a4\n 18315: a5 = a5 << 0x10\n 18318: s1 = s1 << 0x18\n 18321: a5 = a5 | s1\n 18324: a3 = a3 | a5\n 18327: a3 = a3 << 0x20\n 18330: a2 = a2 | a3\n 18333: a3 = u8 [a0 + 0x19]\n 18336: a4 = u8 [a0 + 0x18]\n 18339: a5 = u8 [a0 + 0x1a]\n 18342: s1 = u8 [a0 + 0x1b]\n 18345: a3 = a3 << 0x8\n 18348: a3 = a3 | a4\n 18351: a5 = a5 << 0x10\n 18354: s1 = s1 << 0x18\n 18357: a5 = a5 | s1\n 18360: a3 = a3 | a5\n 18363: a4 = u8 [a0 + 0x1d]\n 18366: a5 = u8 [a0 + 0x1c]\n 18369: s1 = u8 [a0 + 0x1e]\n 18372: a1 = u8 [a0 + 0x1f]\n 18375: a4 = a4 << 0x8\n 18378: a4 = a4 | a5\n 18381: s1 = s1 << 0x10\n 18384: a1 = a1 << 0x18\n 18387: a1 = a1 | s1\n 18390: a1 = a1 | a4\n 18393: a1 = a1 << 0x20\n 18396: a3 = a3 | a1\n 18399: a1 = u8 [a0 + 0x9]\n 18402: a4 = u8 [a0 + 0x8]\n 18405: a5 = u8 [a0 + 0xa]\n 18408: s1 = u8 [a0 + 0xb]\n 18411: a1 = a1 << 0x8\n 18414: a1 = a1 | a4\n 18417: a5 = a5 << 0x10\n 18420: s1 = s1 << 0x18\n 18423: a5 = a5 | s1\n 18426: a1 = a1 | a5\n 18429: a4 = u8 [a0 + 0xd]\n 18432: a5 = u8 [a0 + 0xc]\n 18435: s1 = u8 [a0 + 0xe]\n 18438: a0 = u8 [a0 + 0xf]\n 18441: a4 = a4 << 0x8\n 18444: a4 = a4 | a5\n 18447: s1 = s1 << 0x10\n 18450: a0 = a0 << 0x18\n 18453: a0 = a0 | s1\n 18456: a0 = a0 | a4\n 18459: a0 = a0 << 0x20\n 18462: a0 = a0 | a1\n 18465: s1 = reverse a0\n 18467: a0 = reverse a3\n 18469: u64 [sp + 0x8] = a0\n 18472: a0 = reverse a2\n 18474: u64 [sp + 0x18] = a0\n 18477: a0 = reverse t0\n 18479: u64 [sp + 0x10] = a0\n 18482: ecalli 13 // 'return_data_size'\n 18484: fallthrough\n      : @284 (gas: 11)\n 18485: a3 = u64 [sp + 0x8]\n 18488: a1 = u64 [sp + 0x18]\n 18491: a2 = u64 [sp + 0x10]\n 18494: a1 = a1 | a2\n 18497: a2 = a3 | s1\n 18500: a2 = a2 | a1\n 18503: a2 = a2 >> 0x20\n 18506: a1 = a1 | s1\n 18509: a1 = a1 << 0x20\n 18512: a1 = a1 | a2\n 18515: jump @291 if a1 != 0\n      : @285 (gas: 3)\n 18518: s1 = a0\n 18520: a0 = a0 >> 0x20\n 18523: jump @291 if a0 != 0\n      : @286 (gas: 5)\n 18526: i32 a0 = a3 + 0\n 18528: i32 a1 = s1 + 0\n 18530: u64 [sp + 0x18] = a1\n 18533: u64 [sp + 0x10] = a0\n 18536: ra = 244, jump @0\n      : @287 [@dyn 122] (gas: 6)\n 18542: u32 [sp + 0x20] = s1\n 18545: i32 a0 = a0 + 0\n 18547: i32 a1 = sp + 0x20\n 18550: a2 = 0\n 18552: ecalli 12 // 'return_data_copy'\n 18554: fallthrough\n      : @288 (gas: 3)\n 18555: a0 = i32 [sp + 0x20]\n 18558: a1 = u64 [sp + 0x18]\n 18561: jump @291 if a0 <u a1\n      : @289 (gas: 2)\n 18564: ecalli 13 // 'return_data_size'\n 18566: fallthrough\n      : @290 (gas: 2)\n 18567: a1 = a0 >> 0x20\n 18570: jump @292 if a1 == 0\n      : @291 (gas: 1)\n 18573: trap\n      : @292 (gas: 4)\n 18574: i32 s1 = a0 + 0\n 18576: a0 = u64 [sp + 0x10]\n 18579: a1 = s1\n 18581: ra = 246, jump @0\n      : @293 [@dyn 123] (gas: 6)\n 18587: i32 a1 = a0 + 0\n 18589: a0 = 0x1\n 18592: a2 = s1\n 18594: ra = 0xf8\n 18598: ecalli 14 // 'seal_return'\n 18600: fallthrough\n      : @294 [@dyn 124] (gas: 12)\n 18601: a1 = u64 [a0 + 0x10]\n 18604: a2 = u64 [a0 + 0x18]\n 18607: a3 = u64 [a0 + 0x8]\n 18610: a0 = u64 [a0]\n 18612: a2 = a2 | a3\n 18615: a3 = a0 | a1\n 18618: a3 = a3 | a2\n 18621: a3 = a3 >> 0x20\n 18624: a1 = a1 | a2\n 18627: a1 = a1 << 0x20\n 18630: a1 = a1 | a3\n 18633: jump @297 if a1 != 0\n      : @295 (gas: 7)\n 18637: sp = sp + 0xfffffffffffffff0\n 18640: u64 [sp + 0x8] = ra\n 18643: u64 [sp] = s0\n 18645: i32 a0 = a0 + 0\n 18647: a1 = 0x20\n 18650: s0 = 0x20\n 18653: ra = 250, jump @0\n      : @296 [@dyn 125] (gas: 42)\n 18659: u8 [a0 + 31] = 0\n 18662: u8 [a0 + 30] = 0x72\n 18666: u8 [a0 + 29] = 0x65\n 18670: u8 [a0 + 28] = 0x64\n 18674: u8 [a0 + 27] = 0x69\n 18678: u8 [a0 + 26] = 0x76\n 18682: a2 = 0x6f\n 18685: u8 [a0 + 0x19] = a2\n 18688: u8 [a0 + 24] = 0x72\n 18692: u8 [a0 + 23] = 0x70\n 18696: u8 [a0 + 0x16] = s0\n 18699: t0 = 0x74\n 18702: u8 [a0 + 0x15] = t0\n 18705: u8 [a0 + 0x14] = a2\n 18708: u8 [a0 + 19] = 0x6e\n 18712: u8 [a0 + 0x12] = s0\n 18715: u8 [a0 + 17] = 0x73\n 18719: u8 [a0 + 16] = 0x69\n 18723: u8 [a0 + 0xf] = s0\n 18726: u8 [a0 + 14] = 0x72\n 18730: u8 [a0 + 13] = 0x65\n 18734: u8 [a0 + 12] = 0x6c\n 18738: u8 [a0 + 11] = 0x6c\n 18742: a3 = 0x61\n 18745: u8 [a0 + 0xa] = a3\n 18748: a4 = 0x63\n 18751: u8 [a0 + 0x9] = a4\n 18754: u8 [a0 + 0x8] = s0\n 18757: u8 [a0 + 7] = 0x3a\n 18761: a5 = 0x79\n 18764: u8 [a0 + 0x6] = a5\n 18767: u8 [a0 + 5] = 0x72\n 18771: u8 [a0 + 0x4] = a2\n 18774: u8 [a0 + 0x3] = t0\n 18777: u8 [a0 + 0x2] = a4\n 18780: u8 [a0 + 0x1] = a3\n 18783: a1 = 0x46\n 18786: u8 [a0] = a1\n 18788: ra = u64 [sp + 0x8]\n 18791: s0 = u64 [sp]\n 18793: sp = sp + 0x10\n 18796: ret\n      : @297 (gas: 1)\n 18798: trap\n      : @298 (gas: 17)\n 18799: sp = sp + 0xffffffffffffffa0\n 18802: u64 [sp + 0x58] = ra\n 18805: u64 [sp + 0x50] = s0\n 18808: u64 [sp + 0x48] = s1\n 18811: a3 = u64 [a1 + 0x18]\n 18814: a4 = u64 [a1 + 0x10]\n 18817: a5 = u64 [a1 + 0x8]\n 18820: s1 = u64 [a1]\n 18822: a1 = a5 | a3\n 18825: a2 = s1 | a4\n 18828: a2 = a2 | a1\n 18831: a2 = a2 >> 0x20\n 18834: a1 = a1 | a4\n 18837: a1 = a1 << 0x20\n 18840: a1 = a1 | a2\n 18843: u64 [sp + 0x28] = a0\n 18846: jump @305 if a1 != 0\n      : @299 (gas: 19)\n 18850: a0 = s1 + 0x20\n 18853: u64 [sp + 0x30] = a0\n 18856: a0 = a0 <u s1\n 18859: a1 = a5 + a0\n 18862: u64 [sp + 0x40] = a1\n 18865: u64 [sp + 0x8] = a5\n 18868: s0 = a1 <u a5\n 18871: s0 = a0 if a0 == 0\n 18874: s0 = s0 + a4\n 18877: u64 [sp + 0x10] = a4\n 18880: a0 = s0 <u a4\n 18883: u64 [sp + 0x18] = a3\n 18886: a0 = a0 + a3\n 18889: u64 [sp + 0x38] = a0\n 18892: u64 [sp] = s1\n 18894: i32 a0 = s1 + 0\n 18896: a1 = 0x20\n 18899: s1 = 0x20\n 18902: ra = 252, jump @0\n      : @300 [@dyn 126] (gas: 45)\n 18908: u8 [a0 + 0x1f] = s1\n 18911: a1 = u64 [sp + 0x30]\n 18914: s1 = a1\n 18916: a1 = a1 | s0\n 18919: a2 = u64 [sp + 0x40]\n 18922: a4 = u64 [sp + 0x38]\n 18925: a2 = a2 | a4\n 18928: a1 = a1 | a2\n 18931: a1 = a1 >> 0x20\n 18934: u64 [sp + 0x20] = s0\n 18937: a2 = a2 | s0\n 18940: a2 = a2 << 0x20\n 18943: a1 = a1 | a2\n 18946: u8 [a0 + 30] = 0\n 18949: u8 [a0 + 29] = 0\n 18952: u8 [a0 + 28] = 0\n 18955: u8 [a0 + 27] = 0\n 18958: u8 [a0 + 26] = 0\n 18961: u8 [a0 + 25] = 0\n 18964: u8 [a0 + 24] = 0\n 18967: u8 [a0 + 23] = 0\n 18970: u8 [a0 + 22] = 0\n 18973: u8 [a0 + 21] = 0\n 18976: u8 [a0 + 20] = 0\n 18979: u8 [a0 + 19] = 0\n 18982: u8 [a0 + 18] = 0\n 18985: u8 [a0 + 17] = 0\n 18988: u8 [a0 + 16] = 0\n 18991: u8 [a0 + 15] = 0\n 18994: u8 [a0 + 14] = 0\n 18997: u8 [a0 + 13] = 0\n 19000: u8 [a0 + 12] = 0\n 19003: u8 [a0 + 11] = 0\n 19006: u8 [a0 + 10] = 0\n 19009: u8 [a0 + 9] = 0\n 19012: u8 [a0 + 8] = 0\n 19015: u8 [a0 + 7] = 0\n 19018: u8 [a0 + 6] = 0\n 19021: u8 [a0 + 5] = 0\n 19024: u8 [a0 + 4] = 0\n 19027: u8 [a0 + 3] = 0\n 19030: u8 [a0 + 2] = 0\n 19033: u8 [a0 + 1] = 0\n 19036: u8 [a0 + 0] = 0\n 19038: jump @305 if a1 != 0\n      : @301 (gas: 4)\n 19042: i32 s0 = s1 + 0\n 19044: a1 = 0x20\n 19047: a0 = s0\n 19049: ra = 254, jump @0\n      : @302 [@dyn 127] (gas: 41)\n 19055: u8 [a0 + 31] = 0x1f\n 19059: u8 [a0 + 30] = 0\n 19062: u8 [a0 + 29] = 0\n 19065: u8 [a0 + 28] = 0\n 19068: u8 [a0 + 27] = 0\n 19071: u8 [a0 + 26] = 0\n 19074: u8 [a0 + 25] = 0\n 19077: u8 [a0 + 24] = 0\n 19080: u8 [a0 + 23] = 0\n 19083: u8 [a0 + 22] = 0\n 19086: u8 [a0 + 21] = 0\n 19089: u8 [a0 + 20] = 0\n 19092: u8 [a0 + 19] = 0\n 19095: u8 [a0 + 18] = 0\n 19098: u8 [a0 + 17] = 0\n 19101: u8 [a0 + 16] = 0\n 19104: u8 [a0 + 15] = 0\n 19107: u8 [a0 + 14] = 0\n 19110: u8 [a0 + 13] = 0\n 19113: u8 [a0 + 12] = 0\n 19116: u8 [a0 + 11] = 0\n 19119: u8 [a0 + 10] = 0\n 19122: u8 [a0 + 9] = 0\n 19125: u8 [a0 + 8] = 0\n 19128: u8 [a0 + 7] = 0\n 19131: u8 [a0 + 6] = 0\n 19134: u8 [a0 + 5] = 0\n 19137: u8 [a0 + 4] = 0\n 19140: u8 [a0 + 3] = 0\n 19143: u8 [a0 + 2] = 0\n 19146: u8 [a0 + 1] = 0\n 19149: a1 = u64 [sp + 0x20]\n 19152: a2 = u64 [sp + 0x38]\n 19155: a1 = a1 | a2\n 19158: a2 = 0xffffffe0\n 19168: a2 = s1 <u a2\n 19171: a3 = u64 [sp + 0x40]\n 19174: a2 = 0 if a3 != 0\n 19176: a2 = 0 if a1 != 0\n 19178: u8 [a0 + 0] = 0\n 19180: jump @305 if a2 == 0\n      : @303 (gas: 3)\n 19184: i32 a0 = s0 + 0x20\n 19187: a1 = 0x20\n 19190: ra = 256, jump @0\n      : @304 [@dyn 128] (gas: 54)\n 19196: u8 [a0 + 28] = 0x64\n 19200: u8 [a0 + 26] = 0x76\n 19204: u8 [a0 + 23] = 0x70\n 19208: u8 [a0 + 19] = 0x6e\n 19212: u8 [a0 + 17] = 0x73\n 19216: u8 [a0 + 27] = 0x69\n 19220: u8 [a0 + 16] = 0x69\n 19224: u8 [a0 + 29] = 0x65\n 19228: u8 [a0 + 13] = 0x65\n 19232: u8 [a0 + 12] = 0x6c\n 19236: u8 [a0 + 11] = 0x6c\n 19240: u8 [a0 + 31] = 0\n 19243: u8 [a0 + 22] = 0x20\n 19247: u8 [a0 + 18] = 0x20\n 19251: u8 [a0 + 15] = 0x20\n 19255: u8 [a0 + 8] = 0x20\n 19259: u8 [a0 + 7] = 0x3a\n 19263: u8 [a0 + 6] = 0x79\n 19267: u8 [a0 + 30] = 0x72\n 19271: u8 [a0 + 24] = 0x72\n 19275: u8 [a0 + 14] = 0x72\n 19279: u8 [a0 + 5] = 0x72\n 19283: u8 [a0 + 25] = 0x6f\n 19287: u8 [a0 + 20] = 0x6f\n 19291: u8 [a0 + 4] = 0x6f\n 19295: u8 [a0 + 21] = 0x74\n 19299: u8 [a0 + 3] = 0x74\n 19303: u8 [a0 + 9] = 0x63\n 19307: u8 [a0 + 2] = 0x63\n 19311: u8 [a0 + 10] = 0x61\n 19315: u8 [a0 + 1] = 0x61\n 19319: u8 [a0 + 0] = 0x46\n 19322: a1 = u64 [sp]\n 19324: a0 = a1 + 0x60\n 19327: a1 = a0 <u a1\n 19330: a3 = u64 [sp + 0x8]\n 19333: a2 = a3 + a1\n 19336: a3 = a2 <u a3\n 19339: a3 = a1 if a1 == 0\n 19342: a1 = u64 [sp + 0x10]\n 19345: a3 = a3 + a1\n 19348: a1 = a3 <u a1\n 19351: a4 = u64 [sp + 0x18]\n 19354: a1 = a1 + a4\n 19357: a4 = u64 [sp + 0x28]\n 19360: u64 [a4] = a0\n 19362: u64 [a4 + 0x8] = a2\n 19365: u64 [a4 + 0x10] = a3\n 19368: u64 [a4 + 0x18] = a1\n 19371: ra = u64 [sp + 0x58]\n 19374: s0 = u64 [sp + 0x50]\n 19377: s1 = u64 [sp + 0x48]\n 19380: sp = sp + 0x60\n 19383: ret\n      : @305 (gas: 1)\n 19385: trap\n      : @306 (gas: 17)\n 19386: sp = sp + 0xffffffffffffffa0\n 19389: u64 [sp + 0x58] = ra\n 19392: u64 [sp + 0x50] = s0\n 19395: u64 [sp + 0x48] = s1\n 19398: a3 = u64 [a1 + 0x18]\n 19401: a4 = u64 [a1 + 0x10]\n 19404: a5 = u64 [a1 + 0x8]\n 19407: s1 = u64 [a1]\n 19409: a1 = a5 | a3\n 19412: a2 = s1 | a4\n 19415: a2 = a2 | a1\n 19418: a2 = a2 >> 0x20\n 19421: a1 = a1 | a4\n 19424: a1 = a1 << 0x20\n 19427: a1 = a1 | a2\n 19430: u64 [sp + 0x20] = a0\n 19433: jump @315 if a1 != 0\n      : @307 (gas: 19)\n 19437: a0 = s1 + 0x20\n 19440: u64 [sp + 0x38] = a0\n 19443: a0 = a0 <u s1\n 19446: a1 = a5 + a0\n 19449: u64 [sp + 0x40] = a1\n 19452: u64 [sp + 0x8] = a5\n 19455: s0 = a1 <u a5\n 19458: s0 = a0 if a0 == 0\n 19461: s0 = s0 + a4\n 19464: u64 [sp + 0x10] = a4\n 19467: a0 = s0 <u a4\n 19470: u64 [sp + 0x18] = a3\n 19473: a0 = a0 + a3\n 19476: u64 [sp + 0x30] = a0\n 19479: u64 [sp] = s1\n 19481: i32 a0 = s1 + 0\n 19483: a1 = 0x20\n 19486: s1 = 0x20\n 19489: ra = 258, jump @0\n      : @308 [@dyn 129] (gas: 43)\n 19495: u8 [a0 + 0x1f] = s1\n 19498: a1 = u64 [sp + 0x38]\n 19501: a1 = a1 | s0\n 19504: a2 = u64 [sp + 0x40]\n 19507: a3 = u64 [sp + 0x30]\n 19510: a2 = a2 | a3\n 19513: a1 = a1 | a2\n 19516: a1 = a1 >> 0x20\n 19519: a2 = a2 | s0\n 19522: a2 = a2 << 0x20\n 19525: a1 = a1 | a2\n 19528: u8 [a0 + 30] = 0\n 19531: u8 [a0 + 29] = 0\n 19534: u8 [a0 + 28] = 0\n 19537: u8 [a0 + 27] = 0\n 19540: u8 [a0 + 26] = 0\n 19543: u8 [a0 + 25] = 0\n 19546: u8 [a0 + 24] = 0\n 19549: u8 [a0 + 23] = 0\n 19552: u8 [a0 + 22] = 0\n 19555: u8 [a0 + 21] = 0\n 19558: u8 [a0 + 20] = 0\n 19561: u8 [a0 + 19] = 0\n 19564: u8 [a0 + 18] = 0\n 19567: u8 [a0 + 17] = 0\n 19570: u8 [a0 + 16] = 0\n 19573: u8 [a0 + 15] = 0\n 19576: u8 [a0 + 14] = 0\n 19579: u8 [a0 + 13] = 0\n 19582: u8 [a0 + 12] = 0\n 19585: u8 [a0 + 11] = 0\n 19588: u8 [a0 + 10] = 0\n 19591: u8 [a0 + 9] = 0\n 19594: u8 [a0 + 8] = 0\n 19597: u8 [a0 + 7] = 0\n 19600: u8 [a0 + 6] = 0\n 19603: u8 [a0 + 5] = 0\n 19606: u8 [a0 + 4] = 0\n 19609: u8 [a0 + 3] = 0\n 19612: u8 [a0 + 2] = 0\n 19615: u8 [a0 + 1] = 0\n 19618: u8 [a0 + 0] = 0\n 19620: jump @315 if a1 != 0\n      : @309 (gas: 6)\n 19624: s1 = s0\n 19626: s0 = u64 [sp + 0x38]\n 19629: i32 a0 = s0 + 0\n 19631: a1 = 0x20\n 19634: u64 [sp + 0x28] = a0\n 19637: ra = 260, jump @0\n      : @310 [@dyn 130] (gas: 42)\n 19643: u8 [a0 + 31] = 0x23\n 19647: u8 [a0 + 30] = 0\n 19650: u8 [a0 + 29] = 0\n 19653: u8 [a0 + 28] = 0\n 19656: u8 [a0 + 27] = 0\n 19659: u8 [a0 + 26] = 0\n 19662: u8 [a0 + 25] = 0\n 19665: u8 [a0 + 24] = 0\n 19668: u8 [a0 + 23] = 0\n 19671: u8 [a0 + 22] = 0\n 19674: u8 [a0 + 21] = 0\n 19677: u8 [a0 + 20] = 0\n 19680: u8 [a0 + 19] = 0\n 19683: u8 [a0 + 18] = 0\n 19686: u8 [a0 + 17] = 0\n 19689: u8 [a0 + 16] = 0\n 19692: u8 [a0 + 15] = 0\n 19695: u8 [a0 + 14] = 0\n 19698: u8 [a0 + 13] = 0\n 19701: u8 [a0 + 12] = 0\n 19704: u8 [a0 + 11] = 0\n 19707: u8 [a0 + 10] = 0\n 19710: u8 [a0 + 9] = 0\n 19713: u8 [a0 + 8] = 0\n 19716: u8 [a0 + 7] = 0\n 19719: u8 [a0 + 6] = 0\n 19722: u8 [a0 + 5] = 0\n 19725: u8 [a0 + 4] = 0\n 19728: u8 [a0 + 3] = 0\n 19731: u8 [a0 + 2] = 0\n 19734: u8 [a0 + 1] = 0\n 19737: a1 = u64 [sp + 0x30]\n 19740: a2 = s1 | a1\n 19743: s1 = 0x100000000\n 19753: a1 = 0xffffffe0\n 19763: a1 = s0 <u a1\n 19766: s0 = a2\n 19768: a2 = u64 [sp + 0x40]\n 19771: a1 = 0 if a2 != 0\n 19773: a1 = 0 if s0 != 0\n 19775: u8 [a0 + 0] = 0\n 19777: jump @315 if a1 == 0\n      : @311 (gas: 4)\n 19781: a0 = u64 [sp + 0x28]\n 19784: i32 a0 = a0 + 0x20\n 19787: a1 = 0x20\n 19790: ra = 262, jump @0\n      : @312 [@dyn 131] (gas: 41)\n 19796: u8 [a0 + 30] = 0x6c\n 19800: u8 [a0 + 28] = 0x62\n 19804: u8 [a0 + 25] = 0x6b\n 19808: u8 [a0 + 14] = 0x66\n 19812: u8 [a0 + 13] = 0x66\n 19816: u8 [a0 + 12] = 0x75\n 19820: u8 [a0 + 22] = 0x73\n 19824: u8 [a0 + 11] = 0x73\n 19828: u8 [a0 + 17] = 0x69\n 19832: u8 [a0 + 15] = 0x69\n 19836: u8 [a0 + 9] = 0x69\n 19840: u8 [a0 + 27] = 0x20\n 19844: u8 [a0 + 21] = 0x20\n 19848: u8 [a0 + 8] = 0x20\n 19852: u8 [a0 + 7] = 0x3a\n 19856: u8 [a0 + 6] = 0x79\n 19860: u8 [a0 + 5] = 0x72\n 19864: u8 [a0 + 4] = 0x6f\n 19868: u8 [a0 + 23] = 0x74\n 19872: u8 [a0 + 20] = 0x74\n 19876: u8 [a0 + 3] = 0x74\n 19880: u8 [a0 + 31] = 0x61\n 19884: u8 [a0 + 29] = 0x61\n 19888: u8 [a0 + 24] = 0x61\n 19892: u8 [a0 + 1] = 0x61\n 19896: u8 [a0 + 0] = 0x46\n 19899: a1 = s1 + 0xffffffffffffffc0\n 19902: a2 = u64 [sp + 0x38]\n 19905: a1 = a2 <u a1\n 19908: u8 [a0 + 26] = 0x65\n 19912: a2 = u64 [sp + 0x40]\n 19915: a1 = 0 if a2 != 0\n 19917: s1 = 0x6e\n 19920: u8 [a0 + 0x13] = s1\n 19923: u8 [a0 + 18] = 0x65\n 19927: a1 = 0 if s0 != 0\n 19929: s0 = 0x63\n 19932: u8 [a0 + 0x10] = s0\n 19935: u8 [a0 + 0xa] = s1\n 19938: u8 [a0 + 0x2] = s0\n 19941: jump @315 if a1 == 0\n      : @313 (gas: 4)\n 19945: a0 = u64 [sp + 0x28]\n 19948: i32 a0 = a0 + 0x40\n 19951: a1 = 0x20\n 19954: ra = 264, jump @0\n      : @314 [@dyn 132] (gas: 54)\n 19960: u8 [a0 + 31] = 0\n 19963: u8 [a0 + 30] = 0\n 19966: u8 [a0 + 29] = 0\n 19969: u8 [a0 + 28] = 0\n 19972: u8 [a0 + 27] = 0\n 19975: u8 [a0 + 26] = 0\n 19978: u8 [a0 + 25] = 0\n 19981: u8 [a0 + 24] = 0\n 19984: u8 [a0 + 23] = 0\n 19987: u8 [a0 + 22] = 0\n 19990: u8 [a0 + 21] = 0\n 19993: u8 [a0 + 20] = 0\n 19996: u8 [a0 + 19] = 0\n 19999: u8 [a0 + 18] = 0\n 20002: u8 [a0 + 17] = 0\n 20005: u8 [a0 + 16] = 0\n 20008: u8 [a0 + 15] = 0\n 20011: u8 [a0 + 14] = 0\n 20014: u8 [a0 + 13] = 0\n 20017: u8 [a0 + 12] = 0\n 20020: u8 [a0 + 11] = 0\n 20023: u8 [a0 + 10] = 0\n 20026: u8 [a0 + 9] = 0\n 20029: u8 [a0 + 8] = 0\n 20032: u8 [a0 + 7] = 0\n 20035: u8 [a0 + 6] = 0\n 20038: u8 [a0 + 5] = 0\n 20041: u8 [a0 + 4] = 0\n 20044: u8 [a0 + 3] = 0\n 20047: u8 [a0 + 2] = 0x65\n 20051: u8 [a0 + 0x1] = s0\n 20054: u8 [a0] = s1\n 20056: a1 = u64 [sp]\n 20058: a0 = a1 + 0x80\n 20062: a1 = a0 <u a1\n 20065: a3 = u64 [sp + 0x8]\n 20068: a2 = a3 + a1\n 20071: a3 = a2 <u a3\n 20074: a3 = a1 if a1 == 0\n 20077: a1 = u64 [sp + 0x10]\n 20080: a3 = a3 + a1\n 20083: a1 = a3 <u a1\n 20086: a4 = u64 [sp + 0x18]\n 20089: a1 = a1 + a4\n 20092: a4 = u64 [sp + 0x20]\n 20095: u64 [a4] = a0\n 20097: u64 [a4 + 0x8] = a2\n 20100: u64 [a4 + 0x10] = a3\n 20103: u64 [a4 + 0x18] = a1\n 20106: ra = u64 [sp + 0x58]\n 20109: s0 = u64 [sp + 0x50]\n 20112: s1 = u64 [sp + 0x48]\n 20115: sp = sp + 0x60\n 20118: ret\n      : @315 (gas: 1)\n 20120: trap\n      : @316 [@dyn 133] (gas: 102)\n 20121: a1 = reverse s1\n 20123: a2 = u64 [sp + 0x148]\n 20127: a2 = reverse a2\n 20129: a3 = u64 [sp + 0x150]\n 20133: a3 = reverse a3\n 20135: a4 = u64 [sp + 0x158]\n 20139: a4 = reverse a4\n 20141: u8 [a0 + 0x18] = a4\n 20144: u8 [a0 + 0x10] = a3\n 20147: u8 [a0 + 0x8] = a2\n 20150: u8 [a0] = a1\n 20152: a5 = a4 >> 0x38\n 20155: u64 [sp + 0x138] = a5\n 20159: u8 [a0 + 0x1f] = a5\n 20162: a5 = a4 >> 0x30\n 20165: u64 [sp + 0x130] = a5\n 20169: u8 [a0 + 0x1e] = a5\n 20172: a5 = a4 >> 0x28\n 20175: u64 [sp + 0x128] = a5\n 20179: u8 [a0 + 0x1d] = a5\n 20182: a5 = a4 >> 0x20\n 20185: u64 [sp + 0x120] = a5\n 20189: u8 [a0 + 0x1c] = a5\n 20192: a5 = a4 >> 0x18\n 20195: u64 [sp + 0x118] = a5\n 20199: u8 [a0 + 0x1b] = a5\n 20202: a5 = a4 >> 0x10\n 20205: u64 [sp + 0x110] = a5\n 20209: u8 [a0 + 0x1a] = a5\n 20212: u64 [sp + 0x140] = a4\n 20216: a4 = a4 >> 0x8\n 20219: u64 [sp + 0x108] = a4\n 20223: u8 [a0 + 0x19] = a4\n 20226: a4 = a3 >> 0x38\n 20229: u64 [sp + 0x100] = a4\n 20233: u8 [a0 + 0x17] = a4\n 20236: a4 = a3 >> 0x30\n 20239: u64 [sp + 0xf8] = a4\n 20243: u8 [a0 + 0x16] = a4\n 20246: a4 = a3 >> 0x28\n 20249: u64 [sp + 0xf0] = a4\n 20253: u8 [a0 + 0x15] = a4\n 20256: a4 = a3 >> 0x20\n 20259: u64 [sp + 0xe8] = a4\n 20263: u8 [a0 + 0x14] = a4\n 20266: a4 = a3 >> 0x18\n 20269: u64 [sp + 0xe0] = a4\n 20273: u8 [a0 + 0x13] = a4\n 20276: a4 = a3 >> 0x10\n 20279: u64 [sp + 0xd8] = a4\n 20283: u8 [a0 + 0x12] = a4\n 20286: u64 [sp + 0x148] = a3\n 20290: a3 = a3 >> 0x8\n 20293: u64 [sp + 0xd0] = a3\n 20297: u8 [a0 + 0x11] = a3\n 20300: a3 = a2 >> 0x38\n 20303: u64 [sp + 0xc8] = a3\n 20307: u8 [a0 + 0xf] = a3\n 20310: a3 = a2 >> 0x30\n 20313: u64 [sp + 0xc0] = a3\n 20317: u8 [a0 + 0xe] = a3\n 20320: a3 = a2 >> 0x28\n 20323: u64 [sp + 0xb8] = a3\n 20327: u8 [a0 + 0xd] = a3\n 20330: a3 = a2 >> 0x20\n 20333: u64 [sp + 0xb0] = a3\n 20337: u8 [a0 + 0xc] = a3\n 20340: a3 = a2 >> 0x18\n 20343: u64 [sp + 0xa8] = a3\n 20347: u8 [a0 + 0xb] = a3\n 20350: a3 = a2 >> 0x10\n 20353: u64 [sp + 0xa0] = a3\n 20357: u8 [a0 + 0xa] = a3\n 20360: u64 [sp + 0x150] = a2\n 20364: a2 = a2 >> 0x8\n 20367: u64 [sp + 0x98] = a2\n 20371: u8 [a0 + 0x9] = a2\n 20374: a2 = a1 >> 0x38\n 20377: u64 [sp + 0x90] = a2\n 20381: u8 [a0 + 0x7] = a2\n 20384: a2 = a1 >> 0x30\n 20387: u64 [sp + 0x88] = a2\n 20391: u8 [a0 + 0x6] = a2\n 20394: a2 = a1 >> 0x28\n 20397: u64 [sp + 0x80] = a2\n 20401: u8 [a0 + 0x5] = a2\n 20404: a2 = a1 >> 0x20\n 20407: u64 [sp + 0x78] = a2\n 20410: u8 [a0 + 0x4] = a2\n 20413: a2 = a1 >> 0x18\n 20416: u64 [sp + 0x70] = a2\n 20419: u8 [a0 + 0x3] = a2\n 20422: a2 = a1 >> 0x10\n 20425: u64 [sp + 0x68] = a2\n 20428: u8 [a0 + 0x2] = a2\n 20431: u64 [sp + 0x158] = a1\n 20435: a1 = a1 >> 0x8\n 20438: u64 [sp + 0x60] = a1\n 20441: u8 [a0 + 0x1] = a1\n 20444: a0 = 0x20\n 20447: a1 = 0x20\n 20450: ra = 268, jump @0\n      : @317 [@dyn 134] (gas: 35)\n 20456: u8 [a0 + 31] = 0\n 20459: u8 [a0 + 30] = 0\n 20462: u8 [a0 + 29] = 0\n 20465: u8 [a0 + 28] = 0\n 20468: u8 [a0 + 27] = 0\n 20471: u8 [a0 + 26] = 0\n 20474: u8 [a0 + 25] = 0\n 20477: u8 [a0 + 24] = 0\n 20480: u8 [a0 + 23] = 0\n 20483: u8 [a0 + 22] = 0\n 20486: u8 [a0 + 21] = 0\n 20489: u8 [a0 + 20] = 0\n 20492: u8 [a0 + 19] = 0\n 20495: u8 [a0 + 18] = 0\n 20498: u8 [a0 + 17] = 0\n 20501: u8 [a0 + 16] = 0\n 20504: u8 [a0 + 15] = 0\n 20507: u8 [a0 + 14] = 0\n 20510: u8 [a0 + 13] = 0\n 20513: u8 [a0 + 12] = 0\n 20516: u8 [a0 + 11] = 0\n 20519: u8 [a0 + 10] = 0\n 20522: u8 [a0 + 9] = 0\n 20525: u8 [a0 + 8] = 0\n 20528: u8 [a0 + 7] = 0\n 20531: u8 [a0 + 6] = 0\n 20534: u8 [a0 + 5] = 0\n 20537: u8 [a0 + 4] = 0\n 20540: u8 [a0 + 3] = 0\n 20543: u8 [a0 + 2] = 0\n 20546: u8 [a0 + 1] = 0\n 20549: u8 [a0 + 0] = 0\n 20551: a1 = 0x40\n 20554: a0 = 0\n 20556: ra = 270, jump @0\n      : @318 [@dyn 135] (gas: 28)\n 20562: i32 a0 = a0 + 0\n 20564: i32 a2 = sp + 0x400\n 20568: a1 = 0x40\n 20571: ecalli 9 // 'hash_keccak_256'\n 20573: a0 = u64 [sp + 0x418]\n 20577: a1 = u64 [sp + 0x410]\n 20581: a2 = u64 [sp + 0x408]\n 20585: a3 = u64 [sp + 0x400]\n 20589: a0 = reverse a0\n 20591: a1 = reverse a1\n 20593: a2 = reverse a2\n 20595: a3 = reverse a3\n 20597: u64 [sp + 0x3d8] = a3\n 20601: u64 [sp + 0x3d0] = a2\n 20605: u64 [sp + 0x3c8] = a1\n 20609: u64 [sp + 0x3c0] = a0\n 20613: u64 [sp + 1048] = 0\n 20617: u64 [sp + 1040] = 0\n 20621: u64 [sp + 1032] = 0\n 20625: u64 [sp + 1024] = 0\n 20629: u32 [sp + 992] = 0x20\n 20634: i32 a1 = sp + 0x3c0\n 20638: i32 a3 = sp + 0x400\n 20642: i32 a4 = sp + 0x3e0\n 20646: a2 = 0xffffffffffffffff\n 20649: a0 = 0\n 20651: ecalli 8 // 'get_storage'\n 20653: fallthrough\n      : @319 (gas: 11)\n 20654: a0 = u64 [sp + 0x410]\n 20658: a2 = u64 [sp + 0x408]\n 20662: a1 = u64 [sp + 0x400]\n 20666: u64 [sp + 0x50] = a0\n 20669: a0 = a0 << 0x20\n 20672: a0 = a0 >> 0x20\n 20675: u64 [sp + 0x58] = a1\n 20678: u64 [sp + 0x48] = a2\n 20681: a1 = a1 | a2\n 20684: a0 = a0 | a1\n 20687: jump @321 if a0 != 0\n      : @320 (gas: 1)\n 20690: jump @363\n      : @321 (gas: 11)\n 20693: i32 a0 = sp + 0x300\n 20697: ecalli 5 // 'caller'\n 20699: a0 = u32 [sp + 0x310]\n 20703: u64 [sp + 0x40] = a0\n 20706: a0 = u64 [sp + 0x308]\n 20710: u64 [sp + 0x38] = a0\n 20713: a0 = u64 [sp + 0x300]\n 20717: u64 [sp + 0x30] = a0\n 20720: a0 = 0x40\n 20723: a1 = 0x20\n 20726: ra = 272, jump @0\n      : @322 [@dyn 136] (gas: 103)\n 20732: a1 = u8 [a0 + 0x11]\n 20735: a2 = u8 [a0 + 0x10]\n 20738: a3 = u8 [a0 + 0x12]\n 20741: a4 = u8 [a0 + 0x13]\n 20744: a1 = a1 << 0x8\n 20747: a1 = a1 | a2\n 20750: a3 = a3 << 0x10\n 20753: a4 = a4 << 0x18\n 20756: a3 = a3 | a4\n 20759: a1 = a1 | a3\n 20762: a2 = u8 [a0 + 0x15]\n 20765: a3 = u8 [a0 + 0x14]\n 20768: a4 = u8 [a0 + 0x16]\n 20771: a5 = u8 [a0 + 0x17]\n 20774: a2 = a2 << 0x8\n 20777: a2 = a2 | a3\n 20780: a4 = a4 << 0x10\n 20783: a5 = a5 << 0x18\n 20786: a4 = a4 | a5\n 20789: a2 = a2 | a4\n 20792: a2 = a2 << 0x20\n 20795: t0 = a2 | a1\n 20798: a2 = u8 [a0 + 0x1]\n 20801: a3 = u8 [a0]\n 20803: a4 = u8 [a0 + 0x2]\n 20806: a5 = u8 [a0 + 0x3]\n 20809: a2 = a2 << 0x8\n 20812: a2 = a2 | a3\n 20815: a4 = a4 << 0x10\n 20818: a5 = a5 << 0x18\n 20821: a4 = a4 | a5\n 20824: a2 = a2 | a4\n 20827: a3 = u8 [a0 + 0x5]\n 20830: a4 = u8 [a0 + 0x4]\n 20833: a5 = u8 [a0 + 0x6]\n 20836: s1 = u8 [a0 + 0x7]\n 20839: a3 = a3 << 0x8\n 20842: a3 = a3 | a4\n 20845: a5 = a5 << 0x10\n 20848: s1 = s1 << 0x18\n 20851: a5 = a5 | s1\n 20854: a3 = a3 | a5\n 20857: a3 = a3 << 0x20\n 20860: a2 = a2 | a3\n 20863: a3 = u8 [a0 + 0x19]\n 20866: a4 = u8 [a0 + 0x18]\n 20869: a5 = u8 [a0 + 0x1a]\n 20872: s1 = u8 [a0 + 0x1b]\n 20875: a3 = a3 << 0x8\n 20878: a3 = a3 | a4\n 20881: a5 = a5 << 0x10\n 20884: s1 = s1 << 0x18\n 20887: a5 = a5 | s1\n 20890: a3 = a3 | a5\n 20893: a4 = u8 [a0 + 0x1d]\n 20896: a5 = u8 [a0 + 0x1c]\n 20899: s1 = u8 [a0 + 0x1e]\n 20902: a1 = u8 [a0 + 0x1f]\n 20905: a4 = a4 << 0x8\n 20908: a4 = a4 | a5\n 20911: s1 = s1 << 0x10\n 20914: a1 = a1 << 0x18\n 20917: a1 = a1 | s1\n 20920: a1 = a1 | a4\n 20923: a1 = a1 << 0x20\n 20926: a3 = a3 | a1\n 20929: a1 = u8 [a0 + 0x9]\n 20932: a4 = u8 [a0 + 0x8]\n 20935: a5 = u8 [a0 + 0xa]\n 20938: s1 = u8 [a0 + 0xb]\n 20941: a1 = a1 << 0x8\n 20944: a1 = a1 | a4\n 20947: a5 = a5 << 0x10\n 20950: s1 = s1 << 0x18\n 20953: a5 = a5 | s1\n 20956: a1 = a1 | a5\n 20959: a4 = u8 [a0 + 0xd]\n 20962: a5 = u8 [a0 + 0xc]\n 20965: s1 = u8 [a0 + 0xe]\n 20968: a0 = u8 [a0 + 0xf]\n 20971: a4 = a4 << 0x8\n 20974: a4 = a4 | a5\n 20977: s1 = s1 << 0x10\n 20980: a0 = a0 << 0x18\n 20983: a0 = a0 | s1\n 20986: a0 = a0 | a4\n 20989: a0 = a0 << 0x20\n 20992: a0 = a0 | a1\n 20995: a4 = reverse a0\n 20997: a3 = reverse a3\n 20999: a0 = reverse a2\n 21001: a1 = reverse t0\n 21003: u64 [sp + 0x20] = a0\n 21006: u64 [sp + 0x18] = a1\n 21009: a0 = a0 | a1\n 21012: a1 = a3 | a4\n 21015: a1 = a1 | a0\n 21018: a1 = a1 >> 0x20\n 21021: u64 [sp + 0x28] = a4\n 21024: a0 = a0 | a4\n 21027: a0 = a0 << 0x20\n 21030: a0 = a0 | a1\n 21033: jump @324 if a0 == 0\n      : @323 (gas: 1)\n 21036: jump @380\n      : @324 (gas: 5)\n 21039: u64 [sp + 0x10] = a3\n 21042: i32 s1 = a3 + 0\n 21044: a1 = 0x20\n 21047: a0 = s1\n 21049: ra = 274, jump @0\n      : @325 [@dyn 137] (gas: 56)\n 21055: u8 [a0 + 31] = 0\n 21058: u8 [a0 + 30] = 0\n 21061: u8 [a0 + 29] = 0\n 21064: u8 [a0 + 28] = 0\n 21067: u8 [a0 + 27] = 0\n 21070: u8 [a0 + 26] = 0\n 21073: u8 [a0 + 25] = 0\n 21076: u8 [a0 + 24] = 0\n 21079: u8 [a0 + 23] = 0\n 21082: u8 [a0 + 22] = 0\n 21085: u8 [a0 + 21] = 0\n 21088: u8 [a0 + 20] = 0\n 21091: u8 [a0 + 19] = 0\n 21094: u8 [a0 + 18] = 0\n 21097: u8 [a0 + 17] = 0\n 21100: u8 [a0 + 16] = 0\n 21103: u8 [a0 + 15] = 0\n 21106: u8 [a0 + 14] = 0\n 21109: u8 [a0 + 13] = 0\n 21112: u8 [a0 + 12] = 0\n 21115: u8 [a0 + 11] = 0\n 21118: u8 [a0 + 10] = 0\n 21121: u8 [a0 + 9] = 0\n 21124: u8 [a0 + 8] = 0\n 21127: u8 [a0 + 7] = 0\n 21130: u8 [a0 + 6] = 0\n 21133: u8 [a0 + 5] = 0\n 21136: u8 [a0 + 4] = 0\n 21139: u8 [a0 + 3] = 0x83\n 21144: u8 [a0 + 2] = 0x48\n 21148: u8 [a0 + 1] = 0x5d\n 21152: u8 [a0 + 0] = 0x8\n 21155: ecalli 11 // 'ref_time_left'\n 21157: a0 = u64 [sp + 0x48]\n 21160: a0 = reverse a0\n 21162: a1 = a0 << 0x20\n 21165: a2 = u64 [sp + 0x50]\n 21168: a2 = reverse a2\n 21170: a2 = a2 >> 0x20\n 21173: a1 = a1 | a2\n 21176: a2 = u64 [sp + 0x58]\n 21179: a2 = reverse a2\n 21181: a3 = a2 << 0x20\n 21184: a0 = a0 >> 0x20\n 21187: a0 = a0 | a3\n 21190: a2 = a2 >> 0x20\n 21193: u64 [sp + 0x328] = a0\n 21197: u64 [sp + 0x320] = a1\n 21201: u32 [sp + 0x330] = a2\n 21205: u64 [sp + 856] = 0\n 21209: u64 [sp + 848] = 0\n 21213: u64 [sp + 840] = 0\n 21217: u64 [sp + 832] = 0\n 21221: a1 = 0x4\n 21224: a0 = s1\n 21226: ra = 276, jump @0\n      : @326 [@dyn 138] (gas: 5)\n 21232: u64 [sp + 0x58] = a0\n 21235: a1 = 0x20\n 21238: u64 [sp + 0x50] = s1\n 21241: a0 = s1\n 21243: ra = 278, jump @0\n      : @327 [@dyn 139] (gas: 31)\n 21249: u32 [sp + 864] = 0x20\n 21254: u64 [sp + 920] = 0\n 21258: u64 [sp + 912] = 0\n 21262: u64 [sp + 904] = 0\n 21266: u64 [sp + 896] = 0\n 21270: a1 = sp + 0x320\n 21274: a1 = a1 << 0x20\n 21277: a1 = a1 >> 0x20\n 21280: a2 = 0x1800000000\n 21290: s1 = a1 | a2\n 21293: a1 = sp + 0x340\n 21297: a1 = a1 << 0x20\n 21300: a1 = a1 >> 0x20\n 21303: a2 = sp + 0x380\n 21307: a2 = a2 << 0x20\n 21310: a3 = a2 | a1\n 21313: a1 = u64 [sp + 0x58]\n 21316: a1 = a1 << 0x20\n 21319: a1 = a1 >> 0x20\n 21322: a2 = 0x400000000\n 21332: a4 = a1 | a2\n 21335: a0 = a0 << 0x20\n 21338: a0 = a0 >> 0x20\n 21341: a1 = sp + 0x360\n 21345: a1 = a1 << 0x20\n 21348: a5 = a1 | a0\n 21351: a1 = 0xffffffffffffffff\n 21354: a2 = 0xffffffffffffffff\n 21357: a0 = s1\n 21359: ecalli 1 // 'call'\n 21361: fallthrough\n      : @328 (gas: 1)\n 21362: jump @330 if a0 == 0\n      : @329 (gas: 1)\n 21365: jump @368\n      : @330 (gas: 2)\n 21368: ecalli 13 // 'return_data_size'\n 21370: fallthrough\n      : @331 (gas: 2)\n 21371: a1 = 0x20\n 21374: jump @333 if a0 >=u a1\n      : @332 (gas: 3)\n 21377: ecalli 13 // 'return_data_size'\n 21379: a1 = a0\n 21381: fallthrough\n      : @333 (gas: 28)\n 21382: a5 = 0\n 21384: a3 = u64 [sp + 0x28]\n 21387: a4 = u64 [sp + 0x20]\n 21390: a2 = u64 [sp + 0x10]\n 21393: s1 = u64 [sp + 0x18]\n 21396: a0 = a1 + 0x1f\n 21399: u64 [sp + 0x48] = a1\n 21402: a1 = a0 <u a1\n 21405: u64 [sp + 88] = 0\n 21408: a1 = a1 & 0x1\n 21411: a0 = a0 & 0xffffffffffffffe0\n 21414: a2 = a2 + a0\n 21417: u64 [sp + 0x28] = a2\n 21420: a0 = a2 <u a0\n 21423: s1 = s1 + a1\n 21426: s1 = s1 + a0\n 21429: a2 = s1 ^ a1\n 21432: a1 = s1 <u a1\n 21435: a1 = a0 if a2 == 0\n 21438: a1 = a1 + a3\n 21441: a0 = a1 <u a3\n 21444: a0 = a0 + a4\n 21447: u64 [sp + 0x20] = a1\n 21450: u64 [sp + 0x18] = a0\n 21453: a0 = a0 | a1\n 21456: a1 = s1 <u 0x1\n 21459: a1 = 0 if a0 != 0\n 21461: jump @335 if a1 != 0\n      : @334 (gas: 1)\n 21464: jump @383\n      : @335 (gas: 3)\n 21467: a0 = 0x40\n 21470: a1 = 0x20\n 21473: ra = 280, jump @0\n      : @336 [@dyn 140] (gas: 79)\n 21479: a1 = u64 [sp + 0x18]\n 21482: a1 = reverse a1\n 21484: a2 = u64 [sp + 0x20]\n 21487: a2 = reverse a2\n 21489: a3 = reverse s1\n 21491: a4 = u64 [sp + 0x28]\n 21494: a4 = reverse a4\n 21496: u8 [a0 + 0x18] = a4\n 21499: a5 = a4 >> 0x38\n 21502: u8 [a0 + 0x1f] = a5\n 21505: a5 = a4 >> 0x30\n 21508: u8 [a0 + 0x1e] = a5\n 21511: a5 = a4 >> 0x28\n 21514: u8 [a0 + 0x1d] = a5\n 21517: a5 = a4 >> 0x20\n 21520: u8 [a0 + 0x1c] = a5\n 21523: a5 = a4 >> 0x18\n 21526: u8 [a0 + 0x1b] = a5\n 21529: a5 = a4 >> 0x10\n 21532: u8 [a0 + 0x1a] = a5\n 21535: a4 = a4 >> 0x8\n 21538: u8 [a0 + 0x19] = a4\n 21541: u8 [a0 + 0x10] = a3\n 21544: a4 = a3 >> 0x38\n 21547: u8 [a0 + 0x17] = a4\n 21550: a4 = a3 >> 0x30\n 21553: u8 [a0 + 0x16] = a4\n 21556: a4 = a3 >> 0x28\n 21559: u8 [a0 + 0x15] = a4\n 21562: a4 = a3 >> 0x20\n 21565: u8 [a0 + 0x14] = a4\n 21568: a4 = a3 >> 0x18\n 21571: u8 [a0 + 0x13] = a4\n 21574: a4 = a3 >> 0x10\n 21577: u8 [a0 + 0x12] = a4\n 21580: a3 = a3 >> 0x8\n 21583: u8 [a0 + 0x11] = a3\n 21586: u8 [a0 + 0x8] = a2\n 21589: a3 = a2 >> 0x38\n 21592: u8 [a0 + 0xf] = a3\n 21595: a3 = a2 >> 0x30\n 21598: u8 [a0 + 0xe] = a3\n 21601: a3 = a2 >> 0x28\n 21604: u8 [a0 + 0xd] = a3\n 21607: a3 = a2 >> 0x20\n 21610: u8 [a0 + 0xc] = a3\n 21613: a3 = a2 >> 0x18\n 21616: u8 [a0 + 0xb] = a3\n 21619: a3 = a2 >> 0x10\n 21622: u8 [a0 + 0xa] = a3\n 21625: a2 = a2 >> 0x8\n 21628: u8 [a0 + 0x9] = a2\n 21631: u8 [a0] = a1\n 21633: a2 = a1 >> 0x38\n 21636: u8 [a0 + 0x7] = a2\n 21639: a2 = a1 >> 0x30\n 21642: u8 [a0 + 0x6] = a2\n 21645: a2 = a1 >> 0x28\n 21648: u8 [a0 + 0x5] = a2\n 21651: a2 = a1 >> 0x20\n 21654: u8 [a0 + 0x4] = a2\n 21657: a2 = a1 >> 0x18\n 21660: u8 [a0 + 0x3] = a2\n 21663: a2 = a1 >> 0x10\n 21666: u8 [a0 + 0x2] = a2\n 21669: a1 = a1 >> 0x8\n 21672: a5 = u64 [sp + 0x58]\n 21675: a2 = a5 >u 0\n 21677: a3 = u64 [sp + 0x48]\n 21680: a3 = a3 <u 0x20\n 21683: a3 = a3 ^ 0x1\n 21686: a3 = a2 if a5 != 0\n 21689: a2 = a5 >u 0\n 21691: a4 = a5 >u 0\n 21693: a4 = a2 if a5 == 0\n 21696: a2 = a5 | a5\n 21699: a4 = a3 if a2 == 0\n 21702: u8 [a0 + 0x1] = a1\n 21705: jump @338 if a4 != 0\n      : @337 (gas: 1)\n 21708: jump @381\n      : @338 (gas: 3)\n 21711: a1 = 0x20\n 21714: a0 = u64 [sp + 0x50]\n 21717: ra = 282, jump @0\n      : @339 [@dyn 141] (gas: 54)\n 21723: a1 = u8 [a0 + 0x9]\n 21726: a2 = u8 [a0 + 0x8]\n 21729: a3 = u8 [a0 + 0xa]\n 21732: a4 = u8 [a0 + 0xb]\n 21735: a1 = a1 << 0x8\n 21738: a1 = a1 | a2\n 21741: a3 = a3 << 0x10\n 21744: a4 = a4 << 0x18\n 21747: a3 = a3 | a4\n 21750: a1 = a1 | a3\n 21753: a2 = u8 [a0 + 0xd]\n 21756: a3 = u8 [a0 + 0xc]\n 21759: a4 = u8 [a0 + 0xe]\n 21762: a5 = u8 [a0 + 0xf]\n 21765: a2 = a2 << 0x8\n 21768: a2 = a2 | a3\n 21771: a4 = a4 << 0x10\n 21774: a5 = a5 << 0x18\n 21777: a4 = a4 | a5\n 21780: a2 = a2 | a4\n 21783: a2 = a2 << 0x20\n 21786: a2 = a2 | a1\n 21789: a1 = u8 [a0 + 0x1]\n 21792: a3 = u8 [a0]\n 21794: a4 = u8 [a0 + 0x2]\n 21797: a5 = u8 [a0 + 0x3]\n 21800: a1 = a1 << 0x8\n 21803: a1 = a1 | a3\n 21806: a4 = a4 << 0x10\n 21809: a5 = a5 << 0x18\n 21812: a4 = a4 | a5\n 21815: a1 = a1 | a4\n 21818: a3 = u8 [a0 + 0x5]\n 21821: a4 = u8 [a0 + 0x4]\n 21824: a5 = u8 [a0 + 0x6]\n 21827: s1 = u8 [a0 + 0x7]\n 21830: a3 = a3 << 0x8\n 21833: a3 = a3 | a4\n 21836: a5 = a5 << 0x10\n 21839: s1 = s1 << 0x18\n 21842: a5 = a5 | s1\n 21845: a3 = a3 | a5\n 21848: a3 = a3 << 0x20\n 21851: a1 = a1 | a3\n 21854: t0 = reverse a1\n 21856: a2 = reverse a2\n 21858: a3 = 0x100000000\n 21868: a3 = a3 ^ a2\n 21871: a3 = a3 | t0\n 21874: a4 = a2 >> 0x20\n 21877: a4 = a4 <u 0x1\n 21880: a4 = 0 if t0 != 0\n 21882: a4 = 0 if a3 == 0\n 21884: jump @341 if a4 != 0\n      : @340 (gas: 1)\n 21887: jump @381\n      : @341 (gas: 66)\n 21890: a3 = u8 [a0 + 0x19]\n 21893: a4 = u8 [a0 + 0x18]\n 21896: a5 = u8 [a0 + 0x1a]\n 21899: s1 = u8 [a0 + 0x1b]\n 21902: a3 = a3 << 0x8\n 21905: a3 = a3 | a4\n 21908: a5 = a5 << 0x10\n 21911: s1 = s1 << 0x18\n 21914: a5 = a5 | s1\n 21917: a3 = a3 | a5\n 21920: a4 = u8 [a0 + 0x1d]\n 21923: a5 = u8 [a0 + 0x1c]\n 21926: s1 = u8 [a0 + 0x1e]\n 21929: a1 = u8 [a0 + 0x1f]\n 21932: a4 = a4 << 0x8\n 21935: a4 = a4 | a5\n 21938: s1 = s1 << 0x10\n 21941: a1 = a1 << 0x18\n 21944: a1 = a1 | s1\n 21947: a1 = a1 | a4\n 21950: a1 = a1 << 0x20\n 21953: a3 = a3 | a1\n 21956: a1 = u8 [a0 + 0x11]\n 21959: a4 = u8 [a0 + 0x10]\n 21962: a5 = u8 [a0 + 0x12]\n 21965: s1 = u8 [a0 + 0x13]\n 21968: a1 = a1 << 0x8\n 21971: a1 = a1 | a4\n 21974: a5 = a5 << 0x10\n 21977: s1 = s1 << 0x18\n 21980: a5 = a5 | s1\n 21983: a1 = a1 | a5\n 21986: a4 = u8 [a0 + 0x15]\n 21989: a5 = u8 [a0 + 0x14]\n 21992: s1 = u8 [a0 + 0x16]\n 21995: a0 = u8 [a0 + 0x17]\n 21998: a4 = a4 << 0x8\n 22001: a4 = a4 | a5\n 22004: s1 = s1 << 0x10\n 22007: a0 = a0 << 0x18\n 22010: a0 = a0 | s1\n 22013: a0 = a0 | a4\n 22016: a0 = a0 << 0x20\n 22019: a0 = a0 | a1\n 22022: a0 = reverse a0\n 22024: a1 = reverse a3\n 22026: a3 = u64 [sp + 0x30]\n 22029: a3 = reverse a3\n 22031: a4 = a3 << 0x20\n 22034: a5 = u64 [sp + 0x38]\n 22037: s1 = reverse a5\n 22039: a5 = s1 >> 0x20\n 22042: a4 = a4 | a5\n 22045: s1 = s1 << 0x20\n 22048: a5 = u64 [sp + 0x40]\n 22051: a5 = reverse a5\n 22053: a5 = a5 >> 0x20\n 22056: a5 = a5 | s1\n 22059: a3 = a3 >> 0x20\n 22062: a2 = a2 ^ a3\n 22065: a1 = a1 ^ a5\n 22068: a1 = a1 | a2\n 22071: a0 = a0 ^ a4\n 22074: a0 = a0 | t0\n 22077: a0 = a0 | a1\n 22080: jump @369 if a0 != 0\n      : @342 (gas: 3)\n 22084: a1 = 0x20\n 22087: s1 = 0x20\n 22090: ra = 284, jump @0\n      : @343 [@dyn 142] (gas: 67)\n 22096: a1 = u64 [sp + 0x148]\n 22100: u8 [a0 + 0x10] = a1\n 22103: a1 = u64 [sp + 0xc8]\n 22107: u8 [a0 + 0xf] = a1\n 22110: a1 = u64 [sp + 0xc0]\n 22114: u8 [a0 + 0xe] = a1\n 22117: a1 = u64 [sp + 0xb8]\n 22121: u8 [a0 + 0xd] = a1\n 22124: a1 = u64 [sp + 0xb0]\n 22128: u8 [a0 + 0xc] = a1\n 22131: a1 = u64 [sp + 0xa8]\n 22135: u8 [a0 + 0xb] = a1\n 22138: a1 = u64 [sp + 0xa0]\n 22142: u8 [a0 + 0xa] = a1\n 22145: a1 = u64 [sp + 0x98]\n 22149: u8 [a0 + 0x9] = a1\n 22152: a1 = u64 [sp + 0x150]\n 22156: u8 [a0 + 0x8] = a1\n 22159: a1 = u64 [sp + 0x90]\n 22163: u8 [a0 + 0x7] = a1\n 22166: a1 = u64 [sp + 0x88]\n 22170: u8 [a0 + 0x6] = a1\n 22173: a1 = u64 [sp + 0x80]\n 22177: u8 [a0 + 0x5] = a1\n 22180: a1 = u64 [sp + 0x78]\n 22183: u8 [a0 + 0x4] = a1\n 22186: a1 = u64 [sp + 0x70]\n 22189: u8 [a0 + 0x3] = a1\n 22192: a1 = u64 [sp + 0x68]\n 22195: u8 [a0 + 0x2] = a1\n 22198: a1 = u64 [sp + 0x60]\n 22201: u8 [a0 + 0x1] = a1\n 22204: a1 = u64 [sp + 0x158]\n 22208: u8 [a0] = a1\n 22210: a1 = u64 [sp + 0x140]\n 22214: u8 [a0 + 0x18] = a1\n 22217: a1 = u64 [sp + 0x100]\n 22221: u8 [a0 + 0x17] = a1\n 22224: a1 = u64 [sp + 0xf8]\n 22228: u8 [a0 + 0x16] = a1\n 22231: a1 = u64 [sp + 0xf0]\n 22235: u8 [a0 + 0x15] = a1\n 22238: a1 = u64 [sp + 0xe8]\n 22242: u8 [a0 + 0x14] = a1\n 22245: a1 = u64 [sp + 0xe0]\n 22249: u8 [a0 + 0x13] = a1\n 22252: a1 = u64 [sp + 0xd8]\n 22256: u8 [a0 + 0x12] = a1\n 22259: a1 = u64 [sp + 0xd0]\n 22263: u8 [a0 + 0x11] = a1\n 22266: a1 = u64 [sp + 0x138]\n 22270: u8 [a0 + 0x1f] = a1\n 22273: a1 = u64 [sp + 0x130]\n 22277: u8 [a0 + 0x1e] = a1\n 22280: a1 = u64 [sp + 0x128]\n 22284: u8 [a0 + 0x1d] = a1\n 22287: a1 = u64 [sp + 0x120]\n 22291: u8 [a0 + 0x1c] = a1\n 22294: a1 = u64 [sp + 0x118]\n 22298: u8 [a0 + 0x1b] = a1\n 22301: a1 = u64 [sp + 0x110]\n 22305: u8 [a0 + 0x1a] = a1\n 22308: a1 = u64 [sp + 0x108]\n 22312: u8 [a0 + 0x19] = a1\n 22315: a0 = 0x20\n 22318: a1 = 0x20\n 22321: ra = 286, jump @0\n      : @344 [@dyn 143] (gas: 35)\n 22327: u8 [a0 + 31] = 0x2\n 22331: u8 [a0 + 30] = 0\n 22334: u8 [a0 + 29] = 0\n 22337: u8 [a0 + 28] = 0\n 22340: u8 [a0 + 27] = 0\n 22343: u8 [a0 + 26] = 0\n 22346: u8 [a0 + 25] = 0\n 22349: u8 [a0 + 24] = 0\n 22352: u8 [a0 + 23] = 0\n 22355: u8 [a0 + 22] = 0\n 22358: u8 [a0 + 21] = 0\n 22361: u8 [a0 + 20] = 0\n 22364: u8 [a0 + 19] = 0\n 22367: u8 [a0 + 18] = 0\n 22370: u8 [a0 + 17] = 0\n 22373: u8 [a0 + 16] = 0\n 22376: u8 [a0 + 15] = 0\n 22379: u8 [a0 + 14] = 0\n 22382: u8 [a0 + 13] = 0\n 22385: u8 [a0 + 12] = 0\n 22388: u8 [a0 + 11] = 0\n 22391: u8 [a0 + 10] = 0\n 22394: u8 [a0 + 9] = 0\n 22397: u8 [a0 + 8] = 0\n 22400: u8 [a0 + 7] = 0\n 22403: u8 [a0 + 6] = 0\n 22406: u8 [a0 + 5] = 0\n 22409: u8 [a0 + 4] = 0\n 22412: u8 [a0 + 3] = 0\n 22415: u8 [a0 + 2] = 0\n 22418: u8 [a0 + 1] = 0\n 22421: u8 [a0 + 0] = 0\n 22423: a1 = 0x40\n 22426: a0 = 0\n 22428: ra = 288, jump @0\n      : @345 [@dyn 144] (gas: 28)\n 22434: i32 a0 = a0 + 0\n 22436: i32 a2 = sp + 0x400\n 22440: a1 = 0x40\n 22443: ecalli 9 // 'hash_keccak_256'\n 22445: a0 = u64 [sp + 0x418]\n 22449: a1 = u64 [sp + 0x410]\n 22453: a2 = u64 [sp + 0x408]\n 22457: a3 = u64 [sp + 0x400]\n 22461: a0 = reverse a0\n 22463: a1 = reverse a1\n 22465: a2 = reverse a2\n 22467: a3 = reverse a3\n 22469: u64 [sp + 0x3d8] = a3\n 22473: u64 [sp + 0x3d0] = a2\n 22477: u64 [sp + 0x3c8] = a1\n 22481: u64 [sp + 0x3c0] = a0\n 22485: u64 [sp + 1048] = 0\n 22489: u64 [sp + 1040] = 0\n 22493: u64 [sp + 1032] = 0\n 22497: u64 [sp + 1024] = 0\n 22501: u32 [sp + 0x3e0] = s1\n 22505: i32 a1 = sp + 0x3c0\n 22509: i32 a3 = sp + 0x400\n 22513: i32 a4 = sp + 0x3e0\n 22517: a2 = 0xffffffffffffffff\n 22520: a0 = 0\n 22522: ecalli 8 // 'get_storage'\n 22524: fallthrough\n      : @346 (gas: 20)\n 22525: a0 = u64 [sp + 0x418]\n 22529: a1 = u64 [sp + 0x400]\n 22533: a2 = u64 [sp + 0x410]\n 22537: a3 = u64 [sp + 0x408]\n 22541: a5 = u64 [sp + 0x168]\n 22545: a4 = a0 ^ a5\n 22548: a0 = a0 <u a5\n 22551: s1 = u64 [sp + 0x160]\n 22555: a5 = a2 <u s1\n 22558: a5 = a0 if a4 != 0\n 22561: a0 = u64 [sp + 0x170]\n 22565: t0 = a3 ^ a0\n 22568: a3 = a3 <u a0\n 22571: a0 = u64 [sp + 0x178]\n 22575: a1 = a1 <u a0\n 22578: a1 = a3 if t0 != 0\n 22581: a0 = a2 ^ s1\n 22584: a0 = a0 | a4\n 22587: a1 = a5 if a0 != 0\n 22590: jump @374 if a1 != 0\n      : @347 (gas: 3)\n 22594: a1 = 0x20\n 22597: a0 = 0\n 22599: ra = 290, jump @0\n      : @348 [@dyn 145] (gas: 67)\n 22605: a1 = u64 [sp + 0x148]\n 22609: u8 [a0 + 0x10] = a1\n 22612: a1 = u64 [sp + 0xc8]\n 22616: u8 [a0 + 0xf] = a1\n 22619: a1 = u64 [sp + 0xc0]\n 22623: u8 [a0 + 0xe] = a1\n 22626: a1 = u64 [sp + 0xb8]\n 22630: u8 [a0 + 0xd] = a1\n 22633: a1 = u64 [sp + 0xb0]\n 22637: u8 [a0 + 0xc] = a1\n 22640: a1 = u64 [sp + 0xa8]\n 22644: u8 [a0 + 0xb] = a1\n 22647: a1 = u64 [sp + 0xa0]\n 22651: u8 [a0 + 0xa] = a1\n 22654: a1 = u64 [sp + 0x98]\n 22658: u8 [a0 + 0x9] = a1\n 22661: a1 = u64 [sp + 0x150]\n 22665: u8 [a0 + 0x8] = a1\n 22668: a1 = u64 [sp + 0x90]\n 22672: u8 [a0 + 0x7] = a1\n 22675: a1 = u64 [sp + 0x88]\n 22679: u8 [a0 + 0x6] = a1\n 22682: a1 = u64 [sp + 0x80]\n 22686: u8 [a0 + 0x5] = a1\n 22689: a1 = u64 [sp + 0x78]\n 22692: u8 [a0 + 0x4] = a1\n 22695: a1 = u64 [sp + 0x70]\n 22698: u8 [a0 + 0x3] = a1\n 22701: a1 = u64 [sp + 0x68]\n 22704: u8 [a0 + 0x2] = a1\n 22707: a1 = u64 [sp + 0x60]\n 22710: u8 [a0 + 0x1] = a1\n 22713: a1 = u64 [sp + 0x158]\n 22717: u8 [a0] = a1\n 22719: a1 = u64 [sp + 0x140]\n 22723: u8 [a0 + 0x18] = a1\n 22726: a1 = u64 [sp + 0x100]\n 22730: u8 [a0 + 0x17] = a1\n 22733: a1 = u64 [sp + 0xf8]\n 22737: u8 [a0 + 0x16] = a1\n 22740: a1 = u64 [sp + 0xf0]\n 22744: u8 [a0 + 0x15] = a1\n 22747: a1 = u64 [sp + 0xe8]\n 22751: u8 [a0 + 0x14] = a1\n 22754: a1 = u64 [sp + 0xe0]\n 22758: u8 [a0 + 0x13] = a1\n 22761: a1 = u64 [sp + 0xd8]\n 22765: u8 [a0 + 0x12] = a1\n 22768: a1 = u64 [sp + 0xd0]\n 22772: u8 [a0 + 0x11] = a1\n 22775: a1 = u64 [sp + 0x138]\n 22779: u8 [a0 + 0x1f] = a1\n 22782: a1 = u64 [sp + 0x130]\n 22786: u8 [a0 + 0x1e] = a1\n 22789: a1 = u64 [sp + 0x128]\n 22793: u8 [a0 + 0x1d] = a1\n 22796: a1 = u64 [sp + 0x120]\n 22800: u8 [a0 + 0x1c] = a1\n 22803: a1 = u64 [sp + 0x118]\n 22807: u8 [a0 + 0x1b] = a1\n 22810: a1 = u64 [sp + 0x110]\n 22814: u8 [a0 + 0x1a] = a1\n 22817: a1 = u64 [sp + 0x108]\n 22821: u8 [a0 + 0x19] = a1\n 22824: a0 = 0x20\n 22827: a1 = 0x20\n 22830: ra = 292, jump @0\n      : @349 [@dyn 146] (gas: 35)\n 22836: u8 [a0 + 31] = 0x2\n 22840: u8 [a0 + 30] = 0\n 22843: u8 [a0 + 29] = 0\n 22846: u8 [a0 + 28] = 0\n 22849: u8 [a0 + 27] = 0\n 22852: u8 [a0 + 26] = 0\n 22855: u8 [a0 + 25] = 0\n 22858: u8 [a0 + 24] = 0\n 22861: u8 [a0 + 23] = 0\n 22864: u8 [a0 + 22] = 0\n 22867: u8 [a0 + 21] = 0\n 22870: u8 [a0 + 20] = 0\n 22873: u8 [a0 + 19] = 0\n 22876: u8 [a0 + 18] = 0\n 22879: u8 [a0 + 17] = 0\n 22882: u8 [a0 + 16] = 0\n 22885: u8 [a0 + 15] = 0\n 22888: u8 [a0 + 14] = 0\n 22891: u8 [a0 + 13] = 0\n 22894: u8 [a0 + 12] = 0\n 22897: u8 [a0 + 11] = 0\n 22900: u8 [a0 + 10] = 0\n 22903: u8 [a0 + 9] = 0\n 22906: u8 [a0 + 8] = 0\n 22909: u8 [a0 + 7] = 0\n 22912: u8 [a0 + 6] = 0\n 22915: u8 [a0 + 5] = 0\n 22918: u8 [a0 + 4] = 0\n 22921: u8 [a0 + 3] = 0\n 22924: u8 [a0 + 2] = 0\n 22927: u8 [a0 + 1] = 0\n 22930: u8 [a0 + 0] = 0\n 22932: a1 = 0x40\n 22935: a0 = 0\n 22937: ra = 294, jump @0\n      : @350 [@dyn 147] (gas: 32)\n 22943: i32 a0 = a0 + 0\n 22945: i32 a2 = sp + 0x400\n 22949: a1 = 0x40\n 22952: ecalli 9 // 'hash_keccak_256'\n 22954: a0 = u64 [sp + 0x418]\n 22958: a1 = u64 [sp + 0x410]\n 22962: a2 = u64 [sp + 0x408]\n 22966: a3 = u64 [sp + 0x400]\n 22970: a0 = reverse a0\n 22972: a1 = reverse a1\n 22974: a2 = reverse a2\n 22976: a3 = reverse a3\n 22978: u64 [sp + 0x40] = a3\n 22981: u64 [sp + 0x3d8] = a3\n 22985: u64 [sp + 0x48] = a2\n 22988: u64 [sp + 0x3d0] = a2\n 22992: u64 [sp + 0x50] = a1\n 22995: u64 [sp + 0x3c8] = a1\n 22999: u64 [sp + 0x58] = a0\n 23002: u64 [sp + 0x3c0] = a0\n 23006: u64 [sp + 1048] = 0\n 23010: u64 [sp + 1040] = 0\n 23014: u64 [sp + 1032] = 0\n 23018: u64 [sp + 1024] = 0\n 23022: u32 [sp + 992] = 0x20\n 23027: i32 a1 = sp + 0x3c0\n 23031: i32 a3 = sp + 0x400\n 23035: i32 a4 = sp + 0x3e0\n 23039: a2 = 0xffffffffffffffff\n 23042: a0 = 0\n 23044: ecalli 8 // 'get_storage'\n 23046: fallthrough\n      : @351 (gas: 22)\n 23047: a2 = u64 [sp + 0x418]\n 23051: a3 = u64 [sp + 0x410]\n 23055: t1 = u64 [sp + 0x408]\n 23059: a1 = u64 [sp + 0x400]\n 23063: a4 = u64 [sp + 0x168]\n 23067: a0 = a2 ^ a4\n 23070: a4 = a2 <u a4\n 23073: t0 = u64 [sp + 0x160]\n 23077: a5 = a3 <u t0\n 23080: u64 [sp + 0x30] = a5\n 23083: a4 = a5 if a0 == 0\n 23086: a5 = u64 [sp + 0x170]\n 23090: t2 = t1 ^ a5\n 23093: s1 = t1 <u a5\n 23096: a5 = u64 [sp + 0x178]\n 23100: u64 [sp + 0x20] = a1\n 23103: ra = a1 <u a5\n 23106: s1 = ra if t2 == 0\n 23109: a5 = a3 ^ t0\n 23112: a0 = a0 | a5\n 23115: a4 = s1 if a0 == 0\n 23118: jump @385 if a4 != 0\n      : @352 (gas: 88)\n 23122: a0 = a3 - t0\n 23125: a3 = a0 - s1\n 23128: u64 [sp + 0x38] = a3\n 23131: a0 = a0 <u s1\n 23134: a3 = u64 [sp + 0x168]\n 23138: a2 = a2 - a3\n 23141: a1 = u64 [sp + 0x30]\n 23144: a2 = a2 - a1\n 23147: a2 = a2 - a0\n 23150: u64 [sp + 0x30] = a2\n 23153: a0 = u64 [sp + 0x170]\n 23157: a0 = t1 - a0\n 23160: a0 = a0 - ra\n 23163: u64 [sp + 0x28] = a0\n 23166: a0 = u64 [sp + 0x178]\n 23170: a1 = u64 [sp + 0x20]\n 23173: a0 = a1 - a0\n 23176: u64 [sp + 0x20] = a0\n 23179: a0 = u64 [sp + 0x48]\n 23182: u64 [sp + 0x3d0] = a0\n 23186: a0 = u64 [sp + 0x50]\n 23189: u64 [sp + 0x3c8] = a0\n 23193: a0 = u64 [sp + 0x58]\n 23196: u64 [sp + 0x3c0] = a0\n 23200: s1 = u64 [sp + 0x40]\n 23203: u64 [sp + 0x3d8] = s1\n 23207: u64 [sp + 1048] = 0\n 23211: u64 [sp + 1040] = 0\n 23215: u64 [sp + 1032] = 0\n 23219: u64 [sp + 1024] = 0\n 23223: u32 [sp + 992] = 0x20\n 23228: i32 a1 = sp + 0x3c0\n 23232: i32 a3 = sp + 0x400\n 23236: i32 a4 = sp + 0x3e0\n 23240: a2 = 0xffffffffffffffff\n 23243: a0 = 0\n 23245: ecalli 8 // 'get_storage'\n 23247: u64 [sp + 0x3d8] = s1\n 23251: a0 = u64 [sp + 0x48]\n 23254: u64 [sp + 0x3d0] = a0\n 23258: a0 = u64 [sp + 0x50]\n 23261: u64 [sp + 0x3c8] = a0\n 23265: a0 = u64 [sp + 0x58]\n 23268: u64 [sp + 0x3c0] = a0\n 23272: a0 = u64 [sp + 0x30]\n 23275: u64 [sp + 0x418] = a0\n 23279: a0 = u64 [sp + 0x38]\n 23282: u64 [sp + 0x410] = a0\n 23286: a0 = u64 [sp + 0x28]\n 23289: u64 [sp + 0x408] = a0\n 23293: a0 = u64 [sp + 0x20]\n 23296: u64 [sp + 0x400] = a0\n 23300: i32 a1 = sp + 0x3c0\n 23304: i32 a3 = sp + 0x400\n 23308: a2 = 0xffffffffffffffff\n 23311: a4 = 0x20\n 23314: a0 = 0\n 23316: ecalli 16 // 'set_storage'\n 23318: i32 a0 = sp + 0x3a0\n 23322: ecalli 5 // 'caller'\n 23324: a0 = u64 [sp + 0x3a8]\n 23328: a1 = i32 [sp + 0x3b0]\n 23332: a2 = u64 [sp + 0x3a0]\n 23336: a0 = reverse a0\n 23338: a3 = a0 << 0x20\n 23341: a1 = reverse a1\n 23343: a1 = a1 >> 0x20\n 23346: a3 = a3 | a1\n 23349: a0 = a0 >> 0x20\n 23352: a1 = reverse a2\n 23354: a2 = a1 << 0x20\n 23357: a0 = a0 | a2\n 23360: a1 = a1 >> 0x20\n 23363: a2 = u64 [sp + 0x168]\n 23367: u64 [sp + 0x298] = a2\n 23371: a2 = u64 [sp + 0x160]\n 23375: u64 [sp + 0x290] = a2\n 23379: a2 = u64 [sp + 0x170]\n 23383: u64 [sp + 0x288] = a2\n 23387: a2 = u64 [sp + 0x178]\n 23391: u64 [sp + 0x280] = a2\n 23395: u64 [sp + 696] = 0\n 23399: u64 [sp + 0x2b0] = a1\n 23403: u64 [sp + 0x2a8] = a0\n 23407: a0 = sp + 0x2a0\n 23411: a1 = sp + 0x280\n 23415: u64 [sp + 0x2a0] = a3\n 23419: ra = 296, jump @961\n      : @353 [@dyn 148] (gas: 3)\n 23426: a1 = 0x20\n 23429: a0 = 0\n 23431: ra = 298, jump @0\n      : @354 [@dyn 149] (gas: 67)\n 23437: a1 = u64 [sp + 0x138]\n 23441: u8 [a0 + 0x1f] = a1\n 23444: a1 = u64 [sp + 0x130]\n 23448: u8 [a0 + 0x1e] = a1\n 23451: a1 = u64 [sp + 0x128]\n 23455: u8 [a0 + 0x1d] = a1\n 23458: a1 = u64 [sp + 0x120]\n 23462: u8 [a0 + 0x1c] = a1\n 23465: a1 = u64 [sp + 0x118]\n 23469: u8 [a0 + 0x1b] = a1\n 23472: a1 = u64 [sp + 0x110]\n 23476: u8 [a0 + 0x1a] = a1\n 23479: a1 = u64 [sp + 0x108]\n 23483: u8 [a0 + 0x19] = a1\n 23486: a1 = u64 [sp + 0x100]\n 23490: u8 [a0 + 0x17] = a1\n 23493: a1 = u64 [sp + 0xf8]\n 23497: u8 [a0 + 0x16] = a1\n 23500: a1 = u64 [sp + 0xf0]\n 23504: u8 [a0 + 0x15] = a1\n 23507: a1 = u64 [sp + 0xe8]\n 23511: u8 [a0 + 0x14] = a1\n 23514: a1 = u64 [sp + 0xe0]\n 23518: u8 [a0 + 0x13] = a1\n 23521: a1 = u64 [sp + 0xd8]\n 23525: u8 [a0 + 0x12] = a1\n 23528: a1 = u64 [sp + 0xd0]\n 23532: u8 [a0 + 0x11] = a1\n 23535: a1 = u64 [sp + 0xc8]\n 23539: u8 [a0 + 0xf] = a1\n 23542: a1 = u64 [sp + 0xc0]\n 23546: u8 [a0 + 0xe] = a1\n 23549: a1 = u64 [sp + 0xb8]\n 23553: u8 [a0 + 0xd] = a1\n 23556: a1 = u64 [sp + 0xb0]\n 23560: u8 [a0 + 0xc] = a1\n 23563: a1 = u64 [sp + 0xa8]\n 23567: u8 [a0 + 0xb] = a1\n 23570: a1 = u64 [sp + 0xa0]\n 23574: u8 [a0 + 0xa] = a1\n 23577: a1 = u64 [sp + 0x98]\n 23581: u8 [a0 + 0x9] = a1\n 23584: a1 = u64 [sp + 0x90]\n 23588: u8 [a0 + 0x7] = a1\n 23591: a1 = u64 [sp + 0x88]\n 23595: u8 [a0 + 0x6] = a1\n 23598: a1 = u64 [sp + 0x80]\n 23602: u8 [a0 + 0x5] = a1\n 23605: a1 = u64 [sp + 0x78]\n 23608: u8 [a0 + 0x4] = a1\n 23611: a1 = u64 [sp + 0x70]\n 23614: u8 [a0 + 0x3] = a1\n 23617: a1 = u64 [sp + 0x68]\n 23620: u8 [a0 + 0x2] = a1\n 23623: a1 = u64 [sp + 0x60]\n 23626: u8 [a0 + 0x1] = a1\n 23629: a1 = u64 [sp + 0x140]\n 23633: u8 [a0 + 0x18] = a1\n 23636: a1 = u64 [sp + 0x148]\n 23640: u8 [a0 + 0x10] = a1\n 23643: a1 = u64 [sp + 0x150]\n 23647: u8 [a0 + 0x8] = a1\n 23650: a1 = u64 [sp + 0x158]\n 23654: u8 [a0] = a1\n 23656: a0 = 0x20\n 23659: a1 = 0x20\n 23662: ra = 300, jump @0\n      : @355 [@dyn 150] (gas: 35)\n 23668: u8 [a0 + 31] = 0x2\n 23672: u8 [a0 + 30] = 0\n 23675: u8 [a0 + 29] = 0\n 23678: u8 [a0 + 28] = 0\n 23681: u8 [a0 + 27] = 0\n 23684: u8 [a0 + 26] = 0\n 23687: u8 [a0 + 25] = 0\n 23690: u8 [a0 + 24] = 0\n 23693: u8 [a0 + 23] = 0\n 23696: u8 [a0 + 22] = 0\n 23699: u8 [a0 + 21] = 0\n 23702: u8 [a0 + 20] = 0\n 23705: u8 [a0 + 19] = 0\n 23708: u8 [a0 + 18] = 0\n 23711: u8 [a0 + 17] = 0\n 23714: u8 [a0 + 16] = 0\n 23717: u8 [a0 + 15] = 0\n 23720: u8 [a0 + 14] = 0\n 23723: u8 [a0 + 13] = 0\n 23726: u8 [a0 + 12] = 0\n 23729: u8 [a0 + 11] = 0\n 23732: u8 [a0 + 10] = 0\n 23735: u8 [a0 + 9] = 0\n 23738: u8 [a0 + 8] = 0\n 23741: u8 [a0 + 7] = 0\n 23744: u8 [a0 + 6] = 0\n 23747: u8 [a0 + 5] = 0\n 23750: u8 [a0 + 4] = 0\n 23753: u8 [a0 + 3] = 0\n 23756: u8 [a0 + 2] = 0\n 23759: u8 [a0 + 1] = 0\n 23762: u8 [a0 + 0] = 0\n 23764: a1 = 0x40\n 23767: a0 = 0\n 23769: ra = 302, jump @0\n      : @356 [@dyn 151] (gas: 38)\n 23775: i32 a0 = a0 + 0\n 23777: i32 a2 = sp + 0x400\n 23781: a1 = 0x40\n 23784: ecalli 9 // 'hash_keccak_256'\n 23786: a0 = u64 [sp + 0x418]\n 23790: a1 = u64 [sp + 0x410]\n 23794: a2 = u64 [sp + 0x408]\n 23798: a3 = u64 [sp + 0x400]\n 23802: a0 = reverse a0\n 23804: a1 = reverse a1\n 23806: a2 = reverse a2\n 23808: a3 = reverse a3\n 23810: u64 [sp + 0x3d8] = a3\n 23814: u64 [sp + 0x3d0] = a2\n 23818: u64 [sp + 0x3c8] = a1\n 23822: u64 [sp + 0x3c0] = a0\n 23826: u64 [sp + 1048] = 0\n 23830: u64 [sp + 1040] = 0\n 23834: u64 [sp + 1032] = 0\n 23838: u64 [sp + 1024] = 0\n 23842: u32 [sp + 992] = 0x20\n 23847: i32 a1 = sp + 0x3c0\n 23851: i32 a3 = sp + 0x400\n 23855: i32 a4 = sp + 0x3e0\n 23859: a2 = 0xffffffffffffffff\n 23862: a0 = 0\n 23864: ecalli 8 // 'get_storage'\n 23866: a0 = u64 [sp + 0x418]\n 23870: u64 [sp + 0x110] = a0\n 23874: a0 = u64 [sp + 0x410]\n 23878: u64 [sp + 0x118] = a0\n 23882: a0 = u64 [sp + 0x408]\n 23886: u64 [sp + 0x120] = a0\n 23890: a0 = u64 [sp + 0x400]\n 23894: u64 [sp + 0x128] = a0\n 23898: a0 = 0x40\n 23901: a1 = 0x20\n 23904: ra = 304, jump @0\n      : @357 [@dyn 152] (gas: 102)\n 23910: a1 = u8 [a0 + 0x11]\n 23913: a2 = u8 [a0 + 0x10]\n 23916: a3 = u8 [a0 + 0x12]\n 23919: a4 = u8 [a0 + 0x13]\n 23922: a1 = a1 << 0x8\n 23925: a1 = a1 | a2\n 23928: a3 = a3 << 0x10\n 23931: a4 = a4 << 0x18\n 23934: a3 = a3 | a4\n 23937: a1 = a1 | a3\n 23940: a2 = u8 [a0 + 0x15]\n 23943: a3 = u8 [a0 + 0x14]\n 23946: a4 = u8 [a0 + 0x16]\n 23949: a5 = u8 [a0 + 0x17]\n 23952: a2 = a2 << 0x8\n 23955: a2 = a2 | a3\n 23958: a4 = a4 << 0x10\n 23961: a5 = a5 << 0x18\n 23964: a4 = a4 | a5\n 23967: a2 = a2 | a4\n 23970: a2 = a2 << 0x20\n 23973: t0 = a2 | a1\n 23976: a2 = u8 [a0 + 0x1]\n 23979: a3 = u8 [a0]\n 23981: a4 = u8 [a0 + 0x2]\n 23984: a5 = u8 [a0 + 0x3]\n 23987: a2 = a2 << 0x8\n 23990: a2 = a2 | a3\n 23993: a4 = a4 << 0x10\n 23996: a5 = a5 << 0x18\n 23999: a4 = a4 | a5\n 24002: a2 = a2 | a4\n 24005: a3 = u8 [a0 + 0x5]\n 24008: a4 = u8 [a0 + 0x4]\n 24011: a5 = u8 [a0 + 0x6]\n 24014: s1 = u8 [a0 + 0x7]\n 24017: a3 = a3 << 0x8\n 24020: a3 = a3 | a4\n 24023: a5 = a5 << 0x10\n 24026: s1 = s1 << 0x18\n 24029: a5 = a5 | s1\n 24032: a3 = a3 | a5\n 24035: a3 = a3 << 0x20\n 24038: a2 = a2 | a3\n 24041: a3 = u8 [a0 + 0x19]\n 24044: a4 = u8 [a0 + 0x18]\n 24047: a5 = u8 [a0 + 0x1a]\n 24050: s1 = u8 [a0 + 0x1b]\n 24053: a3 = a3 << 0x8\n 24056: a3 = a3 | a4\n 24059: a5 = a5 << 0x10\n 24062: s1 = s1 << 0x18\n 24065: a5 = a5 | s1\n 24068: a3 = a3 | a5\n 24071: a4 = u8 [a0 + 0x1d]\n 24074: a5 = u8 [a0 + 0x1c]\n 24077: s1 = u8 [a0 + 0x1e]\n 24080: a1 = u8 [a0 + 0x1f]\n 24083: a4 = a4 << 0x8\n 24086: a4 = a4 | a5\n 24089: s1 = s1 << 0x10\n 24092: a1 = a1 << 0x18\n 24095: a1 = a1 | s1\n 24098: a1 = a1 | a4\n 24101: a1 = a1 << 0x20\n 24104: a3 = a3 | a1\n 24107: a1 = u8 [a0 + 0x9]\n 24110: a4 = u8 [a0 + 0x8]\n 24113: a5 = u8 [a0 + 0xa]\n 24116: s1 = u8 [a0 + 0xb]\n 24119: a1 = a1 << 0x8\n 24122: a1 = a1 | a4\n 24125: a5 = a5 << 0x10\n 24128: s1 = s1 << 0x18\n 24131: a5 = a5 | s1\n 24134: a1 = a1 | a5\n 24137: a4 = u8 [a0 + 0xd]\n 24140: a5 = u8 [a0 + 0xc]\n 24143: s1 = u8 [a0 + 0xe]\n 24146: a0 = u8 [a0 + 0xf]\n 24149: a4 = a4 << 0x8\n 24152: a4 = a4 | a5\n 24155: s1 = s1 << 0x10\n 24158: a0 = a0 << 0x18\n 24161: a0 = a0 | s1\n 24164: a0 = a0 | a4\n 24167: a0 = a0 << 0x20\n 24170: a0 = a0 | a1\n 24173: s1 = reverse a0\n 24175: a3 = reverse a3\n 24177: a1 = reverse a2\n 24179: a0 = reverse t0\n 24181: u64 [sp + 0x138] = a0\n 24185: u64 [sp + 0x130] = a1\n 24189: a0 = a0 | a1\n 24192: a1 = a3 | s1\n 24195: a1 = a1 | a0\n 24198: a1 = a1 >> 0x20\n 24201: a0 = a0 | s1\n 24204: a0 = a0 << 0x20\n 24207: a0 = a0 | a1\n 24210: jump @380 if a0 != 0\n      : @358 (gas: 5)\n 24214: i32 a0 = a3 + 0\n 24216: a1 = 0x20\n 24219: u64 [sp + 0x100] = a0\n 24223: u64 [sp + 0x108] = a3\n 24227: ra = 306, jump @0\n      : @359 [@dyn 153] (gas: 77)\n 24233: a1 = u64 [sp + 0x168]\n 24237: a1 = reverse a1\n 24239: a2 = u64 [sp + 0x160]\n 24243: a2 = reverse a2\n 24245: a3 = u64 [sp + 0x170]\n 24249: a3 = reverse a3\n 24251: a4 = u64 [sp + 0x178]\n 24255: a4 = reverse a4\n 24257: a5 = a4 >> 0x38\n 24260: u8 [a0 + 0x1f] = a5\n 24263: a5 = a4 >> 0x30\n 24266: u8 [a0 + 0x1e] = a5\n 24269: a5 = a4 >> 0x28\n 24272: u8 [a0 + 0x1d] = a5\n 24275: a5 = a4 >> 0x20\n 24278: u8 [a0 + 0x1c] = a5\n 24281: a5 = a4 >> 0x18\n 24284: u8 [a0 + 0x1b] = a5\n 24287: a5 = a4 >> 0x10\n 24290: u8 [a0 + 0x1a] = a5\n 24293: a5 = a4 >> 0x8\n 24296: u8 [a0 + 0x19] = a5\n 24299: u8 [a0 + 0x18] = a4\n 24302: u8 [a0 + 0x10] = a3\n 24305: a4 = a3 >> 0x38\n 24308: u8 [a0 + 0x17] = a4\n 24311: a4 = a3 >> 0x30\n 24314: u8 [a0 + 0x16] = a4\n 24317: a4 = a3 >> 0x28\n 24320: u8 [a0 + 0x15] = a4\n 24323: a4 = a3 >> 0x20\n 24326: u8 [a0 + 0x14] = a4\n 24329: a4 = a3 >> 0x18\n 24332: u8 [a0 + 0x13] = a4\n 24335: a4 = a3 >> 0x10\n 24338: u8 [a0 + 0x12] = a4\n 24341: a3 = a3 >> 0x8\n 24344: u8 [a0 + 0x11] = a3\n 24347: u8 [a0 + 0x8] = a2\n 24350: a3 = a2 >> 0x38\n 24353: u8 [a0 + 0xf] = a3\n 24356: a3 = a2 >> 0x30\n 24359: u8 [a0 + 0xe] = a3\n 24362: a3 = a2 >> 0x28\n 24365: u8 [a0 + 0xd] = a3\n 24368: a3 = a2 >> 0x20\n 24371: u8 [a0 + 0xc] = a3\n 24374: a3 = a2 >> 0x18\n 24377: u8 [a0 + 0xb] = a3\n 24380: a3 = a2 >> 0x10\n 24383: u8 [a0 + 0xa] = a3\n 24386: a2 = a2 >> 0x8\n 24389: u8 [a0 + 0x9] = a2\n 24392: u8 [a0] = a1\n 24394: a2 = a1 >> 0x38\n 24397: u8 [a0 + 0x7] = a2\n 24400: a2 = a1 >> 0x30\n 24403: u8 [a0 + 0x6] = a2\n 24406: a2 = a1 >> 0x28\n 24409: u8 [a0 + 0x5] = a2\n 24412: a2 = a1 >> 0x20\n 24415: u8 [a0 + 0x4] = a2\n 24418: a2 = a1 >> 0x18\n 24421: u8 [a0 + 0x3] = a2\n 24424: a2 = a1 >> 0x10\n 24427: u8 [a0 + 0x2] = a2\n 24430: a1 = a1 >> 0x8\n 24433: a2 = u64 [sp + 0x130]\n 24437: a2 = a2 | s1\n 24440: a3 = 0xffffffe0\n 24450: a4 = u64 [sp + 0x108]\n 24454: a3 = a4 <u a3\n 24457: a4 = u64 [sp + 0x138]\n 24461: a3 = 0 if a4 != 0\n 24463: a3 = 0 if a2 != 0\n 24465: u8 [a0 + 0x1] = a1\n 24468: jump @380 if a3 == 0\n      : @360 (gas: 4)\n 24472: s1 = u64 [sp + 0x100]\n 24476: i32 a0 = s1 + 0x20\n 24479: a1 = 0x20\n 24482: ra = 308, jump @0\n      : @361 [@dyn 154] (gas: 71)\n 24488: a1 = u64 [sp + 0x110]\n 24492: a1 = reverse a1\n 24494: a2 = u64 [sp + 0x118]\n 24498: a2 = reverse a2\n 24500: a3 = u64 [sp + 0x120]\n 24504: a3 = reverse a3\n 24506: a4 = u64 [sp + 0x128]\n 24510: a4 = reverse a4\n 24512: a5 = a4 >> 0x38\n 24515: u8 [a0 + 0x1f] = a5\n 24518: a5 = a4 >> 0x30\n 24521: u8 [a0 + 0x1e] = a5\n 24524: a5 = a4 >> 0x28\n 24527: u8 [a0 + 0x1d] = a5\n 24530: a5 = a4 >> 0x20\n 24533: u8 [a0 + 0x1c] = a5\n 24536: a5 = a4 >> 0x18\n 24539: u8 [a0 + 0x1b] = a5\n 24542: a5 = a4 >> 0x10\n 24545: u8 [a0 + 0x1a] = a5\n 24548: a5 = a4 >> 0x8\n 24551: u8 [a0 + 0x19] = a5\n 24554: u8 [a0 + 0x18] = a4\n 24557: u8 [a0 + 0x10] = a3\n 24560: a4 = a3 >> 0x38\n 24563: u8 [a0 + 0x17] = a4\n 24566: a4 = a3 >> 0x30\n 24569: u8 [a0 + 0x16] = a4\n 24572: a4 = a3 >> 0x28\n 24575: u8 [a0 + 0x15] = a4\n 24578: a4 = a3 >> 0x20\n 24581: u8 [a0 + 0x14] = a4\n 24584: a4 = a3 >> 0x18\n 24587: u8 [a0 + 0x13] = a4\n 24590: a4 = a3 >> 0x10\n 24593: u8 [a0 + 0x12] = a4\n 24596: a3 = a3 >> 0x8\n 24599: u8 [a0 + 0x11] = a3\n 24602: u8 [a0 + 0x8] = a2\n 24605: a3 = a2 >> 0x38\n 24608: u8 [a0 + 0xf] = a3\n 24611: a3 = a2 >> 0x30\n 24614: u8 [a0 + 0xe] = a3\n 24617: a3 = a2 >> 0x28\n 24620: u8 [a0 + 0xd] = a3\n 24623: a3 = a2 >> 0x20\n 24626: u8 [a0 + 0xc] = a3\n 24629: a3 = a2 >> 0x18\n 24632: u8 [a0 + 0xb] = a3\n 24635: a3 = a2 >> 0x10\n 24638: u8 [a0 + 0xa] = a3\n 24641: a2 = a2 >> 0x8\n 24644: u8 [a0 + 0x9] = a2\n 24647: u8 [a0] = a1\n 24649: a2 = a1 >> 0x38\n 24652: u8 [a0 + 0x7] = a2\n 24655: a2 = a1 >> 0x30\n 24658: u8 [a0 + 0x6] = a2\n 24661: a2 = a1 >> 0x28\n 24664: u8 [a0 + 0x5] = a2\n 24667: a2 = a1 >> 0x20\n 24670: u8 [a0 + 0x4] = a2\n 24673: a2 = a1 >> 0x18\n 24676: u8 [a0 + 0x3] = a2\n 24679: a2 = a1 >> 0x10\n 24682: u8 [a0 + 0x2] = a2\n 24685: a1 = a1 >> 0x8\n 24688: u8 [a0 + 0x1] = a1\n 24691: a1 = 0x40\n 24694: a0 = s1\n 24696: ra = 310, jump @0\n      : @362 [@dyn 155] (gas: 27)\n 24702: a1 = u64 [0x20000]\n 24707: a2 = u64 [0x20008]\n 24712: a3 = u64 [0x20010]\n 24717: a4 = u64 [0x20018]\n 24722: u64 [sp + 0x418] = a1\n 24726: u64 [sp + 0x410] = a2\n 24730: u64 [sp + 0x408] = a3\n 24734: u64 [sp + 0x400] = a4\n 24738: a1 = u64 [sp + 0x140]\n 24742: u64 [sp + 0x438] = a1\n 24746: a1 = u64 [sp + 0x148]\n 24750: u64 [sp + 0x430] = a1\n 24754: a1 = u64 [sp + 0x150]\n 24758: u64 [sp + 0x428] = a1\n 24762: a1 = u64 [sp + 0x158]\n 24766: u64 [sp + 0x420] = a1\n 24770: i32 a2 = a0 + 0\n 24772: i32 a0 = sp + 0x400\n 24776: a1 = 0x2\n 24779: a3 = 0x40\n 24782: ecalli 7 // 'deposit_event'\n 24784: sp = s0 + 0xfffffffffffffba0\n 24788: ra = u64 [sp + 0x458]\n 24792: s0 = u64 [sp + 0x450]\n 24796: s1 = u64 [sp + 0x448]\n 24800: sp = sp + 0x460\n 24804: ret\n      : @363 (gas: 3)\n 24806: a0 = 0x40\n 24809: a1 = 0x20\n 24812: ra = 312, jump @0\n      : @364 [@dyn 156] (gas: 103)\n 24818: a1 = u8 [a0 + 0x11]\n 24821: a2 = u8 [a0 + 0x10]\n 24824: a3 = u8 [a0 + 0x12]\n 24827: a4 = u8 [a0 + 0x13]\n 24830: a1 = a1 << 0x8\n 24833: a1 = a1 | a2\n 24836: a3 = a3 << 0x10\n 24839: a4 = a4 << 0x18\n 24842: a3 = a3 | a4\n 24845: a1 = a1 | a3\n 24848: a2 = u8 [a0 + 0x15]\n 24851: a3 = u8 [a0 + 0x14]\n 24854: a4 = u8 [a0 + 0x16]\n 24857: a5 = u8 [a0 + 0x17]\n 24860: a2 = a2 << 0x8\n 24863: a2 = a2 | a3\n 24866: a4 = a4 << 0x10\n 24869: a5 = a5 << 0x18\n 24872: a4 = a4 | a5\n 24875: a2 = a2 | a4\n 24878: a2 = a2 << 0x20\n 24881: t0 = a2 | a1\n 24884: a2 = u8 [a0 + 0x1]\n 24887: a3 = u8 [a0]\n 24889: a4 = u8 [a0 + 0x2]\n 24892: a5 = u8 [a0 + 0x3]\n 24895: a2 = a2 << 0x8\n 24898: a2 = a2 | a3\n 24901: a4 = a4 << 0x10\n 24904: a5 = a5 << 0x18\n 24907: a4 = a4 | a5\n 24910: a2 = a2 | a4\n 24913: a3 = u8 [a0 + 0x5]\n 24916: a4 = u8 [a0 + 0x4]\n 24919: a5 = u8 [a0 + 0x6]\n 24922: s1 = u8 [a0 + 0x7]\n 24925: a3 = a3 << 0x8\n 24928: a3 = a3 | a4\n 24931: a5 = a5 << 0x10\n 24934: s1 = s1 << 0x18\n 24937: a5 = a5 | s1\n 24940: a3 = a3 | a5\n 24943: a3 = a3 << 0x20\n 24946: a2 = a2 | a3\n 24949: a3 = u8 [a0 + 0x19]\n 24952: a4 = u8 [a0 + 0x18]\n 24955: a5 = u8 [a0 + 0x1a]\n 24958: s1 = u8 [a0 + 0x1b]\n 24961: a3 = a3 << 0x8\n 24964: a3 = a3 | a4\n 24967: a5 = a5 << 0x10\n 24970: s1 = s1 << 0x18\n 24973: a5 = a5 | s1\n 24976: a3 = a3 | a5\n 24979: a4 = u8 [a0 + 0x1d]\n 24982: a5 = u8 [a0 + 0x1c]\n 24985: s1 = u8 [a0 + 0x1e]\n 24988: a1 = u8 [a0 + 0x1f]\n 24991: a4 = a4 << 0x8\n 24994: a4 = a4 | a5\n 24997: s1 = s1 << 0x10\n 25000: a1 = a1 << 0x18\n 25003: a1 = a1 | s1\n 25006: a1 = a1 | a4\n 25009: a1 = a1 << 0x20\n 25012: a3 = a3 | a1\n 25015: a1 = u8 [a0 + 0x9]\n 25018: a4 = u8 [a0 + 0x8]\n 25021: a5 = u8 [a0 + 0xa]\n 25024: s1 = u8 [a0 + 0xb]\n 25027: a1 = a1 << 0x8\n 25030: a1 = a1 | a4\n 25033: a5 = a5 << 0x10\n 25036: s1 = s1 << 0x18\n 25039: a5 = a5 | s1\n 25042: a1 = a1 | a5\n 25045: a4 = u8 [a0 + 0xd]\n 25048: a5 = u8 [a0 + 0xc]\n 25051: s1 = u8 [a0 + 0xe]\n 25054: a0 = u8 [a0 + 0xf]\n 25057: a4 = a4 << 0x8\n 25060: a4 = a4 | a5\n 25063: s1 = s1 << 0x10\n 25066: a0 = a0 << 0x18\n 25069: a0 = a0 | s1\n 25072: a0 = a0 | a4\n 25075: a0 = a0 << 0x20\n 25078: a0 = a0 | a1\n 25081: s1 = reverse a0\n 25083: a1 = reverse a3\n 25085: a2 = reverse a2\n 25087: a0 = reverse t0\n 25089: u64 [sp + 0x178] = a0\n 25093: u64 [sp + 0x170] = a2\n 25097: a0 = a0 | a2\n 25100: a2 = a1\n 25102: a1 = a1 | s1\n 25105: a1 = a1 | a0\n 25108: a1 = a1 >> 0x20\n 25111: a0 = a0 | s1\n 25114: a0 = a0 << 0x20\n 25117: a0 = a0 | a1\n 25120: jump @380 if a0 != 0\n      : @365 (gas: 5)\n 25124: u64 [sp + 0x168] = a2\n 25128: i32 a0 = a2 + 0\n 25130: a1 = 0x20\n 25133: u64 [sp + 0x160] = a0\n 25137: ra = 314, jump @0\n      : @366 [@dyn 157] (gas: 50)\n 25143: u8 [a0 + 31] = 0\n 25146: u8 [a0 + 30] = 0\n 25149: u8 [a0 + 29] = 0\n 25152: u8 [a0 + 28] = 0\n 25155: u8 [a0 + 27] = 0\n 25158: u8 [a0 + 26] = 0\n 25161: u8 [a0 + 25] = 0\n 25164: u8 [a0 + 24] = 0\n 25167: u8 [a0 + 23] = 0\n 25170: u8 [a0 + 22] = 0\n 25173: u8 [a0 + 21] = 0\n 25176: u8 [a0 + 20] = 0\n 25179: u8 [a0 + 19] = 0\n 25182: u8 [a0 + 18] = 0\n 25185: u8 [a0 + 17] = 0\n 25188: u8 [a0 + 16] = 0\n 25191: u8 [a0 + 15] = 0\n 25194: u8 [a0 + 14] = 0\n 25197: u8 [a0 + 13] = 0\n 25200: u8 [a0 + 12] = 0\n 25203: u8 [a0 + 11] = 0\n 25206: u8 [a0 + 10] = 0\n 25209: u8 [a0 + 9] = 0\n 25212: u8 [a0 + 8] = 0\n 25215: u8 [a0 + 7] = 0\n 25218: u8 [a0 + 6] = 0\n 25221: u8 [a0 + 5] = 0\n 25224: u8 [a0 + 4] = 0\n 25227: u8 [a0 + 3] = 0xa0\n 25232: u8 [a0 + 2] = 0x79\n 25236: u8 [a0 + 1] = 0xc3\n 25241: u8 [a0 + 0] = 0x8\n 25244: a1 = u64 [sp + 0x168]\n 25248: a0 = a1 + 0x4\n 25251: a1 = a0 <u a1\n 25254: a3 = u64 [sp + 0x178]\n 25258: a2 = a3 + a1\n 25261: a3 = a2 <u a3\n 25264: a3 = a1 if a1 == 0\n 25267: a3 = a3 + s1\n 25270: a1 = a3 <u s1\n 25273: a4 = u64 [sp + 0x170]\n 25277: a4 = a4 + a1\n 25280: u64 [sp + 0x188] = a2\n 25284: u64 [sp + 0x180] = a0\n 25288: u64 [sp + 0x190] = a3\n 25292: a0 = sp + 0x1a0\n 25296: a1 = sp + 0x180\n 25300: u64 [sp + 0x198] = a4\n 25304: ra = 316, jump @272\n      : @367 [@dyn 158] (gas: 5)\n 25310: a0 = u64 [sp + 0x1a8]\n 25314: t0 = u64 [sp + 0x1b8]\n 25318: t1 = u64 [sp + 0x1a0]\n 25322: a3 = u64 [sp + 0x1b0]\n 25326: jump @379\n      : @368 (gas: 1)\n 25329: ra = 318, jump @282\n      : @369 [@dyn 159] (gas: 3)\n 25335: a0 = 0x40\n 25338: a1 = 0x20\n 25341: ra = 320, jump @0\n      : @370 [@dyn 160] (gas: 103)\n 25347: a1 = u8 [a0 + 0x11]\n 25350: a2 = u8 [a0 + 0x10]\n 25353: a3 = u8 [a0 + 0x12]\n 25356: a4 = u8 [a0 + 0x13]\n 25359: a1 = a1 << 0x8\n 25362: a1 = a1 | a2\n 25365: a3 = a3 << 0x10\n 25368: a4 = a4 << 0x18\n 25371: a3 = a3 | a4\n 25374: a1 = a1 | a3\n 25377: a2 = u8 [a0 + 0x15]\n 25380: a3 = u8 [a0 + 0x14]\n 25383: a4 = u8 [a0 + 0x16]\n 25386: a5 = u8 [a0 + 0x17]\n 25389: a2 = a2 << 0x8\n 25392: a2 = a2 | a3\n 25395: a4 = a4 << 0x10\n 25398: a5 = a5 << 0x18\n 25401: a4 = a4 | a5\n 25404: a2 = a2 | a4\n 25407: a2 = a2 << 0x20\n 25410: t0 = a2 | a1\n 25413: a2 = u8 [a0 + 0x1]\n 25416: a3 = u8 [a0]\n 25418: a4 = u8 [a0 + 0x2]\n 25421: a5 = u8 [a0 + 0x3]\n 25424: a2 = a2 << 0x8\n 25427: a2 = a2 | a3\n 25430: a4 = a4 << 0x10\n 25433: a5 = a5 << 0x18\n 25436: a4 = a4 | a5\n 25439: a2 = a2 | a4\n 25442: a3 = u8 [a0 + 0x5]\n 25445: a4 = u8 [a0 + 0x4]\n 25448: a5 = u8 [a0 + 0x6]\n 25451: s1 = u8 [a0 + 0x7]\n 25454: a3 = a3 << 0x8\n 25457: a3 = a3 | a4\n 25460: a5 = a5 << 0x10\n 25463: s1 = s1 << 0x18\n 25466: a5 = a5 | s1\n 25469: a3 = a3 | a5\n 25472: a3 = a3 << 0x20\n 25475: a2 = a2 | a3\n 25478: a3 = u8 [a0 + 0x19]\n 25481: a4 = u8 [a0 + 0x18]\n 25484: a5 = u8 [a0 + 0x1a]\n 25487: s1 = u8 [a0 + 0x1b]\n 25490: a3 = a3 << 0x8\n 25493: a3 = a3 | a4\n 25496: a5 = a5 << 0x10\n 25499: s1 = s1 << 0x18\n 25502: a5 = a5 | s1\n 25505: a3 = a3 | a5\n 25508: a4 = u8 [a0 + 0x1d]\n 25511: a5 = u8 [a0 + 0x1c]\n 25514: s1 = u8 [a0 + 0x1e]\n 25517: a1 = u8 [a0 + 0x1f]\n 25520: a4 = a4 << 0x8\n 25523: a4 = a4 | a5\n 25526: s1 = s1 << 0x10\n 25529: a1 = a1 << 0x18\n 25532: a1 = a1 | s1\n 25535: a1 = a1 | a4\n 25538: a1 = a1 << 0x20\n 25541: a3 = a3 | a1\n 25544: a1 = u8 [a0 + 0x9]\n 25547: a4 = u8 [a0 + 0x8]\n 25550: a5 = u8 [a0 + 0xa]\n 25553: s1 = u8 [a0 + 0xb]\n 25556: a1 = a1 << 0x8\n 25559: a1 = a1 | a4\n 25562: a5 = a5 << 0x10\n 25565: s1 = s1 << 0x18\n 25568: a5 = a5 | s1\n 25571: a1 = a1 | a5\n 25574: a4 = u8 [a0 + 0xd]\n 25577: a5 = u8 [a0 + 0xc]\n 25580: s1 = u8 [a0 + 0xe]\n 25583: a0 = u8 [a0 + 0xf]\n 25586: a4 = a4 << 0x8\n 25589: a4 = a4 | a5\n 25592: s1 = s1 << 0x10\n 25595: a0 = a0 << 0x18\n 25598: a0 = a0 | s1\n 25601: a0 = a0 | a4\n 25604: a0 = a0 << 0x20\n 25607: a0 = a0 | a1\n 25610: s1 = reverse a0\n 25612: a1 = reverse a3\n 25614: a2 = reverse a2\n 25616: a0 = reverse t0\n 25618: u64 [sp + 0x178] = a0\n 25622: u64 [sp + 0x170] = a2\n 25626: a0 = a0 | a2\n 25629: a2 = a1\n 25631: a1 = a1 | s1\n 25634: a1 = a1 | a0\n 25637: a1 = a1 >> 0x20\n 25640: a0 = a0 | s1\n 25643: a0 = a0 << 0x20\n 25646: a0 = a0 | a1\n 25649: jump @380 if a0 != 0\n      : @371 (gas: 5)\n 25653: u64 [sp + 0x168] = a2\n 25657: i32 a0 = a2 + 0\n 25659: a1 = 0x20\n 25662: u64 [sp + 0x160] = a0\n 25666: ra = 322, jump @0\n      : @372 [@dyn 161] (gas: 50)\n 25672: u8 [a0 + 31] = 0\n 25675: u8 [a0 + 30] = 0\n 25678: u8 [a0 + 29] = 0\n 25681: u8 [a0 + 28] = 0\n 25684: u8 [a0 + 27] = 0\n 25687: u8 [a0 + 26] = 0\n 25690: u8 [a0 + 25] = 0\n 25693: u8 [a0 + 24] = 0\n 25696: u8 [a0 + 23] = 0\n 25699: u8 [a0 + 22] = 0\n 25702: u8 [a0 + 21] = 0\n 25705: u8 [a0 + 20] = 0\n 25708: u8 [a0 + 19] = 0\n 25711: u8 [a0 + 18] = 0\n 25714: u8 [a0 + 17] = 0\n 25717: u8 [a0 + 16] = 0\n 25720: u8 [a0 + 15] = 0\n 25723: u8 [a0 + 14] = 0\n 25726: u8 [a0 + 13] = 0\n 25729: u8 [a0 + 12] = 0\n 25732: u8 [a0 + 11] = 0\n 25735: u8 [a0 + 10] = 0\n 25738: u8 [a0 + 9] = 0\n 25741: u8 [a0 + 8] = 0\n 25744: u8 [a0 + 7] = 0\n 25747: u8 [a0 + 6] = 0\n 25750: u8 [a0 + 5] = 0\n 25753: u8 [a0 + 4] = 0\n 25756: u8 [a0 + 3] = 0xa0\n 25761: u8 [a0 + 2] = 0x79\n 25765: u8 [a0 + 1] = 0xc3\n 25770: u8 [a0 + 0] = 0x8\n 25773: a1 = u64 [sp + 0x168]\n 25777: a0 = a1 + 0x4\n 25780: a1 = a0 <u a1\n 25783: a3 = u64 [sp + 0x178]\n 25787: a2 = a3 + a1\n 25790: a3 = a2 <u a3\n 25793: a3 = a1 if a1 == 0\n 25796: a3 = a3 + s1\n 25799: a1 = a3 <u s1\n 25802: a4 = u64 [sp + 0x170]\n 25806: a4 = a4 + a1\n 25809: u64 [sp + 0x2c8] = a2\n 25813: u64 [sp + 0x2c0] = a0\n 25817: u64 [sp + 0x2d0] = a3\n 25821: a0 = sp + 0x2e0\n 25825: a1 = sp + 0x2c0\n 25829: u64 [sp + 0x2d8] = a4\n 25833: ra = 324, jump @298\n      : @373 [@dyn 162] (gas: 5)\n 25839: a0 = u64 [sp + 0x2e8]\n 25843: t0 = u64 [sp + 0x2f8]\n 25847: t1 = u64 [sp + 0x2e0]\n 25851: a3 = u64 [sp + 0x2f0]\n 25855: jump @379\n      : @374 (gas: 3)\n 25858: a0 = 0x40\n 25861: a1 = 0x20\n 25864: ra = 326, jump @0\n      : @375 [@dyn 163] (gas: 103)\n 25870: a1 = u8 [a0 + 0x11]\n 25873: a2 = u8 [a0 + 0x10]\n 25876: a3 = u8 [a0 + 0x12]\n 25879: a4 = u8 [a0 + 0x13]\n 25882: a1 = a1 << 0x8\n 25885: a1 = a1 | a2\n 25888: a3 = a3 << 0x10\n 25891: a4 = a4 << 0x18\n 25894: a3 = a3 | a4\n 25897: a1 = a1 | a3\n 25900: a2 = u8 [a0 + 0x15]\n 25903: a3 = u8 [a0 + 0x14]\n 25906: a4 = u8 [a0 + 0x16]\n 25909: a5 = u8 [a0 + 0x17]\n 25912: a2 = a2 << 0x8\n 25915: a2 = a2 | a3\n 25918: a4 = a4 << 0x10\n 25921: a5 = a5 << 0x18\n 25924: a4 = a4 | a5\n 25927: a2 = a2 | a4\n 25930: a2 = a2 << 0x20\n 25933: t0 = a2 | a1\n 25936: a2 = u8 [a0 + 0x1]\n 25939: a3 = u8 [a0]\n 25941: a4 = u8 [a0 + 0x2]\n 25944: a5 = u8 [a0 + 0x3]\n 25947: a2 = a2 << 0x8\n 25950: a2 = a2 | a3\n 25953: a4 = a4 << 0x10\n 25956: a5 = a5 << 0x18\n 25959: a4 = a4 | a5\n 25962: a2 = a2 | a4\n 25965: a3 = u8 [a0 + 0x5]\n 25968: a4 = u8 [a0 + 0x4]\n 25971: a5 = u8 [a0 + 0x6]\n 25974: s1 = u8 [a0 + 0x7]\n 25977: a3 = a3 << 0x8\n 25980: a3 = a3 | a4\n 25983: a5 = a5 << 0x10\n 25986: s1 = s1 << 0x18\n 25989: a5 = a5 | s1\n 25992: a3 = a3 | a5\n 25995: a3 = a3 << 0x20\n 25998: a2 = a2 | a3\n 26001: a3 = u8 [a0 + 0x19]\n 26004: a4 = u8 [a0 + 0x18]\n 26007: a5 = u8 [a0 + 0x1a]\n 26010: s1 = u8 [a0 + 0x1b]\n 26013: a3 = a3 << 0x8\n 26016: a3 = a3 | a4\n 26019: a5 = a5 << 0x10\n 26022: s1 = s1 << 0x18\n 26025: a5 = a5 | s1\n 26028: a3 = a3 | a5\n 26031: a4 = u8 [a0 + 0x1d]\n 26034: a5 = u8 [a0 + 0x1c]\n 26037: s1 = u8 [a0 + 0x1e]\n 26040: a1 = u8 [a0 + 0x1f]\n 26043: a4 = a4 << 0x8\n 26046: a4 = a4 | a5\n 26049: s1 = s1 << 0x10\n 26052: a1 = a1 << 0x18\n 26055: a1 = a1 | s1\n 26058: a1 = a1 | a4\n 26061: a1 = a1 << 0x20\n 26064: a3 = a3 | a1\n 26067: a1 = u8 [a0 + 0x9]\n 26070: a4 = u8 [a0 + 0x8]\n 26073: a5 = u8 [a0 + 0xa]\n 26076: s1 = u8 [a0 + 0xb]\n 26079: a1 = a1 << 0x8\n 26082: a1 = a1 | a4\n 26085: a5 = a5 << 0x10\n 26088: s1 = s1 << 0x18\n 26091: a5 = a5 | s1\n 26094: a1 = a1 | a5\n 26097: a4 = u8 [a0 + 0xd]\n 26100: a5 = u8 [a0 + 0xc]\n 26103: s1 = u8 [a0 + 0xe]\n 26106: a0 = u8 [a0 + 0xf]\n 26109: a4 = a4 << 0x8\n 26112: a4 = a4 | a5\n 26115: s1 = s1 << 0x10\n 26118: a0 = a0 << 0x18\n 26121: a0 = a0 | s1\n 26124: a0 = a0 | a4\n 26127: a0 = a0 << 0x20\n 26130: a0 = a0 | a1\n 26133: s1 = reverse a0\n 26135: a1 = reverse a3\n 26137: a2 = reverse a2\n 26139: a0 = reverse t0\n 26141: u64 [sp + 0x178] = a0\n 26145: u64 [sp + 0x170] = a2\n 26149: a0 = a0 | a2\n 26152: a2 = a1\n 26154: a1 = a1 | s1\n 26157: a1 = a1 | a0\n 26160: a1 = a1 >> 0x20\n 26163: a0 = a0 | s1\n 26166: a0 = a0 << 0x20\n 26169: a0 = a0 | a1\n 26172: jump @380 if a0 != 0\n      : @376 (gas: 5)\n 26176: u64 [sp + 0x168] = a2\n 26180: i32 a0 = a2 + 0\n 26182: a1 = 0x20\n 26185: u64 [sp + 0x160] = a0\n 26189: ra = 328, jump @0\n      : @377 [@dyn 164] (gas: 50)\n 26195: u8 [a0 + 31] = 0\n 26198: u8 [a0 + 30] = 0\n 26201: u8 [a0 + 29] = 0\n 26204: u8 [a0 + 28] = 0\n 26207: u8 [a0 + 27] = 0\n 26210: u8 [a0 + 26] = 0\n 26213: u8 [a0 + 25] = 0\n 26216: u8 [a0 + 24] = 0\n 26219: u8 [a0 + 23] = 0\n 26222: u8 [a0 + 22] = 0\n 26225: u8 [a0 + 21] = 0\n 26228: u8 [a0 + 20] = 0\n 26231: u8 [a0 + 19] = 0\n 26234: u8 [a0 + 18] = 0\n 26237: u8 [a0 + 17] = 0\n 26240: u8 [a0 + 16] = 0\n 26243: u8 [a0 + 15] = 0\n 26246: u8 [a0 + 14] = 0\n 26249: u8 [a0 + 13] = 0\n 26252: u8 [a0 + 12] = 0\n 26255: u8 [a0 + 11] = 0\n 26258: u8 [a0 + 10] = 0\n 26261: u8 [a0 + 9] = 0\n 26264: u8 [a0 + 8] = 0\n 26267: u8 [a0 + 7] = 0\n 26270: u8 [a0 + 6] = 0\n 26273: u8 [a0 + 5] = 0\n 26276: u8 [a0 + 4] = 0\n 26279: u8 [a0 + 3] = 0xa0\n 26284: u8 [a0 + 2] = 0x79\n 26288: u8 [a0 + 1] = 0xc3\n 26293: u8 [a0 + 0] = 0x8\n 26296: a1 = u64 [sp + 0x168]\n 26300: a0 = a1 + 0x4\n 26303: a1 = a0 <u a1\n 26306: a3 = u64 [sp + 0x178]\n 26310: a2 = a3 + a1\n 26313: a3 = a2 <u a3\n 26316: a3 = a1 if a1 == 0\n 26319: a3 = a3 + s1\n 26322: a1 = a3 <u s1\n 26325: a4 = u64 [sp + 0x170]\n 26329: a4 = a4 + a1\n 26332: u64 [sp + 0x208] = a2\n 26336: u64 [sp + 0x200] = a0\n 26340: u64 [sp + 0x210] = a3\n 26344: a0 = sp + 0x220\n 26348: a1 = sp + 0x200\n 26352: u64 [sp + 0x218] = a4\n 26356: ra = 330, jump @306\n      : @378 [@dyn 165] (gas: 5)\n 26362: a0 = u64 [sp + 0x228]\n 26366: t0 = u64 [sp + 0x238]\n 26370: t1 = u64 [sp + 0x220]\n 26374: a3 = u64 [sp + 0x230]\n 26378: fallthrough\n      : @379 (gas: 26)\n 26379: a1 = u64 [sp + 0x178]\n 26383: a4 = a0 ^ a1\n 26386: a5 = a0 <u a1\n 26389: t2 = a1\n 26391: a2 = u64 [sp + 0x168]\n 26395: a1 = t1 <u a2\n 26398: a5 = a1 if a4 == 0\n 26401: a4 = a3 - s1\n 26404: a3 = a3 <u s1\n 26407: s1 = u64 [sp + 0x170]\n 26411: s1 = t0 - s1\n 26414: s1 = s1 - a3\n 26417: a3 = a4 <u a5\n 26420: s1 = s1 - a3\n 26423: a4 = a4 - a5\n 26426: a0 = a0 - t2\n 26429: a1 = a0 - a1\n 26432: a0 = t1 - a2\n 26435: a1 = a1 | s1\n 26438: a2 = a0 | a4\n 26441: a2 = a2 | a1\n 26444: a1 = a1 | a4\n 26447: a2 = a2 >> 0x20\n 26450: a1 = a1 << 0x20\n 26453: a1 = a1 | a2\n 26456: jump @389 if a1 == 0\n      : @380 (gas: 1)\n 26460: trap\n      : @381 (gas: 3)\n 26461: a0 = 0\n 26463: a1 = 0\n 26465: ra = 332, jump @0\n      : @382 [@dyn 166] (gas: 5)\n 26471: i32 a1 = a0 + 0\n 26473: a0 = 0x1\n 26476: a2 = 0\n 26478: ecalli 14 // 'seal_return'\n 26480: fallthrough\n      : @383 (gas: 8)\n 26481: u64 [sp + 496] = 0\n 26485: u64 [sp + 488] = 0\n 26489: u64 [sp + 480] = 0\n 26493: a0 = 0x4e487b7100000000\n 26503: a1 = sp + 0x1e0\n 26507: u64 [sp + 0x1f8] = a0\n 26511: a0 = 0\n 26513: ra = 334, jump @8\n      : @384 [@dyn 167] (gas: 8)\n 26519: u64 [sp + 472] = 0\n 26523: u64 [sp + 464] = 0\n 26527: u64 [sp + 448] = 0x41\n 26532: a0 = 0x4\n 26535: a1 = sp + 0x1c0\n 26539: u64 [sp + 456] = 0\n 26543: ra = 0x152\n 26547: jump @8\n      : @385 (gas: 8)\n 26550: u64 [sp + 624] = 0\n 26554: u64 [sp + 616] = 0\n 26558: u64 [sp + 608] = 0\n 26562: a0 = 0x4e487b7100000000\n 26572: a1 = sp + 0x260\n 26576: u64 [sp + 0x278] = a0\n 26580: a0 = 0\n 26582: ra = 336, jump @8\n      : @386 [@dyn 168] (gas: 7)\n 26588: u64 [sp + 600] = 0\n 26592: u64 [sp + 592] = 0\n 26596: u64 [sp + 576] = 0x11\n 26601: a0 = 0x4\n 26604: a1 = sp + 0x240\n 26608: u64 [sp + 584] = 0\n 26612: ra = 338, jump @8\n      : @387 [@dyn 169] (gas: 3)\n 26618: a1 = 0x24\n 26621: a0 = 0\n 26623: ra = 340, jump @0\n      : @388 [@dyn 170] (gas: 5)\n 26629: i32 a1 = a0 + 0\n 26631: a0 = 0x1\n 26634: a2 = 0x24\n 26637: ecalli 14 // 'seal_return'\n 26639: fallthrough\n      : @389 (gas: 4)\n 26640: i32 s1 = a0 + 0\n 26642: a0 = u64 [sp + 0x160]\n 26646: a1 = s1\n 26648: ra = 342, jump @0\n      : @390 [@dyn 171] (gas: 6)\n 26654: i32 a1 = a0 + 0\n 26656: a0 = 0x1\n 26659: a2 = s1\n 26661: ra = 0x158\n 26665: ecalli 14 // 'seal_return'\n 26667: fallthrough\n      : @391 [@dyn 172] (gas: 5)\n 26668: u64 [a0 + 24] = 0\n 26671: u64 [a0 + 16] = 0\n 26674: u64 [a0 + 8] = 0\n 26677: u64 [a0 + 0] = 0\n 26679: ret\n      : @392 (gas: 17)\n 26681: sp = sp + 0xffffffffffffffa0\n 26684: u64 [sp + 0x58] = ra\n 26687: u64 [sp + 0x50] = s0\n 26690: u64 [sp + 0x48] = s1\n 26693: a3 = u64 [a1 + 0x18]\n 26696: a4 = u64 [a1 + 0x10]\n 26699: a5 = u64 [a1 + 0x8]\n 26702: s1 = u64 [a1]\n 26704: a1 = a5 | a3\n 26707: a2 = s1 | a4\n 26710: a2 = a2 | a1\n 26713: a2 = a2 >> 0x20\n 26716: a1 = a1 | a4\n 26719: a1 = a1 << 0x20\n 26722: a1 = a1 | a2\n 26725: u64 [sp + 0x28] = a0\n 26728: jump @399 if a1 != 0\n      : @393 (gas: 19)\n 26732: a0 = s1 + 0x20\n 26735: u64 [sp + 0x30] = a0\n 26738: a0 = a0 <u s1\n 26741: a1 = a5 + a0\n 26744: u64 [sp + 0x40] = a1\n 26747: u64 [sp + 0x8] = a5\n 26750: s0 = a1 <u a5\n 26753: s0 = a0 if a0 == 0\n 26756: s0 = s0 + a4\n 26759: u64 [sp + 0x10] = a4\n 26762: a0 = s0 <u a4\n 26765: u64 [sp + 0x18] = a3\n 26768: a0 = a0 + a3\n 26771: u64 [sp + 0x38] = a0\n 26774: u64 [sp] = s1\n 26776: i32 a0 = s1 + 0\n 26778: a1 = 0x20\n 26781: s1 = 0x20\n 26784: ra = 346, jump @0\n      : @394 [@dyn 173] (gas: 45)\n 26790: u8 [a0 + 0x1f] = s1\n 26793: a1 = u64 [sp + 0x30]\n 26796: s1 = a1\n 26798: a1 = a1 | s0\n 26801: a2 = u64 [sp + 0x40]\n 26804: a4 = u64 [sp + 0x38]\n 26807: a2 = a2 | a4\n 26810: a1 = a1 | a2\n 26813: a1 = a1 >> 0x20\n 26816: u64 [sp + 0x20] = s0\n 26819: a2 = a2 | s0\n 26822: a2 = a2 << 0x20\n 26825: a1 = a1 | a2\n 26828: u8 [a0 + 30] = 0\n 26831: u8 [a0 + 29] = 0\n 26834: u8 [a0 + 28] = 0\n 26837: u8 [a0 + 27] = 0\n 26840: u8 [a0 + 26] = 0\n 26843: u8 [a0 + 25] = 0\n 26846: u8 [a0 + 24] = 0\n 26849: u8 [a0 + 23] = 0\n 26852: u8 [a0 + 22] = 0\n 26855: u8 [a0 + 21] = 0\n 26858: u8 [a0 + 20] = 0\n 26861: u8 [a0 + 19] = 0\n 26864: u8 [a0 + 18] = 0\n 26867: u8 [a0 + 17] = 0\n 26870: u8 [a0 + 16] = 0\n 26873: u8 [a0 + 15] = 0\n 26876: u8 [a0 + 14] = 0\n 26879: u8 [a0 + 13] = 0\n 26882: u8 [a0 + 12] = 0\n 26885: u8 [a0 + 11] = 0\n 26888: u8 [a0 + 10] = 0\n 26891: u8 [a0 + 9] = 0\n 26894: u8 [a0 + 8] = 0\n 26897: u8 [a0 + 7] = 0\n 26900: u8 [a0 + 6] = 0\n 26903: u8 [a0 + 5] = 0\n 26906: u8 [a0 + 4] = 0\n 26909: u8 [a0 + 3] = 0\n 26912: u8 [a0 + 2] = 0\n 26915: u8 [a0 + 1] = 0\n 26918: u8 [a0 + 0] = 0\n 26920: jump @399 if a1 != 0\n      : @395 (gas: 4)\n 26924: i32 s0 = s1 + 0\n 26926: a1 = 0x20\n 26929: a0 = s0\n 26931: ra = 348, jump @0\n      : @396 [@dyn 174] (gas: 41)\n 26937: u8 [a0 + 31] = 0x1d\n 26941: u8 [a0 + 30] = 0\n 26944: u8 [a0 + 29] = 0\n 26947: u8 [a0 + 28] = 0\n 26950: u8 [a0 + 27] = 0\n 26953: u8 [a0 + 26] = 0\n 26956: u8 [a0 + 25] = 0\n 26959: u8 [a0 + 24] = 0\n 26962: u8 [a0 + 23] = 0\n 26965: u8 [a0 + 22] = 0\n 26968: u8 [a0 + 21] = 0\n 26971: u8 [a0 + 20] = 0\n 26974: u8 [a0 + 19] = 0\n 26977: u8 [a0 + 18] = 0\n 26980: u8 [a0 + 17] = 0\n 26983: u8 [a0 + 16] = 0\n 26986: u8 [a0 + 15] = 0\n 26989: u8 [a0 + 14] = 0\n 26992: u8 [a0 + 13] = 0\n 26995: u8 [a0 + 12] = 0\n 26998: u8 [a0 + 11] = 0\n 27001: u8 [a0 + 10] = 0\n 27004: u8 [a0 + 9] = 0\n 27007: u8 [a0 + 8] = 0\n 27010: u8 [a0 + 7] = 0\n 27013: u8 [a0 + 6] = 0\n 27016: u8 [a0 + 5] = 0\n 27019: u8 [a0 + 4] = 0\n 27022: u8 [a0 + 3] = 0\n 27025: u8 [a0 + 2] = 0\n 27028: u8 [a0 + 1] = 0\n 27031: a1 = u64 [sp + 0x20]\n 27034: a2 = u64 [sp + 0x38]\n 27037: a1 = a1 | a2\n 27040: a2 = 0xffffffe0\n 27050: a2 = s1 <u a2\n 27053: a3 = u64 [sp + 0x40]\n 27056: a2 = 0 if a3 != 0\n 27058: a2 = 0 if a1 != 0\n 27060: u8 [a0 + 0] = 0\n 27062: jump @399 if a2 == 0\n      : @397 (gas: 3)\n 27066: i32 a0 = s0 + 0x20\n 27069: a1 = 0x20\n 27072: ra = 350, jump @0\n      : @398 [@dyn 175] (gas: 54)\n 27078: u8 [a0 + 26] = 0x70\n 27082: u8 [a0 + 21] = 0x62\n 27086: u8 [a0 + 24] = 0x65\n 27090: u8 [a0 + 22] = 0x65\n 27094: u8 [a0 + 12] = 0x65\n 27098: u8 [a0 + 25] = 0x6d\n 27102: u8 [a0 + 11] = 0x6d\n 27106: u8 [a0 + 17] = 0x6e\n 27110: u8 [a0 + 16] = 0x6e\n 27114: u8 [a0 + 9] = 0x6e\n 27118: u8 [a0 + 31] = 0\n 27121: u8 [a0 + 30] = 0\n 27124: u8 [a0 + 29] = 0\n 27127: u8 [a0 + 23] = 0x20\n 27131: u8 [a0 + 20] = 0x20\n 27135: u8 [a0 + 13] = 0x20\n 27139: u8 [a0 + 8] = 0x20\n 27143: u8 [a0 + 7] = 0x3a\n 27147: u8 [a0 + 28] = 0x79\n 27151: u8 [a0 + 6] = 0x79\n 27155: u8 [a0 + 5] = 0x72\n 27159: u8 [a0 + 18] = 0x6f\n 27163: u8 [a0 + 4] = 0x6f\n 27167: u8 [a0 + 27] = 0x74\n 27171: u8 [a0 + 19] = 0x74\n 27175: u8 [a0 + 3] = 0x74\n 27179: u8 [a0 + 14] = 0x63\n 27183: u8 [a0 + 2] = 0x63\n 27187: u8 [a0 + 15] = 0x61\n 27191: u8 [a0 + 10] = 0x61\n 27195: u8 [a0 + 1] = 0x61\n 27199: u8 [a0 + 0] = 0x46\n 27202: a1 = u64 [sp]\n 27204: a0 = a1 + 0x60\n 27207: a1 = a0 <u a1\n 27210: a3 = u64 [sp + 0x8]\n 27213: a2 = a3 + a1\n 27216: a3 = a2 <u a3\n 27219: a3 = a1 if a1 == 0\n 27222: a1 = u64 [sp + 0x10]\n 27225: a3 = a3 + a1\n 27228: a1 = a3 <u a1\n 27231: a4 = u64 [sp + 0x18]\n 27234: a1 = a1 + a4\n 27237: a4 = u64 [sp + 0x28]\n 27240: u64 [a4] = a0\n 27242: u64 [a4 + 0x8] = a2\n 27245: u64 [a4 + 0x10] = a3\n 27248: u64 [a4 + 0x18] = a1\n 27251: ra = u64 [sp + 0x58]\n 27254: s0 = u64 [sp + 0x50]\n 27257: s1 = u64 [sp + 0x48]\n 27260: sp = sp + 0x60\n 27263: ret\n      : @399 (gas: 1)\n 27265: trap\n      : @400 (gas: 17)\n 27266: sp = sp + 0xffffffffffffff98\n 27269: u64 [sp + 0x60] = ra\n 27272: u64 [sp + 0x58] = s0\n 27275: u64 [sp + 0x50] = s1\n 27278: a3 = u64 [a1 + 0x18]\n 27281: a4 = u64 [a1 + 0x10]\n 27284: a5 = u64 [a1 + 0x8]\n 27287: s1 = u64 [a1]\n 27289: a1 = a5 | a3\n 27292: a2 = s1 | a4\n 27295: a2 = a2 | a1\n 27298: a2 = a2 >> 0x20\n 27301: a1 = a1 | a4\n 27304: a1 = a1 << 0x20\n 27307: a1 = a1 | a2\n 27310: u64 [sp + 0x28] = a0\n 27313: jump @409 if a1 != 0\n      : @401 (gas: 19)\n 27317: a0 = s1 + 0x20\n 27320: u64 [sp + 0x40] = a0\n 27323: a0 = a0 <u s1\n 27326: a1 = a5 + a0\n 27329: u64 [sp + 0x48] = a1\n 27332: u64 [sp + 0x10] = a5\n 27335: s0 = a1 <u a5\n 27338: s0 = a0 if a0 == 0\n 27341: s0 = s0 + a4\n 27344: u64 [sp + 0x18] = a4\n 27347: a0 = s0 <u a4\n 27350: u64 [sp + 0x20] = a3\n 27353: a0 = a0 + a3\n 27356: u64 [sp + 0x38] = a0\n 27359: u64 [sp + 0x8] = s1\n 27362: i32 a0 = s1 + 0\n 27364: a1 = 0x20\n 27367: s1 = 0x20\n 27370: ra = 352, jump @0\n      : @402 [@dyn 176] (gas: 43)\n 27376: u8 [a0 + 0x1f] = s1\n 27379: a1 = u64 [sp + 0x40]\n 27382: a1 = a1 | s0\n 27385: a2 = u64 [sp + 0x48]\n 27388: a3 = u64 [sp + 0x38]\n 27391: a2 = a2 | a3\n 27394: a1 = a1 | a2\n 27397: a1 = a1 >> 0x20\n 27400: a2 = a2 | s0\n 27403: a2 = a2 << 0x20\n 27406: a1 = a1 | a2\n 27409: u8 [a0 + 30] = 0\n 27412: u8 [a0 + 29] = 0\n 27415: u8 [a0 + 28] = 0\n 27418: u8 [a0 + 27] = 0\n 27421: u8 [a0 + 26] = 0\n 27424: u8 [a0 + 25] = 0\n 27427: u8 [a0 + 24] = 0\n 27430: u8 [a0 + 23] = 0\n 27433: u8 [a0 + 22] = 0\n 27436: u8 [a0 + 21] = 0\n 27439: u8 [a0 + 20] = 0\n 27442: u8 [a0 + 19] = 0\n 27445: u8 [a0 + 18] = 0\n 27448: u8 [a0 + 17] = 0\n 27451: u8 [a0 + 16] = 0\n 27454: u8 [a0 + 15] = 0\n 27457: u8 [a0 + 14] = 0\n 27460: u8 [a0 + 13] = 0\n 27463: u8 [a0 + 12] = 0\n 27466: u8 [a0 + 11] = 0\n 27469: u8 [a0 + 10] = 0\n 27472: u8 [a0 + 9] = 0\n 27475: u8 [a0 + 8] = 0\n 27478: u8 [a0 + 7] = 0\n 27481: u8 [a0 + 6] = 0\n 27484: u8 [a0 + 5] = 0\n 27487: u8 [a0 + 4] = 0\n 27490: u8 [a0 + 3] = 0\n 27493: u8 [a0 + 2] = 0\n 27496: u8 [a0 + 1] = 0\n 27499: u8 [a0 + 0] = 0\n 27501: jump @409 if a1 != 0\n      : @403 (gas: 5)\n 27505: s1 = u64 [sp + 0x40]\n 27508: i32 a0 = s1 + 0\n 27510: a1 = 0x20\n 27513: u64 [sp + 0x30] = a0\n 27516: ra = 354, jump @0\n      : @404 [@dyn 177] (gas: 44)\n 27522: u8 [a0 + 31] = 0x2d\n 27526: u8 [a0 + 30] = 0\n 27529: u8 [a0 + 29] = 0\n 27532: u8 [a0 + 28] = 0\n 27535: u8 [a0 + 27] = 0\n 27538: u8 [a0 + 26] = 0\n 27541: u8 [a0 + 25] = 0\n 27544: u8 [a0 + 24] = 0\n 27547: u8 [a0 + 23] = 0\n 27550: u8 [a0 + 22] = 0\n 27553: u8 [a0 + 21] = 0\n 27556: u8 [a0 + 20] = 0\n 27559: u8 [a0 + 19] = 0\n 27562: u8 [a0 + 18] = 0\n 27565: u8 [a0 + 17] = 0\n 27568: u8 [a0 + 16] = 0\n 27571: u8 [a0 + 15] = 0\n 27574: u8 [a0 + 14] = 0\n 27577: u8 [a0 + 13] = 0\n 27580: u8 [a0 + 12] = 0\n 27583: u8 [a0 + 11] = 0\n 27586: u8 [a0 + 10] = 0\n 27589: u8 [a0 + 9] = 0\n 27592: u8 [a0 + 8] = 0\n 27595: u8 [a0 + 7] = 0\n 27598: u8 [a0 + 6] = 0\n 27601: u8 [a0 + 5] = 0\n 27604: u8 [a0 + 4] = 0\n 27607: u8 [a0 + 3] = 0\n 27610: u8 [a0 + 2] = 0\n 27613: u8 [a0 + 1] = 0\n 27616: a1 = u64 [sp + 0x38]\n 27619: a3 = s0 | a1\n 27622: s0 = 0x1\n 27625: a1 = 0x100000000\n 27635: u64 [sp] = a1\n 27637: a1 = 0xffffffe0\n 27647: a1 = s1 <u a1\n 27650: a2 = u64 [sp + 0x48]\n 27653: a1 = 0 if a2 != 0\n 27655: u64 [sp + 0x38] = a3\n 27658: a1 = 0 if a3 != 0\n 27660: u8 [a0 + 0] = 0\n 27662: jump @409 if a1 == 0\n      : @405 (gas: 4)\n 27666: a0 = u64 [sp + 0x30]\n 27669: i32 a0 = a0 + 0x20\n 27672: a1 = 0x20\n 27675: ra = 356, jump @0\n      : @406 [@dyn 178] (gas: 44)\n 27681: u8 [a0 + 31] = 0x61\n 27685: u8 [a0 + 29] = 0x6c\n 27689: u8 [a0 + 22] = 0x76\n 27693: u8 [a0 + 15] = 0x6d\n 27697: u8 [a0 + 12] = 0x6b\n 27701: u8 [a0 + 30] = 0x65\n 27705: u8 [a0 + 28] = 0x20\n 27709: u8 [a0 + 25] = 0x20\n 27713: u8 [a0 + 19] = 0x20\n 27717: u8 [a0 + 14] = 0x20\n 27721: u8 [a0 + 8] = 0x20\n 27725: u8 [a0 + 7] = 0x3a\n 27729: u8 [a0 + 6] = 0x79\n 27733: u8 [a0 + 20] = 0x63\n 27737: u8 [a0 + 2] = 0x63\n 27741: u8 [a0 + 27] = 0x74\n 27745: u8 [a0 + 26] = 0x61\n 27749: u8 [a0 + 11] = 0x61\n 27753: u8 [a0 + 1] = 0x61\n 27757: u8 [a0 + 0] = 0x46\n 27760: u8 [a0 + 24] = 0x72\n 27764: u8 [a0 + 23] = 0x65\n 27768: a1 = u64 [sp]\n 27770: a1 = a1 + 0xffffffffffffffc0\n 27773: a2 = u64 [sp + 0x40]\n 27776: a1 = a2 <u a1\n 27779: a5 = 0x6f\n 27782: u8 [a0 + 0x15] = a5\n 27785: u8 [a0 + 18] = 0x74\n 27789: a2 = u64 [sp + 0x48]\n 27792: a1 = 0 if a2 != 0\n 27794: a4 = 0x73\n 27797: u8 [a0 + 0x11] = a4\n 27800: a2 = u64 [sp + 0x38]\n 27803: a1 = 0 if a2 != 0\n 27805: u8 [a0 + 16] = 0x75\n 27809: u8 [a0 + 13] = 0x65\n 27813: u8 [a0 + 10] = 0x74\n 27817: u8 [a0 + 0x9] = a4\n 27820: u8 [a0 + 5] = 0x72\n 27824: s1 = 0x74\n 27827: u8 [a0 + 0x4] = a5\n 27830: u8 [a0 + 0x3] = s1\n 27833: jump @409 if a1 == 0\n      : @407 (gas: 5)\n 27837: a0 = u64 [sp + 0x30]\n 27840: i32 a0 = a0 + 0x40\n 27843: a1 = 0x20\n 27846: s0 = 0x20\n 27849: ra = 358, jump @0\n      : @408 [@dyn 179] (gas: 54)\n 27855: u8 [a0 + 12] = 0x64\n 27859: u8 [a0 + 10] = 0x75\n 27863: u8 [a0 + 9] = 0x66\n 27867: u8 [a0 + 7] = 0x72\n 27871: u8 [a0 + 8] = 0x65\n 27875: u8 [a0 + 5] = 0x65\n 27879: u8 [a0 + 11] = 0x6e\n 27883: u8 [a0 + 4] = 0x6e\n 27887: u8 [a0 + 3] = 0x6f\n 27891: u8 [a0 + 0x6] = s0\n 27894: u8 [a0 + 0x2] = s0\n 27897: u8 [a0 + 0x1] = s1\n 27900: u8 [a0 + 31] = 0\n 27903: u8 [a0 + 30] = 0\n 27906: u8 [a0 + 29] = 0\n 27909: u8 [a0 + 28] = 0\n 27912: u8 [a0 + 27] = 0\n 27915: u8 [a0 + 26] = 0\n 27918: u8 [a0 + 25] = 0\n 27921: u8 [a0 + 24] = 0\n 27924: u8 [a0 + 23] = 0\n 27927: u8 [a0 + 22] = 0\n 27930: u8 [a0 + 21] = 0\n 27933: u8 [a0 + 20] = 0\n 27936: u8 [a0 + 19] = 0\n 27939: u8 [a0 + 18] = 0\n 27942: u8 [a0 + 17] = 0\n 27945: u8 [a0 + 16] = 0\n 27948: u8 [a0 + 15] = 0\n 27951: u8 [a0 + 14] = 0\n 27954: u8 [a0 + 13] = 0\n 27957: u8 [a0 + 0] = 0x73\n 27960: a1 = u64 [sp + 0x8]\n 27963: a0 = a1 + 0x80\n 27967: a1 = a0 <u a1\n 27970: a3 = u64 [sp + 0x10]\n 27973: a2 = a3 + a1\n 27976: a3 = a2 <u a3\n 27979: a3 = a1 if a1 == 0\n 27982: a1 = u64 [sp + 0x18]\n 27985: a3 = a3 + a1\n 27988: a1 = a3 <u a1\n 27991: a4 = u64 [sp + 0x20]\n 27994: a1 = a1 + a4\n 27997: a4 = u64 [sp + 0x28]\n 28000: u64 [a4] = a0\n 28002: u64 [a4 + 0x8] = a2\n 28005: u64 [a4 + 0x10] = a3\n 28008: u64 [a4 + 0x18] = a1\n 28011: ra = u64 [sp + 0x60]\n 28014: s0 = u64 [sp + 0x58]\n 28017: s1 = u64 [sp + 0x50]\n 28020: sp = sp + 0x68\n 28023: ret\n      : @409 (gas: 1)\n 28025: trap\n      : @410 (gas: 18)\n 28026: sp = sp + 0xffffffffffffff60\n 28030: u64 [sp + 0x98] = ra\n 28034: u64 [sp + 0x90] = s0\n 28038: u64 [sp + 0x88] = s1\n 28042: s0 = sp + 0xa0\n 28046: sp = sp & 0xfffffffffffffff0\n 28049: a2 = u64 [a1 + 0x18]\n 28052: u64 [sp + 0x30] = a2\n 28055: a2 = u64 [a1 + 0x10]\n 28058: u64 [sp + 0x28] = a2\n 28061: a2 = u64 [a1 + 0x8]\n 28064: u64 [sp + 0x20] = a2\n 28067: a1 = u64 [a1]\n 28069: u64 [sp + 0x18] = a1\n 28072: u64 [sp + 0x38] = a0\n 28075: a0 = 0x40\n 28078: a1 = 0x20\n 28081: ra = 360, jump @0\n      : @411 [@dyn 180] (gas: 130)\n 28087: a1 = u8 [a0 + 0x19]\n 28090: a2 = u8 [a0 + 0x18]\n 28093: a3 = u8 [a0 + 0x1a]\n 28096: a4 = u8 [a0 + 0x1b]\n 28099: a1 = a1 << 0x8\n 28102: a1 = a1 | a2\n 28105: a3 = a3 << 0x10\n 28108: a4 = a4 << 0x18\n 28111: a3 = a3 | a4\n 28114: a1 = a1 | a3\n 28117: a2 = u8 [a0 + 0x1d]\n 28120: a3 = u8 [a0 + 0x1c]\n 28123: a4 = u8 [a0 + 0x1e]\n 28126: a5 = u8 [a0 + 0x1f]\n 28129: a2 = a2 << 0x8\n 28132: a2 = a2 | a3\n 28135: a4 = a4 << 0x10\n 28138: a5 = a5 << 0x18\n 28141: a4 = a4 | a5\n 28144: a2 = a2 | a4\n 28147: a2 = a2 << 0x20\n 28150: t0 = a2 | a1\n 28153: a2 = u8 [a0 + 0x11]\n 28156: a3 = u8 [a0 + 0x10]\n 28159: a4 = u8 [a0 + 0x12]\n 28162: a5 = u8 [a0 + 0x13]\n 28165: a2 = a2 << 0x8\n 28168: a2 = a2 | a3\n 28171: a4 = a4 << 0x10\n 28174: a5 = a5 << 0x18\n 28177: a4 = a4 | a5\n 28180: a2 = a2 | a4\n 28183: a3 = u8 [a0 + 0x15]\n 28186: a4 = u8 [a0 + 0x14]\n 28189: a5 = u8 [a0 + 0x16]\n 28192: s1 = u8 [a0 + 0x17]\n 28195: a3 = a3 << 0x8\n 28198: a3 = a3 | a4\n 28201: a5 = a5 << 0x10\n 28204: s1 = s1 << 0x18\n 28207: a5 = a5 | s1\n 28210: a3 = a3 | a5\n 28213: a3 = a3 << 0x20\n 28216: a2 = a2 | a3\n 28219: a3 = u8 [a0 + 0x9]\n 28222: a4 = u8 [a0 + 0x8]\n 28225: a5 = u8 [a0 + 0xa]\n 28228: s1 = u8 [a0 + 0xb]\n 28231: a3 = a3 << 0x8\n 28234: a3 = a3 | a4\n 28237: a5 = a5 << 0x10\n 28240: s1 = s1 << 0x18\n 28243: a5 = a5 | s1\n 28246: a3 = a3 | a5\n 28249: a4 = u8 [a0 + 0xd]\n 28252: a5 = u8 [a0 + 0xc]\n 28255: s1 = u8 [a0 + 0xe]\n 28258: a1 = u8 [a0 + 0xf]\n 28261: a4 = a4 << 0x8\n 28264: a4 = a4 | a5\n 28267: s1 = s1 << 0x10\n 28270: a1 = a1 << 0x18\n 28273: a1 = a1 | s1\n 28276: a1 = a1 | a4\n 28279: a1 = a1 << 0x20\n 28282: a3 = a3 | a1\n 28285: a1 = u8 [a0 + 0x1]\n 28288: a4 = u8 [a0]\n 28290: a5 = u8 [a0 + 0x2]\n 28293: s1 = u8 [a0 + 0x3]\n 28296: a1 = a1 << 0x8\n 28299: a1 = a1 | a4\n 28302: a5 = a5 << 0x10\n 28305: s1 = s1 << 0x18\n 28308: a5 = a5 | s1\n 28311: a1 = a1 | a5\n 28314: a4 = u8 [a0 + 0x5]\n 28317: a5 = u8 [a0 + 0x4]\n 28320: s1 = u8 [a0 + 0x6]\n 28323: a0 = u8 [a0 + 0x7]\n 28326: a4 = a4 << 0x8\n 28329: a4 = a4 | a5\n 28332: s1 = s1 << 0x10\n 28335: a0 = a0 << 0x18\n 28338: a0 = a0 | s1\n 28341: a0 = a0 | a4\n 28344: a0 = a0 << 0x20\n 28347: a0 = a0 | a1\n 28350: t1 = reverse a0\n 28352: t2 = reverse a3\n 28354: s1 = reverse a2\n 28356: a5 = reverse t0\n 28358: a1 = u64 [sp + 0x18]\n 28361: a0 = a1 + 0x1f\n 28364: a1 = a0 <u a1\n 28367: a3 = u64 [sp + 0x20]\n 28370: a2 = a3 + a1\n 28373: a3 = a2 <u a3\n 28376: a3 = a1 if a1 == 0\n 28379: a1 = u64 [sp + 0x28]\n 28382: a3 = a3 + a1\n 28385: a1 = a3 <u a1\n 28388: a4 = u64 [sp + 0x30]\n 28391: a1 = a1 + a4\n 28394: a0 = a0 & 0xffffffffffffffe0\n 28397: a0 = a0 + a5\n 28400: u64 [sp + 0x28] = a5\n 28403: u64 [sp + 0x10] = a0\n 28406: a4 = a0 <u a5\n 28409: a2 = a2 + s1\n 28412: a5 = a2 + a4\n 28415: a2 = a5 ^ s1\n 28418: u64 [sp + 0x30] = s1\n 28421: a0 = a5 <u s1\n 28424: a0 = a4 if a2 == 0\n 28427: a3 = a3 + t2\n 28430: a4 = a3 + a0\n 28433: s1 = a4 <u a3\n 28436: a2 = a3 <u t2\n 28439: a1 = a1 + t1\n 28442: a1 = a1 + a2\n 28445: s1 = s1 + a1\n 28448: a1 = a4 >u 0\n 28450: a2 = s1 >u 0\n 28452: a2 = a1 if s1 == 0\n 28455: a1 = a4 | s1\n 28458: u64 [sp + 0x8] = a5\n 28461: a3 = a5 >u 0\n 28463: a3 = a2 if a1 != 0\n 28466: jump @415 if a3 != 0\n      : @412 (gas: 8)\n 28470: a1 = a4 <u t2\n 28473: a2 = s1 ^ t1\n 28476: a3 = s1 <u t1\n 28479: a3 = a1 if a2 == 0\n 28482: a1 = a4 ^ t2\n 28485: a1 = a1 | a2\n 28488: a0 = a3 if a1 != 0\n 28491: jump @415 if a0 != 0\n      : @413 (gas: 6)\n 28495: a0 = 0x40\n 28498: a1 = 0x20\n 28501: u64 [sp + 0x20] = t2\n 28504: u64 [sp + 0x18] = t1\n 28507: u64 [sp] = a4\n 28509: ra = 362, jump @0\n      : @414 [@dyn 181] (gas: 82)\n 28515: a1 = reverse s1\n 28517: a2 = u64 [sp]\n 28519: a2 = reverse a2\n 28521: a3 = u64 [sp + 0x8]\n 28524: a3 = reverse a3\n 28526: a4 = u64 [sp + 0x10]\n 28529: a4 = reverse a4\n 28531: u8 [a0 + 0x18] = a4\n 28534: a5 = a4 >> 0x38\n 28537: u8 [a0 + 0x1f] = a5\n 28540: a5 = a4 >> 0x30\n 28543: u8 [a0 + 0x1e] = a5\n 28546: a5 = a4 >> 0x28\n 28549: u8 [a0 + 0x1d] = a5\n 28552: a5 = a4 >> 0x20\n 28555: u8 [a0 + 0x1c] = a5\n 28558: a5 = a4 >> 0x18\n 28561: u8 [a0 + 0x1b] = a5\n 28564: a5 = a4 >> 0x10\n 28567: u8 [a0 + 0x1a] = a5\n 28570: a4 = a4 >> 0x8\n 28573: u8 [a0 + 0x19] = a4\n 28576: u8 [a0 + 0x10] = a3\n 28579: a4 = a3 >> 0x38\n 28582: u8 [a0 + 0x17] = a4\n 28585: a4 = a3 >> 0x30\n 28588: u8 [a0 + 0x16] = a4\n 28591: a4 = a3 >> 0x28\n 28594: u8 [a0 + 0x15] = a4\n 28597: a4 = a3 >> 0x20\n 28600: u8 [a0 + 0x14] = a4\n 28603: a4 = a3 >> 0x18\n 28606: u8 [a0 + 0x13] = a4\n 28609: a4 = a3 >> 0x10\n 28612: u8 [a0 + 0x12] = a4\n 28615: a3 = a3 >> 0x8\n 28618: u8 [a0 + 0x11] = a3\n 28621: u8 [a0 + 0x8] = a2\n 28624: a3 = a2 >> 0x38\n 28627: u8 [a0 + 0xf] = a3\n 28630: a3 = a2 >> 0x30\n 28633: u8 [a0 + 0xe] = a3\n 28636: a3 = a2 >> 0x28\n 28639: u8 [a0 + 0xd] = a3\n 28642: a3 = a2 >> 0x20\n 28645: u8 [a0 + 0xc] = a3\n 28648: a3 = a2 >> 0x18\n 28651: u8 [a0 + 0xb] = a3\n 28654: a3 = a2 >> 0x10\n 28657: u8 [a0 + 0xa] = a3\n 28660: a2 = a2 >> 0x8\n 28663: u8 [a0 + 0x9] = a2\n 28666: u8 [a0] = a1\n 28668: a2 = a1 >> 0x38\n 28671: u8 [a0 + 0x7] = a2\n 28674: a2 = a1 >> 0x30\n 28677: u8 [a0 + 0x6] = a2\n 28680: a2 = a1 >> 0x28\n 28683: u8 [a0 + 0x5] = a2\n 28686: a2 = a1 >> 0x20\n 28689: u8 [a0 + 0x4] = a2\n 28692: a2 = a1 >> 0x18\n 28695: u8 [a0 + 0x3] = a2\n 28698: a2 = a1 >> 0x10\n 28701: u8 [a0 + 0x2] = a2\n 28704: a1 = a1 >> 0x8\n 28707: u8 [a0 + 0x1] = a1\n 28710: a0 = u64 [sp + 0x38]\n 28713: a1 = u64 [sp + 0x28]\n 28716: u64 [a0] = a1\n 28718: a1 = u64 [sp + 0x18]\n 28721: u64 [a0 + 0x18] = a1\n 28724: a1 = u64 [sp + 0x30]\n 28727: u64 [a0 + 0x8] = a1\n 28730: a1 = u64 [sp + 0x20]\n 28733: u64 [a0 + 0x10] = a1\n 28736: sp = s0 + 0xffffffffffffff60\n 28740: ra = u64 [sp + 0x98]\n 28744: s0 = u64 [sp + 0x90]\n 28748: s1 = u64 [sp + 0x88]\n 28752: sp = sp + 0xa0\n 28756: ret\n      : @415 (gas: 8)\n 28758: u64 [sp + 112] = 0\n 28761: u64 [sp + 104] = 0\n 28764: u64 [sp + 96] = 0\n 28767: a0 = 0x4e487b7100000000\n 28777: a1 = sp + 0x60\n 28780: u64 [sp + 0x78] = a0\n 28783: a0 = 0\n 28785: ra = 364, jump @8\n      : @416 [@dyn 182] (gas: 7)\n 28791: u64 [sp + 88] = 0\n 28794: u64 [sp + 80] = 0\n 28797: u64 [sp + 64] = 0x41\n 28801: a0 = 0x4\n 28804: a1 = sp + 0x40\n 28807: u64 [sp + 72] = 0\n 28810: ra = 366, jump @8\n      : @417 [@dyn 183] (gas: 3)\n 28816: a1 = 0x24\n 28819: a0 = 0\n 28821: ra = 368, jump @0\n      : @418 [@dyn 184] (gas: 6)\n 28827: i32 a1 = a0 + 0\n 28829: a0 = 0x1\n 28832: a2 = 0x24\n 28835: ra = 0x172\n 28839: ecalli 14 // 'seal_return'\n 28841: fallthrough\n      : @419 [@dyn 185] (gas: 7)\n 28842: a3 = u64 [a1 + 0x18]\n 28845: a4 = u64 [a1 + 0x10]\n 28848: a2 = u64 [a1 + 0x8]\n 28851: a3 = a3 | a4\n 28854: a4 = a2 <u 0x1\n 28857: a4 = 0 if a3 != 0\n 28859: jump @421 if a4 == 0\n      : @420 (gas: 16)\n 28862: a1 = u64 [a1]\n 28864: a3 = a1 + 0x1f\n 28867: a1 = a3 <u a1\n 28870: a1 = a1 + a2\n 28873: a1 = a1 & 0x1\n 28876: a3 = a3 & 0xffffffffffffffe0\n 28879: a2 = a3 + 0x20\n 28882: a3 = a2 <u a3\n 28885: a4 = a1 + a3\n 28888: a1 = a4 <u a1\n 28891: a1 = a3 if a3 == 0\n 28894: u64 [a0 + 24] = 0\n 28897: u64 [a0] = a2\n 28899: u64 [a0 + 0x8] = a4\n 28902: u64 [a0 + 0x10] = a1\n 28905: ret\n      : @421 (gas: 13)\n 28907: sp = sp + 0xffffffffffffffb0\n 28910: u64 [sp + 0x48] = ra\n 28913: u64 [sp + 0x40] = s0\n 28916: s0 = sp + 0x50\n 28919: sp = sp & 0xfffffffffffffff0\n 28922: u64 [sp + 48] = 0\n 28925: u64 [sp + 40] = 0\n 28928: u64 [sp + 32] = 0\n 28931: a0 = 0x4e487b7100000000\n 28941: a1 = sp + 0x20\n 28944: u64 [sp + 0x38] = a0\n 28947: a0 = 0\n 28949: ra = 372, jump @8\n      : @422 [@dyn 186] (gas: 7)\n 28955: u64 [sp + 24] = 0\n 28958: u64 [sp + 16] = 0\n 28961: u64 [sp + 0] = 0x41\n 28964: a0 = 0x4\n 28967: a1 = sp\n 28969: u64 [sp + 8] = 0\n 28972: ra = 374, jump @8\n      : @423 [@dyn 187] (gas: 3)\n 28978: a1 = 0x24\n 28981: a0 = 0\n 28983: ra = 376, jump @0\n      : @424 [@dyn 188] (gas: 6)\n 28989: i32 a1 = a0 + 0\n 28991: a0 = 0x1\n 28994: a2 = 0x24\n 28997: ra = 0x17a\n 29001: ecalli 14 // 'seal_return'\n 29003: fallthrough\n      : @425 [@dyn 189] (gas: 16)\n 29004: sp = sp + 0xffffffffffffffa8\n 29007: u64 [sp + 0x50] = ra\n 29010: u64 [sp + 0x48] = s0\n 29013: u64 [sp + 0x40] = s1\n 29016: a3 = u64 [a0 + 0x10]\n 29019: a4 = u64 [a0 + 0x18]\n 29022: a5 = u64 [a0 + 0x8]\n 29025: a0 = u64 [a0]\n 29027: a4 = a4 | a5\n 29030: a5 = a0 | a3\n 29033: a5 = a5 | a4\n 29036: a5 = a5 >> 0x20\n 29039: a3 = a3 | a4\n 29042: a3 = a3 << 0x20\n 29045: a3 = a3 | a5\n 29048: jump @433 if a3 != 0\n      : @426 (gas: 12)\n 29052: a4 = u64 [a2 + 0x18]\n 29055: a5 = u64 [a2 + 0x10]\n 29058: s0 = u64 [a2]\n 29060: s1 = u64 [a2 + 0x8]\n 29063: a2 = s0 | a5\n 29066: a3 = s1 | a4\n 29069: a2 = a2 | a3\n 29072: a2 = a2 >> 0x20\n 29075: a3 = a3 | a5\n 29078: a3 = a3 << 0x20\n 29081: a2 = a2 | a3\n 29084: jump @433 if a2 != 0\n      : @427 (gas: 18)\n 29088: u64 [sp + 0x28] = s1\n 29091: u64 [sp + 0x30] = a5\n 29094: u64 [sp + 0x38] = a4\n 29097: a2 = u64 [a1 + 0x18]\n 29100: a3 = u64 [a1 + 0x10]\n 29103: a5 = u64 [a1]\n 29105: a4 = u64 [a1 + 0x8]\n 29108: a1 = a5 | a3\n 29111: u64 [sp + 0x20] = a2\n 29114: u64 [sp + 0x10] = a4\n 29117: a2 = a2 | a4\n 29120: a1 = a1 | a2\n 29123: a1 = a1 >> 0x20\n 29126: u64 [sp + 0x18] = a3\n 29129: a2 = a2 | a3\n 29132: a2 = a2 << 0x20\n 29135: a1 = a1 | a2\n 29138: jump @433 if a1 != 0\n      : @428 (gas: 7)\n 29142: i32 a0 = a0 + 0\n 29144: u64 [sp + 0x8] = a0\n 29147: i32 a0 = a5 + 0\n 29149: i32 s1 = s0 + 0\n 29151: a1 = s1\n 29153: u64 [sp] = a5\n 29155: ra = 380, jump @0\n      : @429 [@dyn 190] (gas: 5)\n 29161: i32 a0 = a0 + 0\n 29163: a1 = s1\n 29165: a2 = u64 [sp + 0x8]\n 29168: ecalli 2 // 'call_data_copy'\n 29170: fallthrough\n      : @430 (gas: 29)\n 29171: a0 = u64 [sp]\n 29173: a0 = a0 + s0\n 29176: a1 = a0 <u s0\n 29179: a4 = u64 [sp + 0x28]\n 29182: a2 = u64 [sp + 0x10]\n 29185: a2 = a2 + a4\n 29188: a2 = a2 + a1\n 29191: a3 = a2 ^ a4\n 29194: a4 = a2 <u a4\n 29197: a4 = a1 if a3 == 0\n 29200: a5 = u64 [sp + 0x30]\n 29203: a1 = u64 [sp + 0x18]\n 29206: a1 = a1 + a5\n 29209: a4 = a4 + a1\n 29212: a3 = a4 <u a1\n 29215: a1 = a1 <u a5\n 29218: a5 = u64 [sp + 0x38]\n 29221: s1 = u64 [sp + 0x20]\n 29224: a5 = a5 + s1\n 29227: a1 = a1 + a5\n 29230: a1 = a1 + a3\n 29233: a3 = a0 | a4\n 29236: a1 = a1 | a2\n 29239: a3 = a3 | a1\n 29242: a3 = a3 >> 0x20\n 29245: a1 = a1 | a4\n 29248: a1 = a1 << 0x20\n 29251: a1 = a1 | a3\n 29254: jump @433 if a1 != 0\n      : @431 (gas: 3)\n 29257: i32 a0 = a0 + 0\n 29259: a1 = 0x20\n 29262: ra = 382, jump @0\n      : @432 [@dyn 191] (gas: 37)\n 29268: u8 [a0 + 31] = 0\n 29271: u8 [a0 + 30] = 0\n 29274: u8 [a0 + 29] = 0\n 29277: u8 [a0 + 28] = 0\n 29280: u8 [a0 + 27] = 0\n 29283: u8 [a0 + 26] = 0\n 29286: u8 [a0 + 25] = 0\n 29289: u8 [a0 + 24] = 0\n 29292: u8 [a0 + 23] = 0\n 29295: u8 [a0 + 22] = 0\n 29298: u8 [a0 + 21] = 0\n 29301: u8 [a0 + 20] = 0\n 29304: u8 [a0 + 19] = 0\n 29307: u8 [a0 + 18] = 0\n 29310: u8 [a0 + 17] = 0\n 29313: u8 [a0 + 16] = 0\n 29316: u8 [a0 + 15] = 0\n 29319: u8 [a0 + 14] = 0\n 29322: u8 [a0 + 13] = 0\n 29325: u8 [a0 + 12] = 0\n 29328: u8 [a0 + 11] = 0\n 29331: u8 [a0 + 10] = 0\n 29334: u8 [a0 + 9] = 0\n 29337: u8 [a0 + 8] = 0\n 29340: u8 [a0 + 7] = 0\n 29343: u8 [a0 + 6] = 0\n 29346: u8 [a0 + 5] = 0\n 29349: u8 [a0 + 4] = 0\n 29352: u8 [a0 + 3] = 0\n 29355: u8 [a0 + 2] = 0\n 29358: u8 [a0 + 1] = 0\n 29361: u8 [a0 + 0] = 0\n 29363: ra = u64 [sp + 0x50]\n 29366: s0 = u64 [sp + 0x48]\n 29369: s1 = u64 [sp + 0x40]\n 29372: sp = sp + 0x58\n 29375: ret\n      : @433 (gas: 1)\n 29377: trap\n      : @434 (gas: 16)\n 29378: sp = sp + 0xfffffffffffffee0\n 29382: u64 [sp + 0x118] = ra\n 29386: u64 [sp + 0x110] = s0\n 29390: u64 [sp + 0x108] = s1\n 29394: s0 = sp + 0x120\n 29398: sp = sp & 0xfffffffffffffff0\n 29401: a4 = u64 [a2 + 0x18]\n 29404: a5 = u64 [a2 + 0x10]\n 29407: s1 = u64 [a2 + 0x8]\n 29410: u64 [sp + 0x50] = a4\n 29413: u64 [sp + 0x48] = a5\n 29416: a4 = a4 | a5\n 29419: a5 = s1 <u 0x1\n 29422: a5 = 0 if a4 != 0\n 29424: u64 [sp] = a0\n 29426: jump @448 if a5 == 0\n      : @435 (gas: 35)\n 29430: a0 = u64 [a3 + 0x18]\n 29433: u64 [sp + 0x18] = a0\n 29436: a0 = u64 [a3 + 0x10]\n 29439: u64 [sp + 0x20] = a0\n 29442: a0 = u64 [a3 + 0x8]\n 29445: u64 [sp + 0x8] = a0\n 29448: a0 = u64 [a3]\n 29450: u64 [sp + 0x10] = a0\n 29453: a2 = u64 [a2]\n 29455: a0 = u64 [a1 + 0x18]\n 29458: u64 [sp + 0x70] = a0\n 29461: a0 = u64 [a1 + 0x10]\n 29464: u64 [sp + 0x78] = a0\n 29467: a0 = u64 [a1 + 0x8]\n 29470: u64 [sp + 0x68] = a0\n 29473: a0 = u64 [a1]\n 29475: u64 [sp + 0x60] = a0\n 29478: a0 = a2 + 0x1f\n 29481: u64 [sp + 0x40] = a2\n 29484: a1 = a0 <u a2\n 29487: a1 = a1 + s1\n 29490: a1 = a1 & 0x1\n 29493: a0 = a0 & 0xffffffffffffffe0\n 29496: a2 = a0 + 0x20\n 29499: a0 = a2 <u a0\n 29502: a3 = a1 + a0\n 29505: a4 = a3 <u a1\n 29508: a4 = a0 if a0 == 0\n 29511: u64 [sp + 216] = 0\n 29515: u64 [sp + 0xc0] = a2\n 29519: u64 [sp + 0xc8] = a3\n 29523: a0 = sp + 0xe0\n 29527: a1 = sp + 0xc0\n 29531: u64 [sp + 0xd0] = a4\n 29535: ra = 384, jump @410\n      : @436 [@dyn 192] (gas: 15)\n 29541: a0 = u64 [sp + 0xf8]\n 29545: a2 = u64 [sp + 0xf0]\n 29549: a1 = u64 [sp + 0xe8]\n 29553: a3 = u64 [sp + 0xe0]\n 29557: u64 [sp + 0x58] = a0\n 29560: u64 [sp + 0x30] = a1\n 29563: a0 = a0 | a1\n 29566: a1 = a3 | a2\n 29569: a1 = a1 | a0\n 29572: a1 = a1 >> 0x20\n 29575: u64 [sp + 0x38] = a2\n 29578: a0 = a0 | a2\n 29581: a0 = a0 << 0x20\n 29584: a0 = a0 | a1\n 29587: jump @447 if a0 != 0\n      : @437 (gas: 4)\n 29591: u64 [sp + 0x28] = a3\n 29594: i32 a0 = a3 + 0\n 29596: a1 = 0x20\n 29599: ra = 386, jump @0\n      : @438 [@dyn 193] (gas: 102)\n 29605: t2 = u64 [sp + 0x40]\n 29608: a1 = u64 [sp + 0x60]\n 29611: a1 = a1 + t2\n 29614: a3 = a1 <u t2\n 29617: a2 = u64 [sp + 0x68]\n 29620: a2 = a2 + s1\n 29623: a4 = a2 + a3\n 29626: a5 = a4 ^ s1\n 29629: a2 = a4 <u s1\n 29632: a2 = a3 if a5 == 0\n 29635: a5 = u64 [sp + 0x8]\n 29638: a3 = a4 ^ a5\n 29641: a4 = a5 <u a4\n 29644: a5 = u64 [sp + 0x10]\n 29647: a1 = a5 <u a1\n 29650: ra = u64 [sp + 0x48]\n 29653: a5 = u64 [sp + 0x78]\n 29656: a5 = a5 + ra\n 29659: a1 = a4 if a3 != 0\n 29662: a3 = a5 <u ra\n 29665: t1 = u64 [sp + 0x50]\n 29668: a4 = u64 [sp + 0x70]\n 29671: a4 = a4 + t1\n 29674: a3 = a3 + a4\n 29677: a2 = a2 + a5\n 29680: a4 = a2 <u a5\n 29683: a3 = a3 + a4\n 29686: a5 = u64 [sp + 0x18]\n 29689: a4 = a3 ^ a5\n 29692: a3 = a5 <u a3\n 29695: t0 = u64 [sp + 0x20]\n 29698: a5 = t0 <u a2\n 29701: a3 = a5 if a4 == 0\n 29704: a2 = a2 ^ t0\n 29707: a2 = a2 | a4\n 29710: a1 = a3 if a2 != 0\n 29713: a2 = reverse t2\n 29715: a3 = a2 >> 0x38\n 29718: u8 [a0 + 0x1f] = a3\n 29721: a3 = a2 >> 0x30\n 29724: u8 [a0 + 0x1e] = a3\n 29727: a3 = a2 >> 0x28\n 29730: u8 [a0 + 0x1d] = a3\n 29733: a3 = a2 >> 0x20\n 29736: u8 [a0 + 0x1c] = a3\n 29739: a3 = a2 >> 0x18\n 29742: u8 [a0 + 0x1b] = a3\n 29745: a3 = a2 >> 0x10\n 29748: u8 [a0 + 0x1a] = a3\n 29751: a3 = a2 >> 0x8\n 29754: u8 [a0 + 0x19] = a3\n 29757: a3 = reverse s1\n 29759: u8 [a0 + 0x18] = a2\n 29762: a2 = a3 >> 0x38\n 29765: u8 [a0 + 0x17] = a2\n 29768: a2 = a3 >> 0x30\n 29771: u8 [a0 + 0x16] = a2\n 29774: a2 = a3 >> 0x28\n 29777: u8 [a0 + 0x15] = a2\n 29780: a2 = a3 >> 0x20\n 29783: u8 [a0 + 0x14] = a2\n 29786: a2 = a3 >> 0x18\n 29789: u8 [a0 + 0x13] = a2\n 29792: a2 = a3 >> 0x10\n 29795: u8 [a0 + 0x12] = a2\n 29798: a2 = reverse ra\n 29800: u8 [a0 + 0x10] = a3\n 29803: a3 = a3 >> 0x8\n 29806: u8 [a0 + 0x11] = a3\n 29809: a3 = a2 >> 0x38\n 29812: u8 [a0 + 0xf] = a3\n 29815: a3 = a2 >> 0x30\n 29818: u8 [a0 + 0xe] = a3\n 29821: a3 = a2 >> 0x28\n 29824: u8 [a0 + 0xd] = a3\n 29827: a3 = a2 >> 0x20\n 29830: u8 [a0 + 0xc] = a3\n 29833: a3 = a2 >> 0x18\n 29836: u8 [a0 + 0xb] = a3\n 29839: a3 = a2 >> 0x10\n 29842: u8 [a0 + 0xa] = a3\n 29845: a3 = reverse t1\n 29847: u8 [a0 + 0x8] = a2\n 29850: a2 = a2 >> 0x8\n 29853: u8 [a0 + 0x9] = a2\n 29856: a2 = a3 >> 0x38\n 29859: u8 [a0 + 0x7] = a2\n 29862: a2 = a3 >> 0x30\n 29865: u8 [a0 + 0x6] = a2\n 29868: a2 = a3 >> 0x28\n 29871: u8 [a0 + 0x5] = a2\n 29874: a2 = a3 >> 0x20\n 29877: u8 [a0 + 0x4] = a2\n 29880: a2 = a3 >> 0x18\n 29883: u8 [a0 + 0x3] = a2\n 29886: a2 = a3 >> 0x10\n 29889: u8 [a0 + 0x2] = a2\n 29892: u8 [a0] = a3\n 29894: a3 = a3 >> 0x8\n 29897: u8 [a0 + 0x1] = a3\n 29900: t0 = u64 [sp + 0x60]\n 29903: jump @452 if a1 != 0\n      : @439 (gas: 12)\n 29907: a2 = u64 [sp + 0x78]\n 29910: a0 = t0 | a2\n 29913: a1 = u64 [sp + 0x70]\n 29916: a3 = u64 [sp + 0x68]\n 29919: a1 = a1 | a3\n 29922: a0 = a0 | a1\n 29925: a0 = a0 >> 0x20\n 29928: a1 = a1 | a2\n 29931: a1 = a1 << 0x20\n 29934: a0 = a0 | a1\n 29937: a3 = u64 [sp + 0x58]\n 29940: jump @447 if a0 != 0\n      : @440 (gas: 11)\n 29944: a0 = t2 | ra\n 29947: a1 = s1 | t1\n 29950: a0 = a0 | a1\n 29953: a0 = a0 >> 0x20\n 29956: a1 = a1 | ra\n 29959: a1 = a1 << 0x20\n 29962: a0 = a0 | a1\n 29965: a2 = u64 [sp + 0x38]\n 29968: a4 = u64 [sp + 0x30]\n 29971: a5 = u64 [sp + 0x28]\n 29974: jump @447 if a0 != 0\n      : @441 (gas: 7)\n 29978: u64 [sp + 0x78] = s1\n 29981: a0 = a2 | a3\n 29984: a1 = 0xffffffe0\n 29994: a1 = a5 <u a1\n 29997: a1 = 0 if a4 != 0\n 29999: a1 = 0 if a0 != 0\n 30001: jump @447 if a1 == 0\n      : @442 (gas: 16)\n 30005: s1 = a5 + 0x20\n 30008: a0 = s1 <u a5\n 30011: a1 = a4 + a0\n 30014: u64 [sp + 0x20] = a1\n 30017: a1 = a1 <u a4\n 30020: a1 = a0 if a0 == 0\n 30023: a1 = a1 + a2\n 30026: u64 [sp + 0x68] = a1\n 30029: a0 = a1 <u a2\n 30032: u64 [sp + 0x70] = a0\n 30035: i32 t0 = t0 + 0\n 30037: u64 [sp + 0x60] = t0\n 30040: i32 a0 = s1 + 0\n 30042: i32 a1 = t2 + 0\n 30044: u64 [sp + 0x18] = a1\n 30047: ra = 388, jump @0\n      : @443 [@dyn 194] (gas: 5)\n 30053: i32 a0 = a0 + 0\n 30055: a1 = u64 [sp + 0x18]\n 30058: a2 = u64 [sp + 0x60]\n 30061: ecalli 2 // 'call_data_copy'\n 30063: fallthrough\n      : @444 (gas: 31)\n 30064: a0 = u64 [sp + 0x40]\n 30067: a0 = a0 + s1\n 30070: a1 = a0 <u s1\n 30073: a2 = u64 [sp + 0x78]\n 30076: a4 = u64 [sp + 0x20]\n 30079: a2 = a2 + a4\n 30082: a2 = a2 + a1\n 30085: a3 = a2 ^ a4\n 30088: a4 = a2 <u a4\n 30091: a4 = a1 if a3 == 0\n 30094: a1 = u64 [sp + 0x48]\n 30097: a3 = u64 [sp + 0x68]\n 30100: a1 = a1 + a3\n 30103: a4 = a4 + a1\n 30106: t0 = a4 <u a1\n 30109: a1 = a1 <u a3\n 30112: a5 = u64 [sp + 0x50]\n 30115: s1 = u64 [sp + 0x58]\n 30118: a5 = a5 + s1\n 30121: a3 = u64 [sp + 0x70]\n 30124: a5 = a5 + a3\n 30127: a1 = a1 + a5\n 30130: a1 = a1 + t0\n 30133: a3 = a0 | a4\n 30136: a1 = a1 | a2\n 30139: a3 = a3 | a1\n 30142: a3 = a3 >> 0x20\n 30145: a1 = a1 | a4\n 30148: a1 = a1 << 0x20\n 30151: a1 = a1 | a3\n 30154: jump @447 if a1 != 0\n      : @445 (gas: 3)\n 30158: i32 a0 = a0 + 0\n 30160: a1 = 0x20\n 30163: ra = 390, jump @0\n      : @446 [@dyn 195] (gas: 46)\n 30169: u8 [a0 + 31] = 0\n 30172: u8 [a0 + 30] = 0\n 30175: u8 [a0 + 29] = 0\n 30178: u8 [a0 + 28] = 0\n 30181: u8 [a0 + 27] = 0\n 30184: u8 [a0 + 26] = 0\n 30187: u8 [a0 + 25] = 0\n 30190: u8 [a0 + 24] = 0\n 30193: u8 [a0 + 23] = 0\n 30196: u8 [a0 + 22] = 0\n 30199: u8 [a0 + 21] = 0\n 30202: u8 [a0 + 20] = 0\n 30205: u8 [a0 + 19] = 0\n 30208: u8 [a0 + 18] = 0\n 30211: u8 [a0 + 17] = 0\n 30214: u8 [a0 + 16] = 0\n 30217: u8 [a0 + 15] = 0\n 30220: u8 [a0 + 14] = 0\n 30223: u8 [a0 + 13] = 0\n 30226: u8 [a0 + 12] = 0\n 30229: u8 [a0 + 11] = 0\n 30232: u8 [a0 + 10] = 0\n 30235: u8 [a0 + 9] = 0\n 30238: u8 [a0 + 8] = 0\n 30241: u8 [a0 + 7] = 0\n 30244: u8 [a0 + 6] = 0\n 30247: u8 [a0 + 5] = 0\n 30250: u8 [a0 + 4] = 0\n 30253: u8 [a0 + 3] = 0\n 30256: u8 [a0 + 2] = 0\n 30259: u8 [a0 + 1] = 0\n 30262: u8 [a0 + 0] = 0\n 30264: a0 = u64 [sp]\n 30266: a1 = u64 [sp + 0x28]\n 30269: u64 [a0] = a1\n 30271: u64 [a0 + 0x18] = s1\n 30274: a1 = u64 [sp + 0x30]\n 30277: u64 [a0 + 0x8] = a1\n 30280: a1 = u64 [sp + 0x38]\n 30283: u64 [a0 + 0x10] = a1\n 30286: sp = s0 + 0xfffffffffffffee0\n 30290: ra = u64 [sp + 0x118]\n 30294: s0 = u64 [sp + 0x110]\n 30298: s1 = u64 [sp + 0x108]\n 30302: sp = sp + 0x120\n 30306: ret\n      : @447 (gas: 1)\n 30308: trap\n      : @448 (gas: 8)\n 30309: u64 [sp + 176] = 0\n 30313: u64 [sp + 168] = 0\n 30317: u64 [sp + 160] = 0\n 30321: a0 = 0x4e487b7100000000\n 30331: a1 = sp + 0xa0\n 30335: u64 [sp + 0xb8] = a0\n 30339: a0 = 0\n 30341: ra = 392, jump @8\n      : @449 [@dyn 196] (gas: 7)\n 30347: u64 [sp + 152] = 0\n 30351: u64 [sp + 144] = 0\n 30355: u64 [sp + 128] = 0x41\n 30360: a0 = 0x4\n 30363: a1 = sp + 0x80\n 30367: u64 [sp + 136] = 0\n 30371: ra = 394, jump @8\n      : @450 [@dyn 197] (gas: 3)\n 30377: a1 = 0x24\n 30380: a0 = 0\n 30382: ra = 396, jump @0\n      : @451 [@dyn 198] (gas: 5)\n 30388: i32 a1 = a0 + 0\n 30390: a0 = 0x1\n 30393: a2 = 0x24\n 30396: ecalli 14 // 'seal_return'\n 30398: fallthrough\n      : @452 (gas: 3)\n 30399: a0 = 0\n 30401: a1 = 0\n 30403: ra = 398, jump @0\n      : @453 [@dyn 199] (gas: 6)\n 30409: i32 a1 = a0 + 0\n 30411: a0 = 0x1\n 30414: a2 = 0\n 30416: ra = 0x190\n 30420: ecalli 14 // 'seal_return'\n 30422: fallthrough\n      : @454 [@dyn 200] (gas: 33)\n 30423: sp = sp + 0xffffffffffffff60\n 30427: u64 [sp + 0x98] = ra\n 30431: u64 [sp + 0x90] = s0\n 30435: u64 [sp + 0x88] = s1\n 30439: s0 = sp + 0xa0\n 30443: sp = sp & 0xfffffffffffffff0\n 30446: t0 = u64 [a1]\n 30448: t1 = u64 [a1 + 0x8]\n 30451: t2 = u64 [a1 + 0x10]\n 30454: ra = u64 [a1 + 0x18]\n 30457: a4 = u64 [a2]\n 30459: a3 = u64 [a2 + 0x8]\n 30462: a5 = u64 [a2 + 0x10]\n 30465: a2 = u64 [a2 + 0x18]\n 30468: a1 = u32 [0x20084]\n 30473: s1 = a0\n 30475: u64 [sp + 24] = 0\n 30478: u64 [sp + 16] = 0\n 30481: u64 [sp + 8] = 0\n 30484: u64 [sp] = a1\n 30486: u64 [sp + 0x38] = a2\n 30489: u64 [sp + 0x30] = a5\n 30492: u64 [sp + 0x28] = a3\n 30495: u64 [sp + 0x20] = a4\n 30498: u64 [sp + 0x58] = ra\n 30501: u64 [sp + 0x50] = t2\n 30504: u64 [sp + 0x48] = t1\n 30507: a0 = sp + 0x60\n 30510: a1 = sp + 0x40\n 30513: a2 = sp + 0x20\n 30516: a3 = sp\n 30518: u64 [sp + 0x40] = t0\n 30521: ra = 402, jump @434\n      : @455 [@dyn 201] (gas: 14)\n 30527: a0 = u64 [sp + 0x70]\n 30530: a1 = u64 [sp + 0x78]\n 30533: a2 = u64 [sp + 0x60]\n 30536: a3 = u64 [sp + 0x68]\n 30539: u64 [s1 + 0x10] = a0\n 30542: u64 [s1 + 0x18] = a1\n 30545: u64 [s1] = a2\n 30547: u64 [s1 + 0x8] = a3\n 30550: sp = s0 + 0xffffffffffffff60\n 30554: ra = u64 [sp + 0x98]\n 30558: s0 = u64 [sp + 0x90]\n 30562: s1 = u64 [sp + 0x88]\n 30566: sp = sp + 0xa0\n 30570: ret\n      : @456 (gas: 17)\n 30572: sp = sp + 0xffffffffffffffa0\n 30575: u64 [sp + 0x58] = ra\n 30578: u64 [sp + 0x50] = s0\n 30581: u64 [sp + 0x48] = s1\n 30584: a3 = u64 [a1 + 0x18]\n 30587: a4 = u64 [a1 + 0x10]\n 30590: a5 = u64 [a1 + 0x8]\n 30593: s1 = u64 [a1]\n 30595: a1 = a5 | a3\n 30598: a2 = s1 | a4\n 30601: a2 = a2 | a1\n 30604: a2 = a2 >> 0x20\n 30607: a1 = a1 | a4\n 30610: a1 = a1 << 0x20\n 30613: a1 = a1 | a2\n 30616: u64 [sp + 0x20] = a0\n 30619: jump @465 if a1 != 0\n      : @457 (gas: 19)\n 30623: a0 = s1 + 0x20\n 30626: u64 [sp + 0x40] = a0\n 30629: a0 = a0 <u s1\n 30632: a1 = a5 + a0\n 30635: u64 [sp + 0x38] = a1\n 30638: u64 [sp + 0x8] = a5\n 30641: s0 = a1 <u a5\n 30644: s0 = a0 if a0 == 0\n 30647: s0 = s0 + a4\n 30650: u64 [sp + 0x10] = a4\n 30653: a0 = s0 <u a4\n 30656: u64 [sp + 0x18] = a3\n 30659: a0 = a0 + a3\n 30662: u64 [sp + 0x30] = a0\n 30665: u64 [sp] = s1\n 30667: i32 a0 = s1 + 0\n 30669: a1 = 0x20\n 30672: s1 = 0x20\n 30675: ra = 404, jump @0\n      : @458 [@dyn 202] (gas: 43)\n 30681: u8 [a0 + 0x1f] = s1\n 30684: a1 = u64 [sp + 0x40]\n 30687: a1 = a1 | s0\n 30690: a2 = u64 [sp + 0x38]\n 30693: a3 = u64 [sp + 0x30]\n 30696: a2 = a2 | a3\n 30699: a1 = a1 | a2\n 30702: a1 = a1 >> 0x20\n 30705: a2 = a2 | s0\n 30708: a2 = a2 << 0x20\n 30711: a1 = a1 | a2\n 30714: u8 [a0 + 30] = 0\n 30717: u8 [a0 + 29] = 0\n 30720: u8 [a0 + 28] = 0\n 30723: u8 [a0 + 27] = 0\n 30726: u8 [a0 + 26] = 0\n 30729: u8 [a0 + 25] = 0\n 30732: u8 [a0 + 24] = 0\n 30735: u8 [a0 + 23] = 0\n 30738: u8 [a0 + 22] = 0\n 30741: u8 [a0 + 21] = 0\n 30744: u8 [a0 + 20] = 0\n 30747: u8 [a0 + 19] = 0\n 30750: u8 [a0 + 18] = 0\n 30753: u8 [a0 + 17] = 0\n 30756: u8 [a0 + 16] = 0\n 30759: u8 [a0 + 15] = 0\n 30762: u8 [a0 + 14] = 0\n 30765: u8 [a0 + 13] = 0\n 30768: u8 [a0 + 12] = 0\n 30771: u8 [a0 + 11] = 0\n 30774: u8 [a0 + 10] = 0\n 30777: u8 [a0 + 9] = 0\n 30780: u8 [a0 + 8] = 0\n 30783: u8 [a0 + 7] = 0\n 30786: u8 [a0 + 6] = 0\n 30789: u8 [a0 + 5] = 0\n 30792: u8 [a0 + 4] = 0\n 30795: u8 [a0 + 3] = 0\n 30798: u8 [a0 + 2] = 0\n 30801: u8 [a0 + 1] = 0\n 30804: u8 [a0 + 0] = 0\n 30806: jump @465 if a1 != 0\n      : @459 (gas: 6)\n 30810: s1 = s0\n 30812: s0 = u64 [sp + 0x40]\n 30815: i32 a0 = s0 + 0\n 30817: a1 = 0x20\n 30820: u64 [sp + 0x28] = a0\n 30823: ra = 406, jump @0\n      : @460 [@dyn 203] (gas: 42)\n 30829: u8 [a0 + 31] = 0x23\n 30833: u8 [a0 + 30] = 0\n 30836: u8 [a0 + 29] = 0\n 30839: u8 [a0 + 28] = 0\n 30842: u8 [a0 + 27] = 0\n 30845: u8 [a0 + 26] = 0\n 30848: u8 [a0 + 25] = 0\n 30851: u8 [a0 + 24] = 0\n 30854: u8 [a0 + 23] = 0\n 30857: u8 [a0 + 22] = 0\n 30860: u8 [a0 + 21] = 0\n 30863: u8 [a0 + 20] = 0\n 30866: u8 [a0 + 19] = 0\n 30869: u8 [a0 + 18] = 0\n 30872: u8 [a0 + 17] = 0\n 30875: u8 [a0 + 16] = 0\n 30878: u8 [a0 + 15] = 0\n 30881: u8 [a0 + 14] = 0\n 30884: u8 [a0 + 13] = 0\n 30887: u8 [a0 + 12] = 0\n 30890: u8 [a0 + 11] = 0\n 30893: u8 [a0 + 10] = 0\n 30896: u8 [a0 + 9] = 0\n 30899: u8 [a0 + 8] = 0\n 30902: u8 [a0 + 7] = 0\n 30905: u8 [a0 + 6] = 0\n 30908: u8 [a0 + 5] = 0\n 30911: u8 [a0 + 4] = 0\n 30914: u8 [a0 + 3] = 0\n 30917: u8 [a0 + 2] = 0\n 30920: u8 [a0 + 1] = 0\n 30923: a1 = u64 [sp + 0x30]\n 30926: a2 = s1 | a1\n 30929: s1 = 0x100000000\n 30939: a1 = 0xffffffe0\n 30949: a1 = s0 <u a1\n 30952: s0 = a2\n 30954: a2 = u64 [sp + 0x38]\n 30957: a1 = 0 if a2 != 0\n 30959: a1 = 0 if s0 != 0\n 30961: u8 [a0 + 0] = 0\n 30963: jump @465 if a1 == 0\n      : @461 (gas: 4)\n 30967: a0 = u64 [sp + 0x28]\n 30970: i32 a0 = a0 + 0x20\n 30973: a1 = 0x20\n 30976: ra = 408, jump @0\n      : @462 [@dyn 204] (gas: 41)\n 30982: u8 [a0 + 27] = 0x64\n 30986: u8 [a0 + 23] = 0x6c\n 30990: u8 [a0 + 19] = 0x6d\n 30994: u8 [a0 + 13] = 0x69\n 30998: u8 [a0 + 12] = 0x76\n 31002: u8 [a0 + 9] = 0x73\n 31006: u8 [a0 + 29] = 0x20\n 31010: u8 [a0 + 21] = 0x20\n 31014: u8 [a0 + 16] = 0x20\n 31018: u8 [a0 + 8] = 0x20\n 31022: u8 [a0 + 7] = 0x3a\n 31026: u8 [a0 + 28] = 0x79\n 31030: u8 [a0 + 6] = 0x79\n 31034: u8 [a0 + 24] = 0x72\n 31038: u8 [a0 + 11] = 0x72\n 31042: u8 [a0 + 5] = 0x72\n 31046: u8 [a0 + 4] = 0x6f\n 31050: u8 [a0 + 30] = 0x74\n 31054: u8 [a0 + 3] = 0x74\n 31058: u8 [a0 + 14] = 0x63\n 31062: u8 [a0 + 2] = 0x63\n 31066: u8 [a0 + 31] = 0x61\n 31070: u8 [a0 + 26] = 0x61\n 31074: u8 [a0 + 22] = 0x61\n 31078: u8 [a0 + 18] = 0x61\n 31082: u8 [a0 + 1] = 0x61\n 31086: u8 [a0 + 0] = 0x46\n 31089: a1 = s1 + 0xffffffffffffffc0\n 31092: a2 = u64 [sp + 0x40]\n 31095: a1 = a2 <u a1\n 31098: a2 = u64 [sp + 0x38]\n 31101: a1 = 0 if a2 != 0\n 31103: s1 = 0x65\n 31106: u8 [a0 + 0x19] = s1\n 31109: u8 [a0 + 0x14] = s1\n 31112: a1 = 0 if s0 != 0\n 31114: s0 = 0x6e\n 31117: u8 [a0 + 0x11] = s0\n 31120: u8 [a0 + 0xf] = s1\n 31123: u8 [a0 + 0xa] = s1\n 31126: jump @465 if a1 == 0\n      : @463 (gas: 4)\n 31130: a0 = u64 [sp + 0x28]\n 31133: i32 a0 = a0 + 0x40\n 31136: a1 = 0x20\n 31139: ra = 410, jump @0\n      : @464 [@dyn 205] (gas: 54)\n 31145: u8 [a0 + 31] = 0\n 31148: u8 [a0 + 30] = 0\n 31151: u8 [a0 + 29] = 0\n 31154: u8 [a0 + 28] = 0\n 31157: u8 [a0 + 27] = 0\n 31160: u8 [a0 + 26] = 0\n 31163: u8 [a0 + 25] = 0\n 31166: u8 [a0 + 24] = 0\n 31169: u8 [a0 + 23] = 0\n 31172: u8 [a0 + 22] = 0\n 31175: u8 [a0 + 21] = 0\n 31178: u8 [a0 + 20] = 0\n 31181: u8 [a0 + 19] = 0\n 31184: u8 [a0 + 18] = 0\n 31187: u8 [a0 + 17] = 0\n 31190: u8 [a0 + 16] = 0\n 31193: u8 [a0 + 15] = 0\n 31196: u8 [a0 + 14] = 0\n 31199: u8 [a0 + 13] = 0\n 31202: u8 [a0 + 12] = 0\n 31205: u8 [a0 + 11] = 0\n 31208: u8 [a0 + 10] = 0\n 31211: u8 [a0 + 9] = 0\n 31214: u8 [a0 + 8] = 0\n 31217: u8 [a0 + 7] = 0\n 31220: u8 [a0 + 6] = 0\n 31223: u8 [a0 + 5] = 0\n 31226: u8 [a0 + 4] = 0\n 31229: u8 [a0 + 3] = 0\n 31232: u8 [a0 + 0x2] = s0\n 31235: u8 [a0 + 0x1] = s1\n 31238: u8 [a0 + 0] = 0x6b\n 31241: a1 = u64 [sp]\n 31243: a0 = a1 + 0x80\n 31247: a1 = a0 <u a1\n 31250: a3 = u64 [sp + 0x8]\n 31253: a2 = a3 + a1\n 31256: a3 = a2 <u a3\n 31259: a3 = a1 if a1 == 0\n 31262: a1 = u64 [sp + 0x10]\n 31265: a3 = a3 + a1\n 31268: a1 = a3 <u a1\n 31271: a4 = u64 [sp + 0x18]\n 31274: a1 = a1 + a4\n 31277: a4 = u64 [sp + 0x20]\n 31280: u64 [a4] = a0\n 31282: u64 [a4 + 0x8] = a2\n 31285: u64 [a4 + 0x10] = a3\n 31288: u64 [a4 + 0x18] = a1\n 31291: ra = u64 [sp + 0x58]\n 31294: s0 = u64 [sp + 0x50]\n 31297: s1 = u64 [sp + 0x48]\n 31300: sp = sp + 0x60\n 31303: ret\n      : @465 (gas: 1)\n 31305: trap\n      : @466 (gas: 20)\n 31306: sp = sp + 0xfffffffffffffec0\n 31310: u64 [sp + 0x138] = ra\n 31314: u64 [sp + 0x130] = s0\n 31318: u64 [sp + 0x128] = s1\n 31322: t1 = u64 [a1 + 0x18]\n 31325: s0 = u64 [a1 + 0x10]\n 31328: s1 = u64 [a1 + 0x8]\n 31331: t0 = u64 [a1]\n 31333: u64 [sp + 0x120] = s1\n 31337: u64 [sp + 0x100] = t1\n 31341: a1 = s1 | t1\n 31344: s1 = t0 | s0\n 31347: s1 = s1 | a1\n 31350: s1 = s1 >> 0x20\n 31353: u64 [sp + 0x110] = s0\n 31357: a1 = a1 | s0\n 31360: a1 = a1 << 0x20\n 31363: a1 = a1 | s1\n 31366: u64 [sp] = a0\n 31368: jump @497 if a1 != 0\n      : @467 (gas: 76)\n 31372: a0 = u64 [sp + 0x160]\n 31376: a1 = u64 [a0 + 0x18]\n 31379: u64 [sp + 0xc0] = a1\n 31383: a1 = u64 [sp + 0x158]\n 31387: s1 = u64 [a0 + 0x10]\n 31390: u64 [sp + 0xb8] = s1\n 31394: s1 = u64 [a0 + 0x8]\n 31397: u64 [sp + 0xb0] = s1\n 31401: a0 = u64 [a0]\n 31403: u64 [sp + 0xf8] = a0\n 31407: a0 = u64 [a1 + 0x18]\n 31410: u64 [sp + 0x10] = a0\n 31413: a0 = u64 [a1 + 0x10]\n 31416: u64 [sp + 0x18] = a0\n 31419: a0 = u64 [sp + 0x150]\n 31423: s1 = u64 [a1 + 0x8]\n 31426: u64 [sp + 0x8] = s1\n 31429: a1 = u64 [a1]\n 31431: u64 [sp + 0x20] = a1\n 31434: a1 = u64 [sp + 0x148]\n 31438: s1 = u64 [a0 + 0x10]\n 31441: u64 [sp + 0x38] = s1\n 31444: s1 = u64 [a0 + 0x8]\n 31447: u64 [sp + 0x30] = s1\n 31450: a0 = u64 [a0]\n 31452: u64 [sp + 0x28] = a0\n 31455: a0 = u64 [a1 + 0x18]\n 31458: u64 [sp + 0xe0] = a0\n 31462: a0 = u64 [sp + 0x140]\n 31466: s1 = u64 [a1 + 0x10]\n 31469: u64 [sp + 0xd8] = s1\n 31473: s1 = u64 [a1 + 0x8]\n 31476: u64 [sp + 0xd0] = s1\n 31480: a1 = u64 [a1]\n 31482: u64 [sp + 0xe8] = a1\n 31486: a1 = u64 [a0 + 0x18]\n 31489: u64 [sp + 0x48] = a1\n 31492: a1 = u64 [a0 + 0x10]\n 31495: u64 [sp + 0x50] = a1\n 31498: a1 = u64 [a0 + 0x8]\n 31501: u64 [sp + 0x40] = a1\n 31504: a0 = u64 [a0]\n 31506: u64 [sp + 0x58] = a0\n 31509: a0 = u64 [a5 + 0x18]\n 31512: u64 [sp + 0x60] = a0\n 31515: a0 = u64 [a5 + 0x10]\n 31518: u64 [sp + 0x68] = a0\n 31521: a0 = u64 [a5 + 0x8]\n 31524: u64 [sp + 0x70] = a0\n 31527: a0 = u64 [a5]\n 31529: u64 [sp + 0x78] = a0\n 31532: a0 = u64 [a4 + 0x10]\n 31535: u64 [sp + 0x90] = a0\n 31539: a0 = u64 [a4 + 0x8]\n 31542: u64 [sp + 0x88] = a0\n 31546: a0 = u64 [a4]\n 31548: u64 [sp + 0x80] = a0\n 31552: a0 = u64 [a3 + 0x18]\n 31555: u64 [sp + 0xa0] = a0\n 31559: a0 = u64 [a3 + 0x10]\n 31562: u64 [sp + 0xa8] = a0\n 31566: a0 = u64 [a3 + 0x8]\n 31569: u64 [sp + 0xc8] = a0\n 31573: a0 = u64 [a2 + 0x10]\n 31576: a1 = u64 [a3]\n 31578: u64 [sp + 0x98] = a1\n 31582: a1 = u64 [a2 + 0x8]\n 31585: u64 [sp + 0xf0] = a1\n 31589: s1 = u64 [a2]\n 31591: a0 = a0 << 0x20\n 31594: s0 = a0 >> 0x20\n 31597: i32 a0 = t0 + 0\n 31599: a1 = 0x20\n 31602: u64 [sp + 0x118] = a0\n 31606: u64 [sp + 0x108] = t0\n 31610: ra = 412, jump @0\n      : @468 [@dyn 206] (gas: 66)\n 31616: a1 = reverse s0\n 31618: a2 = u64 [sp + 0xf0]\n 31622: a2 = reverse a2\n 31624: a3 = reverse s1\n 31626: a4 = a3 >> 0x38\n 31629: u8 [a0 + 0x1f] = a4\n 31632: a4 = a3 >> 0x30\n 31635: u8 [a0 + 0x1e] = a4\n 31638: a4 = a3 >> 0x28\n 31641: u8 [a0 + 0x1d] = a4\n 31644: a4 = a3 >> 0x20\n 31647: u8 [a0 + 0x1c] = a4\n 31650: a4 = a3 >> 0x18\n 31653: u8 [a0 + 0x1b] = a4\n 31656: a4 = a3 >> 0x10\n 31659: u8 [a0 + 0x1a] = a4\n 31662: a4 = a3 >> 0x8\n 31665: u8 [a0 + 0x19] = a4\n 31668: u8 [a0 + 0x18] = a3\n 31671: u8 [a0 + 0x10] = a2\n 31674: u8 [a0 + 11] = 0\n 31677: u8 [a0 + 10] = 0\n 31680: u8 [a0 + 9] = 0\n 31683: u8 [a0 + 7] = 0\n 31686: u8 [a0 + 6] = 0\n 31689: u8 [a0 + 5] = 0\n 31692: u8 [a0 + 4] = 0\n 31695: u8 [a0 + 3] = 0\n 31698: u8 [a0 + 2] = 0\n 31701: u8 [a0 + 1] = 0\n 31704: u8 [a0 + 0] = 0\n 31706: a3 = a2 >> 0x38\n 31709: u8 [a0 + 0x17] = a3\n 31712: a3 = a2 >> 0x30\n 31715: u8 [a0 + 0x16] = a3\n 31718: a3 = a2 >> 0x28\n 31721: u8 [a0 + 0x15] = a3\n 31724: a3 = a2 >> 0x20\n 31727: u8 [a0 + 0x14] = a3\n 31730: a3 = a2 >> 0x18\n 31733: u8 [a0 + 0x13] = a3\n 31736: a3 = a2 >> 0x10\n 31739: u8 [a0 + 0x12] = a3\n 31742: a2 = a2 >> 0x8\n 31745: u8 [a0 + 0x11] = a2\n 31748: u8 [a0 + 0x8] = a1\n 31751: a2 = a1 >> 0x38\n 31754: u8 [a0 + 0xf] = a2\n 31757: a2 = a1 >> 0x30\n 31760: u8 [a0 + 0xe] = a2\n 31763: a2 = a1 >> 0x28\n 31766: u8 [a0 + 0xd] = a2\n 31769: a1 = a1 >> 0x20\n 31772: a2 = u64 [sp + 0x100]\n 31776: a4 = u64 [sp + 0x110]\n 31780: a4 = a4 | a2\n 31783: s1 = 0x100000000\n 31793: a2 = 0xffffffe0\n 31803: s0 = u64 [sp + 0x108]\n 31807: a2 = s0 <u a2\n 31810: a3 = u64 [sp + 0x120]\n 31814: a2 = 0 if a3 != 0\n 31816: u64 [sp + 0xf0] = a4\n 31820: a2 = 0 if a4 != 0\n 31822: u8 [a0 + 0xc] = a1\n 31825: jump @497 if a2 == 0\n      : @469 (gas: 4)\n 31829: a0 = u64 [sp + 0x118]\n 31833: i32 a0 = a0 + 0x20\n 31836: a1 = 0x20\n 31839: ra = 414, jump @0\n      : @470 [@dyn 207] (gas: 75)\n 31845: a1 = u64 [sp + 0xa0]\n 31849: a1 = reverse a1\n 31851: a2 = u64 [sp + 0xa8]\n 31855: a2 = reverse a2\n 31857: a3 = u64 [sp + 0xc8]\n 31861: a3 = reverse a3\n 31863: a4 = u64 [sp + 0x98]\n 31867: a4 = reverse a4\n 31869: a5 = a4 >> 0x38\n 31872: u8 [a0 + 0x1f] = a5\n 31875: a5 = a4 >> 0x30\n 31878: u8 [a0 + 0x1e] = a5\n 31881: a5 = a4 >> 0x28\n 31884: u8 [a0 + 0x1d] = a5\n 31887: a5 = a4 >> 0x20\n 31890: u8 [a0 + 0x1c] = a5\n 31893: a5 = a4 >> 0x18\n 31896: u8 [a0 + 0x1b] = a5\n 31899: a5 = a4 >> 0x10\n 31902: u8 [a0 + 0x1a] = a5\n 31905: a5 = a4 >> 0x8\n 31908: u8 [a0 + 0x19] = a5\n 31911: u8 [a0 + 0x18] = a4\n 31914: u8 [a0 + 0x10] = a3\n 31917: a4 = a3 >> 0x38\n 31920: u8 [a0 + 0x17] = a4\n 31923: a4 = a3 >> 0x30\n 31926: u8 [a0 + 0x16] = a4\n 31929: a4 = a3 >> 0x28\n 31932: u8 [a0 + 0x15] = a4\n 31935: a4 = a3 >> 0x20\n 31938: u8 [a0 + 0x14] = a4\n 31941: a4 = a3 >> 0x18\n 31944: u8 [a0 + 0x13] = a4\n 31947: a4 = a3 >> 0x10\n 31950: u8 [a0 + 0x12] = a4\n 31953: a3 = a3 >> 0x8\n 31956: u8 [a0 + 0x11] = a3\n 31959: u8 [a0 + 0x8] = a2\n 31962: a3 = a2 >> 0x38\n 31965: u8 [a0 + 0xf] = a3\n 31968: a3 = a2 >> 0x30\n 31971: u8 [a0 + 0xe] = a3\n 31974: a3 = a2 >> 0x28\n 31977: u8 [a0 + 0xd] = a3\n 31980: a3 = a2 >> 0x20\n 31983: u8 [a0 + 0xc] = a3\n 31986: a3 = a2 >> 0x18\n 31989: u8 [a0 + 0xb] = a3\n 31992: a3 = a2 >> 0x10\n 31995: u8 [a0 + 0xa] = a3\n 31998: a2 = a2 >> 0x8\n 32001: u8 [a0 + 0x9] = a2\n 32004: u8 [a0] = a1\n 32006: a2 = a1 >> 0x38\n 32009: u8 [a0 + 0x7] = a2\n 32012: a2 = a1 >> 0x30\n 32015: u8 [a0 + 0x6] = a2\n 32018: a2 = a1 >> 0x28\n 32021: u8 [a0 + 0x5] = a2\n 32024: a2 = a1 >> 0x20\n 32027: u8 [a0 + 0x4] = a2\n 32030: a2 = a1 >> 0x18\n 32033: u8 [a0 + 0x3] = a2\n 32036: a2 = a1 >> 0x10\n 32039: u8 [a0 + 0x2] = a2\n 32042: a1 = a1 >> 0x8\n 32045: a2 = s1 + 0xffffffffffffffc0\n 32048: a2 = s0 <u a2\n 32051: a3 = u64 [sp + 0x120]\n 32055: a2 = 0 if a3 != 0\n 32057: a3 = u64 [sp + 0xf0]\n 32061: a2 = 0 if a3 != 0\n 32063: u8 [a0 + 0x1] = a1\n 32066: jump @497 if a2 == 0\n      : @471 (gas: 13)\n 32070: a1 = 0xffffffff\n 32080: a2 = u64 [sp + 0x80]\n 32084: a2 = a2 & 0xffffffffffffffff\n 32087: u64 [sp + 0xc8] = a2\n 32091: s0 = u64 [sp + 0x88]\n 32095: s0 = s0 & 0xffffffffffffffff\n 32098: u64 [sp + 0xa8] = a1\n 32102: s1 = u64 [sp + 0x90]\n 32106: s1 = s1 & a1\n 32109: a0 = u64 [sp + 0x118]\n 32113: i32 a0 = a0 + 0x40\n 32116: a1 = 0x20\n 32119: ra = 416, jump @0\n      : @472 [@dyn 208] (gas: 63)\n 32125: a1 = reverse s1\n 32127: a2 = reverse s0\n 32129: a3 = u64 [sp + 0xc8]\n 32133: a3 = reverse a3\n 32135: u8 [a0 + 0x18] = a3\n 32138: u8 [a0 + 11] = 0\n 32141: u8 [a0 + 10] = 0\n 32144: u8 [a0 + 9] = 0\n 32147: u8 [a0 + 7] = 0\n 32150: u8 [a0 + 6] = 0\n 32153: u8 [a0 + 5] = 0\n 32156: u8 [a0 + 4] = 0\n 32159: u8 [a0 + 3] = 0\n 32162: u8 [a0 + 2] = 0\n 32165: u8 [a0 + 1] = 0\n 32168: u8 [a0 + 0] = 0\n 32170: a4 = a3 >> 0x38\n 32173: u8 [a0 + 0x1f] = a4\n 32176: a4 = a3 >> 0x30\n 32179: u8 [a0 + 0x1e] = a4\n 32182: a4 = a3 >> 0x28\n 32185: u8 [a0 + 0x1d] = a4\n 32188: a4 = a3 >> 0x20\n 32191: u8 [a0 + 0x1c] = a4\n 32194: a4 = a3 >> 0x18\n 32197: u8 [a0 + 0x1b] = a4\n 32200: a4 = a3 >> 0x10\n 32203: u8 [a0 + 0x1a] = a4\n 32206: a3 = a3 >> 0x8\n 32209: u8 [a0 + 0x19] = a3\n 32212: u8 [a0 + 0x10] = a2\n 32215: a3 = a2 >> 0x38\n 32218: u8 [a0 + 0x17] = a3\n 32221: a3 = a2 >> 0x30\n 32224: u8 [a0 + 0x16] = a3\n 32227: a3 = a2 >> 0x28\n 32230: u8 [a0 + 0x15] = a3\n 32233: a3 = a2 >> 0x20\n 32236: u8 [a0 + 0x14] = a3\n 32239: a3 = a2 >> 0x18\n 32242: u8 [a0 + 0x13] = a3\n 32245: a3 = a2 >> 0x10\n 32248: u8 [a0 + 0x12] = a3\n 32251: a2 = a2 >> 0x8\n 32254: u8 [a0 + 0x11] = a2\n 32257: u8 [a0 + 0x8] = a1\n 32260: a2 = a1 >> 0x38\n 32263: u8 [a0 + 0xf] = a2\n 32266: a2 = a1 >> 0x30\n 32269: u8 [a0 + 0xe] = a2\n 32272: a2 = a1 >> 0x28\n 32275: u8 [a0 + 0xd] = a2\n 32278: a1 = a1 >> 0x20\n 32281: s1 = 0x100000000\n 32291: a2 = 0xffffffa0\n 32301: s0 = u64 [sp + 0x108]\n 32305: a2 = s0 <u a2\n 32308: a3 = u64 [sp + 0x120]\n 32312: a2 = 0 if a3 != 0\n 32314: a3 = u64 [sp + 0xf0]\n 32318: a2 = 0 if a3 != 0\n 32320: u8 [a0 + 0xc] = a1\n 32323: jump @497 if a2 == 0\n      : @473 (gas: 4)\n 32327: a0 = u64 [sp + 0x118]\n 32331: i32 a0 = a0 + 0x60\n 32334: a1 = 0x20\n 32337: ra = 418, jump @0\n      : @474 [@dyn 209] (gas: 75)\n 32343: a1 = u64 [sp + 0x60]\n 32346: a1 = reverse a1\n 32348: a2 = u64 [sp + 0x68]\n 32351: a2 = reverse a2\n 32353: a3 = u64 [sp + 0x70]\n 32356: a3 = reverse a3\n 32358: a4 = u64 [sp + 0x78]\n 32361: a4 = reverse a4\n 32363: a5 = a4 >> 0x38\n 32366: u8 [a0 + 0x1f] = a5\n 32369: a5 = a4 >> 0x30\n 32372: u8 [a0 + 0x1e] = a5\n 32375: a5 = a4 >> 0x28\n 32378: u8 [a0 + 0x1d] = a5\n 32381: a5 = a4 >> 0x20\n 32384: u8 [a0 + 0x1c] = a5\n 32387: a5 = a4 >> 0x18\n 32390: u8 [a0 + 0x1b] = a5\n 32393: a5 = a4 >> 0x10\n 32396: u8 [a0 + 0x1a] = a5\n 32399: a5 = a4 >> 0x8\n 32402: u8 [a0 + 0x19] = a5\n 32405: u8 [a0 + 0x18] = a4\n 32408: u8 [a0 + 0x10] = a3\n 32411: a4 = a3 >> 0x38\n 32414: u8 [a0 + 0x17] = a4\n 32417: a4 = a3 >> 0x30\n 32420: u8 [a0 + 0x16] = a4\n 32423: a4 = a3 >> 0x28\n 32426: u8 [a0 + 0x15] = a4\n 32429: a4 = a3 >> 0x20\n 32432: u8 [a0 + 0x14] = a4\n 32435: a4 = a3 >> 0x18\n 32438: u8 [a0 + 0x13] = a4\n 32441: a4 = a3 >> 0x10\n 32444: u8 [a0 + 0x12] = a4\n 32447: a3 = a3 >> 0x8\n 32450: u8 [a0 + 0x11] = a3\n 32453: u8 [a0 + 0x8] = a2\n 32456: a3 = a2 >> 0x38\n 32459: u8 [a0 + 0xf] = a3\n 32462: a3 = a2 >> 0x30\n 32465: u8 [a0 + 0xe] = a3\n 32468: a3 = a2 >> 0x28\n 32471: u8 [a0 + 0xd] = a3\n 32474: a3 = a2 >> 0x20\n 32477: u8 [a0 + 0xc] = a3\n 32480: a3 = a2 >> 0x18\n 32483: u8 [a0 + 0xb] = a3\n 32486: a3 = a2 >> 0x10\n 32489: u8 [a0 + 0xa] = a3\n 32492: a2 = a2 >> 0x8\n 32495: u8 [a0 + 0x9] = a2\n 32498: u8 [a0] = a1\n 32500: a2 = a1 >> 0x38\n 32503: u8 [a0 + 0x7] = a2\n 32506: a2 = a1 >> 0x30\n 32509: u8 [a0 + 0x6] = a2\n 32512: a2 = a1 >> 0x28\n 32515: u8 [a0 + 0x5] = a2\n 32518: a2 = a1 >> 0x20\n 32521: u8 [a0 + 0x4] = a2\n 32524: a2 = a1 >> 0x18\n 32527: u8 [a0 + 0x3] = a2\n 32530: a2 = a1 >> 0x10\n 32533: u8 [a0 + 0x2] = a2\n 32536: a1 = a1 >> 0x8\n 32539: a2 = s1 + 0xffffffffffffff80\n 32542: a2 = s0 <u a2\n 32545: a3 = u64 [sp + 0x120]\n 32549: a2 = 0 if a3 != 0\n 32551: a4 = u64 [sp + 0xf0]\n 32555: a2 = 0 if a4 != 0\n 32557: u8 [a0 + 0x1] = a1\n 32560: jump @497 if a2 == 0\n      : @475 (gas: 17)\n 32564: a0 = s0\n 32566: s0 = s0 + 0xe0\n 32570: a0 = s0 <u a0\n 32573: a2 = a3 + a0\n 32576: u64 [sp + 0xf0] = a2\n 32580: s1 = a2 <u a3\n 32583: s1 = a0 if a0 == 0\n 32586: a0 = u64 [sp + 0x110]\n 32590: s1 = s1 + a0\n 32593: a0 = s1 <u a0\n 32596: a1 = u64 [sp + 0x100]\n 32600: a0 = a0 + a1\n 32603: u64 [sp + 0xc8] = a0\n 32607: a0 = u64 [sp + 0x118]\n 32611: i32 a0 = a0 + 0x80\n 32615: a1 = 0x20\n 32618: ra = 420, jump @0\n      : @476 [@dyn 210] (gas: 43)\n 32624: u8 [a0 + 31] = 0xe0\n 32629: a1 = s0 | s1\n 32632: a2 = u64 [sp + 0xf0]\n 32636: a4 = u64 [sp + 0xc8]\n 32640: a2 = a2 | a4\n 32643: a1 = a1 | a2\n 32646: a1 = a1 >> 0x20\n 32649: u64 [sp + 0xa0] = s1\n 32653: a2 = a2 | s1\n 32656: a2 = a2 << 0x20\n 32659: a1 = a1 | a2\n 32662: u8 [a0 + 30] = 0\n 32665: u8 [a0 + 29] = 0\n 32668: u8 [a0 + 28] = 0\n 32671: u8 [a0 + 27] = 0\n 32674: u8 [a0 + 26] = 0\n 32677: u8 [a0 + 25] = 0\n 32680: u8 [a0 + 24] = 0\n 32683: u8 [a0 + 23] = 0\n 32686: u8 [a0 + 22] = 0\n 32689: u8 [a0 + 21] = 0\n 32692: u8 [a0 + 20] = 0\n 32695: u8 [a0 + 19] = 0\n 32698: u8 [a0 + 18] = 0\n 32701: u8 [a0 + 17] = 0\n 32704: u8 [a0 + 16] = 0\n 32707: u8 [a0 + 15] = 0\n 32710: u8 [a0 + 14] = 0\n 32713: u8 [a0 + 13] = 0\n 32716: u8 [a0 + 12] = 0\n 32719: u8 [a0 + 11] = 0\n 32722: u8 [a0 + 10] = 0\n 32725: u8 [a0 + 9] = 0\n 32728: u8 [a0 + 8] = 0\n 32731: u8 [a0 + 7] = 0\n 32734: u8 [a0 + 6] = 0\n 32737: u8 [a0 + 5] = 0\n 32740: u8 [a0 + 4] = 0\n 32743: u8 [a0 + 3] = 0\n 32746: u8 [a0 + 2] = 0\n 32749: u8 [a0 + 1] = 0\n 32752: u8 [a0 + 0] = 0\n 32754: jump @497 if a1 != 0\n      : @477 (gas: 4)\n 32758: u64 [sp + 0x98] = s0\n 32762: i32 a0 = s0 + 0\n 32764: a1 = 0x20\n 32767: ra = 422, jump @0\n      : @478 [@dyn 211] (gas: 80)\n 32773: t1 = u64 [sp + 0xe8]\n 32777: a1 = reverse t1\n 32779: a2 = a1 >> 0x38\n 32782: u8 [a0 + 0x1f] = a2\n 32785: a2 = a1 >> 0x30\n 32788: u8 [a0 + 0x1e] = a2\n 32791: a2 = a1 >> 0x28\n 32794: u8 [a0 + 0x1d] = a2\n 32797: a2 = a1 >> 0x20\n 32800: u8 [a0 + 0x1c] = a2\n 32803: a2 = a1 >> 0x18\n 32806: u8 [a0 + 0x1b] = a2\n 32809: a2 = a1 >> 0x10\n 32812: u8 [a0 + 0x1a] = a2\n 32815: a2 = a1 >> 0x8\n 32818: u8 [a0 + 0x19] = a2\n 32821: t0 = u64 [sp + 0xd0]\n 32825: a2 = reverse t0\n 32827: u8 [a0 + 0x18] = a1\n 32830: a1 = a2 >> 0x38\n 32833: u8 [a0 + 0x17] = a1\n 32836: a1 = a2 >> 0x30\n 32839: u8 [a0 + 0x16] = a1\n 32842: a1 = a2 >> 0x28\n 32845: u8 [a0 + 0x15] = a1\n 32848: a1 = a2 >> 0x20\n 32851: u8 [a0 + 0x14] = a1\n 32854: a1 = a2 >> 0x18\n 32857: u8 [a0 + 0x13] = a1\n 32860: a1 = a2 >> 0x10\n 32863: u8 [a0 + 0x12] = a1\n 32866: s0 = u64 [sp + 0xd8]\n 32870: a3 = reverse s0\n 32872: u8 [a0 + 0x10] = a2\n 32875: a2 = a2 >> 0x8\n 32878: u8 [a0 + 0x11] = a2\n 32881: a1 = a3 >> 0x38\n 32884: u8 [a0 + 0xf] = a1\n 32887: a1 = a3 >> 0x30\n 32890: u8 [a0 + 0xe] = a1\n 32893: a1 = a3 >> 0x28\n 32896: u8 [a0 + 0xd] = a1\n 32899: a1 = a3 >> 0x20\n 32902: u8 [a0 + 0xc] = a1\n 32905: a1 = a3 >> 0x18\n 32908: u8 [a0 + 0xb] = a1\n 32911: a1 = a3 >> 0x10\n 32914: u8 [a0 + 0xa] = a1\n 32917: a5 = u64 [sp + 0xe0]\n 32921: a1 = reverse a5\n 32923: u8 [a0 + 0x8] = a3\n 32926: a3 = a3 >> 0x8\n 32929: u8 [a0 + 0x9] = a3\n 32932: a2 = a1 >> 0x38\n 32935: u8 [a0 + 0x7] = a2\n 32938: a2 = a1 >> 0x30\n 32941: u8 [a0 + 0x6] = a2\n 32944: a2 = a1 >> 0x28\n 32947: u8 [a0 + 0x5] = a2\n 32950: a2 = a1 >> 0x20\n 32953: u8 [a0 + 0x4] = a2\n 32956: a2 = a1 >> 0x18\n 32959: u8 [a0 + 0x3] = a2\n 32962: a2 = a1 >> 0x10\n 32965: u8 [a0 + 0x2] = a2\n 32968: a2 = u64 [sp + 0x48]\n 32971: a4 = u64 [sp + 0x40]\n 32974: a4 = a4 | a2\n 32977: t2 = u64 [sp + 0x58]\n 32980: a2 = u64 [sp + 0x50]\n 32983: a3 = t2 | a2\n 32986: a3 = a3 | a4\n 32989: a2 = a2 | a4\n 32992: a3 = a3 >> 0x20\n 32995: a2 = a2 << 0x20\n 32998: a2 = a2 | a3\n 33001: u8 [a0] = a1\n 33003: a1 = a1 >> 0x8\n 33006: u8 [a0 + 0x1] = a1\n 33009: jump @497 if a2 != 0\n      : @479 (gas: 9)\n 33013: a0 = t1 | s0\n 33016: a1 = t0 | a5\n 33019: a0 = a0 | a1\n 33022: a0 = a0 >> 0x20\n 33025: a1 = a1 | s0\n 33028: a1 = a1 << 0x20\n 33031: a0 = a0 | a1\n 33034: a3 = u64 [sp + 0x110]\n 33038: jump @497 if a0 != 0\n      : @480 (gas: 11)\n 33042: a0 = u64 [sp + 0xa0]\n 33046: a1 = u64 [sp + 0xc8]\n 33050: a0 = a0 | a1\n 33053: a1 = 0xffffffe0\n 33063: a2 = u64 [sp + 0x98]\n 33067: a1 = a2 <u a1\n 33070: a2 = u64 [sp + 0xf0]\n 33074: a1 = 0 if a2 != 0\n 33076: a1 = 0 if a0 != 0\n 33078: a2 = u64 [sp + 0x100]\n 33082: jump @497 if a1 == 0\n      : @481 (gas: 18)\n 33086: a0 = u64 [sp + 0x108]\n 33090: s1 = a0 + 0x100\n 33094: a0 = s1 <u a0\n 33097: a1 = u64 [sp + 0x120]\n 33101: s0 = a1 + a0\n 33104: a1 = s0 <u a1\n 33107: a1 = a0 if a0 == 0\n 33110: a1 = a1 + a3\n 33113: u64 [sp + 0xc8] = a1\n 33117: a0 = a1 <u a3\n 33120: a0 = a0 + a2\n 33123: u64 [sp + 0xa0] = a0\n 33127: i32 t2 = t2 + 0\n 33129: u64 [sp + 0xf0] = t2\n 33133: i32 a0 = s1 + 0\n 33135: i32 a1 = t1 + 0\n 33137: u64 [sp + 0x98] = a1\n 33141: ra = 424, jump @0\n      : @482 [@dyn 212] (gas: 5)\n 33148: i32 a0 = a0 + 0\n 33150: a1 = u64 [sp + 0x98]\n 33154: a2 = u64 [sp + 0xf0]\n 33158: ecalli 2 // 'call_data_copy'\n 33160: fallthrough\n      : @483 (gas: 30)\n 33161: a0 = u64 [sp + 0xe8]\n 33165: a0 = a0 + s1\n 33168: u64 [sp + 0x98] = s1\n 33172: a1 = a0 <u s1\n 33175: s1 = u64 [sp + 0xa0]\n 33179: a2 = u64 [sp + 0xd0]\n 33183: a2 = a2 + s0\n 33186: a2 = a2 + a1\n 33189: a3 = a2 ^ s0\n 33192: u64 [sp + 0xf0] = s0\n 33196: a4 = a2 <u s0\n 33199: a4 = a1 if a3 == 0\n 33202: a1 = u64 [sp + 0xd8]\n 33206: a5 = u64 [sp + 0xc8]\n 33210: a1 = a1 + a5\n 33213: a4 = a4 + a1\n 33216: a3 = a4 <u a1\n 33219: a1 = a1 <u a5\n 33222: a5 = u64 [sp + 0xe0]\n 33226: a5 = a5 + s1\n 33229: a1 = a1 + a5\n 33232: a1 = a1 + a3\n 33235: a3 = a0 | a4\n 33238: a1 = a1 | a2\n 33241: a3 = a3 | a1\n 33244: a3 = a3 >> 0x20\n 33247: a1 = a1 | a4\n 33250: a1 = a1 << 0x20\n 33253: a1 = a1 | a3\n 33256: jump @497 if a1 != 0\n      : @484 (gas: 4)\n 33260: s0 = 0x1ffffffe0\n 33270: i32 a0 = a0 + 0\n 33272: a1 = 0x20\n 33275: ra = 426, jump @0\n      : @485 [@dyn 213] (gas: 62)\n 33282: u8 [a0 + 31] = 0\n 33285: u8 [a0 + 30] = 0\n 33288: u8 [a0 + 29] = 0\n 33291: u8 [a0 + 28] = 0\n 33294: u8 [a0 + 27] = 0\n 33297: u8 [a0 + 26] = 0\n 33300: u8 [a0 + 25] = 0\n 33303: u8 [a0 + 24] = 0\n 33306: u8 [a0 + 23] = 0\n 33309: u8 [a0 + 22] = 0\n 33312: u8 [a0 + 21] = 0\n 33315: u8 [a0 + 20] = 0\n 33318: u8 [a0 + 19] = 0\n 33321: u8 [a0 + 18] = 0\n 33324: u8 [a0 + 17] = 0\n 33327: u8 [a0 + 16] = 0\n 33330: u8 [a0 + 15] = 0\n 33333: u8 [a0 + 14] = 0\n 33336: u8 [a0 + 13] = 0\n 33339: u8 [a0 + 12] = 0\n 33342: u8 [a0 + 11] = 0\n 33345: u8 [a0 + 10] = 0\n 33348: u8 [a0 + 9] = 0\n 33351: u8 [a0 + 8] = 0\n 33354: u8 [a0 + 7] = 0\n 33357: u8 [a0 + 6] = 0\n 33360: u8 [a0 + 5] = 0\n 33363: u8 [a0 + 4] = 0\n 33366: u8 [a0 + 3] = 0\n 33369: u8 [a0 + 2] = 0\n 33372: u8 [a0 + 1] = 0\n 33375: u8 [a0 + 0] = 0\n 33377: a0 = u64 [sp + 0xe8]\n 33381: a0 = a0 + 0x1f\n 33384: u64 [sp + 0x90] = s0\n 33388: a0 = a0 & s0\n 33391: a1 = u64 [sp + 0x98]\n 33395: a1 = a1 + a0\n 33398: u64 [sp + 0xd8] = a1\n 33402: a0 = a1 <u a0\n 33405: a1 = u64 [sp + 0xf0]\n 33409: a1 = a1 + a0\n 33412: u64 [sp + 0xf0] = a1\n 33416: a0 = 0 if a1 != 0\n 33418: a1 = u64 [sp + 0xc8]\n 33422: a0 = a0 + a1\n 33425: u64 [sp + 0xe8] = a0\n 33429: a0 = a0 <u a1\n 33432: a0 = a0 + s1\n 33435: u64 [sp + 0xe0] = a0\n 33439: a0 = u64 [sp + 0x28]\n 33442: s1 = a0 & 0xffffffffffffffff\n 33445: a0 = u64 [sp + 0x30]\n 33448: s0 = a0 & 0xffffffffffffffff\n 33451: a0 = u64 [sp + 0x38]\n 33454: a1 = u64 [sp + 0xa8]\n 33458: a0 = a0 & a1\n 33461: u64 [sp + 0xd0] = a0\n 33465: a0 = u64 [sp + 0x118]\n 33469: i32 a0 = a0 + 0xa0\n 33473: a1 = 0x20\n 33476: ra = 428, jump @0\n      : @486 [@dyn 214] (gas: 84)\n 33483: a1 = reverse s1\n 33485: a2 = a1 >> 0x38\n 33488: u8 [a0 + 0x1f] = a2\n 33491: a2 = a1 >> 0x30\n 33494: u8 [a0 + 0x1e] = a2\n 33497: a2 = a1 >> 0x28\n 33500: u8 [a0 + 0x1d] = a2\n 33503: a2 = a1 >> 0x20\n 33506: u8 [a0 + 0x1c] = a2\n 33509: a2 = a1 >> 0x18\n 33512: u8 [a0 + 0x1b] = a2\n 33515: a2 = a1 >> 0x10\n 33518: u8 [a0 + 0x1a] = a2\n 33521: a2 = a1 >> 0x8\n 33524: u8 [a0 + 0x19] = a2\n 33527: a2 = reverse s0\n 33529: u8 [a0 + 0x18] = a1\n 33532: a1 = a2 >> 0x38\n 33535: u8 [a0 + 0x17] = a1\n 33538: a1 = a2 >> 0x30\n 33541: u8 [a0 + 0x16] = a1\n 33544: a1 = a2 >> 0x28\n 33547: u8 [a0 + 0x15] = a1\n 33550: a1 = a2 >> 0x20\n 33553: u8 [a0 + 0x14] = a1\n 33556: a1 = a2 >> 0x18\n 33559: u8 [a0 + 0x13] = a1\n 33562: a1 = a2 >> 0x10\n 33565: u8 [a0 + 0x12] = a1\n 33568: a1 = a2 >> 0x8\n 33571: u8 [a0 + 0x11] = a1\n 33574: a1 = u64 [sp + 0xd0]\n 33578: a1 = reverse a1\n 33580: u8 [a0 + 0x10] = a2\n 33583: a2 = a1 >> 0x38\n 33586: u8 [a0 + 0xf] = a2\n 33589: a2 = a1 >> 0x30\n 33592: u8 [a0 + 0xe] = a2\n 33595: a2 = a1 >> 0x28\n 33598: u8 [a0 + 0xd] = a2\n 33601: a2 = a1 >> 0x20\n 33604: u8 [a0 + 0xc] = a2\n 33607: u8 [a0 + 11] = 0\n 33610: u8 [a0 + 10] = 0\n 33613: u8 [a0 + 9] = 0\n 33616: u8 [a0 + 0x8] = a1\n 33619: u8 [a0 + 7] = 0\n 33622: u8 [a0 + 6] = 0\n 33625: u8 [a0 + 5] = 0\n 33628: u8 [a0 + 4] = 0\n 33631: u8 [a0 + 3] = 0\n 33634: u8 [a0 + 2] = 0\n 33637: u8 [a0 + 1] = 0\n 33640: u8 [a0 + 0] = 0\n 33642: a2 = u64 [sp + 0x120]\n 33646: a3 = u64 [sp + 0xf0]\n 33650: a0 = a3 ^ a2\n 33653: a1 = a3 <u a2\n 33656: a5 = a3\n 33658: t1 = u64 [sp + 0x108]\n 33662: s1 = u64 [sp + 0xd8]\n 33666: s0 = s1 <u t1\n 33669: a1 = s0 if a0 == 0\n 33672: a3 = u64 [sp + 0x110]\n 33676: a4 = u64 [sp + 0xe8]\n 33680: a0 = a4 - a3\n 33683: a3 = a4 <u a3\n 33686: a4 = u64 [sp + 0x100]\n 33690: t0 = a4 + a3\n 33693: a4 = a0 <u a1\n 33696: a3 = u64 [sp + 0xe0]\n 33700: a3 = a3 - t0\n 33703: a3 = a3 - a4\n 33706: u64 [sp + 0x110] = a3\n 33710: a0 = a0 - a1\n 33713: u64 [sp + 0x100] = a0\n 33717: a2 = a2 + s0\n 33720: s0 = a5 - a2\n 33723: a0 = s1 - t1\n 33726: u64 [sp + 0x120] = a0\n 33730: a0 = u64 [sp + 0x118]\n 33734: i32 a0 = a0 + 0xc0\n 33738: a1 = 0x20\n 33741: ra = 430, jump @0\n      : @487 [@dyn 215] (gas: 79)\n 33748: a1 = u64 [sp + 0x110]\n 33752: a1 = reverse a1\n 33754: a2 = u64 [sp + 0x100]\n 33758: a2 = reverse a2\n 33760: a3 = reverse s0\n 33762: a4 = u64 [sp + 0x120]\n 33766: a4 = reverse a4\n 33768: a5 = a4 >> 0x38\n 33771: u8 [a0 + 0x1f] = a5\n 33774: a5 = a4 >> 0x30\n 33777: u8 [a0 + 0x1e] = a5\n 33780: a5 = a4 >> 0x28\n 33783: u8 [a0 + 0x1d] = a5\n 33786: a5 = a4 >> 0x20\n 33789: u8 [a0 + 0x1c] = a5\n 33792: a5 = a4 >> 0x18\n 33795: u8 [a0 + 0x1b] = a5\n 33798: a5 = a4 >> 0x10\n 33801: u8 [a0 + 0x1a] = a5\n 33804: a5 = a4 >> 0x8\n 33807: u8 [a0 + 0x19] = a5\n 33810: u8 [a0 + 0x18] = a4\n 33813: u8 [a0 + 0x10] = a3\n 33816: a4 = a3 >> 0x38\n 33819: u8 [a0 + 0x17] = a4\n 33822: a4 = a3 >> 0x30\n 33825: u8 [a0 + 0x16] = a4\n 33828: a4 = a3 >> 0x28\n 33831: u8 [a0 + 0x15] = a4\n 33834: a4 = a3 >> 0x20\n 33837: u8 [a0 + 0x14] = a4\n 33840: a4 = a3 >> 0x18\n 33843: u8 [a0 + 0x13] = a4\n 33846: a4 = a3 >> 0x10\n 33849: u8 [a0 + 0x12] = a4\n 33852: a4 = s1\n 33854: a3 = a3 >> 0x8\n 33857: u8 [a0 + 0x11] = a3\n 33860: u8 [a0 + 0x8] = a2\n 33863: a3 = a2 >> 0x38\n 33866: u8 [a0 + 0xf] = a3\n 33869: a3 = a2 >> 0x30\n 33872: u8 [a0 + 0xe] = a3\n 33875: a3 = a2 >> 0x28\n 33878: u8 [a0 + 0xd] = a3\n 33881: a3 = a2 >> 0x20\n 33884: u8 [a0 + 0xc] = a3\n 33887: a3 = a2 >> 0x18\n 33890: u8 [a0 + 0xb] = a3\n 33893: a3 = a2 >> 0x10\n 33896: u8 [a0 + 0xa] = a3\n 33899: a2 = a2 >> 0x8\n 33902: u8 [a0 + 0x9] = a2\n 33905: u8 [a0] = a1\n 33907: a2 = a1 >> 0x38\n 33910: u8 [a0 + 0x7] = a2\n 33913: a2 = a1 >> 0x30\n 33916: u8 [a0 + 0x6] = a2\n 33919: a2 = a1 >> 0x28\n 33922: u8 [a0 + 0x5] = a2\n 33925: a2 = a1 >> 0x20\n 33928: u8 [a0 + 0x4] = a2\n 33931: a2 = a1 >> 0x18\n 33934: u8 [a0 + 0x3] = a2\n 33937: a2 = a1 >> 0x10\n 33940: u8 [a0 + 0x2] = a2\n 33943: a1 = a1 >> 0x8\n 33946: s1 = u64 [sp + 0xe8]\n 33950: a2 = a4 | s1\n 33953: a3 = u64 [sp + 0xe0]\n 33957: a5 = u64 [sp + 0xf0]\n 33961: a3 = a3 | a5\n 33964: a2 = a2 | a3\n 33967: a2 = a2 >> 0x20\n 33970: a3 = a3 | s1\n 33973: a3 = a3 << 0x20\n 33976: a2 = a2 | a3\n 33979: u8 [a0 + 0x1] = a1\n 33982: jump @497 if a2 != 0\n      : @488 (gas: 3)\n 33986: i32 a0 = a4 + 0\n 33988: a1 = 0x20\n 33991: ra = 432, jump @0\n      : @489 [@dyn 216] (gas: 80)\n 33998: t0 = u64 [sp + 0xf8]\n 34002: a1 = reverse t0\n 34004: a2 = a1 >> 0x38\n 34007: u8 [a0 + 0x1f] = a2\n 34010: a2 = a1 >> 0x30\n 34013: u8 [a0 + 0x1e] = a2\n 34016: a2 = a1 >> 0x28\n 34019: u8 [a0 + 0x1d] = a2\n 34022: a2 = a1 >> 0x20\n 34025: u8 [a0 + 0x1c] = a2\n 34028: a2 = a1 >> 0x18\n 34031: u8 [a0 + 0x1b] = a2\n 34034: a2 = a1 >> 0x10\n 34037: u8 [a0 + 0x1a] = a2\n 34040: a2 = a1 >> 0x8\n 34043: u8 [a0 + 0x19] = a2\n 34046: t1 = u64 [sp + 0xb0]\n 34050: a2 = reverse t1\n 34052: u8 [a0 + 0x18] = a1\n 34055: a1 = a2 >> 0x38\n 34058: u8 [a0 + 0x17] = a1\n 34061: a1 = a2 >> 0x30\n 34064: u8 [a0 + 0x16] = a1\n 34067: a1 = a2 >> 0x28\n 34070: u8 [a0 + 0x15] = a1\n 34073: a1 = a2 >> 0x20\n 34076: u8 [a0 + 0x14] = a1\n 34079: a1 = a2 >> 0x18\n 34082: u8 [a0 + 0x13] = a1\n 34085: a1 = a2 >> 0x10\n 34088: u8 [a0 + 0x12] = a1\n 34091: s1 = u64 [sp + 0xb8]\n 34095: a3 = reverse s1\n 34097: u8 [a0 + 0x10] = a2\n 34100: a2 = a2 >> 0x8\n 34103: u8 [a0 + 0x11] = a2\n 34106: a1 = a3 >> 0x38\n 34109: u8 [a0 + 0xf] = a1\n 34112: a1 = a3 >> 0x30\n 34115: u8 [a0 + 0xe] = a1\n 34118: a1 = a3 >> 0x28\n 34121: u8 [a0 + 0xd] = a1\n 34124: a1 = a3 >> 0x20\n 34127: u8 [a0 + 0xc] = a1\n 34130: a1 = a3 >> 0x18\n 34133: u8 [a0 + 0xb] = a1\n 34136: a1 = a3 >> 0x10\n 34139: u8 [a0 + 0xa] = a1\n 34142: a5 = u64 [sp + 0xc0]\n 34146: a1 = reverse a5\n 34148: u8 [a0 + 0x8] = a3\n 34151: a3 = a3 >> 0x8\n 34154: u8 [a0 + 0x9] = a3\n 34157: a2 = a1 >> 0x38\n 34160: u8 [a0 + 0x7] = a2\n 34163: a2 = a1 >> 0x30\n 34166: u8 [a0 + 0x6] = a2\n 34169: a2 = a1 >> 0x28\n 34172: u8 [a0 + 0x5] = a2\n 34175: a2 = a1 >> 0x20\n 34178: u8 [a0 + 0x4] = a2\n 34181: a2 = a1 >> 0x18\n 34184: u8 [a0 + 0x3] = a2\n 34187: a2 = a1 >> 0x10\n 34190: u8 [a0 + 0x2] = a2\n 34193: a2 = u64 [sp + 0x10]\n 34196: a4 = u64 [sp + 0x8]\n 34199: a4 = a4 | a2\n 34202: t2 = u64 [sp + 0x20]\n 34205: a2 = u64 [sp + 0x18]\n 34208: a3 = t2 | a2\n 34211: a3 = a3 | a4\n 34214: a2 = a2 | a4\n 34217: a3 = a3 >> 0x20\n 34220: a2 = a2 << 0x20\n 34223: a2 = a2 | a3\n 34226: u8 [a0] = a1\n 34228: a1 = a1 >> 0x8\n 34231: u8 [a0 + 0x1] = a1\n 34234: jump @497 if a2 != 0\n      : @490 (gas: 9)\n 34238: a0 = t0 | s1\n 34241: a1 = t1 | a5\n 34244: a0 = a0 | a1\n 34247: a0 = a0 >> 0x20\n 34250: a1 = a1 | s1\n 34253: a1 = a1 << 0x20\n 34256: a0 = a0 | a1\n 34259: a4 = u64 [sp + 0xf0]\n 34263: jump @497 if a0 != 0\n      : @491 (gas: 9)\n 34267: a2 = u64 [sp + 0xe8]\n 34271: a5 = u64 [sp + 0xe0]\n 34275: a0 = a2 | a5\n 34278: a1 = 0xffffffe0\n 34288: a3 = u64 [sp + 0xd8]\n 34292: a1 = a3 <u a1\n 34295: a1 = 0 if a4 != 0\n 34297: a1 = 0 if a0 != 0\n 34299: jump @497 if a1 == 0\n      : @492 (gas: 18)\n 34303: a1 = a3 + 0x20\n 34306: a0 = a1 <u a3\n 34309: a3 = a1\n 34311: u64 [sp + 0x118] = a1\n 34315: s1 = a4 + a0\n 34318: a1 = s1 <u a4\n 34321: a1 = a0 if a0 == 0\n 34324: a1 = a1 + a2\n 34327: u64 [sp + 0x110] = a1\n 34331: a0 = a1 <u a2\n 34334: a0 = a0 + a5\n 34337: u64 [sp + 0x120] = a0\n 34341: i32 t2 = t2 + 0\n 34343: u64 [sp + 0x108] = t2\n 34347: i32 a0 = a3 + 0\n 34349: s0 = i32 [sp + 0xf8]\n 34353: a1 = s0\n 34355: ra = 434, jump @0\n      : @493 [@dyn 217] (gas: 6)\n 34362: i32 a0 = a0 + 0\n 34364: a1 = s0\n 34366: a2 = u64 [sp + 0x108]\n 34370: s0 = u64 [sp + 0x118]\n 34374: ecalli 2 // 'call_data_copy'\n 34376: fallthrough\n      : @494 (gas: 29)\n 34377: a0 = u64 [sp + 0xf8]\n 34381: a0 = a0 + s0\n 34384: a1 = a0 <u s0\n 34387: a2 = u64 [sp + 0xb0]\n 34391: a2 = a2 + s1\n 34394: a2 = a2 + a1\n 34397: a3 = a2 ^ s1\n 34400: u64 [sp + 0x108] = s1\n 34404: a4 = a2 <u s1\n 34407: s1 = u64 [sp + 0x110]\n 34411: a4 = a1 if a3 == 0\n 34414: a1 = u64 [sp + 0xb8]\n 34418: a1 = a1 + s1\n 34421: a4 = a4 + a1\n 34424: a3 = a4 <u a1\n 34427: a1 = a1 <u s1\n 34430: a5 = u64 [sp + 0xc0]\n 34434: s0 = u64 [sp + 0x120]\n 34438: a5 = a5 + s0\n 34441: a1 = a1 + a5\n 34444: a1 = a1 + a3\n 34447: a3 = a0 | a4\n 34450: a1 = a1 | a2\n 34453: a3 = a3 | a1\n 34456: a3 = a3 >> 0x20\n 34459: a1 = a1 | a4\n 34462: a1 = a1 << 0x20\n 34465: a1 = a1 | a3\n 34468: jump @497 if a1 != 0\n      : @495 (gas: 3)\n 34472: i32 a0 = a0 + 0\n 34474: a1 = 0x20\n 34477: ra = 436, jump @0\n      : @496 [@dyn 218] (gas: 56)\n 34484: u8 [a0 + 31] = 0\n 34487: u8 [a0 + 30] = 0\n 34490: u8 [a0 + 29] = 0\n 34493: u8 [a0 + 28] = 0\n 34496: u8 [a0 + 27] = 0\n 34499: u8 [a0 + 26] = 0\n 34502: u8 [a0 + 25] = 0\n 34505: u8 [a0 + 24] = 0\n 34508: u8 [a0 + 23] = 0\n 34511: u8 [a0 + 22] = 0\n 34514: u8 [a0 + 21] = 0\n 34517: u8 [a0 + 20] = 0\n 34520: u8 [a0 + 19] = 0\n 34523: u8 [a0 + 18] = 0\n 34526: u8 [a0 + 17] = 0\n 34529: u8 [a0 + 16] = 0\n 34532: u8 [a0 + 15] = 0\n 34535: u8 [a0 + 14] = 0\n 34538: u8 [a0 + 13] = 0\n 34541: u8 [a0 + 12] = 0\n 34544: u8 [a0 + 11] = 0\n 34547: u8 [a0 + 10] = 0\n 34550: u8 [a0 + 9] = 0\n 34553: u8 [a0 + 8] = 0\n 34556: u8 [a0 + 7] = 0\n 34559: u8 [a0 + 6] = 0\n 34562: u8 [a0 + 5] = 0\n 34565: u8 [a0 + 4] = 0\n 34568: u8 [a0 + 3] = 0\n 34571: u8 [a0 + 2] = 0\n 34574: u8 [a0 + 1] = 0\n 34577: u8 [a0 + 0] = 0\n 34579: a0 = u64 [sp + 0xf8]\n 34583: a0 = a0 + 0x1f\n 34586: a1 = u64 [sp + 0x90]\n 34590: a0 = a0 & a1\n 34593: a1 = u64 [sp + 0x118]\n 34597: a1 = a1 + a0\n 34600: a0 = a1 <u a0\n 34603: a2 = u64 [sp + 0x108]\n 34607: a2 = a2 + a0\n 34610: a0 = 0 if a2 != 0\n 34612: a0 = a0 + s1\n 34615: a3 = a0 <u s1\n 34618: a4 = u64 [sp + 0x120]\n 34622: a3 = a3 + a4\n 34625: a4 = u64 [sp]\n 34627: u64 [a4] = a1\n 34629: u64 [a4 + 0x8] = a2\n 34632: u64 [a4 + 0x10] = a0\n 34635: u64 [a4 + 0x18] = a3\n 34638: ra = u64 [sp + 0x138]\n 34642: s0 = u64 [sp + 0x130]\n 34646: s1 = u64 [sp + 0x128]\n 34650: sp = sp + 0x140\n 34654: ret\n      : @497 (gas: 1)\n 34656: trap\n      : @498 (gas: 7)\n 34657: a4 = u64 [sp + 0x218]\n 34661: a3 = u64 [sp + 0x210]\n 34665: a2 = u64 [sp + 0x208]\n 34669: a0 = a3 | a4\n 34672: a1 = a2 <u 0x1\n 34675: a1 = 0 if a0 != 0\n 34677: jump @501 if a1 == 0\n      : @499 (gas: 50)\n 34681: a0 = u64 [sp + 0x200]\n 34685: u64 [sp + 0x58] = a0\n 34688: a0 = a0 + 0x1\n 34691: a1 = a0 <u 0x1\n 34694: a1 = a1 + a2\n 34697: u64 [sp + 0x200] = a0\n 34701: a0 = a0 | a1\n 34704: u64 [sp + 0x208] = a1\n 34708: a0 = a0 <u 0x1\n 34711: a0 = a0 + a3\n 34714: u64 [sp + 0x210] = a0\n 34718: a0 = a0 <u a3\n 34721: a0 = a0 + a4\n 34724: u64 [sp + 0x218] = a0\n 34728: a0 = u64 [sp + 0x70]\n 34731: u64 [sp + 0x1e8] = a0\n 34735: a0 = u64 [sp + 0x78]\n 34738: u64 [sp + 0x1e0] = a0\n 34742: a0 = u64 [sp + 0x68]\n 34745: u64 [sp + 0x1f0] = a0\n 34749: s1 = u64 [sp + 0x60]\n 34752: u64 [sp + 0x1f8] = s1\n 34756: i32 a1 = sp + 0x1e0\n 34760: u64 [sp + 0x48] = a3\n 34763: i32 a3 = sp + 0x200\n 34767: u64 [sp + 0x40] = a2\n 34770: a2 = 0xffffffffffffffff\n 34773: u64 [sp + 0x38] = a4\n 34776: a4 = 0x20\n 34779: a0 = 0\n 34781: ecalli 16 // 'set_storage'\n 34783: a0 = u64 [sp + 0x38]\n 34786: u64 [sp + 0x158] = a0\n 34790: a0 = u64 [sp + 0x48]\n 34793: u64 [sp + 0x150] = a0\n 34797: a0 = u64 [sp + 0x40]\n 34800: u64 [sp + 0x148] = a0\n 34804: a0 = u64 [sp + 0x58]\n 34807: u64 [sp + 0x140] = a0\n 34811: u64 [sp + 0x178] = s1\n 34815: a0 = u64 [sp + 0x68]\n 34818: u64 [sp + 0x170] = a0\n 34822: a0 = u64 [sp + 0x70]\n 34825: u64 [sp + 0x168] = a0\n 34829: a0 = sp + 0x180\n 34833: a1 = sp + 0x160\n 34837: a2 = sp + 0x140\n 34841: a3 = u64 [sp + 0x78]\n 34844: u64 [sp + 0x160] = a3\n 34848: ra = 438, jump @91\n      : @500 [@dyn 219] (gas: 453)\n 34854: a0 = u64 [sp + 0x1b8]\n 34858: u64 [sp + 0x58] = a0\n 34861: a0 = u64 [sp + 0x1b0]\n 34865: u64 [sp + 0x48] = a0\n 34868: s1 = u64 [sp + 0x1a8]\n 34872: a0 = u64 [sp + 0x1a0]\n 34876: u64 [sp + 0x18] = a0\n 34879: a3 = u64 [sp + 0x198]\n 34883: u64 [sp + 0x60] = a3\n 34886: a2 = u64 [sp + 0x190]\n 34890: u64 [sp + 0x68] = a2\n 34893: a1 = u64 [sp + 0x188]\n 34897: u64 [sp + 0x70] = a1\n 34900: a0 = u64 [sp + 0x180]\n 34904: u64 [sp + 0x78] = a0\n 34907: u64 [sp + 0x1f8] = a3\n 34911: u64 [sp + 0x1f0] = a2\n 34915: u64 [sp + 0x1e8] = a1\n 34919: u64 [sp + 0x1e0] = a0\n 34923: u64 [sp + 536] = 0\n 34927: u64 [sp + 528] = 0\n 34931: u64 [sp + 520] = 0\n 34935: u64 [sp + 512] = 0\n 34939: u32 [sp + 448] = 0x20\n 34944: i32 a1 = sp + 0x1e0\n 34948: i32 a3 = sp + 0x200\n 34952: i32 a4 = sp + 0x1c0\n 34956: a2 = 0xffffffffffffffff\n 34959: a0 = 0\n 34961: ecalli 8 // 'get_storage'\n 34963: a2 = u64 [sp + 0x18]\n 34966: a0 = a2 >> 0x3d\n 34969: a1 = s1 << 0x3\n 34972: a0 = a0 | a1\n 34975: a1 = a2 << 0x3\n 34978: a1 = a1 <u 0x100\n 34982: t1 = a1 ^ 0x1\n 34985: a1 = a0 >u 0\n 34987: t1 = a1 if a0 != 0\n 34990: s1 = s1 >> 0x3d\n 34993: a1 = u64 [sp + 0x48]\n 34996: a0 = a1 << 0x3\n 34999: a0 = a0 | s1\n 35002: a1 = a1 >> 0x3d\n 35005: a3 = u64 [sp + 0x58]\n 35008: a3 = a3 << 0x3\n 35011: a1 = a1 | a3\n 35014: a3 = a1 >u 0\n 35016: a4 = a0 >u 0\n 35018: a4 = a3 if a1 != 0\n 35021: a0 = a0 | a1\n 35024: t1 = a4 if a0 != 0\n 35027: a0 = u64 [sp + 0x200]\n 35031: u64 [sp + 0x58] = a0\n 35034: a0 = u64 [sp + 0x208]\n 35038: u64 [sp + 0x48] = a0\n 35041: a0 = u64 [sp + 0x210]\n 35045: u64 [sp + 0x40] = a0\n 35048: a0 = u64 [sp + 0x218]\n 35052: u64 [sp + 0x38] = a0\n 35055: u8 [sp + 319] = 0xff\n 35061: u8 [sp + 318] = 0xff\n 35067: u8 [sp + 317] = 0xff\n 35073: u8 [sp + 316] = 0xff\n 35079: u8 [sp + 315] = 0xff\n 35085: u8 [sp + 314] = 0xff\n 35091: u8 [sp + 313] = 0xff\n 35097: u8 [sp + 312] = 0xff\n 35103: u8 [sp + 311] = 0xff\n 35109: u8 [sp + 310] = 0xff\n 35115: u8 [sp + 309] = 0xff\n 35121: u8 [sp + 308] = 0xff\n 35127: u8 [sp + 307] = 0xff\n 35133: u8 [sp + 306] = 0xff\n 35139: u8 [sp + 305] = 0xff\n 35145: u8 [sp + 304] = 0xff\n 35151: u8 [sp + 303] = 0xff\n 35157: u8 [sp + 302] = 0xff\n 35163: u8 [sp + 301] = 0xff\n 35169: u8 [sp + 300] = 0xff\n 35175: u8 [sp + 299] = 0xff\n 35181: u8 [sp + 298] = 0xff\n 35187: u8 [sp + 297] = 0xff\n 35193: u8 [sp + 296] = 0xff\n 35199: u8 [sp + 295] = 0xff\n 35205: u8 [sp + 294] = 0xff\n 35211: u8 [sp + 293] = 0xff\n 35217: u8 [sp + 292] = 0xff\n 35223: u8 [sp + 291] = 0xff\n 35229: u8 [sp + 290] = 0xff\n 35235: u8 [sp + 289] = 0xff\n 35241: u8 [sp + 288] = 0xff\n 35247: u8 [sp + 287] = 0\n 35251: u8 [sp + 286] = 0\n 35255: u8 [sp + 285] = 0\n 35259: u8 [sp + 284] = 0\n 35263: u8 [sp + 283] = 0\n 35267: u8 [sp + 282] = 0\n 35271: u8 [sp + 281] = 0\n 35275: u8 [sp + 280] = 0\n 35279: u8 [sp + 279] = 0\n 35283: u8 [sp + 278] = 0\n 35287: u8 [sp + 277] = 0\n 35291: u8 [sp + 276] = 0\n 35295: u8 [sp + 275] = 0\n 35299: u8 [sp + 274] = 0\n 35303: u8 [sp + 273] = 0\n 35307: u8 [sp + 272] = 0\n 35311: u8 [sp + 271] = 0\n 35315: u8 [sp + 270] = 0\n 35319: u8 [sp + 269] = 0\n 35323: u8 [sp + 268] = 0\n 35327: u8 [sp + 267] = 0\n 35331: u8 [sp + 266] = 0\n 35335: u8 [sp + 265] = 0\n 35339: u8 [sp + 264] = 0\n 35343: u8 [sp + 263] = 0\n 35347: u8 [sp + 262] = 0\n 35351: u8 [sp + 261] = 0\n 35355: u8 [sp + 260] = 0\n 35359: u8 [sp + 259] = 0\n 35363: u8 [sp + 258] = 0\n 35367: u8 [sp + 257] = 0\n 35371: u8 [sp + 256] = 0\n 35375: a4 = a2 & 0x1f\n 35378: a3 = sp + 0x120\n 35382: a3 = a3 - a4\n 35385: a0 = u8 [a3 + 0x19]\n 35388: a1 = u8 [a3 + 0x18]\n 35391: a5 = u8 [a3 + 0x1a]\n 35394: s1 = u8 [a3 + 0x1b]\n 35397: a0 = a0 << 0x8\n 35400: a0 = a0 | a1\n 35403: a5 = a5 << 0x10\n 35406: s1 = s1 << 0x18\n 35409: a5 = a5 | s1\n 35412: t0 = a5 | a0\n 35415: a1 = u8 [a3 + 0x1d]\n 35418: a5 = u8 [a3 + 0x1c]\n 35421: s1 = u8 [a3 + 0x1e]\n 35424: a0 = u8 [a3 + 0x1f]\n 35427: a1 = a1 << 0x8\n 35430: a1 = a1 | a5\n 35433: s1 = s1 << 0x10\n 35436: a0 = a0 << 0x18\n 35439: a0 = a0 | s1\n 35442: a0 = a0 | a1\n 35445: a0 = a0 << 0x20\n 35448: a0 = a0 | t0\n 35451: u64 [sp + 0x18] = a0\n 35454: a0 = u8 [a3 + 0x11]\n 35457: a1 = u8 [a3 + 0x10]\n 35460: a5 = u8 [a3 + 0x12]\n 35463: s1 = u8 [a3 + 0x13]\n 35466: a0 = a0 << 0x8\n 35469: a0 = a0 | a1\n 35472: a5 = a5 << 0x10\n 35475: s1 = s1 << 0x18\n 35478: a5 = a5 | s1\n 35481: t0 = a5 | a0\n 35484: a1 = u8 [a3 + 0x15]\n 35487: a5 = u8 [a3 + 0x14]\n 35490: s1 = u8 [a3 + 0x16]\n 35493: a0 = u8 [a3 + 0x17]\n 35496: a1 = a1 << 0x8\n 35499: a1 = a1 | a5\n 35502: s1 = s1 << 0x10\n 35505: a0 = a0 << 0x18\n 35508: a0 = a0 | s1\n 35511: a0 = a0 | a1\n 35514: a0 = a0 << 0x20\n 35517: a0 = a0 | t0\n 35520: u64 [sp + 0x10] = a0\n 35523: a0 = u8 [a3 + 0x9]\n 35526: a1 = u8 [a3 + 0x8]\n 35529: a5 = u8 [a3 + 0xa]\n 35532: s1 = u8 [a3 + 0xb]\n 35535: a0 = a0 << 0x8\n 35538: a0 = a0 | a1\n 35541: a5 = a5 << 0x10\n 35544: s1 = s1 << 0x18\n 35547: a5 = a5 | s1\n 35550: a2 = a5 | a0\n 35553: a1 = u8 [a3 + 0xd]\n 35556: a5 = u8 [a3 + 0xc]\n 35559: s1 = u8 [a3 + 0xe]\n 35562: a0 = u8 [a3 + 0xf]\n 35565: a1 = a1 << 0x8\n 35568: a1 = a1 | a5\n 35571: s1 = s1 << 0x10\n 35574: a0 = a0 << 0x18\n 35577: a0 = a0 | s1\n 35580: a0 = a0 | a1\n 35583: a0 = a0 << 0x20\n 35586: ra = a0 | a2\n 35589: a0 = u8 [a3 + 0x1]\n 35592: a1 = u8 [a3]\n 35594: a2 = u8 [a3 + 0x2]\n 35597: s1 = u8 [a3 + 0x3]\n 35600: a0 = a0 << 0x8\n 35603: a0 = a0 | a1\n 35606: a2 = a2 << 0x10\n 35609: s1 = s1 << 0x18\n 35612: a2 = a2 | s1\n 35615: a0 = a0 | a2\n 35618: a1 = u8 [a3 + 0x5]\n 35621: a2 = u8 [a3 + 0x4]\n 35624: s1 = u8 [a3 + 0x6]\n 35627: a3 = u8 [a3 + 0x7]\n 35630: a1 = a1 << 0x8\n 35633: a1 = a1 | a2\n 35636: s1 = s1 << 0x10\n 35639: a3 = a3 << 0x18\n 35642: a3 = a3 | s1\n 35645: a1 = a1 | a3\n 35648: a1 = a1 << 0x20\n 35651: t2 = a1 | a0\n 35654: a1 = u64 [sp + 0x20]\n 35657: a0 = a1 >> 0x38\n 35660: u8 [sp + 0xe7] = a0\n 35664: a0 = a1 >> 0x30\n 35667: u8 [sp + 0xe6] = a0\n 35671: a0 = a1 >> 0x28\n 35674: u8 [sp + 0xe5] = a0\n 35678: a0 = a1 >> 0x20\n 35681: u8 [sp + 0xe4] = a0\n 35685: a0 = a1 >> 0x18\n 35688: u8 [sp + 0xe3] = a0\n 35692: a0 = a1 >> 0x10\n 35695: u8 [sp + 0xe2] = a0\n 35699: u8 [sp + 0xe0] = a1\n 35703: a0 = a1 >> 0x8\n 35706: u8 [sp + 0xe1] = a0\n 35710: a1 = u64 [sp + 0x28]\n 35713: a0 = a1 >> 0x38\n 35716: u8 [sp + 0xef] = a0\n 35720: a0 = a1 >> 0x30\n 35723: u8 [sp + 0xee] = a0\n 35727: a0 = a1 >> 0x28\n 35730: u8 [sp + 0xed] = a0\n 35734: a0 = a1 >> 0x20\n 35737: u8 [sp + 0xec] = a0\n 35741: a0 = a1 >> 0x18\n 35744: u8 [sp + 0xeb] = a0\n 35748: a0 = a1 >> 0x10\n 35751: u8 [sp + 0xea] = a0\n 35755: u8 [sp + 0xe8] = a1\n 35759: a0 = a1 >> 0x8\n 35762: u8 [sp + 0xe9] = a0\n 35766: a1 = u64 [sp + 0x30]\n 35769: a0 = a1 >> 0x38\n 35772: u8 [sp + 0xf7] = a0\n 35776: a0 = a1 >> 0x30\n 35779: u8 [sp + 0xf6] = a0\n 35783: a0 = a1 >> 0x28\n 35786: u8 [sp + 0xf5] = a0\n 35790: a0 = a1 >> 0x20\n 35793: u8 [sp + 0xf4] = a0\n 35797: a0 = a1 >> 0x18\n 35800: u8 [sp + 0xf3] = a0\n 35804: a0 = a1 >> 0x10\n 35807: u8 [sp + 0xf2] = a0\n 35811: u8 [sp + 0xf0] = a1\n 35815: a0 = a1 >> 0x8\n 35818: u8 [sp + 0xf1] = a0\n 35822: a1 = u64 [sp + 0x50]\n 35825: a0 = a1 >> 0x38\n 35828: u8 [sp + 0xff] = a0\n 35832: a0 = a1 >> 0x30\n 35835: u8 [sp + 0xfe] = a0\n 35839: a0 = a1 >> 0x28\n 35842: u8 [sp + 0xfd] = a0\n 35846: a0 = a1 >> 0x20\n 35849: u8 [sp + 0xfc] = a0\n 35853: a0 = a1 >> 0x18\n 35856: u8 [sp + 0xfb] = a0\n 35860: a0 = a1 >> 0x10\n 35863: u8 [sp + 0xfa] = a0\n 35867: u8 [sp + 0xf8] = a1\n 35871: a0 = a1 >> 0x8\n 35874: u8 [sp + 0xf9] = a0\n 35878: a0 = sp + 0xe0\n 35882: a4 = a0 - a4\n 35885: u8 [sp + 223] = 0\n 35889: u8 [sp + 222] = 0\n 35893: u8 [sp + 221] = 0\n 35897: u8 [sp + 220] = 0\n 35901: u8 [sp + 219] = 0\n 35905: u8 [sp + 218] = 0\n 35909: u8 [sp + 217] = 0\n 35913: u8 [sp + 216] = 0\n 35917: u8 [sp + 215] = 0\n 35921: u8 [sp + 214] = 0\n 35925: u8 [sp + 213] = 0\n 35929: u8 [sp + 212] = 0\n 35933: u8 [sp + 211] = 0\n 35937: u8 [sp + 210] = 0\n 35941: u8 [sp + 209] = 0\n 35945: u8 [sp + 208] = 0\n 35949: u8 [sp + 207] = 0\n 35953: u8 [sp + 206] = 0\n 35957: u8 [sp + 205] = 0\n 35961: u8 [sp + 204] = 0\n 35965: u8 [sp + 203] = 0\n 35969: u8 [sp + 202] = 0\n 35973: u8 [sp + 201] = 0\n 35977: u8 [sp + 200] = 0\n 35981: u8 [sp + 199] = 0\n 35985: u8 [sp + 198] = 0\n 35989: u8 [sp + 197] = 0\n 35993: u8 [sp + 196] = 0\n 35997: u8 [sp + 195] = 0\n 36001: u8 [sp + 194] = 0\n 36005: u8 [sp + 193] = 0\n 36009: u8 [sp + 192] = 0\n 36013: a0 = u8 [a4 + 0x19]\n 36016: a1 = u8 [a4 + 0x18]\n 36019: a2 = u8 [a4 + 0x1a]\n 36022: s1 = u8 [a4 + 0x1b]\n 36025: a0 = a0 << 0x8\n 36028: a0 = a0 | a1\n 36031: a2 = a2 << 0x10\n 36034: s1 = s1 << 0x18\n 36037: a2 = a2 | s1\n 36040: a3 = a2 | a0\n 36043: a1 = u8 [a4 + 0x1d]\n 36046: a2 = u8 [a4 + 0x1c]\n 36049: s1 = u8 [a4 + 0x1e]\n 36052: a0 = u8 [a4 + 0x1f]\n 36055: a1 = a1 << 0x8\n 36058: a1 = a1 | a2\n 36061: s1 = s1 << 0x10\n 36064: a0 = a0 << 0x18\n 36067: a0 = a0 | s1\n 36070: a0 = a0 | a1\n 36073: a0 = a0 << 0x20\n 36076: s1 = a0 | a3\n 36079: a0 = u8 [a4 + 0x11]\n 36082: a1 = u8 [a4 + 0x10]\n 36085: a2 = u8 [a4 + 0x12]\n 36088: a3 = u8 [a4 + 0x13]\n 36091: a0 = a0 << 0x8\n 36094: a0 = a0 | a1\n 36097: a2 = a2 << 0x10\n 36100: a3 = a3 << 0x18\n 36103: a2 = a2 | a3\n 36106: a5 = a2 | a0\n 36109: a1 = u8 [a4 + 0x15]\n 36112: a2 = u8 [a4 + 0x14]\n 36115: a3 = u8 [a4 + 0x16]\n 36118: a0 = u8 [a4 + 0x17]\n 36121: a1 = a1 << 0x8\n 36124: a1 = a1 | a2\n 36127: a3 = a3 << 0x10\n 36130: a0 = a0 << 0x18\n 36133: a0 = a0 | a3\n 36136: a0 = a0 | a1\n 36139: a0 = a0 << 0x20\n 36142: t0 = a0 | a5\n 36145: a0 = u8 [a4 + 0x9]\n 36148: a2 = u8 [a4 + 0x8]\n 36151: a3 = u8 [a4 + 0xa]\n 36154: a5 = u8 [a4 + 0xb]\n 36157: a0 = a0 << 0x8\n 36160: a0 = a0 | a2\n 36163: a3 = a3 << 0x10\n 36166: a5 = a5 << 0x18\n 36169: a3 = a3 | a5\n 36172: a1 = a3 | a0\n 36175: a2 = u8 [a4 + 0xd]\n 36178: a3 = u8 [a4 + 0xc]\n 36181: a5 = u8 [a4 + 0xe]\n 36184: a0 = u8 [a4 + 0xf]\n 36187: a2 = a2 << 0x8\n 36190: a2 = a2 | a3\n 36193: a5 = a5 << 0x10\n 36196: a0 = a0 << 0x18\n 36199: a0 = a0 | a5\n 36202: a0 = a0 | a2\n 36205: a0 = a0 << 0x20\n 36208: a0 = a0 | a1\n 36211: a1 = u8 [a4 + 0x1]\n 36214: a2 = u8 [a4]\n 36216: a3 = u8 [a4 + 0x2]\n 36219: a5 = u8 [a4 + 0x3]\n 36222: a1 = a1 << 0x8\n 36225: a1 = a1 | a2\n 36228: a3 = a3 << 0x10\n 36231: a5 = a5 << 0x18\n 36234: a3 = a3 | a5\n 36237: a1 = a1 | a3\n 36240: a2 = u8 [a4 + 0x5]\n 36243: a3 = u8 [a4 + 0x4]\n 36246: a5 = u8 [a4 + 0x6]\n 36249: a4 = u8 [a4 + 0x7]\n 36252: a2 = a2 << 0x8\n 36255: a2 = a2 | a3\n 36258: a5 = a5 << 0x10\n 36261: a4 = a4 << 0x18\n 36264: a4 = a4 | a5\n 36267: a2 = a2 | a4\n 36270: a2 = a2 << 0x20\n 36273: a4 = a2 | a1\n 36276: t2 = 0 if t1 != 0\n 36278: ra = 0 if t1 != 0\n 36280: a5 = u64 [sp + 0x10]\n 36283: a5 = 0 if t1 != 0\n 36285: a2 = u64 [sp + 0x18]\n 36288: a2 = 0 if t1 != 0\n 36290: a4 = 0 if t1 != 0\n 36292: a0 = 0 if t1 != 0\n 36294: t0 = 0 if t1 != 0\n 36296: s1 = 0 if t1 != 0\n 36298: a1 = u64 [sp + 0x38]\n 36301: t1 = a1 & ~a2\n 36304: a2 = a2 & s1\n 36307: a1 = u64 [sp + 0x40]\n 36310: a3 = a1 & ~a5\n 36313: a5 = t0 & a5\n 36316: a1 = u64 [sp + 0x48]\n 36319: s1 = a1 & ~ra\n 36322: a0 = a0 & ra\n 36325: a1 = u64 [sp + 0x58]\n 36328: a1 = a1 & ~t2\n 36331: a4 = a4 & t2\n 36334: a1 = a1 | a4\n 36337: a0 = a0 | s1\n 36340: a3 = a3 | a5\n 36343: a2 = t1 | a2\n 36346: a4 = u64 [sp + 0x60]\n 36349: u64 [sp + 0x1f8] = a4\n 36353: a4 = u64 [sp + 0x68]\n 36356: u64 [sp + 0x1f0] = a4\n 36360: a4 = u64 [sp + 0x70]\n 36363: u64 [sp + 0x1e8] = a4\n 36367: a4 = u64 [sp + 0x78]\n 36370: u64 [sp + 0x1e0] = a4\n 36374: u64 [sp + 0x218] = a2\n 36378: u64 [sp + 0x210] = a3\n 36382: u64 [sp + 0x208] = a0\n 36386: u64 [sp + 0x200] = a1\n 36390: i32 a1 = sp + 0x1e0\n 36394: i32 a3 = sp + 0x200\n 36398: a2 = 0xffffffffffffffff\n 36401: a4 = 0x20\n 36404: a0 = 0\n 36406: ecalli 16 // 'set_storage'\n 36408: sp = s0 + 0xfffffffffffffdc0\n 36412: ra = u64 [sp + 0x238]\n 36416: s0 = u64 [sp + 0x230]\n 36420: s1 = u64 [sp + 0x228]\n 36424: sp = sp + 0x240\n 36428: ret\n      : @501 (gas: 8)\n 36430: u64 [sp + 176] = 0\n 36434: u64 [sp + 168] = 0\n 36438: u64 [sp + 160] = 0\n 36442: a0 = 0x4e487b7100000000\n 36452: a1 = sp + 0xa0\n 36456: u64 [sp + 0xb8] = a0\n 36460: a0 = 0\n 36462: ra = 440, jump @8\n      : @502 [@dyn 220] (gas: 7)\n 36469: u64 [sp + 152] = 0\n 36473: u64 [sp + 144] = 0\n 36477: u64 [sp + 128] = 0x41\n 36482: a0 = 0x4\n 36485: a1 = sp + 0x80\n 36489: u64 [sp + 136] = 0\n 36493: ra = 442, jump @8\n      : @503 [@dyn 221] (gas: 3)\n 36500: a1 = 0x24\n 36503: a0 = 0\n 36505: ra = 444, jump @0\n      : @504 [@dyn 222] (gas: 6)\n 36512: i32 a1 = a0 + 0\n 36514: a0 = 0x1\n 36517: a2 = 0x24\n 36520: ra = 0x1be\n 36524: ecalli 14 // 'seal_return'\n 36526: fallthrough\n      : @505 [@dyn 223] (gas: 17)\n 36527: sp = sp + 0xffffffffffffff20\n 36531: u64 [sp + 0xd8] = ra\n 36535: u64 [sp + 0xd0] = s0\n 36539: u64 [sp + 0xc8] = s1\n 36543: t0 = u64 [a1 + 0x18]\n 36546: t1 = u64 [a1 + 0x10]\n 36549: s1 = u64 [a1 + 0x8]\n 36552: t2 = u64 [a1]\n 36554: a1 = s1 | t0\n 36557: s0 = t2 | t1\n 36560: s0 = s0 | a1\n 36563: s0 = s0 >> 0x20\n 36566: a1 = a1 | t1\n 36569: a1 = a1 << 0x20\n 36572: a1 = a1 | s0\n 36575: u64 [sp + 0x48] = a0\n 36578: jump @519 if a1 != 0\n      : @506 (gas: 48)\n 36582: a0 = u64 [a5 + 0x18]\n 36585: u64 [sp + 0x20] = a0\n 36588: a0 = u64 [a5 + 0x10]\n 36591: u64 [sp + 0x28] = a0\n 36594: a0 = u64 [a5 + 0x8]\n 36597: u64 [sp + 0x30] = a0\n 36600: a0 = u64 [a5]\n 36602: u64 [sp + 0x38] = a0\n 36605: a0 = u64 [a4 + 0x10]\n 36608: u64 [sp + 0x10] = a0\n 36611: s0 = t2 + 0x60\n 36614: a0 = s0 <u t2\n 36617: a1 = s1 + a0\n 36620: u64 [sp + 0xb8] = a1\n 36624: u64 [sp + 0x60] = s1\n 36627: a1 = a1 <u s1\n 36630: a1 = a0 if a0 == 0\n 36633: a0 = u64 [a4 + 0x8]\n 36636: u64 [sp] = a0\n 36638: a0 = u64 [a4]\n 36640: u64 [sp + 0x8] = a0\n 36643: a0 = u64 [a3 + 0x18]\n 36646: u64 [sp + 0xa8] = a0\n 36650: a0 = u64 [a3 + 0x10]\n 36653: u64 [sp + 0xa0] = a0\n 36657: a0 = u64 [a3 + 0x8]\n 36660: u64 [sp + 0x98] = a0\n 36664: a0 = u64 [a3]\n 36666: u64 [sp + 0xc0] = a0\n 36670: a0 = u64 [a2 + 0x18]\n 36673: u64 [sp + 0x80] = a0\n 36677: a0 = u64 [a2 + 0x10]\n 36680: u64 [sp + 0x88] = a0\n 36684: a0 = u64 [a2 + 0x8]\n 36687: u64 [sp + 0x78] = a0\n 36690: a0 = u64 [a2]\n 36692: u64 [sp + 0x90] = a0\n 36696: s1 = t1 + a1\n 36699: u64 [sp + 0x68] = t1\n 36702: a0 = s1 <u t1\n 36705: u64 [sp + 0x70] = t0\n 36708: a0 = a0 + t0\n 36711: u64 [sp + 0xb0] = a0\n 36715: u64 [sp + 0x58] = t2\n 36718: i32 a0 = t2 + 0\n 36720: a1 = 0x20\n 36723: u64 [sp + 0x18] = a0\n 36726: ra = 448, jump @0\n      : @507 [@dyn 224] (gas: 43)\n 36733: u8 [a0 + 31] = 0x60\n 36737: a1 = s0 | s1\n 36740: a2 = u64 [sp + 0xb8]\n 36744: a4 = u64 [sp + 0xb0]\n 36748: a2 = a2 | a4\n 36751: a1 = a1 | a2\n 36754: a1 = a1 >> 0x20\n 36757: u64 [sp + 0x50] = s1\n 36760: a2 = a2 | s1\n 36763: a2 = a2 << 0x20\n 36766: a1 = a1 | a2\n 36769: u8 [a0 + 30] = 0\n 36772: u8 [a0 + 29] = 0\n 36775: u8 [a0 + 28] = 0\n 36778: u8 [a0 + 27] = 0\n 36781: u8 [a0 + 26] = 0\n 36784: u8 [a0 + 25] = 0\n 36787: u8 [a0 + 24] = 0\n 36790: u8 [a0 + 23] = 0\n 36793: u8 [a0 + 22] = 0\n 36796: u8 [a0 + 21] = 0\n 36799: u8 [a0 + 20] = 0\n 36802: u8 [a0 + 19] = 0\n 36805: u8 [a0 + 18] = 0\n 36808: u8 [a0 + 17] = 0\n 36811: u8 [a0 + 16] = 0\n 36814: u8 [a0 + 15] = 0\n 36817: u8 [a0 + 14] = 0\n 36820: u8 [a0 + 13] = 0\n 36823: u8 [a0 + 12] = 0\n 36826: u8 [a0 + 11] = 0\n 36829: u8 [a0 + 10] = 0\n 36832: u8 [a0 + 9] = 0\n 36835: u8 [a0 + 8] = 0\n 36838: u8 [a0 + 7] = 0\n 36841: u8 [a0 + 6] = 0\n 36844: u8 [a0 + 5] = 0\n 36847: u8 [a0 + 4] = 0\n 36850: u8 [a0 + 3] = 0\n 36853: u8 [a0 + 2] = 0\n 36856: u8 [a0 + 1] = 0\n 36859: u8 [a0 + 0] = 0\n 36861: jump @519 if a1 != 0\n      : @508 (gas: 4)\n 36865: u64 [sp + 0x40] = s0\n 36868: i32 a0 = s0 + 0\n 36870: a1 = 0x20\n 36873: ra = 450, jump @0\n      : @509 [@dyn 225] (gas: 80)\n 36880: t0 = u64 [sp + 0xc0]\n 36884: a1 = reverse t0\n 36886: a2 = a1 >> 0x38\n 36889: u8 [a0 + 0x1f] = a2\n 36892: a2 = a1 >> 0x30\n 36895: u8 [a0 + 0x1e] = a2\n 36898: a2 = a1 >> 0x28\n 36901: u8 [a0 + 0x1d] = a2\n 36904: a2 = a1 >> 0x20\n 36907: u8 [a0 + 0x1c] = a2\n 36910: a2 = a1 >> 0x18\n 36913: u8 [a0 + 0x1b] = a2\n 36916: a2 = a1 >> 0x10\n 36919: u8 [a0 + 0x1a] = a2\n 36922: a2 = a1 >> 0x8\n 36925: u8 [a0 + 0x19] = a2\n 36928: a5 = u64 [sp + 0x98]\n 36932: a2 = reverse a5\n 36934: u8 [a0 + 0x18] = a1\n 36937: a1 = a2 >> 0x38\n 36940: u8 [a0 + 0x17] = a1\n 36943: a1 = a2 >> 0x30\n 36946: u8 [a0 + 0x16] = a1\n 36949: a1 = a2 >> 0x28\n 36952: u8 [a0 + 0x15] = a1\n 36955: a1 = a2 >> 0x20\n 36958: u8 [a0 + 0x14] = a1\n 36961: a1 = a2 >> 0x18\n 36964: u8 [a0 + 0x13] = a1\n 36967: a1 = a2 >> 0x10\n 36970: u8 [a0 + 0x12] = a1\n 36973: a4 = u64 [sp + 0xa0]\n 36977: a3 = reverse a4\n 36979: u8 [a0 + 0x10] = a2\n 36982: a2 = a2 >> 0x8\n 36985: u8 [a0 + 0x11] = a2\n 36988: a1 = a3 >> 0x38\n 36991: u8 [a0 + 0xf] = a1\n 36994: a1 = a3 >> 0x30\n 36997: u8 [a0 + 0xe] = a1\n 37000: a1 = a3 >> 0x28\n 37003: u8 [a0 + 0xd] = a1\n 37006: a1 = a3 >> 0x20\n 37009: u8 [a0 + 0xc] = a1\n 37012: a1 = a3 >> 0x18\n 37015: u8 [a0 + 0xb] = a1\n 37018: a1 = a3 >> 0x10\n 37021: u8 [a0 + 0xa] = a1\n 37024: s1 = u64 [sp + 0xa8]\n 37028: a1 = reverse s1\n 37030: u8 [a0 + 0x8] = a3\n 37033: a3 = a3 >> 0x8\n 37036: u8 [a0 + 0x9] = a3\n 37039: a2 = a1 >> 0x38\n 37042: u8 [a0 + 0x7] = a2\n 37045: a2 = a1 >> 0x30\n 37048: u8 [a0 + 0x6] = a2\n 37051: a2 = a1 >> 0x28\n 37054: u8 [a0 + 0x5] = a2\n 37057: a2 = a1 >> 0x20\n 37060: u8 [a0 + 0x4] = a2\n 37063: a2 = a1 >> 0x18\n 37066: u8 [a0 + 0x3] = a2\n 37069: a2 = a1 >> 0x10\n 37072: u8 [a0 + 0x2] = a2\n 37075: a2 = u64 [sp + 0x80]\n 37079: s0 = u64 [sp + 0x78]\n 37082: s0 = s0 | a2\n 37085: t2 = u64 [sp + 0x90]\n 37089: a2 = u64 [sp + 0x88]\n 37093: a3 = t2 | a2\n 37096: a3 = a3 | s0\n 37099: a2 = a2 | s0\n 37102: a3 = a3 >> 0x20\n 37105: a2 = a2 << 0x20\n 37108: a2 = a2 | a3\n 37111: u8 [a0] = a1\n 37113: a1 = a1 >> 0x8\n 37116: u8 [a0 + 0x1] = a1\n 37119: jump @519 if a2 != 0\n      : @510 (gas: 13)\n 37123: a3 = a4\n 37125: a0 = t0 | a3\n 37128: a1 = a5 | s1\n 37131: a0 = a0 | a1\n 37134: a0 = a0 >> 0x20\n 37137: a1 = a1 | a3\n 37140: a1 = a1 << 0x20\n 37143: a0 = a0 | a1\n 37146: t1 = u64 [sp + 0x70]\n 37149: a2 = u64 [sp + 0x68]\n 37152: a5 = u64 [sp + 0x60]\n 37155: a4 = u64 [sp + 0x58]\n 37158: jump @519 if a0 != 0\n      : @511 (gas: 10)\n 37162: a0 = u64 [sp + 0x50]\n 37165: a1 = u64 [sp + 0xb0]\n 37169: a0 = a0 | a1\n 37172: a1 = 0xffffffe0\n 37182: a3 = u64 [sp + 0x40]\n 37185: a1 = a3 <u a1\n 37188: a3 = u64 [sp + 0xb8]\n 37192: a1 = 0 if a3 != 0\n 37194: a1 = 0 if a0 != 0\n 37196: jump @519 if a1 == 0\n      : @512 (gas: 17)\n 37200: s1 = a4 + 0x80\n 37204: a0 = s1 <u a4\n 37207: a1 = a5 + a0\n 37210: u64 [sp + 0xb0] = a1\n 37214: a1 = a1 <u a5\n 37217: a1 = a0 if a0 == 0\n 37220: a1 = a1 + a2\n 37223: u64 [sp + 0xb8] = a1\n 37227: a0 = a1 <u a2\n 37230: a0 = a0 + t1\n 37233: u64 [sp + 0x88] = a0\n 37237: i32 t2 = t2 + 0\n 37239: u64 [sp + 0x90] = t2\n 37243: i32 a0 = s1 + 0\n 37245: i32 s0 = t0 + 0\n 37247: a1 = s0\n 37249: ra = 452, jump @0\n      : @513 [@dyn 226] (gas: 6)\n 37256: i32 a0 = a0 + 0\n 37258: a1 = s0\n 37260: s0 = u64 [sp + 0xb0]\n 37264: a2 = u64 [sp + 0x90]\n 37268: ecalli 2 // 'call_data_copy'\n 37270: fallthrough\n      : @514 (gas: 29)\n 37271: a0 = u64 [sp + 0xc0]\n 37275: a0 = a0 + s1\n 37278: u64 [sp + 0x90] = s1\n 37282: a1 = a0 <u s1\n 37285: s1 = u64 [sp + 0x88]\n 37289: a2 = u64 [sp + 0x98]\n 37293: a2 = a2 + s0\n 37296: a2 = a2 + a1\n 37299: a3 = a2 ^ s0\n 37302: a4 = a2 <u s0\n 37305: a4 = a1 if a3 == 0\n 37308: a1 = u64 [sp + 0xa0]\n 37312: a5 = u64 [sp + 0xb8]\n 37316: a1 = a1 + a5\n 37319: a4 = a4 + a1\n 37322: a3 = a4 <u a1\n 37325: a1 = a1 <u a5\n 37328: a5 = u64 [sp + 0xa8]\n 37332: a5 = a5 + s1\n 37335: a1 = a1 + a5\n 37338: a1 = a1 + a3\n 37341: a3 = a0 | a4\n 37344: a1 = a1 | a2\n 37347: a3 = a3 | a1\n 37350: a3 = a3 >> 0x20\n 37353: a1 = a1 | a4\n 37356: a1 = a1 << 0x20\n 37359: a1 = a1 | a3\n 37362: jump @519 if a1 != 0\n      : @515 (gas: 3)\n 37366: i32 a0 = a0 + 0\n 37368: a1 = 0x20\n 37371: ra = 454, jump @0\n      : @516 [@dyn 227] (gas: 57)\n 37378: u8 [a0 + 31] = 0\n 37381: u8 [a0 + 30] = 0\n 37384: u8 [a0 + 29] = 0\n 37387: u8 [a0 + 28] = 0\n 37390: u8 [a0 + 27] = 0\n 37393: u8 [a0 + 26] = 0\n 37396: u8 [a0 + 25] = 0\n 37399: u8 [a0 + 24] = 0\n 37402: u8 [a0 + 23] = 0\n 37405: u8 [a0 + 22] = 0\n 37408: u8 [a0 + 21] = 0\n 37411: u8 [a0 + 20] = 0\n 37414: u8 [a0 + 19] = 0\n 37417: u8 [a0 + 18] = 0\n 37420: u8 [a0 + 17] = 0\n 37423: u8 [a0 + 16] = 0\n 37426: u8 [a0 + 15] = 0\n 37429: u8 [a0 + 14] = 0\n 37432: u8 [a0 + 13] = 0\n 37435: u8 [a0 + 12] = 0\n 37438: u8 [a0 + 11] = 0\n 37441: u8 [a0 + 10] = 0\n 37444: u8 [a0 + 9] = 0\n 37447: u8 [a0 + 8] = 0\n 37450: u8 [a0 + 7] = 0\n 37453: u8 [a0 + 6] = 0\n 37456: u8 [a0 + 5] = 0\n 37459: u8 [a0 + 4] = 0\n 37462: u8 [a0 + 3] = 0\n 37465: u8 [a0 + 2] = 0\n 37468: u8 [a0 + 1] = 0\n 37471: u8 [a0 + 0] = 0\n 37473: a0 = u64 [sp + 0xc0]\n 37477: a0 = a0 + 0x1f\n 37480: a1 = 0x1ffffffe0\n 37490: a0 = a0 & a1\n 37493: a1 = u64 [sp + 0x90]\n 37497: a1 = a1 + a0\n 37500: u64 [sp + 0xc0] = a1\n 37504: s0 = a1 <u a0\n 37507: a0 = u64 [sp + 0xb0]\n 37511: a0 = a0 + s0\n 37514: u64 [sp + 0xb0] = a0\n 37518: s0 = 0 if a0 != 0\n 37520: a0 = u64 [sp + 0xb8]\n 37524: s0 = s0 + a0\n 37527: u64 [sp + 0xa8] = s0\n 37531: a0 = s0 <u a0\n 37534: a0 = a0 + s1\n 37537: u64 [sp + 0xb8] = a0\n 37541: a0 = u64 [sp + 0x10]\n 37544: a0 = a0 << 0x20\n 37547: s1 = a0 >> 0x20\n 37550: s0 = u64 [sp + 0x18]\n 37553: i32 a0 = s0 + 0x20\n 37556: a1 = 0x20\n 37559: ra = 456, jump @0\n      : @517 [@dyn 228] (gas: 58)\n 37566: a1 = reverse s1\n 37568: a2 = u64 [sp]\n 37570: a2 = reverse a2\n 37572: a3 = u64 [sp + 0x8]\n 37575: a3 = reverse a3\n 37577: a4 = a3 >> 0x38\n 37580: u8 [a0 + 0x1f] = a4\n 37583: a4 = a3 >> 0x30\n 37586: u8 [a0 + 0x1e] = a4\n 37589: a4 = a3 >> 0x28\n 37592: u8 [a0 + 0x1d] = a4\n 37595: a4 = a3 >> 0x20\n 37598: u8 [a0 + 0x1c] = a4\n 37601: a4 = a3 >> 0x18\n 37604: u8 [a0 + 0x1b] = a4\n 37607: a4 = a3 >> 0x10\n 37610: u8 [a0 + 0x1a] = a4\n 37613: a4 = a3 >> 0x8\n 37616: u8 [a0 + 0x19] = a4\n 37619: u8 [a0 + 0x18] = a3\n 37622: a3 = a2 >> 0x38\n 37625: u8 [a0 + 0x17] = a3\n 37628: a3 = a2 >> 0x30\n 37631: u8 [a0 + 0x16] = a3\n 37634: a3 = a2 >> 0x28\n 37637: u8 [a0 + 0x15] = a3\n 37640: a3 = a2 >> 0x20\n 37643: u8 [a0 + 0x14] = a3\n 37646: a3 = a2 >> 0x18\n 37649: u8 [a0 + 0x13] = a3\n 37652: a3 = a2 >> 0x10\n 37655: u8 [a0 + 0x12] = a3\n 37658: a3 = a2 >> 0x8\n 37661: u8 [a0 + 0x11] = a3\n 37664: u8 [a0 + 0x10] = a2\n 37667: u8 [a0 + 11] = 0\n 37670: u8 [a0 + 10] = 0\n 37673: u8 [a0 + 9] = 0\n 37676: u8 [a0 + 0x8] = a1\n 37679: u8 [a0 + 7] = 0\n 37682: u8 [a0 + 6] = 0\n 37685: u8 [a0 + 5] = 0\n 37688: u8 [a0 + 4] = 0\n 37691: u8 [a0 + 3] = 0\n 37694: u8 [a0 + 2] = 0\n 37697: u8 [a0 + 1] = 0\n 37700: u8 [a0 + 0] = 0\n 37702: a2 = a1 >> 0x38\n 37705: u8 [a0 + 0xf] = a2\n 37708: a2 = a1 >> 0x30\n 37711: u8 [a0 + 0xe] = a2\n 37714: a2 = a1 >> 0x28\n 37717: u8 [a0 + 0xd] = a2\n 37720: a1 = a1 >> 0x20\n 37723: u8 [a0 + 0xc] = a1\n 37726: i32 a0 = s0 + 0x40\n 37729: a1 = 0x20\n 37732: ra = 458, jump @0\n      : @518 [@dyn 229] (gas: 82)\n 37739: a1 = u64 [sp + 0x20]\n 37742: a1 = reverse a1\n 37744: a2 = u64 [sp + 0x28]\n 37747: a2 = reverse a2\n 37749: a3 = u64 [sp + 0x30]\n 37752: a3 = reverse a3\n 37754: a4 = u64 [sp + 0x38]\n 37757: a4 = reverse a4\n 37759: a5 = a4 >> 0x38\n 37762: u8 [a0 + 0x1f] = a5\n 37765: a5 = a4 >> 0x30\n 37768: u8 [a0 + 0x1e] = a5\n 37771: a5 = a4 >> 0x28\n 37774: u8 [a0 + 0x1d] = a5\n 37777: a5 = a4 >> 0x20\n 37780: u8 [a0 + 0x1c] = a5\n 37783: a5 = a4 >> 0x18\n 37786: u8 [a0 + 0x1b] = a5\n 37789: a5 = a4 >> 0x10\n 37792: u8 [a0 + 0x1a] = a5\n 37795: a5 = a4 >> 0x8\n 37798: u8 [a0 + 0x19] = a5\n 37801: u8 [a0 + 0x18] = a4\n 37804: a4 = a3 >> 0x38\n 37807: u8 [a0 + 0x17] = a4\n 37810: a4 = a3 >> 0x30\n 37813: u8 [a0 + 0x16] = a4\n 37816: a4 = a3 >> 0x28\n 37819: u8 [a0 + 0x15] = a4\n 37822: a4 = a3 >> 0x20\n 37825: u8 [a0 + 0x14] = a4\n 37828: a4 = a3 >> 0x18\n 37831: u8 [a0 + 0x13] = a4\n 37834: a4 = a3 >> 0x10\n 37837: u8 [a0 + 0x12] = a4\n 37840: a4 = a3 >> 0x8\n 37843: u8 [a0 + 0x11] = a4\n 37846: u8 [a0 + 0x10] = a3\n 37849: a3 = a2 >> 0x38\n 37852: u8 [a0 + 0xf] = a3\n 37855: a3 = a2 >> 0x30\n 37858: u8 [a0 + 0xe] = a3\n 37861: a3 = a2 >> 0x28\n 37864: u8 [a0 + 0xd] = a3\n 37867: a3 = a2 >> 0x20\n 37870: u8 [a0 + 0xc] = a3\n 37873: a3 = a2 >> 0x18\n 37876: u8 [a0 + 0xb] = a3\n 37879: a3 = a2 >> 0x10\n 37882: u8 [a0 + 0xa] = a3\n 37885: a3 = a2 >> 0x8\n 37888: u8 [a0 + 0x9] = a3\n 37891: u8 [a0 + 0x8] = a2\n 37894: a2 = a1 >> 0x38\n 37897: u8 [a0 + 0x7] = a2\n 37900: a2 = a1 >> 0x30\n 37903: u8 [a0 + 0x6] = a2\n 37906: a2 = a1 >> 0x28\n 37909: u8 [a0 + 0x5] = a2\n 37912: a2 = a1 >> 0x20\n 37915: u8 [a0 + 0x4] = a2\n 37918: a2 = a1 >> 0x18\n 37921: u8 [a0 + 0x3] = a2\n 37924: a2 = a1 >> 0x10\n 37927: u8 [a0 + 0x2] = a2\n 37930: a2 = a1 >> 0x8\n 37933: u8 [a0 + 0x1] = a2\n 37936: u8 [a0] = a1\n 37938: a0 = u64 [sp + 0x48]\n 37941: a1 = u64 [sp + 0xc0]\n 37945: u64 [a0] = a1\n 37947: a1 = u64 [sp + 0xb8]\n 37951: u64 [a0 + 0x18] = a1\n 37954: a1 = u64 [sp + 0xb0]\n 37958: u64 [a0 + 0x8] = a1\n 37961: a1 = u64 [sp + 0xa8]\n 37965: u64 [a0 + 0x10] = a1\n 37968: ra = u64 [sp + 0xd8]\n 37972: s0 = u64 [sp + 0xd0]\n 37976: s1 = u64 [sp + 0xc8]\n 37980: sp = sp + 0xe0\n 37984: ret\n      : @519 (gas: 1)\n 37986: trap\n      : @520 (gas: 21)\n 37987: sp = sp + 0xfffffffffffffe10\n 37991: u64 [sp + 0x1e8] = ra\n 37995: u64 [sp + 0x1e0] = s0\n 37999: u64 [sp + 0x1d8] = s1\n 38003: s0 = sp + 0x1f0\n 38007: sp = sp + 0xfffffffffffff9d0\n 38011: sp = sp & 0xffffffffffffffe0\n 38014: s1 = sp\n 38016: t1 = u64 [a2 + 0x10]\n 38019: t2 = u64 [a2 + 0x18]\n 38022: t0 = u64 [a2 + 0x8]\n 38025: a2 = u64 [a2]\n 38027: u64 [s1 + 0x268] = t0\n 38031: u64 [s1 + 0x260] = t2\n 38035: t0 = t0 | t2\n 38038: u64 [s1 + 0x278] = t1\n 38042: u64 [s1 + 0x270] = a2\n 38046: a2 = a2 | t1\n 38049: a2 = a2 | t0\n 38052: u64 [s1 + 0x98] = a0\n 38056: jump @522 if a2 != 0\n      : @521 (gas: 1)\n 38059: jump @566\n      : @522 (gas: 70)\n 38062: a0 = u64 [s0 + 0x10]\n 38065: a2 = u64 [a0 + 0x18]\n 38068: u64 [s1 + 0x138] = a2\n 38072: t0 = u64 [s0 + 0x8]\n 38075: a2 = u64 [a0 + 0x10]\n 38078: u64 [s1 + 0x118] = a2\n 38082: a2 = u64 [a0 + 0x8]\n 38085: u64 [s1 + 0x120] = a2\n 38089: a0 = u64 [a0]\n 38091: u64 [s1 + 0x128] = a0\n 38095: a0 = u64 [t0 + 0x18]\n 38098: u64 [s1 + 0x130] = a0\n 38102: a0 = u64 [s0]\n 38104: a2 = u64 [t0 + 0x10]\n 38107: u64 [s1 + 0xa0] = a2\n 38111: a2 = u64 [t0 + 0x8]\n 38114: u64 [s1 + 0xa8] = a2\n 38118: a2 = u64 [t0]\n 38120: u64 [s1 + 0xb0] = a2\n 38124: a2 = u64 [a0 + 0x18]\n 38127: u64 [s1 + 0xb8] = a2\n 38131: a2 = u64 [a0 + 0x10]\n 38134: u64 [s1 + 0xc0] = a2\n 38138: a2 = u64 [a0 + 0x8]\n 38141: u64 [s1 + 0xc8] = a2\n 38145: a0 = u64 [a0]\n 38147: u64 [s1 + 0xd0] = a0\n 38151: a0 = u64 [a5 + 0x18]\n 38154: u64 [s1 + 0xd8] = a0\n 38158: a0 = u64 [a5 + 0x10]\n 38161: u64 [s1 + 0xe0] = a0\n 38165: a0 = u64 [a5 + 0x8]\n 38168: u64 [s1 + 0xe8] = a0\n 38172: a0 = u64 [a5]\n 38174: u64 [s1 + 0xf0] = a0\n 38178: a0 = u64 [a4 + 0x18]\n 38181: u64 [s1 + 0xf8] = a0\n 38185: a0 = u64 [a4 + 0x10]\n 38188: u64 [s1 + 0x100] = a0\n 38192: a0 = u64 [a4 + 0x8]\n 38195: u64 [s1 + 0x108] = a0\n 38199: a0 = u64 [a4]\n 38201: u64 [s1 + 0x110] = a0\n 38205: a0 = u64 [a3 + 0x18]\n 38208: u64 [s1 + 0x280] = a0\n 38212: a0 = u64 [a3 + 0x10]\n 38215: u64 [s1 + 0x288] = a0\n 38219: a0 = u64 [a3 + 0x8]\n 38222: u64 [s1 + 0x290] = a0\n 38226: a0 = u64 [a3]\n 38228: u64 [s1 + 0x298] = a0\n 38232: a0 = u64 [a1 + 0x18]\n 38235: u64 [s1 + 0x240] = a0\n 38239: a0 = u64 [a1 + 0x10]\n 38242: u64 [s1 + 0x248] = a0\n 38246: a0 = u64 [a1 + 0x8]\n 38249: u64 [s1 + 0x250] = a0\n 38253: a0 = u64 [a1]\n 38255: u64 [s1 + 0x258] = a0\n 38259: a0 = sp + 0xffffffffffffffe0\n 38262: a0 = a0 & 0xffffffffffffffe0\n 38265: u64 [s1 + 0x2b8] = a0\n 38269: sp = a0\n 38271: u64 [a0 + 24] = 0\n 38274: u64 [a0 + 16] = 0\n 38277: u64 [a0 + 8] = 0\n 38280: u64 [a0 + 0] = 0\n 38282: i32 a0 = a0 + 0\n 38284: ecalli 17 // 'value_transferred'\n 38286: fallthrough\n      : @523 (gas: 21)\n 38287: a1 = u64 [s1 + 0x2b8]\n 38291: a0 = u64 [a1 + 0x18]\n 38294: t0 = u64 [a1]\n 38296: a2 = u64 [a1 + 0x10]\n 38299: a3 = u64 [a1 + 0x8]\n 38302: a1 = u64 [s1 + 0x280]\n 38306: a4 = a0 ^ a1\n 38309: a1 = a0 <u a1\n 38312: a0 = u64 [s1 + 0x288]\n 38316: a5 = a2 <u a0\n 38319: a5 = a1 if a4 != 0\n 38322: a1 = u64 [s1 + 0x290]\n 38326: t1 = a3 ^ a1\n 38329: a3 = a3 <u a1\n 38332: a1 = u64 [s1 + 0x298]\n 38336: a1 = t0 <u a1\n 38339: a1 = a3 if t1 != 0\n 38342: a0 = a0 ^ a2\n 38345: a0 = a0 | a4\n 38348: a1 = a5 if a0 != 0\n 38351: jump @525 if a1 == 0\n      : @524 (gas: 1)\n 38354: jump @571\n      : @525 (gas: 26)\n 38357: a0 = u32 [0x20084]\n 38362: u64 [s1 + 1592] = 0\n 38366: u64 [s1 + 1584] = 0\n 38370: u64 [s1 + 1576] = 0\n 38374: u64 [s1 + 0x620] = a0\n 38378: a0 = u64 [s1 + 0x278]\n 38382: u64 [s1 + 0x650] = a0\n 38386: a0 = u64 [s1 + 0x268]\n 38390: u64 [s1 + 0x648] = a0\n 38394: a0 = u64 [s1 + 0x270]\n 38398: u64 [s1 + 0x640] = a0\n 38402: a0 = u64 [s1 + 0x248]\n 38406: u64 [s1 + 0x670] = a0\n 38410: a0 = u64 [s1 + 0x250]\n 38414: u64 [s1 + 0x668] = a0\n 38418: a0 = u64 [s1 + 0x258]\n 38422: u64 [s1 + 0x660] = a0\n 38426: a0 = u64 [s1 + 0x260]\n 38430: u64 [s1 + 0x658] = a0\n 38434: a0 = s1 + 0x680\n 38438: a1 = s1 + 0x660\n 38442: a2 = s1 + 0x640\n 38446: a3 = s1 + 0x620\n 38450: a4 = u64 [s1 + 0x240]\n 38454: u64 [s1 + 0x678] = a4\n 38458: ra = 460, jump @434\n      : @526 [@dyn 230] (gas: 15)\n 38464: a1 = u64 [s1 + 0x698]\n 38468: a3 = u64 [s1 + 0x690]\n 38472: a0 = u64 [s1 + 0x688]\n 38476: a2 = u64 [s1 + 0x680]\n 38480: u64 [s1 + 0x2b8] = a0\n 38484: u64 [s1 + 0x2b0] = a1\n 38488: a0 = a0 | a1\n 38491: a1 = a2 | a3\n 38494: a1 = a1 | a0\n 38497: a1 = a1 >> 0x20\n 38500: u64 [s1 + 0x2a8] = a3\n 38504: a0 = a0 | a3\n 38507: a0 = a0 << 0x20\n 38510: a0 = a0 | a1\n 38513: jump @528 if a0 == 0\n      : @527 (gas: 1)\n 38516: jump @582\n      : @528 (gas: 5)\n 38519: i32 a0 = a2 + 0\n 38521: a1 = 0x20\n 38524: u64 [s1 + 0x238] = a0\n 38528: u64 [s1 + 0x2a0] = a2\n 38532: ra = 462, jump @0\n      : @529 [@dyn 231] (gas: 10)\n 38539: a1 = u64 [s1 + 0x2b0]\n 38543: a2 = u64 [s1 + 0x2a8]\n 38547: a1 = a1 | a2\n 38550: a2 = 0xffffffe0\n 38560: a3 = u64 [s1 + 0x2a0]\n 38564: a2 = a3 <u a2\n 38567: a3 = u64 [s1 + 0x2b8]\n 38571: a2 = 0 if a3 != 0\n 38573: a2 = 0 if a1 != 0\n 38575: jump @531 if a2 != 0\n      : @530 (gas: 1)\n 38578: jump @582\n      : @531 (gas: 100)\n 38581: a1 = u8 [a0 + 0x19]\n 38584: a2 = u8 [a0 + 0x18]\n 38587: a3 = u8 [a0 + 0x1a]\n 38590: a4 = u8 [a0 + 0x1b]\n 38593: a1 = a1 << 0x8\n 38596: a1 = a1 | a2\n 38599: a3 = a3 << 0x10\n 38602: a4 = a4 << 0x18\n 38605: a3 = a3 | a4\n 38608: a1 = a1 | a3\n 38611: a2 = u8 [a0 + 0x1d]\n 38614: a3 = u8 [a0 + 0x1c]\n 38617: a4 = u8 [a0 + 0x1e]\n 38620: a5 = u8 [a0 + 0x1f]\n 38623: a2 = a2 << 0x8\n 38626: a2 = a2 | a3\n 38629: a4 = a4 << 0x10\n 38632: a5 = a5 << 0x18\n 38635: a4 = a4 | a5\n 38638: a2 = a2 | a4\n 38641: a2 = a2 << 0x20\n 38644: t0 = a2 | a1\n 38647: a2 = u8 [a0 + 0x11]\n 38650: a3 = u8 [a0 + 0x10]\n 38653: a4 = u8 [a0 + 0x12]\n 38656: a5 = u8 [a0 + 0x13]\n 38659: a2 = a2 << 0x8\n 38662: a2 = a2 | a3\n 38665: a4 = a4 << 0x10\n 38668: a5 = a5 << 0x18\n 38671: a4 = a4 | a5\n 38674: a2 = a2 | a4\n 38677: a3 = u8 [a0 + 0x15]\n 38680: a4 = u8 [a0 + 0x14]\n 38683: a5 = u8 [a0 + 0x16]\n 38686: a1 = u8 [a0 + 0x17]\n 38689: a3 = a3 << 0x8\n 38692: a3 = a3 | a4\n 38695: a5 = a5 << 0x10\n 38698: a1 = a1 << 0x18\n 38701: a1 = a1 | a5\n 38704: a1 = a1 | a3\n 38707: a1 = a1 << 0x20\n 38710: t1 = a1 | a2\n 38713: a1 = u8 [a0 + 0x9]\n 38716: a3 = u8 [a0 + 0x8]\n 38719: a4 = u8 [a0 + 0xa]\n 38722: a5 = u8 [a0 + 0xb]\n 38725: a1 = a1 << 0x8\n 38728: a1 = a1 | a3\n 38731: a4 = a4 << 0x10\n 38734: a5 = a5 << 0x18\n 38737: a4 = a4 | a5\n 38740: a1 = a1 | a4\n 38743: a3 = u8 [a0 + 0xd]\n 38746: a4 = u8 [a0 + 0xc]\n 38749: a5 = u8 [a0 + 0xe]\n 38752: a2 = u8 [a0 + 0xf]\n 38755: a3 = a3 << 0x8\n 38758: a3 = a3 | a4\n 38761: a5 = a5 << 0x10\n 38764: a2 = a2 << 0x18\n 38767: a2 = a2 | a5\n 38770: a2 = a2 | a3\n 38773: a2 = a2 << 0x20\n 38776: a3 = a2 | a1\n 38779: a1 = u8 [a0 + 0x1]\n 38782: a2 = u8 [a0]\n 38784: a4 = u8 [a0 + 0x2]\n 38787: a5 = u8 [a0 + 0x3]\n 38790: a1 = a1 << 0x8\n 38793: a1 = a1 | a2\n 38796: a4 = a4 << 0x10\n 38799: a5 = a5 << 0x18\n 38802: a4 = a4 | a5\n 38805: a1 = a1 | a4\n 38808: a2 = u8 [a0 + 0x5]\n 38811: a4 = u8 [a0 + 0x4]\n 38814: a5 = u8 [a0 + 0x6]\n 38817: a0 = u8 [a0 + 0x7]\n 38820: a2 = a2 << 0x8\n 38823: a2 = a2 | a4\n 38826: a5 = a5 << 0x10\n 38829: a0 = a0 << 0x18\n 38832: a0 = a0 | a5\n 38835: a0 = a0 | a2\n 38838: a0 = a0 << 0x20\n 38841: a0 = a0 | a1\n 38844: a0 = reverse a0\n 38846: a2 = reverse a3\n 38848: a3 = reverse t1\n 38850: a1 = reverse t0\n 38852: a4 = a1 | a2\n 38855: a0 = a0 | a3\n 38858: a4 = a4 | a0\n 38861: a4 = a4 >> 0x20\n 38864: a0 = a0 | a2\n 38867: a0 = a0 << 0x20\n 38870: a0 = a0 | a4\n 38873: jump @533 if a0 == 0\n      : @532 (gas: 1)\n 38876: jump @582\n      : @533 (gas: 5)\n 38879: a0 = u64 [s1 + 0x238]\n 38883: i32 a0 = a0 + 0x20\n 38886: i32 a1 = a1 + 0\n 38888: u64 [s1 + 0x2b8] = a1\n 38892: ra = 464, jump @0\n      : @534 [@dyn 232] (gas: 20)\n 38899: a1 = sp + 0xffffffffffffffe0\n 38902: a1 = a1 & 0xffffffffffffffe0\n 38905: u64 [s1 + 0x2b0] = a1\n 38909: sp = a1\n 38911: i32 a0 = a0 + 0\n 38913: i32 a2 = a1 + 0\n 38915: a1 = u64 [s1 + 0x2b8]\n 38919: ecalli 9 // 'hash_keccak_256'\n 38921: a1 = u64 [s1 + 0x2b0]\n 38925: a0 = u64 [a1 + 0x18]\n 38928: u64 [s1 + 0x2b8] = a0\n 38932: a0 = u64 [a1 + 0x10]\n 38935: u64 [s1 + 0x2a0] = a0\n 38939: a0 = u64 [a1 + 0x8]\n 38942: u64 [s1 + 0x2a8] = a0\n 38946: a0 = u64 [a1]\n 38948: u64 [s1 + 0x2b0] = a0\n 38952: a1 = 0x20\n 38955: a0 = 0\n 38957: ra = 466, jump @0\n      : @535 [@dyn 233] (gas: 95)\n 38964: a2 = u64 [s1 + 0x2b8]\n 38968: a1 = a2 >> 0x38\n 38971: u64 [s1 + 0x238] = a1\n 38975: u8 [a0 + 0x1f] = a1\n 38978: a1 = a2 >> 0x30\n 38981: u64 [s1 + 0x230] = a1\n 38985: u8 [a0 + 0x1e] = a1\n 38988: a1 = a2 >> 0x28\n 38991: u64 [s1 + 0x228] = a1\n 38995: u8 [a0 + 0x1d] = a1\n 38998: a1 = a2 >> 0x20\n 39001: u64 [s1 + 0x220] = a1\n 39005: u8 [a0 + 0x1c] = a1\n 39008: a1 = a2 >> 0x18\n 39011: u64 [s1 + 0x218] = a1\n 39015: u8 [a0 + 0x1b] = a1\n 39018: a1 = a2 >> 0x10\n 39021: u64 [s1 + 0x210] = a1\n 39025: u8 [a0 + 0x1a] = a1\n 39028: a1 = a2 >> 0x8\n 39031: u64 [s1 + 0x208] = a1\n 39035: u8 [a0 + 0x19] = a1\n 39038: u8 [a0 + 0x18] = a2\n 39041: a2 = u64 [s1 + 0x2a0]\n 39045: a1 = a2 >> 0x38\n 39048: u64 [s1 + 0x200] = a1\n 39052: u8 [a0 + 0x17] = a1\n 39055: a1 = a2 >> 0x30\n 39058: u64 [s1 + 0x1f8] = a1\n 39062: u8 [a0 + 0x16] = a1\n 39065: a1 = a2 >> 0x28\n 39068: u64 [s1 + 0x1f0] = a1\n 39072: u8 [a0 + 0x15] = a1\n 39075: a1 = a2 >> 0x20\n 39078: u64 [s1 + 0x1e8] = a1\n 39082: u8 [a0 + 0x14] = a1\n 39085: a1 = a2 >> 0x18\n 39088: u64 [s1 + 0x1e0] = a1\n 39092: u8 [a0 + 0x13] = a1\n 39095: a1 = a2 >> 0x10\n 39098: u64 [s1 + 0x1d8] = a1\n 39102: u8 [a0 + 0x12] = a1\n 39105: a1 = a2 >> 0x8\n 39108: u64 [s1 + 0x1d0] = a1\n 39112: u8 [a0 + 0x11] = a1\n 39115: u8 [a0 + 0x10] = a2\n 39118: a2 = u64 [s1 + 0x2a8]\n 39122: a1 = a2 >> 0x38\n 39125: u64 [s1 + 0x1c8] = a1\n 39129: u8 [a0 + 0xf] = a1\n 39132: a1 = a2 >> 0x30\n 39135: u64 [s1 + 0x1c0] = a1\n 39139: u8 [a0 + 0xe] = a1\n 39142: a1 = a2 >> 0x28\n 39145: u64 [s1 + 0x1b8] = a1\n 39149: u8 [a0 + 0xd] = a1\n 39152: a1 = a2 >> 0x20\n 39155: u64 [s1 + 0x1b0] = a1\n 39159: u8 [a0 + 0xc] = a1\n 39162: a1 = a2 >> 0x18\n 39165: u64 [s1 + 0x1a8] = a1\n 39169: u8 [a0 + 0xb] = a1\n 39172: a1 = a2 >> 0x10\n 39175: u64 [s1 + 0x1a0] = a1\n 39179: u8 [a0 + 0xa] = a1\n 39182: a1 = a2 >> 0x8\n 39185: u64 [s1 + 0x198] = a1\n 39189: u8 [a0 + 0x9] = a1\n 39192: u8 [a0 + 0x8] = a2\n 39195: a2 = u64 [s1 + 0x2b0]\n 39199: a1 = a2 >> 0x38\n 39202: u64 [s1 + 0x190] = a1\n 39206: u8 [a0 + 0x7] = a1\n 39209: a1 = a2 >> 0x30\n 39212: u64 [s1 + 0x188] = a1\n 39216: u8 [a0 + 0x6] = a1\n 39219: a1 = a2 >> 0x28\n 39222: u64 [s1 + 0x180] = a1\n 39226: u8 [a0 + 0x5] = a1\n 39229: a1 = a2 >> 0x20\n 39232: u64 [s1 + 0x178] = a1\n 39236: u8 [a0 + 0x4] = a1\n 39239: a1 = a2 >> 0x18\n 39242: u64 [s1 + 0x170] = a1\n 39246: u8 [a0 + 0x3] = a1\n 39249: a1 = a2 >> 0x10\n 39252: u64 [s1 + 0x168] = a1\n 39256: u8 [a0 + 0x2] = a1\n 39259: a1 = a2 >> 0x8\n 39262: u64 [s1 + 0x160] = a1\n 39266: u8 [a0 + 0x1] = a1\n 39269: u8 [a0] = a2\n 39271: a0 = 0x20\n 39274: a1 = 0x20\n 39277: ra = 468, jump @0\n      : @536 [@dyn 234] (gas: 35)\n 39284: u8 [a0 + 31] = 0\n 39287: u8 [a0 + 30] = 0\n 39290: u8 [a0 + 29] = 0\n 39293: u8 [a0 + 28] = 0\n 39296: u8 [a0 + 27] = 0\n 39299: u8 [a0 + 26] = 0\n 39302: u8 [a0 + 25] = 0\n 39305: u8 [a0 + 24] = 0\n 39308: u8 [a0 + 23] = 0\n 39311: u8 [a0 + 22] = 0\n 39314: u8 [a0 + 21] = 0\n 39317: u8 [a0 + 20] = 0\n 39320: u8 [a0 + 19] = 0\n 39323: u8 [a0 + 18] = 0\n 39326: u8 [a0 + 17] = 0\n 39329: u8 [a0 + 16] = 0\n 39332: u8 [a0 + 15] = 0\n 39335: u8 [a0 + 14] = 0\n 39338: u8 [a0 + 13] = 0\n 39341: u8 [a0 + 12] = 0\n 39344: u8 [a0 + 11] = 0\n 39347: u8 [a0 + 10] = 0\n 39350: u8 [a0 + 9] = 0\n 39353: u8 [a0 + 8] = 0\n 39356: u8 [a0 + 7] = 0\n 39359: u8 [a0 + 6] = 0\n 39362: u8 [a0 + 5] = 0\n 39365: u8 [a0 + 4] = 0\n 39368: u8 [a0 + 3] = 0\n 39371: u8 [a0 + 2] = 0\n 39374: u8 [a0 + 1] = 0\n 39377: u8 [a0 + 0] = 0\n 39379: a1 = 0x40\n 39382: a0 = 0\n 39384: ra = 470, jump @0\n      : @537 [@dyn 235] (gas: 28)\n 39391: i32 a0 = a0 + 0\n 39393: i32 a2 = s1 + 0x7a0\n 39397: a1 = 0x40\n 39400: ecalli 9 // 'hash_keccak_256'\n 39402: a0 = u64 [s1 + 0x7b8]\n 39406: a1 = u64 [s1 + 0x7b0]\n 39410: a2 = u64 [s1 + 0x7a8]\n 39414: a3 = u64 [s1 + 0x7a0]\n 39418: a0 = reverse a0\n 39420: a1 = reverse a1\n 39422: a2 = reverse a2\n 39424: a3 = reverse a3\n 39426: u64 [s1 + 0x798] = a3\n 39430: u64 [s1 + 0x790] = a2\n 39434: u64 [s1 + 0x788] = a1\n 39438: u64 [s1 + 0x780] = a0\n 39442: u64 [s1 + 1976] = 0\n 39446: u64 [s1 + 1968] = 0\n 39450: u64 [s1 + 1960] = 0\n 39454: u64 [s1 + 1952] = 0\n 39458: u32 [s1 + 1888] = 0x20\n 39463: i32 a1 = s1 + 0x780\n 39467: i32 a3 = s1 + 0x7a0\n 39471: i32 a4 = s1 + 0x760\n 39475: a2 = 0xffffffffffffffff\n 39478: a0 = 0\n 39480: ecalli 8 // 'get_storage'\n 39482: fallthrough\n      : @538 (gas: 6)\n 39483: a0 = u64 [s1 + 0x7a0]\n 39487: a1 = u32 [s1 + 0x7b0]\n 39491: a2 = u64 [s1 + 0x7a8]\n 39495: a0 = a0 | a1\n 39498: a0 = a0 | a2\n 39501: jump @540 if a0 == 0\n      : @539 (gas: 1)\n 39504: jump @576\n      : @540 (gas: 19)\n 39507: i32 a0 = s1 + 0x6a0\n 39511: ecalli 0 // 'address'\n 39512: a0 = i32 [s1 + 0x6b0]\n 39516: u64 [s1 + 0x150] = a0\n 39520: a0 = u64 [s1 + 0x6a0]\n 39524: u64 [s1 + 0x140] = a0\n 39528: a0 = u64 [s1 + 0x6a8]\n 39532: u64 [s1 + 0x88] = a0\n 39536: i32 a0 = s1 + 0x6c0\n 39540: ecalli 5 // 'caller'\n 39542: a0 = i32 [s1 + 0x6d0]\n 39546: u64 [s1 + 0x158] = a0\n 39550: a0 = u64 [s1 + 0x6c0]\n 39554: u64 [s1 + 0x148] = a0\n 39558: a0 = u64 [s1 + 0x6c8]\n 39562: u64 [s1 + 0x90] = a0\n 39566: a0 = 0x40\n 39569: a1 = 0x20\n 39572: ra = 472, jump @0\n      : @541 [@dyn 236] (gas: 97)\n 39579: a1 = u8 [a0 + 0x19]\n 39582: a2 = u8 [a0 + 0x18]\n 39585: a3 = u8 [a0 + 0x1a]\n 39588: a4 = u8 [a0 + 0x1b]\n 39591: a1 = a1 << 0x8\n 39594: a1 = a1 | a2\n 39597: a3 = a3 << 0x10\n 39600: a4 = a4 << 0x18\n 39603: a3 = a3 | a4\n 39606: a1 = a1 | a3\n 39609: a2 = u8 [a0 + 0x1d]\n 39612: a3 = u8 [a0 + 0x1c]\n 39615: a4 = u8 [a0 + 0x1e]\n 39618: a5 = u8 [a0 + 0x1f]\n 39621: a2 = a2 << 0x8\n 39624: a2 = a2 | a3\n 39627: a4 = a4 << 0x10\n 39630: a5 = a5 << 0x18\n 39633: a4 = a4 | a5\n 39636: a2 = a2 | a4\n 39639: a2 = a2 << 0x20\n 39642: t0 = a2 | a1\n 39645: a2 = u8 [a0 + 0x11]\n 39648: a3 = u8 [a0 + 0x10]\n 39651: a4 = u8 [a0 + 0x12]\n 39654: a5 = u8 [a0 + 0x13]\n 39657: a2 = a2 << 0x8\n 39660: a2 = a2 | a3\n 39663: a4 = a4 << 0x10\n 39666: a5 = a5 << 0x18\n 39669: a4 = a4 | a5\n 39672: a2 = a2 | a4\n 39675: a3 = u8 [a0 + 0x15]\n 39678: a4 = u8 [a0 + 0x14]\n 39681: a5 = u8 [a0 + 0x16]\n 39684: a1 = u8 [a0 + 0x17]\n 39687: a3 = a3 << 0x8\n 39690: a3 = a3 | a4\n 39693: a5 = a5 << 0x10\n 39696: a1 = a1 << 0x18\n 39699: a1 = a1 | a5\n 39702: a1 = a1 | a3\n 39705: a1 = a1 << 0x20\n 39708: t1 = a1 | a2\n 39711: a1 = u8 [a0 + 0x9]\n 39714: a3 = u8 [a0 + 0x8]\n 39717: a4 = u8 [a0 + 0xa]\n 39720: a5 = u8 [a0 + 0xb]\n 39723: a1 = a1 << 0x8\n 39726: a1 = a1 | a3\n 39729: a4 = a4 << 0x10\n 39732: a5 = a5 << 0x18\n 39735: a4 = a4 | a5\n 39738: a1 = a1 | a4\n 39741: a3 = u8 [a0 + 0xd]\n 39744: a4 = u8 [a0 + 0xc]\n 39747: a5 = u8 [a0 + 0xe]\n 39750: a2 = u8 [a0 + 0xf]\n 39753: a3 = a3 << 0x8\n 39756: a3 = a3 | a4\n 39759: a5 = a5 << 0x10\n 39762: a2 = a2 << 0x18\n 39765: a2 = a2 | a5\n 39768: a2 = a2 | a3\n 39771: a2 = a2 << 0x20\n 39774: a3 = a2 | a1\n 39777: a1 = u8 [a0 + 0x1]\n 39780: a2 = u8 [a0]\n 39782: a4 = u8 [a0 + 0x2]\n 39785: a5 = u8 [a0 + 0x3]\n 39788: a1 = a1 << 0x8\n 39791: a1 = a1 | a2\n 39794: a4 = a4 << 0x10\n 39797: a5 = a5 << 0x18\n 39800: a4 = a4 | a5\n 39803: a1 = a1 | a4\n 39806: a2 = u8 [a0 + 0x5]\n 39809: a4 = u8 [a0 + 0x4]\n 39812: a5 = u8 [a0 + 0x6]\n 39815: a0 = u8 [a0 + 0x7]\n 39818: a2 = a2 << 0x8\n 39821: a2 = a2 | a4\n 39824: a5 = a5 << 0x10\n 39827: a0 = a0 << 0x18\n 39830: a0 = a0 | a5\n 39833: a0 = a0 | a2\n 39836: a0 = a0 << 0x20\n 39839: a0 = a0 | a1\n 39842: t2 = reverse a0\n 39844: a5 = reverse a3\n 39846: t1 = reverse t1\n 39848: a4 = reverse t0\n 39850: a0 = a5 | t2\n 39853: a1 = a4 <u 0xffffffffffffffe0\n 39856: a1 = 0 if t1 != 0\n 39858: a1 = 0 if a0 != 0\n 39860: jump @543 if a1 != 0\n      : @542 (gas: 1)\n 39863: jump @584\n      : @543 (gas: 8)\n 39866: a0 = a4 | a5\n 39869: a1 = t1 | t2\n 39872: a0 = a0 | a1\n 39875: a0 = a0 >> 0x20\n 39878: a1 = a1 | a5\n 39881: a1 = a1 << 0x20\n 39884: a0 = a0 | a1\n 39887: jump @545 if a0 == 0\n      : @544 (gas: 1)\n 39890: jump @582\n      : @545 (gas: 64)\n 39893: a0 = u64 [s1 + 0x88]\n 39897: a0 = reverse a0\n 39899: a1 = a0 >> 0x20\n 39902: a2 = u64 [s1 + 0x140]\n 39906: a2 = reverse a2\n 39908: a3 = a2 << 0x20\n 39911: a1 = a1 | a3\n 39914: u64 [s1 + 0x80] = a1\n 39918: a0 = a0 << 0x20\n 39921: a1 = u64 [s1 + 0x150]\n 39925: a1 = reverse a1\n 39927: a1 = a1 >> 0x20\n 39930: a0 = a0 | a1\n 39933: u64 [s1 + 0x78] = a0\n 39936: a2 = a2 >> 0x20\n 39939: u64 [s1 + 0x60] = a2\n 39942: a0 = u64 [s1 + 0x90]\n 39946: a0 = reverse a0\n 39948: a1 = a0 >> 0x20\n 39951: a2 = u64 [s1 + 0x148]\n 39955: a2 = reverse a2\n 39957: a3 = a2 << 0x20\n 39960: a1 = a1 | a3\n 39963: u64 [s1 + 0x48] = a1\n 39966: a0 = a0 << 0x20\n 39969: a1 = u64 [s1 + 0x158]\n 39973: a1 = reverse a1\n 39975: a1 = a1 >> 0x20\n 39978: a0 = a0 | a1\n 39981: u64 [s1 + 0x38] = a0\n 39984: a2 = a2 >> 0x20\n 39987: u64 [s1 + 0x28] = a2\n 39990: a0 = a4 + 0x20\n 39993: u64 [s1 + 0x88] = a0\n 39997: a0 = a0 <u a4\n 40000: a1 = t1 + a0\n 40003: u64 [s1 + 0x50] = a1\n 40006: a1 = a1 <u t1\n 40009: a1 = a0 if a0 == 0\n 40012: a1 = a1 + a5\n 40015: u64 [s1 + 0x40] = a1\n 40018: a0 = a1 <u a5\n 40021: a0 = a0 + t2\n 40024: u64 [s1 + 0x30] = a0\n 40027: a0 = u64 [s1 + 0x2b0]\n 40031: a0 = reverse a0\n 40033: u64 [s1 + 0x140] = a0\n 40037: a0 = u64 [s1 + 0x2a8]\n 40041: a0 = reverse a0\n 40043: u64 [s1 + 0x148] = a0\n 40047: a0 = u64 [s1 + 0x2a0]\n 40051: a0 = reverse a0\n 40053: u64 [s1 + 0x150] = a0\n 40057: a0 = u64 [s1 + 0x2b8]\n 40061: a0 = reverse a0\n 40063: u64 [s1 + 0x158] = a0\n 40067: i32 a0 = a4 + 0\n 40069: a1 = 0x20\n 40072: u64 [s1 + 0x20] = a0\n 40075: u64 [s1 + 0x68] = a4\n 40078: u64 [s1 + 0x58] = t1\n 40081: u64 [s1 + 0x90] = t2\n 40085: u64 [s1 + 0x70] = a5\n 40088: ra = 474, jump @0\n      : @546 [@dyn 237] (gas: 128)\n 40095: u8 [a0 + 31] = 0x35\n 40099: u8 [a0 + 30] = 0xa\n 40103: u8 [a0 + 29] = 0x41\n 40107: u8 [a0 + 28] = 0xf8\n 40112: u8 [a0 + 27] = 0x47\n 40116: u8 [a0 + 26] = 0x3a\n 40120: u8 [a0 + 25] = 0x41\n 40124: u8 [a0 + 24] = 0xfb\n 40129: u8 [a0 + 23] = 0x25\n 40133: u8 [a0 + 22] = 0x95\n 40138: u8 [a0 + 21] = 0xa8\n 40143: u8 [a0 + 20] = 0x1e\n 40147: u8 [a0 + 19] = 0xe5\n 40152: u8 [a0 + 18] = 0x61\n 40156: u8 [a0 + 17] = 0x5f\n 40160: u8 [a0 + 16] = 0x50\n 40164: u8 [a0 + 15] = 0x9\n 40168: u8 [a0 + 14] = 0x17\n 40172: u8 [a0 + 13] = 0x77\n 40176: u8 [a0 + 12] = 0xbe\n 40181: u8 [a0 + 11] = 0x46\n 40185: u8 [a0 + 10] = 0x6b\n 40189: u8 [a0 + 9] = 0x58\n 40193: u8 [a0 + 8] = 0x89\n 40198: u8 [a0 + 7] = 0x19\n 40202: u8 [a0 + 6] = 0x95\n 40207: u8 [a0 + 5] = 0x1b\n 40211: u8 [a0 + 4] = 0x8f\n 40216: u8 [a0 + 3] = 0xa\n 40220: u8 [a0 + 2] = 0x6d\n 40224: u8 [a0 + 1] = 0xe9\n 40229: u8 [a0 + 0] = 0xf9\n 40233: sp = sp + 0xffffffffffffffd8\n 40236: a0 = s1 + 0x480\n 40240: u64 [sp + 0x20] = a0\n 40243: a0 = s1 + 0x4a0\n 40247: u64 [sp + 0x18] = a0\n 40250: a0 = s1 + 0x4c0\n 40254: u64 [sp + 0x10] = a0\n 40257: a0 = s1 + 0x4e0\n 40261: u64 [sp + 0x8] = a0\n 40264: a0 = s1 + 0x500\n 40268: u64 [sp] = a0\n 40270: a0 = u64 [s1 + 0x138]\n 40274: u64 [s1 + 0x498] = a0\n 40278: a0 = u64 [s1 + 0x118]\n 40282: u64 [s1 + 0x490] = a0\n 40286: a0 = u64 [s1 + 0x120]\n 40290: u64 [s1 + 0x488] = a0\n 40294: a0 = u64 [s1 + 0x128]\n 40298: u64 [s1 + 0x480] = a0\n 40302: a0 = u64 [s1 + 0x130]\n 40306: u64 [s1 + 0x4b8] = a0\n 40310: a0 = u64 [s1 + 0xa0]\n 40314: u64 [s1 + 0x4b0] = a0\n 40318: a0 = u64 [s1 + 0xa8]\n 40322: u64 [s1 + 0x4a8] = a0\n 40326: a0 = u64 [s1 + 0xb0]\n 40330: u64 [s1 + 0x4a0] = a0\n 40334: a0 = u64 [s1 + 0xb8]\n 40338: u64 [s1 + 0x4d8] = a0\n 40342: a0 = u64 [s1 + 0xc0]\n 40346: u64 [s1 + 0x4d0] = a0\n 40350: a0 = u64 [s1 + 0xc8]\n 40354: u64 [s1 + 0x4c8] = a0\n 40358: a0 = u64 [s1 + 0xd0]\n 40362: u64 [s1 + 0x4c0] = a0\n 40366: a0 = u64 [s1 + 0xd8]\n 40370: u64 [s1 + 0x4f8] = a0\n 40374: a0 = u64 [s1 + 0xe0]\n 40378: u64 [s1 + 0x4f0] = a0\n 40382: a0 = u64 [s1 + 0xe8]\n 40386: u64 [s1 + 0x4e8] = a0\n 40390: a0 = u64 [s1 + 0xf0]\n 40394: u64 [s1 + 0x4e0] = a0\n 40398: a0 = u64 [s1 + 0xf8]\n 40402: u64 [s1 + 0x518] = a0\n 40406: a0 = u64 [s1 + 0x100]\n 40410: u64 [s1 + 0x510] = a0\n 40414: a0 = u64 [s1 + 0x108]\n 40418: u64 [s1 + 0x508] = a0\n 40422: a0 = u64 [s1 + 0x110]\n 40426: u64 [s1 + 0x500] = a0\n 40430: a0 = u64 [s1 + 0x280]\n 40434: u64 [s1 + 0x538] = a0\n 40438: a0 = u64 [s1 + 0x288]\n 40442: u64 [s1 + 0x530] = a0\n 40446: a0 = u64 [s1 + 0x290]\n 40450: u64 [s1 + 0x528] = a0\n 40454: a0 = u64 [s1 + 0x298]\n 40458: u64 [s1 + 0x520] = a0\n 40462: a0 = u64 [s1 + 0x28]\n 40465: u64 [s1 + 0x550] = a0\n 40469: a0 = u64 [s1 + 0x48]\n 40472: u64 [s1 + 0x548] = a0\n 40476: a0 = u64 [s1 + 0x38]\n 40479: u64 [s1 + 0x540] = a0\n 40483: u64 [s1 + 1368] = 0\n 40487: a0 = u64 [s1 + 0x140]\n 40491: u64 [s1 + 0x578] = a0\n 40495: a0 = u64 [s1 + 0x148]\n 40499: u64 [s1 + 0x570] = a0\n 40503: a0 = u64 [s1 + 0x150]\n 40507: u64 [s1 + 0x568] = a0\n 40511: a0 = u64 [s1 + 0x158]\n 40515: u64 [s1 + 0x560] = a0\n 40519: u64 [s1 + 1432] = 0\n 40523: a0 = u64 [s1 + 0x60]\n 40526: u64 [s1 + 0x590] = a0\n 40530: a0 = u64 [s1 + 0x80]\n 40534: u64 [s1 + 0x588] = a0\n 40538: a0 = u64 [s1 + 0x78]\n 40541: u64 [s1 + 0x580] = a0\n 40545: a0 = u64 [s1 + 0x30]\n 40548: u64 [s1 + 0x5b8] = a0\n 40552: a0 = u64 [s1 + 0x40]\n 40555: u64 [s1 + 0x5b0] = a0\n 40559: a0 = u64 [s1 + 0x50]\n 40562: u64 [s1 + 0x5a8] = a0\n 40566: a0 = s1 + 0x5c0\n 40570: a1 = s1 + 0x5a0\n 40574: a2 = s1 + 0x580\n 40578: a3 = s1 + 0x560\n 40582: a4 = s1 + 0x540\n 40586: a5 = s1 + 0x520\n 40590: t0 = u64 [s1 + 0x88]\n 40594: u64 [s1 + 0x5a0] = t0\n 40598: ra = 476, jump @466\n      : @547 [@dyn 238] (gas: 32)\n 40604: sp = sp + 0x28\n 40607: a0 = u64 [s1 + 0x5c8]\n 40611: t0 = u64 [s1 + 0x5d8]\n 40615: t1 = u64 [s1 + 0x5c0]\n 40619: a3 = u64 [s1 + 0x5d0]\n 40623: a1 = u64 [s1 + 0x58]\n 40626: a4 = a0 ^ a1\n 40629: a5 = a0 <u a1\n 40632: ra = a1\n 40634: t2 = u64 [s1 + 0x68]\n 40637: a1 = t1 <u t2\n 40640: a5 = a1 if a4 == 0\n 40643: a2 = u64 [s1 + 0x70]\n 40646: a4 = a3 - a2\n 40649: a3 = a3 <u a2\n 40652: a2 = u64 [s1 + 0x90]\n 40656: a2 = t0 - a2\n 40659: a2 = a2 - a3\n 40662: a3 = a4 <u a5\n 40665: a2 = a2 - a3\n 40668: a4 = a4 - a5\n 40671: a0 = a0 - ra\n 40674: a0 = a0 - a1\n 40677: a3 = t1 - t2\n 40680: a0 = a0 | a2\n 40683: a1 = a3 | a4\n 40686: a1 = a1 | a0\n 40689: a0 = a0 | a4\n 40692: a1 = a1 >> 0x20\n 40695: a0 = a0 << 0x20\n 40698: a0 = a0 | a1\n 40701: jump @549 if a0 == 0\n      : @548 (gas: 1)\n 40704: jump @582\n      : @549 (gas: 4)\n 40707: i32 a1 = a3 + 0\n 40709: a0 = u64 [s1 + 0x20]\n 40712: u64 [s1 + 0x298] = a3\n 40716: ra = 478, jump @0\n      : @550 [@dyn 239] (gas: 32)\n 40723: u64 [s1 + 1784] = 0\n 40727: u64 [s1 + 1776] = 0\n 40731: u64 [s1 + 1768] = 0\n 40735: u64 [s1 + 1760] = 0\n 40739: u64 [s1 + 1816] = 0\n 40743: u64 [s1 + 1808] = 0\n 40747: u64 [s1 + 1800] = 0\n 40751: u64 [s1 + 1792] = 0\n 40755: u64 [s1 + 1848] = 0xffffffffffffffff\n 40760: u64 [s1 + 1840] = 0xffffffffffffffff\n 40765: u64 [s1 + 1832] = 0xffffffffffffffff\n 40770: u64 [s1 + 1824] = 0xffffffffffffffff\n 40775: a2 = s1 + 0x6e0\n 40779: a2 = a2 << 0x20\n 40782: a2 = a2 >> 0x20\n 40785: a3 = s1 + 0x720\n 40789: a3 = a3 << 0x20\n 40792: a2 = a2 | a3\n 40795: a0 = a0 << 0x20\n 40798: a0 = a0 >> 0x20\n 40801: a3 = u64 [s1 + 0x298]\n 40805: a3 = a3 << 0x20\n 40808: a3 = a3 | a0\n 40811: a0 = s1 + 0x700\n 40815: a0 = a0 << 0x20\n 40818: a1 = 0xffffffff\n 40828: a5 = a0 | a1\n 40831: a0 = 0xffffffffffffffff\n 40834: a1 = 0xffffffffffffffff\n 40837: a4 = 0xffffffffffffffff\n 40840: ecalli 10 // 'instantiate'\n 40842: fallthrough\n      : @551 (gas: 6)\n 40843: a0 = u32 [s1 + 0x710]\n 40847: a1 = u64 [s1 + 0x700]\n 40851: a2 = u64 [s1 + 0x708]\n 40855: a3 = a1 | a0\n 40858: a3 = a3 | a2\n 40861: jump @553 if a3 != 0\n      : @552 (gas: 1)\n 40864: jump @583\n      : @553 (gas: 16)\n 40867: a2 = reverse a2\n 40869: a3 = a2 >> 0x20\n 40872: a1 = reverse a1\n 40874: a4 = a1 << 0x20\n 40877: a3 = a3 | a4\n 40880: u64 [s1 + 0x298] = a3\n 40884: a2 = a2 << 0x20\n 40887: a0 = reverse a0\n 40889: a0 = a0 >> 0x20\n 40892: a0 = a0 | a2\n 40895: u64 [s1 + 0x290] = a0\n 40899: a1 = a1 >> 0x20\n 40902: u64 [s1 + 0x288] = a1\n 40906: a1 = 0x20\n 40909: a0 = 0\n 40911: ra = 480, jump @0\n      : @554 [@dyn 240] (gas: 67)\n 40918: a1 = u64 [s1 + 0x2a0]\n 40922: u8 [a0 + 0x10] = a1\n 40925: a1 = u64 [s1 + 0x1c8]\n 40929: u8 [a0 + 0xf] = a1\n 40932: a1 = u64 [s1 + 0x1c0]\n 40936: u8 [a0 + 0xe] = a1\n 40939: a1 = u64 [s1 + 0x1b8]\n 40943: u8 [a0 + 0xd] = a1\n 40946: a1 = u64 [s1 + 0x1b0]\n 40950: u8 [a0 + 0xc] = a1\n 40953: a1 = u64 [s1 + 0x1a8]\n 40957: u8 [a0 + 0xb] = a1\n 40960: a1 = u64 [s1 + 0x1a0]\n 40964: u8 [a0 + 0xa] = a1\n 40967: a1 = u64 [s1 + 0x198]\n 40971: u8 [a0 + 0x9] = a1\n 40974: a1 = u64 [s1 + 0x2a8]\n 40978: u8 [a0 + 0x8] = a1\n 40981: a1 = u64 [s1 + 0x190]\n 40985: u8 [a0 + 0x7] = a1\n 40988: a1 = u64 [s1 + 0x188]\n 40992: u8 [a0 + 0x6] = a1\n 40995: a1 = u64 [s1 + 0x180]\n 40999: u8 [a0 + 0x5] = a1\n 41002: a1 = u64 [s1 + 0x178]\n 41006: u8 [a0 + 0x4] = a1\n 41009: a1 = u64 [s1 + 0x170]\n 41013: u8 [a0 + 0x3] = a1\n 41016: a1 = u64 [s1 + 0x168]\n 41020: u8 [a0 + 0x2] = a1\n 41023: a1 = u64 [s1 + 0x160]\n 41027: u8 [a0 + 0x1] = a1\n 41030: a1 = u64 [s1 + 0x2b0]\n 41034: u8 [a0] = a1\n 41036: a1 = u64 [s1 + 0x2b8]\n 41040: u8 [a0 + 0x18] = a1\n 41043: a1 = u64 [s1 + 0x200]\n 41047: u8 [a0 + 0x17] = a1\n 41050: a1 = u64 [s1 + 0x1f8]\n 41054: u8 [a0 + 0x16] = a1\n 41057: a1 = u64 [s1 + 0x1f0]\n 41061: u8 [a0 + 0x15] = a1\n 41064: a1 = u64 [s1 + 0x1e8]\n 41068: u8 [a0 + 0x14] = a1\n 41071: a1 = u64 [s1 + 0x1e0]\n 41075: u8 [a0 + 0x13] = a1\n 41078: a1 = u64 [s1 + 0x1d8]\n 41082: u8 [a0 + 0x12] = a1\n 41085: a1 = u64 [s1 + 0x1d0]\n 41089: u8 [a0 + 0x11] = a1\n 41092: a1 = u64 [s1 + 0x238]\n 41096: u8 [a0 + 0x1f] = a1\n 41099: a1 = u64 [s1 + 0x230]\n 41103: u8 [a0 + 0x1e] = a1\n 41106: a1 = u64 [s1 + 0x228]\n 41110: u8 [a0 + 0x1d] = a1\n 41113: a1 = u64 [s1 + 0x220]\n 41117: u8 [a0 + 0x1c] = a1\n 41120: a1 = u64 [s1 + 0x218]\n 41124: u8 [a0 + 0x1b] = a1\n 41127: a1 = u64 [s1 + 0x210]\n 41131: u8 [a0 + 0x1a] = a1\n 41134: a1 = u64 [s1 + 0x208]\n 41138: u8 [a0 + 0x19] = a1\n 41141: a0 = 0x20\n 41144: a1 = 0x20\n 41147: ra = 482, jump @0\n      : @555 [@dyn 241] (gas: 35)\n 41154: u8 [a0 + 31] = 0\n 41157: u8 [a0 + 30] = 0\n 41160: u8 [a0 + 29] = 0\n 41163: u8 [a0 + 28] = 0\n 41166: u8 [a0 + 27] = 0\n 41169: u8 [a0 + 26] = 0\n 41172: u8 [a0 + 25] = 0\n 41175: u8 [a0 + 24] = 0\n 41178: u8 [a0 + 23] = 0\n 41181: u8 [a0 + 22] = 0\n 41184: u8 [a0 + 21] = 0\n 41187: u8 [a0 + 20] = 0\n 41190: u8 [a0 + 19] = 0\n 41193: u8 [a0 + 18] = 0\n 41196: u8 [a0 + 17] = 0\n 41199: u8 [a0 + 16] = 0\n 41202: u8 [a0 + 15] = 0\n 41205: u8 [a0 + 14] = 0\n 41208: u8 [a0 + 13] = 0\n 41211: u8 [a0 + 12] = 0\n 41214: u8 [a0 + 11] = 0\n 41217: u8 [a0 + 10] = 0\n 41220: u8 [a0 + 9] = 0\n 41223: u8 [a0 + 8] = 0\n 41226: u8 [a0 + 7] = 0\n 41229: u8 [a0 + 6] = 0\n 41232: u8 [a0 + 5] = 0\n 41235: u8 [a0 + 4] = 0\n 41238: u8 [a0 + 3] = 0\n 41241: u8 [a0 + 2] = 0\n 41244: u8 [a0 + 1] = 0\n 41247: u8 [a0 + 0] = 0\n 41249: a1 = 0x40\n 41252: a0 = 0\n 41254: ra = 484, jump @0\n      : @556 [@dyn 242] (gas: 109)\n 41261: i32 a0 = a0 + 0\n 41263: i32 a2 = s1 + 0x7a0\n 41267: a1 = 0x40\n 41270: ecalli 9 // 'hash_keccak_256'\n 41272: a0 = u64 [s1 + 0x7b8]\n 41276: a1 = u64 [s1 + 0x7b0]\n 41280: a2 = u64 [s1 + 0x7a8]\n 41284: a3 = u64 [s1 + 0x7a0]\n 41288: a0 = reverse a0\n 41290: u64 [s1 + 0x280] = a0\n 41294: a1 = reverse a1\n 41296: u64 [s1 + 0x138] = a1\n 41300: a2 = reverse a2\n 41302: u64 [s1 + 0x130] = a2\n 41306: a3 = reverse a3\n 41308: u64 [s1 + 0x128] = a3\n 41312: u64 [s1 + 0x798] = a3\n 41316: u64 [s1 + 0x790] = a2\n 41320: u64 [s1 + 0x788] = a1\n 41324: u64 [s1 + 0x780] = a0\n 41328: u64 [s1 + 1976] = 0\n 41332: u64 [s1 + 1968] = 0\n 41336: u64 [s1 + 1960] = 0\n 41340: u64 [s1 + 1952] = 0\n 41344: u32 [s1 + 1888] = 0x20\n 41349: i32 a1 = s1 + 0x780\n 41353: i32 a3 = s1 + 0x7a0\n 41357: i32 a4 = s1 + 0x760\n 41361: a2 = 0xffffffffffffffff\n 41364: a0 = 0\n 41366: ecalli 8 // 'get_storage'\n 41368: a0 = u32 [s1 + 0x7b4]\n 41372: a0 = a0 << 0x20\n 41375: a1 = u64 [s1 + 0x7b8]\n 41379: a2 = u64 [s1 + 0x288]\n 41383: a0 = a0 | a2\n 41386: a2 = u64 [s1 + 0x128]\n 41390: u64 [s1 + 0x798] = a2\n 41394: a2 = u64 [s1 + 0x130]\n 41398: u64 [s1 + 0x790] = a2\n 41402: a2 = u64 [s1 + 0x138]\n 41406: u64 [s1 + 0x788] = a2\n 41410: a2 = u64 [s1 + 0x280]\n 41414: u64 [s1 + 0x780] = a2\n 41418: u64 [s1 + 0x7b8] = a1\n 41422: u64 [s1 + 0x7b0] = a0\n 41426: a0 = u64 [s1 + 0x298]\n 41430: u64 [s1 + 0x7a8] = a0\n 41434: a0 = u64 [s1 + 0x290]\n 41438: u64 [s1 + 0x7a0] = a0\n 41442: i32 a1 = s1 + 0x780\n 41446: i32 a3 = s1 + 0x7a0\n 41450: a2 = 0xffffffffffffffff\n 41453: a4 = 0x20\n 41456: a0 = 0\n 41458: ecalli 16 // 'set_storage'\n 41460: a0 = u64 [s1 + 0x140]\n 41464: u64 [s1 + 0x458] = a0\n 41468: a0 = u64 [s1 + 0x148]\n 41472: u64 [s1 + 0x450] = a0\n 41476: a0 = u64 [s1 + 0x150]\n 41480: u64 [s1 + 0x448] = a0\n 41484: a0 = u64 [s1 + 0x158]\n 41488: u64 [s1 + 0x440] = a0\n 41492: u64 [s1 + 1144] = 0\n 41496: u64 [s1 + 1136] = 0\n 41500: u64 [s1 + 1128] = 0\n 41504: a0 = s1 + 0x460\n 41508: a1 = s1 + 0x440\n 41512: u64 [s1 + 1120] = 0x1\n 41517: ra = 0x1e6\n 41521: sp = sp + 0xfffffffffffffdc0\n 41525: u64 [sp + 0x238] = ra\n 41529: u64 [sp + 0x230] = s0\n 41533: u64 [sp + 0x228] = s1\n 41537: s0 = sp + 0x240\n 41541: sp = sp & 0xffffffffffffffe0\n 41544: a2 = u64 [a1 + 0x18]\n 41547: u64 [sp + 0x50] = a2\n 41550: a2 = u64 [a1 + 0x10]\n 41553: u64 [sp + 0x30] = a2\n 41556: a2 = u64 [a1 + 0x8]\n 41559: u64 [sp + 0x28] = a2\n 41562: a1 = u64 [a1]\n 41564: u64 [sp + 0x20] = a1\n 41567: a3 = u64 [a0 + 0x18]\n 41570: a2 = u64 [a0 + 0x10]\n 41573: a1 = u64 [a0 + 0x8]\n 41576: a0 = u64 [a0]\n 41578: u64 [sp + 0x60] = a3\n 41581: u64 [sp + 0x1f8] = a3\n 41585: u64 [sp + 0x68] = a2\n 41588: u64 [sp + 0x1f0] = a2\n 41592: u64 [sp + 0x70] = a1\n 41595: u64 [sp + 0x1e8] = a1\n 41599: u64 [sp + 0x78] = a0\n 41602: u64 [sp + 0x1e0] = a0\n 41606: u64 [sp + 536] = 0\n 41610: u64 [sp + 528] = 0\n 41614: u64 [sp + 520] = 0\n 41618: u64 [sp + 512] = 0\n 41622: u32 [sp + 448] = 0x20\n 41627: i32 a1 = sp + 0x1e0\n 41631: i32 a3 = sp + 0x200\n 41635: i32 a4 = sp + 0x1c0\n 41639: a2 = 0xffffffffffffffff\n 41642: a0 = 0\n 41644: ecalli 8 // 'get_storage'\n 41646: jump @498\n      : @557 [@dyn 243] (gas: 22)\n 41649: a0 = sp + 0xffffffffffffffe0\n 41652: a0 = a0 & 0xffffffffffffffe0\n 41655: u64 [s1 + 0x148] = a0\n 41659: sp = a0\n 41661: u64 [a0 + 24] = 0\n 41664: u64 [a0 + 16] = 0\n 41667: u64 [a0 + 8] = 0\n 41670: u64 [a0 + 0] = 0\n 41672: i32 a0 = a0 + 0\n 41674: ecalli 17 // 'value_transferred'\n 41676: a1 = u64 [s1 + 0x148]\n 41680: a0 = u64 [a1]\n 41682: u64 [s1 + 0x280] = a0\n 41686: a0 = u64 [a1 + 0x8]\n 41689: u64 [s1 + 0x158] = a0\n 41693: a0 = u64 [a1 + 0x10]\n 41696: u64 [s1 + 0x150] = a0\n 41700: a0 = u64 [a1 + 0x18]\n 41703: u64 [s1 + 0x148] = a0\n 41707: a1 = 0x20\n 41710: a0 = 0\n 41712: ra = 488, jump @0\n      : @558 [@dyn 244] (gas: 67)\n 41719: a1 = u64 [s1 + 0x238]\n 41723: u8 [a0 + 0x1f] = a1\n 41726: a1 = u64 [s1 + 0x230]\n 41730: u8 [a0 + 0x1e] = a1\n 41733: a1 = u64 [s1 + 0x228]\n 41737: u8 [a0 + 0x1d] = a1\n 41740: a1 = u64 [s1 + 0x220]\n 41744: u8 [a0 + 0x1c] = a1\n 41747: a1 = u64 [s1 + 0x218]\n 41751: u8 [a0 + 0x1b] = a1\n 41754: a1 = u64 [s1 + 0x210]\n 41758: u8 [a0 + 0x1a] = a1\n 41761: a1 = u64 [s1 + 0x208]\n 41765: u8 [a0 + 0x19] = a1\n 41768: a1 = u64 [s1 + 0x200]\n 41772: u8 [a0 + 0x17] = a1\n 41775: a1 = u64 [s1 + 0x1f8]\n 41779: u8 [a0 + 0x16] = a1\n 41782: a1 = u64 [s1 + 0x1f0]\n 41786: u8 [a0 + 0x15] = a1\n 41789: a1 = u64 [s1 + 0x1e8]\n 41793: u8 [a0 + 0x14] = a1\n 41796: a1 = u64 [s1 + 0x1e0]\n 41800: u8 [a0 + 0x13] = a1\n 41803: a1 = u64 [s1 + 0x1d8]\n 41807: u8 [a0 + 0x12] = a1\n 41810: a1 = u64 [s1 + 0x1d0]\n 41814: u8 [a0 + 0x11] = a1\n 41817: a1 = u64 [s1 + 0x1c8]\n 41821: u8 [a0 + 0xf] = a1\n 41824: a1 = u64 [s1 + 0x1c0]\n 41828: u8 [a0 + 0xe] = a1\n 41831: a1 = u64 [s1 + 0x1b8]\n 41835: u8 [a0 + 0xd] = a1\n 41838: a1 = u64 [s1 + 0x1b0]\n 41842: u8 [a0 + 0xc] = a1\n 41845: a1 = u64 [s1 + 0x1a8]\n 41849: u8 [a0 + 0xb] = a1\n 41852: a1 = u64 [s1 + 0x1a0]\n 41856: u8 [a0 + 0xa] = a1\n 41859: a1 = u64 [s1 + 0x198]\n 41863: u8 [a0 + 0x9] = a1\n 41866: a1 = u64 [s1 + 0x190]\n 41870: u8 [a0 + 0x7] = a1\n 41873: a1 = u64 [s1 + 0x188]\n 41877: u8 [a0 + 0x6] = a1\n 41880: a1 = u64 [s1 + 0x180]\n 41884: u8 [a0 + 0x5] = a1\n 41887: a1 = u64 [s1 + 0x178]\n 41891: u8 [a0 + 0x4] = a1\n 41894: a1 = u64 [s1 + 0x170]\n 41898: u8 [a0 + 0x3] = a1\n 41901: a1 = u64 [s1 + 0x168]\n 41905: u8 [a0 + 0x2] = a1\n 41908: a1 = u64 [s1 + 0x160]\n 41912: u8 [a0 + 0x1] = a1\n 41915: a1 = u64 [s1 + 0x2b8]\n 41919: u8 [a0 + 0x18] = a1\n 41922: a1 = u64 [s1 + 0x2a0]\n 41926: u8 [a0 + 0x10] = a1\n 41929: a1 = u64 [s1 + 0x2a8]\n 41933: u8 [a0 + 0x8] = a1\n 41936: a1 = u64 [s1 + 0x2b0]\n 41940: u8 [a0] = a1\n 41942: a0 = 0x20\n 41945: a1 = 0x20\n 41948: ra = 490, jump @0\n      : @559 [@dyn 245] (gas: 35)\n 41955: u8 [a0 + 31] = 0x2\n 41959: u8 [a0 + 30] = 0\n 41962: u8 [a0 + 29] = 0\n 41965: u8 [a0 + 28] = 0\n 41968: u8 [a0 + 27] = 0\n 41971: u8 [a0 + 26] = 0\n 41974: u8 [a0 + 25] = 0\n 41977: u8 [a0 + 24] = 0\n 41980: u8 [a0 + 23] = 0\n 41983: u8 [a0 + 22] = 0\n 41986: u8 [a0 + 21] = 0\n 41989: u8 [a0 + 20] = 0\n 41992: u8 [a0 + 19] = 0\n 41995: u8 [a0 + 18] = 0\n 41998: u8 [a0 + 17] = 0\n 42001: u8 [a0 + 16] = 0\n 42004: u8 [a0 + 15] = 0\n 42007: u8 [a0 + 14] = 0\n 42010: u8 [a0 + 13] = 0\n 42013: u8 [a0 + 12] = 0\n 42016: u8 [a0 + 11] = 0\n 42019: u8 [a0 + 10] = 0\n 42022: u8 [a0 + 9] = 0\n 42025: u8 [a0 + 8] = 0\n 42028: u8 [a0 + 7] = 0\n 42031: u8 [a0 + 6] = 0\n 42034: u8 [a0 + 5] = 0\n 42037: u8 [a0 + 4] = 0\n 42040: u8 [a0 + 3] = 0\n 42043: u8 [a0 + 2] = 0\n 42046: u8 [a0 + 1] = 0\n 42049: u8 [a0 + 0] = 0\n 42051: a1 = 0x40\n 42054: a0 = 0\n 42056: ra = 492, jump @0\n      : @560 [@dyn 246] (gas: 83)\n 42063: i32 a0 = a0 + 0\n 42065: i32 a2 = s1 + 0x7a0\n 42069: a1 = 0x40\n 42072: ecalli 9 // 'hash_keccak_256'\n 42074: a0 = u64 [s1 + 0x7b8]\n 42078: a1 = u64 [s1 + 0x7b0]\n 42082: a2 = u64 [s1 + 0x7a8]\n 42086: a3 = u64 [s1 + 0x7a0]\n 42090: a0 = reverse a0\n 42092: u64 [s1 + 0x238] = a0\n 42096: a1 = reverse a1\n 42098: u64 [s1 + 0x230] = a1\n 42102: a2 = reverse a2\n 42104: u64 [s1 + 0x228] = a2\n 42108: a3 = reverse a3\n 42110: u64 [s1 + 0x220] = a3\n 42114: u64 [s1 + 0x798] = a3\n 42118: u64 [s1 + 0x790] = a2\n 42122: u64 [s1 + 0x788] = a1\n 42126: u64 [s1 + 0x780] = a0\n 42130: u64 [s1 + 1976] = 0\n 42134: u64 [s1 + 1968] = 0\n 42138: u64 [s1 + 1960] = 0\n 42142: u64 [s1 + 1952] = 0\n 42146: u32 [s1 + 1888] = 0x20\n 42151: i32 a1 = s1 + 0x780\n 42155: i32 a3 = s1 + 0x7a0\n 42159: i32 a4 = s1 + 0x760\n 42163: a2 = 0xffffffffffffffff\n 42166: a0 = 0\n 42168: ecalli 8 // 'get_storage'\n 42170: a0 = u64 [s1 + 0x220]\n 42174: u64 [s1 + 0x798] = a0\n 42178: a0 = u64 [s1 + 0x228]\n 42182: u64 [s1 + 0x790] = a0\n 42186: a0 = u64 [s1 + 0x230]\n 42190: u64 [s1 + 0x788] = a0\n 42194: a0 = u64 [s1 + 0x238]\n 42198: u64 [s1 + 0x780] = a0\n 42202: a0 = u64 [s1 + 0x148]\n 42206: u64 [s1 + 0x7b8] = a0\n 42210: a0 = u64 [s1 + 0x150]\n 42214: u64 [s1 + 0x7b0] = a0\n 42218: a0 = u64 [s1 + 0x158]\n 42222: u64 [s1 + 0x7a8] = a0\n 42226: a0 = u64 [s1 + 0x280]\n 42230: u64 [s1 + 0x7a0] = a0\n 42234: i32 a1 = s1 + 0x780\n 42238: i32 a3 = s1 + 0x7a0\n 42242: a2 = 0xffffffffffffffff\n 42245: a4 = 0x20\n 42248: a0 = 0\n 42250: ecalli 16 // 'set_storage'\n 42252: i32 a0 = s1 + 0x740\n 42256: ecalli 5 // 'caller'\n 42258: a0 = u32 [s1 + 0x750]\n 42262: u64 [s1 + 0x1f8] = a0\n 42266: a0 = u64 [s1 + 0x748]\n 42270: u64 [s1 + 0x1f0] = a0\n 42274: a0 = u64 [s1 + 0x740]\n 42278: u64 [s1 + 0x230] = a0\n 42282: a0 = sp + 0xffffffffffffffe0\n 42285: a0 = a0 & 0xffffffffffffffe0\n 42288: u64 [s1 + 0x280] = a0\n 42292: sp = a0\n 42294: u64 [a0 + 24] = 0\n 42297: u64 [a0 + 16] = 0\n 42300: u64 [a0 + 8] = 0\n 42303: u64 [a0 + 0] = 0\n 42305: i32 a0 = a0 + 0\n 42307: ecalli 17 // 'value_transferred'\n 42309: a1 = u64 [s1 + 0x280]\n 42313: a0 = u64 [a1]\n 42315: u64 [s1 + 0x228] = a0\n 42319: a0 = u64 [a1 + 0x8]\n 42322: u64 [s1 + 0x220] = a0\n 42326: a0 = u64 [a1 + 0x10]\n 42329: u64 [s1 + 0x218] = a0\n 42333: a0 = u64 [a1 + 0x18]\n 42336: u64 [s1 + 0x210] = a0\n 42340: a0 = 0x40\n 42343: a1 = 0x20\n 42346: ra = 494, jump @0\n      : @561 [@dyn 247] (gas: 138)\n 42353: a1 = u8 [a0 + 0x1]\n 42356: a2 = u8 [a0]\n 42358: a3 = u8 [a0 + 0x2]\n 42361: a4 = u8 [a0 + 0x3]\n 42364: a1 = a1 << 0x8\n 42367: a1 = a1 | a2\n 42370: a3 = a3 << 0x10\n 42373: a4 = a4 << 0x18\n 42376: a3 = a3 | a4\n 42379: a1 = a1 | a3\n 42382: a2 = u8 [a0 + 0x5]\n 42385: a3 = u8 [a0 + 0x4]\n 42388: a4 = u8 [a0 + 0x6]\n 42391: a5 = u8 [a0 + 0x7]\n 42394: a2 = a2 << 0x8\n 42397: a2 = a2 | a3\n 42400: a4 = a4 << 0x10\n 42403: a5 = a5 << 0x18\n 42406: a4 = a4 | a5\n 42409: a2 = a2 | a4\n 42412: a2 = a2 << 0x20\n 42415: t0 = a2 | a1\n 42418: a2 = u8 [a0 + 0x9]\n 42421: a3 = u8 [a0 + 0x8]\n 42424: a4 = u8 [a0 + 0xa]\n 42427: a5 = u8 [a0 + 0xb]\n 42430: a2 = a2 << 0x8\n 42433: a2 = a2 | a3\n 42436: a4 = a4 << 0x10\n 42439: a5 = a5 << 0x18\n 42442: a4 = a4 | a5\n 42445: a2 = a2 | a4\n 42448: a3 = u8 [a0 + 0xd]\n 42451: a4 = u8 [a0 + 0xc]\n 42454: a5 = u8 [a0 + 0xe]\n 42457: a1 = u8 [a0 + 0xf]\n 42460: a3 = a3 << 0x8\n 42463: a3 = a3 | a4\n 42466: a5 = a5 << 0x10\n 42469: a1 = a1 << 0x18\n 42472: a1 = a1 | a5\n 42475: a1 = a1 | a3\n 42478: a1 = a1 << 0x20\n 42481: t1 = a1 | a2\n 42484: a1 = u8 [a0 + 0x11]\n 42487: a3 = u8 [a0 + 0x10]\n 42490: a4 = u8 [a0 + 0x12]\n 42493: a5 = u8 [a0 + 0x13]\n 42496: a1 = a1 << 0x8\n 42499: a1 = a1 | a3\n 42502: a4 = a4 << 0x10\n 42505: a5 = a5 << 0x18\n 42508: a4 = a4 | a5\n 42511: a1 = a1 | a4\n 42514: a3 = u8 [a0 + 0x15]\n 42517: a4 = u8 [a0 + 0x14]\n 42520: a5 = u8 [a0 + 0x16]\n 42523: a2 = u8 [a0 + 0x17]\n 42526: a3 = a3 << 0x8\n 42529: a3 = a3 | a4\n 42532: a5 = a5 << 0x10\n 42535: a2 = a2 << 0x18\n 42538: a2 = a2 | a5\n 42541: a2 = a2 | a3\n 42544: a2 = a2 << 0x20\n 42547: a3 = a2 | a1\n 42550: a1 = u8 [a0 + 0x19]\n 42553: a2 = u8 [a0 + 0x18]\n 42556: a4 = u8 [a0 + 0x1a]\n 42559: a5 = u8 [a0 + 0x1b]\n 42562: a1 = a1 << 0x8\n 42565: a1 = a1 | a2\n 42568: a4 = a4 << 0x10\n 42571: a5 = a5 << 0x18\n 42574: a4 = a4 | a5\n 42577: a1 = a1 | a4\n 42580: a2 = u8 [a0 + 0x1d]\n 42583: a4 = u8 [a0 + 0x1c]\n 42586: a5 = u8 [a0 + 0x1e]\n 42589: a0 = u8 [a0 + 0x1f]\n 42592: a2 = a2 << 0x8\n 42595: a2 = a2 | a4\n 42598: a5 = a5 << 0x10\n 42601: a0 = a0 << 0x18\n 42604: a0 = a0 | a5\n 42607: a0 = a0 | a2\n 42610: a0 = a0 << 0x20\n 42613: a0 = a0 | a1\n 42616: t2 = reverse a0\n 42618: u64 [s1 + 0x280] = t2\n 42622: a2 = reverse a3\n 42624: u64 [s1 + 0x200] = a2\n 42628: a1 = reverse t1\n 42630: u64 [s1 + 0x208] = a1\n 42634: a3 = reverse t0\n 42636: u64 [s1 + 0x238] = a3\n 42640: a0 = u64 [s1 + 0x210]\n 42644: u64 [s1 + 0x398] = a0\n 42648: a0 = u64 [s1 + 0x218]\n 42652: u64 [s1 + 0x390] = a0\n 42656: a0 = u64 [s1 + 0x220]\n 42660: u64 [s1 + 0x388] = a0\n 42664: a0 = u64 [s1 + 0x228]\n 42668: u64 [s1 + 0x380] = a0\n 42672: u64 [s1 + 952] = 0\n 42676: a0 = u64 [s1 + 0x288]\n 42680: u64 [s1 + 0x3b0] = a0\n 42684: a0 = u64 [s1 + 0x298]\n 42688: u64 [s1 + 0x3a8] = a0\n 42692: a0 = u64 [s1 + 0x290]\n 42696: u64 [s1 + 0x3a0] = a0\n 42700: a0 = u64 [s1 + 0x260]\n 42704: u64 [s1 + 0x3d8] = a0\n 42708: a0 = u64 [s1 + 0x278]\n 42712: u64 [s1 + 0x3d0] = a0\n 42716: a0 = u64 [s1 + 0x268]\n 42720: u64 [s1 + 0x3c8] = a0\n 42724: a0 = u64 [s1 + 0x270]\n 42728: u64 [s1 + 0x3c0] = a0\n 42732: a0 = u64 [s1 + 0x240]\n 42736: u64 [s1 + 0x3f8] = a0\n 42740: a0 = u64 [s1 + 0x248]\n 42744: u64 [s1 + 0x3f0] = a0\n 42748: a0 = u64 [s1 + 0x250]\n 42752: u64 [s1 + 0x3e8] = a0\n 42756: a0 = u64 [s1 + 0x258]\n 42760: u64 [s1 + 0x3e0] = a0\n 42764: u64 [s1 + 0x418] = a3\n 42768: u64 [s1 + 0x410] = a1\n 42772: u64 [s1 + 0x408] = a2\n 42776: a0 = s1 + 0x420\n 42780: a1 = s1 + 0x400\n 42784: a2 = s1 + 0x3e0\n 42788: a3 = s1 + 0x3c0\n 42792: a4 = s1 + 0x3a0\n 42796: a5 = s1 + 0x380\n 42800: u64 [s1 + 0x400] = t2\n 42804: ra = 496, jump @505\n      : @562 [@dyn 248] (gas: 12)\n 42810: a2 = u64 [s1 + 0x200]\n 42814: a0 = u64 [s1 + 0x238]\n 42818: a0 = a0 | a2\n 42821: a3 = u64 [s1 + 0x208]\n 42825: a1 = u64 [s1 + 0x280]\n 42829: a1 = a1 | a3\n 42832: a1 = a1 | a0\n 42835: a1 = a1 >> 0x20\n 42838: a0 = a0 | a3\n 42841: a0 = a0 << 0x20\n 42844: a0 = a0 | a1\n 42847: jump @582 if a0 != 0\n      : @563 (gas: 33)\n 42851: ra = a3\n 42853: a0 = u64 [s1 + 0x428]\n 42857: a1 = u64 [s1 + 0x438]\n 42861: u64 [s1 + 0x278] = a1\n 42865: t2 = u64 [s1 + 0x420]\n 42869: a3 = u64 [s1 + 0x430]\n 42873: a4 = a0 ^ a2\n 42876: a5 = a0 <u a2\n 42879: t0 = u64 [s1 + 0x280]\n 42883: a1 = t2 <u t0\n 42886: a5 = a1 if a4 == 0\n 42889: a4 = a3 - ra\n 42892: t1 = a4 - a5\n 42895: a4 = a4 <u a5\n 42898: u64 [s1 + 0x270] = a4\n 42902: a3 = a3 <u ra\n 42905: a5 = u64 [s1 + 0x238]\n 42909: a4 = u64 [s1 + 0x278]\n 42913: a5 = a4 - a5\n 42916: a5 = a5 - a3\n 42919: a3 = u64 [s1 + 0x270]\n 42923: a5 = a5 - a3\n 42926: a0 = a0 - a2\n 42929: a0 = a0 - a1\n 42932: a1 = t2 - t0\n 42935: a0 = a0 | a5\n 42938: a3 = a1 | t1\n 42941: a3 = a3 | a0\n 42944: a0 = a0 | t1\n 42947: a3 = a3 >> 0x20\n 42950: a0 = a0 << 0x20\n 42953: a0 = a0 | a3\n 42956: jump @582 if a0 != 0\n      : @564 (gas: 18)\n 42960: a0 = u64 [s1 + 0x230]\n 42964: a0 = reverse a0\n 42966: a0 = a0 << 0x20\n 42969: a2 = u64 [s1 + 0x1f0]\n 42973: a2 = reverse a2\n 42975: a3 = a2 >> 0x20\n 42978: a0 = a0 | a3\n 42981: u64 [s1 + 0x278] = a0\n 42985: a2 = a2 << 0x20\n 42988: a0 = u64 [s1 + 0x1f8]\n 42992: a0 = reverse a0\n 42994: a0 = a0 >> 0x20\n 42997: a0 = a0 | a2\n 43000: u64 [s1 + 0x270] = a0\n 43004: a0 = i32 [s1 + 0x280]\n 43008: i32 a1 = a1 + 0\n 43010: u64 [s1 + 0x280] = a1\n 43014: ra = 498, jump @0\n      : @565 [@dyn 249] (gas: 47)\n 43021: a1 = u64 [0x20020]\n 43026: a2 = u64 [0x20028]\n 43031: a3 = u64 [0x20030]\n 43036: a4 = u64 [0x20038]\n 43041: u64 [s1 + 0x7b8] = a1\n 43045: u64 [s1 + 0x7b0] = a2\n 43049: u64 [s1 + 0x7a8] = a3\n 43053: u64 [s1 + 0x7a0] = a4\n 43057: a1 = u64 [s1 + 0x2a0]\n 43061: u64 [s1 + 0x7d0] = a1\n 43065: a1 = u64 [s1 + 0x2a8]\n 43069: u64 [s1 + 0x7c8] = a1\n 43073: a1 = u64 [s1 + 0x2b0]\n 43077: u64 [s1 + 0x7c0] = a1\n 43081: a1 = u64 [s1 + 0x2b8]\n 43085: u64 [s1 + 0x7d8] = a1\n 43089: a1 = u64 [s1 + 0x270]\n 43093: a1 = reverse a1\n 43095: a2 = u64 [s1 + 0x278]\n 43099: a2 = reverse a2\n 43101: a3 = u64 [s1 + 0x230]\n 43105: a3 = a3 << 0x20\n 43108: u64 [s1 + 0x7e8] = a3\n 43112: u64 [s1 + 2016] = 0\n 43116: u64 [s1 + 0x7f0] = a2\n 43120: u64 [s1 + 0x7f8] = a1\n 43124: i32 a2 = a0 + 0\n 43126: i32 a0 = s1 + 0x7a0\n 43130: a1 = 0x3\n 43133: a3 = u64 [s1 + 0x280]\n 43137: ecalli 7 // 'deposit_event'\n 43139: a0 = u64 [s1 + 0x98]\n 43143: u64 [a0 + 24] = 0\n 43146: a1 = u64 [s1 + 0x288]\n 43150: u64 [a0 + 0x10] = a1\n 43153: a1 = u64 [s1 + 0x298]\n 43157: u64 [a0 + 0x8] = a1\n 43160: a1 = u64 [s1 + 0x290]\n 43164: u64 [a0] = a1\n 43166: sp = s0 + 0xfffffffffffff800\n 43170: sp = sp + 0xffffffffffffffe0\n 43173: sp = sp + 0x630\n 43177: ra = u64 [sp + 0x1e8]\n 43181: s0 = u64 [sp + 0x1e0]\n 43185: s1 = u64 [sp + 0x1d8]\n 43189: sp = sp + 0x1f0\n 43193: ret\n      : @566 (gas: 3)\n 43195: a0 = 0x40\n 43198: a1 = 0x20\n 43201: ra = 500, jump @0\n      : @567 [@dyn 250] (gas: 104)\n 43208: a1 = u8 [a0 + 0x11]\n 43211: a2 = u8 [a0 + 0x10]\n 43214: a3 = u8 [a0 + 0x12]\n 43217: a4 = u8 [a0 + 0x13]\n 43220: a1 = a1 << 0x8\n 43223: a1 = a1 | a2\n 43226: a3 = a3 << 0x10\n 43229: a4 = a4 << 0x18\n 43232: a3 = a3 | a4\n 43235: a1 = a1 | a3\n 43238: a2 = u8 [a0 + 0x15]\n 43241: a3 = u8 [a0 + 0x14]\n 43244: a4 = u8 [a0 + 0x16]\n 43247: a5 = u8 [a0 + 0x17]\n 43250: a2 = a2 << 0x8\n 43253: a2 = a2 | a3\n 43256: a4 = a4 << 0x10\n 43259: a5 = a5 << 0x18\n 43262: a4 = a4 | a5\n 43265: a2 = a2 | a4\n 43268: a2 = a2 << 0x20\n 43271: t0 = a2 | a1\n 43274: a2 = u8 [a0 + 0x1]\n 43277: a3 = u8 [a0]\n 43279: a4 = u8 [a0 + 0x2]\n 43282: a5 = u8 [a0 + 0x3]\n 43285: a2 = a2 << 0x8\n 43288: a2 = a2 | a3\n 43291: a4 = a4 << 0x10\n 43294: a5 = a5 << 0x18\n 43297: a4 = a4 | a5\n 43300: a2 = a2 | a4\n 43303: a3 = u8 [a0 + 0x5]\n 43306: a4 = u8 [a0 + 0x4]\n 43309: a5 = u8 [a0 + 0x6]\n 43312: a1 = u8 [a0 + 0x7]\n 43315: a3 = a3 << 0x8\n 43318: a3 = a3 | a4\n 43321: a5 = a5 << 0x10\n 43324: a1 = a1 << 0x18\n 43327: a1 = a1 | a5\n 43330: a1 = a1 | a3\n 43333: a1 = a1 << 0x20\n 43336: t1 = a1 | a2\n 43339: a1 = u8 [a0 + 0x19]\n 43342: a3 = u8 [a0 + 0x18]\n 43345: a4 = u8 [a0 + 0x1a]\n 43348: a5 = u8 [a0 + 0x1b]\n 43351: a1 = a1 << 0x8\n 43354: a1 = a1 | a3\n 43357: a4 = a4 << 0x10\n 43360: a5 = a5 << 0x18\n 43363: a4 = a4 | a5\n 43366: a1 = a1 | a4\n 43369: a3 = u8 [a0 + 0x1d]\n 43372: a4 = u8 [a0 + 0x1c]\n 43375: a5 = u8 [a0 + 0x1e]\n 43378: a2 = u8 [a0 + 0x1f]\n 43381: a3 = a3 << 0x8\n 43384: a3 = a3 | a4\n 43387: a5 = a5 << 0x10\n 43390: a2 = a2 << 0x18\n 43393: a2 = a2 | a5\n 43396: a2 = a2 | a3\n 43399: a2 = a2 << 0x20\n 43402: a3 = a2 | a1\n 43405: a1 = u8 [a0 + 0x9]\n 43408: a2 = u8 [a0 + 0x8]\n 43411: a4 = u8 [a0 + 0xa]\n 43414: a5 = u8 [a0 + 0xb]\n 43417: a1 = a1 << 0x8\n 43420: a1 = a1 | a2\n 43423: a4 = a4 << 0x10\n 43426: a5 = a5 << 0x18\n 43429: a4 = a4 | a5\n 43432: a1 = a1 | a4\n 43435: a2 = u8 [a0 + 0xd]\n 43438: a4 = u8 [a0 + 0xc]\n 43441: a5 = u8 [a0 + 0xe]\n 43444: a0 = u8 [a0 + 0xf]\n 43447: a2 = a2 << 0x8\n 43450: a2 = a2 | a4\n 43453: a5 = a5 << 0x10\n 43456: a0 = a0 << 0x18\n 43459: a0 = a0 | a5\n 43462: a0 = a0 | a2\n 43465: a0 = a0 << 0x20\n 43468: a0 = a0 | a1\n 43471: a4 = reverse a0\n 43473: a1 = reverse a3\n 43475: a2 = reverse t1\n 43477: a0 = reverse t0\n 43479: u64 [s1 + 0x2b8] = a0\n 43483: u64 [s1 + 0x2a8] = a2\n 43487: a0 = a0 | a2\n 43490: a2 = a1\n 43492: a1 = a1 | a4\n 43495: a1 = a1 | a0\n 43498: a1 = a1 >> 0x20\n 43501: u64 [s1 + 0x2b0] = a4\n 43505: a0 = a0 | a4\n 43508: a0 = a0 << 0x20\n 43511: a0 = a0 | a1\n 43514: jump @582 if a0 != 0\n      : @568 (gas: 5)\n 43518: u64 [s1 + 0x2a0] = a2\n 43522: i32 a0 = a2 + 0\n 43524: a1 = 0x20\n 43527: u64 [s1 + 0x298] = a0\n 43531: ra = 502, jump @0\n      : @569 [@dyn 251] (gas: 51)\n 43538: u8 [a0 + 31] = 0\n 43541: u8 [a0 + 30] = 0\n 43544: u8 [a0 + 29] = 0\n 43547: u8 [a0 + 28] = 0\n 43550: u8 [a0 + 27] = 0\n 43553: u8 [a0 + 26] = 0\n 43556: u8 [a0 + 25] = 0\n 43559: u8 [a0 + 24] = 0\n 43562: u8 [a0 + 23] = 0\n 43565: u8 [a0 + 22] = 0\n 43568: u8 [a0 + 21] = 0\n 43571: u8 [a0 + 20] = 0\n 43574: u8 [a0 + 19] = 0\n 43577: u8 [a0 + 18] = 0\n 43580: u8 [a0 + 17] = 0\n 43583: u8 [a0 + 16] = 0\n 43586: u8 [a0 + 15] = 0\n 43589: u8 [a0 + 14] = 0\n 43592: u8 [a0 + 13] = 0\n 43595: u8 [a0 + 12] = 0\n 43598: u8 [a0 + 11] = 0\n 43601: u8 [a0 + 10] = 0\n 43604: u8 [a0 + 9] = 0\n 43607: u8 [a0 + 8] = 0\n 43610: u8 [a0 + 7] = 0\n 43613: u8 [a0 + 6] = 0\n 43616: u8 [a0 + 5] = 0\n 43619: u8 [a0 + 4] = 0\n 43622: u8 [a0 + 3] = 0xa0\n 43627: u8 [a0 + 2] = 0x79\n 43631: u8 [a0 + 1] = 0xc3\n 43636: u8 [a0 + 0] = 0x8\n 43639: a1 = u64 [s1 + 0x2a0]\n 43643: a0 = a1 + 0x4\n 43646: a1 = a0 <u a1\n 43649: a3 = u64 [s1 + 0x2b8]\n 43653: a2 = a3 + a1\n 43656: a3 = a2 <u a3\n 43659: a3 = a1 if a1 == 0\n 43662: a1 = u64 [s1 + 0x2b0]\n 43666: a3 = a3 + a1\n 43669: a1 = a3 <u a1\n 43672: a4 = u64 [s1 + 0x2a8]\n 43676: a4 = a4 + a1\n 43679: u64 [s1 + 0x2c8] = a2\n 43683: u64 [s1 + 0x2c0] = a0\n 43687: u64 [s1 + 0x2d0] = a3\n 43691: a0 = s1 + 0x2e0\n 43695: a1 = s1 + 0x2c0\n 43699: u64 [s1 + 0x2d8] = a4\n 43703: ra = 504, jump @392\n      : @570 [@dyn 252] (gas: 5)\n 43709: a0 = u64 [s1 + 0x2e8]\n 43713: t0 = u64 [s1 + 0x2f8]\n 43717: t1 = u64 [s1 + 0x2e0]\n 43721: a3 = u64 [s1 + 0x2f0]\n 43725: jump @581\n      : @571 (gas: 3)\n 43728: a0 = 0x40\n 43731: a1 = 0x20\n 43734: ra = 506, jump @0\n      : @572 [@dyn 253] (gas: 104)\n 43741: a1 = u8 [a0 + 0x11]\n 43744: a2 = u8 [a0 + 0x10]\n 43747: a3 = u8 [a0 + 0x12]\n 43750: a4 = u8 [a0 + 0x13]\n 43753: a1 = a1 << 0x8\n 43756: a1 = a1 | a2\n 43759: a3 = a3 << 0x10\n 43762: a4 = a4 << 0x18\n 43765: a3 = a3 | a4\n 43768: a1 = a1 | a3\n 43771: a2 = u8 [a0 + 0x15]\n 43774: a3 = u8 [a0 + 0x14]\n 43777: a4 = u8 [a0 + 0x16]\n 43780: a5 = u8 [a0 + 0x17]\n 43783: a2 = a2 << 0x8\n 43786: a2 = a2 | a3\n 43789: a4 = a4 << 0x10\n 43792: a5 = a5 << 0x18\n 43795: a4 = a4 | a5\n 43798: a2 = a2 | a4\n 43801: a2 = a2 << 0x20\n 43804: t0 = a2 | a1\n 43807: a2 = u8 [a0 + 0x1]\n 43810: a3 = u8 [a0]\n 43812: a4 = u8 [a0 + 0x2]\n 43815: a5 = u8 [a0 + 0x3]\n 43818: a2 = a2 << 0x8\n 43821: a2 = a2 | a3\n 43824: a4 = a4 << 0x10\n 43827: a5 = a5 << 0x18\n 43830: a4 = a4 | a5\n 43833: a2 = a2 | a4\n 43836: a3 = u8 [a0 + 0x5]\n 43839: a4 = u8 [a0 + 0x4]\n 43842: a5 = u8 [a0 + 0x6]\n 43845: a1 = u8 [a0 + 0x7]\n 43848: a3 = a3 << 0x8\n 43851: a3 = a3 | a4\n 43854: a5 = a5 << 0x10\n 43857: a1 = a1 << 0x18\n 43860: a1 = a1 | a5\n 43863: a1 = a1 | a3\n 43866: a1 = a1 << 0x20\n 43869: t1 = a1 | a2\n 43872: a1 = u8 [a0 + 0x19]\n 43875: a3 = u8 [a0 + 0x18]\n 43878: a4 = u8 [a0 + 0x1a]\n 43881: a5 = u8 [a0 + 0x1b]\n 43884: a1 = a1 << 0x8\n 43887: a1 = a1 | a3\n 43890: a4 = a4 << 0x10\n 43893: a5 = a5 << 0x18\n 43896: a4 = a4 | a5\n 43899: a1 = a1 | a4\n 43902: a3 = u8 [a0 + 0x1d]\n 43905: a4 = u8 [a0 + 0x1c]\n 43908: a5 = u8 [a0 + 0x1e]\n 43911: a2 = u8 [a0 + 0x1f]\n 43914: a3 = a3 << 0x8\n 43917: a3 = a3 | a4\n 43920: a5 = a5 << 0x10\n 43923: a2 = a2 << 0x18\n 43926: a2 = a2 | a5\n 43929: a2 = a2 | a3\n 43932: a2 = a2 << 0x20\n 43935: a3 = a2 | a1\n 43938: a1 = u8 [a0 + 0x9]\n 43941: a2 = u8 [a0 + 0x8]\n 43944: a4 = u8 [a0 + 0xa]\n 43947: a5 = u8 [a0 + 0xb]\n 43950: a1 = a1 << 0x8\n 43953: a1 = a1 | a2\n 43956: a4 = a4 << 0x10\n 43959: a5 = a5 << 0x18\n 43962: a4 = a4 | a5\n 43965: a1 = a1 | a4\n 43968: a2 = u8 [a0 + 0xd]\n 43971: a4 = u8 [a0 + 0xc]\n 43974: a5 = u8 [a0 + 0xe]\n 43977: a0 = u8 [a0 + 0xf]\n 43980: a2 = a2 << 0x8\n 43983: a2 = a2 | a4\n 43986: a5 = a5 << 0x10\n 43989: a0 = a0 << 0x18\n 43992: a0 = a0 | a5\n 43995: a0 = a0 | a2\n 43998: a0 = a0 << 0x20\n 44001: a0 = a0 | a1\n 44004: a4 = reverse a0\n 44006: a1 = reverse a3\n 44008: a2 = reverse t1\n 44010: a0 = reverse t0\n 44012: u64 [s1 + 0x2b8] = a0\n 44016: u64 [s1 + 0x2a8] = a2\n 44020: a0 = a0 | a2\n 44023: a2 = a1\n 44025: a1 = a1 | a4\n 44028: a1 = a1 | a0\n 44031: a1 = a1 >> 0x20\n 44034: u64 [s1 + 0x2b0] = a4\n 44038: a0 = a0 | a4\n 44041: a0 = a0 << 0x20\n 44044: a0 = a0 | a1\n 44047: jump @582 if a0 != 0\n      : @573 (gas: 5)\n 44051: u64 [s1 + 0x2a0] = a2\n 44055: i32 a0 = a2 + 0\n 44057: a1 = 0x20\n 44060: u64 [s1 + 0x298] = a0\n 44064: ra = 508, jump @0\n      : @574 [@dyn 254] (gas: 51)\n 44071: u8 [a0 + 31] = 0\n 44074: u8 [a0 + 30] = 0\n 44077: u8 [a0 + 29] = 0\n 44080: u8 [a0 + 28] = 0\n 44083: u8 [a0 + 27] = 0\n 44086: u8 [a0 + 26] = 0\n 44089: u8 [a0 + 25] = 0\n 44092: u8 [a0 + 24] = 0\n 44095: u8 [a0 + 23] = 0\n 44098: u8 [a0 + 22] = 0\n 44101: u8 [a0 + 21] = 0\n 44104: u8 [a0 + 20] = 0\n 44107: u8 [a0 + 19] = 0\n 44110: u8 [a0 + 18] = 0\n 44113: u8 [a0 + 17] = 0\n 44116: u8 [a0 + 16] = 0\n 44119: u8 [a0 + 15] = 0\n 44122: u8 [a0 + 14] = 0\n 44125: u8 [a0 + 13] = 0\n 44128: u8 [a0 + 12] = 0\n 44131: u8 [a0 + 11] = 0\n 44134: u8 [a0 + 10] = 0\n 44137: u8 [a0 + 9] = 0\n 44140: u8 [a0 + 8] = 0\n 44143: u8 [a0 + 7] = 0\n 44146: u8 [a0 + 6] = 0\n 44149: u8 [a0 + 5] = 0\n 44152: u8 [a0 + 4] = 0\n 44155: u8 [a0 + 3] = 0xa0\n 44160: u8 [a0 + 2] = 0x79\n 44164: u8 [a0 + 1] = 0xc3\n 44169: u8 [a0 + 0] = 0x8\n 44172: a1 = u64 [s1 + 0x2a0]\n 44176: a0 = a1 + 0x4\n 44179: a1 = a0 <u a1\n 44182: a3 = u64 [s1 + 0x2b8]\n 44186: a2 = a3 + a1\n 44189: a3 = a2 <u a3\n 44192: a3 = a1 if a1 == 0\n 44195: a1 = u64 [s1 + 0x2b0]\n 44199: a3 = a3 + a1\n 44202: a1 = a3 <u a1\n 44205: a4 = u64 [s1 + 0x2a8]\n 44209: a4 = a4 + a1\n 44212: u64 [s1 + 0x308] = a2\n 44216: u64 [s1 + 0x300] = a0\n 44220: u64 [s1 + 0x310] = a3\n 44224: a0 = s1 + 0x320\n 44228: a1 = s1 + 0x300\n 44232: u64 [s1 + 0x318] = a4\n 44236: ra = 510, jump @400\n      : @575 [@dyn 255] (gas: 5)\n 44242: a0 = u64 [s1 + 0x328]\n 44246: t0 = u64 [s1 + 0x338]\n 44250: t1 = u64 [s1 + 0x320]\n 44254: a3 = u64 [s1 + 0x330]\n 44258: jump @581\n      : @576 (gas: 3)\n 44261: a0 = 0x40\n 44264: a1 = 0x20\n 44267: ra = 512, jump @0\n      : @577 [@dyn 256] (gas: 104)\n 44274: a1 = u8 [a0 + 0x11]\n 44277: a2 = u8 [a0 + 0x10]\n 44280: a3 = u8 [a0 + 0x12]\n 44283: a4 = u8 [a0 + 0x13]\n 44286: a1 = a1 << 0x8\n 44289: a1 = a1 | a2\n 44292: a3 = a3 << 0x10\n 44295: a4 = a4 << 0x18\n 44298: a3 = a3 | a4\n 44301: a1 = a1 | a3\n 44304: a2 = u8 [a0 + 0x15]\n 44307: a3 = u8 [a0 + 0x14]\n 44310: a4 = u8 [a0 + 0x16]\n 44313: a5 = u8 [a0 + 0x17]\n 44316: a2 = a2 << 0x8\n 44319: a2 = a2 | a3\n 44322: a4 = a4 << 0x10\n 44325: a5 = a5 << 0x18\n 44328: a4 = a4 | a5\n 44331: a2 = a2 | a4\n 44334: a2 = a2 << 0x20\n 44337: t0 = a2 | a1\n 44340: a2 = u8 [a0 + 0x1]\n 44343: a3 = u8 [a0]\n 44345: a4 = u8 [a0 + 0x2]\n 44348: a5 = u8 [a0 + 0x3]\n 44351: a2 = a2 << 0x8\n 44354: a2 = a2 | a3\n 44357: a4 = a4 << 0x10\n 44360: a5 = a5 << 0x18\n 44363: a4 = a4 | a5\n 44366: a2 = a2 | a4\n 44369: a3 = u8 [a0 + 0x5]\n 44372: a4 = u8 [a0 + 0x4]\n 44375: a5 = u8 [a0 + 0x6]\n 44378: a1 = u8 [a0 + 0x7]\n 44381: a3 = a3 << 0x8\n 44384: a3 = a3 | a4\n 44387: a5 = a5 << 0x10\n 44390: a1 = a1 << 0x18\n 44393: a1 = a1 | a5\n 44396: a1 = a1 | a3\n 44399: a1 = a1 << 0x20\n 44402: t1 = a1 | a2\n 44405: a1 = u8 [a0 + 0x19]\n 44408: a3 = u8 [a0 + 0x18]\n 44411: a4 = u8 [a0 + 0x1a]\n 44414: a5 = u8 [a0 + 0x1b]\n 44417: a1 = a1 << 0x8\n 44420: a1 = a1 | a3\n 44423: a4 = a4 << 0x10\n 44426: a5 = a5 << 0x18\n 44429: a4 = a4 | a5\n 44432: a1 = a1 | a4\n 44435: a3 = u8 [a0 + 0x1d]\n 44438: a4 = u8 [a0 + 0x1c]\n 44441: a5 = u8 [a0 + 0x1e]\n 44444: a2 = u8 [a0 + 0x1f]\n 44447: a3 = a3 << 0x8\n 44450: a3 = a3 | a4\n 44453: a5 = a5 << 0x10\n 44456: a2 = a2 << 0x18\n 44459: a2 = a2 | a5\n 44462: a2 = a2 | a3\n 44465: a2 = a2 << 0x20\n 44468: a3 = a2 | a1\n 44471: a1 = u8 [a0 + 0x9]\n 44474: a2 = u8 [a0 + 0x8]\n 44477: a4 = u8 [a0 + 0xa]\n 44480: a5 = u8 [a0 + 0xb]\n 44483: a1 = a1 << 0x8\n 44486: a1 = a1 | a2\n 44489: a4 = a4 << 0x10\n 44492: a5 = a5 << 0x18\n 44495: a4 = a4 | a5\n 44498: a1 = a1 | a4\n 44501: a2 = u8 [a0 + 0xd]\n 44504: a4 = u8 [a0 + 0xc]\n 44507: a5 = u8 [a0 + 0xe]\n 44510: a0 = u8 [a0 + 0xf]\n 44513: a2 = a2 << 0x8\n 44516: a2 = a2 | a4\n 44519: a5 = a5 << 0x10\n 44522: a0 = a0 << 0x18\n 44525: a0 = a0 | a5\n 44528: a0 = a0 | a2\n 44531: a0 = a0 << 0x20\n 44534: a0 = a0 | a1\n 44537: a4 = reverse a0\n 44539: a1 = reverse a3\n 44541: a2 = reverse t1\n 44543: a0 = reverse t0\n 44545: u64 [s1 + 0x2b8] = a0\n 44549: u64 [s1 + 0x2a8] = a2\n 44553: a0 = a0 | a2\n 44556: a2 = a1\n 44558: a1 = a1 | a4\n 44561: a1 = a1 | a0\n 44564: a1 = a1 >> 0x20\n 44567: u64 [s1 + 0x2b0] = a4\n 44571: a0 = a0 | a4\n 44574: a0 = a0 << 0x20\n 44577: a0 = a0 | a1\n 44580: jump @582 if a0 != 0\n      : @578 (gas: 5)\n 44584: u64 [s1 + 0x2a0] = a2\n 44588: i32 a0 = a2 + 0\n 44590: a1 = 0x20\n 44593: u64 [s1 + 0x298] = a0\n 44597: ra = 514, jump @0\n      : @579 [@dyn 257] (gas: 51)\n 44604: u8 [a0 + 31] = 0\n 44607: u8 [a0 + 30] = 0\n 44610: u8 [a0 + 29] = 0\n 44613: u8 [a0 + 28] = 0\n 44616: u8 [a0 + 27] = 0\n 44619: u8 [a0 + 26] = 0\n 44622: u8 [a0 + 25] = 0\n 44625: u8 [a0 + 24] = 0\n 44628: u8 [a0 + 23] = 0\n 44631: u8 [a0 + 22] = 0\n 44634: u8 [a0 + 21] = 0\n 44637: u8 [a0 + 20] = 0\n 44640: u8 [a0 + 19] = 0\n 44643: u8 [a0 + 18] = 0\n 44646: u8 [a0 + 17] = 0\n 44649: u8 [a0 + 16] = 0\n 44652: u8 [a0 + 15] = 0\n 44655: u8 [a0 + 14] = 0\n 44658: u8 [a0 + 13] = 0\n 44661: u8 [a0 + 12] = 0\n 44664: u8 [a0 + 11] = 0\n 44667: u8 [a0 + 10] = 0\n 44670: u8 [a0 + 9] = 0\n 44673: u8 [a0 + 8] = 0\n 44676: u8 [a0 + 7] = 0\n 44679: u8 [a0 + 6] = 0\n 44682: u8 [a0 + 5] = 0\n 44685: u8 [a0 + 4] = 0\n 44688: u8 [a0 + 3] = 0xa0\n 44693: u8 [a0 + 2] = 0x79\n 44697: u8 [a0 + 1] = 0xc3\n 44702: u8 [a0 + 0] = 0x8\n 44705: a1 = u64 [s1 + 0x2a0]\n 44709: a0 = a1 + 0x4\n 44712: a1 = a0 <u a1\n 44715: a3 = u64 [s1 + 0x2b8]\n 44719: a2 = a3 + a1\n 44722: a3 = a2 <u a3\n 44725: a3 = a1 if a1 == 0\n 44728: a1 = u64 [s1 + 0x2b0]\n 44732: a3 = a3 + a1\n 44735: a1 = a3 <u a1\n 44738: a4 = u64 [s1 + 0x2a8]\n 44742: a4 = a4 + a1\n 44745: u64 [s1 + 0x5e8] = a2\n 44749: u64 [s1 + 0x5e0] = a0\n 44753: u64 [s1 + 0x5f0] = a3\n 44757: a0 = s1 + 0x600\n 44761: a1 = s1 + 0x5e0\n 44765: u64 [s1 + 0x5f8] = a4\n 44769: ra = 516, jump @456\n      : @580 [@dyn 258] (gas: 5)\n 44775: a0 = u64 [s1 + 0x608]\n 44779: t0 = u64 [s1 + 0x618]\n 44783: t1 = u64 [s1 + 0x600]\n 44787: a3 = u64 [s1 + 0x610]\n 44791: fallthrough\n      : @581 (gas: 27)\n 44792: a1 = u64 [s1 + 0x2b8]\n 44796: a4 = a0 ^ a1\n 44799: a5 = a0 <u a1\n 44802: ra = a1\n 44804: t2 = u64 [s1 + 0x2a0]\n 44808: a1 = t1 <u t2\n 44811: a5 = a1 if a4 == 0\n 44814: a2 = u64 [s1 + 0x2b0]\n 44818: a4 = a3 - a2\n 44821: a3 = a3 <u a2\n 44824: a2 = u64 [s1 + 0x2a8]\n 44828: a2 = t0 - a2\n 44831: a2 = a2 - a3\n 44834: a3 = a4 <u a5\n 44837: a2 = a2 - a3\n 44840: a4 = a4 - a5\n 44843: a0 = a0 - ra\n 44846: a1 = a0 - a1\n 44849: a0 = t1 - t2\n 44852: a1 = a1 | a2\n 44855: a2 = a0 | a4\n 44858: a2 = a2 | a1\n 44861: a1 = a1 | a4\n 44864: a2 = a2 >> 0x20\n 44867: a1 = a1 << 0x20\n 44870: a1 = a1 | a2\n 44873: jump @588 if a1 == 0\n      : @582 (gas: 1)\n 44876: trap\n      : @583 (gas: 1)\n 44877: ra = 518, jump @282\n      : @584 [@dyn 259] (gas: 8)\n 44883: u64 [s1 + 880] = 0\n 44887: u64 [s1 + 872] = 0\n 44891: u64 [s1 + 864] = 0\n 44895: a0 = 0x4e487b7100000000\n 44905: a1 = s1 + 0x360\n 44909: u64 [s1 + 0x378] = a0\n 44913: a0 = 0\n 44915: ra = 520, jump @8\n      : @585 [@dyn 260] (gas: 7)\n 44922: u64 [s1 + 856] = 0\n 44926: u64 [s1 + 848] = 0\n 44930: u64 [s1 + 832] = 0x41\n 44935: a0 = 0x4\n 44938: a1 = s1 + 0x340\n 44942: u64 [s1 + 840] = 0\n 44946: ra = 522, jump @8\n      : @586 [@dyn 261] (gas: 3)\n 44953: a1 = 0x24\n 44956: a0 = 0\n 44958: ra = 524, jump @0\n      : @587 [@dyn 262] (gas: 5)\n 44965: i32 a1 = a0 + 0\n 44967: a0 = 0x1\n 44970: a2 = 0x24\n 44973: ecalli 14 // 'seal_return'\n 44975: fallthrough\n      : @588 (gas: 4)\n 44976: i32 a1 = a0 + 0\n 44978: u64 [s1 + 0x2b8] = a1\n 44982: a0 = u64 [s1 + 0x298]\n 44986: ra = 526, jump @0\n      : @589 [@dyn 263] (gas: 6)\n 44993: i32 a1 = a0 + 0\n 44995: a0 = 0x1\n 44998: a2 = u64 [s1 + 0x2b8]\n 45002: ra = 0x210\n 45006: ecalli 14 // 'seal_return'\n 45008: fallthrough\n      : @590 [@dyn 264] (gas: 6)\n 45009: u64 [a0 + 24] = 0\n 45012: u64 [a0 + 16] = 0\n 45015: u64 [a0 + 8] = 0\n 45018: a1 = 0x60\n 45021: u64 [a0] = a1\n 45023: ret\n      : @591 (gas: 12)\n 45025: a0 = u64 [sp + 0x70]\n 45028: a1 = u64 [sp + 0x78]\n 45031: a0 = a0 | a1\n 45034: a1 = u64 [sp + 0x98]\n 45038: a1 = a1 | s1\n 45041: a1 = a1 | a0\n 45044: a1 = a1 >> 0x20\n 45047: u64 [sp + 0x68] = s1\n 45050: a0 = a0 | s1\n 45053: a0 = a0 << 0x20\n 45056: a0 = a0 | a1\n 45059: jump @605 if a0 != 0\n      : @592 (gas: 11)\n 45063: s1 = u64 [sp + 0xd8]\n 45067: u64 [sp + 0x80] = s1\n 45071: a0 = u64 [sp + 0xd0]\n 45075: u64 [sp + 0x90] = a0\n 45079: a0 = u64 [sp + 0xc8]\n 45083: u64 [sp + 0x60] = a0\n 45086: a0 = u64 [sp + 0xc0]\n 45090: u64 [sp + 0x88] = a0\n 45094: a0 = i32 [sp + 0x98]\n 45098: a1 = 0x20\n 45101: ra = 530, jump @0\n      : @593 [@dyn 265] (gas: 70)\n 45108: a1 = reverse s1\n 45110: a2 = u64 [sp + 0x90]\n 45114: a2 = reverse a2\n 45116: s1 = u64 [sp + 0x60]\n 45119: a3 = reverse s1\n 45121: a4 = u64 [sp + 0x88]\n 45125: a4 = reverse a4\n 45127: a5 = a4 >> 0x38\n 45130: u8 [a0 + 0x1f] = a5\n 45133: a5 = a4 >> 0x30\n 45136: u8 [a0 + 0x1e] = a5\n 45139: a5 = a4 >> 0x28\n 45142: u8 [a0 + 0x1d] = a5\n 45145: a5 = a4 >> 0x20\n 45148: u8 [a0 + 0x1c] = a5\n 45151: a5 = a4 >> 0x18\n 45154: u8 [a0 + 0x1b] = a5\n 45157: a5 = a4 >> 0x10\n 45160: u8 [a0 + 0x1a] = a5\n 45163: a5 = a4 >> 0x8\n 45166: u8 [a0 + 0x19] = a5\n 45169: u8 [a0 + 0x18] = a4\n 45172: u8 [a0 + 0x10] = a3\n 45175: a4 = a3 >> 0x38\n 45178: u8 [a0 + 0x17] = a4\n 45181: a4 = a3 >> 0x30\n 45184: u8 [a0 + 0x16] = a4\n 45187: a4 = a3 >> 0x28\n 45190: u8 [a0 + 0x15] = a4\n 45193: a4 = a3 >> 0x20\n 45196: u8 [a0 + 0x14] = a4\n 45199: a4 = a3 >> 0x18\n 45202: u8 [a0 + 0x13] = a4\n 45205: a4 = a3 >> 0x10\n 45208: u8 [a0 + 0x12] = a4\n 45211: a3 = a3 >> 0x8\n 45214: u8 [a0 + 0x11] = a3\n 45217: u8 [a0 + 0x8] = a2\n 45220: a3 = a2 >> 0x38\n 45223: u8 [a0 + 0xf] = a3\n 45226: a3 = a2 >> 0x30\n 45229: u8 [a0 + 0xe] = a3\n 45232: a3 = a2 >> 0x28\n 45235: u8 [a0 + 0xd] = a3\n 45238: a3 = a2 >> 0x20\n 45241: u8 [a0 + 0xc] = a3\n 45244: a3 = a2 >> 0x18\n 45247: u8 [a0 + 0xb] = a3\n 45250: a3 = a2 >> 0x10\n 45253: u8 [a0 + 0xa] = a3\n 45256: a2 = a2 >> 0x8\n 45259: u8 [a0 + 0x9] = a2\n 45262: u8 [a0] = a1\n 45264: a2 = a1 >> 0x38\n 45267: u8 [a0 + 0x7] = a2\n 45270: a2 = a1 >> 0x30\n 45273: u8 [a0 + 0x6] = a2\n 45276: a2 = a1 >> 0x28\n 45279: u8 [a0 + 0x5] = a2\n 45282: a2 = a1 >> 0x20\n 45285: u8 [a0 + 0x4] = a2\n 45288: a2 = a1 >> 0x18\n 45291: u8 [a0 + 0x3] = a2\n 45294: a2 = a1 >> 0x10\n 45297: u8 [a0 + 0x2] = a2\n 45300: a1 = a1 >> 0x8\n 45303: u8 [a0 + 0x1] = a1\n 45306: a1 = 0x20\n 45309: a0 = 0\n 45311: ra = 532, jump @0\n      : @594 [@dyn 266] (gas: 71)\n 45318: a1 = u64 [sp + 0x40]\n 45321: a1 = reverse a1\n 45323: a2 = u64 [sp + 0x48]\n 45326: a2 = reverse a2\n 45328: a3 = u64 [sp + 0x50]\n 45331: a3 = reverse a3\n 45333: a4 = u64 [sp + 0x58]\n 45336: a4 = reverse a4\n 45338: a5 = a4 >> 0x38\n 45341: u8 [a0 + 0x1f] = a5\n 45344: a5 = a4 >> 0x30\n 45347: u8 [a0 + 0x1e] = a5\n 45350: a5 = a4 >> 0x28\n 45353: u8 [a0 + 0x1d] = a5\n 45356: a5 = a4 >> 0x20\n 45359: u8 [a0 + 0x1c] = a5\n 45362: a5 = a4 >> 0x18\n 45365: u8 [a0 + 0x1b] = a5\n 45368: a5 = a4 >> 0x10\n 45371: u8 [a0 + 0x1a] = a5\n 45374: a5 = a4 >> 0x8\n 45377: u8 [a0 + 0x19] = a5\n 45380: u8 [a0 + 0x18] = a4\n 45383: a4 = a3 >> 0x38\n 45386: u8 [a0 + 0x17] = a4\n 45389: a4 = a3 >> 0x30\n 45392: u8 [a0 + 0x16] = a4\n 45395: a4 = a3 >> 0x28\n 45398: u8 [a0 + 0x15] = a4\n 45401: a4 = a3 >> 0x20\n 45404: u8 [a0 + 0x14] = a4\n 45407: a4 = a3 >> 0x18\n 45410: u8 [a0 + 0x13] = a4\n 45413: a4 = a3 >> 0x10\n 45416: u8 [a0 + 0x12] = a4\n 45419: a4 = a3 >> 0x8\n 45422: u8 [a0 + 0x11] = a4\n 45425: u8 [a0 + 0x10] = a3\n 45428: a3 = a2 >> 0x38\n 45431: u8 [a0 + 0xf] = a3\n 45434: a3 = a2 >> 0x30\n 45437: u8 [a0 + 0xe] = a3\n 45440: a3 = a2 >> 0x28\n 45443: u8 [a0 + 0xd] = a3\n 45446: a3 = a2 >> 0x20\n 45449: u8 [a0 + 0xc] = a3\n 45452: a3 = a2 >> 0x18\n 45455: u8 [a0 + 0xb] = a3\n 45458: a3 = a2 >> 0x10\n 45461: u8 [a0 + 0xa] = a3\n 45464: a3 = a2 >> 0x8\n 45467: u8 [a0 + 0x9] = a3\n 45470: u8 [a0 + 0x8] = a2\n 45473: a2 = a1 >> 0x38\n 45476: u8 [a0 + 0x7] = a2\n 45479: a2 = a1 >> 0x30\n 45482: u8 [a0 + 0x6] = a2\n 45485: a2 = a1 >> 0x28\n 45488: u8 [a0 + 0x5] = a2\n 45491: a2 = a1 >> 0x20\n 45494: u8 [a0 + 0x4] = a2\n 45497: a2 = a1 >> 0x18\n 45500: u8 [a0 + 0x3] = a2\n 45503: a2 = a1 >> 0x10\n 45506: u8 [a0 + 0x2] = a2\n 45509: a2 = a1 >> 0x8\n 45512: u8 [a0 + 0x1] = a2\n 45515: u8 [a0] = a1\n 45517: a1 = 0x20\n 45520: a0 = 0\n 45522: ra = 534, jump @0\n      : @595 [@dyn 267] (gas: 5)\n 45529: i32 a0 = a0 + 0\n 45531: i32 a2 = sp + 0xc0\n 45535: a1 = 0x20\n 45538: ecalli 9 // 'hash_keccak_256'\n 45540: fallthrough\n      : @596 (gas: 20)\n 45541: a1 = u64 [sp + 0x98]\n 45545: a0 = a1 + 0x20\n 45548: u64 [sp + 0x50] = a0\n 45551: a2 = a0 <u a1\n 45554: a1 = u64 [sp + 0x78]\n 45557: t2 = a1 + a2\n 45560: a3 = t2 <u a1\n 45563: a3 = a2 if a2 == 0\n 45566: a2 = u64 [sp + 0x68]\n 45569: ra = a2 + a3\n 45572: a0 = u64 [sp + 0x90]\n 45576: a3 = u64 [sp + 0x88]\n 45580: a3 = a3 | a0\n 45583: a0 = u64 [sp + 0x80]\n 45587: a4 = s1 | a0\n 45590: a4 = a4 | a3\n 45593: a3 = ra <u a2\n 45596: t1 = u64 [sp + 0x70]\n 45599: a3 = a3 + t1\n 45602: jump @603 if a4 == 0\n      : @597 (gas: 161)\n 45606: a0 = 0xffffffe0\n 45616: a4 = u64 [sp + 0x98]\n 45620: s1 = a0 <u a4\n 45623: u64 [sp + 0x40] = s1\n 45626: a5 = a1 >u 0\n 45628: a5 = s1 if a1 == 0\n 45631: s1 = -a2\n 45633: a1 = s1 - a5\n 45636: u64 [sp + 0x58] = a1\n 45639: t0 = a1 >u 0\n 45641: a5 = s1 <u a5\n 45644: s1 = a2 >u 0\n 45646: s1 = s1 + t1\n 45649: s1 = -s1\n 45651: s1 = s1 - a5\n 45654: t1 = s1 >u 0\n 45656: t1 = t0 if s1 == 0\n 45659: a2 = s1\n 45661: u64 [sp + 0x48] = s1\n 45664: t0 = a0 - a4\n 45667: a1 = u64 [sp + 0x78]\n 45670: a5 = -a1\n 45672: a1 = u64 [sp + 0x40]\n 45675: a4 = a5 - a1\n 45678: u64 [sp + 0x40] = a0\n 45681: s1 = a0 <u t0\n 45684: a5 = a4 >u 0\n 45686: a5 = s1 if a4 == 0\n 45689: a1 = u64 [sp + 0x58]\n 45692: s1 = a1 | a2\n 45695: a5 = t1 if s1 != 0\n 45698: t0 = 0 if a5 != 0\n 45700: a0 = t0 + 0x1f\n 45703: s1 = a0 <u t0\n 45706: a4 = 0 if a5 != 0\n 45708: t0 = a4 + s1\n 45711: a4 = t0 <u a4\n 45714: a4 = s1 if s1 == 0\n 45717: a1 = 0 if a5 != 0\n 45719: u64 [sp + 0x58] = a1\n 45722: a1 = a1 + a4\n 45725: u64 [sp + 0x8] = a1\n 45728: a4 = a1 << 0x3b\n 45731: s1 = t0 >> 0x5\n 45734: t1 = s1 | a4\n 45737: t0 = t0 << 0x3b\n 45740: a4 = a0 >> 0x5\n 45743: s1 = a4 | t0\n 45746: u64 [sp + 0x38] = s1\n 45749: a1 = u64 [sp + 0x88]\n 45753: a4 = a1 <u 0x1\n 45756: t0 = u64 [sp + 0x60]\n 45759: a0 = t0 - a4\n 45762: u64 [sp + 0x20] = a0\n 45765: a2 = a1 + 0xffffffffffffffff\n 45768: u64 [sp + 0x30] = a2\n 45771: u64 [sp + 0x28] = t1\n 45774: a4 = a0 ^ t1\n 45777: t1 = a0 <u t1\n 45780: a0 = a2 <u s1\n 45783: a0 = t1 if a4 != 0\n 45786: u64 [sp + 0x10] = a0\n 45789: a4 = a1 | t0\n 45792: a4 = a4 <u 0x1\n 45795: a0 = u64 [sp + 0x90]\n 45799: t1 = a0 <u a4\n 45802: a1 = u64 [sp + 0x80]\n 45806: a1 = a1 - t1\n 45809: a0 = a0 - a4\n 45812: a2 = u64 [sp + 0x48]\n 45815: a2 = 0 if a5 != 0\n 45817: a4 = u64 [sp + 0x8]\n 45820: a5 = u64 [sp + 0x58]\n 45823: a5 = a4 <u a5\n 45826: a2 = a2 + a5\n 45829: t1 = a4 >> 0x5\n 45832: a5 = a2 << 0x3b\n 45835: t1 = t1 | a5\n 45838: a5 = a2 >> 0x5\n 45841: a2 = a0 <u t1\n 45844: t0 = a1 ^ a5\n 45847: a4 = a1 <u a5\n 45850: a4 = a2 if t0 == 0\n 45853: s1 = a0 ^ t1\n 45856: s1 = s1 | t0\n 45859: a2 = u64 [sp + 0x10]\n 45862: a4 = a2 if s1 == 0\n 45865: a1 = a5 if a4 == 0\n 45868: u64 [sp + 0x90] = a1\n 45872: a0 = t1 if a4 == 0\n 45875: a1 = u64 [sp + 0x20]\n 45878: a2 = u64 [sp + 0x28]\n 45881: a1 = a2 if a4 == 0\n 45884: a2 = u64 [sp + 0x30]\n 45887: a5 = u64 [sp + 0x38]\n 45890: a2 = a5 if a4 == 0\n 45893: a4 = a2 >> 0x3b\n 45896: a5 = a1 << 0x5\n 45899: t1 = a1\n 45901: a4 = a4 | a5\n 45904: a5 = a2 << 0x5\n 45907: s1 = u64 [sp + 0x78]\n 45910: s1 = s1 + a4\n 45913: a1 = u64 [sp + 0x98]\n 45917: a5 = a5 + a1\n 45920: u64 [sp + 0x60] = a5\n 45923: a4 = a5 <u a1\n 45926: s1 = s1 + a4\n 45929: a1 = u64 [sp + 0x78]\n 45932: t0 = s1 ^ a1\n 45935: a1 = u64 [sp + 0x78]\n 45938: a5 = s1 <u a1\n 45941: a5 = a4 if t0 == 0\n 45944: a1 = u64 [sp + 0xd0]\n 45948: u64 [sp + 0x88] = a1\n 45952: t1 = t1 >> 0x3b\n 45955: a4 = a0 << 0x5\n 45958: t1 = a4 | t1\n 45961: a1 = u64 [sp + 0xc8]\n 45965: u64 [sp + 0x80] = a1\n 45969: a0 = a0 >> 0x3b\n 45972: t0 = u64 [sp + 0x90]\n 45976: t0 = t0 << 0x5\n 45979: a4 = t0 | a0\n 45982: a2 = u64 [sp + 0x68]\n 45985: t0 = u64 [sp + 0x70]\n 45988: t0 = t0 + a4\n 45991: t1 = t1 + a2\n 45994: a4 = t1 <u a2\n 45997: t0 = t0 + a4\n 46000: a5 = a5 + t1\n 46003: a4 = a5 <u t1\n 46006: a1 = u64 [sp + 0x70]\n 46009: t0 = t0 + a4\n 46012: a4 = u64 [sp + 0x60]\n 46015: a0 = a4 + 0x20\n 46018: u64 [sp + 0x38] = a0\n 46021: a4 = a0 <u a4\n 46024: a0 = s1 + a4\n 46027: u64 [sp + 0x30] = a0\n 46030: s1 = a0 <u s1\n 46033: s1 = a4 if a4 == 0\n 46036: a0 = u64 [sp + 0xc0]\n 46040: s1 = s1 + a5\n 46043: u64 [sp + 0x28] = s1\n 46046: a5 = s1 <u a5\n 46049: a5 = a5 + t0\n 46052: u64 [sp + 0x20] = a5\n 46055: a4 = u64 [sp + 0x78]\n 46058: a5 = u64 [sp + 0xd8]\n 46062: a0 = reverse a0\n 46064: u64 [sp + 0x90] = a0\n 46068: a0 = u64 [sp + 0x80]\n 46072: t0 = reverse a0\n 46074: a0 = u64 [sp + 0x88]\n 46078: a0 = reverse a0\n 46080: u64 [sp + 0x88] = a0\n 46084: a0 = reverse a5\n 46086: u64 [sp + 0x80] = a0\n 46090: t1 = u64 [sp + 0x50]\n 46093: fallthrough\n      : @598 (gas: 29)\n 46094: u64 [sp + 0x60] = a1\n 46097: u64 [sp + 0x58] = a2\n 46100: s1 = a4\n 46102: a0 = u64 [sp + 0x98]\n 46106: u64 [sp + 0x50] = a0\n 46109: u64 [sp + 0x70] = a3\n 46112: u64 [sp + 0x68] = ra\n 46115: u64 [sp + 0x78] = t2\n 46118: u64 [sp + 0x98] = t1\n 46122: u64 [sp + 0x48] = t0\n 46125: u64 [sp + 0xb0] = t0\n 46129: a0 = u64 [sp + 0x88]\n 46133: u64 [sp + 0xa8] = a0\n 46137: a0 = u64 [sp + 0x80]\n 46141: u64 [sp + 0xa0] = a0\n 46145: a0 = u64 [sp + 0x90]\n 46149: u64 [sp + 0xb8] = a0\n 46153: u64 [sp + 216] = 0\n 46157: u64 [sp + 208] = 0\n 46161: u64 [sp + 200] = 0\n 46165: u64 [sp + 192] = 0\n 46169: u32 [sp + 224] = 0x20\n 46174: i32 a1 = sp + 0xa0\n 46178: i32 a3 = sp + 0xc0\n 46182: i32 a4 = sp + 0xe0\n 46186: a2 = 0xffffffffffffffff\n 46189: a0 = 0\n 46191: ecalli 8 // 'get_storage'\n 46193: fallthrough\n      : @599 (gas: 9)\n 46194: a0 = u64 [sp + 0x60]\n 46197: a1 = u64 [sp + 0x58]\n 46200: a0 = a0 | a1\n 46203: a1 = u64 [sp + 0x40]\n 46206: a2 = u64 [sp + 0x50]\n 46209: a1 = a2 <u a1\n 46212: a1 = 0 if s1 != 0\n 46214: a1 = 0 if a0 != 0\n 46216: jump @605 if a1 == 0\n      : @600 (gas: 10)\n 46220: s1 = u64 [sp + 0xd8]\n 46224: a0 = u64 [sp + 0xd0]\n 46228: u64 [sp + 0x50] = a0\n 46231: a0 = u64 [sp + 0xc8]\n 46235: u64 [sp + 0x58] = a0\n 46238: a0 = u64 [sp + 0xc0]\n 46242: u64 [sp + 0x60] = a0\n 46245: a0 = i32 [sp + 0x98]\n 46249: a1 = 0x20\n 46252: ra = 536, jump @0\n      : @601 [@dyn 268] (gas: 107)\n 46259: a1 = reverse s1\n 46261: a2 = u64 [sp + 0x50]\n 46264: a2 = reverse a2\n 46266: a3 = u64 [sp + 0x58]\n 46269: a3 = reverse a3\n 46271: a4 = u64 [sp + 0x60]\n 46274: a4 = reverse a4\n 46276: a5 = a4 >> 0x38\n 46279: u8 [a0 + 0x1f] = a5\n 46282: a5 = a4 >> 0x30\n 46285: u8 [a0 + 0x1e] = a5\n 46288: a5 = a4 >> 0x28\n 46291: u8 [a0 + 0x1d] = a5\n 46294: a5 = a4 >> 0x20\n 46297: u8 [a0 + 0x1c] = a5\n 46300: a5 = a4 >> 0x18\n 46303: u8 [a0 + 0x1b] = a5\n 46306: a5 = a4 >> 0x10\n 46309: u8 [a0 + 0x1a] = a5\n 46312: a5 = a4 >> 0x8\n 46315: u8 [a0 + 0x19] = a5\n 46318: u8 [a0 + 0x18] = a4\n 46321: u8 [a0 + 0x10] = a3\n 46324: a4 = a3 >> 0x38\n 46327: u8 [a0 + 0x17] = a4\n 46330: a4 = a3 >> 0x30\n 46333: u8 [a0 + 0x16] = a4\n 46336: a4 = a3 >> 0x28\n 46339: u8 [a0 + 0x15] = a4\n 46342: a4 = a3 >> 0x20\n 46345: u8 [a0 + 0x14] = a4\n 46348: a4 = a3 >> 0x18\n 46351: u8 [a0 + 0x13] = a4\n 46354: a4 = a3 >> 0x10\n 46357: u8 [a0 + 0x12] = a4\n 46360: a3 = a3 >> 0x8\n 46363: u8 [a0 + 0x11] = a3\n 46366: u8 [a0 + 0x8] = a2\n 46369: a3 = a2 >> 0x38\n 46372: u8 [a0 + 0xf] = a3\n 46375: a3 = a2 >> 0x30\n 46378: u8 [a0 + 0xe] = a3\n 46381: a3 = a2 >> 0x28\n 46384: u8 [a0 + 0xd] = a3\n 46387: a3 = a2 >> 0x20\n 46390: u8 [a0 + 0xc] = a3\n 46393: a3 = a2 >> 0x18\n 46396: u8 [a0 + 0xb] = a3\n 46399: a3 = a2 >> 0x10\n 46402: u8 [a0 + 0xa] = a3\n 46405: a2 = a2 >> 0x8\n 46408: u8 [a0 + 0x9] = a2\n 46411: u8 [a0] = a1\n 46413: a2 = a1 >> 0x38\n 46416: u8 [a0 + 0x7] = a2\n 46419: a2 = a1 >> 0x30\n 46422: u8 [a0 + 0x6] = a2\n 46425: a2 = a1 >> 0x28\n 46428: u8 [a0 + 0x5] = a2\n 46431: a2 = a1 >> 0x20\n 46434: u8 [a0 + 0x4] = a2\n 46437: a2 = a1 >> 0x18\n 46440: u8 [a0 + 0x3] = a2\n 46443: a2 = a1 >> 0x10\n 46446: u8 [a0 + 0x2] = a2\n 46449: a1 = a1 >> 0x8\n 46452: u8 [a0 + 0x1] = a1\n 46455: a2 = u64 [sp + 0x80]\n 46459: a2 = a2 + 0x1\n 46462: a0 = a2 <u 0x1\n 46465: a1 = u64 [sp + 0x88]\n 46469: a1 = a1 + a0\n 46472: u64 [sp + 0x88] = a1\n 46476: u64 [sp + 0x80] = a2\n 46480: a0 = a2 | a1\n 46483: a4 = a0 <u 0x1\n 46486: a0 = u64 [sp + 0x48]\n 46489: t0 = a0 + a4\n 46492: a0 = t0 <u a0\n 46495: a1 = u64 [sp + 0x90]\n 46499: a1 = a1 + a0\n 46502: u64 [sp + 0x90] = a1\n 46506: a0 = u64 [sp + 0x98]\n 46510: t1 = a0 + 0x20\n 46513: a2 = t1 <u a0\n 46516: s1 = a0\n 46518: a4 = u64 [sp + 0x78]\n 46521: t2 = a4 + a2\n 46524: a3 = t2 <u a4\n 46527: a3 = a2 if a2 == 0\n 46530: a0 = u64 [sp + 0x38]\n 46533: s1 = s1 ^ a0\n 46536: a2 = u64 [sp + 0x68]\n 46539: a5 = u64 [sp + 0x28]\n 46542: a5 = a5 ^ a2\n 46545: a5 = a5 | s1\n 46548: a0 = u64 [sp + 0x30]\n 46551: a0 = a0 ^ a4\n 46554: a1 = u64 [sp + 0x70]\n 46557: s1 = u64 [sp + 0x20]\n 46560: s1 = s1 ^ a1\n 46563: s1 = s1 | a0\n 46566: ra = a2 + a3\n 46569: a5 = a5 | s1\n 46572: a3 = ra <u a2\n 46575: a3 = a3 + a1\n 46578: jump @598 if a5 != 0\n      : @602 (gas: 1)\n 46582: jump @604\n      : @603 (gas: 2)\n 46584: t1 = u64 [sp + 0x50]\n 46587: fallthrough\n      : @604 (gas: 11)\n 46588: a4 = u64 [sp + 0x18]\n 46591: u64 [a4] = t1\n 46593: u64 [a4 + 0x8] = t2\n 46596: u64 [a4 + 0x10] = ra\n 46599: u64 [a4 + 0x18] = a3\n 46602: sp = s0 + 0xffffffffffffff00\n 46606: ra = u64 [sp + 0xf8]\n 46610: s0 = u64 [sp + 0xf0]\n 46614: s1 = u64 [sp + 0xe8]\n 46618: sp = sp + 0x100\n 46622: ret\n      : @605 (gas: 1)\n 46624: trap\n      : @606 (gas: 18)\n 46625: sp = sp + 0xffffffffffffff00\n 46629: u64 [sp + 0xf8] = ra\n 46633: u64 [sp + 0xf0] = s0\n 46637: u64 [sp + 0xe8] = s1\n 46641: s0 = sp + 0x100\n 46645: sp = sp & 0xfffffffffffffff0\n 46648: a2 = u64 [a1]\n 46650: u64 [sp + 0x20] = a2\n 46653: a2 = u64 [a1 + 0x8]\n 46656: u64 [sp + 0x10] = a2\n 46659: a2 = u64 [a1 + 0x10]\n 46662: u64 [sp + 0x8] = a2\n 46665: a1 = u64 [a1 + 0x18]\n 46668: u64 [sp] = a1\n 46670: u64 [sp + 0x18] = a0\n 46673: a0 = 0x40\n 46676: a1 = 0x20\n 46679: ra = 538, jump @0\n      : @607 [@dyn 269] (gas: 149)\n 46686: a1 = u8 [a0 + 0x1]\n 46689: a2 = u8 [a0]\n 46691: a3 = u8 [a0 + 0x2]\n 46694: a4 = u8 [a0 + 0x3]\n 46697: a1 = a1 << 0x8\n 46700: a1 = a1 | a2\n 46703: a3 = a3 << 0x10\n 46706: a4 = a4 << 0x18\n 46709: a3 = a3 | a4\n 46712: a1 = a1 | a3\n 46715: a2 = u8 [a0 + 0x5]\n 46718: a3 = u8 [a0 + 0x4]\n 46721: a4 = u8 [a0 + 0x6]\n 46724: a5 = u8 [a0 + 0x7]\n 46727: a2 = a2 << 0x8\n 46730: a2 = a2 | a3\n 46733: a4 = a4 << 0x10\n 46736: a5 = a5 << 0x18\n 46739: a4 = a4 | a5\n 46742: a2 = a2 | a4\n 46745: a2 = a2 << 0x20\n 46748: t0 = a2 | a1\n 46751: a2 = u8 [a0 + 0x9]\n 46754: a3 = u8 [a0 + 0x8]\n 46757: a4 = u8 [a0 + 0xa]\n 46760: a5 = u8 [a0 + 0xb]\n 46763: a2 = a2 << 0x8\n 46766: a2 = a2 | a3\n 46769: a4 = a4 << 0x10\n 46772: a5 = a5 << 0x18\n 46775: a4 = a4 | a5\n 46778: a2 = a2 | a4\n 46781: a3 = u8 [a0 + 0xd]\n 46784: a4 = u8 [a0 + 0xc]\n 46787: a5 = u8 [a0 + 0xe]\n 46790: s1 = u8 [a0 + 0xf]\n 46793: a3 = a3 << 0x8\n 46796: a3 = a3 | a4\n 46799: a5 = a5 << 0x10\n 46802: s1 = s1 << 0x18\n 46805: a5 = a5 | s1\n 46808: a3 = a3 | a5\n 46811: a3 = a3 << 0x20\n 46814: a2 = a2 | a3\n 46817: a3 = u8 [a0 + 0x11]\n 46820: a4 = u8 [a0 + 0x10]\n 46823: a5 = u8 [a0 + 0x12]\n 46826: s1 = u8 [a0 + 0x13]\n 46829: a3 = a3 << 0x8\n 46832: a3 = a3 | a4\n 46835: a5 = a5 << 0x10\n 46838: s1 = s1 << 0x18\n 46841: a5 = a5 | s1\n 46844: a3 = a3 | a5\n 46847: a4 = u8 [a0 + 0x15]\n 46850: a5 = u8 [a0 + 0x14]\n 46853: s1 = u8 [a0 + 0x16]\n 46856: a1 = u8 [a0 + 0x17]\n 46859: a4 = a4 << 0x8\n 46862: a4 = a4 | a5\n 46865: s1 = s1 << 0x10\n 46868: a1 = a1 << 0x18\n 46871: a1 = a1 | s1\n 46874: a1 = a1 | a4\n 46877: a1 = a1 << 0x20\n 46880: a3 = a3 | a1\n 46883: a1 = u8 [a0 + 0x19]\n 46886: a4 = u8 [a0 + 0x18]\n 46889: a5 = u8 [a0 + 0x1a]\n 46892: s1 = u8 [a0 + 0x1b]\n 46895: a1 = a1 << 0x8\n 46898: a1 = a1 | a4\n 46901: a5 = a5 << 0x10\n 46904: s1 = s1 << 0x18\n 46907: a5 = a5 | s1\n 46910: a1 = a1 | a5\n 46913: a4 = u8 [a0 + 0x1d]\n 46916: a5 = u8 [a0 + 0x1c]\n 46919: s1 = u8 [a0 + 0x1e]\n 46922: a0 = u8 [a0 + 0x1f]\n 46925: a4 = a4 << 0x8\n 46928: a4 = a4 | a5\n 46931: s1 = s1 << 0x10\n 46934: a0 = a0 << 0x18\n 46937: a0 = a0 | s1\n 46940: a0 = a0 | a4\n 46943: a0 = a0 << 0x20\n 46946: a0 = a0 | a1\n 46949: a4 = reverse a0\n 46951: u64 [sp + 0x38] = a4\n 46954: s1 = reverse a3\n 46956: a2 = reverse a2\n 46958: u64 [sp + 0x30] = a2\n 46961: a1 = reverse t0\n 46963: u64 [sp + 0x28] = a1\n 46966: a0 = u64 [sp]\n 46968: u64 [sp + 0xb8] = a0\n 46972: a0 = u64 [sp + 0x8]\n 46975: u64 [sp + 0xb0] = a0\n 46979: a0 = u64 [sp + 0x10]\n 46982: u64 [sp + 0xa8] = a0\n 46986: a0 = u64 [sp + 0x20]\n 46989: u64 [sp + 0xa0] = a0\n 46993: u64 [sp + 0x98] = a1\n 46997: u64 [sp + 0x90] = a2\n 47001: u64 [sp + 0x88] = s1\n 47005: a0 = sp + 0xc0\n 47009: a1 = sp + 0xa0\n 47013: a2 = sp + 0x80\n 47017: u64 [sp + 0x80] = a4\n 47021: ra = 0x21c\n 47025: sp = sp + 0xffffffffffffff00\n 47029: u64 [sp + 0xf8] = ra\n 47033: u64 [sp + 0xf0] = s0\n 47037: u64 [sp + 0xe8] = s1\n 47041: s0 = sp + 0x100\n 47045: sp = sp & 0xffffffffffffffe0\n 47048: u64 [sp + 0x18] = a0\n 47051: s1 = u64 [a2 + 0x10]\n 47054: a0 = u64 [a2]\n 47056: u64 [sp + 0x98] = a0\n 47060: a0 = u64 [a2 + 0x18]\n 47063: u64 [sp + 0x70] = a0\n 47066: a0 = u64 [a2 + 0x8]\n 47069: u64 [sp + 0x78] = a0\n 47072: a4 = u64 [a1 + 0x18]\n 47075: a3 = u64 [a1 + 0x10]\n 47078: a2 = u64 [a1 + 0x8]\n 47081: a0 = u64 [a1]\n 47083: u64 [sp + 0x40] = a4\n 47086: u64 [sp + 0xb8] = a4\n 47090: u64 [sp + 0x48] = a3\n 47093: u64 [sp + 0xb0] = a3\n 47097: u64 [sp + 0x50] = a2\n 47100: u64 [sp + 0xa8] = a2\n 47104: u64 [sp + 0x58] = a0\n 47107: u64 [sp + 0xa0] = a0\n 47111: u64 [sp + 216] = 0\n 47115: u64 [sp + 208] = 0\n 47119: u64 [sp + 200] = 0\n 47123: u64 [sp + 192] = 0\n 47127: u32 [sp + 224] = 0x20\n 47132: i32 a1 = sp + 0xa0\n 47136: i32 a3 = sp + 0xc0\n 47140: i32 a4 = sp + 0xe0\n 47144: a2 = 0xffffffffffffffff\n 47147: a0 = 0\n 47149: ecalli 8 // 'get_storage'\n 47151: jump @591\n      : @608 [@dyn 270] (gas: 58)\n 47154: t2 = s1\n 47156: a3 = u64 [sp + 0xc8]\n 47160: a0 = u64 [sp + 0xd8]\n 47164: u64 [sp + 0x10] = a0\n 47167: a4 = u64 [sp + 0xc0]\n 47171: t1 = u64 [sp + 0xd0]\n 47175: a5 = a3 ^ s1\n 47178: a1 = a3 <u s1\n 47181: a2 = u64 [sp + 0x38]\n 47184: s1 = a4 <u a2\n 47187: a1 = s1 if a5 == 0\n 47190: a3 = a3 - t2\n 47193: a3 = a3 - s1\n 47196: u64 [sp + 0x8] = a3\n 47199: a4 = a4 - a2\n 47202: a5 = a4 + 0x1f\n 47205: a4 = a5 <u a4\n 47208: a3 = a3 + a4\n 47211: a5 = a5 & 0xffffffffffffffe0\n 47214: a0 = a3 + t2\n 47217: a2 = a2 + a5\n 47220: u64 [sp + 0x20] = a2\n 47223: a5 = a2 <u a5\n 47226: t0 = a0 + a5\n 47229: a0 = t0 ^ a3\n 47232: a2 = t0 <u a3\n 47235: a2 = a5 if a0 == 0\n 47238: s1 = u64 [sp + 0x30]\n 47241: a0 = t1 - s1\n 47244: a5 = t1 <u s1\n 47247: t1 = s1\n 47249: ra = u64 [sp + 0x28]\n 47252: s1 = u64 [sp + 0x10]\n 47255: s1 = s1 - ra\n 47258: s1 = s1 - a5\n 47261: a5 = a0 <u a1\n 47264: s1 = s1 - a5\n 47267: a0 = a0 - a1\n 47270: a1 = u64 [sp + 0x8]\n 47273: a1 = a3 <u a1\n 47276: a1 = a4 if a4 == 0\n 47279: a1 = a1 + a0\n 47282: a0 = a1 <u a0\n 47285: a3 = a1 + t1\n 47288: a5 = a3 + a2\n 47291: a1 = a3 <u a1\n 47294: a2 = a5 <u a3\n 47297: s1 = s1 + ra\n 47300: a0 = a0 + s1\n 47303: a0 = a0 + a1\n 47306: s1 = a0 + a2\n 47309: a0 = s1 >u 0\n 47311: a1 = a5 >u 0\n 47313: a1 = a0 if s1 != 0\n 47316: a0 = a5 | s1\n 47319: a2 = t0 >u 0\n 47321: a2 = a1 if a0 != 0\n 47324: jump @612 if a2 != 0\n      : @609 (gas: 15)\n 47328: a4 = t1\n 47330: a0 = u64 [sp + 0x38]\n 47333: a1 = u64 [sp + 0x20]\n 47336: a0 = a1 <u a0\n 47339: a1 = t0 ^ t2\n 47342: a2 = t0 <u t2\n 47345: a2 = a0 if a1 == 0\n 47348: a0 = a5 <u t1\n 47351: a1 = s1 ^ ra\n 47354: a3 = s1 <u ra\n 47357: a3 = a0 if a1 == 0\n 47360: a0 = a5 ^ t1\n 47363: a0 = a0 | a1\n 47366: a3 = a2 if a0 == 0\n 47369: jump @612 if a3 != 0\n      : @610 (gas: 6)\n 47373: a0 = 0x40\n 47376: a1 = 0x20\n 47379: u64 [sp + 0x10] = t2\n 47382: u64 [sp + 0x8] = t0\n 47385: u64 [sp] = a5\n 47387: ra = 542, jump @0\n      : @611 [@dyn 271] (gas: 82)\n 47394: a1 = reverse s1\n 47396: a2 = u64 [sp]\n 47398: a2 = reverse a2\n 47400: a3 = u64 [sp + 0x8]\n 47403: a3 = reverse a3\n 47405: a4 = u64 [sp + 0x20]\n 47408: a4 = reverse a4\n 47410: u8 [a0 + 0x18] = a4\n 47413: a5 = a4 >> 0x38\n 47416: u8 [a0 + 0x1f] = a5\n 47419: a5 = a4 >> 0x30\n 47422: u8 [a0 + 0x1e] = a5\n 47425: a5 = a4 >> 0x28\n 47428: u8 [a0 + 0x1d] = a5\n 47431: a5 = a4 >> 0x20\n 47434: u8 [a0 + 0x1c] = a5\n 47437: a5 = a4 >> 0x18\n 47440: u8 [a0 + 0x1b] = a5\n 47443: a5 = a4 >> 0x10\n 47446: u8 [a0 + 0x1a] = a5\n 47449: a4 = a4 >> 0x8\n 47452: u8 [a0 + 0x19] = a4\n 47455: u8 [a0 + 0x10] = a3\n 47458: a4 = a3 >> 0x38\n 47461: u8 [a0 + 0x17] = a4\n 47464: a4 = a3 >> 0x30\n 47467: u8 [a0 + 0x16] = a4\n 47470: a4 = a3 >> 0x28\n 47473: u8 [a0 + 0x15] = a4\n 47476: a4 = a3 >> 0x20\n 47479: u8 [a0 + 0x14] = a4\n 47482: a4 = a3 >> 0x18\n 47485: u8 [a0 + 0x13] = a4\n 47488: a4 = a3 >> 0x10\n 47491: u8 [a0 + 0x12] = a4\n 47494: a3 = a3 >> 0x8\n 47497: u8 [a0 + 0x11] = a3\n 47500: u8 [a0 + 0x8] = a2\n 47503: a3 = a2 >> 0x38\n 47506: u8 [a0 + 0xf] = a3\n 47509: a3 = a2 >> 0x30\n 47512: u8 [a0 + 0xe] = a3\n 47515: a3 = a2 >> 0x28\n 47518: u8 [a0 + 0xd] = a3\n 47521: a3 = a2 >> 0x20\n 47524: u8 [a0 + 0xc] = a3\n 47527: a3 = a2 >> 0x18\n 47530: u8 [a0 + 0xb] = a3\n 47533: a3 = a2 >> 0x10\n 47536: u8 [a0 + 0xa] = a3\n 47539: a2 = a2 >> 0x8\n 47542: u8 [a0 + 0x9] = a2\n 47545: u8 [a0] = a1\n 47547: a2 = a1 >> 0x38\n 47550: u8 [a0 + 0x7] = a2\n 47553: a2 = a1 >> 0x30\n 47556: u8 [a0 + 0x6] = a2\n 47559: a2 = a1 >> 0x28\n 47562: u8 [a0 + 0x5] = a2\n 47565: a2 = a1 >> 0x20\n 47568: u8 [a0 + 0x4] = a2\n 47571: a2 = a1 >> 0x18\n 47574: u8 [a0 + 0x3] = a2\n 47577: a2 = a1 >> 0x10\n 47580: u8 [a0 + 0x2] = a2\n 47583: a1 = a1 >> 0x8\n 47586: u8 [a0 + 0x1] = a1\n 47589: a0 = u64 [sp + 0x18]\n 47592: a1 = u64 [sp + 0x38]\n 47595: u64 [a0] = a1\n 47597: a1 = u64 [sp + 0x28]\n 47600: u64 [a0 + 0x18] = a1\n 47603: a1 = u64 [sp + 0x10]\n 47606: u64 [a0 + 0x8] = a1\n 47609: a1 = u64 [sp + 0x30]\n 47612: u64 [a0 + 0x10] = a1\n 47615: sp = s0 + 0xffffffffffffff00\n 47619: ra = u64 [sp + 0xf8]\n 47623: s0 = u64 [sp + 0xf0]\n 47627: s1 = u64 [sp + 0xe8]\n 47631: sp = sp + 0x100\n 47635: ret\n      : @612 (gas: 8)\n 47637: u64 [sp + 112] = 0\n 47640: u64 [sp + 104] = 0\n 47643: u64 [sp + 96] = 0\n 47646: a0 = 0x4e487b7100000000\n 47656: a1 = sp + 0x60\n 47659: u64 [sp + 0x78] = a0\n 47662: a0 = 0\n 47664: ra = 544, jump @8\n      : @613 [@dyn 272] (gas: 7)\n 47671: u64 [sp + 88] = 0\n 47674: u64 [sp + 80] = 0\n 47677: u64 [sp + 64] = 0x41\n 47681: a0 = 0x4\n 47684: a1 = sp + 0x40\n 47687: u64 [sp + 72] = 0\n 47690: ra = 546, jump @8\n      : @614 [@dyn 273] (gas: 3)\n 47697: a1 = 0x24\n 47700: a0 = 0\n 47702: ra = 548, jump @0\n      : @615 [@dyn 274] (gas: 6)\n 47709: i32 a1 = a0 + 0\n 47711: a0 = 0x1\n 47714: a2 = 0x24\n 47717: ra = 0x226\n 47721: ecalli 14 // 'seal_return'\n 47723: fallthrough\n      : @616 [@dyn 275] (gas: 18)\n 47724: sp = sp + 0xffffffffffffffa0\n 47727: u64 [sp + 0x58] = ra\n 47730: u64 [sp + 0x50] = s0\n 47733: u64 [sp + 0x48] = s1\n 47736: s0 = sp + 0x60\n 47739: sp = sp & 0xfffffffffffffff0\n 47742: a2 = u64 [a1]\n 47744: a3 = u64 [a1 + 0x8]\n 47747: a4 = u64 [a1 + 0x10]\n 47750: a1 = u64 [a1 + 0x18]\n 47753: s1 = a0\n 47755: u64 [sp + 0x18] = a1\n 47758: u64 [sp + 0x10] = a4\n 47761: u64 [sp + 0x8] = a3\n 47764: a0 = sp + 0x20\n 47767: a1 = sp\n 47769: u64 [sp] = a2\n 47771: ra = 552, jump @606\n      : @617 [@dyn 276] (gas: 14)\n 47777: a0 = u64 [sp + 0x30]\n 47780: a1 = u64 [sp + 0x38]\n 47783: a2 = u64 [sp + 0x20]\n 47786: a3 = u64 [sp + 0x28]\n 47789: u64 [s1 + 0x10] = a0\n 47792: u64 [s1 + 0x18] = a1\n 47795: u64 [s1] = a2\n 47797: u64 [s1 + 0x8] = a3\n 47800: sp = s0 + 0xffffffffffffffa0\n 47803: ra = u64 [sp + 0x58]\n 47806: s0 = u64 [sp + 0x50]\n 47809: s1 = u64 [sp + 0x48]\n 47812: sp = sp + 0x60\n 47815: ret\n      : @618 (gas: 14)\n 47817: sp = sp + 0xffffffffffffff10\n 47821: u64 [sp + 0xe8] = ra\n 47825: u64 [sp + 0xe0] = s0\n 47829: u64 [sp + 0xd8] = s1\n 47833: s0 = sp + 0xf0\n 47837: sp = sp & 0xfffffffffffffff0\n 47840: a2 = u64 [a1 + 0x18]\n 47843: a4 = u64 [a1 + 0x10]\n 47846: a5 = u64 [a1 + 0x8]\n 47849: s1 = a4 | a2\n 47852: a3 = a5 <u 0x1\n 47855: a3 = 0 if s1 != 0\n 47857: u64 [sp + 0x48] = a0\n 47860: jump @624 if a3 == 0\n      : @619 (gas: 30)\n 47864: s1 = u64 [a1]\n 47866: a0 = a4 >> 0x3b\n 47869: u64 [sp + 0x20] = a2\n 47872: a1 = a2 << 0x5\n 47875: a0 = a0 | a1\n 47878: a1 = a5 >> 0x3b\n 47881: u64 [sp + 0x28] = a4\n 47884: a2 = a4 << 0x5\n 47887: a1 = a1 | a2\n 47890: a2 = s1 >> 0x3b\n 47893: u64 [sp + 0x10] = a5\n 47896: a3 = a5 << 0x5\n 47899: a2 = a2 | a3\n 47902: u64 [sp + 0x18] = s1\n 47905: a3 = s1 << 0x5\n 47908: a4 = a3 + 0x20\n 47911: a3 = a4 <u a3\n 47914: a5 = a2 + a3\n 47917: a2 = a5 <u a2\n 47920: a2 = a3 if a3 == 0\n 47923: a2 = a2 + a1\n 47926: a1 = a2 <u a1\n 47929: a3 = a0 + a1\n 47932: u64 [sp + 0x90] = a4\n 47936: u64 [sp + 0x98] = a5\n 47940: u64 [sp + 0xa0] = a2\n 47944: a0 = sp + 0xb0\n 47948: a1 = sp + 0x90\n 47952: u64 [sp + 0xa8] = a3\n 47956: ra = 554, jump @410\n      : @620 [@dyn 277] (gas: 15)\n 47962: a0 = u64 [sp + 0xc8]\n 47966: a2 = u64 [sp + 0xc0]\n 47970: a1 = u64 [sp + 0xb8]\n 47974: a3 = u64 [sp + 0xb0]\n 47978: u64 [sp + 0x38] = a0\n 47981: u64 [sp + 0x30] = a1\n 47984: a0 = a0 | a1\n 47987: a1 = a3 | a2\n 47990: a1 = a1 | a0\n 47993: a1 = a1 >> 0x20\n 47996: u64 [sp + 0x40] = a2\n 47999: a0 = a0 | a2\n 48002: a0 = a0 << 0x20\n 48005: a0 = a0 | a1\n 48008: jump @623 if a0 != 0\n      : @621 (gas: 4)\n 48012: i32 a0 = a3 + 0\n 48014: a1 = 0x20\n 48017: u64 [sp + 0x8] = a3\n 48020: ra = 556, jump @0\n      : @622 [@dyn 278] (gas: 83)\n 48027: a1 = u64 [sp + 0x20]\n 48030: a1 = reverse a1\n 48032: a2 = u64 [sp + 0x28]\n 48035: a2 = reverse a2\n 48037: a3 = u64 [sp + 0x10]\n 48040: a3 = reverse a3\n 48042: a4 = u64 [sp + 0x18]\n 48045: a4 = reverse a4\n 48047: a5 = a4 >> 0x38\n 48050: u8 [a0 + 0x1f] = a5\n 48053: a5 = a4 >> 0x30\n 48056: u8 [a0 + 0x1e] = a5\n 48059: a5 = a4 >> 0x28\n 48062: u8 [a0 + 0x1d] = a5\n 48065: a5 = a4 >> 0x20\n 48068: u8 [a0 + 0x1c] = a5\n 48071: a5 = a4 >> 0x18\n 48074: u8 [a0 + 0x1b] = a5\n 48077: a5 = a4 >> 0x10\n 48080: u8 [a0 + 0x1a] = a5\n 48083: a5 = a4 >> 0x8\n 48086: u8 [a0 + 0x19] = a5\n 48089: u8 [a0 + 0x18] = a4\n 48092: u8 [a0 + 0x10] = a3\n 48095: a4 = a3 >> 0x38\n 48098: u8 [a0 + 0x17] = a4\n 48101: a4 = a3 >> 0x30\n 48104: u8 [a0 + 0x16] = a4\n 48107: a4 = a3 >> 0x28\n 48110: u8 [a0 + 0x15] = a4\n 48113: a4 = a3 >> 0x20\n 48116: u8 [a0 + 0x14] = a4\n 48119: a4 = a3 >> 0x18\n 48122: u8 [a0 + 0x13] = a4\n 48125: a4 = a3 >> 0x10\n 48128: u8 [a0 + 0x12] = a4\n 48131: a3 = a3 >> 0x8\n 48134: u8 [a0 + 0x11] = a3\n 48137: u8 [a0 + 0x8] = a2\n 48140: a3 = a2 >> 0x38\n 48143: u8 [a0 + 0xf] = a3\n 48146: a3 = a2 >> 0x30\n 48149: u8 [a0 + 0xe] = a3\n 48152: a3 = a2 >> 0x28\n 48155: u8 [a0 + 0xd] = a3\n 48158: a3 = a2 >> 0x20\n 48161: u8 [a0 + 0xc] = a3\n 48164: a3 = a2 >> 0x18\n 48167: u8 [a0 + 0xb] = a3\n 48170: a3 = a2 >> 0x10\n 48173: u8 [a0 + 0xa] = a3\n 48176: a2 = a2 >> 0x8\n 48179: u8 [a0 + 0x9] = a2\n 48182: u8 [a0] = a1\n 48184: a2 = a1 >> 0x38\n 48187: u8 [a0 + 0x7] = a2\n 48190: a2 = a1 >> 0x30\n 48193: u8 [a0 + 0x6] = a2\n 48196: a2 = a1 >> 0x28\n 48199: u8 [a0 + 0x5] = a2\n 48202: a2 = a1 >> 0x20\n 48205: u8 [a0 + 0x4] = a2\n 48208: a2 = a1 >> 0x18\n 48211: u8 [a0 + 0x3] = a2\n 48214: a2 = a1 >> 0x10\n 48217: u8 [a0 + 0x2] = a2\n 48220: a1 = a1 >> 0x8\n 48223: u8 [a0 + 0x1] = a1\n 48226: a0 = u64 [sp + 0x48]\n 48229: a1 = u64 [sp + 0x8]\n 48232: u64 [a0] = a1\n 48234: a1 = u64 [sp + 0x38]\n 48237: u64 [a0 + 0x18] = a1\n 48240: a1 = u64 [sp + 0x30]\n 48243: u64 [a0 + 0x8] = a1\n 48246: a1 = u64 [sp + 0x40]\n 48249: u64 [a0 + 0x10] = a1\n 48252: sp = s0 + 0xffffffffffffff10\n 48256: ra = u64 [sp + 0xe8]\n 48260: s0 = u64 [sp + 0xe0]\n 48264: s1 = u64 [sp + 0xd8]\n 48268: sp = sp + 0xf0\n 48272: ret\n      : @623 (gas: 1)\n 48274: trap\n      : @624 (gas: 8)\n 48275: u64 [sp + 128] = 0\n 48279: u64 [sp + 120] = 0\n 48282: u64 [sp + 112] = 0\n 48285: a0 = 0x4e487b7100000000\n 48295: a1 = sp + 0x70\n 48298: u64 [sp + 0x88] = a0\n 48302: a0 = 0\n 48304: ra = 558, jump @8\n      : @625 [@dyn 279] (gas: 7)\n 48311: u64 [sp + 104] = 0\n 48314: u64 [sp + 96] = 0\n 48317: u64 [sp + 80] = 0x41\n 48321: a0 = 0x4\n 48324: a1 = sp + 0x50\n 48327: u64 [sp + 88] = 0\n 48330: ra = 560, jump @8\n      : @626 [@dyn 280] (gas: 3)\n 48337: a1 = 0x24\n 48340: a0 = 0\n 48342: ra = 562, jump @0\n      : @627 [@dyn 281] (gas: 6)\n 48349: i32 a1 = a0 + 0\n 48351: a0 = 0x1\n 48354: a2 = 0x24\n 48357: ra = 0x234\n 48361: ecalli 14 // 'seal_return'\n 48363: fallthrough\n      : @628 [@dyn 282] (gas: 16)\n 48364: sp = sp + 0xffffffffffffffe8\n 48367: u64 [sp + 0x10] = ra\n 48370: u64 [sp + 0x8] = s0\n 48373: u64 [sp] = s1\n 48375: a2 = u64 [a1 + 0x10]\n 48378: a3 = u64 [a1 + 0x18]\n 48381: a4 = u64 [a1 + 0x8]\n 48384: s1 = u64 [a1]\n 48386: a3 = a3 | a4\n 48389: a1 = s1 | a2\n 48392: a1 = a1 | a3\n 48395: a1 = a1 >> 0x20\n 48398: a2 = a2 | a3\n 48401: a2 = a2 << 0x20\n 48404: a1 = a1 | a2\n 48407: jump @632 if a1 != 0\n      : @629 (gas: 12)\n 48410: a2 = u64 [a0 + 0x18]\n 48413: a3 = u64 [a0 + 0x10]\n 48416: a1 = u64 [a0]\n 48418: a0 = u64 [a0 + 0x8]\n 48421: a4 = a1 | a3\n 48424: a0 = a0 | a2\n 48427: a4 = a4 | a0\n 48430: a4 = a4 >> 0x20\n 48433: a0 = a0 | a3\n 48436: a0 = a0 << 0x20\n 48439: a0 = a0 | a4\n 48442: jump @632 if a0 != 0\n      : @630 (gas: 5)\n 48445: s0 = i32 [0x20084]\n 48450: i32 a0 = a1 + 0\n 48452: i32 s1 = s1 + 0\n 48454: a1 = s1\n 48456: ra = 566, jump @0\n      : @631 [@dyn 283] (gas: 9)\n 48463: i32 a0 = a0 + 0\n 48465: a1 = s1\n 48467: a2 = s0\n 48469: ra = u64 [sp + 0x10]\n 48472: s0 = u64 [sp + 0x8]\n 48475: s1 = u64 [sp]\n 48477: sp = sp + 0x18\n 48480: ecalli 2 // 'call_data_copy'\n 48482: ret\n      : @632 (gas: 1)\n 48484: trap\n      : @633 [@dyn 284] (gas: 6)\n 48485: a3 = u64 [sp + 0x30]\n 48488: a2 = u64 [sp + 0x28]\n 48491: a0 = s1 | a3\n 48494: a1 = a2 <u 0x1\n 48497: a1 = 0 if a0 != 0\n 48499: jump @639 if a1 == 0\n      : @634 (gas: 9)\n 48503: a5 = u64 [sp + 0x38]\n 48506: a0 = a5 | s1\n 48509: a1 = a2 | a3\n 48512: a0 = a0 | a1\n 48515: a0 = a0 >> 0x1b\n 48518: a1 = a1 | s1\n 48521: a1 = a1 << 0x25\n 48524: a0 = a0 | a1\n 48527: jump @638 if a0 != 0\n      : @635 (gas: 24)\n 48531: a1 = u64 [sp + 0xa0]\n 48535: a4 = u64 [sp + 0xb8]\n 48539: a3 = u64 [sp + 0xa8]\n 48543: s1 = u64 [sp + 0xb0]\n 48547: a0 = a1 + 0x20\n 48550: u64 [sp + 0x30] = a1\n 48553: a1 = a0 <u a1\n 48556: a2 = a3 + a1\n 48559: u64 [sp + 0x28] = a3\n 48562: a3 = a2 <u a3\n 48565: a3 = a1 if a1 == 0\n 48568: a3 = a3 + s1\n 48571: u64 [sp + 0x10] = s1\n 48574: a1 = a3 <u s1\n 48577: u64 [sp + 0x18] = a4\n 48580: a1 = a1 + a4\n 48583: a4 = a0 | a3\n 48586: a1 = a1 | a2\n 48589: a4 = a4 | a1\n 48592: a4 = a4 >> 0x20\n 48595: a1 = a1 | a3\n 48598: a1 = a1 << 0x20\n 48601: a1 = a1 | a4\n 48604: jump @638 if a1 != 0\n      : @636 (gas: 6)\n 48607: a1 = i32 [0x20084]\n 48612: u64 [sp + 0x8] = a1\n 48615: i32 s1 = a5 << 0x5\n 48618: i32 a0 = a0 + 0\n 48620: a1 = s1\n 48622: ra = 570, jump @0\n      : @637 [@dyn 285] (gas: 19)\n 48629: i32 a0 = a0 + 0\n 48631: a1 = s1\n 48633: a2 = u64 [sp + 0x8]\n 48636: ecalli 2 // 'call_data_copy'\n 48638: a0 = u64 [sp + 0x20]\n 48641: a1 = u64 [sp + 0x18]\n 48644: u64 [a0 + 0x18] = a1\n 48647: a1 = u64 [sp + 0x10]\n 48650: u64 [a0 + 0x10] = a1\n 48653: a1 = u64 [sp + 0x28]\n 48656: u64 [a0 + 0x8] = a1\n 48659: a1 = u64 [sp + 0x30]\n 48662: u64 [a0] = a1\n 48664: sp = s0 + 0xffffffffffffff20\n 48668: ra = u64 [sp + 0xd8]\n 48672: s0 = u64 [sp + 0xd0]\n 48676: s1 = u64 [sp + 0xc8]\n 48680: sp = sp + 0xe0\n 48684: ret\n      : @638 (gas: 1)\n 48686: trap\n      : @639 (gas: 8)\n 48687: u64 [sp + 112] = 0\n 48690: u64 [sp + 104] = 0\n 48693: u64 [sp + 96] = 0\n 48696: a0 = 0x4e487b7100000000\n 48706: a1 = sp + 0x60\n 48709: u64 [sp + 0x78] = a0\n 48712: a0 = 0\n 48714: ra = 572, jump @8\n      : @640 [@dyn 286] (gas: 7)\n 48721: u64 [sp + 88] = 0\n 48724: u64 [sp + 80] = 0\n 48727: u64 [sp + 64] = 0x41\n 48731: a0 = 0x4\n 48734: a1 = sp + 0x40\n 48737: u64 [sp + 72] = 0\n 48740: ra = 574, jump @8\n      : @641 [@dyn 287] (gas: 3)\n 48747: a1 = 0x24\n 48750: a0 = 0\n 48752: ra = 576, jump @0\n      : @642 [@dyn 288] (gas: 6)\n 48759: i32 a1 = a0 + 0\n 48761: a0 = 0x1\n 48764: a2 = 0x24\n 48767: ra = 0x242\n 48771: ecalli 14 // 'seal_return'\n 48773: fallthrough\n      : @643 [@dyn 289] (gas: 22)\n 48774: sp = sp + 0xffffffffffffff50\n 48778: u64 [sp + 0xa8] = ra\n 48782: u64 [sp + 0xa0] = s0\n 48786: u64 [sp + 0x98] = s1\n 48790: s0 = sp + 0xb0\n 48794: sp = sp & 0xfffffffffffffff0\n 48797: a4 = u64 [a1 + 0x10]\n 48800: a3 = u64 [a1 + 0x18]\n 48803: a5 = u64 [a1 + 0x8]\n 48806: s1 = u64 [a1]\n 48808: u64 [sp + 0x38] = a3\n 48811: u64 [sp + 0x30] = a5\n 48814: a1 = a5 | a3\n 48817: a3 = s1 | a4\n 48820: a3 = a3 | a1\n 48823: a3 = a3 >> 0x20\n 48826: u64 [sp + 0x40] = a4\n 48829: a1 = a1 | a4\n 48832: a1 = a1 << 0x20\n 48835: a1 = a1 | a3\n 48838: u64 [sp + 0x48] = a0\n 48841: jump @647 if a1 != 0\n      : @644 (gas: 12)\n 48845: a0 = u64 [a2 + 0x18]\n 48848: u64 [sp + 0x20] = a0\n 48851: a0 = u64 [a2 + 0x10]\n 48854: u64 [sp + 0x10] = a0\n 48857: a0 = u64 [a2 + 0x8]\n 48860: u64 [sp + 0x8] = a0\n 48863: a0 = u64 [a2]\n 48865: u64 [sp + 0x18] = a0\n 48868: u64 [sp + 0x28] = s1\n 48871: i32 a0 = s1 + 0\n 48873: a1 = 0x20\n 48876: ra = 580, jump @0\n      : @645 [@dyn 290] (gas: 108)\n 48883: t2 = u64 [sp + 0x8]\n 48886: a1 = u8 [a0 + 0x1]\n 48889: a2 = u8 [a0]\n 48891: a3 = u8 [a0 + 0x2]\n 48894: a4 = u8 [a0 + 0x3]\n 48897: a1 = a1 << 0x8\n 48900: a1 = a1 | a2\n 48903: a3 = a3 << 0x10\n 48906: a4 = a4 << 0x18\n 48909: a3 = a3 | a4\n 48912: a1 = a1 | a3\n 48915: a2 = u8 [a0 + 0x5]\n 48918: a3 = u8 [a0 + 0x4]\n 48921: a4 = u8 [a0 + 0x6]\n 48924: a5 = u8 [a0 + 0x7]\n 48927: a2 = a2 << 0x8\n 48930: a2 = a2 | a3\n 48933: a4 = a4 << 0x10\n 48936: a5 = a5 << 0x18\n 48939: a4 = a4 | a5\n 48942: a2 = a2 | a4\n 48945: a2 = a2 << 0x20\n 48948: t0 = a2 | a1\n 48951: a2 = u8 [a0 + 0x9]\n 48954: a3 = u8 [a0 + 0x8]\n 48957: a4 = u8 [a0 + 0xa]\n 48960: a5 = u8 [a0 + 0xb]\n 48963: a2 = a2 << 0x8\n 48966: a2 = a2 | a3\n 48969: a4 = a4 << 0x10\n 48972: a5 = a5 << 0x18\n 48975: a4 = a4 | a5\n 48978: a2 = a2 | a4\n 48981: a3 = u8 [a0 + 0xd]\n 48984: a4 = u8 [a0 + 0xc]\n 48987: a5 = u8 [a0 + 0xe]\n 48990: a1 = u8 [a0 + 0xf]\n 48993: a3 = a3 << 0x8\n 48996: a3 = a3 | a4\n 48999: a5 = a5 << 0x10\n 49002: a1 = a1 << 0x18\n 49005: a1 = a1 | a5\n 49008: a1 = a1 | a3\n 49011: a1 = a1 << 0x20\n 49014: t1 = a1 | a2\n 49017: a1 = u8 [a0 + 0x11]\n 49020: a3 = u8 [a0 + 0x10]\n 49023: a4 = u8 [a0 + 0x12]\n 49026: a5 = u8 [a0 + 0x13]\n 49029: a1 = a1 << 0x8\n 49032: a1 = a1 | a3\n 49035: a4 = a4 << 0x10\n 49038: a5 = a5 << 0x18\n 49041: a4 = a4 | a5\n 49044: a1 = a1 | a4\n 49047: a3 = u8 [a0 + 0x15]\n 49050: a4 = u8 [a0 + 0x14]\n 49053: a5 = u8 [a0 + 0x16]\n 49056: a2 = u8 [a0 + 0x17]\n 49059: a3 = a3 << 0x8\n 49062: a3 = a3 | a4\n 49065: a5 = a5 << 0x10\n 49068: a2 = a2 << 0x18\n 49071: a2 = a2 | a5\n 49074: a2 = a2 | a3\n 49077: a2 = a2 << 0x20\n 49080: a3 = a2 | a1\n 49083: a1 = u8 [a0 + 0x19]\n 49086: a2 = u8 [a0 + 0x18]\n 49089: a4 = u8 [a0 + 0x1a]\n 49092: a5 = u8 [a0 + 0x1b]\n 49095: a1 = a1 << 0x8\n 49098: a1 = a1 | a2\n 49101: a4 = a4 << 0x10\n 49104: a5 = a5 << 0x18\n 49107: a4 = a4 | a5\n 49110: a1 = a1 | a4\n 49113: a2 = u8 [a0 + 0x1d]\n 49116: a4 = u8 [a0 + 0x1c]\n 49119: a5 = u8 [a0 + 0x1e]\n 49122: a0 = u8 [a0 + 0x1f]\n 49125: a2 = a2 << 0x8\n 49128: a2 = a2 | a4\n 49131: a5 = a5 << 0x10\n 49134: a0 = a0 << 0x18\n 49137: a0 = a0 | a5\n 49140: a0 = a0 | a2\n 49143: a0 = a0 << 0x20\n 49146: a0 = a0 | a1\n 49149: ra = reverse a0\n 49151: s1 = reverse a3\n 49153: a2 = reverse t1\n 49155: t1 = u64 [sp + 0x18]\n 49158: a3 = reverse t0\n 49160: a1 = u64 [sp + 0x20]\n 49163: a4 = a3 ^ a1\n 49166: a0 = a1 <u a3\n 49169: a3 = u64 [sp + 0x10]\n 49172: a5 = a3 <u a2\n 49175: a5 = a0 if a4 != 0\n 49178: t0 = s1 ^ t2\n 49181: s1 = t2 <u s1\n 49184: a0 = t1 <u ra\n 49187: a0 = s1 if t0 != 0\n 49190: a2 = a2 ^ a3\n 49193: a2 = a2 | a4\n 49196: a0 = a5 if a2 != 0\n 49199: jump @648 if a0 == 0\n      : @646 (gas: 48)\n 49203: s1 = a3\n 49205: a0 = s1 >> 0x3b\n 49208: a1 = a1 << 0x5\n 49211: t0 = a1 | a0\n 49214: a1 = t2 >> 0x3b\n 49217: s1 = s1 << 0x5\n 49220: a1 = a1 | s1\n 49223: a2 = t1 >> 0x3b\n 49226: a3 = t2 << 0x5\n 49229: a2 = a2 | a3\n 49232: a3 = t1 << 0x5\n 49235: a0 = u64 [sp + 0x28]\n 49238: a3 = a3 + a0\n 49241: a4 = a3 <u a0\n 49244: a5 = u64 [sp + 0x30]\n 49247: a2 = a2 + a5\n 49250: a2 = a2 + a4\n 49253: a0 = a2 ^ a5\n 49256: s1 = a2 <u a5\n 49259: s1 = a4 if a0 == 0\n 49262: a5 = u64 [sp + 0x40]\n 49265: a1 = a1 + a5\n 49268: s1 = s1 + a1\n 49271: a4 = s1 <u a1\n 49274: a1 = a1 <u a5\n 49277: a5 = u64 [sp + 0x38]\n 49280: a0 = a5 + t0\n 49283: a0 = a0 + a1\n 49286: a0 = a0 + a4\n 49289: a1 = a3 + 0x20\n 49292: a3 = a1 <u a3\n 49295: a4 = a2 + a3\n 49298: a2 = a4 <u a2\n 49301: a2 = a3 if a3 == 0\n 49304: a2 = a2 + s1\n 49307: a3 = a2 <u s1\n 49310: a0 = a0 + a3\n 49313: a3 = u64 [sp + 0x48]\n 49316: u64 [a3] = a1\n 49318: u64 [a3 + 0x8] = a4\n 49321: u64 [a3 + 0x10] = a2\n 49324: u64 [a3 + 0x18] = a0\n 49327: sp = s0 + 0xffffffffffffff50\n 49331: ra = u64 [sp + 0xa8]\n 49335: s0 = u64 [sp + 0xa0]\n 49339: s1 = u64 [sp + 0x98]\n 49343: sp = sp + 0xb0\n 49347: ret\n      : @647 (gas: 1)\n 49349: trap\n      : @648 (gas: 8)\n 49350: u64 [sp + 128] = 0\n 49354: u64 [sp + 120] = 0\n 49357: u64 [sp + 112] = 0\n 49360: a0 = 0x4e487b7100000000\n 49370: a1 = sp + 0x70\n 49373: u64 [sp + 0x88] = a0\n 49377: a0 = 0\n 49379: ra = 582, jump @8\n      : @649 [@dyn 291] (gas: 7)\n 49386: u64 [sp + 104] = 0\n 49389: u64 [sp + 96] = 0\n 49392: u64 [sp + 80] = 0x32\n 49396: a0 = 0x4\n 49399: a1 = sp + 0x50\n 49402: u64 [sp + 88] = 0\n 49405: ra = 584, jump @8\n      : @650 [@dyn 292] (gas: 3)\n 49412: a1 = 0x24\n 49415: a0 = 0\n 49417: ra = 586, jump @0\n      : @651 [@dyn 293] (gas: 6)\n 49424: i32 a1 = a0 + 0\n 49426: a0 = 0x1\n 49429: a2 = 0x24\n 49432: ra = 0x24c\n 49436: ecalli 14 // 'seal_return'\n 49438: fallthrough\n      : @652 [@dyn 294] (gas: 12)\n 49439: a2 = u64 [a0 + 0x10]\n 49442: a3 = u64 [a0 + 0x18]\n 49445: a4 = u64 [a0 + 0x8]\n 49448: a0 = u64 [a0]\n 49450: a3 = a3 | a4\n 49453: a4 = a0 | a2\n 49456: a4 = a4 | a3\n 49459: a4 = a4 >> 0x20\n 49462: a2 = a2 | a3\n 49465: a2 = a2 << 0x20\n 49468: a2 = a2 | a4\n 49471: jump @655 if a2 != 0\n      : @653 (gas: 13)\n 49475: sp = sp + 0xffffffffffffffe0\n 49478: u64 [sp + 0x18] = ra\n 49481: u64 [sp + 0x10] = s0\n 49484: u64 [sp + 0x8] = s1\n 49487: a2 = u64 [a1 + 0x10]\n 49490: a3 = u64 [a1 + 0x8]\n 49493: u64 [sp] = a3\n 49495: s1 = u64 [a1]\n 49497: a2 = a2 << 0x20\n 49500: s0 = a2 >> 0x20\n 49503: i32 a0 = a0 + 0\n 49505: a1 = 0x20\n 49508: ra = 590, jump @0\n      : @654 [@dyn 295] (gas: 59)\n 49515: a1 = reverse s0\n 49517: a2 = u64 [sp]\n 49519: a2 = reverse a2\n 49521: a3 = reverse s1\n 49523: a4 = a3 >> 0x38\n 49526: u8 [a0 + 0x1f] = a4\n 49529: a4 = a3 >> 0x30\n 49532: u8 [a0 + 0x1e] = a4\n 49535: a4 = a3 >> 0x28\n 49538: u8 [a0 + 0x1d] = a4\n 49541: a4 = a3 >> 0x20\n 49544: u8 [a0 + 0x1c] = a4\n 49547: a4 = a3 >> 0x18\n 49550: u8 [a0 + 0x1b] = a4\n 49553: a4 = a3 >> 0x10\n 49556: u8 [a0 + 0x1a] = a4\n 49559: a4 = a3 >> 0x8\n 49562: u8 [a0 + 0x19] = a4\n 49565: u8 [a0 + 0x18] = a3\n 49568: u8 [a0 + 0x10] = a2\n 49571: u8 [a0 + 11] = 0\n 49574: u8 [a0 + 10] = 0\n 49577: u8 [a0 + 9] = 0\n 49580: u8 [a0 + 7] = 0\n 49583: u8 [a0 + 6] = 0\n 49586: u8 [a0 + 5] = 0\n 49589: u8 [a0 + 4] = 0\n 49592: u8 [a0 + 3] = 0\n 49595: u8 [a0 + 2] = 0\n 49598: u8 [a0 + 1] = 0\n 49601: u8 [a0 + 0] = 0\n 49603: a3 = a2 >> 0x38\n 49606: u8 [a0 + 0x17] = a3\n 49609: a3 = a2 >> 0x30\n 49612: u8 [a0 + 0x16] = a3\n 49615: a3 = a2 >> 0x28\n 49618: u8 [a0 + 0x15] = a3\n 49621: a3 = a2 >> 0x20\n 49624: u8 [a0 + 0x14] = a3\n 49627: a3 = a2 >> 0x18\n 49630: u8 [a0 + 0x13] = a3\n 49633: a3 = a2 >> 0x10\n 49636: u8 [a0 + 0x12] = a3\n 49639: a2 = a2 >> 0x8\n 49642: u8 [a0 + 0x11] = a2\n 49645: u8 [a0 + 0x8] = a1\n 49648: a2 = a1 >> 0x38\n 49651: u8 [a0 + 0xf] = a2\n 49654: a2 = a1 >> 0x30\n 49657: u8 [a0 + 0xe] = a2\n 49660: a2 = a1 >> 0x28\n 49663: u8 [a0 + 0xd] = a2\n 49666: a1 = a1 >> 0x20\n 49669: u8 [a0 + 0xc] = a1\n 49672: ra = u64 [sp + 0x18]\n 49675: s0 = u64 [sp + 0x10]\n 49678: s1 = u64 [sp + 0x8]\n 49681: sp = sp + 0x20\n 49684: ret\n      : @655 (gas: 1)\n 49686: trap\n      : @656 [@dyn 296] (gas: 15)\n 49687: a0 = u64 [sp + 0x2d8]\n 49691: a3 = u64 [sp + 0x2d0]\n 49695: a1 = u64 [sp + 0x2c8]\n 49699: a2 = u64 [sp + 0x2c0]\n 49703: u64 [sp + 0x28] = a0\n 49706: u64 [sp + 0x18] = a1\n 49709: a0 = a0 | a1\n 49712: a1 = a2 | a3\n 49715: a1 = a1 | a0\n 49718: a1 = a1 >> 0x20\n 49721: u64 [sp + 0x20] = a3\n 49724: a0 = a0 | a3\n 49727: a0 = a0 << 0x20\n 49730: a0 = a0 | a1\n 49733: jump @677 if a0 != 0\n      : @657 (gas: 5)\n 49737: i32 a0 = a2 + 0\n 49739: u64 [sp + 0x98] = a0\n 49743: a1 = 0x20\n 49746: u64 [sp + 0x10] = a2\n 49749: ra = 594, jump @0\n      : @658 [@dyn 297] (gas: 122)\n 49756: a1 = u8 [a0 + 0x1]\n 49759: a2 = u8 [a0]\n 49761: a3 = u8 [a0 + 0x2]\n 49764: a4 = u8 [a0 + 0x3]\n 49767: a1 = a1 << 0x8\n 49770: a1 = a1 | a2\n 49773: a3 = a3 << 0x10\n 49776: a4 = a4 << 0x18\n 49779: a3 = a3 | a4\n 49782: a1 = a1 | a3\n 49785: a2 = u8 [a0 + 0x5]\n 49788: a3 = u8 [a0 + 0x4]\n 49791: a4 = u8 [a0 + 0x6]\n 49794: a5 = u8 [a0 + 0x7]\n 49797: a2 = a2 << 0x8\n 49800: a2 = a2 | a3\n 49803: a4 = a4 << 0x10\n 49806: a5 = a5 << 0x18\n 49809: a4 = a4 | a5\n 49812: a2 = a2 | a4\n 49815: a2 = a2 << 0x20\n 49818: t0 = a2 | a1\n 49821: a2 = u8 [a0 + 0x9]\n 49824: a3 = u8 [a0 + 0x8]\n 49827: a4 = u8 [a0 + 0xa]\n 49830: a5 = u8 [a0 + 0xb]\n 49833: a2 = a2 << 0x8\n 49836: a2 = a2 | a3\n 49839: a4 = a4 << 0x10\n 49842: a5 = a5 << 0x18\n 49845: a4 = a4 | a5\n 49848: a2 = a2 | a4\n 49851: a3 = u8 [a0 + 0xd]\n 49854: a4 = u8 [a0 + 0xc]\n 49857: a5 = u8 [a0 + 0xe]\n 49860: s1 = u8 [a0 + 0xf]\n 49863: a3 = a3 << 0x8\n 49866: a3 = a3 | a4\n 49869: a5 = a5 << 0x10\n 49872: s1 = s1 << 0x18\n 49875: a5 = a5 | s1\n 49878: a3 = a3 | a5\n 49881: a3 = a3 << 0x20\n 49884: a2 = a2 | a3\n 49887: a3 = u8 [a0 + 0x11]\n 49890: a4 = u8 [a0 + 0x10]\n 49893: a5 = u8 [a0 + 0x12]\n 49896: s1 = u8 [a0 + 0x13]\n 49899: a3 = a3 << 0x8\n 49902: a3 = a3 | a4\n 49905: a5 = a5 << 0x10\n 49908: s1 = s1 << 0x18\n 49911: a5 = a5 | s1\n 49914: a3 = a3 | a5\n 49917: a4 = u8 [a0 + 0x15]\n 49920: a5 = u8 [a0 + 0x14]\n 49923: s1 = u8 [a0 + 0x16]\n 49926: a1 = u8 [a0 + 0x17]\n 49929: a4 = a4 << 0x8\n 49932: a4 = a4 | a5\n 49935: s1 = s1 << 0x10\n 49938: a1 = a1 << 0x18\n 49941: a1 = a1 | s1\n 49944: a1 = a1 | a4\n 49947: a1 = a1 << 0x20\n 49950: a3 = a3 | a1\n 49953: a1 = u8 [a0 + 0x19]\n 49956: a4 = u8 [a0 + 0x18]\n 49959: a5 = u8 [a0 + 0x1a]\n 49962: s1 = u8 [a0 + 0x1b]\n 49965: a1 = a1 << 0x8\n 49968: a1 = a1 | a4\n 49971: a5 = a5 << 0x10\n 49974: s1 = s1 << 0x18\n 49977: a5 = a5 | s1\n 49980: a1 = a1 | a5\n 49983: a4 = u8 [a0 + 0x1d]\n 49986: a5 = u8 [a0 + 0x1c]\n 49989: s1 = u8 [a0 + 0x1e]\n 49992: a0 = u8 [a0 + 0x1f]\n 49995: a4 = a4 << 0x8\n 49998: a4 = a4 | a5\n 50001: s1 = s1 << 0x10\n 50004: a0 = a0 << 0x18\n 50007: a0 = a0 | s1\n 50010: s1 = u64 [sp + 0x98]\n 50014: a0 = a0 | a4\n 50017: a0 = a0 << 0x20\n 50020: a0 = a0 | a1\n 50023: a4 = reverse a0\n 50025: a0 = reverse a3\n 50027: a1 = reverse a2\n 50029: a2 = reverse t0\n 50031: u64 [sp + 0x278] = a2\n 50035: u64 [sp + 0x270] = a1\n 50039: u64 [sp + 0x268] = a0\n 50043: a0 = sp + 0x280\n 50047: a1 = sp + 0x260\n 50051: u64 [sp + 0x260] = a4\n 50055: ra = 0x254\n 50059: sp = sp + 0xffffffffffffff20\n 50063: u64 [sp + 0xd8] = ra\n 50067: u64 [sp + 0xd0] = s0\n 50071: u64 [sp + 0xc8] = s1\n 50075: s0 = sp + 0xe0\n 50079: sp = sp & 0xfffffffffffffff0\n 50082: a2 = u64 [a1]\n 50084: a3 = u64 [a1 + 0x8]\n 50087: u64 [sp + 0x28] = a3\n 50090: s1 = u64 [a1 + 0x10]\n 50093: a1 = u64 [a1 + 0x18]\n 50096: u64 [sp + 0x30] = a1\n 50099: u64 [sp + 0x20] = a0\n 50102: u64 [sp + 0x98] = a1\n 50106: u64 [sp + 0x90] = s1\n 50110: u64 [sp + 0x88] = a3\n 50114: a0 = sp + 0xa0\n 50118: a1 = sp + 0x80\n 50122: u64 [sp + 0x38] = a2\n 50125: u64 [sp + 0x80] = a2\n 50129: ra = 0x238\n 50133: jump @618\n      : @659 [@dyn 298] (gas: 43)\n 50136: u64 [sp + 472] = 0\n 50140: u64 [sp + 464] = 0\n 50144: u64 [sp + 448] = 0\n 50148: u64 [sp + 456] = 0\n 50152: a2 = u64 [sp + 0x288]\n 50156: a3 = u64 [sp + 0x280]\n 50160: a1 = u64 [sp + 0x10]\n 50163: a0 = a1 + 0x20\n 50166: u64 [sp + 0x70] = a0\n 50169: a0 = a0 <u a1\n 50172: a4 = u64 [sp + 0x18]\n 50175: a1 = a4 + a0\n 50178: u64 [sp + 0x68] = a1\n 50181: a1 = a1 <u a4\n 50184: a1 = a0 if a0 == 0\n 50187: a0 = a3 + 0x20\n 50190: u64 [sp + 0x50] = a0\n 50193: a0 = a0 <u a3\n 50196: a4 = a2 + a0\n 50199: u64 [sp + 0x90] = a2\n 50203: u64 [sp + 0x48] = a4\n 50206: a2 = a4 <u a2\n 50209: a2 = a0 if a0 == 0\n 50212: a5 = u64 [sp + 0x20]\n 50215: a0 = a5 + a1\n 50218: a4 = u64 [sp + 0x290]\n 50222: a1 = u64 [sp + 0x298]\n 50226: u64 [sp + 0x60] = a0\n 50229: a0 = a0 <u a5\n 50232: a5 = u64 [sp + 0x28]\n 50235: a0 = a0 + a5\n 50238: u64 [sp + 0x58] = a0\n 50241: a2 = a2 + a4\n 50244: u64 [sp + 0x78] = a4\n 50247: u64 [sp + 0x40] = a2\n 50250: a0 = a2 <u a4\n 50253: u64 [sp + 0x80] = a1\n 50257: a0 = a0 + a1\n 50260: u64 [sp + 0x38] = a0\n 50263: u64 [sp + 0x88] = a3\n 50267: i32 a3 = a3 + 0\n 50269: u64 [sp + 0x30] = a3\n 50272: fallthrough\n      : @660 (gas: 3)\n 50273: a1 = 0x20\n 50276: a0 = s1\n 50278: ra = 598, jump @0\n      : @661 [@dyn 299] (gas: 109)\n 50285: a1 = u8 [a0 + 0x1]\n 50288: a2 = u8 [a0]\n 50290: a3 = u8 [a0 + 0x2]\n 50293: a4 = u8 [a0 + 0x3]\n 50296: a1 = a1 << 0x8\n 50299: a1 = a1 | a2\n 50302: a3 = a3 << 0x10\n 50305: a4 = a4 << 0x18\n 50308: a3 = a3 | a4\n 50311: a1 = a1 | a3\n 50314: a2 = u8 [a0 + 0x5]\n 50317: a3 = u8 [a0 + 0x4]\n 50320: a4 = u8 [a0 + 0x6]\n 50323: a5 = u8 [a0 + 0x7]\n 50326: a2 = a2 << 0x8\n 50329: a2 = a2 | a3\n 50332: a4 = a4 << 0x10\n 50335: a5 = a5 << 0x18\n 50338: a4 = a4 | a5\n 50341: a2 = a2 | a4\n 50344: a2 = a2 << 0x20\n 50347: t0 = a2 | a1\n 50350: a2 = u8 [a0 + 0x9]\n 50353: a3 = u8 [a0 + 0x8]\n 50356: a4 = u8 [a0 + 0xa]\n 50359: a5 = u8 [a0 + 0xb]\n 50362: a2 = a2 << 0x8\n 50365: a2 = a2 | a3\n 50368: a4 = a4 << 0x10\n 50371: a5 = a5 << 0x18\n 50374: a4 = a4 | a5\n 50377: a2 = a2 | a4\n 50380: a3 = u8 [a0 + 0xd]\n 50383: a4 = u8 [a0 + 0xc]\n 50386: a5 = u8 [a0 + 0xe]\n 50389: t1 = s1\n 50391: s1 = u8 [a0 + 0xf]\n 50394: a3 = a3 << 0x8\n 50397: a3 = a3 | a4\n 50400: a5 = a5 << 0x10\n 50403: s1 = s1 << 0x18\n 50406: a5 = a5 | s1\n 50409: a3 = a3 | a5\n 50412: a3 = a3 << 0x20\n 50415: a2 = a2 | a3\n 50418: a3 = u8 [a0 + 0x11]\n 50421: a4 = u8 [a0 + 0x10]\n 50424: a5 = u8 [a0 + 0x12]\n 50427: s1 = u8 [a0 + 0x13]\n 50430: a3 = a3 << 0x8\n 50433: a3 = a3 | a4\n 50436: a5 = a5 << 0x10\n 50439: s1 = s1 << 0x18\n 50442: a5 = a5 | s1\n 50445: a3 = a3 | a5\n 50448: a4 = u8 [a0 + 0x15]\n 50451: a5 = u8 [a0 + 0x14]\n 50454: s1 = u8 [a0 + 0x16]\n 50457: a1 = u8 [a0 + 0x17]\n 50460: a4 = a4 << 0x8\n 50463: a4 = a4 | a5\n 50466: s1 = s1 << 0x10\n 50469: a1 = a1 << 0x18\n 50472: a1 = a1 | s1\n 50475: a1 = a1 | a4\n 50478: a1 = a1 << 0x20\n 50481: a3 = a3 | a1\n 50484: a1 = u8 [a0 + 0x19]\n 50487: a4 = u8 [a0 + 0x18]\n 50490: a5 = u8 [a0 + 0x1a]\n 50493: s1 = u8 [a0 + 0x1b]\n 50496: a1 = a1 << 0x8\n 50499: a1 = a1 | a4\n 50502: a5 = a5 << 0x10\n 50505: s1 = s1 << 0x18\n 50508: a5 = a5 | s1\n 50511: a1 = a1 | a5\n 50514: a4 = u8 [a0 + 0x1d]\n 50517: a5 = u8 [a0 + 0x1c]\n 50520: s1 = u8 [a0 + 0x1e]\n 50523: a0 = u8 [a0 + 0x1f]\n 50526: a4 = a4 << 0x8\n 50529: a4 = a4 | a5\n 50532: s1 = s1 << 0x10\n 50535: a0 = a0 << 0x18\n 50538: a0 = a0 | s1\n 50541: a0 = a0 | a4\n 50544: a0 = a0 << 0x20\n 50547: a0 = a0 | a1\n 50550: a0 = reverse a0\n 50552: a1 = reverse a3\n 50554: t2 = reverse a2\n 50556: a3 = reverse t0\n 50558: a4 = u64 [sp + 0x1c8]\n 50562: a2 = a4 ^ a3\n 50565: a3 = a4 <u a3\n 50568: a4 = u64 [sp + 0x1c0]\n 50572: a5 = a4 <u t2\n 50575: a5 = a3 if a2 != 0\n 50578: a3 = u64 [sp + 0x1d0]\n 50582: t0 = a3 ^ a1\n 50585: a1 = a3 <u a1\n 50588: s1 = u64 [sp + 0x1d8]\n 50592: a0 = s1 <u a0\n 50595: a0 = a1 if t0 != 0\n 50598: a1 = a4 ^ t2\n 50601: a1 = a1 | a2\n 50604: a0 = a5 if a1 != 0\n 50607: jump @676 if a0 == 0\n      : @662 (gas: 3)\n 50611: a1 = 0x20\n 50614: a0 = t1\n 50616: ra = 600, jump @0\n      : @663 [@dyn 300] (gas: 108)\n 50623: ra = u64 [sp + 0x1c0]\n 50627: t2 = u64 [sp + 0x1c8]\n 50631: a1 = u8 [a0 + 0x1]\n 50634: a2 = u8 [a0]\n 50636: a3 = u8 [a0 + 0x2]\n 50639: a4 = u8 [a0 + 0x3]\n 50642: a1 = a1 << 0x8\n 50645: a1 = a1 | a2\n 50648: a3 = a3 << 0x10\n 50651: a4 = a4 << 0x18\n 50654: a3 = a3 | a4\n 50657: a1 = a1 | a3\n 50660: a2 = u8 [a0 + 0x5]\n 50663: a3 = u8 [a0 + 0x4]\n 50666: a4 = u8 [a0 + 0x6]\n 50669: a5 = u8 [a0 + 0x7]\n 50672: a2 = a2 << 0x8\n 50675: a2 = a2 | a3\n 50678: a4 = a4 << 0x10\n 50681: a5 = a5 << 0x18\n 50684: a4 = a4 | a5\n 50687: a2 = a2 | a4\n 50690: a2 = a2 << 0x20\n 50693: t0 = a2 | a1\n 50696: a2 = u8 [a0 + 0x9]\n 50699: a3 = u8 [a0 + 0x8]\n 50702: a4 = u8 [a0 + 0xa]\n 50705: a5 = u8 [a0 + 0xb]\n 50708: a2 = a2 << 0x8\n 50711: a2 = a2 | a3\n 50714: a4 = a4 << 0x10\n 50717: a5 = a5 << 0x18\n 50720: a4 = a4 | a5\n 50723: a2 = a2 | a4\n 50726: a3 = u8 [a0 + 0xd]\n 50729: a4 = u8 [a0 + 0xc]\n 50732: a5 = u8 [a0 + 0xe]\n 50735: s1 = u8 [a0 + 0xf]\n 50738: a3 = a3 << 0x8\n 50741: a3 = a3 | a4\n 50744: a5 = a5 << 0x10\n 50747: s1 = s1 << 0x18\n 50750: a5 = a5 | s1\n 50753: a3 = a3 | a5\n 50756: a3 = a3 << 0x20\n 50759: a2 = a2 | a3\n 50762: a3 = u8 [a0 + 0x11]\n 50765: a4 = u8 [a0 + 0x10]\n 50768: a5 = u8 [a0 + 0x12]\n 50771: s1 = u8 [a0 + 0x13]\n 50774: a3 = a3 << 0x8\n 50777: a3 = a3 | a4\n 50780: a5 = a5 << 0x10\n 50783: s1 = s1 << 0x18\n 50786: a5 = a5 | s1\n 50789: a3 = a3 | a5\n 50792: a4 = u8 [a0 + 0x15]\n 50795: a5 = u8 [a0 + 0x14]\n 50798: s1 = u8 [a0 + 0x16]\n 50801: a1 = u8 [a0 + 0x17]\n 50804: a4 = a4 << 0x8\n 50807: a4 = a4 | a5\n 50810: s1 = s1 << 0x10\n 50813: a1 = a1 << 0x18\n 50816: a1 = a1 | s1\n 50819: a1 = a1 | a4\n 50822: a1 = a1 << 0x20\n 50825: a3 = a3 | a1\n 50828: a1 = u8 [a0 + 0x19]\n 50831: a4 = u8 [a0 + 0x18]\n 50834: a5 = u8 [a0 + 0x1a]\n 50837: s1 = u8 [a0 + 0x1b]\n 50840: a1 = a1 << 0x8\n 50843: a1 = a1 | a4\n 50846: a5 = a5 << 0x10\n 50849: s1 = s1 << 0x18\n 50852: a5 = a5 | s1\n 50855: a1 = a1 | a5\n 50858: a4 = u8 [a0 + 0x1d]\n 50861: a5 = u8 [a0 + 0x1c]\n 50864: s1 = u8 [a0 + 0x1e]\n 50867: a0 = u8 [a0 + 0x1f]\n 50870: a4 = a4 << 0x8\n 50873: a4 = a4 | a5\n 50876: s1 = s1 << 0x10\n 50879: a0 = a0 << 0x18\n 50882: a0 = a0 | s1\n 50885: a0 = a0 | a4\n 50888: a0 = a0 << 0x20\n 50891: a0 = a0 | a1\n 50894: t1 = reverse a0\n 50896: a1 = reverse a3\n 50898: a2 = reverse a2\n 50900: a5 = reverse t0\n 50902: a3 = u64 [sp + 0x1d0]\n 50906: s1 = u64 [sp + 0x1d8]\n 50910: a4 = a5 ^ t2\n 50913: a0 = t2 <u a5\n 50916: a5 = ra <u a2\n 50919: a5 = a0 if a4 != 0\n 50922: t0 = a1 ^ a3\n 50925: a1 = a3 <u a1\n 50928: a0 = s1 <u t1\n 50931: a0 = a1 if t0 != 0\n 50934: a1 = a2 ^ ra\n 50937: a1 = a1 | a4\n 50940: a0 = a5 if a1 != 0\n 50943: jump @678 if a0 == 0\n      : @664 (gas: 40)\n 50947: a0 = ra >> 0x3b\n 50950: a1 = t2 << 0x5\n 50953: t0 = a1 | a0\n 50956: a0 = a3 >> 0x3b\n 50959: a1 = ra << 0x5\n 50962: a5 = a1 | a0\n 50965: a0 = s1 >> 0x3b\n 50968: a1 = a3 << 0x5\n 50971: a2 = a1 | a0\n 50974: a0 = s1 << 0x5\n 50977: a1 = u64 [sp + 0x70]\n 50980: u64 [sp + 0x1a0] = a0\n 50984: a0 = a0 + a1\n 50987: a1 = a0 <u a1\n 50990: a4 = u64 [sp + 0x68]\n 50993: u64 [sp + 0x1a8] = a2\n 50997: a2 = a2 + a4\n 51000: a2 = a2 + a1\n 51003: a3 = a2 ^ a4\n 51006: a4 = a2 <u a4\n 51009: a4 = a1 if a3 == 0\n 51012: a3 = u64 [sp + 0x60]\n 51015: u64 [sp + 0x1b0] = a5\n 51019: a1 = a3 + a5\n 51022: a3 = a1 <u a3\n 51025: a5 = u64 [sp + 0x58]\n 51028: u64 [sp + 0x1b8] = t0\n 51032: a5 = a5 + t0\n 51035: a3 = a3 + a5\n 51038: a4 = a4 + a1\n 51041: a1 = a4 <u a1\n 51044: a1 = a1 + a3\n 51047: a1 = a1 | a2\n 51050: a2 = a0 | a4\n 51053: a2 = a2 | a1\n 51056: a1 = a1 | a4\n 51059: a2 = a2 >> 0x20\n 51062: a1 = a1 << 0x20\n 51065: a1 = a1 | a2\n 51068: jump @677 if a1 != 0\n      : @665 (gas: 15)\n 51072: a1 = u64 [sp + 0x88]\n 51076: a4 = u64 [sp + 0x78]\n 51079: a1 = a1 | a4\n 51082: a2 = u64 [sp + 0x90]\n 51086: a3 = u64 [sp + 0x80]\n 51090: a2 = a2 | a3\n 51093: a1 = a1 | a2\n 51096: a1 = a1 >> 0x20\n 51099: a2 = a2 | a4\n 51102: a2 = a2 << 0x20\n 51105: a1 = a1 | a2\n 51108: u64 [sp + 0x198] = a1\n 51112: i32 a0 = a0 + 0\n 51114: a1 = 0x20\n 51117: ra = 602, jump @0\n      : @666 [@dyn 301] (gas: 66)\n 51124: a1 = u8 [a0]\n 51126: u64 [sp + 0x190] = a1\n 51130: a1 = u8 [a0 + 0x1]\n 51133: u64 [sp + 0x188] = a1\n 51137: a1 = u8 [a0 + 0x2]\n 51140: u64 [sp + 0x180] = a1\n 51144: a1 = u8 [a0 + 0x3]\n 51147: u64 [sp + 0x178] = a1\n 51151: a1 = u8 [a0 + 0x4]\n 51154: u64 [sp + 0x170] = a1\n 51158: a1 = u8 [a0 + 0x5]\n 51161: u64 [sp + 0x168] = a1\n 51165: a1 = u8 [a0 + 0x6]\n 51168: u64 [sp + 0x160] = a1\n 51172: a1 = u8 [a0 + 0x7]\n 51175: u64 [sp + 0x158] = a1\n 51179: a1 = u8 [a0 + 0x8]\n 51182: u64 [sp + 0x150] = a1\n 51186: a1 = u8 [a0 + 0x9]\n 51189: u64 [sp + 0x148] = a1\n 51193: a1 = u8 [a0 + 0xa]\n 51196: u64 [sp + 0x140] = a1\n 51200: a1 = u8 [a0 + 0xb]\n 51203: u64 [sp + 0x138] = a1\n 51207: a1 = u8 [a0 + 0xc]\n 51210: u64 [sp + 0x130] = a1\n 51214: a1 = u8 [a0 + 0xd]\n 51217: u64 [sp + 0x128] = a1\n 51221: a1 = u8 [a0 + 0xe]\n 51224: u64 [sp + 0x120] = a1\n 51228: a1 = u8 [a0 + 0xf]\n 51231: u64 [sp + 0x118] = a1\n 51235: a1 = u8 [a0 + 0x10]\n 51238: u64 [sp + 0x110] = a1\n 51242: a1 = u8 [a0 + 0x11]\n 51245: u64 [sp + 0x108] = a1\n 51249: a1 = u8 [a0 + 0x12]\n 51252: u64 [sp + 0x100] = a1\n 51256: a1 = u8 [a0 + 0x13]\n 51259: u64 [sp + 0xf8] = a1\n 51263: a1 = u8 [a0 + 0x14]\n 51266: u64 [sp + 0xf0] = a1\n 51270: a1 = u8 [a0 + 0x15]\n 51273: u64 [sp + 0xe8] = a1\n 51277: a1 = u8 [a0 + 0x16]\n 51280: u64 [sp + 0xe0] = a1\n 51284: a1 = u8 [a0 + 0x17]\n 51287: u64 [sp + 0xd8] = a1\n 51291: a1 = u8 [a0 + 0x18]\n 51294: u64 [sp + 0xd0] = a1\n 51298: a1 = u8 [a0 + 0x19]\n 51301: u64 [sp + 0xc8] = a1\n 51305: a1 = u8 [a0 + 0x1a]\n 51308: u64 [sp + 0xc0] = a1\n 51312: a1 = u8 [a0 + 0x1b]\n 51315: u64 [sp + 0xb8] = a1\n 51319: a1 = u8 [a0 + 0x1c]\n 51322: u64 [sp + 0xb0] = a1\n 51326: a1 = u8 [a0 + 0x1d]\n 51329: u64 [sp + 0xa8] = a1\n 51333: a1 = u8 [a0 + 0x1e]\n 51336: u64 [sp + 0xa0] = a1\n 51340: s1 = u8 [a0 + 0x1f]\n 51343: a1 = 0x20\n 51346: a0 = 0\n 51348: ra = 604, jump @0\n      : @667 [@dyn 302] (gas: 66)\n 51355: u8 [a0 + 0x1f] = s1\n 51358: a1 = u64 [sp + 0xa0]\n 51362: u8 [a0 + 0x1e] = a1\n 51365: a1 = u64 [sp + 0xa8]\n 51369: u8 [a0 + 0x1d] = a1\n 51372: a1 = u64 [sp + 0xb0]\n 51376: u8 [a0 + 0x1c] = a1\n 51379: a1 = u64 [sp + 0xb8]\n 51383: u8 [a0 + 0x1b] = a1\n 51386: a1 = u64 [sp + 0xc0]\n 51390: u8 [a0 + 0x1a] = a1\n 51393: a1 = u64 [sp + 0xc8]\n 51397: u8 [a0 + 0x19] = a1\n 51400: a1 = u64 [sp + 0xd0]\n 51404: u8 [a0 + 0x18] = a1\n 51407: a1 = u64 [sp + 0xd8]\n 51411: u8 [a0 + 0x17] = a1\n 51414: a1 = u64 [sp + 0xe0]\n 51418: u8 [a0 + 0x16] = a1\n 51421: a1 = u64 [sp + 0xe8]\n 51425: u8 [a0 + 0x15] = a1\n 51428: a1 = u64 [sp + 0xf0]\n 51432: u8 [a0 + 0x14] = a1\n 51435: a1 = u64 [sp + 0xf8]\n 51439: u8 [a0 + 0x13] = a1\n 51442: a1 = u64 [sp + 0x100]\n 51446: u8 [a0 + 0x12] = a1\n 51449: a1 = u64 [sp + 0x108]\n 51453: u8 [a0 + 0x11] = a1\n 51456: a1 = u64 [sp + 0x110]\n 51460: u8 [a0 + 0x10] = a1\n 51463: a1 = u64 [sp + 0x118]\n 51467: u8 [a0 + 0xf] = a1\n 51470: a1 = u64 [sp + 0x120]\n 51474: u8 [a0 + 0xe] = a1\n 51477: a1 = u64 [sp + 0x128]\n 51481: u8 [a0 + 0xd] = a1\n 51484: a1 = u64 [sp + 0x130]\n 51488: u8 [a0 + 0xc] = a1\n 51491: a1 = u64 [sp + 0x138]\n 51495: u8 [a0 + 0xb] = a1\n 51498: a1 = u64 [sp + 0x140]\n 51502: u8 [a0 + 0xa] = a1\n 51505: a1 = u64 [sp + 0x148]\n 51509: u8 [a0 + 0x9] = a1\n 51512: a1 = u64 [sp + 0x150]\n 51516: u8 [a0 + 0x8] = a1\n 51519: a1 = u64 [sp + 0x158]\n 51523: u8 [a0 + 0x7] = a1\n 51526: a1 = u64 [sp + 0x160]\n 51530: u8 [a0 + 0x6] = a1\n 51533: a1 = u64 [sp + 0x168]\n 51537: u8 [a0 + 0x5] = a1\n 51540: a1 = u64 [sp + 0x170]\n 51544: u8 [a0 + 0x4] = a1\n 51547: a1 = u64 [sp + 0x178]\n 51551: u8 [a0 + 0x3] = a1\n 51554: a1 = u64 [sp + 0x180]\n 51558: u8 [a0 + 0x2] = a1\n 51561: a1 = u64 [sp + 0x188]\n 51565: u8 [a0 + 0x1] = a1\n 51568: a1 = u64 [sp + 0x190]\n 51572: u8 [a0] = a1\n 51574: a0 = 0x20\n 51577: a1 = 0x20\n 51580: ra = 606, jump @0\n      : @668 [@dyn 303] (gas: 35)\n 51587: u8 [a0 + 31] = 0\n 51590: u8 [a0 + 30] = 0\n 51593: u8 [a0 + 29] = 0\n 51596: u8 [a0 + 28] = 0\n 51599: u8 [a0 + 27] = 0\n 51602: u8 [a0 + 26] = 0\n 51605: u8 [a0 + 25] = 0\n 51608: u8 [a0 + 24] = 0\n 51611: u8 [a0 + 23] = 0\n 51614: u8 [a0 + 22] = 0\n 51617: u8 [a0 + 21] = 0\n 51620: u8 [a0 + 20] = 0\n 51623: u8 [a0 + 19] = 0\n 51626: u8 [a0 + 18] = 0\n 51629: u8 [a0 + 17] = 0\n 51632: u8 [a0 + 16] = 0\n 51635: u8 [a0 + 15] = 0\n 51638: u8 [a0 + 14] = 0\n 51641: u8 [a0 + 13] = 0\n 51644: u8 [a0 + 12] = 0\n 51647: u8 [a0 + 11] = 0\n 51650: u8 [a0 + 10] = 0\n 51653: u8 [a0 + 9] = 0\n 51656: u8 [a0 + 8] = 0\n 51659: u8 [a0 + 7] = 0\n 51662: u8 [a0 + 6] = 0\n 51665: u8 [a0 + 5] = 0\n 51668: u8 [a0 + 4] = 0\n 51671: u8 [a0 + 3] = 0\n 51674: u8 [a0 + 2] = 0\n 51677: u8 [a0 + 1] = 0\n 51680: u8 [a0 + 0] = 0\n 51682: a1 = 0x40\n 51685: a0 = 0\n 51687: ra = 608, jump @0\n      : @669 [@dyn 304] (gas: 28)\n 51694: i32 a0 = a0 + 0\n 51696: i32 a2 = sp + 0x300\n 51700: a1 = 0x40\n 51703: ecalli 9 // 'hash_keccak_256'\n 51705: a0 = u64 [sp + 0x318]\n 51709: a1 = u64 [sp + 0x310]\n 51713: a2 = u64 [sp + 0x308]\n 51717: a3 = u64 [sp + 0x300]\n 51721: a0 = reverse a0\n 51723: a1 = reverse a1\n 51725: a2 = reverse a2\n 51727: a3 = reverse a3\n 51729: u64 [sp + 0x2f8] = a3\n 51733: u64 [sp + 0x2f0] = a2\n 51737: u64 [sp + 0x2e8] = a1\n 51741: u64 [sp + 0x2e0] = a0\n 51745: u64 [sp + 792] = 0\n 51749: u64 [sp + 784] = 0\n 51753: u64 [sp + 776] = 0\n 51757: u64 [sp + 768] = 0\n 51761: u32 [sp + 800] = 0x20\n 51766: i32 a1 = sp + 0x2e0\n 51770: i32 a3 = sp + 0x300\n 51774: i32 a4 = sp + 0x320\n 51778: a2 = 0xffffffffffffffff\n 51781: a0 = 0\n 51783: ecalli 8 // 'get_storage'\n 51785: fallthrough\n      : @670 (gas: 2)\n 51786: a0 = u64 [sp + 0x198]\n 51790: jump @677 if a0 != 0\n      : @671 (gas: 9)\n 51794: a0 = u64 [sp + 0x308]\n 51798: u64 [sp + 0x190] = a0\n 51802: a0 = u64 [sp + 0x300]\n 51806: u64 [sp + 0x198] = a0\n 51810: a0 = u32 [sp + 0x310]\n 51814: u64 [sp + 0x188] = a0\n 51818: a1 = 0x20\n 51821: a0 = u64 [sp + 0x30]\n 51824: ra = 610, jump @0\n      : @672 [@dyn 305] (gas: 108)\n 51831: a1 = u8 [a0 + 0x1]\n 51834: a2 = u8 [a0]\n 51836: a3 = u8 [a0 + 0x2]\n 51839: a4 = u8 [a0 + 0x3]\n 51842: a1 = a1 << 0x8\n 51845: a1 = a1 | a2\n 51848: a3 = a3 << 0x10\n 51851: a4 = a4 << 0x18\n 51854: a3 = a3 | a4\n 51857: a1 = a1 | a3\n 51860: a2 = u8 [a0 + 0x5]\n 51863: a3 = u8 [a0 + 0x4]\n 51866: a4 = u8 [a0 + 0x6]\n 51869: a5 = u8 [a0 + 0x7]\n 51872: a2 = a2 << 0x8\n 51875: a2 = a2 | a3\n 51878: a4 = a4 << 0x10\n 51881: a5 = a5 << 0x18\n 51884: a4 = a4 | a5\n 51887: a2 = a2 | a4\n 51890: a2 = a2 << 0x20\n 51893: t0 = a2 | a1\n 51896: a2 = u8 [a0 + 0x9]\n 51899: a3 = u8 [a0 + 0x8]\n 51902: a4 = u8 [a0 + 0xa]\n 51905: a5 = u8 [a0 + 0xb]\n 51908: a2 = a2 << 0x8\n 51911: a2 = a2 | a3\n 51914: a4 = a4 << 0x10\n 51917: a5 = a5 << 0x18\n 51920: a4 = a4 | a5\n 51923: a2 = a2 | a4\n 51926: a3 = u8 [a0 + 0xd]\n 51929: a4 = u8 [a0 + 0xc]\n 51932: a5 = u8 [a0 + 0xe]\n 51935: a1 = u8 [a0 + 0xf]\n 51938: a3 = a3 << 0x8\n 51941: a3 = a3 | a4\n 51944: a5 = a5 << 0x10\n 51947: a1 = a1 << 0x18\n 51950: a1 = a1 | a5\n 51953: a1 = a1 | a3\n 51956: a1 = a1 << 0x20\n 51959: a2 = a2 | a1\n 51962: a1 = u8 [a0 + 0x11]\n 51965: a3 = u8 [a0 + 0x10]\n 51968: a4 = u8 [a0 + 0x12]\n 51971: a5 = u8 [a0 + 0x13]\n 51974: a1 = a1 << 0x8\n 51977: a1 = a1 | a3\n 51980: a4 = a4 << 0x10\n 51983: a5 = a5 << 0x18\n 51986: a4 = a4 | a5\n 51989: a1 = a1 | a4\n 51992: a3 = u8 [a0 + 0x15]\n 51995: a4 = u8 [a0 + 0x14]\n 51998: a5 = u8 [a0 + 0x16]\n 52001: s1 = u8 [a0 + 0x17]\n 52004: a3 = a3 << 0x8\n 52007: a3 = a3 | a4\n 52010: a5 = a5 << 0x10\n 52013: s1 = s1 << 0x18\n 52016: a5 = a5 | s1\n 52019: a3 = a3 | a5\n 52022: a3 = a3 << 0x20\n 52025: a3 = a3 | a1\n 52028: a1 = u8 [a0 + 0x19]\n 52031: a4 = u8 [a0 + 0x18]\n 52034: a5 = u8 [a0 + 0x1a]\n 52037: s1 = u8 [a0 + 0x1b]\n 52040: a1 = a1 << 0x8\n 52043: a1 = a1 | a4\n 52046: a5 = a5 << 0x10\n 52049: s1 = s1 << 0x18\n 52052: a5 = a5 | s1\n 52055: a1 = a1 | a5\n 52058: a4 = u8 [a0 + 0x1d]\n 52061: a5 = u8 [a0 + 0x1c]\n 52064: s1 = u8 [a0 + 0x1e]\n 52067: a0 = u8 [a0 + 0x1f]\n 52070: a4 = a4 << 0x8\n 52073: a4 = a4 | a5\n 52076: s1 = s1 << 0x10\n 52079: a0 = a0 << 0x18\n 52082: a0 = a0 | s1\n 52085: a0 = a0 | a4\n 52088: a0 = a0 << 0x20\n 52091: a0 = a0 | a1\n 52094: a0 = reverse a0\n 52096: s1 = reverse a3\n 52098: a2 = reverse a2\n 52100: a3 = reverse t0\n 52102: a5 = u64 [sp + 0x1c8]\n 52106: a4 = a3 ^ a5\n 52109: a3 = a5 <u a3\n 52112: a1 = u64 [sp + 0x1c0]\n 52116: a5 = a1 <u a2\n 52119: a5 = a3 if a4 != 0\n 52122: a3 = u64 [sp + 0x1d0]\n 52126: t0 = s1 ^ a3\n 52129: a3 = a3 <u s1\n 52132: s1 = u64 [sp + 0x1d8]\n 52136: a0 = s1 <u a0\n 52139: a0 = a3 if t0 != 0\n 52142: a1 = a1 ^ a2\n 52145: a1 = a1 | a4\n 52148: a0 = a5 if a1 != 0\n 52151: jump @680 if a0 == 0\n      : @673 (gas: 31)\n 52155: a1 = u64 [sp + 0x50]\n 52158: a0 = u64 [sp + 0x1a0]\n 52162: a0 = a0 + a1\n 52165: a1 = a0 <u a1\n 52168: a4 = u64 [sp + 0x48]\n 52171: a2 = u64 [sp + 0x1a8]\n 52175: a2 = a2 + a4\n 52178: a2 = a2 + a1\n 52181: a3 = a2 ^ a4\n 52184: a4 = a2 <u a4\n 52187: a4 = a1 if a3 == 0\n 52190: a5 = u64 [sp + 0x40]\n 52193: a1 = u64 [sp + 0x1b0]\n 52197: a1 = a1 + a5\n 52200: a4 = a4 + a1\n 52203: a3 = a4 <u a1\n 52206: a1 = a1 <u a5\n 52209: a5 = u64 [sp + 0x38]\n 52212: s1 = u64 [sp + 0x1b8]\n 52216: a5 = a5 + s1\n 52219: a1 = a1 + a5\n 52222: a1 = a1 + a3\n 52225: a3 = a0 | a4\n 52228: a1 = a1 | a2\n 52231: a3 = a3 | a1\n 52234: a3 = a3 >> 0x20\n 52237: a1 = a1 | a4\n 52240: a1 = a1 << 0x20\n 52243: a1 = a1 | a3\n 52246: s1 = u64 [sp + 0x98]\n 52250: jump @677 if a1 != 0\n      : @674 (gas: 3)\n 52254: i32 a0 = a0 + 0\n 52256: a1 = 0x20\n 52259: ra = 612, jump @0\n      : @675 [@dyn 306] (gas: 73)\n 52266: a1 = u64 [sp + 0x188]\n 52270: a1 = reverse a1\n 52272: a2 = u64 [sp + 0x190]\n 52276: a2 = reverse a2\n 52278: a3 = u64 [sp + 0x198]\n 52282: a3 = reverse a3\n 52284: a4 = a3 >> 0x38\n 52287: u8 [a0 + 0x1f] = a4\n 52290: a4 = a3 >> 0x30\n 52293: u8 [a0 + 0x1e] = a4\n 52296: a4 = a3 >> 0x28\n 52299: u8 [a0 + 0x1d] = a4\n 52302: a4 = a3 >> 0x20\n 52305: u8 [a0 + 0x1c] = a4\n 52308: a4 = a3 >> 0x18\n 52311: u8 [a0 + 0x1b] = a4\n 52314: a4 = a3 >> 0x10\n 52317: u8 [a0 + 0x1a] = a4\n 52320: a4 = a3 >> 0x8\n 52323: u8 [a0 + 0x19] = a4\n 52326: u8 [a0 + 0x18] = a3\n 52329: u8 [a0 + 0x10] = a2\n 52332: u8 [a0 + 11] = 0\n 52335: u8 [a0 + 10] = 0\n 52338: u8 [a0 + 9] = 0\n 52341: u8 [a0 + 7] = 0\n 52344: u8 [a0 + 6] = 0\n 52347: u8 [a0 + 5] = 0\n 52350: u8 [a0 + 4] = 0\n 52353: u8 [a0 + 3] = 0\n 52356: u8 [a0 + 2] = 0\n 52359: u8 [a0 + 1] = 0\n 52362: u8 [a0 + 0] = 0\n 52364: a3 = a2 >> 0x38\n 52367: u8 [a0 + 0x17] = a3\n 52370: a3 = a2 >> 0x30\n 52373: u8 [a0 + 0x16] = a3\n 52376: a3 = a2 >> 0x28\n 52379: u8 [a0 + 0x15] = a3\n 52382: a3 = a2 >> 0x20\n 52385: u8 [a0 + 0x14] = a3\n 52388: a3 = a2 >> 0x18\n 52391: u8 [a0 + 0x13] = a3\n 52394: a3 = a2 >> 0x10\n 52397: u8 [a0 + 0x12] = a3\n 52400: a2 = a2 >> 0x8\n 52403: u8 [a0 + 0x11] = a2\n 52406: u8 [a0 + 0x8] = a1\n 52409: a2 = a1 >> 0x38\n 52412: u8 [a0 + 0xf] = a2\n 52415: a2 = a1 >> 0x30\n 52418: u8 [a0 + 0xe] = a2\n 52421: a2 = a1 >> 0x28\n 52424: u8 [a0 + 0xd] = a2\n 52427: a1 = a1 >> 0x20\n 52430: u8 [a0 + 0xc] = a1\n 52433: a1 = u64 [sp + 0x1d8]\n 52437: a1 = a1 + 0x1\n 52440: a0 = a1 <u 0x1\n 52443: a2 = u64 [sp + 0x1d0]\n 52447: a2 = a2 + a0\n 52450: u64 [sp + 0x1d8] = a1\n 52454: u64 [sp + 0x1d0] = a2\n 52458: a0 = a1 | a2\n 52461: a0 = a0 <u 0x1\n 52464: a1 = u64 [sp + 0x1c0]\n 52468: a0 = a0 + a1\n 52471: a1 = a0 <u a1\n 52474: a2 = u64 [sp + 0x1c8]\n 52478: a2 = a2 + a1\n 52481: u64 [sp + 0x1c8] = a2\n 52485: u64 [sp + 0x1c0] = a0\n 52489: jump @660\n      : @676 (gas: 23)\n 52492: a0 = u64 [sp + 0x8]\n 52495: a1 = u64 [sp + 0x88]\n 52499: u64 [a0 + 0x20] = a1\n 52502: a1 = u64 [sp + 0x10]\n 52505: u64 [a0] = a1\n 52507: a1 = u64 [sp + 0x90]\n 52511: u64 [a0 + 0x28] = a1\n 52514: a1 = u64 [sp + 0x18]\n 52517: u64 [a0 + 0x8] = a1\n 52520: a1 = u64 [sp + 0x78]\n 52523: u64 [a0 + 0x30] = a1\n 52526: a1 = u64 [sp + 0x20]\n 52529: u64 [a0 + 0x10] = a1\n 52532: a1 = u64 [sp + 0x80]\n 52536: u64 [a0 + 0x38] = a1\n 52539: a1 = u64 [sp + 0x28]\n 52542: u64 [a0 + 0x18] = a1\n 52545: sp = s0 + 0xfffffffffffffcc0\n 52549: ra = u64 [sp + 0x338]\n 52553: s0 = u64 [sp + 0x330]\n 52557: s1 = u64 [sp + 0x328]\n 52561: sp = sp + 0x340\n 52565: ret\n      : @677 (gas: 1)\n 52567: trap\n      : @678 (gas: 8)\n 52568: u64 [sp + 592] = 0\n 52572: u64 [sp + 584] = 0\n 52576: u64 [sp + 576] = 0\n 52580: a0 = 0x4e487b7100000000\n 52590: a1 = sp + 0x240\n 52594: u64 [sp + 0x258] = a0\n 52598: a0 = 0\n 52600: ra = 614, jump @8\n      : @679 [@dyn 307] (gas: 8)\n 52607: u64 [sp + 568] = 0\n 52611: u64 [sp + 560] = 0\n 52615: u64 [sp + 544] = 0x32\n 52620: a0 = 0x4\n 52623: a1 = sp + 0x220\n 52627: u64 [sp + 552] = 0\n 52631: ra = 0x26a\n 52635: jump @8\n      : @680 (gas: 8)\n 52639: u64 [sp + 528] = 0\n 52643: u64 [sp + 520] = 0\n 52647: u64 [sp + 512] = 0\n 52651: a0 = 0x4e487b7100000000\n 52661: a1 = sp + 0x200\n 52665: u64 [sp + 0x218] = a0\n 52669: a0 = 0\n 52671: ra = 616, jump @8\n      : @681 [@dyn 308] (gas: 7)\n 52678: u64 [sp + 504] = 0\n 52682: u64 [sp + 496] = 0\n 52686: u64 [sp + 480] = 0x32\n 52691: a0 = 0x4\n 52694: a1 = sp + 0x1e0\n 52698: u64 [sp + 488] = 0\n 52702: ra = 618, jump @8\n      : @682 [@dyn 309] (gas: 3)\n 52709: a1 = 0x24\n 52712: a0 = 0\n 52714: ra = 620, jump @0\n      : @683 [@dyn 310] (gas: 6)\n 52721: i32 a1 = a0 + 0\n 52723: a0 = 0x1\n 52726: a2 = 0x24\n 52729: ra = 0x26e\n 52733: ecalli 14 // 'seal_return'\n 52735: fallthrough\n      : @684 [@dyn 311] (gas: 45)\n 52736: sp = sp + 0xffffffffffffff90\n 52739: u64 [sp + 0x68] = ra\n 52742: u64 [sp + 0x60] = s0\n 52745: u64 [sp + 0x58] = s1\n 52748: s0 = sp + 0x70\n 52751: sp = sp & 0xfffffffffffffff0\n 52754: a3 = u64 [a1 + 0x18]\n 52757: u64 [sp + 0x8] = a3\n 52760: a4 = u64 [a2 + 0x18]\n 52763: t2 = u64 [a1]\n 52765: u64 [sp] = t2\n 52767: a3 = u64 [a1 + 0x8]\n 52770: s1 = u64 [a2 + 0x8]\n 52773: a5 = u64 [a2]\n 52775: t1 = u64 [a1 + 0x10]\n 52778: t0 = u64 [a2 + 0x10]\n 52781: a2 = s1 + a3\n 52784: t2 = t2 + a5\n 52787: a5 = t2 <u a5\n 52790: a2 = a2 + a5\n 52793: ra = a2 ^ s1\n 52796: s1 = a2 <u s1\n 52799: s1 = a5 if ra == 0\n 52802: a1 = t0 + t1\n 52805: a5 = u64 [sp + 0x8]\n 52808: a5 = a5 + a4\n 52811: a4 = a1 <u t0\n 52814: a4 = a4 + a5\n 52817: a5 = a1 + s1\n 52820: a1 = a5 <u a1\n 52823: ra = a4 + a1\n 52826: a4 = a2 ^ a3\n 52829: a3 = a2 <u a3\n 52832: a1 = u64 [sp]\n 52834: s1 = t2 <u a1\n 52837: s1 = a3 if a4 != 0\n 52840: t0 = a5 <u t1\n 52843: a1 = u64 [sp + 0x8]\n 52846: a4 = ra ^ a1\n 52849: a3 = ra <u a1\n 52852: a3 = t0 if a4 == 0\n 52855: a1 = a5 ^ t1\n 52858: a1 = a1 | a4\n 52861: s1 = a3 if a1 != 0\n 52864: jump @686 if s1 != 0\n      : @685 (gas: 10)\n 52867: u64 [a0] = t2\n 52869: u64 [a0 + 0x8] = a2\n 52872: u64 [a0 + 0x10] = a5\n 52875: u64 [a0 + 0x18] = ra\n 52878: sp = s0 + 0xffffffffffffff90\n 52881: ra = u64 [sp + 0x68]\n 52884: s0 = u64 [sp + 0x60]\n 52887: s1 = u64 [sp + 0x58]\n 52890: sp = sp + 0x70\n 52893: ret\n      : @686 (gas: 8)\n 52895: u64 [sp + 64] = 0\n 52898: u64 [sp + 56] = 0\n 52901: u64 [sp + 48] = 0\n 52904: a0 = 0x4e487b7100000000\n 52914: a1 = sp + 0x30\n 52917: u64 [sp + 0x48] = a0\n 52920: a0 = 0\n 52922: ra = 624, jump @8\n      : @687 [@dyn 312] (gas: 7)\n 52929: u64 [sp + 40] = 0\n 52932: u64 [sp + 32] = 0\n 52935: u64 [sp + 16] = 0x11\n 52939: a0 = 0x4\n 52942: a1 = sp + 0x10\n 52945: u64 [sp + 24] = 0\n 52948: ra = 626, jump @8\n      : @688 [@dyn 313] (gas: 3)\n 52955: a1 = 0x24\n 52958: a0 = 0\n 52960: ra = 628, jump @0\n      : @689 [@dyn 314] (gas: 6)\n 52967: i32 a1 = a0 + 0\n 52969: a0 = 0x1\n 52972: a2 = 0x24\n 52975: ra = 0x276\n 52979: ecalli 14 // 'seal_return'\n 52981: fallthrough\n      : @690 [@dyn 315] (gas: 18)\n 52982: sp = sp + 0xfffffffffffffc60\n 52986: u64 [sp + 0x398] = ra\n 52990: u64 [sp + 0x390] = s0\n 52994: u64 [sp + 0x388] = s1\n 52998: s0 = sp + 0x3a0\n 53002: sp = sp & 0xffffffffffffffe0\n 53005: s1 = sp\n 53007: a1 = u64 [a0]\n 53009: u64 [s1 + 0x158] = a1\n 53013: a1 = u64 [a0 + 0x8]\n 53016: u64 [s1 + 0x150] = a1\n 53020: a1 = u64 [a0 + 0x10]\n 53023: u64 [s1 + 0x148] = a1\n 53027: a0 = u64 [a0 + 0x18]\n 53030: u64 [s1 + 0x140] = a0\n 53034: a1 = 0x20\n 53037: a0 = 0\n 53039: ra = 632, jump @0\n      : @691 [@dyn 316] (gas: 103)\n 53046: a1 = u64 [s1 + 0x140]\n 53050: a1 = reverse a1\n 53052: a2 = u64 [s1 + 0x148]\n 53056: a2 = reverse a2\n 53058: a3 = u64 [s1 + 0x150]\n 53062: a3 = reverse a3\n 53064: a4 = u64 [s1 + 0x158]\n 53068: a4 = reverse a4\n 53070: u8 [a0 + 0x18] = a4\n 53073: u8 [a0 + 0x10] = a3\n 53076: u8 [a0 + 0x8] = a2\n 53079: u8 [a0] = a1\n 53081: a5 = a4 >> 0x38\n 53084: u64 [s1 + 0x130] = a5\n 53088: u8 [a0 + 0x1f] = a5\n 53091: a5 = a4 >> 0x30\n 53094: u64 [s1 + 0x128] = a5\n 53098: u8 [a0 + 0x1e] = a5\n 53101: a5 = a4 >> 0x28\n 53104: u64 [s1 + 0x120] = a5\n 53108: u8 [a0 + 0x1d] = a5\n 53111: a5 = a4 >> 0x20\n 53114: u64 [s1 + 0x118] = a5\n 53118: u8 [a0 + 0x1c] = a5\n 53121: a5 = a4 >> 0x18\n 53124: u64 [s1 + 0x110] = a5\n 53128: u8 [a0 + 0x1b] = a5\n 53131: a5 = a4 >> 0x10\n 53134: u64 [s1 + 0x108] = a5\n 53138: u8 [a0 + 0x1a] = a5\n 53141: u64 [s1 + 0x138] = a4\n 53145: a4 = a4 >> 0x8\n 53148: u64 [s1 + 0x100] = a4\n 53152: u8 [a0 + 0x19] = a4\n 53155: a4 = a3 >> 0x38\n 53158: u64 [s1 + 0xf8] = a4\n 53162: u8 [a0 + 0x17] = a4\n 53165: a4 = a3 >> 0x30\n 53168: u64 [s1 + 0xf0] = a4\n 53172: u8 [a0 + 0x16] = a4\n 53175: a4 = a3 >> 0x28\n 53178: u64 [s1 + 0xe8] = a4\n 53182: u8 [a0 + 0x15] = a4\n 53185: a4 = a3 >> 0x20\n 53188: u64 [s1 + 0xe0] = a4\n 53192: u8 [a0 + 0x14] = a4\n 53195: a4 = a3 >> 0x18\n 53198: u64 [s1 + 0xd8] = a4\n 53202: u8 [a0 + 0x13] = a4\n 53205: a4 = a3 >> 0x10\n 53208: u64 [s1 + 0xd0] = a4\n 53212: u8 [a0 + 0x12] = a4\n 53215: u64 [s1 + 0x140] = a3\n 53219: a3 = a3 >> 0x8\n 53222: u64 [s1 + 0xc8] = a3\n 53226: u8 [a0 + 0x11] = a3\n 53229: a3 = a2 >> 0x38\n 53232: u64 [s1 + 0xc0] = a3\n 53236: u8 [a0 + 0xf] = a3\n 53239: a3 = a2 >> 0x30\n 53242: u64 [s1 + 0xb8] = a3\n 53246: u8 [a0 + 0xe] = a3\n 53249: a3 = a2 >> 0x28\n 53252: u64 [s1 + 0xb0] = a3\n 53256: u8 [a0 + 0xd] = a3\n 53259: a3 = a2 >> 0x20\n 53262: u64 [s1 + 0xa8] = a3\n 53266: u8 [a0 + 0xc] = a3\n 53269: a3 = a2 >> 0x18\n 53272: u64 [s1 + 0xa0] = a3\n 53276: u8 [a0 + 0xb] = a3\n 53279: a3 = a2 >> 0x10\n 53282: u64 [s1 + 0x98] = a3\n 53286: u8 [a0 + 0xa] = a3\n 53289: u64 [s1 + 0x148] = a2\n 53293: a2 = a2 >> 0x8\n 53296: u64 [s1 + 0x90] = a2\n 53300: u8 [a0 + 0x9] = a2\n 53303: a2 = a1 >> 0x38\n 53306: u64 [s1 + 0x88] = a2\n 53310: u8 [a0 + 0x7] = a2\n 53313: a2 = a1 >> 0x30\n 53316: u64 [s1 + 0x80] = a2\n 53320: u8 [a0 + 0x6] = a2\n 53323: a2 = a1 >> 0x28\n 53326: u64 [s1 + 0x78] = a2\n 53329: u8 [a0 + 0x5] = a2\n 53332: a2 = a1 >> 0x20\n 53335: u64 [s1 + 0x70] = a2\n 53338: u8 [a0 + 0x4] = a2\n 53341: a2 = a1 >> 0x18\n 53344: u64 [s1 + 0x68] = a2\n 53347: u8 [a0 + 0x3] = a2\n 53350: a2 = a1 >> 0x10\n 53353: u64 [s1 + 0x60] = a2\n 53356: u8 [a0 + 0x2] = a2\n 53359: u64 [s1 + 0x150] = a1\n 53363: a1 = a1 >> 0x8\n 53366: u64 [s1 + 0x58] = a1\n 53369: u8 [a0 + 0x1] = a1\n 53372: a0 = 0x20\n 53375: a1 = 0x20\n 53378: ra = 634, jump @0\n      : @692 [@dyn 317] (gas: 35)\n 53385: u8 [a0 + 31] = 0\n 53388: u8 [a0 + 30] = 0\n 53391: u8 [a0 + 29] = 0\n 53394: u8 [a0 + 28] = 0\n 53397: u8 [a0 + 27] = 0\n 53400: u8 [a0 + 26] = 0\n 53403: u8 [a0 + 25] = 0\n 53406: u8 [a0 + 24] = 0\n 53409: u8 [a0 + 23] = 0\n 53412: u8 [a0 + 22] = 0\n 53415: u8 [a0 + 21] = 0\n 53418: u8 [a0 + 20] = 0\n 53421: u8 [a0 + 19] = 0\n 53424: u8 [a0 + 18] = 0\n 53427: u8 [a0 + 17] = 0\n 53430: u8 [a0 + 16] = 0\n 53433: u8 [a0 + 15] = 0\n 53436: u8 [a0 + 14] = 0\n 53439: u8 [a0 + 13] = 0\n 53442: u8 [a0 + 12] = 0\n 53445: u8 [a0 + 11] = 0\n 53448: u8 [a0 + 10] = 0\n 53451: u8 [a0 + 9] = 0\n 53454: u8 [a0 + 8] = 0\n 53457: u8 [a0 + 7] = 0\n 53460: u8 [a0 + 6] = 0\n 53463: u8 [a0 + 5] = 0\n 53466: u8 [a0 + 4] = 0\n 53469: u8 [a0 + 3] = 0\n 53472: u8 [a0 + 2] = 0\n 53475: u8 [a0 + 1] = 0\n 53478: u8 [a0 + 0] = 0\n 53480: a1 = 0x40\n 53483: a0 = 0\n 53485: ra = 636, jump @0\n      : @693 [@dyn 318] (gas: 28)\n 53492: i32 a0 = a0 + 0\n 53494: i32 a2 = s1 + 0x340\n 53498: a1 = 0x40\n 53501: ecalli 9 // 'hash_keccak_256'\n 53503: a0 = u64 [s1 + 0x358]\n 53507: a1 = u64 [s1 + 0x350]\n 53511: a2 = u64 [s1 + 0x348]\n 53515: a3 = u64 [s1 + 0x340]\n 53519: a0 = reverse a0\n 53521: a1 = reverse a1\n 53523: a2 = reverse a2\n 53525: a3 = reverse a3\n 53527: u64 [s1 + 0x318] = a3\n 53531: u64 [s1 + 0x310] = a2\n 53535: u64 [s1 + 0x308] = a1\n 53539: u64 [s1 + 0x300] = a0\n 53543: u64 [s1 + 856] = 0\n 53547: u64 [s1 + 848] = 0\n 53551: u64 [s1 + 840] = 0\n 53555: u64 [s1 + 832] = 0\n 53559: u32 [s1 + 800] = 0x20\n 53564: i32 a1 = s1 + 0x300\n 53568: i32 a3 = s1 + 0x340\n 53572: i32 a4 = s1 + 0x320\n 53576: a2 = 0xffffffffffffffff\n 53579: a0 = 0\n 53581: ecalli 8 // 'get_storage'\n 53583: fallthrough\n      : @694 (gas: 11)\n 53584: a0 = u64 [s1 + 0x350]\n 53588: a2 = u64 [s1 + 0x348]\n 53592: a1 = u64 [s1 + 0x340]\n 53596: u64 [s1 + 0x48] = a0\n 53599: a0 = a0 << 0x20\n 53602: a0 = a0 >> 0x20\n 53605: u64 [s1 + 0x50] = a1\n 53608: u64 [s1 + 0x40] = a2\n 53611: a1 = a1 | a2\n 53614: a0 = a0 | a1\n 53617: jump @729 if a0 == 0\n      : @695 (gas: 11)\n 53621: i32 a0 = s1 + 0x260\n 53625: ecalli 5 // 'caller'\n 53627: a0 = u32 [s1 + 0x270]\n 53631: u64 [s1 + 0x38] = a0\n 53634: a0 = u64 [s1 + 0x268]\n 53638: u64 [s1 + 0x30] = a0\n 53641: a0 = u64 [s1 + 0x260]\n 53645: u64 [s1 + 0x28] = a0\n 53648: a0 = 0x40\n 53651: a1 = 0x20\n 53654: ra = 638, jump @0\n      : @696 [@dyn 319] (gas: 103)\n 53661: a1 = u8 [a0 + 0x11]\n 53664: a2 = u8 [a0 + 0x10]\n 53667: a3 = u8 [a0 + 0x12]\n 53670: a4 = u8 [a0 + 0x13]\n 53673: a1 = a1 << 0x8\n 53676: a1 = a1 | a2\n 53679: a3 = a3 << 0x10\n 53682: a4 = a4 << 0x18\n 53685: a3 = a3 | a4\n 53688: a1 = a1 | a3\n 53691: a2 = u8 [a0 + 0x15]\n 53694: a3 = u8 [a0 + 0x14]\n 53697: a4 = u8 [a0 + 0x16]\n 53700: a5 = u8 [a0 + 0x17]\n 53703: a2 = a2 << 0x8\n 53706: a2 = a2 | a3\n 53709: a4 = a4 << 0x10\n 53712: a5 = a5 << 0x18\n 53715: a4 = a4 | a5\n 53718: a2 = a2 | a4\n 53721: a2 = a2 << 0x20\n 53724: t0 = a2 | a1\n 53727: a2 = u8 [a0 + 0x1]\n 53730: a3 = u8 [a0]\n 53732: a4 = u8 [a0 + 0x2]\n 53735: a5 = u8 [a0 + 0x3]\n 53738: a2 = a2 << 0x8\n 53741: a2 = a2 | a3\n 53744: a4 = a4 << 0x10\n 53747: a5 = a5 << 0x18\n 53750: a4 = a4 | a5\n 53753: a2 = a2 | a4\n 53756: a3 = u8 [a0 + 0x5]\n 53759: a4 = u8 [a0 + 0x4]\n 53762: a5 = u8 [a0 + 0x6]\n 53765: a1 = u8 [a0 + 0x7]\n 53768: a3 = a3 << 0x8\n 53771: a3 = a3 | a4\n 53774: a5 = a5 << 0x10\n 53777: a1 = a1 << 0x18\n 53780: a1 = a1 | a5\n 53783: a1 = a1 | a3\n 53786: a1 = a1 << 0x20\n 53789: t1 = a1 | a2\n 53792: a1 = u8 [a0 + 0x19]\n 53795: a3 = u8 [a0 + 0x18]\n 53798: a4 = u8 [a0 + 0x1a]\n 53801: a5 = u8 [a0 + 0x1b]\n 53804: a1 = a1 << 0x8\n 53807: a1 = a1 | a3\n 53810: a4 = a4 << 0x10\n 53813: a5 = a5 << 0x18\n 53816: a4 = a4 | a5\n 53819: a1 = a1 | a4\n 53822: a3 = u8 [a0 + 0x1d]\n 53825: a4 = u8 [a0 + 0x1c]\n 53828: a5 = u8 [a0 + 0x1e]\n 53831: a2 = u8 [a0 + 0x1f]\n 53834: a3 = a3 << 0x8\n 53837: a3 = a3 | a4\n 53840: a5 = a5 << 0x10\n 53843: a2 = a2 << 0x18\n 53846: a2 = a2 | a5\n 53849: a2 = a2 | a3\n 53852: a2 = a2 << 0x20\n 53855: a3 = a2 | a1\n 53858: a1 = u8 [a0 + 0x9]\n 53861: a2 = u8 [a0 + 0x8]\n 53864: a4 = u8 [a0 + 0xa]\n 53867: a5 = u8 [a0 + 0xb]\n 53870: a1 = a1 << 0x8\n 53873: a1 = a1 | a2\n 53876: a4 = a4 << 0x10\n 53879: a5 = a5 << 0x18\n 53882: a4 = a4 | a5\n 53885: a1 = a1 | a4\n 53888: a2 = u8 [a0 + 0xd]\n 53891: a4 = u8 [a0 + 0xc]\n 53894: a5 = u8 [a0 + 0xe]\n 53897: a0 = u8 [a0 + 0xf]\n 53900: a2 = a2 << 0x8\n 53903: a2 = a2 | a4\n 53906: a5 = a5 << 0x10\n 53909: a0 = a0 << 0x18\n 53912: a0 = a0 | a5\n 53915: a0 = a0 | a2\n 53918: a0 = a0 << 0x20\n 53921: a0 = a0 | a1\n 53924: a2 = reverse a0\n 53926: a3 = reverse a3\n 53928: a0 = reverse t1\n 53930: a1 = reverse t0\n 53932: u64 [s1 + 0x18] = a0\n 53935: u64 [s1 + 0x10] = a1\n 53938: a0 = a0 | a1\n 53941: a1 = a3 | a2\n 53944: a1 = a1 | a0\n 53947: a1 = a1 >> 0x20\n 53950: u64 [s1 + 0x20] = a2\n 53953: a0 = a0 | a2\n 53956: a0 = a0 << 0x20\n 53959: a0 = a0 | a1\n 53962: jump @698 if a0 == 0\n      : @697 (gas: 1)\n 53965: jump @741\n      : @698 (gas: 5)\n 53968: u64 [s1 + 0x8] = a3\n 53971: i32 a0 = a3 + 0\n 53973: u64 [s1 + 0x158] = a0\n 53977: a1 = 0x20\n 53980: ra = 640, jump @0\n      : @699 [@dyn 320] (gas: 56)\n 53987: u8 [a0 + 31] = 0\n 53990: u8 [a0 + 30] = 0\n 53993: u8 [a0 + 29] = 0\n 53996: u8 [a0 + 28] = 0\n 53999: u8 [a0 + 27] = 0\n 54002: u8 [a0 + 26] = 0\n 54005: u8 [a0 + 25] = 0\n 54008: u8 [a0 + 24] = 0\n 54011: u8 [a0 + 23] = 0\n 54014: u8 [a0 + 22] = 0\n 54017: u8 [a0 + 21] = 0\n 54020: u8 [a0 + 20] = 0\n 54023: u8 [a0 + 19] = 0\n 54026: u8 [a0 + 18] = 0\n 54029: u8 [a0 + 17] = 0\n 54032: u8 [a0 + 16] = 0\n 54035: u8 [a0 + 15] = 0\n 54038: u8 [a0 + 14] = 0\n 54041: u8 [a0 + 13] = 0\n 54044: u8 [a0 + 12] = 0\n 54047: u8 [a0 + 11] = 0\n 54050: u8 [a0 + 10] = 0\n 54053: u8 [a0 + 9] = 0\n 54056: u8 [a0 + 8] = 0\n 54059: u8 [a0 + 7] = 0\n 54062: u8 [a0 + 6] = 0\n 54065: u8 [a0 + 5] = 0\n 54068: u8 [a0 + 4] = 0\n 54071: u8 [a0 + 3] = 0x83\n 54076: u8 [a0 + 2] = 0x48\n 54080: u8 [a0 + 1] = 0x5d\n 54084: u8 [a0 + 0] = 0x8\n 54087: ecalli 11 // 'ref_time_left'\n 54089: a0 = u64 [s1 + 0x40]\n 54092: a0 = reverse a0\n 54094: a1 = a0 << 0x20\n 54097: a2 = u64 [s1 + 0x48]\n 54100: a2 = reverse a2\n 54102: a2 = a2 >> 0x20\n 54105: a1 = a1 | a2\n 54108: a2 = u64 [s1 + 0x50]\n 54111: a2 = reverse a2\n 54113: a3 = a2 << 0x20\n 54116: a0 = a0 >> 0x20\n 54119: a0 = a0 | a3\n 54122: a2 = a2 >> 0x20\n 54125: u64 [s1 + 0x288] = a0\n 54129: u64 [s1 + 0x280] = a1\n 54133: u32 [s1 + 0x290] = a2\n 54137: u64 [s1 + 696] = 0\n 54141: u64 [s1 + 688] = 0\n 54145: u64 [s1 + 680] = 0\n 54149: u64 [s1 + 672] = 0\n 54153: a1 = 0x4\n 54156: a0 = u64 [s1 + 0x158]\n 54160: ra = 642, jump @0\n      : @700 [@dyn 321] (gas: 4)\n 54167: u64 [s1 + 0x50] = a0\n 54170: a1 = 0x20\n 54173: a0 = u64 [s1 + 0x158]\n 54177: ra = 644, jump @0\n      : @701 [@dyn 322] (gas: 31)\n 54184: u32 [s1 + 704] = 0x20\n 54189: u64 [s1 + 760] = 0\n 54193: u64 [s1 + 752] = 0\n 54197: u64 [s1 + 744] = 0\n 54201: u64 [s1 + 736] = 0\n 54205: a1 = s1 + 0x280\n 54209: a1 = a1 << 0x20\n 54212: a1 = a1 >> 0x20\n 54215: a2 = 0x1800000000\n 54225: t0 = a1 | a2\n 54228: a1 = s1 + 0x2a0\n 54232: a1 = a1 << 0x20\n 54235: a1 = a1 >> 0x20\n 54238: a2 = s1 + 0x2e0\n 54242: a2 = a2 << 0x20\n 54245: a3 = a2 | a1\n 54248: a1 = u64 [s1 + 0x50]\n 54251: a1 = a1 << 0x20\n 54254: a1 = a1 >> 0x20\n 54257: a2 = 0x400000000\n 54267: a4 = a1 | a2\n 54270: a0 = a0 << 0x20\n 54273: a0 = a0 >> 0x20\n 54276: a1 = s1 + 0x2c0\n 54280: a1 = a1 << 0x20\n 54283: a5 = a1 | a0\n 54286: a1 = 0xffffffffffffffff\n 54289: a2 = 0xffffffffffffffff\n 54292: a0 = t0\n 54294: ecalli 1 // 'call'\n 54296: fallthrough\n      : @702 (gas: 1)\n 54297: jump @734 if a0 != 0\n      : @703 (gas: 2)\n 54301: ecalli 13 // 'return_data_size'\n 54303: fallthrough\n      : @704 (gas: 2)\n 54304: a1 = 0x20\n 54307: jump @706 if a0 >=u a1\n      : @705 (gas: 3)\n 54310: ecalli 13 // 'return_data_size'\n 54312: a1 = a0\n 54314: fallthrough\n      : @706 (gas: 28)\n 54315: a3 = u64 [s1 + 0x20]\n 54318: t0 = u64 [s1 + 0x18]\n 54321: a2 = u64 [s1 + 0x8]\n 54324: a5 = u64 [s1 + 0x10]\n 54327: a0 = a1 + 0x1f\n 54330: u64 [s1 + 0x48] = a1\n 54333: a1 = a0 <u a1\n 54336: u64 [s1 + 80] = 0\n 54339: a1 = a1 & 0x1\n 54342: a0 = a0 & 0xffffffffffffffe0\n 54345: a2 = a2 + a0\n 54348: u64 [s1 + 0x40] = a2\n 54351: a0 = a2 <u a0\n 54354: a2 = a1 + a5\n 54357: a4 = a2 + a0\n 54360: a2 = a4 ^ a1\n 54363: a1 = a4 <u a1\n 54366: a1 = a0 if a2 == 0\n 54369: a1 = a1 + a3\n 54372: a0 = a1 <u a3\n 54375: a0 = a0 + t0\n 54378: u64 [s1 + 0x18] = a1\n 54381: u64 [s1 + 0x10] = a0\n 54384: a0 = a0 | a1\n 54387: u64 [s1 + 0x20] = a4\n 54390: a1 = a4 <u 0x1\n 54393: a1 = 0 if a0 != 0\n 54395: jump @708 if a1 != 0\n      : @707 (gas: 1)\n 54398: jump @744\n      : @708 (gas: 3)\n 54401: a0 = 0x40\n 54404: a1 = 0x20\n 54407: ra = 646, jump @0\n      : @709 [@dyn 323] (gas: 80)\n 54414: a1 = u64 [s1 + 0x10]\n 54417: a1 = reverse a1\n 54419: a2 = u64 [s1 + 0x18]\n 54422: a2 = reverse a2\n 54424: a3 = u64 [s1 + 0x20]\n 54427: a3 = reverse a3\n 54429: a4 = u64 [s1 + 0x40]\n 54432: a4 = reverse a4\n 54434: u8 [a0 + 0x18] = a4\n 54437: a5 = a4 >> 0x38\n 54440: u8 [a0 + 0x1f] = a5\n 54443: a5 = a4 >> 0x30\n 54446: u8 [a0 + 0x1e] = a5\n 54449: a5 = a4 >> 0x28\n 54452: u8 [a0 + 0x1d] = a5\n 54455: a5 = a4 >> 0x20\n 54458: u8 [a0 + 0x1c] = a5\n 54461: a5 = a4 >> 0x18\n 54464: u8 [a0 + 0x1b] = a5\n 54467: a5 = a4 >> 0x10\n 54470: u8 [a0 + 0x1a] = a5\n 54473: a4 = a4 >> 0x8\n 54476: u8 [a0 + 0x19] = a4\n 54479: u8 [a0 + 0x10] = a3\n 54482: a4 = a3 >> 0x38\n 54485: u8 [a0 + 0x17] = a4\n 54488: a4 = a3 >> 0x30\n 54491: u8 [a0 + 0x16] = a4\n 54494: a4 = a3 >> 0x28\n 54497: u8 [a0 + 0x15] = a4\n 54500: a4 = a3 >> 0x20\n 54503: u8 [a0 + 0x14] = a4\n 54506: a4 = a3 >> 0x18\n 54509: u8 [a0 + 0x13] = a4\n 54512: a4 = a3 >> 0x10\n 54515: u8 [a0 + 0x12] = a4\n 54518: a3 = a3 >> 0x8\n 54521: u8 [a0 + 0x11] = a3\n 54524: u8 [a0 + 0x8] = a2\n 54527: a3 = a2 >> 0x38\n 54530: u8 [a0 + 0xf] = a3\n 54533: a3 = a2 >> 0x30\n 54536: u8 [a0 + 0xe] = a3\n 54539: a3 = a2 >> 0x28\n 54542: u8 [a0 + 0xd] = a3\n 54545: a3 = a2 >> 0x20\n 54548: u8 [a0 + 0xc] = a3\n 54551: a3 = a2 >> 0x18\n 54554: u8 [a0 + 0xb] = a3\n 54557: a3 = a2 >> 0x10\n 54560: u8 [a0 + 0xa] = a3\n 54563: a2 = a2 >> 0x8\n 54566: u8 [a0 + 0x9] = a2\n 54569: u8 [a0] = a1\n 54571: a2 = a1 >> 0x38\n 54574: u8 [a0 + 0x7] = a2\n 54577: a2 = a1 >> 0x30\n 54580: u8 [a0 + 0x6] = a2\n 54583: a2 = a1 >> 0x28\n 54586: u8 [a0 + 0x5] = a2\n 54589: a2 = a1 >> 0x20\n 54592: u8 [a0 + 0x4] = a2\n 54595: a2 = a1 >> 0x18\n 54598: u8 [a0 + 0x3] = a2\n 54601: a2 = a1 >> 0x10\n 54604: u8 [a0 + 0x2] = a2\n 54607: a1 = a1 >> 0x8\n 54610: a5 = u64 [s1 + 0x50]\n 54613: a2 = a5 >u 0\n 54615: a3 = u64 [s1 + 0x48]\n 54618: a3 = a3 <u 0x20\n 54621: a3 = a3 ^ 0x1\n 54624: a3 = a2 if a5 != 0\n 54627: a2 = a5 >u 0\n 54629: a4 = a5 >u 0\n 54631: a4 = a2 if a5 == 0\n 54634: a2 = a5 | a5\n 54637: a4 = a3 if a2 == 0\n 54640: u8 [a0 + 0x1] = a1\n 54643: jump @711 if a4 != 0\n      : @710 (gas: 1)\n 54646: jump @742\n      : @711 (gas: 3)\n 54649: a1 = 0x20\n 54652: a0 = u64 [s1 + 0x158]\n 54656: ra = 648, jump @0\n      : @712 [@dyn 324] (gas: 54)\n 54663: a1 = u8 [a0 + 0x9]\n 54666: a2 = u8 [a0 + 0x8]\n 54669: a3 = u8 [a0 + 0xa]\n 54672: a4 = u8 [a0 + 0xb]\n 54675: a1 = a1 << 0x8\n 54678: a1 = a1 | a2\n 54681: a3 = a3 << 0x10\n 54684: a4 = a4 << 0x18\n 54687: a3 = a3 | a4\n 54690: a1 = a1 | a3\n 54693: a2 = u8 [a0 + 0xd]\n 54696: a3 = u8 [a0 + 0xc]\n 54699: a4 = u8 [a0 + 0xe]\n 54702: a5 = u8 [a0 + 0xf]\n 54705: a2 = a2 << 0x8\n 54708: a2 = a2 | a3\n 54711: a4 = a4 << 0x10\n 54714: a5 = a5 << 0x18\n 54717: a4 = a4 | a5\n 54720: a2 = a2 | a4\n 54723: a2 = a2 << 0x20\n 54726: t0 = a2 | a1\n 54729: a1 = u8 [a0 + 0x1]\n 54732: a3 = u8 [a0]\n 54734: a4 = u8 [a0 + 0x2]\n 54737: a5 = u8 [a0 + 0x3]\n 54740: a1 = a1 << 0x8\n 54743: a1 = a1 | a3\n 54746: a4 = a4 << 0x10\n 54749: a5 = a5 << 0x18\n 54752: a4 = a4 | a5\n 54755: a1 = a1 | a4\n 54758: a3 = u8 [a0 + 0x5]\n 54761: a4 = u8 [a0 + 0x4]\n 54764: a5 = u8 [a0 + 0x6]\n 54767: a2 = u8 [a0 + 0x7]\n 54770: a3 = a3 << 0x8\n 54773: a3 = a3 | a4\n 54776: a5 = a5 << 0x10\n 54779: a2 = a2 << 0x18\n 54782: a2 = a2 | a5\n 54785: a2 = a2 | a3\n 54788: a2 = a2 << 0x20\n 54791: a1 = a1 | a2\n 54794: t1 = reverse a1\n 54796: t0 = reverse t0\n 54798: a3 = 0x100000000\n 54808: a3 = t0 ^ a3\n 54811: a3 = a3 | t1\n 54814: a4 = t0 >> 0x20\n 54817: a4 = a4 <u 0x1\n 54820: a4 = 0 if t1 != 0\n 54822: a4 = 0 if a3 == 0\n 54824: jump @742 if a4 == 0\n      : @713 (gas: 66)\n 54828: a3 = u8 [a0 + 0x19]\n 54831: a4 = u8 [a0 + 0x18]\n 54834: a5 = u8 [a0 + 0x1a]\n 54837: a1 = u8 [a0 + 0x1b]\n 54840: a3 = a3 << 0x8\n 54843: a3 = a3 | a4\n 54846: a5 = a5 << 0x10\n 54849: a1 = a1 << 0x18\n 54852: a1 = a1 | a5\n 54855: a1 = a1 | a3\n 54858: a3 = u8 [a0 + 0x1d]\n 54861: a4 = u8 [a0 + 0x1c]\n 54864: a5 = u8 [a0 + 0x1e]\n 54867: a2 = u8 [a0 + 0x1f]\n 54870: a3 = a3 << 0x8\n 54873: a3 = a3 | a4\n 54876: a5 = a5 << 0x10\n 54879: a2 = a2 << 0x18\n 54882: a2 = a2 | a5\n 54885: a2 = a2 | a3\n 54888: a2 = a2 << 0x20\n 54891: a3 = a2 | a1\n 54894: a1 = u8 [a0 + 0x11]\n 54897: a2 = u8 [a0 + 0x10]\n 54900: a4 = u8 [a0 + 0x12]\n 54903: a5 = u8 [a0 + 0x13]\n 54906: a1 = a1 << 0x8\n 54909: a1 = a1 | a2\n 54912: a4 = a4 << 0x10\n 54915: a5 = a5 << 0x18\n 54918: a4 = a4 | a5\n 54921: a1 = a1 | a4\n 54924: a2 = u8 [a0 + 0x15]\n 54927: a4 = u8 [a0 + 0x14]\n 54930: a5 = u8 [a0 + 0x16]\n 54933: a0 = u8 [a0 + 0x17]\n 54936: a2 = a2 << 0x8\n 54939: a2 = a2 | a4\n 54942: a5 = a5 << 0x10\n 54945: a0 = a0 << 0x18\n 54948: a0 = a0 | a5\n 54951: a0 = a0 | a2\n 54954: a0 = a0 << 0x20\n 54957: a0 = a0 | a1\n 54960: a0 = reverse a0\n 54962: a1 = reverse a3\n 54964: a2 = u64 [s1 + 0x28]\n 54967: a2 = reverse a2\n 54969: a3 = a2 << 0x20\n 54972: a4 = u64 [s1 + 0x30]\n 54975: a4 = reverse a4\n 54977: a5 = a4 >> 0x20\n 54980: a3 = a3 | a5\n 54983: a4 = a4 << 0x20\n 54986: a5 = u64 [s1 + 0x38]\n 54989: a5 = reverse a5\n 54991: a5 = a5 >> 0x20\n 54994: a4 = a4 | a5\n 54997: a2 = a2 >> 0x20\n 55000: a2 = t0 ^ a2\n 55003: a1 = a1 ^ a4\n 55006: a1 = a1 | a2\n 55009: a0 = a0 ^ a3\n 55012: a0 = a0 | t1\n 55015: a0 = a0 | a1\n 55018: jump @735 if a0 != 0\n      : @714 (gas: 22)\n 55022: a0 = sp + 0xffffffffffffffe0\n 55025: a0 = a0 & 0xffffffffffffffe0\n 55028: u64 [s1 + 0x158] = a0\n 55032: sp = a0\n 55034: u64 [a0 + 24] = 0\n 55037: u64 [a0 + 16] = 0\n 55040: u64 [a0 + 8] = 0\n 55043: u64 [a0 + 0] = 0\n 55045: i32 a0 = a0 + 0\n 55047: ecalli 17 // 'value_transferred'\n 55049: a1 = u64 [s1 + 0x158]\n 55053: a0 = u64 [a1 + 0x18]\n 55056: u64 [s1 + 0x38] = a0\n 55059: a0 = u64 [a1 + 0x10]\n 55062: u64 [s1 + 0x30] = a0\n 55065: a0 = u64 [a1]\n 55067: u64 [s1 + 0x28] = a0\n 55070: a0 = u64 [a1 + 0x8]\n 55073: u64 [s1 + 0x20] = a0\n 55076: a1 = 0x20\n 55079: a0 = 0\n 55081: ra = 650, jump @0\n      : @715 [@dyn 325] (gas: 67)\n 55088: a1 = u64 [s1 + 0x130]\n 55092: u8 [a0 + 0x1f] = a1\n 55095: a1 = u64 [s1 + 0x128]\n 55099: u8 [a0 + 0x1e] = a1\n 55102: a1 = u64 [s1 + 0x120]\n 55106: u8 [a0 + 0x1d] = a1\n 55109: a1 = u64 [s1 + 0x118]\n 55113: u8 [a0 + 0x1c] = a1\n 55116: a1 = u64 [s1 + 0x110]\n 55120: u8 [a0 + 0x1b] = a1\n 55123: a1 = u64 [s1 + 0x108]\n 55127: u8 [a0 + 0x1a] = a1\n 55130: a1 = u64 [s1 + 0x100]\n 55134: u8 [a0 + 0x19] = a1\n 55137: a1 = u64 [s1 + 0x138]\n 55141: u8 [a0 + 0x18] = a1\n 55144: a1 = u64 [s1 + 0xf8]\n 55148: u8 [a0 + 0x17] = a1\n 55151: a1 = u64 [s1 + 0xf0]\n 55155: u8 [a0 + 0x16] = a1\n 55158: a1 = u64 [s1 + 0xe8]\n 55162: u8 [a0 + 0x15] = a1\n 55165: a1 = u64 [s1 + 0xe0]\n 55169: u8 [a0 + 0x14] = a1\n 55172: a1 = u64 [s1 + 0xd8]\n 55176: u8 [a0 + 0x13] = a1\n 55179: a1 = u64 [s1 + 0xd0]\n 55183: u8 [a0 + 0x12] = a1\n 55186: a1 = u64 [s1 + 0xc8]\n 55190: u8 [a0 + 0x11] = a1\n 55193: a1 = u64 [s1 + 0x140]\n 55197: u8 [a0 + 0x10] = a1\n 55200: a1 = u64 [s1 + 0xc0]\n 55204: u8 [a0 + 0xf] = a1\n 55207: a1 = u64 [s1 + 0xb8]\n 55211: u8 [a0 + 0xe] = a1\n 55214: a1 = u64 [s1 + 0xb0]\n 55218: u8 [a0 + 0xd] = a1\n 55221: a1 = u64 [s1 + 0xa8]\n 55225: u8 [a0 + 0xc] = a1\n 55228: a1 = u64 [s1 + 0xa0]\n 55232: u8 [a0 + 0xb] = a1\n 55235: a1 = u64 [s1 + 0x98]\n 55239: u8 [a0 + 0xa] = a1\n 55242: a1 = u64 [s1 + 0x90]\n 55246: u8 [a0 + 0x9] = a1\n 55249: a1 = u64 [s1 + 0x148]\n 55253: u8 [a0 + 0x8] = a1\n 55256: a1 = u64 [s1 + 0x88]\n 55260: u8 [a0 + 0x7] = a1\n 55263: a1 = u64 [s1 + 0x80]\n 55267: u8 [a0 + 0x6] = a1\n 55270: a1 = u64 [s1 + 0x78]\n 55273: u8 [a0 + 0x5] = a1\n 55276: a1 = u64 [s1 + 0x70]\n 55279: u8 [a0 + 0x4] = a1\n 55282: a1 = u64 [s1 + 0x68]\n 55285: u8 [a0 + 0x3] = a1\n 55288: a1 = u64 [s1 + 0x60]\n 55291: u8 [a0 + 0x2] = a1\n 55294: a1 = u64 [s1 + 0x58]\n 55297: u8 [a0 + 0x1] = a1\n 55300: a1 = u64 [s1 + 0x150]\n 55304: u8 [a0] = a1\n 55306: a0 = 0x20\n 55309: a1 = 0x20\n 55312: ra = 652, jump @0\n      : @716 [@dyn 326] (gas: 35)\n 55319: u8 [a0 + 31] = 0x2\n 55323: u8 [a0 + 30] = 0\n 55326: u8 [a0 + 29] = 0\n 55329: u8 [a0 + 28] = 0\n 55332: u8 [a0 + 27] = 0\n 55335: u8 [a0 + 26] = 0\n 55338: u8 [a0 + 25] = 0\n 55341: u8 [a0 + 24] = 0\n 55344: u8 [a0 + 23] = 0\n 55347: u8 [a0 + 22] = 0\n 55350: u8 [a0 + 21] = 0\n 55353: u8 [a0 + 20] = 0\n 55356: u8 [a0 + 19] = 0\n 55359: u8 [a0 + 18] = 0\n 55362: u8 [a0 + 17] = 0\n 55365: u8 [a0 + 16] = 0\n 55368: u8 [a0 + 15] = 0\n 55371: u8 [a0 + 14] = 0\n 55374: u8 [a0 + 13] = 0\n 55377: u8 [a0 + 12] = 0\n 55380: u8 [a0 + 11] = 0\n 55383: u8 [a0 + 10] = 0\n 55386: u8 [a0 + 9] = 0\n 55389: u8 [a0 + 8] = 0\n 55392: u8 [a0 + 7] = 0\n 55395: u8 [a0 + 6] = 0\n 55398: u8 [a0 + 5] = 0\n 55401: u8 [a0 + 4] = 0\n 55404: u8 [a0 + 3] = 0\n 55407: u8 [a0 + 2] = 0\n 55410: u8 [a0 + 1] = 0\n 55413: u8 [a0 + 0] = 0\n 55415: a1 = 0x40\n 55418: a0 = 0\n 55420: ra = 654, jump @0\n      : @717 [@dyn 327] (gas: 32)\n 55427: i32 a0 = a0 + 0\n 55429: i32 a2 = s1 + 0x340\n 55433: a1 = 0x40\n 55436: ecalli 9 // 'hash_keccak_256'\n 55438: a0 = u64 [s1 + 0x358]\n 55442: a1 = u64 [s1 + 0x350]\n 55446: a2 = u64 [s1 + 0x348]\n 55450: a3 = u64 [s1 + 0x340]\n 55454: a0 = reverse a0\n 55456: a1 = reverse a1\n 55458: a2 = reverse a2\n 55460: a3 = reverse a3\n 55462: u64 [s1 + 0x40] = a3\n 55465: u64 [s1 + 0x318] = a3\n 55469: u64 [s1 + 0x48] = a2\n 55472: u64 [s1 + 0x310] = a2\n 55476: u64 [s1 + 0x50] = a1\n 55479: u64 [s1 + 0x308] = a1\n 55483: u64 [s1 + 0x158] = a0\n 55487: u64 [s1 + 0x300] = a0\n 55491: u64 [s1 + 856] = 0\n 55495: u64 [s1 + 848] = 0\n 55499: u64 [s1 + 840] = 0\n 55503: u64 [s1 + 832] = 0\n 55507: u32 [s1 + 800] = 0x20\n 55512: i32 a1 = s1 + 0x300\n 55516: i32 a3 = s1 + 0x340\n 55520: i32 a4 = s1 + 0x320\n 55524: a2 = 0xffffffffffffffff\n 55527: a0 = 0\n 55529: ecalli 8 // 'get_storage'\n 55531: fallthrough\n      : @718 (gas: 39)\n 55532: a4 = u64 [s1 + 0x348]\n 55536: a2 = u64 [s1 + 0x340]\n 55540: t0 = u64 [s1 + 0x358]\n 55544: t2 = u64 [s1 + 0x350]\n 55548: a5 = u64 [s1 + 0x20]\n 55551: a5 = a5 + a4\n 55554: a1 = u64 [s1 + 0x28]\n 55557: a1 = a1 + a2\n 55560: u64 [s1 + 0x28] = a1\n 55563: a3 = a1 <u a2\n 55566: a5 = a5 + a3\n 55569: t1 = a5 ^ a4\n 55572: u64 [s1 + 0x20] = a5\n 55575: a4 = a5 <u a4\n 55578: a5 = u64 [s1 + 0x30]\n 55581: a5 = a5 + t2\n 55584: a1 = u64 [s1 + 0x38]\n 55587: a1 = a1 + t0\n 55590: a2 = a5 <u t2\n 55593: a1 = a1 + a2\n 55596: a2 = a3\n 55598: a2 = a4 if t1 != 0\n 55601: a0 = a5 + a2\n 55604: a2 = a0 <u a5\n 55607: a5 = a1 + a2\n 55610: a1 = a3 ^ 0x1\n 55613: a2 = a4 ^ 0x1\n 55616: a1 = a2 if t1 != 0\n 55619: a2 = a0 <u t2\n 55622: a3 = a5 ^ t0\n 55625: u64 [s1 + 0x30] = a5\n 55628: a4 = a5 <u t0\n 55631: a4 = a2 if a3 == 0\n 55634: u64 [s1 + 0x38] = a0\n 55637: a0 = a0 ^ t2\n 55640: a0 = a0 | a3\n 55643: a2 = a4 ^ 0x1\n 55646: a1 = a2 if a0 != 0\n 55649: jump @746 if a1 == 0\n      : @719 (gas: 63)\n 55653: a0 = u64 [s1 + 0x48]\n 55656: u64 [s1 + 0x310] = a0\n 55660: a0 = u64 [s1 + 0x50]\n 55663: u64 [s1 + 0x308] = a0\n 55667: a0 = u64 [s1 + 0x158]\n 55671: u64 [s1 + 0x300] = a0\n 55675: a0 = u64 [s1 + 0x40]\n 55678: u64 [s1 + 0x318] = a0\n 55682: u64 [s1 + 856] = 0\n 55686: u64 [s1 + 848] = 0\n 55690: u64 [s1 + 840] = 0\n 55694: u64 [s1 + 832] = 0\n 55698: u32 [s1 + 800] = 0x20\n 55703: i32 a1 = s1 + 0x300\n 55707: i32 a3 = s1 + 0x340\n 55711: i32 a4 = s1 + 0x320\n 55715: a2 = 0xffffffffffffffff\n 55718: a0 = 0\n 55720: ecalli 8 // 'get_storage'\n 55722: a0 = u64 [s1 + 0x40]\n 55725: u64 [s1 + 0x318] = a0\n 55729: a0 = u64 [s1 + 0x48]\n 55732: u64 [s1 + 0x310] = a0\n 55736: a0 = u64 [s1 + 0x50]\n 55739: u64 [s1 + 0x308] = a0\n 55743: a0 = u64 [s1 + 0x158]\n 55747: u64 [s1 + 0x300] = a0\n 55751: a0 = u64 [s1 + 0x30]\n 55754: u64 [s1 + 0x358] = a0\n 55758: a0 = u64 [s1 + 0x38]\n 55761: u64 [s1 + 0x350] = a0\n 55765: a0 = u64 [s1 + 0x20]\n 55768: u64 [s1 + 0x348] = a0\n 55772: a0 = u64 [s1 + 0x28]\n 55775: u64 [s1 + 0x340] = a0\n 55779: i32 a1 = s1 + 0x300\n 55783: i32 a3 = s1 + 0x340\n 55787: a2 = 0xffffffffffffffff\n 55790: a4 = 0x20\n 55793: a0 = 0\n 55795: ecalli 16 // 'set_storage'\n 55797: a0 = sp + 0xffffffffffffffe0\n 55800: a0 = a0 & 0xffffffffffffffe0\n 55803: u64 [s1 + 0x158] = a0\n 55807: sp = a0\n 55809: u64 [a0 + 24] = 0\n 55812: u64 [a0 + 16] = 0\n 55815: u64 [a0 + 8] = 0\n 55818: u64 [a0 + 0] = 0\n 55820: i32 a0 = a0 + 0\n 55822: ecalli 17 // 'value_transferred'\n 55824: a1 = u64 [s1 + 0x158]\n 55828: a0 = u64 [a1 + 0x18]\n 55831: u64 [s1 + 0x38] = a0\n 55834: a0 = u64 [a1 + 0x10]\n 55837: u64 [s1 + 0x40] = a0\n 55840: a0 = u64 [a1 + 0x8]\n 55843: u64 [s1 + 0x48] = a0\n 55846: a0 = u64 [a1]\n 55848: u64 [s1 + 0x50] = a0\n 55851: a1 = 0x20\n 55854: a0 = 0\n 55856: ra = 656, jump @0\n      : @720 [@dyn 328] (gas: 67)\n 55863: a1 = u64 [s1 + 0x130]\n 55867: u8 [a0 + 0x1f] = a1\n 55870: a1 = u64 [s1 + 0x128]\n 55874: u8 [a0 + 0x1e] = a1\n 55877: a1 = u64 [s1 + 0x120]\n 55881: u8 [a0 + 0x1d] = a1\n 55884: a1 = u64 [s1 + 0x118]\n 55888: u8 [a0 + 0x1c] = a1\n 55891: a1 = u64 [s1 + 0x110]\n 55895: u8 [a0 + 0x1b] = a1\n 55898: a1 = u64 [s1 + 0x108]\n 55902: u8 [a0 + 0x1a] = a1\n 55905: a1 = u64 [s1 + 0x100]\n 55909: u8 [a0 + 0x19] = a1\n 55912: a1 = u64 [s1 + 0xf8]\n 55916: u8 [a0 + 0x17] = a1\n 55919: a1 = u64 [s1 + 0xf0]\n 55923: u8 [a0 + 0x16] = a1\n 55926: a1 = u64 [s1 + 0xe8]\n 55930: u8 [a0 + 0x15] = a1\n 55933: a1 = u64 [s1 + 0xe0]\n 55937: u8 [a0 + 0x14] = a1\n 55940: a1 = u64 [s1 + 0xd8]\n 55944: u8 [a0 + 0x13] = a1\n 55947: a1 = u64 [s1 + 0xd0]\n 55951: u8 [a0 + 0x12] = a1\n 55954: a1 = u64 [s1 + 0xc8]\n 55958: u8 [a0 + 0x11] = a1\n 55961: a1 = u64 [s1 + 0xc0]\n 55965: u8 [a0 + 0xf] = a1\n 55968: a1 = u64 [s1 + 0xb8]\n 55972: u8 [a0 + 0xe] = a1\n 55975: a1 = u64 [s1 + 0xb0]\n 55979: u8 [a0 + 0xd] = a1\n 55982: a1 = u64 [s1 + 0xa8]\n 55986: u8 [a0 + 0xc] = a1\n 55989: a1 = u64 [s1 + 0xa0]\n 55993: u8 [a0 + 0xb] = a1\n 55996: a1 = u64 [s1 + 0x98]\n 56000: u8 [a0 + 0xa] = a1\n 56003: a1 = u64 [s1 + 0x90]\n 56007: u8 [a0 + 0x9] = a1\n 56010: a1 = u64 [s1 + 0x88]\n 56014: u8 [a0 + 0x7] = a1\n 56017: a1 = u64 [s1 + 0x80]\n 56021: u8 [a0 + 0x6] = a1\n 56024: a1 = u64 [s1 + 0x78]\n 56027: u8 [a0 + 0x5] = a1\n 56030: a1 = u64 [s1 + 0x70]\n 56033: u8 [a0 + 0x4] = a1\n 56036: a1 = u64 [s1 + 0x68]\n 56039: u8 [a0 + 0x3] = a1\n 56042: a1 = u64 [s1 + 0x60]\n 56045: u8 [a0 + 0x2] = a1\n 56048: a1 = u64 [s1 + 0x58]\n 56051: u8 [a0 + 0x1] = a1\n 56054: a1 = u64 [s1 + 0x138]\n 56058: u8 [a0 + 0x18] = a1\n 56061: a1 = u64 [s1 + 0x140]\n 56065: u8 [a0 + 0x10] = a1\n 56068: a1 = u64 [s1 + 0x148]\n 56072: u8 [a0 + 0x8] = a1\n 56075: a1 = u64 [s1 + 0x150]\n 56079: u8 [a0] = a1\n 56081: a0 = 0x20\n 56084: a1 = 0x20\n 56087: ra = 658, jump @0\n      : @721 [@dyn 329] (gas: 35)\n 56094: u8 [a0 + 31] = 0x2\n 56098: u8 [a0 + 30] = 0\n 56101: u8 [a0 + 29] = 0\n 56104: u8 [a0 + 28] = 0\n 56107: u8 [a0 + 27] = 0\n 56110: u8 [a0 + 26] = 0\n 56113: u8 [a0 + 25] = 0\n 56116: u8 [a0 + 24] = 0\n 56119: u8 [a0 + 23] = 0\n 56122: u8 [a0 + 22] = 0\n 56125: u8 [a0 + 21] = 0\n 56128: u8 [a0 + 20] = 0\n 56131: u8 [a0 + 19] = 0\n 56134: u8 [a0 + 18] = 0\n 56137: u8 [a0 + 17] = 0\n 56140: u8 [a0 + 16] = 0\n 56143: u8 [a0 + 15] = 0\n 56146: u8 [a0 + 14] = 0\n 56149: u8 [a0 + 13] = 0\n 56152: u8 [a0 + 12] = 0\n 56155: u8 [a0 + 11] = 0\n 56158: u8 [a0 + 10] = 0\n 56161: u8 [a0 + 9] = 0\n 56164: u8 [a0 + 8] = 0\n 56167: u8 [a0 + 7] = 0\n 56170: u8 [a0 + 6] = 0\n 56173: u8 [a0 + 5] = 0\n 56176: u8 [a0 + 4] = 0\n 56179: u8 [a0 + 3] = 0\n 56182: u8 [a0 + 2] = 0\n 56185: u8 [a0 + 1] = 0\n 56188: u8 [a0 + 0] = 0\n 56190: a1 = 0x40\n 56193: a0 = 0\n 56195: ra = 660, jump @0\n      : @722 [@dyn 330] (gas: 38)\n 56202: i32 a0 = a0 + 0\n 56204: i32 a2 = s1 + 0x340\n 56208: a1 = 0x40\n 56211: ecalli 9 // 'hash_keccak_256'\n 56213: a0 = u64 [s1 + 0x358]\n 56217: a1 = u64 [s1 + 0x350]\n 56221: a2 = u64 [s1 + 0x348]\n 56225: a3 = u64 [s1 + 0x340]\n 56229: a0 = reverse a0\n 56231: a1 = reverse a1\n 56233: a2 = reverse a2\n 56235: a3 = reverse a3\n 56237: u64 [s1 + 0x318] = a3\n 56241: u64 [s1 + 0x310] = a2\n 56245: u64 [s1 + 0x308] = a1\n 56249: u64 [s1 + 0x300] = a0\n 56253: u64 [s1 + 856] = 0\n 56257: u64 [s1 + 848] = 0\n 56261: u64 [s1 + 840] = 0\n 56265: u64 [s1 + 832] = 0\n 56269: u32 [s1 + 800] = 0x20\n 56274: i32 a1 = s1 + 0x300\n 56278: i32 a3 = s1 + 0x340\n 56282: i32 a4 = s1 + 0x320\n 56286: a2 = 0xffffffffffffffff\n 56289: a0 = 0\n 56291: ecalli 8 // 'get_storage'\n 56293: a0 = u64 [s1 + 0x358]\n 56297: u64 [s1 + 0x100] = a0\n 56301: a0 = u64 [s1 + 0x350]\n 56305: u64 [s1 + 0x108] = a0\n 56309: a0 = u64 [s1 + 0x348]\n 56313: u64 [s1 + 0x110] = a0\n 56317: a0 = u64 [s1 + 0x340]\n 56321: u64 [s1 + 0x118] = a0\n 56325: a0 = 0x40\n 56328: a1 = 0x20\n 56331: ra = 662, jump @0\n      : @723 [@dyn 331] (gas: 103)\n 56338: a1 = u8 [a0 + 0x11]\n 56341: a2 = u8 [a0 + 0x10]\n 56344: a3 = u8 [a0 + 0x12]\n 56347: a4 = u8 [a0 + 0x13]\n 56350: a1 = a1 << 0x8\n 56353: a1 = a1 | a2\n 56356: a3 = a3 << 0x10\n 56359: a4 = a4 << 0x18\n 56362: a3 = a3 | a4\n 56365: a1 = a1 | a3\n 56368: a2 = u8 [a0 + 0x15]\n 56371: a3 = u8 [a0 + 0x14]\n 56374: a4 = u8 [a0 + 0x16]\n 56377: a5 = u8 [a0 + 0x17]\n 56380: a2 = a2 << 0x8\n 56383: a2 = a2 | a3\n 56386: a4 = a4 << 0x10\n 56389: a5 = a5 << 0x18\n 56392: a4 = a4 | a5\n 56395: a2 = a2 | a4\n 56398: a2 = a2 << 0x20\n 56401: t0 = a2 | a1\n 56404: a2 = u8 [a0 + 0x1]\n 56407: a3 = u8 [a0]\n 56409: a4 = u8 [a0 + 0x2]\n 56412: a5 = u8 [a0 + 0x3]\n 56415: a2 = a2 << 0x8\n 56418: a2 = a2 | a3\n 56421: a4 = a4 << 0x10\n 56424: a5 = a5 << 0x18\n 56427: a4 = a4 | a5\n 56430: a2 = a2 | a4\n 56433: a3 = u8 [a0 + 0x5]\n 56436: a4 = u8 [a0 + 0x4]\n 56439: a5 = u8 [a0 + 0x6]\n 56442: a1 = u8 [a0 + 0x7]\n 56445: a3 = a3 << 0x8\n 56448: a3 = a3 | a4\n 56451: a5 = a5 << 0x10\n 56454: a1 = a1 << 0x18\n 56457: a1 = a1 | a5\n 56460: a1 = a1 | a3\n 56463: a1 = a1 << 0x20\n 56466: t1 = a1 | a2\n 56469: a1 = u8 [a0 + 0x19]\n 56472: a3 = u8 [a0 + 0x18]\n 56475: a4 = u8 [a0 + 0x1a]\n 56478: a5 = u8 [a0 + 0x1b]\n 56481: a1 = a1 << 0x8\n 56484: a1 = a1 | a3\n 56487: a4 = a4 << 0x10\n 56490: a5 = a5 << 0x18\n 56493: a4 = a4 | a5\n 56496: a1 = a1 | a4\n 56499: a3 = u8 [a0 + 0x1d]\n 56502: a4 = u8 [a0 + 0x1c]\n 56505: a5 = u8 [a0 + 0x1e]\n 56508: a2 = u8 [a0 + 0x1f]\n 56511: a3 = a3 << 0x8\n 56514: a3 = a3 | a4\n 56517: a5 = a5 << 0x10\n 56520: a2 = a2 << 0x18\n 56523: a2 = a2 | a5\n 56526: a2 = a2 | a3\n 56529: a2 = a2 << 0x20\n 56532: a3 = a2 | a1\n 56535: a1 = u8 [a0 + 0x9]\n 56538: a2 = u8 [a0 + 0x8]\n 56541: a4 = u8 [a0 + 0xa]\n 56544: a5 = u8 [a0 + 0xb]\n 56547: a1 = a1 << 0x8\n 56550: a1 = a1 | a2\n 56553: a4 = a4 << 0x10\n 56556: a5 = a5 << 0x18\n 56559: a4 = a4 | a5\n 56562: a1 = a1 | a4\n 56565: a2 = u8 [a0 + 0xd]\n 56568: a4 = u8 [a0 + 0xc]\n 56571: a5 = u8 [a0 + 0xe]\n 56574: a0 = u8 [a0 + 0xf]\n 56577: a2 = a2 << 0x8\n 56580: a2 = a2 | a4\n 56583: a5 = a5 << 0x10\n 56586: a0 = a0 << 0x18\n 56589: a0 = a0 | a5\n 56592: a0 = a0 | a2\n 56595: a0 = a0 << 0x20\n 56598: a0 = a0 | a1\n 56601: a4 = reverse a0\n 56603: a2 = reverse a3\n 56605: a1 = reverse t1\n 56607: a0 = reverse t0\n 56609: u64 [s1 + 0x130] = a0\n 56613: u64 [s1 + 0x120] = a1\n 56617: a0 = a0 | a1\n 56620: a1 = a2 | a4\n 56623: a1 = a1 | a0\n 56626: a1 = a1 >> 0x20\n 56629: u64 [s1 + 0x128] = a4\n 56633: a0 = a0 | a4\n 56636: a0 = a0 << 0x20\n 56639: a0 = a0 | a1\n 56642: jump @741 if a0 != 0\n      : @724 (gas: 5)\n 56646: i32 a0 = a2 + 0\n 56648: a1 = 0x20\n 56651: u64 [s1 + 0x158] = a0\n 56655: u64 [s1 + 0xf8] = a2\n 56659: ra = 664, jump @0\n      : @725 [@dyn 332] (gas: 78)\n 56666: a1 = u64 [s1 + 0x38]\n 56669: a1 = reverse a1\n 56671: a2 = u64 [s1 + 0x40]\n 56674: a2 = reverse a2\n 56676: a3 = u64 [s1 + 0x48]\n 56679: a3 = reverse a3\n 56681: a4 = u64 [s1 + 0x50]\n 56684: a4 = reverse a4\n 56686: a5 = a4 >> 0x38\n 56689: u8 [a0 + 0x1f] = a5\n 56692: a5 = a4 >> 0x30\n 56695: u8 [a0 + 0x1e] = a5\n 56698: a5 = a4 >> 0x28\n 56701: u8 [a0 + 0x1d] = a5\n 56704: a5 = a4 >> 0x20\n 56707: u8 [a0 + 0x1c] = a5\n 56710: a5 = a4 >> 0x18\n 56713: u8 [a0 + 0x1b] = a5\n 56716: a5 = a4 >> 0x10\n 56719: u8 [a0 + 0x1a] = a5\n 56722: a5 = a4 >> 0x8\n 56725: u8 [a0 + 0x19] = a5\n 56728: u8 [a0 + 0x18] = a4\n 56731: u8 [a0 + 0x10] = a3\n 56734: a4 = a3 >> 0x38\n 56737: u8 [a0 + 0x17] = a4\n 56740: a4 = a3 >> 0x30\n 56743: u8 [a0 + 0x16] = a4\n 56746: a4 = a3 >> 0x28\n 56749: u8 [a0 + 0x15] = a4\n 56752: a4 = a3 >> 0x20\n 56755: u8 [a0 + 0x14] = a4\n 56758: a4 = a3 >> 0x18\n 56761: u8 [a0 + 0x13] = a4\n 56764: a4 = a3 >> 0x10\n 56767: u8 [a0 + 0x12] = a4\n 56770: a3 = a3 >> 0x8\n 56773: u8 [a0 + 0x11] = a3\n 56776: u8 [a0 + 0x8] = a2\n 56779: a3 = a2 >> 0x38\n 56782: u8 [a0 + 0xf] = a3\n 56785: a3 = a2 >> 0x30\n 56788: u8 [a0 + 0xe] = a3\n 56791: a3 = a2 >> 0x28\n 56794: u8 [a0 + 0xd] = a3\n 56797: a3 = a2 >> 0x20\n 56800: u8 [a0 + 0xc] = a3\n 56803: a3 = a2 >> 0x18\n 56806: u8 [a0 + 0xb] = a3\n 56809: a3 = a2 >> 0x10\n 56812: u8 [a0 + 0xa] = a3\n 56815: a2 = a2 >> 0x8\n 56818: u8 [a0 + 0x9] = a2\n 56821: u8 [a0] = a1\n 56823: a2 = a1 >> 0x38\n 56826: u8 [a0 + 0x7] = a2\n 56829: a2 = a1 >> 0x30\n 56832: u8 [a0 + 0x6] = a2\n 56835: a2 = a1 >> 0x28\n 56838: u8 [a0 + 0x5] = a2\n 56841: a2 = a1 >> 0x20\n 56844: u8 [a0 + 0x4] = a2\n 56847: a2 = a1 >> 0x18\n 56850: u8 [a0 + 0x3] = a2\n 56853: a2 = a1 >> 0x10\n 56856: u8 [a0 + 0x2] = a2\n 56859: a1 = a1 >> 0x8\n 56862: a2 = u64 [s1 + 0x128]\n 56866: a3 = u64 [s1 + 0x120]\n 56870: a2 = a2 | a3\n 56873: a3 = 0xffffffe0\n 56883: a4 = u64 [s1 + 0xf8]\n 56887: a3 = a4 <u a3\n 56890: a4 = u64 [s1 + 0x130]\n 56894: a3 = 0 if a4 != 0\n 56896: a3 = 0 if a2 != 0\n 56898: u8 [a0 + 0x1] = a1\n 56901: jump @741 if a3 == 0\n      : @726 (gas: 4)\n 56905: a0 = u64 [s1 + 0x158]\n 56909: i32 a0 = a0 + 0x20\n 56912: a1 = 0x20\n 56915: ra = 666, jump @0\n      : @727 [@dyn 333] (gas: 71)\n 56922: a1 = u64 [s1 + 0x100]\n 56926: a1 = reverse a1\n 56928: a2 = u64 [s1 + 0x108]\n 56932: a2 = reverse a2\n 56934: a3 = u64 [s1 + 0x110]\n 56938: a3 = reverse a3\n 56940: a4 = u64 [s1 + 0x118]\n 56944: a4 = reverse a4\n 56946: a5 = a4 >> 0x38\n 56949: u8 [a0 + 0x1f] = a5\n 56952: a5 = a4 >> 0x30\n 56955: u8 [a0 + 0x1e] = a5\n 56958: a5 = a4 >> 0x28\n 56961: u8 [a0 + 0x1d] = a5\n 56964: a5 = a4 >> 0x20\n 56967: u8 [a0 + 0x1c] = a5\n 56970: a5 = a4 >> 0x18\n 56973: u8 [a0 + 0x1b] = a5\n 56976: a5 = a4 >> 0x10\n 56979: u8 [a0 + 0x1a] = a5\n 56982: a5 = a4 >> 0x8\n 56985: u8 [a0 + 0x19] = a5\n 56988: u8 [a0 + 0x18] = a4\n 56991: u8 [a0 + 0x10] = a3\n 56994: a4 = a3 >> 0x38\n 56997: u8 [a0 + 0x17] = a4\n 57000: a4 = a3 >> 0x30\n 57003: u8 [a0 + 0x16] = a4\n 57006: a4 = a3 >> 0x28\n 57009: u8 [a0 + 0x15] = a4\n 57012: a4 = a3 >> 0x20\n 57015: u8 [a0 + 0x14] = a4\n 57018: a4 = a3 >> 0x18\n 57021: u8 [a0 + 0x13] = a4\n 57024: a4 = a3 >> 0x10\n 57027: u8 [a0 + 0x12] = a4\n 57030: a3 = a3 >> 0x8\n 57033: u8 [a0 + 0x11] = a3\n 57036: u8 [a0 + 0x8] = a2\n 57039: a3 = a2 >> 0x38\n 57042: u8 [a0 + 0xf] = a3\n 57045: a3 = a2 >> 0x30\n 57048: u8 [a0 + 0xe] = a3\n 57051: a3 = a2 >> 0x28\n 57054: u8 [a0 + 0xd] = a3\n 57057: a3 = a2 >> 0x20\n 57060: u8 [a0 + 0xc] = a3\n 57063: a3 = a2 >> 0x18\n 57066: u8 [a0 + 0xb] = a3\n 57069: a3 = a2 >> 0x10\n 57072: u8 [a0 + 0xa] = a3\n 57075: a2 = a2 >> 0x8\n 57078: u8 [a0 + 0x9] = a2\n 57081: u8 [a0] = a1\n 57083: a2 = a1 >> 0x38\n 57086: u8 [a0 + 0x7] = a2\n 57089: a2 = a1 >> 0x30\n 57092: u8 [a0 + 0x6] = a2\n 57095: a2 = a1 >> 0x28\n 57098: u8 [a0 + 0x5] = a2\n 57101: a2 = a1 >> 0x20\n 57104: u8 [a0 + 0x4] = a2\n 57107: a2 = a1 >> 0x18\n 57110: u8 [a0 + 0x3] = a2\n 57113: a2 = a1 >> 0x10\n 57116: u8 [a0 + 0x2] = a2\n 57119: a1 = a1 >> 0x8\n 57122: u8 [a0 + 0x1] = a1\n 57125: a1 = 0x40\n 57128: a0 = u64 [s1 + 0x158]\n 57132: ra = 668, jump @0\n      : @728 [@dyn 334] (gas: 27)\n 57139: a1 = u64 [0x20040]\n 57144: a2 = u64 [0x20048]\n 57149: a3 = u64 [0x20050]\n 57154: a4 = u64 [0x20058]\n 57159: u64 [s1 + 0x358] = a1\n 57163: u64 [s1 + 0x350] = a2\n 57167: u64 [s1 + 0x348] = a3\n 57171: u64 [s1 + 0x340] = a4\n 57175: a1 = u64 [s1 + 0x138]\n 57179: u64 [s1 + 0x378] = a1\n 57183: a1 = u64 [s1 + 0x140]\n 57187: u64 [s1 + 0x370] = a1\n 57191: a1 = u64 [s1 + 0x148]\n 57195: u64 [s1 + 0x368] = a1\n 57199: a1 = u64 [s1 + 0x150]\n 57203: u64 [s1 + 0x360] = a1\n 57207: i32 a2 = a0 + 0\n 57209: i32 a0 = s1 + 0x340\n 57213: a1 = 0x2\n 57216: a3 = 0x40\n 57219: ecalli 7 // 'deposit_event'\n 57221: sp = s0 + 0xfffffffffffffc60\n 57225: ra = u64 [sp + 0x398]\n 57229: s0 = u64 [sp + 0x390]\n 57233: s1 = u64 [sp + 0x388]\n 57237: sp = sp + 0x3a0\n 57241: ret\n      : @729 (gas: 3)\n 57243: a0 = 0x40\n 57246: a1 = 0x20\n 57249: ra = 670, jump @0\n      : @730 [@dyn 335] (gas: 104)\n 57256: a1 = u8 [a0 + 0x11]\n 57259: a2 = u8 [a0 + 0x10]\n 57262: a3 = u8 [a0 + 0x12]\n 57265: a4 = u8 [a0 + 0x13]\n 57268: a1 = a1 << 0x8\n 57271: a1 = a1 | a2\n 57274: a3 = a3 << 0x10\n 57277: a4 = a4 << 0x18\n 57280: a3 = a3 | a4\n 57283: a1 = a1 | a3\n 57286: a2 = u8 [a0 + 0x15]\n 57289: a3 = u8 [a0 + 0x14]\n 57292: a4 = u8 [a0 + 0x16]\n 57295: a5 = u8 [a0 + 0x17]\n 57298: a2 = a2 << 0x8\n 57301: a2 = a2 | a3\n 57304: a4 = a4 << 0x10\n 57307: a5 = a5 << 0x18\n 57310: a4 = a4 | a5\n 57313: a2 = a2 | a4\n 57316: a2 = a2 << 0x20\n 57319: t0 = a2 | a1\n 57322: a2 = u8 [a0 + 0x1]\n 57325: a3 = u8 [a0]\n 57327: a4 = u8 [a0 + 0x2]\n 57330: a5 = u8 [a0 + 0x3]\n 57333: a2 = a2 << 0x8\n 57336: a2 = a2 | a3\n 57339: a4 = a4 << 0x10\n 57342: a5 = a5 << 0x18\n 57345: a4 = a4 | a5\n 57348: a2 = a2 | a4\n 57351: a3 = u8 [a0 + 0x5]\n 57354: a4 = u8 [a0 + 0x4]\n 57357: a5 = u8 [a0 + 0x6]\n 57360: a1 = u8 [a0 + 0x7]\n 57363: a3 = a3 << 0x8\n 57366: a3 = a3 | a4\n 57369: a5 = a5 << 0x10\n 57372: a1 = a1 << 0x18\n 57375: a1 = a1 | a5\n 57378: a1 = a1 | a3\n 57381: a1 = a1 << 0x20\n 57384: t1 = a1 | a2\n 57387: a1 = u8 [a0 + 0x19]\n 57390: a3 = u8 [a0 + 0x18]\n 57393: a4 = u8 [a0 + 0x1a]\n 57396: a5 = u8 [a0 + 0x1b]\n 57399: a1 = a1 << 0x8\n 57402: a1 = a1 | a3\n 57405: a4 = a4 << 0x10\n 57408: a5 = a5 << 0x18\n 57411: a4 = a4 | a5\n 57414: a1 = a1 | a4\n 57417: a3 = u8 [a0 + 0x1d]\n 57420: a4 = u8 [a0 + 0x1c]\n 57423: a5 = u8 [a0 + 0x1e]\n 57426: a2 = u8 [a0 + 0x1f]\n 57429: a3 = a3 << 0x8\n 57432: a3 = a3 | a4\n 57435: a5 = a5 << 0x10\n 57438: a2 = a2 << 0x18\n 57441: a2 = a2 | a5\n 57444: a2 = a2 | a3\n 57447: a2 = a2 << 0x20\n 57450: a3 = a2 | a1\n 57453: a1 = u8 [a0 + 0x9]\n 57456: a2 = u8 [a0 + 0x8]\n 57459: a4 = u8 [a0 + 0xa]\n 57462: a5 = u8 [a0 + 0xb]\n 57465: a1 = a1 << 0x8\n 57468: a1 = a1 | a2\n 57471: a4 = a4 << 0x10\n 57474: a5 = a5 << 0x18\n 57477: a4 = a4 | a5\n 57480: a1 = a1 | a4\n 57483: a2 = u8 [a0 + 0xd]\n 57486: a4 = u8 [a0 + 0xc]\n 57489: a5 = u8 [a0 + 0xe]\n 57492: a0 = u8 [a0 + 0xf]\n 57495: a2 = a2 << 0x8\n 57498: a2 = a2 | a4\n 57501: a5 = a5 << 0x10\n 57504: a0 = a0 << 0x18\n 57507: a0 = a0 | a5\n 57510: a0 = a0 | a2\n 57513: a0 = a0 << 0x20\n 57516: a0 = a0 | a1\n 57519: a4 = reverse a0\n 57521: a1 = reverse a3\n 57523: a2 = reverse t1\n 57525: a0 = reverse t0\n 57527: u64 [s1 + 0x158] = a0\n 57531: u64 [s1 + 0x148] = a2\n 57535: a0 = a0 | a2\n 57538: a2 = a1\n 57540: a1 = a1 | a4\n 57543: a1 = a1 | a0\n 57546: a1 = a1 >> 0x20\n 57549: u64 [s1 + 0x150] = a4\n 57553: a0 = a0 | a4\n 57556: a0 = a0 << 0x20\n 57559: a0 = a0 | a1\n 57562: jump @741 if a0 != 0\n      : @731 (gas: 5)\n 57566: u64 [s1 + 0x140] = a2\n 57570: i32 a0 = a2 + 0\n 57572: a1 = 0x20\n 57575: u64 [s1 + 0x138] = a0\n 57579: ra = 672, jump @0\n      : @732 [@dyn 336] (gas: 51)\n 57586: u8 [a0 + 31] = 0\n 57589: u8 [a0 + 30] = 0\n 57592: u8 [a0 + 29] = 0\n 57595: u8 [a0 + 28] = 0\n 57598: u8 [a0 + 27] = 0\n 57601: u8 [a0 + 26] = 0\n 57604: u8 [a0 + 25] = 0\n 57607: u8 [a0 + 24] = 0\n 57610: u8 [a0 + 23] = 0\n 57613: u8 [a0 + 22] = 0\n 57616: u8 [a0 + 21] = 0\n 57619: u8 [a0 + 20] = 0\n 57622: u8 [a0 + 19] = 0\n 57625: u8 [a0 + 18] = 0\n 57628: u8 [a0 + 17] = 0\n 57631: u8 [a0 + 16] = 0\n 57634: u8 [a0 + 15] = 0\n 57637: u8 [a0 + 14] = 0\n 57640: u8 [a0 + 13] = 0\n 57643: u8 [a0 + 12] = 0\n 57646: u8 [a0 + 11] = 0\n 57649: u8 [a0 + 10] = 0\n 57652: u8 [a0 + 9] = 0\n 57655: u8 [a0 + 8] = 0\n 57658: u8 [a0 + 7] = 0\n 57661: u8 [a0 + 6] = 0\n 57664: u8 [a0 + 5] = 0\n 57667: u8 [a0 + 4] = 0\n 57670: u8 [a0 + 3] = 0xa0\n 57675: u8 [a0 + 2] = 0x79\n 57679: u8 [a0 + 1] = 0xc3\n 57684: u8 [a0 + 0] = 0x8\n 57687: a1 = u64 [s1 + 0x140]\n 57691: a0 = a1 + 0x4\n 57694: a1 = a0 <u a1\n 57697: a3 = u64 [s1 + 0x158]\n 57701: a2 = a3 + a1\n 57704: a3 = a2 <u a3\n 57707: a3 = a1 if a1 == 0\n 57710: a1 = u64 [s1 + 0x150]\n 57714: a3 = a3 + a1\n 57717: a1 = a3 <u a1\n 57720: a4 = u64 [s1 + 0x148]\n 57724: a4 = a4 + a1\n 57727: u64 [s1 + 0x168] = a2\n 57731: u64 [s1 + 0x160] = a0\n 57735: u64 [s1 + 0x170] = a3\n 57739: a0 = s1 + 0x180\n 57743: a1 = s1 + 0x160\n 57747: u64 [s1 + 0x178] = a4\n 57751: ra = 674, jump @272\n      : @733 [@dyn 337] (gas: 5)\n 57758: a0 = u64 [s1 + 0x188]\n 57762: t0 = u64 [s1 + 0x198]\n 57766: t1 = u64 [s1 + 0x180]\n 57770: a3 = u64 [s1 + 0x190]\n 57774: jump @740\n      : @734 (gas: 1)\n 57777: ra = 676, jump @282\n      : @735 [@dyn 338] (gas: 3)\n 57784: a0 = 0x40\n 57787: a1 = 0x20\n 57790: ra = 678, jump @0\n      : @736 [@dyn 339] (gas: 104)\n 57797: a1 = u8 [a0 + 0x11]\n 57800: a2 = u8 [a0 + 0x10]\n 57803: a3 = u8 [a0 + 0x12]\n 57806: a4 = u8 [a0 + 0x13]\n 57809: a1 = a1 << 0x8\n 57812: a1 = a1 | a2\n 57815: a3 = a3 << 0x10\n 57818: a4 = a4 << 0x18\n 57821: a3 = a3 | a4\n 57824: a1 = a1 | a3\n 57827: a2 = u8 [a0 + 0x15]\n 57830: a3 = u8 [a0 + 0x14]\n 57833: a4 = u8 [a0 + 0x16]\n 57836: a5 = u8 [a0 + 0x17]\n 57839: a2 = a2 << 0x8\n 57842: a2 = a2 | a3\n 57845: a4 = a4 << 0x10\n 57848: a5 = a5 << 0x18\n 57851: a4 = a4 | a5\n 57854: a2 = a2 | a4\n 57857: a2 = a2 << 0x20\n 57860: t0 = a2 | a1\n 57863: a2 = u8 [a0 + 0x1]\n 57866: a3 = u8 [a0]\n 57868: a4 = u8 [a0 + 0x2]\n 57871: a5 = u8 [a0 + 0x3]\n 57874: a2 = a2 << 0x8\n 57877: a2 = a2 | a3\n 57880: a4 = a4 << 0x10\n 57883: a5 = a5 << 0x18\n 57886: a4 = a4 | a5\n 57889: a2 = a2 | a4\n 57892: a3 = u8 [a0 + 0x5]\n 57895: a4 = u8 [a0 + 0x4]\n 57898: a5 = u8 [a0 + 0x6]\n 57901: a1 = u8 [a0 + 0x7]\n 57904: a3 = a3 << 0x8\n 57907: a3 = a3 | a4\n 57910: a5 = a5 << 0x10\n 57913: a1 = a1 << 0x18\n 57916: a1 = a1 | a5\n 57919: a1 = a1 | a3\n 57922: a1 = a1 << 0x20\n 57925: t1 = a1 | a2\n 57928: a1 = u8 [a0 + 0x19]\n 57931: a3 = u8 [a0 + 0x18]\n 57934: a4 = u8 [a0 + 0x1a]\n 57937: a5 = u8 [a0 + 0x1b]\n 57940: a1 = a1 << 0x8\n 57943: a1 = a1 | a3\n 57946: a4 = a4 << 0x10\n 57949: a5 = a5 << 0x18\n 57952: a4 = a4 | a5\n 57955: a1 = a1 | a4\n 57958: a3 = u8 [a0 + 0x1d]\n 57961: a4 = u8 [a0 + 0x1c]\n 57964: a5 = u8 [a0 + 0x1e]\n 57967: a2 = u8 [a0 + 0x1f]\n 57970: a3 = a3 << 0x8\n 57973: a3 = a3 | a4\n 57976: a5 = a5 << 0x10\n 57979: a2 = a2 << 0x18\n 57982: a2 = a2 | a5\n 57985: a2 = a2 | a3\n 57988: a2 = a2 << 0x20\n 57991: a3 = a2 | a1\n 57994: a1 = u8 [a0 + 0x9]\n 57997: a2 = u8 [a0 + 0x8]\n 58000: a4 = u8 [a0 + 0xa]\n 58003: a5 = u8 [a0 + 0xb]\n 58006: a1 = a1 << 0x8\n 58009: a1 = a1 | a2\n 58012: a4 = a4 << 0x10\n 58015: a5 = a5 << 0x18\n 58018: a4 = a4 | a5\n 58021: a1 = a1 | a4\n 58024: a2 = u8 [a0 + 0xd]\n 58027: a4 = u8 [a0 + 0xc]\n 58030: a5 = u8 [a0 + 0xe]\n 58033: a0 = u8 [a0 + 0xf]\n 58036: a2 = a2 << 0x8\n 58039: a2 = a2 | a4\n 58042: a5 = a5 << 0x10\n 58045: a0 = a0 << 0x18\n 58048: a0 = a0 | a5\n 58051: a0 = a0 | a2\n 58054: a0 = a0 << 0x20\n 58057: a0 = a0 | a1\n 58060: a4 = reverse a0\n 58062: a1 = reverse a3\n 58064: a2 = reverse t1\n 58066: a0 = reverse t0\n 58068: u64 [s1 + 0x158] = a0\n 58072: u64 [s1 + 0x148] = a2\n 58076: a0 = a0 | a2\n 58079: a2 = a1\n 58081: a1 = a1 | a4\n 58084: a1 = a1 | a0\n 58087: a1 = a1 >> 0x20\n 58090: u64 [s1 + 0x150] = a4\n 58094: a0 = a0 | a4\n 58097: a0 = a0 << 0x20\n 58100: a0 = a0 | a1\n 58103: jump @741 if a0 != 0\n      : @737 (gas: 5)\n 58107: u64 [s1 + 0x140] = a2\n 58111: i32 a0 = a2 + 0\n 58113: a1 = 0x20\n 58116: u64 [s1 + 0x138] = a0\n 58120: ra = 680, jump @0\n      : @738 [@dyn 340] (gas: 51)\n 58127: u8 [a0 + 31] = 0\n 58130: u8 [a0 + 30] = 0\n 58133: u8 [a0 + 29] = 0\n 58136: u8 [a0 + 28] = 0\n 58139: u8 [a0 + 27] = 0\n 58142: u8 [a0 + 26] = 0\n 58145: u8 [a0 + 25] = 0\n 58148: u8 [a0 + 24] = 0\n 58151: u8 [a0 + 23] = 0\n 58154: u8 [a0 + 22] = 0\n 58157: u8 [a0 + 21] = 0\n 58160: u8 [a0 + 20] = 0\n 58163: u8 [a0 + 19] = 0\n 58166: u8 [a0 + 18] = 0\n 58169: u8 [a0 + 17] = 0\n 58172: u8 [a0 + 16] = 0\n 58175: u8 [a0 + 15] = 0\n 58178: u8 [a0 + 14] = 0\n 58181: u8 [a0 + 13] = 0\n 58184: u8 [a0 + 12] = 0\n 58187: u8 [a0 + 11] = 0\n 58190: u8 [a0 + 10] = 0\n 58193: u8 [a0 + 9] = 0\n 58196: u8 [a0 + 8] = 0\n 58199: u8 [a0 + 7] = 0\n 58202: u8 [a0 + 6] = 0\n 58205: u8 [a0 + 5] = 0\n 58208: u8 [a0 + 4] = 0\n 58211: u8 [a0 + 3] = 0xa0\n 58216: u8 [a0 + 2] = 0x79\n 58220: u8 [a0 + 1] = 0xc3\n 58225: u8 [a0 + 0] = 0x8\n 58228: a1 = u64 [s1 + 0x140]\n 58232: a0 = a1 + 0x4\n 58235: a1 = a0 <u a1\n 58238: a3 = u64 [s1 + 0x158]\n 58242: a2 = a3 + a1\n 58245: a3 = a2 <u a3\n 58248: a3 = a1 if a1 == 0\n 58251: a1 = u64 [s1 + 0x150]\n 58255: a3 = a3 + a1\n 58258: a1 = a3 <u a1\n 58261: a4 = u64 [s1 + 0x148]\n 58265: a4 = a4 + a1\n 58268: u64 [s1 + 0x228] = a2\n 58272: u64 [s1 + 0x220] = a0\n 58276: u64 [s1 + 0x230] = a3\n 58280: a0 = s1 + 0x240\n 58284: a1 = s1 + 0x220\n 58288: u64 [s1 + 0x238] = a4\n 58292: ra = 682, jump @298\n      : @739 [@dyn 341] (gas: 5)\n 58299: a0 = u64 [s1 + 0x248]\n 58303: t0 = u64 [s1 + 0x258]\n 58307: t1 = u64 [s1 + 0x240]\n 58311: a3 = u64 [s1 + 0x250]\n 58315: fallthrough\n      : @740 (gas: 27)\n 58316: a1 = u64 [s1 + 0x158]\n 58320: a4 = a0 ^ a1\n 58323: a5 = a0 <u a1\n 58326: ra = a1\n 58328: t2 = u64 [s1 + 0x140]\n 58332: a1 = t1 <u t2\n 58335: a5 = a1 if a4 == 0\n 58338: a2 = u64 [s1 + 0x150]\n 58342: a4 = a3 - a2\n 58345: a3 = a3 <u a2\n 58348: a2 = u64 [s1 + 0x148]\n 58352: a2 = t0 - a2\n 58355: a2 = a2 - a3\n 58358: a3 = a4 <u a5\n 58361: a2 = a2 - a3\n 58364: a4 = a4 - a5\n 58367: a0 = a0 - ra\n 58370: a1 = a0 - a1\n 58373: a0 = t1 - t2\n 58376: a1 = a1 | a2\n 58379: a2 = a0 | a4\n 58382: a2 = a2 | a1\n 58385: a1 = a1 | a4\n 58388: a2 = a2 >> 0x20\n 58391: a1 = a1 << 0x20\n 58394: a1 = a1 | a2\n 58397: jump @750 if a1 == 0\n      : @741 (gas: 1)\n 58401: trap\n      : @742 (gas: 3)\n 58402: a0 = 0\n 58404: a1 = 0\n 58406: ra = 684, jump @0\n      : @743 [@dyn 342] (gas: 5)\n 58413: i32 a1 = a0 + 0\n 58415: a0 = 0x1\n 58418: a2 = 0\n 58420: ecalli 14 // 'seal_return'\n 58422: fallthrough\n      : @744 (gas: 8)\n 58423: u64 [s1 + 464] = 0\n 58427: u64 [s1 + 456] = 0\n 58431: u64 [s1 + 448] = 0\n 58435: a0 = 0x4e487b7100000000\n 58445: a1 = s1 + 0x1c0\n 58449: u64 [s1 + 0x1d8] = a0\n 58453: a0 = 0\n 58455: ra = 686, jump @8\n      : @745 [@dyn 343] (gas: 8)\n 58462: u64 [s1 + 440] = 0\n 58466: u64 [s1 + 432] = 0\n 58470: u64 [s1 + 416] = 0x41\n 58475: a0 = 0x4\n 58478: a1 = s1 + 0x1a0\n 58482: u64 [s1 + 424] = 0\n 58486: ra = 0x2b2\n 58490: jump @8\n      : @746 (gas: 8)\n 58494: u64 [s1 + 528] = 0\n 58498: u64 [s1 + 520] = 0\n 58502: u64 [s1 + 512] = 0\n 58506: a0 = 0x4e487b7100000000\n 58516: a1 = s1 + 0x200\n 58520: u64 [s1 + 0x218] = a0\n 58524: a0 = 0\n 58526: ra = 688, jump @8\n      : @747 [@dyn 344] (gas: 7)\n 58533: u64 [s1 + 504] = 0\n 58537: u64 [s1 + 496] = 0\n 58541: u64 [s1 + 480] = 0x11\n 58546: a0 = 0x4\n 58549: a1 = s1 + 0x1e0\n 58553: u64 [s1 + 488] = 0\n 58557: ra = 690, jump @8\n      : @748 [@dyn 345] (gas: 3)\n 58564: a1 = 0x24\n 58567: a0 = 0\n 58569: ra = 692, jump @0\n      : @749 [@dyn 346] (gas: 5)\n 58576: i32 a1 = a0 + 0\n 58578: a0 = 0x1\n 58581: a2 = 0x24\n 58584: ecalli 14 // 'seal_return'\n 58586: fallthrough\n      : @750 (gas: 4)\n 58587: i32 a1 = a0 + 0\n 58589: u64 [s1 + 0x158] = a1\n 58593: a0 = u64 [s1 + 0x138]\n 58597: ra = 694, jump @0\n      : @751 [@dyn 347] (gas: 6)\n 58604: i32 a1 = a0 + 0\n 58606: a0 = 0x1\n 58609: a2 = u64 [s1 + 0x158]\n 58613: ra = 0x2b8\n 58617: ecalli 14 // 'seal_return'\n 58619: fallthrough\n      : @752 [@dyn 348] (gas: 12)\n 58620: a2 = u64 [a1 + 0x10]\n 58623: a3 = u64 [a1 + 0x18]\n 58626: a4 = u64 [a1 + 0x8]\n 58629: a1 = u64 [a1]\n 58631: a3 = a3 | a4\n 58634: a4 = a1 | a2\n 58637: a4 = a4 | a3\n 58640: a4 = a4 >> 0x20\n 58643: a2 = a2 | a3\n 58646: a2 = a2 << 0x20\n 58649: a2 = a2 | a4\n 58652: jump @755 if a2 != 0\n      : @753 (gas: 7)\n 58656: sp = sp + 0xfffffffffffffff0\n 58659: u64 [sp + 0x8] = ra\n 58662: u64 [sp] = s0\n 58664: s0 = a0\n 58666: i32 a0 = a1 + 0\n 58668: a1 = 0x20\n 58671: ra = 698, jump @0\n      : @754 [@dyn 349] (gas: 100)\n 58678: a1 = u8 [a0 + 0x1]\n 58681: a2 = u8 [a0]\n 58683: a3 = u8 [a0 + 0x2]\n 58686: a4 = u8 [a0 + 0x3]\n 58689: a1 = a1 << 0x8\n 58692: a1 = a1 | a2\n 58695: a3 = a3 << 0x10\n 58698: a4 = a4 << 0x18\n 58701: a3 = a3 | a4\n 58704: a1 = a1 | a3\n 58707: a2 = u8 [a0 + 0x5]\n 58710: a3 = u8 [a0 + 0x4]\n 58713: a4 = u8 [a0 + 0x6]\n 58716: a5 = u8 [a0 + 0x7]\n 58719: a2 = a2 << 0x8\n 58722: a2 = a2 | a3\n 58725: a4 = a4 << 0x10\n 58728: a5 = a5 << 0x18\n 58731: a4 = a4 | a5\n 58734: a2 = a2 | a4\n 58737: a2 = a2 << 0x20\n 58740: t0 = a2 | a1\n 58743: a2 = u8 [a0 + 0x9]\n 58746: a3 = u8 [a0 + 0x8]\n 58749: a4 = u8 [a0 + 0xa]\n 58752: a5 = u8 [a0 + 0xb]\n 58755: a2 = a2 << 0x8\n 58758: a2 = a2 | a3\n 58761: a4 = a4 << 0x10\n 58764: a5 = a5 << 0x18\n 58767: a4 = a4 | a5\n 58770: a2 = a2 | a4\n 58773: a3 = u8 [a0 + 0xd]\n 58776: a4 = u8 [a0 + 0xc]\n 58779: a5 = u8 [a0 + 0xe]\n 58782: a1 = u8 [a0 + 0xf]\n 58785: a3 = a3 << 0x8\n 58788: a3 = a3 | a4\n 58791: a5 = a5 << 0x10\n 58794: a1 = a1 << 0x18\n 58797: a1 = a1 | a5\n 58800: a1 = a1 | a3\n 58803: a1 = a1 << 0x20\n 58806: t1 = a1 | a2\n 58809: a1 = u8 [a0 + 0x11]\n 58812: a3 = u8 [a0 + 0x10]\n 58815: a4 = u8 [a0 + 0x12]\n 58818: a5 = u8 [a0 + 0x13]\n 58821: a1 = a1 << 0x8\n 58824: a1 = a1 | a3\n 58827: a4 = a4 << 0x10\n 58830: a5 = a5 << 0x18\n 58833: a4 = a4 | a5\n 58836: a1 = a1 | a4\n 58839: a3 = u8 [a0 + 0x15]\n 58842: a4 = u8 [a0 + 0x14]\n 58845: a5 = u8 [a0 + 0x16]\n 58848: a2 = u8 [a0 + 0x17]\n 58851: a3 = a3 << 0x8\n 58854: a3 = a3 | a4\n 58857: a5 = a5 << 0x10\n 58860: a2 = a2 << 0x18\n 58863: a2 = a2 | a5\n 58866: a2 = a2 | a3\n 58869: a2 = a2 << 0x20\n 58872: a3 = a2 | a1\n 58875: a1 = u8 [a0 + 0x19]\n 58878: a2 = u8 [a0 + 0x18]\n 58881: a4 = u8 [a0 + 0x1a]\n 58884: a5 = u8 [a0 + 0x1b]\n 58887: a1 = a1 << 0x8\n 58890: a1 = a1 | a2\n 58893: a4 = a4 << 0x10\n 58896: a5 = a5 << 0x18\n 58899: a4 = a4 | a5\n 58902: a1 = a1 | a4\n 58905: a2 = u8 [a0 + 0x1d]\n 58908: a4 = u8 [a0 + 0x1c]\n 58911: a5 = u8 [a0 + 0x1e]\n 58914: a0 = u8 [a0 + 0x1f]\n 58917: a2 = a2 << 0x8\n 58920: a2 = a2 | a4\n 58923: a5 = a5 << 0x10\n 58926: a0 = a0 << 0x18\n 58929: a0 = a0 | a5\n 58932: a0 = a0 | a2\n 58935: a0 = a0 << 0x20\n 58938: a0 = a0 | a1\n 58941: a0 = reverse a0\n 58943: a1 = reverse a3\n 58945: a2 = reverse t1\n 58947: a3 = reverse t0\n 58949: u64 [s0 + 0x18] = a3\n 58952: u64 [s0 + 0x10] = a2\n 58955: u64 [s0 + 0x8] = a1\n 58958: u64 [s0] = a0\n 58960: ra = u64 [sp + 0x8]\n 58963: s0 = u64 [sp]\n 58965: sp = sp + 0x10\n 58968: ret\n      : @755 (gas: 1)\n 58970: trap\n      : @756 (gas: 17)\n 58971: sp = sp + 0xffffffffffffffa0\n 58974: u64 [sp + 0x58] = ra\n 58977: u64 [sp + 0x50] = s0\n 58980: u64 [sp + 0x48] = s1\n 58983: a3 = u64 [a1 + 0x18]\n 58986: a4 = u64 [a1 + 0x10]\n 58989: a5 = u64 [a1 + 0x8]\n 58992: s1 = u64 [a1]\n 58994: a1 = a5 | a3\n 58997: a2 = s1 | a4\n 59000: a2 = a2 | a1\n 59003: a2 = a2 >> 0x20\n 59006: a1 = a1 | a4\n 59009: a1 = a1 << 0x20\n 59012: a1 = a1 | a2\n 59015: u64 [sp + 0x28] = a0\n 59018: jump @763 if a1 != 0\n      : @757 (gas: 19)\n 59022: a0 = s1 + 0x20\n 59025: u64 [sp + 0x30] = a0\n 59028: a0 = a0 <u s1\n 59031: a1 = a5 + a0\n 59034: u64 [sp + 0x40] = a1\n 59037: u64 [sp + 0x8] = a5\n 59040: s0 = a1 <u a5\n 59043: s0 = a0 if a0 == 0\n 59046: s0 = s0 + a4\n 59049: u64 [sp + 0x10] = a4\n 59052: a0 = s0 <u a4\n 59055: u64 [sp + 0x18] = a3\n 59058: a0 = a0 + a3\n 59061: u64 [sp + 0x38] = a0\n 59064: u64 [sp] = s1\n 59066: i32 a0 = s1 + 0\n 59068: a1 = 0x20\n 59071: s1 = 0x20\n 59074: ra = 700, jump @0\n      : @758 [@dyn 350] (gas: 45)\n 59081: u8 [a0 + 0x1f] = s1\n 59084: a1 = u64 [sp + 0x30]\n 59087: s1 = a1\n 59089: a1 = a1 | s0\n 59092: a2 = u64 [sp + 0x40]\n 59095: a4 = u64 [sp + 0x38]\n 59098: a2 = a2 | a4\n 59101: a1 = a1 | a2\n 59104: a1 = a1 >> 0x20\n 59107: u64 [sp + 0x20] = s0\n 59110: a2 = a2 | s0\n 59113: a2 = a2 << 0x20\n 59116: a1 = a1 | a2\n 59119: u8 [a0 + 30] = 0\n 59122: u8 [a0 + 29] = 0\n 59125: u8 [a0 + 28] = 0\n 59128: u8 [a0 + 27] = 0\n 59131: u8 [a0 + 26] = 0\n 59134: u8 [a0 + 25] = 0\n 59137: u8 [a0 + 24] = 0\n 59140: u8 [a0 + 23] = 0\n 59143: u8 [a0 + 22] = 0\n 59146: u8 [a0 + 21] = 0\n 59149: u8 [a0 + 20] = 0\n 59152: u8 [a0 + 19] = 0\n 59155: u8 [a0 + 18] = 0\n 59158: u8 [a0 + 17] = 0\n 59161: u8 [a0 + 16] = 0\n 59164: u8 [a0 + 15] = 0\n 59167: u8 [a0 + 14] = 0\n 59170: u8 [a0 + 13] = 0\n 59173: u8 [a0 + 12] = 0\n 59176: u8 [a0 + 11] = 0\n 59179: u8 [a0 + 10] = 0\n 59182: u8 [a0 + 9] = 0\n 59185: u8 [a0 + 8] = 0\n 59188: u8 [a0 + 7] = 0\n 59191: u8 [a0 + 6] = 0\n 59194: u8 [a0 + 5] = 0\n 59197: u8 [a0 + 4] = 0\n 59200: u8 [a0 + 3] = 0\n 59203: u8 [a0 + 2] = 0\n 59206: u8 [a0 + 1] = 0\n 59209: u8 [a0 + 0] = 0\n 59211: jump @763 if a1 != 0\n      : @759 (gas: 4)\n 59215: i32 s0 = s1 + 0\n 59217: a1 = 0x20\n 59220: a0 = s0\n 59222: ra = 702, jump @0\n      : @760 [@dyn 351] (gas: 41)\n 59229: u8 [a0 + 31] = 0x1d\n 59233: u8 [a0 + 30] = 0\n 59236: u8 [a0 + 29] = 0\n 59239: u8 [a0 + 28] = 0\n 59242: u8 [a0 + 27] = 0\n 59245: u8 [a0 + 26] = 0\n 59248: u8 [a0 + 25] = 0\n 59251: u8 [a0 + 24] = 0\n 59254: u8 [a0 + 23] = 0\n 59257: u8 [a0 + 22] = 0\n 59260: u8 [a0 + 21] = 0\n 59263: u8 [a0 + 20] = 0\n 59266: u8 [a0 + 19] = 0\n 59269: u8 [a0 + 18] = 0\n 59272: u8 [a0 + 17] = 0\n 59275: u8 [a0 + 16] = 0\n 59278: u8 [a0 + 15] = 0\n 59281: u8 [a0 + 14] = 0\n 59284: u8 [a0 + 13] = 0\n 59287: u8 [a0 + 12] = 0\n 59290: u8 [a0 + 11] = 0\n 59293: u8 [a0 + 10] = 0\n 59296: u8 [a0 + 9] = 0\n 59299: u8 [a0 + 8] = 0\n 59302: u8 [a0 + 7] = 0\n 59305: u8 [a0 + 6] = 0\n 59308: u8 [a0 + 5] = 0\n 59311: u8 [a0 + 4] = 0\n 59314: u8 [a0 + 3] = 0\n 59317: u8 [a0 + 2] = 0\n 59320: u8 [a0 + 1] = 0\n 59323: a1 = u64 [sp + 0x20]\n 59326: a2 = u64 [sp + 0x38]\n 59329: a1 = a1 | a2\n 59332: a2 = 0xffffffe0\n 59342: a2 = s1 <u a2\n 59345: a3 = u64 [sp + 0x40]\n 59348: a2 = 0 if a3 != 0\n 59350: a2 = 0 if a1 != 0\n 59352: u8 [a0 + 0] = 0\n 59354: jump @763 if a2 == 0\n      : @761 (gas: 3)\n 59358: i32 a0 = s0 + 0x20\n 59361: a1 = 0x20\n 59364: ra = 704, jump @0\n      : @762 [@dyn 352] (gas: 55)\n 59371: u8 [a0 + 31] = 0\n 59374: u8 [a0 + 30] = 0\n 59377: u8 [a0 + 29] = 0\n 59380: u8 [a0 + 28] = 0x77\n 59384: u8 [a0 + 27] = 0x6f\n 59388: u8 [a0 + 26] = 0x6c\n 59392: u8 [a0 + 25] = 0x20\n 59396: u8 [a0 + 24] = 0x6f\n 59400: u8 [a0 + 23] = 0x6f\n 59404: u8 [a0 + 22] = 0x74\n 59408: u8 [a0 + 21] = 0x20\n 59412: u8 [a0 + 20] = 0x64\n 59416: u8 [a0 + 19] = 0x6e\n 59420: u8 [a0 + 18] = 0x6f\n 59424: u8 [a0 + 17] = 0x62\n 59428: u8 [a0 + 16] = 0x20\n 59432: u8 [a0 + 15] = 0x72\n 59436: u8 [a0 + 14] = 0x65\n 59440: u8 [a0 + 13] = 0x74\n 59444: u8 [a0 + 12] = 0x69\n 59448: u8 [a0 + 11] = 0x62\n 59452: u8 [a0 + 10] = 0x72\n 59456: u8 [a0 + 9] = 0x61\n 59460: u8 [a0 + 8] = 0x20\n 59464: u8 [a0 + 7] = 0x3a\n 59468: a5 = 0x79\n 59471: u8 [a0 + 0x6] = a5\n 59474: u8 [a0 + 5] = 0x72\n 59478: u8 [a0 + 4] = 0x6f\n 59482: u8 [a0 + 3] = 0x74\n 59486: u8 [a0 + 2] = 0x63\n 59490: u8 [a0 + 1] = 0x61\n 59494: u8 [a0 + 0] = 0x46\n 59497: a1 = u64 [sp]\n 59499: a0 = a1 + 0x60\n 59502: a1 = a0 <u a1\n 59505: a3 = u64 [sp + 0x8]\n 59508: a2 = a3 + a1\n 59511: a3 = a2 <u a3\n 59514: a3 = a1 if a1 == 0\n 59517: a1 = u64 [sp + 0x10]\n 59520: a3 = a3 + a1\n 59523: a1 = a3 <u a1\n 59526: a4 = u64 [sp + 0x18]\n 59529: a1 = a1 + a4\n 59532: a4 = u64 [sp + 0x28]\n 59535: u64 [a4] = a0\n 59537: u64 [a4 + 0x8] = a2\n 59540: u64 [a4 + 0x10] = a3\n 59543: u64 [a4 + 0x18] = a1\n 59546: ra = u64 [sp + 0x58]\n 59549: s0 = u64 [sp + 0x50]\n 59552: s1 = u64 [sp + 0x48]\n 59555: sp = sp + 0x60\n 59558: ret\n      : @763 (gas: 1)\n 59560: trap\n      : @764 (gas: 17)\n 59561: sp = sp + 0xffffffffffffffa0\n 59564: u64 [sp + 0x58] = ra\n 59567: u64 [sp + 0x50] = s0\n 59570: u64 [sp + 0x48] = s1\n 59573: a3 = u64 [a1 + 0x18]\n 59576: a4 = u64 [a1 + 0x10]\n 59579: a5 = u64 [a1 + 0x8]\n 59582: s1 = u64 [a1]\n 59584: a1 = a5 | a3\n 59587: a2 = s1 | a4\n 59590: a2 = a2 | a1\n 59593: a2 = a2 >> 0x20\n 59596: a1 = a1 | a4\n 59599: a1 = a1 << 0x20\n 59602: a1 = a1 | a2\n 59605: u64 [sp + 0x20] = a0\n 59608: jump @773 if a1 != 0\n      : @765 (gas: 19)\n 59612: a0 = s1 + 0x20\n 59615: u64 [sp + 0x38] = a0\n 59618: a0 = a0 <u s1\n 59621: a1 = a5 + a0\n 59624: u64 [sp + 0x40] = a1\n 59627: u64 [sp + 0x8] = a5\n 59630: s0 = a1 <u a5\n 59633: s0 = a0 if a0 == 0\n 59636: s0 = s0 + a4\n 59639: u64 [sp + 0x10] = a4\n 59642: a0 = s0 <u a4\n 59645: u64 [sp + 0x18] = a3\n 59648: a0 = a0 + a3\n 59651: u64 [sp + 0x30] = a0\n 59654: u64 [sp] = s1\n 59656: i32 a0 = s1 + 0\n 59658: a1 = 0x20\n 59661: s1 = 0x20\n 59664: ra = 706, jump @0\n      : @766 [@dyn 353] (gas: 43)\n 59671: u8 [a0 + 0x1f] = s1\n 59674: a1 = u64 [sp + 0x38]\n 59677: a1 = a1 | s0\n 59680: a2 = u64 [sp + 0x40]\n 59683: a3 = u64 [sp + 0x30]\n 59686: a2 = a2 | a3\n 59689: a1 = a1 | a2\n 59692: a1 = a1 >> 0x20\n 59695: a2 = a2 | s0\n 59698: a2 = a2 << 0x20\n 59701: a1 = a1 | a2\n 59704: u8 [a0 + 30] = 0\n 59707: u8 [a0 + 29] = 0\n 59710: u8 [a0 + 28] = 0\n 59713: u8 [a0 + 27] = 0\n 59716: u8 [a0 + 26] = 0\n 59719: u8 [a0 + 25] = 0\n 59722: u8 [a0 + 24] = 0\n 59725: u8 [a0 + 23] = 0\n 59728: u8 [a0 + 22] = 0\n 59731: u8 [a0 + 21] = 0\n 59734: u8 [a0 + 20] = 0\n 59737: u8 [a0 + 19] = 0\n 59740: u8 [a0 + 18] = 0\n 59743: u8 [a0 + 17] = 0\n 59746: u8 [a0 + 16] = 0\n 59749: u8 [a0 + 15] = 0\n 59752: u8 [a0 + 14] = 0\n 59755: u8 [a0 + 13] = 0\n 59758: u8 [a0 + 12] = 0\n 59761: u8 [a0 + 11] = 0\n 59764: u8 [a0 + 10] = 0\n 59767: u8 [a0 + 9] = 0\n 59770: u8 [a0 + 8] = 0\n 59773: u8 [a0 + 7] = 0\n 59776: u8 [a0 + 6] = 0\n 59779: u8 [a0 + 5] = 0\n 59782: u8 [a0 + 4] = 0\n 59785: u8 [a0 + 3] = 0\n 59788: u8 [a0 + 2] = 0\n 59791: u8 [a0 + 1] = 0\n 59794: u8 [a0 + 0] = 0\n 59796: jump @773 if a1 != 0\n      : @767 (gas: 6)\n 59800: s1 = s0\n 59802: s0 = u64 [sp + 0x38]\n 59805: i32 a0 = s0 + 0\n 59807: a1 = 0x20\n 59810: u64 [sp + 0x28] = a0\n 59813: ra = 708, jump @0\n      : @768 [@dyn 354] (gas: 42)\n 59820: u8 [a0 + 31] = 0x24\n 59824: u8 [a0 + 30] = 0\n 59827: u8 [a0 + 29] = 0\n 59830: u8 [a0 + 28] = 0\n 59833: u8 [a0 + 27] = 0\n 59836: u8 [a0 + 26] = 0\n 59839: u8 [a0 + 25] = 0\n 59842: u8 [a0 + 24] = 0\n 59845: u8 [a0 + 23] = 0\n 59848: u8 [a0 + 22] = 0\n 59851: u8 [a0 + 21] = 0\n 59854: u8 [a0 + 20] = 0\n 59857: u8 [a0 + 19] = 0\n 59860: u8 [a0 + 18] = 0\n 59863: u8 [a0 + 17] = 0\n 59866: u8 [a0 + 16] = 0\n 59869: u8 [a0 + 15] = 0\n 59872: u8 [a0 + 14] = 0\n 59875: u8 [a0 + 13] = 0\n 59878: u8 [a0 + 12] = 0\n 59881: u8 [a0 + 11] = 0\n 59884: u8 [a0 + 10] = 0\n 59887: u8 [a0 + 9] = 0\n 59890: u8 [a0 + 8] = 0\n 59893: u8 [a0 + 7] = 0\n 59896: u8 [a0 + 6] = 0\n 59899: u8 [a0 + 5] = 0\n 59902: u8 [a0 + 4] = 0\n 59905: u8 [a0 + 3] = 0\n 59908: u8 [a0 + 2] = 0\n 59911: u8 [a0 + 1] = 0\n 59914: a1 = u64 [sp + 0x30]\n 59917: a3 = s1 | a1\n 59920: s1 = 0x100000000\n 59930: a1 = 0xffffffe0\n 59940: a1 = s0 <u a1\n 59943: a2 = u64 [sp + 0x40]\n 59946: a1 = 0 if a2 != 0\n 59948: u64 [sp + 0x30] = a3\n 59951: a1 = 0 if a3 != 0\n 59953: u8 [a0 + 0] = 0\n 59955: jump @773 if a1 == 0\n      : @769 (gas: 4)\n 59959: a0 = u64 [sp + 0x28]\n 59962: i32 a0 = a0 + 0x20\n 59965: a1 = 0x20\n 59968: ra = 710, jump @0\n      : @770 [@dyn 355] (gas: 42)\n 59975: u8 [a0 + 29] = 0x66\n 59979: u8 [a0 + 28] = 0x66\n 59983: u8 [a0 + 27] = 0x75\n 59987: u8 [a0 + 21] = 0x6b\n 59991: u8 [a0 + 26] = 0x73\n 59995: u8 [a0 + 18] = 0x73\n 59999: u8 [a0 + 14] = 0x64\n 60003: u8 [a0 + 12] = 0x76\n 60007: u8 [a0 + 9] = 0x70\n 60011: u8 [a0 + 23] = 0x20\n 60015: u8 [a0 + 17] = 0x20\n 60019: u8 [a0 + 8] = 0x20\n 60023: u8 [a0 + 7] = 0x3a\n 60027: u8 [a0 + 6] = 0x79\n 60031: u8 [a0 + 16] = 0x72\n 60035: u8 [a0 + 10] = 0x72\n 60039: u8 [a0 + 5] = 0x72\n 60043: u8 [a0 + 11] = 0x6f\n 60047: u8 [a0 + 4] = 0x6f\n 60051: u8 [a0 + 31] = 0x63\n 60055: u8 [a0 + 2] = 0x63\n 60059: u8 [a0 + 20] = 0x61\n 60063: u8 [a0 + 1] = 0x61\n 60067: u8 [a0 + 0] = 0x46\n 60070: s0 = 0x69\n 60073: u8 [a0 + 0x1e] = s0\n 60076: a1 = s1 + 0xffffffffffffffc0\n 60079: a2 = u64 [sp + 0x38]\n 60082: a1 = a2 <u a1\n 60085: u8 [a0 + 25] = 0x6e\n 60089: u8 [a0 + 0x18] = s0\n 60092: a2 = u64 [sp + 0x40]\n 60095: a1 = 0 if a2 != 0\n 60097: u8 [a0 + 22] = 0x65\n 60101: a2 = u64 [sp + 0x30]\n 60104: a1 = 0 if a2 != 0\n 60106: s1 = 0x74\n 60109: u8 [a0 + 0x13] = s1\n 60112: u8 [a0 + 15] = 0x65\n 60116: u8 [a0 + 0xd] = s0\n 60119: u8 [a0 + 0x3] = s1\n 60122: jump @773 if a1 == 0\n      : @771 (gas: 4)\n 60126: a0 = u64 [sp + 0x28]\n 60129: i32 a0 = a0 + 0x40\n 60132: a1 = 0x20\n 60135: ra = 712, jump @0\n      : @772 [@dyn 356] (gas: 54)\n 60142: u8 [a0 + 31] = 0\n 60145: u8 [a0 + 30] = 0\n 60148: u8 [a0 + 29] = 0\n 60151: u8 [a0 + 28] = 0\n 60154: u8 [a0 + 27] = 0\n 60157: u8 [a0 + 26] = 0\n 60160: u8 [a0 + 25] = 0\n 60163: u8 [a0 + 24] = 0\n 60166: u8 [a0 + 23] = 0\n 60169: u8 [a0 + 22] = 0\n 60172: u8 [a0 + 21] = 0\n 60175: u8 [a0 + 20] = 0\n 60178: u8 [a0 + 19] = 0\n 60181: u8 [a0 + 18] = 0\n 60184: u8 [a0 + 17] = 0\n 60187: u8 [a0 + 16] = 0\n 60190: u8 [a0 + 15] = 0\n 60193: u8 [a0 + 14] = 0\n 60196: u8 [a0 + 13] = 0\n 60199: u8 [a0 + 12] = 0\n 60202: u8 [a0 + 11] = 0\n 60205: u8 [a0 + 10] = 0\n 60208: u8 [a0 + 9] = 0\n 60211: u8 [a0 + 8] = 0\n 60214: u8 [a0 + 7] = 0\n 60217: u8 [a0 + 6] = 0\n 60220: u8 [a0 + 5] = 0\n 60223: u8 [a0 + 4] = 0\n 60226: u8 [a0 + 0x3] = s1\n 60229: u8 [a0 + 2] = 0x6e\n 60233: u8 [a0 + 1] = 0x65\n 60237: u8 [a0] = s0\n 60239: a1 = u64 [sp]\n 60241: a0 = a1 + 0x80\n 60245: a1 = a0 <u a1\n 60248: a3 = u64 [sp + 0x8]\n 60251: a2 = a3 + a1\n 60254: a3 = a2 <u a3\n 60257: a3 = a1 if a1 == 0\n 60260: a1 = u64 [sp + 0x10]\n 60263: a3 = a3 + a1\n 60266: a1 = a3 <u a1\n 60269: a4 = u64 [sp + 0x18]\n 60272: a1 = a1 + a4\n 60275: a4 = u64 [sp + 0x20]\n 60278: u64 [a4] = a0\n 60280: u64 [a4 + 0x8] = a2\n 60283: u64 [a4 + 0x10] = a3\n 60286: u64 [a4 + 0x18] = a1\n 60289: ra = u64 [sp + 0x58]\n 60292: s0 = u64 [sp + 0x50]\n 60295: s1 = u64 [sp + 0x48]\n 60298: sp = sp + 0x60\n 60301: ret\n      : @773 (gas: 1)\n 60303: trap\n      : @774 (gas: 34)\n 60304: sp = sp + 0xfffffffffffff840\n 60308: u64 [sp + 0x7b8] = ra\n 60312: u64 [sp + 0x7b0] = s0\n 60316: u64 [sp + 0x7a8] = s1\n 60320: s0 = sp + 0x7c0\n 60324: sp = sp & 0xffffffffffffffe0\n 60327: s1 = sp\n 60329: a3 = u64 [a2 + 0x18]\n 60332: u64 [s1 + 0x188] = a3\n 60336: a3 = u64 [a2 + 0x10]\n 60339: u64 [s1 + 0x78] = a3\n 60342: a3 = u64 [a2 + 0x8]\n 60345: u64 [s1 + 0x80] = a3\n 60349: a2 = u64 [a2]\n 60351: u64 [s1 + 0x70] = a2\n 60354: a2 = u64 [a1 + 0x18]\n 60357: u64 [s1 + 0x88] = a2\n 60361: a2 = u64 [a1 + 0x10]\n 60364: u64 [s1 + 0x170] = a2\n 60368: a2 = u64 [a1 + 0x8]\n 60371: u64 [s1 + 0x180] = a2\n 60375: a1 = u64 [a1]\n 60377: u64 [s1 + 0x178] = a1\n 60381: a1 = u64 [a0]\n 60383: u64 [s1 + 0x1d8] = a1\n 60387: a1 = u64 [a0 + 0x8]\n 60390: u64 [s1 + 0x1d0] = a1\n 60394: a1 = u64 [a0 + 0x10]\n 60397: u64 [s1 + 0x1c8] = a1\n 60401: a0 = u64 [a0 + 0x18]\n 60404: u64 [s1 + 0x1c0] = a0\n 60408: a1 = 0x20\n 60411: a0 = 0\n 60413: ra = 714, jump @0\n      : @775 [@dyn 357] (gas: 103)\n 60420: a1 = u64 [s1 + 0x1c0]\n 60424: a1 = reverse a1\n 60426: a2 = u64 [s1 + 0x1c8]\n 60430: a2 = reverse a2\n 60432: a3 = u64 [s1 + 0x1d0]\n 60436: a3 = reverse a3\n 60438: a4 = u64 [s1 + 0x1d8]\n 60442: a4 = reverse a4\n 60444: u8 [a0 + 0x18] = a4\n 60447: u8 [a0 + 0x10] = a3\n 60450: u8 [a0 + 0x8] = a2\n 60453: u8 [a0] = a1\n 60455: a5 = a4 >> 0x38\n 60458: u64 [s1 + 0x168] = a5\n 60462: u8 [a0 + 0x1f] = a5\n 60465: a5 = a4 >> 0x30\n 60468: u64 [s1 + 0x160] = a5\n 60472: u8 [a0 + 0x1e] = a5\n 60475: a5 = a4 >> 0x28\n 60478: u64 [s1 + 0x158] = a5\n 60482: u8 [a0 + 0x1d] = a5\n 60485: a5 = a4 >> 0x20\n 60488: u64 [s1 + 0x150] = a5\n 60492: u8 [a0 + 0x1c] = a5\n 60495: a5 = a4 >> 0x18\n 60498: u64 [s1 + 0x148] = a5\n 60502: u8 [a0 + 0x1b] = a5\n 60505: a5 = a4 >> 0x10\n 60508: u64 [s1 + 0x140] = a5\n 60512: u8 [a0 + 0x1a] = a5\n 60515: u64 [s1 + 0x190] = a4\n 60519: a4 = a4 >> 0x8\n 60522: u64 [s1 + 0x138] = a4\n 60526: u8 [a0 + 0x19] = a4\n 60529: a4 = a3 >> 0x38\n 60532: u64 [s1 + 0x130] = a4\n 60536: u8 [a0 + 0x17] = a4\n 60539: a4 = a3 >> 0x30\n 60542: u64 [s1 + 0x128] = a4\n 60546: u8 [a0 + 0x16] = a4\n 60549: a4 = a3 >> 0x28\n 60552: u64 [s1 + 0x120] = a4\n 60556: u8 [a0 + 0x15] = a4\n 60559: a4 = a3 >> 0x20\n 60562: u64 [s1 + 0x118] = a4\n 60566: u8 [a0 + 0x14] = a4\n 60569: a4 = a3 >> 0x18\n 60572: u64 [s1 + 0x110] = a4\n 60576: u8 [a0 + 0x13] = a4\n 60579: a4 = a3 >> 0x10\n 60582: u64 [s1 + 0x108] = a4\n 60586: u8 [a0 + 0x12] = a4\n 60589: u64 [s1 + 0x198] = a3\n 60593: a3 = a3 >> 0x8\n 60596: u64 [s1 + 0x100] = a3\n 60600: u8 [a0 + 0x11] = a3\n 60603: a3 = a2 >> 0x38\n 60606: u64 [s1 + 0xf8] = a3\n 60610: u8 [a0 + 0xf] = a3\n 60613: a3 = a2 >> 0x30\n 60616: u64 [s1 + 0xf0] = a3\n 60620: u8 [a0 + 0xe] = a3\n 60623: a3 = a2 >> 0x28\n 60626: u64 [s1 + 0xe8] = a3\n 60630: u8 [a0 + 0xd] = a3\n 60633: a3 = a2 >> 0x20\n 60636: u64 [s1 + 0xe0] = a3\n 60640: u8 [a0 + 0xc] = a3\n 60643: a3 = a2 >> 0x18\n 60646: u64 [s1 + 0xd8] = a3\n 60650: u8 [a0 + 0xb] = a3\n 60653: a3 = a2 >> 0x10\n 60656: u64 [s1 + 0xd0] = a3\n 60660: u8 [a0 + 0xa] = a3\n 60663: u64 [s1 + 0x1a0] = a2\n 60667: a2 = a2 >> 0x8\n 60670: u64 [s1 + 0xc8] = a2\n 60674: u8 [a0 + 0x9] = a2\n 60677: a2 = a1 >> 0x38\n 60680: u64 [s1 + 0xc0] = a2\n 60684: u8 [a0 + 0x7] = a2\n 60687: a2 = a1 >> 0x30\n 60690: u64 [s1 + 0xb8] = a2\n 60694: u8 [a0 + 0x6] = a2\n 60697: a2 = a1 >> 0x28\n 60700: u64 [s1 + 0xb0] = a2\n 60704: u8 [a0 + 0x5] = a2\n 60707: a2 = a1 >> 0x20\n 60710: u64 [s1 + 0xa8] = a2\n 60714: u8 [a0 + 0x4] = a2\n 60717: a2 = a1 >> 0x18\n 60720: u64 [s1 + 0xa0] = a2\n 60724: u8 [a0 + 0x3] = a2\n 60727: a2 = a1 >> 0x10\n 60730: u64 [s1 + 0x98] = a2\n 60734: u8 [a0 + 0x2] = a2\n 60737: u64 [s1 + 0x1a8] = a1\n 60741: a1 = a1 >> 0x8\n 60744: u64 [s1 + 0x90] = a1\n 60748: u8 [a0 + 0x1] = a1\n 60751: a0 = 0x20\n 60754: a1 = 0x20\n 60757: ra = 716, jump @0\n      : @776 [@dyn 358] (gas: 35)\n 60764: u8 [a0 + 31] = 0\n 60767: u8 [a0 + 30] = 0\n 60770: u8 [a0 + 29] = 0\n 60773: u8 [a0 + 28] = 0\n 60776: u8 [a0 + 27] = 0\n 60779: u8 [a0 + 26] = 0\n 60782: u8 [a0 + 25] = 0\n 60785: u8 [a0 + 24] = 0\n 60788: u8 [a0 + 23] = 0\n 60791: u8 [a0 + 22] = 0\n 60794: u8 [a0 + 21] = 0\n 60797: u8 [a0 + 20] = 0\n 60800: u8 [a0 + 19] = 0\n 60803: u8 [a0 + 18] = 0\n 60806: u8 [a0 + 17] = 0\n 60809: u8 [a0 + 16] = 0\n 60812: u8 [a0 + 15] = 0\n 60815: u8 [a0 + 14] = 0\n 60818: u8 [a0 + 13] = 0\n 60821: u8 [a0 + 12] = 0\n 60824: u8 [a0 + 11] = 0\n 60827: u8 [a0 + 10] = 0\n 60830: u8 [a0 + 9] = 0\n 60833: u8 [a0 + 8] = 0\n 60836: u8 [a0 + 7] = 0\n 60839: u8 [a0 + 6] = 0\n 60842: u8 [a0 + 5] = 0\n 60845: u8 [a0 + 4] = 0\n 60848: u8 [a0 + 3] = 0\n 60851: u8 [a0 + 2] = 0\n 60854: u8 [a0 + 1] = 0\n 60857: u8 [a0 + 0] = 0\n 60859: a1 = 0x40\n 60862: a0 = 0\n 60864: ra = 718, jump @0\n      : @777 [@dyn 359] (gas: 28)\n 60871: i32 a0 = a0 + 0\n 60873: i32 a2 = s1 + 0x6e0\n 60877: a1 = 0x40\n 60880: ecalli 9 // 'hash_keccak_256'\n 60882: a0 = u64 [s1 + 0x6f8]\n 60886: a1 = u64 [s1 + 0x6f0]\n 60890: a2 = u64 [s1 + 0x6e8]\n 60894: a3 = u64 [s1 + 0x6e0]\n 60898: a0 = reverse a0\n 60900: a1 = reverse a1\n 60902: a2 = reverse a2\n 60904: a3 = reverse a3\n 60906: u64 [s1 + 0x798] = a3\n 60910: u64 [s1 + 0x790] = a2\n 60914: u64 [s1 + 0x788] = a1\n 60918: u64 [s1 + 0x780] = a0\n 60922: u64 [s1 + 1784] = 0\n 60926: u64 [s1 + 1776] = 0\n 60930: u64 [s1 + 1768] = 0\n 60934: u64 [s1 + 1760] = 0\n 60938: u32 [s1 + 1888] = 0x20\n 60943: i32 a1 = s1 + 0x780\n 60947: i32 a3 = s1 + 0x6e0\n 60951: i32 a4 = s1 + 0x760\n 60955: a2 = 0xffffffffffffffff\n 60958: a0 = 0\n 60960: ecalli 8 // 'get_storage'\n 60962: fallthrough\n      : @778 (gas: 11)\n 60963: a0 = u64 [s1 + 0x6f0]\n 60967: a2 = u64 [s1 + 0x6e8]\n 60971: a1 = u64 [s1 + 0x6e0]\n 60975: u64 [s1 + 0x1d0] = a0\n 60979: a0 = a0 << 0x20\n 60982: a0 = a0 >> 0x20\n 60985: u64 [s1 + 0x1d8] = a1\n 60989: u64 [s1 + 0x1c8] = a2\n 60993: a1 = a1 | a2\n 60996: a0 = a0 | a1\n 60999: jump @780 if a0 != 0\n      : @779 (gas: 1)\n 61002: jump @882\n      : @780 (gas: 22)\n 61005: a0 = sp + 0xffffffffffffffe0\n 61008: a0 = a0 & 0xffffffffffffffe0\n 61011: u64 [s1 + 0x1c0] = a0\n 61015: sp = a0\n 61017: u64 [a0 + 24] = 0\n 61020: u64 [a0 + 16] = 0\n 61023: u64 [a0 + 8] = 0\n 61026: u64 [a0 + 0] = 0\n 61028: i32 a0 = a0 + 0\n 61030: ecalli 17 // 'value_transferred'\n 61032: a1 = u64 [s1 + 0x1c0]\n 61036: a0 = u64 [a1 + 0x18]\n 61039: u64 [s1 + 0x60] = a0\n 61042: a0 = u64 [a1 + 0x10]\n 61045: u64 [s1 + 0x68] = a0\n 61048: a0 = u64 [a1 + 0x8]\n 61051: u64 [s1 + 0x50] = a0\n 61054: a0 = u64 [a1]\n 61056: u64 [s1 + 0x58] = a0\n 61059: a0 = 0x40\n 61062: a1 = 0x20\n 61065: ra = 720, jump @0\n      : @781 [@dyn 360] (gas: 103)\n 61072: a1 = u8 [a0 + 0x11]\n 61075: a2 = u8 [a0 + 0x10]\n 61078: a3 = u8 [a0 + 0x12]\n 61081: a4 = u8 [a0 + 0x13]\n 61084: a1 = a1 << 0x8\n 61087: a1 = a1 | a2\n 61090: a3 = a3 << 0x10\n 61093: a4 = a4 << 0x18\n 61096: a3 = a3 | a4\n 61099: a1 = a1 | a3\n 61102: a2 = u8 [a0 + 0x15]\n 61105: a3 = u8 [a0 + 0x14]\n 61108: a4 = u8 [a0 + 0x16]\n 61111: a5 = u8 [a0 + 0x17]\n 61114: a2 = a2 << 0x8\n 61117: a2 = a2 | a3\n 61120: a4 = a4 << 0x10\n 61123: a5 = a5 << 0x18\n 61126: a4 = a4 | a5\n 61129: a2 = a2 | a4\n 61132: a2 = a2 << 0x20\n 61135: t0 = a2 | a1\n 61138: a2 = u8 [a0 + 0x1]\n 61141: a3 = u8 [a0]\n 61143: a4 = u8 [a0 + 0x2]\n 61146: a5 = u8 [a0 + 0x3]\n 61149: a2 = a2 << 0x8\n 61152: a2 = a2 | a3\n 61155: a4 = a4 << 0x10\n 61158: a5 = a5 << 0x18\n 61161: a4 = a4 | a5\n 61164: a2 = a2 | a4\n 61167: a3 = u8 [a0 + 0x5]\n 61170: a4 = u8 [a0 + 0x4]\n 61173: a5 = u8 [a0 + 0x6]\n 61176: a1 = u8 [a0 + 0x7]\n 61179: a3 = a3 << 0x8\n 61182: a3 = a3 | a4\n 61185: a5 = a5 << 0x10\n 61188: a1 = a1 << 0x18\n 61191: a1 = a1 | a5\n 61194: a1 = a1 | a3\n 61197: a1 = a1 << 0x20\n 61200: t1 = a1 | a2\n 61203: a1 = u8 [a0 + 0x19]\n 61206: a3 = u8 [a0 + 0x18]\n 61209: a4 = u8 [a0 + 0x1a]\n 61212: a5 = u8 [a0 + 0x1b]\n 61215: a1 = a1 << 0x8\n 61218: a1 = a1 | a3\n 61221: a4 = a4 << 0x10\n 61224: a5 = a5 << 0x18\n 61227: a4 = a4 | a5\n 61230: a1 = a1 | a4\n 61233: a3 = u8 [a0 + 0x1d]\n 61236: a4 = u8 [a0 + 0x1c]\n 61239: a5 = u8 [a0 + 0x1e]\n 61242: a2 = u8 [a0 + 0x1f]\n 61245: a3 = a3 << 0x8\n 61248: a3 = a3 | a4\n 61251: a5 = a5 << 0x10\n 61254: a2 = a2 << 0x18\n 61257: a2 = a2 | a5\n 61260: a2 = a2 | a3\n 61263: a2 = a2 << 0x20\n 61266: a3 = a2 | a1\n 61269: a1 = u8 [a0 + 0x9]\n 61272: a2 = u8 [a0 + 0x8]\n 61275: a4 = u8 [a0 + 0xa]\n 61278: a5 = u8 [a0 + 0xb]\n 61281: a1 = a1 << 0x8\n 61284: a1 = a1 | a2\n 61287: a4 = a4 << 0x10\n 61290: a5 = a5 << 0x18\n 61293: a4 = a4 | a5\n 61296: a1 = a1 | a4\n 61299: a2 = u8 [a0 + 0xd]\n 61302: a4 = u8 [a0 + 0xc]\n 61305: a5 = u8 [a0 + 0xe]\n 61308: a0 = u8 [a0 + 0xf]\n 61311: a2 = a2 << 0x8\n 61314: a2 = a2 | a4\n 61317: a5 = a5 << 0x10\n 61320: a0 = a0 << 0x18\n 61323: a0 = a0 | a5\n 61326: a0 = a0 | a2\n 61329: a0 = a0 << 0x20\n 61332: a0 = a0 | a1\n 61335: a2 = reverse a0\n 61337: a3 = reverse a3\n 61339: a0 = reverse t1\n 61341: a1 = reverse t0\n 61343: u64 [s1 + 0x40] = a0\n 61346: u64 [s1 + 0x38] = a1\n 61349: a0 = a0 | a1\n 61352: a1 = a3 | a2\n 61355: a1 = a1 | a0\n 61358: a1 = a1 >> 0x20\n 61361: u64 [s1 + 0x48] = a2\n 61364: a0 = a0 | a2\n 61367: a0 = a0 << 0x20\n 61370: a0 = a0 | a1\n 61373: jump @783 if a0 == 0\n      : @782 (gas: 1)\n 61376: jump @899\n      : @783 (gas: 9)\n 61379: a0 = 0x1800000000\n 61389: u64 [s1 + 0x1b0] = a0\n 61393: a0 = 0x400000000\n 61403: u64 [s1 + 0x1b8] = a0\n 61407: u64 [s1 + 0x28] = a3\n 61410: i32 a0 = a3 + 0\n 61412: u64 [s1 + 0x1c0] = a0\n 61416: a1 = 0x20\n 61419: ra = 722, jump @0\n      : @784 [@dyn 361] (gas: 59)\n 61426: u8 [a0 + 31] = 0\n 61429: u8 [a0 + 30] = 0\n 61432: u8 [a0 + 29] = 0\n 61435: u8 [a0 + 28] = 0\n 61438: u8 [a0 + 27] = 0\n 61441: u8 [a0 + 26] = 0\n 61444: u8 [a0 + 25] = 0\n 61447: u8 [a0 + 24] = 0\n 61450: u8 [a0 + 23] = 0\n 61453: u8 [a0 + 22] = 0\n 61456: u8 [a0 + 21] = 0\n 61459: u8 [a0 + 20] = 0\n 61462: u8 [a0 + 19] = 0\n 61465: u8 [a0 + 18] = 0\n 61468: u8 [a0 + 17] = 0\n 61471: u8 [a0 + 16] = 0\n 61474: u8 [a0 + 15] = 0\n 61477: u8 [a0 + 14] = 0\n 61480: u8 [a0 + 13] = 0\n 61483: u8 [a0 + 12] = 0\n 61486: u8 [a0 + 11] = 0\n 61489: u8 [a0 + 10] = 0\n 61492: u8 [a0 + 9] = 0\n 61495: u8 [a0 + 8] = 0\n 61498: u8 [a0 + 7] = 0\n 61501: u8 [a0 + 6] = 0\n 61504: u8 [a0 + 5] = 0\n 61507: u8 [a0 + 4] = 0\n 61510: u8 [a0 + 3] = 0xfe\n 61515: u8 [a0 + 2] = 0xb1\n 61520: u8 [a0 + 1] = 0x35\n 61524: u8 [a0 + 0] = 0xa0\n 61528: ecalli 11 // 'ref_time_left'\n 61530: a0 = u64 [s1 + 0x1c8]\n 61534: a0 = reverse a0\n 61536: a1 = a0 << 0x20\n 61539: a2 = u64 [s1 + 0x1d0]\n 61543: a2 = reverse a2\n 61545: a2 = a2 >> 0x20\n 61548: a3 = a2 | a1\n 61551: a1 = u64 [s1 + 0x1d8]\n 61555: a1 = reverse a1\n 61557: a2 = a1 << 0x20\n 61560: a0 = a0 >> 0x20\n 61563: a0 = a0 | a2\n 61566: a1 = a1 >> 0x20\n 61569: u64 [s1 + 0x1c8] = a0\n 61573: u64 [s1 + 0x3e8] = a0\n 61577: u64 [s1 + 0x1d8] = a3\n 61581: u64 [s1 + 0x3e0] = a3\n 61585: u64 [s1 + 0x1d0] = a1\n 61589: u32 [s1 + 0x3f0] = a1\n 61593: u64 [s1 + 1048] = 0\n 61597: u64 [s1 + 1040] = 0\n 61601: u64 [s1 + 1032] = 0\n 61605: u64 [s1 + 1024] = 0\n 61609: a1 = 0x4\n 61612: a0 = u64 [s1 + 0x1c0]\n 61616: ra = 724, jump @0\n      : @785 [@dyn 362] (gas: 4)\n 61623: u64 [s1 + 0x30] = a0\n 61626: a1 = 0x20\n 61629: a0 = u64 [s1 + 0x1c0]\n 61633: ra = 726, jump @0\n      : @786 [@dyn 363] (gas: 31)\n 61640: u32 [s1 + 1056] = 0x20\n 61645: u64 [s1 + 1112] = 0\n 61649: u64 [s1 + 1104] = 0\n 61653: u64 [s1 + 1096] = 0\n 61657: u64 [s1 + 1088] = 0\n 61661: a1 = s1 + 0x3e0\n 61665: a1 = a1 << 0x20\n 61668: a1 = a1 >> 0x20\n 61671: a2 = u64 [s1 + 0x1b0]\n 61675: t0 = a1 | a2\n 61678: a1 = s1 + 0x400\n 61682: a1 = a1 << 0x20\n 61685: a1 = a1 >> 0x20\n 61688: a2 = s1 + 0x440\n 61692: a2 = a2 << 0x20\n 61695: a3 = a2 | a1\n 61698: a1 = u64 [s1 + 0x30]\n 61701: a1 = a1 << 0x20\n 61704: a1 = a1 >> 0x20\n 61707: a4 = u64 [s1 + 0x1b8]\n 61711: a4 = a4 | a1\n 61714: a0 = a0 << 0x20\n 61717: a0 = a0 >> 0x20\n 61720: a1 = s1 + 0x420\n 61724: a1 = a1 << 0x20\n 61727: a5 = a1 | a0\n 61730: a1 = 0xffffffffffffffff\n 61733: a2 = 0xffffffffffffffff\n 61736: a0 = t0\n 61738: ecalli 1 // 'call'\n 61740: fallthrough\n      : @787 (gas: 1)\n 61741: jump @789 if a0 == 0\n      : @788 (gas: 1)\n 61744: jump @881\n      : @789 (gas: 2)\n 61747: ecalli 13 // 'return_data_size'\n 61749: fallthrough\n      : @790 (gas: 2)\n 61750: a1 = 0x20\n 61753: jump @792 if a0 >=u a1\n      : @791 (gas: 3)\n 61756: ecalli 13 // 'return_data_size'\n 61758: a1 = a0\n 61760: fallthrough\n      : @792 (gas: 28)\n 61761: a3 = u64 [s1 + 0x48]\n 61764: t0 = u64 [s1 + 0x40]\n 61767: a2 = u64 [s1 + 0x28]\n 61770: a5 = u64 [s1 + 0x38]\n 61773: a0 = a1 + 0x1f\n 61776: u64 [s1 + 0x40] = a1\n 61779: a1 = a0 <u a1\n 61782: u64 [s1 + 72] = 0\n 61785: a1 = a1 & 0x1\n 61788: a0 = a0 & 0xffffffffffffffe0\n 61791: a2 = a2 + a0\n 61794: u64 [s1 + 0x38] = a2\n 61797: a0 = a2 <u a0\n 61800: a2 = a1 + a5\n 61803: a4 = a2 + a0\n 61806: a2 = a4 ^ a1\n 61809: a1 = a4 <u a1\n 61812: a1 = a0 if a2 == 0\n 61815: a1 = a1 + a3\n 61818: a0 = a1 <u a3\n 61821: a0 = a0 + t0\n 61824: u64 [s1 + 0x28] = a1\n 61827: u64 [s1 + 0x20] = a0\n 61830: a0 = a0 | a1\n 61833: u64 [s1 + 0x30] = a4\n 61836: a1 = a4 <u 0x1\n 61839: a1 = 0 if a0 != 0\n 61841: jump @794 if a1 != 0\n      : @793 (gas: 1)\n 61844: jump @903\n      : @794 (gas: 3)\n 61847: a0 = 0x40\n 61850: a1 = 0x20\n 61853: ra = 728, jump @0\n      : @795 [@dyn 364] (gas: 80)\n 61860: a1 = u64 [s1 + 0x20]\n 61863: a1 = reverse a1\n 61865: a2 = u64 [s1 + 0x28]\n 61868: a2 = reverse a2\n 61870: a3 = u64 [s1 + 0x30]\n 61873: a3 = reverse a3\n 61875: a4 = u64 [s1 + 0x38]\n 61878: a4 = reverse a4\n 61880: u8 [a0 + 0x18] = a4\n 61883: a5 = a4 >> 0x38\n 61886: u8 [a0 + 0x1f] = a5\n 61889: a5 = a4 >> 0x30\n 61892: u8 [a0 + 0x1e] = a5\n 61895: a5 = a4 >> 0x28\n 61898: u8 [a0 + 0x1d] = a5\n 61901: a5 = a4 >> 0x20\n 61904: u8 [a0 + 0x1c] = a5\n 61907: a5 = a4 >> 0x18\n 61910: u8 [a0 + 0x1b] = a5\n 61913: a5 = a4 >> 0x10\n 61916: u8 [a0 + 0x1a] = a5\n 61919: a4 = a4 >> 0x8\n 61922: u8 [a0 + 0x19] = a4\n 61925: u8 [a0 + 0x10] = a3\n 61928: a4 = a3 >> 0x38\n 61931: u8 [a0 + 0x17] = a4\n 61934: a4 = a3 >> 0x30\n 61937: u8 [a0 + 0x16] = a4\n 61940: a4 = a3 >> 0x28\n 61943: u8 [a0 + 0x15] = a4\n 61946: a4 = a3 >> 0x20\n 61949: u8 [a0 + 0x14] = a4\n 61952: a4 = a3 >> 0x18\n 61955: u8 [a0 + 0x13] = a4\n 61958: a4 = a3 >> 0x10\n 61961: u8 [a0 + 0x12] = a4\n 61964: a3 = a3 >> 0x8\n 61967: u8 [a0 + 0x11] = a3\n 61970: u8 [a0 + 0x8] = a2\n 61973: a3 = a2 >> 0x38\n 61976: u8 [a0 + 0xf] = a3\n 61979: a3 = a2 >> 0x30\n 61982: u8 [a0 + 0xe] = a3\n 61985: a3 = a2 >> 0x28\n 61988: u8 [a0 + 0xd] = a3\n 61991: a3 = a2 >> 0x20\n 61994: u8 [a0 + 0xc] = a3\n 61997: a3 = a2 >> 0x18\n 62000: u8 [a0 + 0xb] = a3\n 62003: a3 = a2 >> 0x10\n 62006: u8 [a0 + 0xa] = a3\n 62009: a2 = a2 >> 0x8\n 62012: u8 [a0 + 0x9] = a2\n 62015: u8 [a0] = a1\n 62017: a2 = a1 >> 0x38\n 62020: u8 [a0 + 0x7] = a2\n 62023: a2 = a1 >> 0x30\n 62026: u8 [a0 + 0x6] = a2\n 62029: a2 = a1 >> 0x28\n 62032: u8 [a0 + 0x5] = a2\n 62035: a2 = a1 >> 0x20\n 62038: u8 [a0 + 0x4] = a2\n 62041: a2 = a1 >> 0x18\n 62044: u8 [a0 + 0x3] = a2\n 62047: a2 = a1 >> 0x10\n 62050: u8 [a0 + 0x2] = a2\n 62053: a1 = a1 >> 0x8\n 62056: a5 = u64 [s1 + 0x48]\n 62059: a2 = a5 >u 0\n 62061: a3 = u64 [s1 + 0x40]\n 62064: a3 = a3 <u 0x20\n 62067: a3 = a3 ^ 0x1\n 62070: a3 = a2 if a5 != 0\n 62073: a2 = a5 >u 0\n 62075: a4 = a5 >u 0\n 62077: a4 = a2 if a5 == 0\n 62080: a2 = a5 | a5\n 62083: a4 = a3 if a2 == 0\n 62086: u8 [a0 + 0x1] = a1\n 62089: jump @797 if a4 != 0\n      : @796 (gas: 1)\n 62092: jump @900\n      : @797 (gas: 3)\n 62095: a1 = 0x20\n 62098: a0 = u64 [s1 + 0x1c0]\n 62102: ra = 730, jump @0\n      : @798 [@dyn 365] (gas: 108)\n 62109: a1 = u8 [a0 + 0x1]\n 62112: a2 = u8 [a0]\n 62114: a3 = u8 [a0 + 0x2]\n 62117: a4 = u8 [a0 + 0x3]\n 62120: a1 = a1 << 0x8\n 62123: a1 = a1 | a2\n 62126: a3 = a3 << 0x10\n 62129: a4 = a4 << 0x18\n 62132: a3 = a3 | a4\n 62135: a1 = a1 | a3\n 62138: a2 = u8 [a0 + 0x5]\n 62141: a3 = u8 [a0 + 0x4]\n 62144: a4 = u8 [a0 + 0x6]\n 62147: a5 = u8 [a0 + 0x7]\n 62150: a2 = a2 << 0x8\n 62153: a2 = a2 | a3\n 62156: a4 = a4 << 0x10\n 62159: a5 = a5 << 0x18\n 62162: a4 = a4 | a5\n 62165: a2 = a2 | a4\n 62168: a2 = a2 << 0x20\n 62171: t0 = a2 | a1\n 62174: a2 = u8 [a0 + 0x9]\n 62177: a3 = u8 [a0 + 0x8]\n 62180: a4 = u8 [a0 + 0xa]\n 62183: a5 = u8 [a0 + 0xb]\n 62186: a2 = a2 << 0x8\n 62189: a2 = a2 | a3\n 62192: a4 = a4 << 0x10\n 62195: a5 = a5 << 0x18\n 62198: a4 = a4 | a5\n 62201: t1 = a4 | a2\n 62204: a3 = u8 [a0 + 0x11]\n 62207: a4 = u8 [a0 + 0x10]\n 62210: a5 = u8 [a0 + 0x12]\n 62213: a1 = u8 [a0 + 0x13]\n 62216: a3 = a3 << 0x8\n 62219: a3 = a3 | a4\n 62222: a5 = a5 << 0x10\n 62225: a1 = a1 << 0x18\n 62228: a1 = a1 | a5\n 62231: a1 = a1 | a3\n 62234: a3 = u8 [a0 + 0x15]\n 62237: a4 = u8 [a0 + 0x14]\n 62240: a5 = u8 [a0 + 0x16]\n 62243: a2 = u8 [a0 + 0x17]\n 62246: a3 = a3 << 0x8\n 62249: a3 = a3 | a4\n 62252: a5 = a5 << 0x10\n 62255: a2 = a2 << 0x18\n 62258: a2 = a2 | a5\n 62261: a2 = a2 | a3\n 62264: a2 = a2 << 0x20\n 62267: t2 = a2 | a1\n 62270: a1 = u8 [a0 + 0x19]\n 62273: a2 = u8 [a0 + 0x18]\n 62276: a4 = u8 [a0 + 0x1a]\n 62279: a5 = u8 [a0 + 0x1b]\n 62282: a1 = a1 << 0x8\n 62285: a1 = a1 | a2\n 62288: a4 = a4 << 0x10\n 62291: a5 = a5 << 0x18\n 62294: a4 = a4 | a5\n 62297: a1 = a1 | a4\n 62300: a2 = u8 [a0 + 0x1d]\n 62303: a4 = u8 [a0 + 0x1c]\n 62306: a5 = u8 [a0 + 0x1e]\n 62309: a3 = u8 [a0 + 0x1f]\n 62312: a2 = a2 << 0x8\n 62315: a2 = a2 | a4\n 62318: a5 = a5 << 0x10\n 62321: a3 = a3 << 0x18\n 62324: a3 = a3 | a5\n 62327: a2 = a2 | a3\n 62330: a2 = a2 << 0x20\n 62333: a1 = a1 | a2\n 62336: a2 = reverse t2\n 62338: a3 = u64 [s1 + 0x50]\n 62341: a4 = a3 ^ a2\n 62344: a2 = a3 <u a2\n 62347: a1 = reverse a1\n 62349: a3 = u64 [s1 + 0x58]\n 62352: a3 = a3 <u a1\n 62355: a1 = u8 [a0 + 0xd]\n 62358: a3 = a2 if a4 != 0\n 62361: a2 = u8 [a0 + 0xc]\n 62364: a4 = u8 [a0 + 0xe]\n 62367: a0 = u8 [a0 + 0xf]\n 62370: a1 = a1 << 0x8\n 62373: a1 = a1 | a2\n 62376: a4 = a4 << 0x10\n 62379: a0 = a0 << 0x18\n 62382: a0 = a0 | a4\n 62385: a0 = a0 | a1\n 62388: a0 = a0 << 0x20\n 62391: a0 = a0 | t1\n 62394: a0 = reverse a0\n 62396: a1 = reverse t0\n 62398: a4 = u64 [s1 + 0x60]\n 62401: a2 = a4 ^ a1\n 62404: a1 = a4 <u a1\n 62407: a5 = u64 [s1 + 0x68]\n 62410: a4 = a5 <u a0\n 62413: a4 = a1 if a2 != 0\n 62416: a0 = a0 ^ a5\n 62419: a0 = a0 | a2\n 62422: a3 = a4 if a0 != 0\n 62425: jump @800 if a3 == 0\n      : @799 (gas: 1)\n 62428: jump @887\n      : @800 (gas: 21)\n 62431: a0 = u64 [s1 + 0x78]\n 62434: a1 = u64 [s1 + 0x70]\n 62437: a0 = a0 | a1\n 62440: a1 = u64 [s1 + 0x188]\n 62444: a2 = u64 [s1 + 0x80]\n 62448: a1 = a1 | a2\n 62451: a1 = a1 | a0\n 62454: a0 = u64 [s1 + 0x88]\n 62458: a0 = reverse a0\n 62460: u64 [s1 + 0x1c0] = a0\n 62464: a0 = u64 [s1 + 0x170]\n 62468: a0 = reverse a0\n 62470: u64 [s1 + 0x188] = a0\n 62474: a0 = u64 [s1 + 0x180]\n 62478: a0 = reverse a0\n 62480: u64 [s1 + 0x180] = a0\n 62484: a0 = u64 [s1 + 0x178]\n 62488: a0 = reverse a0\n 62490: u64 [s1 + 0x178] = a0\n 62494: u64 [s1 + 0x88] = a1\n 62498: jump @802 if a1 != 0\n      : @801 (gas: 1)\n 62501: jump @862\n      : @802 (gas: 3)\n 62504: a1 = 0x20\n 62507: a0 = 0\n 62509: ra = 732, jump @0\n      : @803 [@dyn 366] (gas: 67)\n 62516: a1 = u64 [s1 + 0x198]\n 62520: u8 [a0 + 0x10] = a1\n 62523: a1 = u64 [s1 + 0xf8]\n 62527: u8 [a0 + 0xf] = a1\n 62530: a1 = u64 [s1 + 0xf0]\n 62534: u8 [a0 + 0xe] = a1\n 62537: a1 = u64 [s1 + 0xe8]\n 62541: u8 [a0 + 0xd] = a1\n 62544: a1 = u64 [s1 + 0xe0]\n 62548: u8 [a0 + 0xc] = a1\n 62551: a1 = u64 [s1 + 0xd8]\n 62555: u8 [a0 + 0xb] = a1\n 62558: a1 = u64 [s1 + 0xd0]\n 62562: u8 [a0 + 0xa] = a1\n 62565: a1 = u64 [s1 + 0xc8]\n 62569: u8 [a0 + 0x9] = a1\n 62572: a1 = u64 [s1 + 0x1a0]\n 62576: u8 [a0 + 0x8] = a1\n 62579: a1 = u64 [s1 + 0xc0]\n 62583: u8 [a0 + 0x7] = a1\n 62586: a1 = u64 [s1 + 0xb8]\n 62590: u8 [a0 + 0x6] = a1\n 62593: a1 = u64 [s1 + 0xb0]\n 62597: u8 [a0 + 0x5] = a1\n 62600: a1 = u64 [s1 + 0xa8]\n 62604: u8 [a0 + 0x4] = a1\n 62607: a1 = u64 [s1 + 0xa0]\n 62611: u8 [a0 + 0x3] = a1\n 62614: a1 = u64 [s1 + 0x98]\n 62618: u8 [a0 + 0x2] = a1\n 62621: a1 = u64 [s1 + 0x90]\n 62625: u8 [a0 + 0x1] = a1\n 62628: a1 = u64 [s1 + 0x1a8]\n 62632: u8 [a0] = a1\n 62634: a1 = u64 [s1 + 0x190]\n 62638: u8 [a0 + 0x18] = a1\n 62641: a1 = u64 [s1 + 0x130]\n 62645: u8 [a0 + 0x17] = a1\n 62648: a1 = u64 [s1 + 0x128]\n 62652: u8 [a0 + 0x16] = a1\n 62655: a1 = u64 [s1 + 0x120]\n 62659: u8 [a0 + 0x15] = a1\n 62662: a1 = u64 [s1 + 0x118]\n 62666: u8 [a0 + 0x14] = a1\n 62669: a1 = u64 [s1 + 0x110]\n 62673: u8 [a0 + 0x13] = a1\n 62676: a1 = u64 [s1 + 0x108]\n 62680: u8 [a0 + 0x12] = a1\n 62683: a1 = u64 [s1 + 0x100]\n 62687: u8 [a0 + 0x11] = a1\n 62690: a1 = u64 [s1 + 0x168]\n 62694: u8 [a0 + 0x1f] = a1\n 62697: a1 = u64 [s1 + 0x160]\n 62701: u8 [a0 + 0x1e] = a1\n 62704: a1 = u64 [s1 + 0x158]\n 62708: u8 [a0 + 0x1d] = a1\n 62711: a1 = u64 [s1 + 0x150]\n 62715: u8 [a0 + 0x1c] = a1\n 62718: a1 = u64 [s1 + 0x148]\n 62722: u8 [a0 + 0x1b] = a1\n 62725: a1 = u64 [s1 + 0x140]\n 62729: u8 [a0 + 0x1a] = a1\n 62732: a1 = u64 [s1 + 0x138]\n 62736: u8 [a0 + 0x19] = a1\n 62739: a0 = 0x20\n 62742: a1 = 0x20\n 62745: ra = 734, jump @0\n      : @804 [@dyn 367] (gas: 35)\n 62752: u8 [a0 + 31] = 0x2\n 62756: u8 [a0 + 30] = 0\n 62759: u8 [a0 + 29] = 0\n 62762: u8 [a0 + 28] = 0\n 62765: u8 [a0 + 27] = 0\n 62768: u8 [a0 + 26] = 0\n 62771: u8 [a0 + 25] = 0\n 62774: u8 [a0 + 24] = 0\n 62777: u8 [a0 + 23] = 0\n 62780: u8 [a0 + 22] = 0\n 62783: u8 [a0 + 21] = 0\n 62786: u8 [a0 + 20] = 0\n 62789: u8 [a0 + 19] = 0\n 62792: u8 [a0 + 18] = 0\n 62795: u8 [a0 + 17] = 0\n 62798: u8 [a0 + 16] = 0\n 62801: u8 [a0 + 15] = 0\n 62804: u8 [a0 + 14] = 0\n 62807: u8 [a0 + 13] = 0\n 62810: u8 [a0 + 12] = 0\n 62813: u8 [a0 + 11] = 0\n 62816: u8 [a0 + 10] = 0\n 62819: u8 [a0 + 9] = 0\n 62822: u8 [a0 + 8] = 0\n 62825: u8 [a0 + 7] = 0\n 62828: u8 [a0 + 6] = 0\n 62831: u8 [a0 + 5] = 0\n 62834: u8 [a0 + 4] = 0\n 62837: u8 [a0 + 3] = 0\n 62840: u8 [a0 + 2] = 0\n 62843: u8 [a0 + 1] = 0\n 62846: u8 [a0 + 0] = 0\n 62848: a1 = 0x40\n 62851: a0 = 0\n 62853: ra = 736, jump @0\n      : @805 [@dyn 368] (gas: 38)\n 62860: i32 a0 = a0 + 0\n 62862: i32 a2 = s1 + 0x6e0\n 62866: a1 = 0x40\n 62869: ecalli 9 // 'hash_keccak_256'\n 62871: a0 = u64 [s1 + 0x6f8]\n 62875: a1 = u64 [s1 + 0x6f0]\n 62879: a2 = u64 [s1 + 0x6e8]\n 62883: a3 = u64 [s1 + 0x6e0]\n 62887: a0 = reverse a0\n 62889: a1 = reverse a1\n 62891: a2 = reverse a2\n 62893: a3 = reverse a3\n 62895: u64 [s1 + 0x798] = a3\n 62899: u64 [s1 + 0x790] = a2\n 62903: u64 [s1 + 0x788] = a1\n 62907: u64 [s1 + 0x780] = a0\n 62911: u64 [s1 + 1784] = 0\n 62915: u64 [s1 + 1776] = 0\n 62919: u64 [s1 + 1768] = 0\n 62923: u64 [s1 + 1760] = 0\n 62927: u32 [s1 + 1888] = 0x20\n 62932: i32 a1 = s1 + 0x780\n 62936: i32 a3 = s1 + 0x6e0\n 62940: i32 a4 = s1 + 0x760\n 62944: a2 = 0xffffffffffffffff\n 62947: a0 = 0\n 62949: ecalli 8 // 'get_storage'\n 62951: a0 = u64 [s1 + 0x6f8]\n 62955: u64 [s1 + 0x78] = a0\n 62958: a0 = u64 [s1 + 0x6f0]\n 62962: u64 [s1 + 0x80] = a0\n 62966: a0 = u64 [s1 + 0x6e8]\n 62970: u64 [s1 + 0x68] = a0\n 62973: a0 = u64 [s1 + 0x6e0]\n 62977: u64 [s1 + 0x70] = a0\n 62980: a0 = 0x40\n 62983: a1 = 0x20\n 62986: ra = 738, jump @0\n      : @806 [@dyn 369] (gas: 103)\n 62993: a1 = u8 [a0 + 0x11]\n 62996: a2 = u8 [a0 + 0x10]\n 62999: a3 = u8 [a0 + 0x12]\n 63002: a4 = u8 [a0 + 0x13]\n 63005: a1 = a1 << 0x8\n 63008: a1 = a1 | a2\n 63011: a3 = a3 << 0x10\n 63014: a4 = a4 << 0x18\n 63017: a3 = a3 | a4\n 63020: a1 = a1 | a3\n 63023: a2 = u8 [a0 + 0x15]\n 63026: a3 = u8 [a0 + 0x14]\n 63029: a4 = u8 [a0 + 0x16]\n 63032: a5 = u8 [a0 + 0x17]\n 63035: a2 = a2 << 0x8\n 63038: a2 = a2 | a3\n 63041: a4 = a4 << 0x10\n 63044: a5 = a5 << 0x18\n 63047: a4 = a4 | a5\n 63050: a2 = a2 | a4\n 63053: a2 = a2 << 0x20\n 63056: t0 = a2 | a1\n 63059: a2 = u8 [a0 + 0x1]\n 63062: a3 = u8 [a0]\n 63064: a4 = u8 [a0 + 0x2]\n 63067: a5 = u8 [a0 + 0x3]\n 63070: a2 = a2 << 0x8\n 63073: a2 = a2 | a3\n 63076: a4 = a4 << 0x10\n 63079: a5 = a5 << 0x18\n 63082: a4 = a4 | a5\n 63085: a2 = a2 | a4\n 63088: a3 = u8 [a0 + 0x5]\n 63091: a4 = u8 [a0 + 0x4]\n 63094: a5 = u8 [a0 + 0x6]\n 63097: a1 = u8 [a0 + 0x7]\n 63100: a3 = a3 << 0x8\n 63103: a3 = a3 | a4\n 63106: a5 = a5 << 0x10\n 63109: a1 = a1 << 0x18\n 63112: a1 = a1 | a5\n 63115: a1 = a1 | a3\n 63118: a1 = a1 << 0x20\n 63121: t1 = a1 | a2\n 63124: a1 = u8 [a0 + 0x19]\n 63127: a3 = u8 [a0 + 0x18]\n 63130: a4 = u8 [a0 + 0x1a]\n 63133: a5 = u8 [a0 + 0x1b]\n 63136: a1 = a1 << 0x8\n 63139: a1 = a1 | a3\n 63142: a4 = a4 << 0x10\n 63145: a5 = a5 << 0x18\n 63148: a4 = a4 | a5\n 63151: a1 = a1 | a4\n 63154: a3 = u8 [a0 + 0x1d]\n 63157: a4 = u8 [a0 + 0x1c]\n 63160: a5 = u8 [a0 + 0x1e]\n 63163: a2 = u8 [a0 + 0x1f]\n 63166: a3 = a3 << 0x8\n 63169: a3 = a3 | a4\n 63172: a5 = a5 << 0x10\n 63175: a2 = a2 << 0x18\n 63178: a2 = a2 | a5\n 63181: a2 = a2 | a3\n 63184: a2 = a2 << 0x20\n 63187: a3 = a2 | a1\n 63190: a1 = u8 [a0 + 0x9]\n 63193: a2 = u8 [a0 + 0x8]\n 63196: a4 = u8 [a0 + 0xa]\n 63199: a5 = u8 [a0 + 0xb]\n 63202: a1 = a1 << 0x8\n 63205: a1 = a1 | a2\n 63208: a4 = a4 << 0x10\n 63211: a5 = a5 << 0x18\n 63214: a4 = a4 | a5\n 63217: a1 = a1 | a4\n 63220: a2 = u8 [a0 + 0xd]\n 63223: a4 = u8 [a0 + 0xc]\n 63226: a5 = u8 [a0 + 0xe]\n 63229: a0 = u8 [a0 + 0xf]\n 63232: a2 = a2 << 0x8\n 63235: a2 = a2 | a4\n 63238: a5 = a5 << 0x10\n 63241: a0 = a0 << 0x18\n 63244: a0 = a0 | a5\n 63247: a0 = a0 | a2\n 63250: a0 = a0 << 0x20\n 63253: a0 = a0 | a1\n 63256: a2 = reverse a0\n 63258: a3 = reverse a3\n 63260: a0 = reverse t1\n 63262: a1 = reverse t0\n 63264: u64 [s1 + 0x58] = a0\n 63267: u64 [s1 + 0x50] = a1\n 63270: a0 = a0 | a1\n 63273: a1 = a3 | a2\n 63276: a1 = a1 | a0\n 63279: a1 = a1 >> 0x20\n 63282: u64 [s1 + 0x60] = a2\n 63285: a0 = a0 | a2\n 63288: a0 = a0 << 0x20\n 63291: a0 = a0 | a1\n 63294: jump @808 if a0 == 0\n      : @807 (gas: 1)\n 63297: jump @899\n      : @808 (gas: 5)\n 63300: u64 [s1 + 0x40] = a3\n 63303: i32 a0 = a3 + 0\n 63305: u64 [s1 + 0x170] = a0\n 63309: a1 = 0x20\n 63312: ra = 740, jump @0\n      : @809 [@dyn 370] (gas: 46)\n 63319: u8 [a0 + 31] = 0\n 63322: u8 [a0 + 30] = 0\n 63325: u8 [a0 + 29] = 0\n 63328: u8 [a0 + 28] = 0\n 63331: u8 [a0 + 27] = 0\n 63334: u8 [a0 + 26] = 0\n 63337: u8 [a0 + 25] = 0\n 63340: u8 [a0 + 24] = 0\n 63343: u8 [a0 + 23] = 0\n 63346: u8 [a0 + 22] = 0\n 63349: u8 [a0 + 21] = 0\n 63352: u8 [a0 + 20] = 0\n 63355: u8 [a0 + 19] = 0\n 63358: u8 [a0 + 18] = 0\n 63361: u8 [a0 + 17] = 0\n 63364: u8 [a0 + 16] = 0\n 63367: u8 [a0 + 15] = 0\n 63370: u8 [a0 + 14] = 0\n 63373: u8 [a0 + 13] = 0\n 63376: u8 [a0 + 12] = 0\n 63379: u8 [a0 + 11] = 0\n 63382: u8 [a0 + 10] = 0\n 63385: u8 [a0 + 9] = 0\n 63388: u8 [a0 + 8] = 0\n 63391: u8 [a0 + 7] = 0\n 63394: u8 [a0 + 6] = 0\n 63397: u8 [a0 + 5] = 0\n 63400: u8 [a0 + 4] = 0\n 63403: u8 [a0 + 3] = 0xfe\n 63408: u8 [a0 + 2] = 0xb1\n 63413: u8 [a0 + 1] = 0x35\n 63417: u8 [a0 + 0] = 0xa0\n 63421: ecalli 11 // 'ref_time_left'\n 63423: a0 = u64 [s1 + 0x1c8]\n 63427: u64 [s1 + 0x508] = a0\n 63431: a0 = u64 [s1 + 0x1d8]\n 63435: u64 [s1 + 0x500] = a0\n 63439: a0 = u64 [s1 + 0x1d0]\n 63443: u32 [s1 + 0x510] = a0\n 63447: u64 [s1 + 1336] = 0\n 63451: u64 [s1 + 1328] = 0\n 63455: u64 [s1 + 1320] = 0\n 63459: u64 [s1 + 1312] = 0\n 63463: a1 = 0x4\n 63466: a0 = u64 [s1 + 0x170]\n 63470: ra = 742, jump @0\n      : @810 [@dyn 371] (gas: 4)\n 63477: u64 [s1 + 0x48] = a0\n 63480: a1 = 0x20\n 63483: a0 = u64 [s1 + 0x170]\n 63487: ra = 744, jump @0\n      : @811 [@dyn 372] (gas: 31)\n 63494: u32 [s1 + 1344] = 0x20\n 63499: u64 [s1 + 1400] = 0\n 63503: u64 [s1 + 1392] = 0\n 63507: u64 [s1 + 1384] = 0\n 63511: u64 [s1 + 1376] = 0\n 63515: a1 = s1 + 0x500\n 63519: a1 = a1 << 0x20\n 63522: a1 = a1 >> 0x20\n 63525: a2 = u64 [s1 + 0x1b0]\n 63529: t0 = a1 | a2\n 63532: a1 = s1 + 0x520\n 63536: a1 = a1 << 0x20\n 63539: a1 = a1 >> 0x20\n 63542: a2 = s1 + 0x560\n 63546: a2 = a2 << 0x20\n 63549: a3 = a2 | a1\n 63552: a1 = u64 [s1 + 0x48]\n 63555: a1 = a1 << 0x20\n 63558: a1 = a1 >> 0x20\n 63561: a4 = u64 [s1 + 0x1b8]\n 63565: a4 = a4 | a1\n 63568: a0 = a0 << 0x20\n 63571: a0 = a0 >> 0x20\n 63574: a1 = s1 + 0x540\n 63578: a1 = a1 << 0x20\n 63581: a5 = a1 | a0\n 63584: a1 = 0xffffffffffffffff\n 63587: a2 = 0xffffffffffffffff\n 63590: a0 = t0\n 63592: ecalli 1 // 'call'\n 63594: fallthrough\n      : @812 (gas: 1)\n 63595: jump @814 if a0 == 0\n      : @813 (gas: 1)\n 63598: jump @881\n      : @814 (gas: 2)\n 63601: ecalli 13 // 'return_data_size'\n 63603: fallthrough\n      : @815 (gas: 2)\n 63604: a1 = 0x20\n 63607: jump @817 if a0 >=u a1\n      : @816 (gas: 3)\n 63610: ecalli 13 // 'return_data_size'\n 63612: a1 = a0\n 63614: fallthrough\n      : @817 (gas: 28)\n 63615: a3 = u64 [s1 + 0x60]\n 63618: t0 = u64 [s1 + 0x58]\n 63621: a5 = u64 [s1 + 0x40]\n 63624: a4 = u64 [s1 + 0x50]\n 63627: a0 = a1 + 0x1f\n 63630: u64 [s1 + 0x58] = a1\n 63633: a1 = a0 <u a1\n 63636: u64 [s1 + 96] = 0\n 63639: a1 = a1 & 0x1\n 63642: a0 = a0 & 0xffffffffffffffe0\n 63645: a5 = a5 + a0\n 63648: u64 [s1 + 0x50] = a5\n 63651: a0 = a5 <u a0\n 63654: a2 = a1 + a4\n 63657: a4 = a2 + a0\n 63660: a2 = a4 ^ a1\n 63663: a1 = a4 <u a1\n 63666: a1 = a0 if a2 == 0\n 63669: a1 = a1 + a3\n 63672: a0 = a1 <u a3\n 63675: a0 = a0 + t0\n 63678: u64 [s1 + 0x40] = a1\n 63681: u64 [s1 + 0x38] = a0\n 63684: a0 = a0 | a1\n 63687: u64 [s1 + 0x48] = a4\n 63690: a1 = a4 <u 0x1\n 63693: a1 = 0 if a0 != 0\n 63695: jump @819 if a1 != 0\n      : @818 (gas: 1)\n 63698: jump @905\n      : @819 (gas: 3)\n 63701: a0 = 0x40\n 63704: a1 = 0x20\n 63707: ra = 746, jump @0\n      : @820 [@dyn 373] (gas: 80)\n 63714: a1 = u64 [s1 + 0x38]\n 63717: a1 = reverse a1\n 63719: a2 = u64 [s1 + 0x40]\n 63722: a2 = reverse a2\n 63724: a3 = u64 [s1 + 0x48]\n 63727: a3 = reverse a3\n 63729: a4 = u64 [s1 + 0x50]\n 63732: a4 = reverse a4\n 63734: u8 [a0 + 0x18] = a4\n 63737: a5 = a4 >> 0x38\n 63740: u8 [a0 + 0x1f] = a5\n 63743: a5 = a4 >> 0x30\n 63746: u8 [a0 + 0x1e] = a5\n 63749: a5 = a4 >> 0x28\n 63752: u8 [a0 + 0x1d] = a5\n 63755: a5 = a4 >> 0x20\n 63758: u8 [a0 + 0x1c] = a5\n 63761: a5 = a4 >> 0x18\n 63764: u8 [a0 + 0x1b] = a5\n 63767: a5 = a4 >> 0x10\n 63770: u8 [a0 + 0x1a] = a5\n 63773: a4 = a4 >> 0x8\n 63776: u8 [a0 + 0x19] = a4\n 63779: u8 [a0 + 0x10] = a3\n 63782: a4 = a3 >> 0x38\n 63785: u8 [a0 + 0x17] = a4\n 63788: a4 = a3 >> 0x30\n 63791: u8 [a0 + 0x16] = a4\n 63794: a4 = a3 >> 0x28\n 63797: u8 [a0 + 0x15] = a4\n 63800: a4 = a3 >> 0x20\n 63803: u8 [a0 + 0x14] = a4\n 63806: a4 = a3 >> 0x18\n 63809: u8 [a0 + 0x13] = a4\n 63812: a4 = a3 >> 0x10\n 63815: u8 [a0 + 0x12] = a4\n 63818: a3 = a3 >> 0x8\n 63821: u8 [a0 + 0x11] = a3\n 63824: u8 [a0 + 0x8] = a2\n 63827: a3 = a2 >> 0x38\n 63830: u8 [a0 + 0xf] = a3\n 63833: a3 = a2 >> 0x30\n 63836: u8 [a0 + 0xe] = a3\n 63839: a3 = a2 >> 0x28\n 63842: u8 [a0 + 0xd] = a3\n 63845: a3 = a2 >> 0x20\n 63848: u8 [a0 + 0xc] = a3\n 63851: a3 = a2 >> 0x18\n 63854: u8 [a0 + 0xb] = a3\n 63857: a3 = a2 >> 0x10\n 63860: u8 [a0 + 0xa] = a3\n 63863: a2 = a2 >> 0x8\n 63866: u8 [a0 + 0x9] = a2\n 63869: u8 [a0] = a1\n 63871: a2 = a1 >> 0x38\n 63874: u8 [a0 + 0x7] = a2\n 63877: a2 = a1 >> 0x30\n 63880: u8 [a0 + 0x6] = a2\n 63883: a2 = a1 >> 0x28\n 63886: u8 [a0 + 0x5] = a2\n 63889: a2 = a1 >> 0x20\n 63892: u8 [a0 + 0x4] = a2\n 63895: a2 = a1 >> 0x18\n 63898: u8 [a0 + 0x3] = a2\n 63901: a2 = a1 >> 0x10\n 63904: u8 [a0 + 0x2] = a2\n 63907: a1 = a1 >> 0x8\n 63910: a5 = u64 [s1 + 0x60]\n 63913: a2 = a5 >u 0\n 63915: a3 = u64 [s1 + 0x58]\n 63918: a3 = a3 <u 0x20\n 63921: a3 = a3 ^ 0x1\n 63924: a3 = a2 if a5 != 0\n 63927: a2 = a5 >u 0\n 63929: a4 = a5 >u 0\n 63931: a4 = a2 if a5 == 0\n 63934: a2 = a5 | a5\n 63937: a4 = a3 if a2 == 0\n 63940: u8 [a0 + 0x1] = a1\n 63943: jump @822 if a4 != 0\n      : @821 (gas: 1)\n 63946: jump @900\n      : @822 (gas: 3)\n 63949: a1 = 0x20\n 63952: a0 = u64 [s1 + 0x170]\n 63956: ra = 748, jump @0\n      : @823 [@dyn 374] (gas: 112)\n 63963: a1 = u8 [a0 + 0x1]\n 63966: a2 = u8 [a0]\n 63968: a3 = u8 [a0 + 0x2]\n 63971: a4 = u8 [a0 + 0x3]\n 63974: a1 = a1 << 0x8\n 63977: a1 = a1 | a2\n 63980: a3 = a3 << 0x10\n 63983: a4 = a4 << 0x18\n 63986: a3 = a3 | a4\n 63989: a1 = a1 | a3\n 63992: a2 = u8 [a0 + 0x5]\n 63995: a3 = u8 [a0 + 0x4]\n 63998: a4 = u8 [a0 + 0x6]\n 64001: a5 = u8 [a0 + 0x7]\n 64004: a2 = a2 << 0x8\n 64007: a2 = a2 | a3\n 64010: a4 = a4 << 0x10\n 64013: a5 = a5 << 0x18\n 64016: a4 = a4 | a5\n 64019: a2 = a2 | a4\n 64022: a2 = a2 << 0x20\n 64025: t0 = a2 | a1\n 64028: a2 = u8 [a0 + 0x9]\n 64031: a3 = u8 [a0 + 0x8]\n 64034: a4 = u8 [a0 + 0xa]\n 64037: a5 = u8 [a0 + 0xb]\n 64040: a2 = a2 << 0x8\n 64043: a2 = a2 | a3\n 64046: a4 = a4 << 0x10\n 64049: a5 = a5 << 0x18\n 64052: a4 = a4 | a5\n 64055: t1 = a4 | a2\n 64058: a3 = u8 [a0 + 0x11]\n 64061: a4 = u8 [a0 + 0x10]\n 64064: a5 = u8 [a0 + 0x12]\n 64067: a1 = u8 [a0 + 0x13]\n 64070: a3 = a3 << 0x8\n 64073: a3 = a3 | a4\n 64076: a5 = a5 << 0x10\n 64079: a1 = a1 << 0x18\n 64082: a1 = a1 | a5\n 64085: a1 = a1 | a3\n 64088: a3 = u8 [a0 + 0x15]\n 64091: a4 = u8 [a0 + 0x14]\n 64094: a5 = u8 [a0 + 0x16]\n 64097: a2 = u8 [a0 + 0x17]\n 64100: a3 = a3 << 0x8\n 64103: a3 = a3 | a4\n 64106: a5 = a5 << 0x10\n 64109: a2 = a2 << 0x18\n 64112: a2 = a2 | a5\n 64115: a2 = a2 | a3\n 64118: a2 = a2 << 0x20\n 64121: t2 = a2 | a1\n 64124: a1 = u8 [a0 + 0x19]\n 64127: a2 = u8 [a0 + 0x18]\n 64130: a4 = u8 [a0 + 0x1a]\n 64133: a5 = u8 [a0 + 0x1b]\n 64136: a1 = a1 << 0x8\n 64139: a1 = a1 | a2\n 64142: a4 = a4 << 0x10\n 64145: a5 = a5 << 0x18\n 64148: a4 = a4 | a5\n 64151: a1 = a1 | a4\n 64154: a2 = u8 [a0 + 0x1d]\n 64157: a4 = u8 [a0 + 0x1c]\n 64160: a5 = u8 [a0 + 0x1e]\n 64163: a3 = u8 [a0 + 0x1f]\n 64166: a2 = a2 << 0x8\n 64169: a2 = a2 | a4\n 64172: a5 = a5 << 0x10\n 64175: a3 = a3 << 0x18\n 64178: a3 = a3 | a5\n 64181: a2 = a2 | a3\n 64184: a2 = a2 << 0x20\n 64187: a1 = a1 | a2\n 64190: a2 = reverse t2\n 64192: a4 = u64 [s1 + 0x68]\n 64195: a3 = a4 ^ a2\n 64198: a2 = a4 <u a2\n 64201: a1 = reverse a1\n 64203: a4 = u64 [s1 + 0x70]\n 64206: a4 = a4 <u a1\n 64209: a1 = u8 [a0 + 0xd]\n 64212: a4 = a2 if a3 != 0\n 64215: a5 = a4\n 64217: a2 = u8 [a0 + 0xc]\n 64220: a3 = u8 [a0 + 0xe]\n 64223: a0 = u8 [a0 + 0xf]\n 64226: a1 = a1 << 0x8\n 64229: a1 = a1 | a2\n 64232: a3 = a3 << 0x10\n 64235: a0 = a0 << 0x18\n 64238: a0 = a0 | a3\n 64241: a0 = a0 | a1\n 64244: a0 = a0 << 0x20\n 64247: a0 = a0 | t1\n 64250: a0 = reverse a0\n 64252: a1 = reverse t0\n 64254: a3 = u64 [s1 + 0x78]\n 64257: a2 = a3 ^ a1\n 64260: a1 = a3 <u a1\n 64263: a4 = u64 [s1 + 0x80]\n 64267: a3 = a4 <u a0\n 64270: a3 = a1 if a2 != 0\n 64273: a0 = a0 ^ a4\n 64276: a0 = a0 | a2\n 64279: a5 = a3 if a0 != 0\n 64282: u64 [s1 + 0x170] = a5\n 64286: a0 = 0x40\n 64289: a1 = 0x20\n 64292: ra = 750, jump @0\n      : @824 [@dyn 375] (gas: 98)\n 64299: a1 = u8 [a0 + 0x19]\n 64302: a2 = u8 [a0 + 0x18]\n 64305: a3 = u8 [a0 + 0x1a]\n 64308: a4 = u8 [a0 + 0x1b]\n 64311: a1 = a1 << 0x8\n 64314: a1 = a1 | a2\n 64317: a3 = a3 << 0x10\n 64320: a4 = a4 << 0x18\n 64323: a3 = a3 | a4\n 64326: a1 = a1 | a3\n 64329: a2 = u8 [a0 + 0x1d]\n 64332: a3 = u8 [a0 + 0x1c]\n 64335: a4 = u8 [a0 + 0x1e]\n 64338: a5 = u8 [a0 + 0x1f]\n 64341: a2 = a2 << 0x8\n 64344: a2 = a2 | a3\n 64347: a4 = a4 << 0x10\n 64350: a5 = a5 << 0x18\n 64353: a4 = a4 | a5\n 64356: a2 = a2 | a4\n 64359: a2 = a2 << 0x20\n 64362: t0 = a2 | a1\n 64365: a2 = u8 [a0 + 0x11]\n 64368: a3 = u8 [a0 + 0x10]\n 64371: a4 = u8 [a0 + 0x12]\n 64374: a5 = u8 [a0 + 0x13]\n 64377: a2 = a2 << 0x8\n 64380: a2 = a2 | a3\n 64383: a4 = a4 << 0x10\n 64386: a5 = a5 << 0x18\n 64389: a4 = a4 | a5\n 64392: a2 = a2 | a4\n 64395: a3 = u8 [a0 + 0x15]\n 64398: a4 = u8 [a0 + 0x14]\n 64401: a5 = u8 [a0 + 0x16]\n 64404: a1 = u8 [a0 + 0x17]\n 64407: a3 = a3 << 0x8\n 64410: a3 = a3 | a4\n 64413: a5 = a5 << 0x10\n 64416: a1 = a1 << 0x18\n 64419: a1 = a1 | a5\n 64422: a1 = a1 | a3\n 64425: a1 = a1 << 0x20\n 64428: t1 = a1 | a2\n 64431: a1 = u8 [a0 + 0x9]\n 64434: a3 = u8 [a0 + 0x8]\n 64437: a4 = u8 [a0 + 0xa]\n 64440: a5 = u8 [a0 + 0xb]\n 64443: a1 = a1 << 0x8\n 64446: a1 = a1 | a3\n 64449: a4 = a4 << 0x10\n 64452: a5 = a5 << 0x18\n 64455: a4 = a4 | a5\n 64458: a1 = a1 | a4\n 64461: a3 = u8 [a0 + 0xd]\n 64464: a4 = u8 [a0 + 0xc]\n 64467: a5 = u8 [a0 + 0xe]\n 64470: a2 = u8 [a0 + 0xf]\n 64473: a3 = a3 << 0x8\n 64476: a3 = a3 | a4\n 64479: a5 = a5 << 0x10\n 64482: a2 = a2 << 0x18\n 64485: a2 = a2 | a5\n 64488: a2 = a2 | a3\n 64491: a2 = a2 << 0x20\n 64494: a3 = a2 | a1\n 64497: a1 = u8 [a0 + 0x1]\n 64500: a2 = u8 [a0]\n 64502: a4 = u8 [a0 + 0x2]\n 64505: a5 = u8 [a0 + 0x3]\n 64508: a1 = a1 << 0x8\n 64511: a1 = a1 | a2\n 64514: a4 = a4 << 0x10\n 64517: a5 = a5 << 0x18\n 64520: a4 = a4 | a5\n 64523: a1 = a1 | a4\n 64526: a2 = u8 [a0 + 0x5]\n 64529: a4 = u8 [a0 + 0x4]\n 64532: a5 = u8 [a0 + 0x6]\n 64535: a0 = u8 [a0 + 0x7]\n 64538: a2 = a2 << 0x8\n 64541: a2 = a2 | a4\n 64544: a5 = a5 << 0x10\n 64547: a0 = a0 << 0x18\n 64550: a0 = a0 | a5\n 64553: a0 = a0 | a2\n 64556: a0 = a0 << 0x20\n 64559: a0 = a0 | a1\n 64562: a1 = reverse a0\n 64564: a2 = reverse a3\n 64566: a3 = reverse t1\n 64568: a4 = reverse t0\n 64570: a0 = u64 [s1 + 0x170]\n 64574: u64 [s1 + 0x80] = a1\n 64578: u64 [s1 + 0x78] = a2\n 64581: u64 [s1 + 0x70] = a3\n 64584: u64 [s1 + 0x68] = a4\n 64587: jump @826 if a0 == 0\n      : @825 (gas: 1)\n 64590: jump @895\n      : @826 (gas: 8)\n 64593: a0 = a4 | a2\n 64596: a1 = a1 | a3\n 64599: a0 = a0 | a1\n 64602: a0 = a0 >> 0x20\n 64605: a1 = a1 | a2\n 64608: a1 = a1 << 0x20\n 64611: a0 = a0 | a1\n 64614: jump @828 if a0 == 0\n      : @827 (gas: 1)\n 64617: jump @899\n      : @828 (gas: 4)\n 64620: i32 a0 = a4 + 0\n 64622: u64 [s1 + 0x170] = a0\n 64626: a1 = 0x20\n 64629: ra = 752, jump @0\n      : @829 [@dyn 376] (gas: 46)\n 64636: u8 [a0 + 31] = 0\n 64639: u8 [a0 + 30] = 0\n 64642: u8 [a0 + 29] = 0\n 64645: u8 [a0 + 28] = 0\n 64648: u8 [a0 + 27] = 0\n 64651: u8 [a0 + 26] = 0\n 64654: u8 [a0 + 25] = 0\n 64657: u8 [a0 + 24] = 0\n 64660: u8 [a0 + 23] = 0\n 64663: u8 [a0 + 22] = 0\n 64666: u8 [a0 + 21] = 0\n 64669: u8 [a0 + 20] = 0\n 64672: u8 [a0 + 19] = 0\n 64675: u8 [a0 + 18] = 0\n 64678: u8 [a0 + 17] = 0\n 64681: u8 [a0 + 16] = 0\n 64684: u8 [a0 + 15] = 0\n 64687: u8 [a0 + 14] = 0\n 64690: u8 [a0 + 13] = 0\n 64693: u8 [a0 + 12] = 0\n 64696: u8 [a0 + 11] = 0\n 64699: u8 [a0 + 10] = 0\n 64702: u8 [a0 + 9] = 0\n 64705: u8 [a0 + 8] = 0\n 64708: u8 [a0 + 7] = 0\n 64711: u8 [a0 + 6] = 0\n 64714: u8 [a0 + 5] = 0\n 64717: u8 [a0 + 4] = 0\n 64720: u8 [a0 + 3] = 0xfe\n 64725: u8 [a0 + 2] = 0xb1\n 64730: u8 [a0 + 1] = 0x35\n 64734: u8 [a0 + 0] = 0xa0\n 64738: ecalli 11 // 'ref_time_left'\n 64740: a0 = u64 [s1 + 0x1c8]\n 64744: u64 [s1 + 0x588] = a0\n 64748: a0 = u64 [s1 + 0x1d8]\n 64752: u64 [s1 + 0x580] = a0\n 64756: a0 = u64 [s1 + 0x1d0]\n 64760: u32 [s1 + 0x590] = a0\n 64764: u64 [s1 + 1464] = 0\n 64768: u64 [s1 + 1456] = 0\n 64772: u64 [s1 + 1448] = 0\n 64776: u64 [s1 + 1440] = 0\n 64780: a1 = 0x4\n 64783: a0 = u64 [s1 + 0x170]\n 64787: ra = 754, jump @0\n      : @830 [@dyn 377] (gas: 4)\n 64794: u64 [s1 + 0x60] = a0\n 64797: a1 = 0x20\n 64800: a0 = u64 [s1 + 0x170]\n 64804: ra = 756, jump @0\n      : @831 [@dyn 378] (gas: 31)\n 64811: u32 [s1 + 1472] = 0x20\n 64816: u64 [s1 + 1528] = 0\n 64820: u64 [s1 + 1520] = 0\n 64824: u64 [s1 + 1512] = 0\n 64828: u64 [s1 + 1504] = 0\n 64832: a1 = s1 + 0x580\n 64836: a1 = a1 << 0x20\n 64839: a1 = a1 >> 0x20\n 64842: a2 = u64 [s1 + 0x1b0]\n 64846: t0 = a1 | a2\n 64849: a1 = s1 + 0x5a0\n 64853: a1 = a1 << 0x20\n 64856: a1 = a1 >> 0x20\n 64859: a2 = s1 + 0x5e0\n 64863: a2 = a2 << 0x20\n 64866: a3 = a2 | a1\n 64869: a1 = u64 [s1 + 0x60]\n 64872: a1 = a1 << 0x20\n 64875: a1 = a1 >> 0x20\n 64878: a4 = u64 [s1 + 0x1b8]\n 64882: a4 = a4 | a1\n 64885: a0 = a0 << 0x20\n 64888: a0 = a0 >> 0x20\n 64891: a1 = s1 + 0x5c0\n 64895: a1 = a1 << 0x20\n 64898: a5 = a1 | a0\n 64901: a1 = 0xffffffffffffffff\n 64904: a2 = 0xffffffffffffffff\n 64907: a0 = t0\n 64909: ecalli 1 // 'call'\n 64911: fallthrough\n      : @832 (gas: 1)\n 64912: jump @834 if a0 == 0\n      : @833 (gas: 1)\n 64915: jump @881\n      : @834 (gas: 2)\n 64918: ecalli 13 // 'return_data_size'\n 64920: fallthrough\n      : @835 (gas: 2)\n 64921: a1 = 0x20\n 64924: jump @837 if a0 >=u a1\n      : @836 (gas: 3)\n 64927: ecalli 13 // 'return_data_size'\n 64929: a1 = a0\n 64931: fallthrough\n      : @837 (gas: 28)\n 64932: t0 = u64 [s1 + 0x80]\n 64936: a4 = u64 [s1 + 0x78]\n 64939: a5 = u64 [s1 + 0x70]\n 64942: a3 = u64 [s1 + 0x68]\n 64945: a0 = a1 + 0x1f\n 64948: u64 [s1 + 0x1b0] = a1\n 64952: a1 = a0 <u a1\n 64955: u64 [s1 + 440] = 0\n 64959: a1 = a1 & 0x1\n 64962: a0 = a0 & 0xffffffffffffffe0\n 64965: a3 = a3 + a0\n 64968: u64 [s1 + 0x68] = a3\n 64971: a0 = a3 <u a0\n 64974: a2 = a1 + a5\n 64977: a3 = a2 + a0\n 64980: a2 = a3 ^ a1\n 64983: a1 = a3 <u a1\n 64986: a1 = a0 if a2 == 0\n 64989: a1 = a1 + a4\n 64992: a0 = a1 <u a4\n 64995: a0 = a0 + t0\n 64998: u64 [s1 + 0x78] = a1\n 65001: u64 [s1 + 0x70] = a0\n 65004: a0 = a0 | a1\n 65007: u64 [s1 + 0x80] = a3\n 65011: a1 = a3 <u 0x1\n 65014: a1 = 0 if a0 != 0\n 65016: jump @839 if a1 != 0\n      : @838 (gas: 1)\n 65019: jump @907\n      : @839 (gas: 3)\n 65022: a0 = 0x40\n 65025: a1 = 0x20\n 65028: ra = 758, jump @0\n      : @840 [@dyn 379] (gas: 80)\n 65035: a1 = u64 [s1 + 0x70]\n 65038: a1 = reverse a1\n 65040: a2 = u64 [s1 + 0x78]\n 65043: a2 = reverse a2\n 65045: a3 = u64 [s1 + 0x80]\n 65049: a3 = reverse a3\n 65051: a4 = u64 [s1 + 0x68]\n 65054: a4 = reverse a4\n 65056: u8 [a0 + 0x18] = a4\n 65059: a5 = a4 >> 0x38\n 65062: u8 [a0 + 0x1f] = a5\n 65065: a5 = a4 >> 0x30\n 65068: u8 [a0 + 0x1e] = a5\n 65071: a5 = a4 >> 0x28\n 65074: u8 [a0 + 0x1d] = a5\n 65077: a5 = a4 >> 0x20\n 65080: u8 [a0 + 0x1c] = a5\n 65083: a5 = a4 >> 0x18\n 65086: u8 [a0 + 0x1b] = a5\n 65089: a5 = a4 >> 0x10\n 65092: u8 [a0 + 0x1a] = a5\n 65095: a4 = a4 >> 0x8\n 65098: u8 [a0 + 0x19] = a4\n 65101: u8 [a0 + 0x10] = a3\n 65104: a4 = a3 >> 0x38\n 65107: u8 [a0 + 0x17] = a4\n 65110: a4 = a3 >> 0x30\n 65113: u8 [a0 + 0x16] = a4\n 65116: a4 = a3 >> 0x28\n 65119: u8 [a0 + 0x15] = a4\n 65122: a4 = a3 >> 0x20\n 65125: u8 [a0 + 0x14] = a4\n 65128: a4 = a3 >> 0x18\n 65131: u8 [a0 + 0x13] = a4\n 65134: a4 = a3 >> 0x10\n 65137: u8 [a0 + 0x12] = a4\n 65140: a3 = a3 >> 0x8\n 65143: u8 [a0 + 0x11] = a3\n 65146: u8 [a0 + 0x8] = a2\n 65149: a3 = a2 >> 0x38\n 65152: u8 [a0 + 0xf] = a3\n 65155: a3 = a2 >> 0x30\n 65158: u8 [a0 + 0xe] = a3\n 65161: a3 = a2 >> 0x28\n 65164: u8 [a0 + 0xd] = a3\n 65167: a3 = a2 >> 0x20\n 65170: u8 [a0 + 0xc] = a3\n 65173: a3 = a2 >> 0x18\n 65176: u8 [a0 + 0xb] = a3\n 65179: a3 = a2 >> 0x10\n 65182: u8 [a0 + 0xa] = a3\n 65185: a2 = a2 >> 0x8\n 65188: u8 [a0 + 0x9] = a2\n 65191: u8 [a0] = a1\n 65193: a2 = a1 >> 0x38\n 65196: u8 [a0 + 0x7] = a2\n 65199: a2 = a1 >> 0x30\n 65202: u8 [a0 + 0x6] = a2\n 65205: a2 = a1 >> 0x28\n 65208: u8 [a0 + 0x5] = a2\n 65211: a2 = a1 >> 0x20\n 65214: u8 [a0 + 0x4] = a2\n 65217: a2 = a1 >> 0x18\n 65220: u8 [a0 + 0x3] = a2\n 65223: a2 = a1 >> 0x10\n 65226: u8 [a0 + 0x2] = a2\n 65229: a1 = a1 >> 0x8\n 65232: a5 = u64 [s1 + 0x1b8]\n 65236: a2 = a5 >u 0\n 65238: a3 = u64 [s1 + 0x1b0]\n 65242: a3 = a3 <u 0x20\n 65245: a3 = a3 ^ 0x1\n 65248: a3 = a2 if a5 != 0\n 65251: a2 = a5 >u 0\n 65253: a4 = a5 >u 0\n 65255: a4 = a2 if a5 == 0\n 65258: a2 = a5 | a5\n 65261: a4 = a3 if a2 == 0\n 65264: u8 [a0 + 0x1] = a1\n 65267: jump @842 if a4 != 0\n      : @841 (gas: 1)\n 65270: jump @900\n      : @842 (gas: 3)\n 65273: a1 = 0x20\n 65276: a0 = u64 [s1 + 0x170]\n 65280: ra = 760, jump @0\n      : @843 [@dyn 380] (gas: 99)\n 65287: a1 = u8 [a0 + 0x1]\n 65290: a2 = u8 [a0]\n 65292: a3 = u8 [a0 + 0x2]\n 65295: a4 = u8 [a0 + 0x3]\n 65298: a1 = a1 << 0x8\n 65301: a1 = a1 | a2\n 65304: a3 = a3 << 0x10\n 65307: a4 = a4 << 0x18\n 65310: a3 = a3 | a4\n 65313: a1 = a1 | a3\n 65316: a2 = u8 [a0 + 0x5]\n 65319: a3 = u8 [a0 + 0x4]\n 65322: a4 = u8 [a0 + 0x6]\n 65325: a5 = u8 [a0 + 0x7]\n 65328: a2 = a2 << 0x8\n 65331: a2 = a2 | a3\n 65334: a4 = a4 << 0x10\n 65337: a5 = a5 << 0x18\n 65340: a4 = a4 | a5\n 65343: a2 = a2 | a4\n 65346: a2 = a2 << 0x20\n 65349: t0 = a2 | a1\n 65352: a2 = u8 [a0 + 0x9]\n 65355: a3 = u8 [a0 + 0x8]\n 65358: a4 = u8 [a0 + 0xa]\n 65361: a5 = u8 [a0 + 0xb]\n 65364: a2 = a2 << 0x8\n 65367: a2 = a2 | a3\n 65370: a4 = a4 << 0x10\n 65373: a5 = a5 << 0x18\n 65376: a4 = a4 | a5\n 65379: a2 = a2 | a4\n 65382: a3 = u8 [a0 + 0xd]\n 65385: a4 = u8 [a0 + 0xc]\n 65388: a5 = u8 [a0 + 0xe]\n 65391: a1 = u8 [a0 + 0xf]\n 65394: a3 = a3 << 0x8\n 65397: a3 = a3 | a4\n 65400: a5 = a5 << 0x10\n 65403: a1 = a1 << 0x18\n 65406: a1 = a1 | a5\n 65409: a1 = a1 | a3\n 65412: a1 = a1 << 0x20\n 65415: t1 = a1 | a2\n 65418: a1 = u8 [a0 + 0x11]\n 65421: a3 = u8 [a0 + 0x10]\n 65424: a4 = u8 [a0 + 0x12]\n 65427: a5 = u8 [a0 + 0x13]\n 65430: a1 = a1 << 0x8\n 65433: a1 = a1 | a3\n 65436: a4 = a4 << 0x10\n 65439: a5 = a5 << 0x18\n 65442: a4 = a4 | a5\n 65445: a1 = a1 | a4\n 65448: a3 = u8 [a0 + 0x15]\n 65451: a4 = u8 [a0 + 0x14]\n 65454: a5 = u8 [a0 + 0x16]\n 65457: a2 = u8 [a0 + 0x17]\n 65460: a3 = a3 << 0x8\n 65463: a3 = a3 | a4\n 65466: a5 = a5 << 0x10\n 65469: a2 = a2 << 0x18\n 65472: a2 = a2 | a5\n 65475: a2 = a2 | a3\n 65478: a2 = a2 << 0x20\n 65481: a3 = a2 | a1\n 65484: a1 = u8 [a0 + 0x19]\n 65487: a2 = u8 [a0 + 0x18]\n 65490: a4 = u8 [a0 + 0x1a]\n 65493: a5 = u8 [a0 + 0x1b]\n 65496: a1 = a1 << 0x8\n 65499: a1 = a1 | a2\n 65502: a4 = a4 << 0x10\n 65505: a5 = a5 << 0x18\n 65508: a4 = a4 | a5\n 65511: a1 = a1 | a4\n 65514: a2 = u8 [a0 + 0x1d]\n 65517: a4 = u8 [a0 + 0x1c]\n 65520: a5 = u8 [a0 + 0x1e]\n 65523: a0 = u8 [a0 + 0x1f]\n 65526: a2 = a2 << 0x8\n 65529: a2 = a2 | a4\n 65532: a5 = a5 << 0x10\n 65535: a0 = a0 << 0x18\n 65538: a0 = a0 | a5\n 65541: a0 = a0 | a2\n 65544: a0 = a0 << 0x20\n 65547: a0 = a0 | a1\n 65550: a0 = reverse a0\n 65552: u64 [s1 + 0x1b8] = a0\n 65556: a0 = reverse a3\n 65558: u64 [s1 + 0x1b0] = a0\n 65562: a0 = reverse t1\n 65564: u64 [s1 + 0x80] = a0\n 65568: a0 = reverse t0\n 65570: u64 [s1 + 0x170] = a0\n 65574: a1 = 0x20\n 65577: a0 = 0\n 65579: ra = 762, jump @0\n      : @844 [@dyn 381] (gas: 67)\n 65586: a1 = u64 [s1 + 0x168]\n 65590: u8 [a0 + 0x1f] = a1\n 65593: a1 = u64 [s1 + 0x160]\n 65597: u8 [a0 + 0x1e] = a1\n 65600: a1 = u64 [s1 + 0x158]\n 65604: u8 [a0 + 0x1d] = a1\n 65607: a1 = u64 [s1 + 0x150]\n 65611: u8 [a0 + 0x1c] = a1\n 65614: a1 = u64 [s1 + 0x148]\n 65618: u8 [a0 + 0x1b] = a1\n 65621: a1 = u64 [s1 + 0x140]\n 65625: u8 [a0 + 0x1a] = a1\n 65628: a1 = u64 [s1 + 0x138]\n 65632: u8 [a0 + 0x19] = a1\n 65635: a1 = u64 [s1 + 0x130]\n 65639: u8 [a0 + 0x17] = a1\n 65642: a1 = u64 [s1 + 0x128]\n 65646: u8 [a0 + 0x16] = a1\n 65649: a1 = u64 [s1 + 0x120]\n 65653: u8 [a0 + 0x15] = a1\n 65656: a1 = u64 [s1 + 0x118]\n 65660: u8 [a0 + 0x14] = a1\n 65663: a1 = u64 [s1 + 0x110]\n 65667: u8 [a0 + 0x13] = a1\n 65670: a1 = u64 [s1 + 0x108]\n 65674: u8 [a0 + 0x12] = a1\n 65677: a1 = u64 [s1 + 0x100]\n 65681: u8 [a0 + 0x11] = a1\n 65684: a1 = u64 [s1 + 0xf8]\n 65688: u8 [a0 + 0xf] = a1\n 65691: a1 = u64 [s1 + 0xf0]\n 65695: u8 [a0 + 0xe] = a1\n 65698: a1 = u64 [s1 + 0xe8]\n 65702: u8 [a0 + 0xd] = a1\n 65705: a1 = u64 [s1 + 0xe0]\n 65709: u8 [a0 + 0xc] = a1\n 65712: a1 = u64 [s1 + 0xd8]\n 65716: u8 [a0 + 0xb] = a1\n 65719: a1 = u64 [s1 + 0xd0]\n 65723: u8 [a0 + 0xa] = a1\n 65726: a1 = u64 [s1 + 0xc8]\n 65730: u8 [a0 + 0x9] = a1\n 65733: a1 = u64 [s1 + 0xc0]\n 65737: u8 [a0 + 0x7] = a1\n 65740: a1 = u64 [s1 + 0xb8]\n 65744: u8 [a0 + 0x6] = a1\n 65747: a1 = u64 [s1 + 0xb0]\n 65751: u8 [a0 + 0x5] = a1\n 65754: a1 = u64 [s1 + 0xa8]\n 65758: u8 [a0 + 0x4] = a1\n 65761: a1 = u64 [s1 + 0xa0]\n 65765: u8 [a0 + 0x3] = a1\n 65768: a1 = u64 [s1 + 0x98]\n 65772: u8 [a0 + 0x2] = a1\n 65775: a1 = u64 [s1 + 0x90]\n 65779: u8 [a0 + 0x1] = a1\n 65782: a1 = u64 [s1 + 0x190]\n 65786: u8 [a0 + 0x18] = a1\n 65789: a1 = u64 [s1 + 0x198]\n 65793: u8 [a0 + 0x10] = a1\n 65796: a1 = u64 [s1 + 0x1a0]\n 65800: u8 [a0 + 0x8] = a1\n 65803: a1 = u64 [s1 + 0x1a8]\n 65807: u8 [a0] = a1\n 65809: a0 = 0x20\n 65812: a1 = 0x20\n 65815: ra = 764, jump @0\n      : @845 [@dyn 382] (gas: 35)\n 65822: u8 [a0 + 31] = 0x2\n 65826: u8 [a0 + 30] = 0\n 65829: u8 [a0 + 29] = 0\n 65832: u8 [a0 + 28] = 0\n 65835: u8 [a0 + 27] = 0\n 65838: u8 [a0 + 26] = 0\n 65841: u8 [a0 + 25] = 0\n 65844: u8 [a0 + 24] = 0\n 65847: u8 [a0 + 23] = 0\n 65850: u8 [a0 + 22] = 0\n 65853: u8 [a0 + 21] = 0\n 65856: u8 [a0 + 20] = 0\n 65859: u8 [a0 + 19] = 0\n 65862: u8 [a0 + 18] = 0\n 65865: u8 [a0 + 17] = 0\n 65868: u8 [a0 + 16] = 0\n 65871: u8 [a0 + 15] = 0\n 65874: u8 [a0 + 14] = 0\n 65877: u8 [a0 + 13] = 0\n 65880: u8 [a0 + 12] = 0\n 65883: u8 [a0 + 11] = 0\n 65886: u8 [a0 + 10] = 0\n 65889: u8 [a0 + 9] = 0\n 65892: u8 [a0 + 8] = 0\n 65895: u8 [a0 + 7] = 0\n 65898: u8 [a0 + 6] = 0\n 65901: u8 [a0 + 5] = 0\n 65904: u8 [a0 + 4] = 0\n 65907: u8 [a0 + 3] = 0\n 65910: u8 [a0 + 2] = 0\n 65913: u8 [a0 + 1] = 0\n 65916: u8 [a0 + 0] = 0\n 65918: a1 = 0x40\n 65921: a0 = 0\n 65923: ra = 766, jump @0\n      : @846 [@dyn 383] (gas: 32)\n 65930: i32 a0 = a0 + 0\n 65932: i32 a2 = s1 + 0x6e0\n 65936: a1 = 0x40\n 65939: ecalli 9 // 'hash_keccak_256'\n 65941: a0 = u64 [s1 + 0x6f8]\n 65945: a1 = u64 [s1 + 0x6f0]\n 65949: a2 = u64 [s1 + 0x6e8]\n 65953: a3 = u64 [s1 + 0x6e0]\n 65957: a0 = reverse a0\n 65959: a1 = reverse a1\n 65961: a2 = reverse a2\n 65963: a3 = reverse a3\n 65965: u64 [s1 + 0x150] = a3\n 65969: u64 [s1 + 0x798] = a3\n 65973: u64 [s1 + 0x158] = a2\n 65977: u64 [s1 + 0x790] = a2\n 65981: u64 [s1 + 0x160] = a1\n 65985: u64 [s1 + 0x788] = a1\n 65989: u64 [s1 + 0x168] = a0\n 65993: u64 [s1 + 0x780] = a0\n 65997: u64 [s1 + 1784] = 0\n 66001: u64 [s1 + 1776] = 0\n 66005: u64 [s1 + 1768] = 0\n 66009: u64 [s1 + 1760] = 0\n 66013: u32 [s1 + 1888] = 0x20\n 66018: i32 a1 = s1 + 0x780\n 66022: i32 a3 = s1 + 0x6e0\n 66026: i32 a4 = s1 + 0x760\n 66030: a2 = 0xffffffffffffffff\n 66033: a0 = 0\n 66035: ecalli 8 // 'get_storage'\n 66037: fallthrough\n      : @847 (gas: 24)\n 66038: t1 = u64 [s1 + 0x6f8]\n 66042: ra = u64 [s1 + 0x6f0]\n 66046: t0 = u64 [s1 + 0x6e8]\n 66050: a3 = u64 [s1 + 0x6e0]\n 66054: a0 = u64 [s1 + 0x170]\n 66058: a4 = t1 ^ a0\n 66061: a5 = t1 <u a0\n 66064: a2 = u64 [s1 + 0x80]\n 66068: a0 = ra <u a2\n 66071: u64 [s1 + 0x138] = a0\n 66075: a5 = a0 if a4 == 0\n 66078: a0 = u64 [s1 + 0x1b0]\n 66082: a1 = t0 ^ a0\n 66085: u64 [s1 + 0x148] = a1\n 66089: a0 = t0 <u a0\n 66092: a1 = u64 [s1 + 0x1b8]\n 66096: u64 [s1 + 0x140] = a3\n 66100: t2 = a3 <u a1\n 66103: a1 = u64 [s1 + 0x148]\n 66107: a0 = t2 if a1 == 0\n 66110: a1 = ra ^ a2\n 66113: a1 = a1 | a4\n 66116: a5 = a0 if a1 == 0\n 66119: jump @849 if a5 == 0\n      : @848 (gas: 1)\n 66122: jump @909\n      : @849 (gas: 68)\n 66125: a3 = ra - a2\n 66128: a1 = a3 - a0\n 66131: u64 [s1 + 0x148] = a1\n 66135: a0 = a3 <u a0\n 66138: a1 = u64 [s1 + 0x170]\n 66142: a2 = t1 - a1\n 66145: a1 = u64 [s1 + 0x138]\n 66149: a2 = a2 - a1\n 66152: a2 = a2 - a0\n 66155: u64 [s1 + 0x170] = a2\n 66159: a0 = u64 [s1 + 0x1b0]\n 66163: a0 = t0 - a0\n 66166: a0 = a0 - t2\n 66169: u64 [s1 + 0x1b0] = a0\n 66173: a0 = u64 [s1 + 0x1b8]\n 66177: a1 = u64 [s1 + 0x140]\n 66181: a0 = a1 - a0\n 66184: u64 [s1 + 0x1b8] = a0\n 66188: u32 [s1 + 1888] = 0x20\n 66193: a0 = u64 [s1 + 0x158]\n 66197: u64 [s1 + 0x790] = a0\n 66201: a0 = u64 [s1 + 0x160]\n 66205: u64 [s1 + 0x788] = a0\n 66209: a0 = u64 [s1 + 0x168]\n 66213: u64 [s1 + 0x780] = a0\n 66217: a0 = u64 [s1 + 0x150]\n 66221: u64 [s1 + 0x798] = a0\n 66225: u64 [s1 + 1784] = 0\n 66229: u64 [s1 + 1776] = 0\n 66233: u64 [s1 + 1768] = 0\n 66237: u64 [s1 + 1760] = 0\n 66241: i32 a1 = s1 + 0x780\n 66245: i32 a3 = s1 + 0x6e0\n 66249: i32 a4 = s1 + 0x760\n 66253: a2 = 0xffffffffffffffff\n 66256: a0 = 0\n 66258: ecalli 8 // 'get_storage'\n 66260: a0 = u64 [s1 + 0x150]\n 66264: u64 [s1 + 0x798] = a0\n 66268: a0 = u64 [s1 + 0x158]\n 66272: u64 [s1 + 0x790] = a0\n 66276: a0 = u64 [s1 + 0x160]\n 66280: u64 [s1 + 0x788] = a0\n 66284: a0 = u64 [s1 + 0x168]\n 66288: u64 [s1 + 0x780] = a0\n 66292: a0 = u64 [s1 + 0x170]\n 66296: u64 [s1 + 0x6f8] = a0\n 66300: a0 = u64 [s1 + 0x148]\n 66304: u64 [s1 + 0x6f0] = a0\n 66308: a0 = u64 [s1 + 0x1b0]\n 66312: u64 [s1 + 0x6e8] = a0\n 66316: a0 = u64 [s1 + 0x1b8]\n 66320: u64 [s1 + 0x6e0] = a0\n 66324: i32 a1 = s1 + 0x780\n 66328: i32 a3 = s1 + 0x6e0\n 66332: a2 = 0xffffffffffffffff\n 66335: a4 = 0x20\n 66338: a0 = 0\n 66340: ecalli 16 // 'set_storage'\n 66342: a0 = u64 [s1 + 0x1c8]\n 66346: u64 [s1 + 0x608] = a0\n 66350: a0 = u64 [s1 + 0x1d8]\n 66354: u64 [s1 + 0x600] = a0\n 66358: a0 = u64 [s1 + 0x1d0]\n 66362: u32 [s1 + 0x610] = a0\n 66366: i32 a0 = s1 + 0x600\n 66370: ecalli 6 // 'code_size'\n 66372: fallthrough\n      : @850 (gas: 1)\n 66373: jump @852 if a0 != 0\n      : @851 (gas: 1)\n 66376: jump @901\n      : @852 (gas: 3)\n 66379: a0 = 0x40\n 66382: a1 = 0x20\n 66385: ra = 768, jump @0\n      : @853 [@dyn 384] (gas: 107)\n 66392: a1 = u8 [a0 + 0x11]\n 66395: a2 = u8 [a0 + 0x10]\n 66398: a3 = u8 [a0 + 0x12]\n 66401: a4 = u8 [a0 + 0x13]\n 66404: a1 = a1 << 0x8\n 66407: a1 = a1 | a2\n 66410: a3 = a3 << 0x10\n 66413: a4 = a4 << 0x18\n 66416: a3 = a3 | a4\n 66419: a1 = a1 | a3\n 66422: a2 = u8 [a0 + 0x15]\n 66425: a3 = u8 [a0 + 0x14]\n 66428: a4 = u8 [a0 + 0x16]\n 66431: a5 = u8 [a0 + 0x17]\n 66434: a2 = a2 << 0x8\n 66437: a2 = a2 | a3\n 66440: a4 = a4 << 0x10\n 66443: a5 = a5 << 0x18\n 66446: a4 = a4 | a5\n 66449: a2 = a2 | a4\n 66452: a2 = a2 << 0x20\n 66455: t0 = a2 | a1\n 66458: a1 = u8 [a0 + 0x1]\n 66461: a2 = u8 [a0]\n 66463: a3 = u8 [a0 + 0x2]\n 66466: a4 = u8 [a0 + 0x3]\n 66469: a1 = a1 << 0x8\n 66472: a1 = a1 | a2\n 66475: a3 = a3 << 0x10\n 66478: a4 = a4 << 0x18\n 66481: a3 = a3 | a4\n 66484: a1 = a1 | a3\n 66487: a2 = u8 [a0 + 0x5]\n 66490: a3 = u8 [a0 + 0x4]\n 66493: a4 = u8 [a0 + 0x6]\n 66496: a5 = u8 [a0 + 0x7]\n 66499: a2 = a2 << 0x8\n 66502: a2 = a2 | a3\n 66505: a4 = a4 << 0x10\n 66508: a5 = a5 << 0x18\n 66511: a4 = a4 | a5\n 66514: a2 = a2 | a4\n 66517: a2 = a2 << 0x20\n 66520: t1 = a2 | a1\n 66523: a1 = u8 [a0 + 0x19]\n 66526: a2 = u8 [a0 + 0x18]\n 66529: a3 = u8 [a0 + 0x1a]\n 66532: a4 = u8 [a0 + 0x1b]\n 66535: a1 = a1 << 0x8\n 66538: a1 = a1 | a2\n 66541: a3 = a3 << 0x10\n 66544: a4 = a4 << 0x18\n 66547: a3 = a3 | a4\n 66550: a1 = a1 | a3\n 66553: a2 = u8 [a0 + 0x1d]\n 66556: a3 = u8 [a0 + 0x1c]\n 66559: a4 = u8 [a0 + 0x1e]\n 66562: a5 = u8 [a0 + 0x1f]\n 66565: a2 = a2 << 0x8\n 66568: a2 = a2 | a3\n 66571: a4 = a4 << 0x10\n 66574: a5 = a5 << 0x18\n 66577: a4 = a4 | a5\n 66580: a2 = a2 | a4\n 66583: a2 = a2 << 0x20\n 66586: a5 = a2 | a1\n 66589: a1 = u8 [a0 + 0x9]\n 66592: a2 = u8 [a0 + 0x8]\n 66595: a3 = u8 [a0 + 0xa]\n 66598: a4 = u8 [a0 + 0xb]\n 66601: a1 = a1 << 0x8\n 66604: a1 = a1 | a2\n 66607: a3 = a3 << 0x10\n 66610: a4 = a4 << 0x18\n 66613: a3 = a3 | a4\n 66616: a1 = a1 | a3\n 66619: a2 = u8 [a0 + 0xd]\n 66622: a3 = u8 [a0 + 0xc]\n 66625: a4 = u8 [a0 + 0xe]\n 66628: a0 = u8 [a0 + 0xf]\n 66631: a2 = a2 << 0x8\n 66634: a2 = a2 | a3\n 66637: a4 = a4 << 0x10\n 66640: a0 = a0 << 0x18\n 66643: a0 = a0 | a4\n 66646: a0 = a0 | a2\n 66649: a0 = a0 << 0x20\n 66652: a0 = a0 | a1\n 66655: u64 [s1 + 0x160] = a0\n 66659: a3 = reverse a0\n 66661: u64 [s1 + 0x168] = a5\n 66665: a2 = reverse a5\n 66667: u64 [s1 + 0x170] = t1\n 66671: a1 = reverse t1\n 66673: u64 [s1 + 0x1b0] = t0\n 66677: a0 = reverse t0\n 66679: u64 [s1 + 0x158] = a0\n 66683: u64 [s1 + 0x148] = a1\n 66687: a0 = a0 | a1\n 66690: a1 = a2 | a3\n 66693: a1 = a1 | a0\n 66696: a1 = a1 >> 0x20\n 66699: u64 [s1 + 0x150] = a3\n 66703: a0 = a0 | a3\n 66706: a0 = a0 << 0x20\n 66709: a0 = a0 | a1\n 66712: jump @855 if a0 == 0\n      : @854 (gas: 1)\n 66715: jump @899\n      : @855 (gas: 5)\n 66718: i32 a0 = a2 + 0\n 66720: a1 = 0x20\n 66723: u64 [s1 + 0x1b8] = a0\n 66727: u64 [s1 + 0x140] = a2\n 66731: ra = 770, jump @0\n      : @856 [@dyn 385] (gas: 42)\n 66738: u8 [a0 + 31] = 0\n 66741: u8 [a0 + 30] = 0\n 66744: u8 [a0 + 29] = 0\n 66747: u8 [a0 + 28] = 0\n 66750: u8 [a0 + 27] = 0\n 66753: u8 [a0 + 26] = 0\n 66756: u8 [a0 + 25] = 0\n 66759: u8 [a0 + 24] = 0\n 66762: u8 [a0 + 23] = 0\n 66765: u8 [a0 + 22] = 0\n 66768: u8 [a0 + 21] = 0\n 66771: u8 [a0 + 20] = 0\n 66774: u8 [a0 + 19] = 0\n 66777: u8 [a0 + 18] = 0\n 66780: u8 [a0 + 17] = 0\n 66783: u8 [a0 + 16] = 0\n 66786: u8 [a0 + 15] = 0\n 66789: u8 [a0 + 14] = 0\n 66792: u8 [a0 + 13] = 0\n 66795: u8 [a0 + 12] = 0\n 66798: u8 [a0 + 11] = 0\n 66801: u8 [a0 + 10] = 0\n 66804: u8 [a0 + 9] = 0\n 66807: u8 [a0 + 8] = 0\n 66810: u8 [a0 + 7] = 0\n 66813: u8 [a0 + 6] = 0\n 66816: u8 [a0 + 5] = 0\n 66819: u8 [a0 + 4] = 0\n 66822: u8 [a0 + 3] = 0xc5\n 66827: u8 [a0 + 2] = 0x5e\n 66831: u8 [a0 + 1] = 0x98\n 66836: a1 = u64 [s1 + 0x150]\n 66840: a2 = u64 [s1 + 0x148]\n 66844: a1 = a1 | a2\n 66847: a2 = 0xfffffffc\n 66857: a3 = u64 [s1 + 0x140]\n 66861: a2 = a3 <u a2\n 66864: a4 = u64 [s1 + 0x158]\n 66868: a2 = 0 if a4 != 0\n 66870: a2 = 0 if a1 != 0\n 66872: u8 [a0 + 0] = 0x88\n 66876: jump @858 if a2 != 0\n      : @857 (gas: 1)\n 66879: jump @899\n      : @858 (gas: 4)\n 66882: a0 = u64 [s1 + 0x1b8]\n 66886: i32 a0 = a0 + 0x4\n 66889: a1 = 0x20\n 66892: ra = 772, jump @0\n      : @859 [@dyn 386] (gas: 78)\n 66899: a2 = u64 [s1 + 0x178]\n 66903: a1 = a2 >> 0x38\n 66906: u8 [a0 + 0x1f] = a1\n 66909: a1 = a2 >> 0x30\n 66912: u8 [a0 + 0x1e] = a1\n 66915: a1 = a2 >> 0x28\n 66918: u8 [a0 + 0x1d] = a1\n 66921: a1 = a2 >> 0x20\n 66924: u8 [a0 + 0x1c] = a1\n 66927: a1 = a2 >> 0x18\n 66930: u8 [a0 + 0x1b] = a1\n 66933: a1 = a2 >> 0x10\n 66936: u8 [a0 + 0x1a] = a1\n 66939: a1 = a2 >> 0x8\n 66942: u8 [a0 + 0x19] = a1\n 66945: u8 [a0 + 0x18] = a2\n 66948: a2 = u64 [s1 + 0x180]\n 66952: u8 [a0 + 0x10] = a2\n 66955: a1 = a2 >> 0x38\n 66958: u8 [a0 + 0x17] = a1\n 66961: a1 = a2 >> 0x30\n 66964: u8 [a0 + 0x16] = a1\n 66967: a1 = a2 >> 0x28\n 66970: u8 [a0 + 0x15] = a1\n 66973: a1 = a2 >> 0x20\n 66976: u8 [a0 + 0x14] = a1\n 66979: a1 = a2 >> 0x18\n 66982: u8 [a0 + 0x13] = a1\n 66985: a1 = a2 >> 0x10\n 66988: u8 [a0 + 0x12] = a1\n 66991: a1 = a2 >> 0x8\n 66994: u8 [a0 + 0x11] = a1\n 66997: a2 = u64 [s1 + 0x188]\n 67001: u8 [a0 + 0x8] = a2\n 67004: a1 = a2 >> 0x38\n 67007: u8 [a0 + 0xf] = a1\n 67010: a1 = a2 >> 0x30\n 67013: u8 [a0 + 0xe] = a1\n 67016: a1 = a2 >> 0x28\n 67019: u8 [a0 + 0xd] = a1\n 67022: a1 = a2 >> 0x20\n 67025: u8 [a0 + 0xc] = a1\n 67028: a1 = a2 >> 0x18\n 67031: u8 [a0 + 0xb] = a1\n 67034: a1 = a2 >> 0x10\n 67037: u8 [a0 + 0xa] = a1\n 67040: a1 = a2 >> 0x8\n 67043: u8 [a0 + 0x9] = a1\n 67046: a2 = u64 [s1 + 0x1c0]\n 67050: u8 [a0] = a2\n 67052: a1 = a2 >> 0x38\n 67055: u8 [a0 + 0x7] = a1\n 67058: a1 = a2 >> 0x30\n 67061: u8 [a0 + 0x6] = a1\n 67064: a1 = a2 >> 0x28\n 67067: u8 [a0 + 0x5] = a1\n 67070: a1 = a2 >> 0x20\n 67073: u8 [a0 + 0x4] = a1\n 67076: a1 = a2 >> 0x18\n 67079: u8 [a0 + 0x3] = a1\n 67082: a1 = a2 >> 0x10\n 67085: u8 [a0 + 0x2] = a1\n 67088: a1 = a2 >> 0x8\n 67091: u8 [a0 + 0x1] = a1\n 67094: ecalli 11 // 'ref_time_left'\n 67096: a0 = u64 [s1 + 0x1c8]\n 67100: u64 [s1 + 0x628] = a0\n 67104: a0 = u64 [s1 + 0x1d8]\n 67108: u64 [s1 + 0x620] = a0\n 67112: a0 = u64 [s1 + 0x1d0]\n 67116: u32 [s1 + 0x630] = a0\n 67120: u64 [s1 + 1624] = 0\n 67124: u64 [s1 + 1616] = 0\n 67128: u64 [s1 + 1608] = 0\n 67132: u64 [s1 + 1600] = 0\n 67136: a1 = 0x24\n 67139: a0 = u64 [s1 + 0x1b8]\n 67143: ra = 774, jump @0\n      : @860 [@dyn 387] (gas: 4)\n 67150: u64 [s1 + 0x1d8] = a0\n 67154: a0 = u64 [s1 + 0x1b8]\n 67158: a1 = 0\n 67160: ra = 776, jump @0\n      : @861 [@dyn 388] (gas: 25)\n 67167: u32 [s1 + 1632] = 0\n 67171: u64 [s1 + 1688] = 0xffffffffffffffff\n 67176: u64 [s1 + 1680] = 0xffffffffffffffff\n 67181: u64 [s1 + 1672] = 0xffffffffffffffff\n 67186: u64 [s1 + 1664] = 0xffffffffffffffff\n 67191: a1 = s1 + 0x620\n 67195: a1 = a1 << 0x20\n 67198: a1 = a1 >> 0x20\n 67201: a2 = 0x800000000\n 67211: t0 = a1 | a2\n 67214: a1 = s1 + 0x640\n 67218: a1 = a1 << 0x20\n 67221: a1 = a1 >> 0x20\n 67224: a2 = s1 + 0x680\n 67228: a2 = a2 << 0x20\n 67231: a3 = a2 | a1\n 67234: a1 = u64 [s1 + 0x1d8]\n 67238: a1 = a1 << 0x20\n 67241: a1 = a1 >> 0x20\n 67244: a2 = 0x2400000000\n 67254: a4 = a1 | a2\n 67257: a0 = a0 << 0x20\n 67260: a0 = a0 >> 0x20\n 67263: a1 = s1 + 0x660\n 67267: jump @872\n      : @862 (gas: 9)\n 67270: a0 = u64 [s1 + 0x1d8]\n 67274: u64 [s1 + 0x460] = a0\n 67278: a0 = u64 [s1 + 0x1c8]\n 67282: u64 [s1 + 0x468] = a0\n 67286: a0 = u64 [s1 + 0x1d0]\n 67290: u32 [s1 + 0x470] = a0\n 67294: i32 a0 = s1 + 0x460\n 67298: ecalli 6 // 'code_size'\n 67300: fallthrough\n      : @863 (gas: 1)\n 67301: jump @901 if a0 == 0\n      : @864 (gas: 3)\n 67305: a0 = 0x40\n 67308: a1 = 0x20\n 67311: ra = 778, jump @0\n      : @865 [@dyn 389] (gas: 107)\n 67318: a1 = u8 [a0 + 0x11]\n 67321: a2 = u8 [a0 + 0x10]\n 67324: a3 = u8 [a0 + 0x12]\n 67327: a4 = u8 [a0 + 0x13]\n 67330: a1 = a1 << 0x8\n 67333: a1 = a1 | a2\n 67336: a3 = a3 << 0x10\n 67339: a4 = a4 << 0x18\n 67342: a3 = a3 | a4\n 67345: a1 = a1 | a3\n 67348: a2 = u8 [a0 + 0x15]\n 67351: a3 = u8 [a0 + 0x14]\n 67354: a4 = u8 [a0 + 0x16]\n 67357: a5 = u8 [a0 + 0x17]\n 67360: a2 = a2 << 0x8\n 67363: a2 = a2 | a3\n 67366: a4 = a4 << 0x10\n 67369: a5 = a5 << 0x18\n 67372: a4 = a4 | a5\n 67375: a2 = a2 | a4\n 67378: a2 = a2 << 0x20\n 67381: t0 = a2 | a1\n 67384: a1 = u8 [a0 + 0x1]\n 67387: a2 = u8 [a0]\n 67389: a3 = u8 [a0 + 0x2]\n 67392: a4 = u8 [a0 + 0x3]\n 67395: a1 = a1 << 0x8\n 67398: a1 = a1 | a2\n 67401: a3 = a3 << 0x10\n 67404: a4 = a4 << 0x18\n 67407: a3 = a3 | a4\n 67410: a1 = a1 | a3\n 67413: a2 = u8 [a0 + 0x5]\n 67416: a3 = u8 [a0 + 0x4]\n 67419: a4 = u8 [a0 + 0x6]\n 67422: a5 = u8 [a0 + 0x7]\n 67425: a2 = a2 << 0x8\n 67428: a2 = a2 | a3\n 67431: a4 = a4 << 0x10\n 67434: a5 = a5 << 0x18\n 67437: a4 = a4 | a5\n 67440: a2 = a2 | a4\n 67443: a2 = a2 << 0x20\n 67446: t1 = a2 | a1\n 67449: a1 = u8 [a0 + 0x19]\n 67452: a2 = u8 [a0 + 0x18]\n 67455: a3 = u8 [a0 + 0x1a]\n 67458: a4 = u8 [a0 + 0x1b]\n 67461: a1 = a1 << 0x8\n 67464: a1 = a1 | a2\n 67467: a3 = a3 << 0x10\n 67470: a4 = a4 << 0x18\n 67473: a3 = a3 | a4\n 67476: a1 = a1 | a3\n 67479: a2 = u8 [a0 + 0x1d]\n 67482: a3 = u8 [a0 + 0x1c]\n 67485: a4 = u8 [a0 + 0x1e]\n 67488: a5 = u8 [a0 + 0x1f]\n 67491: a2 = a2 << 0x8\n 67494: a2 = a2 | a3\n 67497: a4 = a4 << 0x10\n 67500: a5 = a5 << 0x18\n 67503: a4 = a4 | a5\n 67506: a2 = a2 | a4\n 67509: a2 = a2 << 0x20\n 67512: a5 = a2 | a1\n 67515: a1 = u8 [a0 + 0x9]\n 67518: a2 = u8 [a0 + 0x8]\n 67521: a3 = u8 [a0 + 0xa]\n 67524: a4 = u8 [a0 + 0xb]\n 67527: a1 = a1 << 0x8\n 67530: a1 = a1 | a2\n 67533: a3 = a3 << 0x10\n 67536: a4 = a4 << 0x18\n 67539: a3 = a3 | a4\n 67542: a1 = a1 | a3\n 67545: a2 = u8 [a0 + 0xd]\n 67548: a3 = u8 [a0 + 0xc]\n 67551: a4 = u8 [a0 + 0xe]\n 67554: a0 = u8 [a0 + 0xf]\n 67557: a2 = a2 << 0x8\n 67560: a2 = a2 | a3\n 67563: a4 = a4 << 0x10\n 67566: a0 = a0 << 0x18\n 67569: a0 = a0 | a4\n 67572: a0 = a0 | a2\n 67575: a0 = a0 << 0x20\n 67578: a0 = a0 | a1\n 67581: u64 [s1 + 0x160] = a0\n 67585: a3 = reverse a0\n 67587: u64 [s1 + 0x168] = a5\n 67591: a2 = reverse a5\n 67593: u64 [s1 + 0x170] = t1\n 67597: a1 = reverse t1\n 67599: u64 [s1 + 0x1b0] = t0\n 67603: a0 = reverse t0\n 67605: u64 [s1 + 0x158] = a0\n 67609: u64 [s1 + 0x148] = a1\n 67613: a0 = a0 | a1\n 67616: a1 = a2 | a3\n 67619: a1 = a1 | a0\n 67622: a1 = a1 >> 0x20\n 67625: u64 [s1 + 0x150] = a3\n 67629: a0 = a0 | a3\n 67632: a0 = a0 << 0x20\n 67635: a0 = a0 | a1\n 67638: jump @899 if a0 != 0\n      : @866 (gas: 5)\n 67642: i32 a0 = a2 + 0\n 67644: a1 = 0x20\n 67647: u64 [s1 + 0x1b8] = a0\n 67651: u64 [s1 + 0x140] = a2\n 67655: ra = 780, jump @0\n      : @867 [@dyn 390] (gas: 42)\n 67662: u8 [a0 + 31] = 0\n 67665: u8 [a0 + 30] = 0\n 67668: u8 [a0 + 29] = 0\n 67671: u8 [a0 + 28] = 0\n 67674: u8 [a0 + 27] = 0\n 67677: u8 [a0 + 26] = 0\n 67680: u8 [a0 + 25] = 0\n 67683: u8 [a0 + 24] = 0\n 67686: u8 [a0 + 23] = 0\n 67689: u8 [a0 + 22] = 0\n 67692: u8 [a0 + 21] = 0\n 67695: u8 [a0 + 20] = 0\n 67698: u8 [a0 + 19] = 0\n 67701: u8 [a0 + 18] = 0\n 67704: u8 [a0 + 17] = 0\n 67707: u8 [a0 + 16] = 0\n 67710: u8 [a0 + 15] = 0\n 67713: u8 [a0 + 14] = 0\n 67716: u8 [a0 + 13] = 0\n 67719: u8 [a0 + 12] = 0\n 67722: u8 [a0 + 11] = 0\n 67725: u8 [a0 + 10] = 0\n 67728: u8 [a0 + 9] = 0\n 67731: u8 [a0 + 8] = 0\n 67734: u8 [a0 + 7] = 0\n 67737: u8 [a0 + 6] = 0\n 67740: u8 [a0 + 5] = 0\n 67743: u8 [a0 + 4] = 0\n 67746: u8 [a0 + 3] = 0xed\n 67751: u8 [a0 + 2] = 0x6d\n 67755: u8 [a0 + 1] = 0x68\n 67759: a1 = u64 [s1 + 0x150]\n 67763: a2 = u64 [s1 + 0x148]\n 67767: a1 = a1 | a2\n 67770: a2 = 0xfffffffc\n 67780: a3 = u64 [s1 + 0x140]\n 67784: a2 = a3 <u a2\n 67787: a4 = u64 [s1 + 0x158]\n 67791: a2 = 0 if a4 != 0\n 67793: a2 = 0 if a1 != 0\n 67795: u8 [a0 + 0] = 0xdf\n 67799: jump @899 if a2 == 0\n      : @868 (gas: 4)\n 67803: a0 = u64 [s1 + 0x1b8]\n 67807: i32 a0 = a0 + 0x4\n 67810: a1 = 0x20\n 67813: ra = 782, jump @0\n      : @869 [@dyn 391] (gas: 78)\n 67820: a2 = u64 [s1 + 0x178]\n 67824: a1 = a2 >> 0x38\n 67827: u8 [a0 + 0x1f] = a1\n 67830: a1 = a2 >> 0x30\n 67833: u8 [a0 + 0x1e] = a1\n 67836: a1 = a2 >> 0x28\n 67839: u8 [a0 + 0x1d] = a1\n 67842: a1 = a2 >> 0x20\n 67845: u8 [a0 + 0x1c] = a1\n 67848: a1 = a2 >> 0x18\n 67851: u8 [a0 + 0x1b] = a1\n 67854: a1 = a2 >> 0x10\n 67857: u8 [a0 + 0x1a] = a1\n 67860: a1 = a2 >> 0x8\n 67863: u8 [a0 + 0x19] = a1\n 67866: u8 [a0 + 0x18] = a2\n 67869: a2 = u64 [s1 + 0x180]\n 67873: u8 [a0 + 0x10] = a2\n 67876: a1 = a2 >> 0x38\n 67879: u8 [a0 + 0x17] = a1\n 67882: a1 = a2 >> 0x30\n 67885: u8 [a0 + 0x16] = a1\n 67888: a1 = a2 >> 0x28\n 67891: u8 [a0 + 0x15] = a1\n 67894: a1 = a2 >> 0x20\n 67897: u8 [a0 + 0x14] = a1\n 67900: a1 = a2 >> 0x18\n 67903: u8 [a0 + 0x13] = a1\n 67906: a1 = a2 >> 0x10\n 67909: u8 [a0 + 0x12] = a1\n 67912: a1 = a2 >> 0x8\n 67915: u8 [a0 + 0x11] = a1\n 67918: a2 = u64 [s1 + 0x188]\n 67922: u8 [a0 + 0x8] = a2\n 67925: a1 = a2 >> 0x38\n 67928: u8 [a0 + 0xf] = a1\n 67931: a1 = a2 >> 0x30\n 67934: u8 [a0 + 0xe] = a1\n 67937: a1 = a2 >> 0x28\n 67940: u8 [a0 + 0xd] = a1\n 67943: a1 = a2 >> 0x20\n 67946: u8 [a0 + 0xc] = a1\n 67949: a1 = a2 >> 0x18\n 67952: u8 [a0 + 0xb] = a1\n 67955: a1 = a2 >> 0x10\n 67958: u8 [a0 + 0xa] = a1\n 67961: a1 = a2 >> 0x8\n 67964: u8 [a0 + 0x9] = a1\n 67967: a2 = u64 [s1 + 0x1c0]\n 67971: u8 [a0] = a2\n 67973: a1 = a2 >> 0x38\n 67976: u8 [a0 + 0x7] = a1\n 67979: a1 = a2 >> 0x30\n 67982: u8 [a0 + 0x6] = a1\n 67985: a1 = a2 >> 0x28\n 67988: u8 [a0 + 0x5] = a1\n 67991: a1 = a2 >> 0x20\n 67994: u8 [a0 + 0x4] = a1\n 67997: a1 = a2 >> 0x18\n 68000: u8 [a0 + 0x3] = a1\n 68003: a1 = a2 >> 0x10\n 68006: u8 [a0 + 0x2] = a1\n 68009: a1 = a2 >> 0x8\n 68012: u8 [a0 + 0x1] = a1\n 68015: ecalli 11 // 'ref_time_left'\n 68017: a0 = u64 [s1 + 0x1c8]\n 68021: u64 [s1 + 0x488] = a0\n 68025: a0 = u64 [s1 + 0x1d8]\n 68029: u64 [s1 + 0x480] = a0\n 68033: a0 = u64 [s1 + 0x1d0]\n 68037: u32 [s1 + 0x490] = a0\n 68041: u64 [s1 + 1208] = 0\n 68045: u64 [s1 + 1200] = 0\n 68049: u64 [s1 + 1192] = 0\n 68053: u64 [s1 + 1184] = 0\n 68057: a1 = 0x24\n 68060: a0 = u64 [s1 + 0x1b8]\n 68064: ra = 784, jump @0\n      : @870 [@dyn 392] (gas: 4)\n 68071: u64 [s1 + 0x1d8] = a0\n 68075: a0 = u64 [s1 + 0x1b8]\n 68079: a1 = 0\n 68081: ra = 786, jump @0\n      : @871 [@dyn 393] (gas: 25)\n 68088: u32 [s1 + 1216] = 0\n 68092: u64 [s1 + 1272] = 0xffffffffffffffff\n 68097: u64 [s1 + 1264] = 0xffffffffffffffff\n 68102: u64 [s1 + 1256] = 0xffffffffffffffff\n 68107: u64 [s1 + 1248] = 0xffffffffffffffff\n 68112: a1 = s1 + 0x480\n 68116: a1 = a1 << 0x20\n 68119: a1 = a1 >> 0x20\n 68122: a2 = 0x800000000\n 68132: t0 = a1 | a2\n 68135: a1 = s1 + 0x4a0\n 68139: a1 = a1 << 0x20\n 68142: a1 = a1 >> 0x20\n 68145: a2 = s1 + 0x4e0\n 68149: a2 = a2 << 0x20\n 68152: a3 = a2 | a1\n 68155: a1 = u64 [s1 + 0x1d8]\n 68159: a1 = a1 << 0x20\n 68162: a1 = a1 >> 0x20\n 68165: a2 = 0x2400000000\n 68175: a4 = a1 | a2\n 68178: a0 = a0 << 0x20\n 68181: a0 = a0 >> 0x20\n 68184: a1 = s1 + 0x4c0\n 68188: fallthrough\n      : @872 (gas: 7)\n 68189: a1 = a1 << 0x20\n 68192: a5 = a1 | a0\n 68195: a1 = 0xffffffffffffffff\n 68198: a2 = 0xffffffffffffffff\n 68201: a0 = t0\n 68203: ecalli 1 // 'call'\n 68205: fallthrough\n      : @873 (gas: 1)\n 68206: jump @881 if a0 != 0\n      : @874 (gas: 4)\n 68210: ecalli 13 // 'return_data_size'\n 68212: a0 = 0x40\n 68215: a1 = 0x20\n 68218: ra = 788, jump @0\n      : @875 [@dyn 394] (gas: 111)\n 68225: a3 = u64 [s1 + 0x168]\n 68229: u8 [a0 + 0x18] = a3\n 68232: a2 = u64 [s1 + 0x1b0]\n 68236: a1 = a2 >> 0x38\n 68239: u8 [a0 + 0x17] = a1\n 68242: a1 = a2 >> 0x30\n 68245: u8 [a0 + 0x16] = a1\n 68248: a1 = a2 >> 0x28\n 68251: u8 [a0 + 0x15] = a1\n 68254: a1 = a2 >> 0x20\n 68257: u8 [a0 + 0x14] = a1\n 68260: a1 = a2 >> 0x18\n 68263: u8 [a0 + 0x13] = a1\n 68266: a1 = a2 >> 0x10\n 68269: u8 [a0 + 0x12] = a1\n 68272: a1 = a2 >> 0x8\n 68275: u8 [a0 + 0x11] = a1\n 68278: u8 [a0 + 0x10] = a2\n 68281: a2 = u64 [s1 + 0x160]\n 68285: a1 = a2 >> 0x38\n 68288: u8 [a0 + 0xf] = a1\n 68291: a1 = a2 >> 0x30\n 68294: u8 [a0 + 0xe] = a1\n 68297: a1 = a2 >> 0x28\n 68300: u8 [a0 + 0xd] = a1\n 68303: a1 = a2 >> 0x20\n 68306: u8 [a0 + 0xc] = a1\n 68309: a1 = a2 >> 0x18\n 68312: u8 [a0 + 0xb] = a1\n 68315: a1 = a2 >> 0x10\n 68318: u8 [a0 + 0xa] = a1\n 68321: a1 = a2 >> 0x8\n 68324: u8 [a0 + 0x9] = a1\n 68327: u8 [a0 + 0x8] = a2\n 68330: a2 = u64 [s1 + 0x170]\n 68334: a1 = a2 >> 0x38\n 68337: u8 [a0 + 0x7] = a1\n 68340: a1 = a2 >> 0x30\n 68343: u8 [a0 + 0x6] = a1\n 68346: a1 = a2 >> 0x28\n 68349: u8 [a0 + 0x5] = a1\n 68352: a1 = a2 >> 0x20\n 68355: u8 [a0 + 0x4] = a1\n 68358: a1 = a2 >> 0x18\n 68361: u8 [a0 + 0x3] = a1\n 68364: a1 = a2 >> 0x10\n 68367: u8 [a0 + 0x2] = a1\n 68370: a1 = a2 >> 0x8\n 68373: u8 [a0 + 0x1] = a1\n 68376: u8 [a0] = a2\n 68378: a1 = a3 >> 0x38\n 68381: u8 [a0 + 0x1f] = a1\n 68384: a1 = a3 >> 0x30\n 68387: u8 [a0 + 0x1e] = a1\n 68390: a1 = a3 >> 0x28\n 68393: u8 [a0 + 0x1d] = a1\n 68396: a1 = a3 >> 0x20\n 68399: u8 [a0 + 0x1c] = a1\n 68402: a1 = a3 >> 0x18\n 68405: u8 [a0 + 0x1b] = a1\n 68408: a1 = a3 >> 0x10\n 68411: u8 [a0 + 0x1a] = a1\n 68414: a1 = a3 >> 0x8\n 68417: u8 [a0 + 0x19] = a1\n 68420: i32 a0 = s1 + 0x6a0\n 68424: ecalli 5 // 'caller'\n 68426: a0 = u64 [s1 + 0x6a8]\n 68430: a1 = i32 [s1 + 0x6b0]\n 68434: a2 = u64 [s1 + 0x6a0]\n 68438: a0 = reverse a0\n 68440: a3 = a0 << 0x20\n 68443: a1 = reverse a1\n 68445: a1 = a1 >> 0x20\n 68448: a1 = a1 | a3\n 68451: u64 [s1 + 0x1d8] = a1\n 68455: a0 = a0 >> 0x20\n 68458: a1 = reverse a2\n 68460: a2 = a1 << 0x20\n 68463: a0 = a0 | a2\n 68466: u64 [s1 + 0x1d0] = a0\n 68470: a1 = a1 >> 0x20\n 68473: u64 [s1 + 0x1c8] = a1\n 68477: a0 = sp + 0xffffffffffffffe0\n 68480: a0 = a0 & 0xffffffffffffffe0\n 68483: u64 [s1 + 0x1b8] = a0\n 68487: sp = a0\n 68489: u64 [a0 + 24] = 0\n 68492: u64 [a0 + 16] = 0\n 68495: u64 [a0 + 8] = 0\n 68498: u64 [a0 + 0] = 0\n 68500: i32 a0 = a0 + 0\n 68502: ecalli 17 // 'value_transferred'\n 68504: a3 = u64 [s1 + 0x1b8]\n 68508: a0 = u64 [a3]\n 68510: a1 = u64 [a3 + 0x8]\n 68513: a2 = u64 [a3 + 0x10]\n 68516: a3 = u64 [a3 + 0x18]\n 68519: u64 [s1 + 0x2b8] = a3\n 68523: u64 [s1 + 0x2b0] = a2\n 68527: u64 [s1 + 0x2a8] = a1\n 68531: u64 [s1 + 0x2a0] = a0\n 68535: u64 [s1 + 728] = 0\n 68539: a0 = u64 [s1 + 0x1c8]\n 68543: u64 [s1 + 0x2d0] = a0\n 68547: a0 = u64 [s1 + 0x1d0]\n 68551: u64 [s1 + 0x2c8] = a0\n 68555: a0 = s1 + 0x2c0\n 68559: a1 = s1 + 0x2a0\n 68563: a2 = u64 [s1 + 0x1d8]\n 68567: u64 [s1 + 0x2c0] = a2\n 68571: ra = 790, jump @961\n      : @876 [@dyn 395] (gas: 11)\n 68577: i32 a0 = s1 + 0x6c0\n 68581: ecalli 5 // 'caller'\n 68583: a0 = u32 [s1 + 0x6d0]\n 68587: u64 [s1 + 0x1d0] = a0\n 68591: a0 = u64 [s1 + 0x6c8]\n 68595: u64 [s1 + 0x1c8] = a0\n 68599: a0 = u64 [s1 + 0x6c0]\n 68603: u64 [s1 + 0x1d8] = a0\n 68607: a0 = 0x40\n 68610: a1 = 0x20\n 68613: ra = 792, jump @0\n      : @877 [@dyn 396] (gas: 100)\n 68620: a1 = u8 [a0 + 0x11]\n 68623: a2 = u8 [a0 + 0x10]\n 68626: a3 = u8 [a0 + 0x12]\n 68629: a4 = u8 [a0 + 0x13]\n 68632: a1 = a1 << 0x8\n 68635: a1 = a1 | a2\n 68638: a3 = a3 << 0x10\n 68641: a4 = a4 << 0x18\n 68644: a3 = a3 | a4\n 68647: a1 = a1 | a3\n 68650: a2 = u8 [a0 + 0x15]\n 68653: a3 = u8 [a0 + 0x14]\n 68656: a4 = u8 [a0 + 0x16]\n 68659: a5 = u8 [a0 + 0x17]\n 68662: a2 = a2 << 0x8\n 68665: a2 = a2 | a3\n 68668: a4 = a4 << 0x10\n 68671: a5 = a5 << 0x18\n 68674: a4 = a4 | a5\n 68677: a2 = a2 | a4\n 68680: a2 = a2 << 0x20\n 68683: t0 = a2 | a1\n 68686: a2 = u8 [a0 + 0x1]\n 68689: a3 = u8 [a0]\n 68691: a4 = u8 [a0 + 0x2]\n 68694: a5 = u8 [a0 + 0x3]\n 68697: a2 = a2 << 0x8\n 68700: a2 = a2 | a3\n 68703: a4 = a4 << 0x10\n 68706: a5 = a5 << 0x18\n 68709: a4 = a4 | a5\n 68712: a2 = a2 | a4\n 68715: a3 = u8 [a0 + 0x5]\n 68718: a4 = u8 [a0 + 0x4]\n 68721: a5 = u8 [a0 + 0x6]\n 68724: a1 = u8 [a0 + 0x7]\n 68727: a3 = a3 << 0x8\n 68730: a3 = a3 | a4\n 68733: a5 = a5 << 0x10\n 68736: a1 = a1 << 0x18\n 68739: a1 = a1 | a5\n 68742: a1 = a1 | a3\n 68745: a1 = a1 << 0x20\n 68748: t1 = a1 | a2\n 68751: a1 = u8 [a0 + 0x19]\n 68754: a3 = u8 [a0 + 0x18]\n 68757: a4 = u8 [a0 + 0x1a]\n 68760: a5 = u8 [a0 + 0x1b]\n 68763: a1 = a1 << 0x8\n 68766: a1 = a1 | a3\n 68769: a4 = a4 << 0x10\n 68772: a5 = a5 << 0x18\n 68775: a4 = a4 | a5\n 68778: a1 = a1 | a4\n 68781: a3 = u8 [a0 + 0x1d]\n 68784: a4 = u8 [a0 + 0x1c]\n 68787: a5 = u8 [a0 + 0x1e]\n 68790: a2 = u8 [a0 + 0x1f]\n 68793: a3 = a3 << 0x8\n 68796: a3 = a3 | a4\n 68799: a5 = a5 << 0x10\n 68802: a2 = a2 << 0x18\n 68805: a2 = a2 | a5\n 68808: a2 = a2 | a3\n 68811: a2 = a2 << 0x20\n 68814: a3 = a2 | a1\n 68817: a1 = u8 [a0 + 0x9]\n 68820: a2 = u8 [a0 + 0x8]\n 68823: a4 = u8 [a0 + 0xa]\n 68826: a5 = u8 [a0 + 0xb]\n 68829: a1 = a1 << 0x8\n 68832: a1 = a1 | a2\n 68835: a4 = a4 << 0x10\n 68838: a5 = a5 << 0x18\n 68841: a4 = a4 | a5\n 68844: a1 = a1 | a4\n 68847: a2 = u8 [a0 + 0xd]\n 68850: a4 = u8 [a0 + 0xc]\n 68853: a5 = u8 [a0 + 0xe]\n 68856: a0 = u8 [a0 + 0xf]\n 68859: a2 = a2 << 0x8\n 68862: a2 = a2 | a4\n 68865: a5 = a5 << 0x10\n 68868: a0 = a0 << 0x18\n 68871: a0 = a0 | a5\n 68874: a0 = a0 | a2\n 68877: a0 = a0 << 0x20\n 68880: a0 = a0 | a1\n 68883: a1 = reverse a0\n 68885: a0 = reverse a3\n 68887: a2 = reverse t1\n 68889: a3 = reverse t0\n 68891: a2 = a2 | a3\n 68894: a3 = a0 | a1\n 68897: a3 = a3 | a2\n 68900: a3 = a3 >> 0x20\n 68903: a1 = a1 | a2\n 68906: a1 = a1 << 0x20\n 68909: a1 = a1 | a3\n 68912: jump @899 if a1 != 0\n      : @878 (gas: 21)\n 68916: a1 = u64 [s1 + 0x88]\n 68920: a1 = a1 >u 0\n 68922: u64 [s1 + 0x1b8] = a1\n 68926: a1 = u64 [s1 + 0x1c8]\n 68930: a1 = reverse a1\n 68932: a2 = a1 << 0x20\n 68935: a3 = u64 [s1 + 0x1d0]\n 68939: a3 = reverse a3\n 68941: a3 = a3 >> 0x20\n 68944: a2 = a2 | a3\n 68947: u64 [s1 + 0x1d0] = a2\n 68951: a2 = u64 [s1 + 0x1d8]\n 68955: a2 = reverse a2\n 68957: a2 = a2 << 0x20\n 68960: a1 = a1 >> 0x20\n 68963: a1 = a1 | a2\n 68966: u64 [s1 + 0x1c8] = a1\n 68970: i32 a0 = a0 + 0\n 68972: u64 [s1 + 0x1b0] = a0\n 68976: a1 = 0x20\n 68979: ra = 794, jump @0\n      : @879 [@dyn 397] (gas: 36)\n 68986: u8 [a0 + 30] = 0\n 68989: u8 [a0 + 29] = 0\n 68992: u8 [a0 + 28] = 0\n 68995: u8 [a0 + 27] = 0\n 68998: u8 [a0 + 26] = 0\n 69001: u8 [a0 + 25] = 0\n 69004: u8 [a0 + 24] = 0\n 69007: u8 [a0 + 23] = 0\n 69010: u8 [a0 + 22] = 0\n 69013: u8 [a0 + 21] = 0\n 69016: u8 [a0 + 20] = 0\n 69019: u8 [a0 + 19] = 0\n 69022: u8 [a0 + 18] = 0\n 69025: u8 [a0 + 17] = 0\n 69028: u8 [a0 + 16] = 0\n 69031: u8 [a0 + 15] = 0\n 69034: u8 [a0 + 14] = 0\n 69037: u8 [a0 + 13] = 0\n 69040: u8 [a0 + 12] = 0\n 69043: u8 [a0 + 11] = 0\n 69046: u8 [a0 + 10] = 0\n 69049: u8 [a0 + 9] = 0\n 69052: u8 [a0 + 8] = 0\n 69055: u8 [a0 + 7] = 0\n 69058: u8 [a0 + 6] = 0\n 69061: u8 [a0 + 5] = 0\n 69064: u8 [a0 + 4] = 0\n 69067: u8 [a0 + 3] = 0\n 69070: u8 [a0 + 2] = 0\n 69073: u8 [a0 + 1] = 0\n 69076: u8 [a0 + 0] = 0\n 69078: a1 = u64 [s1 + 0x1b8]\n 69082: u8 [a0 + 0x1f] = a1\n 69085: a1 = 0x20\n 69088: a0 = u64 [s1 + 0x1b0]\n 69092: ra = 796, jump @0\n      : @880 [@dyn 398] (gas: 45)\n 69099: a1 = u64 [0x20060]\n 69104: a2 = u64 [0x20068]\n 69109: a3 = u64 [0x20070]\n 69114: a4 = u64 [0x20078]\n 69119: u64 [s1 + 0x6f8] = a1\n 69123: u64 [s1 + 0x6f0] = a2\n 69127: u64 [s1 + 0x6e8] = a3\n 69131: u64 [s1 + 0x6e0] = a4\n 69135: a1 = u64 [s1 + 0x190]\n 69139: u64 [s1 + 0x718] = a1\n 69143: a1 = u64 [s1 + 0x198]\n 69147: u64 [s1 + 0x710] = a1\n 69151: a1 = u64 [s1 + 0x1a0]\n 69155: u64 [s1 + 0x708] = a1\n 69159: a1 = u64 [s1 + 0x1a8]\n 69163: u64 [s1 + 0x700] = a1\n 69167: a1 = u64 [s1 + 0x178]\n 69171: u64 [s1 + 0x738] = a1\n 69175: a1 = u64 [s1 + 0x180]\n 69179: u64 [s1 + 0x730] = a1\n 69183: a1 = u64 [s1 + 0x188]\n 69187: u64 [s1 + 0x728] = a1\n 69191: a1 = u64 [s1 + 0x1c0]\n 69195: u64 [s1 + 0x720] = a1\n 69199: a1 = u64 [s1 + 0x1d0]\n 69203: a1 = reverse a1\n 69205: u64 [s1 + 0x758] = a1\n 69209: a1 = u64 [s1 + 0x1c8]\n 69213: a1 = reverse a1\n 69215: u64 [s1 + 0x750] = a1\n 69219: a1 = u64 [s1 + 0x1d8]\n 69223: a1 = a1 << 0x20\n 69226: u64 [s1 + 0x748] = a1\n 69230: u64 [s1 + 1856] = 0\n 69234: i32 a2 = a0 + 0\n 69236: i32 a0 = s1 + 0x6e0\n 69240: a1 = 0x4\n 69243: a3 = 0x20\n 69246: ecalli 7 // 'deposit_event'\n 69248: sp = s0 + 0xfffffffffffff840\n 69252: ra = u64 [sp + 0x7b8]\n 69256: s0 = u64 [sp + 0x7b0]\n 69260: s1 = u64 [sp + 0x7a8]\n 69264: sp = sp + 0x7c0\n 69268: ret\n      : @881 (gas: 1)\n 69270: ra = 798, jump @282\n      : @882 [@dyn 399] (gas: 3)\n 69277: a0 = 0x40\n 69280: a1 = 0x20\n 69283: ra = 800, jump @0\n      : @883 [@dyn 400] (gas: 104)\n 69290: a1 = u8 [a0 + 0x11]\n 69293: a2 = u8 [a0 + 0x10]\n 69296: a3 = u8 [a0 + 0x12]\n 69299: a4 = u8 [a0 + 0x13]\n 69302: a1 = a1 << 0x8\n 69305: a1 = a1 | a2\n 69308: a3 = a3 << 0x10\n 69311: a4 = a4 << 0x18\n 69314: a3 = a3 | a4\n 69317: a1 = a1 | a3\n 69320: a2 = u8 [a0 + 0x15]\n 69323: a3 = u8 [a0 + 0x14]\n 69326: a4 = u8 [a0 + 0x16]\n 69329: a5 = u8 [a0 + 0x17]\n 69332: a2 = a2 << 0x8\n 69335: a2 = a2 | a3\n 69338: a4 = a4 << 0x10\n 69341: a5 = a5 << 0x18\n 69344: a4 = a4 | a5\n 69347: a2 = a2 | a4\n 69350: a2 = a2 << 0x20\n 69353: t0 = a2 | a1\n 69356: a2 = u8 [a0 + 0x1]\n 69359: a3 = u8 [a0]\n 69361: a4 = u8 [a0 + 0x2]\n 69364: a5 = u8 [a0 + 0x3]\n 69367: a2 = a2 << 0x8\n 69370: a2 = a2 | a3\n 69373: a4 = a4 << 0x10\n 69376: a5 = a5 << 0x18\n 69379: a4 = a4 | a5\n 69382: a2 = a2 | a4\n 69385: a3 = u8 [a0 + 0x5]\n 69388: a4 = u8 [a0 + 0x4]\n 69391: a5 = u8 [a0 + 0x6]\n 69394: a1 = u8 [a0 + 0x7]\n 69397: a3 = a3 << 0x8\n 69400: a3 = a3 | a4\n 69403: a5 = a5 << 0x10\n 69406: a1 = a1 << 0x18\n 69409: a1 = a1 | a5\n 69412: a1 = a1 | a3\n 69415: a1 = a1 << 0x20\n 69418: t1 = a1 | a2\n 69421: a1 = u8 [a0 + 0x19]\n 69424: a3 = u8 [a0 + 0x18]\n 69427: a4 = u8 [a0 + 0x1a]\n 69430: a5 = u8 [a0 + 0x1b]\n 69433: a1 = a1 << 0x8\n 69436: a1 = a1 | a3\n 69439: a4 = a4 << 0x10\n 69442: a5 = a5 << 0x18\n 69445: a4 = a4 | a5\n 69448: a1 = a1 | a4\n 69451: a3 = u8 [a0 + 0x1d]\n 69454: a4 = u8 [a0 + 0x1c]\n 69457: a5 = u8 [a0 + 0x1e]\n 69460: a2 = u8 [a0 + 0x1f]\n 69463: a3 = a3 << 0x8\n 69466: a3 = a3 | a4\n 69469: a5 = a5 << 0x10\n 69472: a2 = a2 << 0x18\n 69475: a2 = a2 | a5\n 69478: a2 = a2 | a3\n 69481: a2 = a2 << 0x20\n 69484: a3 = a2 | a1\n 69487: a1 = u8 [a0 + 0x9]\n 69490: a2 = u8 [a0 + 0x8]\n 69493: a4 = u8 [a0 + 0xa]\n 69496: a5 = u8 [a0 + 0xb]\n 69499: a1 = a1 << 0x8\n 69502: a1 = a1 | a2\n 69505: a4 = a4 << 0x10\n 69508: a5 = a5 << 0x18\n 69511: a4 = a4 | a5\n 69514: a1 = a1 | a4\n 69517: a2 = u8 [a0 + 0xd]\n 69520: a4 = u8 [a0 + 0xc]\n 69523: a5 = u8 [a0 + 0xe]\n 69526: a0 = u8 [a0 + 0xf]\n 69529: a2 = a2 << 0x8\n 69532: a2 = a2 | a4\n 69535: a5 = a5 << 0x10\n 69538: a0 = a0 << 0x18\n 69541: a0 = a0 | a5\n 69544: a0 = a0 | a2\n 69547: a0 = a0 << 0x20\n 69550: a0 = a0 | a1\n 69553: a4 = reverse a0\n 69555: a1 = reverse a3\n 69557: a2 = reverse t1\n 69559: a0 = reverse t0\n 69561: u64 [s1 + 0x1d8] = a0\n 69565: u64 [s1 + 0x1c8] = a2\n 69569: a0 = a0 | a2\n 69572: a2 = a1\n 69574: a1 = a1 | a4\n 69577: a1 = a1 | a0\n 69580: a1 = a1 >> 0x20\n 69583: u64 [s1 + 0x1d0] = a4\n 69587: a0 = a0 | a4\n 69590: a0 = a0 << 0x20\n 69593: a0 = a0 | a1\n 69596: jump @899 if a0 != 0\n      : @884 (gas: 5)\n 69600: u64 [s1 + 0x1c0] = a2\n 69604: i32 a0 = a2 + 0\n 69606: a1 = 0x20\n 69609: u64 [s1 + 0x1b8] = a0\n 69613: ra = 802, jump @0\n      : @885 [@dyn 401] (gas: 51)\n 69620: u8 [a0 + 31] = 0\n 69623: u8 [a0 + 30] = 0\n 69626: u8 [a0 + 29] = 0\n 69629: u8 [a0 + 28] = 0\n 69632: u8 [a0 + 27] = 0\n 69635: u8 [a0 + 26] = 0\n 69638: u8 [a0 + 25] = 0\n 69641: u8 [a0 + 24] = 0\n 69644: u8 [a0 + 23] = 0\n 69647: u8 [a0 + 22] = 0\n 69650: u8 [a0 + 21] = 0\n 69653: u8 [a0 + 20] = 0\n 69656: u8 [a0 + 19] = 0\n 69659: u8 [a0 + 18] = 0\n 69662: u8 [a0 + 17] = 0\n 69665: u8 [a0 + 16] = 0\n 69668: u8 [a0 + 15] = 0\n 69671: u8 [a0 + 14] = 0\n 69674: u8 [a0 + 13] = 0\n 69677: u8 [a0 + 12] = 0\n 69680: u8 [a0 + 11] = 0\n 69683: u8 [a0 + 10] = 0\n 69686: u8 [a0 + 9] = 0\n 69689: u8 [a0 + 8] = 0\n 69692: u8 [a0 + 7] = 0\n 69695: u8 [a0 + 6] = 0\n 69698: u8 [a0 + 5] = 0\n 69701: u8 [a0 + 4] = 0\n 69704: u8 [a0 + 3] = 0xa0\n 69709: u8 [a0 + 2] = 0x79\n 69713: u8 [a0 + 1] = 0xc3\n 69718: u8 [a0 + 0] = 0x8\n 69721: a1 = u64 [s1 + 0x1c0]\n 69725: a0 = a1 + 0x4\n 69728: a1 = a0 <u a1\n 69731: a3 = u64 [s1 + 0x1d8]\n 69735: a2 = a3 + a1\n 69738: a3 = a2 <u a3\n 69741: a3 = a1 if a1 == 0\n 69744: a1 = u64 [s1 + 0x1d0]\n 69748: a3 = a3 + a1\n 69751: a1 = a3 <u a1\n 69754: a4 = u64 [s1 + 0x1c8]\n 69758: a4 = a4 + a1\n 69761: u64 [s1 + 0x1e8] = a2\n 69765: u64 [s1 + 0x1e0] = a0\n 69769: u64 [s1 + 0x1f0] = a3\n 69773: a0 = s1 + 0x200\n 69777: a1 = s1 + 0x1e0\n 69781: u64 [s1 + 0x1f8] = a4\n 69785: ra = 804, jump @272\n      : @886 [@dyn 402] (gas: 5)\n 69792: a0 = u64 [s1 + 0x208]\n 69796: t0 = u64 [s1 + 0x218]\n 69800: t1 = u64 [s1 + 0x200]\n 69804: a3 = u64 [s1 + 0x210]\n 69808: jump @892\n      : @887 (gas: 3)\n 69811: a0 = 0x40\n 69814: a1 = 0x20\n 69817: ra = 806, jump @0\n      : @888 [@dyn 403] (gas: 104)\n 69824: a1 = u8 [a0 + 0x11]\n 69827: a2 = u8 [a0 + 0x10]\n 69830: a3 = u8 [a0 + 0x12]\n 69833: a4 = u8 [a0 + 0x13]\n 69836: a1 = a1 << 0x8\n 69839: a1 = a1 | a2\n 69842: a3 = a3 << 0x10\n 69845: a4 = a4 << 0x18\n 69848: a3 = a3 | a4\n 69851: a1 = a1 | a3\n 69854: a2 = u8 [a0 + 0x15]\n 69857: a3 = u8 [a0 + 0x14]\n 69860: a4 = u8 [a0 + 0x16]\n 69863: a5 = u8 [a0 + 0x17]\n 69866: a2 = a2 << 0x8\n 69869: a2 = a2 | a3\n 69872: a4 = a4 << 0x10\n 69875: a5 = a5 << 0x18\n 69878: a4 = a4 | a5\n 69881: a2 = a2 | a4\n 69884: a2 = a2 << 0x20\n 69887: t0 = a2 | a1\n 69890: a2 = u8 [a0 + 0x1]\n 69893: a3 = u8 [a0]\n 69895: a4 = u8 [a0 + 0x2]\n 69898: a5 = u8 [a0 + 0x3]\n 69901: a2 = a2 << 0x8\n 69904: a2 = a2 | a3\n 69907: a4 = a4 << 0x10\n 69910: a5 = a5 << 0x18\n 69913: a4 = a4 | a5\n 69916: a2 = a2 | a4\n 69919: a3 = u8 [a0 + 0x5]\n 69922: a4 = u8 [a0 + 0x4]\n 69925: a5 = u8 [a0 + 0x6]\n 69928: a1 = u8 [a0 + 0x7]\n 69931: a3 = a3 << 0x8\n 69934: a3 = a3 | a4\n 69937: a5 = a5 << 0x10\n 69940: a1 = a1 << 0x18\n 69943: a1 = a1 | a5\n 69946: a1 = a1 | a3\n 69949: a1 = a1 << 0x20\n 69952: t1 = a1 | a2\n 69955: a1 = u8 [a0 + 0x19]\n 69958: a3 = u8 [a0 + 0x18]\n 69961: a4 = u8 [a0 + 0x1a]\n 69964: a5 = u8 [a0 + 0x1b]\n 69967: a1 = a1 << 0x8\n 69970: a1 = a1 | a3\n 69973: a4 = a4 << 0x10\n 69976: a5 = a5 << 0x18\n 69979: a4 = a4 | a5\n 69982: a1 = a1 | a4\n 69985: a3 = u8 [a0 + 0x1d]\n 69988: a4 = u8 [a0 + 0x1c]\n 69991: a5 = u8 [a0 + 0x1e]\n 69994: a2 = u8 [a0 + 0x1f]\n 69997: a3 = a3 << 0x8\n 70000: a3 = a3 | a4\n 70003: a5 = a5 << 0x10\n 70006: a2 = a2 << 0x18\n 70009: a2 = a2 | a5\n 70012: a2 = a2 | a3\n 70015: a2 = a2 << 0x20\n 70018: a3 = a2 | a1\n 70021: a1 = u8 [a0 + 0x9]\n 70024: a2 = u8 [a0 + 0x8]\n 70027: a4 = u8 [a0 + 0xa]\n 70030: a5 = u8 [a0 + 0xb]\n 70033: a1 = a1 << 0x8\n 70036: a1 = a1 | a2\n 70039: a4 = a4 << 0x10\n 70042: a5 = a5 << 0x18\n 70045: a4 = a4 | a5\n 70048: a1 = a1 | a4\n 70051: a2 = u8 [a0 + 0xd]\n 70054: a4 = u8 [a0 + 0xc]\n 70057: a5 = u8 [a0 + 0xe]\n 70060: a0 = u8 [a0 + 0xf]\n 70063: a2 = a2 << 0x8\n 70066: a2 = a2 | a4\n 70069: a5 = a5 << 0x10\n 70072: a0 = a0 << 0x18\n 70075: a0 = a0 | a5\n 70078: a0 = a0 | a2\n 70081: a0 = a0 << 0x20\n 70084: a0 = a0 | a1\n 70087: a4 = reverse a0\n 70089: a1 = reverse a3\n 70091: a2 = reverse t1\n 70093: a0 = reverse t0\n 70095: u64 [s1 + 0x1d8] = a0\n 70099: u64 [s1 + 0x1c8] = a2\n 70103: a0 = a0 | a2\n 70106: a2 = a1\n 70108: a1 = a1 | a4\n 70111: a1 = a1 | a0\n 70114: a1 = a1 >> 0x20\n 70117: u64 [s1 + 0x1d0] = a4\n 70121: a0 = a0 | a4\n 70124: a0 = a0 << 0x20\n 70127: a0 = a0 | a1\n 70130: jump @899 if a0 != 0\n      : @889 (gas: 5)\n 70134: u64 [s1 + 0x1c0] = a2\n 70138: i32 a0 = a2 + 0\n 70140: a1 = 0x20\n 70143: u64 [s1 + 0x1b8] = a0\n 70147: ra = 808, jump @0\n      : @890 [@dyn 404] (gas: 51)\n 70154: u8 [a0 + 31] = 0\n 70157: u8 [a0 + 30] = 0\n 70160: u8 [a0 + 29] = 0\n 70163: u8 [a0 + 28] = 0\n 70166: u8 [a0 + 27] = 0\n 70169: u8 [a0 + 26] = 0\n 70172: u8 [a0 + 25] = 0\n 70175: u8 [a0 + 24] = 0\n 70178: u8 [a0 + 23] = 0\n 70181: u8 [a0 + 22] = 0\n 70184: u8 [a0 + 21] = 0\n 70187: u8 [a0 + 20] = 0\n 70190: u8 [a0 + 19] = 0\n 70193: u8 [a0 + 18] = 0\n 70196: u8 [a0 + 17] = 0\n 70199: u8 [a0 + 16] = 0\n 70202: u8 [a0 + 15] = 0\n 70205: u8 [a0 + 14] = 0\n 70208: u8 [a0 + 13] = 0\n 70211: u8 [a0 + 12] = 0\n 70214: u8 [a0 + 11] = 0\n 70217: u8 [a0 + 10] = 0\n 70220: u8 [a0 + 9] = 0\n 70223: u8 [a0 + 8] = 0\n 70226: u8 [a0 + 7] = 0\n 70229: u8 [a0 + 6] = 0\n 70232: u8 [a0 + 5] = 0\n 70235: u8 [a0 + 4] = 0\n 70238: u8 [a0 + 3] = 0xa0\n 70243: u8 [a0 + 2] = 0x79\n 70247: u8 [a0 + 1] = 0xc3\n 70252: u8 [a0 + 0] = 0x8\n 70255: a1 = u64 [s1 + 0x1c0]\n 70259: a0 = a1 + 0x4\n 70262: a1 = a0 <u a1\n 70265: a3 = u64 [s1 + 0x1d8]\n 70269: a2 = a3 + a1\n 70272: a3 = a2 <u a3\n 70275: a3 = a1 if a1 == 0\n 70278: a1 = u64 [s1 + 0x1d0]\n 70282: a3 = a3 + a1\n 70285: a1 = a3 <u a1\n 70288: a4 = u64 [s1 + 0x1c8]\n 70292: a4 = a4 + a1\n 70295: u64 [s1 + 0x268] = a2\n 70299: u64 [s1 + 0x260] = a0\n 70303: u64 [s1 + 0x270] = a3\n 70307: a0 = s1 + 0x280\n 70311: a1 = s1 + 0x260\n 70315: u64 [s1 + 0x278] = a4\n 70319: ra = 810, jump @756\n      : @891 [@dyn 405] (gas: 5)\n 70325: a0 = u64 [s1 + 0x288]\n 70329: t0 = u64 [s1 + 0x298]\n 70333: t1 = u64 [s1 + 0x280]\n 70337: a3 = u64 [s1 + 0x290]\n 70341: fallthrough\n      : @892 (gas: 27)\n 70342: a1 = u64 [s1 + 0x1d8]\n 70346: a4 = a0 ^ a1\n 70349: a5 = a0 <u a1\n 70352: ra = a1\n 70354: t2 = u64 [s1 + 0x1c0]\n 70358: a1 = t1 <u t2\n 70361: a5 = a1 if a4 == 0\n 70364: a2 = u64 [s1 + 0x1d0]\n 70368: a4 = a3 - a2\n 70371: a3 = a3 <u a2\n 70374: a2 = u64 [s1 + 0x1c8]\n 70378: a2 = t0 - a2\n 70381: a2 = a2 - a3\n 70384: a3 = a4 <u a5\n 70387: a2 = a2 - a3\n 70390: a4 = a4 - a5\n 70393: a0 = a0 - ra\n 70396: a1 = a0 - a1\n 70399: a0 = t1 - t2\n 70402: a1 = a1 | a2\n 70405: a2 = a0 | a4\n 70408: a2 = a2 | a1\n 70411: a1 = a1 | a4\n 70414: a2 = a2 >> 0x20\n 70417: a1 = a1 << 0x20\n 70420: a1 = a1 | a2\n 70423: jump @899 if a1 != 0\n      : @893 (gas: 4)\n 70427: i32 a1 = a0 + 0\n 70429: u64 [s1 + 0x1d8] = a1\n 70433: a0 = u64 [s1 + 0x1b8]\n 70437: ra = 812, jump @0\n      : @894 [@dyn 406] (gas: 5)\n 70444: i32 a1 = a0 + 0\n 70446: a0 = 0x1\n 70449: a2 = u64 [s1 + 0x1d8]\n 70453: ecalli 14 // 'seal_return'\n 70455: fallthrough\n      : @895 (gas: 8)\n 70456: a0 = a4 | a2\n 70459: a1 = a1 | a3\n 70462: a0 = a0 | a1\n 70465: a0 = a0 >> 0x20\n 70468: a1 = a1 | a2\n 70471: a1 = a1 << 0x20\n 70474: a0 = a0 | a1\n 70477: jump @899 if a0 != 0\n      : @896 (gas: 4)\n 70481: i32 a0 = a4 + 0\n 70483: a1 = 0x20\n 70486: u64 [s1 + 0x1d8] = a0\n 70490: ra = 814, jump @0\n      : @897 [@dyn 407] (gas: 51)\n 70497: u8 [a0 + 31] = 0\n 70500: u8 [a0 + 30] = 0\n 70503: u8 [a0 + 29] = 0\n 70506: u8 [a0 + 28] = 0\n 70509: u8 [a0 + 27] = 0\n 70512: u8 [a0 + 26] = 0\n 70515: u8 [a0 + 25] = 0\n 70518: u8 [a0 + 24] = 0\n 70521: u8 [a0 + 23] = 0\n 70524: u8 [a0 + 22] = 0\n 70527: u8 [a0 + 21] = 0\n 70530: u8 [a0 + 20] = 0\n 70533: u8 [a0 + 19] = 0\n 70536: u8 [a0 + 18] = 0\n 70539: u8 [a0 + 17] = 0\n 70542: u8 [a0 + 16] = 0\n 70545: u8 [a0 + 15] = 0\n 70548: u8 [a0 + 14] = 0\n 70551: u8 [a0 + 13] = 0\n 70554: u8 [a0 + 12] = 0\n 70557: u8 [a0 + 11] = 0\n 70560: u8 [a0 + 10] = 0\n 70563: u8 [a0 + 9] = 0\n 70566: u8 [a0 + 8] = 0\n 70569: u8 [a0 + 7] = 0\n 70572: u8 [a0 + 6] = 0\n 70575: u8 [a0 + 5] = 0\n 70578: u8 [a0 + 4] = 0\n 70581: u8 [a0 + 3] = 0xa0\n 70586: u8 [a0 + 2] = 0x79\n 70590: u8 [a0 + 1] = 0xc3\n 70595: u8 [a0 + 0] = 0x8\n 70598: a1 = u64 [s1 + 0x68]\n 70601: a0 = a1 + 0x4\n 70604: a1 = a0 <u a1\n 70607: a3 = u64 [s1 + 0x70]\n 70610: a2 = a3 + a1\n 70613: a3 = a2 <u a3\n 70616: a3 = a1 if a1 == 0\n 70619: a1 = u64 [s1 + 0x78]\n 70622: a3 = a3 + a1\n 70625: a1 = a3 <u a1\n 70628: a4 = u64 [s1 + 0x80]\n 70632: a4 = a4 + a1\n 70635: u64 [s1 + 0x328] = a2\n 70639: u64 [s1 + 0x320] = a0\n 70643: u64 [s1 + 0x330] = a3\n 70647: a0 = s1 + 0x340\n 70651: a1 = s1 + 0x320\n 70655: u64 [s1 + 0x338] = a4\n 70659: ra = 816, jump @764\n      : @898 [@dyn 408] (gas: 31)\n 70665: a0 = u64 [s1 + 0x348]\n 70669: t0 = u64 [s1 + 0x358]\n 70673: t1 = u64 [s1 + 0x340]\n 70677: a3 = u64 [s1 + 0x350]\n 70681: a1 = u64 [s1 + 0x70]\n 70684: a4 = a0 ^ a1\n 70687: a5 = a0 <u a1\n 70690: ra = a1\n 70692: t2 = u64 [s1 + 0x68]\n 70695: a1 = t1 <u t2\n 70698: a5 = a1 if a4 == 0\n 70701: a2 = u64 [s1 + 0x78]\n 70704: a4 = a3 - a2\n 70707: a3 = a3 <u a2\n 70710: a2 = u64 [s1 + 0x80]\n 70714: a2 = t0 - a2\n 70717: a2 = a2 - a3\n 70720: a3 = a4 <u a5\n 70723: a2 = a2 - a3\n 70726: a4 = a4 - a5\n 70729: a0 = a0 - ra\n 70732: a1 = a0 - a1\n 70735: a0 = t1 - t2\n 70738: a1 = a1 | a2\n 70741: a2 = a0 | a4\n 70744: a2 = a2 | a1\n 70747: a1 = a1 | a4\n 70750: a2 = a2 >> 0x20\n 70753: a1 = a1 << 0x20\n 70756: a1 = a1 | a2\n 70759: jump @913 if a1 == 0\n      : @899 (gas: 1)\n 70763: trap\n      : @900 (gas: 4)\n 70764: a0 = 0\n 70766: a1 = 0\n 70768: ra = 0x332\n 70772: jump @0\n      : @901 (gas: 2)\n 70776: a1 = 0\n 70778: ra = 818, jump @0\n      : @902 [@dyn 409] (gas: 5)\n 70785: i32 a1 = a0 + 0\n 70787: a0 = 0x1\n 70790: a2 = 0\n 70792: ecalli 14 // 'seal_return'\n 70794: fallthrough\n      : @903 (gas: 8)\n 70795: u64 [s1 + 592] = 0\n 70799: u64 [s1 + 584] = 0\n 70803: u64 [s1 + 576] = 0\n 70807: a0 = 0x4e487b7100000000\n 70817: a1 = s1 + 0x240\n 70821: u64 [s1 + 0x258] = a0\n 70825: a0 = 0\n 70827: ra = 820, jump @8\n      : @904 [@dyn 410] (gas: 8)\n 70834: u64 [s1 + 568] = 0\n 70838: u64 [s1 + 560] = 0\n 70842: u64 [s1 + 544] = 0x41\n 70847: a0 = 0x4\n 70850: a1 = s1 + 0x220\n 70854: u64 [s1 + 552] = 0\n 70858: ra = 0x33c\n 70862: jump @8\n      : @905 (gas: 8)\n 70866: u64 [s1 + 784] = 0\n 70870: u64 [s1 + 776] = 0\n 70874: u64 [s1 + 768] = 0\n 70878: a0 = 0x4e487b7100000000\n 70888: a1 = s1 + 0x300\n 70892: u64 [s1 + 0x318] = a0\n 70896: a0 = 0\n 70898: ra = 822, jump @8\n      : @906 [@dyn 411] (gas: 8)\n 70905: u64 [s1 + 760] = 0\n 70909: u64 [s1 + 752] = 0\n 70913: u64 [s1 + 736] = 0x41\n 70918: a0 = 0x4\n 70921: a1 = s1 + 0x2e0\n 70925: u64 [s1 + 744] = 0\n 70929: ra = 0x33c\n 70933: jump @8\n      : @907 (gas: 8)\n 70937: u64 [s1 + 912] = 0\n 70941: u64 [s1 + 904] = 0\n 70945: u64 [s1 + 896] = 0\n 70949: a0 = 0x4e487b7100000000\n 70959: a1 = s1 + 0x380\n 70963: u64 [s1 + 0x398] = a0\n 70967: a0 = 0\n 70969: ra = 824, jump @8\n      : @908 [@dyn 412] (gas: 8)\n 70976: u64 [s1 + 888] = 0\n 70980: u64 [s1 + 880] = 0\n 70984: u64 [s1 + 864] = 0x41\n 70989: a0 = 0x4\n 70992: a1 = s1 + 0x360\n 70996: u64 [s1 + 872] = 0\n 71000: ra = 0x33c\n 71004: jump @8\n      : @909 (gas: 8)\n 71008: u64 [s1 + 976] = 0\n 71012: u64 [s1 + 968] = 0\n 71016: u64 [s1 + 960] = 0\n 71020: a0 = 0x4e487b7100000000\n 71030: a1 = s1 + 0x3c0\n 71034: u64 [s1 + 0x3d8] = a0\n 71038: a0 = 0\n 71040: ra = 826, jump @8\n      : @910 [@dyn 413] (gas: 7)\n 71047: u64 [s1 + 952] = 0\n 71051: u64 [s1 + 944] = 0\n 71055: u64 [s1 + 928] = 0x11\n 71060: a0 = 0x4\n 71063: a1 = s1 + 0x3a0\n 71067: u64 [s1 + 936] = 0\n 71071: ra = 828, jump @8\n      : @911 [@dyn 414] (gas: 3)\n 71078: a1 = 0x24\n 71081: a0 = 0\n 71083: ra = 830, jump @0\n      : @912 [@dyn 415] (gas: 5)\n 71090: i32 a1 = a0 + 0\n 71092: a0 = 0x1\n 71095: a2 = 0x24\n 71098: ecalli 14 // 'seal_return'\n 71100: fallthrough\n      : @913 (gas: 4)\n 71101: i32 a1 = a0 + 0\n 71103: u64 [s1 + 0x1d0] = a1\n 71107: a0 = u64 [s1 + 0x1d8]\n 71111: ra = 832, jump @0\n      : @914 [@dyn 416] (gas: 6)\n 71118: i32 a1 = a0 + 0\n 71120: a0 = 0x1\n 71123: a2 = u64 [s1 + 0x1d0]\n 71127: ra = 0x342\n 71131: ecalli 14 // 'seal_return'\n 71133: fallthrough\n      : @915 [@dyn 417] (gas: 12)\n 71134: a1 = u64 [a0 + 0x10]\n 71137: a2 = u64 [a0 + 0x18]\n 71140: a3 = u64 [a0 + 0x8]\n 71143: a0 = u64 [a0]\n 71145: a2 = a2 | a3\n 71148: a3 = a0 | a1\n 71151: a3 = a3 | a2\n 71154: a3 = a3 >> 0x20\n 71157: a1 = a1 | a2\n 71160: a1 = a1 << 0x20\n 71163: a1 = a1 | a3\n 71166: jump @918 if a1 != 0\n      : @916 (gas: 7)\n 71170: sp = sp + 0xfffffffffffffff0\n 71173: u64 [sp + 0x8] = ra\n 71176: u64 [sp] = s0\n 71178: i32 a0 = a0 + 0\n 71180: a1 = 0x20\n 71183: s0 = 0x20\n 71186: ra = 836, jump @0\n      : @917 [@dyn 418] (gas: 43)\n 71193: t0 = 0x64\n 71196: u8 [a0 + 0x1f] = t0\n 71199: u8 [a0 + 30] = 0x65\n 71203: u8 [a0 + 29] = 0x74\n 71207: u8 [a0 + 28] = 0x70\n 71211: u8 [a0 + 27] = 0x65\n 71215: a3 = 0x63\n 71218: u8 [a0 + 0x1a] = a3\n 71221: u8 [a0 + 0x19] = a3\n 71224: t1 = 0x61\n 71227: u8 [a0 + 0x18] = t1\n 71230: u8 [a0 + 0x17] = s0\n 71233: u8 [a0 + 22] = 0x74\n 71237: a2 = 0x6f\n 71240: u8 [a0 + 0x15] = a2\n 71243: u8 [a0 + 20] = 0x6e\n 71247: u8 [a0 + 0x13] = s0\n 71250: u8 [a0 + 18] = 0x48\n 71254: u8 [a0 + 17] = 0x54\n 71258: u8 [a0 + 16] = 0x45\n 71262: u8 [a0 + 0xf] = s0\n 71265: u8 [a0 + 14] = 0x74\n 71269: u8 [a0 + 0xd] = a3\n 71272: u8 [a0 + 12] = 0x65\n 71276: a4 = 0x72\n 71279: u8 [a0 + 0xb] = a4\n 71282: u8 [a0 + 10] = 0x69\n 71286: u8 [a0 + 0x9] = t0\n 71289: u8 [a0 + 0x8] = s0\n 71292: u8 [a0 + 7] = 0x3a\n 71296: a5 = 0x79\n 71299: u8 [a0 + 0x6] = a5\n 71302: u8 [a0 + 0x5] = a4\n 71305: u8 [a0 + 0x4] = a2\n 71308: u8 [a0 + 3] = 0x74\n 71312: u8 [a0 + 0x2] = a3\n 71315: u8 [a0 + 0x1] = t1\n 71318: a1 = 0x46\n 71321: u8 [a0] = a1\n 71323: ra = u64 [sp + 0x8]\n 71326: s0 = u64 [sp]\n 71328: sp = sp + 0x10\n 71331: ret\n      : @918 (gas: 1)\n 71333: trap\n      : @919 [@dyn 419] (gas: 100)\n 71334: a1 = u8 [a0 + 0x11]\n 71337: a2 = u8 [a0 + 0x10]\n 71340: a3 = u8 [a0 + 0x12]\n 71343: a4 = u8 [a0 + 0x13]\n 71346: a1 = a1 << 0x8\n 71349: a1 = a1 | a2\n 71352: a3 = a3 << 0x10\n 71355: a4 = a4 << 0x18\n 71358: a3 = a3 | a4\n 71361: a1 = a1 | a3\n 71364: a2 = u8 [a0 + 0x15]\n 71367: a3 = u8 [a0 + 0x14]\n 71370: a4 = u8 [a0 + 0x16]\n 71373: a5 = u8 [a0 + 0x17]\n 71376: a2 = a2 << 0x8\n 71379: a2 = a2 | a3\n 71382: a4 = a4 << 0x10\n 71385: a5 = a5 << 0x18\n 71388: a4 = a4 | a5\n 71391: a2 = a2 | a4\n 71394: a2 = a2 << 0x20\n 71397: a1 = a1 | a2\n 71400: a2 = u8 [a0 + 0x1]\n 71403: a3 = u8 [a0]\n 71405: a4 = u8 [a0 + 0x2]\n 71408: a5 = u8 [a0 + 0x3]\n 71411: a2 = a2 << 0x8\n 71414: a2 = a2 | a3\n 71417: a4 = a4 << 0x10\n 71420: a5 = a5 << 0x18\n 71423: a4 = a4 | a5\n 71426: a2 = a2 | a4\n 71429: a3 = u8 [a0 + 0x5]\n 71432: a4 = u8 [a0 + 0x4]\n 71435: a5 = u8 [a0 + 0x6]\n 71438: s1 = u8 [a0 + 0x7]\n 71441: a3 = a3 << 0x8\n 71444: a3 = a3 | a4\n 71447: a5 = a5 << 0x10\n 71450: s1 = s1 << 0x18\n 71453: a5 = a5 | s1\n 71456: a3 = a3 | a5\n 71459: a3 = a3 << 0x20\n 71462: a2 = a2 | a3\n 71465: a3 = u8 [a0 + 0x19]\n 71468: a4 = u8 [a0 + 0x18]\n 71471: a5 = u8 [a0 + 0x1a]\n 71474: s1 = u8 [a0 + 0x1b]\n 71477: a3 = a3 << 0x8\n 71480: a3 = a3 | a4\n 71483: a5 = a5 << 0x10\n 71486: s1 = s1 << 0x18\n 71489: a5 = a5 | s1\n 71492: a3 = a3 | a5\n 71495: a4 = u8 [a0 + 0x1d]\n 71498: a5 = u8 [a0 + 0x1c]\n 71501: s1 = u8 [a0 + 0x1e]\n 71504: s0 = u8 [a0 + 0x1f]\n 71507: a4 = a4 << 0x8\n 71510: a4 = a4 | a5\n 71513: s1 = s1 << 0x10\n 71516: s0 = s0 << 0x18\n 71519: s0 = s0 | s1\n 71522: a4 = a4 | s0\n 71525: a4 = a4 << 0x20\n 71528: a3 = a3 | a4\n 71531: a4 = u8 [a0 + 0x9]\n 71534: a5 = u8 [a0 + 0x8]\n 71537: s1 = u8 [a0 + 0xa]\n 71540: s0 = u8 [a0 + 0xb]\n 71543: a4 = a4 << 0x8\n 71546: a4 = a4 | a5\n 71549: s1 = s1 << 0x10\n 71552: s0 = s0 << 0x18\n 71555: s0 = s0 | s1\n 71558: a4 = a4 | s0\n 71561: a5 = u8 [a0 + 0xd]\n 71564: s1 = u8 [a0 + 0xc]\n 71567: s0 = u8 [a0 + 0xe]\n 71570: a0 = u8 [a0 + 0xf]\n 71573: a5 = a5 << 0x8\n 71576: a5 = a5 | s1\n 71579: s0 = s0 << 0x10\n 71582: a0 = a0 << 0x18\n 71585: a0 = a0 | s0\n 71588: a0 = a0 | a5\n 71591: a0 = a0 << 0x20\n 71594: a0 = a0 | a4\n 71597: s1 = reverse a0\n 71599: a3 = reverse a3\n 71601: s0 = reverse a2\n 71603: a2 = reverse a1\n 71605: a0 = a2 | s0\n 71608: a1 = a3 | s1\n 71611: a1 = a1 | a0\n 71614: a1 = a1 >> 0x20\n 71617: a0 = a0 | s1\n 71620: a0 = a0 << 0x20\n 71623: a0 = a0 | a1\n 71626: jump @926 if a0 != 0\n      : @920 (gas: 6)\n 71630: i32 a0 = a3 + 0\n 71632: a1 = 0x20\n 71635: u64 [sp + 0x8] = a0\n 71638: u64 [sp + 0x18] = a2\n 71641: u64 [sp + 0x10] = a3\n 71644: ra = 840, jump @0\n      : @921 [@dyn 420] (gas: 41)\n 71651: u8 [a0 + 31] = 0\n 71654: u8 [a0 + 30] = 0\n 71657: u8 [a0 + 29] = 0\n 71660: u8 [a0 + 28] = 0\n 71663: u8 [a0 + 27] = 0\n 71666: u8 [a0 + 26] = 0\n 71669: u8 [a0 + 25] = 0\n 71672: u8 [a0 + 24] = 0\n 71675: u8 [a0 + 23] = 0\n 71678: u8 [a0 + 22] = 0\n 71681: u8 [a0 + 21] = 0\n 71684: u8 [a0 + 20] = 0\n 71687: u8 [a0 + 19] = 0\n 71690: u8 [a0 + 18] = 0\n 71693: u8 [a0 + 17] = 0\n 71696: u8 [a0 + 16] = 0\n 71699: u8 [a0 + 15] = 0\n 71702: u8 [a0 + 14] = 0\n 71705: u8 [a0 + 13] = 0\n 71708: u8 [a0 + 12] = 0\n 71711: u8 [a0 + 11] = 0\n 71714: u8 [a0 + 10] = 0\n 71717: u8 [a0 + 9] = 0\n 71720: u8 [a0 + 8] = 0\n 71723: u8 [a0 + 7] = 0\n 71726: u8 [a0 + 6] = 0\n 71729: u8 [a0 + 5] = 0\n 71732: u8 [a0 + 3] = 0xa0\n 71737: u8 [a0 + 2] = 0x79\n 71741: u8 [a0 + 1] = 0xc3\n 71746: u8 [a0 + 0] = 0x8\n 71749: s1 = s1 | s0\n 71752: s0 = 0x100000000\n 71762: a1 = 0xfffffffc\n 71772: a2 = u64 [sp + 0x10]\n 71775: a1 = a2 <u a1\n 71778: a2 = u64 [sp + 0x18]\n 71781: a1 = 0 if a2 != 0\n 71783: a1 = 0 if s1 != 0\n 71785: u8 [a0 + 4] = 0\n 71788: jump @926 if a1 == 0\n      : @922 (gas: 4)\n 71792: a0 = u64 [sp + 0x8]\n 71795: i32 a0 = a0 + 0x4\n 71798: a1 = 0x20\n 71801: ra = 842, jump @0\n      : @923 [@dyn 421] (gas: 39)\n 71808: a3 = u64 [sp + 0x10]\n 71811: a2 = u64 [sp + 0x18]\n 71814: u8 [a0 + 31] = 0x20\n 71818: u8 [a0 + 30] = 0\n 71821: u8 [a0 + 29] = 0\n 71824: u8 [a0 + 28] = 0\n 71827: u8 [a0 + 27] = 0\n 71830: u8 [a0 + 26] = 0\n 71833: u8 [a0 + 25] = 0\n 71836: u8 [a0 + 24] = 0\n 71839: u8 [a0 + 23] = 0\n 71842: u8 [a0 + 22] = 0\n 71845: u8 [a0 + 21] = 0\n 71848: u8 [a0 + 20] = 0\n 71851: u8 [a0 + 19] = 0\n 71854: u8 [a0 + 18] = 0\n 71857: u8 [a0 + 17] = 0\n 71860: u8 [a0 + 16] = 0\n 71863: u8 [a0 + 15] = 0\n 71866: u8 [a0 + 14] = 0\n 71869: u8 [a0 + 13] = 0\n 71872: u8 [a0 + 12] = 0\n 71875: u8 [a0 + 11] = 0\n 71878: u8 [a0 + 10] = 0\n 71881: u8 [a0 + 9] = 0\n 71884: u8 [a0 + 8] = 0\n 71887: u8 [a0 + 7] = 0\n 71890: u8 [a0 + 6] = 0\n 71893: u8 [a0 + 5] = 0\n 71896: u8 [a0 + 4] = 0\n 71899: u8 [a0 + 3] = 0\n 71902: u8 [a0 + 2] = 0\n 71905: u8 [a0 + 1] = 0\n 71908: a1 = s0 + 0xffffffffffffffdc\n 71911: a1 = a3 <u a1\n 71914: a1 = 0 if a2 != 0\n 71916: a1 = 0 if s1 != 0\n 71918: u8 [a0 + 0] = 0\n 71920: jump @926 if a1 == 0\n      : @924 (gas: 7)\n 71924: a4 = s1\n 71926: s1 = u64 [sp + 0x8]\n 71929: i32 a0 = s1 + 0x24\n 71932: a1 = 0x20\n 71935: s0 = a3\n 71937: u64 [sp] = a4\n 71939: ra = 844, jump @0\n      : @925 [@dyn 422] (gas: 39)\n 71946: a1 = 0xffffffbc\n 71956: a1 = s0 <u a1\n 71959: u8 [a0 + 31] = 0x20\n 71963: u8 [a0 + 30] = 0\n 71966: u8 [a0 + 29] = 0\n 71969: u8 [a0 + 28] = 0\n 71972: u8 [a0 + 27] = 0\n 71975: u8 [a0 + 26] = 0\n 71978: u8 [a0 + 25] = 0\n 71981: u8 [a0 + 24] = 0\n 71984: u8 [a0 + 23] = 0\n 71987: u8 [a0 + 22] = 0\n 71990: u8 [a0 + 21] = 0\n 71993: u8 [a0 + 20] = 0\n 71996: u8 [a0 + 19] = 0\n 71999: u8 [a0 + 18] = 0\n 72002: u8 [a0 + 17] = 0\n 72005: u8 [a0 + 16] = 0\n 72008: u8 [a0 + 15] = 0\n 72011: u8 [a0 + 14] = 0\n 72014: u8 [a0 + 13] = 0\n 72017: u8 [a0 + 12] = 0\n 72020: u8 [a0 + 11] = 0\n 72023: u8 [a0 + 10] = 0\n 72026: u8 [a0 + 9] = 0\n 72029: u8 [a0 + 8] = 0\n 72032: u8 [a0 + 7] = 0\n 72035: u8 [a0 + 6] = 0\n 72038: u8 [a0 + 5] = 0\n 72041: u8 [a0 + 4] = 0\n 72044: u8 [a0 + 3] = 0\n 72047: u8 [a0 + 2] = 0\n 72050: u8 [a0 + 1] = 0\n 72053: a2 = u64 [sp + 0x18]\n 72056: a1 = 0 if a2 != 0\n 72058: a2 = u64 [sp]\n 72060: a1 = 0 if a2 != 0\n 72062: u8 [a0 + 0] = 0\n 72064: jump @927 if a1 != 0\n      : @926 (gas: 1)\n 72067: trap\n      : @927 (gas: 3)\n 72068: i32 a0 = s1 + 0x44\n 72071: a1 = 0x20\n 72074: ra = 846, jump @0\n      : @928 [@dyn 423] (gas: 41)\n 72081: t1 = 0x64\n 72084: u8 [a0 + 0x1f] = t1\n 72087: u8 [a0 + 30] = 0x65\n 72091: u8 [a0 + 29] = 0x74\n 72095: u8 [a0 + 28] = 0x70\n 72099: u8 [a0 + 27] = 0x65\n 72103: u8 [a0 + 26] = 0x63\n 72107: u8 [a0 + 25] = 0x63\n 72111: t0 = 0x61\n 72114: u8 [a0 + 0x18] = t0\n 72117: u8 [a0 + 23] = 0x20\n 72121: u8 [a0 + 22] = 0x74\n 72125: a4 = s1\n 72127: s1 = 0x6f\n 72130: u8 [a0 + 0x15] = s1\n 72133: u8 [a0 + 20] = 0x6e\n 72137: u8 [a0 + 19] = 0x20\n 72141: u8 [a0 + 18] = 0x48\n 72145: u8 [a0 + 17] = 0x54\n 72149: u8 [a0 + 16] = 0x45\n 72153: u8 [a0 + 15] = 0x20\n 72157: u8 [a0 + 14] = 0x74\n 72161: u8 [a0 + 13] = 0x63\n 72165: u8 [a0 + 12] = 0x65\n 72169: a5 = 0x72\n 72172: u8 [a0 + 0xb] = a5\n 72175: s0 = 0x69\n 72178: u8 [a0 + 0xa] = s0\n 72181: u8 [a0 + 0x9] = t1\n 72184: u8 [a0 + 8] = 0x20\n 72188: u8 [a0 + 7] = 0x3a\n 72192: u8 [a0 + 6] = 0x79\n 72196: u8 [a0 + 0x5] = a5\n 72199: u8 [a0 + 0x4] = s1\n 72202: u8 [a0 + 3] = 0x74\n 72206: u8 [a0 + 2] = 0x63\n 72210: u8 [a0 + 0x1] = t0\n 72213: u8 [a0 + 0] = 0x46\n 72216: a1 = 0x64\n 72219: a0 = a4\n 72221: ra = 848, jump @0\n      : @929 [@dyn 424] (gas: 6)\n 72228: i32 a1 = a0 + 0\n 72230: a0 = 0x1\n 72233: a2 = 0x64\n 72236: ra = 0x352\n 72240: ecalli 14 // 'seal_return'\n 72242: fallthrough\n      : @930 [@dyn 425] (gas: 9)\n 72243: a2 = u64 [a1 + 0x18]\n 72246: a3 = u64 [a1 + 0x10]\n 72249: a4 = u64 [a1 + 0x8]\n 72252: a1 = u64 [a1]\n 72254: u64 [a0 + 0x18] = a2\n 72257: u64 [a0 + 0x10] = a3\n 72260: u64 [a0 + 0x8] = a4\n 72263: u64 [a0] = a1\n 72265: ret\n      : @931 (gas: 16)\n 72267: sp = sp + 0xffffffffffffff20\n 72271: u64 [sp + 0xd8] = ra\n 72275: u64 [sp + 0xd0] = s0\n 72279: u64 [sp + 0xc8] = s1\n 72283: s0 = sp + 0xe0\n 72287: sp = sp & 0xfffffffffffffff0\n 72290: a3 = u64 [a1 + 0x18]\n 72293: a2 = u64 [a1 + 0x10]\n 72296: a4 = u64 [a1 + 0x8]\n 72299: u64 [sp + 0x10] = a2\n 72302: u64 [sp + 0x8] = a3\n 72305: a2 = a2 | a3\n 72308: a3 = a4 <u 0x1\n 72311: a3 = 0 if a2 != 0\n 72313: u64 [sp + 0x38] = a0\n 72316: jump @937 if a3 == 0\n      : @932 (gas: 19)\n 72320: s1 = u64 [a1]\n 72322: a0 = s1 + 0x1f\n 72325: a1 = a0 <u s1\n 72328: u64 [sp + 0x18] = a4\n 72331: a1 = a1 + a4\n 72334: a1 = a1 & 0x1\n 72337: a0 = a0 & 0xffffffffffffffe0\n 72340: a2 = a0 + 0x20\n 72343: a0 = a2 <u a0\n 72346: a3 = a1 + a0\n 72349: a4 = a3 <u a1\n 72352: a4 = a0 if a0 == 0\n 72355: u64 [sp + 152] = 0\n 72359: u64 [sp + 0x80] = a2\n 72363: u64 [sp + 0x88] = a3\n 72367: a0 = sp + 0xa0\n 72371: a1 = sp + 0x80\n 72375: u64 [sp + 0x90] = a4\n 72379: ra = 852, jump @410\n      : @933 [@dyn 426] (gas: 15)\n 72386: a0 = u64 [sp + 0xb8]\n 72390: a2 = u64 [sp + 0xb0]\n 72394: a1 = u64 [sp + 0xa8]\n 72398: a3 = u64 [sp + 0xa0]\n 72402: u64 [sp + 0x28] = a0\n 72405: u64 [sp + 0x20] = a1\n 72408: a0 = a0 | a1\n 72411: a1 = a3 | a2\n 72414: a1 = a1 | a0\n 72417: a1 = a1 >> 0x20\n 72420: u64 [sp + 0x30] = a2\n 72423: a0 = a0 | a2\n 72426: a0 = a0 << 0x20\n 72429: a0 = a0 | a1\n 72432: jump @936 if a0 != 0\n      : @934 (gas: 4)\n 72436: i32 a0 = a3 + 0\n 72438: a1 = 0x20\n 72441: u64 [sp] = a3\n 72443: ra = 854, jump @0\n      : @935 [@dyn 427] (gas: 82)\n 72450: a1 = u64 [sp + 0x8]\n 72453: a1 = reverse a1\n 72455: a2 = u64 [sp + 0x10]\n 72458: a2 = reverse a2\n 72460: a3 = u64 [sp + 0x18]\n 72463: a3 = reverse a3\n 72465: a4 = reverse s1\n 72467: a5 = a4 >> 0x38\n 72470: u8 [a0 + 0x1f] = a5\n 72473: a5 = a4 >> 0x30\n 72476: u8 [a0 + 0x1e] = a5\n 72479: a5 = a4 >> 0x28\n 72482: u8 [a0 + 0x1d] = a5\n 72485: a5 = a4 >> 0x20\n 72488: u8 [a0 + 0x1c] = a5\n 72491: a5 = a4 >> 0x18\n 72494: u8 [a0 + 0x1b] = a5\n 72497: a5 = a4 >> 0x10\n 72500: u8 [a0 + 0x1a] = a5\n 72503: a5 = a4 >> 0x8\n 72506: u8 [a0 + 0x19] = a5\n 72509: u8 [a0 + 0x18] = a4\n 72512: u8 [a0 + 0x10] = a3\n 72515: a4 = a3 >> 0x38\n 72518: u8 [a0 + 0x17] = a4\n 72521: a4 = a3 >> 0x30\n 72524: u8 [a0 + 0x16] = a4\n 72527: a4 = a3 >> 0x28\n 72530: u8 [a0 + 0x15] = a4\n 72533: a4 = a3 >> 0x20\n 72536: u8 [a0 + 0x14] = a4\n 72539: a4 = a3 >> 0x18\n 72542: u8 [a0 + 0x13] = a4\n 72545: a4 = a3 >> 0x10\n 72548: u8 [a0 + 0x12] = a4\n 72551: a3 = a3 >> 0x8\n 72554: u8 [a0 + 0x11] = a3\n 72557: u8 [a0 + 0x8] = a2\n 72560: a3 = a2 >> 0x38\n 72563: u8 [a0 + 0xf] = a3\n 72566: a3 = a2 >> 0x30\n 72569: u8 [a0 + 0xe] = a3\n 72572: a3 = a2 >> 0x28\n 72575: u8 [a0 + 0xd] = a3\n 72578: a3 = a2 >> 0x20\n 72581: u8 [a0 + 0xc] = a3\n 72584: a3 = a2 >> 0x18\n 72587: u8 [a0 + 0xb] = a3\n 72590: a3 = a2 >> 0x10\n 72593: u8 [a0 + 0xa] = a3\n 72596: a2 = a2 >> 0x8\n 72599: u8 [a0 + 0x9] = a2\n 72602: u8 [a0] = a1\n 72604: a2 = a1 >> 0x38\n 72607: u8 [a0 + 0x7] = a2\n 72610: a2 = a1 >> 0x30\n 72613: u8 [a0 + 0x6] = a2\n 72616: a2 = a1 >> 0x28\n 72619: u8 [a0 + 0x5] = a2\n 72622: a2 = a1 >> 0x20\n 72625: u8 [a0 + 0x4] = a2\n 72628: a2 = a1 >> 0x18\n 72631: u8 [a0 + 0x3] = a2\n 72634: a2 = a1 >> 0x10\n 72637: u8 [a0 + 0x2] = a2\n 72640: a1 = a1 >> 0x8\n 72643: u8 [a0 + 0x1] = a1\n 72646: a0 = u64 [sp + 0x38]\n 72649: a1 = u64 [sp]\n 72651: u64 [a0] = a1\n 72653: a1 = u64 [sp + 0x28]\n 72656: u64 [a0 + 0x18] = a1\n 72659: a1 = u64 [sp + 0x20]\n 72662: u64 [a0 + 0x8] = a1\n 72665: a1 = u64 [sp + 0x30]\n 72668: u64 [a0 + 0x10] = a1\n 72671: sp = s0 + 0xffffffffffffff20\n 72675: ra = u64 [sp + 0xd8]\n 72679: s0 = u64 [sp + 0xd0]\n 72683: s1 = u64 [sp + 0xc8]\n 72687: sp = sp + 0xe0\n 72691: ret\n      : @936 (gas: 1)\n 72693: trap\n      : @937 (gas: 8)\n 72694: u64 [sp + 112] = 0\n 72697: u64 [sp + 104] = 0\n 72700: u64 [sp + 96] = 0\n 72703: a0 = 0x4e487b7100000000\n 72713: a1 = sp + 0x60\n 72716: u64 [sp + 0x78] = a0\n 72719: a0 = 0\n 72721: ra = 856, jump @8\n      : @938 [@dyn 428] (gas: 7)\n 72728: u64 [sp + 88] = 0\n 72731: u64 [sp + 80] = 0\n 72734: u64 [sp + 64] = 0x41\n 72738: a0 = 0x4\n 72741: a1 = sp + 0x40\n 72744: u64 [sp + 72] = 0\n 72747: ra = 858, jump @8\n      : @939 [@dyn 429] (gas: 3)\n 72754: a1 = 0x24\n 72757: a0 = 0\n 72759: ra = 860, jump @0\n      : @940 [@dyn 430] (gas: 6)\n 72766: i32 a1 = a0 + 0\n 72768: a0 = 0x1\n 72771: a2 = 0x24\n 72774: ra = 0x35e\n 72778: ecalli 14 // 'seal_return'\n 72780: fallthrough\n      : @941 [@dyn 431] (gas: 6)\n 72781: u64 [a0 + 24] = 0\n 72784: u64 [a0 + 16] = 0\n 72787: u64 [a0 + 8] = 0\n 72790: a1 = 0x60\n 72793: u64 [a0] = a1\n 72795: ret\n      : @942 (gas: 1)\n 72797: jump @951 if a0 == 0\n      : @943 (gas: 9)\n 72801: u64 [sp + 0x20] = s1\n 72804: ecalli 13 // 'return_data_size'\n 72806: u64 [sp + 88] = 0\n 72809: u64 [sp + 80] = 0\n 72812: u64 [sp + 0x40] = a0\n 72815: a0 = sp + 0x60\n 72818: a1 = sp + 0x40\n 72821: u64 [sp + 72] = 0\n 72824: ra = 864, jump @931\n      : @944 [@dyn 432] (gas: 9)\n 72830: a0 = u64 [sp + 0x78]\n 72833: u64 [sp + 0x38] = a0\n 72836: a0 = u64 [sp + 0x70]\n 72839: u64 [sp + 0x30] = a0\n 72842: a0 = u64 [sp + 0x68]\n 72845: u64 [sp + 0x28] = a0\n 72848: s1 = u64 [sp + 0x60]\n 72851: ecalli 13 // 'return_data_size'\n 72853: fallthrough\n      : @945 (gas: 20)\n 72854: a1 = s1 + 0x20\n 72857: u64 [sp + 0x18] = s1\n 72860: a2 = a1 <u s1\n 72863: a4 = u64 [sp + 0x28]\n 72866: a3 = a4 + a2\n 72869: a4 = a3 <u a4\n 72872: a4 = a2 if a2 == 0\n 72875: a2 = u64 [sp + 0x30]\n 72878: a4 = a4 + a2\n 72881: a2 = a4 <u a2\n 72884: a5 = u64 [sp + 0x38]\n 72887: a2 = a2 + a5\n 72890: a5 = a1 | a4\n 72893: a2 = a2 | a3\n 72896: a5 = a5 | a2\n 72899: a5 = a5 >> 0x20\n 72902: a2 = a2 | a4\n 72905: a2 = a2 << 0x20\n 72908: a2 = a2 | a5\n 72911: jump @950 if a2 != 0\n      : @946 (gas: 3)\n 72914: s1 = a0\n 72916: a0 = a0 >> 0x20\n 72919: jump @950 if a0 != 0\n      : @947 (gas: 4)\n 72922: i32 a0 = a1 + 0\n 72924: i32 a1 = s1 + 0\n 72926: u64 [sp + 0x10] = a1\n 72929: ra = 866, jump @0\n      : @948 [@dyn 433] (gas: 6)\n 72936: u32 [sp + 0x80] = s1\n 72940: i32 a0 = a0 + 0\n 72942: i32 a1 = sp + 0x80\n 72946: a2 = 0\n 72948: ecalli 12 // 'return_data_copy'\n 72950: fallthrough\n      : @949 (gas: 8)\n 72951: a0 = i32 [sp + 0x80]\n 72955: s1 = u64 [sp + 0x20]\n 72958: a1 = u64 [sp + 0x38]\n 72961: a2 = u64 [sp + 0x30]\n 72964: a3 = u64 [sp + 0x28]\n 72967: a4 = u64 [sp + 0x18]\n 72970: a5 = u64 [sp + 0x10]\n 72973: jump @952 if a0 >=u a5\n      : @950 (gas: 1)\n 72976: trap\n      : @951 (gas: 5)\n 72977: a3 = 0\n 72979: a2 = 0\n 72981: a1 = 0\n 72983: a4 = 0x60\n 72986: fallthrough\n      : @952 (gas: 10)\n 72987: u64 [s1] = a4\n 72989: u64 [s1 + 0x8] = a3\n 72992: u64 [s1 + 0x10] = a2\n 72995: u64 [s1 + 0x18] = a1\n 72998: sp = s0 + 0xffffffffffffff60\n 73002: ra = u64 [sp + 0x98]\n 73006: s0 = u64 [sp + 0x90]\n 73010: s1 = u64 [sp + 0x88]\n 73014: sp = sp + 0xa0\n 73018: ret\n      : @953 (gas: 17)\n 73020: sp = sp + 0xffffffffffffffa0\n 73023: u64 [sp + 0x58] = ra\n 73026: u64 [sp + 0x50] = s0\n 73029: u64 [sp + 0x48] = s1\n 73032: a3 = u64 [a1 + 0x18]\n 73035: a4 = u64 [a1 + 0x10]\n 73038: a5 = u64 [a1 + 0x8]\n 73041: s1 = u64 [a1]\n 73043: a1 = a5 | a3\n 73046: a2 = s1 | a4\n 73049: a2 = a2 | a1\n 73052: a2 = a2 >> 0x20\n 73055: a1 = a1 | a4\n 73058: a1 = a1 << 0x20\n 73061: a1 = a1 | a2\n 73064: u64 [sp + 0x28] = a0\n 73067: jump @960 if a1 != 0\n      : @954 (gas: 19)\n 73071: a0 = s1 + 0x20\n 73074: u64 [sp + 0x30] = a0\n 73077: a0 = a0 <u s1\n 73080: a1 = a5 + a0\n 73083: u64 [sp + 0x40] = a1\n 73086: u64 [sp + 0x8] = a5\n 73089: s0 = a1 <u a5\n 73092: s0 = a0 if a0 == 0\n 73095: s0 = s0 + a4\n 73098: u64 [sp + 0x10] = a4\n 73101: a0 = s0 <u a4\n 73104: u64 [sp + 0x18] = a3\n 73107: a0 = a0 + a3\n 73110: u64 [sp + 0x38] = a0\n 73113: u64 [sp] = s1\n 73115: i32 a0 = s1 + 0\n 73117: a1 = 0x20\n 73120: s1 = 0x20\n 73123: ra = 868, jump @0\n      : @955 [@dyn 434] (gas: 45)\n 73130: u8 [a0 + 0x1f] = s1\n 73133: a1 = u64 [sp + 0x30]\n 73136: s1 = a1\n 73138: a1 = a1 | s0\n 73141: a2 = u64 [sp + 0x40]\n 73144: a4 = u64 [sp + 0x38]\n 73147: a2 = a2 | a4\n 73150: a1 = a1 | a2\n 73153: a1 = a1 >> 0x20\n 73156: u64 [sp + 0x20] = s0\n 73159: a2 = a2 | s0\n 73162: a2 = a2 << 0x20\n 73165: a1 = a1 | a2\n 73168: u8 [a0 + 30] = 0\n 73171: u8 [a0 + 29] = 0\n 73174: u8 [a0 + 28] = 0\n 73177: u8 [a0 + 27] = 0\n 73180: u8 [a0 + 26] = 0\n 73183: u8 [a0 + 25] = 0\n 73186: u8 [a0 + 24] = 0\n 73189: u8 [a0 + 23] = 0\n 73192: u8 [a0 + 22] = 0\n 73195: u8 [a0 + 21] = 0\n 73198: u8 [a0 + 20] = 0\n 73201: u8 [a0 + 19] = 0\n 73204: u8 [a0 + 18] = 0\n 73207: u8 [a0 + 17] = 0\n 73210: u8 [a0 + 16] = 0\n 73213: u8 [a0 + 15] = 0\n 73216: u8 [a0 + 14] = 0\n 73219: u8 [a0 + 13] = 0\n 73222: u8 [a0 + 12] = 0\n 73225: u8 [a0 + 11] = 0\n 73228: u8 [a0 + 10] = 0\n 73231: u8 [a0 + 9] = 0\n 73234: u8 [a0 + 8] = 0\n 73237: u8 [a0 + 7] = 0\n 73240: u8 [a0 + 6] = 0\n 73243: u8 [a0 + 5] = 0\n 73246: u8 [a0 + 4] = 0\n 73249: u8 [a0 + 3] = 0\n 73252: u8 [a0 + 2] = 0\n 73255: u8 [a0 + 1] = 0\n 73258: u8 [a0 + 0] = 0\n 73260: jump @960 if a1 != 0\n      : @956 (gas: 4)\n 73264: i32 s0 = s1 + 0\n 73266: a1 = 0x20\n 73269: a0 = s0\n 73271: ra = 870, jump @0\n      : @957 [@dyn 435] (gas: 41)\n 73278: u8 [a0 + 31] = 0x1c\n 73282: u8 [a0 + 30] = 0\n 73285: u8 [a0 + 29] = 0\n 73288: u8 [a0 + 28] = 0\n 73291: u8 [a0 + 27] = 0\n 73294: u8 [a0 + 26] = 0\n 73297: u8 [a0 + 25] = 0\n 73300: u8 [a0 + 24] = 0\n 73303: u8 [a0 + 23] = 0\n 73306: u8 [a0 + 22] = 0\n 73309: u8 [a0 + 21] = 0\n 73312: u8 [a0 + 20] = 0\n 73315: u8 [a0 + 19] = 0\n 73318: u8 [a0 + 18] = 0\n 73321: u8 [a0 + 17] = 0\n 73324: u8 [a0 + 16] = 0\n 73327: u8 [a0 + 15] = 0\n 73330: u8 [a0 + 14] = 0\n 73333: u8 [a0 + 13] = 0\n 73336: u8 [a0 + 12] = 0\n 73339: u8 [a0 + 11] = 0\n 73342: u8 [a0 + 10] = 0\n 73345: u8 [a0 + 9] = 0\n 73348: u8 [a0 + 8] = 0\n 73351: u8 [a0 + 7] = 0\n 73354: u8 [a0 + 6] = 0\n 73357: u8 [a0 + 5] = 0\n 73360: u8 [a0 + 4] = 0\n 73363: u8 [a0 + 3] = 0\n 73366: u8 [a0 + 2] = 0\n 73369: u8 [a0 + 1] = 0\n 73372: a1 = u64 [sp + 0x20]\n 73375: a2 = u64 [sp + 0x38]\n 73378: a1 = a1 | a2\n 73381: a2 = 0xffffffe0\n 73391: a2 = s1 <u a2\n 73394: a3 = u64 [sp + 0x40]\n 73397: a2 = 0 if a3 != 0\n 73399: a2 = 0 if a1 != 0\n 73401: u8 [a0 + 0] = 0\n 73403: jump @960 if a2 == 0\n      : @958 (gas: 3)\n 73407: i32 a0 = s0 + 0x20\n 73410: a1 = 0x20\n 73413: ra = 872, jump @0\n      : @959 [@dyn 436] (gas: 55)\n 73420: u8 [a0 + 31] = 0\n 73423: u8 [a0 + 30] = 0\n 73426: u8 [a0 + 29] = 0\n 73429: u8 [a0 + 28] = 0\n 73432: u8 [a0 + 27] = 0x64\n 73436: u8 [a0 + 26] = 0x65\n 73440: u8 [a0 + 25] = 0x6c\n 73444: u8 [a0 + 24] = 0x69\n 73448: u8 [a0 + 23] = 0x61\n 73452: u8 [a0 + 22] = 0x66\n 73456: a5 = 0x20\n 73459: u8 [a0 + 0x15] = a5\n 73462: u8 [a0 + 20] = 0x72\n 73466: u8 [a0 + 19] = 0x65\n 73470: u8 [a0 + 18] = 0x66\n 73474: u8 [a0 + 17] = 0x73\n 73478: u8 [a0 + 16] = 0x6e\n 73482: u8 [a0 + 15] = 0x61\n 73486: u8 [a0 + 14] = 0x72\n 73490: u8 [a0 + 13] = 0x74\n 73494: u8 [a0 + 0xc] = a5\n 73497: u8 [a0 + 11] = 0x48\n 73501: u8 [a0 + 10] = 0x54\n 73505: u8 [a0 + 9] = 0x45\n 73509: u8 [a0 + 0x8] = a5\n 73512: u8 [a0 + 7] = 0x3a\n 73516: u8 [a0 + 6] = 0x79\n 73520: u8 [a0 + 5] = 0x72\n 73524: u8 [a0 + 4] = 0x6f\n 73528: u8 [a0 + 3] = 0x74\n 73532: u8 [a0 + 2] = 0x63\n 73536: u8 [a0 + 1] = 0x61\n 73540: u8 [a0 + 0] = 0x46\n 73543: a1 = u64 [sp]\n 73545: a0 = a1 + 0x60\n 73548: a1 = a0 <u a1\n 73551: a3 = u64 [sp + 0x8]\n 73554: a2 = a3 + a1\n 73557: a3 = a2 <u a3\n 73560: a3 = a1 if a1 == 0\n 73563: a1 = u64 [sp + 0x10]\n 73566: a3 = a3 + a1\n 73569: a1 = a3 <u a1\n 73572: a4 = u64 [sp + 0x18]\n 73575: a1 = a1 + a4\n 73578: a4 = u64 [sp + 0x28]\n 73581: u64 [a4] = a0\n 73583: u64 [a4 + 0x8] = a2\n 73586: u64 [a4 + 0x10] = a3\n 73589: u64 [a4 + 0x18] = a1\n 73592: ra = u64 [sp + 0x58]\n 73595: s0 = u64 [sp + 0x50]\n 73598: s1 = u64 [sp + 0x48]\n 73601: sp = sp + 0x60\n 73604: ret\n      : @960 (gas: 1)\n 73606: trap\n      : @961 (gas: 23)\n 73607: sp = sp + 0xfffffffffffffea0\n 73611: u64 [sp + 0x158] = ra\n 73615: u64 [sp + 0x150] = s0\n 73619: u64 [sp + 0x148] = s1\n 73623: s0 = sp + 0x160\n 73627: sp = sp & 0xffffffffffffffe0\n 73630: a2 = u64 [a1]\n 73632: u64 [sp + 0x58] = a2\n 73635: a2 = u64 [a1 + 0x8]\n 73638: u64 [sp + 0x50] = a2\n 73641: a2 = u64 [a1 + 0x10]\n 73644: u64 [sp + 0x48] = a2\n 73647: a1 = u64 [a1 + 0x18]\n 73650: u64 [sp + 0x40] = a1\n 73653: a1 = u64 [a0]\n 73655: u64 [sp + 0x38] = a1\n 73658: a1 = u64 [a0 + 0x10]\n 73661: u64 [sp + 0x30] = a1\n 73664: a0 = u64 [a0 + 0x8]\n 73667: u64 [sp + 0x28] = a0\n 73670: a0 = 0x40\n 73673: a1 = 0x20\n 73676: ra = 874, jump @0\n      : @962 [@dyn 437] (gas: 97)\n 73683: a1 = u8 [a0 + 0x11]\n 73686: a2 = u8 [a0 + 0x10]\n 73689: a3 = u8 [a0 + 0x12]\n 73692: a4 = u8 [a0 + 0x13]\n 73695: a1 = a1 << 0x8\n 73698: a1 = a1 | a2\n 73701: a3 = a3 << 0x10\n 73704: a4 = a4 << 0x18\n 73707: a3 = a3 | a4\n 73710: a1 = a1 | a3\n 73713: a2 = u8 [a0 + 0x15]\n 73716: a3 = u8 [a0 + 0x14]\n 73719: a4 = u8 [a0 + 0x16]\n 73722: a5 = u8 [a0 + 0x17]\n 73725: a2 = a2 << 0x8\n 73728: a2 = a2 | a3\n 73731: a4 = a4 << 0x10\n 73734: a5 = a5 << 0x18\n 73737: a4 = a4 | a5\n 73740: a2 = a2 | a4\n 73743: a2 = a2 << 0x20\n 73746: t0 = a2 | a1\n 73749: a2 = u8 [a0 + 0x1]\n 73752: a3 = u8 [a0]\n 73754: a4 = u8 [a0 + 0x2]\n 73757: a5 = u8 [a0 + 0x3]\n 73760: a2 = a2 << 0x8\n 73763: a2 = a2 | a3\n 73766: a4 = a4 << 0x10\n 73769: a5 = a5 << 0x18\n 73772: a4 = a4 | a5\n 73775: a2 = a2 | a4\n 73778: a3 = u8 [a0 + 0x5]\n 73781: a4 = u8 [a0 + 0x4]\n 73784: a5 = u8 [a0 + 0x6]\n 73787: s1 = u8 [a0 + 0x7]\n 73790: a3 = a3 << 0x8\n 73793: a3 = a3 | a4\n 73796: a5 = a5 << 0x10\n 73799: s1 = s1 << 0x18\n 73802: a5 = a5 | s1\n 73805: a3 = a3 | a5\n 73808: a3 = a3 << 0x20\n 73811: a2 = a2 | a3\n 73814: a3 = u8 [a0 + 0x19]\n 73817: a4 = u8 [a0 + 0x18]\n 73820: a5 = u8 [a0 + 0x1a]\n 73823: s1 = u8 [a0 + 0x1b]\n 73826: a3 = a3 << 0x8\n 73829: a3 = a3 | a4\n 73832: a5 = a5 << 0x10\n 73835: s1 = s1 << 0x18\n 73838: a5 = a5 | s1\n 73841: a3 = a3 | a5\n 73844: a4 = u8 [a0 + 0x1d]\n 73847: a5 = u8 [a0 + 0x1c]\n 73850: s1 = u8 [a0 + 0x1e]\n 73853: a1 = u8 [a0 + 0x1f]\n 73856: a4 = a4 << 0x8\n 73859: a4 = a4 | a5\n 73862: s1 = s1 << 0x10\n 73865: a1 = a1 << 0x18\n 73868: a1 = a1 | s1\n 73871: a1 = a1 | a4\n 73874: a1 = a1 << 0x20\n 73877: a3 = a3 | a1\n 73880: a1 = u8 [a0 + 0x9]\n 73883: a4 = u8 [a0 + 0x8]\n 73886: a5 = u8 [a0 + 0xa]\n 73889: s1 = u8 [a0 + 0xb]\n 73892: a1 = a1 << 0x8\n 73895: a1 = a1 | a4\n 73898: a5 = a5 << 0x10\n 73901: s1 = s1 << 0x18\n 73904: a5 = a5 | s1\n 73907: a1 = a1 | a5\n 73910: a4 = u8 [a0 + 0xd]\n 73913: a5 = u8 [a0 + 0xc]\n 73916: s1 = u8 [a0 + 0xe]\n 73919: a0 = u8 [a0 + 0xf]\n 73922: a4 = a4 << 0x8\n 73925: a4 = a4 | a5\n 73928: s1 = s1 << 0x10\n 73931: a0 = a0 << 0x18\n 73934: a0 = a0 | s1\n 73937: a0 = a0 | a4\n 73940: a0 = a0 << 0x20\n 73943: a0 = a0 | a1\n 73946: s1 = reverse a0\n 73948: a0 = reverse a3\n 73950: u64 [sp + 0x10] = a0\n 73953: a0 = reverse a2\n 73955: u64 [sp + 0x20] = a0\n 73958: a0 = reverse t0\n 73960: u64 [sp + 0x18] = a0\n 73963: ecalli 11 // 'ref_time_left'\n 73965: fallthrough\n      : @963 (gas: 36)\n 73966: u64 [sp + 0x8] = a0\n 73969: a0 = u64 [sp + 0x28]\n 73972: a0 = reverse a0\n 73974: a1 = u64 [sp + 0x30]\n 73977: a1 = reverse a1\n 73979: a1 = a1 >> 0x20\n 73982: a2 = a0 << 0x20\n 73985: a1 = a1 | a2\n 73988: a0 = a0 >> 0x20\n 73991: a2 = u64 [sp + 0x38]\n 73994: a2 = reverse a2\n 73996: a3 = a2 << 0x20\n 73999: a0 = a0 | a3\n 74002: u64 [sp + 0xc8] = a0\n 74006: u64 [sp + 0xc0] = a1\n 74010: a2 = a2 >> 0x20\n 74013: u32 [sp + 0xd0] = a2\n 74017: a2 = u64 [sp + 0x10]\n 74020: a0 = u64 [sp + 0x40]\n 74023: u64 [sp + 0xf8] = a0\n 74027: a0 = u64 [sp + 0x48]\n 74030: u64 [sp + 0xf0] = a0\n 74034: a0 = u64 [sp + 0x50]\n 74037: u64 [sp + 0xe8] = a0\n 74041: a0 = u64 [sp + 0x20]\n 74044: a1 = u64 [sp + 0x18]\n 74047: a0 = a0 | a1\n 74050: a1 = a2 | s1\n 74053: a1 = a1 | a0\n 74056: a0 = a0 | s1\n 74059: a1 = a1 >> 0x20\n 74062: a0 = a0 << 0x20\n 74065: a0 = a0 | a1\n 74068: a1 = u64 [sp + 0x58]\n 74071: u64 [sp + 0xe0] = a1\n 74075: jump @974 if a0 != 0\n      : @964 (gas: 3)\n 74079: i32 a0 = a2 + 0\n 74081: a1 = 0\n 74083: ra = 876, jump @0\n      : @965 [@dyn 438] (gas: 4)\n 74090: u64 [sp + 0x58] = a0\n 74093: a0 = 0\n 74095: a1 = 0\n 74097: ra = 878, jump @0\n      : @966 [@dyn 439] (gas: 43)\n 74104: u32 [sp + 256] = 0\n 74108: a2 = u64 [sp + 0x8]\n 74111: a1 = a2 >u 0x8fc\n 74115: a2 = -a1\n 74117: u64 [sp + 0x138] = a2\n 74121: u64 [sp + 0x130] = a2\n 74125: u64 [sp + 0x128] = a2\n 74129: u64 [sp + 0x120] = a2\n 74133: a2 = sp + 0xc0\n 74137: a2 = a2 << 0x20\n 74140: a2 = a2 >> 0x20\n 74143: a1 = a1 << 0x23\n 74146: s1 = a1 | a2\n 74149: a1 = sp + 0xe0\n 74153: a1 = a1 << 0x20\n 74156: a1 = a1 >> 0x20\n 74159: a2 = sp + 0x120\n 74163: a2 = a2 << 0x20\n 74166: a3 = a2 | a1\n 74169: a4 = u64 [sp + 0x58]\n 74172: a4 = a4 << 0x20\n 74175: a4 = a4 >> 0x20\n 74178: a0 = a0 << 0x20\n 74181: a0 = a0 >> 0x20\n 74184: a1 = sp + 0x100\n 74188: a1 = a1 << 0x20\n 74191: a5 = a1 | a0\n 74194: a1 = 0xffffffffffffffff\n 74197: a2 = 0xffffffffffffffff\n 74200: a0 = s1\n 74202: ecalli 1 // 'call'\n 74204: s1 = a0\n 74206: a0 = sp + 0xa0\n 74210: ra = 0x370\n 74214: sp = sp + 0xffffffffffffff60\n 74218: u64 [sp + 0x98] = ra\n 74222: u64 [sp + 0x90] = s0\n 74226: u64 [sp + 0x88] = s1\n 74230: s0 = sp + 0xa0\n 74234: sp = sp & 0xffffffffffffffe0\n 74237: s1 = a0\n 74239: ecalli 13 // 'return_data_size'\n 74241: jump @942\n      : @967 [@dyn 440] (gas: 1)\n 74244: jump @969 if s1 != 0\n      : @968 (gas: 6)\n 74247: sp = s0 + 0xfffffffffffffea0\n 74251: ra = u64 [sp + 0x158]\n 74255: s0 = u64 [sp + 0x150]\n 74259: s1 = u64 [sp + 0x148]\n 74263: sp = sp + 0x160\n 74267: ret\n      : @969 (gas: 3)\n 74269: a0 = 0x40\n 74272: a1 = 0x20\n 74275: ra = 882, jump @0\n      : @970 [@dyn 441] (gas: 103)\n 74282: a1 = u8 [a0 + 0x11]\n 74285: a2 = u8 [a0 + 0x10]\n 74288: a3 = u8 [a0 + 0x12]\n 74291: a4 = u8 [a0 + 0x13]\n 74294: a1 = a1 << 0x8\n 74297: a1 = a1 | a2\n 74300: a3 = a3 << 0x10\n 74303: a4 = a4 << 0x18\n 74306: a3 = a3 | a4\n 74309: a1 = a1 | a3\n 74312: a2 = u8 [a0 + 0x15]\n 74315: a3 = u8 [a0 + 0x14]\n 74318: a4 = u8 [a0 + 0x16]\n 74321: a5 = u8 [a0 + 0x17]\n 74324: a2 = a2 << 0x8\n 74327: a2 = a2 | a3\n 74330: a4 = a4 << 0x10\n 74333: a5 = a5 << 0x18\n 74336: a4 = a4 | a5\n 74339: a2 = a2 | a4\n 74342: a2 = a2 << 0x20\n 74345: t0 = a2 | a1\n 74348: a2 = u8 [a0 + 0x1]\n 74351: a3 = u8 [a0]\n 74353: a4 = u8 [a0 + 0x2]\n 74356: a5 = u8 [a0 + 0x3]\n 74359: a2 = a2 << 0x8\n 74362: a2 = a2 | a3\n 74365: a4 = a4 << 0x10\n 74368: a5 = a5 << 0x18\n 74371: a4 = a4 | a5\n 74374: a2 = a2 | a4\n 74377: a3 = u8 [a0 + 0x5]\n 74380: a4 = u8 [a0 + 0x4]\n 74383: a5 = u8 [a0 + 0x6]\n 74386: s1 = u8 [a0 + 0x7]\n 74389: a3 = a3 << 0x8\n 74392: a3 = a3 | a4\n 74395: a5 = a5 << 0x10\n 74398: s1 = s1 << 0x18\n 74401: a5 = a5 | s1\n 74404: a3 = a3 | a5\n 74407: a3 = a3 << 0x20\n 74410: a2 = a2 | a3\n 74413: a3 = u8 [a0 + 0x19]\n 74416: a4 = u8 [a0 + 0x18]\n 74419: a5 = u8 [a0 + 0x1a]\n 74422: s1 = u8 [a0 + 0x1b]\n 74425: a3 = a3 << 0x8\n 74428: a3 = a3 | a4\n 74431: a5 = a5 << 0x10\n 74434: s1 = s1 << 0x18\n 74437: a5 = a5 | s1\n 74440: a3 = a3 | a5\n 74443: a4 = u8 [a0 + 0x1d]\n 74446: a5 = u8 [a0 + 0x1c]\n 74449: s1 = u8 [a0 + 0x1e]\n 74452: a1 = u8 [a0 + 0x1f]\n 74455: a4 = a4 << 0x8\n 74458: a4 = a4 | a5\n 74461: s1 = s1 << 0x10\n 74464: a1 = a1 << 0x18\n 74467: a1 = a1 | s1\n 74470: a1 = a1 | a4\n 74473: a1 = a1 << 0x20\n 74476: a3 = a3 | a1\n 74479: a1 = u8 [a0 + 0x9]\n 74482: a4 = u8 [a0 + 0x8]\n 74485: a5 = u8 [a0 + 0xa]\n 74488: s1 = u8 [a0 + 0xb]\n 74491: a1 = a1 << 0x8\n 74494: a1 = a1 | a4\n 74497: a5 = a5 << 0x10\n 74500: s1 = s1 << 0x18\n 74503: a5 = a5 | s1\n 74506: a1 = a1 | a5\n 74509: a4 = u8 [a0 + 0xd]\n 74512: a5 = u8 [a0 + 0xc]\n 74515: s1 = u8 [a0 + 0xe]\n 74518: a0 = u8 [a0 + 0xf]\n 74521: a4 = a4 << 0x8\n 74524: a4 = a4 | a5\n 74527: s1 = s1 << 0x10\n 74530: a0 = a0 << 0x18\n 74533: a0 = a0 | s1\n 74536: a0 = a0 | a4\n 74539: a0 = a0 << 0x20\n 74542: a0 = a0 | a1\n 74545: s1 = reverse a0\n 74547: a1 = reverse a3\n 74549: a2 = reverse a2\n 74551: a0 = reverse t0\n 74553: u64 [sp + 0x58] = a0\n 74556: u64 [sp + 0x50] = a2\n 74559: a0 = a0 | a2\n 74562: a2 = a1\n 74564: a1 = a1 | s1\n 74567: a1 = a1 | a0\n 74570: a1 = a1 >> 0x20\n 74573: a0 = a0 | s1\n 74576: a0 = a0 << 0x20\n 74579: a0 = a0 | a1\n 74582: jump @974 if a0 != 0\n      : @971 (gas: 5)\n 74586: u64 [sp + 0x48] = a2\n 74589: i32 a0 = a2 + 0\n 74591: a1 = 0x20\n 74594: u64 [sp + 0x40] = a0\n 74597: ra = 884, jump @0\n      : @972 [@dyn 442] (gas: 50)\n 74604: u8 [a0 + 31] = 0\n 74607: u8 [a0 + 30] = 0\n 74610: u8 [a0 + 29] = 0\n 74613: u8 [a0 + 28] = 0\n 74616: u8 [a0 + 27] = 0\n 74619: u8 [a0 + 26] = 0\n 74622: u8 [a0 + 25] = 0\n 74625: u8 [a0 + 24] = 0\n 74628: u8 [a0 + 23] = 0\n 74631: u8 [a0 + 22] = 0\n 74634: u8 [a0 + 21] = 0\n 74637: u8 [a0 + 20] = 0\n 74640: u8 [a0 + 19] = 0\n 74643: u8 [a0 + 18] = 0\n 74646: u8 [a0 + 17] = 0\n 74649: u8 [a0 + 16] = 0\n 74652: u8 [a0 + 15] = 0\n 74655: u8 [a0 + 14] = 0\n 74658: u8 [a0 + 13] = 0\n 74661: u8 [a0 + 12] = 0\n 74664: u8 [a0 + 11] = 0\n 74667: u8 [a0 + 10] = 0\n 74670: u8 [a0 + 9] = 0\n 74673: u8 [a0 + 8] = 0\n 74676: u8 [a0 + 7] = 0\n 74679: u8 [a0 + 6] = 0\n 74682: u8 [a0 + 5] = 0\n 74685: u8 [a0 + 4] = 0\n 74688: u8 [a0 + 3] = 0xa0\n 74693: u8 [a0 + 2] = 0x79\n 74697: u8 [a0 + 1] = 0xc3\n 74702: u8 [a0 + 0] = 0x8\n 74705: a1 = u64 [sp + 0x48]\n 74708: a0 = a1 + 0x4\n 74711: a1 = a0 <u a1\n 74714: a3 = u64 [sp + 0x58]\n 74717: a2 = a3 + a1\n 74720: a3 = a2 <u a3\n 74723: a3 = a1 if a1 == 0\n 74726: a3 = a3 + s1\n 74729: a1 = a3 <u s1\n 74732: a4 = u64 [sp + 0x50]\n 74735: a4 = a4 + a1\n 74738: u64 [sp + 0x68] = a2\n 74741: u64 [sp + 0x60] = a0\n 74744: u64 [sp + 0x70] = a3\n 74747: a0 = sp + 0x80\n 74751: a1 = sp + 0x60\n 74754: u64 [sp + 0x78] = a4\n 74757: ra = 886, jump @953\n      : @973 [@dyn 443] (gas: 30)\n 74763: a0 = u64 [sp + 0x88]\n 74767: t0 = u64 [sp + 0x98]\n 74771: t1 = u64 [sp + 0x80]\n 74775: a3 = u64 [sp + 0x90]\n 74779: a1 = u64 [sp + 0x58]\n 74782: a4 = a0 ^ a1\n 74785: a5 = a0 <u a1\n 74788: t2 = a1\n 74790: a2 = u64 [sp + 0x48]\n 74793: a1 = t1 <u a2\n 74796: a5 = a1 if a4 == 0\n 74799: a4 = a3 - s1\n 74802: a3 = a3 <u s1\n 74805: s1 = u64 [sp + 0x50]\n 74808: s1 = t0 - s1\n 74811: s1 = s1 - a3\n 74814: a3 = a4 <u a5\n 74817: s1 = s1 - a3\n 74820: a4 = a4 - a5\n 74823: a0 = a0 - t2\n 74826: a1 = a0 - a1\n 74829: a0 = t1 - a2\n 74832: a1 = a1 | s1\n 74835: a2 = a0 | a4\n 74838: a2 = a2 | a1\n 74841: a1 = a1 | a4\n 74844: a2 = a2 >> 0x20\n 74847: a1 = a1 << 0x20\n 74850: a1 = a1 | a2\n 74853: jump @975 if a1 == 0\n      : @974 (gas: 1)\n 74856: trap\n      : @975 (gas: 4)\n 74857: i32 s1 = a0 + 0\n 74859: a0 = u64 [sp + 0x40]\n 74862: a1 = s1\n 74864: ra = 888, jump @0\n      : @976 [@dyn 444] (gas: 7)\n 74871: i32 a1 = a0 + 0\n 74873: a0 = 0x1\n 74876: a2 = s1\n 74878: ecalli 14 // 'seal_return'\n 74880: a0 = 0\n 74882: ra = 0x37a\n 74886: jump @10\n      : @977 [export #0: 'call'] (gas: 2)\n 74890: a0 = 0\n 74892: ra = 890, jump @10\n      : @978 [@dyn 445] [export #1: 'deploy'] (gas: 2)\n 74899: a0 = 0x1\n 74902: ra = 892, jump @10\n      : @979 [@dyn 446] (gas: 27)\n 74909: sp = sp + 0xffffffffffffff80\n 74912: u64 [sp + 0x78] = ra\n 74915: u64 [sp + 0x70] = s0\n 74918: u64 [sp + 0x68] = s1\n 74921: s0 = sp + 0x80\n 74925: sp = sp & 0xfffffffffffffff0\n 74928: t0 = u64 [a1]\n 74930: t1 = u64 [a1 + 0x8]\n 74933: t2 = u64 [a1 + 0x10]\n 74936: a1 = u64 [a1 + 0x18]\n 74939: a3 = u64 [a2]\n 74941: a4 = u64 [a2 + 0x8]\n 74944: a5 = u64 [a2 + 0x10]\n 74947: a2 = u64 [a2 + 0x18]\n 74950: s1 = a0\n 74952: u64 [sp + 0x18] = a2\n 74955: u64 [sp + 0x10] = a5\n 74958: u64 [sp + 0x8] = a4\n 74961: u64 [sp] = a3\n 74963: u64 [sp + 0x38] = a1\n 74966: u64 [sp + 0x30] = t2\n 74969: u64 [sp + 0x28] = t1\n 74972: a0 = sp + 0x40\n 74975: a1 = sp + 0x20\n 74978: a2 = sp\n 74980: u64 [sp + 0x20] = t0\n 74983: ra = 894, jump @193\n      : @980 [@dyn 447] (gas: 14)\n 74990: a0 = u64 [sp + 0x50]\n 74993: a1 = u64 [sp + 0x58]\n 74996: a2 = u64 [sp + 0x40]\n 74999: a3 = u64 [sp + 0x48]\n 75002: u64 [s1 + 0x10] = a0\n 75005: u64 [s1 + 0x18] = a1\n 75008: u64 [s1] = a2\n 75010: u64 [s1 + 0x8] = a3\n 75013: sp = s0 + 0xffffffffffffff80\n 75016: ra = u64 [sp + 0x78]\n 75019: s0 = u64 [sp + 0x70]\n 75022: s1 = u64 [sp + 0x68]\n 75025: sp = sp + 0x80\n 75029: ret\n",
						"bytecode": {
							"object": "50564d0000d850010000000000010700c19000c000400380800a3b069ec43869334bd614dfc15219a3f300276ef3057e0064b42729c893e3b5d351d4076f9bac4d79246493b4da24a6aefc7e9c394e92ac55617356247c187da709adb2949dc70b8f3d67436717d4ff3477c9abb31e09a6077a7ccf44b26a4ec28550253778baf5a8c03297136da385032673554343b47ebc15360fdbc187260481251200000000070000000b0000001900000027000000350000003b00000044000000510000005c0000006b000000760000008300000093000000a3000000ae000000c0000000cb0000006164647265737363616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c6572636f64655f73697a656465706f7369745f6576656e746765745f73746f72616765686173685f6b656363616b5f323536696e7374616e74696174657265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051302c18a240463616c6cc19324066465706c6f7906c1fd4e81bf03c117256500004d01005201006f01000302003403004903006d03007903009b0300900400db0400f004002e05005c0500900500f905000406006007008e0700b00700c30700ca0700d60700eb0700590900280a00910a00fa0a002b0c004b0c00f70c00040d00f90d00040e00350f004d0f00590f00880f009e0f00a80f00b60f00f01000c111006f12008712009112009f1200211300271600341600a816004e1800701800a11900b71900871a00941a00f61a00c51b002f1c009d1c00ce1d00e51d00b61e00c41e00562000642000962000a420003121003f21009922000224007525007826009326006328008f2800c429009a2a00a82a00f02a00fe2a00492b00722c00d92d001c2f00ab30008b31009c3300623400a935003637006f3800a43a00b93b00573c009b3c000c3e00963e00ac3e00b93e00fa3e00063f003840005240005f40005042005e4200aa42001443002043005044005d4400e24400754500024600bb4600c946001a47006e48009b4800a94800e34800dc49006f4a00fc4a00274c00bb4c00544d00f84d00994e00e84f00525000fc50003f5200f05200015300e75300db5400505600375700a257004d58003459009f5900825b008d5b00745c00df5c00665d00a95e00a85f007e6000f26000376200de6200f76200036300486400ef64000e6500536600fa6600676700976700dc6700fa67000568001e68002c6800a66800396900c66900f06a00826b00216c00cf6c00b76d00636f007770009070009b7000aa70001b71003271003d71004c7100e97100547200657300a57300657500d975008b7600a97600b47600c97600d776003f7700d977006d7800067900a97900807b00657c007d7d00577e00707f000580007c8100028200cb8200d48300ce84003a8600b48600268800758e00948e00a08e00af8e007d8f00109000889100029200be92006b93004096008b9600f39700349800749900df99009b9a009f9c009c9e00139f00d69f00c2a0002da100b1a200f7a200e3a3004fa40071a5003aa7000da800c8a80012aa00bdaa00ddaa0027ac00d2ac00f2ac003cae00e7ae0053af007aaf0099af00a5af00c1af00d1af0034b00006b100d9b100b3b4005eb60032b80022b90037ba0051ba005dba006cba00a1ba005abb009bbb00b7bc00d1bc00ddbc00ecbc004fbd0065bd00f5bd0051be006bbe0077be0086be00f3be00eac00004c10010c1001fc1006bc10017c2005cc200d8c3006dc400bfc500b4c7009bc80083c900eec90077ca002acc007fcd00c6cd00e5cd00f1cd0000ce00c1ce00dbce00e7ce00f6ce0036cf0089d000f4d0009dd100e3d20097d300a8d3008ed40087d50030d70017d80083d80037da001edb008adb0012dc005add005ade0033df00a8df00f2e0009ee100b8e100c5e1000fe300bbe3002de4005ee400a5e400c4e400d0e400ece400fce40036e500c9e6005de700ebe70017e900ace90047ea00eeea0004ec005ced00c7ed0090ee00f2ef00b7f000c8f000a4f1009df20034f40020f5008cf50011f60057f700f5f70006f800e2f800dbf9002bfb007cfc001afd002bfd000bfe0007ff003200011e01018a0101580301b204015305014e06015f0601f606014e0801ec0801e70901f80901810a01e10b010c0c017a0d01eb0d019d0e01aa0e01f40f01a01001c010010a1201b512012c1301611301091401811401b21401f91401401501871501a61501b21501ce1501de1501191601a61601e317018018010a1901911901241a01331a01c21a01021b01181c01321c013e1c014d1c017e1c01e81c01aa1d013e1e01cc1e01d31f016a21017821010422012a22016c23010b24017724019324019d2401ee24018b791052093b3309010001ae9833c8780883881f8488e0553801000128390a800002ae8a123d088000023308900002c8870732003308900002c88707320000009511d87b10207b15187b161082897b19088289087b1982851082861883773308205010029f6f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a04013d07840002510507501004095010062c029511c07b10387b15307b16289515408411e033074033082050100896fe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a1101821710821818821908821ad49808d4a707d487075207370133074033082050100a02fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cd1fc837833070133090a0e0183666467330850100ebcfc8377330833090a0201390888000251080d330790000383770a0f016467330850101098fc8378330733093300120a0e019511a0fe7b1058017b1550017b164801951560018411e03307403308205010146afc46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617033306840002461702461701460739088400024617064617054617045318048b038317200133080a030181173c015a47bebbf0fa78330800501cde5a4787541cdeb60051470764ee8f01015247b4ee69a259033300169511b0fc7b1048037b1540037b163803951550038411f0380784000249210802492100024921f8017b17f0014921280249212002492110020495173002951810029519f0014921180233009a0028b21c33080050dc195a471557dc195a5147bfbbf0fabf005247b70e790ae902330018951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1128370483888804aa874e0252478f66a3eaab0250101ace3983881607aa876c0252473369d269960233001c951140ff7b10b8007b15b0007b16a8009515c0008411e04911784911704911684911608317600a1128691233001e951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1128531580674921980049219000492188007b1780004921b8004921b0004921a000049517c0009518a000951980004921a800501020f73a8217c0007b17188213c8008214d0008210d8008212e000821ce8008216f000821bf800821a00018218080182191001821718017b17387b19307b18287b1a207b1b587b16507b1c487b12407b10787b14707b1368951760951840951920821a187b1a605010229de50033074033082050102401fa7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851089b00003300269511a0fe7b1058017b1550017b164801951560018411e049213801492130014921280149212001831720010a11289134330028951140ff7b10b8007b15b0007b16a8009515c0008411e04911784911704911684911608317600a1128910581680152081f33002a9511c87b10307b15287b1620330740330820330046032853f833002c9511f87b10330733083300ee002840f8837750102e3bf88378330733093300300a0e019511f07b10087b1564753307403308205010321af87c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b5782100882159511103200821730821838821928821a20d49808d4a707d487075207fe023907840002541723f5028317603308040a038217607b17188217687b17108217707b17088216783308203307501034acf66f688219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989a08787a097879089889387879079889307879069889287879059889207879049889187879039889107879029889087879017878330720330820501036ddf546171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750103874f583778319603308400a09821778821870821968821a606f776f886f996faa7b1a587b19507b18487b17404911784911704911684911604821800020831840831a60831b80003309ff33070a088217707b17088217687b17108217607b171833074033082050103a0bf57c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850103cdaf3837833070133090a0e0182180897882098862083777b170833082050103ebaf36f688219106f99821a186faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c3308208217085010400ef3837833092033073300420a0e01828918828a10828b0882887b79187b7a107b7b087b783200821770821878821968821a60d49808d4a707d487075207fb013907840002541743f201831780003308040a03821780007b1718821788007b1710821790007b170882169800831780003308240a03821780008218880082199000821a98007b1a387b19307b18287b17207b16588217087b17508217107b17489517409518208219187b19403300449511a0fb7b1058047b1550047b164804951560048411e08289187b1968018289107b1960018289087b19700182887b18780182787b1858018278087b1850018278107b184801827618330820330733000a01280af233074033082050104601f27c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081e0033073308501048d0f0837833070133090a0e837733004a28bdf0837750104ab8f083783307330933004c0a0e019511b07b10487b15409515508411f0491130491128491120140700000000717b484e9518207b1738330750104ebdf04911184911104901323307046418491108501050a7f033082433075010525df083783307013309243300540a0e019511a07b10587b15507b16489515608411e06476828718828910828a0882887b17187b19107b1a087b18491138491130491128491120481140208318831a20831b403309ff33070a08821738821830821928821a207b67187b68107b69087b6a9551a082105882155082164895116032009511e0fe7b1018017b1510017b160801951520018411e07b174082977b17488297087b17508297107b1758829618828b18828a1082890882877b1b187b1bb8007b1a207b1ab0007b19287b19a8007b17307b17a0004921f8004921f0004921e8004921e0004821c000208318a000831ae000831bc0003309ff33070a08018217f8008212e0008219f000821ae800d3670b7b1638d87608821758d8970cdbb80c821850d38a03d8a80a821848d82808db3a08d39707d4b707db7c0851086801330820330750105615ef8218186f888219206f99821a286faa821b306fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820330750105844ee83778319e0003308200a098217e0008218e8008219f800821af0006f726f886f996faa821b50c8ab0b821c48c89c0cd89c09c89b0bd3ab06d8ab0ada690a821958c88909c89a0ad89a06821738c82707d88908c88707c867078218404918384918304918284918207b8c7b8b087b8a107b87189551e0fe821018018215100182160801951120013200492190004921880049218000140700000000717b484e951880007b179800330750105ad6ed4911784911704911603233070495186049116850105cbeed330824330750105e74ed83783307013309243300600a0e01828918828a10828b0882887b79187b7a107b7b087b7832008213088212821718018218000182141001821a0801d3670bd87607821910d8490cdbb70cd32a07d8a20ad88308db7a08d39407d4b707db7c08510830037b136049219800492190004921880049218000017b12687b19709517a000951880009519607b16785010620bfd8217d8007b17108217d0007b17088216c8008217c0007b178217b8008218b0008219a800821aa0007b17f8007b18f0007b19e8007b1ae0004921180149211001492108014921000148212001208318e000831a0001831b20013309ff33070a088212000182190801821a1001821498473d976b03d47b0b98663d821808978703d4760698873d821c1097cc03d47c0c9747038eb888770001857301dbb8038ec88e67dbc807821b1801d46c0cdbc70346115f46115e46115d46115c46115b46115a46115946115846115746115646115546115446115346115246115146115046114f46114e46114d46114c46114b46114a461149461148461147461146461145461144461143461142461141461140781b38781a3078192878122098b73878173f98b73078173e98b72878173d98b72078173c98b71878173b98b71078173a98bb08781b3998a73878173798a73078173698a72878173598a72078173498a71878173398a71078173298aa08781a3198973878172f98973078172e98972878172d98972078172c98971878172b98971078172a98990878192998273878172798273078172698272878172598272078172498271878172398271078172298270878172184481f951720c878087c87197c89187c8a1a7c8b1b977708d4970797aa1097bb18d4ba0ad4a7077c891d7c8a1c7c8b1e7c8c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d479027c87117c8a107c8b127c8c13977708d4a70797bb1097cc18d4cb0bd4b7077c8a157c8b147c8c167c861797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d47a0a7c87097c8b087c8c0a7c860b977708d4b70797cc10976618d46c0cd4c7077c8b0d7c8c0c7c860e7c890f97bb08d4cb0b976610979918d46909d4b909979920d4790b7c87017c897c8c027c8603977708d4970797cc10976618d46c0cd4c7077c89057c8c047c86067c8807979908d4c909976610978818d46808d49808978820d487079437943b943a94328218187b82187b8a107b8b087b879551c0fe8210380182153001821628019511400132003307501064dee9837833070133093300660a0e019511a87b10507b15487b1640828a10828618828c088285d46c0bd4a508d4b808988820d4ab0b97bb20d4b8087b1738520830018297187b178297107b17088297087b171082977b17189557207b1730d85707c87c087b1828d8c808da7708c8a8087b1820d8a807c8760683573308205010685de982186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217388218307b788218287b78088218207b78107b7618821050821548821640951158320000821770821878821968821a60d49808d4a707d487075207ef013907840002541723e601831780003308040a03821980008217880082189000821a98007b1a387b18307b17289517409518207b192033006a9511c0fe7b1038017b1530017b162801951540018411e07b171882877b17088287087b178287107b17108286184921f8004921f0004921e8004921e000014921180149211001492108014921000148212001208318e000831a0001831b20013309ff33070a08286cfa8217587b178217507b17088217487b17108217407b171833074033082050106c95e77c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850106e64e6837833070133090a0e01837633082064675010704ee682186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780133082064675010727ee5837833092033073300740a0e01828918828a10828b0882887b79187b7a107b7b087b783200821730821838821928821a20d49808d4a707d48707520704033907840002541723fb028317603308040a038217607b17188217687b17108217707b170882167833082033075010760fe56f688219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989a08787a09787908988938787907988930787906988928787905988920787904988918787903988910787902988908787901787833072033082050107840e446171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750107ad6e383778319603308400a09821778821870821968821a606f776f886f996faa7b1a587b19507b18487b17404911784911704911684911604821800020831840831a60831b80003309ff33070a088217787b178217707b17088217687b17108217607b171833074033082050107c68e37c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850107e37e2837833070133090a0e01837633082064675020800021e282186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780133082064675020820050e183783309203307330084000a0e01951160ff7b1098007b1590007b1688009515a0008411e0828b829608828008829395ba1f7b1b58d8ba02c8200c7b1340d83a03d36c0a7b1648d86c0bdaa30b828410d80c0ada220a829218828318829610c84a0ad84a08c83808d32809d92808d86a0cda9c08d36a0ad4a909db980b510b19017b12287b16307b1738821758d447077b1318d43008d487079877207b1420d44808978820d487075207ed0064068118588317600a03018217788218708213687b1750d48707883a01947a510acb00821960821758957b20d87b07c876007b1b10c89b0b7b1958d89b02c8030cc82c0cd33c09d83c0ada920ad86009da7709821720c89704d87406821718c86707821648d36c09d8c60c821640d8b60bdb9c0bc84809d8890c8216507b1748c87606c86c0cc89a0ad89a09c8c909821628d3690cd89602821930d8a906dbc206d3a909d4c909db960b520b408219388217587b97208217107b977b93287b90087b98307b94108217507b97388217487b9718955160ff8210980082159000821688009511a0003200003307330850208600b0df83783307013309330088000a0e0182781082771814090000000001000000d38909d479099888208888019478939851080532009511f87b10330750208a0070df8378330701330933008c000a0e019511c07b10387b15307b16289515408411e0828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b9095209506476838883170a030182171082181814090000000001000000d37909d48909987a2088aa01948a939a510a258219821a087b697b6a087b67107b68189551c08210388215308216289511403200003307330850208e00d5de83783307013309330090000a0e019511c0fc7b1038037b1530037b162803951540038411e0829608828408829c828a829210d3460bd84600d8ac03dab3007b16f000c9460bc93b0b7b1ce0007b1a1801c9ac0c88cca00085cc018283108eb6dbb60c829b18828618c93208c90809d808007b12e800d8320a64687b1bd800c96b0bc9ab0bc90b0b8fb68e9adbb60ad4b909db9a0c510ca904647682191801d439077b1410017b180001d48408d487079877207b130801d43808978820d4870752077d0483988317a0027b18f8000a03018212b8028218b0028219a802d4280a889b0194ab510b5904821aa002821b1801c8ab0bd8ab0a821c1001c89c0cc8ac0cd39c07d89c09da7a0982170801c88707c87909d8790ad8870782180001c88202c82707c87a0a8217e0007b1720028217f0007b1728027b1b40028217e8007b1730028217d8007b1738027b1c48027b1950029517600295184002951920027b1a58025020920031fc8217080182190001d47909140700000000010000007b17c8001407e0ffffff0000000082181801d878078218100194877b19d000949751079e03821798027b17a800821790027b178800821788027b17b000821780027b179000821778027b17b800821770027b179800821768027b17c000821760027b17a0008217f800837820831700030a03018217c8009577c082181801d878078218100194878218d000948751073203821718037b1778821710037b1768821708037b178000821700037b17708217f8008378408317c0020a03018212d8028218d0028219c802d4280a889b0194ab510bf002821ac002821b1801c8ab0bd8ab0a821c1001c89c0cc8ac0cd39c07d89c09da7a0982170801c88707c87909d8790ad8870782180001c88202c82707c87a0a8217e0007b17a0018217f0007b17a8017b1bc0018217e8007b17b0018217d8007b17b8017b1cc8017b19d0019517e0019518c0019519a0017b1ad80150209400c8fa140700000000010000007b17c8001407a0ffffff0000000082181801d878078218100194878218d000948751074002821718027b1748821710027b1728821708027b1750821700027b17308217f8017b17588217f0017b17388217e8017b17608217e0017b17408217f800837860831700030a030182191003821a18038217c800d39707d4a70798982088880194a893785108f7017b1a207b19c800140780ffffff0000000082181801d878078218100194878218d00094875107b201821708037b17d000821700037b17188217f800837880008317e0020a03018212f8028218f0028219e802d4280a889b0194ab510b7d01821ae002821b1801c8ab0bd8ab0a821c1001c89c0cc8ac0cd39c07d89c09da7a0982170801c88707c87909d8790ad8870782180001c88202c82707c87a0a8217e0007b1720018217f0007b1728017b1b40018217e8007b1730018217d8007b1738017b1c48017b1950019517600195184001951920017b1a58015020960055f9821268018213600182197801821a7001821b9001821c980182178001821888017b6bf0007b6cf8007b67e0007b68e8007b6ad0007b69d8007b63c0007b62c8008217c8007b67b0008217207b67b8008217187b67a0008217d0007b67a8008217287b6790008217487b6798008217307b6780008217507b6788008217387b67708217587b67788217407b67608217607b67688217687b67508217787b67588217707b6740821780007b6748821788007b67308217a8007b6738821790007b67208217b0007b6728821798007b67108217b8007b67188217a0007b678217c0007b67089551c0fc8210380382153003821628039511400332000033073308502098008ed9837833070133090a0e3307330098002879d93307330098002870d9821730027b17c800821738027b17c000821740027b17b800821748027b17b000821750027b17a800821758027b17a000821760027b179800821768027b179000821770027b178800821778027b178000821780027b1778821788027b1770821790027b1768821798027b17608217a0027b17588217a8027b17508217b0027b17488217b8027b17408217c0027b17388217c8027b17308217d0027b17288217d8027b17208217e0027b17188214e8028213f0028212f802821c0003821b0803821a10038219180382182003821728039510d0007b10109516f0007b1608951610017b167b17e8007b18e0007b19d8007b1ad0007b1b08017b1c00017b12f8007b13f0007b1428018217187b1720018217207b1718018217287b1710018217307b1748018217387b1740018217407b1738018217487b1730018217507b1768018217587b1760018217607b1758018217687b1750018217707b1788018217787b178001821780007b177801821788007b177001821790007b17a801821798007b17a0018217a0007b1798018217a8007b1790018217b0007b17c8018217b8007b17c0018217c0007b17b8019517d0019518b00195199001951a7001951b5001951c30018216c8007b16b00150209c00066c8217e8017b17b0008217e0017b17b8008217d8017b17c0008217d0017b17c80033074033082050209e0077d77c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851080400837633082064675020a00042d68218b0006f888219b8006f99821ac0006faa821bc8006fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780133082064675020a2006cd5837833092033073300a4000a0e01827218828318827b10827c088289088274828a828810d3c907d8c909d84a0adb790ac9b807d8a707d8b808c92309c98909c9790957090532009511f87b10330733085020a60016d5837833070133093300a8000a0e01828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b9095209f9009511d87b10207b15187b16108275188276108279087b1982777b170883873308205020aa00bdd46f586f69821a6faa821b086fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018210208215188216109511283200009511b07b10487b15407b1638828b10828a18828c0882857b1a287b1c20d4ac08d4b50ad48a0a98aa207b1b30d4b808978820d4a8087b1718520822018297187b178296108297087b170882977b171083573308205020ac0094d382186f886f69821a086faa821b106fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801955720d85708821a20c88a09d8a90ada880a821830c88a0ad88a08821b28c8b808821b187bb77bb9087bba107bb8188210488215408216389511503200009511b0fe7b1048017b1540017b163801828b10828a18828c0882857b1cf0007b1a3001d4ac08d4b50ad48a0a98aa20d4b808978820d4a80852086b057b1be8007b178297187b17100182961082980882977b1718017b15d800835764853308205020ae002dd282121801d462087b15080182191001d45909d498089888207b160001d46909979920d49808520818057c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b1820017c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b1828017c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d489057c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7707979908d4a90997bb10977718d4b707d49707977720d4870683273308205020b000ead08219280178791098583878780f98583078780e98582878780d98582078780c98581878780b98581078780a9858087878097875089868387878079868307878069868287878059868207878049868187878039868107878029868087878017876821a2001787a18989838787817989830787816989828787815989820787814989818787813989810787812989808649b78781198a83878781f98a83078781e98a82878781d98a82078781c98a81878781b98a81078781a98a80878781982171801957320d8730964a7821a0801c89a04d8a40ada990a821c0001c8ac00d4b60a7b15d000d4750bd4ab0bd8c00a82121001c8a20c7b1cf800510bdf02330733084921e00033096f6a7b1a20821ad0006faa7b1a18821a28016faa7b1a10821a20016faa7b1a08140be0ffffff000000007b1b288212e800821af0008215d800017b19c8007b18d0007b17d800821b3001d4b20b821628d8650c7b1af00094ac94bc8217f8007b17c0007b10b8007b14b0007b132801510c85027b12e8009557207b17200183773308205020b2005bcf8218000182191001d4980882191801d86909821a080194a994895109510282182001d858098215f000c895087b181801d85808da99087c790c7b1908017c790d7b1900017c790e7b19f8007c790f7b19f0007c79107b19a8007c79117b19a0007c79127b1998007c79137b1990007c79147b1988007c79157b1980007c79167b19787c79177b19707c79187b19687c79197b19607c791a7b19587c791b7b19507c791c7b19487c791d7b19407c791e7b19387c771f7b17308216e800c868087b181001d8680782183001c878087b1830018215280183573308205020b4007bce82183078781f82183878781e82184078781d82184878781c82185078781b82185878781a821860787819821868787818821870787817821878787816821880007878158218880078781482189000787813821898007878128218a0007878118218a8007878108218f00078780f8218f80078780e8218000178780d8218080178780c46170b46170a46170946170846170746170646170546170446170346170246170146078213d8009533018837018214d000c87404d44307887b018217e000c87b0bd87b078210c800c87000821708d87307821910d39408d89409da8709821718d87b06821a20d3a008d8a00cda860cd3b707d478089557207b17f000da890cd857098216b000c896077b17e800d8670ada990a8218b800c88a0a7b1ad800d88a0a8217c000c87a0a7b1af8007b1be00082152001821a180182121001821928017b1918017b1608017b1800017b17100164378213f00064488214e80064098210d800520c6dfd821b7bb37bb4087bb0108217f8007bb718821048018215400182163801951150013200009511a0fd7b1058027b1550027b164802951560028411f0828c18828610828b0882827b1b407b1c48d4cb08d4620bd48b0b98bb207b1638d46808978820d4b8087b17285208930882a7187b170882a7107b171082a7087b171882a77b17208297187b17b8018297107b17c8018297087b17c001829683273308207b177b12305020b6006acc46171f40821bc801d4b6088219b801821cc001d4c909d49808988820d4b909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208d007646a8217309578407b18a801d87807821840c878097b19a001d88908da7708821738c88706d87607821848c887077b1798017b1a700183a73308205020b800a4cb8212a801d462088219a001821a9801d4a909d498089888207b169001d46909979920d49808520866077c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b18d8017c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b18d0017c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b1888017c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7707979908d4a90997bb10977718d4b707d49707977720d4870683273308205020ba005dca821bd80182148801821ad001787a1098483878780f98483078780e98482878780d98482078780c98481878780b98481078780a9848087878097874089868387878079868307878069868287878059868207878049868187878039868107878029868087878017876787b1898a83878781798a83078781698a82878781598a82078781498a81878781398a81078781298a80878781198b83878781f98b83078781e98b82878781d98b82078781c98b81878781b98b81078781a98b8087878198217309578607b18b001d87807821840c878096492d88908da7708821938c889037b166801d4a607d4b408d48707d89308821948c889005107db0364b6330b330c4921780149218001821768016f777b17686f477b17606fa77b17586f677b17501407e0ffffff000000007b1788018216b8018217c8018219c001821a7001017b1c68017b1b70017b17c801d4670782188801d88a087b19c001949894787b1060017b1358017b1250018217b0017b17d8015108d3047b16b80195a7207b17d001837733082064a65020bc00d0c88218900182199801d498088219a801821a8801d8a909821aa00194a99489510999048218d001d868098218c001c8980a7b1aa801d88a08da99087c797b19c0017c79017b19b0017c79027b1998017c79037b1990017c79047b1948017c79057b1940017c79067b1938017c79077b1930017c79087b1928017c79097b1920017c790a7b1918017c790b7b1910017c790c7b1908017c790d7b1900017c790e7b19f8007c790f7b19f0007c79107b19e8007c79117b19e0007c79127b19d8007c79137b19d0007c79147b19c8007c79157b19c0007c79167b19b8007c79177b19b0007c79187b19a8007c79197b19a0007c791a7b1998007c791b7b1990007c791c7b1988007c791d7b1980007c791e7b19787c771f7b17708217c801c878087b18a001d878078216b801c876068117d8013308205020be0097c782187078781f82187878781e8218800078781d8218880078781c8218900078781b8218980078781a8218a0007878198218a8007878188218b0007878178218b8007878168218c0007878158218c8007878148218d0007878138218d8007878128218e0007878118218e8007878108218f00078780f8218f80078780e8218000178780d8218080178780c8218100178780b8218180178780a82182001787809821828017878088218300178780782183801787806821840017878058218480178780482189001787803821898017878028218b0017878018218c00178788210700195000188070182136801c87303d4300788770182187801c88707d88708821c8001c88c0c821850d88008821a58d3a309d8a30ada980a821960d89702821868d38c0b7b1c8001d88c08dab208d37909d4b909da9a08821ad80195a9207b19b001d8a90982125001c8920a7b1ac801d82a0ada990a821c5801c8ca0a7b1ac001d8ca09821b6001c8b9097b19b8017b177801821ad0018219a8018217a0018214d8017b14a8017b12a0018212c8017b1c90017b1b9801640b8210b801643c8213c0015208d7fc821738821948d479091408e0ffffff00000000821a30d88a08821640946894985108b801821bb001d8ab0cd36208d86209da8c09c97304c994087b18d801d89408d87309c89808821748c97009c989097b19a801c96208c9c8087b18d001c9ab06821728204921d0014921d8014921a80133066082177b12c8017b13c0017b10b801018377203308205020c00062c58218a8016f888219d8016f99821ad0016faa6f6b98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217b8017b17f8018217c0017b17f0018217c8017b17e8018217b0017b17e0018217087b1718028217107b1710028217187b17080295172002951800029519e001821a207b1a00025020c200c0f1821730028218380282192002821a2802821b287bb7107bb8187bb97bba089551a0fd82105802821550028216480295116002320000821730018218380182192801821a2001d49808d4a707d487075207850239078400025417037c029517e0003300c4009511c0fc7b1038037b1530037b162803951540038411e07b17084921b8024921b0024921a002019517c0029518a0024921a8023300500228cd798217e0007b17588217e8007b17508217f0007b17488217f8007b1740821700017b1738821708017b1730821710017b1728821718017b17203307403308205020c6006bc37c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f7b7b1b086faa7b1a106f987b18186f268217207b17788217287b17708217307b17688217387b17608217407b1798008217487b1790008217507b1788008217587b1780007b16b8007b18b0007b1aa8009517c0009518a00095198000951a607b1ba0005020c80011f5821b108219087b1658d46b07821618d46908d47808988820d46707977720d4870752075e8217c8008218d8007b18508213c0008218d000d3b704d8b70cd89300da400cc9680ac9ca04d8ca02d8680a821858821c50c98c0cc9ac0cc92c0cc9b707c90707c99306d4c707d44608d47808d44707988820977720d4870751071800330733085020ca0070c1837833070133090a0e018397836664685020cc005ac18378330764693300ce000a0e019511a07b10587b15509515608411e0390784000254172361018317203308040a03821820821728821930821a387b1a187b19107b170864177b185020d0000390003307403308205020d20000c17c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851082000330733085020d400cebf837833070133090a0e83773300d60028b9bf83775020d600b4bf8378330733093300d8000a0e01828910828a18828b088288d4ba0ad49808d4a8088e884917184917104917087b783200951160ff7b1098007b1590007b1688009515a0008411e0828210828c08829a088284829b7b1b40829010d3ca03d8ca06d84b0b7b1b38da3b068283188298187b1830c92009c969087b1848d869087b1258d8200b7b1350821930c93909c9b909c98909c9ca08821a38c9a808821a40c94a0a8e8b88aa6085aa01db8b0a8f968218488e8bdb960bd49808db8b0a510a37016476821958d494077b1c48821850d4c808d48707987720d49808978820d487075207120183488317607b18387b14400a0301821758821850d48709140700000000010000007b17501407e0ffffff00000000821840d8780782184894877b195894975107d0008217787b17308217707b17288217687b17188217607b17208217388378208317600a03018217509577c0821840d8780782184894878218589487510792008217787b17588217707b17508217687b17408217607b17488217388378408317600a0301821778821870821960821a68d4780b889c0294ac94bc510c557b6a487b69408219407b69288219487b69208219187b69088219207b697b68508218507b68308218287b68107b67588217587b67388217307b6718955160ff8210980082159000821688009511a000320000330733085020da00b6bd837833070133093300dc000a0e019511d0fe7b1028017b1520017b161801951530018411f0380784000249218800492180004911787b17704921a8004921a00049219000049517b00095189000951970492198005020de00defd8217b0007b17088213b8008214c0008210c8008212d000821cd800821be000821ae8008218f0008216f80082190001821708017b17287b19207b16187b18107b1a487b1b407b1c387b12307b10687b14607b1358951750951830951910821a087b1a505020e00083a8003307403308205020e200e6bc7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a8085108040083775020e400b6bb8378330733093300e6000a0e01828918828a10828b0882887b79187b7a107b7b087b7832009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520816029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020e80024bb78761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085601836533082064575020ea0091ba46171f1846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109c8008357203308205020ec0004ba46171f46171e46171d46171c46171b46171a461719461718461717654617166346171569461714764617137246171265461711734617102046170f6e46170e7746170d6f46170c6e330c6b787c0b46170a6e46170975461708204617073a46170679461705724617046f4617037446170263461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb818821058821550821648951160320000837833070133093300f0000a0e018289828218828b08828810959c1fd89c09c89b0ad8ba0bda990bc88b0bd88b08c8280884cce07b7c7b7a087b7b107b781832009511c07b10387b15307b16289515408411e03307403308205020f200ecb87c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa77b17086f977b17186f277b17100a0d01821a08821818821910d49808d46a09d48909989920d46808978820d4980852083a647698772052073283a783687b18187b17105020f40098b77a1620837783182033090a0c01811720821818ac870c0a0d0198782051080400837682171064685020f6006bb7837833070164693300f8000a0e01827810827918827a088277d4a909d4870ad49a0a98aa20d49808978820d4a8085208a5009511f07b10087b1583773308203305205020fa0023b746171f46171e7246171d6546171c6446171b6946171a7633096f78791946171872461717707875163302747872157879144617136e787512461711734617106978750f46170e7246170d6546170c6c46170b6c330a61787a0a330b63787b097875084617073a330c79787c0646170572787904787203787b02787a01330846787882100882159511103200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b172852081b029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020fc002ab678761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085b01836533082064575020fe0097b546171f1f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109cd00835720330820502000010ab546171c6446171a76461717704617136e4617117346171b694617106946171d6546170d6546170c6c46170b6c46171f461716204617122046170f20461708204617073a4617067946171e724617187246170e72461705724617196f4617146f4617046f4617157446170374461709634617026346170a61461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b17205208af029567207b1738d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17307b16836733082033062050200201dfb378761f821838d45808821940821a30d4a909d49808988820d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208f401645682153883573308207b1728502004014bb346171f2346171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821830d48609140600000000010000001408e0ffffff00000000d8850864958219409498945846075108570182172883772033082050200601b2b246171e6c46171c624617196b46170e6646170d6646170c754617167346170b734617116946170f694617096946171b2046171520461708204617073a46170679461705724617046f46171774461714744617037446171f6146171d6146171861461701614607469568c0821938d8890846171a65821940949833066e78761346171265945833056378751078760a7875025108b300821728837740330820502008010eb246171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702657875017876821895878000d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b207bb77bb9087bba107bb8188210588215508216489511603200006f68821948016f99821a50016faa821b58016fbb787b18787a10787908787898bc387b1c3801787c1f98bc307b1c3001787c1e98bc287b1c2801787c1d98bc207b1c2001787c1c98bc187b1c1801787c1b98bc107b1c1001787c1a7b1b400198bb087b1b0801787b1998ab387b1b0001787b1798ab307b1bf800787b1698ab287b1bf000787b1598ab207b1be800787b1498ab187b1be000787b1398ab107b1bd800787b127b1a480198aa087b1ad000787a11989a387b1ac800787a0f989a307b1ac000787a0e989a287b1ab800787a0d989a207b1ab000787a0c989a187b1aa800787a0b989a107b1aa000787a0a7b1950019899087b1998007879099889387b1990007879079889307b1988007879069889287b1980007879059889207b19787879049889187b19707879039889107b19687879027b1858019888087b186078780133072033082050200c011eb046171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750200e01b4af8377831900043308400a09821718048218100482190804821a00046f776f886f996faa7b1ad8037b19d0037b18c8037b17c003492118044921100449210804492100044821e003208318c003831a0004831be0033309ff33070a08018217100482190804821800047b17509777209877207b18587b1948d49808d48707520706281410831700030a05801710037b1740821708037b1738821700037b1730330740330820502010010aaf7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f7b6faa6f976f287b17207b1818d48707d4ba08d478089888207b1b28d4b707977720d487075107062830157b1a1083a6330820646750201201c7ad46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617038300461702484617015d4607080a0b8217486f779778208219506f99989920d498088219586f99979a20987720d4a7079899207b1728037b1820037a1930034921580349215003492148034921400333080464675020140116ad7b17583308207b165064675020160105ad4821600320492198034921900349218803492180039518200397882098882014090000000018000000d498069518400397882098882095198003979920d4890a82185897882098882014090000000004000000d4980b97772098772095186003978820d4780c3308ff3309ff64670a0101510706287c0f0a0d01330820ae87080a0d647801330c821a28821b2082191082161895871f7b1848d887084911588488018477e0c879097b1928d87907c88606c87606d38609d88608da9708c8a808d8a807c8b7077b18207b1718d487078868019478520806289913330740330820502018011fac8218186f888219206f996f6a821b286fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808821c588ec9821a4888aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b0628911233082082175050201a012bab7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d489097c78017c7a7c7b027c7c03978808d4a80897bb1097cc18d4cb0bd4b8087c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a8086f826f99140a0000000001000000d39a0ad42a0a989b2088bb01942b93ab520b0628de117c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78117c7b107c7c127c7613978808d4b80897cc10976618d46c0cd4c8087c7b157c7c147c76167c771797bb08d4cb0b976610977718d46707d4b707977720d487076f776fa8821a306faa97ab20821c386fc6986c20d4cb0b976620821c406fcc98cc20d46c0c98aa20d3a909d3c808d49808d3b707d42707d487075207b70c33082033062050201c01b6a9821848017878108218c80078780f8218c00078780e8218b80078780d8218b00078780c8218a80078780b8218a00078780a821898007878098218500178780882189000787807821888007878068218800078780582187878780482187078780382186878780282186078780182185801787882184001787818821800017878178218f8007878168218f0007878158218e8007878148218e0007878138218d8007878128218d0007878118218380178781f8218300178781e8218280178781d8218200178781c8218180178781b8218100178781a8218080178781933072033082050201e01cfa846171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020200164a88377831900043308400a09821718048218100482190804821a00046f776f886f996faa7b1ad8037b19d0037b18c8037b17c003492118044921100449210804492100047a16e0038318c003831a0004831be0033309ff33070a0801821718048218000482191004821a0804821c6801d3c70bd8c70782166001d8690cdbb70c82177001d37a02d87a0a82177801d87808db2a08d36907d4b707db7c085208c40c330820330750202201b9a7821848017878108218c80078780f8218c00078780e8218b80078780d8218b00078780c8218a80078780b8218a00078780a821898007878098218500178780882189000787807821888007878068218800078780582187878780482187078780382186878780282186078780182185801787882184001787818821800017878178218f8007878168218f0007878158218e8007878148218e0007878138218d8007878128218d0007878118218380178781f8218300178781e8218280178781d8218200178781c8218180178781b8218100178781a8218080178781933072033082050202401d2a646171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020260167a68377831900043308400a09821718048218100482190804821a00046f776f886f996faa7b1a407b1ad8037b19487b19d0037b18507b18c8037b17587b17c003492118044921100449210804492100044821e003208318c003831a0004831be0033309ff33070a080182191804821a10048213080482180004821b6801d3b907d8b90b82126001d82a0c7b1c30da7c0b821c7001d3c304d8c306821c78017b1820d8c800da4006d32a0cd4c707da760b520b680dc92a07c9670a7b1a38d86707821a6801c9a909821830c98909c979097b193082177001c97307c907077b172882177801821820c978077b17208217487b17d0038217507b17c8038217587b17c0038216407b16d803492118044921100449210804492100044821e003208318c003831a0004831be0033309ff33070a087b16d8038217487b17d0038217507b17c8038217587b17c0038217307b1718048217387b1710048217287b1708048217207b1700048318c003831a00043309ff330b2033070a108317a0030a058217a8038118b0038219a0036f77977a206f88988820d48a0a9877206f98978920d49707988820821968017b199802821960017b199002821970017b198802821978017b1980024921b8027b18b0027b17a8029517a002951880027b1aa002502028010cc400330820330750202a0179a48218380178781f8218300178781e8218280178781d8218200178781c8218180178781b8218100178781a82180801787819821800017878178218f8007878168218f0007878158218e8007878148218e0007878138218d8007878128218d0007878118218c80078780f8218c00078780e8218b80078780d8218b00078780c8218a80078780b8218a00078780a8218980078780982189000787807821888007878068218800078780582187878780482187078780382186878780282186078780182184001787818821848017878108218500178780882185801787833072033082050202c0192a346171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750202e0127a38377831900043308400a09821718048218100482190804821a00046f776f886f996faa7b1ad8037b19d0037b18c8037b17c003492118044921100449210804492100044821e003208318c003831a0004831be0033309ff33070a08821718047b171001821710047b171801821708047b172001821700047b17280133074033082050203001a0a27c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766faa6f986f277b1738017b183001d48707d46a08d47808988820d46707977720d487075207ca0883a73308207b1700017b1a0801502032015da1821868016f88821960016f99821a70016faa821b78016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880882193001d46909140ae0ffffff00000000821b0801d8ab0a821b380194ba949a787801510ac80782160001836720330820502034015ea0821810016f88821918016f99821a20016faa821b28016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330840646750203601889f3a080000023a090800023a0a1000023a0b1800027b1818047b1910047b1a08047b1b0004821840017b183804821848017b183004821850017b182804821858017b182004837983170004330802330a400a079551a0fb82105804821550048216480495116004320033074033082050203801149f7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b1778017b197001d497076489d46808d47808988820d46707977720d4870752073c057b19680183973308207b17600150203a01cf9d46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882186801958704d88708821a7801c88a09d8a90ada880ac86a0ad86a08821b7001c88b0b7b1988017b1780017b1a90019517a001951880017b1b980150203c019de18217a8018212b8018213a001821ab001281d0450203e010be433074033082050204001039d7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b1778017b197001d497076489d46808d47808988820d46707977720d4870752072b037b19680183973308207b17600150204201be9b46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882186801958704d88708821a7801c88a09d8a90ada880ac86a0ad86a08821b7001c88b0b7b19c8027b17c0027b1ad0029517e0029518c0027b1bd8025020440186e48217e8028212f8028213e002821af002280c0233074033082050204601f89a7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b1778017b197001d497076489d46808d47808988820d46707977720d48707520720017b19680183973308207b17600150204801b39946171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882186801958704d88708821a7801c88a09d8a90ada880ac86a0ad86a08821b7001c88b0b7b1908027b1700027b1a100295172002951800027b1b180250204a01c6e4821728028212380282132002821a30020182187801d3870bd8870c648482196801d89308dab80cc96a0bd86a0a82167001c96206c9a606d8cb0ac9a606c9cb0bc94707c98708c99307d46808d4b709d48909d4b808989920978820d498085108b800003307330850204c019f98837833070133090a0e014921f0014921e8014921e001140700000000717b484e9518e0017b17f801330750204e01af984921d8014921d0014921c001413307049518c0014921c80133005201288d98492170024921680249216002140700000000717b484e951860027b1778023307502050016a98492158024921500249214002113307049518400249214802502052014c98330824330750205401019883783307013309240a0e01837682176001646850205601e89783783307016469330058010a0e01491718491710491708490732009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520819029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b16836733082033062050205a01609778761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607520859018365330820645750205c01cd9646171f1d46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109cb0083572033082050205e01409646171a7046171562461718654617166546170c654617196d46170b6d4617116e4617106e4617096e46171f46171e46171d461717204617142046170d20461708204617073a46171c7946170679461705724617126f4617046f46171b74461713744617037446170e634617026346170f6146170a61461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511987b10607b15587b1650828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b17285208c8029567207b1740d86707c87c087b18487b1c10d8c805da7705c8b5057b1b18d8b5077b1a20c8a7077b17387b1608836733082033062050206001169578761f821840d45808821948821a38d4a909d49808988820d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752080c0282164083673308207b173050206201849446171f2d46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821838d4850a330501140800000000010000007b181408e0ffffff00000000d8860882194894987b1a3894a8460751086b0182173083772033082050206401e59346171f6146171d6c4617167646170f6d46170c6b46171e6546171c20461719204617132046170e20461708204617073a46170679461714634617026346171b7446171a6146170b6146170161460746461718724617176582189588c0821940d88908330c6f787c15461712748219489498330b73787b1182193894984617107546170d6546170a74787b0946170572330674787c047876035108c00082173083774033082033052050206601379346170c6446170a754617096646170772461708654617056546170b6e4617046e4617036f78750678750278760146171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46077382180895878000d88708821a10c88a09d8a90ada880a821818c88a0ad88a08821b20c8b808821b287bb77bb9087bba107bb818821060821558821650951168320000951160ff7b1098007b1590007b1688009515a0008411f08289187b19308289107b19288289087b192082887b18187b1738330740330820502068014f927c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c761797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a097c7b087c7c0a7c760b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b0d7c7c0c7c760e7c780f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78017c7b7c7c027c7603978808d4b80897cc10976618d46c0cd4c8087c7b057c7c047c76067c770797bb08d4cb0b976610977718d46707d4b707977720d487076f736fa46f966f2c82181895871fd88708821a20c88a09d8a90ada880a821828c88a0ad88a08821b30c8b8088477e0c8c7077b1c287b1710d8c70bc86909c8b90cd36c097b1630d86c07da9b07c84a0ac87a0bd8ab06d84a09c83808c89808c886068eb88e69da6809d46b087b1c088ecadb890a520a2401d84b08d33609d8360ada980ad34b08d49808db8a0752070b013307403308207b14207b13187b1b50206a01a3906f6882196f99821a086faa821b106fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217388218287b788218187b78188218307b78088218207b7810955160ff8210980082159000821688009511a0003200491170491168491160140700000000717b484e9518607b1778330750206c01cf8f4911584911504911404133070495184049114850206e01b68f3308243307502070016b8f8378330701330924330072010a0e01828a18828b10828908d4ba0a889b0194ab510b308288958a1fd88a08c8980884880184aae095a920d8a90ac8a80bd88b08daaa084917187b797b7b087b781032009511b07b10487b15409515508411f0491130491128491120140700000000717b484e9518207b17383307502074012b8f491118491110490141330704641849110850207601148f330824330750207801c98e837833070133092433007a010a0e019511a87b10507b15487b1640827a10827b18827c088277d4cb0bd4a70cd4bc0c98cc20d4ba0a97aa20d4ca0a520a4901829b18829c108295829608d4c509d4b60ad4a909989920d4ca0a97aa20d4a909520925017b16287b1c307b1b38828918828a10828c828b08d4ac087b19207b1b10d4b909d498089888207b1a18d4a909979920d498085208ef0083777b170883c7835664687b1c50207c011d8e837764688219080a02018217c85707d85708821b28821910c8b909c88909d3b90ad8b90bdaa80b821c30821818c8c808c88b0bd88b0ad8c808821c38821620c86c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a80852087b837733082050207e01b28d46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078210508215488216409511583200009511e0fe7b1018017b1510017b160801951520018411f0829b18829c108296087b1b507b1c48d4cb0b886c0194bc7b17510c730382a7187b171882a7107b172082a7087b170882a77b171082998287187b17708287107b17788287087b176882877b176095971f7b1940d89708c868088488018477e0957920d87907c8780ad88a0bda770b4921d8007b19c0007b1ac8009517e0009518c0007b1bd000502080011bfa8217f8008219f0008218e800821ae0007b17587b1830d48707d49a08d478089888207b1938d49707977720d487075207d1027b1a2883a733082050208201618c821440821860c84808d8480a821968c86909c8a90bd36b0cd86b09daca09821c08d3cb0ad8bc0b821c10d88c08821048821c78c80c0cdbab08d80c0a821350821b70c83b0bc8ba0ac8c909d8c90bc8ba0a821c18d3ca0bd8ac0a821220d8920cdabc0ad32909d4b909db9a086f49989a38787a1f989a30787a1e989a28787a1d989a20787a1c989a18787a1b989a10787a1a989a08787a196f6a78791898a93878791798a93078791698a92878791598a92078791498a91878791398a9107879126f09787a1098aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a6f3a78790898990878790998a93878790798a93078790698a92878790598a92078790498a91878790398a910787902787a98aa08787a018212605208f001821978d49207821870821a68d4a808d48707987720d49808978820d48707821a5852077001d40407d43608d48707987720d40808978820d48707821938821b30821c2852074e017b1678d4a9071408e0ffffff00000000d88c0894b894785108330195c620d8c607c87b087b1820d8b808da7708c898087b1868d898077b177083227b1260836783487b181850208401a18a83778218188219600a0201821740c86707d86708821978821b20c8b909c88909d3b90ad8b90bdaa80b821848821a68c8a808c88b0bd88b02d8a808821c50821658c86c0c821a70c8ac0cc8c808c82808d4b70ad49808d48a0a98aa20d4b808978820d4a80852089a008377330820502086012d8a46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460782178218287b787b76188218307b78088218387b78109551e0fe821018018215100182160801951120013200004921b0004921a8004921a000140700000000717b484e9518a0007b17b800330750208801bb8949219800492190004921800041330704951880004921880050208a019d89330824330750208c01528983783307013309240a0e013307330850208e013d8983783307013309330090010a0e01951160ff7b1098007b1590007b1688009515a0008411f08282828308828410828018829b829a08829c10829918380884000264764911184911104911087b187b19387b1c307b1a287b1b207b10587b14507b1348951760951840951920641a7b12405020920189fb821770821878821960821a687b67107b68187b697b6a08955160ff8210980082159000821688009511a00032009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b17205208ae029567207b1740d86707c87c087b18387b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17307b168367330820330620502094012d8878761f821840d45808821938821a30d4a909d49808988820d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208f301645682154083573308207b172850209601998746171f2346171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821830d48609140600000000010000001408e0ffffff00000000d8850864958219389498945846075108560182172883772033082050209801008746171b644617176c4617136d46170d6946170c764617097346171d204617152046171020461708204617073a46171c79461706794617187246170b72461705724617046f46171e744617037446170e634617026346171f6146171a614617166146171261461701614607469568c0821940d889088219389498330665787619787614945833056e78751178760f78760a5108b30082172883774033082050209a015d8646171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170378750278760146076b821895878000d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b207bb77bb9087bba107bb8188210588215508216489511603200009511c0fe7b1038017b1530017b16280182831882851082860882827b1620017b130001d43608d45206d486069866207b151001d45808978820d468087b175208d80c821760018278187b18c000821858018276107b16b8008276087b16b00082777b17f8008287187b17108287107b1718821750018286087b160882887b1820821848018276107b16388276087b163082777b17288287187b17e000821740018286107b16d8008286087b16d00082887b18e8008278187b18488278107b18508278087b184082777b175882c7187b176082c7107b176882c7087b177082c77b177882b7107b17900082b7087b17880082b77b17800082a7187b17a00082a7107b17a80082a7087b17c80082971082a87b1898008298087b18f000829697772098752083273308207b1718017b12080150209c0186846f588219f0006f996f6a98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882082190001821b1001d49b0b140600000000010000001409e0ffffff0000000082150801d89509821a200194a97b1bf00094b978780c51090f0b8217180183772033082050209e01a1838218a0006f888219a8006f99821ac8006faa821b98006fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888089569c0d89509821a200194a9821af00094a978780151091e0a1408ffffffff00000000821980008499ff7b19c800821588008455ff7b18a80082169000d28606821718018377403308205020a00189826f686f59821ac8006faa787a1846170b46170a461709461707461706461705461704461703461702461701460798ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98aa08787a19787910989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d988820140600000000010000001409a0ffffff0000000082150801d89509821a200194a9821af00094a978780c51091d09821718018377603308205020a201af818218606f888219686f99821a706faa821b786fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808956980d89509821a200194a9821bf00094b97878015109300864579555e000d87507c87a097b19f000d8a906da770682171001c87606d8760782180001c887077b17c80082171801837780003308205020a401968046171fe000d465088219f000821bc800d4b909d498089888207b16a000d46909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752086e077b15980083573308205020a60101808213e8006f3898893878791f98893078791e98892878791d98892078791c98891878791b98891078791a9889087879198212d0006f297878189898387878179898307878169898287878159898207878149898187878139898107878128215d8006f5a78791098990878791198a83878780f98a83078780e98a82878780d98a82078780c98a81878780b98a81078780a821ce0006fc8787a0898aa08787a09988938787907988930787906988928787905988920787904988918787903988910787902821948821b40d49b0b821458821950d4940ad4ba0ad4b90998aa20979920d4a909787898880878780152096f06d45307d4c208d48707987720d45808978820d48707821a1001520752068217a0008218c800d487071408e0ffffff0000000082199800d889088219f0009498947882190001510826068217080195760001d8760782182001c87805d88508da7708c8a8087b18c800d8a807c897077b17a00083447b14f000836783387b1898005020a8018b7eff8377821898008219f0000a02018217e800c867077b169800d867088216a0008219d000c85909c88909d3590a7b15f000d8590bdaa80b8218d800821cc800c8c808c88b0bd88b0ad8c808821ce000c86c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a808520878051405e0ffffff0100000083773308205020aa01057eff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078217e80095771f7b159000d2570782189800c878087b18d800d878078218f000c878087b18f00094878218c800c887077b17e800d88707c867077b17e0008217288476ff8217308475ff8217388218a800d287077b17d000821718018377a0003308205020ac013c7dff6f6898893878791f98893078791e98892878791d98892078791c98891878791b98891078791a9889087879196f597878189898387878179898307878169898287878159898207878149898187878139898107878129898087878118218d0006f8878791098893878790f98893078790e98892878790d98892078790c46170b46170a461709787808461707461706461705461704461703461702461701460782192001821af000d39a07d89a0864ac821308018216d800d83605da7508821a1001821be800c9ab07d8ab0a821b0001c8ab02d8870b821ae000c92a0ac9ba0a7b1a1001c987077b170001c85909c99c05c936077b172001821718018377c0003308205020ae01337cff821810016f88821900016f996f5a821b20016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b12646b98aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888088216e800d46b09821ae000821cf000d4ca0ad4a909989920d46a0a97aa20d4a9097878015209a20283b73308205020b001397bff8212f8006f2898893878791f98893078791e98892878791d98892078791c98891878791b98891078791a9889087879198213b0006f397878189898387878179898307878169898287878159898207878149898187878139898107878128216b8006f6a78791098990878791198a83878780f98a83078780e98a82878780d98a82078780c98a81878780b98a81078780a821cc0006fc8787a0898aa08787a09988938787907988930787906988928787905988920787904988918787903988910787902821910821b08d49b0b821420821918d4940ad4ba0ad4b90998aa20979920d4a90978789888087878015209a601d46207d4c308d48707987720d46808978820d48707821bf000520789018219e800821ce000d4c9071408e0ffffff00000000821ad800d88a0894b894785108650195a820d8a807648a7b181801c87b06d8b608da7708c898087b181001d89807c8c7077b17200183447b14080183a78115f80064585020b201cd79ff8377645882190801821518010a02018217f800c85707d857088219b000c86909c88909d3690a7b160801d8690b82161001daa80b8218b800c86808c88b0bd88b0ad86808821cc00082152001c85c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a8085208bc0083773308205020b4015379ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078217f80095771f82189000d2870782181801c87808d8780782190801c879099497c86707d8670a821b2001c8ba0a821b7bb87bb9087bb7107bba1882103801821530018216280195114001320000821b1802821a100282190802d4ba0788980194785108d906821700027b1758957701887801c898087b170002d487077b180802887701c8a7077b171002d8a707c8b7077b1718028217707b17e8018217787b17e0018217687b17f0018216607b16f8018318e0017b1a48831a00027b19403309ff7b1b38330b2033070a108217387b1758018217487b1750018217407b1748018217587b1740017b1678018217687b1770018217707b176801951780019518600195194001821a787b1a60015020b60107888217b8017b17588217b0017b17488216a8018217a0017b1718821a98017b1a60821990017b1968821888017b1870821780017b17787b1af8017b19f0017b18e8017b17e001492118024921100249210802492100024821c001208318e001831a0002831bc0013309ff33070a0882191898973d976803d48707979803888800018583018e78db780398663d821848978703d4670798883d821a5897aa03d4a8088e8a8e7bdb8a0bd48707db7b03821700027b1758821708027b1748821710027b1740821718027b173846213f01ff0046213e01ff0046213d01ff0046213c01ff0046213b01ff0046213a01ff0046213901ff0046213801ff0046213701ff0046213601ff0046213501ff0046213401ff0046213301ff0046213201ff0046213101ff0046213001ff0046212f01ff0046212e01ff0046212d01ff0046212c01ff0046212b01ff0046212a01ff0046212901ff0046212801ff0046212701ff0046212601ff0046212501ff0046212401ff0046212301ff0046212201ff0046212101ff0046212001ff0046211f0146211e0146211d0146211c0146211b0146211a014621190146211801462117014621160146211501462114014621130146211201462111014621100146210f0146210e0146210d0146210c0146210b0146210a0146210901462108014621070146210601462105014621040146210301462102014621010146210001849b1f951a2001c9ba0a7ca7197ca8187cac1a7ca61b977708d4870797cc10976618d46c0cd47c027ca81d7cac1c7ca61e7ca71f978808d4c808976610977718d46707d48707977720d427077b17187ca7117ca8107cac127ca613977708d4870797cc10976618d46c0cd47c027ca8157cac147ca6167ca717978808d4c808976610977718d46707d48707977720d427077b17107ca7097ca8087cac0a7ca60b977708d4870797cc10976618d46c0cd47c097ca80d7cac0c7ca60e7ca70f978808d4c808976610977718d46707d48707977720d497007ca7017ca87ca9027ca603977708d48707979910976618d46909d497077ca8057ca9047ca6067caa07978808d4980897661097aa18d46a0ad4a808978820d478048218209887387817e7009887307817e6009887287817e5009887207817e4009887187817e3009887107817e2007818e0009887087817e1008218289887387817ef009887307817ee009887287817ed009887207817ec009887187817eb009887107817ea007818e8009887087817e9008218309887387817f7009887307817f6009887287817f5009887207817f4009887187817f3009887107817f2007818f0009887087817f1008218509887387817ff009887307817fe009887287817fd009887207817fc009887187817fb009887107817fa007818f8009887087817f9009517e000c9b70b4621df004621de004621dd004621dc004621db004621da004621d9004621d8004621d7004621d6004621d5004621d4004621d3004621d2004621d1004621d0004621cf004621ce004621cd004621cc004621cb004621ca004621c9004621c8004621c7004621c6004621c5004621c4004621c3004621c2004621c1004621c0007cb7197cb8187cb91a7cb61b977708d48707979910976618d46909d4790a7cb81d7cb91c7cb61e7cb71f978808d49808976610977718d46707d48707977720d4a7067cb7117cb8107cb9127cba13977708d4870797991097aa18d4a909d4790c7cb8157cb9147cba167cb717978808d4980897aa10977718d4a707d48707977720d4c7027cb7097cb9087cba0a7cbc0b977708d4970797aa1097cc18d4ca0ad47a087cb90d7cba0c7cbc0e7cb70f979908d4a90997cc10977718d4c707d49707977720d487077cb8017cb97cba027cbc03978808d4980897aa1097cc18d4ca0ad4a8087cb9057cba047cbc067cbb07979908d4a90997cc1097bb18d4cb0bd4b909979920d4890b94349430821c10943c8219189439943b943794329436821838e09803d26909821840e0c80ad2c20c821848e00806d20707821858e04808d24b0bd4b808d46707d4ca0ad49309821b607b1bf801821b687b1bf001821b707b1be801821b787b1be0017b1918027b1a10027b1708027b1800028318e001831a00023309ff330b2033070a109551c0fd8210380282153002821628029511400232004921b0004921a8004921a000140700000000717b484e9518a0007b17b80033075020b801d271ff4921980049219000492180004133070495188000492188005020ba01b371ff33082433075020bc016771ff83783307013309243300be010a0e01951120ff7b10d8007b15d0007b16c8008282188283108286088284d42608d43405d48505985520d43808978820d458087b17485208800582c7187b172082c7107b172882c7087b173082c77b173882b7107b1710954560d84507c876087b18b8007b1660d86808da770882b7087b1782b77b170882a7187b17a80082a7107b17a00082a7087b17980082a77b17c0008297187b1780008297107b1788008297087b177882977b179000c883067b1368d836077b1270c827077b17b0007b145883473308207b17185020c0018a70ff46171f60d465088219b800821bb000d4b909d498089888207b1650d46909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607520865047b154083573308205020c201f76fff8212c0006f2898893878791f98893078791e98892878791d98892078791c98891878791b98891078791a988908787919821c98006fc9787818989838787817989830787816989828787815989820787814989818787813989810787812821ba0006fba78791098990878791198a83878780f98a83078780e98a82878780d98a82078780c98a81878780b98a81078780a8216a8006f68787a0898aa08787a0998893878790798893078790698892878790598892078790498891878790398891078790282198000821578d495058214900082198800d4940ad45a0ad4590998aa20979920d4a90978789888087878015209630364bad4a207d46c08d48707987720d4a808978820d48707821370821968821c60821b5852073c038217508218b000d487071408e0ffffff00000000821a40d88a08821ab80094a894785108160395b68000d8b607c87c087b18b000d8c808da7708c898087b18b800d89807c837077b17880083447b1490008367832564585020c4017f6eff837764588215b000821990000a02018217c000c867077b169000d867088216880082199800c85909c88909d3590ad8590bdaa80b8218a000821cb800c8c808c88b0bd88b0ad8c808821ca800c86c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a8085208700283773308205020c601056eff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078217c00095771f1408e0ffffff01000000d2870782189000c878087b18c000d878058217b000c857077b17b00094758217b800c875057b15a800d87507c867077b17b8008217109777209876208215188357203308205020c801496dff6f6882196f99821a086faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a18989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a12989a08787a1178791046170b46170a461709787808461707461706461705461704461703461702461701460798893878790f98893078790e98892878790d98882078780c8357403308205020ca019c6cff8218206f888219286f99821a306faa821b386fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989a08787a0978790898893878790798893078790698892878790598892078790498891878790398891078790298890878790178788217488218c0007b788218b8007b78188218b0007b78088218a8007b78108210d8008215d0008216c8009511e000320000951110fe7b10e8017b15e0017b16d8019515f0019511d0f98411e0641682931082941882920882997b6268027b646002d442027b6378027b697002d43909d429097b6798005209062810148257108279187b6938018252088279107b6918018279087b69200182777b6728018227187b67300182578229107b69a0008229087b69a80082297b69b0008279187b69b8008279107b69c0008279087b69c80082777b67d00082c7187b67d80082c7107b67e00082c7087b67e80082c77b67f00082b7187b67f80082b7107b67000182b7087b67080182b77b67100182a7187b67800282a7107b67880282a7087b67900282a77b6798028287187b6740028287107b6748028287087b67500282877b6758029517e08477e07b67b8026471491718491710491708490783770a11018268b8028287188282828910828a0882688002d3870bd8870882678802d8790cdbb80c82689002d38a03d88a0a82689802d88208db3a08d39707d4b707db7c0851080628fe1438078400024926380649263006492628067b672006826778027b675006826768027b674806826770027b674006826748027b677006826750027b676806826758027b676006826760027b675806956780069568600695694006956a2006826b40027b6b78065020cc0188dc82689806826a900682678806826980067b67b8027b68b002d48707d4a908d478089888207b6aa802d4a707977720d4870751070628d81883973308207b6738027b69a0025020ce017c69ff8268b0028269a802d498081409e0ffffff00000000826aa002d89a09826ab80294a99489520906289a187c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c781797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78097c7a087c7b0a7c7c0b978808d4a80897bb1097cc18d4cb0bd4b8087c7a0d7c7b0c7c7c0e7c790f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78017c797c7b027c7c03978808d4980897bb1097cc18d4cb0bd4b8087c79057c7b047c7c067c7707979908d4b90997cc10977718d4c707d49707977720d487076f776fa96f3a6f28d4980bd4a707d47b0b98bb20d49707977720d4b7075107062870178267380283772083887b68b8025020d0011468ff9518e08488e07b68b0026481837783898268b8020a098268b0028287187b67b8028287107b67a0028287087b67a80282877b67b00233082033075020d201d367ff8269b8029898387b68380278781f9898307b68300278781e9898287b68280278781d9898207b68200278781c9898187b68180278781b9898107b68100278781a9898087b6808027878197879188269a0029898387b6800027878179898307b68f8017878169898287b68f0017878159898207b68e8017878149898187b68e0017878139898107b68d8017878129898087b68d0017878117879108269a8029898387b68c80178780f9898307b68c00178780e9898287b68b80178780d9898207b68b00178780c9898187b68a80178780b9898107b68a00178780a9898087b6898017878097879088269b0029898387b6890017878079898307b6888017878069898287b6880017878059898207b6878017878049898187b6870017878039898107b6868017878029898087b68600178780178793307203308205020d4019366ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020d6012866ff83778369a0073308400a098267b8078268b0078269a807826aa0076f776f886f996faa7b6a98077b6990077b6888077b6780074926b8074926b0074926a8074926a007482660072083688007836aa007836b60073309ff33070a08018267a0078068b0078269a807d48707d497075107062895128367a0060a8167b0067b6750018267a0067b6740018267a8067b6788008367c0060a058167d0067b6758018267c0067b6748018267c8067b6790003307403308205020d8016c65ff7c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c781797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78097c7a087c7b0a7c7c0b978808d4a80897bb1097cc18d4cb0bd4b8087c7a0d7c7b0c7c7c0e7c790f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78017c797c7b027c7c03978808d4980897bb1097cc18d4cb0bd4b8087c79057c7b047c7c067c7707979908d4b90997cc10977718d4c707d49707977720d487076f746fac6f336f2bd44c0788b8e094389478520806289c13d4cb07d44308d48707987720d4c808978820d48707510706287a13826788006f77987820826940016f99979a20d4a8087b688000977720826850016f88988820d487077b67789899207b6960826790006f77987820826948016f99979a20d4a8087b6848977720826858016f88988820d487077b67389899207b692895b7207b678800d8b707c873087b6850d83808da7708c8c8087b6840d8c807c847077b67308267b0026f777b6740018267a8026f777b6748018267a0026f777b6750018267b8026f777b67580183b73308207b67207b6b687b63587b6490007b6c705020da016863ff46171f3546171e0a46171d4146171cf80046171b4746171a3a46171941461718fb00461717254617169500461715a8004617141e461713e500461712614617115f4617105046170f0946170e1746170d7746170cbe0046170b4646170a6b4617095846170889004617071946170695004617051b4617048f004617030a4617026d461701e9004607f9009511d8956780047b17209567a0047b17189567c0047b17109567e0047b1708956700057b17826738017b679804826718017b679004826720017b678804826728017b678004826730017b67b8048267a0007b67b0048267a8007b67a8048267b0007b67a0048267b8007b67d8048267c0007b67d0048267c8007b67c8048267d0007b67c0048267d8007b67f8048267e0007b67f0048267e8007b67e8048267f0007b67e0048267f8007b671805826700017b671005826708017b670805826710017b670005826780027b673805826788027b673005826790027b672805826798027b6720058267287b6750058267487b6748058267387b67400549265805826740017b677805826748017b677005826750017b676805826758017b676005492698058267607b679005826780007b6788058267787b6780058267307b67b8058267407b67b0058267507b67a8059567c0059568a00595698005956a6005956b4005956c2005826288007b62a0055020dc01b4db9511288267c8058262d8058263c005826ad005826858d3870bd8870c6480826468d84308dab80c826970c99a0bd89a0a82699000c99209c9a909d8cb0ac9a909c9cb0bc90707c98707c9430ad49707d4ba08d47808d4b707988820977720d48707510706284c1083a88267207b6a98025020de01f460ff4926f8064926f0064926e8064926e0064926180749261007492608074926000749263807ff49263007ff49262807ff49262007ff9569e006979920989920956a200797aa20d4a909977720987720826a980297aa20d47a0a956700079777201408ffffffff00000000d4870c3307ff3308ff330bff0a0a01806710078268000782690807d4780ad49a0a520a0628ad0f6f99989a206f88978b20d4ba0a7b6a98029799206f77987720d497077b6790029888207b68880233082033075020e0013160ff8268a0027878108268c80178780f8268c00178780e8268b80178780d8268b00178780c8268a80178780b8268a00178780a826898017878098268a802787808826890017878078268880178780682688001787805826878017878048268700178780382686801787802826860017878018268b00278788268b802787818826800027878178268f8017878168268f0017878158268e8017878148268e0017878138268d8017878128268d0017878118268380278781f8268300278781e8268280278781d8268200278781c8268180278781b8268100278781a826808027878193307203308205020e201455fff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020e401da5eff83778369a0073308400a098267b8078268b0078269a807826aa0076f777b6780026f887b6838016f997b6930016faa7b6a28017b6a98077b6990077b6888077b6780074926b8074926b0074926a8074926a007482660072083688007836aa007836b60073309ff33070a088067b4079777208268b80782698802d49707826928017b699807826930017b699007826938017b698807826980027b6980077b68b8077b67b007826798027b67a807826790027b67a00783688007836aa0073309ff330b2033070a10826740017b675804826748017b675004826750017b674804826758017b674004492678044926700449266804956760049568400449266004013300e6019511c0fd7b1038027b1530027b162802951540028411e08289187b19508289107b19308289087b192882887b1820827a1882791082780882777b1a607b1af8017b19687b19f0017b18707b18e8017b17787b17e001492118024921100249210802492100024821c001208318e001831a0002831bc0013309ff33070a0828b3e49517e08477e07b6748016471491718491710491708490783770a118268480182877b6780028287087b6758018287107b6750018287187b67480133082033075020e801105dff8268380278781f8268300278781e8268280278781d8268200278781c8268180278781b8268100278781a82680802787819826800027878178268f8017878168268f0017878158268e8017878148268e0017878138268d8017878128268d0017878118268c80178780f8268c00178780e8268b80178780d8268b00178780c8268a80178780b8268a00178780a82689801787809826890017878078268880178780682688001787805826878017878048268700178780382686801787802826860017878018268b8027878188268a0027878108268a8027878088268b00278783307203308205020ea01245cff46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020ec01b85bff83778369a0073308400a098267b8078268b0078269a807826aa0076f777b6738026f887b6830026f997b6928026faa7b6a20027b6a98077b6990077b6888077b6780074926b8074926b0074926a8074926a007482660072083688007836aa007836b60073309ff33070a08826720027b679807826728027b679007826730027b678807826738027b678007826748017b67b807826750017b67b007826758017b67a807826780027b67a00783688007836aa0073309ff330b2033070a10836740070a05806750077b67f801826748077b67f001826740077b6730029517e08477e07b6780026471491718491710491708490783770a118268800282877b6728028287087b6720028287107b6718028287187b6710023307403308205020ee01965aff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f747b6480026fa97b6900026f387b6808026f2a7b6a3802826710027b679803826718027b679003826720027b678803826728027b6780034926b803826788027b67b003826798027b67a803826790027b67a003826760027b67d803826778027b67d003826768027b67c803826770027b67c003826740027b67f803826748027b67f003826750027b67e803826758027b67e0037b6a18047b6810047b69080495672004956800049569e003956ac003956ba003956c80037b6400045020f0017be78269000282673802d49707826a080282688002d4a808d47808988820d4a707977720d487075207ed0764a082672804826838047b68780282642004826a3004d3970bd8970c82628002d82408dab80cc90a0bc9cb03d8cb0b7b6b7002d80a0a826c3802826b7802c9cb0cc9ac0c826a7002c9ac0cc99707c98707c92408d4c707d4380ad47a0ad4370798aa20977720d4a70752078007826730026f779777208269f0016f99989a20d4a7077b6778029799208267f8016f77987720d497077b6770028167800283887b6880025020f201fa57ff3a082000023a092800023a0a3000023a0b3800027b68b8077b69b0077b6aa8077b6ba0078268a0027b68d0078268a8027b68c8078268b0027b68c0078268b8027b68d807826870026f88826978026f99826a300297aa207b6ae8074926e0077b69f0077b68f80783798367a007330803826a80020a0782679800491718826888027b7810826898027b7808826890027b78955100f89511e0951130068210e8018215e0018216d8019511f00132003307403308205020f4013f57ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67b8027b69a802d497076489d4b808d478089888207b6bb002d4b707977720d48707520752057b69a00283973308207b6798025020f601f555ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268a002958704d88708826ab802c88a09d8a90ada880a8268b002c88a0ad88a08826ba802c88b0b7b69c8027b67c0027b6ad0029567e0029568c0027b6bd8025020f80182bd8267e8028262f8028263e002826af002282b043307403308205020fa012a55ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67b8027b69a802d497076489d4b808d478089888207b6bb002d4b707977720d4870752073d037b69a00283973308207b6798025020fc01e053ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268a002958704d88708826ab802c88a09d8a90ada880a8268b002c88a0ad88a08826ba802c88b0b7b6908037b6700037b6a100395672003956800037b6b18035020fe01b6bd826728038262380382632003826a3003281602330740330820502000021553ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67b8027b69a802d497076489d4b808d478089888207b6bb002d4b707977720d48707520728017b69a00283973308207b67980250200202cb51ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268a002958704d88708826ab802c88a09d8a90ada880a8268b002c88a0ad88a08826ba802c88b0b7b69e8057b67e0057b6af005956700069568e0057b6bf805502004028bc8826708068262180682630006826a1006018268b802d3870bd8870c64808264a002d84308dab80c8269b002c99a0bd89a0a8269a802c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d498085108670050200602af97492670034926680349266003140700000000717b484e956860037b677803330750200802cd50ff49265803492650034926400341330704956840034926480350200a02ae50ff330824330750200c026250ff83783307013309240a0e0183787b68b8028267980250200e024650ff83783307018269b802330010020a0e014917184917104917083308607b783200821770821878d4870782189800d46808d478089888207b1668d46707977720d4870752071d068216d8007b1680008217d0007b1790008217c8007b17608217c0007b1788008117980033082050201202d34fff6f68821990006f998216606f6a821b88006fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820330750201402014fff8218406f888219486f99821a506faa821b586fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989a08787a0978790898893878790798893078790698892878790598892078790498891878790398891078790298890878790178783308203307502016022e4eff83778319c0003308200a0901821898009587207b1750d88709821878c89804d8840ada990a821968c8a90082179000821a8800d47a0a82178000d4760bd4ab0bd8900a821370c83a0a510bd6031407e0ffffff00000000821b9800d8b7067b16408e8cda860c9a96c9c6087b18588e82d8c60c8e96c836069a66c9c6068e63da620364697b1648c9b7028218789a8c821840c98c0b7b1740d827068ebcdab60c821858d49806db630c94c295271fd8270694cbc86b02d8b20bda660b94c87b1858c8b8087b1808978b3b982605d4b60397223b987b05d42b067b163882188800888b01821260c9b2077b17209589ff7b19307b1328d3370bd83703d86907dbb3077b1710d4280b88bb0182179000d8b70382188000c93808c9b70782194894c9821b08821c58d8cb0cc8c90998b305979c3bd4c303989c05d83709d3c802d8c80bda290bd33706d42606821910da690bdabc087b189000dab307821820821928dab908821930821c38dabc09989b3b978c056483d4cb0b979c05821678c8b60682189800c88c0c7b1c60d88c0bc8b606821878d38602821878d8860cda2b0c8218d0007b18880098333b977b05d43b038218c8007b18800098773b82129000972205d4720b821968821270c8b202c89303d8930bc8b202c83c0cd83c0b821870c8b202821b6095b7207b1738d8b70bc8b6077b1730d86706dabb068217c000c8c6067b1628d8c60cc82c0c7b1c20821b78821cd8006f777b179000821780006f72821788006f777b1788006fc77b178000821350017b18607b195864b6821798007b17507b1a707b10687b14787b1398007b12487b12b000821788007b17a800821780007b17a000821790007b17b8004921d8004921d0004921c8004921c0004821e000208318a000831ac000831be0003309ff33070a0801821760821858d48707821840821950d8890894689478510898018216d8008217d0007b17508217c8007b17588217c0007b17608117980033082050201802544bff6f688219506f99821a586faa821b606fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018219800095990188970182188800c878087b1888007b198000d48907887b01821748c8b702d8720782189000c878087b18900082179800957320d873096476821b78c89b04d8b40ada990a821738d37606821968821c28d39c0cd46c0c821730d3b707821870821620d38606d47606c8a900d46c0cd8900ac88a0a520c1cfe280682135001821b187bb37bb4087bb0107bba18955100ff8210f8008215f0008216e80095110001320000951100ff7b10f8007b15f0007b16e800951500018411f082897b19208289087b19108289107b19088288187b187b171833074033082050201a02a949ff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f7b7b1b386fa66f997b19306f287b182882177b17b8008217087b17b0008217107b17a8008217207b17a0007b1898007b1990007b1688009517c0009518a000951980007b1b800033001c02951100ff7b10f8007b15f0007b16e800951500018411e07b171882961082977b1798008297187b17708297087b1778828b18828a1082890882877b1b407b1bb8007b1a487b1ab0007b19507b19a8007b17587b17a0004921d8004921d0004921c8004921c0004821e000208318a000831ac000831be0003309ff33070a0828b2f76464821ac8008217d8007b1710821bc0008213d000d36a0cd86a08821938d89b06dac608c94a0ac96a0a7b1a08c99b0b95bc1fd8bc0bc8ba0a84cce0c84a07c8c9097b1920d8c90cc8c702d3a207d8a209da7c09821630c96307d8630c6463821028821610c90606c9c606d8870cc9c606c98707821808d88a08dabb08c87808d87807c8380ac89a0cd88a08d8ac09c80606c86707c88707c897068e678ec8db6708d46c078e29db780952093901643b821738821820d87807d34208d84209da8709d83c07d30608d8060ada870ad33c07d48707da790a520a0c013307403308207b14107b12087b1c50201e02e546ff6f6882196f99821a086faa821b206fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217188218387b788218287b78188218107b78088218307b7810955100ff8210f8008215f0008216e800951100013200491170491168491160140700000000717b484e9518607b17783307502020021046ff4911584911504911404133070495184049114850202202f645ff330824330750202402aa45ff8378330701330924330026020a0e019511a07b10587b15507b16489515608411f08289828a08828b1082881864767b18187b1b107b1a0895172064187b195020280286fb821730821838821920821a287b67107b68187b697b6a089551a08210588215508216489511603200951110ff7b10e8007b15e0007b16d8009515f0008411f0828918828b10828c08d49b0688ca01946a7b1748510a9f01828698b73b7b1920979805d4870798c83b7b1b2897b905d4980898693b7b1c1097ca05d4a9097b1618976a0595ab20d8ab0ac8a90cd89c09daaa09c88909d88908c8870a7b1b90007b1c98007b19a0009517b000951890007b1aa80050202a0226b28217c8008219c0008218b800821ab0007b17387b1830d48707d49a08d478089888207b1940d49707977720d4870752070a0183a73308207b1a0850202c026c44ff8218206f888219286f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217488218087b788218387b78188218307b78088218407b7810955110ff8210e8008215e0008216d8009511f00032000049218000491178491170140700000000717b484e9518707b178800330750202e029043ff49116849116049115041330704951850491158502030027643ff3308243307502032022a43ff8378330701330924330034020a0e019511e87b10107b15087b16828910828a18828b088286d4ba0ad49608d4a808988820d4a909979920d4980852084d827918827a108278827708d4a80bd49707d47b0b98bb20d4a707977720d4b70752072a390584000283878366646850203602b842ff83776468645982101082150882169511180a02320000821a30821928d4a60788980194785108bc00821c38d46c07d4a908d4870798771bd46808978825d4870752079f008218a000821bb800821aa8008216b0009587207b1830d88708c88a097b1a28d8a90ada880ac86a0a7b1610d86a087b1b18c8b808d4a70bd49808d48b0b98bb20d4a808978820d4b80852085239088400027b18088ac6058377646850203a021242ff837764688219080a028217208218187b78188218107b78108218287b78088218307b78955120ff8210d8008215d0008216c8009511e000320000491170491168491160140700000000717b484e9518607b1778330750203c02f641ff4911584911504911404133070495184049114850203e02dc41ff3308243307502040029041ff8378330701330924330042020a0e01951150ff7b10a8007b15a0007b1698009515b0008411f0828b10828a18828c0882867b1a387b1c30d4ac08d4b60ad48a0a98aa207b1b40d4b808978820d4a8087b17485208fc018297187b17208297107b17108297087b170882977b17187b16288367330820502044021441ff8214087c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f706fa66f398213186f2a821820d38a0bd8a807821a10d89a0cdbb70cd34602d86406d80307db2607d3a909d4b909db9c075107970064a698673b978805d4780298483b976605d4680898393b974a05d4a909973a05821728c87a0ad87a0b821c30c8c909c8b909d3c907d8c906da7b06821c40c8c808c88606d8860bd8c808821c38c82c07c88707c8b70795a820d8a80ac8a90bd89b09daaa09c86909d8690ac8a707821a487ba87bab087ba9107ba718955150ff8210a8008215a000821698009511b00032000049218000491178491170140700000000717b484e9518707b1788003307502046025d3fff4911684911604911503233070495185049115850204802433fff330824330750204a02f73eff837833070133092433004c020a0e01827910827a18827b088277d4ba0ad4970bd4ab0b98bb20d4a909979920d4b9095209d7009511e07b10187b15107b1608828910828a087b1a8286979920989520837733082050204e029c3eff6f5882196f996f6a98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c8210188215108216089511203200008217d802821ad0028218c8028219c0027b17287b1818d48707d4a908d478089888207b1a20d4a707977720d487075207120b83977b1798003308207b191050205202ab3dff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d4670782169800d4b707977720d487076f7b6fa76f986f297b1978027b1870027b17680295178002951860027b1b600233005402951120ff7b10d8007b15d0007b16c8009515e0008411f08289828a087b1a288286108288187b18307b17207b1898007b1690007b1a88009517a000951880007b19387b1980003300380228f4f64921d8014921d0014921c0014921c80182198802821a80028218109587207b1770d88707821b18c87b087b1868d8b808da770895a7207b1750d8a707c8790b7b1990007b1b48d89b09da7709821c20c88c07821b9002821898027b1760d8c707821c28c8c7077b1758c8b9097b1b787b1940d8b9077b188000c887077b17387b1a880083aa7b1a30013308206467502056029a3bff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e64637c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa86f946f2a821bc801d3ab09d8ab0a821bc001d84b0cdb9a0c821ad001d38a02d88a088216d801d87607db2807d34b08d49808db8c0751075d07330820643750205802483aff8210c0018214c8017c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f736fa86f996f2c821ad0018216d801d34c0bd8c407d8900cdbb70cd3a802d88a08d83607db2807d30908d4b808db8c075107590698073b974805d4780298a73b970805d4780c98673b97a805d478099767058218707b17a001c88707d88708821b687b19a801c8b909c88909d3b90ad8b90bdaa80b821a607b1cb001c8ca08d8a80a821c587b12b801c82c0cc8ca0ac88b0bd88b08c8a808d49808d4b709d48909d4b808989920978820d498085208db0582188800821b78d4b80882199000821a8000d4a909d49808988820d4b909979920d498087b189801837733082050205a025338ff7c787b1890017c78017b1888017c78027b1880017c78037b1878017c78047b1870017c78057b1868017c78067b1860017c78077b1858017c78087b1850017c78097b1848017c780a7b1840017c780b7b1838017c780c7b1830017c780d7b1828017c780e7b1820017c780f7b1818017c78107b1810017c78117b1808017c78127b1800017c78137b18f8007c78147b18f0007c78157b18e8007c78167b18e0007c78177b18d8007c78187b18d0007c78197b18c8007c781a7b18c0007c781b7b18b8007c781c7b18b0007c781d7b18a8007c781e7b18a0007c761f330820330750205c026c37ff78761f8218a00078781e8218a80078781d8218b00078781c8218b80078781b8218c00078781a8218c8007878198218d0007878188218d8007878178218e0007878168218e8007878158218f0007878148218f8007878138218000178781282180801787811821810017878108218180178780f8218200178780e8218280178780d8218300178780c8218380178780b8218400178780a82184801787809821850017878088218580178780782186001787806821868017878058218700178780482187801787803821880017878028218880178780182189001787833072033082050205e028436ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146073308403307502060021936ff8377831900033308400a09821718038218100382190803821a00036f776f886f996faa7b1af8027b19f0027b18e8027b17e0024921180349211003492108034921000348212003208318e002831a0003831b20033309ff33070a08018217980152070903821708037b179001821700037b179801801710037b178801330820821730502062029035ff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d489097c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c761797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f996f2a821cc801d3ca0bd8ac0a8218c001d8980cdbba0c821ad001d3a602d86a0a8216d801d87607db2a07d39808d4b808db8c075107e8018218508217a001c88707d88708821b488219a801c8b909c88909d3b90ad8b90bdaa80b821c408218b001c8c808c88b0bd88b0ad8c808821c388216b801c86c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a8088216980052083d01837733082050206402dd33ff821888016f88821990016f99821a98016faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c8218d8019588018887018219d001c879097b18d8017b19d001d498078877018218c001c88707d887088219c801c889097b19c8017b17c0012858f7821708821888007b78208218107b78821890007b78288218187b78088218787b78308218207b7810821880007b78388218287b78189551c0fc82103803821530038216280395114003320000492150024921480249214002140700000000717b484e951840027b175802330750206602c832ff49213802492130024921200232330704951820024921280233006a0228a532ff492110024921080249210002140700000000717b484e951800027b1718023307502068028132ff4921f8014921f0014921e001323307049518e0014921e80150206a026232ff330824330750206c021632ff837833070133092433006e020a0e019511907b10687b15607b16589515708411f0828a187b1a08829b1882847b14828a08829608829c828310829210c8a609c8c404d8c40cc8c909d36900d86906da0c06c83208821c08c8bc0cd8280bc8cb0bc8680cd88c08c88b00d3a90bd8a90a8218d88406dbba06d83c02821808d3800bd8800adab20ad33c08d4b808db8a0652061f7b747b79087b7c107b70189551908210688215608216589511703200491140491138491130140700000000717b484e9518307b17483307502070028631ff49112849112049111011330704951810491118502072026c31ff3308243307502074022031ff8378330701330924330076020a0e01951160fc7b1098037b1590037b1688039515a0038411e0641682787b6858018278087b6850018278107b6848018277187b674001330820330750207802d130ff826840016f88826948016f99826a50016faa826b58016fbb787b18787a10787908787898bc387b6c3001787c1f98bc307b6c2801787c1e98bc287b6c2001787c1d98bc207b6c1801787c1c98bc187b6c1001787c1b98bc107b6c0801787c1a7b6b380198bb087b6b0001787b1998ab387b6bf800787b1798ab307b6bf000787b1698ab287b6be800787b1598ab207b6be000787b1498ab187b6bd800787b1398ab107b6bd000787b127b6a400198aa087b6ac800787a11989a387b6ac000787a0f989a307b6ab800787a0e989a287b6ab000787a0d989a207b6aa800787a0c989a187b6aa000787a0b989a107b6a9800787a0a7b6948019899087b6990007879099889387b6988007879079889307b6980007879069889287b69787879059889207b69707879049889187b69687879039889107b69607879027b6850019888087b685878780133072033082050207a027e2fff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750207c02132fff8377836940033308400a09826758038268500382694803826a40036f776f886f996faa7b6a18037b6910037b6808037b67000349265803492650034926480349264003482620032083680003836a4003836b20033309ff33070a08018267500382694803826840037b67489777209877207b68507b6940d49808d4870751072a0e836760020a05806770027b6738826768027b6730826760027b672833074033082050207e026a2eff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f796faa6f376f287b67187b6810d48707d49a08d478089888207b6920d49707977720d487075107062854117b6a0883a77b67580133082050208002242dff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617038300461702484617015d4607080a0b8267406f779778208269486f99989920d498088269506f99979a20987720d4a7079899207b6788027b6880027a6990024926b8024926b0024926a8024926a0023308048267580150208202702cff7b675033082082675801502084025f2cff4826c002204926f8024926f0024926e8024926e0029568800297882098882014090000000018000000d498029568a0029788209888209569e002979920d4890a82685097882098882014090000000004000000d4980b9777209877209568c002978820d4780c3308ff3309ff64270a01015207980d0a0d01330820ae87080a0d647801826a20826218826908826c1095871f7b6848d887084916508488018477e0c879097b6940d87907c8c809c8790bd38b09d88b08da9708c8a808d8a807c827077b68187b6710d487077b6b2088b801947852080628b90f33074033082050208602792bff8268106f888269186f99826a206faa826b406fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826c508ec9826a4888aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b0628ac0e3308208267580150208802802aff7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c78017c7a7c7b027c7c03978808d4a80897bb1097cc18d4cb0bd4b8087c7a057c7b047c7c067c790797aa08d4ba0a97cc10979918d4c909d4a909979920d498086f836f22140a0000000001000000d3a20ad43a0a982b2088bb01943b93ab510bfa0d7c7a197c7b187c7c1a7c781b97aa08d4ba0a97cc10978818d4c808d4a8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78117c79107c7b127c7c13978808d4980897bb1097cc18d4cb0bd4b8087c79157c7b147c7c167c7717979908d4b90997cc10977718d4c707d49707977720d487076f776fa88269286f99979a20826b306fbb98bc20d4ca0a97bb20826c386fcc98cc20d4cb0b989920d39209d3b808d49808d3a707d43707d487075207ce0a9517e08477e07b6758016471491718491710491708490783770a11826858018287187b67388287107b673082877b67288287087b6720330820330750208a02d728ff8268300178781f8268280178781e8268200178781d8268180178781c8268100178781b8268080178781a82680001787819826838017878188268f8007878178268f0007878168268e8007878158268e0007878148268d8007878138268d0007878128268c800787811826840017878108268c00078780f8268b80078780e8268b00078780d8268a80078780c8268a00078780b8268980078780a8268900078780982684801787808826888007878078268800078780682687878780582687078780482686878780382686078780282685878780182685001787833072033082050208c02f027ff46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750208e028427ff8377836940033308400a09826758038268500382694803826a40036f776f886f996faa7b6a407b6a18037b69487b6910037b68507b6808037b6758017b67000349265803492650034926480349264003482620032083680003836a4003836b20033309ff33070a0801826b4803826940038262580382645003826c20c8bc0c826828c898087b6828d8980ac8ac0cd3bc037b6c20d8bc0b826c30c84c0c826838c82808d84c09c8980864a9db3b09c89c07d8c709c8980c85a80185b901db3908d84709d32c0a7b6c30d82c0bdaa90b7b6738d34707d4a70785b901db790851081d0b8267487b6710038267507b670803826758017b6700038267407b67180349265803492650034926480349264003482620032083680003836a4003836b20033309ff33070a088267407b6718038267487b6710038267507b670803826758017b6700038267307b6758038267387b6750038267207b6748038267287b67400383680003836a40033309ff330b2033070a109517e08477e07b6758016471491718491710491708490783770a11826858018287187b67388287107b67408287087b674882877b6750330820330750209002d025ff8268300178781f8268280178781e8268200178781d8268180178781c8268100178781b8268080178781a826800017878198268f8007878178268f0007878168268e8007878158268e0007878148268d8007878138268d0007878128268c8007878118268c00078780f8268b80078780e8268b00078780d8268a80078780c8268a00078780b8268980078780a82689000787809826888007878078268800078780682687878780582687078780482686878780382686078780282685878780182683801787818826840017878108268480178780882685001787833072033082050209202e924ff46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146073308403307502094027d24ff8377836940033308400a09826758038268500382694803826a40036f776f886f996faa7b6a18037b6910037b6808037b67000349265803492650034926480349264003482620032083680003836a4003836b20033309ff33070a08826758037b670001826750037b670801826748037b671001826740037b67180133074033082050209602f523ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa96f386f277b6730017b682001d48707d4b908d478089888207b6b2801d4b707977720d487075207df0683973308207b6758017b69f80050209802ad22ff8268386f888269406f99826a486faa826b506fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880882692801826a2001d4a909140ae0ffffff00000000826bf800d8ab0a826b300194ba949a787801510adc058267580183772033082050209a02ad21ff826800016f88826908016f99826a10016faa826b18016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878013308408267580150209c02d420ff3a084000023a094800023a0a5000023a0b5800027b6858037b6950037b6a48037b6b4003826838017b687803826840017b687003826848017b686803826850017b686003837983674003330802330a400a07955160fc8210980382159003821688039511a003320033074033082050209e025f20ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b6758017b694801d497076489d4b808d478089888207b6b5001d4b707977720d48707520747037b69400183973308207b6738015020a002151fff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882684001958704d88708826a5801c88a09d8a90ada880a82685001c88a0ad88a08826b4801c88b0b7b6968017b6760017b6a700195678001956860017b6b78015020a202de62ff826788018262980182638001826a9001281e025020a4024b65ff3307403308205020a602421eff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b6758017b694801d497076489d4b808d478089888207b6b5001d4b707977720d4870752072a017b69400183973308207b6738015020a802f81cff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882684001958704d88708826a5801c88a09d8a90ada880a82685001c88a0ad88a08826b4801c88b0b7b6928027b6720027b6a300295674002956820027b6b38025020aa02bb65ff826748028262580282634002826a50020182685801d3870bd8870c648082644001d84308dab80c82695001c99a0bd89a0a82694801c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d498085108be0000330733085020ac02da1bff837833070133090a0e014926d0014926c8014926c001140700000000717b484e9568c0017b67d80133075020ae02e91bff4926b8014926b0014926a001413307049568a0014926a8013300b20228c61bff492610024926080249260002140700000000717b484e956800027b67180233075020b002a21bff4926f8014926f0014926e001113307049568e0014926e8015020b202831bff33082433075020b402371bff83783307013309240a0e0183787b685801826738015020b6021b1bff8378330701826958013300b8020a0e01828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b90952093e019511f07b10087b15647583873308205020ba02d11aff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b5782100882159511103200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b172852081e029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020bc023e19ff78761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085d01836533082064575020be02aa18ff46171f1d46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109ce008357203308205020c0021c18ff46171f46171e46171d46171c7746171b6f46171a6c461719204617186f4617176f4617167446171520461714644617136e4617126f461711624617102046170f7246170e6546170d7446170c6946170b6246170a7246170961461708204617073a330c79787c06461705724617046f4617037446170263461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b17205208b7029567207b1738d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17307b1683673308203306205020c202f016ff78761f821838d45808821940821a30d4a909d49808988820d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208fb01645682153883573308207b17285020c4025b16ff46171f2446171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821830d4860a140600000000010000001408e0ffffff00000000d8850882194094987b1a3094a8460751085c018217288377203308205020c602c015ff46171d6646171c6646171b754617156b46171a734617127346170e6446170c76461709704617172046171120461708204617073a461706794617107246170a724617057246170b6f4617046f46171f6346170263461714614617016146074633056978751e9568c0821938d889084617196e787518821940949846171665821930949833067478761346170f6578750d7876035108b5008217288377403308205020c8021915ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617047876034617026e461701657875821895878000d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b207bb77bb9087bba107bb818821058821550821648951160320000951140f87b10b8077b15b0077b16a8079515c0078411e06416829a187b6a8801829a107b6a78829a087b6a800082997b69708289187b6988008289107b6970018289087b69800182887b68780182787b68d8018278087b68d0018278107b68c8018277187b67c00133082033075020ca020314ff8268c0016f888269c8016f99826ad0016faa826bd8016fbb787b18787a10787908787898bc387b6c6801787c1f98bc307b6c6001787c1e98bc287b6c5801787c1d98bc207b6c5001787c1c98bc187b6c4801787c1b98bc107b6c4001787c1a7b6b900198bb087b6b3801787b1998ab387b6b3001787b1798ab307b6b2801787b1698ab287b6b2001787b1598ab207b6b1801787b1498ab187b6b1001787b1398ab107b6b0801787b127b6a980198aa087b6a0001787a11989a387b6af800787a0f989a307b6af000787a0e989a287b6ae800787a0d989a207b6ae000787a0c989a187b6ad800787a0b989a107b6ad000787a0a7b69a0019899087b69c8007879099889387b69c0007879079889307b69b8007879069889287b69b0007879059889207b69a8007879049889187b69a0007879039889107b6998007879027b68a8019888087b6890007878013307203308205020cc02ab12ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020ce024012ff83778369e0063308400a098267f8068268f0068269e806826ae0066f776f886f996faa7b6a98077b6990077b6888077b6780074926f8064926f0064926e8064926e006482660072083688007836ae006836b60073309ff33070a08018267f0068269e8068268e0067b67d0019777209877207b68d8017b69c801d49808d487075207062853209517e08477e07b67c0016471491718491710491708490783770a118268c0018287187b67608287107b67688287087b675082877b67583307403308205020d0027711ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f796faa6f376f287b67407b6838d48707d49a08d478089888207b6948d49707977720d4870751070628ab24140700000000180000007b67b001140700000000040000007b67b8017b6a2883a77b67c0013308205020d2021510ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703fe00461702b100461701354607a0000a0b8267c8016f779778208269d0016f99989920d4890a8268d8016f88978920987720d497079888207b67c8017b67e8037b6ad8017b6ae0037b68d0017a68f003492618044926100449260804492600043308048267c0015020d402500fff7b67303308208267c0015020d6023f0fff4826200420492658044926500449264804492640049568e0039788209888208269b001d498029568000497882098882095694004979920d4890a826830978820988820826bb801d48b0b97772098772095682004978820d4780c3308ff3309ff64270a010151070628661d0a0d01330820ae87080a0d647801826a48826240826928826c3895871f7b6840d887084916488488018477e0c879097b6938d87907c8c809c8790bd38b09d88b08da9708c8a808d8a807c827077b68287b6720d487077b6b3088b801947852080628f7223307403308205020d802630eff8268206f888269286f99826a306faa826b386fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826c488ec9826a4088aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b0628e0213308208267c0015020da026a0dff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd49b037c7a117c7b107c7c127c781397aa08d4ba0a97cc10978818d4c808d4a8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d489047c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c7a1f979908d4b90997cc1097aa18d4ca0ad4a909979920d498086f49826a50d39a0bd89a096f88826a58d88a0a7c780ddbb90a7c790c7c7b0e7c770f978808d4980897bb10977718d4b707d48707977720d437076f776f28826b60d38b09d88b08826c68d87c0bdb980bd3c707d49707db7b0a510a0628d71c826778826870d487078268880182698000d49808d47808826788006f777b67c001826770016f777b678801826780016f777b678001826778016f777b6778017b68880052080628a11233082033075020dc02d30bff826898017878108268f80078780f8268f00078780e8268e80078780d8268e00078780c8268d80078780b8268d00078780a8268c8007878098268a0017878088268c0007878078268b8007878068268b0007878058268a8007878048268a00078780382689800787802826890007878018268a801787882689001787818826830017878178268280178781682682001787815826818017878148268100178781382680801787812826800017878118268680178781f8268600178781e8268580178781d8268500178781c8268480178781b8268400178781a826838017878193307203308205020de02e70aff46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020e0027b0aff83778369e0063308400a098267f8068268f0068269e806826ae0066f776f886f996faa7b6a98077b6990077b6888077b6780074926f8064926f0064926e8064926e006482660072083688007836ae006836b60073309ff33070a088267f8067b67788267f0067b6780008267e8067b67688267e0067b67703307403308205020e202f609ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f796faa6f376f287b67587b6850d48707d49a08d478089888207b6960d49707977720d48707510706282a1d7b6a4083a77b6770013308205020e402b008ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703fe00461702b100461701354607a0000a0b8267c8017b6708058267d8017b6700058267d0017a67100549263805492630054926280549262005330804826770015020e6021208ff7b6748330820826770015020e8020108ff482640052049267805492670054926680549266005956800059788209888208269b001d498029568200597882098882095696005979920d4890a826848978820988820826bb801d48b0b97772098772095684005978820d4780c3308ff3309ff64270a01015107062828160a0d01330820ae87080a0d647801826a60826258826c40826b5095871f7b6858d887084916608488018477e0c87c0c7b6c50d87c07c8b809c8790bd38b09d88b08da9708c8a808d8a807c827077b68407b6738d487077b6b4888b801947852080628001c3307403308205020ea022507ff8268386f888269406f99826a486faa826b506fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826c608ec9826a5888aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b0628a21a330820826770015020ec022c06ff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd49b037c7a117c7b107c7c127c781397aa08d4ba0a97cc10978818d4c808d4a8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d489047c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c7a1f979908d4b90997cc1097aa18d4ca0ad4a909979920d498086f49826b68d39b0ad89b096f88826b70d88b0b7c780ddba90b64bc7c790c7c7a0e7c770f978808d4980897aa10977718d4a707d48707977720d437076f776f28826a78d38a09d88a08826b8000d87b0adb980ad3b707d49707db7a0c7b6c70013307403308205020ee02dc04ff7c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c781797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78097c7a087c7b0a7c7c0b978808d4a80897bb1097cc18d4cb0bd4b8087c7a0d7c7b0c7c7c0e7c790f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78017c797c7b027c7c03978808d4980897bb1097cc18d4cb0bd4b8087c79057c7b047c7c067c7707979908d4b90997cc10977718d4c707d49707977720d487076f786fa96f3a6f2b826770017b6880007b69787b6a707b6b6851070628ea16d49b07d4a808d48707987720d49808978820d4870751070628021883b77b6770013308205020f0028b03ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703fe00461702b100461701354607a0000a0b8267c8017b6788058267d8017b6780058267d0017a6790054926b8054926b0054926a8054926a005330804826770015020f202ed02ff7b6760330820826770015020f402dc02ff4826c005204926f8054926f0054926e8054926e005956880059788209888208269b001d498029568a0059788209888209569e005979920d4890a826860978820988820826bb801d48b0b9777209877209568c005978820d4780c3308ff3309ff64270a01015107062803110a0d01330820ae87080a0d64780182628000826b78826c70826a6895871f7b68b001d887084926b8018488018477e0c87a0a7b6a68d87a07c8c809c8790ad38a09d88a08da9708c8b808d8b807c827077b68787b6770d487077b6a800088a8019478520806281e173307403308205020f602fc01ff8268706f888269786f99826a80006faa826b686fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826cb8018ec9826ab00188aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b06287615330820826770015020f8020001ff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f777b67b8016fa77b67b0016f377b6780006f277b67700133082033075020fa02d5fffe8268680178781f8268600178781e8268580178781d8268500178781c8268480178781b8268400178781a82683801787819826830017878178268280178781682682001787815826818017878148268100178781382680801787812826800017878118268f80078780f8268f00078780e8268e80078780d8268e00078780c8268d80078780b8268d00078780a8268c8007878098268c0007878078268b8007878068268b0007878058268a8007878048268a000787803826898007878028268900078780182689001787818826898017878108268a0017878088268a80178783307203308205020fc02e9fefe46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020fe027dfefe83778369e0063308400a098267f8068268f0068269e806826ae0066f776f886f996faa7b6a50017b6a98077b6958017b6990077b6860017b6888077b6768017b6780074926f8064926f0064926e8064926e006482660072083688007836ae006836b60073309ff33070a08018263f8068260f0068262e806826ae00682677001d3730bd8730c82698000d890077b673801dab70c8267b001d372087b684801d872078268b8017b6a4001d88a0482684801da8407d39008d4b808da870c510c06281613c9900ac97a087b684801d87a0782687001c9830982683801c98909c979097b6970018267b001c97207c947077b67b0018267b80182684001c978077b67b8014826600720826758017b679007826760017b678807826768017b678007826750017b6798074926f8064926f0064926e8064926e00683688007836ae006836b60073309ff33070a08826750017b679807826758017b679007826760017b678807826768017b678007826770017b67f806826748017b67f0068267b0017b67e8068267b8017b67e00683688007836ae0063309ff330b2033070a108267c8017b6708068267d8017b6700068267d0017a671006836700060a060152070628301133074033082050200003affcfe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489037c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d4890c7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c770f979908d4a90997bb10977718d4b707d49707977720d487077b6760016f7a7b6c68016fc97b6370016f387b62b0016f277b6758017b684801d48707d4a908d478089888207b6a5001d4a707977720d4870751070628d00f83973308207b67b8017b6940015020020355fbfe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703c5004617025e46170198008268500182694801d498081409fcffffff00000000826a4001d89a09826b580194b9948946078800520906282c0f8267b80183770433082050200403b4fafe8269780198983878781f98983078781e98982878781d98982078781c98981878781b98981078781a989808787819787918826980017879109898387878179898307878169898287878159898207878149898187878139898107878129898087878118269880178790898983878780f98983078780e98982878780d98982078780c98981878780b98981078780a9898087878098269c00178799898387878079898307878069898287878059898207878049898187878039898107878029898087878010a0b8267c8017b6728068267d8017b6720068267d0017a673006492658064926500649264806492640063308248267b80150200603b9f9fe7b67d8018267b801330850200803a8f9fe4826600649269806ff49269006ff49268806ff49268006ff9568200697882098882014090000000008000000d498029568400697882098882095698006979920d4890a8268d80197882098882014090000000024000000d4980b97772098772095686006289a038267d8017b6760048267c8017b6768048267d0017a677004836760040a06015107930d33074033082050200a0311f9fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489037c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d4890c7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c770f979908d4a90997bb10977718d4b707d49707977720d487077b6760016f7a7b6c68016fc97b6370016f387b62b0016f277b6758017b684801d48707d4a908d478089888207b6a5001d4a707977720d487075207350c83973308207b67b8017b69400150200c03b9f7fe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703ed004617026d461701688268500182694801d498081409fcffffff00000000826a4001d89a09826b580194b994894607df005109940b8267b80183770433082050200e031bf7fe8269780198983878781f98983078781e98982878781d98982078781c98981878781b98981078781a989808787819787918826980017879109898387878179898307878169898287878159898207878149898187878139898107878129898087878118269880178790898983878780f98983078780e98982878780d98982078780c98981878780b98981078780a9898087878098269c00178799898387878079898307878069898287878059898207878049898187878039898107878029898087878010a0b8267c8017b6788048267d8017b6780048267d0017a6790044926b8044926b0044926a8044926a0043308248267b8015020100320f6fe7b67d8018267b8013308502012030ff6fe4826c0044926f804ff4926f004ff4926e804ff4926e004ff9568800497882098882014090000000008000000d498029568a0049788209888209569e004979920d4890a8268d80197882098882014090000000024000000d4980b9777209877209568c00401978820d4780c3308ff3309ff64270a0101520728040a0d3307403308205020140386f5fe826a6801787a188269b0019898387878179898307878169898287878159898207878149898187878139898107878129898087878117879108269600198983878780f98983078780e98982878780d98982078780c98981878780b98981078780a98980878780978790882697001989838787807989830787806989828787805989820787804989818787803989810787802989808787801787998a83878781f98a83078781e98a82878781d98a82078781c98a81878781b98a81078781a98a8087878198367a0060a058267a8068168b0068269a0066f77977a206f88988820d4a8087b68d8019877206f98978920d497077b67d0019888207b68c8019517e08477e07b67b8016471491718491710491708490783770a11826ab80182a782a80882a91082aa187b6ab8027b69b0027b68a8027b67a0024926d8028267c8017b67d0028267d0017b67c8029567c0029568a0028269d8017b69c00250201603ac138367c0060a058067d0067b67d0018267c8067b67c8018267c0067b67d80133074033082050201803fbf3fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80852083b07826888008e887b68b8018268c8016f88978920826ad0016faa98aa20d4a9097b69d0018269d8016f99979920988820d498087b68c80183777b67b00133082050201a038df2fe46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078268b80178781f3308208267b00150201c031cf2fe3a086000023a096800023a0a7000023a0b7800027b68f8067b69f0067b6ae8067b6be006826890017b681807826898017b6810078268a0017b6808078268a8017b680007826878017b683807826880017b683007826888017b6828078268c0017b6820078268d0016f887b6858078268c8016f887b6850078268d8019788207b6848074926400783798367e006330804330a200a07955140f88210b8078215b0078216a8079511c007320050201e036638ff330740330820502020035df1fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67d8017b69c801d497076489d4b808d478089888207b6bd001d4b707977720d4870752078f047b69c00183973308207b67b8015020220313f0fe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268c001958704d88708826ad801c88a09d8a90ada880a8268d001c88a0ad88a08826bc801c88b0b7b69e8017b67e0017b6af001956700029568e0017b6bf80150202403dc33ff826708028262180282630002826a10022816023307403308205020260347effe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67d8017b69c801d497076489d4b808d478089888207b6bd001d4b707977720d48707520779027b69c00183973308207b67b80150202803fdedfe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268c001958704d88708826ad801c88a09d8a90ada880a8268d001c88a0ad88a08826bc801c88b0b7b6968027b6760027b6a700295678002956860027b6b780250202a03acd3826788028262980282638002826a9002018268d801d3870bd8870c64808264c001d84308dab80c8269d001c99a0bd89a0a8269c801c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d498085208540183787b68d8018267b80150202c03dbecfe83783307018269d8010a0e01d49b07d4a808d48707987720d49808978820d4870752071e0183b73308207b67d80150202e03a6ecfe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826868958704d88708826a70c88a09d8a90ada880a826878c88a0ad88a08826b8000c88b0b7b6928037b6720037b6a300395674003956820037b6b380350203003a6d4826748038262580382634003826a5003826870d3870bd8870c6480826468d84308dab80c826978c99a0bd89a0a82698000c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d4980851085601003307330833003203288cebfe33085020320386ebfe837833070133090a0e01492650024926480249264002140700000000717b484e956840027b67580233075020340395ebfe49263802492630024926200241330704956820024926280233003c032872ebfe492610034926080349260003140700000000717b484e956800037b6718033307502036034eebfe4926f8024926f0024926e002413307049568e0024926e80233003c03282bebfe492690034926880349268003140700000000717b484e956880037b67980333075020380307ebfe49267803492670034926600341330704956860034926680333003c0328e4eafe4926d0034926c8034926c003140700000000717b484e9568c0037b67d803330750203a03c0eafe4926b8034926b0034926a003113307049568a0034926a80350203c03a1eafe330824330750203e0355eafe83783307013309240a0e0183787b68d0018267d8015020400339eafe83783307018269d001330042030a0e01827810827918827a088277d4a909d4870ad49a0a98aa20d49808978820d4a8085208a7009511f07b10087b15837733082033052050204403eee9fe33026478721f46171e6546171d7446171c7046171b65330a63787a1a787a193303617873187875174617167433096f7879154617146e78751346171248461711544617104578750f46170e74787a0d46170c65330b72787b0b46170a697872097875084617073a330c79787c06787b0578790446170374787a02787301330846787882100882159511103200007c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d498087c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c751f97bb08d4cb0b976610975518d46505d45b0b97bb20d4ba0a7c7b097c7c087c760a7c750b97bb08d4cb0b976610975518d46505d45b0b7c7c0d7c760c7c750e7c770f97cc08d46c0c975510977718d45707d4c707977720d4b7076f766faa6f956f89d45907d46a08d47808988820d46707977720d487075207b90183a73308207b17087b19187b1a105020480324e8fe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461703a00046170279461701c300460708d45606140500000000010000001408fcffffff00000000821910d88908821918949894684617045108170182170883770433082050204a0387e7fe821a1082191846171f2046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617019558dcd88a0894989468460751089300646b82160883672433082064a57b1b50204c03fde6fe1408bcffffff00000000d8850846171f2046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170182191894988219949846075208040083674433082050204e0376e6fe33036478731f46171e6546171d7446171c7046171b6546171a63461719633302617872184617172046171674646b33066f7876154617146e4617132046171248461711544617104546170f2046170e7446170d6346170c65330c72787c0b33056978750a787309461708204617073a46170679787c05787604461703744617026378720146074633086464b750205003e3e5fe8378330701330964330052030a0e01828918828a10828b0882887b79187b7a107b7b087b783200951120ff7b10d8007b15d0007b16c8009515e0008411f0828a18828910828b087b19107b1a08d4a90988ba01949a7b1738510a7a01828695671fd867087b1b18c8b8088488018477e0957920d87907c8780ad88a0bda770b492198007b1980007b1a88009517a000951880007b1b900050205403bf52ff8217b8008219b0008218a800821aa0007b17287b1820d48707d49a08d478089888207b1930d49707977720d487075207050183a73308207b1a5020560305e5fe8218086f888219106f99821a186faa6f6b98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780182173882187b788218287b78188218207b78088218307b7810955120ff8210d8008215d0008216c8009511e000320000491170491168491160140700000000717b484e9518607b17783307502058032fe4fe4911584911504911404133070495184049114850205a0315e4fe330824330750205c03c9e3fe837833070133092433005e030a0e014917184917104917083308607b7832005107b4007b16200a0d4911584911507b174095176095184049114850206003d3fd8217787b17388217707b17308217687b17288216600a0d019568207b1618d86809821b28c89b0ad8ba0bda990b821930c89b0bd89b09821c38c8c909d4b80cd4a909d49c0c98cc20d4b909979920d4c9095209416476987720520739838783687b1810502062031fe3fe7a16800083778318800033090a0c0181178000821620821838821930821a28821b18821c10aec70e00330a33093308330b60017b6b7b6a087b69107b6818955160ff8210980082159000821688009511a00032009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b172852081b029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b168367330820330620502064035de2fe78761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085a018365330820645750206603c9e1fe46171f1c46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109cb00835720330820502068033be1fe46171f46171e46171d46171c46171b6446171a654617196c461718694617176146171666330c20787c15461714724617136546171266461711734617106e46170f6146170e7246170d74787c0c46170b4846170a5446170945787c084617073a46170679461705724617046f4617037446170263461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a0fe7b1058017b1550017b164801951560018411e082897b19588289087b19508289107b19488288187b184082787b18388278107b18308277087b172833074033082050206a0334e0fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa77b17106f977b17206f277b17180a0b017b17088217286f778218306f88988820977920d498089877208219386f99979a20d4a7077b17c8007b18c0009899207a19d0008219108217407b17f8008217487b17f0008217507b17e800821720821818d48707d46908d47808d46707988820977720d487078218587b18e00052070d038397330850206c039ddefe7b17583307330850206e038fdefe482100018219088e98fc089a897b1938017b1930017b1928017b1920019519c000979920989920978823d498069518e00097882098882095192001979920d4890a821b5897bb2098bb2097772098772095180001978820d4780c3308ff3309ff64670a0164769517a00033007003951160ff7b1098007b1590007b1688009515a0008411e064760a0d285cfa5206199551a0fe82105801821550018216480195116001320033074033082050207203ddddfe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b17587b1950d497076489d46808d47808988820d46707977720d48707520712017b194883973308207b1740502074039bdcfe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708821848958704d88708821a58c88a09d8a90ada880ac86a0ad86a08821b50c88b0b7b19687b17607b1a70951780009518607b1b785020760337f9821788008212980082138000821a9000821858d3870bd8870c6484821948d89308dab80cc96a0bd86a0a821650c96206c9a606d8cb0ac9a606c9cb0bc94707c98708c99307d46808d4b709d48909d4b808989920978820d4980851080400837682174064685020780390dbfe837833070164690a0e330733007a0328addcfe330750207a03a7dcfe33070150207c039ddcfe9511807b10787b15707b1668951580008411f08282828308828410828818829a829b08829c1082991864767b19187b1c107b1b087b1a7b18387b14307b132895174095182064197b122050207e033107ff821750821858821940821a487b67107b68187b697b6a0895518082107882157082166895118000320049489220248414d249525252a22a2529499224499224499224499224499224499224499224494a4a43222449928490244992244992244992244929a9494a124948922449922449922425499224499224499224499224499224499224499224499254254992ac506a15aa86845aa14a232222490849922449922449922409492149881a812020202011119110111111222222412020201111912449890808110189888824494a22222249925244444488880891888888888848922449922409929024499224499224494a9224499224499224499224499224499224499224499224a94a92243111119188882889888824494a9324492249152954695249484992244992244992244992244992244992244992244992244992244992244992542529a52449122124254992144a292549922449922449922449922449922449922449922429094992244992244992244992a4144a4a92aa24499290442a499224244992244992244992922449922449922449922449922449922449922449922449aa922449562835494928a5244992244992244992a424499224499224499284529aa42495244922844891482422454424499224491211114924124591482445929024499224499224494a9224499224499224499224499224499224499224499224a94a922459a15449a14a93244902480a4952420a25699224252949491225a924495292a48888484a92244989442211111122223522224992244992440a29a59424499224499224499224499224499224294992244992148a1411519524499224499224494a1211114544001185249284144ad22425a9141191244992249188084944122291882222222222224244a422a22449922429924a24499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224494992244992244952952445444485529a24494a922489942425499224490995524a92244992244992244992244992244992942449922449529224499a244922844811114992242222929292444488880811914a4a9224094992244992244992a4244992244992244992244992244992244992244992244992aa244992154a2d854a2925499224499224499224499224499224494a922449922485529aa4249524492284a42449924229a5244992244992244992244992244992244992244992242521922449922449922449922429859292a42a49922424914a49922421499224499224499294244992244992244992244992244992244992244992244952952449b242a9a5a0524a499224499224499224499224499224499292244992244941291a1111292949922449922449922489244992244994344992224992244992244992244992244992244992242949922422225a41299a049024955241299a244992922449aa26012449a5942449d20a4ad1888848524992482212494992448a2495248a44248924514423222922924892449244928888888888888808221240041089a2888888888888888888442391288a48242212894644524424912489248924111111111111111104100144a2282291482412894422d18848928a440091288a88484434229222228924492449248988888888888888202222222222222222229188482412892449922449229148241289449188886805a58a1489888888888888888888884422914824128944229148444444444422514444444424128944229148241289442222222222222222222222222222888888884882244992244992244952922449922449922449922449922449922449922449922449559224c95210455194244992244992244992244992244992242949922449921494a249924a922449925205a568929224492449924a09aa5292244992244992244992244992244992a4244992244992a44992a42449922491929412542925499224499224499224499224499224494a9224499224499224494a92248d8848524492248928911451092211492249244992244992244912499224499224499244922449922449922429499224499224494a104992244992244992244992144992244992942449922449222992441249221115952851a2049088181191242a22222212258848242a229148128944229148241289244992244992248944221125489224499224499248241289442291482449922449914492482249922449922492482491482422222222a2288aa8241211d18888489292244992449224259148544a10918824499224499224499224499224294a22492449928812442292449248922449922449922492244992244992248924499224499224492225499224499224490922224992244992244992244992922449922449922449922449242949224992a822a294520288888811914854444444244a414422121591482445229148241289442291482412894422914824128944229148249224128944822489442291482412894422914824128944229148241289442291481449248924922449924492241289441289442222222222a228224900492a224992489224924845448a884910455149922449922449922449922449922449929224499224898888884824121191082222929488886844449208212222229288101191482412894422912448499224499224499224499224499224499224499224499224499224499224499294524a92244924128988888844902449922411894892244992244992245941a9555045932421242549920a24419224499224499224294992244992244992244992244992244992244992244992a42a49926405a58a1454d12425294945444492549224499224499224495292529228499224899234490009204929922449923449528a244992244d92a4922449929224499288886805a5684444244424112122114422222222222249922449922490044992244992244992a4244992244992244992244992244992244992244992244992aa24499205553449492a499294244912499224499254122425499224499224499224499224499214a520922449922449922449922449124052451224499244444444444424111111111129499224494a92242d454b9224499292942449122449922449922449929224499224499224499224499224499224499224499224492aa534499224494925414a4dd2642928459394244922a9244844442411491289484444922492489294d2244952922449244992244952499094244992244992244992244992244952948248922449922449922449922449004915491011111111118988888888888888888894244992242549922649929224492249922449924a8224499224499224499224499224499214a52488244992244992244992244992000248a9224910111111111111111111111111491229899224920449922449922449922449924845922449929224498ba2284989249248228924128924924822892492482492482289249248229148228924922449924892044992244992244992244992a414142922a22a2222222244446a44244992248a4422499024499224499224494a9224499224499224499224499224499224499224499224a94a92244992948224499224499224499224091129252529492222222205490a42444424012492489204902492a4264d6a499224499224499224294982944a4992244992244992244992244992244992922449922429492a4992244892244992244992242549922449922449059024952449922449922449922449922449922449a5a42429499224910491482412894422914824922449124522914824128944229148241249824892244992244992244992a414142922a22a222222222222352222924822892449a42012894422914824128944922449a248241289442291482412894422491049922449922449922449929482224544542512894444448888d4888848224924912449244924492249244924128988881011a94824128944221191541411a524258988888888888808a42012894422914824128944229148241289442291482449922412894449104992244992244992244992948222454454454444448488484544444424419224499224499224294992244992244992244992244992244992244992244992a42a224992448908a2288a92244992244992244992244992244992242549922449220144a21291045114454992244992244992244992244992244992922449922449410821444444444444144911115112244992244992244992922449922449922449922449922449922449922449922449aa22529224112582244992244992244992240911124924492211111141444482244892244992244992242549922449922449922449922449922449922449922449925445a42449224a04499224499224499224491222249248924422222282888824419224499224499224294992244992244992244992244992244992244992244992a42a22254912512248922449922449922449921021914492241211111144448ca44892489224499224b182522322808882889088484404105110111211a4a0a44541299aa4922449499224912449922449254152922449922449922449922449922449510a2249922449922449922449922401245524414444444444928888888888888888889424499224254992264992922449224992244992940449922449922449922449922449922429521244922449922449922449922449022880a454240922222222222222222222112549222529221249224982888888884892244992244992248924499224254992464444922429498224499224499224499224499224499224499224499224499224254992244992244955922449922449922449922495a4449224892429a8524a922449922449922449922449922449929424499224495292241111519200928224920429288926494a499224494a4a9224092029489212a4a0249a24494a9224919424491249929224499244a90a2a2d499224499224499224494a9024499224499224499224494a92464444922449459224a524494a92244992888888202222499224899420499224499224499224499224494a92244992a424499224494992244992a4244992244952924892244912499224492401a4224992242995a0a449922449922449922449924409922449922449922449922449a5244944443422028828880889085250d20a4ad1888848494a124a52922449528224494a44449424494a92248924499224492a0992244992244992244992244992244952949220922449922449922449922449020820a58a24414444444444444444444444444492a424254924099224499224499224499224498a244992242549924644242922492249118948248a2489a444929444241245922425499292481489442245a2a4440445254992244992244992242549922449922449129100028844512292208aa2284992244992244992244992244992244952922449922489a244009188442492a0a2244992242549922449922449922449922449020820124589488294524a92244992244992244992244992244992942449922449a2285124914412898804211149224992244992244992244992244594204a92244992244a92244992444992244992244a9224499224499224494a224992444424804854444422492289a22250442391882491442449244992241140092449922449922449922449922291482412452289244924221228499224499292244992244994244992244992244524452411492491442249442410454549922449922449922449529224499224494a9224499244229224499440942449922449942449922489922449922449942449922449922449929444922489884800918aa4489248a2280a5444238924914824494492244912259024499224499224499224498a44228994442a494444232229224922914412894422118924a9442291884422221241241291482412898888880811914a92444a9224492589442291200882200882200882200882200882200882200882200882888888888888888888888888888888884492244992244992244992244992244992244992244992244992242549922449922449128944229188441289442291884412894422918844128944229188442422222222222222222222222222222222499224499224499224499224499224499224499224499224494992244992244952295525499224499224128944444444521111514404105120222422900225d188882425499244922425491249524924124522911449924849201291244992244992244992244992242952025192244992245192244992244a92244992245192244992248924224992922849922449241240121591449248a2a80215d1482422491291249124499244092449922449922449922449922201241289449148224992409592244992244992244992244992244952922449124829a524499224499224499224499224499224499224499224258a442211118d888848498a484412491249248a4489449148248a442251241289229148148944a248a224d54849249144124992244444444444444444444444440411111149124992121188480091a82449922449922449922449922449922449922449922449922449499224499224495295244992481148a28a22914814291089249248228924924822914412492491441249249248228924924822894412492491441249a4249024499224499224499224494a8122454454454444448488488d8824891111115144444412489224499224499224499224499224499224499224499224495292244992244992542595244992244a9444a22449942849a224492249922489228a28a2284922818808111122840811111121224284081121128944225144444444444444444444444444444444444444444444444422918888888888484424128944444444449088882425491249922449922429118888888808218448224922890490248d88242925919248a440241289442291482412894422914814894422914824128944229148240924499224499224499224499252a048111145511411111111212252918844444444444444442415111111111111212222224992942425128944444488885492284915452291488148241289442291482412894422914824128944229148241289442251128824499224499224499224494a812245441445514444444484884845444444444444444424154544442451922a8a442291045292244992244992244992244992244992244992244992244992244992244992244551141111111111111111111111111111111111111111114424224992282222924892442292489224491251a22412251145208410222222222222a228121151248a4422512422224a024992244992244992a4244992244992244992244992244992244992244992244992aa889424924494082449922449922449922449889048224924918888882022224920499224499224499294244992244992244992244992244992244992244992244952159192449288128124499224499224499224091112492489241211111144442409244992244992244992922449922449922449922449922449922449922449922449aa225292481251229024499224499224499224214222892491442222228288889114492491244992244932888800220a4484440452a0a445044a4493a4924492248988884844245094a224499224499224499224499224499224494992244992a4404a292549922449922449922449922449922449922449922429058a34922449129148924400919492524a29494952929494a424499224922449922489449292244992244912499224294922499224114922124992244992244912499244114551645224492422222222224244a4264952119148241228a5942449922449922449922449922449922429499224499248221149924844529224499224499244999244444423222225495292404a92244992244992244992244992244992244992244992244992244992244992a4544a91482422222222222222499124494a24128988881011a914918824499224499224499292244992244992a49212254992244922490a542925499224499224499224499224499224494a92244992242949928888284900498124920452a0249a2449494a920a922429499222222249921225499224499224491211111144442449922451124829a5244992244992244992244992244992244949922449922425491211118d2480448124920452a0249aa424254992242549922454812a2935498a244992888848922449922449929054a0529224491111d1240124059248124881926844442449499224492249929212484a92244992244992244992244992244992244992244992244992244992244992a44a4992244992284992244992244992244992244952928888682401240a249124900225d1242549924892a49212a84a9224499224499224494a922449922449922449d28888244992248a2490922449922449922449922449922449922449922449922449922449922449924492aa8888888888889424494444242211111149922449924892442449922492285320254992244992244992244992a42449922449922449922449922449922449922449552491441249924881889424499224499224499224499224499224499224499224499224499224499224495544922449924892244912492249924812499224491291442449122550241289442291482412894422914824128944229148241289442291144824128944229148241289442291482412894422914824128944225112489224499224499224499224a540912222aa222222224244a44644444424819424499224499224499224499224499224499224499224499224499224499224495524914412499248248924492249124992244944094451942449922449922449929424499224499224492289442491442292488a244912492222a2111140448188908888880820a24044484420054aa2499224a9a42449922449922425499224294992a424012405924812488192684444a4229148a4401445519212492491441249241249249144124924914824914412492491442291441249922449924892049224499224499224499224492950a48888aa888888881011a911912449228a4422492049922449922449929424499224499224499224499224499224499224499224495295244992242912489224499224499224499210915252929224222222128124022122229200124924490248124952a3494d9224499224499224494a92404a2925499224499224499224499224499224494a92244992a424a92449128124499224499224495292244992244992540049529124499224499224499224499224499224959292a4244992441225a922494a920291482412894422914824128944229148241289442291489224491225814892244992244992244992a414285244445522918888880811911a11912449922449529224499224492291884844448488482512898844229188482a899254912449498148241289442291482412894422914824128944224992244924128992402449922449922449922449520a142922a22a2222222244442a2222222209244992244992244992922449922449922449922449922449922449922449922449aa22922492448908a4945292244992244992244992244992244992a424499224494402884425220944511425499224499224499224499224499224494a922449922411082184888888888888222922224a024992244992244992a4244992244992244992244992244992244992244992244992aa8894249244940824499224499224499224498890482249249188888840444402492049922449922449929424499224499224499224499224499224499224499224495215919244928812812449922449922449922409111249248924121111118888184991441249922449922456a0d4880820a2404448444444041051202224229002252d2250229aa42449124995404a92244992244992244992244992244992244992244992244992244992244992a42a49294d92242549924492244992249504929224499224499224499224499224498a52209224499224499224499224491240524512481211111111111111111111914444444a92244992922449932449499224912449922449258124499224499224499224499224499214a52410499224499224499224499224010490948a24818888888888888888888888489224922225914492409224499224499224499224a222499224494992a41111911249a2241289a24824122910455194a444124924914412894412492491441249241249249144124924914824914412492491442291249024499224499224499224494a8122454454454444448488488d884822922489925491244949024992244992244992a4244992244992244992244992244992244992244992244992aa2449922409200288140924499224499224499224490811458992284922222222221281240221222292482491248924912435695293244992244992244992922490524a4992244992244992244992244992244992922449922429492a4992442025499224499224499224499224499224499224499224499224499224252949922449925492244992241149145144114524291089442291482412894422914824124522914824128944229148241249029124499224499224499224492950a48888aa888888881011a948442492049224499224499224494992244992244992244992244992244992244992244992245549922449922281244992244992244992240921a28888888888442089408888882412492449224924494d9ad4244992244992244992a42409a4945292244992244992244992244992244992a424499224494a924a9224114849922449922449922449922449922449922449922449922449922449494a929224499254924892441248922449922449922449922449922449922449922449922449529224499224499254452449922449522490244992244992244992242144141111111191082411081111914422892449248924a949931a49128924499224499248491248294a499224499224499224499224499224499292244992245124a9244912819424499224499224499224499224499224499224499224499224499224499224495114450a4422914824128944229148241289442291482412894422914824128992402449922449922449922449520a142922a22a22222222222244446a44442491482412914892248944228948222211222222222222222215111111111111111191544444443449024992244992244992a4244992244992244992244992244992244992244992244992288aa288248924498908244992244992244992244988109100225191441288244992244912499224499224922449922449942449922449111111111189404481082184480248249144124092484444443492409224499224499224294992244992244992244992244992244992244992244992248aa22822492249948840922449922449922449928488880410898a88241049922449922492244992244924499224499228499224499222222222221281880211420891049048228924802431496a94042291244992244922499224499244922449922425499224491245442989944422899254519288888888888808a2888888249024499224499224494a9224499224499224499224499224499224499224499224a94a922411459428892849140924499224499224499224495224110821848888888888888888888828a2884414491111512009244992244992244992922449922449922449922449922449922449922449922449aa2252924812512290244992244992244992242142228924914422222202111149024992244992244992a4244992244992244992244992244992244992244992244992aa8894249244940824499224499224499224498890482249249188888820226224451249244992244992282250a24992244a049224499224499224499224444892244912898888082222929424492449922449925811054a8d8800220a448444444444001105224222222222808802112111111111404481889088400a94b48840896892922449249504928888244922894444229144124912494a699224499224499224294992244992244992244992244992244992244992244992a42a499244491248922449922449922449122224010490a4124902492449922449922449922449925451920a04904892244992244992244992245599049288888824a224222222229224119144242950124d52928a8888244992122549922489888808444424499224510aa4944a922449922449922449922449922449929424499224492a499288886892009202492409a4404934492a529224419224699224499224499294540251d4489224ab2c4944449424494a92248924499224492a092425499224499224499224499224499214a5402449922449922449922449922480a48a249024111111494444444422221111119192244992a42449d28888484992a4244912489224499224499224254992244992244992244992244992244992244992244992544a69524a9294442492482492244992880aa40291282222922492489224912455444444a49288882809244992244992244992922449922449922449922449922449922449922449922449aa92942449a42490244992244992244992242142922449922489248888485292244992244992244b8152451448204922252949494a929440922425492200"
						},
						"deployedBytecode": {
							"object": "50564d0000d850010000000000010700c19000c000400380800a3b069ec43869334bd614dfc15219a3f300276ef3057e0064b42729c893e3b5d351d4076f9bac4d79246493b4da24a6aefc7e9c394e92ac55617356247c187da709adb2949dc70b8f3d67436717d4ff3477c9abb31e09a6077a7ccf44b26a4ec28550253778baf5a8c03297136da385032673554343b47ebc15360fdbc187260481251200000000070000000b0000001900000027000000350000003b00000044000000510000005c0000006b000000760000008300000093000000a3000000ae000000c0000000cb0000006164647265737363616c6c63616c6c5f646174615f636f707963616c6c5f646174615f6c6f616463616c6c5f646174615f73697a6563616c6c6572636f64655f73697a656465706f7369745f6576656e746765745f73746f72616765686173685f6b656363616b5f323536696e7374616e74696174657265665f74696d655f6c65667472657475726e5f646174615f636f707972657475726e5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f646174617365745f73746f7261676576616c75655f7472616e73666572726564051302c18a240463616c6cc19324066465706c6f7906c1fd4e81bf03c117256500004d01005201006f01000302003403004903006d03007903009b0300900400db0400f004002e05005c0500900500f905000406006007008e0700b00700c30700ca0700d60700eb0700590900280a00910a00fa0a002b0c004b0c00f70c00040d00f90d00040e00350f004d0f00590f00880f009e0f00a80f00b60f00f01000c111006f12008712009112009f1200211300271600341600a816004e1800701800a11900b71900871a00941a00f61a00c51b002f1c009d1c00ce1d00e51d00b61e00c41e00562000642000962000a420003121003f21009922000224007525007826009326006328008f2800c429009a2a00a82a00f02a00fe2a00492b00722c00d92d001c2f00ab30008b31009c3300623400a935003637006f3800a43a00b93b00573c009b3c000c3e00963e00ac3e00b93e00fa3e00063f003840005240005f40005042005e4200aa42001443002043005044005d4400e24400754500024600bb4600c946001a47006e48009b4800a94800e34800dc49006f4a00fc4a00274c00bb4c00544d00f84d00994e00e84f00525000fc50003f5200f05200015300e75300db5400505600375700a257004d58003459009f5900825b008d5b00745c00df5c00665d00a95e00a85f007e6000f26000376200de6200f76200036300486400ef64000e6500536600fa6600676700976700dc6700fa67000568001e68002c6800a66800396900c66900f06a00826b00216c00cf6c00b76d00636f007770009070009b7000aa70001b71003271003d71004c7100e97100547200657300a57300657500d975008b7600a97600b47600c97600d776003f7700d977006d7800067900a97900807b00657c007d7d00577e00707f000580007c8100028200cb8200d48300ce84003a8600b48600268800758e00948e00a08e00af8e007d8f00109000889100029200be92006b93004096008b9600f39700349800749900df99009b9a009f9c009c9e00139f00d69f00c2a0002da100b1a200f7a200e3a3004fa40071a5003aa7000da800c8a80012aa00bdaa00ddaa0027ac00d2ac00f2ac003cae00e7ae0053af007aaf0099af00a5af00c1af00d1af0034b00006b100d9b100b3b4005eb60032b80022b90037ba0051ba005dba006cba00a1ba005abb009bbb00b7bc00d1bc00ddbc00ecbc004fbd0065bd00f5bd0051be006bbe0077be0086be00f3be00eac00004c10010c1001fc1006bc10017c2005cc200d8c3006dc400bfc500b4c7009bc80083c900eec90077ca002acc007fcd00c6cd00e5cd00f1cd0000ce00c1ce00dbce00e7ce00f6ce0036cf0089d000f4d0009dd100e3d20097d300a8d3008ed40087d50030d70017d80083d80037da001edb008adb0012dc005add005ade0033df00a8df00f2e0009ee100b8e100c5e1000fe300bbe3002de4005ee400a5e400c4e400d0e400ece400fce40036e500c9e6005de700ebe70017e900ace90047ea00eeea0004ec005ced00c7ed0090ee00f2ef00b7f000c8f000a4f1009df20034f40020f5008cf50011f60057f700f5f70006f800e2f800dbf9002bfb007cfc001afd002bfd000bfe0007ff003200011e01018a0101580301b204015305014e06015f0601f606014e0801ec0801e70901f80901810a01e10b010c0c017a0d01eb0d019d0e01aa0e01f40f01a01001c010010a1201b512012c1301611301091401811401b21401f91401401501871501a61501b21501ce1501de1501191601a61601e317018018010a1901911901241a01331a01c21a01021b01181c01321c013e1c014d1c017e1c01e81c01aa1d013e1e01cc1e01d31f016a21017821010422012a22016c23010b24017724019324019d2401ee24018b791052093b3309010001ae9833c8780883881f8488e0553801000128390a800002ae8a123d088000023308900002c8870732003308900002c88707320000009511d87b10207b15187b161082897b19088289087b1982851082861883773308205010029f6f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a04013d07840002510507501004095010062c029511c07b10387b15307b16289515408411e033074033082050100896fe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a1101821710821818821908821ad49808d4a707d487075207370133074033082050100a02fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cd1fc837833070133090a0e0183666467330850100ebcfc8377330833090a0201390888000251080d330790000383770a0f016467330850101098fc8378330733093300120a0e019511a0fe7b1058017b1550017b164801951560018411e03307403308205010146afc46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617033306840002461702461701460739088400024617064617054617045318048b038317200133080a030181173c015a47bebbf0fa78330800501cde5a4787541cdeb60051470764ee8f01015247b4ee69a259033300169511b0fc7b1048037b1540037b163803951550038411f0380784000249210802492100024921f8017b17f0014921280249212002492110020495173002951810029519f0014921180233009a0028b21c33080050dc195a471557dc195a5147bfbbf0fabf005247b70e790ae902330018951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1128370483888804aa874e0252478f66a3eaab0250101ace3983881607aa876c0252473369d269960233001c951140ff7b10b8007b15b0007b16a8009515c0008411e04911784911704911684911608317600a1128691233001e951160ff7b1098007b1590007b1688009515a0008411e04911384911304911284911208317200a1128531580674921980049219000492188007b1780004921b8004921b0004921a000049517c0009518a000951980004921a800501020f73a8217c0007b17188213c8008214d0008210d8008212e000821ce8008216f000821bf800821a00018218080182191001821718017b17387b19307b18287b1a207b1b587b16507b1c487b12407b10787b14707b1368951760951840951920821a187b1a605010229de50033074033082050102401fa7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851089b00003300269511a0fe7b1058017b1550017b164801951560018411e049213801492130014921280149212001831720010a11289134330028951140ff7b10b8007b15b0007b16a8009515c0008411e04911784911704911684911608317600a1128910581680152081f33002a9511c87b10307b15287b1620330740330820330046032853f833002c9511f87b10330733083300ee002840f8837750102e3bf88378330733093300300a0e019511f07b10087b1564753307403308205010321af87c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b5782100882159511103200821730821838821928821a20d49808d4a707d487075207fe023907840002541723f5028317603308040a038217607b17188217687b17108217707b17088216783308203307501034acf66f688219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989a08787a097879089889387879079889307879069889287879059889207879049889187879039889107879029889087879017878330720330820501036ddf546171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750103874f583778319603308400a09821778821870821968821a606f776f886f996faa7b1a587b19507b18487b17404911784911704911684911604821800020831840831a60831b80003309ff33070a088217707b17088217687b17108217607b171833074033082050103a0bf57c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850103cdaf3837833070133090a0e0182180897882098862083777b170833082050103ebaf36f688219106f99821a186faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c3308208217085010400ef3837833092033073300420a0e01828918828a10828b0882887b79187b7a107b7b087b783200821770821878821968821a60d49808d4a707d487075207fb013907840002541743f201831780003308040a03821780007b1718821788007b1710821790007b170882169800831780003308240a03821780008218880082199000821a98007b1a387b19307b18287b17207b16588217087b17508217107b17489517409518208219187b19403300449511a0fb7b1058047b1550047b164804951560048411e08289187b1968018289107b1960018289087b19700182887b18780182787b1858018278087b1850018278107b184801827618330820330733000a01280af233074033082050104601f27c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851081e0033073308501048d0f0837833070133090a0e837733004a28bdf0837750104ab8f083783307330933004c0a0e019511b07b10487b15409515508411f0491130491128491120140700000000717b484e9518207b1738330750104ebdf04911184911104901323307046418491108501050a7f033082433075010525df083783307013309243300540a0e019511a07b10587b15507b16489515608411e06476828718828910828a0882887b17187b19107b1a087b18491138491130491128491120481140208318831a20831b403309ff33070a08821738821830821928821a207b67187b68107b69087b6a9551a082105882155082164895116032009511e0fe7b1018017b1510017b160801951520018411e07b174082977b17488297087b17508297107b1758829618828b18828a1082890882877b1b187b1bb8007b1a207b1ab0007b19287b19a8007b17307b17a0004921f8004921f0004921e8004921e0004821c000208318a000831ae000831bc0003309ff33070a08018217f8008212e0008219f000821ae800d3670b7b1638d87608821758d8970cdbb80c821850d38a03d8a80a821848d82808db3a08d39707d4b707db7c0851086801330820330750105615ef8218186f888219206f99821a286faa821b306fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820330750105844ee83778319e0003308200a098217e0008218e8008219f800821af0006f726f886f996faa821b50c8ab0b821c48c89c0cd89c09c89b0bd3ab06d8ab0ada690a821958c88909c89a0ad89a06821738c82707d88908c88707c867078218404918384918304918284918207b8c7b8b087b8a107b87189551e0fe821018018215100182160801951120013200492190004921880049218000140700000000717b484e951880007b179800330750105ad6ed4911784911704911603233070495186049116850105cbeed330824330750105e74ed83783307013309243300600a0e01828918828a10828b0882887b79187b7a107b7b087b7832008213088212821718018218000182141001821a0801d3670bd87607821910d8490cdbb70cd32a07d8a20ad88308db7a08d39407d4b707db7c08510830037b136049219800492190004921880049218000017b12687b19709517a000951880009519607b16785010620bfd8217d8007b17108217d0007b17088216c8008217c0007b178217b8008218b0008219a800821aa0007b17f8007b18f0007b19e8007b1ae0004921180149211001492108014921000148212001208318e000831a0001831b20013309ff33070a088212000182190801821a1001821498473d976b03d47b0b98663d821808978703d4760698873d821c1097cc03d47c0c9747038eb888770001857301dbb8038ec88e67dbc807821b1801d46c0cdbc70346115f46115e46115d46115c46115b46115a46115946115846115746115646115546115446115346115246115146115046114f46114e46114d46114c46114b46114a461149461148461147461146461145461144461143461142461141461140781b38781a3078192878122098b73878173f98b73078173e98b72878173d98b72078173c98b71878173b98b71078173a98bb08781b3998a73878173798a73078173698a72878173598a72078173498a71878173398a71078173298aa08781a3198973878172f98973078172e98972878172d98972078172c98971878172b98971078172a98990878192998273878172798273078172698272878172598272078172498271878172398271078172298270878172184481f951720c878087c87197c89187c8a1a7c8b1b977708d4970797aa1097bb18d4ba0ad4a7077c891d7c8a1c7c8b1e7c8c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d479027c87117c8a107c8b127c8c13977708d4a70797bb1097cc18d4cb0bd4b7077c8a157c8b147c8c167c861797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d47a0a7c87097c8b087c8c0a7c860b977708d4b70797cc10976618d46c0cd4c7077c8b0d7c8c0c7c860e7c890f97bb08d4cb0b976610979918d46909d4b909979920d4790b7c87017c897c8c027c8603977708d4970797cc10976618d46c0cd4c7077c89057c8c047c86067c8807979908d4c909976610978818d46808d49808978820d487079437943b943a94328218187b82187b8a107b8b087b879551c0fe8210380182153001821628019511400132003307501064dee9837833070133093300660a0e019511a87b10507b15487b1640828a10828618828c088285d46c0bd4a508d4b808988820d4ab0b97bb20d4b8087b1738520830018297187b178297107b17088297087b171082977b17189557207b1730d85707c87c087b1828d8c808da7708c8a8087b1820d8a807c8760683573308205010685de982186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217388218307b788218287b78088218207b78107b7618821050821548821640951158320000821770821878821968821a60d49808d4a707d487075207ef013907840002541723e601831780003308040a03821980008217880082189000821a98007b1a387b18307b17289517409518207b192033006a9511c0fe7b1038017b1530017b162801951540018411e07b171882877b17088287087b178287107b17108286184921f8004921f0004921e8004921e000014921180149211001492108014921000148212001208318e000831a0001831b20013309ff33070a08286cfa8217587b178217507b17088217487b17108217407b171833074033082050106c95e77c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850106e64e6837833070133090a0e01837633082064675010704ee682186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780133082064675010727ee5837833092033073300740a0e01828918828a10828b0882887b79187b7a107b7b087b783200821730821838821928821a20d49808d4a707d48707520704033907840002541723fb028317603308040a038217607b17188217687b17108217707b170882167833082033075010760fe56f688219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989a08787a09787908988938787907988930787906988928787905988920787904988918787903988910787902988908787901787833072033082050107840e446171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750107ad6e383778319603308400a09821778821870821968821a606f776f886f996faa7b1a587b19507b18487b17404911784911704911684911604821800020831840831a60831b80003309ff33070a088217787b178217707b17088217687b17108217607b171833074033082050107c68e37c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a808510817003307330850107e37e2837833070133090a0e01837633082064675020800021e282186f888219086f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780133082064675020820050e183783309203307330084000a0e01951160ff7b1098007b1590007b1688009515a0008411e0828b829608828008829395ba1f7b1b58d8ba02c8200c7b1340d83a03d36c0a7b1648d86c0bdaa30b828410d80c0ada220a829218828318829610c84a0ad84a08c83808d32809d92808d86a0cda9c08d36a0ad4a909db980b510b19017b12287b16307b1738821758d447077b1318d43008d487079877207b1420d44808978820d487075207ed0064068118588317600a03018217788218708213687b1750d48707883a01947a510acb00821960821758957b20d87b07c876007b1b10c89b0b7b1958d89b02c8030cc82c0cd33c09d83c0ada920ad86009da7709821720c89704d87406821718c86707821648d36c09d8c60c821640d8b60bdb9c0bc84809d8890c8216507b1748c87606c86c0cc89a0ad89a09c8c909821628d3690cd89602821930d8a906dbc206d3a909d4c909db960b520b408219388217587b97208217107b977b93287b90087b98307b94108217507b97388217487b9718955160ff8210980082159000821688009511a0003200003307330850208600b0df83783307013309330088000a0e0182781082771814090000000001000000d38909d479099888208888019478939851080532009511f87b10330750208a0070df8378330701330933008c000a0e019511c07b10387b15307b16289515408411e0828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b9095209506476838883170a030182171082181814090000000001000000d37909d48909987a2088aa01948a939a510a258219821a087b697b6a087b67107b68189551c08210388215308216289511403200003307330850208e00d5de83783307013309330090000a0e019511c0fc7b1038037b1530037b162803951540038411e0829608828408829c828a829210d3460bd84600d8ac03dab3007b16f000c9460bc93b0b7b1ce0007b1a1801c9ac0c88cca00085cc018283108eb6dbb60c829b18828618c93208c90809d808007b12e800d8320a64687b1bd800c96b0bc9ab0bc90b0b8fb68e9adbb60ad4b909db9a0c510ca904647682191801d439077b1410017b180001d48408d487079877207b130801d43808978820d4870752077d0483988317a0027b18f8000a03018212b8028218b0028219a802d4280a889b0194ab510b5904821aa002821b1801c8ab0bd8ab0a821c1001c89c0cc8ac0cd39c07d89c09da7a0982170801c88707c87909d8790ad8870782180001c88202c82707c87a0a8217e0007b1720028217f0007b1728027b1b40028217e8007b1730028217d8007b1738027b1c48027b1950029517600295184002951920027b1a58025020920031fc8217080182190001d47909140700000000010000007b17c8001407e0ffffff0000000082181801d878078218100194877b19d000949751079e03821798027b17a800821790027b178800821788027b17b000821780027b179000821778027b17b800821770027b179800821768027b17c000821760027b17a0008217f800837820831700030a03018217c8009577c082181801d878078218100194878218d000948751073203821718037b1778821710037b1768821708037b178000821700037b17708217f8008378408317c0020a03018212d8028218d0028219c802d4280a889b0194ab510bf002821ac002821b1801c8ab0bd8ab0a821c1001c89c0cc8ac0cd39c07d89c09da7a0982170801c88707c87909d8790ad8870782180001c88202c82707c87a0a8217e0007b17a0018217f0007b17a8017b1bc0018217e8007b17b0018217d8007b17b8017b1cc8017b19d0019517e0019518c0019519a0017b1ad80150209400c8fa140700000000010000007b17c8001407a0ffffff0000000082181801d878078218100194878218d000948751074002821718027b1748821710027b1728821708027b1750821700027b17308217f8017b17588217f0017b17388217e8017b17608217e0017b17408217f800837860831700030a030182191003821a18038217c800d39707d4a70798982088880194a893785108f7017b1a207b19c800140780ffffff0000000082181801d878078218100194878218d00094875107b201821708037b17d000821700037b17188217f800837880008317e0020a03018212f8028218f0028219e802d4280a889b0194ab510b7d01821ae002821b1801c8ab0bd8ab0a821c1001c89c0cc8ac0cd39c07d89c09da7a0982170801c88707c87909d8790ad8870782180001c88202c82707c87a0a8217e0007b1720018217f0007b1728017b1b40018217e8007b1730018217d8007b1738017b1c48017b1950019517600195184001951920017b1a58015020960055f9821268018213600182197801821a7001821b9001821c980182178001821888017b6bf0007b6cf8007b67e0007b68e8007b6ad0007b69d8007b63c0007b62c8008217c8007b67b0008217207b67b8008217187b67a0008217d0007b67a8008217287b6790008217487b6798008217307b6780008217507b6788008217387b67708217587b67788217407b67608217607b67688217687b67508217787b67588217707b6740821780007b6748821788007b67308217a8007b6738821790007b67208217b0007b6728821798007b67108217b8007b67188217a0007b678217c0007b67089551c0fc8210380382153003821628039511400332000033073308502098008ed9837833070133090a0e3307330098002879d93307330098002870d9821730027b17c800821738027b17c000821740027b17b800821748027b17b000821750027b17a800821758027b17a000821760027b179800821768027b179000821770027b178800821778027b178000821780027b1778821788027b1770821790027b1768821798027b17608217a0027b17588217a8027b17508217b0027b17488217b8027b17408217c0027b17388217c8027b17308217d0027b17288217d8027b17208217e0027b17188214e8028213f0028212f802821c0003821b0803821a10038219180382182003821728039510d0007b10109516f0007b1608951610017b167b17e8007b18e0007b19d8007b1ad0007b1b08017b1c00017b12f8007b13f0007b1428018217187b1720018217207b1718018217287b1710018217307b1748018217387b1740018217407b1738018217487b1730018217507b1768018217587b1760018217607b1758018217687b1750018217707b1788018217787b178001821780007b177801821788007b177001821790007b17a801821798007b17a0018217a0007b1798018217a8007b1790018217b0007b17c8018217b8007b17c0018217c0007b17b8019517d0019518b00195199001951a7001951b5001951c30018216c8007b16b00150209c00066c8217e8017b17b0008217e0017b17b8008217d8017b17c0008217d0017b17c80033074033082050209e0077d77c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851080400837633082064675020a00042d68218b0006f888219b8006f99821ac0006faa821bc8006fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780133082064675020a2006cd5837833092033073300a4000a0e01827218828318827b10827c088289088274828a828810d3c907d8c909d84a0adb790ac9b807d8a707d8b808c92309c98909c9790957090532009511f87b10330733085020a60016d5837833070133093300a8000a0e01828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b9095209f9009511d87b10207b15187b16108275188276108279087b1982777b170883873308205020aa00bdd46f586f69821a6faa821b086fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018210208215188216109511283200009511b07b10487b15407b1638828b10828a18828c0882857b1a287b1c20d4ac08d4b50ad48a0a98aa207b1b30d4b808978820d4a8087b1718520822018297187b178296108297087b170882977b171083573308205020ac0094d382186f886f69821a086faa821b106fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801955720d85708821a20c88a09d8a90ada880a821830c88a0ad88a08821b28c8b808821b187bb77bb9087bba107bb8188210488215408216389511503200009511b0fe7b1048017b1540017b163801828b10828a18828c0882857b1cf0007b1a3001d4ac08d4b50ad48a0a98aa20d4b808978820d4a80852086b057b1be8007b178297187b17100182961082980882977b1718017b15d800835764853308205020ae002dd282121801d462087b15080182191001d45909d498089888207b160001d46909979920d49808520818057c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b1820017c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b1828017c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d489057c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7707979908d4a90997bb10977718d4b707d49707977720d4870683273308205020b000ead08219280178791098583878780f98583078780e98582878780d98582078780c98581878780b98581078780a9858087878097875089868387878079868307878069868287878059868207878049868187878039868107878029868087878017876821a2001787a18989838787817989830787816989828787815989820787814989818787813989810787812989808649b78781198a83878781f98a83078781e98a82878781d98a82078781c98a81878781b98a81078781a98a80878781982171801957320d8730964a7821a0801c89a04d8a40ada990a821c0001c8ac00d4b60a7b15d000d4750bd4ab0bd8c00a82121001c8a20c7b1cf800510bdf02330733084921e00033096f6a7b1a20821ad0006faa7b1a18821a28016faa7b1a10821a20016faa7b1a08140be0ffffff000000007b1b288212e800821af0008215d800017b19c8007b18d0007b17d800821b3001d4b20b821628d8650c7b1af00094ac94bc8217f8007b17c0007b10b8007b14b0007b132801510c85027b12e8009557207b17200183773308205020b2005bcf8218000182191001d4980882191801d86909821a080194a994895109510282182001d858098215f000c895087b181801d85808da99087c790c7b1908017c790d7b1900017c790e7b19f8007c790f7b19f0007c79107b19a8007c79117b19a0007c79127b1998007c79137b1990007c79147b1988007c79157b1980007c79167b19787c79177b19707c79187b19687c79197b19607c791a7b19587c791b7b19507c791c7b19487c791d7b19407c791e7b19387c771f7b17308216e800c868087b181001d8680782183001c878087b1830018215280183573308205020b4007bce82183078781f82183878781e82184078781d82184878781c82185078781b82185878781a821860787819821868787818821870787817821878787816821880007878158218880078781482189000787813821898007878128218a0007878118218a8007878108218f00078780f8218f80078780e8218000178780d8218080178780c46170b46170a46170946170846170746170646170546170446170346170246170146078213d8009533018837018214d000c87404d44307887b018217e000c87b0bd87b078210c800c87000821708d87307821910d39408d89409da8709821718d87b06821a20d3a008d8a00cda860cd3b707d478089557207b17f000da890cd857098216b000c896077b17e800d8670ada990a8218b800c88a0a7b1ad800d88a0a8217c000c87a0a7b1af8007b1be00082152001821a180182121001821928017b1918017b1608017b1800017b17100164378213f00064488214e80064098210d800520c6dfd821b7bb37bb4087bb0108217f8007bb718821048018215400182163801951150013200009511a0fd7b1058027b1550027b164802951560028411f0828c18828610828b0882827b1b407b1c48d4cb08d4620bd48b0b98bb207b1638d46808978820d4b8087b17285208930882a7187b170882a7107b171082a7087b171882a77b17208297187b17b8018297107b17c8018297087b17c001829683273308207b177b12305020b6006acc46171f40821bc801d4b6088219b801821cc001d4c909d49808988820d4b909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208d007646a8217309578407b18a801d87807821840c878097b19a001d88908da7708821738c88706d87607821848c887077b1798017b1a700183a73308205020b800a4cb8212a801d462088219a001821a9801d4a909d498089888207b169001d46909979920d49808520866077c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b18d8017c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b18d0017c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d498087b1888017c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7707979908d4a90997bb10977718d4b707d49707977720d4870683273308205020ba005dca821bd80182148801821ad001787a1098483878780f98483078780e98482878780d98482078780c98481878780b98481078780a9848087878097874089868387878079868307878069868287878059868207878049868187878039868107878029868087878017876787b1898a83878781798a83078781698a82878781598a82078781498a81878781398a81078781298a80878781198b83878781f98b83078781e98b82878781d98b82078781c98b81878781b98b81078781a98b8087878198217309578607b18b001d87807821840c878096492d88908da7708821938c889037b166801d4a607d4b408d48707d89308821948c889005107db0364b6330b330c4921780149218001821768016f777b17686f477b17606fa77b17586f677b17501407e0ffffff000000007b1788018216b8018217c8018219c001821a7001017b1c68017b1b70017b17c801d4670782188801d88a087b19c001949894787b1060017b1358017b1250018217b0017b17d8015108d3047b16b80195a7207b17d001837733082064a65020bc00d0c88218900182199801d498088219a801821a8801d8a909821aa00194a99489510999048218d001d868098218c001c8980a7b1aa801d88a08da99087c797b19c0017c79017b19b0017c79027b1998017c79037b1990017c79047b1948017c79057b1940017c79067b1938017c79077b1930017c79087b1928017c79097b1920017c790a7b1918017c790b7b1910017c790c7b1908017c790d7b1900017c790e7b19f8007c790f7b19f0007c79107b19e8007c79117b19e0007c79127b19d8007c79137b19d0007c79147b19c8007c79157b19c0007c79167b19b8007c79177b19b0007c79187b19a8007c79197b19a0007c791a7b1998007c791b7b1990007c791c7b1988007c791d7b1980007c791e7b19787c771f7b17708217c801c878087b18a001d878078216b801c876068117d8013308205020be0097c782187078781f82187878781e8218800078781d8218880078781c8218900078781b8218980078781a8218a0007878198218a8007878188218b0007878178218b8007878168218c0007878158218c8007878148218d0007878138218d8007878128218e0007878118218e8007878108218f00078780f8218f80078780e8218000178780d8218080178780c8218100178780b8218180178780a82182001787809821828017878088218300178780782183801787806821840017878058218480178780482189001787803821898017878028218b0017878018218c00178788210700195000188070182136801c87303d4300788770182187801c88707d88708821c8001c88c0c821850d88008821a58d3a309d8a30ada980a821960d89702821868d38c0b7b1c8001d88c08dab208d37909d4b909da9a08821ad80195a9207b19b001d8a90982125001c8920a7b1ac801d82a0ada990a821c5801c8ca0a7b1ac001d8ca09821b6001c8b9097b19b8017b177801821ad0018219a8018217a0018214d8017b14a8017b12a0018212c8017b1c90017b1b9801640b8210b801643c8213c0015208d7fc821738821948d479091408e0ffffff00000000821a30d88a08821640946894985108b801821bb001d8ab0cd36208d86209da8c09c97304c994087b18d801d89408d87309c89808821748c97009c989097b19a801c96208c9c8087b18d001c9ab06821728204921d0014921d8014921a80133066082177b12c8017b13c0017b10b801018377203308205020c00062c58218a8016f888219d8016f99821ad0016faa6f6b98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217b8017b17f8018217c0017b17f0018217c8017b17e8018217b0017b17e0018217087b1718028217107b1710028217187b17080295172002951800029519e001821a207b1a00025020c200c0f1821730028218380282192002821a2802821b287bb7107bb8187bb97bba089551a0fd82105802821550028216480295116002320000821730018218380182192801821a2001d49808d4a707d487075207850239078400025417037c029517e0003300c4009511c0fc7b1038037b1530037b162803951540038411e07b17084921b8024921b0024921a002019517c0029518a0024921a8023300500228cd798217e0007b17588217e8007b17508217f0007b17488217f8007b1740821700017b1738821708017b1730821710017b1728821718017b17203307403308205020c6006bc37c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f7b7b1b086faa7b1a106f987b18186f268217207b17788217287b17708217307b17688217387b17608217407b1798008217487b1790008217507b1788008217587b1780007b16b8007b18b0007b1aa8009517c0009518a00095198000951a607b1ba0005020c80011f5821b108219087b1658d46b07821618d46908d47808988820d46707977720d4870752075e8217c8008218d8007b18508213c0008218d000d3b704d8b70cd89300da400cc9680ac9ca04d8ca02d8680a821858821c50c98c0cc9ac0cc92c0cc9b707c90707c99306d4c707d44608d47808d44707988820977720d4870751071800330733085020ca0070c1837833070133090a0e018397836664685020cc005ac18378330764693300ce000a0e019511a07b10587b15509515608411e0390784000254172361018317203308040a03821820821728821930821a387b1a187b19107b170864177b185020d0000390003307403308205020d20000c17c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80851082000330733085020d400cebf837833070133090a0e83773300d60028b9bf83775020d600b4bf8378330733093300d8000a0e01828910828a18828b088288d4ba0ad49808d4a8088e884917184917104917087b783200951160ff7b1098007b1590007b1688009515a0008411e0828210828c08829a088284829b7b1b40829010d3ca03d8ca06d84b0b7b1b38da3b068283188298187b1830c92009c969087b1848d869087b1258d8200b7b1350821930c93909c9b909c98909c9ca08821a38c9a808821a40c94a0a8e8b88aa6085aa01db8b0a8f968218488e8bdb960bd49808db8b0a510a37016476821958d494077b1c48821850d4c808d48707987720d49808978820d487075207120183488317607b18387b14400a0301821758821850d48709140700000000010000007b17501407e0ffffff00000000821840d8780782184894877b195894975107d0008217787b17308217707b17288217687b17188217607b17208217388378208317600a03018217509577c0821840d8780782184894878218589487510792008217787b17588217707b17508217687b17408217607b17488217388378408317600a0301821778821870821960821a68d4780b889c0294ac94bc510c557b6a487b69408219407b69288219487b69208219187b69088219207b697b68508218507b68308218287b68107b67588217587b67388217307b6718955160ff8210980082159000821688009511a000320000330733085020da00b6bd837833070133093300dc000a0e019511d0fe7b1028017b1520017b161801951530018411f0380784000249218800492180004911787b17704921a8004921a00049219000049517b00095189000951970492198005020de00defd8217b0007b17088213b8008214c0008210c8008212d000821cd800821be000821ae8008218f0008216f80082190001821708017b17287b19207b16187b18107b1a487b1b407b1c387b12307b10687b14607b1358951750951830951910821a087b1a505020e00083a8003307403308205020e200e6bc7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f786fa76f996f2ad4a909d4870ad49a0a98aa20d49808978820d4a8085108040083775020e400b6bb8378330733093300e6000a0e01828918828a10828b0882887b79187b7a107b7b087b7832009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520816029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020e80024bb78761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085601836533082064575020ea0091ba46171f1846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109c8008357203308205020ec0004ba46171f46171e46171d46171c46171b46171a461719461718461717654617166346171569461714764617137246171265461711734617102046170f6e46170e7746170d6f46170c6e330c6b787c0b46170a6e46170975461708204617073a46170679461705724617046f4617037446170263461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb818821058821550821648951160320000837833070133093300f0000a0e018289828218828b08828810959c1fd89c09c89b0ad8ba0bda990bc88b0bd88b08c8280884cce07b7c7b7a087b7b107b781832009511c07b10387b15307b16289515408411e03307403308205020f200ecb87c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa77b17086f977b17186f277b17100a0d01821a08821818821910d49808d46a09d48909989920d46808978820d4980852083a647698772052073283a783687b18187b17105020f40098b77a1620837783182033090a0c01811720821818ac870c0a0d0198782051080400837682171064685020f6006bb7837833070164693300f8000a0e01827810827918827a088277d4a909d4870ad49a0a98aa20d49808978820d4a8085208a5009511f07b10087b1583773308203305205020fa0023b746171f46171e7246171d6546171c6446171b6946171a7633096f78791946171872461717707875163302747872157879144617136e787512461711734617106978750f46170e7246170d6546170c6c46170b6c330a61787a0a330b63787b097875084617073a330c79787c0646170572787904787203787b02787a01330846787882100882159511103200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b172852081b029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020fc002ab678761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085b01836533082064575020fe0097b546171f1f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109cd00835720330820502000010ab546171c6446171a76461717704617136e4617117346171b694617106946171d6546170d6546170c6c46170b6c46171f461716204617122046170f20461708204617073a4617067946171e724617187246170e72461705724617196f4617146f4617046f4617157446170374461709634617026346170a61461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b17205208af029567207b1738d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17307b16836733082033062050200201dfb378761f821838d45808821940821a30d4a909d49808988820d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208f401645682153883573308207b1728502004014bb346171f2346171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821830d48609140600000000010000001408e0ffffff00000000d8850864958219409498945846075108570182172883772033082050200601b2b246171e6c46171c624617196b46170e6646170d6646170c754617167346170b734617116946170f694617096946171b2046171520461708204617073a46170679461705724617046f46171774461714744617037446171f6146171d6146171861461701614607469568c0821938d8890846171a65821940949833066e78761346171265945833056378751078760a7875025108b300821728837740330820502008010eb246171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702657875017876821895878000d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b207bb77bb9087bba107bb8188210588215508216489511603200006f68821948016f99821a50016faa821b58016fbb787b18787a10787908787898bc387b1c3801787c1f98bc307b1c3001787c1e98bc287b1c2801787c1d98bc207b1c2001787c1c98bc187b1c1801787c1b98bc107b1c1001787c1a7b1b400198bb087b1b0801787b1998ab387b1b0001787b1798ab307b1bf800787b1698ab287b1bf000787b1598ab207b1be800787b1498ab187b1be000787b1398ab107b1bd800787b127b1a480198aa087b1ad000787a11989a387b1ac800787a0f989a307b1ac000787a0e989a287b1ab800787a0d989a207b1ab000787a0c989a187b1aa800787a0b989a107b1aa000787a0a7b1950019899087b1998007879099889387b1990007879079889307b1988007879069889287b1980007879059889207b19787879049889187b19707879039889107b19687879027b1858019888087b186078780133072033082050200c011eb046171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750200e01b4af8377831900043308400a09821718048218100482190804821a00046f776f886f996faa7b1ad8037b19d0037b18c8037b17c003492118044921100449210804492100044821e003208318c003831a0004831be0033309ff33070a08018217100482190804821800047b17509777209877207b18587b1948d49808d48707520706281410831700030a05801710037b1740821708037b1738821700037b1730330740330820502010010aaf7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f7b6faa6f976f287b17207b1818d48707d4ba08d478089888207b1b28d4b707977720d487075107062830157b1a1083a6330820646750201201c7ad46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617038300461702484617015d4607080a0b8217486f779778208219506f99989920d498088219586f99979a20987720d4a7079899207b1728037b1820037a1930034921580349215003492148034921400333080464675020140116ad7b17583308207b165064675020160105ad4821600320492198034921900349218803492180039518200397882098882014090000000018000000d498069518400397882098882095198003979920d4890a82185897882098882014090000000004000000d4980b97772098772095186003978820d4780c3308ff3309ff64670a0101510706287c0f0a0d01330820ae87080a0d647801330c821a28821b2082191082161895871f7b1848d887084911588488018477e0c879097b1928d87907c88606c87606d38609d88608da9708c8a808d8a807c8b7077b18207b1718d487078868019478520806289913330740330820502018011fac8218186f888219206f996f6a821b286fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808821c588ec9821a4888aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b0628911233082082175050201a012bab7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d489097c78017c7a7c7b027c7c03978808d4a80897bb1097cc18d4cb0bd4b8087c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a8086f826f99140a0000000001000000d39a0ad42a0a989b2088bb01942b93ab520b0628de117c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78117c7b107c7c127c7613978808d4b80897cc10976618d46c0cd4c8087c7b157c7c147c76167c771797bb08d4cb0b976610977718d46707d4b707977720d487076f776fa8821a306faa97ab20821c386fc6986c20d4cb0b976620821c406fcc98cc20d46c0c98aa20d3a909d3c808d49808d3b707d42707d487075207b70c33082033062050201c01b6a9821848017878108218c80078780f8218c00078780e8218b80078780d8218b00078780c8218a80078780b8218a00078780a821898007878098218500178780882189000787807821888007878068218800078780582187878780482187078780382186878780282186078780182185801787882184001787818821800017878178218f8007878168218f0007878158218e8007878148218e0007878138218d8007878128218d0007878118218380178781f8218300178781e8218280178781d8218200178781c8218180178781b8218100178781a8218080178781933072033082050201e01cfa846171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020200164a88377831900043308400a09821718048218100482190804821a00046f776f886f996faa7b1ad8037b19d0037b18c8037b17c003492118044921100449210804492100047a16e0038318c003831a0004831be0033309ff33070a0801821718048218000482191004821a0804821c6801d3c70bd8c70782166001d8690cdbb70c82177001d37a02d87a0a82177801d87808db2a08d36907d4b707db7c085208c40c330820330750202201b9a7821848017878108218c80078780f8218c00078780e8218b80078780d8218b00078780c8218a80078780b8218a00078780a821898007878098218500178780882189000787807821888007878068218800078780582187878780482187078780382186878780282186078780182185801787882184001787818821800017878178218f8007878168218f0007878158218e8007878148218e0007878138218d8007878128218d0007878118218380178781f8218300178781e8218280178781d8218200178781c8218180178781b8218100178781a8218080178781933072033082050202401d2a646171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020260167a68377831900043308400a09821718048218100482190804821a00046f776f886f996faa7b1a407b1ad8037b19487b19d0037b18507b18c8037b17587b17c003492118044921100449210804492100044821e003208318c003831a0004831be0033309ff33070a080182191804821a10048213080482180004821b6801d3b907d8b90b82126001d82a0c7b1c30da7c0b821c7001d3c304d8c306821c78017b1820d8c800da4006d32a0cd4c707da760b520b680dc92a07c9670a7b1a38d86707821a6801c9a909821830c98909c979097b193082177001c97307c907077b172882177801821820c978077b17208217487b17d0038217507b17c8038217587b17c0038216407b16d803492118044921100449210804492100044821e003208318c003831a0004831be0033309ff33070a087b16d8038217487b17d0038217507b17c8038217587b17c0038217307b1718048217387b1710048217287b1708048217207b1700048318c003831a00043309ff330b2033070a108317a0030a058217a8038118b0038219a0036f77977a206f88988820d48a0a9877206f98978920d49707988820821968017b199802821960017b199002821970017b198802821978017b1980024921b8027b18b0027b17a8029517a002951880027b1aa002502028010cc400330820330750202a0179a48218380178781f8218300178781e8218280178781d8218200178781c8218180178781b8218100178781a82180801787819821800017878178218f8007878168218f0007878158218e8007878148218e0007878138218d8007878128218d0007878118218c80078780f8218c00078780e8218b80078780d8218b00078780c8218a80078780b8218a00078780a8218980078780982189000787807821888007878068218800078780582187878780482187078780382186878780282186078780182184001787818821848017878108218500178780882185801787833072033082050202c0192a346171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750202e0127a38377831900043308400a09821718048218100482190804821a00046f776f886f996faa7b1ad8037b19d0037b18c8037b17c003492118044921100449210804492100044821e003208318c003831a0004831be0033309ff33070a08821718047b171001821710047b171801821708047b172001821700047b17280133074033082050203001a0a27c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766faa6f986f277b1738017b183001d48707d46a08d47808988820d46707977720d487075207ca0883a73308207b1700017b1a0801502032015da1821868016f88821960016f99821a70016faa821b78016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880882193001d46909140ae0ffffff00000000821b0801d8ab0a821b380194ba949a787801510ac80782160001836720330820502034015ea0821810016f88821918016f99821a20016faa821b28016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330840646750203601889f3a080000023a090800023a0a1000023a0b1800027b1818047b1910047b1a08047b1b0004821840017b183804821848017b183004821850017b182804821858017b182004837983170004330802330a400a079551a0fb82105804821550048216480495116004320033074033082050203801149f7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b1778017b197001d497076489d46808d47808988820d46707977720d4870752073c057b19680183973308207b17600150203a01cf9d46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882186801958704d88708821a7801c88a09d8a90ada880ac86a0ad86a08821b7001c88b0b7b1988017b1780017b1a90019517a001951880017b1b980150203c019de18217a8018212b8018213a001821ab001281d0450203e010be433074033082050204001039d7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b1778017b197001d497076489d46808d47808988820d46707977720d4870752072b037b19680183973308207b17600150204201be9b46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882186801958704d88708821a7801c88a09d8a90ada880ac86a0ad86a08821b7001c88b0b7b19c8027b17c0027b1ad0029517e0029518c0027b1bd8025020440186e48217e8028212f8028213e002821af002280c0233074033082050204601f89a7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b1778017b197001d497076489d46808d47808988820d46707977720d48707520720017b19680183973308207b17600150204801b39946171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882186801958704d88708821a7801c88a09d8a90ada880ac86a0ad86a08821b7001c88b0b7b1908027b1700027b1a100295172002951800027b1b180250204a01c6e4821728028212380282132002821a30020182187801d3870bd8870c648482196801d89308dab80cc96a0bd86a0a82167001c96206c9a606d8cb0ac9a606c9cb0bc94707c98708c99307d46808d4b709d48909d4b808989920978820d498085108b800003307330850204c019f98837833070133090a0e014921f0014921e8014921e001140700000000717b484e9518e0017b17f801330750204e01af984921d8014921d0014921c001413307049518c0014921c80133005201288d98492170024921680249216002140700000000717b484e951860027b1778023307502050016a98492158024921500249214002113307049518400249214802502052014c98330824330750205401019883783307013309240a0e01837682176001646850205601e89783783307016469330058010a0e01491718491710491708490732009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b1728520819029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b16836733082033062050205a01609778761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607520859018365330820645750205c01cd9646171f1d46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109cb0083572033082050205e01409646171a7046171562461718654617166546170c654617196d46170b6d4617116e4617106e4617096e46171f46171e46171d461717204617142046170d20461708204617073a46171c7946170679461705724617126f4617046f46171b74461713744617037446170e634617026346170f6146170a61461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511987b10607b15587b1650828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b17285208c8029567207b1740d86707c87c087b18487b1c10d8c805da7705c8b5057b1b18d8b5077b1a20c8a7077b17387b1608836733082033062050206001169578761f821840d45808821948821a38d4a909d49808988820d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752080c0282164083673308207b173050206201849446171f2d46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821838d4850a330501140800000000010000007b181408e0ffffff00000000d8860882194894987b1a3894a8460751086b0182173083772033082050206401e59346171f6146171d6c4617167646170f6d46170c6b46171e6546171c20461719204617132046170e20461708204617073a46170679461714634617026346171b7446171a6146170b6146170161460746461718724617176582189588c0821940d88908330c6f787c15461712748219489498330b73787b1182193894984617107546170d6546170a74787b0946170572330674787c047876035108c00082173083774033082033052050206601379346170c6446170a754617096646170772461708654617056546170b6e4617046e4617036f78750678750278760146171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46077382180895878000d88708821a10c88a09d8a90ada880a821818c88a0ad88a08821b20c8b808821b287bb77bb9087bba107bb818821060821558821650951168320000951160ff7b1098007b1590007b1688009515a0008411f08289187b19308289107b19288289087b192082887b18187b1738330740330820502068014f927c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c761797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a097c7b087c7c0a7c760b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b0d7c7c0c7c760e7c780f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78017c7b7c7c027c7603978808d4b80897cc10976618d46c0cd4c8087c7b057c7c047c76067c770797bb08d4cb0b976610977718d46707d4b707977720d487076f736fa46f966f2c82181895871fd88708821a20c88a09d8a90ada880a821828c88a0ad88a08821b30c8b8088477e0c8c7077b1c287b1710d8c70bc86909c8b90cd36c097b1630d86c07da9b07c84a0ac87a0bd8ab06d84a09c83808c89808c886068eb88e69da6809d46b087b1c088ecadb890a520a2401d84b08d33609d8360ada980ad34b08d49808db8a0752070b013307403308207b14207b13187b1b50206a01a3906f6882196f99821a086faa821b106fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217388218287b788218187b78188218307b78088218207b7810955160ff8210980082159000821688009511a0003200491170491168491160140700000000717b484e9518607b1778330750206c01cf8f4911584911504911404133070495184049114850206e01b68f3308243307502070016b8f8378330701330924330072010a0e01828a18828b10828908d4ba0a889b0194ab510b308288958a1fd88a08c8980884880184aae095a920d8a90ac8a80bd88b08daaa084917187b797b7b087b781032009511b07b10487b15409515508411f0491130491128491120140700000000717b484e9518207b17383307502074012b8f491118491110490141330704641849110850207601148f330824330750207801c98e837833070133092433007a010a0e019511a87b10507b15487b1640827a10827b18827c088277d4cb0bd4a70cd4bc0c98cc20d4ba0a97aa20d4ca0a520a4901829b18829c108295829608d4c509d4b60ad4a909989920d4ca0a97aa20d4a909520925017b16287b1c307b1b38828918828a10828c828b08d4ac087b19207b1b10d4b909d498089888207b1a18d4a909979920d498085208ef0083777b170883c7835664687b1c50207c011d8e837764688219080a02018217c85707d85708821b28821910c8b909c88909d3b90ad8b90bdaa80b821c30821818c8c808c88b0bd88b0ad8c808821c38821620c86c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a80852087b837733082050207e01b28d46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078210508215488216409511583200009511e0fe7b1018017b1510017b160801951520018411f0829b18829c108296087b1b507b1c48d4cb0b886c0194bc7b17510c730382a7187b171882a7107b172082a7087b170882a77b171082998287187b17708287107b17788287087b176882877b176095971f7b1940d89708c868088488018477e0957920d87907c8780ad88a0bda770b4921d8007b19c0007b1ac8009517e0009518c0007b1bd000502080011bfa8217f8008219f0008218e800821ae0007b17587b1830d48707d49a08d478089888207b1938d49707977720d487075207d1027b1a2883a733082050208201618c821440821860c84808d8480a821968c86909c8a90bd36b0cd86b09daca09821c08d3cb0ad8bc0b821c10d88c08821048821c78c80c0cdbab08d80c0a821350821b70c83b0bc8ba0ac8c909d8c90bc8ba0a821c18d3ca0bd8ac0a821220d8920cdabc0ad32909d4b909db9a086f49989a38787a1f989a30787a1e989a28787a1d989a20787a1c989a18787a1b989a10787a1a989a08787a196f6a78791898a93878791798a93078791698a92878791598a92078791498a91878791398a9107879126f09787a1098aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a6f3a78790898990878790998a93878790798a93078790698a92878790598a92078790498a91878790398a910787902787a98aa08787a018212605208f001821978d49207821870821a68d4a808d48707987720d49808978820d48707821a5852077001d40407d43608d48707987720d40808978820d48707821938821b30821c2852074e017b1678d4a9071408e0ffffff00000000d88c0894b894785108330195c620d8c607c87b087b1820d8b808da7708c898087b1868d898077b177083227b1260836783487b181850208401a18a83778218188219600a0201821740c86707d86708821978821b20c8b909c88909d3b90ad8b90bdaa80b821848821a68c8a808c88b0bd88b02d8a808821c50821658c86c0c821a70c8ac0cc8c808c82808d4b70ad49808d48a0a98aa20d4b808978820d4a80852089a008377330820502086012d8a46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460782178218287b787b76188218307b78088218387b78109551e0fe821018018215100182160801951120013200004921b0004921a8004921a000140700000000717b484e9518a0007b17b800330750208801bb8949219800492190004921800041330704951880004921880050208a019d89330824330750208c01528983783307013309240a0e013307330850208e013d8983783307013309330090010a0e01951160ff7b1098007b1590007b1688009515a0008411f08282828308828410828018829b829a08829c10829918380884000264764911184911104911087b187b19387b1c307b1a287b1b207b10587b14507b1348951760951840951920641a7b12405020920189fb821770821878821960821a687b67107b68187b697b6a08955160ff8210980082159000821688009511a00032009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b17205208ae029567207b1740d86707c87c087b18387b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17307b168367330820330620502094012d8878761f821840d45808821938821a30d4a909d49808988820d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208f301645682154083573308207b172850209601998746171f2346171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821830d48609140600000000010000001408e0ffffff00000000d8850864958219389498945846075108560182172883772033082050209801008746171b644617176c4617136d46170d6946170c764617097346171d204617152046171020461708204617073a46171c79461706794617187246170b72461705724617046f46171e744617037446170e634617026346171f6146171a614617166146171261461701614607469568c0821940d889088219389498330665787619787614945833056e78751178760f78760a5108b30082172883774033082050209a015d8646171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170378750278760146076b821895878000d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b207bb77bb9087bba107bb8188210588215508216489511603200009511c0fe7b1038017b1530017b16280182831882851082860882827b1620017b130001d43608d45206d486069866207b151001d45808978820d468087b175208d80c821760018278187b18c000821858018276107b16b8008276087b16b00082777b17f8008287187b17108287107b1718821750018286087b160882887b1820821848018276107b16388276087b163082777b17288287187b17e000821740018286107b16d8008286087b16d00082887b18e8008278187b18488278107b18508278087b184082777b175882c7187b176082c7107b176882c7087b177082c77b177882b7107b17900082b7087b17880082b77b17800082a7187b17a00082a7107b17a80082a7087b17c80082971082a87b1898008298087b18f000829697772098752083273308207b1718017b12080150209c0186846f588219f0006f996f6a98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882082190001821b1001d49b0b140600000000010000001409e0ffffff0000000082150801d89509821a200194a97b1bf00094b978780c51090f0b8217180183772033082050209e01a1838218a0006f888219a8006f99821ac8006faa821b98006fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888089569c0d89509821a200194a9821af00094a978780151091e0a1408ffffffff00000000821980008499ff7b19c800821588008455ff7b18a80082169000d28606821718018377403308205020a00189826f686f59821ac8006faa787a1846170b46170a461709461707461706461705461704461703461702461701460798ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98aa08787a19787910989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d988820140600000000010000001409a0ffffff0000000082150801d89509821a200194a9821af00094a978780c51091d09821718018377603308205020a201af818218606f888219686f99821a706faa821b786fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808956980d89509821a200194a9821bf00094b97878015109300864579555e000d87507c87a097b19f000d8a906da770682171001c87606d8760782180001c887077b17c80082171801837780003308205020a401968046171fe000d465088219f000821bc800d4b909d498089888207b16a000d46909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752086e077b15980083573308205020a60101808213e8006f3898893878791f98893078791e98892878791d98892078791c98891878791b98891078791a9889087879198212d0006f297878189898387878179898307878169898287878159898207878149898187878139898107878128215d8006f5a78791098990878791198a83878780f98a83078780e98a82878780d98a82078780c98a81878780b98a81078780a821ce0006fc8787a0898aa08787a09988938787907988930787906988928787905988920787904988918787903988910787902821948821b40d49b0b821458821950d4940ad4ba0ad4b90998aa20979920d4a909787898880878780152096f06d45307d4c208d48707987720d45808978820d48707821a1001520752068217a0008218c800d487071408e0ffffff0000000082199800d889088219f0009498947882190001510826068217080195760001d8760782182001c87805d88508da7708c8a8087b18c800d8a807c897077b17a00083447b14f000836783387b1898005020a8018b7eff8377821898008219f0000a02018217e800c867077b169800d867088216a0008219d000c85909c88909d3590a7b15f000d8590bdaa80b8218d800821cc800c8c808c88b0bd88b0ad8c808821ce000c86c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a808520878051405e0ffffff0100000083773308205020aa01057eff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078217e80095771f7b159000d2570782189800c878087b18d800d878078218f000c878087b18f00094878218c800c887077b17e800d88707c867077b17e0008217288476ff8217308475ff8217388218a800d287077b17d000821718018377a0003308205020ac013c7dff6f6898893878791f98893078791e98892878791d98892078791c98891878791b98891078791a9889087879196f597878189898387878179898307878169898287878159898207878149898187878139898107878129898087878118218d0006f8878791098893878790f98893078790e98892878790d98892078790c46170b46170a461709787808461707461706461705461704461703461702461701460782192001821af000d39a07d89a0864ac821308018216d800d83605da7508821a1001821be800c9ab07d8ab0a821b0001c8ab02d8870b821ae000c92a0ac9ba0a7b1a1001c987077b170001c85909c99c05c936077b172001821718018377c0003308205020ae01337cff821810016f88821900016f996f5a821b20016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b12646b98aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888088216e800d46b09821ae000821cf000d4ca0ad4a909989920d46a0a97aa20d4a9097878015209a20283b73308205020b001397bff8212f8006f2898893878791f98893078791e98892878791d98892078791c98891878791b98891078791a9889087879198213b0006f397878189898387878179898307878169898287878159898207878149898187878139898107878128216b8006f6a78791098990878791198a83878780f98a83078780e98a82878780d98a82078780c98a81878780b98a81078780a821cc0006fc8787a0898aa08787a09988938787907988930787906988928787905988920787904988918787903988910787902821910821b08d49b0b821420821918d4940ad4ba0ad4b90998aa20979920d4a90978789888087878015209a601d46207d4c308d48707987720d46808978820d48707821bf000520789018219e800821ce000d4c9071408e0ffffff00000000821ad800d88a0894b894785108650195a820d8a807648a7b181801c87b06d8b608da7708c898087b181001d89807c8c7077b17200183447b14080183a78115f80064585020b201cd79ff8377645882190801821518010a02018217f800c85707d857088219b000c86909c88909d3690a7b160801d8690b82161001daa80b8218b800c86808c88b0bd88b0ad86808821cc00082152001c85c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a8085208bc0083773308205020b4015379ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078217f80095771f82189000d2870782181801c87808d8780782190801c879099497c86707d8670a821b2001c8ba0a821b7bb87bb9087bb7107bba1882103801821530018216280195114001320000821b1802821a100282190802d4ba0788980194785108d906821700027b1758957701887801c898087b170002d487077b180802887701c8a7077b171002d8a707c8b7077b1718028217707b17e8018217787b17e0018217687b17f0018216607b16f8018318e0017b1a48831a00027b19403309ff7b1b38330b2033070a108217387b1758018217487b1750018217407b1748018217587b1740017b1678018217687b1770018217707b176801951780019518600195194001821a787b1a60015020b60107888217b8017b17588217b0017b17488216a8018217a0017b1718821a98017b1a60821990017b1968821888017b1870821780017b17787b1af8017b19f0017b18e8017b17e001492118024921100249210802492100024821c001208318e001831a0002831bc0013309ff33070a0882191898973d976803d48707979803888800018583018e78db780398663d821848978703d4670798883d821a5897aa03d4a8088e8a8e7bdb8a0bd48707db7b03821700027b1758821708027b1748821710027b1740821718027b173846213f01ff0046213e01ff0046213d01ff0046213c01ff0046213b01ff0046213a01ff0046213901ff0046213801ff0046213701ff0046213601ff0046213501ff0046213401ff0046213301ff0046213201ff0046213101ff0046213001ff0046212f01ff0046212e01ff0046212d01ff0046212c01ff0046212b01ff0046212a01ff0046212901ff0046212801ff0046212701ff0046212601ff0046212501ff0046212401ff0046212301ff0046212201ff0046212101ff0046212001ff0046211f0146211e0146211d0146211c0146211b0146211a014621190146211801462117014621160146211501462114014621130146211201462111014621100146210f0146210e0146210d0146210c0146210b0146210a0146210901462108014621070146210601462105014621040146210301462102014621010146210001849b1f951a2001c9ba0a7ca7197ca8187cac1a7ca61b977708d4870797cc10976618d46c0cd47c027ca81d7cac1c7ca61e7ca71f978808d4c808976610977718d46707d48707977720d427077b17187ca7117ca8107cac127ca613977708d4870797cc10976618d46c0cd47c027ca8157cac147ca6167ca717978808d4c808976610977718d46707d48707977720d427077b17107ca7097ca8087cac0a7ca60b977708d4870797cc10976618d46c0cd47c097ca80d7cac0c7ca60e7ca70f978808d4c808976610977718d46707d48707977720d497007ca7017ca87ca9027ca603977708d48707979910976618d46909d497077ca8057ca9047ca6067caa07978808d4980897661097aa18d46a0ad4a808978820d478048218209887387817e7009887307817e6009887287817e5009887207817e4009887187817e3009887107817e2007818e0009887087817e1008218289887387817ef009887307817ee009887287817ed009887207817ec009887187817eb009887107817ea007818e8009887087817e9008218309887387817f7009887307817f6009887287817f5009887207817f4009887187817f3009887107817f2007818f0009887087817f1008218509887387817ff009887307817fe009887287817fd009887207817fc009887187817fb009887107817fa007818f8009887087817f9009517e000c9b70b4621df004621de004621dd004621dc004621db004621da004621d9004621d8004621d7004621d6004621d5004621d4004621d3004621d2004621d1004621d0004621cf004621ce004621cd004621cc004621cb004621ca004621c9004621c8004621c7004621c6004621c5004621c4004621c3004621c2004621c1004621c0007cb7197cb8187cb91a7cb61b977708d48707979910976618d46909d4790a7cb81d7cb91c7cb61e7cb71f978808d49808976610977718d46707d48707977720d4a7067cb7117cb8107cb9127cba13977708d4870797991097aa18d4a909d4790c7cb8157cb9147cba167cb717978808d4980897aa10977718d4a707d48707977720d4c7027cb7097cb9087cba0a7cbc0b977708d4970797aa1097cc18d4ca0ad47a087cb90d7cba0c7cbc0e7cb70f979908d4a90997cc10977718d4c707d49707977720d487077cb8017cb97cba027cbc03978808d4980897aa1097cc18d4ca0ad4a8087cb9057cba047cbc067cbb07979908d4a90997cc1097bb18d4cb0bd4b909979920d4890b94349430821c10943c8219189439943b943794329436821838e09803d26909821840e0c80ad2c20c821848e00806d20707821858e04808d24b0bd4b808d46707d4ca0ad49309821b607b1bf801821b687b1bf001821b707b1be801821b787b1be0017b1918027b1a10027b1708027b1800028318e001831a00023309ff330b2033070a109551c0fd8210380282153002821628029511400232004921b0004921a8004921a000140700000000717b484e9518a0007b17b80033075020b801d271ff4921980049219000492180004133070495188000492188005020ba01b371ff33082433075020bc016771ff83783307013309243300be010a0e01951120ff7b10d8007b15d0007b16c8008282188283108286088284d42608d43405d48505985520d43808978820d458087b17485208800582c7187b172082c7107b172882c7087b173082c77b173882b7107b1710954560d84507c876087b18b8007b1660d86808da770882b7087b1782b77b170882a7187b17a80082a7107b17a00082a7087b17980082a77b17c0008297187b1780008297107b1788008297087b177882977b179000c883067b1368d836077b1270c827077b17b0007b145883473308207b17185020c0018a70ff46171f60d465088219b800821bb000d4b909d498089888207b1650d46909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607520865047b154083573308205020c201f76fff8212c0006f2898893878791f98893078791e98892878791d98892078791c98891878791b98891078791a988908787919821c98006fc9787818989838787817989830787816989828787815989820787814989818787813989810787812821ba0006fba78791098990878791198a83878780f98a83078780e98a82878780d98a82078780c98a81878780b98a81078780a8216a8006f68787a0898aa08787a0998893878790798893078790698892878790598892078790498891878790398891078790282198000821578d495058214900082198800d4940ad45a0ad4590998aa20979920d4a90978789888087878015209630364bad4a207d46c08d48707987720d4a808978820d48707821370821968821c60821b5852073c038217508218b000d487071408e0ffffff00000000821a40d88a08821ab80094a894785108160395b68000d8b607c87c087b18b000d8c808da7708c898087b18b800d89807c837077b17880083447b1490008367832564585020c4017f6eff837764588215b000821990000a02018217c000c867077b169000d867088216880082199800c85909c88909d3590ad8590bdaa80b8218a000821cb800c8c808c88b0bd88b0ad8c808821ca800c86c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a8085208700283773308205020c601056eff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078217c00095771f1408e0ffffff01000000d2870782189000c878087b18c000d878058217b000c857077b17b00094758217b800c875057b15a800d87507c867077b17b8008217109777209876208215188357203308205020c801496dff6f6882196f99821a086faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a18989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a12989a08787a1178791046170b46170a461709787808461707461706461705461704461703461702461701460798893878790f98893078790e98892878790d98882078780c8357403308205020ca019c6cff8218206f888219286f99821a306faa821b386fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989a08787a0978790898893878790798893078790698892878790598892078790498891878790398891078790298890878790178788217488218c0007b788218b8007b78188218b0007b78088218a8007b78108210d8008215d0008216c8009511e000320000951110fe7b10e8017b15e0017b16d8019515f0019511d0f98411e0641682931082941882920882997b6268027b646002d442027b6378027b697002d43909d429097b6798005209062810148257108279187b6938018252088279107b6918018279087b69200182777b6728018227187b67300182578229107b69a0008229087b69a80082297b69b0008279187b69b8008279107b69c0008279087b69c80082777b67d00082c7187b67d80082c7107b67e00082c7087b67e80082c77b67f00082b7187b67f80082b7107b67000182b7087b67080182b77b67100182a7187b67800282a7107b67880282a7087b67900282a77b6798028287187b6740028287107b6748028287087b67500282877b6758029517e08477e07b67b8026471491718491710491708490783770a11018268b8028287188282828910828a0882688002d3870bd8870882678802d8790cdbb80c82689002d38a03d88a0a82689802d88208db3a08d39707d4b707db7c0851080628fe1438078400024926380649263006492628067b672006826778027b675006826768027b674806826770027b674006826748027b677006826750027b676806826758027b676006826760027b675806956780069568600695694006956a2006826b40027b6b78065020cc0188dc82689806826a900682678806826980067b67b8027b68b002d48707d4a908d478089888207b6aa802d4a707977720d4870751070628d81883973308207b6738027b69a0025020ce017c69ff8268b0028269a802d498081409e0ffffff00000000826aa002d89a09826ab80294a99489520906289a187c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c781797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78097c7a087c7b0a7c7c0b978808d4a80897bb1097cc18d4cb0bd4b8087c7a0d7c7b0c7c7c0e7c790f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78017c797c7b027c7c03978808d4980897bb1097cc18d4cb0bd4b8087c79057c7b047c7c067c7707979908d4b90997cc10977718d4c707d49707977720d487076f776fa96f3a6f28d4980bd4a707d47b0b98bb20d49707977720d4b7075107062870178267380283772083887b68b8025020d0011468ff9518e08488e07b68b0026481837783898268b8020a098268b0028287187b67b8028287107b67a0028287087b67a80282877b67b00233082033075020d201d367ff8269b8029898387b68380278781f9898307b68300278781e9898287b68280278781d9898207b68200278781c9898187b68180278781b9898107b68100278781a9898087b6808027878197879188269a0029898387b6800027878179898307b68f8017878169898287b68f0017878159898207b68e8017878149898187b68e0017878139898107b68d8017878129898087b68d0017878117879108269a8029898387b68c80178780f9898307b68c00178780e9898287b68b80178780d9898207b68b00178780c9898187b68a80178780b9898107b68a00178780a9898087b6898017878097879088269b0029898387b6890017878079898307b6888017878069898287b6880017878059898207b6878017878049898187b6870017878039898107b6868017878029898087b68600178780178793307203308205020d4019366ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020d6012866ff83778369a0073308400a098267b8078268b0078269a807826aa0076f776f886f996faa7b6a98077b6990077b6888077b6780074926b8074926b0074926a8074926a007482660072083688007836aa007836b60073309ff33070a08018267a0078068b0078269a807d48707d497075107062895128367a0060a8167b0067b6750018267a0067b6740018267a8067b6788008367c0060a058167d0067b6758018267c0067b6748018267c8067b6790003307403308205020d8016c65ff7c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c781797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78097c7a087c7b0a7c7c0b978808d4a80897bb1097cc18d4cb0bd4b8087c7a0d7c7b0c7c7c0e7c790f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78017c797c7b027c7c03978808d4980897bb1097cc18d4cb0bd4b8087c79057c7b047c7c067c7707979908d4b90997cc10977718d4c707d49707977720d487076f746fac6f336f2bd44c0788b8e094389478520806289c13d4cb07d44308d48707987720d4c808978820d48707510706287a13826788006f77987820826940016f99979a20d4a8087b688000977720826850016f88988820d487077b67789899207b6960826790006f77987820826948016f99979a20d4a8087b6848977720826858016f88988820d487077b67389899207b692895b7207b678800d8b707c873087b6850d83808da7708c8c8087b6840d8c807c847077b67308267b0026f777b6740018267a8026f777b6748018267a0026f777b6750018267b8026f777b67580183b73308207b67207b6b687b63587b6490007b6c705020da016863ff46171f3546171e0a46171d4146171cf80046171b4746171a3a46171941461718fb00461717254617169500461715a8004617141e461713e500461712614617115f4617105046170f0946170e1746170d7746170cbe0046170b4646170a6b4617095846170889004617071946170695004617051b4617048f004617030a4617026d461701e9004607f9009511d8956780047b17209567a0047b17189567c0047b17109567e0047b1708956700057b17826738017b679804826718017b679004826720017b678804826728017b678004826730017b67b8048267a0007b67b0048267a8007b67a8048267b0007b67a0048267b8007b67d8048267c0007b67d0048267c8007b67c8048267d0007b67c0048267d8007b67f8048267e0007b67f0048267e8007b67e8048267f0007b67e0048267f8007b671805826700017b671005826708017b670805826710017b670005826780027b673805826788027b673005826790027b672805826798027b6720058267287b6750058267487b6748058267387b67400549265805826740017b677805826748017b677005826750017b676805826758017b676005492698058267607b679005826780007b6788058267787b6780058267307b67b8058267407b67b0058267507b67a8059567c0059568a00595698005956a6005956b4005956c2005826288007b62a0055020dc01b4db9511288267c8058262d8058263c005826ad005826858d3870bd8870c6480826468d84308dab80c826970c99a0bd89a0a82699000c99209c9a909d8cb0ac9a909c9cb0bc90707c98707c9430ad49707d4ba08d47808d4b707988820977720d48707510706284c1083a88267207b6a98025020de01f460ff4926f8064926f0064926e8064926e0064926180749261007492608074926000749263807ff49263007ff49262807ff49262007ff9569e006979920989920956a200797aa20d4a909977720987720826a980297aa20d47a0a956700079777201408ffffffff00000000d4870c3307ff3308ff330bff0a0a01806710078268000782690807d4780ad49a0a520a0628ad0f6f99989a206f88978b20d4ba0a7b6a98029799206f77987720d497077b6790029888207b68880233082033075020e0013160ff8268a0027878108268c80178780f8268c00178780e8268b80178780d8268b00178780c8268a80178780b8268a00178780a826898017878098268a802787808826890017878078268880178780682688001787805826878017878048268700178780382686801787802826860017878018268b00278788268b802787818826800027878178268f8017878168268f0017878158268e8017878148268e0017878138268d8017878128268d0017878118268380278781f8268300278781e8268280278781d8268200278781c8268180278781b8268100278781a826808027878193307203308205020e201455fff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020e401da5eff83778369a0073308400a098267b8078268b0078269a807826aa0076f777b6780026f887b6838016f997b6930016faa7b6a28017b6a98077b6990077b6888077b6780074926b8074926b0074926a8074926a007482660072083688007836aa007836b60073309ff33070a088067b4079777208268b80782698802d49707826928017b699807826930017b699007826938017b698807826980027b6980077b68b8077b67b007826798027b67a807826790027b67a00783688007836aa0073309ff330b2033070a10826740017b675804826748017b675004826750017b674804826758017b674004492678044926700449266804956760049568400449266004013300e6019511c0fd7b1038027b1530027b162802951540028411e08289187b19508289107b19308289087b192882887b1820827a1882791082780882777b1a607b1af8017b19687b19f0017b18707b18e8017b17787b17e001492118024921100249210802492100024821c001208318e001831a0002831bc0013309ff33070a0828b3e49517e08477e07b6748016471491718491710491708490783770a118268480182877b6780028287087b6758018287107b6750018287187b67480133082033075020e801105dff8268380278781f8268300278781e8268280278781d8268200278781c8268180278781b8268100278781a82680802787819826800027878178268f8017878168268f0017878158268e8017878148268e0017878138268d8017878128268d0017878118268c80178780f8268c00178780e8268b80178780d8268b00178780c8268a80178780b8268a00178780a82689801787809826890017878078268880178780682688001787805826878017878048268700178780382686801787802826860017878018268b8027878188268a0027878108268a8027878088268b00278783307203308205020ea01245cff46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020ec01b85bff83778369a0073308400a098267b8078268b0078269a807826aa0076f777b6738026f887b6830026f997b6928026faa7b6a20027b6a98077b6990077b6888077b6780074926b8074926b0074926a8074926a007482660072083688007836aa007836b60073309ff33070a08826720027b679807826728027b679007826730027b678807826738027b678007826748017b67b807826750017b67b007826758017b67a807826780027b67a00783688007836aa0073309ff330b2033070a10836740070a05806750077b67f801826748077b67f001826740077b6730029517e08477e07b6780026471491718491710491708490783770a118268800282877b6728028287087b6720028287107b6718028287187b6710023307403308205020ee01965aff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f747b6480026fa97b6900026f387b6808026f2a7b6a3802826710027b679803826718027b679003826720027b678803826728027b6780034926b803826788027b67b003826798027b67a803826790027b67a003826760027b67d803826778027b67d003826768027b67c803826770027b67c003826740027b67f803826748027b67f003826750027b67e803826758027b67e0037b6a18047b6810047b69080495672004956800049569e003956ac003956ba003956c80037b6400045020f0017be78269000282673802d49707826a080282688002d4a808d47808988820d4a707977720d487075207ed0764a082672804826838047b68780282642004826a3004d3970bd8970c82628002d82408dab80cc90a0bc9cb03d8cb0b7b6b7002d80a0a826c3802826b7802c9cb0cc9ac0c826a7002c9ac0cc99707c98707c92408d4c707d4380ad47a0ad4370798aa20977720d4a70752078007826730026f779777208269f0016f99989a20d4a7077b6778029799208267f8016f77987720d497077b6770028167800283887b6880025020f201fa57ff3a082000023a092800023a0a3000023a0b3800027b68b8077b69b0077b6aa8077b6ba0078268a0027b68d0078268a8027b68c8078268b0027b68c0078268b8027b68d807826870026f88826978026f99826a300297aa207b6ae8074926e0077b69f0077b68f80783798367a007330803826a80020a0782679800491718826888027b7810826898027b7808826890027b78955100f89511e0951130068210e8018215e0018216d8019511f00132003307403308205020f4013f57ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67b8027b69a802d497076489d4b808d478089888207b6bb002d4b707977720d48707520752057b69a00283973308207b6798025020f601f555ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268a002958704d88708826ab802c88a09d8a90ada880a8268b002c88a0ad88a08826ba802c88b0b7b69c8027b67c0027b6ad0029567e0029568c0027b6bd8025020f80182bd8267e8028262f8028263e002826af002282b043307403308205020fa012a55ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67b8027b69a802d497076489d4b808d478089888207b6bb002d4b707977720d4870752073d037b69a00283973308207b6798025020fc01e053ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268a002958704d88708826ab802c88a09d8a90ada880a8268b002c88a0ad88a08826ba802c88b0b7b6908037b6700037b6a100395672003956800037b6b18035020fe01b6bd826728038262380382632003826a3003281602330740330820502000021553ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67b8027b69a802d497076489d4b808d478089888207b6bb002d4b707977720d48707520728017b69a00283973308207b67980250200202cb51ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268a002958704d88708826ab802c88a09d8a90ada880a8268b002c88a0ad88a08826ba802c88b0b7b69e8057b67e0057b6af005956700069568e0057b6bf805502004028bc8826708068262180682630006826a1006018268b802d3870bd8870c64808264a002d84308dab80c8269b002c99a0bd89a0a8269a802c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d498085108670050200602af97492670034926680349266003140700000000717b484e956860037b677803330750200802cd50ff49265803492650034926400341330704956840034926480350200a02ae50ff330824330750200c026250ff83783307013309240a0e0183787b68b8028267980250200e024650ff83783307018269b802330010020a0e014917184917104917083308607b783200821770821878d4870782189800d46808d478089888207b1668d46707977720d4870752071d068216d8007b1680008217d0007b1790008217c8007b17608217c0007b1788008117980033082050201202d34fff6f68821990006f998216606f6a821b88006fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808787801330820330750201402014fff8218406f888219486f99821a506faa821b586fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b1898ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298ab08787b11787a10989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989a08787a0978790898893878790798893078790698892878790598892078790498891878790398891078790298890878790178783308203307502016022e4eff83778319c0003308200a0901821898009587207b1750d88709821878c89804d8840ada990a821968c8a90082179000821a8800d47a0a82178000d4760bd4ab0bd8900a821370c83a0a510bd6031407e0ffffff00000000821b9800d8b7067b16408e8cda860c9a96c9c6087b18588e82d8c60c8e96c836069a66c9c6068e63da620364697b1648c9b7028218789a8c821840c98c0b7b1740d827068ebcdab60c821858d49806db630c94c295271fd8270694cbc86b02d8b20bda660b94c87b1858c8b8087b1808978b3b982605d4b60397223b987b05d42b067b163882188800888b01821260c9b2077b17209589ff7b19307b1328d3370bd83703d86907dbb3077b1710d4280b88bb0182179000d8b70382188000c93808c9b70782194894c9821b08821c58d8cb0cc8c90998b305979c3bd4c303989c05d83709d3c802d8c80bda290bd33706d42606821910da690bdabc087b189000dab307821820821928dab908821930821c38dabc09989b3b978c056483d4cb0b979c05821678c8b60682189800c88c0c7b1c60d88c0bc8b606821878d38602821878d8860cda2b0c8218d0007b18880098333b977b05d43b038218c8007b18800098773b82129000972205d4720b821968821270c8b202c89303d8930bc8b202c83c0cd83c0b821870c8b202821b6095b7207b1738d8b70bc8b6077b1730d86706dabb068217c000c8c6067b1628d8c60cc82c0c7b1c20821b78821cd8006f777b179000821780006f72821788006f777b1788006fc77b178000821350017b18607b195864b6821798007b17507b1a707b10687b14787b1398007b12487b12b000821788007b17a800821780007b17a000821790007b17b8004921d8004921d0004921c8004921c0004821e000208318a000831ac000831be0003309ff33070a0801821760821858d48707821840821950d8890894689478510898018216d8008217d0007b17508217c8007b17588217c0007b17608117980033082050201802544bff6f688219506f99821a586faa821b606fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018219800095990188970182188800c878087b1888007b198000d48907887b01821748c8b702d8720782189000c878087b18900082179800957320d873096476821b78c89b04d8b40ada990a821738d37606821968821c28d39c0cd46c0c821730d3b707821870821620d38606d47606c8a900d46c0cd8900ac88a0a520c1cfe280682135001821b187bb37bb4087bb0107bba18955100ff8210f8008215f0008216e80095110001320000951100ff7b10f8007b15f0007b16e800951500018411f082897b19208289087b19108289107b19088288187b187b171833074033082050201a02a949ff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f7b7b1b386fa66f997b19306f287b182882177b17b8008217087b17b0008217107b17a8008217207b17a0007b1898007b1990007b1688009517c0009518a000951980007b1b800033001c02951100ff7b10f8007b15f0007b16e800951500018411e07b171882961082977b1798008297187b17708297087b1778828b18828a1082890882877b1b407b1bb8007b1a487b1ab0007b19507b19a8007b17587b17a0004921d8004921d0004921c8004921c0004821e000208318a000831ac000831be0003309ff33070a0828b2f76464821ac8008217d8007b1710821bc0008213d000d36a0cd86a08821938d89b06dac608c94a0ac96a0a7b1a08c99b0b95bc1fd8bc0bc8ba0a84cce0c84a07c8c9097b1920d8c90cc8c702d3a207d8a209da7c09821630c96307d8630c6463821028821610c90606c9c606d8870cc9c606c98707821808d88a08dabb08c87808d87807c8380ac89a0cd88a08d8ac09c80606c86707c88707c897068e678ec8db6708d46c078e29db780952093901643b821738821820d87807d34208d84209da8709d83c07d30608d8060ada870ad33c07d48707da790a520a0c013307403308207b14107b12087b1c50201e02e546ff6f6882196f99821a086faa821b206fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217188218387b788218287b78188218107b78088218307b7810955100ff8210f8008215f0008216e800951100013200491170491168491160140700000000717b484e9518607b17783307502020021046ff4911584911504911404133070495184049114850202202f645ff330824330750202402aa45ff8378330701330924330026020a0e019511a07b10587b15507b16489515608411f08289828a08828b1082881864767b18187b1b107b1a0895172064187b195020280286fb821730821838821920821a287b67107b68187b697b6a089551a08210588215508216489511603200951110ff7b10e8007b15e0007b16d8009515f0008411f0828918828b10828c08d49b0688ca01946a7b1748510a9f01828698b73b7b1920979805d4870798c83b7b1b2897b905d4980898693b7b1c1097ca05d4a9097b1618976a0595ab20d8ab0ac8a90cd89c09daaa09c88909d88908c8870a7b1b90007b1c98007b19a0009517b000951890007b1aa80050202a0226b28217c8008219c0008218b800821ab0007b17387b1830d48707d49a08d478089888207b1940d49707977720d4870752070a0183a73308207b1a0850202c026c44ff8218206f888219286f99821a106faa821b186fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878018217488218087b788218387b78188218307b78088218407b7810955110ff8210e8008215e0008216d8009511f00032000049218000491178491170140700000000717b484e9518707b178800330750202e029043ff49116849116049115041330704951850491158502030027643ff3308243307502032022a43ff8378330701330924330034020a0e019511e87b10107b15087b16828910828a18828b088286d4ba0ad49608d4a808988820d4a909979920d4980852084d827918827a108278827708d4a80bd49707d47b0b98bb20d4a707977720d4b70752072a390584000283878366646850203602b842ff83776468645982101082150882169511180a02320000821a30821928d4a60788980194785108bc00821c38d46c07d4a908d4870798771bd46808978825d4870752079f008218a000821bb800821aa8008216b0009587207b1830d88708c88a097b1a28d8a90ada880ac86a0a7b1610d86a087b1b18c8b808d4a70bd49808d48b0b98bb20d4a808978820d4b80852085239088400027b18088ac6058377646850203a021242ff837764688219080a028217208218187b78188218107b78108218287b78088218307b78955120ff8210d8008215d0008216c8009511e000320000491170491168491160140700000000717b484e9518607b1778330750203c02f641ff4911584911504911404133070495184049114850203e02dc41ff3308243307502040029041ff8378330701330924330042020a0e01951150ff7b10a8007b15a0007b1698009515b0008411f0828b10828a18828c0882867b1a387b1c30d4ac08d4b60ad48a0a98aa207b1b40d4b808978820d4a8087b17485208fc018297187b17208297107b17108297087b170882977b17187b16288367330820502044021441ff8214087c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f706fa66f398213186f2a821820d38a0bd8a807821a10d89a0cdbb70cd34602d86406d80307db2607d3a909d4b909db9c075107970064a698673b978805d4780298483b976605d4680898393b974a05d4a909973a05821728c87a0ad87a0b821c30c8c909c8b909d3c907d8c906da7b06821c40c8c808c88606d8860bd8c808821c38c82c07c88707c8b70795a820d8a80ac8a90bd89b09daaa09c86909d8690ac8a707821a487ba87bab087ba9107ba718955150ff8210a8008215a000821698009511b00032000049218000491178491170140700000000717b484e9518707b1788003307502046025d3fff4911684911604911503233070495185049115850204802433fff330824330750204a02f73eff837833070133092433004c020a0e01827910827a18827b088277d4ba0ad4970bd4ab0b98bb20d4a909979920d4b9095209d7009511e07b10187b15107b1608828910828a087b1a8286979920989520837733082050204e029c3eff6f5882196f996f6a98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c8210188215108216089511203200008217d802821ad0028218c8028219c0027b17287b1818d48707d4a908d478089888207b1a20d4a707977720d487075207120b83977b1798003308207b191050205202ab3dff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d4670782169800d4b707977720d487076f7b6fa76f986f297b1978027b1870027b17680295178002951860027b1b600233005402951120ff7b10d8007b15d0007b16c8009515e0008411f08289828a087b1a288286108288187b18307b17207b1898007b1690007b1a88009517a000951880007b19387b1980003300380228f4f64921d8014921d0014921c0014921c80182198802821a80028218109587207b1770d88707821b18c87b087b1868d8b808da770895a7207b1750d8a707c8790b7b1990007b1b48d89b09da7709821c20c88c07821b9002821898027b1760d8c707821c28c8c7077b1758c8b9097b1b787b1940d8b9077b188000c887077b17387b1a880083aa7b1a30013308206467502056029a3bff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e64637c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa86f946f2a821bc801d3ab09d8ab0a821bc001d84b0cdb9a0c821ad001d38a02d88a088216d801d87607db2807d34b08d49808db8c0751075d07330820643750205802483aff8210c0018214c8017c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c760f97aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a117c7b107c7c127c761397aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b157c7c147c76167c781797bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f736fa86f996f2c821ad0018216d801d34c0bd8c407d8900cdbb70cd3a802d88a08d83607db2807d30908d4b808db8c075107590698073b974805d4780298a73b970805d4780c98673b97a805d478099767058218707b17a001c88707d88708821b687b19a801c8b909c88909d3b90ad8b90bdaa80b821a607b1cb001c8ca08d8a80a821c587b12b801c82c0cc8ca0ac88b0bd88b08c8a808d49808d4b709d48909d4b808989920978820d498085208db0582188800821b78d4b80882199000821a8000d4a909d49808988820d4b909979920d498087b189801837733082050205a025338ff7c787b1890017c78017b1888017c78027b1880017c78037b1878017c78047b1870017c78057b1868017c78067b1860017c78077b1858017c78087b1850017c78097b1848017c780a7b1840017c780b7b1838017c780c7b1830017c780d7b1828017c780e7b1820017c780f7b1818017c78107b1810017c78117b1808017c78127b1800017c78137b18f8007c78147b18f0007c78157b18e8007c78167b18e0007c78177b18d8007c78187b18d0007c78197b18c8007c781a7b18c0007c781b7b18b8007c781c7b18b0007c781d7b18a8007c781e7b18a0007c761f330820330750205c026c37ff78761f8218a00078781e8218a80078781d8218b00078781c8218b80078781b8218c00078781a8218c8007878198218d0007878188218d8007878178218e0007878168218e8007878158218f0007878148218f8007878138218000178781282180801787811821810017878108218180178780f8218200178780e8218280178780d8218300178780c8218380178780b8218400178780a82184801787809821850017878088218580178780782186001787806821868017878058218700178780482187801787803821880017878028218880178780182189001787833072033082050205e028436ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146073308403307502060021936ff8377831900033308400a09821718038218100382190803821a00036f776f886f996faa7b1af8027b19f0027b18e8027b17e0024921180349211003492108034921000348212003208318e002831a0003831b20033309ff33070a08018217980152070903821708037b179001821700037b179801801710037b178801330820821730502062029035ff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d489097c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c761797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d48a0a7c78197c7b187c7c1a7c761b978808d4b80897cc10976618d46c0cd4c8087c7b1d7c7c1c7c761e7c771f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f996f2a821cc801d3ca0bd8ac0a8218c001d8980cdbba0c821ad001d3a602d86a0a8216d801d87607db2a07d39808d4b808db8c075107e8018218508217a001c88707d88708821b488219a801c8b909c88909d3b90ad8b90bdaa80b821c408218b001c8c808c88b0bd88b0ad8c808821c388216b801c86c0cc8c808c8a808d4b70ad49808d48a0a98aa20d4b808978820d4a8088216980052083d01837733082050206402dd33ff821888016f88821990016f99821a98016faa98ab38787b1f98ab30787b1e98ab28787b1d98ab20787b1c98ab18787b1b98ab10787b1a98ab08787b19787a1878791046170b46170a4617094617074617064617054617044617034617024617014607989a38787a17989a30787a16989a28787a15989a20787a14989a18787a13989a10787a1298990878791178780898893878790f98893078790e98892878790d98882078780c8218d8019588018887018219d001c879097b18d8017b19d001d498078877018218c001c88707d887088219c801c889097b19c8017b17c0012858f7821708821888007b78208218107b78821890007b78288218187b78088218787b78308218207b7810821880007b78388218287b78189551c0fc82103803821530038216280395114003320000492150024921480249214002140700000000717b484e951840027b175802330750206602c832ff49213802492130024921200232330704951820024921280233006a0228a532ff492110024921080249210002140700000000717b484e951800027b1718023307502068028132ff4921f8014921f0014921e001323307049518e0014921e80150206a026232ff330824330750206c021632ff837833070133092433006e020a0e019511907b10687b15607b16589515708411f0828a187b1a08829b1882847b14828a08829608829c828310829210c8a609c8c404d8c40cc8c909d36900d86906da0c06c83208821c08c8bc0cd8280bc8cb0bc8680cd88c08c88b00d3a90bd8a90a8218d88406dbba06d83c02821808d3800bd8800adab20ad33c08d4b808db8a0652061f7b747b79087b7c107b70189551908210688215608216589511703200491140491138491130140700000000717b484e9518307b17483307502070028631ff49112849112049111011330704951810491118502072026c31ff3308243307502074022031ff8378330701330924330076020a0e01951160fc7b1098037b1590037b1688039515a0038411e0641682787b6858018278087b6850018278107b6848018277187b674001330820330750207802d130ff826840016f88826948016f99826a50016faa826b58016fbb787b18787a10787908787898bc387b6c3001787c1f98bc307b6c2801787c1e98bc287b6c2001787c1d98bc207b6c1801787c1c98bc187b6c1001787c1b98bc107b6c0801787c1a7b6b380198bb087b6b0001787b1998ab387b6bf800787b1798ab307b6bf000787b1698ab287b6be800787b1598ab207b6be000787b1498ab187b6bd800787b1398ab107b6bd000787b127b6a400198aa087b6ac800787a11989a387b6ac000787a0f989a307b6ab800787a0e989a287b6ab000787a0d989a207b6aa800787a0c989a187b6aa000787a0b989a107b6a9800787a0a7b6948019899087b6990007879099889387b6988007879079889307b6980007879069889287b69787879059889207b69707879049889187b69687879039889107b69607879027b6850019888087b685878780133072033082050207a027e2fff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750207c02132fff8377836940033308400a09826758038268500382694803826a40036f776f886f996faa7b6a18037b6910037b6808037b67000349265803492650034926480349264003482620032083680003836a4003836b20033309ff33070a08018267500382694803826840037b67489777209877207b68507b6940d49808d4870751072a0e836760020a05806770027b6738826768027b6730826760027b672833074033082050207e026a2eff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f796faa6f376f287b67187b6810d48707d49a08d478089888207b6920d49707977720d487075107062854117b6a0883a77b67580133082050208002242dff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617038300461702484617015d4607080a0b8267406f779778208269486f99989920d498088269506f99979a20987720d4a7079899207b6788027b6880027a6990024926b8024926b0024926a8024926a0023308048267580150208202702cff7b675033082082675801502084025f2cff4826c002204926f8024926f0024926e8024926e0029568800297882098882014090000000018000000d498029568a0029788209888209569e002979920d4890a82685097882098882014090000000004000000d4980b9777209877209568c002978820d4780c3308ff3309ff64270a01015207980d0a0d01330820ae87080a0d647801826a20826218826908826c1095871f7b6848d887084916508488018477e0c879097b6940d87907c8c809c8790bd38b09d88b08da9708c8a808d8a807c827077b68187b6710d487077b6b2088b801947852080628b90f33074033082050208602792bff8268106f888269186f99826a206faa826b406fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826c508ec9826a4888aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b0628ac0e3308208267580150208802802aff7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c7c0f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c78017c7a7c7b027c7c03978808d4a80897bb1097cc18d4cb0bd4b8087c7a057c7b047c7c067c790797aa08d4ba0a97cc10979918d4c909d4a909979920d498086f836f22140a0000000001000000d3a20ad43a0a982b2088bb01943b93ab510bfa0d7c7a197c7b187c7c1a7c781b97aa08d4ba0a97cc10978818d4c808d4a8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78117c79107c7b127c7c13978808d4980897bb1097cc18d4cb0bd4b8087c79157c7b147c7c167c7717979908d4b90997cc10977718d4c707d49707977720d487076f776fa88269286f99979a20826b306fbb98bc20d4ca0a97bb20826c386fcc98cc20d4cb0b989920d39209d3b808d49808d3a707d43707d487075207ce0a9517e08477e07b6758016471491718491710491708490783770a11826858018287187b67388287107b673082877b67288287087b6720330820330750208a02d728ff8268300178781f8268280178781e8268200178781d8268180178781c8268100178781b8268080178781a82680001787819826838017878188268f8007878178268f0007878168268e8007878158268e0007878148268d8007878138268d0007878128268c800787811826840017878108268c00078780f8268b80078780e8268b00078780d8268a80078780c8268a00078780b8268980078780a8268900078780982684801787808826888007878078268800078780682687878780582687078780482686878780382686078780282685878780182685001787833072033082050208c02f027ff46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607330840330750208e028427ff8377836940033308400a09826758038268500382694803826a40036f776f886f996faa7b6a407b6a18037b69487b6910037b68507b6808037b6758017b67000349265803492650034926480349264003482620032083680003836a4003836b20033309ff33070a0801826b4803826940038262580382645003826c20c8bc0c826828c898087b6828d8980ac8ac0cd3bc037b6c20d8bc0b826c30c84c0c826838c82808d84c09c8980864a9db3b09c89c07d8c709c8980c85a80185b901db3908d84709d32c0a7b6c30d82c0bdaa90b7b6738d34707d4a70785b901db790851081d0b8267487b6710038267507b670803826758017b6700038267407b67180349265803492650034926480349264003482620032083680003836a4003836b20033309ff33070a088267407b6718038267487b6710038267507b670803826758017b6700038267307b6758038267387b6750038267207b6748038267287b67400383680003836a40033309ff330b2033070a109517e08477e07b6758016471491718491710491708490783770a11826858018287187b67388287107b67408287087b674882877b6750330820330750209002d025ff8268300178781f8268280178781e8268200178781d8268180178781c8268100178781b8268080178781a826800017878198268f8007878178268f0007878168268e8007878158268e0007878148268d8007878138268d0007878128268c8007878118268c00078780f8268b80078780e8268b00078780d8268a80078780c8268a00078780b8268980078780a82689000787809826888007878078268800078780682687878780582687078780482686878780382686078780282685878780182683801787818826840017878108268480178780882685001787833072033082050209202e924ff46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146073308403307502094027d24ff8377836940033308400a09826758038268500382694803826a40036f776f886f996faa7b6a18037b6910037b6808037b67000349265803492650034926480349264003482620032083680003836a4003836b20033309ff33070a08826758037b670001826750037b670801826748037b671001826740037b67180133074033082050209602f523ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa96f386f277b6730017b682001d48707d4b908d478089888207b6b2801d4b707977720d487075207df0683973308207b6758017b69f80050209802ad22ff8268386f888269406f99826a486faa826b506fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880882692801826a2001d4a909140ae0ffffff00000000826bf800d8ab0a826b300194ba949a787801510adc058267580183772033082050209a02ad21ff826800016f88826908016f99826a10016faa826b18016fbb98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790978789889387879079889307879069889287879059889207879049889187879039889107879029888087878013308408267580150209c02d420ff3a084000023a094800023a0a5000023a0b5800027b6858037b6950037b6a48037b6b4003826838017b687803826840017b687003826848017b686803826850017b686003837983674003330802330a400a07955160fc8210980382159003821688039511a003320033074033082050209e025f20ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b6758017b694801d497076489d4b808d478089888207b6b5001d4b707977720d48707520747037b69400183973308207b6738015020a002151fff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882684001958704d88708826a5801c88a09d8a90ada880a82685001c88a0ad88a08826b4801c88b0b7b6968017b6760017b6a700195678001956860017b6b78015020a202de62ff826788018262980182638001826a9001281e025020a4024b65ff3307403308205020a602421eff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b6758017b694801d497076489d4b808d478089888207b6b5001d4b707977720d4870752072a017b69400183973308207b6738015020a802f81cff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c30046070882684001958704d88708826a5801c88a09d8a90ada880a82685001c88a0ad88a08826b4801c88b0b7b6928027b6720027b6a300295674002956820027b6b38025020aa02bb65ff826748028262580282634002826a50020182685801d3870bd8870c648082644001d84308dab80c82695001c99a0bd89a0a82694801c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d498085108be0000330733085020ac02da1bff837833070133090a0e014926d0014926c8014926c001140700000000717b484e9568c0017b67d80133075020ae02e91bff4926b8014926b0014926a001413307049568a0014926a8013300b20228c61bff492610024926080249260002140700000000717b484e956800027b67180233075020b002a21bff4926f8014926f0014926e001113307049568e0014926e8015020b202831bff33082433075020b402371bff83783307013309240a0e0183787b685801826738015020b6021b1bff8378330701826958013300b8020a0e01828910828a18828b088288d4ba0ad4980bd4ab0b98bb20d4a909979920d4b90952093e019511f07b10087b15647583873308205020ba02d11aff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b5782100882159511103200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b172852081e029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b1683673308203306205020bc023e19ff78761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085d01836533082064575020be02aa18ff46171f1d46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109ce008357203308205020c0021c18ff46171f46171e46171d46171c7746171b6f46171a6c461719204617186f4617176f4617167446171520461714644617136e4617126f461711624617102046170f7246170e6546170d7446170c6946170b6246170a7246170961461708204617073a330c79787c06461705724617046f4617037446170263461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b17205208b7029567207b1738d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17307b1683673308203306205020c202f016ff78761f821838d45808821940821a30d4a909d49808988820d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146075208fb01645682153883573308207b17285020c4025b16ff46171f2446171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821830d4860a140600000000010000001408e0ffffff00000000d8850882194094987b1a3094a8460751085c018217288377203308205020c602c015ff46171d6646171c6646171b754617156b46171a734617127346170e6446170c76461709704617172046171120461708204617073a461706794617107246170a724617057246170b6f4617046f46171f6346170263461714614617016146074633056978751e9568c0821938d889084617196e787518821940949846171665821930949833067478761346170f6578750d7876035108b5008217288377403308205020c8021915ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617047876034617026e461701657875821895878000d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b207bb77bb9087bba107bb818821058821550821648951160320000951140f87b10b8077b15b0077b16a8079515c0078411e06416829a187b6a8801829a107b6a78829a087b6a800082997b69708289187b6988008289107b6970018289087b69800182887b68780182787b68d8018278087b68d0018278107b68c8018277187b67c00133082033075020ca020314ff8268c0016f888269c8016f99826ad0016faa826bd8016fbb787b18787a10787908787898bc387b6c6801787c1f98bc307b6c6001787c1e98bc287b6c5801787c1d98bc207b6c5001787c1c98bc187b6c4801787c1b98bc107b6c4001787c1a7b6b900198bb087b6b3801787b1998ab387b6b3001787b1798ab307b6b2801787b1698ab287b6b2001787b1598ab207b6b1801787b1498ab187b6b1001787b1398ab107b6b0801787b127b6a980198aa087b6a0001787a11989a387b6af800787a0f989a307b6af000787a0e989a287b6ae800787a0d989a207b6ae000787a0c989a187b6ad800787a0b989a107b6ad000787a0a7b69a0019899087b69c8007879099889387b69c0007879079889307b69b8007879069889287b69b0007879059889207b69a8007879049889187b69a0007879039889107b6998007879027b68a8019888087b6890007878013307203308205020cc02ab12ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020ce024012ff83778369e0063308400a098267f8068268f0068269e806826ae0066f776f886f996faa7b6a98077b6990077b6888077b6780074926f8064926f0064926e8064926e006482660072083688007836ae006836b60073309ff33070a08018267f0068269e8068268e0067b67d0019777209877207b68d8017b69c801d49808d487075207062853209517e08477e07b67c0016471491718491710491708490783770a118268c0018287187b67608287107b67688287087b675082877b67583307403308205020d0027711ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f796faa6f376f287b67407b6838d48707d49a08d478089888207b6948d49707977720d4870751070628ab24140700000000180000007b67b001140700000000040000007b67b8017b6a2883a77b67c0013308205020d2021510ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703fe00461702b100461701354607a0000a0b8267c8016f779778208269d0016f99989920d4890a8268d8016f88978920987720d497079888207b67c8017b67e8037b6ad8017b6ae0037b68d0017a68f003492618044926100449260804492600043308048267c0015020d402500fff7b67303308208267c0015020d6023f0fff4826200420492658044926500449264804492640049568e0039788209888208269b001d498029568000497882098882095694004979920d4890a826830978820988820826bb801d48b0b97772098772095682004978820d4780c3308ff3309ff64270a010151070628661d0a0d01330820ae87080a0d647801826a48826240826928826c3895871f7b6840d887084916488488018477e0c879097b6938d87907c8c809c8790bd38b09d88b08da9708c8a808d8a807c827077b68287b6720d487077b6b3088b801947852080628f7223307403308205020d802630eff8268206f888269286f99826a306faa826b386fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826c488ec9826a4088aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b0628e0213308208267c0015020da026a0dff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd49b037c7a117c7b107c7c127c781397aa08d4ba0a97cc10978818d4c808d4a8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d489047c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c7a1f979908d4b90997cc1097aa18d4ca0ad4a909979920d498086f49826a50d39a0bd89a096f88826a58d88a0a7c780ddbb90a7c790c7c7b0e7c770f978808d4980897bb10977718d4b707d48707977720d437076f776f28826b60d38b09d88b08826c68d87c0bdb980bd3c707d49707db7b0a510a0628d71c826778826870d487078268880182698000d49808d47808826788006f777b67c001826770016f777b678801826780016f777b678001826778016f777b6778017b68880052080628a11233082033075020dc02d30bff826898017878108268f80078780f8268f00078780e8268e80078780d8268e00078780c8268d80078780b8268d00078780a8268c8007878098268a0017878088268c0007878078268b8007878068268b0007878058268a8007878048268a00078780382689800787802826890007878018268a801787882689001787818826830017878178268280178781682682001787815826818017878148268100178781382680801787812826800017878118268680178781f8268600178781e8268580178781d8268500178781c8268480178781b8268400178781a826838017878193307203308205020de02e70aff46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020e0027b0aff83778369e0063308400a098267f8068268f0068269e806826ae0066f776f886f996faa7b6a98077b6990077b6888077b6780074926f8064926f0064926e8064926e006482660072083688007836ae006836b60073309ff33070a088267f8067b67788267f0067b6780008267e8067b67688267e0067b67703307403308205020e202f609ff7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f796faa6f376f287b67587b6850d48707d49a08d478089888207b6960d49707977720d48707510706282a1d7b6a4083a77b6770013308205020e402b008ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703fe00461702b100461701354607a0000a0b8267c8017b6708058267d8017b6700058267d0017a67100549263805492630054926280549262005330804826770015020e6021208ff7b6748330820826770015020e8020108ff482640052049267805492670054926680549266005956800059788209888208269b001d498029568200597882098882095696005979920d4890a826848978820988820826bb801d48b0b97772098772095684005978820d4780c3308ff3309ff64270a01015107062828160a0d01330820ae87080a0d647801826a60826258826c40826b5095871f7b6858d887084916608488018477e0c87c0c7b6c50d87c07c8b809c8790bd38b09d88b08da9708c8a808d8a807c827077b68407b6738d487077b6b4888b801947852080628001c3307403308205020ea022507ff8268386f888269406f99826a486faa826b506fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826c608ec9826a5888aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b0628a21a330820826770015020ec022c06ff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd49b037c7a117c7b107c7c127c781397aa08d4ba0a97cc10978818d4c808d4a8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d489047c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c7a1f979908d4b90997cc1097aa18d4ca0ad4a909979920d498086f49826b68d39b0ad89b096f88826b70d88b0b7c780ddba90b64bc7c790c7c7a0e7c770f978808d4980897aa10977718d4a707d48707977720d437076f776f28826a78d38a09d88a08826b8000d87b0adb980ad3b707d49707db7a0c7b6c70013307403308205020ee02dc04ff7c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79117c7a107c7b127c7c13979908d4a90997bb1097cc18d4cb0bd4b9097c7a157c7b147c7c167c781797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78097c7a087c7b0a7c7c0b978808d4a80897bb1097cc18d4cb0bd4b8087c7a0d7c7b0c7c7c0e7c790f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78017c797c7b027c7c03978808d4980897bb1097cc18d4cb0bd4b8087c79057c7b047c7c067c7707979908d4b90997cc10977718d4c707d49707977720d487076f786fa96f3a6f2b826770017b6880007b69787b6a707b6b6851070628ea16d49b07d4a808d48707987720d49808978820d4870751070628021883b77b6770013308205020f0028b03ff46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703fe00461702b100461701354607a0000a0b8267c8017b6788058267d8017b6780058267d0017a6790054926b8054926b0054926a8054926a005330804826770015020f202ed02ff7b6760330820826770015020f402dc02ff4826c005204926f8054926f0054926e8054926e005956880059788209888208269b001d498029568a0059788209888209569e005979920d4890a826860978820988820826bb801d48b0b9777209877209568c005978820d4780c3308ff3309ff64270a01015107062803110a0d01330820ae87080a0d64780182628000826b78826c70826a6895871f7b68b001d887084926b8018488018477e0c87a0a7b6a68d87a07c8c809c8790ad38a09d88a08da9708c8b808d8b807c827077b68787b6770d487077b6a800088a8019478520806281e173307403308205020f602fc01ff8268706f888269786f99826a80006faa826b686fbb787b1898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b19787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a9899087879097878988938787907988930787906988928787905988920787904988918787903988910787902988808826cb8018ec9826ab00188aa2085aa01dbc90a8ec98ecbdac90bd4cc09da9a0b787801520b06287615330820826770015020f8020001ff7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f777b67b8016fa77b67b0016f377b6780006f277b67700133082033075020fa02d5fffe8268680178781f8268600178781e8268580178781d8268500178781c8268480178781b8268400178781a82683801787819826830017878178268280178781682682001787815826818017878148268100178781382680801787812826800017878118268f80078780f8268f00078780e8268e80078780d8268e00078780c8268d80078780b8268d00078780a8268c8007878098268c0007878078268b8007878068268b0007878058268a8007878048268a000787803826898007878028268900078780182689001787818826898017878108268a0017878088268a80178783307203308205020fc02e9fefe46171f0246171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460733084033075020fe027dfefe83778369e0063308400a098267f8068268f0068269e806826ae0066f776f886f996faa7b6a50017b6a98077b6958017b6990077b6860017b6888077b6768017b6780074926f8064926f0064926e8064926e006482660072083688007836ae006836b60073309ff33070a08018263f8068260f0068262e806826ae00682677001d3730bd8730c82698000d890077b673801dab70c8267b001d372087b684801d872078268b8017b6a4001d88a0482684801da8407d39008d4b808da870c510c06281613c9900ac97a087b684801d87a0782687001c9830982683801c98909c979097b6970018267b001c97207c947077b67b0018267b80182684001c978077b67b8014826600720826758017b679007826760017b678807826768017b678007826750017b6798074926f8064926f0064926e8064926e00683688007836ae006836b60073309ff33070a08826750017b679807826758017b679007826760017b678807826768017b678007826770017b67f806826748017b67f0068267b0017b67e8068267b8017b67e00683688007836ae0063309ff330b2033070a108267c8017b6708068267d8017b6700068267d0017a671006836700060a060152070628301133074033082050200003affcfe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489037c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d4890c7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c770f979908d4a90997bb10977718d4b707d49707977720d487077b6760016f7a7b6c68016fc97b6370016f387b62b0016f277b6758017b684801d48707d4a908d478089888207b6a5001d4a707977720d4870751070628d00f83973308207b67b8017b6940015020020355fbfe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703c5004617025e46170198008268500182694801d498081409fcffffff00000000826a4001d89a09826b580194b9948946078800520906282c0f8267b80183770433082050200403b4fafe8269780198983878781f98983078781e98982878781d98982078781c98981878781b98981078781a989808787819787918826980017879109898387878179898307878169898287878159898207878149898187878139898107878129898087878118269880178790898983878780f98983078780e98982878780d98982078780c98981878780b98981078780a9898087878098269c00178799898387878079898307878069898287878059898207878049898187878039898107878029898087878010a0b8267c8017b6728068267d8017b6720068267d0017a673006492658064926500649264806492640063308248267b80150200603b9f9fe7b67d8018267b801330850200803a8f9fe4826600649269806ff49269006ff49268806ff49268006ff9568200697882098882014090000000008000000d498029568400697882098882095698006979920d4890a8268d80197882098882014090000000024000000d4980b97772098772095686006289a038267d8017b6760048267c8017b6768048267d0017a677004836760040a06015107930d33074033082050200a0311f9fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489037c78197c79187c7a1a7c7b1b978808d4980897aa1097bb18d4ba0ad4a8087c791d7c7a1c7c7b1e7c7c1f979908d4a90997bb1097cc18d4cb0bd4b909979920d4890c7c78097c79087c7a0a7c7b0b978808d4980897aa1097bb18d4ba0ad4a8087c790d7c7a0c7c7b0e7c770f979908d4a90997bb10977718d4b707d49707977720d487077b6760016f7a7b6c68016fc97b6370016f387b62b0016f277b6758017b684801d48707d4a908d478089888207b6a5001d4a707977720d487075207350c83973308207b67b8017b69400150200c03b9f7fe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703ed004617026d461701688268500182694801d498081409fcffffff00000000826a4001d89a09826b580194b994894607df005109940b8267b80183770433082050200e031bf7fe8269780198983878781f98983078781e98982878781d98982078781c98981878781b98981078781a989808787819787918826980017879109898387878179898307878169898287878159898207878149898187878139898107878129898087878118269880178790898983878780f98983078780e98982878780d98982078780c98981878780b98981078780a9898087878098269c00178799898387878079898307878069898287878059898207878049898187878039898107878029898087878010a0b8267c8017b6788048267d8017b6780048267d0017a6790044926b8044926b0044926a8044926a0043308248267b8015020100320f6fe7b67d8018267b8013308502012030ff6fe4826c0044926f804ff4926f004ff4926e804ff4926e004ff9568800497882098882014090000000008000000d498029568a0049788209888209569e004979920d4890a8268d80197882098882014090000000024000000d4980b9777209877209568c00401978820d4780c3308ff3309ff64270a0101520728040a0d3307403308205020140386f5fe826a6801787a188269b0019898387878179898307878169898287878159898207878149898187878139898107878129898087878117879108269600198983878780f98983078780e98982878780d98982078780c98981878780b98981078780a98980878780978790882697001989838787807989830787806989828787805989820787804989818787803989810787802989808787801787998a83878781f98a83078781e98a82878781d98a82078781c98a81878781b98a81078781a98a8087878198367a0060a058267a8068168b0068269a0066f77977a206f88988820d4a8087b68d8019877206f98978920d497077b67d0019888207b68c8019517e08477e07b67b8016471491718491710491708490783770a11826ab80182a782a80882a91082aa187b6ab8027b69b0027b68a8027b67a0024926d8028267c8017b67d0028267d0017b67c8029567c0029568a0028269d8017b69c00250201603ac138367c0060a058067d0067b67d0018267c8067b67c8018267c0067b67d80133074033082050201803fbf3fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f786fa76f396f2ad4a909d4870ad49a0a98aa20d49808978820d4a80852083b07826888008e887b68b8018268c8016f88978920826ad0016faa98aa20d4a9097b69d0018269d8016f99979920988820d498087b68c80183777b67b00133082050201a038df2fe46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170146078268b80178781f3308208267b00150201c031cf2fe3a086000023a096800023a0a7000023a0b7800027b68f8067b69f0067b6ae8067b6be006826890017b681807826898017b6810078268a0017b6808078268a8017b680007826878017b683807826880017b683007826888017b6828078268c0017b6820078268d0016f887b6858078268c8016f887b6850078268d8019788207b6848074926400783798367e006330804330a200a07955140f88210b8078215b0078216a8079511c007320050201e036638ff330740330820502020035df1fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67d8017b69c801d497076489d4b808d478089888207b6bd001d4b707977720d4870752078f047b69c00183973308207b67b8015020220313f0fe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268c001958704d88708826ad801c88a09d8a90ada880a8268d001c88a0ad88a08826bc801c88b0b7b69e8017b67e0017b6af001956700029568e0017b6bf80150202403dc33ff826708028262180282630002826a10022816023307403308205020260347effe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c780797aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78197c7a187c7b1a7c7c1b978808d4a80897bb1097cc18d4cb0bd4b8087c7a1d7c7b1c7c7c1e7c791f97aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78097c79087c7b0a7c7c0b978808d4980897bb1097cc18d4cb0bd4b8087c790d7c7b0c7c7c0e7c770f979908d4b90997cc10977718d4c707d49707977720d487076f7b6fa86f396f277b67d8017b69c801d497076489d4b808d478089888207b6bd001d4b707977720d48707520779027b69c00183973308207b67b80150202803fdedfe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c3004607088268c001958704d88708826ad801c88a09d8a90ada880a8268d001c88a0ad88a08826bc801c88b0b7b6968027b6760027b6a700295678002956860027b6b780250202a03acd3826788028262980282638002826a9002018268d801d3870bd8870c64808264c001d84308dab80c8269d001c99a0bd89a0a8269c801c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d498085208540183787b68d8018267b80150202c03dbecfe83783307018269d8010a0e01d49b07d4a808d48707987720d49808978820d4870752071e0183b73308207b67d80150202e03a6ecfe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708826868958704d88708826a70c88a09d8a90ada880a826878c88a0ad88a08826b8000c88b0b7b6928037b6720037b6a300395674003956820037b6b380350203003a6d4826748038262580382634003826a5003826870d3870bd8870c6480826468d84308dab80c826978c99a0bd89a0a82698000c99209c9a909d8cb0ac9a909c9cb0bc90707c98708c94307d49808d4b709d48909d4b808989920978820d4980851085601003307330833003203288cebfe33085020320386ebfe837833070133090a0e01492650024926480249264002140700000000717b484e956840027b67580233075020340395ebfe49263802492630024926200241330704956820024926280233003c032872ebfe492610034926080349260003140700000000717b484e956800037b6718033307502036034eebfe4926f8024926f0024926e002413307049568e0024926e80233003c03282bebfe492690034926880349268003140700000000717b484e956880037b67980333075020380307ebfe49267803492670034926600341330704956860034926680333003c0328e4eafe4926d0034926c8034926c003140700000000717b484e9568c0037b67d803330750203a03c0eafe4926b8034926b0034926a003113307049568a0034926a80350203c03a1eafe330824330750203e0355eafe83783307013309240a0e0183787b68d0018267d8015020400339eafe83783307018269d001330042030a0e01827810827918827a088277d4a909d4870ad49a0a98aa20d49808978820d4a8085208a7009511f07b10087b15837733082033052050204403eee9fe33026478721f46171e6546171d7446171c7046171b65330a63787a1a787a193303617873187875174617167433096f7879154617146e78751346171248461711544617104578750f46170e74787a0d46170c65330b72787b0b46170a697872097875084617073a330c79787c06787b0578790446170374787a02787301330846787882100882159511103200007c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d498087c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c751f97bb08d4cb0b976610975518d46505d45b0b97bb20d4ba0a7c7b097c7c087c760a7c750b97bb08d4cb0b976610975518d46505d45b0b7c7c0d7c760c7c750e7c770f97cc08d46c0c975510977718d45707d4c707977720d4b7076f766faa6f956f89d45907d46a08d47808988820d46707977720d487075207b90183a73308207b17087b19187b1a105020480324e8fe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461703a00046170279461701c300460708d45606140500000000010000001408fcffffff00000000821910d88908821918949894684617045108170182170883770433082050204a0387e7fe821a1082191846171f2046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617019558dcd88a0894989468460751089300646b82160883672433082064a57b1b50204c03fde6fe1408bcffffff00000000d8850846171f2046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a46170946170846170746170646170546170446170346170246170182191894988219949846075208040083674433082050204e0376e6fe33036478731f46171e6546171d7446171c7046171b6546171a63461719633302617872184617172046171674646b33066f7876154617146e4617132046171248461711544617104546170f2046170e7446170d6346170c65330c72787c0b33056978750a787309461708204617073a46170679787c05787604461703744617026378720146074633086464b750205003e3e5fe8378330701330964330052030a0e01828918828a10828b0882887b79187b7a107b7b087b783200951120ff7b10d8007b15d0007b16c8009515e0008411f0828a18828910828b087b19107b1a08d4a90988ba01949a7b1738510a7a01828695671fd867087b1b18c8b8088488018477e0957920d87907c8780ad88a0bda770b492198007b1980007b1a88009517a000951880007b1b900050205403bf52ff8217b8008219b0008218a800821aa0007b17287b1820d48707d49a08d478089888207b1930d49707977720d487075207050183a73308207b1a5020560305e5fe8218086f888219106f99821a186faa6f6b98bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bc08787c19787b18787a1098ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11787908989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a989908787909787898893878790798893078790698892878790598892078790498891878790398891078790298880878780182173882187b788218287b78188218207b78088218307b7810955120ff8210d8008215d0008216c8009511e000320000491170491168491160140700000000717b484e9518607b17783307502058032fe4fe4911584911504911404133070495184049114850205a0315e4fe330824330750205c03c9e3fe837833070133092433005e030a0e014917184917104917083308607b7832005107b4007b16200a0d4911584911507b174095176095184049114850206003d3fd8217787b17388217707b17308217687b17288216600a0d019568207b1618d86809821b28c89b0ad8ba0bda990b821930c89b0bd89b09821c38c8c909d4b80cd4a909d49c0c98cc20d4b909979920d4c9095209416476987720520739838783687b1810502062031fe3fe7a16800083778318800033090a0c0181178000821620821838821930821a28821b18821c10aec70e00330a33093308330b60017b6b7b6a087b69107b6818955160ff8210980082159000821688009511a00032009511a07b10587b15507b1648828a18828b10828c088286d4ac08d4b609d48909989920d4b808978820d498087b172852081b029567207b1730d86707c87c087b18407b1c08d8c805da7705c8b5057b1b10d8b5077b1a18c8a7077b17387b168367330820330620502064035de2fe78761f8218306486d45808821940821b38d4b909d498089888207b1520d45909979920d4980846171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701460752085a018365330820645750206603c9e1fe46171f1c46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703461702461701821820821938d498081409e0ffffff00000000d89609821a4094a9948946075109cb00835720330820502068033be1fe46171f46171e46171d46171c46171b6446171a654617196c461718694617176146171666330c20787c15461714724617136546171266461711734617106e46170f6146170e7246170d74787c0c46170b4846170a5446170945787c084617073a46170679461705724617046f4617037446170263461701614607468218958760d88708821a08c88a09d8a90ada880a821810c88a0ad88a08821b18c8b808821b287bb77bb9087bba107bb8188210588215508216489511603200009511a0fe7b1058017b1550017b164801951560018411e082897b19588289087b19508289107b19488288187b184082787b18388278107b18308277087b172833074033082050206a0334e0fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa77b17106f977b17206f277b17180a0b017b17088217286f778218306f88988820977920d498089877208219386f99979a20d4a7077b17c8007b18c0009899207a19d0008219108217407b17f8008217487b17f0008217507b17e800821720821818d48707d46908d47808d46707988820977720d487078218587b18e00052070d038397330850206c039ddefe7b17583307330850206e038fdefe482100018219088e98fc089a897b1938017b1930017b1928017b1920019519c000979920989920978823d498069518e00097882098882095192001979920d4890a821b5897bb2098bb2097772098772095180001978820d4780c3308ff3309ff64670a0164769517a00033007003951160ff7b1098007b1590007b1688009515a0008411e064760a0d285cfa5206199551a0fe82105801821550018216480195116001320033074033082050207203ddddfe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f766fa86f996f277b17587b1950d497076489d46808d47808988820d46707977720d48707520712017b194883973308207b1740502074039bdcfe46171f46171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a461709461708461707461706461705461704461703a00046170279461701c300460708821848958704d88708821a58c88a09d8a90ada880ac86a0ad86a08821b50c88b0b7b19687b17607b1a70951780009518607b1b785020760337f9821788008212980082138000821a9000821858d3870bd8870c6484821948d89308dab80cc96a0bd86a0a821650c96206c9a606d8cb0ac9a606c9cb0bc94707c98708c99307d46808d4b709d48909d4b808989920978820d4980851080400837682174064685020780390dbfe837833070164690a0e330733007a0328addcfe330750207a03a7dcfe33070150207c039ddcfe9511807b10787b15707b1668951580008411f08282828308828410828818829a829b08829c1082991864767b19187b1c107b1b087b1a7b18387b14307b132895174095182064197b122050207e033107ff821750821858821940821a487b67107b68187b697b6a0895518082107882157082166895118000320049489220248414d249525252a22a2529499224499224499224499224499224499224499224494a4a43222449928490244992244992244992244929a9494a124948922449922449922425499224499224499224499224499224499224499224499254254992ac506a15aa86845aa14a232222490849922449922449922409492149881a812020202011119110111111222222412020201111912449890808110189888824494a22222249925244444488880891888888888848922449922409929024499224499224494a9224499224499224499224499224499224499224499224a94a92243111119188882889888824494a9324492249152954695249484992244992244992244992244992244992244992244992244992244992244992542529a52449122124254992144a292549922449922449922449922449922449922449922429094992244992244992244992a4144a4a92aa24499290442a499224244992244992244992922449922449922449922449922449922449922449922449aa922449562835494928a5244992244992244992a424499224499224499284529aa42495244922844891482422454424499224491211114924124591482445929024499224499224494a9224499224499224499224499224499224499224499224a94a922459a15449a14a93244902480a4952420a25699224252949491225a924495292a48888484a92244989442211111122223522224992244992440a29a59424499224499224499224499224499224294992244992148a1411519524499224499224494a1211114544001185249284144ad22425a9141191244992249188084944122291882222222222224244a422a22449922429924a24499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224499224494992244992244952952445444485529a24494a922489942425499224490995524a92244992244992244992244992244992942449922449529224499a244922844811114992242222929292444488880811914a4a9224094992244992244992a4244992244992244992244992244992244992244992244992aa244992154a2d854a2925499224499224499224499224499224494a922449922485529aa4249524492284a42449924229a5244992244992244992244992244992244992244992242521922449922449922449922429859292a42a49922424914a49922421499224499224499294244992244992244992244992244992244992244992244952952449b242a9a5a0524a499224499224499224499224499224499292244992244941291a1111292949922449922449922489244992244994344992224992244992244992244992244992244992242949922422225a41299a049024955241299a244992922449aa26012449a5942449d20a4ad1888848524992482212494992448a2495248a44248924514423222922924892449244928888888888888808221240041089a2888888888888888888442391288a48242212894644524424912489248924111111111111111104100144a2282291482412894422d18848928a440091288a88484434229222228924492449248988888888888888202222222222222222229188482412892449922449229148241289449188886805a58a1489888888888888888888884422914824128944229148444444444422514444444424128944229148241289442222222222222222222222222222888888884882244992244992244952922449922449922449922449922449922449922449922449559224c95210455194244992244992244992244992244992242949922449921494a249924a922449925205a568929224492449924a09aa5292244992244992244992244992244992a4244992244992a44992a42449922491929412542925499224499224499224499224499224494a9224499224499224494a92248d8848524492248928911451092211492249244992244992244912499224499224499244922449922449922429499224499224494a104992244992244992244992144992244992942449922449222992441249221115952851a2049088181191242a22222212258848242a229148128944229148241289244992244992248944221125489224499224499248241289442291482449922449914492482249922449922492482491482422222222a2288aa8241211d18888489292244992449224259148544a10918824499224499224499224499224294a22492449928812442292449248922449922449922492244992244992248924499224499224492225499224499224490922224992244992244992244992922449922449922449922449242949224992a822a294520288888811914854444444244a414422121591482445229148241289442291482412894422914824128944229148249224128944822489442291482412894422914824128944229148241289442291481449248924922449924492241289441289442222222222a228224900492a224992489224924845448a884910455149922449922449922449922449922449929224499224898888884824121191082222929488886844449208212222229288101191482412894422912448499224499224499224499224499224499224499224499224499224499224499294524a92244924128988888844902449922411894892244992244992245941a9555045932421242549920a24419224499224499224294992244992244992244992244992244992244992244992a42a49926405a58a1454d12425294945444492549224499224499224495292529228499224899234490009204929922449923449528a244992244d92a4922449929224499288886805a5684444244424112122114422222222222249922449922490044992244992244992a4244992244992244992244992244992244992244992244992aa24499205553449492a499294244912499224499254122425499224499224499224499224499214a520922449922449922449922449124052451224499244444444444424111111111129499224494a92242d454b9224499292942449122449922449922449929224499224499224499224499224499224499224499224492aa534499224494925414a4dd2642928459394244922a9244844442411491289484444922492489294d2244952922449244992244952499094244992244992244992244992244952948248922449922449922449922449004915491011111111118988888888888888888894244992242549922649929224492249922449924a8224499224499224499224499224499214a52488244992244992244992244992000248a9224910111111111111111111111111491229899224920449922449922449922449924845922449929224498ba2284989249248228924128924924822892492482492482289249248229148228924922449924892044992244992244992244992a414142922a22a2222222244446a44244992248a4422499024499224499224494a9224499224499224499224499224499224499224499224a94a92244992948224499224499224499224091129252529492222222205490a42444424012492489204902492a4264d6a499224499224499224294982944a4992244992244992244992244992244992922449922429492a4992244892244992244992242549922449922449059024952449922449922449922449922449922449a5a42429499224910491482412894422914824922449124522914824128944229148241249824892244992244992244992a414142922a22a222222222222352222924822892449a42012894422914824128944922449a248241289442291482412894422491049922449922449922449929482224544542512894444448888d4888848224924912449244924492249244924128988881011a94824128944221191541411a524258988888888888808a42012894422914824128944229148241289442291482449922412894449104992244992244992244992948222454454454444448488484544444424419224499224499224294992244992244992244992244992244992244992244992a42a224992448908a2288a92244992244992244992244992244992242549922449220144a21291045114454992244992244992244992244992244992922449922449410821444444444444144911115112244992244992244992922449922449922449922449922449922449922449922449aa22529224112582244992244992244992240911124924492211111141444482244892244992244992242549922449922449922449922449922449922449922449925445a42449224a04499224499224499224491222249248924422222282888824419224499224499224294992244992244992244992244992244992244992244992a42a22254912512248922449922449922449921021914492241211111144448ca44892489224499224b182522322808882889088484404105110111211a4a0a44541299aa4922449499224912449922449254152922449922449922449922449922449510a2249922449922449922449922401245524414444444444928888888888888888889424499224254992264992922449224992244992940449922449922449922449922449922429521244922449922449922449922449022880a454240922222222222222222222112549222529221249224982888888884892244992244992248924499224254992464444922429498224499224499224499224499224499224499224499224499224254992244992244955922449922449922449922495a4449224892429a8524a922449922449922449922449922449929424499224495292241111519200928224920429288926494a499224494a4a9224092029489212a4a0249a24494a9224919424491249929224499244a90a2a2d499224499224499224494a9024499224499224499224494a92464444922449459224a524494a92244992888888202222499224899420499224499224499224499224494a92244992a424499224494992244992a4244992244952924892244912499224492401a4224992242995a0a449922449922449922449924409922449922449922449922449a5244944443422028828880889085250d20a4ad1888848494a124a52922449528224494a44449424494a92248924499224492a0992244992244992244992244992244952949220922449922449922449922449020820a58a24414444444444444444444444444492a424254924099224499224499224499224498a244992242549924644242922492249118948248a2489a444929444241245922425499292481489442245a2a4440445254992244992244992242549922449922449129100028844512292208aa2284992244992244992244992244992244952922449922489a244009188442492a0a2244992242549922449922449922449922449020820124589488294524a92244992244992244992244992244992942449922449a2285124914412898804211149224992244992244992244992244594204a92244992244a92244992444992244992244a9224499224499224494a224992444424804854444422492289a22250442391882491442449244992241140092449922449922449922449922291482412452289244924221228499224499292244992244994244992244992244524452411492491442249442410454549922449922449922449529224499224494a9224499244229224499440942449922449942449922489922449922449942449922449922449929444922489884800918aa4489248a2280a5444238924914824494492244912259024499224499224499224498a44228994442a494444232229224922914412894422118924a9442291884422221241241291482412898888880811914a92444a9224492589442291200882200882200882200882200882200882200882200882888888888888888888888888888888884492244992244992244992244992244992244992244992244992242549922449922449128944229188441289442291884412894422918844128944229188442422222222222222222222222222222222499224499224499224499224499224499224499224499224494992244992244952295525499224499224128944444444521111514404105120222422900225d188882425499244922425491249524924124522911449924849201291244992244992244992244992242952025192244992245192244992244a92244992245192244992248924224992922849922449241240121591449248a2a80215d1482422491291249124499244092449922449922449922449922201241289449148224992409592244992244992244992244992244952922449124829a524499224499224499224499224499224499224499224258a442211118d888848498a484412491249248a4489449148248a442251241289229148148944a248a224d54849249144124992244444444444444444444444440411111149124992121188480091a82449922449922449922449922449922449922449922449922449499224499224495295244992481148a28a22914814291089249248228924924822914412492491441249249248228924924822894412492491441249a4249024499224499224499224494a8122454454454444448488488d8824891111115144444412489224499224499224499224499224499224499224499224495292244992244992542595244992244a9444a22449942849a224492249922489228a28a2284922818808111122840811111121224284081121128944225144444444444444444444444444444444444444444444444422918888888888484424128944444444449088882425491249922449922429118888888808218448224922890490248d88242925919248a440241289442291482412894422914814894422914824128944229148240924499224499224499224499252a048111145511411111111212252918844444444444444442415111111111111212222224992942425128944444488885492284915452291488148241289442291482412894422914824128944229148241289442251128824499224499224499224494a812245441445514444444484884845444444444444444424154544442451922a8a442291045292244992244992244992244992244992244992244992244992244992244992244551141111111111111111111111111111111111111111114424224992282222924892442292489224491251a22412251145208410222222222222a228121151248a4422512422224a024992244992244992a4244992244992244992244992244992244992244992244992aa889424924494082449922449922449922449889048224924918888882022224920499224499224499294244992244992244992244992244992244992244992244952159192449288128124499224499224499224091112492489241211111144442409244992244992244992922449922449922449922449922449922449922449922449aa225292481251229024499224499224499224214222892491442222228288889114492491244992244932888800220a4484440452a0a445044a4493a4924492248988884844245094a224499224499224499224499224499224494992244992a4404a292549922449922449922449922449922449922449922429058a34922449129148924400919492524a29494952929494a424499224922449922489449292244992244912499224294922499224114922124992244992244912499244114551645224492422222222224244a4264952119148241228a5942449922449922449922449922449922429499224499248221149924844529224499224499244999244444423222225495292404a92244992244992244992244992244992244992244992244992244992244992a4544a91482422222222222222499124494a24128988881011a914918824499224499224499292244992244992a49212254992244922490a542925499224499224499224499224499224494a92244992242949928888284900498124920452a0249a2449494a920a922429499222222249921225499224499224491211111144442449922451124829a5244992244992244992244992244992244949922449922425491211118d2480448124920452a0249aa424254992242549922454812a2935498a244992888848922449922449929054a0529224491111d1240124059248124881926844442449499224492249929212484a92244992244992244992244992244992244992244992244992244992244992a44a4992244992284992244992244992244992244952928888682401240a249124900225d1242549924892a49212a84a9224499224499224494a922449922449922449d28888244992248a2490922449922449922449922449922449922449922449922449922449922449924492aa8888888888889424494444242211111149922449924892442449922492285320254992244992244992244992a42449922449922449922449922449922449922449552491441249924881889424499224499224499224499224499224499224499224499224499224499224495544922449924892244912492249924812499224491291442449122550241289442291482412894422914824128944229148241289442291144824128944229148241289442291482412894422914824128944225112489224499224499224499224a540912222aa222222224244a44644444424819424499224499224499224499224499224499224499224499224499224499224495524914412499248248924492249124992244944094451942449922449922449929424499224499224492289442491442292488a244912492222a2111140448188908888880820a24044484420054aa2499224a9a42449922449922425499224294992a424012405924812488192684444a4229148a4401445519212492491441249241249249144124924914824914412492491442291441249922449924892049224499224499224499224492950a48888aa888888881011a911912449228a4422492049922449922449929424499224499224499224499224499224499224499224495295244992242912489224499224499224499210915252929224222222128124022122229200124924490248124952a3494d9224499224499224494a92404a2925499224499224499224499224499224494a92244992a424a92449128124499224499224495292244992244992540049529124499224499224499224499224499224959292a4244992441225a922494a920291482412894422914824128944229148241289442291489224491225814892244992244992244992a414285244445522918888880811911a11912449922449529224499224492291884844448488482512898844229188482a899254912449498148241289442291482412894422914824128944224992244924128992402449922449922449922449520a142922a22a2222222244442a2222222209244992244992244992922449922449922449922449922449922449922449922449aa22922492448908a4945292244992244992244992244992244992a424499224494402884425220944511425499224499224499224499224499224494a922449922411082184888888888888222922224a024992244992244992a4244992244992244992244992244992244992244992244992aa8894249244940824499224499224499224498890482249249188888840444402492049922449922449929424499224499224499224499224499224499224499224495215919244928812812449922449922449922409111249248924121111118888184991441249922449922456a0d4880820a2404448444444041051202224229002252d2250229aa42449124995404a92244992244992244992244992244992244992244992244992244992244992a42a49294d92242549924492244992249504929224499224499224499224499224498a52209224499224499224499224491240524512481211111111111111111111914444444a92244992922449932449499224912449922449258124499224499224499224499224499214a52410499224499224499224499224010490948a24818888888888888888888888489224922225914492409224499224499224499224a222499224494992a41111911249a2241289a24824122910455194a444124924914412894412492491441249241249249144124924914824914412492491442291249024499224499224499224494a8122454454454444448488488d884822922489925491244949024992244992244992a4244992244992244992244992244992244992244992244992aa2449922409200288140924499224499224499224490811458992284922222222221281240221222292482491248924912435695293244992244992244992922490524a4992244992244992244992244992244992922449922429492a4992442025499224499224499224499224499224499224499224499224499224252949922449925492244992241149145144114524291089442291482412894422914824124522914824128944229148241249029124499224499224499224492950a48888aa888888881011a948442492049224499224499224494992244992244992244992244992244992244992244992245549922449922281244992244992244992240921a28888888888442089408888882412492449224924494d9ad4244992244992244992a42409a4945292244992244992244992244992244992a424499224494a924a9224114849922449922449922449922449922449922449922449922449922449494a929224499254924892441248922449922449922449922449922449922449922449922449529224499224499254452449922449522490244992244992244992242144141111111191082411081111914422892449248924a949931a49128924499224499248491248294a499224499224499224499224499224499292244992245124a9244912819424499224499224499224499224499224499224499224499224499224499224495114450a4422914824128944229148241289442291482412894422914824128992402449922449922449922449520a142922a22a22222222222244446a44442491482412914892248944228948222211222222222222222215111111111111111191544444443449024992244992244992a4244992244992244992244992244992244992244992244992288aa288248924498908244992244992244992244988109100225191441288244992244912499224499224922449922449942449922449111111111189404481082184480248249144124092484444443492409224499224499224294992244992244992244992244992244992244992244992248aa22822492249948840922449922449922449928488880410898a88241049922449922492244992244924499224499228499224499222222222221281880211420891049048228924802431496a94042291244992244922499224499244922449922425499224491245442989944422899254519288888888888808a2888888249024499224499224494a9224499224499224499224499224499224499224499224a94a922411459428892849140924499224499224499224495224110821848888888888888888888828a2884414491111512009244992244992244992922449922449922449922449922449922449922449922449aa2252924812512290244992244992244992242142228924914422222202111149024992244992244992a4244992244992244992244992244992244992244992244992aa8894249244940824499224499224499224498890482249249188888820226224451249244992244992282250a24992244a049224499224499224499224444892244912898888082222929424492449922449925811054a8d8800220a448444444444001105224222222222808802112111111111404481889088400a94b48840896892922449249504928888244922894444229144124912494a699224499224499224294992244992244992244992244992244992244992244992a42a499244491248922449922449922449122224010490a4124902492449922449922449922449925451920a04904892244992244992244992245599049288888824a224222222229224119144242950124d52928a8888244992122549922489888808444424499224510aa4944a922449922449922449922449922449929424499224492a499288886892009202492409a4404934492a529224419224699224499224499294540251d4489224ab2c4944449424494a92248924499224492a092425499224499224499224499224499214a5402449922449922449922449922480a48a249024111111494444444422221111119192244992a42449d28888484992a4244912489224499224499224254992244992244992244992244992244992244992244992544a69524a9294442492482492244992880aa40291282222922492489224912455444444a49288882809244992244992244992922449922449922449922449922449922449922449922449aa92942449a42490244992244992244992242142922449922489248888485292244992244992244b8152451448204922252949494a929440922425492200"
						},
						"methodIdentifiers": {
							"createService(string,uint256,string,address,string)": "a269eeb4",
							"listServices()": "de1c5488",
							"resolveDispute(bytes32,uint256,bool)": "faf0bbbf",
							"serviceIds(uint256)": "69d26933",
							"services(bytes32)": "0a790eb7",
							"stakes(bytes32)": "8fee6407",
							"topUpStake(bytes32)": "eaa3668f",
							"withdrawStake(bytes32,uint256)": "19dc5716"
						}
					},
					"irOptimized": "/// @use-src 1:\"EscroDot.sol\"\nobject \"EscroDotFactory_1534\" {\n    code {\n        {\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"EscroDotFactory_1534_deployed\"), datasize(\"EscroDotFactory_1534_deployed\"))\n            return(_1, datasize(\"EscroDotFactory_1534_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 1:\"EscroDot.sol\"\n    object \"EscroDotFactory_1534_deployed\" {\n        code {\n            {\n                /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_unsigned(calldataload(0))\n                    switch selector\n                    case 0x0a790eb7 { external_fun_services() }\n                    case 0x19dc5716 { external_fun_withdrawStake() }\n                    case 0x69d26933 { external_fun_serviceIds() }\n                    case 0x8fee6407 { external_fun_stakes() }\n                    case 0xa269eeb4 { external_fun_createService() }\n                    case 0xde1c5488 { external_fun_listServices() }\n                    case 0xeaa3668f { external_fun_topUpStake() }\n                    case 0xfaf0bbbf { external_fun_resolveDispute() }\n                    default { }\n                }\n                if iszero(calldatasize())\n                {\n                    fun()\n                    stop()\n                }\n                revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function cleanup_bytes32(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_bytes32(value)\n            {\n                if iszero(eq(value, cleanup_bytes32(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bytes32(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bytes32(value)\n            }\n            function abi_decode_bytes32(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n            }\n            function convert_bytes32_to_bytes32(value) -> converted\n            {\n                converted := cleanup_bytes32(value)\n            }\n            function mapping_index_access_mapping_bytes32_address_of_bytes32(slot, key) -> dataSlot\n            {\n                mstore(0, convert_bytes32_to_bytes32(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 1058 @src 1:11952:11995  \"mapping(bytes32 => address) public services\"\n            function getter_fun_services(key) -> ret\n            {\n                let slot := 0\n                let offset := 0\n                slot := mapping_index_access_mapping_bytes32_address_of_bytes32(slot, key)\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_services()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_bytes32(4, calldatasize())\n                let ret := getter_fun_services(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_withdrawStake()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_bytes32t_uint256(4, calldatasize())\n                fun_withdrawStake(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_bytes32_dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_bytes32_dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_bytes32_dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_bytes32_dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_bytes32_dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function cleanup_from_storage_bytes32(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_bytes32(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_bytes32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_bytes32(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_bytes32(sload(slot), offset)\n            }\n            /// @ast-id 1062 @src 1:12071:12098  \"bytes32[] public serviceIds\"\n            function getter_fun_serviceIds(key) -> ret\n            {\n                let slot := 1\n                let offset := 0\n                if iszero(lt(key, array_length_array_bytes32_dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_bytes32_dyn(slot, key)\n                ret := read_from_storage_split_dynamic_bytes32(slot, offset)\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function abi_encode_bytes32_to_bytes32(value, pos)\n            {\n                mstore(pos, cleanup_bytes32(value))\n            }\n            function abi_encode_tuple_bytes32(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n            }\n            function external_fun_serviceIds()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := getter_fun_serviceIds(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_bytes32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function mapping_index_access_mapping_bytes32_uint256_of_bytes32(slot, key) -> dataSlot\n            {\n                mstore(0, convert_bytes32_to_bytes32(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 1067 @src 1:12426:12467  \"mapping(bytes32 => uint256) public stakes\"\n            function getter_fun_stakes(key) -> ret\n            {\n                let slot := 2\n                let offset := 0\n                slot := mapping_index_access_mapping_bytes32_uint256_of_bytes32(slot, key)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_stakes()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_bytes32(4, calldatasize())\n                let ret := getter_fun_stakes(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n            { revert(0, 0) }\n            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            { revert(0, 0) }\n            function abi_decode_string_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff)\n                {\n                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                }\n                arrayPos := add(offset, 0x20)\n                if gt(add(arrayPos, mul(length, 0x01)), end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n            }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_string_calldatat_uint256t_string_calldatat_addresst_string_calldata(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n            {\n                if slt(sub(dataEnd, headStart), 160)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := calldataload(add(headStart, 0))\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value0, value1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value2 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := calldataload(add(headStart, 64))\n                if gt(offset_2, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value3, value4 := abi_decode_string_calldata(add(headStart, offset_2), dataEnd)\n                let offset_3 := 96\n                value5 := abi_decode_address(add(headStart, offset_3), dataEnd)\n                let offset_4 := calldataload(add(headStart, 128))\n                if gt(offset_4, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value6, value7 := abi_decode_string_calldata(add(headStart, offset_4), dataEnd)\n            }\n            function external_fun_createService()\n            {\n                let param, param_1, param_2, param_3, param_4, param_5, param_6, param_7 := abi_decode_string_calldatat_uint256t_string_calldatat_addresst_string_calldata(4, calldatasize())\n                let ret := fun_createService(param, param_1, param_2, param_3, param_4, param_5, param_6, param_7)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function array_length_array_bytes32_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_bytes32_dyn_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_bytes32_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_bytes32(value, pos)\n            {\n                mstore(pos, cleanup_bytes32(value))\n            }\n            function abi_encodeUpdatedPos_bytes32(value0, pos) -> updatedPos\n            {\n                abi_encode_bytes32(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_bytes32_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_bytes32_dyn(value, pos) -> end\n            {\n                let length := array_length_array_bytes32_dyn(value)\n                pos := array_storeLengthForEncoding_array_bytes32_dyn_fromStack(pos, length)\n                let baseRef := array_dataslot_array_bytes32_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_bytes32(elementValue0, pos)\n                    srcPtr := array_nextElement_array_bytes32_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function array_length_array_address_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_address_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_address_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_address_to_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encodeUpdatedPos_address(value0, pos) -> updatedPos\n            {\n                abi_encode_address_to_address(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_address_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_address_dyn(value, pos) -> end\n            {\n                let length := array_length_array_address_dyn(value)\n                pos := array_storeLengthForEncoding_array_address_dyn(pos, length)\n                let baseRef := array_dataslot_array_address_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_address(elementValue0, pos)\n                    srcPtr := array_nextElement_array_address_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_bytes32_dyn_array_address_dyn(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_bytes32_dyn(value0, tail)\n                mstore(add(headStart, 32), sub(tail, headStart))\n                tail := abi_encode_array_address_dyn(value1, tail)\n            }\n            function external_fun_listServices()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret, ret_1 := fun_listServices()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_bytes32_dyn_array_address_dyn(memPos, ret, ret_1)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_topUpStake()\n            {\n                let param := abi_decode_bytes32(4, calldatasize())\n                fun_topUpStake(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_bool(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bytes32t_uint256t_bool(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_bool(add(headStart, offset_2), dataEnd)\n            }\n            function external_fun_resolveDispute()\n            {\n                let param, param_1, param_2 := abi_decode_bytes32t_uint256t_bool(4, calldatasize())\n                fun_resolveDispute(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            { revert(0, 0) }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_rational_by(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function store_literal_in_memory_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: unknown service\")\n            }\n            function abi_encode_stringliteral_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 24)\n                store_literal_in_memory_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_96d5(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e(tail)\n            }\n            function require_helper_stringliteral_96d5(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_96d5(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            function convert_uint160_to_contract_ServiceEscrow(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_payable_to_contract_ServiceEscrow(value) -> converted\n            {\n                converted := convert_uint160_to_contract_ServiceEscrow(value)\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_contract_ServiceEscrow_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n            { revert(0, 0) }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function abi_decode_address_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function store_literal_in_memory_5147aea77307eebbc82386d11f46cd6583e977ed77df0a1f2373dd831babb95e(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: caller is not provider\")\n            }\n            function abi_encode_stringliteral(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 31)\n                store_literal_in_memory_5147aea77307eebbc82386d11f46cd6583e977ed77df0a1f2373dd831babb95e(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function store_literal_in_memory_e11480b26723b251671881ef357122778bc578ee0426134da4dddb81bd998963(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: insufficient stake bala\")\n                mstore(add(memPtr, 32), \"nce\")\n            }\n            function abi_encode_stringliteral_e11480b26723b251671881ef357122778bc578ee0426134da4dddb81bd998963(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 35)\n                store_literal_in_memory_e11480b26723b251671881ef357122778bc578ee0426134da4dddb81bd998963(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_e114(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_e11480b26723b251671881ef357122778bc578ee0426134da4dddb81bd998963(tail)\n            }\n            function require_helper_stringliteral_e114(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_e114(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            function abi_encode_uint256_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n            }\n            /// @ast-id 1356 @src 1:15353:15939  \"function withdrawStake(bytes32 serviceId, uint256 amount) external {...\"\n            function fun_withdrawStake(var_serviceId, var_amount)\n            {\n                /// @src 1:15451:15459  \"services\"\n                let _1_slot := 0x00\n                let expr_1289_slot := _1_slot\n                /// @src 1:15460:15469  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 1:15451:15470  \"services[serviceId]\"\n                let _2 := mapping_index_access_mapping_bytes32_address_of_bytes32(expr_1289_slot, expr)\n                let _3 := read_from_storage_split_offset_address(_2)\n                let expr_1 := _3\n                /// @src 1:15430:15470  \"address escrowAddr = services[serviceId]\"\n                let var_escrowAddr := expr_1\n                /// @src 1:15488:15498  \"escrowAddr\"\n                let _4 := var_escrowAddr\n                let expr_2 := _4\n                /// @src 1:15510:15511  \"0\"\n                let expr_3 := 0x00\n                /// @src 1:15502:15512  \"address(0)\"\n                let expr_4 := convert_rational_by_to_address(expr_3)\n                /// @src 1:15488:15512  \"escrowAddr != address(0)\"\n                let expr_5 := iszero(eq(cleanup_address(expr_2), cleanup_address(expr_4)))\n                /// @src 1:15480:15541  \"require(escrowAddr != address(0), \\\"Factory: unknown service\\\")\"\n                require_helper_stringliteral_96d5(expr_5)\n                /// @src 1:15597:15607  \"escrowAddr\"\n                let _5 := var_escrowAddr\n                let expr_6 := _5\n                /// @src 1:15589:15608  \"payable(escrowAddr)\"\n                let expr_7 := convert_address_to_address_payable(expr_6)\n                /// @src 1:15575:15609  \"ServiceEscrow(payable(escrowAddr))\"\n                let expr_1311_address := convert_address_payable_to_contract_ServiceEscrow(expr_7)\n                /// @src 1:15552:15609  \"ServiceEscrow escrow = ServiceEscrow(payable(escrowAddr))\"\n                let var_escrow_1305_address := expr_1311_address\n                /// @src 1:15627:15637  \"msg.sender\"\n                let expr_8 := caller()\n                /// @src 1:15641:15647  \"escrow\"\n                let _7_address := var_escrow_1305_address\n                let expr_1316_address := _7_address\n                /// @src 1:15641:15656  \"escrow.provider\"\n                let expr_1317_address := convert_contract_ServiceEscrow_to_address(expr_1316_address)\n                let expr_functionSelector := 0x085d4883\n                /// @src 1:15641:15658  \"escrow.provider()\"\n                let _6 := allocate_unbounded()\n                mstore(_6, shift_left_224(expr_functionSelector))\n                let _7 := abi_encode_tuple(add(_6, 4))\n                let _8 := staticcall(gas(), expr_1317_address, _6, sub(_7, _6), _6, 32)\n                if iszero(_8) { revert_forward() }\n                let expr_9\n                if _8\n                {\n                    let _9 := 32\n                    if gt(_9, returndatasize()) { _9 := returndatasize() }\n                    finalize_allocation(_6, _9)\n                    expr_9 := abi_decode_tuple_address_fromMemory(_6, add(_6, _9))\n                }\n                /// @src 1:15627:15658  \"msg.sender == escrow.provider()\"\n                let expr_10 := eq(cleanup_address(expr_8), cleanup_address(expr_9))\n                /// @src 1:15619:15694  \"require(msg.sender == escrow.provider(), \\\"Factory: caller is not provider\\\")\"\n                require_helper_stringliteral(expr_10)\n                /// @src 1:15712:15718  \"amount\"\n                let _10 := var_amount\n                let expr_11 := _10\n                /// @src 1:15722:15728  \"stakes\"\n                let _13_slot := 0x02\n                let expr_1325_slot := _13_slot\n                /// @src 1:15729:15738  \"serviceId\"\n                let _11 := var_serviceId\n                let expr_12 := _11\n                /// @src 1:15722:15739  \"stakes[serviceId]\"\n                let _12 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1325_slot, expr_12)\n                let _13 := read_from_storage_split_offset_uint256(_12)\n                let expr_13 := _13\n                /// @src 1:15712:15739  \"amount <= stakes[serviceId]\"\n                let expr_14 := iszero(gt(cleanup_uint256(expr_11), cleanup_uint256(expr_13)))\n                /// @src 1:15704:15779  \"require(amount <= stakes[serviceId], \\\"Factory: insufficient stake balance\\\")\"\n                require_helper_stringliteral_e114(expr_14)\n                /// @src 1:15811:15817  \"amount\"\n                let _14 := var_amount\n                let expr_15 := _14\n                /// @src 1:15790:15796  \"stakes\"\n                let _slot := 0x02\n                let expr_1332_slot := _slot\n                /// @src 1:15797:15806  \"serviceId\"\n                let _15 := var_serviceId\n                let expr_16 := _15\n                /// @src 1:15790:15807  \"stakes[serviceId]\"\n                let _16 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1332_slot, expr_16)\n                /// @src 1:15790:15817  \"stakes[serviceId] -= amount\"\n                let _17 := read_from_storage_split_offset_uint256(_16)\n                let expr_17 := checked_sub_uint256(_17, expr_15)\n                update_storage_value_offset_uint256_to_uint256(_16, expr_17)\n                /// @src 1:15844:15854  \"msg.sender\"\n                let expr_18 := caller()\n                /// @src 1:15836:15855  \"payable(msg.sender)\"\n                let expr_19 := convert_address_to_address_payable(expr_18)\n                /// @src 1:15857:15863  \"amount\"\n                let _18 := var_amount\n                let expr_20 := _18\n                fun_sendETH(expr_19, expr_20)\n                /// @src 1:15895:15904  \"serviceId\"\n                let _19 := var_serviceId\n                let expr_21 := _19\n                /// @src 1:15906:15912  \"amount\"\n                let _20 := var_amount\n                let expr_22 := _20\n                /// @src 1:15914:15920  \"stakes\"\n                let _25_slot := 0x02\n                let expr_1350_slot := _25_slot\n                /// @src 1:15921:15930  \"serviceId\"\n                let _21 := var_serviceId\n                let expr_23 := _21\n                /// @src 1:15914:15931  \"stakes[serviceId]\"\n                let _22 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1350_slot, expr_23)\n                let _23 := read_from_storage_split_offset_uint256(_22)\n                let expr_24 := _23\n                /// @src 1:15880:15932  \"StakeWithdrawn(serviceId, amount, stakes[serviceId])\"\n                let _24 := 0x64b42729c893e3b5f300276ef3057e004bd614dfc15219a30a3b069ec4386933\n                let _25 := convert_bytes32_to_bytes32(expr_21)\n                let _26 := allocate_unbounded()\n                let _27 := abi_encode_uint256_uint256(_26, expr_22, expr_24)\n                log2(_26, sub(_27, _26), _24, _25)\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function zero_value_for_split_address() -> ret\n            { ret := 0 }\n            function convert_array_string_calldata_to_bytes_calldata(value, length) -> converted, outLength\n            {\n                converted := value\n                outLength := length\n            }\n            function array_length_bytes_calldata(value, len) -> length\n            { length := len }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function store_literal_in_memory_0ebd5ed1e3fc00d82b641a5ddd6970eece6fee0bb9a2acf92e19df5edcd82b5d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: name cannot be empty\")\n            }\n            function abi_encode_stringliteral_0ebd(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 29)\n                store_literal_in_memory_0ebd5ed1e3fc00d82b641a5ddd6970eece6fee0bb9a2acf92e19df5edcd82b5d(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_0ebd(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_0ebd(tail)\n            }\n            function require_helper_stringliteral_0ebd(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_0ebd(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_a32fb7eb5859af14d9f22b4c155b99fd0f88c319b62ba9957f02f7c238ffc608(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: stake must cover at lea\")\n                mstore(add(memPtr, 32), \"st one refund\")\n            }\n            function abi_encode_stringliteral_a32f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 45)\n                store_literal_in_memory_a32fb7eb5859af14d9f22b4c155b99fd0f88c319b62ba9957f02f7c238ffc608(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_stringliteral_a32f(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_a32f(tail)\n            }\n            function require_helper_stringliteral_a32f(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_a32f(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_bytes(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_bytes(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function convert_array_bytes_calldata_to_bytes(value, length) -> converted\n            {\n                converted := abi_decode_available_length_bytes(value, length, calldatasize())\n            }\n            function array_dataslot_bytes(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function array_length_bytes(value) -> length\n            { length := mload(value) }\n            function store_literal_in_memory_0aa9f05bab895d0aa6548722458ce14a26ab4517847b5c08d27168045f5b9dff(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: service name already ta\")\n                mstore(add(memPtr, 32), \"ken\")\n            }\n            function abi_encode_stringliteral_0aa9f05bab895d0aa6548722458ce14a26ab4517847b5c08d27168045f5b9dff(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 35)\n                store_literal_in_memory_0aa9f05bab895d0aa6548722458ce14a26ab4517847b5c08d27168045f5b9dff(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_0aa9(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_0aa9f05bab895d0aa6548722458ce14a26ab4517847b5c08d27168045f5b9dff(tail)\n            }\n            function require_helper_stringliteral_0aa9(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_0aa9(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_contract_EscroDotFactory_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_string_calldata(start, length, pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, length)\n                copy_calldata_to_memory_with_cleanup(start, pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_address_bytes32_address_uint256_string_calldata_address_string_calldata(headStart, value0, value1, value2, value3, value4, value5, value6, value7, value8) -> tail\n            {\n                tail := add(headStart, 224)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_bytes32_to_bytes32(value1, add(headStart, 32))\n                abi_encode_address(value2, add(headStart, 64))\n                abi_encode_uint256_to_uint256(value3, add(headStart, 96))\n                mstore(add(headStart, 128), sub(tail, headStart))\n                tail := abi_encode_string_calldata(value4, value5, tail)\n                abi_encode_address(value6, add(headStart, 160))\n                mstore(add(headStart, 192), sub(tail, headStart))\n                tail := abi_encode_string_calldata(value7, value8, tail)\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_array_bytes32_dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_bytes32_dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_bytes32_dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_bytes32_dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_bytes32_dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_bytes32(value) -> ret\n            {\n                ret := shift_right_0_unsigned(value)\n            }\n            function update_storage_value_bytes32_to_bytes32(slot, offset, value)\n            {\n                let convertedValue := convert_bytes32_to_bytes32(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_bytes32(convertedValue)))\n            }\n            function array_push_from_bytes32_to_array_bytes32_dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_bytes32_dyn_ptr(array, oldLen)\n                update_storage_value_bytes32_to_bytes32(slot, offset, value0)\n            }\n            function abi_encode_string_calldata_address_uint256(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 96)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_string_calldata(value0, value1, tail)\n                abi_encode_address(value2, add(headStart, 32))\n                abi_encode_uint256_to_uint256(value3, add(headStart, 64))\n            }\n            /// @ast-id 1225 @src 1:13634:14740  \"function createService(...\"\n            function fun_createService(var_name_offset, var_name_length, var_price, var_gateway_offset, var_gateway_length, var_gatewaySigner, var_description_offset, var_description_length) -> var_escrow\n            {\n                /// @src 1:13843:13857  \"address escrow\"\n                let zero_address := zero_value_for_split_address()\n                var_escrow := zero_address\n                /// @src 1:13883:13887  \"name\"\n                let _offset := var_name_offset\n                let _34_length := var_name_length\n                let expr_1128_offset := _offset\n                let expr_length := _34_length\n                /// @src 1:13877:13888  \"bytes(name)\"\n                let expr_1129_offset, expr_1129_length := convert_array_string_calldata_to_bytes_calldata(expr_1128_offset, expr_length)\n                /// @src 1:13877:13895  \"bytes(name).length\"\n                let expr := array_length_bytes_calldata(expr_1129_offset, expr_1129_length)\n                /// @src 1:13898:13899  \"0\"\n                let expr_1 := 0x00\n                /// @src 1:13877:13899  \"bytes(name).length > 0\"\n                let expr_2 := gt(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 1:13869:13933  \"require(bytes(name).length > 0, \\\"Factory: name cannot be empty\\\")\"\n                require_helper_stringliteral_0ebd(expr_2)\n                /// @src 1:13951:13960  \"msg.value\"\n                let expr_3 := callvalue()\n                /// @src 1:13964:13969  \"price\"\n                let _1 := var_price\n                let expr_4 := _1\n                /// @src 1:13951:13969  \"msg.value >= price\"\n                let expr_5 := iszero(lt(cleanup_uint256(expr_3), cleanup_uint256(expr_4)))\n                /// @src 1:13943:14023  \"require(msg.value >= price,     \\\"Factory: stake must cover at least one refund\\\")\"\n                require_helper_stringliteral_a32f(expr_5)\n                /// @src 1:14070:14074  \"name\"\n                let _36_offset := var_name_offset\n                let _length := var_name_length\n                let expr_offset := _36_offset\n                let expr_1149_length := _length\n                /// @src 1:14064:14075  \"bytes(name)\"\n                let expr_1150_offset, expr_1150_length := convert_array_string_calldata_to_bytes_calldata(expr_offset, expr_1149_length)\n                /// @src 1:14054:14076  \"keccak256(bytes(name))\"\n                let _mpos := convert_array_bytes_calldata_to_bytes(expr_1150_offset, expr_1150_length)\n                let expr_6 := keccak256(array_dataslot_bytes(_mpos), array_length_bytes(_mpos))\n                /// @src 1:14034:14076  \"bytes32 serviceId = keccak256(bytes(name))\"\n                let var_serviceId := expr_6\n                /// @src 1:14094:14102  \"services\"\n                let _38_slot := 0x00\n                let expr_1154_slot := _38_slot\n                /// @src 1:14103:14112  \"serviceId\"\n                let _2 := var_serviceId\n                let expr_7 := _2\n                /// @src 1:14094:14113  \"services[serviceId]\"\n                let _3 := mapping_index_access_mapping_bytes32_address_of_bytes32(expr_1154_slot, expr_7)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_8 := _4\n                /// @src 1:14125:14126  \"0\"\n                let expr_9 := 0x00\n                /// @src 1:14117:14127  \"address(0)\"\n                let expr_10 := convert_rational_by_to_address(expr_9)\n                /// @src 1:14094:14127  \"services[serviceId] == address(0)\"\n                let expr_11 := eq(cleanup_address(expr_8), cleanup_address(expr_10))\n                /// @src 1:14086:14167  \"require(services[serviceId] == address(0), \\\"Factory: service name already taken\\\")\"\n                require_helper_stringliteral_0aa9(expr_11)\n                /// @src 1:14254:14258  \"this\"\n                let expr_1173_address := address()\n                /// @src 1:14246:14259  \"address(this)\"\n                let expr_12 := convert_contract_EscroDotFactory_to_address(expr_1173_address)\n                /// @src 1:14285:14294  \"serviceId\"\n                let _5 := var_serviceId\n                let expr_13 := _5\n                /// @src 1:14319:14329  \"msg.sender\"\n                let expr_14 := caller()\n                /// @src 1:14351:14356  \"price\"\n                let _6 := var_price\n                let expr_15 := _6\n                /// @src 1:14380:14387  \"gateway\"\n                let _44_offset := var_gateway_offset\n                let _44_length := var_gateway_length\n                let expr_1179_offset := _44_offset\n                let expr_1179_length := _44_length\n                /// @src 1:14417:14430  \"gatewaySigner\"\n                let _7 := var_gatewaySigner\n                let expr_16 := _7\n                /// @src 1:14458:14469  \"description\"\n                let _46_offset := var_description_offset\n                let _46_length := var_description_length\n                let expr_1181_offset := _46_offset\n                let expr_1181_length := _46_length\n                /// @src 1:14204:14480  \"new ServiceEscrow({...\"\n                let _8 := allocate_unbounded()\n                let _9 := add(_8, datasize(\"ServiceEscrow_1052\"))\n                if or(gt(_9, 0xffffffffffffffff), lt(_9, _8)) { panic_error_0x41() }\n                datacopy(_8, dataoffset(\"ServiceEscrow_1052\"), datasize(\"ServiceEscrow_1052\"))\n                _9 := abi_encode_address_bytes32_address_uint256_string_calldata_address_string_calldata(_9, expr_12, expr_13, expr_14, expr_15, expr_1179_offset, expr_1179_length, expr_16, expr_1181_offset, expr_1181_length)\n                let expr_1182_address := create(0, _8, sub(_9, _8))\n                if iszero(expr_1182_address) { revert_forward() }\n                /// @src 1:14178:14480  \"ServiceEscrow newEscrow = new ServiceEscrow({...\"\n                let var_newEscrow_address := expr_1182_address\n                /// @src 1:14521:14530  \"newEscrow\"\n                let _49_address := var_newEscrow_address\n                let expr_1189_address := _49_address\n                /// @src 1:14513:14531  \"address(newEscrow)\"\n                let expr_17 := convert_contract_ServiceEscrow_to_address(expr_1189_address)\n                /// @src 1:14491:14499  \"services\"\n                let _50_slot := 0x00\n                let expr_slot := _50_slot\n                /// @src 1:14500:14509  \"serviceId\"\n                let _10 := var_serviceId\n                let expr_18 := _10\n                /// @src 1:14491:14510  \"services[serviceId]\"\n                let _11 := mapping_index_access_mapping_bytes32_address_of_bytes32(expr_slot, expr_18)\n                /// @src 1:14491:14531  \"services[serviceId] = address(newEscrow)\"\n                update_storage_value_offset_address_to_address(_11, expr_17)\n                /// @src 1:14541:14551  \"serviceIds\"\n                let _53_slot := 0x01\n                let expr_1193_slot := _53_slot\n                /// @src 1:14541:14556  \"serviceIds.push\"\n                let expr_self_slot := convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn_ptr(expr_1193_slot)\n                /// @src 1:14557:14566  \"serviceId\"\n                let _12 := var_serviceId\n                let expr_19 := _12\n                /// @src 1:14541:14567  \"serviceIds.push(serviceId)\"\n                array_push_from_bytes32_to_array_bytes32_dyn_storage_ptr(expr_self_slot, expr_19)\n                /// @src 1:14597:14606  \"msg.value\"\n                let expr_20 := callvalue()\n                /// @src 1:14577:14583  \"stakes\"\n                let _55_slot := 0x02\n                let expr_1199_slot := _55_slot\n                /// @src 1:14584:14593  \"serviceId\"\n                let _13 := var_serviceId\n                let expr_21 := _13\n                /// @src 1:14577:14594  \"stakes[serviceId]\"\n                let _14 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1199_slot, expr_21)\n                /// @src 1:14577:14606  \"stakes[serviceId] = msg.value\"\n                update_storage_value_offset_uint256_to_uint256(_14, expr_20)\n                /// @src 1:14638:14647  \"serviceId\"\n                let _15 := var_serviceId\n                let expr_22 := _15\n                /// @src 1:14649:14653  \"name\"\n                let _59_offset := var_name_offset\n                let _59_length := var_name_length\n                let expr_1208_offset := _59_offset\n                let expr_1208_length := _59_length\n                /// @src 1:14663:14672  \"newEscrow\"\n                let _60_address := var_newEscrow_address\n                let expr_1211_address := _60_address\n                /// @src 1:14655:14673  \"address(newEscrow)\"\n                let expr_23 := convert_contract_ServiceEscrow_to_address(expr_1211_address)\n                /// @src 1:14675:14685  \"msg.sender\"\n                let expr_24 := caller()\n                /// @src 1:14687:14696  \"msg.value\"\n                let expr_25 := callvalue()\n                /// @src 1:14622:14697  \"ServiceDeployed(serviceId, name, address(newEscrow), msg.sender, msg.value)\"\n                let _16 := 0x55617356247c187daefc7e9c394e92ac79246493b4da24a6d351d4076f9bac4d\n                let _17 := convert_bytes32_to_bytes32(expr_22)\n                let _18 := convert_address_to_address(expr_24)\n                let _19 := allocate_unbounded()\n                let _20 := abi_encode_string_calldata_address_uint256(_19, expr_1208_offset, expr_1208_length, expr_23, expr_25)\n                log3(_19, sub(_20, _19), _16, _17, _18)\n                /// @src 1:14723:14732  \"newEscrow\"\n                let _66_address := var_newEscrow_address\n                let expr_1221_address := _66_address\n                /// @src 1:14715:14733  \"address(newEscrow)\"\n                let expr_26 := convert_contract_ServiceEscrow_to_address(expr_1221_address)\n                /// @src 1:14708:14733  \"return address(newEscrow)\"\n                var_escrow := expr_26\n                leave\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function zero_value_for_split_array_bytes32_dyn() -> ret\n            { ret := 96 }\n            function zero_value_for_split_array_address_dyn() -> ret\n            { ret := 96 }\n            function array_storeLengthForEncoding_array_bytes32_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function extract_from_storage_value_offset_bytes32(slot_value) -> value\n            {\n                value := cleanup_from_storage_bytes32(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_offset_bytes32(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bytes32(sload(slot))\n            }\n            function array_nextElement_array_bytes32_dyn_storage(ptr) -> next\n            { next := add(ptr, 0x01) }\n            function abi_encode_array_bytes32_dyn_storage(value, pos) -> end\n            {\n                let length := array_length_array_bytes32_dyn_storage(value)\n                pos := array_storeLengthForEncoding_array_bytes32_dyn(pos, length)\n                let baseRef := array_dataslot_array_bytes32_dyn_storage(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := read_from_storage_offset_bytes32(srcPtr)\n                    pos := abi_encodeUpdatedPos_bytes32(elementValue0, pos)\n                    srcPtr := array_nextElement_array_bytes32_dyn_storage(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encodeUpdatedPos_array_bytes32_dyn_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_array_bytes32_dyn_storage(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_array_bytes32_dyn(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_array_bytes32_dyn_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_bytes32_dyn(value)\n            }\n            function array_allocation_size_array_address_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_address_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_address_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_memory_chunk_address(dataStart, dataSizeInBytes)\n            {\n                calldatacopy(dataStart, calldatasize(), dataSizeInBytes)\n            }\n            function allocate_and_zero_memory_array_array_address_dyn(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_array_address_dyn(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_array_address_dyn(length)\n                dataStart := add(dataStart, 32)\n                dataSize := sub(dataSize, 32)\n                zero_memory_chunk_address(dataStart, dataSize)\n            }\n            function increment_wrapping_uint256(value) -> ret\n            {\n                ret := cleanup_uint256(add(value, 1))\n            }\n            function memory_array_index_access_bytes32_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_array_bytes32_dyn(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function read_from_memoryt_bytes32(ptr) -> returnValue\n            {\n                let value := cleanup_bytes32(mload(ptr))\n                returnValue := value\n            }\n            function memory_array_index_access_address_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_array_address_dyn(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            /// @ast-id 1503 @src 1:17416:17697  \"function listServices() external view returns (bytes32[] memory ids, address[] memory escrows) {...\"\n            function fun_listServices() -> var_ids_mpos, var_escrows_mpos\n            {\n                /// @src 1:17463:17483  \"bytes32[] memory ids\"\n                let zero_array_bytes32_dyn_mpos := zero_value_for_split_array_bytes32_dyn()\n                var_ids_mpos := zero_array_bytes32_dyn_mpos\n                /// @src 1:17485:17509  \"address[] memory escrows\"\n                let zero_array_address_dyn_mpos := zero_value_for_split_array_address_dyn()\n                var_escrows_mpos := zero_array_address_dyn_mpos\n                /// @src 1:17531:17541  \"serviceIds\"\n                let _69_slot := 0x01\n                let expr_1467_slot := _69_slot\n                /// @src 1:17521:17541  \"ids     = serviceIds\"\n                var_ids_mpos := convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn(expr_1467_slot)\n                /// @src 1:17575:17578  \"ids\"\n                let _71_mpos := var_ids_mpos\n                let expr_1474_mpos := _71_mpos\n                /// @src 1:17575:17585  \"ids.length\"\n                let expr := array_length_array_bytes32_dyn(expr_1474_mpos)\n                /// @src 1:17561:17586  \"new address[](ids.length)\"\n                let expr_1476_mpos := allocate_and_zero_memory_array_array_address_dyn(expr)\n                /// @src 1:17551:17586  \"escrows = new address[](ids.length)\"\n                var_escrows_mpos := expr_1476_mpos\n                /// @src 1:17613:17614  \"0\"\n                let expr_1 := 0x00\n                /// @src 1:17601:17614  \"uint256 i = 0\"\n                let var_i := convert_rational_by_to_uint256(expr_1)\n                /// @src 1:17596:17691  \"for (uint256 i = 0; i < ids.length; ++i) {...\"\n                for { }\n                /** @src 1:17601:17614  \"uint256 i = 0\" */ 1\n                {\n                    /// @src 1:17632:17635  \"++i\"\n                    let _1 := var_i\n                    let _2 := increment_wrapping_uint256(_1)\n                    var_i := _2\n                }\n                {\n                    /// @src 1:17616:17617  \"i\"\n                    let _3 := var_i\n                    let expr_2 := _3\n                    /// @src 1:17620:17623  \"ids\"\n                    let _76_mpos := var_ids_mpos\n                    let expr_1484_mpos := _76_mpos\n                    /// @src 1:17620:17630  \"ids.length\"\n                    let expr_3 := array_length_array_bytes32_dyn(expr_1484_mpos)\n                    /// @src 1:17616:17630  \"i < ids.length\"\n                    let expr_4 := lt(cleanup_uint256(expr_2), cleanup_uint256(expr_3))\n                    if iszero(expr_4) { break }\n                    /// @src 1:17664:17672  \"services\"\n                    let _77_slot := 0x00\n                    let expr_1493_slot := _77_slot\n                    /// @src 1:17673:17676  \"ids\"\n                    let _78_mpos := var_ids_mpos\n                    let expr_1494_mpos := _78_mpos\n                    /// @src 1:17677:17678  \"i\"\n                    let _4 := var_i\n                    let expr_5 := _4\n                    /// @src 1:17673:17679  \"ids[i]\"\n                    let _5 := read_from_memoryt_bytes32(memory_array_index_access_bytes32_dyn(expr_1494_mpos, expr_5))\n                    let expr_6 := _5\n                    /// @src 1:17664:17680  \"services[ids[i]]\"\n                    let _6 := mapping_index_access_mapping_bytes32_address_of_bytes32(expr_1493_slot, expr_6)\n                    let _7 := read_from_storage_split_offset_address(_6)\n                    let expr_7 := _7\n                    /// @src 1:17651:17658  \"escrows\"\n                    let _83_mpos := var_escrows_mpos\n                    let expr_mpos := _83_mpos\n                    /// @src 1:17659:17660  \"i\"\n                    let _8 := var_i\n                    let expr_8 := _8\n                    /// @src 1:17651:17680  \"escrows[i] = services[ids[i]]\"\n                    let _9 := expr_7\n                    write_to_memory_address(memory_array_index_access_address_dyn(expr_mpos, expr_8), _9)\n                }\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 1279 @src 1:14795:15253  \"function topUpStake(bytes32 serviceId) external payable {...\"\n            function fun_topUpStake(var_serviceId)\n            {\n                /// @src 1:14882:14890  \"services\"\n                let _86_slot := 0x00\n                let expr_1233_slot := _86_slot\n                /// @src 1:14891:14900  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 1:14882:14901  \"services[serviceId]\"\n                let _2 := mapping_index_access_mapping_bytes32_address_of_bytes32(expr_1233_slot, expr)\n                let _3 := read_from_storage_split_offset_address(_2)\n                let expr_1 := _3\n                /// @src 1:14861:14901  \"address escrowAddr = services[serviceId]\"\n                let var_escrowAddr := expr_1\n                /// @src 1:14919:14929  \"escrowAddr\"\n                let _4 := var_escrowAddr\n                let expr_2 := _4\n                /// @src 1:14941:14942  \"0\"\n                let expr_3 := 0x00\n                /// @src 1:14933:14943  \"address(0)\"\n                let expr_4 := convert_rational_by_to_address(expr_3)\n                /// @src 1:14919:14943  \"escrowAddr != address(0)\"\n                let expr_5 := iszero(eq(cleanup_address(expr_2), cleanup_address(expr_4)))\n                /// @src 1:14911:14972  \"require(escrowAddr != address(0), \\\"Factory: unknown service\\\")\"\n                require_helper_stringliteral_96d5(expr_5)\n                /// @src 1:15041:15051  \"msg.sender\"\n                let expr_6 := caller()\n                /// @src 1:15077:15087  \"escrowAddr\"\n                let _5 := var_escrowAddr\n                let expr_7 := _5\n                /// @src 1:15069:15088  \"payable(escrowAddr)\"\n                let expr_8 := convert_address_to_address_payable(expr_7)\n                /// @src 1:15055:15089  \"ServiceEscrow(payable(escrowAddr))\"\n                let expr_1255_address := convert_address_payable_to_contract_ServiceEscrow(expr_8)\n                /// @src 1:15055:15098  \"ServiceEscrow(payable(escrowAddr)).provider\"\n                let expr_1256_address := convert_contract_ServiceEscrow_to_address(expr_1255_address)\n                let expr_1256_functionSelector := 0x085d4883\n                /// @src 1:15055:15100  \"ServiceEscrow(payable(escrowAddr)).provider()\"\n                let _6 := allocate_unbounded()\n                mstore(_6, shift_left_224(expr_1256_functionSelector))\n                let _7 := abi_encode_tuple(add(_6, 4))\n                let _8 := staticcall(gas(), expr_1256_address, _6, sub(_7, _6), _6, 32)\n                if iszero(_8) { revert_forward() }\n                let expr_9\n                if _8\n                {\n                    let _9 := 32\n                    if gt(_9, returndatasize()) { _9 := returndatasize() }\n                    finalize_allocation(_6, _9)\n                    expr_9 := abi_decode_tuple_address_fromMemory(_6, add(_6, _9))\n                }\n                /// @src 1:15041:15100  \"msg.sender == ServiceEscrow(payable(escrowAddr)).provider()\"\n                let expr_10 := eq(cleanup_address(expr_6), cleanup_address(expr_9))\n                /// @src 1:15033:15136  \"require(msg.sender == ServiceEscrow(payable(escrowAddr)).provider(), \\\"Factory: caller is not provider\\\")\"\n                require_helper_stringliteral(expr_10)\n                /// @src 1:15168:15177  \"msg.value\"\n                let expr_11 := callvalue()\n                /// @src 1:15147:15153  \"stakes\"\n                let _96_slot := 0x02\n                let expr_1262_slot := _96_slot\n                /// @src 1:15154:15163  \"serviceId\"\n                let _10 := var_serviceId\n                let expr_12 := _10\n                /// @src 1:15147:15164  \"stakes[serviceId]\"\n                let _11 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1262_slot, expr_12)\n                /// @src 1:15147:15177  \"stakes[serviceId] += msg.value\"\n                let _12 := read_from_storage_split_offset_uint256(_11)\n                let expr_13 := checked_add_uint256(_12, expr_11)\n                update_storage_value_offset_uint256_to_uint256(_11, expr_13)\n                /// @src 1:15206:15215  \"serviceId\"\n                let _13 := var_serviceId\n                let expr_14 := _13\n                /// @src 1:15217:15226  \"msg.value\"\n                let expr_15 := callvalue()\n                /// @src 1:15228:15234  \"stakes\"\n                let _101_slot := 0x02\n                let expr_1273_slot := _101_slot\n                /// @src 1:15235:15244  \"serviceId\"\n                let _14 := var_serviceId\n                let expr_16 := _14\n                /// @src 1:15228:15245  \"stakes[serviceId]\"\n                let _15 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1273_slot, expr_16)\n                let _16 := read_from_storage_split_offset_uint256(_15)\n                let expr_17 := _16\n                /// @src 1:15192:15246  \"StakeToppedUp(serviceId, msg.value, stakes[serviceId])\"\n                let _17 := 0x077a7ccf44b26a4e3477c9abb31e09a68f3d67436717d4ffa709adb2949dc70b\n                let _18 := convert_bytes32_to_bytes32(expr_14)\n                let _19 := allocate_unbounded()\n                let _20 := abi_encode_uint256_uint256(_19, expr_15, expr_17)\n                log2(_19, sub(_20, _19), _17, _18)\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function abi_decode_t_uint256_fromMemory(offset, end) -> value\n            {\n                value := mload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_uint256_fromMemory(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_uint256_fromMemory(add(headStart, offset), dataEnd)\n            }\n            function store_literal_in_memory_8c33e9b7e89158e89f6230403ddfe89c870b6225dae3121bb8a7c93f0f49c833(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: arbiter bond too low\")\n            }\n            function abi_encode_stringliteral_8c33(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 29)\n                store_literal_in_memory_8c33e9b7e89158e89f6230403ddfe89c870b6225dae3121bb8a7c93f0f49c833(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_8c33(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8c33(tail)\n            }\n            function require_helper_stringliteral_8c33(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_8c33(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function abi_decode_fromMemory(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function store_literal_in_memory_316d003cf7324603515d8dcd625fbcf6567a4d02bc2c462a306571c229aef252(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: provider stake insuffic\")\n                mstore(add(memPtr, 32), \"ient\")\n            }\n            function abi_encode_stringliteral_316d003cf7324603515d8dcd625fbcf6567a4d02bc2c462a306571c229aef252(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 36)\n                store_literal_in_memory_316d003cf7324603515d8dcd625fbcf6567a4d02bc2c462a306571c229aef252(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_316d(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_316d003cf7324603515d8dcd625fbcf6567a4d02bc2c462a306571c229aef252(tail)\n            }\n            function require_helper_stringliteral_316d(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_316d(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            /// @ast-id 1456 @src 1:16241:17283  \"function resolveDispute(...\"\n            function fun_resolveDispute(var_serviceId, var_purchaseId, var_refundBuyer)\n            {\n                /// @src 1:16400:16408  \"services\"\n                let _109_slot := 0x00\n                let expr_1368_slot := _109_slot\n                /// @src 1:16409:16418  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 1:16400:16419  \"services[serviceId]\"\n                let _2 := mapping_index_access_mapping_bytes32_address_of_bytes32(expr_1368_slot, expr)\n                let _3 := read_from_storage_split_offset_address(_2)\n                let expr_1 := _3\n                /// @src 1:16379:16419  \"address escrowAddr = services[serviceId]\"\n                let var_escrowAddr := expr_1\n                /// @src 1:16437:16447  \"escrowAddr\"\n                let _4 := var_escrowAddr\n                let expr_2 := _4\n                /// @src 1:16459:16460  \"0\"\n                let expr_3 := 0x00\n                /// @src 1:16451:16461  \"address(0)\"\n                let expr_4 := convert_rational_by_to_address(expr_3)\n                /// @src 1:16437:16461  \"escrowAddr != address(0)\"\n                let expr_5 := iszero(eq(cleanup_address(expr_2), cleanup_address(expr_4)))\n                /// @src 1:16429:16490  \"require(escrowAddr != address(0), \\\"Factory: unknown service\\\")\"\n                require_helper_stringliteral_96d5(expr_5)\n                /// @src 1:16546:16556  \"escrowAddr\"\n                let _5 := var_escrowAddr\n                let expr_6 := _5\n                /// @src 1:16538:16557  \"payable(escrowAddr)\"\n                let expr_7 := convert_address_to_address_payable(expr_6)\n                /// @src 1:16524:16558  \"ServiceEscrow(payable(escrowAddr))\"\n                let expr_1390_address := convert_address_payable_to_contract_ServiceEscrow(expr_7)\n                /// @src 1:16501:16558  \"ServiceEscrow escrow = ServiceEscrow(payable(escrowAddr))\"\n                let var_escrow_address := expr_1390_address\n                /// @src 1:16646:16655  \"msg.value\"\n                let expr_8 := callvalue()\n                /// @src 1:16659:16665  \"escrow\"\n                let _115_address := var_escrow_address\n                let expr_1395_address := _115_address\n                /// @src 1:16659:16671  \"escrow.price\"\n                let expr_1396_address := convert_contract_ServiceEscrow_to_address(expr_1395_address)\n                let expr_1396_functionSelector := 0xa035b1fe\n                /// @src 1:16659:16673  \"escrow.price()\"\n                let _6 := allocate_unbounded()\n                mstore(_6, shift_left_224(expr_1396_functionSelector))\n                let _7 := abi_encode_tuple(add(_6, 4))\n                let _8 := staticcall(gas(), expr_1396_address, _6, sub(_7, _6), _6, 32)\n                if iszero(_8) { revert_forward() }\n                let expr_9\n                if _8\n                {\n                    let _9 := 32\n                    if gt(_9, returndatasize()) { _9 := returndatasize() }\n                    finalize_allocation(_6, _9)\n                    expr_9 := abi_decode_uint256_fromMemory(_6, add(_6, _9))\n                }\n                /// @src 1:16646:16673  \"msg.value >= escrow.price()\"\n                let expr_10 := iszero(lt(cleanup_uint256(expr_8), cleanup_uint256(expr_9)))\n                /// @src 1:16638:16707  \"require(msg.value >= escrow.price(), \\\"Factory: arbiter bond too low\\\")\"\n                require_helper_stringliteral_8c33(expr_10)\n                /// @src 1:16722:16733  \"refundBuyer\"\n                let _10 := var_refundBuyer\n                let expr_11 := _10\n                /// @src 1:16718:17058  \"if (refundBuyer) {...\"\n                switch expr_11\n                case 0 {\n                    /// @src 1:17004:17010  \"escrow\"\n                    let _121_address := var_escrow_address\n                    let expr_1429_address := _121_address\n                    /// @src 1:17004:17035  \"escrow.factoryReleaseToProvider\"\n                    let expr_address := convert_contract_ServiceEscrow_to_address(expr_1429_address)\n                    let expr_1431_functionSelector := 0xdf686ded\n                    /// @src 1:17036:17046  \"purchaseId\"\n                    let _11 := var_purchaseId\n                    let expr_12 := _11\n                    /// @src 1:17004:17047  \"escrow.factoryReleaseToProvider(purchaseId)\"\n                    if iszero(extcodesize(expr_address))\n                    {\n                        revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                    }\n                    let _12 := allocate_unbounded()\n                    mstore(_12, shift_left_224(expr_1431_functionSelector))\n                    let _13 := abi_encode_uint256(add(_12, 4), expr_12)\n                    let _14 := call(gas(), expr_address, 0, _12, sub(_13, _12), _12, 0)\n                    if iszero(_14) { revert_forward() }\n                    if _14\n                    {\n                        let _15 := 0\n                        if gt(_15, returndatasize()) { _15 := returndatasize() }\n                        finalize_allocation(_12, _15)\n                        abi_decode_fromMemory(_12, add(_12, _15))\n                    }\n                }\n                default /// @src 1:16718:17058  \"if (refundBuyer) {...\"\n                {\n                    /// @src 1:16757:16763  \"stakes\"\n                    let _127_slot := 0x02\n                    let expr_1404_slot := _127_slot\n                    /// @src 1:16764:16773  \"serviceId\"\n                    let _16 := var_serviceId\n                    let expr_13 := _16\n                    /// @src 1:16757:16774  \"stakes[serviceId]\"\n                    let _17 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1404_slot, expr_13)\n                    let _18 := read_from_storage_split_offset_uint256(_17)\n                    let expr_14 := _18\n                    /// @src 1:16778:16784  \"escrow\"\n                    let _131_address := var_escrow_address\n                    let expr_1407_address := _131_address\n                    /// @src 1:16778:16790  \"escrow.price\"\n                    let expr_1408_address := convert_contract_ServiceEscrow_to_address(expr_1407_address)\n                    let expr_1408_functionSelector := 0xa035b1fe\n                    /// @src 1:16778:16792  \"escrow.price()\"\n                    let _19 := allocate_unbounded()\n                    mstore(_19, shift_left_224(expr_1408_functionSelector))\n                    let _20 := abi_encode_tuple(add(_19, 4))\n                    let _21 := staticcall(gas(), expr_1408_address, _19, sub(_20, _19), _19, 32)\n                    if iszero(_21) { revert_forward() }\n                    let expr_15\n                    if _21\n                    {\n                        let _22 := 32\n                        if gt(_22, returndatasize()) { _22 := returndatasize() }\n                        finalize_allocation(_19, _22)\n                        expr_15 := abi_decode_uint256_fromMemory(_19, add(_19, _22))\n                    }\n                    /// @src 1:16757:16792  \"stakes[serviceId] >= escrow.price()\"\n                    let expr_16 := iszero(lt(cleanup_uint256(expr_14), cleanup_uint256(expr_15)))\n                    /// @src 1:16749:16833  \"require(stakes[serviceId] >= escrow.price(), \\\"Factory: provider stake insufficient\\\")\"\n                    require_helper_stringliteral_316d(expr_16)\n                    /// @src 1:16868:16874  \"escrow\"\n                    let _136_address := var_escrow_address\n                    let expr_1417_address := _136_address\n                    /// @src 1:16868:16880  \"escrow.price\"\n                    let expr_1418_address := convert_contract_ServiceEscrow_to_address(expr_1417_address)\n                    let expr_1418_functionSelector := 0xa035b1fe\n                    /// @src 1:16868:16882  \"escrow.price()\"\n                    let _23 := allocate_unbounded()\n                    mstore(_23, shift_left_224(expr_1418_functionSelector))\n                    let _24 := abi_encode_tuple(add(_23, 4))\n                    let _25 := staticcall(gas(), expr_1418_address, _23, sub(_24, _23), _23, 32)\n                    if iszero(_25) { revert_forward() }\n                    let expr_17\n                    if _25\n                    {\n                        let _26 := 32\n                        if gt(_26, returndatasize()) { _26 := returndatasize() }\n                        finalize_allocation(_23, _26)\n                        expr_17 := abi_decode_uint256_fromMemory(_23, add(_23, _26))\n                    }\n                    /// @src 1:16847:16853  \"stakes\"\n                    let _141_slot := 0x02\n                    let expr_1414_slot := _141_slot\n                    /// @src 1:16854:16863  \"serviceId\"\n                    let _27 := var_serviceId\n                    let expr_18 := _27\n                    /// @src 1:16847:16864  \"stakes[serviceId]\"\n                    let _28 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1414_slot, expr_18)\n                    /// @src 1:16847:16882  \"stakes[serviceId] -= escrow.price()\"\n                    let _29 := read_from_storage_split_offset_uint256(_28)\n                    let expr_19 := checked_sub_uint256(_29, expr_17)\n                    update_storage_value_offset_uint256_to_uint256(_28, expr_19)\n                    /// @src 1:16896:16902  \"escrow\"\n                    let _address := var_escrow_address\n                    let expr_1422_address := _address\n                    /// @src 1:16896:16921  \"escrow.factoryRefundBuyer\"\n                    let expr_1424_address := convert_contract_ServiceEscrow_to_address(expr_1422_address)\n                    let expr_1424_functionSelector := 0x88985ec5\n                    /// @src 1:16922:16932  \"purchaseId\"\n                    let _30 := var_purchaseId\n                    let expr_20 := _30\n                    /// @src 1:16896:16933  \"escrow.factoryRefundBuyer(purchaseId)\"\n                    if iszero(extcodesize(expr_1424_address))\n                    {\n                        revert_error_0cc013b6b3b6beabea4e3a74a6d380f0df81852ca99887912475e1f66b2a2c20()\n                    }\n                    let _31 := allocate_unbounded()\n                    mstore(_31, shift_left_224(expr_1424_functionSelector))\n                    let _32 := abi_encode_uint256(add(_31, 4), expr_20)\n                    let _33 := call(gas(), expr_1424_address, 0, _31, sub(_32, _31), _31, 0)\n                    if iszero(_33) { revert_forward() }\n                    if _33\n                    {\n                        let _34 := 0\n                        if gt(_34, returndatasize()) { _34 := returndatasize() }\n                        finalize_allocation(_31, _34)\n                        abi_decode_fromMemory(_31, add(_31, _34))\n                    }\n                }\n                /// @src 1:17174:17184  \"msg.sender\"\n                let expr_21 := caller()\n                /// @src 1:17166:17185  \"payable(msg.sender)\"\n                let expr_22 := convert_address_to_address_payable(expr_21)\n                /// @src 1:17187:17196  \"msg.value\"\n                let expr_23 := callvalue()\n                fun_sendETH(expr_22, expr_23)\n                /// @src 1:17229:17238  \"serviceId\"\n                let _35 := var_serviceId\n                let expr_24 := _35\n                /// @src 1:17240:17250  \"purchaseId\"\n                let _36 := var_purchaseId\n                let expr_25 := _36\n                /// @src 1:17252:17263  \"refundBuyer\"\n                let _37 := var_refundBuyer\n                let expr_26 := _37\n                /// @src 1:17265:17275  \"msg.sender\"\n                let expr_27 := caller()\n                /// @src 1:17213:17276  \"DisputeResolved(serviceId, purchaseId, refundBuyer, msg.sender)\"\n                let _38 := 0xbc15360fdbc18726032673554343b47ea8c03297136da385c28550253778baf5\n                let _39 := convert_bytes32_to_bytes32(expr_24)\n                let _40 := convert_uint256_to_uint256(expr_25)\n                let _41 := convert_address_to_address(expr_27)\n                let _42 := allocate_unbounded()\n                let _43 := abi_encode_bool(_42, expr_26)\n                log4(_42, sub(_43, _42), _38, _39, _40, _41)\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function store_literal_in_memory_6d4fc89db44c3e5ab24f2621240f8027c53de8a354eb06192b1d04c56008c4ee(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: direct ETH not accepted\")\n            }\n            function abi_encode_stringliteral_6d4f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 32)\n                store_literal_in_memory_6d4fc89db44c3e5ab24f2621240f8027c53de8a354eb06192b1d04c56008c4ee(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_6d4f(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_6d4f(tail)\n            }\n            /// @ast-id 1533 @src 1:17891:17977  \"receive() external payable {...\"\n            function fun()\n            {\n                /// @src 1:17928:17970  \"revert(\\\"Factory: direct ETH not accepted\\\")\"\n                let _1 := allocate_unbounded()\n                mstore(_1, /** @src 1:11609:17979  \"contract EscroDotFactory {...\" */ shl(229, 4594637))\n                /// @src 1:17928:17970  \"revert(\\\"Factory: direct ETH not accepted\\\")\"\n                let _2 := abi_encode_tuple_stringliteral_6d4f(add(_1, 4))\n                revert(_1, sub(_2, _1))\n            }\n            /// @src 1:11609:17979  \"contract EscroDotFactory {...\"\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_stringliteral_c5d2(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                end := add(pos, 0)\n            }\n            function abi_encode_packed_stringliteral_c5d2(pos) -> end\n            {\n                pos := abi_encode_stringliteral_c5d2(pos)\n                end := pos\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            function store_literal_in_memory_016b51de617488da0a7e7c807388db04b530ae80a0bfb01224d2d4e4074c3727(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Factory: ETH transfer failed\")\n            }\n            function abi_encode_stringliteral_016b(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string(pos, 28)\n                store_literal_in_memory_016b51de617488da0a7e7c807388db04b530ae80a0bfb01224d2d4e4074c3727(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_016b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_016b(tail)\n            }\n            function require_helper_stringliteral_016b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_016b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 1525 @src 1:17703:17885  \"function _sendETH(address payable to, uint256 amount) private {...\"\n            function fun_sendETH(var_to, var_amount)\n            {\n                /// @src 1:17794:17796  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 1:17794:17801  \"to.call\"\n                let expr_1513_address := convert_address_payable_to_address(expr)\n                /// @src 1:17809:17815  \"amount\"\n                let _2 := var_amount\n                let expr_1 := _2\n                /// @src 1:17794:17816  \"to.call{value: amount}\"\n                let expr_1515_address := expr_1513_address\n                let expr_value := expr_1\n                /// @src 1:17794:17820  \"to.call{value: amount}(\\\"\\\")\"\n                let _3 := allocate_unbounded()\n                let _4 := sub(abi_encode_packed_stringliteral_c5d2(_3), _3)\n                let expr_component := call(gas(), expr_1515_address, expr_value, _3, _4, 0, 0)\n                pop(extract_returndata())\n                /// @src 1:17775:17820  \"(bool success, ) = to.call{value: amount}(\\\"\\\")\"\n                let var_success := expr_component\n                /// @src 1:17838:17845  \"success\"\n                let _5 := var_success\n                let expr_2 := _5\n                /// @src 1:17830:17878  \"require(success, \\\"Factory: ETH transfer failed\\\")\"\n                require_helper_stringliteral_016b(expr_2)\n            }\n        }\n        /// @use-src 1:\"EscroDot.sol\"\n        object \"ServiceEscrow_1052\" {\n            code {\n                {\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    mstore(64, memoryguard(0x0100))\n                    if callvalue()\n                    {\n                        revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    }\n                    let _1, _2, _3, _4, _5, _6, _7 := copy_arguments_for_constructor_object_ServiceEscrow()\n                    constructor_ServiceEscrow(_1, _2, _3, _4, _5, _6, _7)\n                    let _8 := allocate_unbounded()\n                    codecopy(_8, dataoffset(\"ServiceEscrow_1052_deployed\"), datasize(\"ServiceEscrow_1052_deployed\"))\n                    setimmutable(_8, \"358\", mload(128))\n                    setimmutable(_8, \"361\", mload(160))\n                    setimmutable(_8, \"364\", mload(192))\n                    setimmutable(_8, \"367\", mload(224))\n                    return(_8, datasize(\"ServiceEscrow_1052_deployed\"))\n                }\n                function allocate_unbounded() -> memPtr\n                { memPtr := mload(64) }\n                function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                { revert(0, 0) }\n                function round_up_to_mul_of(value) -> result\n                {\n                    result := and(add(value, 31), not(31))\n                }\n                function panic_error_0x41()\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                function finalize_allocation(memPtr, size)\n                {\n                    let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                    if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                    mstore(64, newFreePtr)\n                }\n                function allocate_memory(size) -> memPtr\n                {\n                    memPtr := allocate_unbounded()\n                    finalize_allocation(memPtr, size)\n                }\n                function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                { revert(0, 0) }\n                function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                { revert(0, 0) }\n                function cleanup_uint160(value) -> cleaned\n                {\n                    cleaned := and(value, sub(shl(160, 1), 1))\n                }\n                function cleanup_address(value) -> cleaned\n                {\n                    cleaned := cleanup_uint160(value)\n                }\n                function validator_revert_address(value)\n                {\n                    if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n                }\n                function abi_decode_address_fromMemory(offset, end) -> value\n                {\n                    value := mload(offset)\n                    validator_revert_address(value)\n                }\n                function cleanup_bytes32(value) -> cleaned\n                { cleaned := value }\n                function validator_revert_bytes32(value)\n                {\n                    if iszero(eq(value, cleanup_bytes32(value))) { revert(0, 0) }\n                }\n                function abi_decode_bytes32_fromMemory(offset, end) -> value\n                {\n                    value := mload(offset)\n                    validator_revert_bytes32(value)\n                }\n                function cleanup_uint256(value) -> cleaned\n                { cleaned := value }\n                function validator_revert_uint256(value)\n                {\n                    if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n                }\n                function abi_decode_uint256_fromMemory(offset, end) -> value\n                {\n                    value := mload(offset)\n                    validator_revert_uint256(value)\n                }\n                function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                { revert(0, 0) }\n                function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                { revert(0, 0) }\n                function array_allocation_size_string(length) -> size\n                {\n                    if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n                    size := round_up_to_mul_of(length)\n                    size := add(size, 0x20)\n                }\n                function copy_memory_to_memory_with_cleanup(src, dst, length)\n                {\n                    mcopy(dst, src, length)\n                    mstore(add(dst, length), 0)\n                }\n                function abi_decode_available_length_string_fromMemory(src, length, end) -> array\n                {\n                    array := allocate_memory(array_allocation_size_string(length))\n                    mstore(array, length)\n                    let dst := add(array, 0x20)\n                    if gt(add(src, length), end)\n                    {\n                        revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                    }\n                    copy_memory_to_memory_with_cleanup(src, dst, length)\n                }\n                function abi_decode_string_fromMemory(offset, end) -> array\n                {\n                    if iszero(slt(add(offset, 0x1f), end))\n                    {\n                        revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                    }\n                    let length := mload(offset)\n                    array := abi_decode_available_length_string_fromMemory(add(offset, 0x20), length, end)\n                }\n                function abi_decode_addresst_bytes32t_addresst_uint256t_stringt_addresst_string_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n                {\n                    if slt(sub(dataEnd, headStart), 224)\n                    {\n                        revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    }\n                    let offset := 0\n                    value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n                    let offset_1 := 32\n                    value1 := abi_decode_bytes32_fromMemory(add(headStart, offset_1), dataEnd)\n                    let offset_2 := 64\n                    value2 := abi_decode_address_fromMemory(add(headStart, offset_2), dataEnd)\n                    let offset_3 := 96\n                    value3 := abi_decode_uint256_fromMemory(add(headStart, offset_3), dataEnd)\n                    let offset_4 := mload(add(headStart, 128))\n                    if gt(offset_4, sub(shl(64, 1), 1))\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value4 := abi_decode_string_fromMemory(add(headStart, offset_4), dataEnd)\n                    let offset_5 := 160\n                    value5 := abi_decode_address_fromMemory(add(headStart, offset_5), dataEnd)\n                    let offset_6 := mload(add(headStart, 192))\n                    if gt(offset_6, sub(shl(64, 1), 1))\n                    {\n                        revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    }\n                    value6 := abi_decode_string_fromMemory(add(headStart, offset_6), dataEnd)\n                }\n                function copy_arguments_for_constructor_object_ServiceEscrow() -> ret_param, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6\n                {\n                    let programSize := datasize(\"ServiceEscrow_1052\")\n                    let argSize := sub(codesize(), programSize)\n                    let memoryDataOffset := allocate_memory(argSize)\n                    codecopy(memoryDataOffset, programSize, argSize)\n                    ret_param, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6 := abi_decode_addresst_bytes32t_addresst_uint256t_stringt_addresst_string_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n                }\n                function shift_left(value) -> newValue\n                { newValue := shl(0, value) }\n                function update_byte_slice_shift(value, toInsert) -> result\n                {\n                    let mask := not(0)\n                    toInsert := shift_left(toInsert)\n                    value := and(value, not(mask))\n                    result := or(value, and(toInsert, mask))\n                }\n                function cleanup_rational_by(value) -> cleaned\n                { cleaned := value }\n                function identity(value) -> ret\n                { ret := value }\n                function convert_rational_by_to_uint256(value) -> converted\n                {\n                    converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n                }\n                function prepare_store_uint256(value) -> ret\n                { ret := value }\n                function update_storage_value_offset_rational_by_to_uint256(slot, value)\n                {\n                    let convertedValue := convert_rational_by_to_uint256(value)\n                    sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n                }\n                function cleanup_t_rational_by(value) -> cleaned\n                { cleaned := value }\n                function convert_rational_by_to_uint160(value) -> converted\n                {\n                    converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n                }\n                function convert_rational_by_to_address(value) -> converted\n                {\n                    converted := convert_rational_by_to_uint160(value)\n                }\n                function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n                {\n                    mstore(pos, length)\n                    updated_pos := add(pos, 0x20)\n                }\n                function store_literal_in_memory_abefa298a2b3ad1c12fccec8c89af0379056a8c92f071b11ef86232d03fcde63(memPtr)\n                {\n                    mstore(add(memPtr, 0), \"Escrow: factory is zero address\")\n                }\n                function abi_encode_stringliteral_abef(pos) -> end\n                {\n                    pos := array_storeLengthForEncoding_string(pos, 31)\n                    store_literal_in_memory_abefa298a2b3ad1c12fccec8c89af0379056a8c92f071b11ef86232d03fcde63(pos)\n                    end := add(pos, 32)\n                }\n                function abi_encode_tuple_stringliteral_abef(headStart) -> tail\n                {\n                    tail := add(headStart, 32)\n                    mstore(add(headStart, 0), sub(tail, headStart))\n                    tail := abi_encode_stringliteral_abef(tail)\n                }\n                function require_helper_stringliteral_abef(condition)\n                {\n                    if iszero(condition)\n                    {\n                        let memPtr := allocate_unbounded()\n                        mstore(memPtr, shl(229, 4594637))\n                        let end := abi_encode_tuple_stringliteral_abef(add(memPtr, 4))\n                        revert(memPtr, sub(end, memPtr))\n                    }\n                }\n                function store_literal_in_memory_339e0f99c26dc547806c208e931d196e28e2213b6c2a94a704ce04e61fd99030(memPtr)\n                {\n                    mstore(add(memPtr, 0), \"Escrow: provider is zero address\")\n                }\n                function abi_encode_stringliteral_339e(pos) -> end\n                {\n                    pos := array_storeLengthForEncoding_string(pos, 32)\n                    store_literal_in_memory_339e0f99c26dc547806c208e931d196e28e2213b6c2a94a704ce04e61fd99030(pos)\n                    end := add(pos, 32)\n                }\n                function abi_encode_tuple_stringliteral_339e(headStart) -> tail\n                {\n                    tail := add(headStart, 32)\n                    mstore(add(headStart, 0), sub(tail, headStart))\n                    tail := abi_encode_stringliteral_339e(tail)\n                }\n                function require_helper_stringliteral_339e(condition)\n                {\n                    if iszero(condition)\n                    {\n                        let memPtr := allocate_unbounded()\n                        mstore(memPtr, shl(229, 4594637))\n                        let end := abi_encode_tuple_stringliteral_339e(add(memPtr, 4))\n                        revert(memPtr, sub(end, memPtr))\n                    }\n                }\n                function convert_t_rational_by_to_t_uint256(value) -> converted\n                {\n                    converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n                }\n                function store_literal_in_memory_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d(memPtr)\n                {\n                    mstore(add(memPtr, 0), \"Escrow: price must be > 0\")\n                }\n                function abi_encode_stringliteral_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d(pos) -> end\n                {\n                    pos := array_storeLengthForEncoding_string(pos, 25)\n                    store_literal_in_memory_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d(pos)\n                    end := add(pos, 32)\n                }\n                function abi_encode_stringliteral_248e(headStart) -> tail\n                {\n                    tail := add(headStart, 32)\n                    mstore(add(headStart, 0), sub(tail, headStart))\n                    tail := abi_encode_stringliteral_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d(tail)\n                }\n                function require_helper_stringliteral_248e(condition)\n                {\n                    if iszero(condition)\n                    {\n                        let memPtr := allocate_unbounded()\n                        mstore(memPtr, shl(229, 4594637))\n                        let end := abi_encode_stringliteral_248e(add(memPtr, 4))\n                        revert(memPtr, sub(end, memPtr))\n                    }\n                }\n                function convert_array_string_to_bytes(value) -> converted\n                { converted := value }\n                function array_length_bytes(value) -> length\n                { length := mload(value) }\n                function store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(memPtr)\n                {\n                    mstore(add(memPtr, 0), \"Escrow: gateway cannot be empty\")\n                }\n                function abi_encode_stringliteral_795f(pos) -> end\n                {\n                    pos := array_storeLengthForEncoding_string(pos, 31)\n                    store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(pos)\n                    end := add(pos, 32)\n                }\n                function abi_encode_tuple_stringliteral_795f(headStart) -> tail\n                {\n                    tail := add(headStart, 32)\n                    mstore(add(headStart, 0), sub(tail, headStart))\n                    tail := abi_encode_stringliteral_795f(tail)\n                }\n                function require_helper_stringliteral_795f(condition)\n                {\n                    if iszero(condition)\n                    {\n                        let memPtr := allocate_unbounded()\n                        mstore(memPtr, shl(229, 4594637))\n                        let end := abi_encode_tuple_stringliteral_795f(add(memPtr, 4))\n                        revert(memPtr, sub(end, memPtr))\n                    }\n                }\n                function store_literal_in_memory_4a8119fd33623d83457a85b5e68bd50015eabb7b61ece3735951e6a4a921aa58(memPtr)\n                {\n                    mstore(add(memPtr, 0), \"Escrow: gateway signer cannot be\")\n                    mstore(add(memPtr, 32), \" zero address\")\n                }\n                function abi_encode_stringliteral_4a81(pos) -> end\n                {\n                    pos := array_storeLengthForEncoding_string(pos, 45)\n                    store_literal_in_memory_4a8119fd33623d83457a85b5e68bd50015eabb7b61ece3735951e6a4a921aa58(pos)\n                    end := add(pos, 64)\n                }\n                function abi_encode_tuple_stringliteral_4a81(headStart) -> tail\n                {\n                    tail := add(headStart, 32)\n                    mstore(add(headStart, 0), sub(tail, headStart))\n                    tail := abi_encode_stringliteral_4a81(tail)\n                }\n                function require_helper_stringliteral_4a81(condition)\n                {\n                    if iszero(condition)\n                    {\n                        let memPtr := allocate_unbounded()\n                        mstore(memPtr, shl(229, 4594637))\n                        let end := abi_encode_tuple_stringliteral_4a81(add(memPtr, 4))\n                        revert(memPtr, sub(end, memPtr))\n                    }\n                }\n                function array_length_string(value) -> length\n                { length := mload(value) }\n                function panic_error_0x22()\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n                function extract_byte_array_length(data) -> length\n                {\n                    length := div(data, 2)\n                    let outOfPlaceEncoding := and(data, 1)\n                    if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                    if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n                }\n                function array_dataslot_string_storage(ptr) -> data\n                {\n                    data := ptr\n                    mstore(0, ptr)\n                    data := keccak256(0, 0x20)\n                }\n                function divide_by_ceil(value) -> result\n                {\n                    result := div(add(value, 31), 32)\n                }\n                function shift_left_dynamic(bits, value) -> newValue\n                { newValue := shl(bits, value) }\n                function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n                {\n                    let shiftBits := mul(shiftBytes, 8)\n                    let mask := shift_left_dynamic(shiftBits, not(0))\n                    toInsert := shift_left_dynamic(shiftBits, toInsert)\n                    value := and(value, not(mask))\n                    result := or(value, and(toInsert, mask))\n                }\n                function convert_uint256_to_uint256(value) -> converted\n                {\n                    converted := cleanup_uint256(identity(cleanup_uint256(value)))\n                }\n                function update_storage_value_uint256_to_uint256(slot, offset, value)\n                {\n                    let convertedValue := convert_uint256_to_uint256(value)\n                    sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n                }\n                function zero_value_for_split_uint256() -> ret\n                { ret := 0 }\n                function storage_set_to_zero_uint256(slot, offset)\n                {\n                    let zero := zero_value_for_split_uint256()\n                    update_storage_value_uint256_to_uint256(slot, offset, zero)\n                }\n                function clear_storage_range_bytes1(start, end)\n                {\n                    for { } lt(start, end) { start := add(start, 1) }\n                    {\n                        storage_set_to_zero_uint256(start, 0)\n                    }\n                }\n                function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n                {\n                    if gt(len, 31)\n                    {\n                        let dataArea := array_dataslot_string_storage(array)\n                        let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                        if lt(startIndex, 32) { deleteStart := dataArea }\n                        clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                    }\n                }\n                function shift_right_unsigned_dynamic(bits, value) -> newValue\n                { newValue := shr(bits, value) }\n                function mask_bytes_dynamic(data, bytes) -> result\n                {\n                    let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                    result := and(data, mask)\n                }\n                function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n                {\n                    data := mask_bytes_dynamic(data, len)\n                    used := or(data, mul(2, len))\n                }\n                function copy_byte_array_to_storage_from_string_to_string(slot, src)\n                {\n                    let newLen := array_length_string(src)\n                    if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n                    let oldLen := extract_byte_array_length(sload(slot))\n                    clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n                    let srcOffset := 0\n                    srcOffset := 0x20\n                    switch gt(newLen, 31)\n                    case 1 {\n                        let loopEnd := and(newLen, not(0x1f))\n                        let dstPtr := array_dataslot_string_storage(slot)\n                        let i := 0\n                        for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                        {\n                            sstore(dstPtr, mload(add(src, srcOffset)))\n                            dstPtr := add(dstPtr, 1)\n                            srcOffset := add(srcOffset, 32)\n                        }\n                        if lt(loopEnd, newLen)\n                        {\n                            let lastValue := mload(add(src, srcOffset))\n                            sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                        }\n                        sstore(slot, add(mul(newLen, 2), 1))\n                    }\n                    default {\n                        let value := 0\n                        if newLen\n                        {\n                            value := mload(add(src, srcOffset))\n                        }\n                        sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                    }\n                }\n                function update_storage_value_offset_string_to_string(slot, value)\n                {\n                    copy_byte_array_to_storage_from_string_to_string(slot, value)\n                }\n                function update_byte_slice_shift_0(value, toInsert) -> result\n                {\n                    let mask := sub(shl(160, 1), 1)\n                    toInsert := shift_left(toInsert)\n                    value := and(value, not(mask))\n                    result := or(value, and(toInsert, mask))\n                }\n                function convert_uint160_to_uint160(value) -> converted\n                {\n                    converted := cleanup_uint160(identity(cleanup_uint160(value)))\n                }\n                function convert_uint160_to_address(value) -> converted\n                {\n                    converted := convert_uint160_to_uint160(value)\n                }\n                function convert_address_to_address(value) -> converted\n                {\n                    converted := convert_uint160_to_address(value)\n                }\n                function prepare_store_address(value) -> ret\n                { ret := value }\n                function update_storage_value_offset_address_to_address(slot, value)\n                {\n                    let convertedValue := convert_address_to_address(value)\n                    sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_address(convertedValue)))\n                }\n                /// @ast-id 579 @src 1:4348:5209  \"constructor(...\"\n                function constructor_ServiceEscrow(var_factory, var_serviceId, var_provider, var_price, var_gateway_mpos, var_gatewaySigner, var_description_mpos)\n                {\n                    /// @src 1:3703:3704  \"1\"\n                    let expr := 0x01\n                    update_storage_value_offset_rational_by_to_uint256(0x05, expr)\n                    /// @src 1:4589:4597  \"_factory\"\n                    let _1 := var_factory\n                    let expr_1 := _1\n                    /// @src 1:4609:4610  \"0\"\n                    let expr_2 := 0x00\n                    /// @src 1:4601:4611  \"address(0)\"\n                    let expr_3 := convert_rational_by_to_address(expr_2)\n                    /// @src 1:4589:4611  \"_factory != address(0)\"\n                    let expr_4 := iszero(eq(cleanup_address(expr_1), cleanup_address(expr_3)))\n                    /// @src 1:4581:4647  \"require(_factory != address(0), \\\"Escrow: factory is zero address\\\")\"\n                    require_helper_stringliteral_abef(expr_4)\n                    /// @src 1:4665:4674  \"_provider\"\n                    let _2 := var_provider\n                    let expr_5 := _2\n                    /// @src 1:4686:4687  \"0\"\n                    let expr_6 := 0x00\n                    /// @src 1:4678:4688  \"address(0)\"\n                    let expr_7 := convert_rational_by_to_address(expr_6)\n                    /// @src 1:4665:4688  \"_provider != address(0)\"\n                    let expr_8 := iszero(eq(cleanup_address(expr_5), cleanup_address(expr_7)))\n                    /// @src 1:4657:4725  \"require(_provider != address(0), \\\"Escrow: provider is zero address\\\")\"\n                    require_helper_stringliteral_339e(expr_8)\n                    /// @src 1:4743:4749  \"_price\"\n                    let _3 := var_price\n                    let expr_9 := _3\n                    /// @src 1:4752:4753  \"0\"\n                    let expr_10 := 0x00\n                    /// @src 1:4743:4753  \"_price > 0\"\n                    let expr_11 := gt(cleanup_uint256(expr_9), convert_t_rational_by_to_t_uint256(expr_10))\n                    /// @src 1:4735:4783  \"require(_price > 0, \\\"Escrow: price must be > 0\\\")\"\n                    require_helper_stringliteral_248e(expr_11)\n                    /// @src 1:4807:4815  \"_gateway\"\n                    let _12_mpos := var_gateway_mpos\n                    let expr_532_mpos := _12_mpos\n                    /// @src 1:4801:4816  \"bytes(_gateway)\"\n                    let expr_mpos := convert_array_string_to_bytes(expr_532_mpos)\n                    /// @src 1:4801:4823  \"bytes(_gateway).length\"\n                    let expr_12 := array_length_bytes(expr_mpos)\n                    /// @src 1:4826:4827  \"0\"\n                    let expr_13 := 0x00\n                    /// @src 1:4801:4827  \"bytes(_gateway).length > 0\"\n                    let expr_14 := gt(cleanup_uint256(expr_12), convert_t_rational_by_to_t_uint256(expr_13))\n                    /// @src 1:4793:4863  \"require(bytes(_gateway).length > 0, \\\"Escrow: gateway cannot be empty\\\")\"\n                    require_helper_stringliteral_795f(expr_14)\n                    /// @src 1:4881:4895  \"_gatewaySigner\"\n                    let _4 := var_gatewaySigner\n                    let expr_15 := _4\n                    /// @src 1:4907:4908  \"0\"\n                    let expr_16 := 0x00\n                    /// @src 1:4899:4909  \"address(0)\"\n                    let expr_17 := convert_rational_by_to_address(expr_16)\n                    /// @src 1:4881:4909  \"_gatewaySigner != address(0)\"\n                    let expr_18 := iszero(eq(cleanup_address(expr_15), cleanup_address(expr_17)))\n                    /// @src 1:4873:4959  \"require(_gatewaySigner != address(0), \\\"Escrow: gateway signer cannot be zero address\\\")\"\n                    require_helper_stringliteral_4a81(expr_18)\n                    /// @src 1:4984:4992  \"_factory\"\n                    let _5 := var_factory\n                    let expr_19 := _5\n                    /// @src 1:4969:4992  \"factory      = _factory\"\n                    let _6 := expr_19\n                    mstore(128, _6)\n                    /// @src 1:5017:5027  \"_serviceId\"\n                    let _7 := var_serviceId\n                    let expr_20 := _7\n                    /// @src 1:5002:5027  \"serviceId    = _serviceId\"\n                    let _8 := expr_20\n                    mstore(160, _8)\n                    /// @src 1:5052:5061  \"_provider\"\n                    let _9 := var_provider\n                    let expr_21 := _9\n                    /// @src 1:5037:5061  \"provider     = _provider\"\n                    let _10 := expr_21\n                    mstore(192, _10)\n                    /// @src 1:5086:5092  \"_price\"\n                    let _11 := var_price\n                    let expr_22 := _11\n                    /// @src 1:5071:5092  \"price        = _price\"\n                    let _12 := expr_22\n                    mstore(224, _12)\n                    /// @src 1:5117:5125  \"_gateway\"\n                    let _mpos := var_gateway_mpos\n                    let expr_567_mpos := _mpos\n                    /// @src 1:5102:5125  \"gateway      = _gateway\"\n                    update_storage_value_offset_string_to_string(0x01, expr_567_mpos)\n                    /// @src 1:5151:5165  \"_gatewaySigner\"\n                    let _13 := var_gatewaySigner\n                    let expr_23 := _13\n                    /// @src 1:5135:5165  \"gatewaySigner = _gatewaySigner\"\n                    update_storage_value_offset_address_to_address(0x02, expr_23)\n                    /// @src 1:5190:5202  \"_description\"\n                    let _25_mpos := var_description_mpos\n                    let expr_575_mpos := _25_mpos\n                    /// @src 1:5175:5202  \"description  = _description\"\n                    update_storage_value_offset_string_to_string(0x00, expr_575_mpos)\n                }\n            }\n            /// @use-src 0:\"ECDSA.sol\", 1:\"EscroDot.sol\", 2:\"SignatureVerifier.sol\"\n            object \"ServiceEscrow_1052_deployed\" {\n                code {\n                    {\n                        /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                        mstore(64, memoryguard(0x80))\n                        if iszero(lt(calldatasize(), 4))\n                        {\n                            let selector := shift_right_224_unsigned(calldataload(0))\n                            switch selector\n                            case 0x085d4883 { external_fun_provider() }\n                            case 0x116191b6 { external_fun_gateway() }\n                            case 0x11acfb3d {\n                                external_fun_updateGatewaySigner()\n                            }\n                            case 0x23b4a7a3 { external_fun_nextPurchaseId() }\n                            case 0x29514482 { external_fun_ccipCallback() }\n                            case 0x558eab4b { external_fun_checkDelivery() }\n                            case 0x5c646b5a { external_fun_buyService() }\n                            case 0x5ec96f75 { external_fun_claimDigest() }\n                            case 0x60595ac9 { external_fun_claimPayment() }\n                            case 0x7284e416 { external_fun_description() }\n                            case 0x8392fe31 { external_fun_purchases() }\n                            case 0x88985ec5 {\n                                external_fun_factoryRefundBuyer()\n                            }\n                            case 0xa035b1fe { external_fun_price() }\n                            case 0xa5c1674e { external_fun_raiseDispute() }\n                            case 0xc45a0155 { external_fun_factory() }\n                            case 0xda20ec6a { external_fun_serviceId() }\n                            case 0xdf686ded {\n                                external_fun_factoryReleaseToProvider()\n                            }\n                            case 0xe7261687 { external_fun_updateGateway() }\n                            case 0xe735b48a {\n                                external_fun_updateDescription()\n                            }\n                            case 0xf3253c63 { external_fun_gatewaySigner() }\n                            default { }\n                        }\n                        if iszero(calldatasize()) { stop() }\n                        revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n                    }\n                    function shift_right_224_unsigned(value) -> newValue\n                    { newValue := shr(224, value) }\n                    function allocate_unbounded() -> memPtr\n                    { memPtr := mload(64) }\n                    function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                    { revert(0, 0) }\n                    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                    { revert(0, 0) }\n                    function abi_decode(headStart, dataEnd)\n                    {\n                        if slt(sub(dataEnd, headStart), 0)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                    }\n                    /// @ast-id 364 @src 1:1365:1398  \"address public immutable provider\"\n                    function getter_fun_provider() -> rval\n                    { rval := loadimmutable(\"364\") }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function cleanup_uint160(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function cleanup_address(value) -> cleaned\n                    {\n                        cleaned := cleanup_uint160(value)\n                    }\n                    function abi_encode_address(value, pos)\n                    {\n                        mstore(pos, cleanup_address(value))\n                    }\n                    function abi_encode_tuple_address(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_address(value0, add(headStart, 0))\n                    }\n                    function external_fun_provider()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_provider()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple_address(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function panic_error_0x00()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x00)\n                        revert(0, 0x24)\n                    }\n                    function panic_error_0x22()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x22)\n                        revert(0, 0x24)\n                    }\n                    function extract_byte_array_length(data) -> length\n                    {\n                        length := div(data, 2)\n                        let outOfPlaceEncoding := and(data, 1)\n                        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                        if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n                    }\n                    function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function array_dataslot_string_storage(ptr) -> data\n                    {\n                        data := ptr\n                        mstore(0, ptr)\n                        data := keccak256(0, 0x20)\n                    }\n                    function abi_encode_string_storage(value, pos) -> ret\n                    {\n                        let slotValue := sload(value)\n                        let length := extract_byte_array_length(slotValue)\n                        pos := array_storeLengthForEncoding_string(pos, length)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(pos, and(slotValue, not(0xff)))\n                            ret := add(pos, mul(0x20, iszero(iszero(length))))\n                        }\n                        case 1 {\n                            let dataPos := array_dataslot_string_storage(value)\n                            let i := 0\n                            for { } lt(i, length) { i := add(i, 0x20) }\n                            {\n                                mstore(add(pos, i), sload(dataPos))\n                                dataPos := add(dataPos, 1)\n                            }\n                            ret := add(pos, i)\n                        }\n                    }\n                    function abi_encodeUpdatedPos_string_storage(value0, pos) -> updatedPos\n                    {\n                        updatedPos := abi_encode_string_storage(value0, pos)\n                    }\n                    function round_up_to_mul_of(value) -> result\n                    {\n                        result := and(add(value, 31), not(31))\n                    }\n                    function panic_error_0x41()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x41)\n                        revert(0, 0x24)\n                    }\n                    function finalize_allocation(memPtr, size)\n                    {\n                        let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                        mstore(64, newFreePtr)\n                    }\n                    function copy_array_from_storage_to_memory_string(slot) -> memPtr\n                    {\n                        memPtr := allocate_unbounded()\n                        let end := abi_encodeUpdatedPos_string_storage(slot, memPtr)\n                        finalize_allocation(memPtr, sub(end, memPtr))\n                    }\n                    function read_from_storage_dynamic_split_string(slot, offset) -> value\n                    {\n                        if gt(offset, 0) { panic_error_0x00() }\n                        value := copy_array_from_storage_to_memory_string(slot)\n                    }\n                    /// @ast-id 373 @src 1:1669:1691  \"string  public gateway\"\n                    function getter_fun_gateway() -> ret_mpos\n                    {\n                        let slot := 1\n                        let offset := 0\n                        ret_mpos := read_from_storage_dynamic_split_string(slot, offset)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function array_length_string(value) -> length\n                    { length := mload(value) }\n                    function array_storeLengthForEncoding_string_fromStack(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function copy_memory_to_memory_with_cleanup(src, dst, length)\n                    {\n                        mcopy(dst, src, length)\n                        mstore(add(dst, length), 0)\n                    }\n                    function abi_encode_string_memory_ptr(value, pos) -> end\n                    {\n                        let length := array_length_string(value)\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                        end := add(pos, round_up_to_mul_of(length))\n                    }\n                    function abi_encode_string(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_string_memory_ptr(value0, tail)\n                    }\n                    function external_fun_gateway()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_gateway()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_string(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                    { revert(0, 0) }\n                    function validator_revert_address(value)\n                    {\n                        if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_address(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_address(value)\n                    }\n                    function abi_decode_tuple_address(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_address(add(headStart, offset), dataEnd)\n                    }\n                    function abi_encode_tuple(headStart) -> tail\n                    { tail := add(headStart, 0) }\n                    function external_fun_updateGatewaySigner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_address(4, calldatasize())\n                        fun_updateGatewaySigner(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function shift_right_unsigned_dynamic(bits, value) -> newValue\n                    { newValue := shr(bits, value) }\n                    function cleanup_from_storage_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n                    }\n                    /// @ast-id 379 @src 1:1858:1887  \"uint256 public nextPurchaseId\"\n                    function getter_fun_nextPurchaseId() -> ret\n                    {\n                        let slot := 3\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_uint256(slot, offset)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function cleanup_uint256(value) -> cleaned\n                    { cleaned := value }\n                    function abi_encode_uint256_to_uint256(value, pos)\n                    {\n                        mstore(pos, cleanup_uint256(value))\n                    }\n                    function abi_encode_uint256(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                    }\n                    function external_fun_nextPurchaseId()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_nextPurchaseId()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                    { revert(0, 0) }\n                    function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                    { revert(0, 0) }\n                    function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                    { revert(0, 0) }\n                    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n                    {\n                        if iszero(slt(add(offset, 0x1f), end))\n                        {\n                            revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                        }\n                        length := calldataload(offset)\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                        }\n                        arrayPos := add(offset, 0x20)\n                        if gt(add(arrayPos, mul(length, 0x01)), end)\n                        {\n                            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                        }\n                    }\n                    function abi_decode_bytes_calldatat_bytes_calldata(headStart, dataEnd) -> value0, value1, value2, value3\n                    {\n                        if slt(sub(dataEnd, headStart), 64)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := calldataload(add(headStart, 0))\n                        if gt(offset, 0xffffffffffffffff)\n                        {\n                            revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                        }\n                        value0, value1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n                        let offset_1 := calldataload(add(headStart, 32))\n                        if gt(offset_1, 0xffffffffffffffff)\n                        {\n                            revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                        }\n                        value2, value3 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n                    }\n                    function array_length_bytes(value) -> length\n                    { length := mload(value) }\n                    function array_storeLengthForEncoding_bytes(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function abi_encode_bytes_memory_ptr(value, pos) -> end\n                    {\n                        let length := array_length_bytes(value)\n                        pos := array_storeLengthForEncoding_bytes(pos, length)\n                        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                        end := add(pos, round_up_to_mul_of(length))\n                    }\n                    function abi_encode_bytes(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_bytes_memory_ptr(value0, tail)\n                    }\n                    function external_fun_ccipCallback()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1, param_2, param_3 := abi_decode_bytes_calldatat_bytes_calldata(4, calldatasize())\n                        let ret := fun_ccipCallback(param, param_1, param_2, param_3)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_bytes(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function validator_revert_uint256(value)\n                    {\n                        if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_uint256(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_uint256(value)\n                    }\n                    function abi_decode_uint256t_bytes_calldata(headStart, dataEnd) -> value0, value1, value2\n                    {\n                        if slt(sub(dataEnd, headStart), 64)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                        let offset_1 := calldataload(add(headStart, 32))\n                        if gt(offset_1, 0xffffffffffffffff)\n                        {\n                            revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                        }\n                        value1, value2 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n                    }\n                    function external_fun_checkDelivery()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1, param_2 := abi_decode_uint256t_bytes_calldata(4, calldatasize())\n                        fun_checkDelivery(param, param_1, param_2)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_buyService()\n                    {\n                        abi_decode(4, calldatasize())\n                        let ret := fun_buyService()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function cleanup_bytes32(value) -> cleaned\n                    { cleaned := value }\n                    function validator_revert_bytes32(value)\n                    {\n                        if iszero(eq(value, cleanup_bytes32(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_bytes32(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_bytes32(value)\n                    }\n                    function abi_decode_uint256t_bytes32(headStart, dataEnd) -> value0, value1\n                    {\n                        if slt(sub(dataEnd, headStart), 64)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_bytes32(add(headStart, offset_1), dataEnd)\n                    }\n                    function abi_encode_bytes32_to_bytes32(value, pos)\n                    {\n                        mstore(pos, cleanup_bytes32(value))\n                    }\n                    function abi_encode_tuple_bytes32(headStart, value0) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n                    }\n                    function external_fun_claimDigest()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1 := abi_decode_uint256t_bytes32(4, calldatasize())\n                        let ret := fun_claimDigest(param, param_1)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple_bytes32(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function abi_decode_uint256t_bytes32t_bytes_calldata(headStart, dataEnd) -> value0, value1, value2, value3\n                    {\n                        if slt(sub(dataEnd, headStart), 96)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_bytes32(add(headStart, offset_1), dataEnd)\n                        let offset_2 := calldataload(add(headStart, 64))\n                        if gt(offset_2, 0xffffffffffffffff)\n                        {\n                            revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                        }\n                        value2, value3 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n                    }\n                    function external_fun_claimPayment()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1, param_2, param_3 := abi_decode_uint256t_bytes32t_bytes_calldata(4, calldatasize())\n                        fun_claimPayment(param, param_1, param_2, param_3)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    /// @ast-id 370 @src 1:1573:1599  \"string  public description\"\n                    function getter_fun_description() -> ret_mpos\n                    {\n                        let slot := 0\n                        let offset := 0\n                        ret_mpos := read_from_storage_dynamic_split_string(slot, offset)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function external_fun_description()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_description()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_string(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := 0\n                        value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                    }\n                    function identity(value) -> ret\n                    { ret := value }\n                    function convert_uint256_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_uint256(value)))\n                    }\n                    function mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key) -> dataSlot\n                    {\n                        mstore(0, convert_uint256_to_uint256(key))\n                        mstore(0x20, slot)\n                        dataSlot := keccak256(0, 0x40)\n                    }\n                    function shift_right_0_unsigned(value) -> newValue\n                    { newValue := shr(0, value) }\n                    function cleanup_from_storage_address(value) -> cleaned\n                    {\n                        cleaned := and(value, sub(shl(160, 1), 1))\n                    }\n                    function extract_from_storage_value_offset_address(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_address(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_address(sload(slot))\n                    }\n                    function extract_from_storage_value_offset_uint256(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_uint256(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_uint256(sload(slot))\n                    }\n                    function cleanup_from_storage_bool(value) -> cleaned\n                    { cleaned := and(value, 0xff) }\n                    function extract_from_storage_value_offset_0_bool(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_t_bool(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_0_bool(sload(slot))\n                    }\n                    function shift_right_8_unsigned(value) -> newValue\n                    { newValue := shr(8, value) }\n                    function extract_from_storage_value_offset_bool(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_8_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_bool(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_bool(sload(slot))\n                    }\n                    function shift_right_unsigned(value) -> newValue\n                    { newValue := shr(16, value) }\n                    function extract_from_storage_value_offset_t_bool(slot_value) -> value\n                    {\n                        value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n                    }\n                    function read_from_storage_split_offset_2_bool(slot) -> value\n                    {\n                        value := extract_from_storage_value_offset_t_bool(sload(slot))\n                    }\n                    /// @ast-id 396 @src 1:2435:2480  \"mapping(uint256 => Purchase) public purchases\"\n                    function getter_fun_purchases(key) -> ret, ret_1, ret_2, ret_3, ret_4\n                    {\n                        let slot := 4\n                        slot := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key)\n                        ret := read_from_storage_split_offset_address(add(slot, 0))\n                        ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                        ret_2 := read_from_storage_split_offset_t_bool(add(slot, 2))\n                        ret_3 := read_from_storage_split_offset_bool(add(slot, 2))\n                        ret_4 := read_from_storage_split_offset_2_bool(add(slot, 2))\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function cleanup_bool(value) -> cleaned\n                    {\n                        cleaned := iszero(iszero(value))\n                    }\n                    function abi_encode_bool(value, pos)\n                    {\n                        mstore(pos, cleanup_bool(value))\n                    }\n                    function abi_encode_address_uint256_bool_bool_bool(headStart, value0, value1, value2, value3, value4) -> tail\n                    {\n                        tail := add(headStart, 160)\n                        abi_encode_address(value0, add(headStart, 0))\n                        abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                        abi_encode_bool(value2, add(headStart, 64))\n                        abi_encode_bool(value3, add(headStart, 96))\n                        abi_encode_bool(value4, add(headStart, 128))\n                    }\n                    function external_fun_purchases()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        let ret, ret_1, ret_2, ret_3, ret_4 := getter_fun_purchases(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_address_uint256_bool_bool_bool(memPos, ret, ret_1, ret_2, ret_3, ret_4)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_factoryRefundBuyer()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_factoryRefundBuyer(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    /// @ast-id 367 @src 1:1456:1486  \"uint256 public immutable price\"\n                    function getter_fun_price() -> rval\n                    { rval := loadimmutable(\"367\") }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function external_fun_price()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_price()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_uint256(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_raiseDispute()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_raiseDispute(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    /// @ast-id 358 @src 1:1134:1166  \"address public immutable factory\"\n                    function getter_fun_factory() -> rval\n                    { rval := loadimmutable(\"358\") }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function external_fun_factory()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_factory()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple_address(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    /// @ast-id 361 @src 1:1248:1282  \"bytes32 public immutable serviceId\"\n                    function getter_fun_serviceId() -> rval\n                    { rval := loadimmutable(\"361\") }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function external_fun_serviceId()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_serviceId()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple_bytes32(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_factoryReleaseToProvider()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param := abi_decode_tuple_uint256(4, calldatasize())\n                        fun_factoryReleaseToProvider(param)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function abi_decode_string_calldata_ptr(offset, end) -> arrayPos, length\n                    {\n                        if iszero(slt(add(offset, 0x1f), end))\n                        {\n                            revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                        }\n                        length := calldataload(offset)\n                        if gt(length, 0xffffffffffffffff)\n                        {\n                            revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                        }\n                        arrayPos := add(offset, 0x20)\n                        if gt(add(arrayPos, mul(length, 0x01)), end)\n                        {\n                            revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                        }\n                    }\n                    function abi_decode_string_calldata(headStart, dataEnd) -> value0, value1\n                    {\n                        if slt(sub(dataEnd, headStart), 32)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := calldataload(add(headStart, 0))\n                        if gt(offset, 0xffffffffffffffff)\n                        {\n                            revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                        }\n                        value0, value1 := abi_decode_string_calldata_ptr(add(headStart, offset), dataEnd)\n                    }\n                    function external_fun_updateGateway()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1 := abi_decode_string_calldata(4, calldatasize())\n                        fun_updateGateway(param, param_1)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function external_fun_updateDescription()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        let param, param_1 := abi_decode_string_calldata(4, calldatasize())\n                        fun_updateDescription(param, param_1)\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple(memPos)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n                    {\n                        value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n                    }\n                    function read_from_storage_split_dynamic_address(slot, offset) -> value\n                    {\n                        value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n                    }\n                    /// @ast-id 376 @src 1:1772:1800  \"address public gatewaySigner\"\n                    function getter_fun_gatewaySigner() -> ret\n                    {\n                        let slot := 2\n                        let offset := 0\n                        ret := read_from_storage_split_dynamic_address(slot, offset)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function external_fun_gatewaySigner()\n                    {\n                        if callvalue()\n                        {\n                            revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                        }\n                        abi_decode(4, calldatasize())\n                        let ret := getter_fun_gatewaySigner()\n                        let memPos := allocate_unbounded()\n                        let memEnd := abi_encode_tuple_address(memPos, ret)\n                        return(memPos, sub(memEnd, memPos))\n                    }\n                    function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n                    { revert(0, 0) }\n                    function store_literal_in_memory_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: caller is not the provid\")\n                        mstore(add(memPtr, 32), \"er\")\n                    }\n                    function abi_encode_stringliteral_4b50(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 34)\n                        store_literal_in_memory_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825(pos)\n                        end := add(pos, 64)\n                    }\n                    function abi_encode_tuple_stringliteral_4b50(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_4b50(tail)\n                    }\n                    function require_helper_stringliteral_4b50(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_tuple_stringliteral_4b50(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @ast-id 449 @src 1:3349:3470  \"modifier onlyProvider() {...\"\n                    function modifier_onlyProvider_967(var_newSigner)\n                    {\n                        /// @src 1:3391:3401  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:3405:3413  \"provider\"\n                        let _1 := loadimmutable(\"364\")\n                        let expr_1 := _1\n                        /// @src 1:3391:3413  \"msg.sender == provider\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:3383:3452  \"require(msg.sender == provider, \\\"Escrow: caller is not the provider\\\")\"\n                        require_helper_stringliteral_4b50(expr_2)\n                        /// @src 1:3462:3463  \"_\"\n                        fun_updateGatewaySigner_inner(var_newSigner)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function cleanup_t_rational_by_1(value) -> cleaned\n                    { cleaned := value }\n                    function convert_rational_by_to_uint160(value) -> converted\n                    {\n                        converted := cleanup_uint160(identity(cleanup_t_rational_by_1(value)))\n                    }\n                    function convert_rational_by_to_address(value) -> converted\n                    {\n                        converted := convert_rational_by_to_uint160(value)\n                    }\n                    function store_literal_in_memory_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: signer cannot be zero ad\")\n                        mstore(add(memPtr, 32), \"dress\")\n                    }\n                    function abi_encode_stringliteral_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 37)\n                        store_literal_in_memory_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216(pos)\n                        end := add(pos, 64)\n                    }\n                    function abi_encode_stringliteral_cd1a(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216(tail)\n                    }\n                    function require_helper_stringliteral_cd1a(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_cd1a(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function shift_left_0(value) -> newValue\n                    { newValue := shl(0, value) }\n                    function update_byte_slice_20_shift(value, toInsert) -> result\n                    {\n                        let mask := sub(shl(160, 1), 1)\n                        toInsert := shift_left_0(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_uint160_to_uint160(value) -> converted\n                    {\n                        converted := cleanup_uint160(identity(cleanup_uint160(value)))\n                    }\n                    function convert_uint160_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_uint160(value)\n                    }\n                    function convert_address_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function prepare_store_address(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_address_to_address(slot, value)\n                    {\n                        let convertedValue := convert_address_to_address(value)\n                        sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n                    }\n                    /// @src 1:10358:10553  \"function updateGatewaySigner(address newSigner) external onlyProvider {...\"\n                    function fun_updateGatewaySigner_inner(var_newSigner)\n                    {\n                        /// @src 1:10446:10455  \"newSigner\"\n                        let _1 := var_newSigner\n                        let expr := _1\n                        /// @src 1:10467:10468  \"0\"\n                        let expr_1 := 0x00\n                        /// @src 1:10459:10469  \"address(0)\"\n                        let expr_2 := convert_rational_by_to_address(expr_1)\n                        /// @src 1:10446:10469  \"newSigner != address(0)\"\n                        let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                        /// @src 1:10438:10511  \"require(newSigner != address(0), \\\"Escrow: signer cannot be zero address\\\")\"\n                        require_helper_stringliteral_cd1a(expr_3)\n                        /// @src 1:10537:10546  \"newSigner\"\n                        let _2 := var_newSigner\n                        let expr_4 := _2\n                        /// @src 1:10521:10546  \"gatewaySigner = newSigner\"\n                        update_storage_value_offset_address_to_address(0x02, expr_4)\n                    }\n                    /// @ast-id 984 @src 1:10358:10553  \"function updateGatewaySigner(address newSigner) external onlyProvider {...\"\n                    function fun_updateGatewaySigner(var_newSigner)\n                    {\n                        modifier_onlyProvider_967(var_newSigner)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function zero_value_for_split_bytes() -> ret\n                    { ret := 96 }\n                    function store_literal_in_memory_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"SignatureVerifier: Invalid signa\")\n                        mstore(add(memPtr, 32), \"ture\")\n                    }\n                    function abi_encode_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 36)\n                        store_literal_in_memory_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(pos)\n                        end := add(pos, 64)\n                    }\n                    function abi_encode_stringliteral_6f31(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(tail)\n                    }\n                    function require_helper_stringliteral_6f31(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_6f31(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @ast-id 709 @src 1:7019:7398  \"function ccipCallback(bytes calldata response, bytes calldata extraData)...\"\n                    function fun_ccipCallback(var_response_682_offset, var_response_682_length, var_extraData_offset, var_extraData_length) -> var__mpos\n                    {\n                        /// @src 1:7139:7151  \"bytes memory\"\n                        let zero_bytes_mpos := zero_value_for_split_bytes()\n                        var__mpos := zero_bytes_mpos\n                        /// @src 1:7245:7254  \"extraData\"\n                        let _5_offset := var_extraData_offset\n                        let _5_length := var_extraData_length\n                        let expr_695_offset := _5_offset\n                        let expr_length := _5_length\n                        /// @src 1:7268:7276  \"response\"\n                        let _offset := var_response_682_offset\n                        let _6_length := var_response_682_length\n                        let expr_696_offset := _offset\n                        let expr_696_length := _6_length\n                        /// @src 1:7207:7286  \"SignatureVerifier.verify(...\"\n                        let expr_697_component, expr_697_component_2_mpos := fun_verify(expr_695_offset, expr_length, expr_696_offset, expr_696_length)\n                        /// @src 1:7167:7286  \"(address signer, bytes memory result) = SignatureVerifier.verify(...\"\n                        let var_signer := expr_697_component\n                        let var_result_692_mpos := expr_697_component_2_mpos\n                        /// @src 1:7304:7310  \"signer\"\n                        let _1 := var_signer\n                        let expr := _1\n                        /// @src 1:7314:7327  \"gatewaySigner\"\n                        let _2 := read_from_storage_split_offset_address(0x02)\n                        let expr_1 := _2\n                        /// @src 1:7304:7327  \"signer == gatewaySigner\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:7296:7368  \"require(signer == gatewaySigner, \\\"SignatureVerifier: Invalid signature\\\")\"\n                        require_helper_stringliteral_6f31(expr_2)\n                        /// @src 1:7385:7391  \"result\"\n                        let _9_mpos := var_result_692_mpos\n                        let expr_706_mpos := _9_mpos\n                        /// @src 1:7378:7391  \"return result\"\n                        var__mpos := expr_706_mpos\n                        leave\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function convert_rational_0_by_1_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_t_rational_by_1(value)))\n                    }\n                    function store_literal_in_memory_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: invalid purchase id\")\n                    }\n                    function abi_encode_stringliteral_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 27)\n                        store_literal_in_memory_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_6858(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad(tail)\n                    }\n                    function require_helper_stringliteral(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_6858(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function cleanup_t_rational_by(value) -> cleaned\n                    { cleaned := value }\n                    function convert_rational_1_by_1_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n                    }\n                    function allocate_memory(size) -> memPtr\n                    {\n                        memPtr := allocate_unbounded()\n                        finalize_allocation(memPtr, size)\n                    }\n                    function array_allocation_size_array_string_dyn(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                        size := mul(length, 0x20)\n                        size := add(size, 0x20)\n                    }\n                    function allocate_memory_array_array_string_dyn(length) -> memPtr\n                    {\n                        let allocSize := array_allocation_size_array_string_dyn(length)\n                        memPtr := allocate_memory(allocSize)\n                        mstore(memPtr, length)\n                    }\n                    function zero_value_for_string() -> ret\n                    { ret := 96 }\n                    function zero_complex_memory_array_array_string_dyn(dataStart, dataSizeInBytes)\n                    {\n                        let i := 0\n                        for { } lt(i, dataSizeInBytes) { i := add(i, 32) }\n                        {\n                            mstore(add(dataStart, i), zero_value_for_string())\n                        }\n                    }\n                    function allocate_and_zero_memory_array_array_string_dyn(length) -> memPtr\n                    {\n                        memPtr := allocate_memory_array_array_string_dyn(length)\n                        let dataStart := memPtr\n                        let dataSize := array_allocation_size_array_string_dyn(length)\n                        dataStart := add(dataStart, 32)\n                        dataSize := sub(dataSize, 32)\n                        zero_complex_memory_array_array_string_dyn(dataStart, dataSize)\n                    }\n                    function panic_error_0x32()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x32)\n                        revert(0, 0x24)\n                    }\n                    function array_length_array_string_dyn(value) -> length\n                    { length := mload(value) }\n                    function memory_array_index_access_string_dyn(baseRef, index) -> addr\n                    {\n                        if iszero(lt(index, array_length_array_string_dyn(baseRef))) { panic_error_0x32() }\n                        let offset := mul(index, 32)\n                        offset := add(offset, 32)\n                        addr := add(baseRef, offset)\n                    }\n                    function convert_array_string_storage_to_string(value) -> converted\n                    {\n                        converted := copy_array_from_storage_to_memory_string(value)\n                    }\n                    function convert_contract_ServiceEscrow_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function copy_calldata_to_memory_with_cleanup(src, dst, length)\n                    {\n                        calldatacopy(dst, src, length)\n                        mstore(add(dst, length), 0)\n                    }\n                    function abi_encode_bytes_calldata(start, length, pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_bytes(pos, length)\n                        copy_calldata_to_memory_with_cleanup(start, pos, length)\n                        end := add(pos, round_up_to_mul_of(length))\n                    }\n                    function abi_encode_bytes_calldata_uint256(headStart, value0, value1, value2) -> tail\n                    {\n                        tail := add(headStart, 64)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_bytes_calldata(value0, value1, tail)\n                        abi_encode_uint256_to_uint256(value2, add(headStart, 32))\n                    }\n                    function cleanup_uint32(value) -> cleaned\n                    {\n                        cleaned := and(value, 0xffffffff)\n                    }\n                    function cleanup_bytes4(value) -> cleaned\n                    {\n                        cleaned := and(value, shl(224, 0xffffffff))\n                    }\n                    function shift_left_224(value) -> newValue\n                    { newValue := shl(224, value) }\n                    function convert_uint32_to_bytes4(value) -> converted\n                    {\n                        converted := cleanup_bytes4(shift_left_224(cleanup_uint32(value)))\n                    }\n                    function array_storeLengthForEncoding_array_string_dyn(pos, length) -> updated_pos\n                    {\n                        mstore(pos, length)\n                        updated_pos := add(pos, 0x20)\n                    }\n                    function array_dataslot_array_string_dyn(ptr) -> data\n                    {\n                        data := ptr\n                        data := add(ptr, 0x20)\n                    }\n                    function abi_encode_string_to_string(value, pos) -> end\n                    {\n                        let length := array_length_string(value)\n                        pos := array_storeLengthForEncoding_string(pos, length)\n                        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                        end := add(pos, round_up_to_mul_of(length))\n                    }\n                    function abi_encodeUpdatedPos_string(value0, pos) -> updatedPos\n                    {\n                        updatedPos := abi_encode_string_to_string(value0, pos)\n                    }\n                    function array_nextElement_array_string_dyn(ptr) -> next\n                    { next := add(ptr, 0x20) }\n                    function abi_encode_array_string_dyn(value, pos) -> end\n                    {\n                        let length := array_length_array_string_dyn(value)\n                        pos := array_storeLengthForEncoding_array_string_dyn(pos, length)\n                        let headStart := pos\n                        let tail := add(pos, mul(length, 0x20))\n                        let baseRef := array_dataslot_array_string_dyn(value)\n                        let srcPtr := baseRef\n                        let i := 0\n                        for { } lt(i, length) { i := add(i, 1) }\n                        {\n                            mstore(pos, sub(tail, headStart))\n                            let elementValue0 := mload(srcPtr)\n                            tail := abi_encodeUpdatedPos_string(elementValue0, tail)\n                            srcPtr := array_nextElement_array_string_dyn(srcPtr)\n                            pos := add(pos, 0x20)\n                        }\n                        pos := tail\n                        end := pos\n                    }\n                    function abi_encode_bytes4(value, pos)\n                    {\n                        mstore(pos, cleanup_bytes4(value))\n                    }\n                    function abi_encode_address_array_string_dyn_bytes_bytes4_bytes(headStart, value0, value1, value2, value3, value4) -> tail\n                    {\n                        tail := add(headStart, 160)\n                        abi_encode_address(value0, add(headStart, 0))\n                        mstore(add(headStart, 32), sub(tail, headStart))\n                        tail := abi_encode_array_string_dyn(value1, tail)\n                        mstore(add(headStart, 64), sub(tail, headStart))\n                        tail := abi_encode_bytes_memory_ptr(value2, tail)\n                        abi_encode_bytes4(value3, add(headStart, 96))\n                        mstore(add(headStart, 128), sub(tail, headStart))\n                        tail := abi_encode_bytes_memory_ptr(value4, tail)\n                    }\n                    /// @ast-id 679 @src 1:6305:6818  \"function checkDelivery(uint256 purchaseId, bytes calldata userInput) external view {...\"\n                    function fun_checkDelivery(var_purchaseId, var_userInput_offset, var_userInput_length)\n                    {\n                        /// @src 1:6406:6415  \"purchases\"\n                        let _10_slot := 0x04\n                        let expr_slot := _10_slot\n                        /// @src 1:6416:6426  \"purchaseId\"\n                        let _1 := var_purchaseId\n                        let expr := _1\n                        /// @src 1:6406:6427  \"purchases[purchaseId]\"\n                        let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_slot, expr)\n                        let _13_slot := _2\n                        let expr_634_slot := _13_slot\n                        /// @src 1:6406:6434  \"purchases[purchaseId].amount\"\n                        let _3 := add(expr_634_slot, 1)\n                        let _4 := read_from_storage_split_offset_uint256(_3)\n                        let expr_1 := _4\n                        /// @src 1:6437:6438  \"0\"\n                        let expr_2 := 0x00\n                        /// @src 1:6406:6438  \"purchases[purchaseId].amount > 0\"\n                        let expr_3 := gt(cleanup_uint256(expr_1), convert_rational_0_by_1_to_uint256(expr_2))\n                        /// @src 1:6398:6470  \"require(purchases[purchaseId].amount > 0, \\\"Escrow: invalid purchase id\\\")\"\n                        require_helper_stringliteral(expr_3)\n                        /// @src 1:6517:6518  \"1\"\n                        let expr_4 := 0x01\n                        /// @src 1:6504:6519  \"new string[](1)\"\n                        let _5 := convert_rational_1_by_1_to_uint256(expr_4)\n                        let expr_650_mpos := allocate_and_zero_memory_array_array_string_dyn(_5)\n                        /// @src 1:6481:6519  \"string[] memory urls = new string[](1)\"\n                        let var_urls_mpos := expr_650_mpos\n                        /// @src 1:6539:6546  \"gateway\"\n                        let _17_slot := 0x01\n                        let expr_655_slot := _17_slot\n                        /// @src 1:6529:6533  \"urls\"\n                        let _18_mpos := var_urls_mpos\n                        let expr_652_mpos := _18_mpos\n                        /// @src 1:6534:6535  \"0\"\n                        let expr_5 := 0x00\n                        /// @src 1:6529:6546  \"urls[0] = gateway\"\n                        mstore(memory_array_index_access_string_dyn(expr_652_mpos, convert_rational_0_by_1_to_uint256(expr_5)), convert_array_string_storage_to_string(expr_655_slot))\n                        pop(mload(memory_array_index_access_string_dyn(expr_652_mpos, convert_rational_0_by_1_to_uint256(expr_5))))\n                        /// @src 1:6609:6613  \"this\"\n                        let expr_661_address := address()\n                        /// @src 1:6601:6614  \"address(this)\"\n                        let expr_6 := convert_contract_ServiceEscrow_to_address(expr_661_address)\n                        /// @src 1:6634:6638  \"urls\"\n                        let _20_mpos := var_urls_mpos\n                        let expr_663_mpos := _20_mpos\n                        /// @src 1:6673:6682  \"userInput\"\n                        let _21_offset := var_userInput_offset\n                        let _21_length := var_userInput_length\n                        let expr_666_offset := _21_offset\n                        let expr_666_length := _21_length\n                        /// @src 1:6684:6694  \"purchaseId\"\n                        let _6 := var_purchaseId\n                        let expr_7 := _6\n                        /// @src 1:6662:6695  \"abi.encode(userInput, purchaseId)\"\n                        let expr_668_mpos := allocate_unbounded()\n                        let _7 := add(expr_668_mpos, 0x20)\n                        let _8 := abi_encode_bytes_calldata_uint256(_7, expr_666_offset, expr_666_length, expr_7)\n                        mstore(expr_668_mpos, sub(_8, add(expr_668_mpos, 0x20)))\n                        finalize_allocation(expr_668_mpos, sub(_8, expr_668_mpos))\n                        /// @src 1:6727:6744  \"this.ccipCallback\"\n                        let expr_functionSelector := 0x29514482\n                        /// @src 1:6727:6753  \"this.ccipCallback.selector\"\n                        let expr_8 := convert_uint32_to_bytes4(expr_functionSelector)\n                        /// @src 1:6789:6799  \"purchaseId\"\n                        let _9 := var_purchaseId\n                        let expr_9 := _9\n                        /// @src 1:6778:6800  \"abi.encode(purchaseId)\"\n                        let expr_675_mpos := allocate_unbounded()\n                        let _10 := add(expr_675_mpos, 0x20)\n                        let _11 := abi_encode_uint256(_10, expr_9)\n                        mstore(expr_675_mpos, sub(_11, add(expr_675_mpos, 0x20)))\n                        finalize_allocation(expr_675_mpos, sub(_11, expr_675_mpos))\n                        /// @src 1:6564:6811  \"OffchainLookup({...\"\n                        let _12 := allocate_unbounded()\n                        mstore(_12, shl(228, 0x0556f183))\n                        let _13 := abi_encode_address_array_string_dyn_bytes_bytes4_bytes(add(_12, 4), expr_6, expr_663_mpos, expr_668_mpos, expr_8, expr_675_mpos)\n                        revert(_12, sub(_13, _12))\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function zero_value_for_split_uint256() -> ret\n                    { ret := 0 }\n                    function store_literal_in_memory_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: reentrant call\")\n                    }\n                    function abi_encode_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 22)\n                        store_literal_in_memory_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_2e89(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(tail)\n                    }\n                    function require_helper_stringliteral_2e89(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_2e89(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function cleanup_rational_2_by(value) -> cleaned\n                    { cleaned := value }\n                    function convert_rational_2_by_1_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_rational_2_by(value)))\n                    }\n                    function update_byte_slice_shift(value, toInsert) -> result\n                    {\n                        let mask := not(0)\n                        toInsert := shift_left_0(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function prepare_store_uint256(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_uint256_to_uint256(slot, value)\n                    {\n                        let convertedValue := convert_uint256_to_uint256(value)\n                        sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n                    }\n                    /// @ast-id 484 @src 1:3710:3851  \"modifier nonReentrant() {...\"\n                    function modifier_nonReentrant(var_purchaseId) -> _1\n                    {\n                        _1 := var_purchaseId\n                        /// @src 1:3752:3759  \"_locked\"\n                        let _2 := read_from_storage_split_offset_uint256(0x05)\n                        let expr := _2\n                        /// @src 1:3763:3764  \"1\"\n                        let expr_1 := 0x01\n                        /// @src 1:3752:3764  \"_locked == 1\"\n                        let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                        /// @src 1:3744:3791  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                        require_helper_stringliteral_2e89(expr_2)\n                        /// @src 1:3811:3812  \"2\"\n                        let expr_3 := 0x02\n                        /// @src 1:3801:3812  \"_locked = 2\"\n                        let _3 := convert_rational_2_by_1_to_uint256(expr_3)\n                        update_storage_value_offset_uint256_to_uint256(0x05, _3)\n                        /// @src 1:3822:3823  \"_\"\n                        _1 := fun_buyService_inner(var_purchaseId)\n                        /// @src 1:3843:3844  \"1\"\n                        let expr_4 := 0x01\n                        /// @src 1:3833:3844  \"_locked = 1\"\n                        let _4 := convert_rational_1_by_1_to_uint256(expr_4)\n                        update_storage_value_offset_uint256_to_uint256(0x05, _4)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function store_literal_in_memory_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: incorrect payment amount\")\n                    }\n                    function abi_encode_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 32)\n                        store_literal_in_memory_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_d266(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(tail)\n                    }\n                    function require_helper_stringliteral_d266(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_d266(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function panic_error_0x11()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x11)\n                        revert(0, 0x24)\n                    }\n                    function increment_uint256(value) -> ret\n                    {\n                        value := cleanup_uint256(value)\n                        if eq(value, not(0)) { panic_error_0x11() }\n                        ret := add(value, 1)\n                    }\n                    function allocate_memory_struct_struct_Purchase_storage_ptr() -> memPtr\n                    {\n                        memPtr := allocate_memory(160)\n                    }\n                    function write_to_memory_address(memPtr, value)\n                    {\n                        mstore(memPtr, cleanup_address(value))\n                    }\n                    function write_to_memory_uint256(memPtr, value)\n                    {\n                        mstore(memPtr, cleanup_uint256(value))\n                    }\n                    function write_to_memory_bool(memPtr, value)\n                    {\n                        mstore(memPtr, cleanup_bool(value))\n                    }\n                    function read_from_memoryt_address(ptr) -> returnValue\n                    {\n                        let value := cleanup_address(mload(ptr))\n                        returnValue := value\n                    }\n                    function read_from_memoryt_uint256(ptr) -> returnValue\n                    {\n                        let value := cleanup_uint256(mload(ptr))\n                        returnValue := value\n                    }\n                    function read_from_memoryt_bool(ptr) -> returnValue\n                    {\n                        let value := cleanup_bool(mload(ptr))\n                        returnValue := value\n                    }\n                    function update_byte_slice_shift_0(value, toInsert) -> result\n                    {\n                        let mask := 255\n                        toInsert := shift_left_0(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function convert_bool_to_bool(value) -> converted\n                    {\n                        converted := cleanup_bool(value)\n                    }\n                    function prepare_store_bool(value) -> ret\n                    { ret := value }\n                    function update_storage_value_offset_bool_to_bool(slot, value)\n                    {\n                        let convertedValue := convert_bool_to_bool(value)\n                        sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n                    }\n                    function shift_left(value) -> newValue\n                    { newValue := shl(8, value) }\n                    function update_byte_slice_shift_1(value, toInsert) -> result\n                    {\n                        let mask := 65280\n                        toInsert := shift_left(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function update_storage_value_offset_t_bool_to_t_bool(slot, value)\n                    {\n                        let convertedValue := convert_bool_to_bool(value)\n                        sstore(slot, update_byte_slice_shift_1(sload(slot), prepare_store_bool(convertedValue)))\n                    }\n                    function shift_left_16(value) -> newValue\n                    { newValue := shl(16, value) }\n                    function update_byte_slice_shift_2(value, toInsert) -> result\n                    {\n                        let mask := 16711680\n                        toInsert := shift_left_16(toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function update_storage_value_offset_2_bool_to_bool(slot, value)\n                    {\n                        let convertedValue := convert_bool_to_bool(value)\n                        sstore(slot, update_byte_slice_shift_2(sload(slot), prepare_store_bool(convertedValue)))\n                    }\n                    function copy_struct_to_storage_from_struct_Purchase_to_struct_Purchase(slot, value)\n                    {\n                        let memberSlot := add(slot, 0)\n                        let memberSrcPtr := add(value, 0)\n                        let memberValue := read_from_memoryt_address(memberSrcPtr)\n                        update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                        let memberSlot_1 := add(slot, 1)\n                        let memberSrcPtr_1 := add(value, 32)\n                        let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                        update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                        let memberSlot_2 := add(slot, 2)\n                        let memberSrcPtr_2 := add(value, 64)\n                        let memberValue_2 := read_from_memoryt_bool(memberSrcPtr_2)\n                        update_storage_value_offset_bool_to_bool(memberSlot_2, memberValue_2)\n                        let memberSlot_3 := add(slot, 2)\n                        let memberSrcPtr_3 := add(value, 96)\n                        let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                        update_storage_value_offset_t_bool_to_t_bool(memberSlot_3, memberValue_3)\n                        let memberSlot_4 := add(slot, 2)\n                        let memberSrcPtr_4 := add(value, 128)\n                        let memberValue_4 := read_from_memoryt_bool(memberSrcPtr_4)\n                        update_storage_value_offset_2_bool_to_bool(memberSlot_4, memberValue_4)\n                    }\n                    function update_storage_value_offset_struct_Purchase_to_struct_Purchase(slot, value)\n                    {\n                        copy_struct_to_storage_from_struct_Purchase_to_struct_Purchase(slot, value)\n                    }\n                    /// @src 1:5374:5844  \"function buyService() external payable nonReentrant returns (uint256 purchaseId) {...\"\n                    function fun_buyService_inner(_1) -> var_purchaseId\n                    {\n                        var_purchaseId := _1\n                        /// @src 1:5473:5482  \"msg.value\"\n                        let expr := callvalue()\n                        /// @src 1:5486:5491  \"price\"\n                        let _2 := loadimmutable(\"367\")\n                        let expr_1 := _2\n                        /// @src 1:5473:5491  \"msg.value == price\"\n                        let expr_2 := eq(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                        /// @src 1:5465:5528  \"require(msg.value == price, \\\"Escrow: incorrect payment amount\\\")\"\n                        require_helper_stringliteral_d266(expr_2)\n                        /// @src 1:5552:5568  \"nextPurchaseId++\"\n                        let _3 := read_from_storage_split_offset_uint256(0x03)\n                        let _4 := increment_uint256(_3)\n                        update_storage_value_offset_uint256_to_uint256(0x03, _4)\n                        let expr_3 := _3\n                        /// @src 1:5539:5568  \"purchaseId = nextPurchaseId++\"\n                        var_purchaseId := expr_3\n                        /// @src 1:5632:5642  \"msg.sender\"\n                        let expr_4 := caller()\n                        /// @src 1:5664:5673  \"msg.value\"\n                        let expr_5 := callvalue()\n                        /// @src 1:5696:5701  \"false\"\n                        let expr_6 := 0x00\n                        /// @src 1:5725:5730  \"false\"\n                        let expr_7 := 0x00\n                        /// @src 1:5754:5759  \"false\"\n                        let expr_8 := 0x00\n                        /// @src 1:5602:5770  \"Purchase({...\"\n                        let expr_611_mpos := allocate_memory_struct_struct_Purchase_storage_ptr()\n                        write_to_memory_address(add(expr_611_mpos, 0), expr_4)\n                        write_to_memory_uint256(add(expr_611_mpos, 32), expr_5)\n                        write_to_memory_bool(add(expr_611_mpos, 64), expr_6)\n                        write_to_memory_bool(add(expr_611_mpos, 96), expr_7)\n                        write_to_memory_bool(add(expr_611_mpos, 128), expr_8)\n                        /// @src 1:5578:5587  \"purchases\"\n                        let _39_slot := 0x04\n                        let expr_600_slot := _39_slot\n                        /// @src 1:5588:5598  \"purchaseId\"\n                        let _5 := var_purchaseId\n                        let expr_9 := _5\n                        /// @src 1:5578:5599  \"purchases[purchaseId]\"\n                        let _6 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_600_slot, expr_9)\n                        /// @src 1:5578:5770  \"purchases[purchaseId] = Purchase({...\"\n                        update_storage_value_offset_struct_Purchase_to_struct_Purchase(_6, expr_611_mpos)\n                        /// @src 1:5803:5813  \"purchaseId\"\n                        let _7 := var_purchaseId\n                        let expr_10 := _7\n                        /// @src 1:5815:5825  \"msg.sender\"\n                        let expr_11 := caller()\n                        /// @src 1:5827:5836  \"msg.value\"\n                        let expr_12 := callvalue()\n                        /// @src 1:5786:5837  \"ServicePurchased(purchaseId, msg.sender, msg.value)\"\n                        let _8 := 0x6989fd04c5bc56c8995f68ff4d4a94e67e56cf4efa352219e731185ac2736df5\n                        let _9 := convert_uint256_to_uint256(expr_10)\n                        let _10 := convert_address_to_address(expr_11)\n                        let _11 := allocate_unbounded()\n                        let _12 := abi_encode_uint256(_11, expr_12)\n                        log3(_11, sub(_12, _11), _8, _9, _10)\n                    }\n                    /// @ast-id 623 @src 1:5374:5844  \"function buyService() external payable nonReentrant returns (uint256 purchaseId) {...\"\n                    function fun_buyService() -> var_purchaseId\n                    {\n                        /// @src 1:5435:5453  \"uint256 purchaseId\"\n                        let zero_uint256 := zero_value_for_split_uint256()\n                        var_purchaseId := zero_uint256\n                        var_purchaseId := modifier_nonReentrant(var_purchaseId)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function zero_value_for_split_bytes32() -> ret\n                    { ret := 0 }\n                    /// @ast-id 1000 @src 1:10651:10814  \"function claimDigest(uint256 purchaseId, bytes32 deliverableHash) external view returns (bytes32) {...\"\n                    function fun_claimDigest(var_purchaseId, var_deliverableHash) -> var\n                    {\n                        /// @src 1:10740:10747  \"bytes32\"\n                        let zero_bytes32 := zero_value_for_split_bytes32()\n                        var := zero_bytes32\n                        /// @src 1:10779:10789  \"purchaseId\"\n                        let _1 := var_purchaseId\n                        let expr := _1\n                        /// @src 1:10791:10806  \"deliverableHash\"\n                        let _2 := var_deliverableHash\n                        let expr_1 := _2\n                        /// @src 1:10766:10807  \"_claimDigest(purchaseId, deliverableHash)\"\n                        let expr_2 := fun__claimDigest(expr, expr_1)\n                        /// @src 1:10759:10807  \"return _claimDigest(purchaseId, deliverableHash)\"\n                        var := expr_2\n                        leave\n                    }\n                    /// @ast-id 484 @src 1:3710:3851  \"modifier nonReentrant() {...\"\n                    function modifier_nonReentrant_719(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_716_length)\n                    {\n                        /// @src 1:3752:3759  \"_locked\"\n                        let _1 := read_from_storage_split_offset_uint256(0x05)\n                        let expr := _1\n                        /// @src 1:3763:3764  \"1\"\n                        let expr_1 := 0x01\n                        /// @src 1:3752:3764  \"_locked == 1\"\n                        let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                        /// @src 1:3744:3791  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                        require_helper_stringliteral_2e89(expr_2)\n                        /// @src 1:3811:3812  \"2\"\n                        let expr_3 := 0x02\n                        /// @src 1:3801:3812  \"_locked = 2\"\n                        let _2 := convert_rational_2_by_1_to_uint256(expr_3)\n                        update_storage_value_offset_uint256_to_uint256(0x05, _2)\n                        /// @src 1:3822:3823  \"_\"\n                        modifier_onlyProvider_721(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_716_length)\n                        /// @src 1:3843:3844  \"1\"\n                        let expr_4 := 0x01\n                        /// @src 1:3833:3844  \"_locked = 1\"\n                        let _3 := convert_rational_1_by_1_to_uint256(expr_4)\n                        update_storage_value_offset_uint256_to_uint256(0x05, _3)\n                    }\n                    /// @ast-id 449 @src 1:3349:3470  \"modifier onlyProvider() {...\"\n                    function modifier_onlyProvider_721(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n                    {\n                        /// @src 1:3391:3401  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:3405:3413  \"provider\"\n                        let _1 := loadimmutable(\"364\")\n                        let expr_1 := _1\n                        /// @src 1:3391:3413  \"msg.sender == provider\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:3383:3452  \"require(msg.sender == provider, \\\"Escrow: caller is not the provider\\\")\"\n                        require_helper_stringliteral_4b50(expr_2)\n                        /// @src 1:3462:3463  \"_\"\n                        fun_claimPayment_inner(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function convert_struct_Purchase_storage_to_struct_Purchase_ptr(value) -> converted\n                    { converted := value }\n                    function store_literal_in_memory_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: payment already claimed\")\n                    }\n                    function abi_encode_stringliteral_9796(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                        store_literal_in_memory_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_9796(tail)\n                    }\n                    function require_helper_stringliteral_9796(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function store_literal_in_memory_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: purchase is in dispute\")\n                    }\n                    function abi_encode_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 30)\n                        store_literal_in_memory_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_14a8(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(tail)\n                    }\n                    function require_helper_stringliteral_14a8(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_14a8(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                    { revert(0, 0) }\n                    function array_allocation_size_bytes(length) -> size\n                    {\n                        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                        size := round_up_to_mul_of(length)\n                        size := add(size, 0x20)\n                    }\n                    function abi_decode_available_length_bytes(src, length, end) -> array\n                    {\n                        array := allocate_memory(array_allocation_size_bytes(length))\n                        mstore(array, length)\n                        let dst := add(array, 0x20)\n                        if gt(add(src, length), end)\n                        {\n                            revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                        }\n                        copy_calldata_to_memory_with_cleanup(src, dst, length)\n                    }\n                    function convert_array_bytes_calldata_to_bytes(value, length) -> converted\n                    {\n                        converted := abi_decode_available_length_bytes(value, length, calldatasize())\n                    }\n                    function convert_uint160_to_address_payable(value) -> converted\n                    {\n                        converted := convert_uint160_to_uint160(value)\n                    }\n                    function convert_address_to_address_payable(value) -> converted\n                    {\n                        converted := convert_uint160_to_address_payable(value)\n                    }\n                    /// @src 1:7736:8490  \"function claimPayment(...\"\n                    function fun_claimPayment_inner(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n                    {\n                        /// @src 1:7937:7946  \"purchases\"\n                        let _56_slot := 0x04\n                        let expr_726_slot := _56_slot\n                        /// @src 1:7947:7957  \"purchaseId\"\n                        let _1 := var_purchaseId\n                        let expr := _1\n                        /// @src 1:7937:7958  \"purchases[purchaseId]\"\n                        let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_726_slot, expr)\n                        let _59_slot := _2\n                        let expr_728_slot := _59_slot\n                        /// @src 1:7909:7958  \"Purchase storage purchase = purchases[purchaseId]\"\n                        let var_purchase_725_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_728_slot)\n                        /// @src 1:7978:7986  \"purchase\"\n                        let _60_slot := var_purchase_725_slot\n                        let expr_731_slot := _60_slot\n                        /// @src 1:7978:7994  \"purchase.claimed\"\n                        let _3 := add(expr_731_slot, 2)\n                        let _4 := read_from_storage_split_offset_t_bool(_3)\n                        let expr_1 := _4\n                        /// @src 1:7977:7994  \"!purchase.claimed\"\n                        let expr_2 := cleanup_bool(iszero(expr_1))\n                        /// @src 1:7969:8031  \"require(!purchase.claimed,  \\\"Escrow: payment already claimed\\\")\"\n                        require_helper_stringliteral_9796(expr_2)\n                        /// @src 1:8050:8058  \"purchase\"\n                        let _63_slot := var_purchase_725_slot\n                        let expr_738_slot := _63_slot\n                        /// @src 1:8050:8067  \"purchase.disputed\"\n                        let _5 := add(expr_738_slot, 2)\n                        let _6 := read_from_storage_split_offset_bool(_5)\n                        let expr_3 := _6\n                        /// @src 1:8049:8067  \"!purchase.disputed\"\n                        let expr_4 := cleanup_bool(iszero(expr_3))\n                        /// @src 1:8041:8102  \"require(!purchase.disputed, \\\"Escrow: purchase is in dispute\\\")\"\n                        require_helper_stringliteral_14a8(expr_4)\n                        /// @src 1:8178:8188  \"purchaseId\"\n                        let _7 := var_purchaseId\n                        let expr_5 := _7\n                        /// @src 1:8190:8205  \"deliverableHash\"\n                        let _8 := var_deliverableHash\n                        let expr_6 := _8\n                        /// @src 1:8165:8206  \"_claimDigest(purchaseId, deliverableHash)\"\n                        let expr_7 := fun__claimDigest(expr_5, expr_6)\n                        /// @src 1:8148:8206  \"bytes32 digest = _claimDigest(purchaseId, deliverableHash)\"\n                        let var_digest := expr_7\n                        /// @src 1:8247:8253  \"digest\"\n                        let _9 := var_digest\n                        let expr_8 := _9\n                        /// @src 1:8255:8269  \"buyerSignature\"\n                        let _69_offset := var_buyerSignature_offset\n                        let _69_length := var_buyerSignature_length\n                        let expr_756_offset := _69_offset\n                        let expr_756_length := _69_length\n                        /// @src 1:8233:8270  \"ECDSA.recover(digest, buyerSignature)\"\n                        let _70_mpos := convert_array_bytes_calldata_to_bytes(expr_756_offset, expr_756_length)\n                        let expr_9 := fun_recover(expr_8, _70_mpos)\n                        /// @src 1:8216:8270  \"address signer = ECDSA.recover(digest, buyerSignature)\"\n                        let var_signer := expr_9\n                        /// @src 1:8288:8294  \"signer\"\n                        let _10 := var_signer\n                        let expr_10 := _10\n                        /// @src 1:8298:8306  \"purchase\"\n                        let _72_slot := var_purchase_725_slot\n                        let expr_761_slot := _72_slot\n                        /// @src 1:8298:8312  \"purchase.buyer\"\n                        let _11 := add(expr_761_slot, 0)\n                        let _12 := read_from_storage_split_offset_address(_11)\n                        let expr_11 := _12\n                        /// @src 1:8288:8312  \"signer == purchase.buyer\"\n                        let expr_12 := eq(cleanup_address(expr_10), cleanup_address(expr_11))\n                        /// @src 1:8280:8353  \"require(signer == purchase.buyer, \\\"SignatureVerifier: Invalid signature\\\")\"\n                        require_helper_stringliteral_6f31(expr_12)\n                        /// @src 1:8383:8387  \"true\"\n                        let expr_13 := 0x01\n                        /// @src 1:8364:8372  \"purchase\"\n                        let _75_slot := var_purchase_725_slot\n                        let expr_767_slot := _75_slot\n                        /// @src 1:8364:8380  \"purchase.claimed\"\n                        let _13 := add(expr_767_slot, 2)\n                        /// @src 1:8364:8387  \"purchase.claimed = true\"\n                        update_storage_value_offset_bool_to_bool(_13, expr_13)\n                        /// @src 1:8414:8422  \"provider\"\n                        let _14 := loadimmutable(\"364\")\n                        let expr_14 := _14\n                        /// @src 1:8406:8423  \"payable(provider)\"\n                        let expr_15 := convert_address_to_address_payable(expr_14)\n                        /// @src 1:8425:8433  \"purchase\"\n                        let _78_slot := var_purchase_725_slot\n                        let expr_778_slot := _78_slot\n                        /// @src 1:8425:8440  \"purchase.amount\"\n                        let _15 := add(expr_778_slot, 1)\n                        let _16 := read_from_storage_split_offset_uint256(_15)\n                        let expr_16 := _16\n                        fun_sendETH(expr_15, expr_16)\n                        /// @src 1:8472:8482  \"purchaseId\"\n                        let _17 := var_purchaseId\n                        let expr_17 := _17\n                        /// @src 1:8457:8483  \"PaymentClaimed(purchaseId)\"\n                        let _18 := 0x9b6fad3638aff112640e0386ff933ec4087b8ef6944df50928b1b578fa968c19\n                        let _19 := convert_uint256_to_uint256(expr_17)\n                        let _20 := allocate_unbounded()\n                        let _21 := abi_encode_tuple(_20)\n                        log2(_20, sub(_21, _20), _18, _19)\n                    }\n                    /// @ast-id 787 @src 1:7736:8490  \"function claimPayment(...\"\n                    function fun_claimPayment(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n                    {\n                        modifier_nonReentrant_719(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function store_literal_in_memory_e5c00a4eee7d31f86bc5aa9e56edddaee61755eba58c430976c3a31eb9b68dc5(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: caller is not the factor\")\n                        mstore(add(memPtr, 32), \"y\")\n                    }\n                    function abi_encode_stringliteral_e5c0(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 33)\n                        store_literal_in_memory_e5c00a4eee7d31f86bc5aa9e56edddaee61755eba58c430976c3a31eb9b68dc5(pos)\n                        end := add(pos, 64)\n                    }\n                    function abi_encode_tuple_stringliteral_e5c0(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_e5c0(tail)\n                    }\n                    function require_helper_stringliteral_e5c0(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_tuple_stringliteral_e5c0(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @ast-id 462 @src 1:3553:3671  \"modifier onlyFactory() {...\"\n                    function modifier_onlyFactory_839(var_purchaseId)\n                    {\n                        /// @src 1:3594:3604  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:3608:3615  \"factory\"\n                        let _1 := loadimmutable(\"358\")\n                        let expr_1 := _1\n                        /// @src 1:3594:3615  \"msg.sender == factory\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:3586:3653  \"require(msg.sender == factory, \\\"Escrow: caller is not the factory\\\")\"\n                        require_helper_stringliteral_e5c0(expr_2)\n                        /// @src 1:3663:3664  \"_\"\n                        modifier_nonReentrant_841(var_purchaseId)\n                    }\n                    /// @ast-id 484 @src 1:3710:3851  \"modifier nonReentrant() {...\"\n                    function modifier_nonReentrant_841(var_purchaseId)\n                    {\n                        /// @src 1:3752:3759  \"_locked\"\n                        let _1 := read_from_storage_split_offset_uint256(0x05)\n                        let expr := _1\n                        /// @src 1:3763:3764  \"1\"\n                        let expr_1 := 0x01\n                        /// @src 1:3752:3764  \"_locked == 1\"\n                        let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                        /// @src 1:3744:3791  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                        require_helper_stringliteral_2e89(expr_2)\n                        /// @src 1:3811:3812  \"2\"\n                        let expr_3 := 0x02\n                        /// @src 1:3801:3812  \"_locked = 2\"\n                        let _2 := convert_rational_2_by_1_to_uint256(expr_3)\n                        update_storage_value_offset_uint256_to_uint256(0x05, _2)\n                        /// @src 1:3822:3823  \"_\"\n                        fun_factoryRefundBuyer_inner(var_purchaseId)\n                        /// @src 1:3843:3844  \"1\"\n                        let expr_4 := 0x01\n                        /// @src 1:3833:3844  \"_locked = 1\"\n                        let _3 := convert_rational_1_by_1_to_uint256(expr_4)\n                        update_storage_value_offset_uint256_to_uint256(0x05, _3)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function store_literal_in_memory_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: invalid state\")\n                    }\n                    function abi_encode_stringliteral_fe47(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 21)\n                        store_literal_in_memory_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_tuple_stringliteral_fe47(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_fe47(tail)\n                    }\n                    function require_helper_stringliteral_fe47(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_tuple_stringliteral_fe47(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @src 1:9047:9373  \"function factoryRefundBuyer(uint256 purchaseId) external onlyFactory nonReentrant {...\"\n                    function fun_factoryRefundBuyer_inner(var_purchaseId)\n                    {\n                        /// @src 1:9167:9176  \"purchases\"\n                        let _90_slot := 0x04\n                        let expr_846_slot := _90_slot\n                        /// @src 1:9177:9187  \"purchaseId\"\n                        let _1 := var_purchaseId\n                        let expr := _1\n                        /// @src 1:9167:9188  \"purchases[purchaseId]\"\n                        let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_846_slot, expr)\n                        let _93_slot := _2\n                        let expr_848_slot := _93_slot\n                        /// @src 1:9139:9188  \"Purchase storage purchase = purchases[purchaseId]\"\n                        let var_purchase_845_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_848_slot)\n                        /// @src 1:9206:9214  \"purchase\"\n                        let _94_slot := var_purchase_845_slot\n                        let expr_851_slot := _94_slot\n                        /// @src 1:9206:9223  \"purchase.disputed\"\n                        let _3 := add(expr_851_slot, 2)\n                        let _4 := read_from_storage_split_offset_bool(_3)\n                        let expr_1 := _4\n                        /// @src 1:9206:9245  \"purchase.disputed && !purchase.resolved\"\n                        let expr_2 := expr_1\n                        if expr_2\n                        {\n                            /// @src 1:9228:9236  \"purchase\"\n                            let _97_slot := var_purchase_845_slot\n                            let expr_853_slot := _97_slot\n                            /// @src 1:9228:9245  \"purchase.resolved\"\n                            let _5 := add(expr_853_slot, 2)\n                            let _6 := read_from_storage_split_offset_2_bool(_5)\n                            let expr_3 := _6\n                            /// @src 1:9227:9245  \"!purchase.resolved\"\n                            let expr_4 := cleanup_bool(iszero(expr_3))\n                            /// @src 1:9206:9245  \"purchase.disputed && !purchase.resolved\"\n                            expr_2 := expr_4\n                        }\n                        /// @src 1:9198:9271  \"require(purchase.disputed && !purchase.resolved, \\\"Escrow: invalid state\\\")\"\n                        require_helper_stringliteral_fe47(expr_2)\n                        /// @src 1:9302:9306  \"true\"\n                        let expr_5 := 0x01\n                        /// @src 1:9282:9290  \"purchase\"\n                        let _100_slot := var_purchase_845_slot\n                        let expr_860_slot := _100_slot\n                        /// @src 1:9282:9299  \"purchase.resolved\"\n                        let _7 := add(expr_860_slot, 2)\n                        /// @src 1:9282:9306  \"purchase.resolved = true\"\n                        update_storage_value_offset_2_bool_to_bool(_7, expr_5)\n                        /// @src 1:9333:9341  \"purchase\"\n                        let _102_slot := var_purchase_845_slot\n                        let expr_869_slot := _102_slot\n                        /// @src 1:9333:9347  \"purchase.buyer\"\n                        let _8 := add(expr_869_slot, 0)\n                        let _9 := read_from_storage_split_offset_address(_8)\n                        let expr_6 := _9\n                        /// @src 1:9325:9348  \"payable(purchase.buyer)\"\n                        let expr_7 := convert_address_to_address_payable(expr_6)\n                        /// @src 1:9350:9358  \"purchase\"\n                        let _105_slot := var_purchase_845_slot\n                        let expr_872_slot := _105_slot\n                        /// @src 1:9350:9365  \"purchase.amount\"\n                        let _10 := add(expr_872_slot, 1)\n                        let _11 := read_from_storage_split_offset_uint256(_10)\n                        let expr_8 := _11\n                        fun_sendETH(expr_7, expr_8)\n                    }\n                    /// @ast-id 877 @src 1:9047:9373  \"function factoryRefundBuyer(uint256 purchaseId) external onlyFactory nonReentrant {...\"\n                    function fun_factoryRefundBuyer(var_purchaseId)\n                    {\n                        modifier_onlyFactory_839(var_purchaseId)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function store_literal_in_memory_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: caller is not the buyer\")\n                    }\n                    function abi_encode_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                        store_literal_in_memory_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_f4d3(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(tail)\n                    }\n                    function require_helper_stringliteral_f4d3(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_f4d3(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function store_literal_in_memory_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: dispute already raised\")\n                    }\n                    function abi_encode_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 30)\n                        store_literal_in_memory_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_3a45(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(tail)\n                    }\n                    function require_helper_stringliteral_3a45(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_3a45(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @ast-id 833 @src 1:8496:8932  \"function raiseDispute(uint256 purchaseId) external {...\"\n                    function fun_raiseDispute(var_purchaseId)\n                    {\n                        /// @src 1:8585:8594  \"purchases\"\n                        let _108_slot := 0x04\n                        let expr_795_slot := _108_slot\n                        /// @src 1:8595:8605  \"purchaseId\"\n                        let _1 := var_purchaseId\n                        let expr := _1\n                        /// @src 1:8585:8606  \"purchases[purchaseId]\"\n                        let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_795_slot, expr)\n                        let _111_slot := _2\n                        let expr_797_slot := _111_slot\n                        /// @src 1:8557:8606  \"Purchase storage purchase = purchases[purchaseId]\"\n                        let var_purchase_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_797_slot)\n                        /// @src 1:8625:8635  \"msg.sender\"\n                        let expr_1 := caller()\n                        /// @src 1:8639:8647  \"purchase\"\n                        let _112_slot := var_purchase_slot\n                        let expr_802_slot := _112_slot\n                        /// @src 1:8639:8653  \"purchase.buyer\"\n                        let _3 := add(expr_802_slot, 0)\n                        let _4 := read_from_storage_split_offset_address(_3)\n                        let expr_2 := _4\n                        /// @src 1:8625:8653  \"msg.sender == purchase.buyer\"\n                        let expr_3 := eq(cleanup_address(expr_1), cleanup_address(expr_2))\n                        /// @src 1:8617:8689  \"require(msg.sender == purchase.buyer, \\\"Escrow: caller is not the buyer\\\")\"\n                        require_helper_stringliteral_f4d3(expr_3)\n                        /// @src 1:8708:8716  \"purchase\"\n                        let _115_slot := var_purchase_slot\n                        let expr_809_slot := _115_slot\n                        /// @src 1:8708:8724  \"purchase.claimed\"\n                        let _5 := add(expr_809_slot, 2)\n                        let _6 := read_from_storage_split_offset_t_bool(_5)\n                        let expr_4 := _6\n                        /// @src 1:8707:8724  \"!purchase.claimed\"\n                        let expr_5 := cleanup_bool(iszero(expr_4))\n                        /// @src 1:8699:8770  \"require(!purchase.claimed,           \\\"Escrow: payment already claimed\\\")\"\n                        require_helper_stringliteral_9796(expr_5)\n                        /// @src 1:8789:8797  \"purchase\"\n                        let _118_slot := var_purchase_slot\n                        let expr_816_slot := _118_slot\n                        /// @src 1:8789:8806  \"purchase.disputed\"\n                        let _7 := add(expr_816_slot, 2)\n                        let _8 := read_from_storage_split_offset_bool(_7)\n                        let expr_6 := _8\n                        /// @src 1:8788:8806  \"!purchase.disputed\"\n                        let expr_7 := cleanup_bool(iszero(expr_6))\n                        /// @src 1:8780:8850  \"require(!purchase.disputed,          \\\"Escrow: dispute already raised\\\")\"\n                        require_helper_stringliteral_3a45(expr_7)\n                        /// @src 1:8881:8885  \"true\"\n                        let expr_8 := 0x01\n                        /// @src 1:8861:8869  \"purchase\"\n                        let _121_slot := var_purchase_slot\n                        let expr_822_slot := _121_slot\n                        /// @src 1:8861:8878  \"purchase.disputed\"\n                        let _9 := add(expr_822_slot, 2)\n                        /// @src 1:8861:8885  \"purchase.disputed = true\"\n                        update_storage_value_offset_t_bool_to_t_bool(_9, expr_8)\n                        /// @src 1:8914:8924  \"purchaseId\"\n                        let _10 := var_purchaseId\n                        let expr_9 := _10\n                        /// @src 1:8900:8925  \"DisputeRaised(purchaseId)\"\n                        let _11 := 0x04901f83201c8724eadf084436db8aa391820bae6d11f9f78a17edb6f2eef3cf\n                        let _12 := convert_uint256_to_uint256(expr_9)\n                        let _13 := allocate_unbounded()\n                        let _14 := abi_encode_tuple(_13)\n                        log2(_13, sub(_14, _13), _11, _12)\n                    }\n                    /// @ast-id 462 @src 1:3553:3671  \"modifier onlyFactory() {...\"\n                    function modifier_onlyFactory(var_purchaseId)\n                    {\n                        /// @src 1:3594:3604  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:3608:3615  \"factory\"\n                        let _1 := loadimmutable(\"358\")\n                        let expr_1 := _1\n                        /// @src 1:3594:3615  \"msg.sender == factory\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:3586:3653  \"require(msg.sender == factory, \\\"Escrow: caller is not the factory\\\")\"\n                        require_helper_stringliteral_e5c0(expr_2)\n                        /// @src 1:3663:3664  \"_\"\n                        modifier_nonReentrant_885(var_purchaseId)\n                    }\n                    /// @ast-id 484 @src 1:3710:3851  \"modifier nonReentrant() {...\"\n                    function modifier_nonReentrant_885(var_purchaseId)\n                    {\n                        /// @src 1:3752:3759  \"_locked\"\n                        let _1 := read_from_storage_split_offset_uint256(0x05)\n                        let expr := _1\n                        /// @src 1:3763:3764  \"1\"\n                        let expr_1 := 0x01\n                        /// @src 1:3752:3764  \"_locked == 1\"\n                        let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                        /// @src 1:3744:3791  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                        require_helper_stringliteral_2e89(expr_2)\n                        /// @src 1:3811:3812  \"2\"\n                        let expr_3 := 0x02\n                        /// @src 1:3801:3812  \"_locked = 2\"\n                        let _2 := convert_rational_2_by_1_to_uint256(expr_3)\n                        update_storage_value_offset_uint256_to_uint256(0x05, _2)\n                        /// @src 1:3822:3823  \"_\"\n                        fun_factoryReleaseToProvider_inner(var_purchaseId)\n                        /// @src 1:3843:3844  \"1\"\n                        let expr_4 := 0x01\n                        /// @src 1:3833:3844  \"_locked = 1\"\n                        let _3 := convert_rational_1_by_1_to_uint256(expr_4)\n                        update_storage_value_offset_uint256_to_uint256(0x05, _3)\n                    }\n                    /// @src 1:9472:9819  \"function factoryReleaseToProvider(uint256 purchaseId) external onlyFactory nonReentrant {...\"\n                    function fun_factoryReleaseToProvider_inner(var_purchaseId)\n                    {\n                        /// @src 1:9598:9607  \"purchases\"\n                        let _132_slot := 0x04\n                        let expr_890_slot := _132_slot\n                        /// @src 1:9608:9618  \"purchaseId\"\n                        let _1 := var_purchaseId\n                        let expr := _1\n                        /// @src 1:9598:9619  \"purchases[purchaseId]\"\n                        let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_890_slot, expr)\n                        let _135_slot := _2\n                        let expr_892_slot := _135_slot\n                        /// @src 1:9570:9619  \"Purchase storage purchase = purchases[purchaseId]\"\n                        let var_purchase_889_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_892_slot)\n                        /// @src 1:9638:9646  \"purchase\"\n                        let _136_slot := var_purchase_889_slot\n                        let expr_895_slot := _136_slot\n                        /// @src 1:9638:9654  \"purchase.claimed\"\n                        let _3 := add(expr_895_slot, 2)\n                        let _4 := read_from_storage_split_offset_t_bool(_3)\n                        let expr_1 := _4\n                        /// @src 1:9637:9654  \"!purchase.claimed\"\n                        let expr_2 := cleanup_bool(iszero(expr_1))\n                        /// @src 1:9637:9675  \"!purchase.claimed && purchase.disputed\"\n                        let expr_3 := expr_2\n                        if expr_3\n                        {\n                            /// @src 1:9658:9666  \"purchase\"\n                            let _139_slot := var_purchase_889_slot\n                            let expr_898_slot := _139_slot\n                            /// @src 1:9658:9675  \"purchase.disputed\"\n                            let _5 := add(expr_898_slot, 2)\n                            let _6 := read_from_storage_split_offset_bool(_5)\n                            let expr_4 := _6\n                            /// @src 1:9637:9675  \"!purchase.claimed && purchase.disputed\"\n                            expr_3 := expr_4\n                        }\n                        /// @src 1:9637:9697  \"!purchase.claimed && purchase.disputed && !purchase.resolved\"\n                        let expr_5 := expr_3\n                        if expr_5\n                        {\n                            /// @src 1:9680:9688  \"purchase\"\n                            let _142_slot := var_purchase_889_slot\n                            let expr_901_slot := _142_slot\n                            /// @src 1:9680:9697  \"purchase.resolved\"\n                            let _7 := add(expr_901_slot, 2)\n                            let _8 := read_from_storage_split_offset_2_bool(_7)\n                            let expr_6 := _8\n                            /// @src 1:9679:9697  \"!purchase.resolved\"\n                            let expr_7 := cleanup_bool(iszero(expr_6))\n                            /// @src 1:9637:9697  \"!purchase.claimed && purchase.disputed && !purchase.resolved\"\n                            expr_5 := expr_7\n                        }\n                        /// @src 1:9629:9723  \"require(!purchase.claimed && purchase.disputed && !purchase.resolved, \\\"Escrow: invalid state\\\")\"\n                        require_helper_stringliteral_fe47(expr_5)\n                        /// @src 1:9754:9758  \"true\"\n                        let expr_8 := 0x01\n                        /// @src 1:9734:9742  \"purchase\"\n                        let _slot := var_purchase_889_slot\n                        let expr_908_slot := _slot\n                        /// @src 1:9734:9751  \"purchase.resolved\"\n                        let _9 := add(expr_908_slot, 2)\n                        /// @src 1:9734:9758  \"purchase.resolved = true\"\n                        update_storage_value_offset_2_bool_to_bool(_9, expr_8)\n                        /// @src 1:9785:9793  \"provider\"\n                        let _10 := loadimmutable(\"364\")\n                        let expr_9 := _10\n                        /// @src 1:9777:9794  \"payable(provider)\"\n                        let expr_10 := convert_address_to_address_payable(expr_9)\n                        /// @src 1:9796:9804  \"purchase\"\n                        let _148_slot := var_purchase_889_slot\n                        let expr_919_slot := _148_slot\n                        /// @src 1:9796:9811  \"purchase.amount\"\n                        let _11 := add(expr_919_slot, 1)\n                        let _12 := read_from_storage_split_offset_uint256(_11)\n                        let expr_11 := _12\n                        fun_sendETH(expr_10, expr_11)\n                    }\n                    /// @ast-id 924 @src 1:9472:9819  \"function factoryReleaseToProvider(uint256 purchaseId) external onlyFactory nonReentrant {...\"\n                    function fun_factoryReleaseToProvider(var_purchaseId)\n                    {\n                        modifier_onlyFactory(var_purchaseId)\n                    }\n                    /// @ast-id 449 @src 1:3349:3470  \"modifier onlyProvider() {...\"\n                    function modifier_onlyProvider(var_newGateway_offset, var_newGateway_927_length)\n                    {\n                        /// @src 1:3391:3401  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:3405:3413  \"provider\"\n                        let _1 := loadimmutable(\"364\")\n                        let expr_1 := _1\n                        /// @src 1:3391:3413  \"msg.sender == provider\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:3383:3452  \"require(msg.sender == provider, \\\"Escrow: caller is not the provider\\\")\"\n                        require_helper_stringliteral_4b50(expr_2)\n                        /// @src 1:3462:3463  \"_\"\n                        fun_updateGateway_inner(var_newGateway_offset, var_newGateway_927_length)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function convert_array_string_calldata_to_bytes_calldata(value, length) -> converted, outLength\n                    {\n                        converted := value\n                        outLength := length\n                    }\n                    function array_length_bytes_calldata(value, len) -> length\n                    { length := len }\n                    function store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: gateway cannot be empty\")\n                    }\n                    function abi_encode_stringliteral_795f(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                        store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_tuple_stringliteral_795f(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_795f(tail)\n                    }\n                    function require_helper_stringliteral_795f(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_tuple_stringliteral_795f(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    function array_length_string_calldata(value, len) -> length\n                    { length := len }\n                    function divide_by_ceil(value) -> result\n                    {\n                        result := div(add(value, 31), 32)\n                    }\n                    function shift_left_dynamic(bits, value) -> newValue\n                    { newValue := shl(bits, value) }\n                    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n                    {\n                        let shiftBits := mul(shiftBytes, 8)\n                        let mask := shift_left_dynamic(shiftBits, not(0))\n                        toInsert := shift_left_dynamic(shiftBits, toInsert)\n                        value := and(value, not(mask))\n                        result := or(value, and(toInsert, mask))\n                    }\n                    function update_storage_value_uint256_to_uint256(slot, offset, value)\n                    {\n                        let convertedValue := convert_uint256_to_uint256(value)\n                        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n                    }\n                    function storage_set_to_zero_uint256(slot, offset)\n                    {\n                        let zero := zero_value_for_split_uint256()\n                        update_storage_value_uint256_to_uint256(slot, offset, zero)\n                    }\n                    function clear_storage_range_bytes1(start, end)\n                    {\n                        for { } lt(start, end) { start := add(start, 1) }\n                        {\n                            storage_set_to_zero_uint256(start, 0)\n                        }\n                    }\n                    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n                    {\n                        if gt(len, 31)\n                        {\n                            let dataArea := array_dataslot_string_storage(array)\n                            let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                            if lt(startIndex, 32) { deleteStart := dataArea }\n                            clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                        }\n                    }\n                    function mask_bytes_dynamic(data, bytes) -> result\n                    {\n                        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                        result := and(data, mask)\n                    }\n                    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n                    {\n                        data := mask_bytes_dynamic(data, len)\n                        used := or(data, mul(2, len))\n                    }\n                    function copy_byte_array_to_storage_from_string_calldata_to_string(slot, src, len)\n                    {\n                        let newLen := array_length_string_calldata(src, len)\n                        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                        let oldLen := extract_byte_array_length(sload(slot))\n                        clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n                        let srcOffset := 0\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(0x1f))\n                            let dstPtr := array_dataslot_string_storage(slot)\n                            let i := 0\n                            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                            {\n                                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                                dstPtr := add(dstPtr, 1)\n                                srcOffset := add(srcOffset, 32)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := calldataload(add(src, srcOffset))\n                                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                            }\n                            sstore(slot, add(mul(newLen, 2), 1))\n                        }\n                        default {\n                            let value := 0\n                            if newLen\n                            {\n                                value := calldataload(add(src, srcOffset))\n                            }\n                            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                        }\n                    }\n                    function update_storage_value_offset_string_calldata_to_string(slot, value, value_1)\n                    {\n                        copy_byte_array_to_storage_from_string_calldata_to_string(slot, value, value_1)\n                    }\n                    /// @src 1:9885:10077  \"function updateGateway(string calldata newGateway) external onlyProvider {...\"\n                    function fun_updateGateway_inner(var_newGateway_offset, var_newGateway_length)\n                    {\n                        /// @src 1:9982:9992  \"newGateway\"\n                        let _152_offset := var_newGateway_offset\n                        let _152_length := var_newGateway_length\n                        let expr_935_offset := _152_offset\n                        let expr_935_length := _152_length\n                        /// @src 1:9976:9993  \"bytes(newGateway)\"\n                        let expr_936_offset, expr_936_length := convert_array_string_calldata_to_bytes_calldata(expr_935_offset, expr_935_length)\n                        /// @src 1:9976:10000  \"bytes(newGateway).length\"\n                        let expr := array_length_bytes_calldata(expr_936_offset, expr_936_length)\n                        /// @src 1:10003:10004  \"0\"\n                        let expr_1 := 0x00\n                        /// @src 1:9976:10004  \"bytes(newGateway).length > 0\"\n                        let expr_2 := gt(cleanup_uint256(expr), convert_rational_0_by_1_to_uint256(expr_1))\n                        /// @src 1:9968:10040  \"require(bytes(newGateway).length > 0, \\\"Escrow: gateway cannot be empty\\\")\"\n                        require_helper_stringliteral_795f(expr_2)\n                        /// @src 1:10060:10070  \"newGateway\"\n                        let _153_offset := var_newGateway_offset\n                        let _length := var_newGateway_length\n                        let expr_944_offset := _153_offset\n                        let expr_944_length := _length\n                        /// @src 1:10050:10070  \"gateway = newGateway\"\n                        update_storage_value_offset_string_calldata_to_string(0x01, expr_944_offset, expr_944_length)\n                    }\n                    /// @ast-id 948 @src 1:9885:10077  \"function updateGateway(string calldata newGateway) external onlyProvider {...\"\n                    function fun_updateGateway(var_newGateway_offset, var_newGateway_length)\n                    {\n                        modifier_onlyProvider(var_newGateway_offset, var_newGateway_length)\n                    }\n                    /// @ast-id 449 @src 1:3349:3470  \"modifier onlyProvider() {...\"\n                    function modifier_onlyProvider_954(var_newDescription_offset, var_newDescription_length)\n                    {\n                        /// @src 1:3391:3401  \"msg.sender\"\n                        let expr := caller()\n                        /// @src 1:3405:3413  \"provider\"\n                        let _1 := loadimmutable(\"364\")\n                        let expr_1 := _1\n                        /// @src 1:3391:3413  \"msg.sender == provider\"\n                        let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                        /// @src 1:3383:3452  \"require(msg.sender == provider, \\\"Escrow: caller is not the provider\\\")\"\n                        require_helper_stringliteral_4b50(expr_2)\n                        /// @src 1:3462:3463  \"_\"\n                        fun_updateDescription_inner(var_newDescription_offset, var_newDescription_length)\n                    }\n                    /// @src 1:10155:10281  \"function updateDescription(string calldata newDescription) external onlyProvider {...\"\n                    function fun_updateDescription_inner(var_newDescription_offset, var_newDescription_length)\n                    {\n                        /// @src 1:10260:10274  \"newDescription\"\n                        let _156_offset := var_newDescription_offset\n                        let _156_length := var_newDescription_length\n                        let expr_957_offset := _156_offset\n                        let expr_957_length := _156_length\n                        /// @src 1:10246:10274  \"description = newDescription\"\n                        update_storage_value_offset_string_calldata_to_string(0x00, expr_957_offset, expr_957_length)\n                    }\n                    /// @ast-id 961 @src 1:10155:10281  \"function updateDescription(string calldata newDescription) external onlyProvider {...\"\n                    function fun_updateDescription(var_newDescription_offset, var_newDescription_length)\n                    {\n                        modifier_onlyProvider_954(var_newDescription_offset, var_newDescription_length)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function zero_value_for_split_address() -> ret\n                    { ret := 0 }\n                    function abi_decode_bytes(offset, end) -> array\n                    {\n                        if iszero(slt(add(offset, 0x1f), end))\n                        {\n                            revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                        }\n                        let length := calldataload(offset)\n                        array := abi_decode_available_length_bytes(add(offset, 0x20), length, end)\n                    }\n                    function cleanup_uint64(value) -> cleaned\n                    {\n                        cleaned := and(value, 0xffffffffffffffff)\n                    }\n                    function validator_revert_uint64(value)\n                    {\n                        if iszero(eq(value, cleanup_uint64(value))) { revert(0, 0) }\n                    }\n                    function abi_decode_uint64(offset, end) -> value\n                    {\n                        value := calldataload(offset)\n                        validator_revert_uint64(value)\n                    }\n                    function abi_decode_bytest_uint64t_bytes(headStart, dataEnd) -> value0, value1, value2\n                    {\n                        if slt(sub(dataEnd, headStart), 96)\n                        {\n                            revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                        }\n                        let offset := calldataload(add(headStart, 0))\n                        if gt(offset, 0xffffffffffffffff)\n                        {\n                            revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                        }\n                        value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n                        let offset_1 := 32\n                        value1 := abi_decode_uint64(add(headStart, offset_1), dataEnd)\n                        let offset_2 := calldataload(add(headStart, 64))\n                        if gt(offset_2, 0xffffffffffffffff)\n                        {\n                            revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                        }\n                        value2 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n                    }\n                    function convert_contract_SignatureVerifier_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function convert_uint64_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_uint64(value)))\n                    }\n                    function store_literal_in_memory_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"SignatureVerifier: Signature exp\")\n                        mstore(add(memPtr, 32), \"ired\")\n                    }\n                    function abi_encode_stringliteral_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 36)\n                        store_literal_in_memory_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a(pos)\n                        end := add(pos, 64)\n                    }\n                    function abi_encode_stringliteral_e5f9(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a(tail)\n                    }\n                    function require_helper_stringliteral_e5f9(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_e5f9(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @ast-id 1626 @src 2:1316:1893  \"function verify(...\"\n                    function fun_verify(var_request_offset, var_request_length, var_response_offset, var_response_length) -> var, var_mpos\n                    {\n                        /// @src 2:1426:1433  \"address\"\n                        let zero_t_address := zero_value_for_split_address()\n                        var := zero_t_address\n                        /// @src 2:1435:1447  \"bytes memory\"\n                        let zero_bytes_memory_ptr_mpos := zero_value_for_split_bytes()\n                        var_mpos := zero_bytes_memory_ptr_mpos\n                        /// @src 2:1541:1549  \"response\"\n                        let _160_offset := var_response_offset\n                        let _160_length := var_response_length\n                        let expr_offset := _160_offset\n                        let expr_1587_length := _160_length\n                        /// @src 2:1517:1595  \"abi.decode(...\"\n                        let expr_1595_component_1_mpos, expr_1595_component, expr_1595_component_3_mpos := abi_decode_bytest_uint64t_bytes(expr_offset, add(expr_offset, expr_1587_length))\n                        /// @src 2:1459:1595  \"(bytes memory result, uint64 expires, bytes memory sig) = abi.decode(...\"\n                        let var_result_1580_mpos := expr_1595_component_1_mpos\n                        let var_expires := expr_1595_component\n                        let var_sig_mpos := expr_1595_component_3_mpos\n                        /// @src 2:1675:1679  \"this\"\n                        let expr_1604_address := address()\n                        /// @src 2:1667:1680  \"address(this)\"\n                        let expr := convert_contract_SignatureVerifier_to_address(expr_1604_address)\n                        /// @src 2:1682:1689  \"expires\"\n                        let _1 := var_expires\n                        let expr_1 := _1\n                        /// @src 2:1691:1698  \"request\"\n                        let _162_offset := var_request_offset\n                        let _162_length := var_request_length\n                        let expr_1607_offset := _162_offset\n                        let expr_1607_length := _162_length\n                        /// @src 2:1700:1706  \"result\"\n                        let _mpos := var_result_1580_mpos\n                        let expr_1608_mpos := _mpos\n                        /// @src 2:1649:1707  \"makeSignatureHash(address(this), expires, request, result)\"\n                        let _164_mpos := convert_array_bytes_calldata_to_bytes(expr_1607_offset, expr_1607_length)\n                        let expr_2 := fun_makeSignatureHash(expr, expr_1, _164_mpos, expr_1608_mpos)\n                        /// @src 2:1721:1724  \"sig\"\n                        let _165_mpos := var_sig_mpos\n                        let expr_1610_mpos := _165_mpos\n                        /// @src 2:1622:1734  \"ECDSA.recover(...\"\n                        let expr_3 := fun_recover(expr_2, expr_1610_mpos)\n                        /// @src 2:1605:1734  \"address signer = ECDSA.recover(...\"\n                        let var_signer := expr_3\n                        /// @src 2:1765:1772  \"expires\"\n                        let _2 := var_expires\n                        let expr_4 := _2\n                        /// @src 2:1776:1791  \"block.timestamp\"\n                        let expr_5 := timestamp()\n                        /// @src 2:1765:1791  \"expires >= block.timestamp\"\n                        let expr_6 := iszero(lt(convert_uint64_to_uint256(expr_4), cleanup_uint256(expr_5)))\n                        /// @src 2:1744:1853  \"require(...\"\n                        require_helper_stringliteral_e5f9(expr_6)\n                        /// @src 2:1871:1877  \"signer\"\n                        let _3 := var_signer\n                        let expr_7 := _3\n                        /// @src 2:1870:1886  \"(signer, result)\"\n                        let expr_1623_component := expr_7\n                        /// @src 2:1879:1885  \"result\"\n                        let _168_mpos := var_result_1580_mpos\n                        let expr_1622_mpos := _168_mpos\n                        /// @src 2:1870:1886  \"(signer, result)\"\n                        let expr_component_mpos := expr_1622_mpos\n                        /// @src 2:1863:1886  \"return (signer, result)\"\n                        var := expr_1623_component\n                        var_mpos := expr_component_mpos\n                        leave\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function abi_encode_address_uint256_bytes32(headStart, value0, value1, value2) -> tail\n                    {\n                        tail := add(headStart, 96)\n                        abi_encode_address(value0, add(headStart, 0))\n                        abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                        abi_encode_bytes32_to_bytes32(value2, add(headStart, 64))\n                    }\n                    function array_dataslot_bytes(ptr) -> data\n                    {\n                        data := ptr\n                        data := add(ptr, 0x20)\n                    }\n                    /// @ast-id 1023 @src 1:10904:11092  \"function _claimDigest(uint256 purchaseId, bytes32 deliverableHash) internal view returns (bytes32) {...\"\n                    function fun__claimDigest(var_purchaseId, var_deliverableHash) -> var\n                    {\n                        /// @src 1:10994:11001  \"bytes32\"\n                        let zero_t_bytes32 := zero_value_for_split_bytes32()\n                        var := zero_t_bytes32\n                        /// @src 1:11049:11053  \"this\"\n                        let expr_1015_address := address()\n                        /// @src 1:11041:11054  \"address(this)\"\n                        let expr := convert_contract_ServiceEscrow_to_address(expr_1015_address)\n                        /// @src 1:11056:11066  \"purchaseId\"\n                        let _1 := var_purchaseId\n                        let expr_1 := _1\n                        /// @src 1:11068:11083  \"deliverableHash\"\n                        let _2 := var_deliverableHash\n                        let expr_2 := _2\n                        /// @src 1:11030:11084  \"abi.encode(address(this), purchaseId, deliverableHash)\"\n                        let expr_1019_mpos := allocate_unbounded()\n                        let _3 := add(expr_1019_mpos, 0x20)\n                        let _4 := abi_encode_address_uint256_bytes32(_3, expr, expr_1, expr_2)\n                        mstore(expr_1019_mpos, sub(_4, add(expr_1019_mpos, 0x20)))\n                        finalize_allocation(expr_1019_mpos, sub(_4, expr_1019_mpos))\n                        /// @src 1:11020:11085  \"keccak256(abi.encode(address(this), purchaseId, deliverableHash))\"\n                        let expr_3 := keccak256(array_dataslot_bytes(expr_1019_mpos), array_length_bytes(expr_1019_mpos))\n                        /// @src 1:11013:11085  \"return keccak256(abi.encode(address(this), purchaseId, deliverableHash))\"\n                        var := expr_3\n                        leave\n                    }\n                    /// @ast-id 103 @src 0:3702:3957  \"function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {...\"\n                    function fun_recover(var_hash, var_signature_78_mpos) -> var\n                    {\n                        /// @src 0:3780:3787  \"address\"\n                        let zero_address := zero_value_for_split_address()\n                        var := zero_address\n                        /// @src 0:3870:3874  \"hash\"\n                        let _1 := var_hash\n                        let expr := _1\n                        /// @src 0:3876:3885  \"signature\"\n                        let _176_mpos := var_signature_78_mpos\n                        let expr_mpos := _176_mpos\n                        /// @src 0:3859:3886  \"tryRecover(hash, signature)\"\n                        let expr_93_component, expr_93_component_1, expr_93_component_2 := fun_tryRecover(expr, expr_mpos)\n                        /// @src 0:3799:3886  \"(address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature)\"\n                        let var_recovered := expr_93_component\n                        let var_error := expr_93_component_1\n                        let var_errorArg := expr_93_component_2\n                        /// @src 0:3908:3913  \"error\"\n                        let _2 := var_error\n                        let expr_1 := _2\n                        /// @src 0:3915:3923  \"errorArg\"\n                        let _3 := var_errorArg\n                        let expr_2 := _3\n                        fun_throwError(expr_1, expr_2)\n                        /// @src 0:3941:3950  \"recovered\"\n                        let _4 := var_recovered\n                        let expr_3 := _4\n                        /// @src 0:3934:3950  \"return recovered\"\n                        var := expr_3\n                        leave\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function convert_address_payable_to_address(value) -> converted\n                    {\n                        converted := convert_uint160_to_address(value)\n                    }\n                    function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n                    { updated_pos := pos }\n                    function abi_encode_stringliteral_c5d2(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                        end := add(pos, 0)\n                    }\n                    function abi_encode_packed_stringliteral_c5d2(pos) -> end\n                    {\n                        pos := abi_encode_stringliteral_c5d2(pos)\n                        end := pos\n                    }\n                    function allocate_memory_array_bytes(length) -> memPtr\n                    {\n                        let allocSize := array_allocation_size_bytes(length)\n                        memPtr := allocate_memory(allocSize)\n                        mstore(memPtr, length)\n                    }\n                    function extract_returndata() -> data\n                    {\n                        switch returndatasize()\n                        case 0 {\n                            data := zero_value_for_split_bytes()\n                        }\n                        default {\n                            data := allocate_memory_array_bytes(returndatasize())\n                            returndatacopy(add(data, 0x20), 0, returndatasize())\n                        }\n                    }\n                    function store_literal_in_memory_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(memPtr)\n                    {\n                        mstore(add(memPtr, 0), \"Escrow: ETH transfer failed\")\n                    }\n                    function abi_encode_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_fromStack(pos, 27)\n                        store_literal_in_memory_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(pos)\n                        end := add(pos, 32)\n                    }\n                    function abi_encode_stringliteral_c822(headStart) -> tail\n                    {\n                        tail := add(headStart, 32)\n                        mstore(add(headStart, 0), sub(tail, headStart))\n                        tail := abi_encode_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(tail)\n                    }\n                    function require_helper_stringliteral_c822(condition)\n                    {\n                        if iszero(condition)\n                        {\n                            let memPtr := allocate_unbounded()\n                            mstore(memPtr, shl(229, 4594637))\n                            let end := abi_encode_stringliteral_c822(add(memPtr, 4))\n                            revert(memPtr, sub(end, memPtr))\n                        }\n                    }\n                    /// @ast-id 1046 @src 1:11181:11362  \"function _sendETH(address payable to, uint256 amount) private {...\"\n                    function fun_sendETH(var_to, var_amount)\n                    {\n                        /// @src 1:11272:11274  \"to\"\n                        let _1 := var_to\n                        let expr := _1\n                        /// @src 1:11272:11279  \"to.call\"\n                        let expr_1034_address := convert_address_payable_to_address(expr)\n                        /// @src 1:11287:11293  \"amount\"\n                        let _2 := var_amount\n                        let expr_1 := _2\n                        /// @src 1:11272:11294  \"to.call{value: amount}\"\n                        let expr_address := expr_1034_address\n                        let expr_value := expr_1\n                        /// @src 1:11272:11298  \"to.call{value: amount}(\\\"\\\")\"\n                        let _3 := allocate_unbounded()\n                        let _4 := sub(abi_encode_packed_stringliteral_c5d2(_3), _3)\n                        let expr_1038_component := call(gas(), expr_address, expr_value, _3, _4, 0, 0)\n                        pop(extract_returndata())\n                        /// @src 1:11253:11298  \"(bool success, ) = to.call{value: amount}(\\\"\\\")\"\n                        let var_success := expr_1038_component\n                        /// @src 1:11316:11323  \"success\"\n                        let _5 := var_success\n                        let expr_2 := _5\n                        /// @src 1:11308:11355  \"require(success, \\\"Escrow: ETH transfer failed\\\")\"\n                        require_helper_stringliteral_c822(expr_2)\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function array_storeLengthForEncoding_string_nonPadded_inplace(pos, length) -> updated_pos\n                    { updated_pos := pos }\n                    function store_literal_in_memory_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a(memPtr)\n                    {\n                        mstore(add(memPtr, 0), shl(248, 25))\n                    }\n                    function abi_encode_stringliteral_73fd(pos) -> end\n                    {\n                        pos := array_storeLengthForEncoding_string_nonPadded_inplace(pos, 2)\n                        store_literal_in_memory_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a(pos)\n                        end := add(pos, 2)\n                    }\n                    function shift_left_96(value) -> newValue\n                    { newValue := shl(96, value) }\n                    function leftAlign_uint160(value) -> aligned\n                    {\n                        aligned := shift_left_96(value)\n                    }\n                    function leftAlign_address(value) -> aligned\n                    {\n                        aligned := leftAlign_uint160(value)\n                    }\n                    function abi_encode_address_to_address_nonPadded_inplace(value, pos)\n                    {\n                        mstore(pos, leftAlign_address(cleanup_address(value)))\n                    }\n                    function shift_left_192(value) -> newValue\n                    { newValue := shl(192, value) }\n                    function leftAlign_uint64(value) -> aligned\n                    {\n                        aligned := shift_left_192(value)\n                    }\n                    function abi_encode_uint64(value, pos)\n                    {\n                        mstore(pos, leftAlign_uint64(cleanup_uint64(value)))\n                    }\n                    function leftAlign_bytes32(value) -> aligned\n                    { aligned := value }\n                    function abi_encode_bytes32(value, pos)\n                    {\n                        mstore(pos, leftAlign_bytes32(cleanup_bytes32(value)))\n                    }\n                    function abi_encode_packed_stringliteral_73fd_address_uint64_bytes32_bytes32(pos, value0, value1, value2, value3) -> end\n                    {\n                        pos := abi_encode_stringliteral_73fd(pos)\n                        abi_encode_address_to_address_nonPadded_inplace(value0, pos)\n                        pos := add(pos, 20)\n                        abi_encode_uint64(value1, pos)\n                        pos := add(pos, 8)\n                        abi_encode_bytes32(value2, pos)\n                        pos := add(pos, 32)\n                        abi_encode_bytes32(value3, pos)\n                        pos := add(pos, 32)\n                        end := pos\n                    }\n                    /// @ast-id 1567 @src 2:388:838  \"function makeSignatureHash(...\"\n                    function fun_makeSignatureHash(var_target, var_expires, var_request_mpos, var_result_mpos) -> var_\n                    {\n                        /// @src 2:551:558  \"bytes32\"\n                        let zero_bytes32 := zero_value_for_split_bytes32()\n                        var_ := zero_bytes32\n                        /// @src 2:685:691  \"target\"\n                        let _1 := var_target\n                        let expr := _1\n                        /// @src 2:713:720  \"expires\"\n                        let _2 := var_expires\n                        let expr_1 := _2\n                        /// @src 2:752:759  \"request\"\n                        let _188_mpos := var_request_mpos\n                        let expr_1558_mpos := _188_mpos\n                        /// @src 2:742:760  \"keccak256(request)\"\n                        let expr_2 := keccak256(array_dataslot_bytes(expr_1558_mpos), array_length_bytes(expr_1558_mpos))\n                        /// @src 2:792:798  \"result\"\n                        let _189_mpos := var_result_mpos\n                        let expr_1561_mpos := _189_mpos\n                        /// @src 2:782:799  \"keccak256(result)\"\n                        let expr_3 := keccak256(array_dataslot_bytes(expr_1561_mpos), array_length_bytes(expr_1561_mpos))\n                        /// @src 2:616:817  \"abi.encodePacked(...\"\n                        let expr_1563_mpos := allocate_unbounded()\n                        let _3 := add(expr_1563_mpos, 0x20)\n                        let _4 := abi_encode_packed_stringliteral_73fd_address_uint64_bytes32_bytes32(_3, expr, expr_1, expr_2, expr_3)\n                        mstore(expr_1563_mpos, sub(_4, add(expr_1563_mpos, 0x20)))\n                        finalize_allocation(expr_1563_mpos, sub(_4, expr_1563_mpos))\n                        /// @src 2:589:831  \"keccak256(...\"\n                        let expr_4 := keccak256(array_dataslot_bytes(expr_1563_mpos), array_length_bytes(expr_1563_mpos))\n                        /// @src 2:570:831  \"return...\"\n                        var_ := expr_4\n                        leave\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function zero_value_for_split_enum_RecoverError() -> ret\n                    { ret := 0 }\n                    function cleanup_rational_by(value) -> cleaned\n                    { cleaned := value }\n                    function convert_rational_by_to_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n                    }\n                    function convert_uint256_to_bytes32(value) -> converted\n                    {\n                        converted := cleanup_bytes32(shift_left_0(cleanup_uint256(value)))\n                    }\n                    function zero_value_for_split_uint8() -> ret\n                    { ret := 0 }\n                    /// @ast-id 73 @src 0:2129:2895  \"function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {...\"\n                    function fun_tryRecover(var_hash, var_signature_mpos) -> var, var_1, var_2\n                    {\n                        /// @src 0:2210:2217  \"address\"\n                        let zero_address := zero_value_for_split_address()\n                        var := zero_address\n                        /// @src 0:2219:2231  \"RecoverError\"\n                        let zero_enum_RecoverError := zero_value_for_split_enum_RecoverError()\n                        var_1 := zero_enum_RecoverError\n                        /// @src 0:2233:2240  \"bytes32\"\n                        let zero_bytes32 := zero_value_for_split_bytes32()\n                        var_2 := zero_bytes32\n                        /// @src 0:2256:2265  \"signature\"\n                        let _195_mpos := var_signature_mpos\n                        let expr_35_mpos := _195_mpos\n                        /// @src 0:2256:2272  \"signature.length\"\n                        let expr := array_length_bytes(expr_35_mpos)\n                        /// @src 0:2276:2278  \"65\"\n                        let expr_1 := 0x41\n                        /// @src 0:2256:2278  \"signature.length == 65\"\n                        let expr_2 := eq(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                        /// @src 0:2252:2889  \"if (signature.length == 65) {...\"\n                        switch expr_2\n                        case 0 {\n                            /// @src 0:2811:2812  \"0\"\n                            let expr_3 := 0x00\n                            /// @src 0:2803:2813  \"address(0)\"\n                            let expr_4 := convert_rational_by_to_address(expr_3)\n                            /// @src 0:2802:2878  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                            let expr_component := expr_4\n                            /// @src 0:2815:2850  \"RecoverError.InvalidSignatureLength\"\n                            let expr_5 := 2\n                            /// @src 0:2802:2878  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                            let expr_component_1 := expr_5\n                            /// @src 0:2860:2869  \"signature\"\n                            let _196_mpos := var_signature_mpos\n                            let expr_65_mpos := _196_mpos\n                            /// @src 0:2860:2876  \"signature.length\"\n                            let expr_6 := array_length_bytes(expr_65_mpos)\n                            /// @src 0:2852:2877  \"bytes32(signature.length)\"\n                            let expr_7 := convert_uint256_to_bytes32(expr_6)\n                            /// @src 0:2802:2878  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                            let expr_component_2 := expr_7\n                            /// @src 0:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                            var := expr_component\n                            var_1 := expr_component_1\n                            var_2 := expr_component_2\n                            leave\n                        }\n                        default /// @src 0:2252:2889  \"if (signature.length == 65) {...\"\n                        {\n                            /// @src 0:2294:2303  \"bytes32 r\"\n                            let var_r\n                            let zero_bytes32_1 := zero_value_for_split_bytes32()\n                            var_r := zero_bytes32_1\n                            /// @src 0:2317:2326  \"bytes32 s\"\n                            let var_s\n                            let zero_bytes32_2 := zero_value_for_split_bytes32()\n                            var_s := zero_bytes32_2\n                            /// @src 0:2340:2347  \"uint8 v\"\n                            let var_v\n                            let zero_uint8 := zero_value_for_split_uint8()\n                            var_v := zero_uint8\n                            /// @src 0:2539:2719  \"assembly {...\"\n                            var_r := mload(add(var_signature_mpos, 0x20))\n                            var_s := mload(add(var_signature_mpos, 0x40))\n                            var_v := byte(0, mload(add(var_signature_mpos, 0x60)))\n                            /// @src 0:2750:2754  \"hash\"\n                            let _1 := var_hash\n                            let expr_8 := _1\n                            /// @src 0:2756:2757  \"v\"\n                            let _2 := var_v\n                            let expr_9 := _2\n                            /// @src 0:2759:2760  \"r\"\n                            let _3 := var_r\n                            let expr_10 := _3\n                            /// @src 0:2762:2763  \"s\"\n                            let _4 := var_s\n                            let expr_11 := _4\n                            /// @src 0:2739:2764  \"tryRecover(hash, v, r, s)\"\n                            let expr_54_component, expr_54_component_1, expr_54_component_2 := fun_tryRecover_261(expr_8, expr_9, expr_10, expr_11)\n                            /// @src 0:2732:2764  \"return tryRecover(hash, v, r, s)\"\n                            var := expr_54_component\n                            var_1 := expr_54_component_1\n                            var_2 := expr_54_component_2\n                            leave\n                        }\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function panic_error_0x21()\n                    {\n                        mstore(0, shl(224, 0x4e487b71))\n                        mstore(4, 0x21)\n                        revert(0, 0x24)\n                    }\n                    function validator_assert_enum_RecoverError(value)\n                    {\n                        if iszero(lt(value, 4)) { panic_error_0x21() }\n                    }\n                    function cleanup_enum_RecoverError(value) -> cleaned\n                    {\n                        cleaned := value\n                        validator_assert_enum_RecoverError(value)\n                    }\n                    function convert_bytes32_to_uint256(value) -> converted\n                    {\n                        converted := convert_uint256_to_uint256(shift_right_0_unsigned(value))\n                    }\n                    /// @ast-id 346 @src 0:7196:7728  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n                    function fun_throwError(var_error, var_errorArg)\n                    {\n                        /// @src 0:7282:7287  \"error\"\n                        let _1 := var_error\n                        let expr := _1\n                        /// @src 0:7291:7311  \"RecoverError.NoError\"\n                        let expr_1 := 0\n                        /// @src 0:7282:7311  \"error == RecoverError.NoError\"\n                        let expr_2 := eq(cleanup_enum_RecoverError(expr), cleanup_enum_RecoverError(expr_1))\n                        /// @src 0:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                        switch expr_2\n                        case 0 {\n                            /// @src 0:7378:7383  \"error\"\n                            let _2 := var_error\n                            let expr_3 := _2\n                            /// @src 0:7387:7416  \"RecoverError.InvalidSignature\"\n                            let expr_4 := 1\n                            /// @src 0:7378:7416  \"error == RecoverError.InvalidSignature\"\n                            let expr_5 := eq(cleanup_enum_RecoverError(expr_3), cleanup_enum_RecoverError(expr_4))\n                            /// @src 0:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                            switch expr_5\n                            case 0 {\n                                /// @src 0:7483:7488  \"error\"\n                                let _3 := var_error\n                                let expr_6 := _3\n                                /// @src 0:7492:7527  \"RecoverError.InvalidSignatureLength\"\n                                let expr_7 := 2\n                                /// @src 0:7483:7527  \"error == RecoverError.InvalidSignatureLength\"\n                                let expr_8 := eq(cleanup_enum_RecoverError(expr_6), cleanup_enum_RecoverError(expr_7))\n                                /// @src 0:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                                switch expr_8\n                                case 0 {\n                                    /// @src 0:7617:7622  \"error\"\n                                    let _4 := var_error\n                                    let expr_9 := _4\n                                    /// @src 0:7626:7656  \"RecoverError.InvalidSignatureS\"\n                                    let expr_10 := 3\n                                    /// @src 0:7617:7656  \"error == RecoverError.InvalidSignatureS\"\n                                    let expr_11 := eq(cleanup_enum_RecoverError(expr_9), cleanup_enum_RecoverError(expr_10))\n                                    /// @src 0:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                                    if expr_11\n                                    {\n                                        /// @src 0:7702:7710  \"errorArg\"\n                                        let _5 := var_errorArg\n                                        let expr_12 := _5\n                                        /// @src 0:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                        let _6 := 0\n                                        mstore(_6, shl(226, 0x35e2f383))\n                                        let _7 := abi_encode_tuple_bytes32(add(_6, 4), expr_12)\n                                        revert(_6, sub(_7, _6))\n                                    }\n                                }\n                                default /// @src 0:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                                {\n                                    /// @src 0:7586:7594  \"errorArg\"\n                                    let _8 := var_errorArg\n                                    let expr_13 := _8\n                                    /// @src 0:7578:7595  \"uint256(errorArg)\"\n                                    let expr_14 := convert_bytes32_to_uint256(expr_13)\n                                    /// @src 0:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                                    let _9 := 0\n                                    mstore(_9, shl(224, 0xfce698f7))\n                                    let _10 := abi_encode_uint256(add(_9, 4), expr_14)\n                                    revert(_9, sub(_10, _9))\n                                }\n                            }\n                            default /// @src 0:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                            {\n                                /// @src 0:7439:7462  \"ECDSAInvalidSignature()\"\n                                let _11 := 0\n                                mstore(_11, shl(224, 0xf645eedf))\n                                let _12 := abi_encode_tuple(add(_11, 4))\n                                revert(_11, sub(_12, _11))\n                            }\n                        }\n                        default /// @src 0:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                        {\n                            /// @src 0:7327:7334  \"return;\"\n                            leave\n                        }\n                    }\n                    /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                    function cleanup_rational_by_1(value) -> cleaned\n                    { cleaned := value }\n                    function convert_t_rational_by_to_t_uint256(value) -> converted\n                    {\n                        converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n                    }\n                    function cleanup_uint8(value) -> cleaned\n                    { cleaned := and(value, 0xff) }\n                    function abi_encode_uint8(value, pos)\n                    {\n                        mstore(pos, cleanup_uint8(value))\n                    }\n                    function abi_encode_bytes32_uint8_bytes32_bytes32(headStart, value0, value1, value2, value3) -> tail\n                    {\n                        tail := add(headStart, 128)\n                        abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n                        abi_encode_uint8(value1, add(headStart, 32))\n                        abi_encode_bytes32_to_bytes32(value2, add(headStart, 64))\n                        abi_encode_bytes32_to_bytes32(value3, add(headStart, 96))\n                    }\n                    function revert_forward()\n                    {\n                        let pos := allocate_unbounded()\n                        returndatacopy(pos, 0, returndatasize())\n                        revert(pos, returndatasize())\n                    }\n                    function convert_rational_by_to_bytes32(value) -> converted\n                    {\n                        converted := cleanup_bytes32(shift_left_0(cleanup_t_rational_by_1(value)))\n                    }\n                    /// @ast-id 261 @src 0:5140:6670  \"function tryRecover(...\"\n                    function fun_tryRecover_261(var_hash, var_v, var_r, var_s) -> var, var_1, var_2\n                    {\n                        /// @src 0:5266:5273  \"address\"\n                        let zero_address := zero_value_for_split_address()\n                        var := zero_address\n                        /// @src 0:5275:5287  \"RecoverError\"\n                        let zero_t_enum_RecoverError := zero_value_for_split_enum_RecoverError()\n                        var_1 := zero_t_enum_RecoverError\n                        /// @src 0:5289:5296  \"bytes32\"\n                        let zero_bytes32 := zero_value_for_split_bytes32()\n                        var_2 := zero_bytes32\n                        /// @src 0:6194:6195  \"s\"\n                        let _1 := var_s\n                        let expr := _1\n                        /// @src 0:6186:6196  \"uint256(s)\"\n                        let expr_1 := convert_bytes32_to_uint256(expr)\n                        /// @src 0:6199:6265  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\"\n                        let expr_2 := 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n                        /// @src 0:6186:6265  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\"\n                        let expr_3 := gt(cleanup_uint256(expr_1), convert_t_rational_by_to_t_uint256(expr_2))\n                        /// @src 0:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                        if expr_3\n                        {\n                            /// @src 0:6297:6298  \"0\"\n                            let expr_4 := 0x00\n                            /// @src 0:6289:6299  \"address(0)\"\n                            let expr_5 := convert_rational_by_to_address(expr_4)\n                            /// @src 0:6288:6335  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                            let expr_component := expr_5\n                            /// @src 0:6301:6331  \"RecoverError.InvalidSignatureS\"\n                            let expr_6 := 3\n                            /// @src 0:6288:6335  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                            let expr_218_component := expr_6\n                            /// @src 0:6333:6334  \"s\"\n                            let _2 := var_s\n                            let expr_7 := _2\n                            /// @src 0:6288:6335  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                            let expr_218_component_1 := expr_7\n                            /// @src 0:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                            var := expr_component\n                            var_1 := expr_218_component\n                            var_2 := expr_218_component_1\n                            leave\n                        }\n                        /// @src 0:6467:6471  \"hash\"\n                        let _3 := var_hash\n                        let expr_8 := _3\n                        /// @src 0:6473:6474  \"v\"\n                        let _4 := var_v\n                        let expr_9 := _4\n                        /// @src 0:6476:6477  \"r\"\n                        let _5 := var_r\n                        let expr_10 := _5\n                        /// @src 0:6479:6480  \"s\"\n                        let _6 := var_s\n                        let expr_11 := _6\n                        /// @src 0:6457:6481  \"ecrecover(hash, v, r, s)\"\n                        let _7 := allocate_unbounded()\n                        let _8 := abi_encode_bytes32_uint8_bytes32_bytes32(_7, expr_8, expr_9, expr_10, expr_11)\n                        mstore(0, 0)\n                        let _9 := staticcall(gas(), 1, _7, sub(_8, _7), 0, 32)\n                        if iszero(_9) { revert_forward() }\n                        let expr_12 := shift_left_0(mload(0))\n                        /// @src 0:6440:6481  \"address signer = ecrecover(hash, v, r, s)\"\n                        let var_signer := expr_12\n                        /// @src 0:6495:6501  \"signer\"\n                        let _10 := var_signer\n                        let expr_13 := _10\n                        /// @src 0:6513:6514  \"0\"\n                        let expr_14 := 0x00\n                        /// @src 0:6505:6515  \"address(0)\"\n                        let expr_15 := convert_rational_by_to_address(expr_14)\n                        /// @src 0:6495:6515  \"signer == address(0)\"\n                        let expr_16 := eq(cleanup_address(expr_13), cleanup_address(expr_15))\n                        /// @src 0:6491:6604  \"if (signer == address(0)) {...\"\n                        if expr_16\n                        {\n                            /// @src 0:6547:6548  \"0\"\n                            let expr_17 := 0x00\n                            /// @src 0:6539:6549  \"address(0)\"\n                            let expr_18 := convert_rational_by_to_address(expr_17)\n                            /// @src 0:6538:6593  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                            let expr_247_component := expr_18\n                            /// @src 0:6551:6580  \"RecoverError.InvalidSignature\"\n                            let expr_19 := 1\n                            /// @src 0:6538:6593  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                            let expr_247_component_1 := expr_19\n                            /// @src 0:6590:6591  \"0\"\n                            let expr_20 := 0x00\n                            /// @src 0:6582:6592  \"bytes32(0)\"\n                            let expr_21 := convert_rational_by_to_bytes32(expr_20)\n                            /// @src 0:6538:6593  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                            let expr_247_component_2 := expr_21\n                            /// @src 0:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                            var := expr_247_component\n                            var_1 := expr_247_component_1\n                            var_2 := expr_247_component_2\n                            leave\n                        }\n                        /// @src 0:6622:6628  \"signer\"\n                        let _11 := var_signer\n                        let expr_22 := _11\n                        /// @src 0:6621:6663  \"(signer, RecoverError.NoError, bytes32(0))\"\n                        let expr_258_component := expr_22\n                        /// @src 0:6630:6650  \"RecoverError.NoError\"\n                        let expr_23 := 0\n                        /// @src 0:6621:6663  \"(signer, RecoverError.NoError, bytes32(0))\"\n                        let expr_258_component_1 := expr_23\n                        /// @src 0:6660:6661  \"0\"\n                        let expr_24 := 0x00\n                        /// @src 0:6652:6662  \"bytes32(0)\"\n                        let expr_25 := convert_rational_by_to_bytes32(expr_24)\n                        /// @src 0:6621:6663  \"(signer, RecoverError.NoError, bytes32(0))\"\n                        let expr_258_component_2 := expr_25\n                        /// @src 0:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                        var := expr_258_component\n                        var_1 := expr_258_component_1\n                        var_2 := expr_258_component_2\n                        leave\n                    }\n                }\n                data \".metadata\" hex\"a2646970667358221220c4317320fd0c5cb30c5e46fca5aabf974a6e34d2237b5c9aa11a67ce66c3134064736f6c634300081c0033\"\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220cc6241299bdd1c27cd7f1e8791f931f2d6773fe28b5788765f0559d9fe5b5dc564736f6c634300081c0033\"\n    }\n}\n",
					"hash": "2a1e02d4cb8bf54c1d7364c7b927de41188d3df0e5e07675d21c32ae088b2c81",
					"factoryDependencies": {
						"f9e96d0a8f1b951989586b46be771709505f61e51ea89525fb413a47f8410a35": "EscroDot.sol:ServiceEscrow"
					}
				},
				"ServiceEscrow": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "_serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "address",
									"name": "_provider",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_price",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "_gateway",
									"type": "string"
								},
								{
									"internalType": "address",
									"name": "_gatewaySigner",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "_description",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "string[]",
									"name": "urls",
									"type": "string[]"
								},
								{
									"internalType": "bytes",
									"name": "callData",
									"type": "bytes"
								},
								{
									"internalType": "bytes4",
									"name": "callbackFunction",
									"type": "bytes4"
								},
								{
									"internalType": "bytes",
									"name": "extraData",
									"type": "bytes"
								}
							],
							"name": "OffchainLookup",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "DisputeRaised",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "deliverableHash",
									"type": "bytes32"
								}
							],
							"name": "OffchainDelivery",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "PaymentClaimed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "ServicePurchased",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "buyService",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes",
									"name": "response",
									"type": "bytes"
								},
								{
									"internalType": "bytes",
									"name": "extraData",
									"type": "bytes"
								}
							],
							"name": "ccipCallback",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "userInput",
									"type": "bytes"
								}
							],
							"name": "checkDelivery",
							"outputs": [],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "deliverableHash",
									"type": "bytes32"
								}
							],
							"name": "claimDigest",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "deliverableHash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "buyerSignature",
									"type": "bytes"
								}
							],
							"name": "claimPayment",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "description",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "factory",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "factoryRefundBuyer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "factoryReleaseToProvider",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gateway",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "gatewaySigner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nextPurchaseId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "price",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "provider",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "purchases",
							"outputs": [
								{
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "claimed",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "disputed",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "resolved",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "raiseDispute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "serviceId",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "newDescription",
									"type": "string"
								}
							],
							"name": "updateDescription",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "newGateway",
									"type": "string"
								}
							],
							"name": "updateGateway",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newSigner",
									"type": "address"
								}
							],
							"name": "updateGatewaySigner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_gateway\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gatewaySigner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"urls\",\"type\":\"string[]\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"callbackFunction\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"OffchainLookup\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"DisputeRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"OffchainDelivery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"PaymentClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ServicePurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"buyService\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"name\":\"ccipCallback\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"userInput\",\"type\":\"bytes\"}],\"name\":\"checkDelivery\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"claimDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"buyerSignature\",\"type\":\"bytes\"}],\"name\":\"claimPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"factoryRefundBuyer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"factoryReleaseToProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gatewaySigner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPurchaseId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"provider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"raiseDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"serviceId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newDescription\",\"type\":\"string\"}],\"name\":\"updateDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newGateway\",\"type\":\"string\"}],\"name\":\"updateGateway\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"updateGatewaySigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Mike Liu (mikelxc) /**\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"OffchainLookup(address,string[],bytes,bytes4,bytes)\":[{\"details\":\"See EIP\\u20113668 for parameter semantics.\"}]},\"kind\":\"dev\",\"methods\":{\"buyService()\":{\"returns\":{\"purchaseId\":\" A unique identifier for this purchase.\"}},\"ccipCallback(bytes,bytes)\":{\"details\":\"No state change other than the event emission so the provider can later claim.\"},\"checkDelivery(uint256,bytes)\":{\"params\":{\"purchaseId\":\"Identifier of the purchase to query.\",\"userInput\":\"Arbitrary payload forwarded to the gateway (e.g., API key, prompt). The caller MUST handle the OffchainLookup error, perform the HTTPS request(s) to the provided `gateway`, then call `ccipCallback` with the ABI\\u2011encoded response.\"}},\"claimDigest(uint256,bytes32)\":{\"details\":\"Compute the digest that a buyer must sign to authorise payment.\"},\"claimPayment(uint256,bytes32,bytes)\":{\"params\":{\"buyerSignature\":\"ECDSA signature of the buyer over the claim digest.\",\"deliverableHash\":\"Hash returned by the CCIP gateway (buyer has inspected).\",\"purchaseId\":\"Identifier of the purchase to claim.\"}},\"constructor\":{\"params\":{\"_description\":\"Short text or IPFS CID describing the service.\",\"_factory\":\"Address of the EscroDotFactory contract.\",\"_gateway\":\"HTTPS/IPFS URL implementing the CCIP\\u2011Read spec.\",\"_gatewaySigner\":\"Address of the CCIP\\u2011Read gateway signer.\",\"_price\":\"Fixed price per purchase (wei).\",\"_provider\":\"Owner of the service.\",\"_serviceId\":\"keccak256 hash of the chosen service name.\"}},\"factoryRefundBuyer(uint256)\":{\"details\":\"Refunds the buyer \\u2013 callable only by the factory after successful arbitration.\"},\"factoryReleaseToProvider(uint256)\":{\"details\":\"Releases funds to the provider \\u2013 callable only by the factory.\"}},\"stateVariables\":{\"nextPurchaseId\":{\"details\":\"Incremental identifier for purchases.\"}},\"title\":\"EscroDot \\u2013\\u00a0minimal escrow & staking framework for AI\\u2011agent servicesEscroDot \\u2013 AI\\u2011Agent Escrow (v0.4 \\u2013 CCIP\\u2011Read + Buyer\\u2011Signed Claim + Open Arbiter) \\u2022 Off\\u2011chain delivery (ERC\\u20113668): `checkDelivery()` triggers CCIP\\u2011Read. Gateway returns the   AI result. The buyer inspects the output off\\u2011chain and, if satisfied, signs a message that   lets the provider claim funds. \\u2022 Buyer\\u2011signed claim: `claimPayment()` is called by the provider, supplying the buyer's   signature. Contract verifies and releases payment. \\u2022 Open Dispute Resolution: Any address can become an arbiter \\u2013 it just needs to deposit a   stake \\u2265 purchase value when calling `resolveDispute()`. (For brevity we return the stake in   the same tx; extend with lock\\u2011and\\u2011slash logic in later versions.)\",\"version\":1},\"userdoc\":{\"events\":{\"DisputeRaised(uint256)\":{\"notice\":\"Buyer flagged the purchase for dispute.\"},\"OffchainDelivery(uint256,bytes32)\":{\"notice\":\"Off\\u2011chain gateway supplied a deliverable hash for a purchase.\"},\"PaymentClaimed(uint256)\":{\"notice\":\"Provider claimed the locked payment (buyer signature verified).\"},\"ServicePurchased(uint256,address,uint256)\":{\"notice\":\"Buyer successfully paid for the service.\"}},\"kind\":\"user\",\"methods\":{\"buyService()\":{\"notice\":\"Purchase the service by locking `price` ETH in this contract.\"},\"ccipCallback(bytes,bytes)\":{\"notice\":\"CCIP\\u2011Read callback that simply logs the deliverable hash off\\u2011chain.\"},\"checkDelivery(uint256,bytes)\":{\"notice\":\"Trigger an ERC\\u20113668 OffchainLookup so that a gateway can return the deliverable.\"},\"claimPayment(uint256,bytes32,bytes)\":{\"notice\":\"Provider claims funds by presenting a buyer\\u2011signed message.\"},\"description()\":{\"notice\":\"Human\\u2011readable description or IPFS CID (mutable by provider).\"},\"factory()\":{\"notice\":\"Address of the factory that deployed this contract.\"},\"gateway()\":{\"notice\":\"CCIP\\u2011Read gateway URL (mutable by provider).\"},\"gatewaySigner()\":{\"notice\":\"CCIP\\u2011Read gateway signer address (mutable by provider).\"},\"price()\":{\"notice\":\"Fixed price (in wei) per purchase.\"},\"provider()\":{\"notice\":\"Wallet address that owns the service and receives payments.\"},\"serviceId()\":{\"notice\":\"Deterministic service identifier = keccak256(serviceName).\"},\"updateDescription(string)\":{\"notice\":\"Update the human\\u2011readable description.\"},\"updateGateway(string)\":{\"notice\":\"Update the CCIP gateway URL.\"},\"updateGatewaySigner(address)\":{\"notice\":\"Update the CCIP gateway signer address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"EscroDot.sol\":\"ServiceEscrow\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"EscroDot.sol\":{\"keccak256\":\"0x0da4595324bb2cfbe77aa9158c4a3583f5995d28b5a14a164faca98fa08db07f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3a058c9ce1f2048f06828ac2089712453a7ac9dd7a9546bfc31d87594ca86487\",\"dweb:/ipfs/QmWT2psySkPwmPxYneg9AvEsqGar5tpmg1U2cJ9T1Hhzyy\"]},\"SignatureVerifier.sol\":{\"keccak256\":\"0xc1d30621557da515270569c4b5ee5abed3c1266b4ea44ad0ce6bd2f7eff30f29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30d2453fb9dc02e392a8243a577d39357d4f253661c6f02f845b9051bea4037a\",\"dweb:/ipfs/QmXb4TDEWAXwTHi3awHes3XEWEXMwTwbHHY5rh3rephNuh\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"author": "Mike Liu (mikelxc) /**",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"OffchainLookup(address,string[],bytes,bytes4,bytes)": [
								{
									"details": "See EIP‑3668 for parameter semantics."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"buyService()": {
								"returns": {
									"purchaseId": " A unique identifier for this purchase."
								}
							},
							"ccipCallback(bytes,bytes)": {
								"details": "No state change other than the event emission so the provider can later claim."
							},
							"checkDelivery(uint256,bytes)": {
								"params": {
									"purchaseId": "Identifier of the purchase to query.",
									"userInput": "Arbitrary payload forwarded to the gateway (e.g., API key, prompt). The caller MUST handle the OffchainLookup error, perform the HTTPS request(s) to the provided `gateway`, then call `ccipCallback` with the ABI‑encoded response."
								}
							},
							"claimDigest(uint256,bytes32)": {
								"details": "Compute the digest that a buyer must sign to authorise payment."
							},
							"claimPayment(uint256,bytes32,bytes)": {
								"params": {
									"buyerSignature": "ECDSA signature of the buyer over the claim digest.",
									"deliverableHash": "Hash returned by the CCIP gateway (buyer has inspected).",
									"purchaseId": "Identifier of the purchase to claim."
								}
							},
							"constructor": {
								"params": {
									"_description": "Short text or IPFS CID describing the service.",
									"_factory": "Address of the EscroDotFactory contract.",
									"_gateway": "HTTPS/IPFS URL implementing the CCIP‑Read spec.",
									"_gatewaySigner": "Address of the CCIP‑Read gateway signer.",
									"_price": "Fixed price per purchase (wei).",
									"_provider": "Owner of the service.",
									"_serviceId": "keccak256 hash of the chosen service name."
								}
							},
							"factoryRefundBuyer(uint256)": {
								"details": "Refunds the buyer – callable only by the factory after successful arbitration."
							},
							"factoryReleaseToProvider(uint256)": {
								"details": "Releases funds to the provider – callable only by the factory."
							}
						},
						"stateVariables": {
							"nextPurchaseId": {
								"details": "Incremental identifier for purchases."
							}
						},
						"title": "EscroDot – minimal escrow & staking framework for AI‑agent servicesEscroDot – AI‑Agent Escrow (v0.4 – CCIP‑Read + Buyer‑Signed Claim + Open Arbiter) • Off‑chain delivery (ERC‑3668): `checkDelivery()` triggers CCIP‑Read. Gateway returns the   AI result. The buyer inspects the output off‑chain and, if satisfied, signs a message that   lets the provider claim funds. • Buyer‑signed claim: `claimPayment()` is called by the provider, supplying the buyer's   signature. Contract verifies and releases payment. • Open Dispute Resolution: Any address can become an arbiter – it just needs to deposit a   stake ≥ purchase value when calling `resolveDispute()`. (For brevity we return the stake in   the same tx; extend with lock‑and‑slash logic in later versions.)",
						"version": 1
					},
					"userdoc": {
						"events": {
							"DisputeRaised(uint256)": {
								"notice": "Buyer flagged the purchase for dispute."
							},
							"OffchainDelivery(uint256,bytes32)": {
								"notice": "Off‑chain gateway supplied a deliverable hash for a purchase."
							},
							"PaymentClaimed(uint256)": {
								"notice": "Provider claimed the locked payment (buyer signature verified)."
							},
							"ServicePurchased(uint256,address,uint256)": {
								"notice": "Buyer successfully paid for the service."
							}
						},
						"kind": "user",
						"methods": {
							"buyService()": {
								"notice": "Purchase the service by locking `price` ETH in this contract."
							},
							"ccipCallback(bytes,bytes)": {
								"notice": "CCIP‑Read callback that simply logs the deliverable hash off‑chain."
							},
							"checkDelivery(uint256,bytes)": {
								"notice": "Trigger an ERC‑3668 OffchainLookup so that a gateway can return the deliverable."
							},
							"claimPayment(uint256,bytes32,bytes)": {
								"notice": "Provider claims funds by presenting a buyer‑signed message."
							},
							"description()": {
								"notice": "Human‑readable description or IPFS CID (mutable by provider)."
							},
							"factory()": {
								"notice": "Address of the factory that deployed this contract."
							},
							"gateway()": {
								"notice": "CCIP‑Read gateway URL (mutable by provider)."
							},
							"gatewaySigner()": {
								"notice": "CCIP‑Read gateway signer address (mutable by provider)."
							},
							"price()": {
								"notice": "Fixed price (in wei) per purchase."
							},
							"provider()": {
								"notice": "Wallet address that owns the service and receives payments."
							},
							"serviceId()": {
								"notice": "Deterministic service identifier = keccak256(serviceName)."
							},
							"updateDescription(string)": {
								"notice": "Update the human‑readable description."
							},
							"updateGateway(string)": {
								"notice": "Update the CCIP gateway URL."
							},
							"updateGatewaySigner(address)": {
								"notice": "Update the CCIP gateway signer address."
							}
						},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 370,
								"contract": "EscroDot.sol:ServiceEscrow",
								"label": "description",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 373,
								"contract": "EscroDot.sol:ServiceEscrow",
								"label": "gateway",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 376,
								"contract": "EscroDot.sol:ServiceEscrow",
								"label": "gatewaySigner",
								"offset": 0,
								"slot": "2",
								"type": "t_address"
							},
							{
								"astId": 379,
								"contract": "EscroDot.sol:ServiceEscrow",
								"label": "nextPurchaseId",
								"offset": 0,
								"slot": "3",
								"type": "t_uint256"
							},
							{
								"astId": 396,
								"contract": "EscroDot.sol:ServiceEscrow",
								"label": "purchases",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_struct(Purchase)391_storage)"
							},
							{
								"astId": 465,
								"contract": "EscroDot.sol:ServiceEscrow",
								"label": "_locked",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_uint256,t_struct(Purchase)391_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct ServiceEscrow.Purchase)",
								"numberOfBytes": "32",
								"value": "t_struct(Purchase)391_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Purchase)391_storage": {
								"encoding": "inplace",
								"label": "struct ServiceEscrow.Purchase",
								"members": [
									{
										"astId": 382,
										"contract": "EscroDot.sol:ServiceEscrow",
										"label": "buyer",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 384,
										"contract": "EscroDot.sol:ServiceEscrow",
										"label": "amount",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 386,
										"contract": "EscroDot.sol:ServiceEscrow",
										"label": "claimed",
										"offset": 0,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 388,
										"contract": "EscroDot.sol:ServiceEscrow",
										"label": "disputed",
										"offset": 1,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 390,
										"contract": "EscroDot.sol:ServiceEscrow",
										"label": "resolved",
										"offset": 2,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 116/65792 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 38168\n// Code size = 121276 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20074]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20074] = a1\n    42: a1 = 0x20080\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20080\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 1)\n    64: jump @22 if a0 == a1\n      : @9 (gas: 9)\n    67: a3 = a1 << 0x20\n    70: a3 = a3 >> 0x20\n    73: a4 = a0 << 0x20\n    76: a4 = a4 >> 0x20\n    79: a4 = a4 + a2\n    82: a3 = a3 - a4\n    85: a4 = a2 << 0x1\n    88: a4 = -a4\n    90: jump @15 if a4 >=u a3\n      : @10 (gas: 1)\n    93: jump @19 if a0 >=u a1\n      : @11 (gas: 1)\n    96: jump @22 if a2 == 0\n      : @12 (gas: 3)\n    99: a2 = a2 + a0\n   102: a3 = a0\n   104: fallthrough\n      : @13 (gas: 6)\n   105: a4 = u8 [a1]\n   107: a1 = a1 + 0x1\n   110: a5 = a3 + 0x1\n   113: u8 [a3] = a4\n   115: a3 = a5\n   117: jump @13 if a5 != a2\n      : @14 (gas: 1)\n   120: jump @22\n      : @15 (gas: 1)\n   122: jump @22 if a2 == 0\n      : @16 (gas: 3)\n   125: a2 = a2 + a0\n   128: a3 = a0\n   130: fallthrough\n      : @17 (gas: 6)\n   131: a4 = u8 [a1]\n   133: a1 = a1 + 0x1\n   136: a5 = a3 + 0x1\n   139: u8 [a3] = a4\n   141: a3 = a5\n   143: jump @17 if a5 != a2\n      : @18 (gas: 1)\n   146: jump @22\n      : @19 (gas: 1)\n   148: jump @22 if a2 == 0\n      : @20 (gas: 2)\n   151: i32 a3 = a2 + 0xffffffffffffffff\n   154: fallthrough\n      : @21 (gas: 7)\n   155: a4 = a1 + a3\n   158: a4 = u8 [a4]\n   160: a2 = a2 + 0xffffffffffffffff\n   163: a5 = a0 + a3\n   166: u8 [a5] = a4\n   168: i32 a3 = a3 + 0xffffffffffffffff\n   171: jump @21 if a2 != 0\n      : @22 (gas: 1)\n   174: ret\n      : @23 (gas: 13)\n   176: sp = sp + 0xffffffffffffffd8\n   179: u64 [sp + 0x20] = ra\n   182: u64 [sp + 0x18] = s0\n   185: u64 [sp + 0x10] = s1\n   188: a2 = u64 [a1]\n   190: u64 [sp + 0x8] = a2\n   193: a2 = u64 [a1 + 0x8]\n   196: u64 [sp] = a2\n   198: s0 = u64 [a1 + 0x10]\n   201: s1 = u64 [a1 + 0x18]\n   204: i32 a0 = a0 + 0\n   206: a1 = 0x20\n   209: ra = 2, jump @0\n      : @24 [@dyn 1] (gas: 71)\n   214: a1 = reverse s1\n   216: a2 = reverse s0\n   218: a3 = u64 [sp]\n   220: a3 = reverse a3\n   222: a4 = u64 [sp + 0x8]\n   225: a4 = reverse a4\n   227: u8 [a0 + 0x18] = a4\n   230: u8 [a0 + 0x10] = a3\n   233: u8 [a0 + 0x8] = a2\n   236: u8 [a0] = a1\n   238: a5 = a4 >> 0x38\n   241: u8 [a0 + 0x1f] = a5\n   244: a5 = a4 >> 0x30\n   247: u8 [a0 + 0x1e] = a5\n   250: a5 = a4 >> 0x28\n   253: u8 [a0 + 0x1d] = a5\n   256: a5 = a4 >> 0x20\n   259: u8 [a0 + 0x1c] = a5\n   262: a5 = a4 >> 0x18\n   265: u8 [a0 + 0x1b] = a5\n   268: a5 = a4 >> 0x10\n   271: u8 [a0 + 0x1a] = a5\n   274: a4 = a4 >> 0x8\n   277: u8 [a0 + 0x19] = a4\n   280: a4 = a3 >> 0x38\n   283: u8 [a0 + 0x17] = a4\n   286: a4 = a3 >> 0x30\n   289: u8 [a0 + 0x16] = a4\n   292: a4 = a3 >> 0x28\n   295: u8 [a0 + 0x15] = a4\n   298: a4 = a3 >> 0x20\n   301: u8 [a0 + 0x14] = a4\n   304: a4 = a3 >> 0x18\n   307: u8 [a0 + 0x13] = a4\n   310: a4 = a3 >> 0x10\n   313: u8 [a0 + 0x12] = a4\n   316: a3 = a3 >> 0x8\n   319: u8 [a0 + 0x11] = a3\n   322: a3 = a2 >> 0x38\n   325: u8 [a0 + 0xf] = a3\n   328: a3 = a2 >> 0x30\n   331: u8 [a0 + 0xe] = a3\n   334: a3 = a2 >> 0x28\n   337: u8 [a0 + 0xd] = a3\n   340: a3 = a2 >> 0x20\n   343: u8 [a0 + 0xc] = a3\n   346: a3 = a2 >> 0x18\n   349: u8 [a0 + 0xb] = a3\n   352: a3 = a2 >> 0x10\n   355: u8 [a0 + 0xa] = a3\n   358: a2 = a2 >> 0x8\n   361: u8 [a0 + 0x9] = a2\n   364: a2 = a1 >> 0x38\n   367: u8 [a0 + 0x7] = a2\n   370: a2 = a1 >> 0x30\n   373: u8 [a0 + 0x6] = a2\n   376: a2 = a1 >> 0x28\n   379: u8 [a0 + 0x5] = a2\n   382: a2 = a1 >> 0x20\n   385: u8 [a0 + 0x4] = a2\n   388: a2 = a1 >> 0x18\n   391: u8 [a0 + 0x3] = a2\n   394: a2 = a1 >> 0x10\n   397: u8 [a0 + 0x2] = a2\n   400: a1 = a1 >> 0x8\n   403: u8 [a0 + 0x1] = a1\n   406: ra = u64 [sp + 0x20]\n   409: s0 = u64 [sp + 0x18]\n   412: s1 = u64 [sp + 0x10]\n   415: sp = sp + 0x28\n   418: ret\n      : @25 (gas: 6)\n   420: sp = sp + 0xfffffffffffffff0\n   423: u64 [sp + 0x8] = ra\n   426: u64 [sp] = s0\n   428: s0 = a0 & 0x1\n   431: ecalli 4 // 'call_data_size'\n   433: fallthrough\n      : @26 (gas: 2)\n   434: u32 [0x20078] = a0\n   439: jump @28 if s0 == 0\n      : @27 (gas: 1)\n   442: ra = 4, jump @29\n      : @28 [@dyn 2] (gas: 1)\n   446: ra = 6, jump @51\n      : @29 [@dyn 3] (gas: 9)\n   451: sp = sp + 0xfffffffffffffce0\n   455: u64 [sp + 0x318] = ra\n   459: u64 [sp + 0x310] = s0\n   463: u64 [sp + 0x308] = s1\n   467: s0 = sp + 0x320\n   471: sp = sp & 0xffffffffffffffe0\n   474: a0 = 0x40\n   477: a1 = 0x20\n   480: ra = 8, jump @0\n      : @30 [@dyn 4] (gas: 39)\n   485: u8 [a0 + 31] = 0\n   488: u8 [a0 + 30] = 0x1\n   492: u8 [a0 + 29] = 0\n   495: u8 [a0 + 28] = 0\n   498: u8 [a0 + 27] = 0\n   501: u8 [a0 + 26] = 0\n   504: u8 [a0 + 25] = 0\n   507: u8 [a0 + 24] = 0\n   510: u8 [a0 + 23] = 0\n   513: u8 [a0 + 22] = 0\n   516: u8 [a0 + 21] = 0\n   519: u8 [a0 + 20] = 0\n   522: u8 [a0 + 19] = 0\n   525: u8 [a0 + 18] = 0\n   528: u8 [a0 + 17] = 0\n   531: u8 [a0 + 16] = 0\n   534: u8 [a0 + 15] = 0\n   537: u8 [a0 + 14] = 0\n   540: u8 [a0 + 13] = 0\n   543: u8 [a0 + 12] = 0\n   546: u8 [a0 + 11] = 0\n   549: u8 [a0 + 10] = 0\n   552: u8 [a0 + 9] = 0\n   555: u8 [a0 + 8] = 0\n   558: u8 [a0 + 7] = 0\n   561: u8 [a0 + 6] = 0\n   564: u8 [a0 + 5] = 0\n   567: u8 [a0 + 4] = 0\n   570: u8 [a0 + 3] = 0\n   573: u8 [a0 + 2] = 0\n   576: u8 [a0 + 1] = 0\n   579: u8 [a0 + 0] = 0\n   581: u64 [sp + 760] = 0\n   585: u64 [sp + 736] = 0\n   589: u64 [sp + 744] = 0\n   593: u64 [sp + 752] = 0\n   597: i32 a0 = sp + 0x2e0\n   601: ecalli 17 // 'value_transferred'\n   603: fallthrough\n      : @31 (gas: 8)\n   604: a0 = u64 [sp + 0x2f0]\n   608: a1 = u64 [sp + 0x2f8]\n   612: a2 = u64 [sp + 0x2e8]\n   616: a3 = u64 [sp + 0x2e0]\n   620: a1 = a1 | a2\n   623: a0 = a0 | a3\n   626: a0 = a0 | a1\n   629: jump @40 if a0 != 0\n      : @32 (gas: 12)\n   633: a0 = i32 [0x20078]\n   638: u64 [sp + 0x98] = a0\n   642: a0 = a0 << 0x20\n   645: a2 = a0 >> 0x20\n   648: u64 [sp + 696] = 0\n   652: u64 [sp + 688] = 0\n   656: u64 [sp + 680] = 0\n   660: a0 = sp + 0x2c0\n   664: a1 = sp + 0x2a0\n   668: u64 [sp + 0x90] = a2\n   672: u64 [sp + 0x2a0] = a2\n   676: ra = 10, jump @113\n      : @33 [@dyn 5] (gas: 12)\n   681: a4 = u64 [sp + 0x2d8]\n   685: s1 = u64 [sp + 0x2d0]\n   689: a3 = u64 [sp + 0x2c8]\n   693: a2 = u64 [sp + 0x2c0]\n   697: a0 = a3 | a4\n   700: a1 = a2 | s1\n   703: a1 = a1 | a0\n   706: a1 = a1 >> 0x20\n   709: a0 = a0 | s1\n   712: a0 = a0 << 0x20\n   715: a0 = a0 | a1\n   718: jump @39 if a0 != 0\n      : @34 (gas: 6)\n   722: i32 a0 = a2 + 0\n   724: a1 = u64 [sp + 0x98]\n   728: u64 [sp + 0x78] = a2\n   731: u64 [sp + 0x80] = a3\n   735: u64 [sp + 0x88] = a4\n   739: ra = 12, jump @0\n      : @35 [@dyn 6] (gas: 29)\n   744: i32 a0 = a0 + 0\n   746: a1 = u64 [sp + 0x98]\n   750: a2 = 0\n   752: ecalli 2 // 'call_data_copy'\n   754: a0 = u64 [sp + 0x90]\n   758: a2 = u64 [sp + 0x78]\n   761: a0 = a0 + a2\n   764: a1 = a0 <u a2\n   767: t1 = a2\n   769: a4 = u64 [sp + 0x80]\n   773: a2 = a4 + a1\n   776: a3 = a2 <u a4\n   779: a3 = a1 if a1 == 0\n   782: a3 = a3 + s1\n   785: a1 = a3 <u s1\n   788: a5 = u64 [sp + 0x88]\n   792: t0 = a5 + a1\n   795: u64 [sp + 0x188] = a2\n   799: u64 [sp + 0x180] = a0\n   803: u64 [sp + 0x1b8] = a5\n   807: u64 [sp + 0x1b0] = s1\n   811: u64 [sp + 0x1a8] = a4\n   815: u64 [sp + 0x1a0] = t1\n   819: u64 [sp + 0x190] = a3\n   823: a0 = sp + 0x1c0\n   827: a1 = sp + 0x1a0\n   831: a2 = sp + 0x180\n   835: u64 [sp + 0x198] = t0\n   839: ra = 14, jump @152\n      : @36 [@dyn 7] (gas: 191)\n   844: a0 = u64 [sp + 0x1c0]\n   848: u64 [sp + 0x98] = a0\n   852: a0 = u64 [sp + 0x1c8]\n   856: u64 [sp + 0x90] = a0\n   860: a0 = u64 [sp + 0x1d0]\n   864: u64 [sp + 0x88] = a0\n   868: a0 = u64 [sp + 0x1d8]\n   872: u64 [sp + 0x80] = a0\n   876: a0 = u64 [sp + 0x1e0]\n   880: u64 [sp + 0x78] = a0\n   883: a0 = u64 [sp + 0x1e8]\n   887: u64 [sp + 0x70] = a0\n   890: a0 = u64 [sp + 0x1f0]\n   894: u64 [sp + 0x68] = a0\n   897: a0 = u64 [sp + 0x1f8]\n   901: u64 [sp + 0x60] = a0\n   904: a0 = u64 [sp + 0x200]\n   908: u64 [sp + 0x58] = a0\n   911: a0 = u64 [sp + 0x208]\n   915: u64 [sp + 0x50] = a0\n   918: a0 = u64 [sp + 0x210]\n   922: u64 [sp + 0x48] = a0\n   925: a0 = u64 [sp + 0x218]\n   929: u64 [sp + 0x40] = a0\n   932: a0 = u64 [sp + 0x220]\n   936: u64 [sp + 0x38] = a0\n   939: a0 = u64 [sp + 0x228]\n   943: u64 [sp + 0x30] = a0\n   946: a0 = u64 [sp + 0x230]\n   950: u64 [sp + 0x28] = a0\n   953: a0 = u64 [sp + 0x238]\n   957: u64 [sp + 0x20] = a0\n   960: a0 = u64 [sp + 0x240]\n   964: u64 [sp + 0x18] = a0\n   967: a0 = u64 [sp + 0x248]\n   971: u64 [sp + 0x10] = a0\n   974: s1 = u64 [sp + 0x250]\n   978: t2 = u64 [sp + 0x258]\n   982: t1 = u64 [sp + 0x260]\n   986: t0 = u64 [sp + 0x268]\n   990: a5 = u64 [sp + 0x270]\n   994: a4 = u64 [sp + 0x278]\n   998: a3 = u64 [sp + 0x280]\n  1002: a2 = u64 [sp + 0x288]\n  1006: a1 = u64 [sp + 0x290]\n  1010: a0 = u64 [sp + 0x298]\n  1014: ra = sp + 0xa0\n  1018: u64 [sp] = ra\n  1020: u64 [sp + 0xb8] = a0\n  1024: u64 [sp + 0xb0] = a1\n  1028: u64 [sp + 0xa8] = a2\n  1032: u64 [sp + 0xa0] = a3\n  1036: u64 [sp + 0xd8] = a4\n  1040: u64 [sp + 0xd0] = a5\n  1044: u64 [sp + 0xc8] = t0\n  1048: u64 [sp + 0xc0] = t1\n  1052: u64 [sp + 0xf8] = t2\n  1056: u64 [sp + 0xf0] = s1\n  1060: a0 = u64 [sp + 0x10]\n  1063: u64 [sp + 0xe8] = a0\n  1067: a0 = u64 [sp + 0x18]\n  1070: u64 [sp + 0xe0] = a0\n  1074: a0 = u64 [sp + 0x20]\n  1077: u64 [sp + 0x118] = a0\n  1081: a0 = u64 [sp + 0x28]\n  1084: u64 [sp + 0x110] = a0\n  1088: a0 = u64 [sp + 0x30]\n  1091: u64 [sp + 0x108] = a0\n  1095: a0 = u64 [sp + 0x38]\n  1098: u64 [sp + 0x100] = a0\n  1102: a0 = u64 [sp + 0x40]\n  1105: u64 [sp + 0x138] = a0\n  1109: a0 = u64 [sp + 0x48]\n  1112: u64 [sp + 0x130] = a0\n  1116: a0 = u64 [sp + 0x50]\n  1119: u64 [sp + 0x128] = a0\n  1123: a0 = u64 [sp + 0x58]\n  1126: u64 [sp + 0x120] = a0\n  1130: a0 = u64 [sp + 0x60]\n  1133: u64 [sp + 0x158] = a0\n  1137: a0 = u64 [sp + 0x68]\n  1140: u64 [sp + 0x150] = a0\n  1144: a0 = u64 [sp + 0x70]\n  1147: u64 [sp + 0x148] = a0\n  1151: a0 = u64 [sp + 0x78]\n  1154: u64 [sp + 0x140] = a0\n  1158: a0 = u64 [sp + 0x80]\n  1162: u64 [sp + 0x178] = a0\n  1166: a0 = u64 [sp + 0x88]\n  1170: u64 [sp + 0x170] = a0\n  1174: a0 = u64 [sp + 0x90]\n  1178: u64 [sp + 0x168] = a0\n  1182: a0 = sp + 0x160\n  1186: a1 = sp + 0x140\n  1190: a2 = sp + 0x120\n  1194: a3 = sp + 0x100\n  1198: a4 = sp + 0xe0\n  1202: a5 = sp + 0xc0\n  1206: s1 = u64 [sp + 0x98]\n  1210: u64 [sp + 0x160] = s1\n  1214: ra = 0x10\n  1217: sp = sp + 0xfffffffffffffce0\n  1221: u64 [sp + 0x318] = ra\n  1225: u64 [sp + 0x310] = s0\n  1229: u64 [sp + 0x308] = s1\n  1233: s0 = sp + 0x320\n  1237: sp = sp & 0xffffffffffffffe0\n  1240: t0 = u64 [s0]\n  1242: s1 = u64 [t0 + 0x18]\n  1245: u64 [sp + 0x40] = s1\n  1248: s1 = u64 [t0 + 0x10]\n  1251: u64 [sp + 0x48] = s1\n  1254: s1 = u64 [t0 + 0x8]\n  1257: u64 [sp + 0x50] = s1\n  1260: s1 = u64 [t0]\n  1262: u64 [sp + 0x58] = s1\n  1265: s1 = u64 [a5 + 0x10]\n  1268: u64 [sp + 0x70] = s1\n  1271: s1 = u64 [a5 + 0x8]\n  1274: u64 [sp + 0x60] = s1\n  1277: a5 = u64 [a5]\n  1279: u64 [sp + 0x68] = a5\n  1282: a5 = u64 [a4 + 0x18]\n  1285: u64 [sp + 0x78] = a5\n  1288: a5 = u64 [a4 + 0x10]\n  1291: u64 [sp + 0x80] = a5\n  1295: a5 = u64 [a4 + 0x8]\n  1298: u64 [sp + 0x88] = a5\n  1302: a4 = u64 [a4]\n  1304: u64 [sp + 0xb0] = a4\n  1308: a4 = u64 [a3 + 0x18]\n  1311: u64 [sp + 0x90] = a4\n  1315: a4 = u64 [a3 + 0x10]\n  1318: u64 [sp + 0x98] = a4\n  1322: a4 = u64 [a3 + 0x8]\n  1325: u64 [sp + 0xa0] = a4\n  1329: a3 = u64 [a3]\n  1331: u64 [sp + 0xa8] = a3\n  1335: a3 = u64 [a2 + 0x18]\n  1338: u64 [sp + 0x38] = a3\n  1341: a3 = u64 [a2 + 0x10]\n  1344: u64 [sp + 0xb8] = a3\n  1348: a3 = u64 [a2 + 0x8]\n  1351: u64 [sp + 0xc0] = a3\n  1355: a2 = u64 [a2]\n  1357: u64 [sp + 0xc8] = a2\n  1361: a2 = u64 [a1 + 0x18]\n  1364: u64 [sp + 0x18] = a2\n  1367: a2 = u64 [a1 + 0x10]\n  1370: u64 [sp + 0x20] = a2\n  1373: a2 = u64 [a1 + 0x8]\n  1376: u64 [sp + 0x28] = a2\n  1379: a1 = u64 [a1]\n  1381: u64 [sp + 0x30] = a1\n  1384: a1 = u64 [a0 + 0x18]\n  1387: u64 [sp + 0x10] = a1\n  1390: a1 = u64 [a0 + 0x8]\n  1393: u64 [sp + 0xd0] = a1\n  1397: a1 = u64 [a0]\n  1399: u64 [sp + 0xd8] = a1\n  1403: s1 = u64 [a0 + 0x10]\n  1406: u32 [sp + 672] = 0x20\n  1411: u64 [sp + 728] = 0\n  1415: u64 [sp + 720] = 0\n  1419: u64 [sp + 712] = 0\n  1423: u64 [sp + 704] = 0x5\n  1428: u64 [sp + 760] = 0\n  1432: u64 [sp + 752] = 0\n  1436: u64 [sp + 744] = 0\n  1440: u64 [sp + 736] = 0\n  1444: i32 a1 = sp + 0x2c0\n  1448: i32 a3 = sp + 0x2e0\n  1452: i32 a4 = sp + 0x2a0\n  1456: a2 = 0xffffffffffffffff\n  1459: a0 = 0\n  1461: ecalli 8 // 'get_storage'\n  1463: u64 [sp + 728] = 0\n  1467: u64 [sp + 720] = 0\n  1471: u64 [sp + 712] = 0\n  1475: u64 [sp + 704] = 0x5\n  1480: u64 [sp + 760] = 0\n  1484: u64 [sp + 752] = 0\n  1488: u64 [sp + 744] = 0\n  1492: u64 [sp + 736] = 0x1\n  1497: i32 a1 = sp + 0x2c0\n  1501: i32 a3 = sp + 0x2e0\n  1505: a2 = 0xffffffffffffffff\n  1508: a4 = 0x20\n  1511: a0 = 0\n  1513: ecalli 16 // 'set_storage'\n  1515: jump @285\n      : @37 [@dyn 8] (gas: 3)\n  1518: a0 = 0x40\n  1521: a1 = 0x20\n  1524: ra = 18, jump @0\n      : @38 [@dyn 9] (gas: 100)\n  1529: a1 = u8 [a0 + 0x11]\n  1532: a2 = u8 [a0 + 0x10]\n  1535: a3 = u8 [a0 + 0x12]\n  1538: a4 = u8 [a0 + 0x13]\n  1541: a1 = a1 << 0x8\n  1544: a1 = a1 | a2\n  1547: a3 = a3 << 0x10\n  1550: a4 = a4 << 0x18\n  1553: a3 = a3 | a4\n  1556: a1 = a1 | a3\n  1559: a2 = u8 [a0 + 0x15]\n  1562: a3 = u8 [a0 + 0x14]\n  1565: a4 = u8 [a0 + 0x16]\n  1568: a5 = u8 [a0 + 0x17]\n  1571: a2 = a2 << 0x8\n  1574: a2 = a2 | a3\n  1577: a4 = a4 << 0x10\n  1580: a5 = a5 << 0x18\n  1583: a4 = a4 | a5\n  1586: a2 = a2 | a4\n  1589: a2 = a2 << 0x20\n  1592: t0 = a2 | a1\n  1595: a2 = u8 [a0 + 0x1]\n  1598: a3 = u8 [a0]\n  1600: a4 = u8 [a0 + 0x2]\n  1603: a5 = u8 [a0 + 0x3]\n  1606: a2 = a2 << 0x8\n  1609: a2 = a2 | a3\n  1612: a4 = a4 << 0x10\n  1615: a5 = a5 << 0x18\n  1618: a4 = a4 | a5\n  1621: a2 = a2 | a4\n  1624: a3 = u8 [a0 + 0x5]\n  1627: a4 = u8 [a0 + 0x4]\n  1630: a5 = u8 [a0 + 0x6]\n  1633: s1 = u8 [a0 + 0x7]\n  1636: a3 = a3 << 0x8\n  1639: a3 = a3 | a4\n  1642: a5 = a5 << 0x10\n  1645: s1 = s1 << 0x18\n  1648: a5 = a5 | s1\n  1651: a3 = a3 | a5\n  1654: a3 = a3 << 0x20\n  1657: a2 = a2 | a3\n  1660: a3 = u8 [a0 + 0x19]\n  1663: a4 = u8 [a0 + 0x18]\n  1666: a5 = u8 [a0 + 0x1a]\n  1669: s1 = u8 [a0 + 0x1b]\n  1672: a3 = a3 << 0x8\n  1675: a3 = a3 | a4\n  1678: a5 = a5 << 0x10\n  1681: s1 = s1 << 0x18\n  1684: a5 = a5 | s1\n  1687: a3 = a3 | a5\n  1690: a4 = u8 [a0 + 0x1d]\n  1693: a5 = u8 [a0 + 0x1c]\n  1696: s1 = u8 [a0 + 0x1e]\n  1699: a1 = u8 [a0 + 0x1f]\n  1702: a4 = a4 << 0x8\n  1705: a4 = a4 | a5\n  1708: s1 = s1 << 0x10\n  1711: a1 = a1 << 0x18\n  1714: a1 = a1 | s1\n  1717: a1 = a1 | a4\n  1720: a1 = a1 << 0x20\n  1723: a3 = a3 | a1\n  1726: a1 = u8 [a0 + 0x9]\n  1729: a4 = u8 [a0 + 0x8]\n  1732: a5 = u8 [a0 + 0xa]\n  1735: s1 = u8 [a0 + 0xb]\n  1738: a1 = a1 << 0x8\n  1741: a1 = a1 | a4\n  1744: a5 = a5 << 0x10\n  1747: s1 = s1 << 0x18\n  1750: a5 = a5 | s1\n  1753: a1 = a1 | a5\n  1756: a4 = u8 [a0 + 0xd]\n  1759: a5 = u8 [a0 + 0xc]\n  1762: s1 = u8 [a0 + 0xe]\n  1765: a0 = u8 [a0 + 0xf]\n  1768: a4 = a4 << 0x8\n  1771: a4 = a4 | a5\n  1774: s1 = s1 << 0x10\n  1777: a0 = a0 << 0x18\n  1780: a0 = a0 | s1\n  1783: a0 = a0 | a4\n  1786: a0 = a0 << 0x20\n  1789: a0 = a0 | a1\n  1792: a1 = reverse a0\n  1794: a0 = reverse a3\n  1796: a2 = reverse a2\n  1798: a3 = reverse t0\n  1800: a2 = a2 | a3\n  1803: a3 = a0 | a1\n  1806: a3 = a3 | a2\n  1809: a3 = a3 >> 0x20\n  1812: a1 = a1 | a2\n  1815: a1 = a1 << 0x20\n  1818: a1 = a1 | a3\n  1821: jump @42 if a1 == 0\n      : @39 (gas: 1)\n  1824: trap\n      : @40 (gas: 3)\n  1825: a0 = 0\n  1827: a1 = 0\n  1829: ra = 20, jump @0\n      : @41 [@dyn 10] (gas: 5)\n  1834: i32 a1 = a0 + 0\n  1836: a0 = 0x1\n  1839: a2 = 0\n  1841: ecalli 14 // 'seal_return'\n  1843: fallthrough\n      : @42 (gas: 3)\n  1844: i32 a0 = a0 + 0\n  1846: u64 [sp + 0x98] = a0\n  1850: ra = 22, jump @0\n      : @43 [@dyn 11] (gas: 7)\n  1855: i32 a0 = a0 + 0\n  1857: a1 = 0\n  1859: a2 = 0\n  1861: ecalli 2 // 'call_data_copy'\n  1863: a0 = 0x80\n  1867: a1 = 0x20\n  1870: ra = 24, jump @0\n      : @44 [@dyn 12] (gas: 100)\n  1875: a1 = u8 [a0 + 0x1]\n  1878: a2 = u8 [a0]\n  1880: a3 = u8 [a0 + 0x2]\n  1883: a4 = u8 [a0 + 0x3]\n  1886: a1 = a1 << 0x8\n  1889: a1 = a1 | a2\n  1892: a3 = a3 << 0x10\n  1895: a4 = a4 << 0x18\n  1898: a3 = a3 | a4\n  1901: a1 = a1 | a3\n  1904: a2 = u8 [a0 + 0x5]\n  1907: a3 = u8 [a0 + 0x4]\n  1910: a4 = u8 [a0 + 0x6]\n  1913: a5 = u8 [a0 + 0x7]\n  1916: a2 = a2 << 0x8\n  1919: a2 = a2 | a3\n  1922: a4 = a4 << 0x10\n  1925: a5 = a5 << 0x18\n  1928: a4 = a4 | a5\n  1931: a2 = a2 | a4\n  1934: a2 = a2 << 0x20\n  1937: t0 = a2 | a1\n  1940: a2 = u8 [a0 + 0x19]\n  1943: a3 = u8 [a0 + 0x18]\n  1946: a4 = u8 [a0 + 0x1a]\n  1949: a5 = u8 [a0 + 0x1b]\n  1952: a2 = a2 << 0x8\n  1955: a2 = a2 | a3\n  1958: a4 = a4 << 0x10\n  1961: a5 = a5 << 0x18\n  1964: a4 = a4 | a5\n  1967: a2 = a2 | a4\n  1970: a3 = u8 [a0 + 0x1d]\n  1973: a4 = u8 [a0 + 0x1c]\n  1976: a5 = u8 [a0 + 0x1e]\n  1979: s1 = u8 [a0 + 0x1f]\n  1982: a3 = a3 << 0x8\n  1985: a3 = a3 | a4\n  1988: a5 = a5 << 0x10\n  1991: s1 = s1 << 0x18\n  1994: a5 = a5 | s1\n  1997: a3 = a3 | a5\n  2000: a3 = a3 << 0x20\n  2003: a2 = a2 | a3\n  2006: a3 = u8 [a0 + 0x11]\n  2009: a4 = u8 [a0 + 0x10]\n  2012: a5 = u8 [a0 + 0x12]\n  2015: s1 = u8 [a0 + 0x13]\n  2018: a3 = a3 << 0x8\n  2021: a3 = a3 | a4\n  2024: a5 = a5 << 0x10\n  2027: s1 = s1 << 0x18\n  2030: a5 = a5 | s1\n  2033: a3 = a3 | a5\n  2036: a4 = u8 [a0 + 0x15]\n  2039: a5 = u8 [a0 + 0x14]\n  2042: s1 = u8 [a0 + 0x16]\n  2045: a1 = u8 [a0 + 0x17]\n  2048: a4 = a4 << 0x8\n  2051: a4 = a4 | a5\n  2054: s1 = s1 << 0x10\n  2057: a1 = a1 << 0x18\n  2060: a1 = a1 | s1\n  2063: a1 = a1 | a4\n  2066: a1 = a1 << 0x20\n  2069: a3 = a3 | a1\n  2072: a1 = u8 [a0 + 0x9]\n  2075: a4 = u8 [a0 + 0x8]\n  2078: a5 = u8 [a0 + 0xa]\n  2081: s1 = u8 [a0 + 0xb]\n  2084: a1 = a1 << 0x8\n  2087: a1 = a1 | a4\n  2090: a5 = a5 << 0x10\n  2093: s1 = s1 << 0x18\n  2096: a5 = a5 | s1\n  2099: a1 = a1 | a5\n  2102: a4 = u8 [a0 + 0xd]\n  2105: a5 = u8 [a0 + 0xc]\n  2108: s1 = u8 [a0 + 0xe]\n  2111: a0 = u8 [a0 + 0xf]\n  2114: a4 = a4 << 0x8\n  2117: a4 = a4 | a5\n  2120: s1 = s1 << 0x10\n  2123: a0 = a0 << 0x18\n  2126: a0 = a0 | s1\n  2129: a0 = a0 | a4\n  2132: a0 = a0 << 0x20\n  2135: a0 = a0 | a1\n  2138: a0 = reverse a0\n  2140: s1 = 0x30080\n  2145: a1 = reverse a3\n  2147: a2 = reverse a2\n  2149: a3 = reverse t0\n  2151: u64 [0x30098] = a3\n  2156: u64 [0x30080] = a2\n  2161: u64 [0x30088] = a1\n  2166: u64 [0x30090] = a0\n  2171: a0 = 0xa0\n  2175: a1 = 0x20\n  2178: ra = 26, jump @0\n      : @45 [@dyn 13] (gas: 99)\n  2183: a1 = u8 [a0 + 0x1]\n  2186: a2 = u8 [a0]\n  2188: a3 = u8 [a0 + 0x2]\n  2191: a4 = u8 [a0 + 0x3]\n  2194: a1 = a1 << 0x8\n  2197: a1 = a1 | a2\n  2200: a3 = a3 << 0x10\n  2203: a4 = a4 << 0x18\n  2206: a3 = a3 | a4\n  2209: a1 = a1 | a3\n  2212: a2 = u8 [a0 + 0x5]\n  2215: a3 = u8 [a0 + 0x4]\n  2218: a4 = u8 [a0 + 0x6]\n  2221: a5 = u8 [a0 + 0x7]\n  2224: a2 = a2 << 0x8\n  2227: a2 = a2 | a3\n  2230: a4 = a4 << 0x10\n  2233: a5 = a5 << 0x18\n  2236: a4 = a4 | a5\n  2239: a2 = a2 | a4\n  2242: a2 = a2 << 0x20\n  2245: t0 = a2 | a1\n  2248: a2 = u8 [a0 + 0x19]\n  2251: a3 = u8 [a0 + 0x18]\n  2254: a4 = u8 [a0 + 0x1a]\n  2257: a5 = u8 [a0 + 0x1b]\n  2260: a2 = a2 << 0x8\n  2263: a2 = a2 | a3\n  2266: a4 = a4 << 0x10\n  2269: a5 = a5 << 0x18\n  2272: a4 = a4 | a5\n  2275: a2 = a2 | a4\n  2278: a3 = u8 [a0 + 0x1d]\n  2281: a4 = u8 [a0 + 0x1c]\n  2284: a5 = u8 [a0 + 0x1e]\n  2287: a1 = u8 [a0 + 0x1f]\n  2290: a3 = a3 << 0x8\n  2293: a3 = a3 | a4\n  2296: a5 = a5 << 0x10\n  2299: a1 = a1 << 0x18\n  2302: a1 = a1 | a5\n  2305: a1 = a1 | a3\n  2308: a1 = a1 << 0x20\n  2311: t1 = a1 | a2\n  2314: a1 = u8 [a0 + 0x11]\n  2317: a3 = u8 [a0 + 0x10]\n  2320: a4 = u8 [a0 + 0x12]\n  2323: a5 = u8 [a0 + 0x13]\n  2326: a1 = a1 << 0x8\n  2329: a1 = a1 | a3\n  2332: a4 = a4 << 0x10\n  2335: a5 = a5 << 0x18\n  2338: a4 = a4 | a5\n  2341: a1 = a1 | a4\n  2344: a3 = u8 [a0 + 0x15]\n  2347: a4 = u8 [a0 + 0x14]\n  2350: a5 = u8 [a0 + 0x16]\n  2353: a2 = u8 [a0 + 0x17]\n  2356: a3 = a3 << 0x8\n  2359: a3 = a3 | a4\n  2362: a5 = a5 << 0x10\n  2365: a2 = a2 << 0x18\n  2368: a2 = a2 | a5\n  2371: a2 = a2 | a3\n  2374: a2 = a2 << 0x20\n  2377: a3 = a2 | a1\n  2380: a1 = u8 [a0 + 0x9]\n  2383: a2 = u8 [a0 + 0x8]\n  2386: a4 = u8 [a0 + 0xa]\n  2389: a5 = u8 [a0 + 0xb]\n  2392: a1 = a1 << 0x8\n  2395: a1 = a1 | a2\n  2398: a4 = a4 << 0x10\n  2401: a5 = a5 << 0x18\n  2404: a4 = a4 | a5\n  2407: a1 = a1 | a4\n  2410: a2 = u8 [a0 + 0xd]\n  2413: a4 = u8 [a0 + 0xc]\n  2416: a5 = u8 [a0 + 0xe]\n  2419: a0 = u8 [a0 + 0xf]\n  2422: a2 = a2 << 0x8\n  2425: a2 = a2 | a4\n  2428: a5 = a5 << 0x10\n  2431: a0 = a0 << 0x18\n  2434: a0 = a0 | a5\n  2437: a0 = a0 | a2\n  2440: a0 = a0 << 0x20\n  2443: a0 = a0 | a1\n  2446: a0 = reverse a0\n  2448: a1 = reverse a3\n  2450: a2 = reverse t1\n  2452: a3 = reverse t0\n  2454: u64 [s1 + 0x38] = a3\n  2457: u64 [s1 + 0x20] = a2\n  2460: u64 [s1 + 0x28] = a1\n  2463: u64 [s1 + 0x30] = a0\n  2466: a0 = 0xc0\n  2470: a1 = 0x20\n  2473: ra = 28, jump @0\n      : @46 [@dyn 14] (gas: 99)\n  2478: a1 = u8 [a0 + 0x1]\n  2481: a2 = u8 [a0]\n  2483: a3 = u8 [a0 + 0x2]\n  2486: a4 = u8 [a0 + 0x3]\n  2489: a1 = a1 << 0x8\n  2492: a1 = a1 | a2\n  2495: a3 = a3 << 0x10\n  2498: a4 = a4 << 0x18\n  2501: a3 = a3 | a4\n  2504: a1 = a1 | a3\n  2507: a2 = u8 [a0 + 0x5]\n  2510: a3 = u8 [a0 + 0x4]\n  2513: a4 = u8 [a0 + 0x6]\n  2516: a5 = u8 [a0 + 0x7]\n  2519: a2 = a2 << 0x8\n  2522: a2 = a2 | a3\n  2525: a4 = a4 << 0x10\n  2528: a5 = a5 << 0x18\n  2531: a4 = a4 | a5\n  2534: a2 = a2 | a4\n  2537: a2 = a2 << 0x20\n  2540: t0 = a2 | a1\n  2543: a2 = u8 [a0 + 0x19]\n  2546: a3 = u8 [a0 + 0x18]\n  2549: a4 = u8 [a0 + 0x1a]\n  2552: a5 = u8 [a0 + 0x1b]\n  2555: a2 = a2 << 0x8\n  2558: a2 = a2 | a3\n  2561: a4 = a4 << 0x10\n  2564: a5 = a5 << 0x18\n  2567: a4 = a4 | a5\n  2570: a2 = a2 | a4\n  2573: a3 = u8 [a0 + 0x1d]\n  2576: a4 = u8 [a0 + 0x1c]\n  2579: a5 = u8 [a0 + 0x1e]\n  2582: a1 = u8 [a0 + 0x1f]\n  2585: a3 = a3 << 0x8\n  2588: a3 = a3 | a4\n  2591: a5 = a5 << 0x10\n  2594: a1 = a1 << 0x18\n  2597: a1 = a1 | a5\n  2600: a1 = a1 | a3\n  2603: a1 = a1 << 0x20\n  2606: t1 = a1 | a2\n  2609: a1 = u8 [a0 + 0x11]\n  2612: a3 = u8 [a0 + 0x10]\n  2615: a4 = u8 [a0 + 0x12]\n  2618: a5 = u8 [a0 + 0x13]\n  2621: a1 = a1 << 0x8\n  2624: a1 = a1 | a3\n  2627: a4 = a4 << 0x10\n  2630: a5 = a5 << 0x18\n  2633: a4 = a4 | a5\n  2636: a1 = a1 | a4\n  2639: a3 = u8 [a0 + 0x15]\n  2642: a4 = u8 [a0 + 0x14]\n  2645: a5 = u8 [a0 + 0x16]\n  2648: a2 = u8 [a0 + 0x17]\n  2651: a3 = a3 << 0x8\n  2654: a3 = a3 | a4\n  2657: a5 = a5 << 0x10\n  2660: a2 = a2 << 0x18\n  2663: a2 = a2 | a5\n  2666: a2 = a2 | a3\n  2669: a2 = a2 << 0x20\n  2672: a3 = a2 | a1\n  2675: a1 = u8 [a0 + 0x9]\n  2678: a2 = u8 [a0 + 0x8]\n  2681: a4 = u8 [a0 + 0xa]\n  2684: a5 = u8 [a0 + 0xb]\n  2687: a1 = a1 << 0x8\n  2690: a1 = a1 | a2\n  2693: a4 = a4 << 0x10\n  2696: a5 = a5 << 0x18\n  2699: a4 = a4 | a5\n  2702: a1 = a1 | a4\n  2705: a2 = u8 [a0 + 0xd]\n  2708: a4 = u8 [a0 + 0xc]\n  2711: a5 = u8 [a0 + 0xe]\n  2714: a0 = u8 [a0 + 0xf]\n  2717: a2 = a2 << 0x8\n  2720: a2 = a2 | a4\n  2723: a5 = a5 << 0x10\n  2726: a0 = a0 << 0x18\n  2729: a0 = a0 | a5\n  2732: a0 = a0 | a2\n  2735: a0 = a0 << 0x20\n  2738: a0 = a0 | a1\n  2741: a0 = reverse a0\n  2743: a1 = reverse a3\n  2745: a2 = reverse t1\n  2747: a3 = reverse t0\n  2749: u64 [s1 + 0x58] = a3\n  2752: u64 [s1 + 0x40] = a2\n  2755: u64 [s1 + 0x48] = a1\n  2758: u64 [s1 + 0x50] = a0\n  2761: a0 = 0xe0\n  2765: a1 = 0x20\n  2768: ra = 30, jump @0\n      : @47 [@dyn 15] (gas: 98)\n  2773: a1 = u8 [a0 + 0x1]\n  2776: a2 = u8 [a0]\n  2778: a3 = u8 [a0 + 0x2]\n  2781: a4 = u8 [a0 + 0x3]\n  2784: a1 = a1 << 0x8\n  2787: a1 = a1 | a2\n  2790: a3 = a3 << 0x10\n  2793: a4 = a4 << 0x18\n  2796: a3 = a3 | a4\n  2799: a1 = a1 | a3\n  2802: a2 = u8 [a0 + 0x5]\n  2805: a3 = u8 [a0 + 0x4]\n  2808: a4 = u8 [a0 + 0x6]\n  2811: a5 = u8 [a0 + 0x7]\n  2814: a2 = a2 << 0x8\n  2817: a2 = a2 | a3\n  2820: a4 = a4 << 0x10\n  2823: a5 = a5 << 0x18\n  2826: a4 = a4 | a5\n  2829: a2 = a2 | a4\n  2832: a2 = a2 << 0x20\n  2835: t0 = a2 | a1\n  2838: a2 = u8 [a0 + 0x19]\n  2841: a3 = u8 [a0 + 0x18]\n  2844: a4 = u8 [a0 + 0x1a]\n  2847: a5 = u8 [a0 + 0x1b]\n  2850: a2 = a2 << 0x8\n  2853: a2 = a2 | a3\n  2856: a4 = a4 << 0x10\n  2859: a5 = a5 << 0x18\n  2862: a4 = a4 | a5\n  2865: a2 = a2 | a4\n  2868: a3 = u8 [a0 + 0x1d]\n  2871: a4 = u8 [a0 + 0x1c]\n  2874: a5 = u8 [a0 + 0x1e]\n  2877: a1 = u8 [a0 + 0x1f]\n  2880: a3 = a3 << 0x8\n  2883: a3 = a3 | a4\n  2886: a5 = a5 << 0x10\n  2889: a1 = a1 << 0x18\n  2892: a1 = a1 | a5\n  2895: a1 = a1 | a3\n  2898: a1 = a1 << 0x20\n  2901: t1 = a1 | a2\n  2904: a1 = u8 [a0 + 0x11]\n  2907: a3 = u8 [a0 + 0x10]\n  2910: a4 = u8 [a0 + 0x12]\n  2913: a5 = u8 [a0 + 0x13]\n  2916: a1 = a1 << 0x8\n  2919: a1 = a1 | a3\n  2922: a4 = a4 << 0x10\n  2925: a5 = a5 << 0x18\n  2928: a4 = a4 | a5\n  2931: a1 = a1 | a4\n  2934: a3 = u8 [a0 + 0x15]\n  2937: a4 = u8 [a0 + 0x14]\n  2940: a5 = u8 [a0 + 0x16]\n  2943: a2 = u8 [a0 + 0x17]\n  2946: a3 = a3 << 0x8\n  2949: a3 = a3 | a4\n  2952: a5 = a5 << 0x10\n  2955: a2 = a2 << 0x18\n  2958: a2 = a2 | a5\n  2961: a2 = a2 | a3\n  2964: a2 = a2 << 0x20\n  2967: a3 = a2 | a1\n  2970: a1 = u8 [a0 + 0x9]\n  2973: a2 = u8 [a0 + 0x8]\n  2976: a4 = u8 [a0 + 0xa]\n  2979: a5 = u8 [a0 + 0xb]\n  2982: a1 = a1 << 0x8\n  2985: a1 = a1 | a2\n  2988: a4 = a4 << 0x10\n  2991: a5 = a5 << 0x18\n  2994: a4 = a4 | a5\n  2997: a1 = a1 | a4\n  3000: a2 = u8 [a0 + 0xd]\n  3003: a4 = u8 [a0 + 0xc]\n  3006: a5 = u8 [a0 + 0xe]\n  3009: a0 = u8 [a0 + 0xf]\n  3012: a2 = a2 << 0x8\n  3015: a2 = a2 | a4\n  3018: a5 = a5 << 0x10\n  3021: a0 = a0 << 0x18\n  3024: a0 = a0 | a5\n  3027: a0 = a0 | a2\n  3030: a0 = a0 << 0x20\n  3033: a0 = a0 | a1\n  3036: a0 = reverse a0\n  3038: a2 = reverse a3\n  3040: a3 = reverse t1\n  3042: a4 = reverse t0\n  3044: a1 = i32 [0x20070]\n  3049: u64 [s1 + 0x78] = a4\n  3052: u64 [s1 + 0x60] = a3\n  3055: u64 [s1 + 0x68] = a2\n  3058: u64 [s1 + 0x70] = a0\n  3061: jump @49 if a1 == 0\n      : @48 (gas: 3)\n  3064: i32 a0 = s1 + 0\n  3066: ecalli 15 // 'set_immutable_data'\n  3068: fallthrough\n      : @49 (gas: 3)\n  3069: a0 = u64 [sp + 0x98]\n  3073: a1 = 0\n  3075: ra = 32, jump @0\n      : @50 [@dyn 16] (gas: 6)\n  3080: i32 a1 = a0 + 0\n  3082: a0 = 0\n  3084: a2 = 0\n  3086: ra = 0x22\n  3089: ecalli 14 // 'seal_return'\n  3091: fallthrough\n      : @51 [@dyn 17] (gas: 9)\n  3092: sp = sp + 0xfffffffffffffe80\n  3096: u64 [sp + 0x178] = ra\n  3100: u64 [sp + 0x170] = s0\n  3104: u64 [sp + 0x168] = s1\n  3108: s0 = sp + 0x180\n  3112: sp = sp & 0xffffffffffffffe0\n  3115: a0 = 0x40\n  3118: a1 = 0x20\n  3121: ra = 36, jump @0\n      : @52 [@dyn 18] (gas: 35)\n  3126: u8 [a0 + 31] = 0x80\n  3131: u8 [a0 + 30] = 0\n  3134: u8 [a0 + 29] = 0\n  3137: u8 [a0 + 28] = 0\n  3140: u8 [a0 + 27] = 0\n  3143: u8 [a0 + 26] = 0\n  3146: u8 [a0 + 25] = 0\n  3149: u8 [a0 + 24] = 0\n  3152: u8 [a0 + 23] = 0\n  3155: u8 [a0 + 22] = 0\n  3158: u8 [a0 + 21] = 0\n  3161: u8 [a0 + 20] = 0\n  3164: u8 [a0 + 19] = 0\n  3167: u8 [a0 + 18] = 0\n  3170: u8 [a0 + 17] = 0\n  3173: u8 [a0 + 16] = 0\n  3176: u8 [a0 + 15] = 0\n  3179: u8 [a0 + 14] = 0\n  3182: u8 [a0 + 13] = 0\n  3185: u8 [a0 + 12] = 0\n  3188: u8 [a0 + 11] = 0\n  3191: u8 [a0 + 10] = 0\n  3194: u8 [a0 + 9] = 0\n  3197: u8 [a0 + 8] = 0\n  3200: u8 [a0 + 7] = 0\n  3203: u8 [a0 + 3] = 0\n  3206: s1 = 0x20078\n  3211: u8 [a0 + 2] = 0\n  3214: u8 [a0 + 1] = 0\n  3217: u8 [a0 + 0] = 0\n  3219: a1 = i32 [0x20078]\n  3224: u8 [a0 + 6] = 0\n  3227: u8 [a0 + 5] = 0\n  3230: u8 [a0 + 4] = 0\n  3233: jump @105 if a1 <u 4\n      : @53 (gas: 4)\n  3238: i32 a0 = sp + 0x120\n  3242: a1 = 0\n  3244: ecalli 3 // 'call_data_load'\n  3246: fallthrough\n      : @54 (gas: 2)\n  3247: a0 = i32 [sp + 0x13c]\n  3251: jump @61 if a0 >s 140331138\n      : @55 (gas: 1)\n  3258: jump @67 if a0 >s 3659590761\n      : @56 (gas: 1)\n  3266: jump @77 if a0 <=s 2687873533\n      : @57 (gas: 1)\n  3274: jump @93 if a0 == 2687873534\n      : @58 (gas: 1)\n  3282: jump @89 if a0 == 2780915534\n      : @59 (gas: 1)\n  3290: jump @104 if a0 != 3294232917\n      : @60 (gas: 14)\n  3298: ra = 0x26\n  3301: sp = sp + 0xffffffffffffffa0\n  3304: u64 [sp + 0x58] = ra\n  3307: u64 [sp + 0x50] = s0\n  3310: u64 [sp + 0x48] = s1\n  3313: s0 = sp + 0x60\n  3316: sp = sp & 0xffffffffffffffe0\n  3319: u64 [sp + 56] = 0\n  3322: u64 [sp + 48] = 0\n  3325: u64 [sp + 40] = 0\n  3328: u64 [sp + 32] = 0\n  3331: i32 a0 = sp + 0x20\n  3334: ecalli 17 // 'value_transferred'\n  3336: jump @653\n      : @61 [@dyn 19] (gas: 1)\n  3340: jump @72 if a0 >s 1435413322\n      : @62 (gas: 1)\n  3348: jump @80 if a0 <=s 296549180\n      : @63 (gas: 1)\n  3356: jump @94 if a0 == 296549181\n      : @64 (gas: 1)\n  3364: jump @90 if a0 == 599041955\n      : @65 (gas: 1)\n  3372: jump @104 if a0 != 693191810\n      : @66 (gas: 14)\n  3380: ra = 0x28\n  3383: sp = sp + 0xfffffffffffffda0\n  3387: u64 [sp + 0x258] = ra\n  3391: u64 [sp + 0x250] = s0\n  3395: u64 [sp + 0x248] = s1\n  3399: s0 = sp + 0x260\n  3403: sp = sp & 0xffffffffffffffe0\n  3406: u64 [sp + 568] = 0\n  3410: u64 [sp + 560] = 0\n  3414: u64 [sp + 552] = 0\n  3418: u64 [sp + 544] = 0\n  3422: i32 a0 = sp + 0x220\n  3426: ecalli 17 // 'value_transferred'\n  3428: jump @482\n      : @67 [@dyn 20] (gas: 1)\n  3431: jump @83 if a0 <=s 3878033030\n      : @68 (gas: 1)\n  3439: jump @95 if a0 == 3878033031\n      : @69 (gas: 1)\n  3447: jump @91 if a0 == 3879056522\n      : @70 (gas: 1)\n  3455: jump @104 if a0 != 4079303779\n      : @71 (gas: 14)\n  3463: ra = 0x2a\n  3466: sp = sp + 0xffffffffffffff60\n  3470: u64 [sp + 0x98] = ra\n  3474: u64 [sp + 0x90] = s0\n  3478: u64 [sp + 0x88] = s1\n  3482: s0 = sp + 0xa0\n  3486: sp = sp & 0xffffffffffffffe0\n  3489: u64 [sp + 56] = 0\n  3492: u64 [sp + 48] = 0\n  3495: u64 [sp + 40] = 0\n  3498: u64 [sp + 32] = 0\n  3501: i32 a0 = sp + 0x20\n  3504: ecalli 17 // 'value_transferred'\n  3506: jump @727\n      : @72 [@dyn 21] (gas: 1)\n  3510: jump @86 if a0 <=s 1590259572\n      : @73 (gas: 1)\n  3518: jump @96 if a0 == 1590259573\n      : @74 (gas: 1)\n  3526: jump @92 if a0 == 1616468681\n      : @75 (gas: 1)\n  3534: jump @104 if a0 != 1921311766\n      : @76 (gas: 14)\n  3542: ra = 0x2c\n  3545: sp = sp + 0xfffffffffffffec0\n  3549: u64 [sp + 0x138] = ra\n  3553: u64 [sp + 0x130] = s0\n  3557: u64 [sp + 0x128] = s1\n  3561: s0 = sp + 0x140\n  3565: sp = sp & 0xffffffffffffffe0\n  3568: u64 [sp + 280] = 0\n  3572: u64 [sp + 272] = 0\n  3576: u64 [sp + 264] = 0\n  3580: u64 [sp + 256] = 0\n  3584: i32 a0 = sp + 0x100\n  3588: ecalli 17 // 'value_transferred'\n  3590: jump @561\n      : @77 [@dyn 22] (gas: 1)\n  3594: jump @97 if a0 == 2207448625\n      : @78 (gas: 1)\n  3602: jump @104 if a0 != 2291687109\n      : @79 (gas: 1)\n  3610: ra = 46, jump @608\n      : @80 [@dyn 23] (gas: 1)\n  3616: jump @98 if a0 == 140331139\n      : @81 (gas: 1)\n  3624: jump @104 if a0 != 291606966\n      : @82 (gas: 14)\n  3632: ra = 0x30\n  3635: sp = sp + 0xfffffffffffffec0\n  3639: u64 [sp + 0x138] = ra\n  3643: u64 [sp + 0x130] = s0\n  3647: u64 [sp + 0x128] = s1\n  3651: s0 = sp + 0x140\n  3655: sp = sp & 0xffffffffffffffe0\n  3658: u64 [sp + 280] = 0\n  3662: u64 [sp + 272] = 0\n  3666: u64 [sp + 264] = 0\n  3670: u64 [sp + 256] = 0\n  3674: i32 a0 = sp + 0x100\n  3678: ecalli 17 // 'value_transferred'\n  3680: jump @392\n      : @83 [@dyn 24] (gas: 1)\n  3683: jump @99 if a0 == 3659590762\n      : @84 (gas: 1)\n  3691: jump @104 if a0 != 3748163053\n      : @85 (gas: 1)\n  3699: ra = 50, jump @684\n      : @86 [@dyn 25] (gas: 1)\n  3705: jump @100 if a0 == 1435413323\n      : @87 (gas: 1)\n  3713: jump @104 if a0 != 1550084954\n      : @88 (gas: 1)\n  3721: ra = 52, jump @513\n      : @89 [@dyn 26] (gas: 1)\n  3726: ra = 54, jump @637\n      : @90 [@dyn 27] (gas: 14)\n  3732: ra = 0x38\n  3735: sp = sp + 0xffffffffffffff60\n  3739: u64 [sp + 0x98] = ra\n  3743: u64 [sp + 0x90] = s0\n  3747: u64 [sp + 0x88] = s1\n  3751: s0 = sp + 0xa0\n  3755: sp = sp & 0xffffffffffffffe0\n  3758: u64 [sp + 56] = 0\n  3761: u64 [sp + 48] = 0\n  3764: u64 [sp + 40] = 0\n  3767: u64 [sp + 32] = 0\n  3770: i32 a0 = sp + 0x20\n  3773: ecalli 17 // 'value_transferred'\n  3775: jump @434\n      : @91 [@dyn 28] (gas: 1)\n  3778: ra = 58, jump @715\n      : @92 [@dyn 29] (gas: 1)\n  3784: ra = 60, jump @548\n      : @93 [@dyn 30] (gas: 14)\n  3790: ra = 0x3e\n  3793: sp = sp + 0xffffffffffffffa0\n  3796: u64 [sp + 0x58] = ra\n  3799: u64 [sp + 0x50] = s0\n  3802: u64 [sp + 0x48] = s1\n  3805: s0 = sp + 0x60\n  3808: sp = sp & 0xffffffffffffffe0\n  3811: u64 [sp + 56] = 0\n  3814: u64 [sp + 48] = 0\n  3817: u64 [sp + 40] = 0\n  3820: u64 [sp + 32] = 0\n  3823: i32 a0 = sp + 0x20\n  3826: ecalli 17 // 'value_transferred'\n  3828: jump @624\n      : @94 [@dyn 31] (gas: 13)\n  3832: ra = 0x40\n  3835: sp = sp + 0xffffffffffffff80\n  3838: u64 [sp + 0x78] = ra\n  3841: u64 [sp + 0x70] = s0\n  3844: s0 = sp + 0x80\n  3848: sp = sp & 0xffffffffffffffe0\n  3851: u64 [sp + 56] = 0\n  3854: u64 [sp + 48] = 0\n  3857: u64 [sp + 40] = 0\n  3860: u64 [sp + 32] = 0\n  3863: i32 a0 = sp + 0x20\n  3866: ecalli 17 // 'value_transferred'\n  3868: jump @421\n      : @95 [@dyn 32] (gas: 1)\n  3871: ra = 66, jump @704\n      : @96 [@dyn 33] (gas: 14)\n  3877: ra = 0x44\n  3880: sp = sp + 0xffffffffffffff20\n  3884: u64 [sp + 0xd8] = ra\n  3888: u64 [sp + 0xd0] = s0\n  3892: u64 [sp + 0xc8] = s1\n  3896: s0 = sp + 0xe0\n  3900: sp = sp & 0xffffffffffffffe0\n  3903: u64 [sp + 152] = 0\n  3907: u64 [sp + 144] = 0\n  3911: u64 [sp + 136] = 0\n  3915: u64 [sp + 128] = 0\n  3919: i32 a0 = sp + 0x80\n  3923: ecalli 17 // 'value_transferred'\n  3925: jump @524\n      : @97 [@dyn 34] (gas: 14)\n  3929: ra = 0x46\n  3932: sp = sp + 0xfffffffffffffd40\n  3936: u64 [sp + 0x2b8] = ra\n  3940: u64 [sp + 0x2b0] = s0\n  3944: u64 [sp + 0x2a8] = s1\n  3948: s0 = sp + 0x2c0\n  3952: sp = sp & 0xffffffffffffffe0\n  3955: u64 [sp + 632] = 0\n  3959: u64 [sp + 624] = 0\n  3963: u64 [sp + 616] = 0\n  3967: u64 [sp + 608] = 0\n  3971: i32 a0 = sp + 0x260\n  3975: ecalli 17 // 'value_transferred'\n  3977: jump @596\n      : @98 [@dyn 35] (gas: 14)\n  3981: ra = 0x48\n  3984: sp = sp + 0xffffffffffffffa0\n  3987: u64 [sp + 0x58] = ra\n  3990: u64 [sp + 0x50] = s0\n  3993: u64 [sp + 0x48] = s1\n  3996: s0 = sp + 0x60\n  3999: sp = sp & 0xffffffffffffffe0\n  4002: u64 [sp + 56] = 0\n  4005: u64 [sp + 48] = 0\n  4008: u64 [sp + 40] = 0\n  4011: u64 [sp + 32] = 0\n  4014: i32 a0 = sp + 0x20\n  4017: ecalli 17 // 'value_transferred'\n  4019: jump @330\n      : @99 [@dyn 36] (gas: 14)\n  4022: ra = 0x4a\n  4025: sp = sp + 0xffffffffffffffa0\n  4028: u64 [sp + 0x58] = ra\n  4031: u64 [sp + 0x50] = s0\n  4034: u64 [sp + 0x48] = s1\n  4037: s0 = sp + 0x60\n  4040: sp = sp & 0xffffffffffffffe0\n  4043: u64 [sp + 56] = 0\n  4046: u64 [sp + 48] = 0\n  4049: u64 [sp + 40] = 0\n  4052: u64 [sp + 32] = 0\n  4055: i32 a0 = sp + 0x20\n  4058: ecalli 17 // 'value_transferred'\n  4060: jump @671\n      : @100 [@dyn 37] (gas: 7)\n  4064: u64 [sp + 344] = 0\n  4068: u64 [sp + 336] = 0\n  4072: u64 [sp + 328] = 0\n  4076: u64 [sp + 320] = 0\n  4080: i32 a0 = sp + 0x140\n  4084: ecalli 17 // 'value_transferred'\n  4086: fallthrough\n      : @101 (gas: 8)\n  4087: a0 = u64 [sp + 0x150]\n  4091: a1 = u64 [sp + 0x158]\n  4095: a2 = u64 [sp + 0x148]\n  4099: a3 = u64 [sp + 0x140]\n  4103: a1 = a1 | a2\n  4106: a0 = a0 | a3\n  4109: a0 = a0 | a1\n  4112: jump @109 if a0 != 0\n      : @102 (gas: 13)\n  4116: a0 = u32 [s1]\n  4118: u64 [sp + 152] = 0\n  4122: u64 [sp + 144] = 0\n  4126: u64 [sp + 136] = 0\n  4130: u64 [sp + 0x80] = a0\n  4134: u64 [sp + 184] = 0\n  4138: u64 [sp + 176] = 0\n  4142: u64 [sp + 160] = 0x4\n  4147: a0 = sp + 0xc0\n  4151: a1 = sp + 0xa0\n  4155: a2 = sp + 0x80\n  4159: u64 [sp + 168] = 0\n  4163: ra = 76, jump @496\n      : @103 [@dyn 38] (gas: 30)\n  4168: a0 = u64 [sp + 0xc0]\n  4172: u64 [sp + 0x18] = a0\n  4175: t1 = u64 [sp + 0xc8]\n  4179: t2 = u64 [sp + 0xd0]\n  4183: ra = u64 [sp + 0xd8]\n  4187: t0 = u64 [sp + 0xe0]\n  4191: a5 = u64 [sp + 0xe8]\n  4195: s1 = u64 [sp + 0xf0]\n  4199: a4 = u64 [sp + 0xf8]\n  4203: a3 = u64 [sp + 0x100]\n  4207: a1 = u64 [sp + 0x108]\n  4211: a2 = u64 [sp + 0x110]\n  4215: a0 = u64 [sp + 0x118]\n  4219: u64 [sp + 0x38] = a0\n  4222: u64 [sp + 0x30] = a2\n  4225: u64 [sp + 0x28] = a1\n  4228: u64 [sp + 0x20] = a3\n  4231: u64 [sp + 0x58] = a4\n  4234: u64 [sp + 0x50] = s1\n  4237: u64 [sp + 0x48] = a5\n  4240: u64 [sp + 0x40] = t0\n  4243: u64 [sp + 0x78] = ra\n  4246: u64 [sp + 0x70] = t2\n  4249: u64 [sp + 0x68] = t1\n  4252: a0 = sp + 0x60\n  4255: a1 = sp + 0x40\n  4258: a2 = sp + 0x20\n  4261: a3 = u64 [sp + 0x18]\n  4264: u64 [sp + 0x60] = a3\n  4267: ra = 78, jump @866\n      : @104 [@dyn 39] (gas: 2)\n  4273: a1 = i32 [s1]\n  4275: fallthrough\n      : @105 (gas: 1)\n  4276: jump @107 if a1 == 0\n      : @106 (gas: 1)\n  4279: ra = 80, jump @444\n      : @107 [@dyn 40] (gas: 2)\n  4284: a0 = 0\n  4286: ra = 82, jump @0\n      : @108 [@dyn 41] (gas: 5)\n  4291: i32 a1 = a0 + 0\n  4293: a0 = 0\n  4295: a2 = 0\n  4297: ecalli 14 // 'seal_return'\n  4299: fallthrough\n      : @109 (gas: 3)\n  4300: a0 = 0\n  4302: a1 = 0\n  4304: ra = 84, jump @0\n      : @110 [@dyn 42] (gas: 6)\n  4309: i32 a1 = a0 + 0\n  4311: a0 = 0x1\n  4314: a2 = 0\n  4316: ra = 0x56\n  4319: ecalli 14 // 'seal_return'\n  4321: fallthrough\n      : @111 [@dyn 43] (gas: 7)\n  4322: sp = sp + 0xfffffffffffffff0\n  4325: u64 [sp + 0x8] = ra\n  4328: u64 [sp] = s0\n  4330: s0 = a0\n  4332: a0 = 0x40\n  4335: a1 = 0x20\n  4338: ra = 88, jump @0\n      : @112 [@dyn 44] (gas: 100)\n  4343: a1 = u8 [a0 + 0x1]\n  4346: a2 = u8 [a0]\n  4348: a3 = u8 [a0 + 0x2]\n  4351: a4 = u8 [a0 + 0x3]\n  4354: a1 = a1 << 0x8\n  4357: a1 = a1 | a2\n  4360: a3 = a3 << 0x10\n  4363: a4 = a4 << 0x18\n  4366: a3 = a3 | a4\n  4369: a1 = a1 | a3\n  4372: a2 = u8 [a0 + 0x5]\n  4375: a3 = u8 [a0 + 0x4]\n  4378: a4 = u8 [a0 + 0x6]\n  4381: a5 = u8 [a0 + 0x7]\n  4384: a2 = a2 << 0x8\n  4387: a2 = a2 | a3\n  4390: a4 = a4 << 0x10\n  4393: a5 = a5 << 0x18\n  4396: a4 = a4 | a5\n  4399: a2 = a2 | a4\n  4402: a2 = a2 << 0x20\n  4405: t0 = a2 | a1\n  4408: a2 = u8 [a0 + 0x9]\n  4411: a3 = u8 [a0 + 0x8]\n  4414: a4 = u8 [a0 + 0xa]\n  4417: a5 = u8 [a0 + 0xb]\n  4420: a2 = a2 << 0x8\n  4423: a2 = a2 | a3\n  4426: a4 = a4 << 0x10\n  4429: a5 = a5 << 0x18\n  4432: a4 = a4 | a5\n  4435: a2 = a2 | a4\n  4438: a3 = u8 [a0 + 0xd]\n  4441: a4 = u8 [a0 + 0xc]\n  4444: a5 = u8 [a0 + 0xe]\n  4447: a1 = u8 [a0 + 0xf]\n  4450: a3 = a3 << 0x8\n  4453: a3 = a3 | a4\n  4456: a5 = a5 << 0x10\n  4459: a1 = a1 << 0x18\n  4462: a1 = a1 | a5\n  4465: a1 = a1 | a3\n  4468: a1 = a1 << 0x20\n  4471: t1 = a1 | a2\n  4474: a1 = u8 [a0 + 0x11]\n  4477: a3 = u8 [a0 + 0x10]\n  4480: a4 = u8 [a0 + 0x12]\n  4483: a5 = u8 [a0 + 0x13]\n  4486: a1 = a1 << 0x8\n  4489: a1 = a1 | a3\n  4492: a4 = a4 << 0x10\n  4495: a5 = a5 << 0x18\n  4498: a4 = a4 | a5\n  4501: a1 = a1 | a4\n  4504: a3 = u8 [a0 + 0x15]\n  4507: a4 = u8 [a0 + 0x14]\n  4510: a5 = u8 [a0 + 0x16]\n  4513: a2 = u8 [a0 + 0x17]\n  4516: a3 = a3 << 0x8\n  4519: a3 = a3 | a4\n  4522: a5 = a5 << 0x10\n  4525: a2 = a2 << 0x18\n  4528: a2 = a2 | a5\n  4531: a2 = a2 | a3\n  4534: a2 = a2 << 0x20\n  4537: a3 = a2 | a1\n  4540: a1 = u8 [a0 + 0x19]\n  4543: a2 = u8 [a0 + 0x18]\n  4546: a4 = u8 [a0 + 0x1a]\n  4549: a5 = u8 [a0 + 0x1b]\n  4552: a1 = a1 << 0x8\n  4555: a1 = a1 | a2\n  4558: a4 = a4 << 0x10\n  4561: a5 = a5 << 0x18\n  4564: a4 = a4 | a5\n  4567: a1 = a1 | a4\n  4570: a2 = u8 [a0 + 0x1d]\n  4573: a4 = u8 [a0 + 0x1c]\n  4576: a5 = u8 [a0 + 0x1e]\n  4579: a0 = u8 [a0 + 0x1f]\n  4582: a2 = a2 << 0x8\n  4585: a2 = a2 | a4\n  4588: a5 = a5 << 0x10\n  4591: a0 = a0 << 0x18\n  4594: a0 = a0 | a5\n  4597: a0 = a0 | a2\n  4600: a0 = a0 << 0x20\n  4603: a0 = a0 | a1\n  4606: a0 = reverse a0\n  4608: a1 = reverse a3\n  4610: a2 = reverse t1\n  4612: a3 = reverse t0\n  4614: u64 [s0 + 0x18] = a3\n  4617: u64 [s0 + 0x10] = a2\n  4620: u64 [s0 + 0x8] = a1\n  4623: u64 [s0] = a0\n  4625: ra = u64 [sp + 0x8]\n  4628: s0 = u64 [sp]\n  4630: sp = sp + 0x10\n  4633: ret\n      : @113 (gas: 18)\n  4635: sp = sp + 0xffffffffffffff60\n  4639: u64 [sp + 0x98] = ra\n  4643: u64 [sp + 0x90] = s0\n  4647: u64 [sp + 0x88] = s1\n  4651: s0 = sp + 0xa0\n  4655: sp = sp & 0xfffffffffffffff0\n  4658: a2 = u64 [a1 + 0x18]\n  4661: u64 [sp + 0x30] = a2\n  4664: a2 = u64 [a1 + 0x10]\n  4667: u64 [sp + 0x28] = a2\n  4670: a2 = u64 [a1 + 0x8]\n  4673: u64 [sp + 0x20] = a2\n  4676: a1 = u64 [a1]\n  4678: u64 [sp + 0x18] = a1\n  4681: u64 [sp + 0x38] = a0\n  4684: a0 = 0x40\n  4687: a1 = 0x20\n  4690: ra = 90, jump @0\n      : @114 [@dyn 45] (gas: 130)\n  4695: a1 = u8 [a0 + 0x19]\n  4698: a2 = u8 [a0 + 0x18]\n  4701: a3 = u8 [a0 + 0x1a]\n  4704: a4 = u8 [a0 + 0x1b]\n  4707: a1 = a1 << 0x8\n  4710: a1 = a1 | a2\n  4713: a3 = a3 << 0x10\n  4716: a4 = a4 << 0x18\n  4719: a3 = a3 | a4\n  4722: a1 = a1 | a3\n  4725: a2 = u8 [a0 + 0x1d]\n  4728: a3 = u8 [a0 + 0x1c]\n  4731: a4 = u8 [a0 + 0x1e]\n  4734: a5 = u8 [a0 + 0x1f]\n  4737: a2 = a2 << 0x8\n  4740: a2 = a2 | a3\n  4743: a4 = a4 << 0x10\n  4746: a5 = a5 << 0x18\n  4749: a4 = a4 | a5\n  4752: a2 = a2 | a4\n  4755: a2 = a2 << 0x20\n  4758: t0 = a2 | a1\n  4761: a2 = u8 [a0 + 0x11]\n  4764: a3 = u8 [a0 + 0x10]\n  4767: a4 = u8 [a0 + 0x12]\n  4770: a5 = u8 [a0 + 0x13]\n  4773: a2 = a2 << 0x8\n  4776: a2 = a2 | a3\n  4779: a4 = a4 << 0x10\n  4782: a5 = a5 << 0x18\n  4785: a4 = a4 | a5\n  4788: a2 = a2 | a4\n  4791: a3 = u8 [a0 + 0x15]\n  4794: a4 = u8 [a0 + 0x14]\n  4797: a5 = u8 [a0 + 0x16]\n  4800: s1 = u8 [a0 + 0x17]\n  4803: a3 = a3 << 0x8\n  4806: a3 = a3 | a4\n  4809: a5 = a5 << 0x10\n  4812: s1 = s1 << 0x18\n  4815: a5 = a5 | s1\n  4818: a3 = a3 | a5\n  4821: a3 = a3 << 0x20\n  4824: a2 = a2 | a3\n  4827: a3 = u8 [a0 + 0x9]\n  4830: a4 = u8 [a0 + 0x8]\n  4833: a5 = u8 [a0 + 0xa]\n  4836: s1 = u8 [a0 + 0xb]\n  4839: a3 = a3 << 0x8\n  4842: a3 = a3 | a4\n  4845: a5 = a5 << 0x10\n  4848: s1 = s1 << 0x18\n  4851: a5 = a5 | s1\n  4854: a3 = a3 | a5\n  4857: a4 = u8 [a0 + 0xd]\n  4860: a5 = u8 [a0 + 0xc]\n  4863: s1 = u8 [a0 + 0xe]\n  4866: a1 = u8 [a0 + 0xf]\n  4869: a4 = a4 << 0x8\n  4872: a4 = a4 | a5\n  4875: s1 = s1 << 0x10\n  4878: a1 = a1 << 0x18\n  4881: a1 = a1 | s1\n  4884: a1 = a1 | a4\n  4887: a1 = a1 << 0x20\n  4890: a3 = a3 | a1\n  4893: a1 = u8 [a0 + 0x1]\n  4896: a4 = u8 [a0]\n  4898: a5 = u8 [a0 + 0x2]\n  4901: s1 = u8 [a0 + 0x3]\n  4904: a1 = a1 << 0x8\n  4907: a1 = a1 | a4\n  4910: a5 = a5 << 0x10\n  4913: s1 = s1 << 0x18\n  4916: a5 = a5 | s1\n  4919: a1 = a1 | a5\n  4922: a4 = u8 [a0 + 0x5]\n  4925: a5 = u8 [a0 + 0x4]\n  4928: s1 = u8 [a0 + 0x6]\n  4931: a0 = u8 [a0 + 0x7]\n  4934: a4 = a4 << 0x8\n  4937: a4 = a4 | a5\n  4940: s1 = s1 << 0x10\n  4943: a0 = a0 << 0x18\n  4946: a0 = a0 | s1\n  4949: a0 = a0 | a4\n  4952: a0 = a0 << 0x20\n  4955: a0 = a0 | a1\n  4958: t1 = reverse a0\n  4960: t2 = reverse a3\n  4962: s1 = reverse a2\n  4964: a5 = reverse t0\n  4966: a1 = u64 [sp + 0x18]\n  4969: a0 = a1 + 0x1f\n  4972: a1 = a0 <u a1\n  4975: a3 = u64 [sp + 0x20]\n  4978: a2 = a3 + a1\n  4981: a3 = a2 <u a3\n  4984: a3 = a1 if a1 == 0\n  4987: a1 = u64 [sp + 0x28]\n  4990: a3 = a3 + a1\n  4993: a1 = a3 <u a1\n  4996: a4 = u64 [sp + 0x30]\n  4999: a1 = a1 + a4\n  5002: a0 = a0 & 0xffffffffffffffe0\n  5005: a0 = a0 + a5\n  5008: u64 [sp + 0x28] = a5\n  5011: u64 [sp + 0x10] = a0\n  5014: a4 = a0 <u a5\n  5017: a2 = a2 + s1\n  5020: a5 = a2 + a4\n  5023: a2 = a5 ^ s1\n  5026: u64 [sp + 0x30] = s1\n  5029: a0 = a5 <u s1\n  5032: a0 = a4 if a2 == 0\n  5035: a3 = a3 + t2\n  5038: a4 = a3 + a0\n  5041: s1 = a4 <u a3\n  5044: a2 = a3 <u t2\n  5047: a1 = a1 + t1\n  5050: a1 = a1 + a2\n  5053: s1 = s1 + a1\n  5056: a1 = a4 >u 0\n  5058: a2 = s1 >u 0\n  5060: a2 = a1 if s1 == 0\n  5063: a1 = a4 | s1\n  5066: u64 [sp + 0x8] = a5\n  5069: a3 = a5 >u 0\n  5071: a3 = a2 if a1 != 0\n  5074: jump @118 if a3 != 0\n      : @115 (gas: 8)\n  5078: a1 = a4 <u t2\n  5081: a2 = s1 ^ t1\n  5084: a3 = s1 <u t1\n  5087: a3 = a1 if a2 == 0\n  5090: a1 = a4 ^ t2\n  5093: a1 = a1 | a2\n  5096: a0 = a3 if a1 != 0\n  5099: jump @118 if a0 != 0\n      : @116 (gas: 6)\n  5103: a0 = 0x40\n  5106: a1 = 0x20\n  5109: u64 [sp + 0x20] = t2\n  5112: u64 [sp + 0x18] = t1\n  5115: u64 [sp] = a4\n  5117: ra = 92, jump @0\n      : @117 [@dyn 46] (gas: 82)\n  5122: a1 = reverse s1\n  5124: a2 = u64 [sp]\n  5126: a2 = reverse a2\n  5128: a3 = u64 [sp + 0x8]\n  5131: a3 = reverse a3\n  5133: a4 = u64 [sp + 0x10]\n  5136: a4 = reverse a4\n  5138: u8 [a0 + 0x18] = a4\n  5141: a5 = a4 >> 0x38\n  5144: u8 [a0 + 0x1f] = a5\n  5147: a5 = a4 >> 0x30\n  5150: u8 [a0 + 0x1e] = a5\n  5153: a5 = a4 >> 0x28\n  5156: u8 [a0 + 0x1d] = a5\n  5159: a5 = a4 >> 0x20\n  5162: u8 [a0 + 0x1c] = a5\n  5165: a5 = a4 >> 0x18\n  5168: u8 [a0 + 0x1b] = a5\n  5171: a5 = a4 >> 0x10\n  5174: u8 [a0 + 0x1a] = a5\n  5177: a4 = a4 >> 0x8\n  5180: u8 [a0 + 0x19] = a4\n  5183: u8 [a0 + 0x10] = a3\n  5186: a4 = a3 >> 0x38\n  5189: u8 [a0 + 0x17] = a4\n  5192: a4 = a3 >> 0x30\n  5195: u8 [a0 + 0x16] = a4\n  5198: a4 = a3 >> 0x28\n  5201: u8 [a0 + 0x15] = a4\n  5204: a4 = a3 >> 0x20\n  5207: u8 [a0 + 0x14] = a4\n  5210: a4 = a3 >> 0x18\n  5213: u8 [a0 + 0x13] = a4\n  5216: a4 = a3 >> 0x10\n  5219: u8 [a0 + 0x12] = a4\n  5222: a3 = a3 >> 0x8\n  5225: u8 [a0 + 0x11] = a3\n  5228: u8 [a0 + 0x8] = a2\n  5231: a3 = a2 >> 0x38\n  5234: u8 [a0 + 0xf] = a3\n  5237: a3 = a2 >> 0x30\n  5240: u8 [a0 + 0xe] = a3\n  5243: a3 = a2 >> 0x28\n  5246: u8 [a0 + 0xd] = a3\n  5249: a3 = a2 >> 0x20\n  5252: u8 [a0 + 0xc] = a3\n  5255: a3 = a2 >> 0x18\n  5258: u8 [a0 + 0xb] = a3\n  5261: a3 = a2 >> 0x10\n  5264: u8 [a0 + 0xa] = a3\n  5267: a2 = a2 >> 0x8\n  5270: u8 [a0 + 0x9] = a2\n  5273: u8 [a0] = a1\n  5275: a2 = a1 >> 0x38\n  5278: u8 [a0 + 0x7] = a2\n  5281: a2 = a1 >> 0x30\n  5284: u8 [a0 + 0x6] = a2\n  5287: a2 = a1 >> 0x28\n  5290: u8 [a0 + 0x5] = a2\n  5293: a2 = a1 >> 0x20\n  5296: u8 [a0 + 0x4] = a2\n  5299: a2 = a1 >> 0x18\n  5302: u8 [a0 + 0x3] = a2\n  5305: a2 = a1 >> 0x10\n  5308: u8 [a0 + 0x2] = a2\n  5311: a1 = a1 >> 0x8\n  5314: u8 [a0 + 0x1] = a1\n  5317: a0 = u64 [sp + 0x38]\n  5320: a1 = u64 [sp + 0x28]\n  5323: u64 [a0] = a1\n  5325: a1 = u64 [sp + 0x18]\n  5328: u64 [a0 + 0x18] = a1\n  5331: a1 = u64 [sp + 0x30]\n  5334: u64 [a0 + 0x8] = a1\n  5337: a1 = u64 [sp + 0x20]\n  5340: u64 [a0 + 0x10] = a1\n  5343: sp = s0 + 0xffffffffffffff60\n  5347: ra = u64 [sp + 0x98]\n  5351: s0 = u64 [sp + 0x90]\n  5355: s1 = u64 [sp + 0x88]\n  5359: sp = sp + 0xa0\n  5363: ret\n      : @118 (gas: 8)\n  5365: u64 [sp + 112] = 0\n  5368: u64 [sp + 104] = 0\n  5371: u64 [sp + 96] = 0\n  5374: a0 = 0x4e487b7100000000\n  5384: a1 = sp + 0x60\n  5387: u64 [sp + 0x78] = a0\n  5390: a0 = 0\n  5392: ra = 94, jump @23\n      : @119 [@dyn 47] (gas: 7)\n  5397: u64 [sp + 88] = 0\n  5400: u64 [sp + 80] = 0\n  5403: u64 [sp + 64] = 0x41\n  5407: a0 = 0x4\n  5410: a1 = sp + 0x40\n  5413: u64 [sp + 72] = 0\n  5416: ra = 96, jump @23\n      : @120 [@dyn 48] (gas: 3)\n  5421: a1 = 0x24\n  5424: a0 = 0\n  5426: ra = 98, jump @0\n      : @121 [@dyn 49] (gas: 6)\n  5431: i32 a1 = a0 + 0\n  5433: a0 = 0x1\n  5436: a2 = 0x24\n  5439: ra = 0x64\n  5442: ecalli 14 // 'seal_return'\n  5444: fallthrough\n      : @122 [@dyn 50] (gas: 8)\n  5445: a2 = u32 [a1 + 0x10]\n  5448: a3 = u64 [a1 + 0x8]\n  5451: a1 = u64 [a1]\n  5453: u64 [a0 + 24] = 0\n  5456: u64 [a0 + 0x10] = a2\n  5459: u64 [a0 + 0x8] = a3\n  5462: u64 [a0] = a1\n  5464: ret\n      : @123 (gas: 16)\n  5466: sp = sp + 0xfffffffffffffed0\n  5470: u64 [sp + 0x128] = ra\n  5474: u64 [sp + 0x120] = s0\n  5478: u64 [sp + 0x118] = s1\n  5482: s0 = sp + 0x130\n  5486: sp = sp & 0xfffffffffffffff0\n  5489: a4 = u64 [a2 + 0x18]\n  5492: a5 = u64 [a2 + 0x10]\n  5495: s1 = u64 [a2 + 0x8]\n  5498: u64 [sp + 0x80] = a4\n  5502: u64 [sp + 0x58] = a5\n  5505: a4 = a4 | a5\n  5508: a5 = s1 <u 0x1\n  5511: a5 = 0 if a4 != 0\n  5513: u64 [sp + 0x8] = a0\n  5516: jump @138 if a5 == 0\n      : @124 (gas: 36)\n  5520: a0 = u64 [a3 + 0x18]\n  5523: u64 [sp + 0x20] = a0\n  5526: a0 = u64 [a3 + 0x10]\n  5529: u64 [sp + 0x28] = a0\n  5532: a0 = u64 [a3 + 0x8]\n  5535: u64 [sp + 0x10] = a0\n  5538: a0 = u64 [a3]\n  5540: u64 [sp + 0x18] = a0\n  5543: a2 = u64 [a2]\n  5545: a0 = u64 [a1 + 0x18]\n  5548: u64 [sp + 0x68] = a0\n  5551: a0 = u64 [a1 + 0x10]\n  5554: u64 [sp + 0x70] = a0\n  5557: a0 = u64 [a1 + 0x8]\n  5560: u64 [sp + 0x60] = a0\n  5563: a0 = u64 [a1]\n  5565: u64 [sp + 0x88] = a0\n  5569: a0 = a2 + 0x1f\n  5572: u64 [sp + 0x50] = a2\n  5575: a1 = a0 <u a2\n  5578: a1 = a1 + s1\n  5581: a1 = a1 & 0x1\n  5584: a0 = a0 & 0xffffffffffffffe0\n  5587: a2 = a0 + 0x20\n  5590: a0 = a2 <u a0\n  5593: a3 = a1 + a0\n  5596: a4 = a3 <u a1\n  5599: a4 = a0 if a0 == 0\n  5602: u64 [sp + 232] = 0\n  5606: u64 [sp + 0xd0] = a2\n  5610: u64 [sp + 0xd8] = a3\n  5614: a0 = sp + 0xf0\n  5618: a1 = sp + 0xd0\n  5622: u64 [sp + 0xe0] = a4\n  5626: u64 [sp + 0x48] = s1\n  5629: ra = 102, jump @113\n      : @125 [@dyn 51] (gas: 15)\n  5634: a0 = u64 [sp + 0x108]\n  5638: a2 = u64 [sp + 0x100]\n  5642: a1 = u64 [sp + 0xf8]\n  5646: a3 = u64 [sp + 0xf0]\n  5650: u64 [sp + 0x78] = a0\n  5653: u64 [sp + 0x38] = a1\n  5656: a0 = a0 | a1\n  5659: a1 = a3 | a2\n  5662: a1 = a1 | a0\n  5665: a1 = a1 >> 0x20\n  5668: u64 [sp + 0x40] = a2\n  5671: a0 = a0 | a2\n  5674: a0 = a0 << 0x20\n  5677: a0 = a0 | a1\n  5680: jump @137 if a0 != 0\n      : @126 (gas: 4)\n  5684: i32 a0 = a3 + 0\n  5686: a1 = 0x20\n  5689: u64 [sp + 0x30] = a3\n  5692: ra = 104, jump @0\n      : @127 [@dyn 52] (gas: 105)\n  5697: ra = u64 [sp + 0x50]\n  5700: a1 = u64 [sp + 0x88]\n  5704: a1 = a1 + ra\n  5707: a3 = a1 <u ra\n  5710: s1 = u64 [sp + 0x48]\n  5713: a2 = u64 [sp + 0x60]\n  5716: a2 = a2 + s1\n  5719: a4 = a2 + a3\n  5722: a5 = a4 ^ s1\n  5725: a2 = a4 <u s1\n  5728: a2 = a3 if a5 == 0\n  5731: a5 = u64 [sp + 0x10]\n  5734: t1 = a4 ^ a5\n  5737: a4 = a5 <u a4\n  5740: a5 = u64 [sp + 0x18]\n  5743: t0 = a5 <u a1\n  5746: a1 = u64 [sp + 0x58]\n  5749: a5 = u64 [sp + 0x70]\n  5752: a5 = a5 + a1\n  5755: t0 = a4 if t1 != 0\n  5758: a3 = a5 <u a1\n  5761: t2 = u64 [sp + 0x80]\n  5765: a4 = u64 [sp + 0x68]\n  5768: a4 = a4 + t2\n  5771: a3 = a3 + a4\n  5774: a2 = a2 + a5\n  5777: a4 = a2 <u a5\n  5780: a3 = a3 + a4\n  5783: a5 = u64 [sp + 0x20]\n  5786: a4 = a3 ^ a5\n  5789: a3 = a5 <u a3\n  5792: t1 = u64 [sp + 0x28]\n  5795: a5 = t1 <u a2\n  5798: a3 = a5 if a4 == 0\n  5801: a2 = a2 ^ t1\n  5804: a2 = a2 | a4\n  5807: t0 = a3 if a2 != 0\n  5810: a2 = reverse ra\n  5812: a3 = a2 >> 0x38\n  5815: u8 [a0 + 0x1f] = a3\n  5818: a3 = a2 >> 0x30\n  5821: u8 [a0 + 0x1e] = a3\n  5824: a3 = a2 >> 0x28\n  5827: u8 [a0 + 0x1d] = a3\n  5830: a3 = a2 >> 0x20\n  5833: u8 [a0 + 0x1c] = a3\n  5836: a3 = a2 >> 0x18\n  5839: u8 [a0 + 0x1b] = a3\n  5842: a3 = a2 >> 0x10\n  5845: u8 [a0 + 0x1a] = a3\n  5848: a3 = a2 >> 0x8\n  5851: u8 [a0 + 0x19] = a3\n  5854: a3 = reverse s1\n  5856: u8 [a0 + 0x18] = a2\n  5859: a2 = a3 >> 0x38\n  5862: u8 [a0 + 0x17] = a2\n  5865: a2 = a3 >> 0x30\n  5868: u8 [a0 + 0x16] = a2\n  5871: a2 = a3 >> 0x28\n  5874: u8 [a0 + 0x15] = a2\n  5877: a2 = a3 >> 0x20\n  5880: u8 [a0 + 0x14] = a2\n  5883: a2 = a3 >> 0x18\n  5886: u8 [a0 + 0x13] = a2\n  5889: a2 = a3 >> 0x10\n  5892: u8 [a0 + 0x12] = a2\n  5895: a2 = reverse a1\n  5897: u8 [a0 + 0x10] = a3\n  5900: a3 = a3 >> 0x8\n  5903: u8 [a0 + 0x11] = a3\n  5906: a3 = a2 >> 0x38\n  5909: u8 [a0 + 0xf] = a3\n  5912: a3 = a2 >> 0x30\n  5915: u8 [a0 + 0xe] = a3\n  5918: a3 = a2 >> 0x28\n  5921: u8 [a0 + 0xd] = a3\n  5924: a3 = a2 >> 0x20\n  5927: u8 [a0 + 0xc] = a3\n  5930: a3 = a2 >> 0x18\n  5933: u8 [a0 + 0xb] = a3\n  5936: a3 = a2 >> 0x10\n  5939: u8 [a0 + 0xa] = a3\n  5942: a3 = reverse t2\n  5944: u8 [a0 + 0x8] = a2\n  5947: a2 = a2 >> 0x8\n  5950: u8 [a0 + 0x9] = a2\n  5953: a2 = a3 >> 0x38\n  5956: u8 [a0 + 0x7] = a2\n  5959: a2 = a3 >> 0x30\n  5962: u8 [a0 + 0x6] = a2\n  5965: a2 = a3 >> 0x28\n  5968: u8 [a0 + 0x5] = a2\n  5971: a2 = a3 >> 0x20\n  5974: u8 [a0 + 0x4] = a2\n  5977: a2 = a3 >> 0x18\n  5980: u8 [a0 + 0x3] = a2\n  5983: a2 = a3 >> 0x10\n  5986: u8 [a0 + 0x2] = a2\n  5989: u8 [a0] = a3\n  5991: a3 = a3 >> 0x8\n  5994: u8 [a0 + 0x1] = a3\n  5997: t2 = s1\n  5999: s1 = u64 [sp + 0x88]\n  6003: a5 = u64 [sp + 0x70]\n  6006: jump @142 if t0 != 0\n      : @128 (gas: 11)\n  6010: t1 = a1\n  6012: a2 = u64 [sp + 0x40]\n  6015: a0 = u64 [sp + 0x78]\n  6018: a0 = a0 | a2\n  6021: a1 = 0xffffffe0\n  6031: a4 = u64 [sp + 0x30]\n  6034: a1 = a4 <u a1\n  6037: a3 = u64 [sp + 0x38]\n  6040: a1 = 0 if a3 != 0\n  6042: a1 = 0 if a0 != 0\n  6044: jump @137 if a1 == 0\n      : @129 (gas: 10)\n  6048: a0 = s1 | a5\n  6051: a1 = u64 [sp + 0x68]\n  6054: t0 = u64 [sp + 0x60]\n  6057: a1 = t0 | a1\n  6060: a0 = a0 | a1\n  6063: a0 = a0 >> 0x20\n  6066: a1 = a1 | a5\n  6069: a1 = a1 << 0x20\n  6072: a0 = a0 | a1\n  6075: jump @137 if a0 != 0\n      : @130 (gas: 9)\n  6079: a0 = ra | t1\n  6082: a1 = u64 [sp + 0x80]\n  6086: a1 = t2 | a1\n  6089: a0 = a0 | a1\n  6092: a0 = a0 >> 0x20\n  6095: a1 = a1 | t1\n  6098: a1 = a1 << 0x20\n  6101: a0 = a0 | a1\n  6104: jump @137 if a0 != 0\n      : @131 (gas: 15)\n  6108: a5 = a4 + 0x20\n  6111: u64 [sp + 0x28] = a5\n  6114: a0 = a5 <u a4\n  6117: a1 = a3 + a0\n  6120: u64 [sp + 0x60] = a1\n  6123: a1 = a1 <u a3\n  6126: a1 = a0 if a0 == 0\n  6129: a1 = a1 + a2\n  6132: u64 [sp + 0x68] = a1\n  6135: a0 = a1 <u a2\n  6138: u64 [sp + 0x70] = a0\n  6141: i32 a0 = a5 + 0\n  6143: i32 s1 = ra + 0\n  6145: a1 = s1\n  6147: ra = 106, jump @0\n      : @132 [@dyn 53] (gas: 4)\n  6152: u64 [sp + 0x20] = a0\n  6155: a0 = i32 [sp + 0x88]\n  6159: a1 = s1\n  6161: ra = 108, jump @0\n      : @133 [@dyn 54] (gas: 5)\n  6166: a1 = a0\n  6168: a0 = u64 [sp + 0x20]\n  6171: s1 = u64 [sp + 0x50]\n  6174: a2 = s1\n  6176: ra = 110, jump @8\n      : @134 [@dyn 55] (gas: 31)\n  6181: a1 = u64 [sp + 0x28]\n  6184: a0 = a1 + s1\n  6187: a1 = a0 <u a1\n  6190: a2 = u64 [sp + 0x48]\n  6193: a4 = u64 [sp + 0x60]\n  6196: a2 = a2 + a4\n  6199: a2 = a2 + a1\n  6202: a3 = a2 ^ a4\n  6205: a4 = a2 <u a4\n  6208: a4 = a1 if a3 == 0\n  6211: a1 = u64 [sp + 0x58]\n  6214: a5 = u64 [sp + 0x68]\n  6217: a1 = a1 + a5\n  6220: a4 = a4 + a1\n  6223: a3 = a4 <u a1\n  6226: a1 = a1 <u a5\n  6229: a5 = u64 [sp + 0x80]\n  6233: s1 = u64 [sp + 0x78]\n  6236: a5 = a5 + s1\n  6239: s1 = u64 [sp + 0x70]\n  6242: a5 = a5 + s1\n  6245: a1 = a1 + a5\n  6248: a1 = a1 + a3\n  6251: a3 = a0 | a4\n  6254: a1 = a1 | a2\n  6257: a3 = a3 | a1\n  6260: a3 = a3 >> 0x20\n  6263: a1 = a1 | a4\n  6266: a1 = a1 << 0x20\n  6269: a1 = a1 | a3\n  6272: jump @137 if a1 != 0\n      : @135 (gas: 3)\n  6276: i32 a0 = a0 + 0\n  6278: a1 = 0x20\n  6281: ra = 112, jump @0\n      : @136 [@dyn 56] (gas: 47)\n  6286: u8 [a0 + 31] = 0\n  6289: u8 [a0 + 30] = 0\n  6292: u8 [a0 + 29] = 0\n  6295: u8 [a0 + 28] = 0\n  6298: u8 [a0 + 27] = 0\n  6301: u8 [a0 + 26] = 0\n  6304: u8 [a0 + 25] = 0\n  6307: u8 [a0 + 24] = 0\n  6310: u8 [a0 + 23] = 0\n  6313: u8 [a0 + 22] = 0\n  6316: u8 [a0 + 21] = 0\n  6319: u8 [a0 + 20] = 0\n  6322: u8 [a0 + 19] = 0\n  6325: u8 [a0 + 18] = 0\n  6328: u8 [a0 + 17] = 0\n  6331: u8 [a0 + 16] = 0\n  6334: u8 [a0 + 15] = 0\n  6337: u8 [a0 + 14] = 0\n  6340: u8 [a0 + 13] = 0\n  6343: u8 [a0 + 12] = 0\n  6346: u8 [a0 + 11] = 0\n  6349: u8 [a0 + 10] = 0\n  6352: u8 [a0 + 9] = 0\n  6355: u8 [a0 + 8] = 0\n  6358: u8 [a0 + 7] = 0\n  6361: u8 [a0 + 6] = 0\n  6364: u8 [a0 + 5] = 0\n  6367: u8 [a0 + 4] = 0\n  6370: u8 [a0 + 3] = 0\n  6373: u8 [a0 + 2] = 0\n  6376: u8 [a0 + 1] = 0\n  6379: u8 [a0 + 0] = 0\n  6381: a0 = u64 [sp + 0x8]\n  6384: a1 = u64 [sp + 0x30]\n  6387: u64 [a0] = a1\n  6389: a1 = u64 [sp + 0x78]\n  6392: u64 [a0 + 0x18] = a1\n  6395: a1 = u64 [sp + 0x38]\n  6398: u64 [a0 + 0x8] = a1\n  6401: a1 = u64 [sp + 0x40]\n  6404: u64 [a0 + 0x10] = a1\n  6407: sp = s0 + 0xfffffffffffffed0\n  6411: ra = u64 [sp + 0x128]\n  6415: s0 = u64 [sp + 0x120]\n  6419: s1 = u64 [sp + 0x118]\n  6423: sp = sp + 0x130\n  6427: ret\n      : @137 (gas: 1)\n  6429: trap\n      : @138 (gas: 8)\n  6430: u64 [sp + 192] = 0\n  6434: u64 [sp + 184] = 0\n  6438: u64 [sp + 176] = 0\n  6442: a0 = 0x4e487b7100000000\n  6452: a1 = sp + 0xb0\n  6456: u64 [sp + 0xc8] = a0\n  6460: a0 = 0\n  6462: ra = 114, jump @23\n      : @139 [@dyn 57] (gas: 7)\n  6467: u64 [sp + 168] = 0\n  6471: u64 [sp + 160] = 0\n  6475: u64 [sp + 144] = 0x41\n  6480: a0 = 0x4\n  6483: a1 = sp + 0x90\n  6487: u64 [sp + 152] = 0\n  6491: ra = 116, jump @23\n      : @140 [@dyn 58] (gas: 3)\n  6496: a1 = 0x24\n  6499: a0 = 0\n  6501: ra = 118, jump @0\n      : @141 [@dyn 59] (gas: 5)\n  6506: i32 a1 = a0 + 0\n  6508: a0 = 0x1\n  6511: a2 = 0x24\n  6514: ecalli 14 // 'seal_return'\n  6516: fallthrough\n      : @142 (gas: 3)\n  6517: a0 = 0\n  6519: a1 = 0\n  6521: ra = 120, jump @0\n      : @143 [@dyn 60] (gas: 6)\n  6526: i32 a1 = a0 + 0\n  6528: a0 = 0x1\n  6531: a2 = 0\n  6533: ra = 0x7a\n  6536: ecalli 14 // 'seal_return'\n  6538: fallthrough\n      : @144 [@dyn 61] (gas: 37)\n  6539: sp = sp + 0xffffffffffffff20\n  6543: u64 [sp + 0xd8] = ra\n  6547: u64 [sp + 0xd0] = s0\n  6551: u64 [sp + 0xc8] = s1\n  6555: s0 = sp + 0xe0\n  6559: sp = sp & 0xfffffffffffffff0\n  6562: ra = u64 [a1]\n  6564: t1 = u64 [a2 + 0x8]\n  6567: t2 = u64 [a1 + 0x8]\n  6570: a4 = u64 [a2]\n  6572: a3 = ra + 0x1f\n  6575: t0 = a3 <u ra\n  6578: a5 = t2 + t0\n  6581: u64 [sp + 0x20] = a4\n  6584: a3 = a3 <u a4\n  6587: s1 = a5 ^ t1\n  6590: a4 = a5 <u t1\n  6593: a4 = a3 if s1 == 0\n  6596: s1 = u64 [a1 + 0x10]\n  6599: u64 [sp + 0x38] = t2\n  6602: a3 = a5 <u t2\n  6605: a3 = t0 if t0 == 0\n  6608: t0 = u64 [a2 + 0x18]\n  6611: a5 = u64 [a1 + 0x18]\n  6614: t2 = u64 [a2 + 0x10]\n  6617: a3 = a3 + s1\n  6620: a1 = a3 <u s1\n  6623: u64 [sp + 0x30] = a5\n  6626: a1 = a1 + a5\n  6629: a2 = a1 ^ t0\n  6632: a1 = a1 <s t0\n  6635: a5 = a3 <u t2\n  6638: a1 = a5 if a2 == 0\n  6641: a3 = a3 ^ t2\n  6644: a2 = a2 | a3\n  6647: a4 = a1 if a2 != 0\n  6650: jump @150 if a4 == 0\n      : @145 (gas: 15)\n  6654: u64 [sp] = t2\n  6656: u64 [sp + 0x8] = t0\n  6659: u64 [sp + 0x18] = a0\n  6662: u64 [sp + 0x28] = t1\n  6665: a0 = ra | s1\n  6668: a1 = u64 [sp + 0x38]\n  6671: a2 = u64 [sp + 0x30]\n  6674: a1 = a1 | a2\n  6677: a0 = a0 | a1\n  6680: a0 = a0 >> 0x20\n  6683: u64 [sp + 0x10] = s1\n  6686: a1 = a1 | s1\n  6689: a1 = a1 << 0x20\n  6692: a0 = a0 | a1\n  6695: jump @149 if a0 != 0\n      : @146 (gas: 4)\n  6699: i32 a0 = ra + 0\n  6701: a1 = 0x20\n  6704: s1 = ra\n  6706: ra = 124, jump @0\n      : @147 [@dyn 62] (gas: 124)\n  6711: a1 = u8 [a0 + 0x1]\n  6714: a2 = u8 [a0]\n  6716: a3 = u8 [a0 + 0x2]\n  6719: a4 = u8 [a0 + 0x3]\n  6722: a1 = a1 << 0x8\n  6725: a1 = a1 | a2\n  6728: a3 = a3 << 0x10\n  6731: a4 = a4 << 0x18\n  6734: a3 = a3 | a4\n  6737: a1 = a1 | a3\n  6740: a2 = u8 [a0 + 0x5]\n  6743: a3 = u8 [a0 + 0x4]\n  6746: a4 = u8 [a0 + 0x6]\n  6749: a5 = u8 [a0 + 0x7]\n  6752: a2 = a2 << 0x8\n  6755: a2 = a2 | a3\n  6758: a4 = a4 << 0x10\n  6761: a5 = a5 << 0x18\n  6764: a4 = a4 | a5\n  6767: a2 = a2 | a4\n  6770: a2 = a2 << 0x20\n  6773: t0 = a2 | a1\n  6776: a2 = u8 [a0 + 0x9]\n  6779: a3 = u8 [a0 + 0x8]\n  6782: a4 = u8 [a0 + 0xa]\n  6785: a5 = u8 [a0 + 0xb]\n  6788: a2 = a2 << 0x8\n  6791: a2 = a2 | a3\n  6794: a4 = a4 << 0x10\n  6797: a5 = a5 << 0x18\n  6800: a4 = a4 | a5\n  6803: a2 = a2 | a4\n  6806: a3 = u8 [a0 + 0xd]\n  6809: a4 = u8 [a0 + 0xc]\n  6812: a5 = u8 [a0 + 0xe]\n  6815: a1 = u8 [a0 + 0xf]\n  6818: a3 = a3 << 0x8\n  6821: a3 = a3 | a4\n  6824: a5 = a5 << 0x10\n  6827: a1 = a1 << 0x18\n  6830: a1 = a1 | a5\n  6833: a1 = a1 | a3\n  6836: a1 = a1 << 0x20\n  6839: t1 = a1 | a2\n  6842: a1 = u8 [a0 + 0x11]\n  6845: a3 = u8 [a0 + 0x10]\n  6848: a4 = u8 [a0 + 0x12]\n  6851: a5 = u8 [a0 + 0x13]\n  6854: a1 = a1 << 0x8\n  6857: a1 = a1 | a3\n  6860: a4 = a4 << 0x10\n  6863: a5 = a5 << 0x18\n  6866: a4 = a4 | a5\n  6869: a1 = a1 | a4\n  6872: a3 = u8 [a0 + 0x15]\n  6875: a4 = u8 [a0 + 0x14]\n  6878: a5 = u8 [a0 + 0x16]\n  6881: a2 = u8 [a0 + 0x17]\n  6884: a3 = a3 << 0x8\n  6887: a3 = a3 | a4\n  6890: a5 = a5 << 0x10\n  6893: a2 = a2 << 0x18\n  6896: a2 = a2 | a5\n  6899: a2 = a2 | a3\n  6902: a2 = a2 << 0x20\n  6905: a3 = a2 | a1\n  6908: a1 = u8 [a0 + 0x19]\n  6911: a2 = u8 [a0 + 0x18]\n  6914: a4 = u8 [a0 + 0x1a]\n  6917: a5 = u8 [a0 + 0x1b]\n  6920: a1 = a1 << 0x8\n  6923: a1 = a1 | a2\n  6926: a4 = a4 << 0x10\n  6929: a5 = a5 << 0x18\n  6932: a4 = a4 | a5\n  6935: a1 = a1 | a4\n  6938: a2 = u8 [a0 + 0x1d]\n  6941: a4 = u8 [a0 + 0x1c]\n  6944: a5 = u8 [a0 + 0x1e]\n  6947: a0 = u8 [a0 + 0x1f]\n  6950: a2 = a2 << 0x8\n  6953: a2 = a2 | a4\n  6956: a5 = a5 << 0x10\n  6959: a0 = a0 << 0x18\n  6962: a0 = a0 | a5\n  6965: a0 = a0 | a2\n  6968: a0 = a0 << 0x20\n  6971: a0 = a0 | a1\n  6974: t2 = reverse a0\n  6976: ra = reverse a3\n  6978: a1 = reverse t1\n  6980: a2 = reverse t0\n  6982: a3 = s1 + 0x20\n  6985: a5 = a3 <u s1\n  6988: a0 = u64 [sp + 0x38]\n  6991: a4 = a0 + a5\n  6994: s1 = a4 <u a0\n  6997: s1 = a5 if a5 == 0\n  7000: a0 = u64 [sp + 0x10]\n  7003: s1 = s1 + a0\n  7006: a5 = s1 <u a0\n  7009: a0 = u64 [sp + 0x30]\n  7012: a5 = a5 + a0\n  7015: a0 = u64 [sp + 0x8]\n  7018: u64 [sp + 0x58] = a0\n  7021: a0 = u64 [sp]\n  7023: u64 [sp + 0x50] = a0\n  7026: a0 = u64 [sp + 0x28]\n  7029: u64 [sp + 0x48] = a0\n  7032: a0 = u64 [sp + 0x20]\n  7035: u64 [sp + 0x40] = a0\n  7038: u64 [sp + 0x88] = a4\n  7042: u64 [sp + 0x80] = a3\n  7046: u64 [sp + 0x90] = s1\n  7050: u64 [sp + 0x98] = a5\n  7054: u64 [sp + 0x78] = a2\n  7057: u64 [sp + 0x70] = a1\n  7060: u64 [sp + 0x68] = ra\n  7063: a0 = sp + 0xa0\n  7067: a1 = sp + 0x80\n  7071: a2 = sp + 0x60\n  7074: a3 = sp + 0x40\n  7077: u64 [sp + 0x60] = t2\n  7080: ra = 126, jump @123\n      : @148 [@dyn 63] (gas: 15)\n  7085: a0 = u64 [sp + 0xb0]\n  7089: a1 = u64 [sp + 0xb8]\n  7093: a2 = u64 [sp + 0xa0]\n  7097: a3 = u64 [sp + 0xa8]\n  7101: a4 = u64 [sp + 0x18]\n  7104: u64 [a4 + 0x10] = a0\n  7107: u64 [a4 + 0x18] = a1\n  7110: u64 [a4] = a2\n  7112: u64 [a4 + 0x8] = a3\n  7115: sp = s0 + 0xffffffffffffff20\n  7119: ra = u64 [sp + 0xd8]\n  7123: s0 = u64 [sp + 0xd0]\n  7127: s1 = u64 [sp + 0xc8]\n  7131: sp = sp + 0xe0\n  7135: ret\n      : @149 (gas: 1)\n  7137: trap\n      : @150 (gas: 3)\n  7138: a0 = 0\n  7140: a1 = 0\n  7142: ra = 128, jump @0\n      : @151 [@dyn 64] (gas: 6)\n  7148: i32 a1 = a0 + 0\n  7150: a0 = 0x1\n  7153: a2 = 0\n  7155: ra = 0x82\n  7159: ecalli 14 // 'seal_return'\n  7161: fallthrough\n      : @152 [@dyn 65] (gas: 42)\n  7162: sp = sp + 0xfffffffffffffab0\n  7166: u64 [sp + 0x548] = ra\n  7170: u64 [sp + 0x540] = s0\n  7174: u64 [sp + 0x538] = s1\n  7178: s0 = sp + 0x550\n  7182: sp = sp & 0xfffffffffffffff0\n  7185: s1 = u64 [a2 + 0x8]\n  7188: t2 = u64 [a1 + 0x8]\n  7191: a5 = u64 [a2]\n  7193: ra = u64 [a1]\n  7195: t1 = u64 [a2 + 0x10]\n  7198: a4 = s1 ^ t2\n  7201: a3 = s1 <u t2\n  7204: t0 = a5 <u ra\n  7207: a3 = t0 if a4 == 0\n  7210: u64 [sp + 0x408] = s1\n  7214: a4 = s1 - t2\n  7217: a4 = a4 - t0\n  7220: u64 [sp + 0x400] = a5\n  7224: a5 = a5 - ra\n  7227: a5 = a5 <u 0xe0\n  7231: a5 = a5 ^ 0x1\n  7234: t0 = u64 [a1 + 0x10]\n  7237: s1 = a4 >u 0\n  7239: a5 = s1 if a4 != 0\n  7242: a4 = u64 [a2 + 0x18]\n  7245: s1 = u64 [a1 + 0x18]\n  7248: a1 = t1 - t0\n  7251: a2 = a1 - a3\n  7254: a1 = a1 <u a3\n  7257: u64 [sp + 0x3f8] = t1\n  7261: a3 = t1 <u t0\n  7264: u64 [sp + 0x3f0] = a4\n  7268: a4 = a4 - s1\n  7271: a4 = a4 - a3\n  7274: a4 = a4 - a1\n  7277: a1 = a4 >s 0\n  7279: a3 = a2 >u 0\n  7281: a3 = a1 if a4 != 0\n  7284: a2 = a2 | a4\n  7287: a5 = a3 if a2 != 0\n  7290: jump @154 if a5 != 0\n      : @153 (gas: 1)\n  7293: jump @186\n      : @154 (gas: 12)\n  7296: u64 [sp + 0x3d0] = a0\n  7300: a0 = ra | t0\n  7303: u64 [sp + 0x420] = t2\n  7307: u64 [sp + 0x3e0] = s1\n  7311: a1 = t2 | s1\n  7314: a0 = a0 | a1\n  7317: a0 = a0 >> 0x20\n  7320: u64 [sp + 0x3e8] = t0\n  7324: a1 = a1 | t0\n  7327: a1 = a1 << 0x20\n  7330: a0 = a0 | a1\n  7333: jump @156 if a0 == 0\n      : @155 (gas: 1)\n  7336: jump @185\n      : @156 (gas: 5)\n  7339: i32 a0 = ra + 0\n  7341: a1 = 0x20\n  7344: u64 [sp + 0x418] = a0\n  7348: u64 [sp + 0x428] = ra\n  7352: ra = 132, jump @0\n      : @157 [@dyn 66] (gas: 54)\n  7358: a1 = u8 [a0 + 0x9]\n  7361: a2 = u8 [a0 + 0x8]\n  7364: a3 = u8 [a0 + 0xa]\n  7367: a4 = u8 [a0 + 0xb]\n  7370: a1 = a1 << 0x8\n  7373: a1 = a1 | a2\n  7376: a3 = a3 << 0x10\n  7379: a4 = a4 << 0x18\n  7382: a3 = a3 | a4\n  7385: a1 = a1 | a3\n  7388: a2 = u8 [a0 + 0xd]\n  7391: a3 = u8 [a0 + 0xc]\n  7394: a4 = u8 [a0 + 0xe]\n  7397: a5 = u8 [a0 + 0xf]\n  7400: a2 = a2 << 0x8\n  7403: a2 = a2 | a3\n  7406: a4 = a4 << 0x10\n  7409: a5 = a5 << 0x18\n  7412: a4 = a4 | a5\n  7415: a2 = a2 | a4\n  7418: a2 = a2 << 0x20\n  7421: a1 = a1 | a2\n  7424: a2 = u8 [a0 + 0x1]\n  7427: a3 = u8 [a0]\n  7429: a4 = u8 [a0 + 0x2]\n  7432: a5 = u8 [a0 + 0x3]\n  7435: a2 = a2 << 0x8\n  7438: a2 = a2 | a3\n  7441: a4 = a4 << 0x10\n  7444: a5 = a5 << 0x18\n  7447: a4 = a4 | a5\n  7450: a2 = a2 | a4\n  7453: a3 = u8 [a0 + 0x5]\n  7456: a4 = u8 [a0 + 0x4]\n  7459: a5 = u8 [a0 + 0x6]\n  7462: s1 = u8 [a0 + 0x7]\n  7465: a3 = a3 << 0x8\n  7468: a3 = a3 | a4\n  7471: a5 = a5 << 0x10\n  7474: s1 = s1 << 0x18\n  7477: a5 = a5 | s1\n  7480: a3 = a3 | a5\n  7483: a3 = a3 << 0x20\n  7486: a2 = a2 | a3\n  7489: a4 = reverse a2\n  7491: a5 = reverse a1\n  7493: a1 = 0x100000000\n  7503: a2 = a5 ^ a1\n  7506: a2 = a2 | a4\n  7509: a3 = a5 >> 0x20\n  7512: a3 = a3 <u 0x1\n  7515: a3 = 0 if a4 != 0\n  7517: a3 = 0 if a2 == 0\n  7519: jump @159 if a3 != 0\n      : @158 (gas: 1)\n  7522: jump @186\n      : @159 (gas: 13)\n  7525: u64 [sp + 0x3c0] = a5\n  7529: u64 [sp + 0x3c8] = a4\n  7533: a2 = u64 [sp + 0x3e8]\n  7537: a3 = u64 [sp + 0x3e0]\n  7541: a3 = a3 | a2\n  7544: a1 = 0xffffffe0\n  7554: a2 = u64 [sp + 0x428]\n  7558: a1 = a2 <u a1\n  7561: a2 = u64 [sp + 0x420]\n  7565: a1 = 0 if a2 != 0\n  7567: u64 [sp + 0x410] = a3\n  7571: a1 = 0 if a3 != 0\n  7573: jump @161 if a1 != 0\n      : @160 (gas: 1)\n  7576: jump @185\n      : @161 (gas: 36)\n  7579: a1 = u8 [a0 + 0x18]\n  7582: u64 [sp + 0x360] = a1\n  7586: a1 = u8 [a0 + 0x19]\n  7589: u64 [sp + 0x340] = a1\n  7593: a1 = u8 [a0 + 0x1a]\n  7596: u64 [sp + 0x350] = a1\n  7600: a1 = u8 [a0 + 0x1b]\n  7603: u64 [sp + 0x348] = a1\n  7607: a1 = u8 [a0 + 0x1c]\n  7610: u64 [sp + 0x378] = a1\n  7614: a1 = u8 [a0 + 0x1d]\n  7617: u64 [sp + 0x358] = a1\n  7621: a1 = u8 [a0 + 0x1e]\n  7624: u64 [sp + 0x370] = a1\n  7628: a1 = u8 [a0 + 0x1f]\n  7631: u64 [sp + 0x368] = a1\n  7635: a1 = u8 [a0 + 0x10]\n  7638: u64 [sp + 0x3a0] = a1\n  7642: a1 = u8 [a0 + 0x11]\n  7645: u64 [sp + 0x380] = a1\n  7649: a1 = u8 [a0 + 0x12]\n  7652: u64 [sp + 0x390] = a1\n  7656: a1 = u8 [a0 + 0x13]\n  7659: u64 [sp + 0x388] = a1\n  7663: a1 = u8 [a0 + 0x14]\n  7666: u64 [sp + 0x3b8] = a1\n  7670: a1 = u8 [a0 + 0x15]\n  7673: u64 [sp + 0x398] = a1\n  7677: a1 = u8 [a0 + 0x16]\n  7680: u64 [sp + 0x3b0] = a1\n  7684: a0 = u8 [a0 + 0x17]\n  7687: u64 [sp + 0x3a8] = a0\n  7691: a0 = u64 [sp + 0x418]\n  7695: i32 a0 = a0 + 0x20\n  7698: a1 = 0x20\n  7701: ra = 134, jump @0\n      : @162 [@dyn 67] (gas: 10)\n  7707: s1 = 0x100000000\n  7717: u64 [sp + 0x3d8] = s1\n  7721: a1 = 0xffffffc0\n  7731: a2 = u64 [sp + 0x428]\n  7735: a1 = a2 <u a1\n  7738: a2 = u64 [sp + 0x420]\n  7742: a1 = 0 if a2 != 0\n  7744: a2 = u64 [sp + 0x410]\n  7748: a1 = 0 if a2 != 0\n  7750: jump @185 if a1 == 0\n      : @163 (gas: 68)\n  7754: a1 = u8 [a0 + 0x18]\n  7757: u64 [sp + 0x240] = a1\n  7761: a1 = u8 [a0 + 0x19]\n  7764: u64 [sp + 0x220] = a1\n  7768: a1 = u8 [a0 + 0x1a]\n  7771: u64 [sp + 0x230] = a1\n  7775: a1 = u8 [a0 + 0x1b]\n  7778: u64 [sp + 0x228] = a1\n  7782: a1 = u8 [a0 + 0x1c]\n  7785: u64 [sp + 0x258] = a1\n  7789: a1 = u8 [a0 + 0x1d]\n  7792: u64 [sp + 0x238] = a1\n  7796: a1 = u8 [a0 + 0x1e]\n  7799: u64 [sp + 0x250] = a1\n  7803: a1 = u8 [a0 + 0x1f]\n  7806: u64 [sp + 0x248] = a1\n  7810: a1 = u8 [a0 + 0x10]\n  7813: u64 [sp + 0x280] = a1\n  7817: a1 = u8 [a0 + 0x11]\n  7820: u64 [sp + 0x260] = a1\n  7824: a1 = u8 [a0 + 0x12]\n  7827: u64 [sp + 0x270] = a1\n  7831: a1 = u8 [a0 + 0x13]\n  7834: u64 [sp + 0x268] = a1\n  7838: a1 = u8 [a0 + 0x14]\n  7841: u64 [sp + 0x298] = a1\n  7845: a1 = u8 [a0 + 0x15]\n  7848: u64 [sp + 0x278] = a1\n  7852: a1 = u8 [a0 + 0x16]\n  7855: u64 [sp + 0x290] = a1\n  7859: a1 = u8 [a0 + 0x17]\n  7862: u64 [sp + 0x288] = a1\n  7866: a1 = u8 [a0 + 0x8]\n  7869: u64 [sp + 0x2c0] = a1\n  7873: a1 = u8 [a0 + 0x9]\n  7876: u64 [sp + 0x2a0] = a1\n  7880: a1 = u8 [a0 + 0xa]\n  7883: u64 [sp + 0x2b0] = a1\n  7887: a1 = u8 [a0 + 0xb]\n  7890: u64 [sp + 0x2a8] = a1\n  7894: a1 = u8 [a0 + 0xc]\n  7897: u64 [sp + 0x2d8] = a1\n  7901: a1 = u8 [a0 + 0xd]\n  7904: u64 [sp + 0x2b8] = a1\n  7908: a1 = u8 [a0 + 0xe]\n  7911: u64 [sp + 0x2d0] = a1\n  7915: a1 = u8 [a0 + 0xf]\n  7918: u64 [sp + 0x2c8] = a1\n  7922: a1 = u8 [a0]\n  7924: u64 [sp + 0x300] = a1\n  7928: a1 = u8 [a0 + 0x1]\n  7931: u64 [sp + 0x2e0] = a1\n  7935: a1 = u8 [a0 + 0x2]\n  7938: u64 [sp + 0x2f0] = a1\n  7942: a1 = u8 [a0 + 0x3]\n  7945: u64 [sp + 0x2e8] = a1\n  7949: a1 = u8 [a0 + 0x4]\n  7952: u64 [sp + 0x318] = a1\n  7956: a1 = u8 [a0 + 0x5]\n  7959: u64 [sp + 0x2f8] = a1\n  7963: a1 = u8 [a0 + 0x6]\n  7966: u64 [sp + 0x310] = a1\n  7970: a0 = u8 [a0 + 0x7]\n  7973: u64 [sp + 0x308] = a0\n  7977: a0 = u64 [sp + 0x418]\n  7981: i32 a0 = a0 + 0x40\n  7984: a1 = 0x20\n  7987: ra = 136, jump @0\n      : @164 [@dyn 68] (gas: 54)\n  7993: a1 = u8 [a0 + 0x9]\n  7996: a2 = u8 [a0 + 0x8]\n  7999: a3 = u8 [a0 + 0xa]\n  8002: a4 = u8 [a0 + 0xb]\n  8005: a1 = a1 << 0x8\n  8008: a1 = a1 | a2\n  8011: a3 = a3 << 0x10\n  8014: a4 = a4 << 0x18\n  8017: a3 = a3 | a4\n  8020: a1 = a1 | a3\n  8023: a2 = u8 [a0 + 0xd]\n  8026: a3 = u8 [a0 + 0xc]\n  8029: a4 = u8 [a0 + 0xe]\n  8032: a5 = u8 [a0 + 0xf]\n  8035: a2 = a2 << 0x8\n  8038: a2 = a2 | a3\n  8041: a4 = a4 << 0x10\n  8044: a5 = a5 << 0x18\n  8047: a4 = a4 | a5\n  8050: a2 = a2 | a4\n  8053: a2 = a2 << 0x20\n  8056: a1 = a1 | a2\n  8059: a2 = u8 [a0 + 0x1]\n  8062: a3 = u8 [a0]\n  8064: a4 = u8 [a0 + 0x2]\n  8067: a5 = u8 [a0 + 0x3]\n  8070: a2 = a2 << 0x8\n  8073: a2 = a2 | a3\n  8076: a4 = a4 << 0x10\n  8079: a5 = a5 << 0x18\n  8082: a4 = a4 | a5\n  8085: a2 = a2 | a4\n  8088: a3 = u8 [a0 + 0x5]\n  8091: a4 = u8 [a0 + 0x4]\n  8094: a5 = u8 [a0 + 0x6]\n  8097: s1 = u8 [a0 + 0x7]\n  8100: a3 = a3 << 0x8\n  8103: a3 = a3 | a4\n  8106: a5 = a5 << 0x10\n  8109: s1 = s1 << 0x18\n  8112: a5 = a5 | s1\n  8115: a3 = a3 | a5\n  8118: a3 = a3 << 0x20\n  8121: a2 = a2 | a3\n  8124: a3 = reverse a2\n  8126: a4 = reverse a1\n  8128: a1 = u64 [sp + 0x3d8]\n  8132: a1 = a1 ^ a4\n  8135: a1 = a1 | a3\n  8138: a2 = a4 >> 0x20\n  8141: a2 = a2 <u 0x1\n  8144: a2 = 0 if a3 != 0\n  8146: a2 = 0 if a1 == 0\n  8148: jump @186 if a2 == 0\n      : @165 (gas: 12)\n  8152: u64 [sp + 0x320] = a4\n  8156: u64 [sp + 0x328] = a3\n  8160: s1 = 0x100000000\n  8170: u64 [sp + 0x3d8] = s1\n  8174: a1 = 0xffffffa0\n  8184: a2 = u64 [sp + 0x428]\n  8188: a1 = a2 <u a1\n  8191: s1 = u64 [sp + 0x420]\n  8195: a1 = 0 if s1 != 0\n  8197: a2 = u64 [sp + 0x410]\n  8201: a1 = 0 if a2 != 0\n  8203: jump @185 if a1 == 0\n      : @166 (gas: 36)\n  8207: a1 = u8 [a0 + 0x18]\n  8210: u64 [sp + 0x1c0] = a1\n  8214: a1 = u8 [a0 + 0x19]\n  8217: u64 [sp + 0x1a0] = a1\n  8221: a1 = u8 [a0 + 0x1a]\n  8224: u64 [sp + 0x1b0] = a1\n  8228: a1 = u8 [a0 + 0x1b]\n  8231: u64 [sp + 0x1a8] = a1\n  8235: a1 = u8 [a0 + 0x1c]\n  8238: u64 [sp + 0x1d8] = a1\n  8242: a1 = u8 [a0 + 0x1d]\n  8245: u64 [sp + 0x1b8] = a1\n  8249: a1 = u8 [a0 + 0x1e]\n  8252: u64 [sp + 0x1d0] = a1\n  8256: a1 = u8 [a0 + 0x1f]\n  8259: u64 [sp + 0x1c8] = a1\n  8263: a1 = u8 [a0 + 0x10]\n  8266: u64 [sp + 0x200] = a1\n  8270: a1 = u8 [a0 + 0x11]\n  8273: u64 [sp + 0x1e0] = a1\n  8277: a1 = u8 [a0 + 0x12]\n  8280: u64 [sp + 0x1f0] = a1\n  8284: a1 = u8 [a0 + 0x13]\n  8287: u64 [sp + 0x1e8] = a1\n  8291: a1 = u8 [a0 + 0x14]\n  8294: u64 [sp + 0x218] = a1\n  8298: a1 = u8 [a0 + 0x15]\n  8301: u64 [sp + 0x1f8] = a1\n  8305: a1 = u8 [a0 + 0x16]\n  8308: u64 [sp + 0x210] = a1\n  8312: a0 = u8 [a0 + 0x17]\n  8315: u64 [sp + 0x208] = a0\n  8319: a0 = u64 [sp + 0x418]\n  8323: i32 a0 = a0 + 0x60\n  8326: a1 = 0x20\n  8329: ra = 138, jump @0\n      : @167 [@dyn 69] (gas: 8)\n  8335: a1 = u64 [sp + 0x3d8]\n  8339: a1 = a1 + 0xffffffffffffff80\n  8342: a2 = u64 [sp + 0x428]\n  8346: a1 = a2 <u a1\n  8349: a1 = 0 if s1 != 0\n  8351: a2 = u64 [sp + 0x410]\n  8355: a1 = 0 if a2 != 0\n  8357: jump @185 if a1 == 0\n      : @168 (gas: 68)\n  8361: a1 = u8 [a0 + 0x18]\n  8364: u64 [sp + 0xc0] = a1\n  8368: a1 = u8 [a0 + 0x19]\n  8371: u64 [sp + 0xa0] = a1\n  8375: a1 = u8 [a0 + 0x1a]\n  8378: u64 [sp + 0xb0] = a1\n  8382: a1 = u8 [a0 + 0x1b]\n  8385: u64 [sp + 0xa8] = a1\n  8389: a1 = u8 [a0 + 0x1c]\n  8392: u64 [sp + 0xd8] = a1\n  8396: a1 = u8 [a0 + 0x1d]\n  8399: u64 [sp + 0xb8] = a1\n  8403: a1 = u8 [a0 + 0x1e]\n  8406: u64 [sp + 0xd0] = a1\n  8410: a1 = u8 [a0 + 0x1f]\n  8413: u64 [sp + 0xc8] = a1\n  8417: a1 = u8 [a0 + 0x10]\n  8420: u64 [sp + 0x100] = a1\n  8424: a1 = u8 [a0 + 0x11]\n  8427: u64 [sp + 0xe0] = a1\n  8431: a1 = u8 [a0 + 0x12]\n  8434: u64 [sp + 0xf0] = a1\n  8438: a1 = u8 [a0 + 0x13]\n  8441: u64 [sp + 0xe8] = a1\n  8445: a1 = u8 [a0 + 0x14]\n  8448: u64 [sp + 0x118] = a1\n  8452: a1 = u8 [a0 + 0x15]\n  8455: u64 [sp + 0xf8] = a1\n  8459: a1 = u8 [a0 + 0x16]\n  8462: u64 [sp + 0x110] = a1\n  8466: a1 = u8 [a0 + 0x17]\n  8469: u64 [sp + 0x108] = a1\n  8473: a1 = u8 [a0 + 0x8]\n  8476: u64 [sp + 0x140] = a1\n  8480: a1 = u8 [a0 + 0x9]\n  8483: u64 [sp + 0x120] = a1\n  8487: a1 = u8 [a0 + 0xa]\n  8490: u64 [sp + 0x130] = a1\n  8494: a1 = u8 [a0 + 0xb]\n  8497: u64 [sp + 0x128] = a1\n  8501: a1 = u8 [a0 + 0xc]\n  8504: u64 [sp + 0x158] = a1\n  8508: a1 = u8 [a0 + 0xd]\n  8511: u64 [sp + 0x138] = a1\n  8515: a1 = u8 [a0 + 0xe]\n  8518: u64 [sp + 0x150] = a1\n  8522: a1 = u8 [a0 + 0xf]\n  8525: u64 [sp + 0x148] = a1\n  8529: a1 = u8 [a0]\n  8531: u64 [sp + 0x180] = a1\n  8535: a1 = u8 [a0 + 0x1]\n  8538: u64 [sp + 0x160] = a1\n  8542: a1 = u8 [a0 + 0x2]\n  8545: u64 [sp + 0x170] = a1\n  8549: a1 = u8 [a0 + 0x3]\n  8552: u64 [sp + 0x168] = a1\n  8556: a1 = u8 [a0 + 0x4]\n  8559: u64 [sp + 0x198] = a1\n  8563: a1 = u8 [a0 + 0x5]\n  8566: u64 [sp + 0x178] = a1\n  8570: a1 = u8 [a0 + 0x6]\n  8573: u64 [sp + 0x190] = a1\n  8577: a0 = u8 [a0 + 0x7]\n  8580: u64 [sp + 0x188] = a0\n  8584: a0 = u64 [sp + 0x418]\n  8588: i32 a0 = a0 + 0x80\n  8592: a1 = 0x20\n  8595: ra = 140, jump @0\n      : @169 [@dyn 70] (gas: 73)\n  8601: a1 = u8 [a0 + 0x9]\n  8604: a2 = u8 [a0 + 0x8]\n  8607: a3 = u8 [a0 + 0xa]\n  8610: a4 = u8 [a0 + 0xb]\n  8613: a1 = a1 << 0x8\n  8616: a1 = a1 | a2\n  8619: a3 = a3 << 0x10\n  8622: a4 = a4 << 0x18\n  8625: a3 = a3 | a4\n  8628: a1 = a1 | a3\n  8631: a2 = u8 [a0 + 0xd]\n  8634: a3 = u8 [a0 + 0xc]\n  8637: a4 = u8 [a0 + 0xe]\n  8640: a5 = u8 [a0 + 0xf]\n  8643: a2 = a2 << 0x8\n  8646: a2 = a2 | a3\n  8649: a4 = a4 << 0x10\n  8652: a5 = a5 << 0x18\n  8655: a4 = a4 | a5\n  8658: a2 = a2 | a4\n  8661: a2 = a2 << 0x20\n  8664: t0 = a2 | a1\n  8667: a2 = u8 [a0 + 0x1]\n  8670: a3 = u8 [a0]\n  8672: a4 = u8 [a0 + 0x2]\n  8675: a5 = u8 [a0 + 0x3]\n  8678: a2 = a2 << 0x8\n  8681: a2 = a2 | a3\n  8684: a4 = a4 << 0x10\n  8687: a5 = a5 << 0x18\n  8690: a4 = a4 | a5\n  8693: a2 = a2 | a4\n  8696: a3 = u8 [a0 + 0x5]\n  8699: a4 = u8 [a0 + 0x4]\n  8702: a5 = u8 [a0 + 0x6]\n  8705: s1 = u8 [a0 + 0x7]\n  8708: a3 = a3 << 0x8\n  8711: a3 = a3 | a4\n  8714: a5 = a5 << 0x10\n  8717: s1 = s1 << 0x18\n  8720: a5 = a5 | s1\n  8723: a3 = a3 | a5\n  8726: a3 = a3 << 0x20\n  8729: a2 = a2 | a3\n  8732: a3 = u8 [a0 + 0x11]\n  8735: a4 = u8 [a0 + 0x10]\n  8738: a5 = u8 [a0 + 0x12]\n  8741: s1 = u8 [a0 + 0x13]\n  8744: a3 = a3 << 0x8\n  8747: a3 = a3 | a4\n  8750: a5 = a5 << 0x10\n  8753: s1 = s1 << 0x18\n  8756: a5 = a5 | s1\n  8759: a3 = a3 | a5\n  8762: a4 = u8 [a0 + 0x15]\n  8765: a5 = u8 [a0 + 0x14]\n  8768: s1 = u8 [a0 + 0x16]\n  8771: a1 = u8 [a0 + 0x17]\n  8774: a4 = a4 << 0x8\n  8777: a4 = a4 | a5\n  8780: s1 = s1 << 0x10\n  8783: a1 = a1 << 0x18\n  8786: a1 = a1 | s1\n  8789: a1 = a1 | a4\n  8792: a1 = a1 << 0x20\n  8795: a1 = a1 | a3\n  8798: a3 = reverse a1\n  8800: t1 = reverse a2\n  8802: a1 = reverse t0\n  8804: a4 = a1 | t1\n  8807: a5 = a3 <u 0x1\n  8810: a5 = 0 if a4 != 0\n  8812: jump @186 if a5 == 0\n      : @170 (gas: 65)\n  8816: a4 = u8 [a0 + 0x19]\n  8819: a5 = u8 [a0 + 0x18]\n  8822: s1 = u8 [a0 + 0x1a]\n  8825: a2 = u8 [a0 + 0x1b]\n  8828: a4 = a4 << 0x8\n  8831: a4 = a4 | a5\n  8834: s1 = s1 << 0x10\n  8837: a2 = a2 << 0x18\n  8840: a2 = a2 | s1\n  8843: a2 = a2 | a4\n  8846: a4 = u8 [a0 + 0x1d]\n  8849: a5 = u8 [a0 + 0x1c]\n  8852: s1 = u8 [a0 + 0x1e]\n  8855: a0 = u8 [a0 + 0x1f]\n  8858: a4 = a4 << 0x8\n  8861: a4 = a4 | a5\n  8864: s1 = s1 << 0x10\n  8867: a0 = a0 << 0x18\n  8870: a0 = a0 | s1\n  8873: a0 = a0 | a4\n  8876: a0 = a0 << 0x20\n  8879: a0 = a0 | a2\n  8882: a0 = reverse a0\n  8884: a2 = u64 [sp + 0x428]\n  8888: t0 = a0 + a2\n  8891: a0 = t0 <u a0\n  8894: a2 = u64 [sp + 0x420]\n  8898: a2 = a2 + a3\n  8901: t2 = a2 + a0\n  8904: a2 = t2 ^ a3\n  8907: s1 = t2 <u a3\n  8910: s1 = a0 if a2 == 0\n  8913: a0 = u64 [sp + 0x3e8]\n  8917: a0 = a0 + a1\n  8920: s1 = s1 + a0\n  8923: a2 = s1 <u a0\n  8926: a0 = a0 <u a1\n  8929: a1 = u64 [sp + 0x3e0]\n  8933: t1 = t1 + a1\n  8936: a0 = a0 + t1\n  8939: ra = a0 + a2\n  8942: a0 = t0 + 0x1f\n  8945: a1 = a0 <u t0\n  8948: a2 = t2 + a1\n  8951: a3 = a2 <u t2\n  8954: a3 = a1 if a1 == 0\n  8957: t1 = s1 + a3\n  8960: a1 = t1 <u s1\n  8963: a1 = a1 + ra\n  8966: a5 = u64 [sp + 0x408]\n  8970: a4 = a2 ^ a5\n  8973: a2 = a2 <u a5\n  8976: a5 = u64 [sp + 0x400]\n  8980: a0 = a0 <u a5\n  8983: a0 = a2 if a4 != 0\n  8986: a5 = u64 [sp + 0x3f8]\n  8990: a2 = t1 <u a5\n  8993: a4 = u64 [sp + 0x3f0]\n  8997: a3 = a1 ^ a4\n  9000: a1 = a1 <s a4\n  9003: a1 = a2 if a3 == 0\n  9006: a2 = t1 ^ a5\n  9009: a2 = a2 | a3\n  9012: a0 = a1 if a2 != 0\n  9015: jump @187 if a0 == 0\n      : @171 (gas: 11)\n  9019: a0 = t0 | s1\n  9022: u64 [sp + 0x3d8] = t2\n  9026: u64 [sp + 0x330] = ra\n  9030: a1 = t2 | ra\n  9033: a0 = a0 | a1\n  9036: a0 = a0 >> 0x20\n  9039: u64 [sp + 0x338] = s1\n  9043: a1 = a1 | s1\n  9046: a1 = a1 << 0x20\n  9049: a0 = a0 | a1\n  9052: jump @185 if a0 != 0\n      : @172 (gas: 4)\n  9056: i32 a0 = t0 + 0\n  9058: a1 = 0x20\n  9061: s1 = t0\n  9063: ra = 142, jump @0\n      : @173 [@dyn 71] (gas: 124)\n  9069: a1 = u8 [a0 + 0x1]\n  9072: a2 = u8 [a0]\n  9074: a3 = u8 [a0 + 0x2]\n  9077: a4 = u8 [a0 + 0x3]\n  9080: a1 = a1 << 0x8\n  9083: a1 = a1 | a2\n  9086: a3 = a3 << 0x10\n  9089: a4 = a4 << 0x18\n  9092: a3 = a3 | a4\n  9095: a1 = a1 | a3\n  9098: a2 = u8 [a0 + 0x5]\n  9101: a3 = u8 [a0 + 0x4]\n  9104: a4 = u8 [a0 + 0x6]\n  9107: a5 = u8 [a0 + 0x7]\n  9110: a2 = a2 << 0x8\n  9113: a2 = a2 | a3\n  9116: a4 = a4 << 0x10\n  9119: a5 = a5 << 0x18\n  9122: a4 = a4 | a5\n  9125: a2 = a2 | a4\n  9128: a2 = a2 << 0x20\n  9131: t0 = a2 | a1\n  9134: a2 = u8 [a0 + 0x9]\n  9137: a3 = u8 [a0 + 0x8]\n  9140: a4 = u8 [a0 + 0xa]\n  9143: a5 = u8 [a0 + 0xb]\n  9146: a2 = a2 << 0x8\n  9149: a2 = a2 | a3\n  9152: a4 = a4 << 0x10\n  9155: a5 = a5 << 0x18\n  9158: a4 = a4 | a5\n  9161: a2 = a2 | a4\n  9164: a3 = u8 [a0 + 0xd]\n  9167: a4 = u8 [a0 + 0xc]\n  9170: a5 = u8 [a0 + 0xe]\n  9173: a1 = u8 [a0 + 0xf]\n  9176: a3 = a3 << 0x8\n  9179: a3 = a3 | a4\n  9182: a5 = a5 << 0x10\n  9185: a1 = a1 << 0x18\n  9188: a1 = a1 | a5\n  9191: a1 = a1 | a3\n  9194: a1 = a1 << 0x20\n  9197: t1 = a1 | a2\n  9200: a1 = u8 [a0 + 0x11]\n  9203: a3 = u8 [a0 + 0x10]\n  9206: a4 = u8 [a0 + 0x12]\n  9209: a5 = u8 [a0 + 0x13]\n  9212: a1 = a1 << 0x8\n  9215: a1 = a1 | a3\n  9218: a4 = a4 << 0x10\n  9221: a5 = a5 << 0x18\n  9224: a4 = a4 | a5\n  9227: a1 = a1 | a4\n  9230: a3 = u8 [a0 + 0x15]\n  9233: a4 = u8 [a0 + 0x14]\n  9236: a5 = u8 [a0 + 0x16]\n  9239: a2 = u8 [a0 + 0x17]\n  9242: a3 = a3 << 0x8\n  9245: a3 = a3 | a4\n  9248: a5 = a5 << 0x10\n  9251: a2 = a2 << 0x18\n  9254: a2 = a2 | a5\n  9257: a2 = a2 | a3\n  9260: a2 = a2 << 0x20\n  9263: a3 = a2 | a1\n  9266: a1 = u8 [a0 + 0x19]\n  9269: a2 = u8 [a0 + 0x18]\n  9272: a4 = u8 [a0 + 0x1a]\n  9275: a5 = u8 [a0 + 0x1b]\n  9278: a1 = a1 << 0x8\n  9281: a1 = a1 | a2\n  9284: a4 = a4 << 0x10\n  9287: a5 = a5 << 0x18\n  9290: a4 = a4 | a5\n  9293: a1 = a1 | a4\n  9296: a2 = u8 [a0 + 0x1d]\n  9299: a4 = u8 [a0 + 0x1c]\n  9302: a5 = u8 [a0 + 0x1e]\n  9305: a0 = u8 [a0 + 0x1f]\n  9308: a2 = a2 << 0x8\n  9311: a2 = a2 | a4\n  9314: a5 = a5 << 0x10\n  9317: a0 = a0 << 0x18\n  9320: a0 = a0 | a5\n  9323: a0 = a0 | a2\n  9326: a0 = a0 << 0x20\n  9329: a0 = a0 | a1\n  9332: t2 = reverse a0\n  9334: ra = reverse a3\n  9336: a1 = reverse t1\n  9338: a2 = reverse t0\n  9340: a3 = s1 + 0x20\n  9343: a5 = a3 <u s1\n  9346: a0 = u64 [sp + 0x3d8]\n  9350: a4 = a0 + a5\n  9353: s1 = a4 <u a0\n  9356: s1 = a5 if a5 == 0\n  9359: a0 = u64 [sp + 0x338]\n  9363: s1 = s1 + a0\n  9366: a5 = s1 <u a0\n  9369: a0 = u64 [sp + 0x330]\n  9373: a5 = a5 + a0\n  9376: a0 = u64 [sp + 0x3f0]\n  9380: u64 [sp + 0x4c8] = a0\n  9384: a0 = u64 [sp + 0x3f8]\n  9388: u64 [sp + 0x4c0] = a0\n  9392: a0 = u64 [sp + 0x408]\n  9396: u64 [sp + 0x4b8] = a0\n  9400: a0 = u64 [sp + 0x400]\n  9404: u64 [sp + 0x4b0] = a0\n  9408: u64 [sp + 0x4f8] = a4\n  9412: u64 [sp + 0x4f0] = a3\n  9416: u64 [sp + 0x500] = s1\n  9420: u64 [sp + 0x508] = a5\n  9424: u64 [sp + 0x4e8] = a2\n  9428: u64 [sp + 0x4e0] = a1\n  9432: u64 [sp + 0x4d8] = ra\n  9436: a0 = sp + 0x510\n  9440: a1 = sp + 0x4f0\n  9444: a2 = sp + 0x4d0\n  9448: a3 = sp + 0x4b0\n  9452: u64 [sp + 0x4d0] = t2\n  9456: ra = 144, jump @123\n      : @174 [@dyn 72] (gas: 10)\n  9462: s1 = 0x100000000\n  9472: u64 [sp + 0x3d8] = s1\n  9476: a0 = 0xffffff60\n  9486: a1 = u64 [sp + 0x428]\n  9490: a0 = a1 <u a0\n  9493: a1 = u64 [sp + 0x420]\n  9497: a0 = 0 if a1 != 0\n  9499: a1 = u64 [sp + 0x410]\n  9503: a0 = 0 if a1 != 0\n  9505: jump @185 if a0 == 0\n      : @175 (gas: 12)\n  9509: a0 = u64 [sp + 0x528]\n  9513: u64 [sp + 0x330] = a0\n  9517: a0 = u64 [sp + 0x520]\n  9521: u64 [sp + 0x90] = a0\n  9525: a0 = u64 [sp + 0x518]\n  9529: u64 [sp + 0x338] = a0\n  9533: a0 = u64 [sp + 0x510]\n  9537: u64 [sp + 0x98] = a0\n  9541: a0 = u64 [sp + 0x418]\n  9545: i32 a0 = a0 + 0xa0\n  9549: a1 = 0x20\n  9552: ra = 146, jump @0\n      : @176 [@dyn 73] (gas: 54)\n  9558: a1 = u8 [a0 + 0x9]\n  9561: a2 = u8 [a0 + 0x8]\n  9564: a3 = u8 [a0 + 0xa]\n  9567: a4 = u8 [a0 + 0xb]\n  9570: a1 = a1 << 0x8\n  9573: a1 = a1 | a2\n  9576: a3 = a3 << 0x10\n  9579: a4 = a4 << 0x18\n  9582: a3 = a3 | a4\n  9585: a1 = a1 | a3\n  9588: a2 = u8 [a0 + 0xd]\n  9591: a3 = u8 [a0 + 0xc]\n  9594: a4 = u8 [a0 + 0xe]\n  9597: a5 = u8 [a0 + 0xf]\n  9600: a2 = a2 << 0x8\n  9603: a2 = a2 | a3\n  9606: a4 = a4 << 0x10\n  9609: a5 = a5 << 0x18\n  9612: a4 = a4 | a5\n  9615: a2 = a2 | a4\n  9618: a2 = a2 << 0x20\n  9621: a1 = a1 | a2\n  9624: a2 = u8 [a0 + 0x1]\n  9627: a3 = u8 [a0]\n  9629: a4 = u8 [a0 + 0x2]\n  9632: a5 = u8 [a0 + 0x3]\n  9635: a2 = a2 << 0x8\n  9638: a2 = a2 | a3\n  9641: a4 = a4 << 0x10\n  9644: a5 = a5 << 0x18\n  9647: a4 = a4 | a5\n  9650: a2 = a2 | a4\n  9653: a3 = u8 [a0 + 0x5]\n  9656: a4 = u8 [a0 + 0x4]\n  9659: a5 = u8 [a0 + 0x6]\n  9662: s1 = u8 [a0 + 0x7]\n  9665: a3 = a3 << 0x8\n  9668: a3 = a3 | a4\n  9671: a5 = a5 << 0x10\n  9674: s1 = s1 << 0x18\n  9677: a5 = a5 | s1\n  9680: a3 = a3 | a5\n  9683: a3 = a3 << 0x20\n  9686: a2 = a2 | a3\n  9689: a3 = reverse a2\n  9691: a4 = reverse a1\n  9693: a1 = u64 [sp + 0x3d8]\n  9697: a1 = a1 ^ a4\n  9700: a1 = a1 | a3\n  9703: a2 = a4 >> 0x20\n  9706: a2 = a2 <u 0x1\n  9709: a2 = 0 if a3 != 0\n  9711: a2 = 0 if a1 == 0\n  9713: jump @186 if a2 == 0\n      : @177 (gas: 10)\n  9717: u64 [sp + 0x88] = a4\n  9721: u64 [sp + 0x3d8] = a3\n  9725: a1 = 0xffffff40\n  9735: a2 = u64 [sp + 0x428]\n  9739: a1 = a2 <u a1\n  9742: a2 = u64 [sp + 0x420]\n  9746: a1 = 0 if a2 != 0\n  9748: a2 = u64 [sp + 0x410]\n  9752: a1 = 0 if a2 != 0\n  9754: jump @185 if a1 == 0\n      : @178 (gas: 36)\n  9758: a1 = u8 [a0 + 0x18]\n  9761: u64 [sp + 0x28] = a1\n  9764: a1 = u8 [a0 + 0x19]\n  9767: u64 [sp + 0x8] = a1\n  9770: a1 = u8 [a0 + 0x1a]\n  9773: u64 [sp + 0x18] = a1\n  9776: a1 = u8 [a0 + 0x1b]\n  9779: u64 [sp + 0x10] = a1\n  9782: a1 = u8 [a0 + 0x1c]\n  9785: u64 [sp + 0x40] = a1\n  9788: a1 = u8 [a0 + 0x1d]\n  9791: u64 [sp + 0x20] = a1\n  9794: a1 = u8 [a0 + 0x1e]\n  9797: u64 [sp + 0x38] = a1\n  9800: a1 = u8 [a0 + 0x1f]\n  9803: u64 [sp + 0x30] = a1\n  9806: a1 = u8 [a0 + 0x10]\n  9809: u64 [sp + 0x68] = a1\n  9812: a1 = u8 [a0 + 0x11]\n  9815: u64 [sp + 0x48] = a1\n  9818: a1 = u8 [a0 + 0x12]\n  9821: u64 [sp + 0x58] = a1\n  9824: a1 = u8 [a0 + 0x13]\n  9827: u64 [sp + 0x50] = a1\n  9830: a1 = u8 [a0 + 0x14]\n  9833: u64 [sp + 0x80] = a1\n  9837: a1 = u8 [a0 + 0x15]\n  9840: u64 [sp + 0x60] = a1\n  9843: a1 = u8 [a0 + 0x16]\n  9846: u64 [sp + 0x78] = a1\n  9849: a0 = u8 [a0 + 0x17]\n  9852: u64 [sp + 0x70] = a0\n  9855: a0 = u64 [sp + 0x418]\n  9859: i32 a0 = a0 + 0xc0\n  9863: a1 = 0x20\n  9866: ra = 148, jump @0\n      : @179 [@dyn 74] (gas: 73)\n  9872: a1 = u8 [a0 + 0x9]\n  9875: a2 = u8 [a0 + 0x8]\n  9878: a3 = u8 [a0 + 0xa]\n  9881: a4 = u8 [a0 + 0xb]\n  9884: a1 = a1 << 0x8\n  9887: a1 = a1 | a2\n  9890: a3 = a3 << 0x10\n  9893: a4 = a4 << 0x18\n  9896: a3 = a3 | a4\n  9899: a1 = a1 | a3\n  9902: a2 = u8 [a0 + 0xd]\n  9905: a3 = u8 [a0 + 0xc]\n  9908: a4 = u8 [a0 + 0xe]\n  9911: a5 = u8 [a0 + 0xf]\n  9914: a2 = a2 << 0x8\n  9917: a2 = a2 | a3\n  9920: a4 = a4 << 0x10\n  9923: a5 = a5 << 0x18\n  9926: a4 = a4 | a5\n  9929: a2 = a2 | a4\n  9932: a2 = a2 << 0x20\n  9935: t0 = a2 | a1\n  9938: a2 = u8 [a0 + 0x1]\n  9941: a3 = u8 [a0]\n  9943: a4 = u8 [a0 + 0x2]\n  9946: a5 = u8 [a0 + 0x3]\n  9949: a2 = a2 << 0x8\n  9952: a2 = a2 | a3\n  9955: a4 = a4 << 0x10\n  9958: a5 = a5 << 0x18\n  9961: a4 = a4 | a5\n  9964: a2 = a2 | a4\n  9967: a3 = u8 [a0 + 0x5]\n  9970: a4 = u8 [a0 + 0x4]\n  9973: a5 = u8 [a0 + 0x6]\n  9976: s1 = u8 [a0 + 0x7]\n  9979: a3 = a3 << 0x8\n  9982: a3 = a3 | a4\n  9985: a5 = a5 << 0x10\n  9988: s1 = s1 << 0x18\n  9991: a5 = a5 | s1\n  9994: a3 = a3 | a5\n  9997: a3 = a3 << 0x20\n 10000: a2 = a2 | a3\n 10003: a3 = u8 [a0 + 0x11]\n 10006: a4 = u8 [a0 + 0x10]\n 10009: a5 = u8 [a0 + 0x12]\n 10012: s1 = u8 [a0 + 0x13]\n 10015: a3 = a3 << 0x8\n 10018: a3 = a3 | a4\n 10021: a5 = a5 << 0x10\n 10024: s1 = s1 << 0x18\n 10027: a5 = a5 | s1\n 10030: a3 = a3 | a5\n 10033: a4 = u8 [a0 + 0x15]\n 10036: a5 = u8 [a0 + 0x14]\n 10039: s1 = u8 [a0 + 0x16]\n 10042: a1 = u8 [a0 + 0x17]\n 10045: a4 = a4 << 0x8\n 10048: a4 = a4 | a5\n 10051: s1 = s1 << 0x10\n 10054: a1 = a1 << 0x18\n 10057: a1 = a1 | s1\n 10060: a1 = a1 | a4\n 10063: a1 = a1 << 0x20\n 10066: a1 = a1 | a3\n 10069: a3 = reverse a1\n 10071: t1 = reverse a2\n 10073: a1 = reverse t0\n 10075: a4 = a1 | t1\n 10078: a5 = a3 <u 0x1\n 10081: a5 = 0 if a4 != 0\n 10083: jump @186 if a5 == 0\n      : @180 (gas: 65)\n 10087: a4 = u8 [a0 + 0x19]\n 10090: a5 = u8 [a0 + 0x18]\n 10093: s1 = u8 [a0 + 0x1a]\n 10096: a2 = u8 [a0 + 0x1b]\n 10099: a4 = a4 << 0x8\n 10102: a4 = a4 | a5\n 10105: s1 = s1 << 0x10\n 10108: a2 = a2 << 0x18\n 10111: a2 = a2 | s1\n 10114: a2 = a2 | a4\n 10117: a4 = u8 [a0 + 0x1d]\n 10120: a5 = u8 [a0 + 0x1c]\n 10123: s1 = u8 [a0 + 0x1e]\n 10126: a0 = u8 [a0 + 0x1f]\n 10129: a4 = a4 << 0x8\n 10132: a4 = a4 | a5\n 10135: s1 = s1 << 0x10\n 10138: a0 = a0 << 0x18\n 10141: a0 = a0 | s1\n 10144: a0 = a0 | a4\n 10147: a0 = a0 << 0x20\n 10150: a0 = a0 | a2\n 10153: a0 = reverse a0\n 10155: a2 = u64 [sp + 0x428]\n 10159: t0 = a0 + a2\n 10162: a0 = t0 <u a0\n 10165: a2 = u64 [sp + 0x420]\n 10169: a2 = a2 + a3\n 10172: t2 = a2 + a0\n 10175: a2 = t2 ^ a3\n 10178: a3 = t2 <u a3\n 10181: a3 = a0 if a2 == 0\n 10184: a0 = u64 [sp + 0x3e8]\n 10188: a0 = a0 + a1\n 10191: s1 = a0 + a3\n 10194: a2 = s1 <u a0\n 10197: a0 = a0 <u a1\n 10200: a1 = u64 [sp + 0x3e0]\n 10204: t1 = t1 + a1\n 10207: a0 = a0 + t1\n 10210: ra = a0 + a2\n 10213: a0 = t0 + 0x1f\n 10216: a1 = a0 <u t0\n 10219: a2 = t2 + a1\n 10222: a3 = a2 <u t2\n 10225: a3 = a1 if a1 == 0\n 10228: t1 = s1 + a3\n 10231: a1 = t1 <u s1\n 10234: a1 = a1 + ra\n 10237: a5 = u64 [sp + 0x408]\n 10241: a4 = a2 ^ a5\n 10244: a2 = a2 <u a5\n 10247: a5 = u64 [sp + 0x400]\n 10251: a0 = a0 <u a5\n 10254: a0 = a2 if a4 != 0\n 10257: a5 = u64 [sp + 0x3f8]\n 10261: a2 = t1 <u a5\n 10264: a4 = u64 [sp + 0x3f0]\n 10268: a3 = a1 ^ a4\n 10271: a1 = a1 <u a4\n 10274: a1 = a2 if a3 == 0\n 10277: a2 = t1 ^ a5\n 10280: a2 = a2 | a3\n 10283: a0 = a1 if a2 != 0\n 10286: jump @187 if a0 == 0\n      : @181 (gas: 12)\n 10290: u64 [sp + 0x428] = t0\n 10294: a0 = t0 | s1\n 10297: u64 [sp + 0x420] = t2\n 10301: u64 [sp + 0x410] = ra\n 10305: a1 = t2 | ra\n 10308: a0 = a0 | a1\n 10311: a0 = a0 >> 0x20\n 10314: u64 [sp + 0x418] = s1\n 10318: a1 = a1 | s1\n 10321: a1 = a1 << 0x20\n 10324: a0 = a0 | a1\n 10327: jump @185 if a0 != 0\n      : @182 (gas: 351)\n 10331: a0 = u64 [sp + 0x340]\n 10335: a0 = a0 << 0x8\n 10338: a1 = u64 [sp + 0x360]\n 10342: a0 = a0 | a1\n 10345: a1 = u64 [sp + 0x350]\n 10349: a1 = a1 << 0x10\n 10352: a2 = u64 [sp + 0x348]\n 10356: a2 = a2 << 0x18\n 10359: a1 = a1 | a2\n 10362: a0 = a0 | a1\n 10365: a1 = u64 [sp + 0x358]\n 10369: a1 = a1 << 0x8\n 10372: a2 = u64 [sp + 0x378]\n 10376: a1 = a1 | a2\n 10379: a2 = u64 [sp + 0x370]\n 10383: a2 = a2 << 0x10\n 10386: a3 = u64 [sp + 0x368]\n 10390: a3 = a3 << 0x18\n 10393: a2 = a2 | a3\n 10396: a1 = a1 | a2\n 10399: a1 = a1 << 0x20\n 10402: a0 = a0 | a1\n 10405: u64 [sp + 0x3e0] = a0\n 10409: a0 = u64 [sp + 0x380]\n 10413: a0 = a0 << 0x8\n 10416: a1 = u64 [sp + 0x3a0]\n 10420: a0 = a0 | a1\n 10423: a1 = u64 [sp + 0x390]\n 10427: a1 = a1 << 0x10\n 10430: a2 = u64 [sp + 0x388]\n 10434: a2 = a2 << 0x18\n 10437: a1 = a1 | a2\n 10440: a0 = a0 | a1\n 10443: a1 = u64 [sp + 0x398]\n 10447: a1 = a1 << 0x8\n 10450: a2 = u64 [sp + 0x3b8]\n 10454: a1 = a1 | a2\n 10457: a2 = u64 [sp + 0x3b0]\n 10461: a2 = a2 << 0x10\n 10464: a3 = u64 [sp + 0x3a8]\n 10468: a3 = a3 << 0x18\n 10471: a2 = a2 | a3\n 10474: a1 = a1 | a2\n 10477: a1 = a1 << 0x20\n 10480: a0 = a0 | a1\n 10483: u64 [sp + 0x3e8] = a0\n 10487: a0 = u64 [sp + 0x220]\n 10491: a0 = a0 << 0x8\n 10494: a1 = u64 [sp + 0x240]\n 10498: a0 = a0 | a1\n 10501: a1 = u64 [sp + 0x230]\n 10505: a1 = a1 << 0x10\n 10508: a2 = u64 [sp + 0x228]\n 10512: a2 = a2 << 0x18\n 10515: a1 = a1 | a2\n 10518: a0 = a0 | a1\n 10521: a1 = u64 [sp + 0x238]\n 10525: a1 = a1 << 0x8\n 10528: a2 = u64 [sp + 0x258]\n 10532: a1 = a1 | a2\n 10535: a2 = u64 [sp + 0x250]\n 10539: a2 = a2 << 0x10\n 10542: a3 = u64 [sp + 0x248]\n 10546: a3 = a3 << 0x18\n 10549: a2 = a2 | a3\n 10552: a1 = a1 | a2\n 10555: a1 = a1 << 0x20\n 10558: a0 = a0 | a1\n 10561: u64 [sp + 0x3a0] = a0\n 10565: a0 = u64 [sp + 0x260]\n 10569: a0 = a0 << 0x8\n 10572: a1 = u64 [sp + 0x280]\n 10576: a0 = a0 | a1\n 10579: a1 = u64 [sp + 0x270]\n 10583: a1 = a1 << 0x10\n 10586: a2 = u64 [sp + 0x268]\n 10590: a2 = a2 << 0x18\n 10593: a1 = a1 | a2\n 10596: a0 = a0 | a1\n 10599: a1 = u64 [sp + 0x278]\n 10603: a1 = a1 << 0x8\n 10606: a2 = u64 [sp + 0x298]\n 10610: a1 = a1 | a2\n 10613: a2 = u64 [sp + 0x290]\n 10617: a2 = a2 << 0x10\n 10620: a3 = u64 [sp + 0x288]\n 10624: a3 = a3 << 0x18\n 10627: a2 = a2 | a3\n 10630: a1 = a1 | a2\n 10633: a1 = a1 << 0x20\n 10636: a0 = a0 | a1\n 10639: u64 [sp + 0x3a8] = a0\n 10643: a0 = u64 [sp + 0x2a0]\n 10647: a0 = a0 << 0x8\n 10650: a1 = u64 [sp + 0x2c0]\n 10654: a0 = a0 | a1\n 10657: a1 = u64 [sp + 0x2b0]\n 10661: a1 = a1 << 0x10\n 10664: a2 = u64 [sp + 0x2a8]\n 10668: a2 = a2 << 0x18\n 10671: a1 = a1 | a2\n 10674: a0 = a0 | a1\n 10677: a1 = u64 [sp + 0x2b8]\n 10681: a1 = a1 << 0x8\n 10684: a2 = u64 [sp + 0x2d8]\n 10688: a1 = a1 | a2\n 10691: a2 = u64 [sp + 0x2d0]\n 10695: a2 = a2 << 0x10\n 10698: a3 = u64 [sp + 0x2c8]\n 10702: a3 = a3 << 0x18\n 10705: a2 = a2 | a3\n 10708: a1 = a1 | a2\n 10711: a1 = a1 << 0x20\n 10714: a0 = a0 | a1\n 10717: u64 [sp + 0x380] = a0\n 10721: a0 = u64 [sp + 0x2e0]\n 10725: a0 = a0 << 0x8\n 10728: a1 = u64 [sp + 0x300]\n 10732: a0 = a0 | a1\n 10735: a1 = u64 [sp + 0x2f0]\n 10739: a1 = a1 << 0x10\n 10742: a2 = u64 [sp + 0x2e8]\n 10746: a2 = a2 << 0x18\n 10749: a1 = a1 | a2\n 10752: a0 = a0 | a1\n 10755: a1 = u64 [sp + 0x2f8]\n 10759: a1 = a1 << 0x8\n 10762: a2 = u64 [sp + 0x318]\n 10766: a1 = a1 | a2\n 10769: a2 = u64 [sp + 0x310]\n 10773: a2 = a2 << 0x10\n 10776: a3 = u64 [sp + 0x308]\n 10780: a3 = a3 << 0x18\n 10783: a2 = a2 | a3\n 10786: a1 = a1 | a2\n 10789: a1 = a1 << 0x20\n 10792: a0 = a0 | a1\n 10795: u64 [sp + 0x390] = a0\n 10799: a0 = u64 [sp + 0x1a0]\n 10803: a0 = a0 << 0x8\n 10806: a1 = u64 [sp + 0x1c0]\n 10810: a0 = a0 | a1\n 10813: a1 = u64 [sp + 0x1b0]\n 10817: a1 = a1 << 0x10\n 10820: a2 = u64 [sp + 0x1a8]\n 10824: a2 = a2 << 0x18\n 10827: a1 = a1 | a2\n 10830: a0 = a0 | a1\n 10833: a1 = u64 [sp + 0x1b8]\n 10837: a1 = a1 << 0x8\n 10840: a2 = u64 [sp + 0x1d8]\n 10844: a1 = a1 | a2\n 10847: a2 = u64 [sp + 0x1d0]\n 10851: a2 = a2 << 0x10\n 10854: a3 = u64 [sp + 0x1c8]\n 10858: a3 = a3 << 0x18\n 10861: a2 = a2 | a3\n 10864: a1 = a1 | a2\n 10867: a1 = a1 << 0x20\n 10870: ra = a1 | a0\n 10873: a0 = u64 [sp + 0x1e0]\n 10877: a0 = a0 << 0x8\n 10880: a1 = u64 [sp + 0x200]\n 10884: a0 = a0 | a1\n 10887: a1 = u64 [sp + 0x1f0]\n 10891: a1 = a1 << 0x10\n 10894: a2 = u64 [sp + 0x1e8]\n 10898: a2 = a2 << 0x18\n 10901: a1 = a1 | a2\n 10904: a0 = a0 | a1\n 10907: a1 = u64 [sp + 0x1f8]\n 10911: a1 = a1 << 0x8\n 10914: a2 = u64 [sp + 0x218]\n 10918: a1 = a1 | a2\n 10921: a2 = u64 [sp + 0x210]\n 10925: a2 = a2 << 0x10\n 10928: a3 = u64 [sp + 0x208]\n 10932: a3 = a3 << 0x18\n 10935: a2 = a2 | a3\n 10938: a1 = a1 | a2\n 10941: a1 = a1 << 0x20\n 10944: t2 = a1 | a0\n 10947: a0 = u64 [sp + 0xa0]\n 10951: a0 = a0 << 0x8\n 10954: a1 = u64 [sp + 0xc0]\n 10958: a0 = a0 | a1\n 10961: a1 = u64 [sp + 0xb0]\n 10965: a1 = a1 << 0x10\n 10968: a2 = u64 [sp + 0xa8]\n 10972: a2 = a2 << 0x18\n 10975: a1 = a1 | a2\n 10978: a0 = a0 | a1\n 10981: a1 = u64 [sp + 0xb8]\n 10985: a1 = a1 << 0x8\n 10988: a2 = u64 [sp + 0xd8]\n 10992: a1 = a1 | a2\n 10995: a2 = u64 [sp + 0xd0]\n 10999: a2 = a2 << 0x10\n 11002: a3 = u64 [sp + 0xc8]\n 11006: a3 = a3 << 0x18\n 11009: a2 = a2 | a3\n 11012: a1 = a1 | a2\n 11015: a1 = a1 << 0x20\n 11018: t0 = a1 | a0\n 11021: a0 = u64 [sp + 0xe0]\n 11025: a0 = a0 << 0x8\n 11028: a1 = u64 [sp + 0x100]\n 11032: a0 = a0 | a1\n 11035: a2 = u64 [sp + 0xf0]\n 11039: a2 = a2 << 0x10\n 11042: a3 = u64 [sp + 0xe8]\n 11046: a3 = a3 << 0x18\n 11049: a2 = a2 | a3\n 11052: a0 = a0 | a2\n 11055: a2 = u64 [sp + 0xf8]\n 11059: a2 = a2 << 0x8\n 11062: a1 = u64 [sp + 0x118]\n 11066: a2 = a2 | a1\n 11069: a3 = u64 [sp + 0x110]\n 11073: a3 = a3 << 0x10\n 11076: t1 = u64 [sp + 0x108]\n 11080: t1 = t1 << 0x18\n 11083: a3 = t1 | a3\n 11086: a2 = a2 | a3\n 11089: a2 = a2 << 0x20\n 11092: t1 = a2 | a0\n 11095: a0 = u64 [sp + 0x120]\n 11099: a0 = a0 << 0x8\n 11102: a1 = u64 [sp + 0x140]\n 11106: a0 = a0 | a1\n 11109: a3 = u64 [sp + 0x130]\n 11113: a3 = a3 << 0x10\n 11116: a5 = u64 [sp + 0x128]\n 11120: a5 = a5 << 0x18\n 11123: a3 = a3 | a5\n 11126: a0 = a0 | a3\n 11129: a3 = u64 [sp + 0x138]\n 11133: a3 = a3 << 0x8\n 11136: a1 = u64 [sp + 0x158]\n 11140: a3 = a3 | a1\n 11143: a5 = u64 [sp + 0x150]\n 11147: a5 = a5 << 0x10\n 11150: s1 = u64 [sp + 0x148]\n 11154: s1 = s1 << 0x18\n 11157: a5 = a5 | s1\n 11160: a3 = a3 | a5\n 11163: a3 = a3 << 0x20\n 11166: a3 = a3 | a0\n 11169: a0 = u64 [sp + 0x160]\n 11173: a0 = a0 << 0x8\n 11176: a1 = u64 [sp + 0x180]\n 11180: a0 = a0 | a1\n 11183: a5 = u64 [sp + 0x170]\n 11187: a5 = a5 << 0x10\n 11190: s1 = u64 [sp + 0x168]\n 11194: s1 = s1 << 0x18\n 11197: a5 = a5 | s1\n 11200: a0 = a0 | a5\n 11203: a5 = u64 [sp + 0x178]\n 11207: a5 = a5 << 0x8\n 11210: a1 = u64 [sp + 0x198]\n 11214: a5 = a5 | a1\n 11217: s1 = u64 [sp + 0x190]\n 11221: s1 = s1 << 0x10\n 11224: a4 = u64 [sp + 0x188]\n 11228: a4 = a4 << 0x18\n 11231: a4 = a4 | s1\n 11234: a4 = a4 | a5\n 11237: a4 = a4 << 0x20\n 11240: a0 = a0 | a4\n 11243: a4 = u64 [sp + 0x8]\n 11246: a4 = a4 << 0x8\n 11249: a1 = u64 [sp + 0x28]\n 11252: a4 = a4 | a1\n 11255: a5 = u64 [sp + 0x18]\n 11258: a5 = a5 << 0x10\n 11261: s1 = u64 [sp + 0x10]\n 11264: s1 = s1 << 0x18\n 11267: a5 = a5 | s1\n 11270: a4 = a4 | a5\n 11273: a5 = u64 [sp + 0x20]\n 11276: a5 = a5 << 0x8\n 11279: a1 = u64 [sp + 0x40]\n 11282: a5 = a5 | a1\n 11285: s1 = u64 [sp + 0x38]\n 11288: s1 = s1 << 0x10\n 11291: a1 = u64 [sp + 0x30]\n 11294: a1 = a1 << 0x18\n 11297: a1 = a1 | s1\n 11300: a1 = a1 | a5\n 11303: a1 = a1 << 0x20\n 11306: a1 = a1 | a4\n 11309: a4 = u64 [sp + 0x48]\n 11312: a4 = a4 << 0x8\n 11315: a2 = u64 [sp + 0x68]\n 11318: a4 = a4 | a2\n 11321: a5 = u64 [sp + 0x58]\n 11324: a5 = a5 << 0x10\n 11327: s1 = u64 [sp + 0x50]\n 11330: s1 = s1 << 0x18\n 11333: a5 = a5 | s1\n 11336: a4 = a4 | a5\n 11339: a5 = u64 [sp + 0x60]\n 11342: a5 = a5 << 0x8\n 11345: a2 = u64 [sp + 0x80]\n 11349: a5 = a5 | a2\n 11352: s1 = u64 [sp + 0x78]\n 11355: s1 = s1 << 0x10\n 11358: a2 = u64 [sp + 0x70]\n 11361: a2 = a2 << 0x18\n 11364: a2 = a2 | s1\n 11367: a2 = a2 | a5\n 11370: a2 = a2 << 0x20\n 11373: a2 = a2 | a4\n 11376: a4 = u64 [sp + 0x3e8]\n 11380: a4 = reverse a4\n 11382: u64 [sp + 0x3e8] = a4\n 11386: a4 = u64 [sp + 0x3e0]\n 11390: a4 = reverse a4\n 11392: u64 [sp + 0x3e0] = a4\n 11396: a4 = reverse t2\n 11398: u64 [sp + 0x3b8] = a4\n 11402: a4 = reverse ra\n 11404: u64 [sp + 0x3b0] = a4\n 11408: a2 = reverse a2\n 11410: u64 [sp + 0x370] = a2\n 11414: a1 = reverse a1\n 11416: u64 [sp + 0x360] = a1\n 11420: a1 = reverse t1\n 11422: u64 [sp + 0x398] = a1\n 11426: a1 = reverse t0\n 11428: u64 [sp + 0x388] = a1\n 11432: a0 = reverse a0\n 11434: u64 [sp + 0x378] = a0\n 11438: a0 = reverse a3\n 11440: u64 [sp + 0x368] = a0\n 11444: a0 = u64 [sp + 0x3a8]\n 11448: a0 = reverse a0\n 11450: u64 [sp + 0x3a8] = a0\n 11454: a0 = u64 [sp + 0x3a0]\n 11458: a0 = reverse a0\n 11460: u64 [sp + 0x3a0] = a0\n 11464: a0 = u64 [sp + 0x390]\n 11468: a0 = reverse a0\n 11470: u64 [sp + 0x390] = a0\n 11474: a0 = u64 [sp + 0x380]\n 11478: a0 = reverse a0\n 11480: u64 [sp + 0x380] = a0\n 11484: a0 = i32 [sp + 0x428]\n 11488: a1 = 0x20\n 11491: ra = 150, jump @0\n      : @183 [@dyn 75] (gas: 125)\n 11497: a1 = u8 [a0 + 0x1]\n 11500: a2 = u8 [a0]\n 11502: a3 = u8 [a0 + 0x2]\n 11505: a4 = u8 [a0 + 0x3]\n 11508: a1 = a1 << 0x8\n 11511: a1 = a1 | a2\n 11514: a3 = a3 << 0x10\n 11517: a4 = a4 << 0x18\n 11520: a3 = a3 | a4\n 11523: a1 = a1 | a3\n 11526: a2 = u8 [a0 + 0x5]\n 11529: a3 = u8 [a0 + 0x4]\n 11532: a4 = u8 [a0 + 0x6]\n 11535: a5 = u8 [a0 + 0x7]\n 11538: a2 = a2 << 0x8\n 11541: a2 = a2 | a3\n 11544: a4 = a4 << 0x10\n 11547: a5 = a5 << 0x18\n 11550: a4 = a4 | a5\n 11553: a2 = a2 | a4\n 11556: a2 = a2 << 0x20\n 11559: t0 = a2 | a1\n 11562: a2 = u8 [a0 + 0x9]\n 11565: a3 = u8 [a0 + 0x8]\n 11568: a4 = u8 [a0 + 0xa]\n 11571: a5 = u8 [a0 + 0xb]\n 11574: a2 = a2 << 0x8\n 11577: a2 = a2 | a3\n 11580: a4 = a4 << 0x10\n 11583: a5 = a5 << 0x18\n 11586: a4 = a4 | a5\n 11589: a2 = a2 | a4\n 11592: a3 = u8 [a0 + 0xd]\n 11595: a4 = u8 [a0 + 0xc]\n 11598: a5 = u8 [a0 + 0xe]\n 11601: s1 = u8 [a0 + 0xf]\n 11604: a3 = a3 << 0x8\n 11607: a3 = a3 | a4\n 11610: a5 = a5 << 0x10\n 11613: s1 = s1 << 0x18\n 11616: a5 = a5 | s1\n 11619: a3 = a3 | a5\n 11622: a3 = a3 << 0x20\n 11625: a2 = a2 | a3\n 11628: a3 = u8 [a0 + 0x11]\n 11631: a4 = u8 [a0 + 0x10]\n 11634: a5 = u8 [a0 + 0x12]\n 11637: s1 = u8 [a0 + 0x13]\n 11640: a3 = a3 << 0x8\n 11643: a3 = a3 | a4\n 11646: a5 = a5 << 0x10\n 11649: s1 = s1 << 0x18\n 11652: a5 = a5 | s1\n 11655: a3 = a3 | a5\n 11658: a4 = u8 [a0 + 0x15]\n 11661: a5 = u8 [a0 + 0x14]\n 11664: s1 = u8 [a0 + 0x16]\n 11667: a1 = u8 [a0 + 0x17]\n 11670: a4 = a4 << 0x8\n 11673: a4 = a4 | a5\n 11676: s1 = s1 << 0x10\n 11679: a1 = a1 << 0x18\n 11682: a1 = a1 | s1\n 11685: a1 = a1 | a4\n 11688: a1 = a1 << 0x20\n 11691: a3 = a3 | a1\n 11694: a1 = u8 [a0 + 0x19]\n 11697: a4 = u8 [a0 + 0x18]\n 11700: a5 = u8 [a0 + 0x1a]\n 11703: s1 = u8 [a0 + 0x1b]\n 11706: a1 = a1 << 0x8\n 11709: a1 = a1 | a4\n 11712: a5 = a5 << 0x10\n 11715: s1 = s1 << 0x18\n 11718: a5 = a5 | s1\n 11721: a1 = a1 | a5\n 11724: a4 = u8 [a0 + 0x1d]\n 11727: a5 = u8 [a0 + 0x1c]\n 11730: s1 = u8 [a0 + 0x1e]\n 11733: a0 = u8 [a0 + 0x1f]\n 11736: a4 = a4 << 0x8\n 11739: a4 = a4 | a5\n 11742: s1 = s1 << 0x10\n 11745: a0 = a0 << 0x18\n 11748: a0 = a0 | s1\n 11751: a0 = a0 | a4\n 11754: a0 = a0 << 0x20\n 11757: a0 = a0 | a1\n 11760: t1 = reverse a0\n 11762: t2 = reverse a3\n 11764: a1 = reverse a2\n 11766: a2 = reverse t0\n 11768: a0 = u64 [sp + 0x428]\n 11772: a3 = a0 + 0x20\n 11775: a5 = a3 <u a0\n 11778: a0 = u64 [sp + 0x420]\n 11782: s1 = a0 + a5\n 11785: a4 = s1 <u a0\n 11788: a4 = a5 if a5 == 0\n 11791: a0 = u64 [sp + 0x418]\n 11795: a4 = a4 + a0\n 11798: a5 = a4 <u a0\n 11801: a0 = u64 [sp + 0x410]\n 11805: a5 = a5 + a0\n 11808: a0 = u64 [sp + 0x3f0]\n 11812: u64 [sp + 0x448] = a0\n 11816: a0 = u64 [sp + 0x3f8]\n 11820: u64 [sp + 0x440] = a0\n 11824: a0 = u64 [sp + 0x408]\n 11828: u64 [sp + 0x438] = a0\n 11832: a0 = u64 [sp + 0x400]\n 11836: u64 [sp + 0x430] = a0\n 11840: u64 [sp + 0x478] = s1\n 11844: u64 [sp + 0x470] = a3\n 11848: u64 [sp + 0x480] = a4\n 11852: u64 [sp + 0x488] = a5\n 11856: u64 [sp + 0x468] = a2\n 11860: u64 [sp + 0x460] = a1\n 11864: u64 [sp + 0x458] = t2\n 11868: a0 = sp + 0x490\n 11872: a1 = sp + 0x470\n 11876: a2 = sp + 0x450\n 11880: a3 = sp + 0x430\n 11884: u64 [sp + 0x450] = t1\n 11888: ra = 152, jump @123\n      : @184 [@dyn 76] (gas: 63)\n 11894: a0 = u64 [sp + 0x4a0]\n 11898: a1 = u64 [sp + 0x4a8]\n 11902: a2 = u64 [sp + 0x490]\n 11906: a3 = u64 [sp + 0x498]\n 11910: a4 = u64 [sp + 0x3d0]\n 11914: u64 [a4 + 0xd0] = a0\n 11918: u64 [a4 + 0xd8] = a1\n 11922: u64 [a4 + 0xc0] = a2\n 11926: u64 [a4 + 0xc8] = a3\n 11930: a0 = u64 [sp + 0x88]\n 11934: u64 [a4 + 0xb0] = a0\n 11938: a0 = u64 [sp + 0x3d8]\n 11942: u64 [a4 + 0xb8] = a0\n 11946: a0 = u64 [sp + 0x360]\n 11950: u64 [a4 + 0xa0] = a0\n 11954: a0 = u64 [sp + 0x370]\n 11958: u64 [a4 + 0xa8] = a0\n 11962: a0 = u64 [sp + 0x90]\n 11966: u64 [a4 + 0x90] = a0\n 11970: a0 = u64 [sp + 0x330]\n 11974: u64 [a4 + 0x98] = a0\n 11978: a0 = u64 [sp + 0x98]\n 11982: u64 [a4 + 0x80] = a0\n 11986: a0 = u64 [sp + 0x338]\n 11990: u64 [a4 + 0x88] = a0\n 11994: a0 = u64 [sp + 0x368]\n 11998: u64 [a4 + 0x70] = a0\n 12001: a0 = u64 [sp + 0x378]\n 12005: u64 [a4 + 0x78] = a0\n 12008: a0 = u64 [sp + 0x388]\n 12012: u64 [a4 + 0x60] = a0\n 12015: a0 = u64 [sp + 0x398]\n 12019: u64 [a4 + 0x68] = a0\n 12022: a0 = u64 [sp + 0x320]\n 12026: u64 [a4 + 0x50] = a0\n 12029: a0 = u64 [sp + 0x328]\n 12033: u64 [a4 + 0x58] = a0\n 12036: a0 = u64 [sp + 0x3b0]\n 12040: u64 [a4 + 0x40] = a0\n 12043: a0 = u64 [sp + 0x3b8]\n 12047: u64 [a4 + 0x48] = a0\n 12050: a0 = u64 [sp + 0x380]\n 12054: u64 [a4 + 0x30] = a0\n 12057: a0 = u64 [sp + 0x390]\n 12061: u64 [a4 + 0x38] = a0\n 12064: a0 = u64 [sp + 0x3a0]\n 12068: u64 [a4 + 0x20] = a0\n 12071: a0 = u64 [sp + 0x3a8]\n 12075: u64 [a4 + 0x28] = a0\n 12078: a0 = u64 [sp + 0x3c0]\n 12082: u64 [a4 + 0x10] = a0\n 12085: a0 = u64 [sp + 0x3c8]\n 12089: u64 [a4 + 0x18] = a0\n 12092: a0 = u64 [sp + 0x3e0]\n 12096: u64 [a4] = a0\n 12098: a0 = u64 [sp + 0x3e8]\n 12102: u64 [a4 + 0x8] = a0\n 12105: sp = s0 + 0xfffffffffffffab0\n 12109: ra = u64 [sp + 0x548]\n 12113: s0 = u64 [sp + 0x540]\n 12117: s1 = u64 [sp + 0x538]\n 12121: sp = sp + 0x550\n 12125: ret\n      : @185 (gas: 1)\n 12127: trap\n      : @186 (gas: 4)\n 12128: a0 = 0\n 12130: a1 = 0\n 12132: ra = 0x9a\n 12136: jump @0\n      : @187 (gas: 2)\n 12139: a1 = 0\n 12141: ra = 154, jump @0\n      : @188 [@dyn 77] (gas: 6)\n 12147: i32 a1 = a0 + 0\n 12149: a0 = 0x1\n 12152: a2 = 0\n 12154: ra = 0x9c\n 12158: ecalli 14 // 'seal_return'\n 12160: fallthrough\n      : @189 [@dyn 78] (gas: 19)\n 12161: sp = sp + 0xfffffffffffffdf0\n 12165: u64 [sp + 0x208] = ra\n 12169: u64 [sp + 0x200] = s0\n 12173: u64 [sp + 0x1f8] = s1\n 12177: s0 = sp + 0x210\n 12181: sp = sp & 0xfffffffffffffff0\n 12184: a1 = i32 [0x20078]\n 12189: s1 = a0\n 12191: u64 [sp + 0x88] = a1\n 12195: a0 = a1 << 0x20\n 12198: a2 = a0 >> 0x20\n 12201: u64 [sp + 456] = 0\n 12205: u64 [sp + 448] = 0\n 12209: u64 [sp + 440] = 0\n 12213: a0 = sp + 0x1d0\n 12217: a1 = sp + 0x1b0\n 12221: u64 [sp + 0x80] = a2\n 12225: u64 [sp + 0x1b0] = a2\n 12229: ra = 158, jump @113\n      : @190 [@dyn 79] (gas: 15)\n 12235: a1 = u64 [sp + 0x1e8]\n 12239: a3 = u64 [sp + 0x1e0]\n 12243: a0 = u64 [sp + 0x1d8]\n 12247: a2 = u64 [sp + 0x1d0]\n 12251: u64 [sp + 0x78] = a0\n 12254: u64 [sp + 0x68] = a1\n 12257: a0 = a0 | a1\n 12260: a1 = a2 | a3\n 12263: a1 = a1 | a0\n 12266: a1 = a1 >> 0x20\n 12269: u64 [sp + 0x70] = a3\n 12272: a0 = a0 | a3\n 12275: a0 = a0 << 0x20\n 12278: a0 = a0 | a1\n 12281: jump @194 if a0 != 0\n      : @191 (gas: 4)\n 12285: i32 a0 = a2 + 0\n 12287: a1 = u64 [sp + 0x88]\n 12291: u64 [sp + 0x60] = a2\n 12294: ra = 160, jump @0\n      : @192 [@dyn 80] (gas: 30)\n 12300: i32 a0 = a0 + 0\n 12302: a1 = u64 [sp + 0x88]\n 12306: a2 = 0\n 12308: ecalli 2 // 'call_data_copy'\n 12310: a0 = u64 [sp + 0x80]\n 12314: a2 = u64 [sp + 0x60]\n 12317: t1 = a2 + a0\n 12320: a1 = t1 <u a2\n 12323: t2 = a2\n 12325: a5 = u64 [sp + 0x78]\n 12328: a2 = a5 + a1\n 12331: a3 = a2 <u a5\n 12334: a3 = a1 if a1 == 0\n 12337: a4 = u64 [sp + 0x70]\n 12340: a3 = a3 + a4\n 12343: a1 = a3 <u a4\n 12346: a0 = u64 [sp + 0x68]\n 12349: t0 = a0 + a1\n 12352: u64 [sp + 0x98] = a2\n 12356: u64 [sp + 0x90] = t1\n 12360: u64 [sp + 0xc8] = a0\n 12364: u64 [sp + 0xc0] = a4\n 12368: u64 [sp + 0xb8] = a5\n 12372: u64 [sp + 0xb0] = t2\n 12376: u64 [sp + 0xa0] = a3\n 12380: a0 = sp + 0xd0\n 12384: a1 = sp + 0xb0\n 12388: a2 = sp + 0x90\n 12392: u64 [sp + 0xa8] = t0\n 12396: ra = 162, jump @152\n      : @193 [@dyn 81] (gas: 98)\n 12402: a0 = u64 [sp + 0xd0]\n 12406: u64 [sp + 0x88] = a0\n 12410: a0 = u64 [sp + 0xd8]\n 12414: u64 [sp + 0x80] = a0\n 12418: a0 = u64 [sp + 0xe0]\n 12422: u64 [sp + 0x78] = a0\n 12425: a0 = u64 [sp + 0xe8]\n 12429: u64 [sp + 0x70] = a0\n 12432: a0 = u64 [sp + 0xf0]\n 12436: u64 [sp + 0x68] = a0\n 12439: a0 = u64 [sp + 0xf8]\n 12443: u64 [sp + 0x60] = a0\n 12446: a0 = u64 [sp + 0x100]\n 12450: u64 [sp + 0x58] = a0\n 12453: a0 = u64 [sp + 0x108]\n 12457: u64 [sp + 0x50] = a0\n 12460: a0 = u64 [sp + 0x110]\n 12464: u64 [sp + 0x48] = a0\n 12467: a0 = u64 [sp + 0x118]\n 12471: u64 [sp + 0x40] = a0\n 12474: a0 = u64 [sp + 0x120]\n 12478: u64 [sp + 0x38] = a0\n 12481: a0 = u64 [sp + 0x128]\n 12485: u64 [sp + 0x30] = a0\n 12488: a0 = u64 [sp + 0x130]\n 12492: u64 [sp + 0x28] = a0\n 12495: a0 = u64 [sp + 0x138]\n 12499: u64 [sp + 0x20] = a0\n 12502: a0 = u64 [sp + 0x140]\n 12506: u64 [sp + 0x18] = a0\n 12509: a0 = u64 [sp + 0x148]\n 12513: u64 [sp + 0x10] = a0\n 12516: a0 = u64 [sp + 0x150]\n 12520: u64 [sp + 0x8] = a0\n 12523: a0 = u64 [sp + 0x158]\n 12527: u64 [sp] = a0\n 12529: ra = u64 [sp + 0x160]\n 12533: t2 = u64 [sp + 0x168]\n 12537: t1 = u64 [sp + 0x170]\n 12541: t0 = u64 [sp + 0x178]\n 12545: a5 = u64 [sp + 0x180]\n 12549: a4 = u64 [sp + 0x188]\n 12553: a0 = u64 [sp + 0x1a8]\n 12557: a1 = u64 [sp + 0x1a0]\n 12561: a2 = u64 [sp + 0x198]\n 12565: a3 = u64 [sp + 0x190]\n 12569: u64 [s1 + 0xd8] = a0\n 12573: u64 [s1 + 0xd0] = a1\n 12577: u64 [s1 + 0xc8] = a2\n 12581: u64 [s1 + 0xc0] = a3\n 12585: u64 [s1 + 0xb8] = a4\n 12589: u64 [s1 + 0xb0] = a5\n 12593: u64 [s1 + 0xa8] = t0\n 12597: u64 [s1 + 0xa0] = t1\n 12601: u64 [s1 + 0x98] = t2\n 12605: u64 [s1 + 0x90] = ra\n 12609: a0 = u64 [sp]\n 12611: u64 [s1 + 0x88] = a0\n 12615: a0 = u64 [sp + 0x8]\n 12618: u64 [s1 + 0x80] = a0\n 12622: a0 = u64 [sp + 0x10]\n 12625: u64 [s1 + 0x78] = a0\n 12628: a0 = u64 [sp + 0x18]\n 12631: u64 [s1 + 0x70] = a0\n 12634: a0 = u64 [sp + 0x20]\n 12637: u64 [s1 + 0x68] = a0\n 12640: a0 = u64 [sp + 0x28]\n 12643: u64 [s1 + 0x60] = a0\n 12646: a0 = u64 [sp + 0x30]\n 12649: u64 [s1 + 0x58] = a0\n 12652: a0 = u64 [sp + 0x38]\n 12655: u64 [s1 + 0x50] = a0\n 12658: a0 = u64 [sp + 0x40]\n 12661: u64 [s1 + 0x48] = a0\n 12664: a0 = u64 [sp + 0x48]\n 12667: u64 [s1 + 0x40] = a0\n 12670: a0 = u64 [sp + 0x50]\n 12673: u64 [s1 + 0x38] = a0\n 12676: a0 = u64 [sp + 0x58]\n 12679: u64 [s1 + 0x30] = a0\n 12682: a0 = u64 [sp + 0x60]\n 12685: u64 [s1 + 0x28] = a0\n 12688: a0 = u64 [sp + 0x68]\n 12691: u64 [s1 + 0x20] = a0\n 12694: a0 = u64 [sp + 0x70]\n 12697: u64 [s1 + 0x18] = a0\n 12700: a0 = u64 [sp + 0x78]\n 12703: u64 [s1 + 0x10] = a0\n 12706: a0 = u64 [sp + 0x80]\n 12710: u64 [s1 + 0x8] = a0\n 12713: a0 = u64 [sp + 0x88]\n 12717: u64 [s1] = a0\n 12719: sp = s0 + 0xfffffffffffffdf0\n 12723: ra = u64 [sp + 0x208]\n 12727: s0 = u64 [sp + 0x200]\n 12731: s1 = u64 [sp + 0x1f8]\n 12735: sp = sp + 0x210\n 12739: ret\n      : @194 (gas: 1)\n 12741: trap\n      : @195 (gas: 17)\n 12742: sp = sp + 0xffffffffffffffa0\n 12745: u64 [sp + 0x58] = ra\n 12748: u64 [sp + 0x50] = s0\n 12751: u64 [sp + 0x48] = s1\n 12754: a3 = u64 [a1 + 0x18]\n 12757: a4 = u64 [a1 + 0x10]\n 12760: a5 = u64 [a1 + 0x8]\n 12763: s1 = u64 [a1]\n 12765: a1 = a5 | a3\n 12768: a2 = s1 | a4\n 12771: a2 = a2 | a1\n 12774: a2 = a2 >> 0x20\n 12777: a1 = a1 | a4\n 12780: a1 = a1 << 0x20\n 12783: a1 = a1 | a2\n 12786: u64 [sp + 0x28] = a0\n 12789: jump @202 if a1 != 0\n      : @196 (gas: 19)\n 12793: a0 = s1 + 0x20\n 12796: u64 [sp + 0x30] = a0\n 12799: a0 = a0 <u s1\n 12802: a1 = a5 + a0\n 12805: u64 [sp + 0x40] = a1\n 12808: u64 [sp + 0x8] = a5\n 12811: s0 = a1 <u a5\n 12814: s0 = a0 if a0 == 0\n 12817: s0 = s0 + a4\n 12820: u64 [sp + 0x10] = a4\n 12823: a0 = s0 <u a4\n 12826: u64 [sp + 0x18] = a3\n 12829: a0 = a0 + a3\n 12832: u64 [sp + 0x38] = a0\n 12835: u64 [sp] = s1\n 12837: i32 a0 = s1 + 0\n 12839: a1 = 0x20\n 12842: s1 = 0x20\n 12845: ra = 164, jump @0\n      : @197 [@dyn 82] (gas: 45)\n 12851: u8 [a0 + 0x1f] = s1\n 12854: a1 = u64 [sp + 0x30]\n 12857: s1 = a1\n 12859: a1 = a1 | s0\n 12862: a2 = u64 [sp + 0x40]\n 12865: a4 = u64 [sp + 0x38]\n 12868: a2 = a2 | a4\n 12871: a1 = a1 | a2\n 12874: a1 = a1 >> 0x20\n 12877: u64 [sp + 0x20] = s0\n 12880: a2 = a2 | s0\n 12883: a2 = a2 << 0x20\n 12886: a1 = a1 | a2\n 12889: u8 [a0 + 30] = 0\n 12892: u8 [a0 + 29] = 0\n 12895: u8 [a0 + 28] = 0\n 12898: u8 [a0 + 27] = 0\n 12901: u8 [a0 + 26] = 0\n 12904: u8 [a0 + 25] = 0\n 12907: u8 [a0 + 24] = 0\n 12910: u8 [a0 + 23] = 0\n 12913: u8 [a0 + 22] = 0\n 12916: u8 [a0 + 21] = 0\n 12919: u8 [a0 + 20] = 0\n 12922: u8 [a0 + 19] = 0\n 12925: u8 [a0 + 18] = 0\n 12928: u8 [a0 + 17] = 0\n 12931: u8 [a0 + 16] = 0\n 12934: u8 [a0 + 15] = 0\n 12937: u8 [a0 + 14] = 0\n 12940: u8 [a0 + 13] = 0\n 12943: u8 [a0 + 12] = 0\n 12946: u8 [a0 + 11] = 0\n 12949: u8 [a0 + 10] = 0\n 12952: u8 [a0 + 9] = 0\n 12955: u8 [a0 + 8] = 0\n 12958: u8 [a0 + 7] = 0\n 12961: u8 [a0 + 6] = 0\n 12964: u8 [a0 + 5] = 0\n 12967: u8 [a0 + 4] = 0\n 12970: u8 [a0 + 3] = 0\n 12973: u8 [a0 + 2] = 0\n 12976: u8 [a0 + 1] = 0\n 12979: u8 [a0 + 0] = 0\n 12981: jump @202 if a1 != 0\n      : @198 (gas: 4)\n 12985: i32 s0 = s1 + 0\n 12987: a1 = 0x20\n 12990: a0 = s0\n 12992: ra = 166, jump @0\n      : @199 [@dyn 83] (gas: 41)\n 12998: u8 [a0 + 31] = 0x1f\n 13002: u8 [a0 + 30] = 0\n 13005: u8 [a0 + 29] = 0\n 13008: u8 [a0 + 28] = 0\n 13011: u8 [a0 + 27] = 0\n 13014: u8 [a0 + 26] = 0\n 13017: u8 [a0 + 25] = 0\n 13020: u8 [a0 + 24] = 0\n 13023: u8 [a0 + 23] = 0\n 13026: u8 [a0 + 22] = 0\n 13029: u8 [a0 + 21] = 0\n 13032: u8 [a0 + 20] = 0\n 13035: u8 [a0 + 19] = 0\n 13038: u8 [a0 + 18] = 0\n 13041: u8 [a0 + 17] = 0\n 13044: u8 [a0 + 16] = 0\n 13047: u8 [a0 + 15] = 0\n 13050: u8 [a0 + 14] = 0\n 13053: u8 [a0 + 13] = 0\n 13056: u8 [a0 + 12] = 0\n 13059: u8 [a0 + 11] = 0\n 13062: u8 [a0 + 10] = 0\n 13065: u8 [a0 + 9] = 0\n 13068: u8 [a0 + 8] = 0\n 13071: u8 [a0 + 7] = 0\n 13074: u8 [a0 + 6] = 0\n 13077: u8 [a0 + 5] = 0\n 13080: u8 [a0 + 4] = 0\n 13083: u8 [a0 + 3] = 0\n 13086: u8 [a0 + 2] = 0\n 13089: u8 [a0 + 1] = 0\n 13092: a1 = u64 [sp + 0x20]\n 13095: a2 = u64 [sp + 0x38]\n 13098: a1 = a1 | a2\n 13101: a2 = 0xffffffe0\n 13111: a2 = s1 <u a2\n 13114: a3 = u64 [sp + 0x40]\n 13117: a2 = 0 if a3 != 0\n 13119: a2 = 0 if a1 != 0\n 13121: u8 [a0 + 0] = 0\n 13123: jump @202 if a2 == 0\n      : @200 (gas: 3)\n 13127: i32 a0 = s0 + 0x20\n 13130: a1 = 0x20\n 13133: ra = 168, jump @0\n      : @201 [@dyn 84] (gas: 55)\n 13139: u8 [a0 + 31] = 0\n 13142: u8 [a0 + 30] = 0x73\n 13146: u8 [a0 + 29] = 0x73\n 13150: u8 [a0 + 28] = 0x65\n 13154: u8 [a0 + 27] = 0x72\n 13158: u8 [a0 + 26] = 0x64\n 13162: u8 [a0 + 25] = 0x64\n 13166: u8 [a0 + 24] = 0x61\n 13170: u8 [a0 + 23] = 0x20\n 13174: u8 [a0 + 22] = 0x6f\n 13178: u8 [a0 + 21] = 0x72\n 13182: u8 [a0 + 20] = 0x65\n 13186: u8 [a0 + 19] = 0x7a\n 13190: u8 [a0 + 18] = 0x20\n 13194: u8 [a0 + 17] = 0x73\n 13198: u8 [a0 + 16] = 0x69\n 13202: u8 [a0 + 15] = 0x20\n 13206: u8 [a0 + 14] = 0x79\n 13210: u8 [a0 + 13] = 0x72\n 13214: u8 [a0 + 12] = 0x6f\n 13218: u8 [a0 + 11] = 0x74\n 13222: u8 [a0 + 10] = 0x63\n 13226: u8 [a0 + 9] = 0x61\n 13230: u8 [a0 + 8] = 0x66\n 13234: u8 [a0 + 7] = 0x20\n 13238: u8 [a0 + 6] = 0x3a\n 13242: a5 = 0x77\n 13245: u8 [a0 + 0x5] = a5\n 13248: u8 [a0 + 4] = 0x6f\n 13252: u8 [a0 + 3] = 0x72\n 13256: u8 [a0 + 2] = 0x63\n 13260: u8 [a0 + 1] = 0x73\n 13264: u8 [a0 + 0] = 0x45\n 13267: a1 = u64 [sp]\n 13269: a0 = a1 + 0x60\n 13272: a1 = a0 <u a1\n 13275: a3 = u64 [sp + 0x8]\n 13278: a2 = a3 + a1\n 13281: a3 = a2 <u a3\n 13284: a3 = a1 if a1 == 0\n 13287: a1 = u64 [sp + 0x10]\n 13290: a3 = a3 + a1\n 13293: a1 = a3 <u a1\n 13296: a4 = u64 [sp + 0x18]\n 13299: a1 = a1 + a4\n 13302: a4 = u64 [sp + 0x28]\n 13305: u64 [a4] = a0\n 13307: u64 [a4 + 0x8] = a2\n 13310: u64 [a4 + 0x10] = a3\n 13313: u64 [a4 + 0x18] = a1\n 13316: ra = u64 [sp + 0x58]\n 13319: s0 = u64 [sp + 0x50]\n 13322: s1 = u64 [sp + 0x48]\n 13325: sp = sp + 0x60\n 13328: ret\n      : @202 (gas: 1)\n 13330: trap\n      : @203 (gas: 16)\n 13331: sp = sp + 0xffffffffffffffa0\n 13334: u64 [sp + 0x58] = ra\n 13337: u64 [sp + 0x50] = s0\n 13340: u64 [sp + 0x48] = s1\n 13343: a3 = u64 [a1 + 0x18]\n 13346: a4 = u64 [a1 + 0x10]\n 13349: a5 = u64 [a1 + 0x8]\n 13352: s1 = u64 [a1]\n 13354: a1 = a5 | a3\n 13357: a2 = s1 | a4\n 13360: a2 = a2 | a1\n 13363: a2 = a2 >> 0x20\n 13366: a1 = a1 | a4\n 13369: a1 = a1 << 0x20\n 13372: a1 = a1 | a2\n 13375: jump @210 if a1 != 0\n      : @204 (gas: 20)\n 13379: u64 [sp + 0x10] = a0\n 13382: a0 = s1 + 0x20\n 13385: u64 [sp + 0x30] = a0\n 13388: a0 = a0 <u s1\n 13391: a1 = a5 + a0\n 13394: u64 [sp + 0x40] = a1\n 13397: u64 [sp + 0x8] = a5\n 13400: s0 = a1 <u a5\n 13403: s0 = a0 if a0 == 0\n 13406: s0 = s0 + a4\n 13409: u64 [sp + 0x18] = a4\n 13412: a0 = s0 <u a4\n 13415: u64 [sp + 0x20] = a3\n 13418: a0 = a0 + a3\n 13421: u64 [sp + 0x38] = a0\n 13424: u64 [sp] = s1\n 13426: i32 a0 = s1 + 0\n 13428: a1 = 0x20\n 13431: s1 = 0x20\n 13434: ra = 170, jump @0\n      : @205 [@dyn 85] (gas: 45)\n 13440: a1 = u64 [sp + 0x30]\n 13443: a3 = a1\n 13445: a1 = a1 | s0\n 13448: a2 = u64 [sp + 0x40]\n 13451: a4 = u64 [sp + 0x38]\n 13454: a2 = a2 | a4\n 13457: a1 = a1 | a2\n 13460: a1 = a1 >> 0x20\n 13463: u64 [sp + 0x28] = s0\n 13466: a2 = a2 | s0\n 13469: a2 = a2 << 0x20\n 13472: a1 = a1 | a2\n 13475: u8 [a0 + 0x1f] = s1\n 13478: u8 [a0 + 30] = 0\n 13481: u8 [a0 + 29] = 0\n 13484: u8 [a0 + 28] = 0\n 13487: u8 [a0 + 27] = 0\n 13490: u8 [a0 + 26] = 0\n 13493: u8 [a0 + 25] = 0\n 13496: u8 [a0 + 24] = 0\n 13499: u8 [a0 + 23] = 0\n 13502: u8 [a0 + 22] = 0\n 13505: u8 [a0 + 21] = 0\n 13508: u8 [a0 + 20] = 0\n 13511: u8 [a0 + 19] = 0\n 13514: u8 [a0 + 18] = 0\n 13517: u8 [a0 + 17] = 0\n 13520: u8 [a0 + 16] = 0\n 13523: u8 [a0 + 15] = 0\n 13526: u8 [a0 + 14] = 0\n 13529: u8 [a0 + 13] = 0\n 13532: u8 [a0 + 12] = 0\n 13535: u8 [a0 + 11] = 0\n 13538: u8 [a0 + 10] = 0\n 13541: u8 [a0 + 9] = 0\n 13544: u8 [a0 + 8] = 0\n 13547: u8 [a0 + 7] = 0\n 13550: u8 [a0 + 6] = 0\n 13553: u8 [a0 + 5] = 0\n 13556: u8 [a0 + 4] = 0\n 13559: u8 [a0 + 3] = 0\n 13562: u8 [a0 + 2] = 0\n 13565: u8 [a0 + 1] = 0\n 13568: u8 [a0 + 0] = 0\n 13570: jump @210 if a1 != 0\n      : @206 (gas: 5)\n 13574: s1 = a3\n 13576: i32 s0 = a3 + 0\n 13578: a1 = 0x20\n 13581: a0 = s0\n 13583: ra = 172, jump @0\n      : @207 [@dyn 86] (gas: 41)\n 13589: u8 [a0 + 31] = 0x20\n 13593: u8 [a0 + 30] = 0\n 13596: u8 [a0 + 29] = 0\n 13599: u8 [a0 + 28] = 0\n 13602: u8 [a0 + 27] = 0\n 13605: u8 [a0 + 26] = 0\n 13608: u8 [a0 + 25] = 0\n 13611: u8 [a0 + 24] = 0\n 13614: u8 [a0 + 23] = 0\n 13617: u8 [a0 + 22] = 0\n 13620: u8 [a0 + 21] = 0\n 13623: u8 [a0 + 20] = 0\n 13626: u8 [a0 + 19] = 0\n 13629: u8 [a0 + 18] = 0\n 13632: u8 [a0 + 17] = 0\n 13635: u8 [a0 + 16] = 0\n 13638: u8 [a0 + 15] = 0\n 13641: u8 [a0 + 14] = 0\n 13644: u8 [a0 + 13] = 0\n 13647: u8 [a0 + 12] = 0\n 13650: u8 [a0 + 11] = 0\n 13653: u8 [a0 + 10] = 0\n 13656: u8 [a0 + 9] = 0\n 13659: u8 [a0 + 8] = 0\n 13662: u8 [a0 + 7] = 0\n 13665: u8 [a0 + 6] = 0\n 13668: u8 [a0 + 5] = 0\n 13671: u8 [a0 + 4] = 0\n 13674: u8 [a0 + 3] = 0\n 13677: u8 [a0 + 2] = 0\n 13680: u8 [a0 + 1] = 0\n 13683: a1 = u64 [sp + 0x28]\n 13686: a2 = u64 [sp + 0x38]\n 13689: a1 = a1 | a2\n 13692: a2 = 0xffffffe0\n 13702: a2 = s1 <u a2\n 13705: a3 = u64 [sp + 0x40]\n 13708: a2 = 0 if a3 != 0\n 13710: a2 = 0 if a1 != 0\n 13712: u8 [a0 + 0] = 0\n 13714: jump @210 if a2 == 0\n      : @208 (gas: 4)\n 13718: i32 a0 = s0 + 0x20\n 13721: a1 = 0x20\n 13724: s0 = 0x20\n 13727: ra = 174, jump @0\n      : @209 [@dyn 87] (gas: 54)\n 13733: u8 [a0 + 25] = 0x61\n 13737: u8 [a0 + 20] = 0x7a\n 13741: u8 [a0 + 29] = 0x65\n 13745: u8 [a0 + 21] = 0x65\n 13749: u8 [a0 + 14] = 0x65\n 13753: u8 [a0 + 27] = 0x64\n 13757: u8 [a0 + 26] = 0x64\n 13761: u8 [a0 + 13] = 0x64\n 13765: u8 [a0 + 17] = 0x69\n 13769: u8 [a0 + 12] = 0x69\n 13773: u8 [a0 + 11] = 0x76\n 13777: u8 [a0 + 8] = 0x70\n 13781: u8 [a0 + 0x18] = s0\n 13784: u8 [a0 + 0x13] = s0\n 13787: u8 [a0 + 0x10] = s0\n 13790: u8 [a0 + 0x7] = s0\n 13793: u8 [a0 + 6] = 0x3a\n 13797: u8 [a0 + 5] = 0x77\n 13801: u8 [a0 + 23] = 0x6f\n 13805: u8 [a0 + 10] = 0x6f\n 13809: u8 [a0 + 4] = 0x6f\n 13813: u8 [a0 + 28] = 0x72\n 13817: u8 [a0 + 22] = 0x72\n 13821: u8 [a0 + 15] = 0x72\n 13825: u8 [a0 + 9] = 0x72\n 13829: u8 [a0 + 3] = 0x72\n 13833: u8 [a0 + 2] = 0x63\n 13837: u8 [a0 + 31] = 0x73\n 13841: u8 [a0 + 30] = 0x73\n 13845: u8 [a0 + 18] = 0x73\n 13849: u8 [a0 + 1] = 0x73\n 13853: u8 [a0 + 0] = 0x45\n 13856: a1 = u64 [sp]\n 13858: a0 = a1 + 0x60\n 13861: a1 = a0 <u a1\n 13864: a3 = u64 [sp + 0x8]\n 13867: a2 = a3 + a1\n 13870: a3 = a2 <u a3\n 13873: a3 = a1 if a1 == 0\n 13876: a1 = u64 [sp + 0x18]\n 13879: a3 = a3 + a1\n 13882: a1 = a3 <u a1\n 13885: a4 = u64 [sp + 0x20]\n 13888: a1 = a1 + a4\n 13891: a4 = u64 [sp + 0x10]\n 13894: u64 [a4] = a0\n 13896: u64 [a4 + 0x8] = a2\n 13899: u64 [a4 + 0x10] = a3\n 13902: u64 [a4 + 0x18] = a1\n 13905: ra = u64 [sp + 0x58]\n 13908: s0 = u64 [sp + 0x50]\n 13911: s1 = u64 [sp + 0x48]\n 13914: sp = sp + 0x60\n 13917: ret\n      : @210 (gas: 1)\n 13919: trap\n      : @211 (gas: 17)\n 13920: sp = sp + 0xffffffffffffffa0\n 13923: u64 [sp + 0x58] = ra\n 13926: u64 [sp + 0x50] = s0\n 13929: u64 [sp + 0x48] = s1\n 13932: a3 = u64 [a1 + 0x18]\n 13935: a4 = u64 [a1 + 0x10]\n 13938: a5 = u64 [a1 + 0x8]\n 13941: s1 = u64 [a1]\n 13943: a1 = a5 | a3\n 13946: a2 = s1 | a4\n 13949: a2 = a2 | a1\n 13952: a2 = a2 >> 0x20\n 13955: a1 = a1 | a4\n 13958: a1 = a1 << 0x20\n 13961: a1 = a1 | a2\n 13964: u64 [sp + 0x28] = a0\n 13967: jump @218 if a1 != 0\n      : @212 (gas: 19)\n 13971: a0 = s1 + 0x20\n 13974: u64 [sp + 0x30] = a0\n 13977: a0 = a0 <u s1\n 13980: a1 = a5 + a0\n 13983: u64 [sp + 0x40] = a1\n 13986: u64 [sp + 0x8] = a5\n 13989: s0 = a1 <u a5\n 13992: s0 = a0 if a0 == 0\n 13995: s0 = s0 + a4\n 13998: u64 [sp + 0x10] = a4\n 14001: a0 = s0 <u a4\n 14004: u64 [sp + 0x18] = a3\n 14007: a0 = a0 + a3\n 14010: u64 [sp + 0x38] = a0\n 14013: u64 [sp] = s1\n 14015: i32 a0 = s1 + 0\n 14017: a1 = 0x20\n 14020: s1 = 0x20\n 14023: ra = 176, jump @0\n      : @213 [@dyn 88] (gas: 45)\n 14029: u8 [a0 + 0x1f] = s1\n 14032: a1 = u64 [sp + 0x30]\n 14035: s1 = a1\n 14037: a1 = a1 | s0\n 14040: a2 = u64 [sp + 0x40]\n 14043: a4 = u64 [sp + 0x38]\n 14046: a2 = a2 | a4\n 14049: a1 = a1 | a2\n 14052: a1 = a1 >> 0x20\n 14055: u64 [sp + 0x20] = s0\n 14058: a2 = a2 | s0\n 14061: a2 = a2 << 0x20\n 14064: a1 = a1 | a2\n 14067: u8 [a0 + 30] = 0\n 14070: u8 [a0 + 29] = 0\n 14073: u8 [a0 + 28] = 0\n 14076: u8 [a0 + 27] = 0\n 14079: u8 [a0 + 26] = 0\n 14082: u8 [a0 + 25] = 0\n 14085: u8 [a0 + 24] = 0\n 14088: u8 [a0 + 23] = 0\n 14091: u8 [a0 + 22] = 0\n 14094: u8 [a0 + 21] = 0\n 14097: u8 [a0 + 20] = 0\n 14100: u8 [a0 + 19] = 0\n 14103: u8 [a0 + 18] = 0\n 14106: u8 [a0 + 17] = 0\n 14109: u8 [a0 + 16] = 0\n 14112: u8 [a0 + 15] = 0\n 14115: u8 [a0 + 14] = 0\n 14118: u8 [a0 + 13] = 0\n 14121: u8 [a0 + 12] = 0\n 14124: u8 [a0 + 11] = 0\n 14127: u8 [a0 + 10] = 0\n 14130: u8 [a0 + 9] = 0\n 14133: u8 [a0 + 8] = 0\n 14136: u8 [a0 + 7] = 0\n 14139: u8 [a0 + 6] = 0\n 14142: u8 [a0 + 5] = 0\n 14145: u8 [a0 + 4] = 0\n 14148: u8 [a0 + 3] = 0\n 14151: u8 [a0 + 2] = 0\n 14154: u8 [a0 + 1] = 0\n 14157: u8 [a0 + 0] = 0\n 14159: jump @218 if a1 != 0\n      : @214 (gas: 4)\n 14163: i32 s0 = s1 + 0\n 14165: a1 = 0x20\n 14168: a0 = s0\n 14170: ra = 178, jump @0\n      : @215 [@dyn 89] (gas: 41)\n 14176: u8 [a0 + 31] = 0x19\n 14180: u8 [a0 + 30] = 0\n 14183: u8 [a0 + 29] = 0\n 14186: u8 [a0 + 28] = 0\n 14189: u8 [a0 + 27] = 0\n 14192: u8 [a0 + 26] = 0\n 14195: u8 [a0 + 25] = 0\n 14198: u8 [a0 + 24] = 0\n 14201: u8 [a0 + 23] = 0\n 14204: u8 [a0 + 22] = 0\n 14207: u8 [a0 + 21] = 0\n 14210: u8 [a0 + 20] = 0\n 14213: u8 [a0 + 19] = 0\n 14216: u8 [a0 + 18] = 0\n 14219: u8 [a0 + 17] = 0\n 14222: u8 [a0 + 16] = 0\n 14225: u8 [a0 + 15] = 0\n 14228: u8 [a0 + 14] = 0\n 14231: u8 [a0 + 13] = 0\n 14234: u8 [a0 + 12] = 0\n 14237: u8 [a0 + 11] = 0\n 14240: u8 [a0 + 10] = 0\n 14243: u8 [a0 + 9] = 0\n 14246: u8 [a0 + 8] = 0\n 14249: u8 [a0 + 7] = 0\n 14252: u8 [a0 + 6] = 0\n 14255: u8 [a0 + 5] = 0\n 14258: u8 [a0 + 4] = 0\n 14261: u8 [a0 + 3] = 0\n 14264: u8 [a0 + 2] = 0\n 14267: u8 [a0 + 1] = 0\n 14270: a1 = u64 [sp + 0x20]\n 14273: a2 = u64 [sp + 0x38]\n 14276: a1 = a1 | a2\n 14279: a2 = 0xffffffe0\n 14289: a2 = s1 <u a2\n 14292: a3 = u64 [sp + 0x40]\n 14295: a2 = 0 if a3 != 0\n 14297: a2 = 0 if a1 != 0\n 14299: u8 [a0 + 0] = 0\n 14301: jump @218 if a2 == 0\n      : @216 (gas: 3)\n 14305: i32 a0 = s0 + 0x20\n 14308: a1 = 0x20\n 14311: ra = 180, jump @0\n      : @217 [@dyn 90] (gas: 55)\n 14317: u8 [a0 + 31] = 0\n 14320: u8 [a0 + 30] = 0\n 14323: u8 [a0 + 29] = 0\n 14326: u8 [a0 + 28] = 0\n 14329: u8 [a0 + 27] = 0\n 14332: u8 [a0 + 26] = 0\n 14335: u8 [a0 + 25] = 0\n 14338: u8 [a0 + 24] = 0x30\n 14342: a5 = 0x20\n 14345: u8 [a0 + 0x17] = a5\n 14348: u8 [a0 + 22] = 0x3e\n 14352: u8 [a0 + 0x15] = a5\n 14355: u8 [a0 + 20] = 0x65\n 14359: u8 [a0 + 19] = 0x62\n 14363: u8 [a0 + 0x12] = a5\n 14366: u8 [a0 + 17] = 0x74\n 14370: u8 [a0 + 16] = 0x73\n 14374: u8 [a0 + 15] = 0x75\n 14378: u8 [a0 + 14] = 0x6d\n 14382: u8 [a0 + 0xd] = a5\n 14385: u8 [a0 + 12] = 0x65\n 14389: u8 [a0 + 11] = 0x63\n 14393: u8 [a0 + 10] = 0x69\n 14397: u8 [a0 + 9] = 0x72\n 14401: u8 [a0 + 8] = 0x70\n 14405: u8 [a0 + 0x7] = a5\n 14408: u8 [a0 + 6] = 0x3a\n 14412: u8 [a0 + 5] = 0x77\n 14416: u8 [a0 + 4] = 0x6f\n 14420: u8 [a0 + 3] = 0x72\n 14424: u8 [a0 + 2] = 0x63\n 14428: u8 [a0 + 1] = 0x73\n 14432: u8 [a0 + 0] = 0x45\n 14435: a1 = u64 [sp]\n 14437: a0 = a1 + 0x60\n 14440: a1 = a0 <u a1\n 14443: a3 = u64 [sp + 0x8]\n 14446: a2 = a3 + a1\n 14449: a3 = a2 <u a3\n 14452: a3 = a1 if a1 == 0\n 14455: a1 = u64 [sp + 0x10]\n 14458: a3 = a3 + a1\n 14461: a1 = a3 <u a1\n 14464: a4 = u64 [sp + 0x18]\n 14467: a1 = a1 + a4\n 14470: a4 = u64 [sp + 0x28]\n 14473: u64 [a4] = a0\n 14475: u64 [a4 + 0x8] = a2\n 14478: u64 [a4 + 0x10] = a3\n 14481: u64 [a4 + 0x18] = a1\n 14484: ra = u64 [sp + 0x58]\n 14487: s0 = u64 [sp + 0x50]\n 14490: s1 = u64 [sp + 0x48]\n 14493: sp = sp + 0x60\n 14496: ret\n      : @218 (gas: 1)\n 14498: trap\n      : @219 (gas: 17)\n 14499: sp = sp + 0xffffffffffffffa0\n 14502: u64 [sp + 0x58] = ra\n 14505: u64 [sp + 0x50] = s0\n 14508: u64 [sp + 0x48] = s1\n 14511: a3 = u64 [a1 + 0x18]\n 14514: a4 = u64 [a1 + 0x10]\n 14517: a5 = u64 [a1 + 0x8]\n 14520: s1 = u64 [a1]\n 14522: a1 = a5 | a3\n 14525: a2 = s1 | a4\n 14528: a2 = a2 | a1\n 14531: a2 = a2 >> 0x20\n 14534: a1 = a1 | a4\n 14537: a1 = a1 << 0x20\n 14540: a1 = a1 | a2\n 14543: u64 [sp + 0x28] = a0\n 14546: jump @226 if a1 != 0\n      : @220 (gas: 19)\n 14550: a0 = s1 + 0x20\n 14553: u64 [sp + 0x30] = a0\n 14556: a0 = a0 <u s1\n 14559: a1 = a5 + a0\n 14562: u64 [sp + 0x40] = a1\n 14565: u64 [sp + 0x8] = a5\n 14568: s0 = a1 <u a5\n 14571: s0 = a0 if a0 == 0\n 14574: s0 = s0 + a4\n 14577: u64 [sp + 0x10] = a4\n 14580: a0 = s0 <u a4\n 14583: u64 [sp + 0x18] = a3\n 14586: a0 = a0 + a3\n 14589: u64 [sp + 0x38] = a0\n 14592: u64 [sp] = s1\n 14594: i32 a0 = s1 + 0\n 14596: a1 = 0x20\n 14599: s1 = 0x20\n 14602: ra = 182, jump @0\n      : @221 [@dyn 91] (gas: 45)\n 14608: u8 [a0 + 0x1f] = s1\n 14611: a1 = u64 [sp + 0x30]\n 14614: s1 = a1\n 14616: a1 = a1 | s0\n 14619: a2 = u64 [sp + 0x40]\n 14622: a4 = u64 [sp + 0x38]\n 14625: a2 = a2 | a4\n 14628: a1 = a1 | a2\n 14631: a1 = a1 >> 0x20\n 14634: u64 [sp + 0x20] = s0\n 14637: a2 = a2 | s0\n 14640: a2 = a2 << 0x20\n 14643: a1 = a1 | a2\n 14646: u8 [a0 + 30] = 0\n 14649: u8 [a0 + 29] = 0\n 14652: u8 [a0 + 28] = 0\n 14655: u8 [a0 + 27] = 0\n 14658: u8 [a0 + 26] = 0\n 14661: u8 [a0 + 25] = 0\n 14664: u8 [a0 + 24] = 0\n 14667: u8 [a0 + 23] = 0\n 14670: u8 [a0 + 22] = 0\n 14673: u8 [a0 + 21] = 0\n 14676: u8 [a0 + 20] = 0\n 14679: u8 [a0 + 19] = 0\n 14682: u8 [a0 + 18] = 0\n 14685: u8 [a0 + 17] = 0\n 14688: u8 [a0 + 16] = 0\n 14691: u8 [a0 + 15] = 0\n 14694: u8 [a0 + 14] = 0\n 14697: u8 [a0 + 13] = 0\n 14700: u8 [a0 + 12] = 0\n 14703: u8 [a0 + 11] = 0\n 14706: u8 [a0 + 10] = 0\n 14709: u8 [a0 + 9] = 0\n 14712: u8 [a0 + 8] = 0\n 14715: u8 [a0 + 7] = 0\n 14718: u8 [a0 + 6] = 0\n 14721: u8 [a0 + 5] = 0\n 14724: u8 [a0 + 4] = 0\n 14727: u8 [a0 + 3] = 0\n 14730: u8 [a0 + 2] = 0\n 14733: u8 [a0 + 1] = 0\n 14736: u8 [a0 + 0] = 0\n 14738: jump @226 if a1 != 0\n      : @222 (gas: 4)\n 14742: i32 s0 = s1 + 0\n 14744: a1 = 0x20\n 14747: a0 = s0\n 14749: ra = 184, jump @0\n      : @223 [@dyn 92] (gas: 41)\n 14755: u8 [a0 + 31] = 0x1f\n 14759: u8 [a0 + 30] = 0\n 14762: u8 [a0 + 29] = 0\n 14765: u8 [a0 + 28] = 0\n 14768: u8 [a0 + 27] = 0\n 14771: u8 [a0 + 26] = 0\n 14774: u8 [a0 + 25] = 0\n 14777: u8 [a0 + 24] = 0\n 14780: u8 [a0 + 23] = 0\n 14783: u8 [a0 + 22] = 0\n 14786: u8 [a0 + 21] = 0\n 14789: u8 [a0 + 20] = 0\n 14792: u8 [a0 + 19] = 0\n 14795: u8 [a0 + 18] = 0\n 14798: u8 [a0 + 17] = 0\n 14801: u8 [a0 + 16] = 0\n 14804: u8 [a0 + 15] = 0\n 14807: u8 [a0 + 14] = 0\n 14810: u8 [a0 + 13] = 0\n 14813: u8 [a0 + 12] = 0\n 14816: u8 [a0 + 11] = 0\n 14819: u8 [a0 + 10] = 0\n 14822: u8 [a0 + 9] = 0\n 14825: u8 [a0 + 8] = 0\n 14828: u8 [a0 + 7] = 0\n 14831: u8 [a0 + 6] = 0\n 14834: u8 [a0 + 5] = 0\n 14837: u8 [a0 + 4] = 0\n 14840: u8 [a0 + 3] = 0\n 14843: u8 [a0 + 2] = 0\n 14846: u8 [a0 + 1] = 0\n 14849: a1 = u64 [sp + 0x20]\n 14852: a2 = u64 [sp + 0x38]\n 14855: a1 = a1 | a2\n 14858: a2 = 0xffffffe0\n 14868: a2 = s1 <u a2\n 14871: a3 = u64 [sp + 0x40]\n 14874: a2 = 0 if a3 != 0\n 14876: a2 = 0 if a1 != 0\n 14878: u8 [a0 + 0] = 0\n 14880: jump @226 if a2 == 0\n      : @224 (gas: 3)\n 14884: i32 a0 = s0 + 0x20\n 14887: a1 = 0x20\n 14890: ra = 186, jump @0\n      : @225 [@dyn 93] (gas: 54)\n 14896: u8 [a0 + 28] = 0x70\n 14900: u8 [a0 + 27] = 0x6d\n 14904: u8 [a0 + 23] = 0x62\n 14908: u8 [a0 + 19] = 0x6e\n 14912: u8 [a0 + 18] = 0x6e\n 14916: u8 [a0 + 30] = 0x79\n 14920: u8 [a0 + 14] = 0x79\n 14924: u8 [a0 + 26] = 0x65\n 14928: u8 [a0 + 24] = 0x65\n 14932: u8 [a0 + 11] = 0x65\n 14936: u8 [a0 + 29] = 0x74\n 14940: u8 [a0 + 21] = 0x74\n 14944: u8 [a0 + 10] = 0x74\n 14948: u8 [a0 + 17] = 0x61\n 14952: u8 [a0 + 13] = 0x61\n 14956: u8 [a0 + 9] = 0x61\n 14960: u8 [a0 + 8] = 0x67\n 14964: u8 [a0 + 31] = 0\n 14967: u8 [a0 + 25] = 0x20\n 14971: u8 [a0 + 22] = 0x20\n 14975: u8 [a0 + 15] = 0x20\n 14979: u8 [a0 + 7] = 0x20\n 14983: u8 [a0 + 6] = 0x3a\n 14987: u8 [a0 + 12] = 0x77\n 14991: u8 [a0 + 5] = 0x77\n 14995: u8 [a0 + 20] = 0x6f\n 14999: u8 [a0 + 4] = 0x6f\n 15003: u8 [a0 + 3] = 0x72\n 15007: u8 [a0 + 16] = 0x63\n 15011: u8 [a0 + 2] = 0x63\n 15015: u8 [a0 + 1] = 0x73\n 15019: u8 [a0 + 0] = 0x45\n 15022: a1 = u64 [sp]\n 15024: a0 = a1 + 0x60\n 15027: a1 = a0 <u a1\n 15030: a3 = u64 [sp + 0x8]\n 15033: a2 = a3 + a1\n 15036: a3 = a2 <u a3\n 15039: a3 = a1 if a1 == 0\n 15042: a1 = u64 [sp + 0x10]\n 15045: a3 = a3 + a1\n 15048: a1 = a3 <u a1\n 15051: a4 = u64 [sp + 0x18]\n 15054: a1 = a1 + a4\n 15057: a4 = u64 [sp + 0x28]\n 15060: u64 [a4] = a0\n 15062: u64 [a4 + 0x8] = a2\n 15065: u64 [a4 + 0x10] = a3\n 15068: u64 [a4 + 0x18] = a1\n 15071: ra = u64 [sp + 0x58]\n 15074: s0 = u64 [sp + 0x50]\n 15077: s1 = u64 [sp + 0x48]\n 15080: sp = sp + 0x60\n 15083: ret\n      : @226 (gas: 1)\n 15085: trap\n      : @227 (gas: 17)\n 15086: sp = sp + 0xffffffffffffffa0\n 15089: u64 [sp + 0x58] = ra\n 15092: u64 [sp + 0x50] = s0\n 15095: u64 [sp + 0x48] = s1\n 15098: a3 = u64 [a1 + 0x18]\n 15101: a4 = u64 [a1 + 0x10]\n 15104: a5 = u64 [a1 + 0x8]\n 15107: s1 = u64 [a1]\n 15109: a1 = a5 | a3\n 15112: a2 = s1 | a4\n 15115: a2 = a2 | a1\n 15118: a2 = a2 >> 0x20\n 15121: a1 = a1 | a4\n 15124: a1 = a1 << 0x20\n 15127: a1 = a1 | a2\n 15130: u64 [sp + 0x20] = a0\n 15133: jump @236 if a1 != 0\n      : @228 (gas: 19)\n 15137: a0 = s1 + 0x20\n 15140: u64 [sp + 0x40] = a0\n 15143: a0 = a0 <u s1\n 15146: a1 = a5 + a0\n 15149: u64 [sp + 0x38] = a1\n 15152: u64 [sp + 0x8] = a5\n 15155: s0 = a1 <u a5\n 15158: s0 = a0 if a0 == 0\n 15161: s0 = s0 + a4\n 15164: u64 [sp + 0x10] = a4\n 15167: a0 = s0 <u a4\n 15170: u64 [sp + 0x18] = a3\n 15173: a0 = a0 + a3\n 15176: u64 [sp + 0x30] = a0\n 15179: u64 [sp] = s1\n 15181: i32 a0 = s1 + 0\n 15183: a1 = 0x20\n 15186: s1 = 0x20\n 15189: ra = 188, jump @0\n      : @229 [@dyn 94] (gas: 43)\n 15195: u8 [a0 + 0x1f] = s1\n 15198: a1 = u64 [sp + 0x40]\n 15201: a1 = a1 | s0\n 15204: a2 = u64 [sp + 0x38]\n 15207: a3 = u64 [sp + 0x30]\n 15210: a2 = a2 | a3\n 15213: a1 = a1 | a2\n 15216: a1 = a1 >> 0x20\n 15219: a2 = a2 | s0\n 15222: a2 = a2 << 0x20\n 15225: a1 = a1 | a2\n 15228: u8 [a0 + 30] = 0\n 15231: u8 [a0 + 29] = 0\n 15234: u8 [a0 + 28] = 0\n 15237: u8 [a0 + 27] = 0\n 15240: u8 [a0 + 26] = 0\n 15243: u8 [a0 + 25] = 0\n 15246: u8 [a0 + 24] = 0\n 15249: u8 [a0 + 23] = 0\n 15252: u8 [a0 + 22] = 0\n 15255: u8 [a0 + 21] = 0\n 15258: u8 [a0 + 20] = 0\n 15261: u8 [a0 + 19] = 0\n 15264: u8 [a0 + 18] = 0\n 15267: u8 [a0 + 17] = 0\n 15270: u8 [a0 + 16] = 0\n 15273: u8 [a0 + 15] = 0\n 15276: u8 [a0 + 14] = 0\n 15279: u8 [a0 + 13] = 0\n 15282: u8 [a0 + 12] = 0\n 15285: u8 [a0 + 11] = 0\n 15288: u8 [a0 + 10] = 0\n 15291: u8 [a0 + 9] = 0\n 15294: u8 [a0 + 8] = 0\n 15297: u8 [a0 + 7] = 0\n 15300: u8 [a0 + 6] = 0\n 15303: u8 [a0 + 5] = 0\n 15306: u8 [a0 + 4] = 0\n 15309: u8 [a0 + 3] = 0\n 15312: u8 [a0 + 2] = 0\n 15315: u8 [a0 + 1] = 0\n 15318: u8 [a0 + 0] = 0\n 15320: jump @236 if a1 != 0\n      : @230 (gas: 5)\n 15324: s1 = u64 [sp + 0x40]\n 15327: i32 a0 = s1 + 0\n 15329: a1 = 0x20\n 15332: u64 [sp + 0x28] = a0\n 15335: ra = 190, jump @0\n      : @231 [@dyn 95] (gas: 42)\n 15341: u8 [a0 + 31] = 0x2d\n 15345: u8 [a0 + 30] = 0\n 15348: u8 [a0 + 29] = 0\n 15351: u8 [a0 + 28] = 0\n 15354: u8 [a0 + 27] = 0\n 15357: u8 [a0 + 26] = 0\n 15360: u8 [a0 + 25] = 0\n 15363: u8 [a0 + 24] = 0\n 15366: u8 [a0 + 23] = 0\n 15369: u8 [a0 + 22] = 0\n 15372: u8 [a0 + 21] = 0\n 15375: u8 [a0 + 20] = 0\n 15378: u8 [a0 + 19] = 0\n 15381: u8 [a0 + 18] = 0\n 15384: u8 [a0 + 17] = 0\n 15387: u8 [a0 + 16] = 0\n 15390: u8 [a0 + 15] = 0\n 15393: u8 [a0 + 14] = 0\n 15396: u8 [a0 + 13] = 0\n 15399: u8 [a0 + 12] = 0\n 15402: u8 [a0 + 11] = 0\n 15405: u8 [a0 + 10] = 0\n 15408: u8 [a0 + 9] = 0\n 15411: u8 [a0 + 8] = 0\n 15414: u8 [a0 + 7] = 0\n 15417: u8 [a0 + 6] = 0\n 15420: u8 [a0 + 5] = 0\n 15423: u8 [a0 + 4] = 0\n 15426: u8 [a0 + 3] = 0\n 15429: u8 [a0 + 2] = 0\n 15432: u8 [a0 + 1] = 0\n 15435: a1 = u64 [sp + 0x30]\n 15438: a3 = s0 | a1\n 15441: s0 = 0x100000000\n 15451: a1 = 0xffffffe0\n 15461: a1 = s1 <u a1\n 15464: a2 = u64 [sp + 0x38]\n 15467: a1 = 0 if a2 != 0\n 15469: u64 [sp + 0x30] = a3\n 15472: a1 = 0 if a3 != 0\n 15474: u8 [a0 + 0] = 0\n 15476: jump @236 if a1 == 0\n      : @232 (gas: 4)\n 15480: a0 = u64 [sp + 0x28]\n 15483: i32 a0 = a0 + 0x20\n 15486: a1 = 0x20\n 15489: ra = 192, jump @0\n      : @233 [@dyn 96] (gas: 44)\n 15495: u8 [a0 + 30] = 0x62\n 15499: u8 [a0 + 26] = 0x6e\n 15503: u8 [a0 + 25] = 0x6e\n 15507: u8 [a0 + 19] = 0x6e\n 15511: u8 [a0 + 17] = 0x69\n 15515: u8 [a0 + 14] = 0x79\n 15519: u8 [a0 + 28] = 0x74\n 15523: u8 [a0 + 10] = 0x74\n 15527: u8 [a0 + 18] = 0x67\n 15531: u8 [a0 + 8] = 0x67\n 15535: u8 [a0 + 31] = 0x65\n 15539: u8 [a0 + 29] = 0x20\n 15543: u8 [a0 + 22] = 0x20\n 15547: u8 [a0 + 15] = 0x20\n 15551: u8 [a0 + 7] = 0x20\n 15555: u8 [a0 + 6] = 0x3a\n 15559: u8 [a0 + 12] = 0x77\n 15563: u8 [a0 + 5] = 0x77\n 15567: u8 [a0 + 23] = 0x63\n 15571: u8 [a0 + 2] = 0x63\n 15575: u8 [a0 + 0] = 0x45\n 15578: a4 = 0x6f\n 15581: u8 [a0 + 0x1b] = a4\n 15584: a1 = s0 + 0xffffffffffffffc0\n 15587: a2 = u64 [sp + 0x40]\n 15590: a1 = a2 <u a1\n 15593: a5 = 0x61\n 15596: u8 [a0 + 0x18] = a5\n 15599: a2 = u64 [sp + 0x38]\n 15602: a1 = 0 if a2 != 0\n 15604: s1 = 0x72\n 15607: u8 [a0 + 0x15] = s1\n 15610: u8 [a0 + 20] = 0x65\n 15614: a2 = u64 [sp + 0x30]\n 15617: a1 = 0 if a2 != 0\n 15619: s0 = 0x73\n 15622: u8 [a0 + 0x10] = s0\n 15625: u8 [a0 + 0xd] = a5\n 15628: u8 [a0 + 11] = 0x65\n 15632: u8 [a0 + 0x9] = a5\n 15635: u8 [a0 + 0x4] = a4\n 15638: u8 [a0 + 0x3] = s1\n 15641: u8 [a0 + 0x1] = s0\n 15644: jump @236 if a1 == 0\n      : @234 (gas: 4)\n 15648: a0 = u64 [sp + 0x28]\n 15651: i32 a0 = a0 + 0x40\n 15654: a1 = 0x20\n 15657: ra = 194, jump @0\n      : @235 [@dyn 97] (gas: 54)\n 15663: u8 [a0 + 31] = 0\n 15666: u8 [a0 + 30] = 0\n 15669: u8 [a0 + 29] = 0\n 15672: u8 [a0 + 28] = 0\n 15675: u8 [a0 + 27] = 0\n 15678: u8 [a0 + 26] = 0\n 15681: u8 [a0 + 25] = 0\n 15684: u8 [a0 + 24] = 0\n 15687: u8 [a0 + 23] = 0\n 15690: u8 [a0 + 22] = 0\n 15693: u8 [a0 + 21] = 0\n 15696: u8 [a0 + 20] = 0\n 15699: u8 [a0 + 19] = 0\n 15702: u8 [a0 + 18] = 0\n 15705: u8 [a0 + 17] = 0\n 15708: u8 [a0 + 16] = 0\n 15711: u8 [a0 + 15] = 0\n 15714: u8 [a0 + 14] = 0\n 15717: u8 [a0 + 13] = 0\n 15720: u8 [a0 + 0xc] = s0\n 15723: u8 [a0 + 0xb] = s0\n 15726: u8 [a0 + 10] = 0x65\n 15730: u8 [a0 + 0x9] = s1\n 15733: u8 [a0 + 8] = 0x64\n 15737: u8 [a0 + 7] = 0x64\n 15741: u8 [a0 + 6] = 0x61\n 15745: u8 [a0 + 5] = 0x20\n 15749: u8 [a0 + 4] = 0x6f\n 15753: u8 [a0 + 0x3] = s1\n 15756: u8 [a0 + 2] = 0x65\n 15760: u8 [a0 + 1] = 0x7a\n 15764: u8 [a0 + 0] = 0x20\n 15767: a1 = u64 [sp]\n 15769: a0 = a1 + 0x80\n 15773: a1 = a0 <u a1\n 15776: a3 = u64 [sp + 0x8]\n 15779: a2 = a3 + a1\n 15782: a3 = a2 <u a3\n 15785: a3 = a1 if a1 == 0\n 15788: a1 = u64 [sp + 0x10]\n 15791: a3 = a3 + a1\n 15794: a1 = a3 <u a1\n 15797: a4 = u64 [sp + 0x18]\n 15800: a1 = a1 + a4\n 15803: a4 = u64 [sp + 0x20]\n 15806: u64 [a4] = a0\n 15808: u64 [a4 + 0x8] = a2\n 15811: u64 [a4 + 0x10] = a3\n 15814: u64 [a4 + 0x18] = a1\n 15817: ra = u64 [sp + 0x58]\n 15820: s0 = u64 [sp + 0x50]\n 15823: s1 = u64 [sp + 0x48]\n 15826: sp = sp + 0x60\n 15829: ret\n      : @236 (gas: 1)\n 15831: trap\n      : @237 (gas: 15)\n 15832: sp = sp + 0xffffffffffffff20\n 15836: u64 [sp + 0xd8] = ra\n 15840: u64 [sp + 0xd0] = s0\n 15844: u64 [sp + 0xc8] = s1\n 15848: s0 = sp + 0xe0\n 15852: sp = sp & 0xffffffffffffffe0\n 15855: t0 = u64 [a1 + 0x18]\n 15858: a5 = u64 [a1 + 0x10]\n 15861: a4 = u64 [a1]\n 15863: s1 = u64 [a1 + 0x8]\n 15866: a1 = a5 | t0\n 15869: a3 = a4 <u 0x20\n 15872: a3 = 0 if s1 != 0\n 15874: a3 = 0 if a1 != 0\n 15876: jump @245 if a3 != 0\n      : @238 (gas: 23)\n 15880: a1 = u64 [a2 + 0x18]\n 15883: u64 [sp + 0x50] = a1\n 15886: a1 = u64 [a2 + 0x10]\n 15889: u64 [sp + 0x40] = a1\n 15892: a1 = u64 [a2 + 0x8]\n 15895: u64 [sp + 0x58] = a1\n 15898: a1 = u64 [a2]\n 15900: u64 [sp + 0x20] = a1\n 15903: a1 = u64 [a0 + 0x18]\n 15906: u64 [sp] = a1\n 15908: a1 = u64 [a0 + 0x10]\n 15911: u64 [sp + 0x8] = a1\n 15914: a1 = u64 [a0 + 0x8]\n 15917: u64 [sp + 0x10] = a1\n 15920: a0 = u64 [a0]\n 15922: u64 [sp + 0x18] = a0\n 15925: a1 = 0x20\n 15928: a0 = 0\n 15930: u64 [sp + 0x28] = t0\n 15933: u64 [sp + 0x48] = a5\n 15936: u64 [sp + 0x38] = s1\n 15939: u64 [sp + 0x30] = a4\n 15942: ra = 196, jump @0\n      : @239 [@dyn 98] (gas: 71)\n 15948: a1 = u64 [sp]\n 15950: a1 = reverse a1\n 15952: a2 = u64 [sp + 0x8]\n 15955: a2 = reverse a2\n 15957: a3 = u64 [sp + 0x10]\n 15960: a3 = reverse a3\n 15962: a4 = u64 [sp + 0x18]\n 15965: a4 = reverse a4\n 15967: a5 = a4 >> 0x38\n 15970: u8 [a0 + 0x1f] = a5\n 15973: a5 = a4 >> 0x30\n 15976: u8 [a0 + 0x1e] = a5\n 15979: a5 = a4 >> 0x28\n 15982: u8 [a0 + 0x1d] = a5\n 15985: a5 = a4 >> 0x20\n 15988: u8 [a0 + 0x1c] = a5\n 15991: a5 = a4 >> 0x18\n 15994: u8 [a0 + 0x1b] = a5\n 15997: a5 = a4 >> 0x10\n 16000: u8 [a0 + 0x1a] = a5\n 16003: a5 = a4 >> 0x8\n 16006: u8 [a0 + 0x19] = a5\n 16009: u8 [a0 + 0x18] = a4\n 16012: u8 [a0 + 0x10] = a3\n 16015: a4 = a3 >> 0x38\n 16018: u8 [a0 + 0x17] = a4\n 16021: a4 = a3 >> 0x30\n 16024: u8 [a0 + 0x16] = a4\n 16027: a4 = a3 >> 0x28\n 16030: u8 [a0 + 0x15] = a4\n 16033: a4 = a3 >> 0x20\n 16036: u8 [a0 + 0x14] = a4\n 16039: a4 = a3 >> 0x18\n 16042: u8 [a0 + 0x13] = a4\n 16045: a4 = a3 >> 0x10\n 16048: u8 [a0 + 0x12] = a4\n 16051: a3 = a3 >> 0x8\n 16054: u8 [a0 + 0x11] = a3\n 16057: u8 [a0 + 0x8] = a2\n 16060: a3 = a2 >> 0x38\n 16063: u8 [a0 + 0xf] = a3\n 16066: a3 = a2 >> 0x30\n 16069: u8 [a0 + 0xe] = a3\n 16072: a3 = a2 >> 0x28\n 16075: u8 [a0 + 0xd] = a3\n 16078: a3 = a2 >> 0x20\n 16081: u8 [a0 + 0xc] = a3\n 16084: a3 = a2 >> 0x18\n 16087: u8 [a0 + 0xb] = a3\n 16090: a3 = a2 >> 0x10\n 16093: u8 [a0 + 0xa] = a3\n 16096: a2 = a2 >> 0x8\n 16099: u8 [a0 + 0x9] = a2\n 16102: u8 [a0] = a1\n 16104: a2 = a1 >> 0x38\n 16107: u8 [a0 + 0x7] = a2\n 16110: a2 = a1 >> 0x30\n 16113: u8 [a0 + 0x6] = a2\n 16116: a2 = a1 >> 0x28\n 16119: u8 [a0 + 0x5] = a2\n 16122: a2 = a1 >> 0x20\n 16125: u8 [a0 + 0x4] = a2\n 16128: a2 = a1 >> 0x18\n 16131: u8 [a0 + 0x3] = a2\n 16134: a2 = a1 >> 0x10\n 16137: u8 [a0 + 0x2] = a2\n 16140: a1 = a1 >> 0x8\n 16143: u8 [a0 + 0x1] = a1\n 16146: a1 = 0x20\n 16149: a0 = 0\n 16151: ra = 198, jump @0\n      : @240 [@dyn 99] (gas: 5)\n 16157: i32 a0 = a0 + 0\n 16159: i32 a2 = sp + 0xa0\n 16163: a1 = 0x20\n 16166: ecalli 9 // 'hash_keccak_256'\n 16168: fallthrough\n      : @241 (gas: 112)\n 16169: a2 = u64 [sp + 0x20]\n 16172: a1 = a2 + 0x1f\n 16175: a0 = a1 <u a2\n 16178: t1 = a2\n 16180: a4 = u64 [sp + 0x58]\n 16183: a3 = a4 + a0\n 16186: a2 = a3 <u a4\n 16189: t0 = a4\n 16191: a2 = a0 if a0 == 0\n 16194: s1 = u64 [sp + 0x40]\n 16197: a2 = a2 + s1\n 16200: u64 [sp + 0x18] = a2\n 16203: a2 = a2 << 0x3b\n 16206: a4 = a3 >> 0x5\n 16209: a2 = a2 | a4\n 16212: a3 = a3 << 0x3b\n 16215: a1 = a1 >> 0x5\n 16218: a5 = a1 | a3\n 16221: a1 = t1 <u 0x20\n 16224: a1 = 0 if t0 != 0\n 16226: a3 = u64 [sp + 0xb8]\n 16230: t1 = u64 [sp + 0xb0]\n 16234: a0 = u64 [sp + 0x50]\n 16237: a4 = s1 | a0\n 16240: a1 = 0 if a4 != 0\n 16242: a4 = reverse a3\n 16244: s1 = reverse t1\n 16246: a2 = 0 if a1 != 0\n 16248: a5 = 0 if a1 != 0\n 16250: a5 = a5 + a4\n 16253: u64 [sp + 0x58] = a5\n 16256: a5 = a5 <u a4\n 16259: a3 = s1 + a5\n 16262: t0 = a3 + a2\n 16265: a3 = t0 ^ s1\n 16268: ra = t0 <u s1\n 16271: ra = a5 if a3 == 0\n 16274: a0 = u64 [sp + 0x30]\n 16277: t2 = a0 + 0x1f\n 16280: a0 = t2 <u a0\n 16283: a2 = u64 [sp + 0x38]\n 16286: a3 = a2 + a0\n 16289: a5 = a3 <u a2\n 16292: a5 = a0 if a0 == 0\n 16295: a0 = u64 [sp + 0x48]\n 16298: a5 = a5 + a0\n 16301: a0 = a5 << 0x3b\n 16304: a2 = a3 >> 0x5\n 16307: a0 = a0 | a2\n 16310: a3 = a3 << 0x3b\n 16313: a2 = t2 >> 0x5\n 16316: a2 = a2 | a3\n 16319: t2 = a4 + a2\n 16322: a2 = t2 <u a4\n 16325: a3 = s1 + a2\n 16328: t1 = a3 + a0\n 16331: a0 = t1 ^ s1\n 16334: a3 = t1 <u s1\n 16337: a3 = a2 if a0 == 0\n 16340: a4 = u64 [sp + 0x18]\n 16343: a0 = u64 [sp + 0x40]\n 16346: a0 = a4 <u a0\n 16349: a2 = u64 [sp + 0x50]\n 16352: a0 = a0 + a2\n 16355: a2 = a4 >> 0x5\n 16358: a4 = a0 << 0x3b\n 16361: a2 = a2 | a4\n 16364: a0 = a0 >> 0x5\n 16367: a4 = u64 [sp + 0xa8]\n 16371: s1 = u64 [sp + 0xa0]\n 16375: a2 = 0 if a1 != 0\n 16377: a0 = 0 if a1 != 0\n 16379: a1 = reverse a4\n 16381: a4 = reverse s1\n 16383: u64 [sp + 0x50] = a4\n 16386: a0 = a0 + a4\n 16389: a2 = a2 + a1\n 16392: s1 = a2 <u a1\n 16395: a0 = a0 + s1\n 16398: a4 = a2 + ra\n 16401: s1 = a4 <u a2\n 16404: s1 = s1 + a0\n 16407: a0 = u64 [sp + 0x48]\n 16410: a0 = a5 <u a0\n 16413: a2 = u64 [sp + 0x28]\n 16416: a0 = a0 + a2\n 16419: a5 = a5 >> 0x5\n 16422: a2 = a0 << 0x3b\n 16425: a2 = a2 | a5\n 16428: a5 = u64 [sp + 0x58]\n 16431: a0 = a0 >> 0x5\n 16434: a2 = a2 + a1\n 16437: ra = a2 + a3\n 16440: a1 = a2 <u a1\n 16443: a2 = ra <u a2\n 16446: a3 = u64 [sp + 0x50]\n 16449: a0 = a0 + a3\n 16452: a0 = a0 + a1\n 16455: a3 = a0 + a2\n 16458: a0 = t0 ^ t1\n 16461: a1 = t0 <u t1\n 16464: a2 = a5 <u t2\n 16467: a2 = a1 if a0 != 0\n 16470: a0 = a4 <u ra\n 16473: a1 = s1 ^ a3\n 16476: u64 [sp + 0x40] = a3\n 16479: a3 = s1 <u a3\n 16482: a3 = a0 if a1 == 0\n 16485: a0 = a4 ^ ra\n 16488: a0 = a0 | a1\n 16491: a2 = a3 if a0 != 0\n 16494: jump @245 if a2 == 0\n      : @242 (gas: 5)\n 16498: a0 = a4\n 16500: u64 [sp + 0x38] = t2\n 16503: u64 [sp + 0x30] = t1\n 16506: u64 [sp + 0x28] = ra\n 16509: fallthrough\n      : @243 (gas: 36)\n 16510: u64 [sp + 0x48] = a0\n 16513: u64 [sp + 0x50] = t0\n 16516: u64 [sp + 0x58] = a5\n 16519: u64 [sp + 0x90] = a0\n 16523: u64 [sp + 0x88] = t0\n 16527: u64 [sp + 0x80] = a5\n 16531: u64 [sp + 0x98] = s1\n 16535: u64 [sp + 184] = 0\n 16539: u64 [sp + 176] = 0\n 16543: u64 [sp + 168] = 0\n 16547: u64 [sp + 160] = 0\n 16551: u32 [sp + 96] = 0x20\n 16555: i32 a1 = sp + 0x80\n 16559: i32 a3 = sp + 0xa0\n 16563: i32 a4 = sp + 0x60\n 16566: a2 = 0xffffffffffffffff\n 16569: a0 = 0\n 16571: ecalli 8 // 'get_storage'\n 16573: u64 [sp + 0x98] = s1\n 16577: a0 = u64 [sp + 0x48]\n 16580: u64 [sp + 0x90] = a0\n 16584: a0 = u64 [sp + 0x50]\n 16587: u64 [sp + 0x88] = a0\n 16591: a0 = u64 [sp + 0x58]\n 16594: u64 [sp + 0x80] = a0\n 16598: u64 [sp + 184] = 0\n 16602: u64 [sp + 176] = 0\n 16606: u64 [sp + 168] = 0\n 16610: u64 [sp + 160] = 0\n 16614: i32 a1 = sp + 0x80\n 16618: i32 a3 = sp + 0xa0\n 16622: a2 = 0xffffffffffffffff\n 16625: a4 = 0x20\n 16628: a0 = 0\n 16630: ecalli 16 // 'set_storage'\n 16632: fallthrough\n      : @244 (gas: 27)\n 16633: ra = u64 [sp + 0x28]\n 16636: t1 = u64 [sp + 0x30]\n 16639: t2 = u64 [sp + 0x38]\n 16642: t0 = u64 [sp + 0x50]\n 16645: a5 = u64 [sp + 0x58]\n 16648: a5 = a5 + 0x1\n 16651: a0 = a5 <u 0x1\n 16654: t0 = t0 + a0\n 16657: a0 = a5 | t0\n 16660: a0 = a0 <u 0x1\n 16663: a1 = u64 [sp + 0x48]\n 16666: a0 = a0 + a1\n 16669: a1 = a0 <u a1\n 16672: s1 = s1 + a1\n 16675: a1 = a5 <u t2\n 16678: a2 = t0 ^ t1\n 16681: a3 = t0 <u t1\n 16684: a3 = a1 if a2 == 0\n 16687: a1 = a0 <u ra\n 16690: a4 = u64 [sp + 0x40]\n 16693: a2 = s1 ^ a4\n 16696: a4 = s1 <u a4\n 16699: a4 = a1 if a2 == 0\n 16702: a1 = a0 ^ ra\n 16705: a1 = a1 | a2\n 16708: a4 = a3 if a1 == 0\n 16711: jump @243 if a4 != 0\n      : @245 (gas: 6)\n 16715: sp = s0 + 0xffffffffffffff20\n 16719: ra = u64 [sp + 0xd8]\n 16723: s0 = u64 [sp + 0xd0]\n 16727: s1 = u64 [sp + 0xc8]\n 16731: sp = sp + 0xe0\n 16735: ret\n      : @246 (gas: 21)\n 16737: sp = sp + 0xfffffffffffffd40\n 16741: u64 [sp + 0x2b8] = ra\n 16745: u64 [sp + 0x2b0] = s0\n 16749: u64 [sp + 0x2a8] = s1\n 16753: s0 = sp + 0x2c0\n 16757: sp = sp & 0xffffffffffffffe0\n 16760: a3 = u64 [a1 + 0x10]\n 16763: a2 = u64 [a1 + 0x18]\n 16766: a4 = u64 [a1 + 0x8]\n 16769: a5 = u64 [a1]\n 16771: u64 [sp + 0x98] = a2\n 16775: u64 [sp + 0x88] = a4\n 16779: a1 = a4 | a2\n 16782: a2 = a5 | a3\n 16785: a2 = a2 | a1\n 16788: a2 = a2 >> 0x20\n 16791: u64 [sp + 0x90] = a3\n 16795: a1 = a1 | a3\n 16798: a1 = a1 << 0x20\n 16801: a1 = a1 | a2\n 16804: jump @276 if a1 != 0\n      : @247 (gas: 13)\n 16808: a1 = u64 [a0 + 0x18]\n 16811: u64 [sp + 0x40] = a1\n 16814: a1 = u64 [a0 + 0x10]\n 16817: u64 [sp + 0x58] = a1\n 16820: a1 = u64 [a0 + 0x8]\n 16823: u64 [sp + 0x48] = a1\n 16826: a0 = u64 [a0]\n 16828: u64 [sp + 0x50] = a0\n 16831: u64 [sp + 0x80] = a5\n 16835: i32 a0 = a5 + 0\n 16837: a1 = 0x20\n 16840: u64 [sp + 0x18] = a0\n 16843: ra = 200, jump @0\n      : @248 [@dyn 100] (gas: 80)\n 16849: a1 = u8 [a0 + 0x9]\n 16852: a2 = u8 [a0 + 0x8]\n 16855: a3 = u8 [a0 + 0xa]\n 16858: a4 = u8 [a0 + 0xb]\n 16861: a1 = a1 << 0x8\n 16864: a1 = a1 | a2\n 16867: a3 = a3 << 0x10\n 16870: a4 = a4 << 0x18\n 16873: a3 = a3 | a4\n 16876: a1 = a1 | a3\n 16879: a2 = u8 [a0 + 0xd]\n 16882: a3 = u8 [a0 + 0xc]\n 16885: a4 = u8 [a0 + 0xe]\n 16888: a5 = u8 [a0 + 0xf]\n 16891: a2 = a2 << 0x8\n 16894: a2 = a2 | a3\n 16897: a4 = a4 << 0x10\n 16900: a5 = a5 << 0x18\n 16903: a4 = a4 | a5\n 16906: a2 = a2 | a4\n 16909: a2 = a2 << 0x20\n 16912: t0 = a2 | a1\n 16915: a1 = u8 [a0 + 0x1]\n 16918: a2 = u8 [a0]\n 16920: a3 = u8 [a0 + 0x2]\n 16923: a4 = u8 [a0 + 0x3]\n 16926: a1 = a1 << 0x8\n 16929: a1 = a1 | a2\n 16932: a3 = a3 << 0x10\n 16935: a4 = a4 << 0x18\n 16938: a3 = a3 | a4\n 16941: a1 = a1 | a3\n 16944: a2 = u8 [a0 + 0x5]\n 16947: a3 = u8 [a0 + 0x4]\n 16950: a4 = u8 [a0 + 0x6]\n 16953: a5 = u8 [a0 + 0x7]\n 16956: a2 = a2 << 0x8\n 16959: a2 = a2 | a3\n 16962: a4 = a4 << 0x10\n 16965: a5 = a5 << 0x18\n 16968: a4 = a4 | a5\n 16971: a2 = a2 | a4\n 16974: a2 = a2 << 0x20\n 16977: s1 = a2 | a1\n 16980: a1 = u8 [a0 + 0x11]\n 16983: a2 = u8 [a0 + 0x10]\n 16986: a3 = u8 [a0 + 0x12]\n 16989: a4 = u8 [a0 + 0x13]\n 16992: a1 = a1 << 0x8\n 16995: a1 = a1 | a2\n 16998: a3 = a3 << 0x10\n 17001: a4 = a4 << 0x18\n 17004: a3 = a3 | a4\n 17007: a1 = a1 | a3\n 17010: a2 = u8 [a0 + 0x15]\n 17013: a3 = u8 [a0 + 0x14]\n 17016: a4 = u8 [a0 + 0x16]\n 17019: a5 = u8 [a0 + 0x17]\n 17022: a2 = a2 << 0x8\n 17025: a2 = a2 | a3\n 17028: a4 = a4 << 0x10\n 17031: a5 = a5 << 0x18\n 17034: a4 = a4 | a5\n 17037: a2 = a2 | a4\n 17040: a2 = a2 << 0x20\n 17043: a1 = a1 | a2\n 17046: u64 [sp + 0x60] = a1\n 17049: a1 = reverse a1\n 17051: u64 [sp + 0x68] = s1\n 17054: a3 = reverse s1\n 17056: u64 [sp + 0x70] = t0\n 17059: a2 = reverse t0\n 17061: u64 [sp + 0x30] = a2\n 17064: u64 [sp + 0x28] = a3\n 17067: a2 = a2 | a3\n 17070: u64 [sp + 0x38] = a1\n 17073: a1 = a1 <u 0x1\n 17076: u64 [sp + 0xd8] = a2\n 17080: a1 = 0 if a2 != 0\n 17082: jump @277 if a1 == 0\n      : @249 (gas: 36)\n 17086: a1 = u8 [a0 + 0x18]\n 17089: u64 [sp + 0xb8] = a1\n 17093: a1 = u8 [a0 + 0x19]\n 17096: u64 [sp + 0x78] = a1\n 17099: a1 = u8 [a0 + 0x1a]\n 17102: u64 [sp + 0xa8] = a1\n 17106: a1 = u8 [a0 + 0x1b]\n 17109: u64 [sp + 0xa0] = a1\n 17113: a1 = u8 [a0 + 0x1c]\n 17116: u64 [sp + 0xd0] = a1\n 17120: a1 = u8 [a0 + 0x1d]\n 17123: u64 [sp + 0xb0] = a1\n 17127: a1 = u8 [a0 + 0x1e]\n 17130: u64 [sp + 0xc8] = a1\n 17134: a0 = u8 [a0 + 0x1f]\n 17137: u64 [sp + 0xc0] = a0\n 17141: u32 [sp + 576] = 0x20\n 17146: a0 = u64 [sp + 0x58]\n 17149: u64 [sp + 0x270] = a0\n 17153: a0 = u64 [sp + 0x48]\n 17156: u64 [sp + 0x268] = a0\n 17160: a0 = u64 [sp + 0x50]\n 17163: u64 [sp + 0x260] = a0\n 17167: s1 = u64 [sp + 0x40]\n 17170: u64 [sp + 0x278] = s1\n 17174: u64 [sp + 664] = 0\n 17178: u64 [sp + 656] = 0\n 17182: u64 [sp + 648] = 0\n 17186: u64 [sp + 640] = 0\n 17190: i32 a1 = sp + 0x260\n 17194: i32 a3 = sp + 0x280\n 17198: i32 a4 = sp + 0x240\n 17202: a2 = 0xffffffffffffffff\n 17205: a0 = 0\n 17207: ecalli 8 // 'get_storage'\n 17209: fallthrough\n      : @250 (gas: 28)\n 17210: a0 = u64 [sp + 0x290]\n 17214: a1 = u64 [sp + 0x288]\n 17218: a2 = u64 [sp + 0x280]\n 17222: a3 = u64 [sp + 0x298]\n 17226: a4 = a0 << 0x3f\n 17229: a5 = a1 >> 0x1\n 17232: a4 = a4 | a5\n 17235: a5 = a3 << 0x3f\n 17238: a0 = a0 >> 0x1\n 17241: t2 = s1\n 17243: s1 = a0 | a5\n 17246: a1 = a1 << 0x3f\n 17249: a5 = a2 >> 0x1\n 17252: a1 = a1 | a5\n 17255: a5 = a3 >> 0x1\n 17258: a2 = a2 & 0x1\n 17261: a0 = -a2\n 17263: t0 = a2 <u 0x1\n 17266: a3 = a1 & 0x7f\n 17269: t1 = a0 & s1\n 17272: a4 = a4 & a0\n 17275: a3 = a1 if a2 != 0\n 17278: a1 = a0 & a5\n 17281: a0 = a3 <u 0x20\n 17284: a0 = 0 if a4 != 0\n 17286: a2 = t1 | a1\n 17289: a0 = 0 if a2 != 0\n 17291: jump @279 if t0 != a0\n      : @251 (gas: 47)\n 17295: a0 = u64 [sp + 0x78]\n 17298: a0 = a0 << 0x8\n 17301: a2 = u64 [sp + 0xb8]\n 17305: a0 = a0 | a2\n 17308: a2 = u64 [sp + 0xa8]\n 17312: a2 = a2 << 0x10\n 17315: a5 = u64 [sp + 0xa0]\n 17319: a5 = a5 << 0x18\n 17322: a2 = a2 | a5\n 17325: a0 = a0 | a2\n 17328: a2 = u64 [sp + 0xb0]\n 17332: a2 = a2 << 0x8\n 17335: a5 = u64 [sp + 0xd0]\n 17339: a2 = a2 | a5\n 17342: a5 = u64 [sp + 0xc8]\n 17346: a5 = a5 << 0x10\n 17349: s1 = u64 [sp + 0xc0]\n 17353: s1 = s1 << 0x18\n 17356: a5 = a5 | s1\n 17359: a2 = a2 | a5\n 17362: a2 = a2 << 0x20\n 17365: a0 = a0 | a2\n 17368: u64 [sp + 0xd0] = a0\n 17372: a0 = reverse a0\n 17374: u64 [sp + 0x20] = a0\n 17377: u64 [sp + 0x1e0] = a0\n 17381: u64 [sp + 0x200] = a3\n 17385: a0 = u64 [sp + 0x50]\n 17388: u64 [sp + 0x220] = a0\n 17392: a0 = u64 [sp + 0x38]\n 17395: u64 [sp + 0x1e8] = a0\n 17399: u64 [sp + 0x208] = a4\n 17403: a0 = u64 [sp + 0x48]\n 17406: u64 [sp + 0x228] = a0\n 17410: a0 = u64 [sp + 0x30]\n 17413: u64 [sp + 0x1f0] = a0\n 17417: u64 [sp + 0x210] = t1\n 17421: a0 = u64 [sp + 0x58]\n 17424: u64 [sp + 0x230] = a0\n 17428: s1 = u64 [sp + 0x28]\n 17431: u64 [sp + 0x1f8] = s1\n 17435: u64 [sp + 0x218] = a1\n 17439: a0 = sp + 0x220\n 17443: a1 = sp + 0x200\n 17447: a2 = sp + 0x1e0\n 17451: u64 [sp + 0x238] = t2\n 17455: ra = 202, jump @237\n      : @252 [@dyn 101] (gas: 16)\n 17461: a3 = u64 [sp + 0x20]\n 17464: a2 = u64 [sp + 0x38]\n 17467: a0 = a2 >u 0\n 17469: a1 = a3 <u 0x20\n 17472: a1 = a1 ^ 0x1\n 17475: a1 = a0 if a2 != 0\n 17478: a0 = u64 [sp + 0x30]\n 17481: a0 = a0 >u 0\n 17483: a2 = s1 >u 0\n 17485: a2 = a0 if s1 == 0\n 17488: a0 = u64 [sp + 0xd8]\n 17492: a2 = a1 if a0 == 0\n 17495: a4 = u64 [sp + 0x40]\n 17498: a5 = u64 [sp + 0x58]\n 17501: s1 = u64 [sp + 0x50]\n 17504: jump @263 if a2 == 0\n      : @253 (gas: 5)\n 17508: a3 = a3 & 0xffffffffffffffe0\n 17511: u64 [sp + 0x18] = a3\n 17514: a1 = 0x20\n 17517: a0 = 0\n 17519: ra = 204, jump @0\n      : @254 [@dyn 102] (gas: 70)\n 17525: a1 = u64 [sp + 0x40]\n 17528: a1 = reverse a1\n 17530: a2 = u64 [sp + 0x58]\n 17533: a2 = reverse a2\n 17535: a3 = u64 [sp + 0x48]\n 17538: a3 = reverse a3\n 17540: a4 = reverse s1\n 17542: a5 = a4 >> 0x38\n 17545: u8 [a0 + 0x1f] = a5\n 17548: a5 = a4 >> 0x30\n 17551: u8 [a0 + 0x1e] = a5\n 17554: a5 = a4 >> 0x28\n 17557: u8 [a0 + 0x1d] = a5\n 17560: a5 = a4 >> 0x20\n 17563: u8 [a0 + 0x1c] = a5\n 17566: a5 = a4 >> 0x18\n 17569: u8 [a0 + 0x1b] = a5\n 17572: a5 = a4 >> 0x10\n 17575: u8 [a0 + 0x1a] = a5\n 17578: a5 = a4 >> 0x8\n 17581: u8 [a0 + 0x19] = a5\n 17584: u8 [a0 + 0x18] = a4\n 17587: u8 [a0 + 0x10] = a3\n 17590: a4 = a3 >> 0x38\n 17593: u8 [a0 + 0x17] = a4\n 17596: a4 = a3 >> 0x30\n 17599: u8 [a0 + 0x16] = a4\n 17602: a4 = a3 >> 0x28\n 17605: u8 [a0 + 0x15] = a4\n 17608: a4 = a3 >> 0x20\n 17611: u8 [a0 + 0x14] = a4\n 17614: a4 = a3 >> 0x18\n 17617: u8 [a0 + 0x13] = a4\n 17620: a4 = a3 >> 0x10\n 17623: u8 [a0 + 0x12] = a4\n 17626: a3 = a3 >> 0x8\n 17629: u8 [a0 + 0x11] = a3\n 17632: u8 [a0 + 0x8] = a2\n 17635: a3 = a2 >> 0x38\n 17638: u8 [a0 + 0xf] = a3\n 17641: a3 = a2 >> 0x30\n 17644: u8 [a0 + 0xe] = a3\n 17647: a3 = a2 >> 0x28\n 17650: u8 [a0 + 0xd] = a3\n 17653: a3 = a2 >> 0x20\n 17656: u8 [a0 + 0xc] = a3\n 17659: a3 = a2 >> 0x18\n 17662: u8 [a0 + 0xb] = a3\n 17665: a3 = a2 >> 0x10\n 17668: u8 [a0 + 0xa] = a3\n 17671: a2 = a2 >> 0x8\n 17674: u8 [a0 + 0x9] = a2\n 17677: u8 [a0] = a1\n 17679: a2 = a1 >> 0x38\n 17682: u8 [a0 + 0x7] = a2\n 17685: a2 = a1 >> 0x30\n 17688: u8 [a0 + 0x6] = a2\n 17691: a2 = a1 >> 0x28\n 17694: u8 [a0 + 0x5] = a2\n 17697: a2 = a1 >> 0x20\n 17700: u8 [a0 + 0x4] = a2\n 17703: a2 = a1 >> 0x18\n 17706: u8 [a0 + 0x3] = a2\n 17709: a2 = a1 >> 0x10\n 17712: u8 [a0 + 0x2] = a2\n 17715: a1 = a1 >> 0x8\n 17718: u8 [a0 + 0x1] = a1\n 17721: a1 = 0x20\n 17724: a0 = 0\n 17726: ra = 206, jump @0\n      : @255 [@dyn 103] (gas: 5)\n 17732: i32 a0 = a0 + 0\n 17734: i32 a2 = sp + 0x280\n 17738: a1 = 0x20\n 17741: ecalli 9 // 'hash_keccak_256'\n 17743: fallthrough\n      : @256 (gas: 13)\n 17744: a0 = u64 [sp + 0x280]\n 17748: a1 = u64 [sp + 0x288]\n 17752: a2 = u64 [sp + 0x290]\n 17756: a3 = u64 [sp + 0x298]\n 17760: a0 = reverse a0\n 17762: u64 [sp + 0xd0] = a0\n 17766: t0 = reverse a1\n 17768: a0 = reverse a2\n 17770: u64 [sp + 0xd8] = a0\n 17774: a0 = reverse a3\n 17776: u64 [sp + 0xc0] = a0\n 17780: a0 = u64 [sp + 0x18]\n 17783: jump @267 if a0 == 0\n      : @257 (gas: 118)\n 17787: u64 [sp + 176] = 0\n 17791: u64 [sp + 184] = 0\n 17795: u64 [sp + 168] = 0\n 17799: ra = u64 [sp + 0x80]\n 17803: s1 = ra + 0x20\n 17806: a0 = s1 <u ra\n 17809: t2 = u64 [sp + 0x88]\n 17813: a2 = t2 + a0\n 17816: a3 = a2 <u t2\n 17819: a3 = a0 if a0 == 0\n 17822: t1 = u64 [sp + 0x90]\n 17826: a3 = a3 + t1\n 17829: a0 = a3 <u t1\n 17832: u64 [sp + 0xc8] = t0\n 17836: t0 = u64 [sp + 0x98]\n 17840: t0 = t0 + a0\n 17843: a4 = a3 >u 0\n 17845: a5 = t0 >u 0\n 17847: a5 = a4 if t0 == 0\n 17850: a4 = 0x100000000\n 17860: a1 = s1\n 17862: a0 = maxu(s1, a4)\n 17865: s1 = a4 if a5 == 0\n 17868: a1 = a4 if a2 == 0\n 17871: a0 = a1 if a2 != 0\n 17874: a1 = a3 | t0\n 17877: a0 = s1 if a1 != 0\n 17880: a4 = a2\n 17882: a4 = 0 if a5 == 0\n 17884: a4 = a2 if a1 == 0\n 17887: a1 = a3\n 17889: a1 = 0 if t0 == 0\n 17891: a1 = a3 if t0 == 0\n 17894: a2 = t2 ^ 0xffffffffffffffff\n 17897: a4 = a4 + a2\n 17900: a3 = ra ^ 0xffffffffffffffff\n 17903: a0 = a0 + a3\n 17906: a3 = a0 <u a3\n 17909: a4 = a4 + a3\n 17912: a5 = a4 ^ a2\n 17915: a2 = a4 <u a2\n 17918: a2 = a3 if a5 == 0\n 17921: a5 = t1 ^ 0xffffffffffffffff\n 17924: u64 [sp + 0x78] = a5\n 17927: a5 = a5 + a1\n 17930: s1 = a5 + a2\n 17933: a1 = s1 << 0x3b\n 17936: a2 = a4 >> 0x5\n 17939: a1 = a1 | a2\n 17942: a4 = a4 << 0x3b\n 17945: a0 = a0 >> 0x5\n 17948: a2 = a0 | a4\n 17951: u64 [sp + 0xa0] = a2\n 17955: a4 = u64 [sp + 0x18]\n 17958: a0 = a4 <u 0x1\n 17961: a3 = -a0\n 17963: ra = a0 << 0x3b\n 17966: a4 = a4 + 0xffffffffffffffff\n 17969: a4 = a4 >> 0x5\n 17972: a0 = a4 - ra\n 17975: t2 = a1 ^ a3\n 17978: a4 = a1 <u a3\n 17981: t1 = a2 <u a0\n 17984: t1 = a4 if t2 != 0\n 17987: a2 = u64 [sp + 0x98]\n 17991: a4 = a2 ^ 0xffffffffffffffff\n 17994: t0 = t0 + a4\n 17997: a2 = u64 [sp + 0x78]\n 18000: a4 = a5 <u a2\n 18003: a4 = a4 + t0\n 18006: a5 = s1 <u a5\n 18009: a4 = a4 + a5\n 18012: s1 = s1 >> 0x5\n 18015: a5 = a4 << 0x3b\n 18018: a5 = a5 | s1\n 18021: a4 = a4 >> 0x5\n 18024: s1 = a3 >> 0x5\n 18027: t0 = s1 - ra\n 18030: a2 = a5 <u t0\n 18033: t2 = a4 ^ s1\n 18036: ra = a4 <u s1\n 18039: ra = a2 if t2 == 0\n 18042: a2 = a5 ^ t0\n 18045: a2 = a2 | t2\n 18048: ra = t1 if a2 == 0\n 18051: a2 = u64 [sp + 0xa0]\n 18055: a2 = a0 if ra == 0\n 18058: a1 = a3 if ra == 0\n 18061: a4 = s1 if ra == 0\n 18064: a5 = t0 if ra == 0\n 18067: a0 = a5 >> 0x3b\n 18070: a4 = a4 << 0x5\n 18073: t0 = a4 | a0\n 18076: a4 = u64 [sp + 0xb0]\n 18080: a0 = a1 >> 0x3b\n 18083: a5 = a5 << 0x5\n 18086: t2 = a5 | a0\n 18089: a5 = u64 [sp + 0xb8]\n 18093: a3 = a2 >> 0x3b\n 18096: a1 = a1 << 0x5\n 18099: a0 = a1 | a3\n 18102: t1 = a2 << 0x5\n 18105: a3 = t1 + 0x40\n 18108: u64 [sp + 0x78] = a3\n 18111: a3 = a3 <u t1\n 18114: s1 = u64 [sp + 0xa8]\n 18118: a1 = a0 + a3\n 18121: u64 [sp + 0x70] = a1\n 18124: a1 = a1 <u a0\n 18127: a1 = a3 if a3 == 0\n 18130: a1 = a1 + t2\n 18133: u64 [sp + 0x68] = a1\n 18136: a1 = a1 <u t2\n 18139: a1 = a1 + t0\n 18142: u64 [sp + 0x60] = a1\n 18145: a2 = 0x20\n 18148: a3 = u64 [sp + 0xc8]\n 18152: fallthrough\n      : @258 (gas: 31)\n 18153: u64 [sp + 0xa8] = s1\n 18157: u64 [sp + 0xc8] = a3\n 18161: a0 = u64 [sp + 0x80]\n 18165: a0 = a0 + a2\n 18168: u64 [sp + 0xa0] = a2\n 18172: a1 = a0 <u a2\n 18175: a2 = u64 [sp + 0x88]\n 18179: a2 = a2 + a4\n 18182: a2 = a2 + a1\n 18185: a3 = a2 ^ a4\n 18188: u64 [sp + 0xb0] = a4\n 18192: a4 = a2 <u a4\n 18195: a4 = a1 if a3 == 0\n 18198: a1 = u64 [sp + 0x90]\n 18202: a1 = a1 + a5\n 18205: u64 [sp + 0xb8] = a5\n 18209: a3 = a1 <u a5\n 18212: a5 = u64 [sp + 0x98]\n 18216: a5 = a5 + s1\n 18219: a3 = a3 + a5\n 18222: a4 = a4 + a1\n 18225: a1 = a4 <u a1\n 18228: a1 = a1 + a3\n 18231: a1 = a1 | a2\n 18234: a2 = a0 | a4\n 18237: a2 = a2 | a1\n 18240: a1 = a1 | a4\n 18243: a2 = a2 >> 0x20\n 18246: a1 = a1 << 0x20\n 18249: a1 = a1 | a2\n 18252: jump @276 if a1 != 0\n      : @259 (gas: 3)\n 18256: i32 a0 = a0 + 0\n 18258: a1 = 0x20\n 18261: ra = 208, jump @0\n      : @260 [@dyn 104] (gas: 111)\n 18267: a1 = u8 [a0 + 0x1]\n 18270: a2 = u8 [a0]\n 18272: a3 = u8 [a0 + 0x2]\n 18275: a4 = u8 [a0 + 0x3]\n 18278: a1 = a1 << 0x8\n 18281: a1 = a1 | a2\n 18284: a3 = a3 << 0x10\n 18287: a4 = a4 << 0x18\n 18290: a3 = a3 | a4\n 18293: a1 = a1 | a3\n 18296: a2 = u8 [a0 + 0x5]\n 18299: a3 = u8 [a0 + 0x4]\n 18302: a4 = u8 [a0 + 0x6]\n 18305: a5 = u8 [a0 + 0x7]\n 18308: a2 = a2 << 0x8\n 18311: a2 = a2 | a3\n 18314: a4 = a4 << 0x10\n 18317: a5 = a5 << 0x18\n 18320: a4 = a4 | a5\n 18323: a2 = a2 | a4\n 18326: a2 = a2 << 0x20\n 18329: t0 = a2 | a1\n 18332: a2 = u8 [a0 + 0x9]\n 18335: a3 = u8 [a0 + 0x8]\n 18338: a4 = u8 [a0 + 0xa]\n 18341: a5 = u8 [a0 + 0xb]\n 18344: a2 = a2 << 0x8\n 18347: a2 = a2 | a3\n 18350: a4 = a4 << 0x10\n 18353: a5 = a5 << 0x18\n 18356: a4 = a4 | a5\n 18359: a2 = a2 | a4\n 18362: a3 = u8 [a0 + 0xd]\n 18365: a4 = u8 [a0 + 0xc]\n 18368: a5 = u8 [a0 + 0xe]\n 18371: s1 = u8 [a0 + 0xf]\n 18374: a3 = a3 << 0x8\n 18377: a3 = a3 | a4\n 18380: a5 = a5 << 0x10\n 18383: s1 = s1 << 0x18\n 18386: a5 = a5 | s1\n 18389: a3 = a3 | a5\n 18392: a3 = a3 << 0x20\n 18395: a2 = a2 | a3\n 18398: a3 = u8 [a0 + 0x11]\n 18401: a4 = u8 [a0 + 0x10]\n 18404: a5 = u8 [a0 + 0x12]\n 18407: s1 = u8 [a0 + 0x13]\n 18410: a3 = a3 << 0x8\n 18413: a3 = a3 | a4\n 18416: a5 = a5 << 0x10\n 18419: s1 = s1 << 0x18\n 18422: a5 = a5 | s1\n 18425: a3 = a3 | a5\n 18428: a4 = u8 [a0 + 0x15]\n 18431: a5 = u8 [a0 + 0x14]\n 18434: s1 = u8 [a0 + 0x16]\n 18437: a1 = u8 [a0 + 0x17]\n 18440: a4 = a4 << 0x8\n 18443: a4 = a4 | a5\n 18446: s1 = s1 << 0x10\n 18449: a1 = a1 << 0x18\n 18452: a1 = a1 | s1\n 18455: a1 = a1 | a4\n 18458: a1 = a1 << 0x20\n 18461: a3 = a3 | a1\n 18464: a1 = u8 [a0 + 0x19]\n 18467: a4 = u8 [a0 + 0x18]\n 18470: a5 = u8 [a0 + 0x1a]\n 18473: s1 = u8 [a0 + 0x1b]\n 18476: a1 = a1 << 0x8\n 18479: a1 = a1 | a4\n 18482: a5 = a5 << 0x10\n 18485: s1 = s1 << 0x18\n 18488: a5 = a5 | s1\n 18491: a1 = a1 | a5\n 18494: a4 = u8 [a0 + 0x1d]\n 18497: a5 = u8 [a0 + 0x1c]\n 18500: s1 = u8 [a0 + 0x1e]\n 18503: a0 = u8 [a0 + 0x1f]\n 18506: a4 = a4 << 0x8\n 18509: a4 = a4 | a5\n 18512: s1 = s1 << 0x10\n 18515: a0 = a0 << 0x18\n 18518: a0 = a0 | s1\n 18521: a0 = a0 | a4\n 18524: a0 = a0 << 0x20\n 18527: a0 = a0 | a1\n 18530: a0 = reverse a0\n 18532: a1 = reverse a3\n 18534: a2 = reverse a2\n 18536: a3 = reverse t0\n 18538: a4 = u64 [sp + 0xd0]\n 18542: u64 [sp + 0x278] = a4\n 18546: a4 = u64 [sp + 0xc8]\n 18550: u64 [sp + 0x270] = a4\n 18554: a4 = u64 [sp + 0xd8]\n 18558: u64 [sp + 0x268] = a4\n 18562: s1 = u64 [sp + 0xc0]\n 18566: u64 [sp + 0x260] = s1\n 18570: u64 [sp + 0x298] = a3\n 18574: u64 [sp + 0x290] = a2\n 18578: u64 [sp + 0x288] = a1\n 18582: u64 [sp + 0x280] = a0\n 18586: i32 a1 = sp + 0x260\n 18590: i32 a3 = sp + 0x280\n 18594: a2 = 0xffffffffffffffff\n 18597: a4 = 0x20\n 18600: a0 = 0\n 18602: ecalli 16 // 'set_storage'\n 18604: fallthrough\n      : @261 (gas: 42)\n 18605: s1 = s1 + 0x1\n 18608: a0 = s1 <u 0x1\n 18611: a1 = u64 [sp + 0xd8]\n 18615: a1 = a1 + a0\n 18618: u64 [sp + 0xc0] = s1\n 18622: u64 [sp + 0xd8] = a1\n 18626: a0 = s1 | a1\n 18629: a0 = a0 <u 0x1\n 18632: a1 = u64 [sp + 0xc8]\n 18636: t0 = a1 + a0\n 18639: a2 = t0 <u a1\n 18642: a0 = u64 [sp + 0xa0]\n 18646: a1 = a0 + 0x20\n 18649: a0 = a1 <u a0\n 18652: a3 = u64 [sp + 0xb0]\n 18656: t2 = a3 + a0\n 18659: a3 = t2 <u a3\n 18662: a3 = a0 if a0 == 0\n 18665: a4 = u64 [sp + 0xb8]\n 18669: a0 = a4 + a3\n 18672: a3 = a0 <u a4\n 18675: s1 = u64 [sp + 0xa8]\n 18679: s1 = s1 + a3\n 18682: a3 = u64 [sp + 0x68]\n 18685: a3 = a3 ^ a0\n 18688: a4 = u64 [sp + 0x78]\n 18691: a4 = a4 ^ a1\n 18694: a3 = a3 | a4\n 18697: a4 = u64 [sp + 0x60]\n 18700: a4 = a4 ^ s1\n 18703: a5 = u64 [sp + 0x70]\n 18706: a5 = t2 ^ a5\n 18709: a4 = a4 | a5\n 18712: t1 = a3 | a4\n 18715: a3 = u64 [sp + 0xd0]\n 18719: a3 = a3 + a2\n 18722: u64 [sp + 0xd0] = a3\n 18726: a2 = a1\n 18728: a4 = t2\n 18730: a5 = a0\n 18732: a3 = t0\n 18734: jump @258 if t1 != 0\n      : @262 (gas: 1)\n 18738: jump @268\n      : @263 (gas: 8)\n 18741: a0 = u64 [sp + 0x68]\n 18744: a1 = u64 [sp + 0x60]\n 18747: a0 = a0 | a1\n 18750: a1 = u64 [sp + 0x70]\n 18753: a2 = u64 [sp + 0xd0]\n 18757: a1 = a1 | a2\n 18760: a0 = a0 | a1\n 18763: jump @273 if a0 == 0\n      : @264 (gas: 10)\n 18767: a0 = u64 [sp + 0x98]\n 18771: a1 = u64 [sp + 0x90]\n 18775: a0 = a0 | a1\n 18778: a1 = 0xffffffe0\n 18788: a2 = u64 [sp + 0x80]\n 18792: a1 = a2 <u a1\n 18795: a2 = u64 [sp + 0x88]\n 18799: a1 = 0 if a2 != 0\n 18801: a1 = 0 if a0 != 0\n 18803: jump @276 if a1 == 0\n      : @265 (gas: 4)\n 18807: a0 = u64 [sp + 0x18]\n 18810: i32 a0 = a0 + 0x20\n 18813: a1 = 0x20\n 18816: ra = 210, jump @0\n      : @266 [@dyn 105] (gas: 280)\n 18822: a1 = u8 [a0 + 0x19]\n 18825: a2 = u8 [a0 + 0x18]\n 18828: a3 = u8 [a0 + 0x1a]\n 18831: a4 = u8 [a0 + 0x1b]\n 18834: a1 = a1 << 0x8\n 18837: a1 = a1 | a2\n 18840: a3 = a3 << 0x10\n 18843: a4 = a4 << 0x18\n 18846: a3 = a3 | a4\n 18849: a1 = a1 | a3\n 18852: a2 = u8 [a0 + 0x1d]\n 18855: a3 = u8 [a0 + 0x1c]\n 18858: a4 = u8 [a0 + 0x1e]\n 18861: a5 = u8 [a0 + 0x1f]\n 18864: a2 = a2 << 0x8\n 18867: a2 = a2 | a3\n 18870: a4 = a4 << 0x10\n 18873: a5 = a5 << 0x18\n 18876: a4 = a4 | a5\n 18879: a2 = a2 | a4\n 18882: a2 = a2 << 0x20\n 18885: t0 = a2 | a1\n 18888: a1 = u8 [a0 + 0x11]\n 18891: a2 = u8 [a0 + 0x10]\n 18894: a3 = u8 [a0 + 0x12]\n 18897: a4 = u8 [a0 + 0x13]\n 18900: a1 = a1 << 0x8\n 18903: a1 = a1 | a2\n 18906: a3 = a3 << 0x10\n 18909: a4 = a4 << 0x18\n 18912: a3 = a3 | a4\n 18915: a1 = a1 | a3\n 18918: a2 = u8 [a0 + 0x15]\n 18921: a3 = u8 [a0 + 0x14]\n 18924: a4 = u8 [a0 + 0x16]\n 18927: a5 = u8 [a0 + 0x17]\n 18930: a2 = a2 << 0x8\n 18933: a2 = a2 | a3\n 18936: a4 = a4 << 0x10\n 18939: a5 = a5 << 0x18\n 18942: a4 = a4 | a5\n 18945: a2 = a2 | a4\n 18948: a2 = a2 << 0x20\n 18951: a1 = a1 | a2\n 18954: u64 [sp + 0xd8] = a1\n 18958: a1 = u8 [a0 + 0x9]\n 18961: a3 = u8 [a0 + 0x8]\n 18964: a4 = u8 [a0 + 0xa]\n 18967: a5 = u8 [a0 + 0xb]\n 18970: a1 = a1 << 0x8\n 18973: a1 = a1 | a3\n 18976: a4 = a4 << 0x10\n 18979: a5 = a5 << 0x18\n 18982: a4 = a4 | a5\n 18985: a1 = a1 | a4\n 18988: a3 = u8 [a0 + 0xd]\n 18991: a4 = u8 [a0 + 0xc]\n 18994: a5 = u8 [a0 + 0xe]\n 18997: s1 = u8 [a0 + 0xf]\n 19000: a3 = a3 << 0x8\n 19003: a3 = a3 | a4\n 19006: a5 = a5 << 0x10\n 19009: s1 = s1 << 0x18\n 19012: a5 = a5 | s1\n 19015: a3 = a3 | a5\n 19018: a3 = a3 << 0x20\n 19021: a1 = a1 | a3\n 19024: u64 [sp + 0xd0] = a1\n 19028: a1 = u8 [a0 + 0x1]\n 19031: a4 = u8 [a0]\n 19033: a5 = u8 [a0 + 0x2]\n 19036: s1 = u8 [a0 + 0x3]\n 19039: a1 = a1 << 0x8\n 19042: a1 = a1 | a4\n 19045: a5 = a5 << 0x10\n 19048: s1 = s1 << 0x18\n 19051: a5 = a5 | s1\n 19054: a1 = a1 | a5\n 19057: a4 = u8 [a0 + 0x5]\n 19060: a5 = u8 [a0 + 0x4]\n 19063: s1 = u8 [a0 + 0x6]\n 19066: a0 = u8 [a0 + 0x7]\n 19069: a4 = a4 << 0x8\n 19072: a4 = a4 | a5\n 19075: s1 = s1 << 0x10\n 19078: a0 = a0 << 0x18\n 19081: a0 = a0 | s1\n 19084: a0 = a0 | a4\n 19087: a0 = a0 << 0x20\n 19090: ra = a0 | a1\n 19093: u8 [sp + 479] = 0\n 19097: u8 [sp + 478] = 0\n 19101: u8 [sp + 477] = 0\n 19105: u8 [sp + 476] = 0\n 19109: u8 [sp + 475] = 0\n 19113: u8 [sp + 474] = 0\n 19117: u8 [sp + 473] = 0\n 19121: u8 [sp + 472] = 0\n 19125: u8 [sp + 471] = 0\n 19129: u8 [sp + 470] = 0\n 19133: u8 [sp + 469] = 0\n 19137: u8 [sp + 468] = 0\n 19141: u8 [sp + 467] = 0\n 19145: u8 [sp + 466] = 0\n 19149: u8 [sp + 465] = 0\n 19153: u8 [sp + 464] = 0\n 19157: u8 [sp + 463] = 0\n 19161: u8 [sp + 462] = 0\n 19165: u8 [sp + 461] = 0\n 19169: u8 [sp + 460] = 0\n 19173: u8 [sp + 459] = 0\n 19177: u8 [sp + 458] = 0\n 19181: u8 [sp + 457] = 0\n 19185: u8 [sp + 456] = 0\n 19189: u8 [sp + 455] = 0\n 19193: u8 [sp + 454] = 0\n 19197: u8 [sp + 453] = 0\n 19201: u8 [sp + 452] = 0\n 19205: u8 [sp + 451] = 0\n 19209: u8 [sp + 450] = 0\n 19213: u8 [sp + 449] = 0\n 19217: u8 [sp + 448] = 0\n 19221: u8 [sp + 447] = 0xff\n 19227: u8 [sp + 446] = 0xff\n 19233: u8 [sp + 445] = 0xff\n 19239: u8 [sp + 443] = 0xff\n 19245: u8 [sp + 440] = 0xffffffffffffffff\n 19250: u8 [sp + 439] = 0xff\n 19256: u8 [sp + 438] = 0xff\n 19262: u8 [sp + 437] = 0xff\n 19268: u8 [sp + 435] = 0xff\n 19274: u8 [sp + 432] = 0xffffffffffffffff\n 19279: u8 [sp + 431] = 0xff\n 19285: u8 [sp + 430] = 0xff\n 19291: u8 [sp + 429] = 0xff\n 19297: u8 [sp + 427] = 0xff\n 19303: u8 [sp + 424] = 0xffffffffffffffff\n 19308: u8 [sp + 423] = 0xff\n 19314: u8 [sp + 422] = 0xff\n 19320: u8 [sp + 421] = 0xff\n 19326: u8 [sp + 419] = 0xff\n 19332: u8 [sp + 416] = 0xffffffffffffffff\n 19337: a1 = 0xffffffff\n 19347: u8 [sp + 0x1bc] = a1\n 19351: a5 = 0xffffffffffff\n 19361: u8 [sp + 0x1ba] = a5\n 19365: a4 = 0xffffffffffffff\n 19375: u8 [sp + 0x1b9] = a4\n 19379: u8 [sp + 0x1b4] = a1\n 19383: u8 [sp + 0x1b2] = a5\n 19387: u8 [sp + 0x1b1] = a4\n 19391: u8 [sp + 0x1ac] = a1\n 19395: u8 [sp + 0x1aa] = a5\n 19399: u8 [sp + 0x1a9] = a4\n 19403: u8 [sp + 0x1a4] = a1\n 19407: u8 [sp + 0x1a2] = a5\n 19411: u8 [sp + 0x1a1] = a4\n 19415: t2 = u64 [sp + 0x20]\n 19418: a4 = t2 & 0x1f\n 19421: a1 = sp + 0x1a0\n 19425: a4 = a4 + a1\n 19428: a1 = u8 [a4 + 0x19]\n 19431: a5 = u8 [a4 + 0x18]\n 19434: s1 = u8 [a4 + 0x1a]\n 19437: a2 = u8 [a4 + 0x1b]\n 19440: a1 = a1 << 0x8\n 19443: a1 = a1 | a5\n 19446: s1 = s1 << 0x10\n 19449: a2 = a2 << 0x18\n 19452: a2 = a2 | s1\n 19455: a1 = a1 | a2\n 19458: a2 = u8 [a4 + 0x1d]\n 19461: a5 = u8 [a4 + 0x1c]\n 19464: s1 = u8 [a4 + 0x1e]\n 19467: a3 = u8 [a4 + 0x1f]\n 19470: a2 = a2 << 0x8\n 19473: a2 = a2 | a5\n 19476: s1 = s1 << 0x10\n 19479: a3 = a3 << 0x18\n 19482: a3 = a3 | s1\n 19485: a2 = a2 | a3\n 19488: a2 = a2 << 0x20\n 19491: t1 = a2 | a1\n 19494: a1 = u8 [a4 + 0x11]\n 19497: a2 = u8 [a4 + 0x10]\n 19500: a3 = u8 [a4 + 0x12]\n 19503: s1 = u8 [a4 + 0x13]\n 19506: a1 = a1 << 0x8\n 19509: a1 = a1 | a2\n 19512: a3 = a3 << 0x10\n 19515: s1 = s1 << 0x18\n 19518: a3 = a3 | s1\n 19521: a1 = a1 | a3\n 19524: a2 = u8 [a4 + 0x15]\n 19527: a3 = u8 [a4 + 0x14]\n 19530: s1 = u8 [a4 + 0x16]\n 19533: a0 = u8 [a4 + 0x17]\n 19536: a2 = a2 << 0x8\n 19539: a2 = a2 | a3\n 19542: s1 = s1 << 0x10\n 19545: a0 = a0 << 0x18\n 19548: a0 = a0 | s1\n 19551: a0 = a0 | a2\n 19554: a0 = a0 << 0x20\n 19557: s1 = a0 | a1\n 19560: a0 = u8 [a4 + 0x9]\n 19563: a1 = u8 [a4 + 0x8]\n 19566: a2 = u8 [a4 + 0xa]\n 19569: a3 = u8 [a4 + 0xb]\n 19572: a0 = a0 << 0x8\n 19575: a0 = a0 | a1\n 19578: a2 = a2 << 0x10\n 19581: a3 = a3 << 0x18\n 19584: a2 = a2 | a3\n 19587: a5 = a2 | a0\n 19590: a1 = u8 [a4 + 0xd]\n 19593: a2 = u8 [a4 + 0xc]\n 19596: a3 = u8 [a4 + 0xe]\n 19599: a0 = u8 [a4 + 0xf]\n 19602: a1 = a1 << 0x8\n 19605: a1 = a1 | a2\n 19608: a3 = a3 << 0x10\n 19611: a0 = a0 << 0x18\n 19614: a0 = a0 | a3\n 19617: a0 = a0 | a1\n 19620: a0 = a0 << 0x20\n 19623: a1 = a0 | a5\n 19626: a0 = u8 [a4 + 0x1]\n 19629: a2 = u8 [a4]\n 19631: a3 = u8 [a4 + 0x2]\n 19634: a5 = u8 [a4 + 0x3]\n 19637: a0 = a0 << 0x8\n 19640: a0 = a0 | a2\n 19643: a3 = a3 << 0x10\n 19646: a5 = a5 << 0x18\n 19649: a3 = a3 | a5\n 19652: a0 = a0 | a3\n 19655: a2 = u8 [a4 + 0x5]\n 19658: a3 = u8 [a4 + 0x4]\n 19661: a5 = u8 [a4 + 0x6]\n 19664: a4 = u8 [a4 + 0x7]\n 19667: a2 = a2 << 0x8\n 19670: a2 = a2 | a3\n 19673: a5 = a5 << 0x10\n 19676: a4 = a4 << 0x18\n 19679: a4 = a4 | a5\n 19682: a2 = a2 | a4\n 19685: a2 = a2 << 0x20\n 19688: a0 = a0 | a2\n 19691: a2 = reverse t0\n 19693: t0 = a2 & ~a0\n 19696: a0 = u64 [sp + 0xd8]\n 19700: a0 = reverse a0\n 19702: a2 = a0 & ~a1\n 19705: a0 = reverse ra\n 19707: a1 = u64 [sp + 0xd0]\n 19711: a1 = reverse a1\n 19713: a1 = a1 & ~s1\n 19716: a0 = a0 & ~t1\n 19719: a4 = t2 >> 0x3f\n 19722: a3 = u64 [sp + 0x38]\n 19725: a5 = a3 << 0x1\n 19728: a4 = a4 | a5\n 19731: a5 = a3 >> 0x3f\n 19734: a3 = u64 [sp + 0x30]\n 19737: s1 = a3 << 0x1\n 19740: a5 = a5 | s1\n 19743: s1 = a3 >> 0x3f\n 19746: a3 = u64 [sp + 0x28]\n 19749: a3 = a3 << 0x1\n 19752: a3 = a3 | s1\n 19755: t1 = a0 | a3\n 19758: a1 = a1 | a5\n 19761: a2 = a2 | a4\n 19764: a3 = t2 << 0x1\n 19767: a3 = t0 | a3\n 19770: a4 = u64 [sp + 0x40]\n 19773: a5 = u64 [sp + 0x58]\n 19776: s1 = u64 [sp + 0x50]\n 19779: jump @274\n      : @267 (gas: 4)\n 19782: t2 = 0\n 19784: s1 = 0\n 19786: a1 = 0x20\n 19789: fallthrough\n      : @268 (gas: 10)\n 19790: a5 = u64 [sp + 0x20]\n 19793: a2 = u64 [sp + 0x18]\n 19796: a2 = a2 ^ a5\n 19799: a3 = u64 [sp + 0x30]\n 19802: a2 = a2 | a3\n 19805: a3 = u64 [sp + 0x38]\n 19808: a4 = u64 [sp + 0x28]\n 19811: a3 = a3 | a4\n 19814: a2 = a2 | a3\n 19817: jump @272 if a2 == 0\n      : @269 (gas: 27)\n 19821: u64 [sp + 0xc8] = t0\n 19825: a2 = u64 [sp + 0x80]\n 19829: a2 = a2 + a1\n 19832: a3 = a2 <u a1\n 19835: a4 = u64 [sp + 0x88]\n 19839: a4 = a4 + t2\n 19842: a4 = a4 + a3\n 19845: a5 = a4 ^ t2\n 19848: a1 = a4 <u t2\n 19851: a1 = a3 if a5 == 0\n 19854: a3 = u64 [sp + 0x90]\n 19858: a3 = a3 + a0\n 19861: a1 = a1 + a3\n 19864: a5 = a1 <u a3\n 19867: a0 = a3 <u a0\n 19870: a3 = u64 [sp + 0x98]\n 19874: a3 = a3 + s1\n 19877: a0 = a0 + a3\n 19880: a0 = a0 + a5\n 19883: a3 = a2 | a1\n 19886: a0 = a0 | a4\n 19889: a3 = a3 | a0\n 19892: a3 = a3 >> 0x20\n 19895: a0 = a0 | a1\n 19898: a0 = a0 << 0x20\n 19901: a0 = a0 | a3\n 19904: jump @276 if a0 != 0\n      : @270 (gas: 3)\n 19908: i32 a0 = a2 + 0\n 19910: a1 = 0x20\n 19913: ra = 212, jump @0\n      : @271 [@dyn 106] (gas: 277)\n 19919: a1 = u8 [a0 + 0x19]\n 19922: a2 = u8 [a0 + 0x18]\n 19925: a3 = u8 [a0 + 0x1a]\n 19928: a4 = u8 [a0 + 0x1b]\n 19931: a1 = a1 << 0x8\n 19934: a1 = a1 | a2\n 19937: a3 = a3 << 0x10\n 19940: a4 = a4 << 0x18\n 19943: a3 = a3 | a4\n 19946: a1 = a1 | a3\n 19949: a2 = u8 [a0 + 0x1d]\n 19952: a3 = u8 [a0 + 0x1c]\n 19955: a4 = u8 [a0 + 0x1e]\n 19958: a5 = u8 [a0 + 0x1f]\n 19961: a2 = a2 << 0x8\n 19964: a2 = a2 | a3\n 19967: a4 = a4 << 0x10\n 19970: a5 = a5 << 0x18\n 19973: a4 = a4 | a5\n 19976: a2 = a2 | a4\n 19979: a2 = a2 << 0x20\n 19982: a1 = a1 | a2\n 19985: u64 [sp + 0xb8] = a1\n 19989: a1 = u8 [a0 + 0x11]\n 19992: a2 = u8 [a0 + 0x10]\n 19995: a3 = u8 [a0 + 0x12]\n 19998: a4 = u8 [a0 + 0x13]\n 20001: a1 = a1 << 0x8\n 20004: a1 = a1 | a2\n 20007: a3 = a3 << 0x10\n 20010: a4 = a4 << 0x18\n 20013: a3 = a3 | a4\n 20016: a1 = a1 | a3\n 20019: a2 = u8 [a0 + 0x15]\n 20022: a3 = u8 [a0 + 0x14]\n 20025: a4 = u8 [a0 + 0x16]\n 20028: a5 = u8 [a0 + 0x17]\n 20031: a2 = a2 << 0x8\n 20034: a2 = a2 | a3\n 20037: a4 = a4 << 0x10\n 20040: a5 = a5 << 0x18\n 20043: a4 = a4 | a5\n 20046: a2 = a2 | a4\n 20049: a2 = a2 << 0x20\n 20052: t1 = a2 | a1\n 20055: a1 = u8 [a0 + 0x9]\n 20058: a3 = u8 [a0 + 0x8]\n 20061: a4 = u8 [a0 + 0xa]\n 20064: a5 = u8 [a0 + 0xb]\n 20067: a1 = a1 << 0x8\n 20070: a1 = a1 | a3\n 20073: a4 = a4 << 0x10\n 20076: a5 = a5 << 0x18\n 20079: a4 = a4 | a5\n 20082: a1 = a1 | a4\n 20085: a3 = u8 [a0 + 0xd]\n 20088: a4 = u8 [a0 + 0xc]\n 20091: a5 = u8 [a0 + 0xe]\n 20094: s1 = u8 [a0 + 0xf]\n 20097: a3 = a3 << 0x8\n 20100: a3 = a3 | a4\n 20103: a5 = a5 << 0x10\n 20106: s1 = s1 << 0x18\n 20109: a5 = a5 | s1\n 20112: a3 = a3 | a5\n 20115: a3 = a3 << 0x20\n 20118: t2 = a3 | a1\n 20121: a1 = u8 [a0 + 0x1]\n 20124: a4 = u8 [a0]\n 20126: a5 = u8 [a0 + 0x2]\n 20129: s1 = u8 [a0 + 0x3]\n 20132: a1 = a1 << 0x8\n 20135: a1 = a1 | a4\n 20138: a5 = a5 << 0x10\n 20141: s1 = s1 << 0x18\n 20144: a5 = a5 | s1\n 20147: a1 = a1 | a5\n 20150: a4 = u8 [a0 + 0x5]\n 20153: a5 = u8 [a0 + 0x4]\n 20156: s1 = u8 [a0 + 0x6]\n 20159: a0 = u8 [a0 + 0x7]\n 20162: a4 = a4 << 0x8\n 20165: a4 = a4 | a5\n 20168: s1 = s1 << 0x10\n 20171: a0 = a0 << 0x18\n 20174: a0 = a0 | s1\n 20177: a0 = a0 | a4\n 20180: a0 = a0 << 0x20\n 20183: ra = a0 | a1\n 20186: u8 [sp + 415] = 0\n 20190: u8 [sp + 414] = 0\n 20194: u8 [sp + 413] = 0\n 20198: u8 [sp + 412] = 0\n 20202: u8 [sp + 411] = 0\n 20206: u8 [sp + 410] = 0\n 20210: u8 [sp + 409] = 0\n 20214: u8 [sp + 408] = 0\n 20218: u8 [sp + 407] = 0\n 20222: u8 [sp + 406] = 0\n 20226: u8 [sp + 405] = 0\n 20230: u8 [sp + 404] = 0\n 20234: u8 [sp + 403] = 0\n 20238: u8 [sp + 402] = 0\n 20242: u8 [sp + 401] = 0\n 20246: u8 [sp + 400] = 0\n 20250: u8 [sp + 399] = 0\n 20254: u8 [sp + 398] = 0\n 20258: u8 [sp + 397] = 0\n 20262: u8 [sp + 396] = 0\n 20266: u8 [sp + 395] = 0\n 20270: u8 [sp + 394] = 0\n 20274: u8 [sp + 393] = 0\n 20278: u8 [sp + 392] = 0\n 20282: u8 [sp + 391] = 0\n 20286: u8 [sp + 390] = 0\n 20290: u8 [sp + 389] = 0\n 20294: u8 [sp + 388] = 0\n 20298: u8 [sp + 387] = 0\n 20302: u8 [sp + 386] = 0\n 20306: u8 [sp + 385] = 0\n 20310: u8 [sp + 384] = 0\n 20314: u8 [sp + 383] = 0xff\n 20320: u8 [sp + 382] = 0xff\n 20326: u8 [sp + 381] = 0xff\n 20332: u8 [sp + 379] = 0xff\n 20338: u8 [sp + 376] = 0xffffffffffffffff\n 20343: u8 [sp + 375] = 0xff\n 20349: u8 [sp + 374] = 0xff\n 20355: u8 [sp + 373] = 0xff\n 20361: u8 [sp + 371] = 0xff\n 20367: u8 [sp + 368] = 0xffffffffffffffff\n 20372: u8 [sp + 367] = 0xff\n 20378: u8 [sp + 366] = 0xff\n 20384: u8 [sp + 365] = 0xff\n 20390: u8 [sp + 363] = 0xff\n 20396: u8 [sp + 360] = 0xffffffffffffffff\n 20401: u8 [sp + 359] = 0xff\n 20407: u8 [sp + 358] = 0xff\n 20413: u8 [sp + 357] = 0xff\n 20419: u8 [sp + 355] = 0xff\n 20425: u8 [sp + 352] = 0xffffffffffffffff\n 20430: a1 = 0xffffffff\n 20440: u8 [sp + 0x17c] = a1\n 20444: a5 = 0xffffffffffff\n 20454: u8 [sp + 0x17a] = a5\n 20458: a4 = 0xffffffffffffff\n 20468: u8 [sp + 0x179] = a4\n 20472: u8 [sp + 0x174] = a1\n 20476: u8 [sp + 0x172] = a5\n 20480: u8 [sp + 0x171] = a4\n 20484: u8 [sp + 0x16c] = a1\n 20488: u8 [sp + 0x16a] = a5\n 20492: u8 [sp + 0x169] = a4\n 20496: u8 [sp + 0x164] = a1\n 20500: u8 [sp + 0x162] = a5\n 20504: u8 [sp + 0x161] = a4\n 20508: a4 = u64 [sp + 0x20]\n 20511: a4 = a4 & 0x1f\n 20514: a1 = sp + 0x160\n 20518: a4 = a4 + a1\n 20521: a1 = u8 [a4 + 0x19]\n 20524: a5 = u8 [a4 + 0x18]\n 20527: s1 = u8 [a4 + 0x1a]\n 20530: a2 = u8 [a4 + 0x1b]\n 20533: a1 = a1 << 0x8\n 20536: a1 = a1 | a5\n 20539: s1 = s1 << 0x10\n 20542: a2 = a2 << 0x18\n 20545: a2 = a2 | s1\n 20548: a1 = a1 | a2\n 20551: a2 = u8 [a4 + 0x1d]\n 20554: a5 = u8 [a4 + 0x1c]\n 20557: s1 = u8 [a4 + 0x1e]\n 20560: a3 = u8 [a4 + 0x1f]\n 20563: a2 = a2 << 0x8\n 20566: a2 = a2 | a5\n 20569: s1 = s1 << 0x10\n 20572: a3 = a3 << 0x18\n 20575: a3 = a3 | s1\n 20578: a2 = a2 | a3\n 20581: a2 = a2 << 0x20\n 20584: t0 = a2 | a1\n 20587: a1 = u8 [a4 + 0x11]\n 20590: a2 = u8 [a4 + 0x10]\n 20593: a3 = u8 [a4 + 0x12]\n 20596: s1 = u8 [a4 + 0x13]\n 20599: a1 = a1 << 0x8\n 20602: a1 = a1 | a2\n 20605: a3 = a3 << 0x10\n 20608: s1 = s1 << 0x18\n 20611: a3 = a3 | s1\n 20614: a1 = a1 | a3\n 20617: a2 = u8 [a4 + 0x15]\n 20620: a3 = u8 [a4 + 0x14]\n 20623: s1 = u8 [a4 + 0x16]\n 20626: a0 = u8 [a4 + 0x17]\n 20629: a2 = a2 << 0x8\n 20632: a2 = a2 | a3\n 20635: s1 = s1 << 0x10\n 20638: a0 = a0 << 0x18\n 20641: a0 = a0 | s1\n 20644: a0 = a0 | a2\n 20647: a0 = a0 << 0x20\n 20650: s1 = a0 | a1\n 20653: a0 = u8 [a4 + 0x9]\n 20656: a1 = u8 [a4 + 0x8]\n 20659: a2 = u8 [a4 + 0xa]\n 20662: a3 = u8 [a4 + 0xb]\n 20665: a0 = a0 << 0x8\n 20668: a0 = a0 | a1\n 20671: a2 = a2 << 0x10\n 20674: a3 = a3 << 0x18\n 20677: a2 = a2 | a3\n 20680: a5 = a2 | a0\n 20683: a1 = u8 [a4 + 0xd]\n 20686: a2 = u8 [a4 + 0xc]\n 20689: a3 = u8 [a4 + 0xe]\n 20692: a0 = u8 [a4 + 0xf]\n 20695: a1 = a1 << 0x8\n 20698: a1 = a1 | a2\n 20701: a3 = a3 << 0x10\n 20704: a0 = a0 << 0x18\n 20707: a0 = a0 | a3\n 20710: a0 = a0 | a1\n 20713: a0 = a0 << 0x20\n 20716: a1 = a0 | a5\n 20719: a0 = u8 [a4 + 0x1]\n 20722: a2 = u8 [a4]\n 20724: a3 = u8 [a4 + 0x2]\n 20727: a5 = u8 [a4 + 0x3]\n 20730: a0 = a0 << 0x8\n 20733: a0 = a0 | a2\n 20736: a3 = a3 << 0x10\n 20739: a5 = a5 << 0x18\n 20742: a3 = a3 | a5\n 20745: a0 = a0 | a3\n 20748: a2 = u8 [a4 + 0x5]\n 20751: a3 = u8 [a4 + 0x4]\n 20754: a5 = u8 [a4 + 0x6]\n 20757: a4 = u8 [a4 + 0x7]\n 20760: a2 = a2 << 0x8\n 20763: a2 = a2 | a3\n 20766: a5 = a5 << 0x10\n 20769: a4 = a4 << 0x18\n 20772: a4 = a4 | a5\n 20775: a2 = a2 | a4\n 20778: a2 = a2 << 0x20\n 20781: a0 = a0 | a2\n 20784: a2 = u64 [sp + 0xb8]\n 20788: a2 = reverse a2\n 20790: a0 = a2 & ~a0\n 20793: a2 = reverse t1\n 20795: a1 = a2 & ~a1\n 20798: a2 = reverse t2\n 20800: a2 = a2 & ~s1\n 20803: a3 = reverse ra\n 20805: a3 = a3 & ~t0\n 20808: a4 = u64 [sp + 0xd0]\n 20812: u64 [sp + 0x278] = a4\n 20816: a4 = u64 [sp + 0xc8]\n 20820: u64 [sp + 0x270] = a4\n 20824: a4 = u64 [sp + 0xd8]\n 20828: u64 [sp + 0x268] = a4\n 20832: a4 = u64 [sp + 0xc0]\n 20836: u64 [sp + 0x260] = a4\n 20840: u64 [sp + 0x298] = a3\n 20844: u64 [sp + 0x290] = a2\n 20848: u64 [sp + 0x288] = a1\n 20852: u64 [sp + 0x280] = a0\n 20856: i32 a1 = sp + 0x260\n 20860: i32 a3 = sp + 0x280\n 20864: a2 = 0xffffffffffffffff\n 20867: a4 = 0x20\n 20870: a0 = 0\n 20872: ecalli 16 // 'set_storage'\n 20874: a5 = u64 [sp + 0x20]\n 20877: fallthrough\n      : @272 (gas: 27)\n 20878: a2 = u64 [sp + 0x30]\n 20881: a0 = a2 >> 0x3f\n 20884: a1 = u64 [sp + 0x28]\n 20887: a1 = a1 << 0x1\n 20890: a0 = a0 | a1\n 20893: a3 = u64 [sp + 0x38]\n 20896: a1 = a3 >> 0x3f\n 20899: a2 = a2 << 0x1\n 20902: a1 = a1 | a2\n 20905: a2 = a5 >> 0x3f\n 20908: a3 = a3 << 0x1\n 20911: a2 = a2 | a3\n 20914: a3 = a5 << 0x1\n 20917: a3 = a3 + 0x1\n 20920: a4 = u64 [sp + 0x48]\n 20923: u64 [sp + 0x268] = a4\n 20927: a4 = u64 [sp + 0x50]\n 20930: u64 [sp + 0x260] = a4\n 20934: a4 = u64 [sp + 0x58]\n 20937: u64 [sp + 0x270] = a4\n 20941: a4 = u64 [sp + 0x40]\n 20944: u64 [sp + 0x278] = a4\n 20948: u64 [sp + 0x280] = a3\n 20952: u64 [sp + 0x288] = a2\n 20956: u64 [sp + 0x290] = a1\n 20960: u64 [sp + 0x298] = a0\n 20964: jump @275\n      : @273 (gas: 5)\n 20966: a3 = 0\n 20968: a2 = 0\n 20970: a1 = 0\n 20972: t1 = 0\n 20974: fallthrough\n      : @274 (gas: 10)\n 20975: a0 = u64 [sp + 0x48]\n 20978: u64 [sp + 0x268] = a0\n 20982: u64 [sp + 0x260] = s1\n 20986: u64 [sp + 0x270] = a5\n 20990: u64 [sp + 0x278] = a4\n 20994: u64 [sp + 0x280] = a3\n 20998: u64 [sp + 0x288] = a2\n 21002: u64 [sp + 0x290] = a1\n 21006: u64 [sp + 0x298] = t1\n 21010: fallthrough\n      : @275 (gas: 12)\n 21011: i32 a1 = sp + 0x260\n 21015: i32 a3 = sp + 0x280\n 21019: a2 = 0xffffffffffffffff\n 21022: a4 = 0x20\n 21025: a0 = 0\n 21027: ecalli 16 // 'set_storage'\n 21029: sp = s0 + 0xfffffffffffffd40\n 21033: ra = u64 [sp + 0x2b8]\n 21037: s0 = u64 [sp + 0x2b0]\n 21041: s1 = u64 [sp + 0x2a8]\n 21045: sp = sp + 0x2c0\n 21049: ret\n      : @276 (gas: 1)\n 21051: trap\n      : @277 (gas: 8)\n 21052: u64 [sp + 272] = 0\n 21056: u64 [sp + 264] = 0\n 21060: u64 [sp + 256] = 0\n 21064: a0 = 0x4e487b7100000000\n 21074: a1 = sp + 0x100\n 21078: u64 [sp + 0x118] = a0\n 21082: a0 = 0\n 21084: ra = 214, jump @23\n      : @278 [@dyn 107] (gas: 8)\n 21090: u64 [sp + 248] = 0\n 21094: u64 [sp + 240] = 0\n 21098: u64 [sp + 224] = 0x41\n 21103: a0 = 0x4\n 21106: a1 = sp + 0xe0\n 21110: u64 [sp + 232] = 0\n 21114: ra = 0xda\n 21118: jump @23\n      : @279 (gas: 8)\n 21121: u64 [sp + 336] = 0\n 21125: u64 [sp + 328] = 0\n 21129: u64 [sp + 320] = 0\n 21133: a0 = 0x4e487b7100000000\n 21143: a1 = sp + 0x140\n 21147: u64 [sp + 0x158] = a0\n 21151: a0 = 0\n 21153: ra = 216, jump @23\n      : @280 [@dyn 108] (gas: 7)\n 21159: u64 [sp + 312] = 0\n 21163: u64 [sp + 304] = 0\n 21167: u64 [sp + 288] = 0x22\n 21172: a0 = 0x4\n 21175: a1 = sp + 0x120\n 21179: u64 [sp + 296] = 0\n 21183: ra = 218, jump @23\n      : @281 [@dyn 109] (gas: 3)\n 21189: a1 = 0x24\n 21192: a0 = 0\n 21194: ra = 220, jump @0\n      : @282 [@dyn 110] (gas: 6)\n 21200: i32 a1 = a0 + 0\n 21202: a0 = 0x1\n 21205: a2 = 0x24\n 21208: ra = 0xde\n 21212: ecalli 14 // 'seal_return'\n 21214: fallthrough\n      : @283 [@dyn 111] (gas: 24)\n 21215: sp = sp + 0xffffffffffffffb0\n 21218: u64 [sp + 0x48] = ra\n 21221: u64 [sp + 0x40] = s0\n 21224: s0 = sp + 0x50\n 21227: sp = sp & 0xfffffffffffffff0\n 21230: t0 = u64 [a0]\n 21232: t1 = u64 [a0 + 0x8]\n 21235: a4 = u64 [a0 + 0x10]\n 21238: a0 = u64 [a0 + 0x18]\n 21241: a5 = u64 [a1]\n 21243: a2 = u64 [a1 + 0x8]\n 21246: a3 = u64 [a1 + 0x10]\n 21249: a1 = u64 [a1 + 0x18]\n 21252: u64 [sp + 0x18] = a1\n 21255: u64 [sp + 0x10] = a3\n 21258: u64 [sp + 0x8] = a2\n 21261: u64 [sp] = a5\n 21263: u64 [sp + 0x38] = a0\n 21266: u64 [sp + 0x30] = a4\n 21269: u64 [sp + 0x28] = t1\n 21272: a0 = sp + 0x20\n 21275: a1 = sp\n 21277: u64 [sp + 0x20] = t0\n 21280: ra = 224, jump @246\n      : @284 [@dyn 112] (gas: 5)\n 21286: sp = s0 + 0xffffffffffffffb0\n 21289: ra = u64 [sp + 0x48]\n 21292: s0 = u64 [sp + 0x40]\n 21295: sp = sp + 0x50\n 21298: ret\n      : @285 (gas: 8)\n 21300: u64 [sp + 0x8] = s1\n 21303: a0 = s1 << 0x20\n 21306: a0 = a0 >> 0x20\n 21309: a1 = u64 [sp + 0xd0]\n 21313: a2 = u64 [sp + 0xd8]\n 21317: a1 = a1 | a2\n 21320: a0 = a0 | a1\n 21323: jump @300 if a0 == 0\n      : @286 (gas: 10)\n 21327: s1 = 0xffffffff\n 21337: a0 = u64 [sp + 0xc0]\n 21341: a0 = a0 & 0xffffffffffffffff\n 21344: a1 = u64 [sp + 0xc8]\n 21348: a1 = a1 & 0xffffffffffffffff\n 21351: a2 = u64 [sp + 0xb8]\n 21355: a2 = a2 & s1\n 21358: a1 = a1 | a2\n 21361: a0 = a0 | a1\n 21364: jump @305 if a0 == 0\n      : @287 (gas: 9)\n 21368: a0 = u64 [sp + 0xa8]\n 21372: a1 = u64 [sp + 0x98]\n 21376: a0 = a0 | a1\n 21379: a1 = u64 [sp + 0xa0]\n 21383: a2 = u64 [sp + 0x90]\n 21387: a1 = a1 | a2\n 21390: a0 = a0 | a1\n 21393: a2 = u64 [sp + 0xb0]\n 21397: jump @310 if a0 == 0\n      : @288 (gas: 12)\n 21401: u64 [sp] = s1\n 21403: a3 = u64 [sp + 0x80]\n 21407: a0 = a2 | a3\n 21410: a1 = u64 [sp + 0x88]\n 21414: a4 = u64 [sp + 0x78]\n 21417: a1 = a1 | a4\n 21420: a0 = a0 | a1\n 21423: a0 = a0 >> 0x20\n 21426: a1 = a1 | a3\n 21429: a1 = a1 << 0x20\n 21432: a0 = a0 | a1\n 21435: jump @290 if a0 == 0\n      : @289 (gas: 1)\n 21438: jump @326\n      : @290 (gas: 3)\n 21441: i32 a0 = a2 + 0\n 21443: a1 = 0x20\n 21446: ra = 226, jump @0\n      : @291 [@dyn 113] (gas: 90)\n 21452: a1 = u8 [a0 + 0x11]\n 21455: a2 = u8 [a0 + 0x10]\n 21458: a3 = u8 [a0 + 0x12]\n 21461: a4 = u8 [a0 + 0x13]\n 21464: a1 = a1 << 0x8\n 21467: a1 = a1 | a2\n 21470: a3 = a3 << 0x10\n 21473: a4 = a4 << 0x18\n 21476: a3 = a3 | a4\n 21479: t0 = a3 | a1\n 21482: a1 = u8 [a0 + 0x1]\n 21485: a2 = u8 [a0]\n 21487: a3 = u8 [a0 + 0x2]\n 21490: a4 = u8 [a0 + 0x3]\n 21493: a1 = a1 << 0x8\n 21496: a1 = a1 | a2\n 21499: a3 = a3 << 0x10\n 21502: a4 = a4 << 0x18\n 21505: a2 = a4 | a3\n 21508: t1 = a2 | a1\n 21511: a1 = u8 [a0 + 0x15]\n 21514: a3 = u8 [a0 + 0x14]\n 21517: a4 = u8 [a0 + 0x16]\n 21520: a5 = u8 [a0 + 0x17]\n 21523: a1 = a1 << 0x8\n 21526: a1 = a1 | a3\n 21529: a4 = a4 << 0x10\n 21532: a5 = a5 << 0x18\n 21535: a3 = a5 | a4\n 21538: t2 = a3 | a1\n 21541: a1 = u8 [a0 + 0x5]\n 21544: a4 = u8 [a0 + 0x4]\n 21547: a5 = u8 [a0 + 0x6]\n 21550: s1 = u8 [a0 + 0x7]\n 21553: a1 = a1 << 0x8\n 21556: a1 = a1 | a4\n 21559: a5 = a5 << 0x10\n 21562: s1 = s1 << 0x18\n 21565: a4 = s1 | a5\n 21568: ra = a4 | a1\n 21571: a1 = u8 [a0 + 0x19]\n 21574: a5 = u8 [a0 + 0x18]\n 21577: s1 = u8 [a0 + 0x1a]\n 21580: a2 = u8 [a0 + 0x1b]\n 21583: a1 = a1 << 0x8\n 21586: a1 = a1 | a5\n 21589: s1 = s1 << 0x10\n 21592: a2 = a2 << 0x18\n 21595: a2 = a2 | s1\n 21598: a5 = a2 | a1\n 21601: a1 = u8 [a0 + 0x9]\n 21604: a2 = u8 [a0 + 0x8]\n 21607: s1 = u8 [a0 + 0xa]\n 21610: a3 = u8 [a0 + 0xb]\n 21613: a1 = a1 << 0x8\n 21616: a1 = a1 | a2\n 21619: s1 = s1 << 0x10\n 21622: a3 = a3 << 0x18\n 21625: a3 = a3 | s1\n 21628: a1 = a1 | a3\n 21631: a2 = u8 [a0 + 0x1d]\n 21634: a3 = u8 [a0 + 0x1c]\n 21637: s1 = u8 [a0 + 0x1e]\n 21640: a4 = u8 [a0 + 0x1f]\n 21643: a2 = a2 << 0x8\n 21646: a2 = a2 | a3\n 21649: s1 = s1 << 0x10\n 21652: a4 = a4 << 0x18\n 21655: a4 = a4 | s1\n 21658: a2 = a2 | a4\n 21661: a3 = u8 [a0 + 0xd]\n 21664: a4 = u8 [a0 + 0xc]\n 21667: s1 = u8 [a0 + 0xe]\n 21670: a0 = u8 [a0 + 0xf]\n 21673: a3 = a3 << 0x8\n 21676: a3 = a3 | a4\n 21679: s1 = s1 << 0x10\n 21682: a0 = a0 << 0x18\n 21685: a0 = a0 | s1\n 21688: a0 = a0 | a3\n 21691: a0 = a0 | a2\n 21694: a0 = a0 << 0x20\n 21697: a1 = a1 | a5\n 21700: a0 = a0 | a1\n 21703: a1 = ra | t2\n 21706: a1 = a1 << 0x20\n 21709: a2 = t1 | t0\n 21712: a1 = a1 | a2\n 21715: a0 = a0 | a1\n 21718: jump @315 if a0 == 0\n      : @292 (gas: 13)\n 21722: a0 = u64 [sp + 0x60]\n 21725: a1 = a0 & 0xffffffffffffffff\n 21728: a0 = u64 [sp + 0x68]\n 21731: a0 = a0 & 0xffffffffffffffff\n 21734: a2 = u64 [sp + 0x70]\n 21737: a3 = u64 [sp]\n 21739: a2 = a2 & a3\n 21742: u64 [sp + 0x70] = a0\n 21745: u64 [sp + 0x60] = a2\n 21748: a0 = a0 | a2\n 21751: u64 [sp + 0x68] = a1\n 21754: a0 = a0 | a1\n 21757: jump @320 if a0 == 0\n      : @293 (gas: 3)\n 21761: a0 = 0x80\n 21765: a1 = 0x20\n 21768: ra = 228, jump @0\n      : @294 [@dyn 114] (gas: 71)\n 21774: a1 = u64 [sp + 0x10]\n 21777: a1 = reverse a1\n 21779: a2 = u64 [sp + 0x8]\n 21782: a2 = reverse a2\n 21784: a3 = u64 [sp + 0xd0]\n 21788: a3 = reverse a3\n 21790: a4 = u64 [sp + 0xd8]\n 21794: a4 = reverse a4\n 21796: u8 [a0 + 0x18] = a4\n 21799: a5 = a4 >> 0x38\n 21802: u8 [a0 + 0x1f] = a5\n 21805: a5 = a4 >> 0x30\n 21808: u8 [a0 + 0x1e] = a5\n 21811: a5 = a4 >> 0x28\n 21814: u8 [a0 + 0x1d] = a5\n 21817: a5 = a4 >> 0x20\n 21820: u8 [a0 + 0x1c] = a5\n 21823: a5 = a4 >> 0x18\n 21826: u8 [a0 + 0x1b] = a5\n 21829: a5 = a4 >> 0x10\n 21832: u8 [a0 + 0x1a] = a5\n 21835: a4 = a4 >> 0x8\n 21838: u8 [a0 + 0x19] = a4\n 21841: u8 [a0 + 0x10] = a3\n 21844: a4 = a3 >> 0x38\n 21847: u8 [a0 + 0x17] = a4\n 21850: a4 = a3 >> 0x30\n 21853: u8 [a0 + 0x16] = a4\n 21856: a4 = a3 >> 0x28\n 21859: u8 [a0 + 0x15] = a4\n 21862: a4 = a3 >> 0x20\n 21865: u8 [a0 + 0x14] = a4\n 21868: a4 = a3 >> 0x18\n 21871: u8 [a0 + 0x13] = a4\n 21874: a4 = a3 >> 0x10\n 21877: u8 [a0 + 0x12] = a4\n 21880: a3 = a3 >> 0x8\n 21883: u8 [a0 + 0x11] = a3\n 21886: u8 [a0 + 0x8] = a2\n 21889: a3 = a2 >> 0x38\n 21892: u8 [a0 + 0xf] = a3\n 21895: a3 = a2 >> 0x30\n 21898: u8 [a0 + 0xe] = a3\n 21901: a3 = a2 >> 0x28\n 21904: u8 [a0 + 0xd] = a3\n 21907: a3 = a2 >> 0x20\n 21910: u8 [a0 + 0xc] = a3\n 21913: a3 = a2 >> 0x18\n 21916: u8 [a0 + 0xb] = a3\n 21919: a3 = a2 >> 0x10\n 21922: u8 [a0 + 0xa] = a3\n 21925: a2 = a2 >> 0x8\n 21928: u8 [a0 + 0x9] = a2\n 21931: u8 [a0] = a1\n 21933: a2 = a1 >> 0x38\n 21936: u8 [a0 + 0x7] = a2\n 21939: a2 = a1 >> 0x30\n 21942: u8 [a0 + 0x6] = a2\n 21945: a2 = a1 >> 0x28\n 21948: u8 [a0 + 0x5] = a2\n 21951: a2 = a1 >> 0x20\n 21954: u8 [a0 + 0x4] = a2\n 21957: a2 = a1 >> 0x18\n 21960: u8 [a0 + 0x3] = a2\n 21963: a2 = a1 >> 0x10\n 21966: u8 [a0 + 0x2] = a2\n 21969: a1 = a1 >> 0x8\n 21972: u8 [a0 + 0x1] = a1\n 21975: a0 = 0xa0\n 21979: a1 = 0x20\n 21982: ra = 230, jump @0\n      : @295 [@dyn 115] (gas: 71)\n 21988: a1 = u64 [sp + 0x18]\n 21991: a1 = reverse a1\n 21993: a2 = u64 [sp + 0x20]\n 21996: a2 = reverse a2\n 21998: a3 = u64 [sp + 0x28]\n 22001: a3 = reverse a3\n 22003: a4 = u64 [sp + 0x30]\n 22006: a4 = reverse a4\n 22008: a5 = a4 >> 0x38\n 22011: u8 [a0 + 0x1f] = a5\n 22014: a5 = a4 >> 0x30\n 22017: u8 [a0 + 0x1e] = a5\n 22020: a5 = a4 >> 0x28\n 22023: u8 [a0 + 0x1d] = a5\n 22026: a5 = a4 >> 0x20\n 22029: u8 [a0 + 0x1c] = a5\n 22032: a5 = a4 >> 0x18\n 22035: u8 [a0 + 0x1b] = a5\n 22038: a5 = a4 >> 0x10\n 22041: u8 [a0 + 0x1a] = a5\n 22044: a5 = a4 >> 0x8\n 22047: u8 [a0 + 0x19] = a5\n 22050: u8 [a0 + 0x18] = a4\n 22053: a4 = a3 >> 0x38\n 22056: u8 [a0 + 0x17] = a4\n 22059: a4 = a3 >> 0x30\n 22062: u8 [a0 + 0x16] = a4\n 22065: a4 = a3 >> 0x28\n 22068: u8 [a0 + 0x15] = a4\n 22071: a4 = a3 >> 0x20\n 22074: u8 [a0 + 0x14] = a4\n 22077: a4 = a3 >> 0x18\n 22080: u8 [a0 + 0x13] = a4\n 22083: a4 = a3 >> 0x10\n 22086: u8 [a0 + 0x12] = a4\n 22089: a4 = a3 >> 0x8\n 22092: u8 [a0 + 0x11] = a4\n 22095: u8 [a0 + 0x10] = a3\n 22098: a3 = a2 >> 0x38\n 22101: u8 [a0 + 0xf] = a3\n 22104: a3 = a2 >> 0x30\n 22107: u8 [a0 + 0xe] = a3\n 22110: a3 = a2 >> 0x28\n 22113: u8 [a0 + 0xd] = a3\n 22116: a3 = a2 >> 0x20\n 22119: u8 [a0 + 0xc] = a3\n 22122: a3 = a2 >> 0x18\n 22125: u8 [a0 + 0xb] = a3\n 22128: a3 = a2 >> 0x10\n 22131: u8 [a0 + 0xa] = a3\n 22134: a3 = a2 >> 0x8\n 22137: u8 [a0 + 0x9] = a3\n 22140: u8 [a0 + 0x8] = a2\n 22143: a2 = a1 >> 0x38\n 22146: u8 [a0 + 0x7] = a2\n 22149: a2 = a1 >> 0x30\n 22152: u8 [a0 + 0x6] = a2\n 22155: a2 = a1 >> 0x28\n 22158: u8 [a0 + 0x5] = a2\n 22161: a2 = a1 >> 0x20\n 22164: u8 [a0 + 0x4] = a2\n 22167: a2 = a1 >> 0x18\n 22170: u8 [a0 + 0x3] = a2\n 22173: a2 = a1 >> 0x10\n 22176: u8 [a0 + 0x2] = a2\n 22179: a2 = a1 >> 0x8\n 22182: u8 [a0 + 0x1] = a2\n 22185: u8 [a0] = a1\n 22187: a0 = 0xc0\n 22191: a1 = 0x20\n 22194: ra = 232, jump @0\n      : @296 [@dyn 116] (gas: 71)\n 22200: a1 = u64 [sp + 0x38]\n 22203: a1 = reverse a1\n 22205: a2 = u64 [sp + 0xb8]\n 22209: a2 = reverse a2\n 22211: a3 = u64 [sp + 0xc0]\n 22215: a3 = reverse a3\n 22217: a4 = u64 [sp + 0xc8]\n 22221: a4 = reverse a4\n 22223: a5 = a4 >> 0x38\n 22226: u8 [a0 + 0x1f] = a5\n 22229: a5 = a4 >> 0x30\n 22232: u8 [a0 + 0x1e] = a5\n 22235: a5 = a4 >> 0x28\n 22238: u8 [a0 + 0x1d] = a5\n 22241: a5 = a4 >> 0x20\n 22244: u8 [a0 + 0x1c] = a5\n 22247: a5 = a4 >> 0x18\n 22250: u8 [a0 + 0x1b] = a5\n 22253: a5 = a4 >> 0x10\n 22256: u8 [a0 + 0x1a] = a5\n 22259: a5 = a4 >> 0x8\n 22262: u8 [a0 + 0x19] = a5\n 22265: u8 [a0 + 0x18] = a4\n 22268: a4 = a3 >> 0x38\n 22271: u8 [a0 + 0x17] = a4\n 22274: a4 = a3 >> 0x30\n 22277: u8 [a0 + 0x16] = a4\n 22280: a4 = a3 >> 0x28\n 22283: u8 [a0 + 0x15] = a4\n 22286: a4 = a3 >> 0x20\n 22289: u8 [a0 + 0x14] = a4\n 22292: a4 = a3 >> 0x18\n 22295: u8 [a0 + 0x13] = a4\n 22298: a4 = a3 >> 0x10\n 22301: u8 [a0 + 0x12] = a4\n 22304: a4 = a3 >> 0x8\n 22307: u8 [a0 + 0x11] = a4\n 22310: u8 [a0 + 0x10] = a3\n 22313: a3 = a2 >> 0x38\n 22316: u8 [a0 + 0xf] = a3\n 22319: a3 = a2 >> 0x30\n 22322: u8 [a0 + 0xe] = a3\n 22325: a3 = a2 >> 0x28\n 22328: u8 [a0 + 0xd] = a3\n 22331: a3 = a2 >> 0x20\n 22334: u8 [a0 + 0xc] = a3\n 22337: a3 = a2 >> 0x18\n 22340: u8 [a0 + 0xb] = a3\n 22343: a3 = a2 >> 0x10\n 22346: u8 [a0 + 0xa] = a3\n 22349: a3 = a2 >> 0x8\n 22352: u8 [a0 + 0x9] = a3\n 22355: u8 [a0 + 0x8] = a2\n 22358: a2 = a1 >> 0x38\n 22361: u8 [a0 + 0x7] = a2\n 22364: a2 = a1 >> 0x30\n 22367: u8 [a0 + 0x6] = a2\n 22370: a2 = a1 >> 0x28\n 22373: u8 [a0 + 0x5] = a2\n 22376: a2 = a1 >> 0x20\n 22379: u8 [a0 + 0x4] = a2\n 22382: a2 = a1 >> 0x18\n 22385: u8 [a0 + 0x3] = a2\n 22388: a2 = a1 >> 0x10\n 22391: u8 [a0 + 0x2] = a2\n 22394: a2 = a1 >> 0x8\n 22397: u8 [a0 + 0x1] = a2\n 22400: u8 [a0] = a1\n 22402: a0 = 0xe0\n 22406: a1 = 0x20\n 22409: ra = 234, jump @0\n      : @297 [@dyn 117] (gas: 83)\n 22415: a1 = u64 [sp + 0x90]\n 22419: a1 = reverse a1\n 22421: a2 = u64 [sp + 0x98]\n 22425: a2 = reverse a2\n 22427: a3 = u64 [sp + 0xa0]\n 22431: a3 = reverse a3\n 22433: a4 = u64 [sp + 0xa8]\n 22437: a4 = reverse a4\n 22439: a5 = a4 >> 0x38\n 22442: u8 [a0 + 0x1f] = a5\n 22445: a5 = a4 >> 0x30\n 22448: u8 [a0 + 0x1e] = a5\n 22451: a5 = a4 >> 0x28\n 22454: u8 [a0 + 0x1d] = a5\n 22457: a5 = a4 >> 0x20\n 22460: u8 [a0 + 0x1c] = a5\n 22463: a5 = a4 >> 0x18\n 22466: u8 [a0 + 0x1b] = a5\n 22469: a5 = a4 >> 0x10\n 22472: u8 [a0 + 0x1a] = a5\n 22475: a5 = a4 >> 0x8\n 22478: u8 [a0 + 0x19] = a5\n 22481: u8 [a0 + 0x18] = a4\n 22484: a4 = a3 >> 0x38\n 22487: u8 [a0 + 0x17] = a4\n 22490: a4 = a3 >> 0x30\n 22493: u8 [a0 + 0x16] = a4\n 22496: a4 = a3 >> 0x28\n 22499: u8 [a0 + 0x15] = a4\n 22502: a4 = a3 >> 0x20\n 22505: u8 [a0 + 0x14] = a4\n 22508: a4 = a3 >> 0x18\n 22511: u8 [a0 + 0x13] = a4\n 22514: a4 = a3 >> 0x10\n 22517: u8 [a0 + 0x12] = a4\n 22520: a4 = a3 >> 0x8\n 22523: u8 [a0 + 0x11] = a4\n 22526: u8 [a0 + 0x10] = a3\n 22529: a3 = a2 >> 0x38\n 22532: u8 [a0 + 0xf] = a3\n 22535: a3 = a2 >> 0x30\n 22538: u8 [a0 + 0xe] = a3\n 22541: a3 = a2 >> 0x28\n 22544: u8 [a0 + 0xd] = a3\n 22547: a3 = a2 >> 0x20\n 22550: u8 [a0 + 0xc] = a3\n 22553: a3 = a2 >> 0x18\n 22556: u8 [a0 + 0xb] = a3\n 22559: a3 = a2 >> 0x10\n 22562: u8 [a0 + 0xa] = a3\n 22565: a3 = a2 >> 0x8\n 22568: u8 [a0 + 0x9] = a3\n 22571: u8 [a0 + 0x8] = a2\n 22574: a2 = a1 >> 0x38\n 22577: u8 [a0 + 0x7] = a2\n 22580: a2 = a1 >> 0x30\n 22583: u8 [a0 + 0x6] = a2\n 22586: a2 = a1 >> 0x28\n 22589: u8 [a0 + 0x5] = a2\n 22592: a2 = a1 >> 0x20\n 22595: u8 [a0 + 0x4] = a2\n 22598: a2 = a1 >> 0x18\n 22601: u8 [a0 + 0x3] = a2\n 22604: a2 = a1 >> 0x10\n 22607: u8 [a0 + 0x2] = a2\n 22610: a2 = a1 >> 0x8\n 22613: u8 [a0 + 0x1] = a2\n 22616: u8 [a0] = a1\n 22618: a0 = u64 [sp + 0x78]\n 22621: u64 [sp + 0x278] = a0\n 22625: a0 = u64 [sp + 0x80]\n 22629: u64 [sp + 0x270] = a0\n 22633: a0 = u64 [sp + 0x88]\n 22637: u64 [sp + 0x268] = a0\n 22641: a0 = u64 [sp + 0xb0]\n 22645: u64 [sp + 0x260] = a0\n 22649: u64 [sp + 664] = 0\n 22653: u64 [sp + 656] = 0\n 22657: u64 [sp + 648] = 0\n 22661: a0 = sp + 0x280\n 22665: a1 = sp + 0x260\n 22669: u64 [sp + 640] = 0x1\n 22674: ra = 236, jump @246\n      : @298 [@dyn 118] (gas: 52)\n 22680: u64 [sp + 728] = 0\n 22684: u64 [sp + 720] = 0\n 22688: u64 [sp + 712] = 0\n 22692: s1 = 0x2\n 22695: u64 [sp + 0x2c0] = s1\n 22699: u64 [sp + 760] = 0\n 22703: u64 [sp + 752] = 0\n 22707: u64 [sp + 744] = 0\n 22711: u64 [sp + 736] = 0\n 22715: u32 [sp + 672] = 0x20\n 22720: i32 a1 = sp + 0x2c0\n 22724: i32 a3 = sp + 0x2e0\n 22728: i32 a4 = sp + 0x2a0\n 22732: a2 = 0xffffffffffffffff\n 22735: a0 = 0\n 22737: ecalli 8 // 'get_storage'\n 22739: a0 = u32 [sp + 0x2f4]\n 22743: a0 = a0 << 0x20\n 22746: a1 = u64 [sp + 0x2f8]\n 22750: a2 = u64 [sp + 0x60]\n 22753: a0 = a0 | a2\n 22756: u64 [sp + 728] = 0\n 22760: u64 [sp + 720] = 0\n 22764: u64 [sp + 712] = 0\n 22768: u64 [sp + 0x2c0] = s1\n 22772: u64 [sp + 0x2f8] = a1\n 22776: u64 [sp + 0x2f0] = a0\n 22780: a0 = u64 [sp + 0x68]\n 22783: u64 [sp + 0x2e8] = a0\n 22787: a0 = u64 [sp + 0x70]\n 22790: u64 [sp + 0x2e0] = a0\n 22794: i32 a1 = sp + 0x2c0\n 22798: i32 a3 = sp + 0x2e0\n 22802: a2 = 0xffffffffffffffff\n 22805: a4 = 0x20\n 22808: a0 = 0\n 22810: ecalli 16 // 'set_storage'\n 22812: a0 = u64 [sp + 0x40]\n 22815: u64 [sp + 0x238] = a0\n 22819: a0 = u64 [sp + 0x48]\n 22822: u64 [sp + 0x230] = a0\n 22826: a0 = u64 [sp + 0x50]\n 22829: u64 [sp + 0x228] = a0\n 22833: a0 = u64 [sp + 0x58]\n 22836: u64 [sp + 0x220] = a0\n 22840: u64 [sp + 600] = 0\n 22844: u64 [sp + 592] = 0\n 22848: u64 [sp + 584] = 0\n 22852: a0 = sp + 0x240\n 22856: a1 = sp + 0x220\n 22860: u64 [sp + 576] = 0\n 22864: ra = 238, jump @246\n      : @299 [@dyn 119] (gas: 6)\n 22870: sp = s0 + 0xfffffffffffffce0\n 22874: ra = u64 [sp + 0x318]\n 22878: s0 = u64 [sp + 0x310]\n 22882: s1 = u64 [sp + 0x308]\n 22886: sp = sp + 0x320\n 22890: ret\n      : @300 (gas: 3)\n 22892: a0 = 0x40\n 22895: a1 = 0x20\n 22898: ra = 240, jump @0\n      : @301 [@dyn 120] (gas: 103)\n 22904: a1 = u8 [a0 + 0x11]\n 22907: a2 = u8 [a0 + 0x10]\n 22910: a3 = u8 [a0 + 0x12]\n 22913: a4 = u8 [a0 + 0x13]\n 22916: a1 = a1 << 0x8\n 22919: a1 = a1 | a2\n 22922: a3 = a3 << 0x10\n 22925: a4 = a4 << 0x18\n 22928: a3 = a3 | a4\n 22931: a1 = a1 | a3\n 22934: a2 = u8 [a0 + 0x15]\n 22937: a3 = u8 [a0 + 0x14]\n 22940: a4 = u8 [a0 + 0x16]\n 22943: a5 = u8 [a0 + 0x17]\n 22946: a2 = a2 << 0x8\n 22949: a2 = a2 | a3\n 22952: a4 = a4 << 0x10\n 22955: a5 = a5 << 0x18\n 22958: a4 = a4 | a5\n 22961: a2 = a2 | a4\n 22964: a2 = a2 << 0x20\n 22967: t0 = a2 | a1\n 22970: a2 = u8 [a0 + 0x1]\n 22973: a3 = u8 [a0]\n 22975: a4 = u8 [a0 + 0x2]\n 22978: a5 = u8 [a0 + 0x3]\n 22981: a2 = a2 << 0x8\n 22984: a2 = a2 | a3\n 22987: a4 = a4 << 0x10\n 22990: a5 = a5 << 0x18\n 22993: a4 = a4 | a5\n 22996: a2 = a2 | a4\n 22999: a3 = u8 [a0 + 0x5]\n 23002: a4 = u8 [a0 + 0x4]\n 23005: a5 = u8 [a0 + 0x6]\n 23008: s1 = u8 [a0 + 0x7]\n 23011: a3 = a3 << 0x8\n 23014: a3 = a3 | a4\n 23017: a5 = a5 << 0x10\n 23020: s1 = s1 << 0x18\n 23023: a5 = a5 | s1\n 23026: a3 = a3 | a5\n 23029: a3 = a3 << 0x20\n 23032: a2 = a2 | a3\n 23035: a3 = u8 [a0 + 0x19]\n 23038: a4 = u8 [a0 + 0x18]\n 23041: a5 = u8 [a0 + 0x1a]\n 23044: s1 = u8 [a0 + 0x1b]\n 23047: a3 = a3 << 0x8\n 23050: a3 = a3 | a4\n 23053: a5 = a5 << 0x10\n 23056: s1 = s1 << 0x18\n 23059: a5 = a5 | s1\n 23062: a3 = a3 | a5\n 23065: a4 = u8 [a0 + 0x1d]\n 23068: a5 = u8 [a0 + 0x1c]\n 23071: s1 = u8 [a0 + 0x1e]\n 23074: a1 = u8 [a0 + 0x1f]\n 23077: a4 = a4 << 0x8\n 23080: a4 = a4 | a5\n 23083: s1 = s1 << 0x10\n 23086: a1 = a1 << 0x18\n 23089: a1 = a1 | s1\n 23092: a1 = a1 | a4\n 23095: a1 = a1 << 0x20\n 23098: a3 = a3 | a1\n 23101: a1 = u8 [a0 + 0x9]\n 23104: a4 = u8 [a0 + 0x8]\n 23107: a5 = u8 [a0 + 0xa]\n 23110: s1 = u8 [a0 + 0xb]\n 23113: a1 = a1 << 0x8\n 23116: a1 = a1 | a4\n 23119: a5 = a5 << 0x10\n 23122: s1 = s1 << 0x18\n 23125: a5 = a5 | s1\n 23128: a1 = a1 | a5\n 23131: a4 = u8 [a0 + 0xd]\n 23134: a5 = u8 [a0 + 0xc]\n 23137: s1 = u8 [a0 + 0xe]\n 23140: a0 = u8 [a0 + 0xf]\n 23143: a4 = a4 << 0x8\n 23146: a4 = a4 | a5\n 23149: s1 = s1 << 0x10\n 23152: a0 = a0 << 0x18\n 23155: a0 = a0 | s1\n 23158: a0 = a0 | a4\n 23161: a0 = a0 << 0x20\n 23164: a0 = a0 | a1\n 23167: s1 = reverse a0\n 23169: a1 = reverse a3\n 23171: a2 = reverse a2\n 23173: a0 = reverse t0\n 23175: u64 [sp + 0xd8] = a0\n 23179: u64 [sp + 0xd0] = a2\n 23183: a0 = a0 | a2\n 23186: a2 = a1\n 23188: a1 = a1 | s1\n 23191: a1 = a1 | a0\n 23194: a1 = a1 >> 0x20\n 23197: a0 = a0 | s1\n 23200: a0 = a0 << 0x20\n 23203: a0 = a0 | a1\n 23206: jump @326 if a0 != 0\n      : @302 (gas: 5)\n 23210: u64 [sp + 0xc8] = a2\n 23214: i32 a0 = a2 + 0\n 23216: a1 = 0x20\n 23219: u64 [sp + 0xc0] = a0\n 23223: ra = 242, jump @0\n      : @303 [@dyn 121] (gas: 50)\n 23229: u8 [a0 + 31] = 0\n 23232: u8 [a0 + 30] = 0\n 23235: u8 [a0 + 29] = 0\n 23238: u8 [a0 + 28] = 0\n 23241: u8 [a0 + 27] = 0\n 23244: u8 [a0 + 26] = 0\n 23247: u8 [a0 + 25] = 0\n 23250: u8 [a0 + 24] = 0\n 23253: u8 [a0 + 23] = 0\n 23256: u8 [a0 + 22] = 0\n 23259: u8 [a0 + 21] = 0\n 23262: u8 [a0 + 20] = 0\n 23265: u8 [a0 + 19] = 0\n 23268: u8 [a0 + 18] = 0\n 23271: u8 [a0 + 17] = 0\n 23274: u8 [a0 + 16] = 0\n 23277: u8 [a0 + 15] = 0\n 23280: u8 [a0 + 14] = 0\n 23283: u8 [a0 + 13] = 0\n 23286: u8 [a0 + 12] = 0\n 23289: u8 [a0 + 11] = 0\n 23292: u8 [a0 + 10] = 0\n 23295: u8 [a0 + 9] = 0\n 23298: u8 [a0 + 8] = 0\n 23301: u8 [a0 + 7] = 0\n 23304: u8 [a0 + 6] = 0\n 23307: u8 [a0 + 5] = 0\n 23310: u8 [a0 + 4] = 0\n 23313: u8 [a0 + 3] = 0xa0\n 23318: u8 [a0 + 2] = 0x79\n 23322: u8 [a0 + 1] = 0xc3\n 23327: u8 [a0 + 0] = 0x8\n 23330: a1 = u64 [sp + 0xc8]\n 23334: a0 = a1 + 0x4\n 23337: a1 = a0 <u a1\n 23340: a3 = u64 [sp + 0xd8]\n 23344: a2 = a3 + a1\n 23347: a3 = a2 <u a3\n 23350: a3 = a1 if a1 == 0\n 23353: a3 = a3 + s1\n 23356: a1 = a3 <u s1\n 23359: a4 = u64 [sp + 0xd0]\n 23363: a4 = a4 + a1\n 23366: u64 [sp + 0xe8] = a2\n 23370: u64 [sp + 0xe0] = a0\n 23374: u64 [sp + 0xf0] = a3\n 23378: a0 = sp + 0x100\n 23382: a1 = sp + 0xe0\n 23386: u64 [sp + 0xf8] = a4\n 23390: ra = 244, jump @195\n      : @304 [@dyn 122] (gas: 5)\n 23396: a0 = u64 [sp + 0x108]\n 23400: t0 = u64 [sp + 0x118]\n 23404: t1 = u64 [sp + 0x100]\n 23408: a3 = u64 [sp + 0x110]\n 23412: jump @325\n      : @305 (gas: 3)\n 23415: a0 = 0x40\n 23418: a1 = 0x20\n 23421: ra = 246, jump @0\n      : @306 [@dyn 123] (gas: 103)\n 23427: a1 = u8 [a0 + 0x11]\n 23430: a2 = u8 [a0 + 0x10]\n 23433: a3 = u8 [a0 + 0x12]\n 23436: a4 = u8 [a0 + 0x13]\n 23439: a1 = a1 << 0x8\n 23442: a1 = a1 | a2\n 23445: a3 = a3 << 0x10\n 23448: a4 = a4 << 0x18\n 23451: a3 = a3 | a4\n 23454: a1 = a1 | a3\n 23457: a2 = u8 [a0 + 0x15]\n 23460: a3 = u8 [a0 + 0x14]\n 23463: a4 = u8 [a0 + 0x16]\n 23466: a5 = u8 [a0 + 0x17]\n 23469: a2 = a2 << 0x8\n 23472: a2 = a2 | a3\n 23475: a4 = a4 << 0x10\n 23478: a5 = a5 << 0x18\n 23481: a4 = a4 | a5\n 23484: a2 = a2 | a4\n 23487: a2 = a2 << 0x20\n 23490: t0 = a2 | a1\n 23493: a2 = u8 [a0 + 0x1]\n 23496: a3 = u8 [a0]\n 23498: a4 = u8 [a0 + 0x2]\n 23501: a5 = u8 [a0 + 0x3]\n 23504: a2 = a2 << 0x8\n 23507: a2 = a2 | a3\n 23510: a4 = a4 << 0x10\n 23513: a5 = a5 << 0x18\n 23516: a4 = a4 | a5\n 23519: a2 = a2 | a4\n 23522: a3 = u8 [a0 + 0x5]\n 23525: a4 = u8 [a0 + 0x4]\n 23528: a5 = u8 [a0 + 0x6]\n 23531: s1 = u8 [a0 + 0x7]\n 23534: a3 = a3 << 0x8\n 23537: a3 = a3 | a4\n 23540: a5 = a5 << 0x10\n 23543: s1 = s1 << 0x18\n 23546: a5 = a5 | s1\n 23549: a3 = a3 | a5\n 23552: a3 = a3 << 0x20\n 23555: a2 = a2 | a3\n 23558: a3 = u8 [a0 + 0x19]\n 23561: a4 = u8 [a0 + 0x18]\n 23564: a5 = u8 [a0 + 0x1a]\n 23567: s1 = u8 [a0 + 0x1b]\n 23570: a3 = a3 << 0x8\n 23573: a3 = a3 | a4\n 23576: a5 = a5 << 0x10\n 23579: s1 = s1 << 0x18\n 23582: a5 = a5 | s1\n 23585: a3 = a3 | a5\n 23588: a4 = u8 [a0 + 0x1d]\n 23591: a5 = u8 [a0 + 0x1c]\n 23594: s1 = u8 [a0 + 0x1e]\n 23597: a1 = u8 [a0 + 0x1f]\n 23600: a4 = a4 << 0x8\n 23603: a4 = a4 | a5\n 23606: s1 = s1 << 0x10\n 23609: a1 = a1 << 0x18\n 23612: a1 = a1 | s1\n 23615: a1 = a1 | a4\n 23618: a1 = a1 << 0x20\n 23621: a3 = a3 | a1\n 23624: a1 = u8 [a0 + 0x9]\n 23627: a4 = u8 [a0 + 0x8]\n 23630: a5 = u8 [a0 + 0xa]\n 23633: s1 = u8 [a0 + 0xb]\n 23636: a1 = a1 << 0x8\n 23639: a1 = a1 | a4\n 23642: a5 = a5 << 0x10\n 23645: s1 = s1 << 0x18\n 23648: a5 = a5 | s1\n 23651: a1 = a1 | a5\n 23654: a4 = u8 [a0 + 0xd]\n 23657: a5 = u8 [a0 + 0xc]\n 23660: s1 = u8 [a0 + 0xe]\n 23663: a0 = u8 [a0 + 0xf]\n 23666: a4 = a4 << 0x8\n 23669: a4 = a4 | a5\n 23672: s1 = s1 << 0x10\n 23675: a0 = a0 << 0x18\n 23678: a0 = a0 | s1\n 23681: a0 = a0 | a4\n 23684: a0 = a0 << 0x20\n 23687: a0 = a0 | a1\n 23690: s1 = reverse a0\n 23692: a1 = reverse a3\n 23694: a2 = reverse a2\n 23696: a0 = reverse t0\n 23698: u64 [sp + 0xd8] = a0\n 23702: u64 [sp + 0xd0] = a2\n 23706: a0 = a0 | a2\n 23709: a2 = a1\n 23711: a1 = a1 | s1\n 23714: a1 = a1 | a0\n 23717: a1 = a1 >> 0x20\n 23720: a0 = a0 | s1\n 23723: a0 = a0 << 0x20\n 23726: a0 = a0 | a1\n 23729: jump @326 if a0 != 0\n      : @307 (gas: 5)\n 23733: u64 [sp + 0xc8] = a2\n 23737: i32 a0 = a2 + 0\n 23739: a1 = 0x20\n 23742: u64 [sp + 0xc0] = a0\n 23746: ra = 248, jump @0\n      : @308 [@dyn 124] (gas: 50)\n 23752: u8 [a0 + 31] = 0\n 23755: u8 [a0 + 30] = 0\n 23758: u8 [a0 + 29] = 0\n 23761: u8 [a0 + 28] = 0\n 23764: u8 [a0 + 27] = 0\n 23767: u8 [a0 + 26] = 0\n 23770: u8 [a0 + 25] = 0\n 23773: u8 [a0 + 24] = 0\n 23776: u8 [a0 + 23] = 0\n 23779: u8 [a0 + 22] = 0\n 23782: u8 [a0 + 21] = 0\n 23785: u8 [a0 + 20] = 0\n 23788: u8 [a0 + 19] = 0\n 23791: u8 [a0 + 18] = 0\n 23794: u8 [a0 + 17] = 0\n 23797: u8 [a0 + 16] = 0\n 23800: u8 [a0 + 15] = 0\n 23803: u8 [a0 + 14] = 0\n 23806: u8 [a0 + 13] = 0\n 23809: u8 [a0 + 12] = 0\n 23812: u8 [a0 + 11] = 0\n 23815: u8 [a0 + 10] = 0\n 23818: u8 [a0 + 9] = 0\n 23821: u8 [a0 + 8] = 0\n 23824: u8 [a0 + 7] = 0\n 23827: u8 [a0 + 6] = 0\n 23830: u8 [a0 + 5] = 0\n 23833: u8 [a0 + 4] = 0\n 23836: u8 [a0 + 3] = 0xa0\n 23841: u8 [a0 + 2] = 0x79\n 23845: u8 [a0 + 1] = 0xc3\n 23850: u8 [a0 + 0] = 0x8\n 23853: a1 = u64 [sp + 0xc8]\n 23857: a0 = a1 + 0x4\n 23860: a1 = a0 <u a1\n 23863: a3 = u64 [sp + 0xd8]\n 23867: a2 = a3 + a1\n 23870: a3 = a2 <u a3\n 23873: a3 = a1 if a1 == 0\n 23876: a3 = a3 + s1\n 23879: a1 = a3 <u s1\n 23882: a4 = u64 [sp + 0xd0]\n 23886: a4 = a4 + a1\n 23889: u64 [sp + 0x128] = a2\n 23893: u64 [sp + 0x120] = a0\n 23897: u64 [sp + 0x130] = a3\n 23901: a0 = sp + 0x140\n 23905: a1 = sp + 0x120\n 23909: u64 [sp + 0x138] = a4\n 23913: ra = 250, jump @203\n      : @309 [@dyn 125] (gas: 5)\n 23919: a0 = u64 [sp + 0x148]\n 23923: t0 = u64 [sp + 0x158]\n 23927: t1 = u64 [sp + 0x140]\n 23931: a3 = u64 [sp + 0x150]\n 23935: jump @325\n      : @310 (gas: 3)\n 23938: a0 = 0x40\n 23941: a1 = 0x20\n 23944: ra = 252, jump @0\n      : @311 [@dyn 126] (gas: 103)\n 23950: a1 = u8 [a0 + 0x11]\n 23953: a2 = u8 [a0 + 0x10]\n 23956: a3 = u8 [a0 + 0x12]\n 23959: a4 = u8 [a0 + 0x13]\n 23962: a1 = a1 << 0x8\n 23965: a1 = a1 | a2\n 23968: a3 = a3 << 0x10\n 23971: a4 = a4 << 0x18\n 23974: a3 = a3 | a4\n 23977: a1 = a1 | a3\n 23980: a2 = u8 [a0 + 0x15]\n 23983: a3 = u8 [a0 + 0x14]\n 23986: a4 = u8 [a0 + 0x16]\n 23989: a5 = u8 [a0 + 0x17]\n 23992: a2 = a2 << 0x8\n 23995: a2 = a2 | a3\n 23998: a4 = a4 << 0x10\n 24001: a5 = a5 << 0x18\n 24004: a4 = a4 | a5\n 24007: a2 = a2 | a4\n 24010: a2 = a2 << 0x20\n 24013: t0 = a2 | a1\n 24016: a2 = u8 [a0 + 0x1]\n 24019: a3 = u8 [a0]\n 24021: a4 = u8 [a0 + 0x2]\n 24024: a5 = u8 [a0 + 0x3]\n 24027: a2 = a2 << 0x8\n 24030: a2 = a2 | a3\n 24033: a4 = a4 << 0x10\n 24036: a5 = a5 << 0x18\n 24039: a4 = a4 | a5\n 24042: a2 = a2 | a4\n 24045: a3 = u8 [a0 + 0x5]\n 24048: a4 = u8 [a0 + 0x4]\n 24051: a5 = u8 [a0 + 0x6]\n 24054: s1 = u8 [a0 + 0x7]\n 24057: a3 = a3 << 0x8\n 24060: a3 = a3 | a4\n 24063: a5 = a5 << 0x10\n 24066: s1 = s1 << 0x18\n 24069: a5 = a5 | s1\n 24072: a3 = a3 | a5\n 24075: a3 = a3 << 0x20\n 24078: a2 = a2 | a3\n 24081: a3 = u8 [a0 + 0x19]\n 24084: a4 = u8 [a0 + 0x18]\n 24087: a5 = u8 [a0 + 0x1a]\n 24090: s1 = u8 [a0 + 0x1b]\n 24093: a3 = a3 << 0x8\n 24096: a3 = a3 | a4\n 24099: a5 = a5 << 0x10\n 24102: s1 = s1 << 0x18\n 24105: a5 = a5 | s1\n 24108: a3 = a3 | a5\n 24111: a4 = u8 [a0 + 0x1d]\n 24114: a5 = u8 [a0 + 0x1c]\n 24117: s1 = u8 [a0 + 0x1e]\n 24120: a1 = u8 [a0 + 0x1f]\n 24123: a4 = a4 << 0x8\n 24126: a4 = a4 | a5\n 24129: s1 = s1 << 0x10\n 24132: a1 = a1 << 0x18\n 24135: a1 = a1 | s1\n 24138: a1 = a1 | a4\n 24141: a1 = a1 << 0x20\n 24144: a3 = a3 | a1\n 24147: a1 = u8 [a0 + 0x9]\n 24150: a4 = u8 [a0 + 0x8]\n 24153: a5 = u8 [a0 + 0xa]\n 24156: s1 = u8 [a0 + 0xb]\n 24159: a1 = a1 << 0x8\n 24162: a1 = a1 | a4\n 24165: a5 = a5 << 0x10\n 24168: s1 = s1 << 0x18\n 24171: a5 = a5 | s1\n 24174: a1 = a1 | a5\n 24177: a4 = u8 [a0 + 0xd]\n 24180: a5 = u8 [a0 + 0xc]\n 24183: s1 = u8 [a0 + 0xe]\n 24186: a0 = u8 [a0 + 0xf]\n 24189: a4 = a4 << 0x8\n 24192: a4 = a4 | a5\n 24195: s1 = s1 << 0x10\n 24198: a0 = a0 << 0x18\n 24201: a0 = a0 | s1\n 24204: a0 = a0 | a4\n 24207: a0 = a0 << 0x20\n 24210: a0 = a0 | a1\n 24213: s1 = reverse a0\n 24215: a1 = reverse a3\n 24217: a2 = reverse a2\n 24219: a0 = reverse t0\n 24221: u64 [sp + 0xd8] = a0\n 24225: u64 [sp + 0xd0] = a2\n 24229: a0 = a0 | a2\n 24232: a2 = a1\n 24234: a1 = a1 | s1\n 24237: a1 = a1 | a0\n 24240: a1 = a1 >> 0x20\n 24243: a0 = a0 | s1\n 24246: a0 = a0 << 0x20\n 24249: a0 = a0 | a1\n 24252: jump @326 if a0 != 0\n      : @312 (gas: 5)\n 24256: u64 [sp + 0xc8] = a2\n 24260: i32 a0 = a2 + 0\n 24262: a1 = 0x20\n 24265: u64 [sp + 0xc0] = a0\n 24269: ra = 254, jump @0\n      : @313 [@dyn 127] (gas: 50)\n 24275: u8 [a0 + 31] = 0\n 24278: u8 [a0 + 30] = 0\n 24281: u8 [a0 + 29] = 0\n 24284: u8 [a0 + 28] = 0\n 24287: u8 [a0 + 27] = 0\n 24290: u8 [a0 + 26] = 0\n 24293: u8 [a0 + 25] = 0\n 24296: u8 [a0 + 24] = 0\n 24299: u8 [a0 + 23] = 0\n 24302: u8 [a0 + 22] = 0\n 24305: u8 [a0 + 21] = 0\n 24308: u8 [a0 + 20] = 0\n 24311: u8 [a0 + 19] = 0\n 24314: u8 [a0 + 18] = 0\n 24317: u8 [a0 + 17] = 0\n 24320: u8 [a0 + 16] = 0\n 24323: u8 [a0 + 15] = 0\n 24326: u8 [a0 + 14] = 0\n 24329: u8 [a0 + 13] = 0\n 24332: u8 [a0 + 12] = 0\n 24335: u8 [a0 + 11] = 0\n 24338: u8 [a0 + 10] = 0\n 24341: u8 [a0 + 9] = 0\n 24344: u8 [a0 + 8] = 0\n 24347: u8 [a0 + 7] = 0\n 24350: u8 [a0 + 6] = 0\n 24353: u8 [a0 + 5] = 0\n 24356: u8 [a0 + 4] = 0\n 24359: u8 [a0 + 3] = 0xa0\n 24364: u8 [a0 + 2] = 0x79\n 24368: u8 [a0 + 1] = 0xc3\n 24373: u8 [a0 + 0] = 0x8\n 24376: a1 = u64 [sp + 0xc8]\n 24380: a0 = a1 + 0x4\n 24383: a1 = a0 <u a1\n 24386: a3 = u64 [sp + 0xd8]\n 24390: a2 = a3 + a1\n 24393: a3 = a2 <u a3\n 24396: a3 = a1 if a1 == 0\n 24399: a3 = a3 + s1\n 24402: a1 = a3 <u s1\n 24405: a4 = u64 [sp + 0xd0]\n 24409: a4 = a4 + a1\n 24412: u64 [sp + 0x168] = a2\n 24416: u64 [sp + 0x160] = a0\n 24420: u64 [sp + 0x170] = a3\n 24424: a0 = sp + 0x180\n 24428: a1 = sp + 0x160\n 24432: u64 [sp + 0x178] = a4\n 24436: ra = 256, jump @211\n      : @314 [@dyn 128] (gas: 5)\n 24442: a0 = u64 [sp + 0x188]\n 24446: t0 = u64 [sp + 0x198]\n 24450: t1 = u64 [sp + 0x180]\n 24454: a3 = u64 [sp + 0x190]\n 24458: jump @325\n      : @315 (gas: 3)\n 24461: a0 = 0x40\n 24464: a1 = 0x20\n 24467: ra = 258, jump @0\n      : @316 [@dyn 129] (gas: 103)\n 24473: a1 = u8 [a0 + 0x11]\n 24476: a2 = u8 [a0 + 0x10]\n 24479: a3 = u8 [a0 + 0x12]\n 24482: a4 = u8 [a0 + 0x13]\n 24485: a1 = a1 << 0x8\n 24488: a1 = a1 | a2\n 24491: a3 = a3 << 0x10\n 24494: a4 = a4 << 0x18\n 24497: a3 = a3 | a4\n 24500: a1 = a1 | a3\n 24503: a2 = u8 [a0 + 0x15]\n 24506: a3 = u8 [a0 + 0x14]\n 24509: a4 = u8 [a0 + 0x16]\n 24512: a5 = u8 [a0 + 0x17]\n 24515: a2 = a2 << 0x8\n 24518: a2 = a2 | a3\n 24521: a4 = a4 << 0x10\n 24524: a5 = a5 << 0x18\n 24527: a4 = a4 | a5\n 24530: a2 = a2 | a4\n 24533: a2 = a2 << 0x20\n 24536: t0 = a2 | a1\n 24539: a2 = u8 [a0 + 0x1]\n 24542: a3 = u8 [a0]\n 24544: a4 = u8 [a0 + 0x2]\n 24547: a5 = u8 [a0 + 0x3]\n 24550: a2 = a2 << 0x8\n 24553: a2 = a2 | a3\n 24556: a4 = a4 << 0x10\n 24559: a5 = a5 << 0x18\n 24562: a4 = a4 | a5\n 24565: a2 = a2 | a4\n 24568: a3 = u8 [a0 + 0x5]\n 24571: a4 = u8 [a0 + 0x4]\n 24574: a5 = u8 [a0 + 0x6]\n 24577: s1 = u8 [a0 + 0x7]\n 24580: a3 = a3 << 0x8\n 24583: a3 = a3 | a4\n 24586: a5 = a5 << 0x10\n 24589: s1 = s1 << 0x18\n 24592: a5 = a5 | s1\n 24595: a3 = a3 | a5\n 24598: a3 = a3 << 0x20\n 24601: a2 = a2 | a3\n 24604: a3 = u8 [a0 + 0x19]\n 24607: a4 = u8 [a0 + 0x18]\n 24610: a5 = u8 [a0 + 0x1a]\n 24613: s1 = u8 [a0 + 0x1b]\n 24616: a3 = a3 << 0x8\n 24619: a3 = a3 | a4\n 24622: a5 = a5 << 0x10\n 24625: s1 = s1 << 0x18\n 24628: a5 = a5 | s1\n 24631: a3 = a3 | a5\n 24634: a4 = u8 [a0 + 0x1d]\n 24637: a5 = u8 [a0 + 0x1c]\n 24640: s1 = u8 [a0 + 0x1e]\n 24643: a1 = u8 [a0 + 0x1f]\n 24646: a4 = a4 << 0x8\n 24649: a4 = a4 | a5\n 24652: s1 = s1 << 0x10\n 24655: a1 = a1 << 0x18\n 24658: a1 = a1 | s1\n 24661: a1 = a1 | a4\n 24664: a1 = a1 << 0x20\n 24667: a3 = a3 | a1\n 24670: a1 = u8 [a0 + 0x9]\n 24673: a4 = u8 [a0 + 0x8]\n 24676: a5 = u8 [a0 + 0xa]\n 24679: s1 = u8 [a0 + 0xb]\n 24682: a1 = a1 << 0x8\n 24685: a1 = a1 | a4\n 24688: a5 = a5 << 0x10\n 24691: s1 = s1 << 0x18\n 24694: a5 = a5 | s1\n 24697: a1 = a1 | a5\n 24700: a4 = u8 [a0 + 0xd]\n 24703: a5 = u8 [a0 + 0xc]\n 24706: s1 = u8 [a0 + 0xe]\n 24709: a0 = u8 [a0 + 0xf]\n 24712: a4 = a4 << 0x8\n 24715: a4 = a4 | a5\n 24718: s1 = s1 << 0x10\n 24721: a0 = a0 << 0x18\n 24724: a0 = a0 | s1\n 24727: a0 = a0 | a4\n 24730: a0 = a0 << 0x20\n 24733: a0 = a0 | a1\n 24736: s1 = reverse a0\n 24738: a1 = reverse a3\n 24740: a2 = reverse a2\n 24742: a0 = reverse t0\n 24744: u64 [sp + 0xd8] = a0\n 24748: u64 [sp + 0xd0] = a2\n 24752: a0 = a0 | a2\n 24755: a2 = a1\n 24757: a1 = a1 | s1\n 24760: a1 = a1 | a0\n 24763: a1 = a1 >> 0x20\n 24766: a0 = a0 | s1\n 24769: a0 = a0 << 0x20\n 24772: a0 = a0 | a1\n 24775: jump @326 if a0 != 0\n      : @317 (gas: 5)\n 24779: u64 [sp + 0xc8] = a2\n 24783: i32 a0 = a2 + 0\n 24785: a1 = 0x20\n 24788: u64 [sp + 0xc0] = a0\n 24792: ra = 260, jump @0\n      : @318 [@dyn 130] (gas: 50)\n 24798: u8 [a0 + 31] = 0\n 24801: u8 [a0 + 30] = 0\n 24804: u8 [a0 + 29] = 0\n 24807: u8 [a0 + 28] = 0\n 24810: u8 [a0 + 27] = 0\n 24813: u8 [a0 + 26] = 0\n 24816: u8 [a0 + 25] = 0\n 24819: u8 [a0 + 24] = 0\n 24822: u8 [a0 + 23] = 0\n 24825: u8 [a0 + 22] = 0\n 24828: u8 [a0 + 21] = 0\n 24831: u8 [a0 + 20] = 0\n 24834: u8 [a0 + 19] = 0\n 24837: u8 [a0 + 18] = 0\n 24840: u8 [a0 + 17] = 0\n 24843: u8 [a0 + 16] = 0\n 24846: u8 [a0 + 15] = 0\n 24849: u8 [a0 + 14] = 0\n 24852: u8 [a0 + 13] = 0\n 24855: u8 [a0 + 12] = 0\n 24858: u8 [a0 + 11] = 0\n 24861: u8 [a0 + 10] = 0\n 24864: u8 [a0 + 9] = 0\n 24867: u8 [a0 + 8] = 0\n 24870: u8 [a0 + 7] = 0\n 24873: u8 [a0 + 6] = 0\n 24876: u8 [a0 + 5] = 0\n 24879: u8 [a0 + 4] = 0\n 24882: u8 [a0 + 3] = 0xa0\n 24887: u8 [a0 + 2] = 0x79\n 24891: u8 [a0 + 1] = 0xc3\n 24896: u8 [a0 + 0] = 0x8\n 24899: a1 = u64 [sp + 0xc8]\n 24903: a0 = a1 + 0x4\n 24906: a1 = a0 <u a1\n 24909: a3 = u64 [sp + 0xd8]\n 24913: a2 = a3 + a1\n 24916: a3 = a2 <u a3\n 24919: a3 = a1 if a1 == 0\n 24922: a3 = a3 + s1\n 24925: a1 = a3 <u s1\n 24928: a4 = u64 [sp + 0xd0]\n 24932: a4 = a4 + a1\n 24935: u64 [sp + 0x1a8] = a2\n 24939: u64 [sp + 0x1a0] = a0\n 24943: u64 [sp + 0x1b0] = a3\n 24947: a0 = sp + 0x1c0\n 24951: a1 = sp + 0x1a0\n 24955: u64 [sp + 0x1b8] = a4\n 24959: ra = 262, jump @219\n      : @319 [@dyn 131] (gas: 5)\n 24965: a0 = u64 [sp + 0x1c8]\n 24969: t0 = u64 [sp + 0x1d8]\n 24973: t1 = u64 [sp + 0x1c0]\n 24977: a3 = u64 [sp + 0x1d0]\n 24981: jump @325\n      : @320 (gas: 3)\n 24984: a0 = 0x40\n 24987: a1 = 0x20\n 24990: ra = 264, jump @0\n      : @321 [@dyn 132] (gas: 103)\n 24996: a1 = u8 [a0 + 0x11]\n 24999: a2 = u8 [a0 + 0x10]\n 25002: a3 = u8 [a0 + 0x12]\n 25005: a4 = u8 [a0 + 0x13]\n 25008: a1 = a1 << 0x8\n 25011: a1 = a1 | a2\n 25014: a3 = a3 << 0x10\n 25017: a4 = a4 << 0x18\n 25020: a3 = a3 | a4\n 25023: a1 = a1 | a3\n 25026: a2 = u8 [a0 + 0x15]\n 25029: a3 = u8 [a0 + 0x14]\n 25032: a4 = u8 [a0 + 0x16]\n 25035: a5 = u8 [a0 + 0x17]\n 25038: a2 = a2 << 0x8\n 25041: a2 = a2 | a3\n 25044: a4 = a4 << 0x10\n 25047: a5 = a5 << 0x18\n 25050: a4 = a4 | a5\n 25053: a2 = a2 | a4\n 25056: a2 = a2 << 0x20\n 25059: t0 = a2 | a1\n 25062: a2 = u8 [a0 + 0x1]\n 25065: a3 = u8 [a0]\n 25067: a4 = u8 [a0 + 0x2]\n 25070: a5 = u8 [a0 + 0x3]\n 25073: a2 = a2 << 0x8\n 25076: a2 = a2 | a3\n 25079: a4 = a4 << 0x10\n 25082: a5 = a5 << 0x18\n 25085: a4 = a4 | a5\n 25088: a2 = a2 | a4\n 25091: a3 = u8 [a0 + 0x5]\n 25094: a4 = u8 [a0 + 0x4]\n 25097: a5 = u8 [a0 + 0x6]\n 25100: s1 = u8 [a0 + 0x7]\n 25103: a3 = a3 << 0x8\n 25106: a3 = a3 | a4\n 25109: a5 = a5 << 0x10\n 25112: s1 = s1 << 0x18\n 25115: a5 = a5 | s1\n 25118: a3 = a3 | a5\n 25121: a3 = a3 << 0x20\n 25124: a2 = a2 | a3\n 25127: a3 = u8 [a0 + 0x19]\n 25130: a4 = u8 [a0 + 0x18]\n 25133: a5 = u8 [a0 + 0x1a]\n 25136: s1 = u8 [a0 + 0x1b]\n 25139: a3 = a3 << 0x8\n 25142: a3 = a3 | a4\n 25145: a5 = a5 << 0x10\n 25148: s1 = s1 << 0x18\n 25151: a5 = a5 | s1\n 25154: a3 = a3 | a5\n 25157: a4 = u8 [a0 + 0x1d]\n 25160: a5 = u8 [a0 + 0x1c]\n 25163: s1 = u8 [a0 + 0x1e]\n 25166: a1 = u8 [a0 + 0x1f]\n 25169: a4 = a4 << 0x8\n 25172: a4 = a4 | a5\n 25175: s1 = s1 << 0x10\n 25178: a1 = a1 << 0x18\n 25181: a1 = a1 | s1\n 25184: a1 = a1 | a4\n 25187: a1 = a1 << 0x20\n 25190: a3 = a3 | a1\n 25193: a1 = u8 [a0 + 0x9]\n 25196: a4 = u8 [a0 + 0x8]\n 25199: a5 = u8 [a0 + 0xa]\n 25202: s1 = u8 [a0 + 0xb]\n 25205: a1 = a1 << 0x8\n 25208: a1 = a1 | a4\n 25211: a5 = a5 << 0x10\n 25214: s1 = s1 << 0x18\n 25217: a5 = a5 | s1\n 25220: a1 = a1 | a5\n 25223: a4 = u8 [a0 + 0xd]\n 25226: a5 = u8 [a0 + 0xc]\n 25229: s1 = u8 [a0 + 0xe]\n 25232: a0 = u8 [a0 + 0xf]\n 25235: a4 = a4 << 0x8\n 25238: a4 = a4 | a5\n 25241: s1 = s1 << 0x10\n 25244: a0 = a0 << 0x18\n 25247: a0 = a0 | s1\n 25250: a0 = a0 | a4\n 25253: a0 = a0 << 0x20\n 25256: a0 = a0 | a1\n 25259: s1 = reverse a0\n 25261: a1 = reverse a3\n 25263: a2 = reverse a2\n 25265: a0 = reverse t0\n 25267: u64 [sp + 0xd8] = a0\n 25271: u64 [sp + 0xd0] = a2\n 25275: a0 = a0 | a2\n 25278: a2 = a1\n 25280: a1 = a1 | s1\n 25283: a1 = a1 | a0\n 25286: a1 = a1 >> 0x20\n 25289: a0 = a0 | s1\n 25292: a0 = a0 << 0x20\n 25295: a0 = a0 | a1\n 25298: jump @326 if a0 != 0\n      : @322 (gas: 5)\n 25302: u64 [sp + 0xc8] = a2\n 25306: i32 a0 = a2 + 0\n 25308: a1 = 0x20\n 25311: u64 [sp + 0xc0] = a0\n 25315: ra = 266, jump @0\n      : @323 [@dyn 133] (gas: 50)\n 25321: u8 [a0 + 31] = 0\n 25324: u8 [a0 + 30] = 0\n 25327: u8 [a0 + 29] = 0\n 25330: u8 [a0 + 28] = 0\n 25333: u8 [a0 + 27] = 0\n 25336: u8 [a0 + 26] = 0\n 25339: u8 [a0 + 25] = 0\n 25342: u8 [a0 + 24] = 0\n 25345: u8 [a0 + 23] = 0\n 25348: u8 [a0 + 22] = 0\n 25351: u8 [a0 + 21] = 0\n 25354: u8 [a0 + 20] = 0\n 25357: u8 [a0 + 19] = 0\n 25360: u8 [a0 + 18] = 0\n 25363: u8 [a0 + 17] = 0\n 25366: u8 [a0 + 16] = 0\n 25369: u8 [a0 + 15] = 0\n 25372: u8 [a0 + 14] = 0\n 25375: u8 [a0 + 13] = 0\n 25378: u8 [a0 + 12] = 0\n 25381: u8 [a0 + 11] = 0\n 25384: u8 [a0 + 10] = 0\n 25387: u8 [a0 + 9] = 0\n 25390: u8 [a0 + 8] = 0\n 25393: u8 [a0 + 7] = 0\n 25396: u8 [a0 + 6] = 0\n 25399: u8 [a0 + 5] = 0\n 25402: u8 [a0 + 4] = 0\n 25405: u8 [a0 + 3] = 0xa0\n 25410: u8 [a0 + 2] = 0x79\n 25414: u8 [a0 + 1] = 0xc3\n 25419: u8 [a0 + 0] = 0x8\n 25422: a1 = u64 [sp + 0xc8]\n 25426: a0 = a1 + 0x4\n 25429: a1 = a0 <u a1\n 25432: a3 = u64 [sp + 0xd8]\n 25436: a2 = a3 + a1\n 25439: a3 = a2 <u a3\n 25442: a3 = a1 if a1 == 0\n 25445: a3 = a3 + s1\n 25448: a1 = a3 <u s1\n 25451: a4 = u64 [sp + 0xd0]\n 25455: a4 = a4 + a1\n 25458: u64 [sp + 0x1e8] = a2\n 25462: u64 [sp + 0x1e0] = a0\n 25466: u64 [sp + 0x1f0] = a3\n 25470: a0 = sp + 0x200\n 25474: a1 = sp + 0x1e0\n 25478: u64 [sp + 0x1f8] = a4\n 25482: ra = 268, jump @227\n      : @324 [@dyn 134] (gas: 5)\n 25488: a0 = u64 [sp + 0x208]\n 25492: t0 = u64 [sp + 0x218]\n 25496: t1 = u64 [sp + 0x200]\n 25500: a3 = u64 [sp + 0x210]\n 25504: fallthrough\n      : @325 (gas: 26)\n 25505: a1 = u64 [sp + 0xd8]\n 25509: a4 = a0 ^ a1\n 25512: a5 = a0 <u a1\n 25515: t2 = a1\n 25517: a2 = u64 [sp + 0xc8]\n 25521: a1 = t1 <u a2\n 25524: a5 = a1 if a4 == 0\n 25527: a4 = a3 - s1\n 25530: a3 = a3 <u s1\n 25533: s1 = u64 [sp + 0xd0]\n 25537: s1 = t0 - s1\n 25540: s1 = s1 - a3\n 25543: a3 = a4 <u a5\n 25546: s1 = s1 - a3\n 25549: a4 = a4 - a5\n 25552: a0 = a0 - t2\n 25555: a1 = a0 - a1\n 25558: a0 = t1 - a2\n 25561: a1 = a1 | s1\n 25564: a2 = a0 | a4\n 25567: a2 = a2 | a1\n 25570: a1 = a1 | a4\n 25573: a2 = a2 >> 0x20\n 25576: a1 = a1 << 0x20\n 25579: a1 = a1 | a2\n 25582: jump @327 if a1 == 0\n      : @326 (gas: 1)\n 25585: trap\n      : @327 (gas: 4)\n 25586: i32 s1 = a0 + 0\n 25588: a0 = u64 [sp + 0xc0]\n 25592: a1 = s1\n 25594: ra = 270, jump @0\n      : @328 [@dyn 135] (gas: 6)\n 25600: i32 a1 = a0 + 0\n 25602: a0 = 0x1\n 25605: a2 = s1\n 25607: ra = 0x110\n 25611: ecalli 14 // 'seal_return'\n 25613: fallthrough\n      : @329 [@dyn 136] (gas: 6)\n 25614: a1 = u32 [a1 + 0x1c]\n 25617: u64 [a0 + 24] = 0\n 25620: u64 [a0 + 16] = 0\n 25623: u64 [a0 + 8] = 0\n 25626: u64 [a0] = a1\n 25628: ret\n      : @330 (gas: 8)\n 25630: a0 = u64 [sp + 0x30]\n 25633: a1 = u64 [sp + 0x38]\n 25636: a2 = u64 [sp + 0x28]\n 25639: a3 = u64 [sp + 0x20]\n 25642: a1 = a1 | a2\n 25645: a0 = a0 | a3\n 25648: a0 = a0 | a1\n 25651: jump @338 if a0 != 0\n      : @331 (gas: 2)\n 25655: a0 = i32 [0x20078]\n 25660: jump @338 if a0 <=u 3\n      : @332 (gas: 3)\n 25665: s1 = 0x20070\n 25670: a0 = i32 [0x20070]\n 25675: jump @335 if a0 == 0\n      : @333 (gas: 6)\n 25678: u64 [sp + 0x18] = a0\n 25681: a0 = 0x30080\n 25686: i32 a0 = a0 + 0\n 25688: i32 a1 = s1 + 0\n 25690: ecalli 7 // 'get_immutable_data'\n 25692: fallthrough\n      : @334 (gas: 4)\n 25693: a0 = i32 [0x20070]\n 25698: u32 [0x20070] = 0\n 25703: a1 = u64 [sp + 0x18]\n 25706: jump @337 if a0 <u a1\n      : @335 (gas: 9)\n 25710: a1 = u64 [0x300d0]\n 25715: u64 [sp + 0x8] = a1\n 25718: a1 = u64 [0x300c8]\n 25723: u64 [sp + 0x10] = a1\n 25726: a0 = u64 [0x300c0]\n 25731: u64 [sp + 0x18] = a0\n 25734: a0 = 0x40\n 25737: a1 = 0x20\n 25740: ra = 274, jump @0\n      : @336 [@dyn 137] (gas: 100)\n 25746: a1 = u8 [a0 + 0x11]\n 25749: a2 = u8 [a0 + 0x10]\n 25752: a3 = u8 [a0 + 0x12]\n 25755: a4 = u8 [a0 + 0x13]\n 25758: a1 = a1 << 0x8\n 25761: a1 = a1 | a2\n 25764: a3 = a3 << 0x10\n 25767: a4 = a4 << 0x18\n 25770: a3 = a3 | a4\n 25773: a1 = a1 | a3\n 25776: a2 = u8 [a0 + 0x15]\n 25779: a3 = u8 [a0 + 0x14]\n 25782: a4 = u8 [a0 + 0x16]\n 25785: a5 = u8 [a0 + 0x17]\n 25788: a2 = a2 << 0x8\n 25791: a2 = a2 | a3\n 25794: a4 = a4 << 0x10\n 25797: a5 = a5 << 0x18\n 25800: a4 = a4 | a5\n 25803: a2 = a2 | a4\n 25806: a2 = a2 << 0x20\n 25809: t0 = a2 | a1\n 25812: a2 = u8 [a0 + 0x1]\n 25815: a3 = u8 [a0]\n 25817: a4 = u8 [a0 + 0x2]\n 25820: a5 = u8 [a0 + 0x3]\n 25823: a2 = a2 << 0x8\n 25826: a2 = a2 | a3\n 25829: a4 = a4 << 0x10\n 25832: a5 = a5 << 0x18\n 25835: a4 = a4 | a5\n 25838: a2 = a2 | a4\n 25841: a3 = u8 [a0 + 0x5]\n 25844: a4 = u8 [a0 + 0x4]\n 25847: a5 = u8 [a0 + 0x6]\n 25850: s1 = u8 [a0 + 0x7]\n 25853: a3 = a3 << 0x8\n 25856: a3 = a3 | a4\n 25859: a5 = a5 << 0x10\n 25862: s1 = s1 << 0x18\n 25865: a5 = a5 | s1\n 25868: a3 = a3 | a5\n 25871: a3 = a3 << 0x20\n 25874: a2 = a2 | a3\n 25877: a3 = u8 [a0 + 0x19]\n 25880: a4 = u8 [a0 + 0x18]\n 25883: a5 = u8 [a0 + 0x1a]\n 25886: s1 = u8 [a0 + 0x1b]\n 25889: a3 = a3 << 0x8\n 25892: a3 = a3 | a4\n 25895: a5 = a5 << 0x10\n 25898: s1 = s1 << 0x18\n 25901: a5 = a5 | s1\n 25904: a3 = a3 | a5\n 25907: a4 = u8 [a0 + 0x1d]\n 25910: a5 = u8 [a0 + 0x1c]\n 25913: s1 = u8 [a0 + 0x1e]\n 25916: a1 = u8 [a0 + 0x1f]\n 25919: a4 = a4 << 0x8\n 25922: a4 = a4 | a5\n 25925: s1 = s1 << 0x10\n 25928: a1 = a1 << 0x18\n 25931: a1 = a1 | s1\n 25934: a1 = a1 | a4\n 25937: a1 = a1 << 0x20\n 25940: a3 = a3 | a1\n 25943: a1 = u8 [a0 + 0x9]\n 25946: a4 = u8 [a0 + 0x8]\n 25949: a5 = u8 [a0 + 0xa]\n 25952: s1 = u8 [a0 + 0xb]\n 25955: a1 = a1 << 0x8\n 25958: a1 = a1 | a4\n 25961: a5 = a5 << 0x10\n 25964: s1 = s1 << 0x18\n 25967: a5 = a5 | s1\n 25970: a1 = a1 | a5\n 25973: a4 = u8 [a0 + 0xd]\n 25976: a5 = u8 [a0 + 0xc]\n 25979: s1 = u8 [a0 + 0xe]\n 25982: a0 = u8 [a0 + 0xf]\n 25985: a4 = a4 << 0x8\n 25988: a4 = a4 | a5\n 25991: s1 = s1 << 0x10\n 25994: a0 = a0 << 0x18\n 25997: a0 = a0 | s1\n 26000: a0 = a0 | a4\n 26003: a0 = a0 << 0x20\n 26006: a0 = a0 | a1\n 26009: a1 = reverse a0\n 26011: a0 = reverse a3\n 26013: a2 = reverse a2\n 26015: a3 = reverse t0\n 26017: a2 = a2 | a3\n 26020: a3 = a0 | a1\n 26023: a3 = a3 | a2\n 26026: a3 = a3 >> 0x20\n 26029: a1 = a1 | a2\n 26032: a1 = a1 << 0x20\n 26035: a1 = a1 | a3\n 26038: jump @340 if a1 == 0\n      : @337 (gas: 1)\n 26041: trap\n      : @338 (gas: 3)\n 26042: a0 = 0\n 26044: a1 = 0\n 26046: ra = 276, jump @0\n      : @339 [@dyn 138] (gas: 5)\n 26052: i32 a1 = a0 + 0\n 26054: a0 = 0x1\n 26057: a2 = 0\n 26059: ecalli 14 // 'seal_return'\n 26061: fallthrough\n      : @340 (gas: 7)\n 26062: a1 = u64 [sp + 0x8]\n 26065: a1 = a1 << 0x20\n 26068: s1 = a1 >> 0x20\n 26071: i32 a0 = a0 + 0\n 26073: u64 [sp + 0x8] = a0\n 26076: a1 = 0x20\n 26079: ra = 278, jump @0\n      : @341 [@dyn 139] (gas: 58)\n 26085: a1 = reverse s1\n 26087: a2 = u64 [sp + 0x10]\n 26090: a2 = reverse a2\n 26092: a3 = u64 [sp + 0x18]\n 26095: a3 = reverse a3\n 26097: a4 = a3 >> 0x38\n 26100: u8 [a0 + 0x1f] = a4\n 26103: a4 = a3 >> 0x30\n 26106: u8 [a0 + 0x1e] = a4\n 26109: a4 = a3 >> 0x28\n 26112: u8 [a0 + 0x1d] = a4\n 26115: a4 = a3 >> 0x20\n 26118: u8 [a0 + 0x1c] = a4\n 26121: a4 = a3 >> 0x18\n 26124: u8 [a0 + 0x1b] = a4\n 26127: a4 = a3 >> 0x10\n 26130: u8 [a0 + 0x1a] = a4\n 26133: a4 = a3 >> 0x8\n 26136: u8 [a0 + 0x19] = a4\n 26139: u8 [a0 + 0x18] = a3\n 26142: u8 [a0 + 0x10] = a2\n 26145: u8 [a0 + 11] = 0\n 26148: u8 [a0 + 10] = 0\n 26151: u8 [a0 + 9] = 0\n 26154: u8 [a0 + 7] = 0\n 26157: u8 [a0 + 6] = 0\n 26160: u8 [a0 + 5] = 0\n 26163: u8 [a0 + 4] = 0\n 26166: u8 [a0 + 3] = 0\n 26169: u8 [a0 + 2] = 0\n 26172: u8 [a0 + 1] = 0\n 26175: u8 [a0 + 0] = 0\n 26177: a3 = a2 >> 0x38\n 26180: u8 [a0 + 0x17] = a3\n 26183: a3 = a2 >> 0x30\n 26186: u8 [a0 + 0x16] = a3\n 26189: a3 = a2 >> 0x28\n 26192: u8 [a0 + 0x15] = a3\n 26195: a3 = a2 >> 0x20\n 26198: u8 [a0 + 0x14] = a3\n 26201: a3 = a2 >> 0x18\n 26204: u8 [a0 + 0x13] = a3\n 26207: a3 = a2 >> 0x10\n 26210: u8 [a0 + 0x12] = a3\n 26213: a2 = a2 >> 0x8\n 26216: u8 [a0 + 0x11] = a2\n 26219: u8 [a0 + 0x8] = a1\n 26222: a2 = a1 >> 0x38\n 26225: u8 [a0 + 0xf] = a2\n 26228: a2 = a1 >> 0x30\n 26231: u8 [a0 + 0xe] = a2\n 26234: a2 = a1 >> 0x28\n 26237: u8 [a0 + 0xd] = a2\n 26240: a1 = a1 >> 0x20\n 26243: u8 [a0 + 0xc] = a1\n 26246: a1 = 0x20\n 26249: a0 = u64 [sp + 0x8]\n 26252: ra = 280, jump @0\n      : @342 [@dyn 140] (gas: 6)\n 26258: i32 a1 = a0 + 0\n 26260: a2 = 0x20\n 26263: a0 = 0\n 26265: ra = 0x11a\n 26269: ecalli 14 // 'seal_return'\n 26271: fallthrough\n      : @343 [@dyn 141] (gas: 13)\n 26272: sp = sp + 0xffffffffffffffb0\n 26275: u64 [sp + 0x48] = ra\n 26278: u64 [sp + 0x40] = s0\n 26281: s0 = sp + 0x50\n 26284: sp = sp & 0xfffffffffffffff0\n 26287: u64 [sp + 48] = 0\n 26290: u64 [sp + 40] = 0\n 26293: u64 [sp + 32] = 0\n 26296: a0 = 0x4e487b7100000000\n 26306: a1 = sp + 0x20\n 26309: u64 [sp + 0x38] = a0\n 26312: a0 = 0\n 26314: ra = 284, jump @23\n      : @344 [@dyn 142] (gas: 7)\n 26320: u64 [sp + 24] = 0\n 26323: u64 [sp + 16] = 0\n 26326: u64 [sp + 8] = 0\n 26329: a0 = 0x4\n 26332: a1 = sp\n 26334: u64 [sp + 0] = 0\n 26336: ra = 286, jump @23\n      : @345 [@dyn 143] (gas: 3)\n 26342: a1 = 0x24\n 26345: a0 = 0\n 26347: ra = 288, jump @0\n      : @346 [@dyn 144] (gas: 6)\n 26353: i32 a1 = a0 + 0\n 26355: a0 = 0x1\n 26358: a2 = 0x24\n 26361: ra = 0x122\n 26365: ecalli 14 // 'seal_return'\n 26367: fallthrough\n      : @347 [@dyn 145] (gas: 39)\n 26368: sp = sp + 0xfffffffffffffea0\n 26372: u64 [sp + 0x158] = ra\n 26376: u64 [sp + 0x150] = s0\n 26380: u64 [sp + 0x148] = s1\n 26384: s0 = sp + 0x160\n 26388: sp = sp & 0xffffffffffffffe0\n 26391: u64 [sp + 0x8] = a0\n 26394: a0 = u64 [a2 + 0x18]\n 26397: u64 [sp + 0xb0] = a0\n 26401: a0 = u64 [a2 + 0x10]\n 26404: u64 [sp + 0xa8] = a0\n 26408: a0 = u64 [a2 + 0x8]\n 26411: u64 [sp + 0xa0] = a0\n 26415: a0 = u64 [a2]\n 26417: u64 [sp + 0xb8] = a0\n 26421: a4 = u64 [a1 + 0x18]\n 26424: a3 = u64 [a1 + 0x10]\n 26427: a2 = u64 [a1 + 0x8]\n 26430: a0 = u64 [a1]\n 26432: u64 [sp + 0x18] = a4\n 26435: u64 [sp + 0x118] = a4\n 26439: u64 [sp + 0x20] = a3\n 26442: u64 [sp + 0x110] = a3\n 26446: u64 [sp + 0x68] = a2\n 26449: u64 [sp + 0x108] = a2\n 26453: u64 [sp + 0x70] = a0\n 26456: u64 [sp + 0x100] = a0\n 26460: u64 [sp + 312] = 0\n 26464: u64 [sp + 304] = 0\n 26468: u64 [sp + 296] = 0\n 26472: u64 [sp + 288] = 0\n 26476: u32 [sp + 320] = 0x20\n 26481: i32 a1 = sp + 0x100\n 26485: i32 a3 = sp + 0x120\n 26489: i32 a4 = sp + 0x140\n 26493: a2 = 0xffffffffffffffff\n 26496: a0 = 0\n 26498: ecalli 8 // 'get_storage'\n 26500: fallthrough\n      : @348 (gas: 32)\n 26501: t0 = u64 [sp + 0x130]\n 26505: t1 = u64 [sp + 0x128]\n 26509: t2 = u64 [sp + 0x138]\n 26513: a5 = u64 [sp + 0x120]\n 26517: a0 = t0 << 0x3f\n 26520: a1 = t1 >> 0x1\n 26523: a0 = a0 | a1\n 26526: a1 = t2 << 0x3f\n 26529: a2 = t0 >> 0x1\n 26532: a1 = a1 | a2\n 26535: a2 = t1 << 0x3f\n 26538: a3 = a5 >> 0x1\n 26541: a4 = a3 | a2\n 26544: a2 = t2 >> 0x1\n 26547: u64 [sp + 0x78] = a5\n 26550: a5 = a5 & 0x1\n 26553: a3 = -a5\n 26555: ra = a4 & 0x7f\n 26558: a1 = a1 & a3\n 26561: s1 = a3 & a0\n 26564: a4 = ra if a5 == 0\n 26567: a2 = a2 & a3\n 26570: u64 [sp + 0x58] = a4\n 26573: a0 = a4 <u 0x20\n 26576: u64 [sp + 0x48] = s1\n 26579: a0 = 0 if s1 != 0\n 26581: u64 [sp + 0x50] = a1\n 26584: u64 [sp + 0x40] = a2\n 26587: a1 = a1 | a2\n 26590: a0 = 0 if a1 != 0\n 26592: a1 = a5 <u 0x1\n 26595: jump @367 if a1 != a0\n      : @349 (gas: 17)\n 26599: u64 [sp + 0x98] = a5\n 26603: u64 [sp + 0x10] = ra\n 26606: u64 [sp + 0x80] = t1\n 26610: u64 [sp + 0x88] = t0\n 26614: u64 [sp + 0x90] = t2\n 26618: a0 = u64 [sp + 0xb8]\n 26622: a2 = u64 [sp + 0xa8]\n 26626: a0 = a0 | a2\n 26629: a1 = u64 [sp + 0xb0]\n 26633: a3 = u64 [sp + 0xa0]\n 26637: a1 = a1 | a3\n 26640: a0 = a0 | a1\n 26643: a0 = a0 >> 0x20\n 26646: a1 = a1 | a2\n 26649: a1 = a1 << 0x20\n 26652: a0 = a0 | a1\n 26655: jump @366 if a0 != 0\n      : @350 (gas: 4)\n 26659: s1 = u64 [sp + 0xb8]\n 26663: i32 a0 = s1 + 0\n 26665: a1 = 0x20\n 26668: ra = 292, jump @0\n      : @351 [@dyn 146] (gas: 85)\n 26674: a1 = u64 [sp + 0x40]\n 26677: a1 = reverse a1\n 26679: a2 = u64 [sp + 0x58]\n 26682: a2 = reverse a2\n 26684: a3 = a2 >> 0x38\n 26687: u8 [a0 + 0x1f] = a3\n 26690: a3 = a2 >> 0x30\n 26693: u8 [a0 + 0x1e] = a3\n 26696: a3 = a2 >> 0x28\n 26699: u8 [a0 + 0x1d] = a3\n 26702: a3 = a2 >> 0x20\n 26705: u8 [a0 + 0x1c] = a3\n 26708: a3 = a2 >> 0x18\n 26711: u8 [a0 + 0x1b] = a3\n 26714: a3 = a2 >> 0x10\n 26717: u8 [a0 + 0x1a] = a3\n 26720: a3 = a2 >> 0x8\n 26723: u8 [a0 + 0x19] = a3\n 26726: a3 = u64 [sp + 0x48]\n 26729: a3 = reverse a3\n 26731: u8 [a0 + 0x18] = a2\n 26734: a2 = a3 >> 0x38\n 26737: u8 [a0 + 0x17] = a2\n 26740: a2 = a3 >> 0x30\n 26743: u8 [a0 + 0x16] = a2\n 26746: a2 = a3 >> 0x28\n 26749: u8 [a0 + 0x15] = a2\n 26752: a2 = a3 >> 0x20\n 26755: u8 [a0 + 0x14] = a2\n 26758: a2 = a3 >> 0x18\n 26761: u8 [a0 + 0x13] = a2\n 26764: a2 = a3 >> 0x10\n 26767: u8 [a0 + 0x12] = a2\n 26770: a2 = u64 [sp + 0x50]\n 26773: a2 = reverse a2\n 26775: u8 [a0 + 0x10] = a3\n 26778: a3 = a3 >> 0x8\n 26781: u8 [a0 + 0x11] = a3\n 26784: u8 [a0 + 0x8] = a2\n 26787: a3 = a2 >> 0x38\n 26790: u8 [a0 + 0xf] = a3\n 26793: a3 = a2 >> 0x30\n 26796: u8 [a0 + 0xe] = a3\n 26799: a3 = a2 >> 0x28\n 26802: u8 [a0 + 0xd] = a3\n 26805: a3 = a2 >> 0x20\n 26808: u8 [a0 + 0xc] = a3\n 26811: a3 = a2 >> 0x18\n 26814: u8 [a0 + 0xb] = a3\n 26817: a3 = a2 >> 0x10\n 26820: u8 [a0 + 0xa] = a3\n 26823: a2 = a2 >> 0x8\n 26826: u8 [a0 + 0x9] = a2\n 26829: u8 [a0] = a1\n 26831: a2 = a1 >> 0x38\n 26834: u8 [a0 + 0x7] = a2\n 26837: a2 = a1 >> 0x30\n 26840: u8 [a0 + 0x6] = a2\n 26843: a2 = a1 >> 0x28\n 26846: u8 [a0 + 0x5] = a2\n 26849: a2 = a1 >> 0x20\n 26852: u8 [a0 + 0x4] = a2\n 26855: a2 = a1 >> 0x18\n 26858: u8 [a0 + 0x3] = a2\n 26861: a2 = a1 >> 0x10\n 26864: u8 [a0 + 0x2] = a2\n 26867: a1 = a1 >> 0x8\n 26870: u8 [a0 + 0x1] = a1\n 26873: a0 = s1 + 0x20\n 26876: u64 [sp + 0x60] = a0\n 26879: a0 = a0 <u s1\n 26882: a3 = u64 [sp + 0xa0]\n 26886: a1 = a3 + a0\n 26889: u64 [sp + 0x28] = a1\n 26892: a1 = a1 <u a3\n 26895: a1 = a0 if a0 == 0\n 26898: a0 = u64 [sp + 0xa8]\n 26902: a1 = a1 + a0\n 26905: u64 [sp + 0x30] = a1\n 26908: a0 = a1 <u a0\n 26911: a1 = u64 [sp + 0xb0]\n 26915: a0 = a0 + a1\n 26918: u64 [sp + 0x38] = a0\n 26921: a0 = u64 [sp + 0x98]\n 26925: jump @355 if a0 != 0\n      : @352 (gas: 9)\n 26929: a0 = u64 [sp + 0xb0]\n 26933: a1 = u64 [sp + 0xa8]\n 26937: a0 = a0 | a1\n 26940: a1 = 0xffffffe0\n 26950: a2 = u64 [sp + 0xb8]\n 26954: a1 = a2 <u a1\n 26957: a1 = 0 if a3 != 0\n 26959: a1 = 0 if a0 != 0\n 26961: jump @366 if a1 == 0\n      : @353 (gas: 5)\n 26965: a0 = u64 [sp + 0x78]\n 26968: s1 = a0 & 0xffffffffffffff00\n 26972: a0 = i32 [sp + 0x60]\n 26975: a1 = 0x20\n 26978: ra = 294, jump @0\n      : @354 [@dyn 147] (gas: 73)\n 26984: t0 = 0\n 26986: t1 = 0\n 26988: u64 [sp + 176] = 0\n 26992: a3 = reverse s1\n 26994: a4 = a3 >> 0x30\n 26997: u8 [a0 + 0x1e] = a4\n 27000: a4 = a3 >> 0x28\n 27003: u8 [a0 + 0x1d] = a4\n 27006: a4 = a3 >> 0x20\n 27009: u8 [a0 + 0x1c] = a4\n 27012: a4 = a3 >> 0x18\n 27015: u8 [a0 + 0x1b] = a4\n 27018: a4 = a3 >> 0x10\n 27021: u8 [a0 + 0x1a] = a4\n 27024: a1 = u64 [sp + 0x80]\n 27028: a4 = reverse a1\n 27030: u8 [a0 + 0x18] = a3\n 27033: a3 = a3 >> 0x8\n 27036: u8 [a0 + 0x19] = a3\n 27039: a3 = a4 >> 0x38\n 27042: u8 [a0 + 0x17] = a3\n 27045: a3 = a4 >> 0x30\n 27048: u8 [a0 + 0x16] = a3\n 27051: a3 = a4 >> 0x28\n 27054: u8 [a0 + 0x15] = a3\n 27057: a3 = a4 >> 0x20\n 27060: u8 [a0 + 0x14] = a3\n 27063: a3 = a4 >> 0x18\n 27066: u8 [a0 + 0x13] = a3\n 27069: a3 = a4 >> 0x10\n 27072: u8 [a0 + 0x12] = a3\n 27075: a1 = u64 [sp + 0x88]\n 27079: a3 = reverse a1\n 27081: u8 [a0 + 0x10] = a4\n 27084: a4 = a4 >> 0x8\n 27087: u8 [a0 + 0x11] = a4\n 27090: a4 = a3 >> 0x38\n 27093: u8 [a0 + 0xf] = a4\n 27096: a4 = a3 >> 0x30\n 27099: u8 [a0 + 0xe] = a4\n 27102: a4 = a3 >> 0x28\n 27105: u8 [a0 + 0xd] = a4\n 27108: a4 = a3 >> 0x20\n 27111: u8 [a0 + 0xc] = a4\n 27114: a4 = a3 >> 0x18\n 27117: u8 [a0 + 0xb] = a4\n 27120: a4 = a3 >> 0x10\n 27123: u8 [a0 + 0xa] = a4\n 27126: a1 = u64 [sp + 0x90]\n 27130: a4 = reverse a1\n 27132: u8 [a0 + 31] = 0\n 27135: u8 [a0 + 0x8] = a3\n 27138: a3 = a3 >> 0x8\n 27141: u8 [a0 + 0x9] = a3\n 27144: u8 [a0] = a4\n 27146: a3 = a4 >> 0x38\n 27149: u8 [a0 + 0x7] = a3\n 27152: a3 = a4 >> 0x30\n 27155: u8 [a0 + 0x6] = a3\n 27158: a3 = a4 >> 0x28\n 27161: u8 [a0 + 0x5] = a3\n 27164: a3 = a4 >> 0x20\n 27167: u8 [a0 + 0x4] = a3\n 27170: a3 = a4 >> 0x18\n 27173: u8 [a0 + 0x3] = a3\n 27176: a3 = a4 >> 0x10\n 27179: u8 [a0 + 0x2] = a3\n 27182: a4 = a4 >> 0x8\n 27185: u8 [a0 + 0x1] = a4\n 27188: a0 = u64 [sp + 0x10]\n 27191: a0 = a0 >u 0\n 27193: ra = a0 << 0x5\n 27196: jump @365\n      : @355 (gas: 3)\n 27199: a1 = 0x20\n 27202: a0 = 0\n 27204: ra = 296, jump @0\n      : @356 [@dyn 148] (gas: 71)\n 27210: a1 = u64 [sp + 0x18]\n 27213: a1 = reverse a1\n 27215: a2 = u64 [sp + 0x20]\n 27218: a2 = reverse a2\n 27220: a3 = u64 [sp + 0x68]\n 27223: a3 = reverse a3\n 27225: a4 = u64 [sp + 0x70]\n 27228: a4 = reverse a4\n 27230: a5 = a4 >> 0x38\n 27233: u8 [a0 + 0x1f] = a5\n 27236: a5 = a4 >> 0x30\n 27239: u8 [a0 + 0x1e] = a5\n 27242: a5 = a4 >> 0x28\n 27245: u8 [a0 + 0x1d] = a5\n 27248: a5 = a4 >> 0x20\n 27251: u8 [a0 + 0x1c] = a5\n 27254: a5 = a4 >> 0x18\n 27257: u8 [a0 + 0x1b] = a5\n 27260: a5 = a4 >> 0x10\n 27263: u8 [a0 + 0x1a] = a5\n 27266: a5 = a4 >> 0x8\n 27269: u8 [a0 + 0x19] = a5\n 27272: u8 [a0 + 0x18] = a4\n 27275: u8 [a0 + 0x10] = a3\n 27278: a4 = a3 >> 0x38\n 27281: u8 [a0 + 0x17] = a4\n 27284: a4 = a3 >> 0x30\n 27287: u8 [a0 + 0x16] = a4\n 27290: a4 = a3 >> 0x28\n 27293: u8 [a0 + 0x15] = a4\n 27296: a4 = a3 >> 0x20\n 27299: u8 [a0 + 0x14] = a4\n 27302: a4 = a3 >> 0x18\n 27305: u8 [a0 + 0x13] = a4\n 27308: a4 = a3 >> 0x10\n 27311: u8 [a0 + 0x12] = a4\n 27314: a3 = a3 >> 0x8\n 27317: u8 [a0 + 0x11] = a3\n 27320: u8 [a0 + 0x8] = a2\n 27323: a3 = a2 >> 0x38\n 27326: u8 [a0 + 0xf] = a3\n 27329: a3 = a2 >> 0x30\n 27332: u8 [a0 + 0xe] = a3\n 27335: a3 = a2 >> 0x28\n 27338: u8 [a0 + 0xd] = a3\n 27341: a3 = a2 >> 0x20\n 27344: u8 [a0 + 0xc] = a3\n 27347: a3 = a2 >> 0x18\n 27350: u8 [a0 + 0xb] = a3\n 27353: a3 = a2 >> 0x10\n 27356: u8 [a0 + 0xa] = a3\n 27359: a2 = a2 >> 0x8\n 27362: u8 [a0 + 0x9] = a2\n 27365: u8 [a0] = a1\n 27367: a2 = a1 >> 0x38\n 27370: u8 [a0 + 0x7] = a2\n 27373: a2 = a1 >> 0x30\n 27376: u8 [a0 + 0x6] = a2\n 27379: a2 = a1 >> 0x28\n 27382: u8 [a0 + 0x5] = a2\n 27385: a2 = a1 >> 0x20\n 27388: u8 [a0 + 0x4] = a2\n 27391: a2 = a1 >> 0x18\n 27394: u8 [a0 + 0x3] = a2\n 27397: a2 = a1 >> 0x10\n 27400: u8 [a0 + 0x2] = a2\n 27403: a1 = a1 >> 0x8\n 27406: u8 [a0 + 0x1] = a1\n 27409: a1 = 0x20\n 27412: a0 = 0\n 27414: ra = 298, jump @0\n      : @357 [@dyn 149] (gas: 5)\n 27420: i32 a0 = a0 + 0\n 27422: i32 a2 = sp + 0x120\n 27426: a1 = 0x20\n 27429: ecalli 9 // 'hash_keccak_256'\n 27431: fallthrough\n      : @358 (gas: 9)\n 27432: a0 = u64 [sp + 0x78]\n 27435: a0 = a0 <u 0x2\n 27438: a1 = u64 [sp + 0x80]\n 27442: a0 = 0 if a1 != 0\n 27444: a1 = u64 [sp + 0x90]\n 27448: a2 = u64 [sp + 0x88]\n 27452: a1 = a1 | a2\n 27455: a0 = 0 if a1 != 0\n 27457: jump @360 if a0 == 0\n      : @359 (gas: 5)\n 27460: ra = 0\n 27462: t0 = 0\n 27464: t1 = 0\n 27466: u64 [sp + 176] = 0\n 27470: jump @365\n      : @360 (gas: 19)\n 27473: u64 [sp + 168] = 0\n 27477: u64 [sp + 160] = 0\n 27481: s1 = 0\n 27483: u64 [sp + 176] = 0\n 27487: a0 = u64 [sp + 0x120]\n 27491: a1 = u64 [sp + 0x128]\n 27495: a2 = u64 [sp + 0x130]\n 27499: a3 = u64 [sp + 0x138]\n 27503: a0 = reverse a0\n 27505: a5 = reverse a1\n 27507: a1 = reverse a2\n 27509: t2 = reverse a3\n 27511: i32 a3 = sp + 0x100\n 27515: u64 [sp + 0x20] = a3\n 27518: i32 a3 = sp + 0x120\n 27522: u64 [sp + 0x18] = a3\n 27525: i32 a3 = sp + 0x140\n 27529: u64 [sp + 0x10] = a3\n 27532: fallthrough\n      : @361 (gas: 20)\n 27533: u64 [sp + 0x88] = a5\n 27537: u64 [sp + 0x110] = a5\n 27541: u64 [sp + 0xb8] = a1\n 27545: u64 [sp + 0x108] = a1\n 27549: u64 [sp + 0x90] = t2\n 27553: u64 [sp + 0x100] = t2\n 27557: u64 [sp + 0x98] = a0\n 27561: u64 [sp + 0x118] = a0\n 27565: u64 [sp + 312] = 0\n 27569: u64 [sp + 304] = 0\n 27573: u64 [sp + 296] = 0\n 27577: u64 [sp + 288] = 0\n 27581: u32 [sp + 320] = 0x20\n 27586: a2 = 0xffffffffffffffff\n 27589: a0 = 0\n 27591: a1 = u64 [sp + 0x20]\n 27594: a3 = u64 [sp + 0x18]\n 27597: a4 = u64 [sp + 0x10]\n 27600: ecalli 8 // 'get_storage'\n 27602: fallthrough\n      : @362 (gas: 30)\n 27603: a0 = u64 [sp + 0x60]\n 27606: a1 = u64 [sp + 0xa8]\n 27610: a0 = a0 + a1\n 27613: a1 = a0 <u a1\n 27616: a2 = u64 [sp + 0x28]\n 27619: a4 = u64 [sp + 0xa0]\n 27623: a2 = a2 + a4\n 27626: a2 = a2 + a1\n 27629: a3 = a2 ^ a4\n 27632: a4 = a2 <u a4\n 27635: a4 = a1 if a3 == 0\n 27638: a1 = u64 [sp + 0x30]\n 27641: a1 = a1 + s1\n 27644: u64 [sp + 0x80] = s1\n 27648: a3 = a1 <u s1\n 27651: a5 = u64 [sp + 0x38]\n 27654: s1 = u64 [sp + 0xb0]\n 27658: a5 = a5 + s1\n 27661: a3 = a3 + a5\n 27664: a4 = a4 + a1\n 27667: a1 = a4 <u a1\n 27670: a1 = a1 + a3\n 27673: a1 = a1 | a2\n 27676: a2 = a0 | a4\n 27679: a2 = a2 | a1\n 27682: a1 = a1 | a4\n 27685: a2 = a2 >> 0x20\n 27688: a1 = a1 << 0x20\n 27691: a1 = a1 | a2\n 27694: jump @366 if a1 != 0\n      : @363 (gas: 10)\n 27698: a1 = u64 [sp + 0x138]\n 27702: u64 [sp + 0x70] = a1\n 27705: a1 = u64 [sp + 0x130]\n 27709: u64 [sp + 0x78] = a1\n 27712: a1 = u64 [sp + 0x128]\n 27716: u64 [sp + 0x68] = a1\n 27719: s1 = u64 [sp + 0x120]\n 27723: i32 a0 = a0 + 0\n 27725: a1 = 0x20\n 27728: ra = 300, jump @0\n      : @364 [@dyn 150] (gas: 115)\n 27734: a1 = reverse s1\n 27736: a2 = a1 >> 0x38\n 27739: u8 [a0 + 0x1f] = a2\n 27742: a2 = a1 >> 0x30\n 27745: u8 [a0 + 0x1e] = a2\n 27748: a2 = a1 >> 0x28\n 27751: u8 [a0 + 0x1d] = a2\n 27754: a2 = a1 >> 0x20\n 27757: u8 [a0 + 0x1c] = a2\n 27760: a2 = a1 >> 0x18\n 27763: u8 [a0 + 0x1b] = a2\n 27766: a2 = a1 >> 0x10\n 27769: u8 [a0 + 0x1a] = a2\n 27772: a2 = a1 >> 0x8\n 27775: u8 [a0 + 0x19] = a2\n 27778: a2 = u64 [sp + 0x68]\n 27781: a2 = reverse a2\n 27783: u8 [a0 + 0x18] = a1\n 27786: a1 = a2 >> 0x38\n 27789: u8 [a0 + 0x17] = a1\n 27792: a1 = a2 >> 0x30\n 27795: u8 [a0 + 0x16] = a1\n 27798: a1 = a2 >> 0x28\n 27801: u8 [a0 + 0x15] = a1\n 27804: a1 = a2 >> 0x20\n 27807: u8 [a0 + 0x14] = a1\n 27810: a1 = a2 >> 0x18\n 27813: u8 [a0 + 0x13] = a1\n 27816: a1 = a2 >> 0x10\n 27819: u8 [a0 + 0x12] = a1\n 27822: a1 = u64 [sp + 0x70]\n 27825: a1 = reverse a1\n 27827: a3 = u64 [sp + 0x78]\n 27830: a3 = reverse a3\n 27832: u8 [a0 + 0x10] = a2\n 27835: a2 = a2 >> 0x8\n 27838: u8 [a0 + 0x11] = a2\n 27841: u8 [a0 + 0x8] = a3\n 27844: a2 = a3 >> 0x38\n 27847: u8 [a0 + 0xf] = a2\n 27850: a2 = a3 >> 0x30\n 27853: u8 [a0 + 0xe] = a2\n 27856: a2 = a3 >> 0x28\n 27859: u8 [a0 + 0xd] = a2\n 27862: a2 = a3 >> 0x20\n 27865: u8 [a0 + 0xc] = a2\n 27868: a2 = a3 >> 0x18\n 27871: u8 [a0 + 0xb] = a2\n 27874: a2 = a3 >> 0x10\n 27877: u8 [a0 + 0xa] = a2\n 27880: a3 = a3 >> 0x8\n 27883: u8 [a0 + 0x9] = a3\n 27886: u8 [a0] = a1\n 27888: a2 = a1 >> 0x38\n 27891: u8 [a0 + 0x7] = a2\n 27894: a2 = a1 >> 0x30\n 27897: u8 [a0 + 0x6] = a2\n 27900: a2 = a1 >> 0x28\n 27903: u8 [a0 + 0x5] = a2\n 27906: a2 = a1 >> 0x20\n 27909: u8 [a0 + 0x4] = a2\n 27912: a2 = a1 >> 0x18\n 27915: u8 [a0 + 0x3] = a2\n 27918: a2 = a1 >> 0x10\n 27921: u8 [a0 + 0x2] = a2\n 27924: a1 = a1 >> 0x8\n 27927: u8 [a0 + 0x1] = a1\n 27930: t2 = u64 [sp + 0x90]\n 27934: t2 = t2 + 0x1\n 27937: a0 = t2 <u 0x1\n 27940: a1 = u64 [sp + 0xb8]\n 27944: a1 = a1 + a0\n 27947: u64 [sp + 0xb8] = a1\n 27951: a0 = u64 [sp + 0xa8]\n 27955: ra = a0 + 0x20\n 27958: a2 = ra <u a0\n 27961: a0 = u64 [sp + 0xa0]\n 27965: t0 = a0 + a2\n 27968: a3 = t0 <u a0\n 27971: a3 = a2 if a2 == 0\n 27974: a0 = u64 [sp + 0x80]\n 27978: t1 = a0 + a3\n 27981: a3 = t1 <u a0\n 27984: a5 = u64 [sp + 0xb0]\n 27988: a5 = a5 + a3\n 27991: a1 = u64 [sp + 0x50]\n 27994: a0 = t1 <u a1\n 27997: u64 [sp + 0xa8] = a0\n 28001: a2 = u64 [sp + 0x58]\n 28004: a4 = ra <u a2\n 28007: a2 = u64 [sp + 0x48]\n 28010: s1 = t0 ^ a2\n 28013: a3 = t0 <u a2\n 28016: a3 = a4 if s1 == 0\n 28019: a2 = u64 [sp + 0x40]\n 28022: a0 = a5 ^ a2\n 28025: u64 [sp + 0xb0] = a5\n 28029: s1 = a5 <u a2\n 28032: a2 = u64 [sp + 0xa8]\n 28036: s1 = a2 if a0 == 0\n 28039: a4 = t1 ^ a1\n 28042: a1 = u64 [sp + 0xb8]\n 28046: a0 = a0 | a4\n 28049: a5 = t2 | a1\n 28052: a5 = a5 <u 0x1\n 28055: a4 = u64 [sp + 0x88]\n 28059: a5 = a5 + a4\n 28062: a4 = a5 <u a4\n 28065: a3 = s1 if a0 != 0\n 28068: a0 = u64 [sp + 0x98]\n 28072: a0 = a0 + a4\n 28075: u64 [sp + 0xa8] = ra\n 28079: u64 [sp + 0xa0] = t0\n 28083: s1 = t1\n 28085: jump @361 if a3 != 0\n      : @365 (gas: 30)\n 28089: a3 = u64 [sp + 0x60]\n 28092: a3 = a3 + ra\n 28095: a0 = a3 <u ra\n 28098: a4 = u64 [sp + 0x28]\n 28101: a4 = a4 + t0\n 28104: a4 = a4 + a0\n 28107: a5 = a4 ^ t0\n 28110: a1 = a4 <u t0\n 28113: a1 = a0 if a5 == 0\n 28116: a0 = u64 [sp + 0x30]\n 28119: a0 = a0 + t1\n 28122: a1 = a1 + a0\n 28125: a5 = a1 <u a0\n 28128: a0 = a0 <u t1\n 28131: a2 = u64 [sp + 0x38]\n 28134: s1 = u64 [sp + 0xb0]\n 28138: a2 = a2 + s1\n 28141: a0 = a0 + a2\n 28144: a0 = a0 + a5\n 28147: a2 = u64 [sp + 0x8]\n 28150: u64 [a2] = a3\n 28152: u64 [a2 + 0x8] = a4\n 28155: u64 [a2 + 0x10] = a1\n 28158: u64 [a2 + 0x18] = a0\n 28161: sp = s0 + 0xfffffffffffffea0\n 28165: ra = u64 [sp + 0x158]\n 28169: s0 = u64 [sp + 0x150]\n 28173: s1 = u64 [sp + 0x148]\n 28177: sp = sp + 0x160\n 28181: ret\n      : @366 (gas: 1)\n 28183: trap\n      : @367 (gas: 8)\n 28184: u64 [sp + 240] = 0\n 28188: u64 [sp + 232] = 0\n 28192: u64 [sp + 224] = 0\n 28196: a0 = 0x4e487b7100000000\n 28206: a1 = sp + 0xe0\n 28210: u64 [sp + 0xf8] = a0\n 28214: a0 = 0\n 28216: ra = 302, jump @23\n      : @368 [@dyn 151] (gas: 7)\n 28222: u64 [sp + 216] = 0\n 28226: u64 [sp + 208] = 0\n 28230: u64 [sp + 192] = 0x22\n 28235: a0 = 0x4\n 28238: a1 = sp + 0xc0\n 28242: u64 [sp + 200] = 0\n 28246: ra = 304, jump @23\n      : @369 [@dyn 152] (gas: 3)\n 28252: a1 = 0x24\n 28255: a0 = 0\n 28257: ra = 306, jump @0\n      : @370 [@dyn 153] (gas: 6)\n 28263: i32 a1 = a0 + 0\n 28265: a0 = 0x1\n 28268: a2 = 0x24\n 28271: ra = 0x134\n 28275: ecalli 14 // 'seal_return'\n 28277: fallthrough\n      : @371 [@dyn 154] (gas: 27)\n 28278: sp = sp + 0xffffffffffffff80\n 28281: u64 [sp + 0x78] = ra\n 28284: u64 [sp + 0x70] = s0\n 28287: u64 [sp + 0x68] = s1\n 28290: s0 = sp + 0x80\n 28294: sp = sp & 0xfffffffffffffff0\n 28297: t0 = u64 [a1]\n 28299: t1 = u64 [a1 + 0x8]\n 28302: t2 = u64 [a1 + 0x10]\n 28305: a1 = u64 [a1 + 0x18]\n 28308: a3 = u64 [a2]\n 28310: a4 = u64 [a2 + 0x8]\n 28313: a5 = u64 [a2 + 0x10]\n 28316: a2 = u64 [a2 + 0x18]\n 28319: s1 = a0\n 28321: u64 [sp + 0x18] = a2\n 28324: u64 [sp + 0x10] = a5\n 28327: u64 [sp + 0x8] = a4\n 28330: u64 [sp] = a3\n 28332: u64 [sp + 0x38] = a1\n 28335: u64 [sp + 0x30] = t2\n 28338: u64 [sp + 0x28] = t1\n 28341: a0 = sp + 0x40\n 28344: a1 = sp + 0x20\n 28347: a2 = sp\n 28349: u64 [sp + 0x20] = t0\n 28352: ra = 310, jump @347\n      : @372 [@dyn 155] (gas: 14)\n 28358: a0 = u64 [sp + 0x50]\n 28361: a1 = u64 [sp + 0x58]\n 28364: a2 = u64 [sp + 0x40]\n 28367: a3 = u64 [sp + 0x48]\n 28370: u64 [s1 + 0x10] = a0\n 28373: u64 [s1 + 0x18] = a1\n 28376: u64 [s1] = a2\n 28378: u64 [s1 + 0x8] = a3\n 28381: sp = s0 + 0xffffffffffffff80\n 28384: ra = u64 [sp + 0x78]\n 28387: s0 = u64 [sp + 0x70]\n 28390: s1 = u64 [sp + 0x68]\n 28393: sp = sp + 0x80\n 28397: ret\n      : @373 (gas: 18)\n 28399: sp = sp + 0xffffffffffffff00\n 28403: u64 [sp + 0xf8] = ra\n 28407: u64 [sp + 0xf0] = s0\n 28411: u64 [sp + 0xe8] = s1\n 28415: s0 = sp + 0x100\n 28419: sp = sp & 0xfffffffffffffff0\n 28422: a2 = u64 [a1]\n 28424: u64 [sp + 0x20] = a2\n 28427: a2 = u64 [a1 + 0x8]\n 28430: u64 [sp + 0x10] = a2\n 28433: a2 = u64 [a1 + 0x10]\n 28436: u64 [sp + 0x8] = a2\n 28439: a1 = u64 [a1 + 0x18]\n 28442: u64 [sp] = a1\n 28444: u64 [sp + 0x18] = a0\n 28447: a0 = 0x40\n 28450: a1 = 0x20\n 28453: ra = 312, jump @0\n      : @374 [@dyn 156] (gas: 111)\n 28459: a1 = u8 [a0 + 0x1]\n 28462: a2 = u8 [a0]\n 28464: a3 = u8 [a0 + 0x2]\n 28467: a4 = u8 [a0 + 0x3]\n 28470: a1 = a1 << 0x8\n 28473: a1 = a1 | a2\n 28476: a3 = a3 << 0x10\n 28479: a4 = a4 << 0x18\n 28482: a3 = a3 | a4\n 28485: a1 = a1 | a3\n 28488: a2 = u8 [a0 + 0x5]\n 28491: a3 = u8 [a0 + 0x4]\n 28494: a4 = u8 [a0 + 0x6]\n 28497: a5 = u8 [a0 + 0x7]\n 28500: a2 = a2 << 0x8\n 28503: a2 = a2 | a3\n 28506: a4 = a4 << 0x10\n 28509: a5 = a5 << 0x18\n 28512: a4 = a4 | a5\n 28515: a2 = a2 | a4\n 28518: a2 = a2 << 0x20\n 28521: t0 = a2 | a1\n 28524: a2 = u8 [a0 + 0x9]\n 28527: a3 = u8 [a0 + 0x8]\n 28530: a4 = u8 [a0 + 0xa]\n 28533: a5 = u8 [a0 + 0xb]\n 28536: a2 = a2 << 0x8\n 28539: a2 = a2 | a3\n 28542: a4 = a4 << 0x10\n 28545: a5 = a5 << 0x18\n 28548: a4 = a4 | a5\n 28551: a2 = a2 | a4\n 28554: a3 = u8 [a0 + 0xd]\n 28557: a4 = u8 [a0 + 0xc]\n 28560: a5 = u8 [a0 + 0xe]\n 28563: s1 = u8 [a0 + 0xf]\n 28566: a3 = a3 << 0x8\n 28569: a3 = a3 | a4\n 28572: a5 = a5 << 0x10\n 28575: s1 = s1 << 0x18\n 28578: a5 = a5 | s1\n 28581: a3 = a3 | a5\n 28584: a3 = a3 << 0x20\n 28587: a2 = a2 | a3\n 28590: a3 = u8 [a0 + 0x11]\n 28593: a4 = u8 [a0 + 0x10]\n 28596: a5 = u8 [a0 + 0x12]\n 28599: s1 = u8 [a0 + 0x13]\n 28602: a3 = a3 << 0x8\n 28605: a3 = a3 | a4\n 28608: a5 = a5 << 0x10\n 28611: s1 = s1 << 0x18\n 28614: a5 = a5 | s1\n 28617: a3 = a3 | a5\n 28620: a4 = u8 [a0 + 0x15]\n 28623: a5 = u8 [a0 + 0x14]\n 28626: s1 = u8 [a0 + 0x16]\n 28629: a1 = u8 [a0 + 0x17]\n 28632: a4 = a4 << 0x8\n 28635: a4 = a4 | a5\n 28638: s1 = s1 << 0x10\n 28641: a1 = a1 << 0x18\n 28644: a1 = a1 | s1\n 28647: a1 = a1 | a4\n 28650: a1 = a1 << 0x20\n 28653: a3 = a3 | a1\n 28656: a1 = u8 [a0 + 0x19]\n 28659: a4 = u8 [a0 + 0x18]\n 28662: a5 = u8 [a0 + 0x1a]\n 28665: s1 = u8 [a0 + 0x1b]\n 28668: a1 = a1 << 0x8\n 28671: a1 = a1 | a4\n 28674: a5 = a5 << 0x10\n 28677: s1 = s1 << 0x18\n 28680: a5 = a5 | s1\n 28683: a1 = a1 | a5\n 28686: a4 = u8 [a0 + 0x1d]\n 28689: a5 = u8 [a0 + 0x1c]\n 28692: s1 = u8 [a0 + 0x1e]\n 28695: a0 = u8 [a0 + 0x1f]\n 28698: a4 = a4 << 0x8\n 28701: a4 = a4 | a5\n 28704: s1 = s1 << 0x10\n 28707: a0 = a0 << 0x18\n 28710: a0 = a0 | s1\n 28713: a0 = a0 | a4\n 28716: a0 = a0 << 0x20\n 28719: a0 = a0 | a1\n 28722: a4 = reverse a0\n 28724: u64 [sp + 0x38] = a4\n 28727: s1 = reverse a3\n 28729: a2 = reverse a2\n 28731: u64 [sp + 0x30] = a2\n 28734: a1 = reverse t0\n 28736: u64 [sp + 0x28] = a1\n 28739: a0 = u64 [sp]\n 28741: u64 [sp + 0xb8] = a0\n 28745: a0 = u64 [sp + 0x8]\n 28748: u64 [sp + 0xb0] = a0\n 28752: a0 = u64 [sp + 0x10]\n 28755: u64 [sp + 0xa8] = a0\n 28759: a0 = u64 [sp + 0x20]\n 28762: u64 [sp + 0xa0] = a0\n 28766: u64 [sp + 0x98] = a1\n 28770: u64 [sp + 0x90] = a2\n 28774: u64 [sp + 0x88] = s1\n 28778: a0 = sp + 0xc0\n 28782: a1 = sp + 0xa0\n 28786: a2 = sp + 0x80\n 28790: u64 [sp + 0x80] = a4\n 28794: ra = 314, jump @347\n      : @375 [@dyn 157] (gas: 58)\n 28800: t2 = s1\n 28802: a3 = u64 [sp + 0xc8]\n 28806: a0 = u64 [sp + 0xd8]\n 28810: u64 [sp + 0x10] = a0\n 28813: a4 = u64 [sp + 0xc0]\n 28817: t1 = u64 [sp + 0xd0]\n 28821: a5 = a3 ^ s1\n 28824: a1 = a3 <u s1\n 28827: a2 = u64 [sp + 0x38]\n 28830: s1 = a4 <u a2\n 28833: a1 = s1 if a5 == 0\n 28836: a3 = a3 - t2\n 28839: a3 = a3 - s1\n 28842: u64 [sp + 0x8] = a3\n 28845: a4 = a4 - a2\n 28848: a5 = a4 + 0x1f\n 28851: a4 = a5 <u a4\n 28854: a3 = a3 + a4\n 28857: a5 = a5 & 0xffffffffffffffe0\n 28860: a0 = a3 + t2\n 28863: a2 = a2 + a5\n 28866: u64 [sp + 0x20] = a2\n 28869: a5 = a2 <u a5\n 28872: t0 = a0 + a5\n 28875: a0 = t0 ^ a3\n 28878: a2 = t0 <u a3\n 28881: a2 = a5 if a0 == 0\n 28884: s1 = u64 [sp + 0x30]\n 28887: a0 = t1 - s1\n 28890: a5 = t1 <u s1\n 28893: t1 = s1\n 28895: ra = u64 [sp + 0x28]\n 28898: s1 = u64 [sp + 0x10]\n 28901: s1 = s1 - ra\n 28904: s1 = s1 - a5\n 28907: a5 = a0 <u a1\n 28910: s1 = s1 - a5\n 28913: a0 = a0 - a1\n 28916: a1 = u64 [sp + 0x8]\n 28919: a1 = a3 <u a1\n 28922: a1 = a4 if a4 == 0\n 28925: a1 = a1 + a0\n 28928: a0 = a1 <u a0\n 28931: a3 = a1 + t1\n 28934: a5 = a3 + a2\n 28937: a1 = a3 <u a1\n 28940: a2 = a5 <u a3\n 28943: s1 = s1 + ra\n 28946: a0 = a0 + s1\n 28949: a0 = a0 + a1\n 28952: s1 = a0 + a2\n 28955: a0 = s1 >u 0\n 28957: a1 = a5 >u 0\n 28959: a1 = a0 if s1 != 0\n 28962: a0 = a5 | s1\n 28965: a2 = t0 >u 0\n 28967: a2 = a1 if a0 != 0\n 28970: jump @379 if a2 != 0\n      : @376 (gas: 15)\n 28974: a4 = t1\n 28976: a0 = u64 [sp + 0x38]\n 28979: a1 = u64 [sp + 0x20]\n 28982: a0 = a1 <u a0\n 28985: a1 = t0 ^ t2\n 28988: a2 = t0 <u t2\n 28991: a2 = a0 if a1 == 0\n 28994: a0 = a5 <u t1\n 28997: a1 = s1 ^ ra\n 29000: a3 = s1 <u ra\n 29003: a3 = a0 if a1 == 0\n 29006: a0 = a5 ^ t1\n 29009: a0 = a0 | a1\n 29012: a3 = a2 if a0 == 0\n 29015: jump @379 if a3 != 0\n      : @377 (gas: 6)\n 29019: a0 = 0x40\n 29022: a1 = 0x20\n 29025: u64 [sp + 0x10] = t2\n 29028: u64 [sp + 0x8] = t0\n 29031: u64 [sp] = a5\n 29033: ra = 316, jump @0\n      : @378 [@dyn 158] (gas: 82)\n 29039: a1 = reverse s1\n 29041: a2 = u64 [sp]\n 29043: a2 = reverse a2\n 29045: a3 = u64 [sp + 0x8]\n 29048: a3 = reverse a3\n 29050: a4 = u64 [sp + 0x20]\n 29053: a4 = reverse a4\n 29055: u8 [a0 + 0x18] = a4\n 29058: a5 = a4 >> 0x38\n 29061: u8 [a0 + 0x1f] = a5\n 29064: a5 = a4 >> 0x30\n 29067: u8 [a0 + 0x1e] = a5\n 29070: a5 = a4 >> 0x28\n 29073: u8 [a0 + 0x1d] = a5\n 29076: a5 = a4 >> 0x20\n 29079: u8 [a0 + 0x1c] = a5\n 29082: a5 = a4 >> 0x18\n 29085: u8 [a0 + 0x1b] = a5\n 29088: a5 = a4 >> 0x10\n 29091: u8 [a0 + 0x1a] = a5\n 29094: a4 = a4 >> 0x8\n 29097: u8 [a0 + 0x19] = a4\n 29100: u8 [a0 + 0x10] = a3\n 29103: a4 = a3 >> 0x38\n 29106: u8 [a0 + 0x17] = a4\n 29109: a4 = a3 >> 0x30\n 29112: u8 [a0 + 0x16] = a4\n 29115: a4 = a3 >> 0x28\n 29118: u8 [a0 + 0x15] = a4\n 29121: a4 = a3 >> 0x20\n 29124: u8 [a0 + 0x14] = a4\n 29127: a4 = a3 >> 0x18\n 29130: u8 [a0 + 0x13] = a4\n 29133: a4 = a3 >> 0x10\n 29136: u8 [a0 + 0x12] = a4\n 29139: a3 = a3 >> 0x8\n 29142: u8 [a0 + 0x11] = a3\n 29145: u8 [a0 + 0x8] = a2\n 29148: a3 = a2 >> 0x38\n 29151: u8 [a0 + 0xf] = a3\n 29154: a3 = a2 >> 0x30\n 29157: u8 [a0 + 0xe] = a3\n 29160: a3 = a2 >> 0x28\n 29163: u8 [a0 + 0xd] = a3\n 29166: a3 = a2 >> 0x20\n 29169: u8 [a0 + 0xc] = a3\n 29172: a3 = a2 >> 0x18\n 29175: u8 [a0 + 0xb] = a3\n 29178: a3 = a2 >> 0x10\n 29181: u8 [a0 + 0xa] = a3\n 29184: a2 = a2 >> 0x8\n 29187: u8 [a0 + 0x9] = a2\n 29190: u8 [a0] = a1\n 29192: a2 = a1 >> 0x38\n 29195: u8 [a0 + 0x7] = a2\n 29198: a2 = a1 >> 0x30\n 29201: u8 [a0 + 0x6] = a2\n 29204: a2 = a1 >> 0x28\n 29207: u8 [a0 + 0x5] = a2\n 29210: a2 = a1 >> 0x20\n 29213: u8 [a0 + 0x4] = a2\n 29216: a2 = a1 >> 0x18\n 29219: u8 [a0 + 0x3] = a2\n 29222: a2 = a1 >> 0x10\n 29225: u8 [a0 + 0x2] = a2\n 29228: a1 = a1 >> 0x8\n 29231: u8 [a0 + 0x1] = a1\n 29234: a0 = u64 [sp + 0x18]\n 29237: a1 = u64 [sp + 0x38]\n 29240: u64 [a0] = a1\n 29242: a1 = u64 [sp + 0x28]\n 29245: u64 [a0 + 0x18] = a1\n 29248: a1 = u64 [sp + 0x10]\n 29251: u64 [a0 + 0x8] = a1\n 29254: a1 = u64 [sp + 0x30]\n 29257: u64 [a0 + 0x10] = a1\n 29260: sp = s0 + 0xffffffffffffff00\n 29264: ra = u64 [sp + 0xf8]\n 29268: s0 = u64 [sp + 0xf0]\n 29272: s1 = u64 [sp + 0xe8]\n 29276: sp = sp + 0x100\n 29280: ret\n      : @379 (gas: 8)\n 29282: u64 [sp + 112] = 0\n 29285: u64 [sp + 104] = 0\n 29288: u64 [sp + 96] = 0\n 29291: a0 = 0x4e487b7100000000\n 29301: a1 = sp + 0x60\n 29304: u64 [sp + 0x78] = a0\n 29307: a0 = 0\n 29309: ra = 318, jump @23\n      : @380 [@dyn 159] (gas: 7)\n 29315: u64 [sp + 88] = 0\n 29318: u64 [sp + 80] = 0\n 29321: u64 [sp + 64] = 0x41\n 29325: a0 = 0x4\n 29328: a1 = sp + 0x40\n 29331: u64 [sp + 72] = 0\n 29334: ra = 320, jump @23\n      : @381 [@dyn 160] (gas: 3)\n 29340: a1 = 0x24\n 29343: a0 = 0\n 29345: ra = 322, jump @0\n      : @382 [@dyn 161] (gas: 6)\n 29351: i32 a1 = a0 + 0\n 29353: a0 = 0x1\n 29356: a2 = 0x24\n 29359: ra = 0x144\n 29363: ecalli 14 // 'seal_return'\n 29365: fallthrough\n      : @383 [@dyn 162] (gas: 14)\n 29366: sp = sp + 0xffffffffffffff60\n 29370: u64 [sp + 0x98] = ra\n 29374: u64 [sp + 0x90] = s0\n 29378: u64 [sp + 0x88] = s1\n 29382: s0 = sp + 0xa0\n 29386: sp = sp & 0xfffffffffffffff0\n 29389: a3 = u64 [a2 + 0x10]\n 29392: a4 = u64 [a2 + 0x18]\n 29395: a5 = u64 [a2 + 0x8]\n 29398: a2 = u64 [a2]\n 29400: a4 = a4 | a5\n 29403: a2 = a2 | a3\n 29406: a2 = a2 | a4\n 29409: jump @386 if a2 != 0\n      : @384 (gas: 12)\n 29412: s1 = a0\n 29414: a2 = u64 [a1 + 0x18]\n 29417: a0 = u64 [a1 + 0x10]\n 29420: a3 = u64 [a1 + 0x8]\n 29423: a1 = u64 [a1]\n 29425: u64 [sp] = a1\n 29427: u64 [sp + 0x8] = a3\n 29430: u64 [sp + 0x10] = a0\n 29433: a0 = sp + 0x20\n 29436: a1 = sp\n 29438: u64 [sp + 0x18] = a2\n 29441: ra = 326, jump @373\n      : @385 [@dyn 163] (gas: 14)\n 29447: a0 = u64 [sp + 0x30]\n 29450: a1 = u64 [sp + 0x38]\n 29453: a2 = u64 [sp + 0x20]\n 29456: a3 = u64 [sp + 0x28]\n 29459: u64 [s1 + 0x10] = a0\n 29462: u64 [s1 + 0x18] = a1\n 29465: u64 [s1] = a2\n 29467: u64 [s1 + 0x8] = a3\n 29470: sp = s0 + 0xffffffffffffff60\n 29474: ra = u64 [sp + 0x98]\n 29478: s0 = u64 [sp + 0x90]\n 29482: s1 = u64 [sp + 0x88]\n 29486: sp = sp + 0xa0\n 29490: ret\n      : @386 (gas: 8)\n 29492: u64 [sp + 112] = 0\n 29495: u64 [sp + 104] = 0\n 29498: u64 [sp + 96] = 0\n 29501: a0 = 0x4e487b7100000000\n 29511: a1 = sp + 0x60\n 29514: u64 [sp + 0x78] = a0\n 29517: a0 = 0\n 29519: ra = 328, jump @23\n      : @387 [@dyn 164] (gas: 7)\n 29525: u64 [sp + 88] = 0\n 29528: u64 [sp + 80] = 0\n 29531: u64 [sp + 72] = 0\n 29534: a0 = 0x4\n 29537: a1 = sp + 0x40\n 29540: u64 [sp + 64] = 0\n 29543: ra = 330, jump @23\n      : @388 [@dyn 165] (gas: 3)\n 29549: a1 = 0x24\n 29552: a0 = 0\n 29554: ra = 332, jump @0\n      : @389 [@dyn 166] (gas: 6)\n 29560: i32 a1 = a0 + 0\n 29562: a0 = 0x1\n 29565: a2 = 0x24\n 29568: ra = 0x14e\n 29572: ecalli 14 // 'seal_return'\n 29574: fallthrough\n      : @390 [@dyn 167] (gas: 14)\n 29575: sp = sp + 0xffffffffffffffa0\n 29578: u64 [sp + 0x58] = ra\n 29581: u64 [sp + 0x50] = s0\n 29584: u64 [sp + 0x48] = s1\n 29587: s0 = sp + 0x60\n 29590: sp = sp & 0xfffffffffffffff0\n 29593: s1 = a0\n 29595: u64 [sp + 24] = 0\n 29598: u64 [sp + 16] = 0\n 29601: u64 [sp + 0] = 0x1\n 29604: a0 = sp + 0x20\n 29607: a1 = sp\n 29609: u64 [sp + 8] = 0\n 29612: ra = 336, jump @373\n      : @391 [@dyn 168] (gas: 14)\n 29618: a0 = u64 [sp + 0x30]\n 29621: a1 = u64 [sp + 0x38]\n 29624: a2 = u64 [sp + 0x20]\n 29627: a3 = u64 [sp + 0x28]\n 29630: u64 [s1 + 0x10] = a0\n 29633: u64 [s1 + 0x18] = a1\n 29636: u64 [s1] = a2\n 29638: u64 [s1 + 0x8] = a3\n 29641: sp = s0 + 0xffffffffffffffa0\n 29644: ra = u64 [sp + 0x58]\n 29647: s0 = u64 [sp + 0x50]\n 29650: s1 = u64 [sp + 0x48]\n 29653: sp = sp + 0x60\n 29656: ret\n      : @392 (gas: 8)\n 29658: a0 = u64 [sp + 0x110]\n 29662: a1 = u64 [sp + 0x118]\n 29666: a2 = u64 [sp + 0x108]\n 29670: a3 = u64 [sp + 0x100]\n 29674: a1 = a1 | a2\n 29677: a0 = a0 | a3\n 29680: a0 = a0 | a1\n 29683: jump @401 if a0 != 0\n      : @393 (gas: 2)\n 29687: a0 = i32 [0x20078]\n 29692: jump @401 if a0 <=u 3\n      : @394 (gas: 7)\n 29697: u64 [sp + 216] = 0\n 29701: u64 [sp + 208] = 0\n 29705: u64 [sp + 192] = 0x1\n 29710: a0 = sp + 0xe0\n 29714: a1 = sp + 0xc0\n 29718: u64 [sp + 200] = 0\n 29722: ra = 338, jump @373\n      : @395 [@dyn 169] (gas: 11)\n 29728: a0 = u64 [sp + 0xf8]\n 29732: u64 [sp + 0x40] = a0\n 29735: a0 = u64 [sp + 0xf0]\n 29739: u64 [sp + 0x48] = a0\n 29742: a0 = u64 [sp + 0xe8]\n 29746: u64 [sp + 0x50] = a0\n 29749: a0 = u64 [sp + 0xe0]\n 29753: u64 [sp + 0x58] = a0\n 29756: a0 = 0x40\n 29759: a1 = 0x20\n 29762: ra = 340, jump @0\n      : @396 [@dyn 170] (gas: 100)\n 29768: a1 = u8 [a0 + 0x11]\n 29771: a2 = u8 [a0 + 0x10]\n 29774: a3 = u8 [a0 + 0x12]\n 29777: a4 = u8 [a0 + 0x13]\n 29780: a1 = a1 << 0x8\n 29783: a1 = a1 | a2\n 29786: a3 = a3 << 0x10\n 29789: a4 = a4 << 0x18\n 29792: a3 = a3 | a4\n 29795: a1 = a1 | a3\n 29798: a2 = u8 [a0 + 0x15]\n 29801: a3 = u8 [a0 + 0x14]\n 29804: a4 = u8 [a0 + 0x16]\n 29807: a5 = u8 [a0 + 0x17]\n 29810: a2 = a2 << 0x8\n 29813: a2 = a2 | a3\n 29816: a4 = a4 << 0x10\n 29819: a5 = a5 << 0x18\n 29822: a4 = a4 | a5\n 29825: a2 = a2 | a4\n 29828: a2 = a2 << 0x20\n 29831: t0 = a2 | a1\n 29834: a2 = u8 [a0 + 0x1]\n 29837: a3 = u8 [a0]\n 29839: a4 = u8 [a0 + 0x2]\n 29842: a5 = u8 [a0 + 0x3]\n 29845: a2 = a2 << 0x8\n 29848: a2 = a2 | a3\n 29851: a4 = a4 << 0x10\n 29854: a5 = a5 << 0x18\n 29857: a4 = a4 | a5\n 29860: a2 = a2 | a4\n 29863: a3 = u8 [a0 + 0x5]\n 29866: a4 = u8 [a0 + 0x4]\n 29869: a5 = u8 [a0 + 0x6]\n 29872: s1 = u8 [a0 + 0x7]\n 29875: a3 = a3 << 0x8\n 29878: a3 = a3 | a4\n 29881: a5 = a5 << 0x10\n 29884: s1 = s1 << 0x18\n 29887: a5 = a5 | s1\n 29890: a3 = a3 | a5\n 29893: a3 = a3 << 0x20\n 29896: a2 = a2 | a3\n 29899: a3 = u8 [a0 + 0x19]\n 29902: a4 = u8 [a0 + 0x18]\n 29905: a5 = u8 [a0 + 0x1a]\n 29908: s1 = u8 [a0 + 0x1b]\n 29911: a3 = a3 << 0x8\n 29914: a3 = a3 | a4\n 29917: a5 = a5 << 0x10\n 29920: s1 = s1 << 0x18\n 29923: a5 = a5 | s1\n 29926: a3 = a3 | a5\n 29929: a4 = u8 [a0 + 0x1d]\n 29932: a5 = u8 [a0 + 0x1c]\n 29935: s1 = u8 [a0 + 0x1e]\n 29938: a1 = u8 [a0 + 0x1f]\n 29941: a4 = a4 << 0x8\n 29944: a4 = a4 | a5\n 29947: s1 = s1 << 0x10\n 29950: a1 = a1 << 0x18\n 29953: a1 = a1 | s1\n 29956: a1 = a1 | a4\n 29959: a1 = a1 << 0x20\n 29962: a3 = a3 | a1\n 29965: a1 = u8 [a0 + 0x9]\n 29968: a4 = u8 [a0 + 0x8]\n 29971: a5 = u8 [a0 + 0xa]\n 29974: s1 = u8 [a0 + 0xb]\n 29977: a1 = a1 << 0x8\n 29980: a1 = a1 | a4\n 29983: a5 = a5 << 0x10\n 29986: s1 = s1 << 0x18\n 29989: a5 = a5 | s1\n 29992: a1 = a1 | a5\n 29995: a4 = u8 [a0 + 0xd]\n 29998: a5 = u8 [a0 + 0xc]\n 30001: s1 = u8 [a0 + 0xe]\n 30004: a0 = u8 [a0 + 0xf]\n 30007: a4 = a4 << 0x8\n 30010: a4 = a4 | a5\n 30013: s1 = s1 << 0x10\n 30016: a0 = a0 << 0x18\n 30019: a0 = a0 | s1\n 30022: a0 = a0 | a4\n 30025: a0 = a0 << 0x20\n 30028: a0 = a0 | a1\n 30031: s1 = reverse a0\n 30033: a3 = reverse a3\n 30035: a4 = reverse a2\n 30037: a2 = reverse t0\n 30039: a0 = a2 | a4\n 30042: a1 = a3 | s1\n 30045: a1 = a1 | a0\n 30048: a1 = a1 >> 0x20\n 30051: a0 = a0 | s1\n 30054: a0 = a0 << 0x20\n 30057: a0 = a0 | a1\n 30060: jump @400 if a0 != 0\n      : @397 (gas: 19)\n 30064: a0 = a3 + 0x20\n 30067: u64 [sp + 0x18] = a0\n 30070: a0 = a0 <u a3\n 30073: a1 = a2 + a0\n 30076: u64 [sp + 0x8] = a1\n 30079: a1 = a1 <u a2\n 30082: a1 = a0 if a0 == 0\n 30085: a1 = a1 + s1\n 30088: u64 [sp + 0x10] = a1\n 30091: a0 = a1 <u s1\n 30094: a0 = a0 + a4\n 30097: u64 [sp + 0x20] = a0\n 30100: i32 a0 = a3 + 0\n 30102: a1 = 0x20\n 30105: u64 [sp] = a0\n 30107: u64 [sp + 0x30] = a3\n 30110: u64 [sp + 0x28] = a2\n 30113: u64 [sp + 0x38] = a4\n 30116: ra = 342, jump @0\n      : @398 [@dyn 171] (gas: 52)\n 30122: u8 [a0 + 31] = 0x20\n 30126: u8 [a0 + 30] = 0\n 30129: u8 [a0 + 29] = 0\n 30132: u8 [a0 + 28] = 0\n 30135: u8 [a0 + 27] = 0\n 30138: u8 [a0 + 26] = 0\n 30141: u8 [a0 + 25] = 0\n 30144: u8 [a0 + 24] = 0\n 30147: u8 [a0 + 23] = 0\n 30150: u8 [a0 + 22] = 0\n 30153: u8 [a0 + 21] = 0\n 30156: u8 [a0 + 20] = 0\n 30159: u8 [a0 + 19] = 0\n 30162: u8 [a0 + 18] = 0\n 30165: u8 [a0 + 17] = 0\n 30168: u8 [a0 + 16] = 0\n 30171: u8 [a0 + 15] = 0\n 30174: u8 [a0 + 14] = 0\n 30177: u8 [a0 + 13] = 0\n 30180: u8 [a0 + 12] = 0\n 30183: u8 [a0 + 11] = 0\n 30186: u8 [a0 + 10] = 0\n 30189: u8 [a0 + 9] = 0\n 30192: u8 [a0 + 8] = 0\n 30195: u8 [a0 + 7] = 0\n 30198: u8 [a0 + 6] = 0\n 30201: u8 [a0 + 5] = 0\n 30204: u8 [a0 + 4] = 0\n 30207: u8 [a0 + 3] = 0\n 30210: u8 [a0 + 2] = 0\n 30213: u8 [a0 + 1] = 0\n 30216: u8 [a0 + 0] = 0\n 30218: a0 = u64 [sp + 0x8]\n 30221: u64 [sp + 0x68] = a0\n 30224: a0 = u64 [sp + 0x18]\n 30227: u64 [sp + 0x60] = a0\n 30230: a0 = u64 [sp + 0x40]\n 30233: u64 [sp + 0x98] = a0\n 30237: a0 = u64 [sp + 0x48]\n 30240: u64 [sp + 0x90] = a0\n 30244: a0 = u64 [sp + 0x50]\n 30247: u64 [sp + 0x88] = a0\n 30251: a0 = u64 [sp + 0x58]\n 30254: u64 [sp + 0x80] = a0\n 30258: a0 = u64 [sp + 0x10]\n 30261: u64 [sp + 0x70] = a0\n 30264: a0 = sp + 0xa0\n 30268: a1 = sp + 0x80\n 30272: a2 = sp + 0x60\n 30275: a3 = u64 [sp + 0x20]\n 30278: u64 [sp + 0x78] = a3\n 30281: ra = 344, jump @468\n      : @399 [@dyn 172] (gas: 30)\n 30287: a0 = u64 [sp + 0xa8]\n 30291: t0 = u64 [sp + 0xb8]\n 30295: t1 = u64 [sp + 0xa0]\n 30299: a3 = u64 [sp + 0xb0]\n 30303: a1 = u64 [sp + 0x28]\n 30306: a4 = a0 ^ a1\n 30309: a5 = a0 <u a1\n 30312: t2 = a1\n 30314: a2 = u64 [sp + 0x30]\n 30317: a1 = t1 <u a2\n 30320: a5 = a1 if a4 == 0\n 30323: a4 = a3 - s1\n 30326: a3 = a3 <u s1\n 30329: s1 = u64 [sp + 0x38]\n 30332: s1 = t0 - s1\n 30335: s1 = s1 - a3\n 30338: a3 = a4 <u a5\n 30341: s1 = s1 - a3\n 30344: a4 = a4 - a5\n 30347: a0 = a0 - t2\n 30350: a1 = a0 - a1\n 30353: a0 = t1 - a2\n 30356: a1 = a1 | s1\n 30359: a2 = a0 | a4\n 30362: a2 = a2 | a1\n 30365: a1 = a1 | a4\n 30368: a2 = a2 >> 0x20\n 30371: a1 = a1 << 0x20\n 30374: a1 = a1 | a2\n 30377: jump @403 if a1 == 0\n      : @400 (gas: 1)\n 30380: trap\n      : @401 (gas: 3)\n 30381: a0 = 0\n 30383: a1 = 0\n 30385: ra = 346, jump @0\n      : @402 [@dyn 173] (gas: 5)\n 30391: i32 a1 = a0 + 0\n 30393: a0 = 0x1\n 30396: a2 = 0\n 30398: ecalli 14 // 'seal_return'\n 30400: fallthrough\n      : @403 (gas: 4)\n 30401: i32 s1 = a0 + 0\n 30403: a0 = u64 [sp]\n 30405: a1 = s1\n 30407: ra = 348, jump @0\n      : @404 [@dyn 174] (gas: 6)\n 30413: i32 a1 = a0 + 0\n 30415: a0 = 0\n 30417: a2 = s1\n 30419: ra = 0x15e\n 30423: ecalli 14 // 'seal_return'\n 30425: fallthrough\n      : @405 [@dyn 175] (gas: 18)\n 30426: sp = sp + 0xffffffffffffffc0\n 30429: u64 [sp + 0x38] = ra\n 30432: u64 [sp + 0x30] = s0\n 30435: u64 [sp + 0x28] = s1\n 30438: s0 = sp + 0x40\n 30441: sp = sp & 0xffffffffffffffe0\n 30444: a2 = u64 [a1 + 0x10]\n 30447: a3 = u64 [a1 + 0x18]\n 30450: a4 = u64 [a1 + 0x8]\n 30453: a1 = u64 [a1]\n 30455: a3 = a3 | a4\n 30458: a4 = a1 | a2\n 30461: a4 = a4 | a3\n 30464: a4 = a4 >> 0x20\n 30467: a2 = a2 | a3\n 30470: a2 = a2 << 0x20\n 30473: a2 = a2 | a4\n 30476: jump @409 if a2 != 0\n      : @406 (gas: 5)\n 30479: s1 = a0\n 30481: i32 a1 = a1 + 0\n 30483: i32 a0 = sp + 0\n 30485: ecalli 3 // 'call_data_load'\n 30487: fallthrough\n      : @407 (gas: 10)\n 30488: a0 = u64 [sp + 0x10]\n 30491: a1 = u64 [sp + 0x18]\n 30494: a2 = 0x100000000\n 30504: a2 = a2 ^ a0\n 30507: a2 = a2 | a1\n 30510: a3 = a0 >> 0x20\n 30513: a3 = a3 <u 0x1\n 30516: a3 = 0 if a1 != 0\n 30518: a3 = 0 if a2 == 0\n 30520: jump @410 if a3 == 0\n      : @408 (gas: 12)\n 30523: a2 = u64 [sp]\n 30525: a3 = u64 [sp + 0x8]\n 30528: u64 [s1] = a2\n 30530: u64 [s1 + 0x8] = a3\n 30533: u64 [s1 + 0x10] = a0\n 30536: u64 [s1 + 0x18] = a1\n 30539: sp = s0 + 0xffffffffffffffc0\n 30542: ra = u64 [sp + 0x38]\n 30545: s0 = u64 [sp + 0x30]\n 30548: s1 = u64 [sp + 0x28]\n 30551: sp = sp + 0x40\n 30554: ret\n      : @409 (gas: 1)\n 30556: trap\n      : @410 (gas: 3)\n 30557: a0 = 0\n 30559: a1 = 0\n 30561: ra = 352, jump @0\n      : @411 [@dyn 176] (gas: 6)\n 30567: i32 a1 = a0 + 0\n 30569: a0 = 0x1\n 30572: a2 = 0\n 30574: ra = 0x162\n 30578: ecalli 14 // 'seal_return'\n 30580: fallthrough\n      : @412 [@dyn 177] (gas: 52)\n 30581: sp = sp + 0xffffffffffffff80\n 30584: u64 [sp + 0x78] = ra\n 30587: u64 [sp + 0x70] = s0\n 30590: u64 [sp + 0x68] = s1\n 30593: s0 = sp + 0x80\n 30597: sp = sp & 0xffffffffffffffe0\n 30600: t2 = u64 [a1 + 0x10]\n 30603: a5 = u64 [a1 + 0x8]\n 30606: t0 = u64 [a2 + 0x8]\n 30609: s1 = u64 [a1]\n 30611: u64 [sp + 0x10] = s1\n 30614: a4 = u64 [a2]\n 30616: u64 [sp + 0x18] = a4\n 30619: ra = u64 [a2 + 0x10]\n 30622: a3 = t0 ^ a5\n 30625: u64 [sp + 0x38] = a3\n 30628: a3 = t0 <u a5\n 30631: a4 = a4 <u s1\n 30634: t1 = u64 [sp + 0x38]\n 30637: a3 = a4 if t1 == 0\n 30640: t1 = a4\n 30642: a1 = u64 [a1 + 0x18]\n 30645: u64 [sp + 0x38] = a1\n 30648: a1 = u64 [a2 + 0x18]\n 30651: u64 [sp + 0x20] = a1\n 30654: a1 = ra - t2\n 30657: a2 = a1 - a3\n 30660: u64 [sp + 0x28] = a2\n 30663: a2 = a1 <u a3\n 30666: u64 [sp + 0x30] = t2\n 30669: a3 = ra <u t2\n 30672: a1 = u64 [sp + 0x38]\n 30675: a4 = u64 [sp + 0x20]\n 30678: a1 = a4 - a1\n 30681: a1 = a1 - a3\n 30684: t2 = a1 - a2\n 30687: s1 = t0 - a5\n 30690: a2 = s1 - t1\n 30693: t0 = u64 [sp + 0x10]\n 30696: a1 = u64 [sp + 0x18]\n 30699: a3 = a1 - t0\n 30702: a4 = a2 >u 0\n 30704: a3 = a3 <u 0x20\n 30707: a3 = a3 ^ 0x1\n 30710: a3 = a4 if a2 != 0\n 30713: a2 = t2 >s 0\n 30715: a1 = u64 [sp + 0x28]\n 30718: a4 = a1 >u 0\n 30720: a4 = a2 if t2 != 0\n 30723: a1 = a1 | t2\n 30726: a3 = a4 if a1 != 0\n 30729: jump @418 if a3 == 0\n      : @413 (gas: 11)\n 30732: s1 = a0\n 30734: a2 = u64 [sp + 0x30]\n 30737: a0 = t0 | a2\n 30740: a1 = u64 [sp + 0x38]\n 30743: a1 = a1 | a5\n 30746: a0 = a0 | a1\n 30749: a0 = a0 >> 0x20\n 30752: a1 = a1 | a2\n 30755: a1 = a1 << 0x20\n 30758: a0 = a0 | a1\n 30761: jump @417 if a0 != 0\n      : @414 (gas: 4)\n 30764: i32 a1 = t0 + 0\n 30766: i32 a0 = sp + 0x40\n 30769: ecalli 3 // 'call_data_load'\n 30771: fallthrough\n      : @415 (gas: 10)\n 30772: a0 = u64 [sp + 0x50]\n 30775: a1 = u64 [sp + 0x58]\n 30778: a2 = 0x100000000\n 30788: a2 = a2 ^ a0\n 30791: a2 = a2 | a1\n 30794: a3 = a0 >> 0x20\n 30797: a3 = a3 <u 0x1\n 30800: a3 = 0 if a1 != 0\n 30802: a3 = 0 if a2 == 0\n 30804: jump @418 if a3 == 0\n      : @416 (gas: 12)\n 30807: a2 = u64 [sp + 0x48]\n 30810: a3 = u64 [sp + 0x40]\n 30813: u64 [s1 + 0x8] = a2\n 30816: u64 [s1] = a3\n 30818: u64 [s1 + 0x10] = a0\n 30821: u64 [s1 + 0x18] = a1\n 30824: sp = s0 + 0xffffffffffffff80\n 30827: ra = u64 [sp + 0x78]\n 30830: s0 = u64 [sp + 0x70]\n 30833: s1 = u64 [sp + 0x68]\n 30836: sp = sp + 0x80\n 30840: ret\n      : @417 (gas: 1)\n 30842: trap\n      : @418 (gas: 3)\n 30843: a0 = 0\n 30845: a1 = 0\n 30847: ra = 356, jump @0\n      : @419 [@dyn 178] (gas: 6)\n 30853: i32 a1 = a0 + 0\n 30855: a0 = 0x1\n 30858: a2 = 0\n 30860: ra = 0x166\n 30864: ecalli 14 // 'seal_return'\n 30866: fallthrough\n      : @420 [@dyn 179] (gas: 9)\n 30867: a2 = u64 [a1 + 0x18]\n 30870: a3 = u64 [a1 + 0x10]\n 30873: a4 = u64 [a1 + 0x8]\n 30876: a1 = u64 [a1]\n 30878: u64 [a0 + 0x18] = a2\n 30881: u64 [a0 + 0x10] = a3\n 30884: u64 [a0 + 0x8] = a4\n 30887: u64 [a0] = a1\n 30889: ret\n      : @421 (gas: 8)\n 30891: a0 = u64 [sp + 0x30]\n 30894: a1 = u64 [sp + 0x38]\n 30897: a2 = u64 [sp + 0x28]\n 30900: a3 = u64 [sp + 0x20]\n 30903: a1 = a1 | a2\n 30906: a0 = a0 | a3\n 30909: a0 = a0 | a1\n 30912: jump @429 if a0 != 0\n      : @422 (gas: 2)\n 30916: a0 = i32 [0x20078]\n 30921: jump @429 if a0 <=u 35\n      : @423 (gas: 4)\n 30926: i32 a0 = sp + 0x40\n 30929: a1 = 0x4\n 30932: ecalli 3 // 'call_data_load'\n 30934: fallthrough\n      : @424 (gas: 10)\n 30935: a0 = u64 [sp + 0x50]\n 30938: a1 = u64 [sp + 0x58]\n 30941: a2 = 0x100000000\n 30951: a2 = a2 ^ a0\n 30954: a2 = a2 | a1\n 30957: a3 = a0 >> 0x20\n 30960: a3 = a3 <u 0x1\n 30963: a3 = 0 if a1 != 0\n 30965: a3 = 0 if a2 == 0\n 30967: jump @429 if a3 == 0\n      : @425 (gas: 8)\n 30971: a2 = u64 [sp + 0x48]\n 30974: a3 = u64 [sp + 0x40]\n 30977: u64 [sp + 0x8] = a2\n 30980: u64 [sp] = a3\n 30982: u64 [sp + 0x10] = a0\n 30985: a0 = sp\n 30987: u64 [sp + 0x18] = a1\n 30990: ra = 360, jump @753\n      : @426 [@dyn 180] (gas: 3)\n 30996: a0 = 0x40\n 30999: a1 = 0x20\n 31002: ra = 362, jump @0\n      : @427 [@dyn 181] (gas: 100)\n 31008: a1 = u8 [a0 + 0x11]\n 31011: a2 = u8 [a0 + 0x10]\n 31014: a3 = u8 [a0 + 0x12]\n 31017: a4 = u8 [a0 + 0x13]\n 31020: a1 = a1 << 0x8\n 31023: a1 = a1 | a2\n 31026: a3 = a3 << 0x10\n 31029: a4 = a4 << 0x18\n 31032: a3 = a3 | a4\n 31035: a1 = a1 | a3\n 31038: a2 = u8 [a0 + 0x15]\n 31041: a3 = u8 [a0 + 0x14]\n 31044: a4 = u8 [a0 + 0x16]\n 31047: a5 = u8 [a0 + 0x17]\n 31050: a2 = a2 << 0x8\n 31053: a2 = a2 | a3\n 31056: a4 = a4 << 0x10\n 31059: a5 = a5 << 0x18\n 31062: a4 = a4 | a5\n 31065: a2 = a2 | a4\n 31068: a2 = a2 << 0x20\n 31071: t0 = a2 | a1\n 31074: a2 = u8 [a0 + 0x1]\n 31077: a3 = u8 [a0]\n 31079: a4 = u8 [a0 + 0x2]\n 31082: a5 = u8 [a0 + 0x3]\n 31085: a2 = a2 << 0x8\n 31088: a2 = a2 | a3\n 31091: a4 = a4 << 0x10\n 31094: a5 = a5 << 0x18\n 31097: a4 = a4 | a5\n 31100: a2 = a2 | a4\n 31103: a3 = u8 [a0 + 0x5]\n 31106: a4 = u8 [a0 + 0x4]\n 31109: a5 = u8 [a0 + 0x6]\n 31112: a1 = u8 [a0 + 0x7]\n 31115: a3 = a3 << 0x8\n 31118: a3 = a3 | a4\n 31121: a5 = a5 << 0x10\n 31124: a1 = a1 << 0x18\n 31127: a1 = a1 | a5\n 31130: a1 = a1 | a3\n 31133: a1 = a1 << 0x20\n 31136: t1 = a1 | a2\n 31139: a1 = u8 [a0 + 0x19]\n 31142: a3 = u8 [a0 + 0x18]\n 31145: a4 = u8 [a0 + 0x1a]\n 31148: a5 = u8 [a0 + 0x1b]\n 31151: a1 = a1 << 0x8\n 31154: a1 = a1 | a3\n 31157: a4 = a4 << 0x10\n 31160: a5 = a5 << 0x18\n 31163: a4 = a4 | a5\n 31166: a1 = a1 | a4\n 31169: a3 = u8 [a0 + 0x1d]\n 31172: a4 = u8 [a0 + 0x1c]\n 31175: a5 = u8 [a0 + 0x1e]\n 31178: a2 = u8 [a0 + 0x1f]\n 31181: a3 = a3 << 0x8\n 31184: a3 = a3 | a4\n 31187: a5 = a5 << 0x10\n 31190: a2 = a2 << 0x18\n 31193: a2 = a2 | a5\n 31196: a2 = a2 | a3\n 31199: a2 = a2 << 0x20\n 31202: a3 = a2 | a1\n 31205: a1 = u8 [a0 + 0x9]\n 31208: a2 = u8 [a0 + 0x8]\n 31211: a4 = u8 [a0 + 0xa]\n 31214: a5 = u8 [a0 + 0xb]\n 31217: a1 = a1 << 0x8\n 31220: a1 = a1 | a2\n 31223: a4 = a4 << 0x10\n 31226: a5 = a5 << 0x18\n 31229: a4 = a4 | a5\n 31232: a1 = a1 | a4\n 31235: a2 = u8 [a0 + 0xd]\n 31238: a4 = u8 [a0 + 0xc]\n 31241: a5 = u8 [a0 + 0xe]\n 31244: a0 = u8 [a0 + 0xf]\n 31247: a2 = a2 << 0x8\n 31250: a2 = a2 | a4\n 31253: a5 = a5 << 0x10\n 31256: a0 = a0 << 0x18\n 31259: a0 = a0 | a5\n 31262: a0 = a0 | a2\n 31265: a0 = a0 << 0x20\n 31268: a0 = a0 | a1\n 31271: a1 = reverse a0\n 31273: a0 = reverse a3\n 31275: a2 = reverse t1\n 31277: a3 = reverse t0\n 31279: a2 = a2 | a3\n 31282: a3 = a0 | a1\n 31285: a3 = a3 | a2\n 31288: a3 = a3 >> 0x20\n 31291: a1 = a1 | a2\n 31294: a1 = a1 << 0x20\n 31297: a1 = a1 | a3\n 31300: jump @431 if a1 == 0\n      : @428 (gas: 1)\n 31303: trap\n      : @429 (gas: 3)\n 31304: a0 = 0\n 31306: a1 = 0\n 31308: ra = 364, jump @0\n      : @430 [@dyn 182] (gas: 7)\n 31314: i32 a1 = a0 + 0\n 31316: a0 = 0x1\n 31319: a2 = 0\n 31321: ecalli 14 // 'seal_return'\n 31323: i32 a0 = a0 + 0\n 31325: ra = 0x16e\n 31329: jump @0\n      : @431 (gas: 2)\n 31332: i32 a0 = a0 + 0\n 31334: ra = 366, jump @0\n      : @432 [@dyn 183] (gas: 6)\n 31340: i32 a1 = a0 + 0\n 31342: a0 = 0\n 31344: a2 = 0\n 31346: ra = 0x170\n 31350: ecalli 14 // 'seal_return'\n 31352: fallthrough\n      : @433 [@dyn 184] (gas: 9)\n 31353: a2 = u64 [a1 + 0x18]\n 31356: a3 = u64 [a1 + 0x10]\n 31359: a4 = u64 [a1 + 0x8]\n 31362: a1 = u64 [a1]\n 31364: u64 [a0 + 0x18] = a2\n 31367: u64 [a0 + 0x10] = a3\n 31370: u64 [a0 + 0x8] = a4\n 31373: u64 [a0] = a1\n 31375: ret\n      : @434 (gas: 8)\n 31377: a0 = u64 [sp + 0x30]\n 31380: a1 = u64 [sp + 0x38]\n 31383: a2 = u64 [sp + 0x28]\n 31386: a3 = u64 [sp + 0x20]\n 31389: a1 = a1 | a2\n 31392: a0 = a0 | a3\n 31395: a0 = a0 | a1\n 31398: jump @439 if a0 != 0\n      : @435 (gas: 2)\n 31402: a1 = i32 [0x20078]\n 31407: jump @439 if a1 <=u 3\n      : @436 (gas: 26)\n 31412: u64 [sp + 88] = 0\n 31415: u64 [sp + 80] = 0\n 31418: u64 [sp + 72] = 0\n 31421: u64 [sp + 64] = 0x3\n 31425: u64 [sp + 120] = 0\n 31428: u64 [sp + 112] = 0\n 31431: u64 [sp + 104] = 0\n 31434: u64 [sp + 96] = 0\n 31437: u32 [sp + 128] = 0x20\n 31442: i32 a1 = sp + 0x40\n 31445: i32 a3 = sp + 0x60\n 31448: i32 a4 = sp + 0x80\n 31452: a2 = 0xffffffffffffffff\n 31455: a0 = 0\n 31457: ecalli 8 // 'get_storage'\n 31459: a0 = u64 [sp + 0x78]\n 31462: u64 [sp] = a0\n 31464: a0 = u64 [sp + 0x70]\n 31467: u64 [sp + 0x8] = a0\n 31470: a0 = u64 [sp + 0x68]\n 31473: u64 [sp + 0x10] = a0\n 31476: a0 = u64 [sp + 0x60]\n 31479: u64 [sp + 0x18] = a0\n 31482: a0 = 0x40\n 31485: a1 = 0x20\n 31488: ra = 370, jump @0\n      : @437 [@dyn 185] (gas: 100)\n 31494: a1 = u8 [a0 + 0x11]\n 31497: a2 = u8 [a0 + 0x10]\n 31500: a3 = u8 [a0 + 0x12]\n 31503: a4 = u8 [a0 + 0x13]\n 31506: a1 = a1 << 0x8\n 31509: a1 = a1 | a2\n 31512: a3 = a3 << 0x10\n 31515: a4 = a4 << 0x18\n 31518: a3 = a3 | a4\n 31521: a1 = a1 | a3\n 31524: a2 = u8 [a0 + 0x15]\n 31527: a3 = u8 [a0 + 0x14]\n 31530: a4 = u8 [a0 + 0x16]\n 31533: a5 = u8 [a0 + 0x17]\n 31536: a2 = a2 << 0x8\n 31539: a2 = a2 | a3\n 31542: a4 = a4 << 0x10\n 31545: a5 = a5 << 0x18\n 31548: a4 = a4 | a5\n 31551: a2 = a2 | a4\n 31554: a2 = a2 << 0x20\n 31557: t0 = a2 | a1\n 31560: a2 = u8 [a0 + 0x1]\n 31563: a3 = u8 [a0]\n 31565: a4 = u8 [a0 + 0x2]\n 31568: a5 = u8 [a0 + 0x3]\n 31571: a2 = a2 << 0x8\n 31574: a2 = a2 | a3\n 31577: a4 = a4 << 0x10\n 31580: a5 = a5 << 0x18\n 31583: a4 = a4 | a5\n 31586: a2 = a2 | a4\n 31589: a3 = u8 [a0 + 0x5]\n 31592: a4 = u8 [a0 + 0x4]\n 31595: a5 = u8 [a0 + 0x6]\n 31598: s1 = u8 [a0 + 0x7]\n 31601: a3 = a3 << 0x8\n 31604: a3 = a3 | a4\n 31607: a5 = a5 << 0x10\n 31610: s1 = s1 << 0x18\n 31613: a5 = a5 | s1\n 31616: a3 = a3 | a5\n 31619: a3 = a3 << 0x20\n 31622: a2 = a2 | a3\n 31625: a3 = u8 [a0 + 0x19]\n 31628: a4 = u8 [a0 + 0x18]\n 31631: a5 = u8 [a0 + 0x1a]\n 31634: s1 = u8 [a0 + 0x1b]\n 31637: a3 = a3 << 0x8\n 31640: a3 = a3 | a4\n 31643: a5 = a5 << 0x10\n 31646: s1 = s1 << 0x18\n 31649: a5 = a5 | s1\n 31652: a3 = a3 | a5\n 31655: a4 = u8 [a0 + 0x1d]\n 31658: a5 = u8 [a0 + 0x1c]\n 31661: s1 = u8 [a0 + 0x1e]\n 31664: a1 = u8 [a0 + 0x1f]\n 31667: a4 = a4 << 0x8\n 31670: a4 = a4 | a5\n 31673: s1 = s1 << 0x10\n 31676: a1 = a1 << 0x18\n 31679: a1 = a1 | s1\n 31682: a1 = a1 | a4\n 31685: a1 = a1 << 0x20\n 31688: a3 = a3 | a1\n 31691: a1 = u8 [a0 + 0x9]\n 31694: a4 = u8 [a0 + 0x8]\n 31697: a5 = u8 [a0 + 0xa]\n 31700: s1 = u8 [a0 + 0xb]\n 31703: a1 = a1 << 0x8\n 31706: a1 = a1 | a4\n 31709: a5 = a5 << 0x10\n 31712: s1 = s1 << 0x18\n 31715: a5 = a5 | s1\n 31718: a1 = a1 | a5\n 31721: a4 = u8 [a0 + 0xd]\n 31724: a5 = u8 [a0 + 0xc]\n 31727: s1 = u8 [a0 + 0xe]\n 31730: a0 = u8 [a0 + 0xf]\n 31733: a4 = a4 << 0x8\n 31736: a4 = a4 | a5\n 31739: s1 = s1 << 0x10\n 31742: a0 = a0 << 0x18\n 31745: a0 = a0 | s1\n 31748: a0 = a0 | a4\n 31751: a0 = a0 << 0x20\n 31754: a0 = a0 | a1\n 31757: a1 = reverse a0\n 31759: a0 = reverse a3\n 31761: a2 = reverse a2\n 31763: a3 = reverse t0\n 31765: a2 = a2 | a3\n 31768: a3 = a0 | a1\n 31771: a3 = a3 | a2\n 31774: a3 = a3 >> 0x20\n 31777: a1 = a1 | a2\n 31780: a1 = a1 << 0x20\n 31783: a1 = a1 | a3\n 31786: jump @441 if a1 == 0\n      : @438 (gas: 1)\n 31789: trap\n      : @439 (gas: 3)\n 31790: a0 = 0\n 31792: a1 = 0\n 31794: ra = 372, jump @0\n      : @440 [@dyn 186] (gas: 5)\n 31800: i32 a1 = a0 + 0\n 31802: a0 = 0x1\n 31805: a2 = 0\n 31807: ecalli 14 // 'seal_return'\n 31809: fallthrough\n      : @441 (gas: 4)\n 31810: i32 s1 = a0 + 0\n 31812: a1 = 0x20\n 31815: a0 = s1\n 31817: ra = 374, jump @0\n      : @442 [@dyn 187] (gas: 71)\n 31823: a1 = u64 [sp]\n 31825: a1 = reverse a1\n 31827: a2 = u64 [sp + 0x8]\n 31830: a2 = reverse a2\n 31832: a3 = u64 [sp + 0x10]\n 31835: a3 = reverse a3\n 31837: a4 = u64 [sp + 0x18]\n 31840: a4 = reverse a4\n 31842: a5 = a4 >> 0x38\n 31845: u8 [a0 + 0x1f] = a5\n 31848: a5 = a4 >> 0x30\n 31851: u8 [a0 + 0x1e] = a5\n 31854: a5 = a4 >> 0x28\n 31857: u8 [a0 + 0x1d] = a5\n 31860: a5 = a4 >> 0x20\n 31863: u8 [a0 + 0x1c] = a5\n 31866: a5 = a4 >> 0x18\n 31869: u8 [a0 + 0x1b] = a5\n 31872: a5 = a4 >> 0x10\n 31875: u8 [a0 + 0x1a] = a5\n 31878: a5 = a4 >> 0x8\n 31881: u8 [a0 + 0x19] = a5\n 31884: u8 [a0 + 0x18] = a4\n 31887: u8 [a0 + 0x10] = a3\n 31890: a4 = a3 >> 0x38\n 31893: u8 [a0 + 0x17] = a4\n 31896: a4 = a3 >> 0x30\n 31899: u8 [a0 + 0x16] = a4\n 31902: a4 = a3 >> 0x28\n 31905: u8 [a0 + 0x15] = a4\n 31908: a4 = a3 >> 0x20\n 31911: u8 [a0 + 0x14] = a4\n 31914: a4 = a3 >> 0x18\n 31917: u8 [a0 + 0x13] = a4\n 31920: a4 = a3 >> 0x10\n 31923: u8 [a0 + 0x12] = a4\n 31926: a3 = a3 >> 0x8\n 31929: u8 [a0 + 0x11] = a3\n 31932: u8 [a0 + 0x8] = a2\n 31935: a3 = a2 >> 0x38\n 31938: u8 [a0 + 0xf] = a3\n 31941: a3 = a2 >> 0x30\n 31944: u8 [a0 + 0xe] = a3\n 31947: a3 = a2 >> 0x28\n 31950: u8 [a0 + 0xd] = a3\n 31953: a3 = a2 >> 0x20\n 31956: u8 [a0 + 0xc] = a3\n 31959: a3 = a2 >> 0x18\n 31962: u8 [a0 + 0xb] = a3\n 31965: a3 = a2 >> 0x10\n 31968: u8 [a0 + 0xa] = a3\n 31971: a2 = a2 >> 0x8\n 31974: u8 [a0 + 0x9] = a2\n 31977: u8 [a0] = a1\n 31979: a2 = a1 >> 0x38\n 31982: u8 [a0 + 0x7] = a2\n 31985: a2 = a1 >> 0x30\n 31988: u8 [a0 + 0x6] = a2\n 31991: a2 = a1 >> 0x28\n 31994: u8 [a0 + 0x5] = a2\n 31997: a2 = a1 >> 0x20\n 32000: u8 [a0 + 0x4] = a2\n 32003: a2 = a1 >> 0x18\n 32006: u8 [a0 + 0x3] = a2\n 32009: a2 = a1 >> 0x10\n 32012: u8 [a0 + 0x2] = a2\n 32015: a1 = a1 >> 0x8\n 32018: u8 [a0 + 0x1] = a1\n 32021: a1 = 0x20\n 32024: a0 = s1\n 32026: ra = 376, jump @0\n      : @443 [@dyn 188] (gas: 6)\n 32032: i32 a1 = a0 + 0\n 32034: a2 = 0x20\n 32037: a0 = 0\n 32039: ra = 0x17a\n 32043: ecalli 14 // 'seal_return'\n 32045: fallthrough\n      : @444 [@dyn 189] (gas: 5)\n 32046: sp = sp + 0xfffffffffffffff8\n 32049: u64 [sp] = ra\n 32051: a0 = 0\n 32053: a1 = 0\n 32055: ra = 380, jump @0\n      : @445 [@dyn 190] (gas: 6)\n 32061: i32 a1 = a0 + 0\n 32063: a0 = 0x1\n 32066: a2 = 0\n 32068: ra = 0x17e\n 32072: ecalli 14 // 'seal_return'\n 32074: fallthrough\n      : @446 [@dyn 191] (gas: 37)\n 32075: sp = sp + 0xffffffffffffff60\n 32079: u64 [sp + 0x98] = ra\n 32083: u64 [sp + 0x90] = s0\n 32087: u64 [sp + 0x88] = s1\n 32091: s0 = sp + 0xa0\n 32095: sp = sp & 0xffffffffffffffe0\n 32098: a4 = u64 [a1]\n 32100: s1 = u64 [a2 + 0x8]\n 32103: ra = u64 [a1 + 0x8]\n 32106: t1 = u64 [a2]\n 32108: a3 = a4 + 0x1f\n 32111: u64 [sp + 0x58] = a4\n 32114: t0 = a3 <u a4\n 32117: a5 = ra + t0\n 32120: u64 [sp + 0x40] = t1\n 32123: t1 = a3 <u t1\n 32126: a3 = a5 ^ s1\n 32129: u64 [sp + 0x48] = s1\n 32132: a4 = a5 <u s1\n 32135: a4 = t1 if a3 == 0\n 32138: t2 = u64 [a1 + 0x10]\n 32141: a3 = a5 <u ra\n 32144: a3 = t0 if t0 == 0\n 32147: t0 = u64 [a2 + 0x18]\n 32150: t1 = u64 [a1 + 0x18]\n 32153: s1 = u64 [a2 + 0x10]\n 32156: a3 = a3 + t2\n 32159: a1 = a3 <u t2\n 32162: a1 = a1 + t1\n 32165: a2 = a1 ^ t0\n 32168: a1 = a1 <s t0\n 32171: a5 = a3 <u s1\n 32174: a1 = a5 if a2 == 0\n 32177: a3 = a3 ^ s1\n 32180: a2 = a2 | a3\n 32183: a4 = a1 if a2 != 0\n 32186: jump @453 if a4 == 0\n      : @447 (gas: 14)\n 32190: u64 [sp + 0x28] = t0\n 32193: u64 [sp + 0x30] = s1\n 32196: u64 [sp + 0x38] = a0\n 32199: a0 = u64 [sp + 0x58]\n 32202: a0 = a0 | t2\n 32205: u64 [sp + 0x18] = t1\n 32208: a1 = ra | t1\n 32211: a0 = a0 | a1\n 32214: a0 = a0 >> 0x20\n 32217: u64 [sp + 0x20] = t2\n 32220: a1 = a1 | t2\n 32223: a1 = a1 << 0x20\n 32226: a0 = a0 | a1\n 32229: jump @452 if a0 != 0\n      : @448 (gas: 5)\n 32233: s1 = ra\n 32235: a1 = i32 [sp + 0x58]\n 32238: i32 a0 = sp + 0x60\n 32241: ecalli 3 // 'call_data_load'\n 32243: fallthrough\n      : @449 (gas: 8)\n 32244: a0 = u64 [sp + 0x78]\n 32247: a1 = u64 [sp + 0x70]\n 32250: t1 = u64 [sp + 0x68]\n 32253: u64 [sp + 0x50] = a0\n 32256: a0 = a0 | a1\n 32259: a3 = t1 <u 0x1\n 32262: a3 = 0 if a0 != 0\n 32264: jump @453 if a3 == 0\n      : @450 (gas: 46)\n 32268: a2 = u64 [sp + 0x60]\n 32271: a0 = u64 [sp + 0x58]\n 32274: a4 = a0 + 0x20\n 32277: a0 = a4 <u a0\n 32280: ra = s1 + a0\n 32283: u64 [sp + 0x10] = a4\n 32286: a4 = a4 + a2\n 32289: u64 [sp + 0x58] = a2\n 32292: t0 = a4 <u a2\n 32295: a5 = t1 + ra\n 32298: a5 = a5 + t0\n 32301: a2 = a5 ^ t1\n 32304: a3 = a5 <u t1\n 32307: a3 = t0 if a2 == 0\n 32310: a2 = ra <u s1\n 32313: a2 = a0 if a0 == 0\n 32316: a0 = u64 [sp + 0x20]\n 32319: t2 = a0 + a2\n 32322: s1 = t2 <u a0\n 32325: a0 = u64 [sp + 0x18]\n 32328: a0 = a0 + s1\n 32331: s1 = u64 [sp + 0x48]\n 32334: a2 = a5 ^ s1\n 32337: a5 = s1 <u a5\n 32340: s1 = u64 [sp + 0x40]\n 32343: a4 = s1 <u a4\n 32346: a4 = a5 if a2 != 0\n 32349: a2 = a1 + t2\n 32352: a5 = a2 <u a1\n 32355: s1 = u64 [sp + 0x50]\n 32358: u64 [sp + 0x48] = a0\n 32361: s1 = s1 + a0\n 32364: a5 = a5 + s1\n 32367: a3 = a3 + a2\n 32370: a2 = a3 <u a2\n 32373: a2 = a2 + a5\n 32376: s1 = u64 [sp + 0x28]\n 32379: a5 = a2 ^ s1\n 32382: t0 = s1 <u a2\n 32385: a2 = u64 [sp + 0x30]\n 32388: s1 = a2 <u a3\n 32391: s1 = t0 if a5 != 0\n 32394: a2 = a2 ^ a3\n 32397: a2 = a2 | a5\n 32400: a4 = s1 if a2 != 0\n 32403: jump @453 if a4 != 0\n      : @451 (gas: 19)\n 32406: a2 = u64 [sp + 0x38]\n 32409: a0 = u64 [sp + 0x58]\n 32412: u64 [a2 + 0x20] = a0\n 32415: a0 = u64 [sp + 0x10]\n 32418: u64 [a2] = a0\n 32420: u64 [a2 + 0x28] = t1\n 32423: u64 [a2 + 0x8] = ra\n 32426: u64 [a2 + 0x30] = a1\n 32429: u64 [a2 + 0x10] = t2\n 32432: a0 = u64 [sp + 0x50]\n 32435: u64 [a2 + 0x38] = a0\n 32438: a0 = u64 [sp + 0x48]\n 32441: u64 [a2 + 0x18] = a0\n 32444: sp = s0 + 0xffffffffffffff60\n 32448: ra = u64 [sp + 0x98]\n 32452: s0 = u64 [sp + 0x90]\n 32456: s1 = u64 [sp + 0x88]\n 32460: sp = sp + 0xa0\n 32464: ret\n      : @452 (gas: 1)\n 32466: trap\n      : @453 (gas: 3)\n 32467: a0 = 0\n 32469: a1 = 0\n 32471: ra = 384, jump @0\n      : @454 [@dyn 192] (gas: 6)\n 32477: i32 a1 = a0 + 0\n 32479: a0 = 0x1\n 32482: a2 = 0\n 32484: ra = 0x182\n 32488: ecalli 14 // 'seal_return'\n 32490: fallthrough\n      : @455 [@dyn 193] (gas: 44)\n 32491: sp = sp + 0xfffffffffffffe00\n 32495: u64 [sp + 0x1f8] = ra\n 32499: u64 [sp + 0x1f0] = s0\n 32503: u64 [sp + 0x1e8] = s1\n 32507: s0 = sp + 0x200\n 32511: sp = sp & 0xffffffffffffffe0\n 32514: s1 = u64 [a2 + 0x8]\n 32517: t2 = u64 [a1 + 0x8]\n 32520: a5 = u64 [a2]\n 32522: a3 = u64 [a1]\n 32524: t0 = u64 [a2 + 0x10]\n 32527: a4 = s1 ^ t2\n 32530: ra = s1 <u t2\n 32533: t1 = a5 <u a3\n 32536: ra = t1 if a4 == 0\n 32539: u64 [sp + 0x78] = s1\n 32542: a4 = s1 - t2\n 32545: a4 = a4 - t1\n 32548: u64 [sp + 0x68] = a5\n 32551: u64 [sp + 0x98] = a3\n 32555: a5 = a5 - a3\n 32558: a5 = a5 <u 0x40\n 32561: a5 = a5 ^ 0x1\n 32564: t1 = u64 [a1 + 0x10]\n 32567: s1 = a4 >u 0\n 32569: a5 = s1 if a4 != 0\n 32572: a4 = u64 [a2 + 0x18]\n 32575: s1 = u64 [a1 + 0x18]\n 32578: a1 = t0 - t1\n 32581: a2 = a1 - ra\n 32584: ra = a1 <u ra\n 32587: u64 [sp + 0x70] = t0\n 32590: a3 = t0 <u t1\n 32593: a1 = s1\n 32595: u64 [sp + 0x60] = a4\n 32598: a4 = a4 - s1\n 32601: a4 = a4 - a3\n 32604: a4 = a4 - ra\n 32607: s1 = a4 >s 0\n 32609: a3 = a2 >u 0\n 32611: a3 = s1 if a4 != 0\n 32614: a2 = a2 | a4\n 32617: a5 = a3 if a2 != 0\n 32620: jump @466 if a5 == 0\n      : @456 (gas: 13)\n 32624: s1 = a0\n 32626: a2 = u64 [sp + 0x98]\n 32630: a0 = a2 | t1\n 32633: u64 [sp + 0x90] = t2\n 32637: u64 [sp + 0x80] = a1\n 32641: a1 = t2 | a1\n 32644: a0 = a0 | a1\n 32647: a0 = a0 >> 0x20\n 32650: u64 [sp + 0x88] = t1\n 32654: a1 = a1 | t1\n 32657: a1 = a1 << 0x20\n 32660: a0 = a0 | a1\n 32663: jump @465 if a0 != 0\n      : @457 (gas: 5)\n 32667: i32 a1 = a2 + 0\n 32669: i32 a0 = sp + 0x1a0\n 32673: u64 [sp + 0x58] = a1\n 32676: ecalli 3 // 'call_data_load'\n 32678: fallthrough\n      : @458 (gas: 7)\n 32679: t0 = u64 [sp + 0x1b8]\n 32683: a1 = u64 [sp + 0x1b0]\n 32687: a2 = u64 [sp + 0x1a8]\n 32691: a3 = a1 | t0\n 32694: a4 = a2 <u 0x1\n 32697: a4 = 0 if a3 != 0\n 32699: jump @466 if a4 == 0\n      : @459 (gas: 35)\n 32703: a3 = u64 [sp + 0x1a0]\n 32707: a4 = u64 [sp + 0x98]\n 32711: a4 = a4 + a3\n 32714: a3 = a4 <u a3\n 32717: a5 = u64 [sp + 0x90]\n 32721: a5 = a5 + a2\n 32724: a5 = a5 + a3\n 32727: a0 = a5 ^ a2\n 32730: a2 = a5 <u a2\n 32733: a2 = a3 if a0 == 0\n 32736: a0 = u64 [sp + 0x88]\n 32740: a0 = a0 + a1\n 32743: a2 = a2 + a0\n 32746: a3 = a2 <u a0\n 32749: a0 = a0 <u a1\n 32752: a1 = u64 [sp + 0x80]\n 32756: t0 = t0 + a1\n 32759: a0 = a0 + t0\n 32762: a3 = a3 + a0\n 32765: a0 = u64 [sp + 0x68]\n 32768: u64 [sp + 0x120] = a0\n 32772: a0 = u64 [sp + 0x78]\n 32775: u64 [sp + 0x128] = a0\n 32779: u64 [sp + 0x140] = a4\n 32783: a0 = u64 [sp + 0x70]\n 32786: u64 [sp + 0x130] = a0\n 32790: a0 = u64 [sp + 0x60]\n 32793: u64 [sp + 0x138] = a0\n 32797: u64 [sp + 0x148] = a5\n 32801: u64 [sp + 0x150] = a2\n 32805: a0 = sp + 0x160\n 32809: a1 = sp + 0x140\n 32813: a2 = sp + 0x120\n 32817: u64 [sp + 0x158] = a3\n 32821: ra = 388, jump @446\n      : @460 [@dyn 194] (gas: 10)\n 32827: a0 = u64 [sp + 0x88]\n 32831: a1 = u64 [sp + 0x80]\n 32835: a0 = a0 | a1\n 32838: a1 = 0xffffffe0\n 32848: a2 = u64 [sp + 0x98]\n 32852: a1 = a2 <u a1\n 32855: a2 = u64 [sp + 0x90]\n 32859: a1 = 0 if a2 != 0\n 32861: a1 = 0 if a0 != 0\n 32863: jump @465 if a1 == 0\n      : @461 (gas: 21)\n 32867: a0 = u64 [sp + 0x198]\n 32871: u64 [sp + 0x38] = a0\n 32874: a0 = u64 [sp + 0x190]\n 32878: u64 [sp + 0x18] = a0\n 32881: a0 = u64 [sp + 0x188]\n 32885: u64 [sp + 0x40] = a0\n 32888: a0 = u64 [sp + 0x180]\n 32892: u64 [sp + 0x20] = a0\n 32895: a0 = u64 [sp + 0x178]\n 32899: u64 [sp + 0x48] = a0\n 32902: a0 = u64 [sp + 0x170]\n 32906: u64 [sp + 0x28] = a0\n 32909: a0 = u64 [sp + 0x168]\n 32913: u64 [sp + 0x50] = a0\n 32916: a0 = u64 [sp + 0x160]\n 32920: u64 [sp + 0x30] = a0\n 32923: a0 = u64 [sp + 0x58]\n 32926: i32 a1 = a0 + 0x20\n 32929: i32 a0 = sp + 0x1c0\n 32933: ecalli 3 // 'call_data_load'\n 32935: fallthrough\n      : @462 (gas: 7)\n 32936: t0 = u64 [sp + 0x1d8]\n 32940: a1 = u64 [sp + 0x1d0]\n 32944: a2 = u64 [sp + 0x1c8]\n 32948: a3 = a1 | t0\n 32951: a4 = a2 <u 0x1\n 32954: a4 = 0 if a3 != 0\n 32956: jump @466 if a4 == 0\n      : @463 (gas: 35)\n 32960: a3 = u64 [sp + 0x1c0]\n 32964: a4 = u64 [sp + 0x98]\n 32968: a4 = a4 + a3\n 32971: a3 = a4 <u a3\n 32974: a5 = u64 [sp + 0x90]\n 32978: a5 = a5 + a2\n 32981: a5 = a5 + a3\n 32984: a0 = a5 ^ a2\n 32987: a2 = a5 <u a2\n 32990: a2 = a3 if a0 == 0\n 32993: a0 = u64 [sp + 0x88]\n 32997: a0 = a0 + a1\n 33000: a2 = a2 + a0\n 33003: a3 = a2 <u a0\n 33006: a0 = a0 <u a1\n 33009: a1 = u64 [sp + 0x80]\n 33013: t0 = t0 + a1\n 33016: a0 = a0 + t0\n 33019: a3 = a3 + a0\n 33022: a0 = u64 [sp + 0x68]\n 33025: u64 [sp + 0xa0] = a0\n 33029: a0 = u64 [sp + 0x78]\n 33032: u64 [sp + 0xa8] = a0\n 33036: u64 [sp + 0xc0] = a4\n 33040: a0 = u64 [sp + 0x70]\n 33043: u64 [sp + 0xb0] = a0\n 33047: a0 = u64 [sp + 0x60]\n 33050: u64 [sp + 0xb8] = a0\n 33054: u64 [sp + 0xc8] = a5\n 33058: u64 [sp + 0xd0] = a2\n 33062: a0 = sp + 0xe0\n 33066: a1 = sp + 0xc0\n 33070: a2 = sp + 0xa0\n 33074: u64 [sp + 0xd8] = a3\n 33078: ra = 390, jump @446\n      : @464 [@dyn 195] (gas: 38)\n 33084: t0 = u64 [sp + 0xe8]\n 33088: t1 = u64 [sp + 0xe0]\n 33092: a2 = u64 [sp + 0xf8]\n 33096: a3 = u64 [sp + 0xf0]\n 33100: a4 = u64 [sp + 0x110]\n 33104: a5 = u64 [sp + 0x118]\n 33108: a0 = u64 [sp + 0x100]\n 33112: a1 = u64 [sp + 0x108]\n 33116: u64 [s1 + 0x70] = a4\n 33119: u64 [s1 + 0x78] = a5\n 33122: u64 [s1 + 0x60] = a0\n 33125: u64 [s1 + 0x68] = a1\n 33128: u64 [s1 + 0x50] = a3\n 33131: u64 [s1 + 0x58] = a2\n 33134: u64 [s1 + 0x40] = t1\n 33137: u64 [s1 + 0x48] = t0\n 33140: a0 = u64 [sp + 0x18]\n 33143: u64 [s1 + 0x30] = a0\n 33146: a0 = u64 [sp + 0x38]\n 33149: u64 [s1 + 0x38] = a0\n 33152: a0 = u64 [sp + 0x20]\n 33155: u64 [s1 + 0x20] = a0\n 33158: a0 = u64 [sp + 0x40]\n 33161: u64 [s1 + 0x28] = a0\n 33164: a0 = u64 [sp + 0x28]\n 33167: u64 [s1 + 0x10] = a0\n 33170: a0 = u64 [sp + 0x48]\n 33173: u64 [s1 + 0x18] = a0\n 33176: a0 = u64 [sp + 0x30]\n 33179: u64 [s1] = a0\n 33181: a0 = u64 [sp + 0x50]\n 33184: u64 [s1 + 0x8] = a0\n 33187: sp = s0 + 0xfffffffffffffe00\n 33191: ra = u64 [sp + 0x1f8]\n 33195: s0 = u64 [sp + 0x1f0]\n 33199: s1 = u64 [sp + 0x1e8]\n 33203: sp = sp + 0x200\n 33207: ret\n      : @465 (gas: 1)\n 33209: trap\n      : @466 (gas: 3)\n 33210: a0 = 0\n 33212: a1 = 0\n 33214: ra = 392, jump @0\n      : @467 [@dyn 196] (gas: 6)\n 33221: i32 a1 = a0 + 0\n 33223: a0 = 0x1\n 33226: a2 = 0\n 33228: ra = 0x18a\n 33232: ecalli 14 // 'seal_return'\n 33234: fallthrough\n      : @468 [@dyn 197] (gas: 16)\n 33235: sp = sp + 0xffffffffffffff88\n 33238: u64 [sp + 0x70] = ra\n 33241: u64 [sp + 0x68] = s0\n 33244: u64 [sp + 0x60] = s1\n 33247: a5 = u64 [a1 + 0x10]\n 33250: s1 = u64 [a1 + 0x18]\n 33253: a4 = u64 [a1 + 0x8]\n 33256: s0 = u64 [a1]\n 33258: a1 = a4 | s1\n 33261: a3 = s0 | a5\n 33264: a3 = a3 | a1\n 33267: a3 = a3 >> 0x20\n 33270: a1 = a1 | a5\n 33273: a1 = a1 << 0x20\n 33276: a1 = a1 | a3\n 33279: jump @481 if a1 != 0\n      : @469 (gas: 16)\n 33283: u64 [sp + 0x28] = s1\n 33286: u64 [sp + 0x30] = a5\n 33289: u64 [sp + 0x40] = a4\n 33292: u64 [sp] = a0\n 33294: a0 = u64 [a2 + 0x18]\n 33297: u64 [sp + 0x58] = a0\n 33300: s1 = u64 [a2 + 0x10]\n 33303: a0 = u64 [a2 + 0x8]\n 33306: u64 [sp + 0x50] = a0\n 33309: a0 = u64 [a2]\n 33311: u64 [sp + 0x48] = a0\n 33314: u64 [sp + 0x20] = s0\n 33317: i32 a0 = s0 + 0\n 33319: a1 = 0x20\n 33322: u64 [sp + 0x8] = a0\n 33325: ra = 396, jump @0\n      : @470 [@dyn 198] (gas: 12)\n 33332: t0 = u64 [sp + 0x48]\n 33335: a1 = t0 | s1\n 33338: a2 = u64 [sp + 0x58]\n 33341: a3 = u64 [sp + 0x50]\n 33344: a2 = a2 | a3\n 33347: a1 = a1 | a2\n 33350: a1 = a1 >> 0x20\n 33353: u64 [sp + 0x38] = s1\n 33356: a2 = a2 | s1\n 33359: a2 = a2 << 0x20\n 33362: a1 = a1 | a2\n 33365: jump @481 if a1 != 0\n      : @471 (gas: 93)\n 33369: a1 = u8 [a0 + 0x19]\n 33372: a2 = u8 [a0 + 0x18]\n 33375: a3 = u8 [a0 + 0x1a]\n 33378: a4 = u8 [a0 + 0x1b]\n 33381: a1 = a1 << 0x8\n 33384: a1 = a1 | a2\n 33387: a3 = a3 << 0x10\n 33390: a4 = a4 << 0x18\n 33393: a3 = a3 | a4\n 33396: a1 = a1 | a3\n 33399: a2 = u8 [a0 + 0x1d]\n 33402: a3 = u8 [a0 + 0x1c]\n 33405: a4 = u8 [a0 + 0x1e]\n 33408: a5 = u8 [a0 + 0x1f]\n 33411: a2 = a2 << 0x8\n 33414: a2 = a2 | a3\n 33417: a4 = a4 << 0x10\n 33420: a5 = a5 << 0x18\n 33423: a4 = a4 | a5\n 33426: a2 = a2 | a4\n 33429: a2 = a2 << 0x20\n 33432: a1 = a1 | a2\n 33435: u64 [sp + 0x18] = a1\n 33438: a1 = u8 [a0 + 0x11]\n 33441: a2 = u8 [a0 + 0x10]\n 33444: a3 = u8 [a0 + 0x12]\n 33447: a4 = u8 [a0 + 0x13]\n 33450: a1 = a1 << 0x8\n 33453: a1 = a1 | a2\n 33456: a3 = a3 << 0x10\n 33459: a4 = a4 << 0x18\n 33462: a3 = a3 | a4\n 33465: a1 = a1 | a3\n 33468: a2 = u8 [a0 + 0x15]\n 33471: a3 = u8 [a0 + 0x14]\n 33474: a4 = u8 [a0 + 0x16]\n 33477: a5 = u8 [a0 + 0x17]\n 33480: a2 = a2 << 0x8\n 33483: a2 = a2 | a3\n 33486: a4 = a4 << 0x10\n 33489: a5 = a5 << 0x18\n 33492: a4 = a4 | a5\n 33495: a2 = a2 | a4\n 33498: a2 = a2 << 0x20\n 33501: a1 = a1 | a2\n 33504: u64 [sp + 0x10] = a1\n 33507: a1 = u8 [a0 + 0x9]\n 33510: a2 = u8 [a0 + 0x8]\n 33513: a3 = u8 [a0 + 0xa]\n 33516: a4 = u8 [a0 + 0xb]\n 33519: a1 = a1 << 0x8\n 33522: a1 = a1 | a2\n 33525: a3 = a3 << 0x10\n 33528: a4 = a4 << 0x18\n 33531: a3 = a3 | a4\n 33534: a1 = a1 | a3\n 33537: a2 = u8 [a0 + 0xd]\n 33540: a3 = u8 [a0 + 0xc]\n 33543: a4 = u8 [a0 + 0xe]\n 33546: a5 = u8 [a0 + 0xf]\n 33549: a2 = a2 << 0x8\n 33552: a2 = a2 | a3\n 33555: a4 = a4 << 0x10\n 33558: a5 = a5 << 0x18\n 33561: a4 = a4 | a5\n 33564: a2 = a2 | a4\n 33567: a2 = a2 << 0x20\n 33570: s1 = a2 | a1\n 33573: a1 = u8 [a0 + 0x1]\n 33576: a2 = u8 [a0]\n 33578: a3 = u8 [a0 + 0x2]\n 33581: a4 = u8 [a0 + 0x3]\n 33584: a1 = a1 << 0x8\n 33587: a1 = a1 | a2\n 33590: a3 = a3 << 0x10\n 33593: a4 = a4 << 0x18\n 33596: a3 = a3 | a4\n 33599: a1 = a1 | a3\n 33602: a2 = u8 [a0 + 0x5]\n 33605: a3 = u8 [a0 + 0x4]\n 33608: a4 = u8 [a0 + 0x6]\n 33611: a0 = u8 [a0 + 0x7]\n 33614: a2 = a2 << 0x8\n 33617: a2 = a2 | a3\n 33620: a4 = a4 << 0x10\n 33623: a0 = a0 << 0x18\n 33626: a0 = a0 | a4\n 33629: a0 = a0 | a2\n 33632: a0 = a0 << 0x20\n 33635: s0 = a0 | a1\n 33638: i32 a0 = t0 + 0\n 33640: a1 = 0x20\n 33643: ra = 398, jump @0\n      : @472 [@dyn 199] (gas: 73)\n 33650: a4 = s1\n 33652: a2 = u64 [sp + 0x10]\n 33655: s1 = u64 [sp + 0x18]\n 33658: t0 = u64 [sp + 0x48]\n 33661: a1 = a4 >> 0x38\n 33664: u8 [a0 + 0xf] = a1\n 33667: a1 = a4 >> 0x30\n 33670: u8 [a0 + 0xe] = a1\n 33673: a1 = a4 >> 0x28\n 33676: u8 [a0 + 0xd] = a1\n 33679: a1 = a4 >> 0x20\n 33682: u8 [a0 + 0xc] = a1\n 33685: a1 = a4 >> 0x18\n 33688: u8 [a0 + 0xb] = a1\n 33691: a1 = a4 >> 0x10\n 33694: u8 [a0 + 0xa] = a1\n 33697: a1 = a4 >> 0x8\n 33700: u8 [a0 + 0x9] = a1\n 33703: a1 = s0 >> 0x38\n 33706: u8 [a0 + 0x7] = a1\n 33709: a1 = s0 >> 0x30\n 33712: u8 [a0 + 0x6] = a1\n 33715: a1 = s0 >> 0x28\n 33718: u8 [a0 + 0x5] = a1\n 33721: a1 = s0 >> 0x20\n 33724: u8 [a0 + 0x4] = a1\n 33727: a1 = s0 >> 0x18\n 33730: u8 [a0 + 0x3] = a1\n 33733: a1 = s0 >> 0x10\n 33736: u8 [a0 + 0x2] = a1\n 33739: a1 = s0 >> 0x8\n 33742: u8 [a0 + 0x1] = a1\n 33745: a1 = a2 >> 0x38\n 33748: u8 [a0 + 0x17] = a1\n 33751: a1 = a2 >> 0x30\n 33754: u8 [a0 + 0x16] = a1\n 33757: a1 = a2 >> 0x28\n 33760: u8 [a0 + 0x15] = a1\n 33763: a1 = a2 >> 0x20\n 33766: u8 [a0 + 0x14] = a1\n 33769: a1 = a2 >> 0x18\n 33772: u8 [a0 + 0x13] = a1\n 33775: a1 = a2 >> 0x10\n 33778: u8 [a0 + 0x12] = a1\n 33781: a1 = a2 >> 0x8\n 33784: u8 [a0 + 0x11] = a1\n 33787: a1 = s1 >> 0x38\n 33790: u8 [a0 + 0x1f] = a1\n 33793: a1 = s1 >> 0x30\n 33796: u8 [a0 + 0x1e] = a1\n 33799: a1 = s1 >> 0x28\n 33802: u8 [a0 + 0x1d] = a1\n 33805: a1 = s1 >> 0x20\n 33808: u8 [a0 + 0x1c] = a1\n 33811: a1 = s1 >> 0x18\n 33814: u8 [a0 + 0x1b] = a1\n 33817: a1 = s1 >> 0x10\n 33820: u8 [a0 + 0x1a] = a1\n 33823: a1 = s1 >> 0x8\n 33826: u8 [a0 + 0x19] = a1\n 33829: ra = u64 [sp + 0x58]\n 33832: t2 = u64 [sp + 0x38]\n 33835: t1 = t2 | ra\n 33838: a1 = 0xffffffe0\n 33848: a3 = t0 <u a1\n 33851: a5 = u64 [sp + 0x50]\n 33854: a3 = 0 if a5 != 0\n 33856: a3 = 0 if t1 != 0\n 33858: u8 [a0 + 0x10] = a2\n 33861: u8 [a0 + 0x8] = a4\n 33864: u8 [a0] = s0\n 33866: u8 [a0 + 0x18] = s1\n 33869: jump @481 if a3 == 0\n      : @473 (gas: 9)\n 33873: a0 = u64 [sp + 0x30]\n 33876: a3 = u64 [sp + 0x28]\n 33879: a0 = a0 | a3\n 33882: a3 = u64 [sp + 0x20]\n 33885: a1 = a3 <u a1\n 33888: a3 = u64 [sp + 0x40]\n 33891: a1 = 0 if a3 != 0\n 33893: a1 = 0 if a0 != 0\n 33895: jump @481 if a1 == 0\n      : @474 (gas: 15)\n 33899: a1 = reverse s0\n 33901: a3 = reverse a4\n 33903: a4 = reverse a2\n 33905: s0 = reverse s1\n 33907: a0 = s0 | a3\n 33910: u64 [sp + 0x30] = a1\n 33913: u64 [sp + 0x20] = a4\n 33916: a1 = a1 | a4\n 33919: a0 = a0 | a1\n 33922: a0 = a0 >> 0x20\n 33925: u64 [sp + 0x28] = a3\n 33928: a1 = a1 | a3\n 33931: a1 = a1 << 0x20\n 33934: a0 = a0 | a1\n 33937: jump @481 if a0 != 0\n      : @475 (gas: 19)\n 33941: a3 = t0 + 0x20\n 33944: u64 [sp + 0x40] = a3\n 33947: a0 = a3 <u t0\n 33950: a1 = a5 + a0\n 33953: u64 [sp + 0x48] = a1\n 33956: a1 = a1 <u a5\n 33959: a1 = a0 if a0 == 0\n 33962: a1 = a1 + t2\n 33965: u64 [sp + 0x50] = a1\n 33968: a0 = a1 <u t2\n 33971: a0 = a0 + ra\n 33974: u64 [sp + 0x58] = a0\n 33977: i32 a0 = a3 + 0\n 33979: a1 = u64 [sp + 0x8]\n 33982: i32 a1 = a1 + 0x20\n 33985: u64 [sp + 0x38] = a1\n 33988: i32 s1 = s0 + 0\n 33990: a1 = s1\n 33992: ra = 400, jump @0\n      : @476 [@dyn 200] (gas: 5)\n 33999: u64 [sp + 0x18] = a0\n 34002: a0 = u64 [sp + 0x38]\n 34005: a1 = s1\n 34007: s1 = s0\n 34009: ra = 402, jump @0\n      : @477 [@dyn 201] (gas: 4)\n 34016: a1 = a0\n 34018: a0 = u64 [sp + 0x18]\n 34021: a2 = s0\n 34023: ra = 404, jump @8\n      : @478 [@dyn 202] (gas: 29)\n 34030: a0 = u64 [sp + 0x40]\n 34033: a0 = a0 + s0\n 34036: a1 = a0 <u s0\n 34039: a4 = u64 [sp + 0x20]\n 34042: a2 = u64 [sp + 0x48]\n 34045: a2 = a2 + a4\n 34048: a2 = a2 + a1\n 34051: a3 = a2 ^ a4\n 34054: a4 = a2 <u a4\n 34057: a4 = a1 if a3 == 0\n 34060: a5 = u64 [sp + 0x28]\n 34063: a1 = u64 [sp + 0x50]\n 34066: a1 = a1 + a5\n 34069: a4 = a4 + a1\n 34072: a3 = a4 <u a1\n 34075: a1 = a1 <u a5\n 34078: a5 = u64 [sp + 0x30]\n 34081: s0 = u64 [sp + 0x58]\n 34084: a5 = a5 + s0\n 34087: a1 = a1 + a5\n 34090: a1 = a1 + a3\n 34093: a3 = a0 | a4\n 34096: a1 = a1 | a2\n 34099: a3 = a3 | a1\n 34102: a3 = a3 >> 0x20\n 34105: a1 = a1 | a4\n 34108: a1 = a1 << 0x20\n 34111: a1 = a1 | a3\n 34114: jump @481 if a1 != 0\n      : @479 (gas: 3)\n 34118: i32 a0 = a0 + 0\n 34120: a1 = 0x20\n 34123: ra = 406, jump @0\n      : @480 [@dyn 203] (gas: 56)\n 34130: u8 [a0 + 31] = 0\n 34133: u8 [a0 + 30] = 0\n 34136: u8 [a0 + 29] = 0\n 34139: u8 [a0 + 28] = 0\n 34142: u8 [a0 + 27] = 0\n 34145: u8 [a0 + 26] = 0\n 34148: u8 [a0 + 25] = 0\n 34151: u8 [a0 + 24] = 0\n 34154: u8 [a0 + 23] = 0\n 34157: u8 [a0 + 22] = 0\n 34160: u8 [a0 + 21] = 0\n 34163: u8 [a0 + 20] = 0\n 34166: u8 [a0 + 19] = 0\n 34169: u8 [a0 + 18] = 0\n 34172: u8 [a0 + 17] = 0\n 34175: u8 [a0 + 16] = 0\n 34178: u8 [a0 + 15] = 0\n 34181: u8 [a0 + 14] = 0\n 34184: u8 [a0 + 13] = 0\n 34187: u8 [a0 + 12] = 0\n 34190: u8 [a0 + 11] = 0\n 34193: u8 [a0 + 10] = 0\n 34196: u8 [a0 + 9] = 0\n 34199: u8 [a0 + 8] = 0\n 34202: u8 [a0 + 7] = 0\n 34205: u8 [a0 + 6] = 0\n 34208: u8 [a0 + 5] = 0\n 34211: u8 [a0 + 4] = 0\n 34214: u8 [a0 + 3] = 0\n 34217: u8 [a0 + 2] = 0\n 34220: u8 [a0 + 1] = 0\n 34223: u8 [a0 + 0] = 0\n 34225: a0 = s1 + 0x1f\n 34228: a1 = 0x1ffffffe0\n 34238: a0 = a0 & a1\n 34241: a1 = u64 [sp + 0x40]\n 34244: a1 = a1 + a0\n 34247: a0 = a1 <u a0\n 34250: a2 = u64 [sp + 0x48]\n 34253: a2 = a2 + a0\n 34256: a0 = 0 if a2 != 0\n 34258: a3 = u64 [sp + 0x50]\n 34261: a0 = a0 + a3\n 34264: a3 = a0 <u a3\n 34267: a4 = u64 [sp + 0x58]\n 34270: a3 = a3 + a4\n 34273: a4 = u64 [sp]\n 34275: u64 [a4] = a1\n 34277: u64 [a4 + 0x8] = a2\n 34280: u64 [a4 + 0x10] = a0\n 34283: u64 [a4 + 0x18] = a3\n 34286: ra = u64 [sp + 0x70]\n 34289: s0 = u64 [sp + 0x68]\n 34292: s1 = u64 [sp + 0x60]\n 34295: sp = sp + 0x78\n 34298: ret\n      : @481 (gas: 1)\n 34300: trap\n      : @482 (gas: 8)\n 34301: a0 = u64 [sp + 0x230]\n 34305: a1 = u64 [sp + 0x238]\n 34309: a2 = u64 [sp + 0x228]\n 34313: a3 = u64 [sp + 0x220]\n 34317: a1 = a1 | a2\n 34320: a0 = a0 | a3\n 34323: a0 = a0 | a1\n 34326: jump @491 if a0 != 0\n      : @483 (gas: 13)\n 34330: a0 = u32 [0x20078]\n 34335: u64 [sp + 376] = 0\n 34339: u64 [sp + 368] = 0\n 34343: u64 [sp + 360] = 0\n 34347: u64 [sp + 0x160] = a0\n 34351: u64 [sp + 408] = 0\n 34355: u64 [sp + 400] = 0\n 34359: u64 [sp + 384] = 0x4\n 34364: a0 = sp + 0x1a0\n 34368: a1 = sp + 0x180\n 34372: a2 = sp + 0x160\n 34376: u64 [sp + 392] = 0\n 34380: ra = 408, jump @455\n      : @484 [@dyn 204] (gas: 169)\n 34386: a0 = u64 [sp + 0x1a0]\n 34390: u64 [sp + 0x58] = a0\n 34393: a0 = u64 [sp + 0x1a8]\n 34397: u64 [sp + 0x50] = a0\n 34400: a0 = u64 [sp + 0x1b0]\n 34404: u64 [sp + 0x48] = a0\n 34407: a0 = u64 [sp + 0x1b8]\n 34411: u64 [sp + 0x40] = a0\n 34414: a0 = u64 [sp + 0x1c0]\n 34418: u64 [sp + 0x38] = a0\n 34421: ra = u64 [sp + 0x1c8]\n 34425: s1 = u64 [sp + 0x1d0]\n 34429: t2 = u64 [sp + 0x1d8]\n 34433: t1 = u64 [sp + 0x1e0]\n 34437: t0 = u64 [sp + 0x1e8]\n 34441: a5 = u64 [sp + 0x1f0]\n 34445: a4 = u64 [sp + 0x1f8]\n 34449: a3 = u64 [sp + 0x200]\n 34453: a2 = u64 [sp + 0x208]\n 34457: a1 = u64 [sp + 0x210]\n 34461: a0 = u64 [sp + 0x218]\n 34465: u64 [sp + 0xd8] = a0\n 34469: u64 [sp + 0xd0] = a1\n 34473: u64 [sp + 0xc8] = a2\n 34477: u64 [sp + 0xc0] = a3\n 34481: u64 [sp + 0xf8] = a4\n 34485: u64 [sp + 0xf0] = a5\n 34489: u64 [sp + 0xe8] = t0\n 34493: u64 [sp + 0xe0] = t1\n 34497: u64 [sp + 0x118] = t2\n 34501: u64 [sp + 0x110] = s1\n 34505: u64 [sp + 0x108] = ra\n 34509: a0 = u64 [sp + 0x38]\n 34512: u64 [sp + 0x100] = a0\n 34516: a0 = u64 [sp + 0x40]\n 34519: u64 [sp + 0x138] = a0\n 34523: a0 = u64 [sp + 0x48]\n 34526: u64 [sp + 0x130] = a0\n 34530: a0 = u64 [sp + 0x50]\n 34533: u64 [sp + 0x128] = a0\n 34537: a0 = sp + 0x140\n 34541: a1 = sp + 0x120\n 34545: a2 = sp + 0x100\n 34549: a3 = sp + 0xe0\n 34553: a4 = sp + 0xc0\n 34557: a5 = u64 [sp + 0x58]\n 34560: u64 [sp + 0x120] = a5\n 34564: ra = 0x19a\n 34568: sp = sp + 0xfffffffffffffe60\n 34572: u64 [sp + 0x198] = ra\n 34576: u64 [sp + 0x190] = s0\n 34580: u64 [sp + 0x188] = s1\n 34584: s0 = sp + 0x1a0\n 34588: sp = sp & 0xffffffffffffffe0\n 34591: a5 = u64 [a3]\n 34593: u64 [sp + 0x38] = a5\n 34596: a5 = u64 [a3 + 0x8]\n 34599: u64 [sp + 0x30] = a5\n 34602: a5 = u64 [a3 + 0x10]\n 34605: u64 [sp + 0x28] = a5\n 34608: a3 = u64 [a3 + 0x18]\n 34611: u64 [sp + 0x20] = a3\n 34614: a3 = u64 [a4]\n 34616: u64 [sp + 0x18] = a3\n 34619: a3 = u64 [a4 + 0x8]\n 34622: u64 [sp + 0x10] = a3\n 34625: a3 = u64 [a4 + 0x10]\n 34628: u64 [sp + 0x8] = a3\n 34631: a4 = u64 [a4 + 0x18]\n 34634: t1 = u64 [a1]\n 34636: t2 = u64 [a1 + 0x8]\n 34639: ra = u64 [a1 + 0x10]\n 34642: a1 = u64 [a1 + 0x18]\n 34645: a5 = u64 [a2]\n 34647: a3 = u64 [a2 + 0x8]\n 34650: t0 = u64 [a2 + 0x10]\n 34653: a2 = u64 [a2 + 0x18]\n 34656: s1 = a0\n 34658: u64 [sp + 0x98] = a2\n 34662: u64 [sp + 0x90] = t0\n 34666: u64 [sp + 0x88] = a3\n 34670: u64 [sp + 0x80] = a5\n 34674: u64 [sp + 0xb8] = a1\n 34678: u64 [sp + 0xb0] = ra\n 34682: u64 [sp + 0xa8] = t2\n 34686: u64 [sp + 0xa0] = t1\n 34690: u64 [sp + 0xd8] = a4\n 34694: a0 = u64 [sp + 0x8]\n 34697: u64 [sp + 0xd0] = a0\n 34701: a0 = u64 [sp + 0x10]\n 34704: u64 [sp + 0xc8] = a0\n 34708: a0 = u64 [sp + 0x18]\n 34711: u64 [sp + 0xc0] = a0\n 34715: a0 = u64 [sp + 0x20]\n 34718: u64 [sp + 0xf8] = a0\n 34722: a0 = u64 [sp + 0x28]\n 34725: u64 [sp + 0xf0] = a0\n 34729: a0 = u64 [sp + 0x30]\n 34732: u64 [sp + 0xe8] = a0\n 34736: a0 = sp + 0x100\n 34740: a1 = sp + 0xe0\n 34744: a2 = sp + 0xc0\n 34748: a3 = sp + 0xa0\n 34752: a4 = sp + 0x80\n 34756: a5 = u64 [sp + 0x38]\n 34759: u64 [sp + 0xe0] = a5\n 34763: ra = 0x2a8\n 34767: sp = sp + 0xfffffffffffffc00\n 34771: u64 [sp + 0x3f8] = ra\n 34775: u64 [sp + 0x3f0] = s0\n 34779: u64 [sp + 0x3e8] = s1\n 34783: s0 = sp + 0x400\n 34787: sp = sp & 0xffffffffffffffe0\n 34790: u64 [sp + 0x8] = a0\n 34793: t0 = u64 [a3 + 0x18]\n 34796: t2 = u64 [a4 + 0x18]\n 34799: a0 = u64 [a3 + 0x10]\n 34802: u64 [sp + 0xb0] = a0\n 34806: t1 = u64 [a3]\n 34808: u64 [sp + 0xb8] = t1\n 34812: s1 = u64 [a4]\n 34814: ra = u64 [a3 + 0x8]\n 34817: a5 = u64 [a4 + 0x8]\n 34820: a0 = u64 [a4 + 0x10]\n 34823: t1 = t1 + s1\n 34826: s1 = t1 <u s1\n 34829: a4 = a5 + ra\n 34832: a4 = a4 + s1\n 34835: a3 = a4 ^ a5\n 34838: a5 = a4 <u a5\n 34841: a5 = s1 if a3 == 0\n 34844: a3 = t2 + t0\n 34847: t2 = u64 [sp + 0xb0]\n 34851: s1 = a0 + t2\n 34854: a0 = s1 <u a0\n 34857: a0 = a0 + a3\n 34860: a3 = u64 [a1]\n 34862: u64 [sp + 0x78] = a3\n 34865: a3 = u64 [a1 + 0x8]\n 34868: u64 [sp + 0x70] = a3\n 34871: a3 = u64 [a1 + 0x10]\n 34874: u64 [sp + 0x68] = a3\n 34877: a1 = u64 [a1 + 0x18]\n 34880: u64 [sp + 0x60] = a1\n 34883: a1 = u64 [a2]\n 34885: u64 [sp + 0x50] = a1\n 34888: a1 = u64 [a2 + 0x8]\n 34891: u64 [sp + 0x40] = a1\n 34894: a1 = u64 [a2 + 0x10]\n 34897: u64 [sp + 0x30] = a1\n 34900: a1 = u64 [a2 + 0x18]\n 34903: u64 [sp + 0x28] = a1\n 34906: a5 = a5 + s1\n 34909: a1 = a5 <u s1\n 34912: a3 = a0 + a1\n 34915: u64 [sp + 0x300] = t1\n 34919: u64 [sp + 0x338] = t0\n 34923: u64 [sp + 0x330] = t2\n 34927: u64 [sp + 0x328] = ra\n 34931: a0 = u64 [sp + 0xb8]\n 34935: u64 [sp + 0x320] = a0\n 34939: u64 [sp + 0x308] = a4\n 34943: u64 [sp + 0x310] = a5\n 34947: a0 = sp + 0x340\n 34951: a1 = sp + 0x320\n 34955: a2 = sp + 0x300\n 34959: u64 [sp + 0x318] = a3\n 34963: ra = 0x4ac\n 34967: jump @1363\n      : @485 [@dyn 205] (gas: 11)\n 34971: a0 = u64 [sp + 0x158]\n 34975: u64 [sp + 0x40] = a0\n 34978: a0 = u64 [sp + 0x150]\n 34982: u64 [sp + 0x48] = a0\n 34985: a0 = u64 [sp + 0x148]\n 34989: u64 [sp + 0x50] = a0\n 34992: a0 = u64 [sp + 0x140]\n 34996: u64 [sp + 0x58] = a0\n 34999: a0 = 0x40\n 35002: a1 = 0x20\n 35005: ra = 412, jump @0\n      : @486 [@dyn 206] (gas: 100)\n 35012: a1 = u8 [a0 + 0x11]\n 35015: a2 = u8 [a0 + 0x10]\n 35018: a3 = u8 [a0 + 0x12]\n 35021: a4 = u8 [a0 + 0x13]\n 35024: a1 = a1 << 0x8\n 35027: a1 = a1 | a2\n 35030: a3 = a3 << 0x10\n 35033: a4 = a4 << 0x18\n 35036: a3 = a3 | a4\n 35039: a1 = a1 | a3\n 35042: a2 = u8 [a0 + 0x15]\n 35045: a3 = u8 [a0 + 0x14]\n 35048: a4 = u8 [a0 + 0x16]\n 35051: a5 = u8 [a0 + 0x17]\n 35054: a2 = a2 << 0x8\n 35057: a2 = a2 | a3\n 35060: a4 = a4 << 0x10\n 35063: a5 = a5 << 0x18\n 35066: a4 = a4 | a5\n 35069: a2 = a2 | a4\n 35072: a2 = a2 << 0x20\n 35075: t0 = a2 | a1\n 35078: a2 = u8 [a0 + 0x1]\n 35081: a3 = u8 [a0]\n 35083: a4 = u8 [a0 + 0x2]\n 35086: a5 = u8 [a0 + 0x3]\n 35089: a2 = a2 << 0x8\n 35092: a2 = a2 | a3\n 35095: a4 = a4 << 0x10\n 35098: a5 = a5 << 0x18\n 35101: a4 = a4 | a5\n 35104: a2 = a2 | a4\n 35107: a3 = u8 [a0 + 0x5]\n 35110: a4 = u8 [a0 + 0x4]\n 35113: a5 = u8 [a0 + 0x6]\n 35116: s1 = u8 [a0 + 0x7]\n 35119: a3 = a3 << 0x8\n 35122: a3 = a3 | a4\n 35125: a5 = a5 << 0x10\n 35128: s1 = s1 << 0x18\n 35131: a5 = a5 | s1\n 35134: a3 = a3 | a5\n 35137: a3 = a3 << 0x20\n 35140: a2 = a2 | a3\n 35143: a3 = u8 [a0 + 0x19]\n 35146: a4 = u8 [a0 + 0x18]\n 35149: a5 = u8 [a0 + 0x1a]\n 35152: s1 = u8 [a0 + 0x1b]\n 35155: a3 = a3 << 0x8\n 35158: a3 = a3 | a4\n 35161: a5 = a5 << 0x10\n 35164: s1 = s1 << 0x18\n 35167: a5 = a5 | s1\n 35170: a3 = a3 | a5\n 35173: a4 = u8 [a0 + 0x1d]\n 35176: a5 = u8 [a0 + 0x1c]\n 35179: s1 = u8 [a0 + 0x1e]\n 35182: a1 = u8 [a0 + 0x1f]\n 35185: a4 = a4 << 0x8\n 35188: a4 = a4 | a5\n 35191: s1 = s1 << 0x10\n 35194: a1 = a1 << 0x18\n 35197: a1 = a1 | s1\n 35200: a1 = a1 | a4\n 35203: a1 = a1 << 0x20\n 35206: a3 = a3 | a1\n 35209: a1 = u8 [a0 + 0x9]\n 35212: a4 = u8 [a0 + 0x8]\n 35215: a5 = u8 [a0 + 0xa]\n 35218: s1 = u8 [a0 + 0xb]\n 35221: a1 = a1 << 0x8\n 35224: a1 = a1 | a4\n 35227: a5 = a5 << 0x10\n 35230: s1 = s1 << 0x18\n 35233: a5 = a5 | s1\n 35236: a1 = a1 | a5\n 35239: a4 = u8 [a0 + 0xd]\n 35242: a5 = u8 [a0 + 0xc]\n 35245: s1 = u8 [a0 + 0xe]\n 35248: a0 = u8 [a0 + 0xf]\n 35251: a4 = a4 << 0x8\n 35254: a4 = a4 | a5\n 35257: s1 = s1 << 0x10\n 35260: a0 = a0 << 0x18\n 35263: a0 = a0 | s1\n 35266: a0 = a0 | a4\n 35269: a0 = a0 << 0x20\n 35272: a0 = a0 | a1\n 35275: s1 = reverse a0\n 35277: a3 = reverse a3\n 35279: a4 = reverse a2\n 35281: a2 = reverse t0\n 35283: a0 = a2 | a4\n 35286: a1 = a3 | s1\n 35289: a1 = a1 | a0\n 35292: a1 = a1 >> 0x20\n 35295: a0 = a0 | s1\n 35298: a0 = a0 << 0x20\n 35301: a0 = a0 | a1\n 35304: jump @490 if a0 != 0\n      : @487 (gas: 19)\n 35308: a0 = a3 + 0x20\n 35311: u64 [sp + 0x18] = a0\n 35314: a0 = a0 <u a3\n 35317: a1 = a2 + a0\n 35320: u64 [sp + 0x8] = a1\n 35323: a1 = a1 <u a2\n 35326: a1 = a0 if a0 == 0\n 35329: a1 = a1 + s1\n 35332: u64 [sp + 0x10] = a1\n 35335: a0 = a1 <u s1\n 35338: a0 = a0 + a4\n 35341: u64 [sp + 0x20] = a0\n 35344: i32 a0 = a3 + 0\n 35346: a1 = 0x20\n 35349: u64 [sp] = a0\n 35351: u64 [sp + 0x30] = a3\n 35354: u64 [sp + 0x28] = a2\n 35357: u64 [sp + 0x38] = a4\n 35360: ra = 414, jump @0\n      : @488 [@dyn 207] (gas: 52)\n 35367: u8 [a0 + 31] = 0x20\n 35371: u8 [a0 + 30] = 0\n 35374: u8 [a0 + 29] = 0\n 35377: u8 [a0 + 28] = 0\n 35380: u8 [a0 + 27] = 0\n 35383: u8 [a0 + 26] = 0\n 35386: u8 [a0 + 25] = 0\n 35389: u8 [a0 + 24] = 0\n 35392: u8 [a0 + 23] = 0\n 35395: u8 [a0 + 22] = 0\n 35398: u8 [a0 + 21] = 0\n 35401: u8 [a0 + 20] = 0\n 35404: u8 [a0 + 19] = 0\n 35407: u8 [a0 + 18] = 0\n 35410: u8 [a0 + 17] = 0\n 35413: u8 [a0 + 16] = 0\n 35416: u8 [a0 + 15] = 0\n 35419: u8 [a0 + 14] = 0\n 35422: u8 [a0 + 13] = 0\n 35425: u8 [a0 + 12] = 0\n 35428: u8 [a0 + 11] = 0\n 35431: u8 [a0 + 10] = 0\n 35434: u8 [a0 + 9] = 0\n 35437: u8 [a0 + 8] = 0\n 35440: u8 [a0 + 7] = 0\n 35443: u8 [a0 + 6] = 0\n 35446: u8 [a0 + 5] = 0\n 35449: u8 [a0 + 4] = 0\n 35452: u8 [a0 + 3] = 0\n 35455: u8 [a0 + 2] = 0\n 35458: u8 [a0 + 1] = 0\n 35461: u8 [a0 + 0] = 0\n 35463: a0 = u64 [sp + 0x8]\n 35466: u64 [sp + 0x68] = a0\n 35469: a0 = u64 [sp + 0x18]\n 35472: u64 [sp + 0x60] = a0\n 35475: a0 = u64 [sp + 0x40]\n 35478: u64 [sp + 0x98] = a0\n 35482: a0 = u64 [sp + 0x48]\n 35485: u64 [sp + 0x90] = a0\n 35489: a0 = u64 [sp + 0x50]\n 35492: u64 [sp + 0x88] = a0\n 35496: a0 = u64 [sp + 0x58]\n 35499: u64 [sp + 0x80] = a0\n 35503: a0 = u64 [sp + 0x10]\n 35506: u64 [sp + 0x70] = a0\n 35509: a0 = sp + 0xa0\n 35513: a1 = sp + 0x80\n 35517: a2 = sp + 0x60\n 35520: a3 = u64 [sp + 0x20]\n 35523: u64 [sp + 0x78] = a3\n 35526: ra = 416, jump @468\n      : @489 [@dyn 208] (gas: 30)\n 35532: a0 = u64 [sp + 0xa8]\n 35536: t0 = u64 [sp + 0xb8]\n 35540: t1 = u64 [sp + 0xa0]\n 35544: a3 = u64 [sp + 0xb0]\n 35548: a1 = u64 [sp + 0x28]\n 35551: a4 = a0 ^ a1\n 35554: a5 = a0 <u a1\n 35557: t2 = a1\n 35559: a2 = u64 [sp + 0x30]\n 35562: a1 = t1 <u a2\n 35565: a5 = a1 if a4 == 0\n 35568: a4 = a3 - s1\n 35571: a3 = a3 <u s1\n 35574: s1 = u64 [sp + 0x38]\n 35577: s1 = t0 - s1\n 35580: s1 = s1 - a3\n 35583: a3 = a4 <u a5\n 35586: s1 = s1 - a3\n 35589: a4 = a4 - a5\n 35592: a0 = a0 - t2\n 35595: a1 = a0 - a1\n 35598: a0 = t1 - a2\n 35601: a1 = a1 | s1\n 35604: a2 = a0 | a4\n 35607: a2 = a2 | a1\n 35610: a1 = a1 | a4\n 35613: a2 = a2 >> 0x20\n 35616: a1 = a1 << 0x20\n 35619: a1 = a1 | a2\n 35622: jump @493 if a1 == 0\n      : @490 (gas: 1)\n 35625: trap\n      : @491 (gas: 3)\n 35626: a0 = 0\n 35628: a1 = 0\n 35630: ra = 418, jump @0\n      : @492 [@dyn 209] (gas: 5)\n 35637: i32 a1 = a0 + 0\n 35639: a0 = 0x1\n 35642: a2 = 0\n 35644: ecalli 14 // 'seal_return'\n 35646: fallthrough\n      : @493 (gas: 4)\n 35647: i32 s1 = a0 + 0\n 35649: a0 = u64 [sp]\n 35651: a1 = s1\n 35653: ra = 420, jump @0\n      : @494 [@dyn 210] (gas: 6)\n 35660: i32 a1 = a0 + 0\n 35662: a0 = 0\n 35664: a2 = s1\n 35666: ra = 0x1a6\n 35670: ecalli 14 // 'seal_return'\n 35672: fallthrough\n      : @495 [@dyn 211] (gas: 1)\n 35673: ret\n      : @496 (gas: 43)\n 35675: sp = sp + 0xfffffffffffffea0\n 35679: u64 [sp + 0x158] = ra\n 35683: u64 [sp + 0x150] = s0\n 35687: u64 [sp + 0x148] = s1\n 35691: s0 = sp + 0x160\n 35695: sp = sp & 0xffffffffffffffe0\n 35698: t2 = u64 [a2 + 0x8]\n 35701: ra = u64 [a1 + 0x8]\n 35704: s1 = u64 [a2]\n 35706: a5 = u64 [a1]\n 35708: t0 = u64 [a2 + 0x10]\n 35711: a4 = t2 ^ ra\n 35714: a3 = t2 <u ra\n 35717: t1 = s1 <u a5\n 35720: a3 = t1 if a4 == 0\n 35723: a4 = t2 - ra\n 35726: a4 = a4 - t1\n 35729: u64 [sp + 0x48] = s1\n 35732: u64 [sp + 0x78] = a5\n 35735: a5 = s1 - a5\n 35738: a5 = a5 <u 0x40\n 35741: a5 = a5 ^ 0x1\n 35744: t1 = u64 [a1 + 0x10]\n 35747: s1 = a4 >u 0\n 35749: a5 = s1 if a4 != 0\n 35752: a4 = u64 [a2 + 0x18]\n 35755: s1 = u64 [a1 + 0x18]\n 35758: a1 = t0 - t1\n 35761: a2 = a1 - a3\n 35764: a1 = a1 <u a3\n 35767: u64 [sp + 0x70] = t1\n 35770: a3 = t0 <u t1\n 35773: u64 [sp + 0x40] = a4\n 35776: u64 [sp + 0x68] = s1\n 35779: a4 = a4 - s1\n 35782: a4 = a4 - a3\n 35785: a4 = a4 - a1\n 35788: a1 = a4 >s 0\n 35790: a3 = a2 >u 0\n 35792: a3 = a1 if a4 != 0\n 35795: a2 = a2 | a4\n 35798: a5 = a3 if a2 != 0\n 35801: jump @505 if a5 == 0\n      : @497 (gas: 15)\n 35805: s1 = a0\n 35807: u64 [sp + 0x50] = t0\n 35810: u64 [sp + 0x58] = t2\n 35813: a2 = u64 [sp + 0x70]\n 35816: t2 = u64 [sp + 0x78]\n 35819: a0 = t2 | a2\n 35822: a1 = u64 [sp + 0x68]\n 35825: a1 = ra | a1\n 35828: a0 = a0 | a1\n 35831: a0 = a0 >> 0x20\n 35834: a1 = a1 | a2\n 35837: a1 = a1 << 0x20\n 35840: a0 = a0 | a1\n 35843: u64 [sp + 0x60] = ra\n 35846: jump @504 if a0 != 0\n      : @498 (gas: 5)\n 35850: i32 a1 = t2 + 0\n 35852: i32 a0 = sp + 0x120\n 35856: u64 [sp + 0x38] = a1\n 35859: ecalli 3 // 'call_data_load'\n 35861: fallthrough\n      : @499 (gas: 10)\n 35862: a0 = u64 [sp + 0x70]\n 35865: a1 = u64 [sp + 0x68]\n 35868: a0 = a0 | a1\n 35871: a1 = 0xffffffe0\n 35881: a2 = u64 [sp + 0x78]\n 35884: a1 = a2 <u a1\n 35887: a2 = u64 [sp + 0x60]\n 35890: a1 = 0 if a2 != 0\n 35892: a1 = 0 if a0 != 0\n 35894: jump @504 if a1 == 0\n      : @500 (gas: 13)\n 35898: a0 = u64 [sp + 0x138]\n 35902: u64 [sp + 0x28] = a0\n 35905: a0 = u64 [sp + 0x130]\n 35909: u64 [sp + 0x18] = a0\n 35912: a0 = u64 [sp + 0x128]\n 35916: u64 [sp + 0x30] = a0\n 35919: a0 = u64 [sp + 0x120]\n 35923: u64 [sp + 0x20] = a0\n 35926: a0 = u64 [sp + 0x38]\n 35929: i32 a1 = a0 + 0x20\n 35932: i32 a0 = sp + 0x100\n 35936: ecalli 3 // 'call_data_load'\n 35938: fallthrough\n      : @501 (gas: 7)\n 35939: t0 = u64 [sp + 0x118]\n 35943: a1 = u64 [sp + 0x110]\n 35947: a2 = u64 [sp + 0x108]\n 35951: a3 = a1 | t0\n 35954: a4 = a2 <u 0x1\n 35957: a4 = 0 if a3 != 0\n 35959: jump @505 if a4 == 0\n      : @502 (gas: 35)\n 35963: a3 = u64 [sp + 0x100]\n 35967: a4 = u64 [sp + 0x78]\n 35970: a4 = a4 + a3\n 35973: a3 = a4 <u a3\n 35976: a5 = u64 [sp + 0x60]\n 35979: a5 = a5 + a2\n 35982: a5 = a5 + a3\n 35985: a0 = a5 ^ a2\n 35988: a2 = a5 <u a2\n 35991: a2 = a3 if a0 == 0\n 35994: a0 = u64 [sp + 0x70]\n 35997: a0 = a0 + a1\n 36000: a2 = a2 + a0\n 36003: a3 = a2 <u a0\n 36006: a0 = a0 <u a1\n 36009: a1 = u64 [sp + 0x68]\n 36012: t0 = t0 + a1\n 36015: a0 = a0 + t0\n 36018: a3 = a3 + a0\n 36021: a0 = u64 [sp + 0x48]\n 36024: u64 [sp + 0x80] = a0\n 36028: a0 = u64 [sp + 0x58]\n 36031: u64 [sp + 0x88] = a0\n 36035: u64 [sp + 0xa0] = a4\n 36039: a0 = u64 [sp + 0x50]\n 36042: u64 [sp + 0x90] = a0\n 36046: a0 = u64 [sp + 0x40]\n 36049: u64 [sp + 0x98] = a0\n 36053: u64 [sp + 0xa8] = a5\n 36057: u64 [sp + 0xb0] = a2\n 36061: a0 = sp + 0xc0\n 36065: a1 = sp + 0xa0\n 36069: a2 = sp + 0x80\n 36073: u64 [sp + 0xb8] = a3\n 36077: ra = 424, jump @446\n      : @503 [@dyn 212] (gas: 30)\n 36083: t0 = u64 [sp + 0xc8]\n 36087: t1 = u64 [sp + 0xc0]\n 36091: a2 = u64 [sp + 0xd8]\n 36095: a3 = u64 [sp + 0xd0]\n 36099: a4 = u64 [sp + 0xf0]\n 36103: a5 = u64 [sp + 0xf8]\n 36107: a0 = u64 [sp + 0xe0]\n 36111: a1 = u64 [sp + 0xe8]\n 36115: u64 [s1 + 0x50] = a4\n 36118: u64 [s1 + 0x58] = a5\n 36121: u64 [s1 + 0x40] = a0\n 36124: u64 [s1 + 0x48] = a1\n 36127: u64 [s1 + 0x30] = a3\n 36130: u64 [s1 + 0x38] = a2\n 36133: u64 [s1 + 0x20] = t1\n 36136: u64 [s1 + 0x28] = t0\n 36139: a0 = u64 [sp + 0x18]\n 36142: u64 [s1 + 0x10] = a0\n 36145: a0 = u64 [sp + 0x28]\n 36148: u64 [s1 + 0x18] = a0\n 36151: a0 = u64 [sp + 0x20]\n 36154: u64 [s1] = a0\n 36156: a0 = u64 [sp + 0x30]\n 36159: u64 [s1 + 0x8] = a0\n 36162: sp = s0 + 0xfffffffffffffea0\n 36166: ra = u64 [sp + 0x158]\n 36170: s0 = u64 [sp + 0x150]\n 36174: s1 = u64 [sp + 0x148]\n 36178: sp = sp + 0x160\n 36182: ret\n      : @504 (gas: 1)\n 36184: trap\n      : @505 (gas: 3)\n 36185: a0 = 0\n 36187: a1 = 0\n 36189: ra = 426, jump @0\n      : @506 [@dyn 213] (gas: 6)\n 36196: i32 a1 = a0 + 0\n 36198: a0 = 0x1\n 36201: a2 = 0\n 36203: ra = 0x1ac\n 36207: ecalli 14 // 'seal_return'\n 36209: fallthrough\n      : @507 [@dyn 214] (gas: 13)\n 36210: sp = sp + 0xfffffffffffffea0\n 36214: u64 [sp + 0x158] = ra\n 36218: u64 [sp + 0x150] = s0\n 36222: u64 [sp + 0x148] = s1\n 36226: s0 = sp + 0x160\n 36230: sp = sp & 0xffffffffffffffe0\n 36233: u64 [sp + 312] = 0\n 36237: u64 [sp + 304] = 0\n 36241: u64 [sp + 296] = 0\n 36245: u64 [sp + 288] = 0\n 36249: i32 a0 = sp + 0x120\n 36253: ecalli 17 // 'value_transferred'\n 36255: fallthrough\n      : @508 (gas: 8)\n 36256: a0 = u64 [sp + 0x130]\n 36260: a1 = u64 [sp + 0x138]\n 36264: a2 = u64 [sp + 0x128]\n 36268: a3 = u64 [sp + 0x120]\n 36272: a1 = a1 | a2\n 36275: a0 = a0 | a3\n 36278: a0 = a0 | a1\n 36281: jump @511 if a0 != 0\n      : @509 (gas: 13)\n 36285: a0 = u32 [0x20078]\n 36290: u64 [sp + 152] = 0\n 36294: u64 [sp + 144] = 0\n 36298: u64 [sp + 136] = 0\n 36302: u64 [sp + 0x80] = a0\n 36306: u64 [sp + 184] = 0\n 36310: u64 [sp + 176] = 0\n 36314: u64 [sp + 160] = 0x4\n 36319: a0 = sp + 0xc0\n 36323: a1 = sp + 0xa0\n 36327: a2 = sp + 0x80\n 36331: u64 [sp + 168] = 0\n 36335: ra = 430, jump @496\n      : @510 [@dyn 215] (gas: 30)\n 36341: a0 = u64 [sp + 0xc0]\n 36345: u64 [sp + 0x18] = a0\n 36348: t1 = u64 [sp + 0xc8]\n 36352: t2 = u64 [sp + 0xd0]\n 36356: ra = u64 [sp + 0xd8]\n 36360: t0 = u64 [sp + 0xe0]\n 36364: a5 = u64 [sp + 0xe8]\n 36368: a4 = u64 [sp + 0xf0]\n 36372: a3 = u64 [sp + 0xf8]\n 36376: a1 = u64 [sp + 0x100]\n 36380: s1 = u64 [sp + 0x108]\n 36384: a2 = u64 [sp + 0x110]\n 36388: a0 = u64 [sp + 0x118]\n 36392: u64 [sp + 0x38] = a0\n 36395: u64 [sp + 0x30] = a2\n 36398: u64 [sp + 0x28] = s1\n 36401: u64 [sp + 0x20] = a1\n 36404: u64 [sp + 0x58] = a3\n 36407: u64 [sp + 0x50] = a4\n 36410: u64 [sp + 0x48] = a5\n 36413: u64 [sp + 0x40] = t0\n 36416: u64 [sp + 0x78] = ra\n 36419: u64 [sp + 0x70] = t2\n 36422: u64 [sp + 0x68] = t1\n 36425: a0 = sp + 0x60\n 36428: a1 = sp + 0x40\n 36431: a2 = sp + 0x20\n 36434: a3 = u64 [sp + 0x18]\n 36437: u64 [sp + 0x60] = a3\n 36440: ra = 432, jump @866\n      : @511 [@dyn 216] (gas: 3)\n 36446: a0 = 0\n 36448: a1 = 0\n 36450: ra = 434, jump @0\n      : @512 [@dyn 217] (gas: 6)\n 36457: i32 a1 = a0 + 0\n 36459: a0 = 0x1\n 36462: a2 = 0\n 36464: ra = 0x1b4\n 36468: ecalli 14 // 'seal_return'\n 36470: fallthrough\n      : @513 [@dyn 218] (gas: 8)\n 36471: sp = sp + 0xffffffffffffff80\n 36474: u64 [sp + 0x78] = ra\n 36477: u64 [sp + 0x70] = s0\n 36480: u64 [sp + 0x68] = s1\n 36483: s0 = sp + 0x80\n 36487: sp = sp & 0xfffffffffffffff0\n 36490: a0 = i32 [0x20078]\n 36495: jump @518 if a0 <=u 3\n      : @514 (gas: 6)\n 36500: u64 [sp + 56] = 0\n 36503: u64 [sp + 48] = 0\n 36506: u64 [sp + 40] = 0\n 36509: a0 = sp + 0x40\n 36512: u64 [sp + 32] = 0\n 36515: ra = 438, jump @930\n      : @515 [@dyn 219] (gas: 11)\n 36521: a0 = u64 [sp + 0x58]\n 36524: u64 [sp] = a0\n 36526: a0 = u64 [sp + 0x50]\n 36529: u64 [sp + 0x8] = a0\n 36532: a0 = u64 [sp + 0x48]\n 36535: u64 [sp + 0x10] = a0\n 36538: a0 = u64 [sp + 0x40]\n 36541: u64 [sp + 0x18] = a0\n 36544: a0 = 0x40\n 36547: a1 = 0x20\n 36550: ra = 440, jump @0\n      : @516 [@dyn 220] (gas: 100)\n 36557: a1 = u8 [a0 + 0x11]\n 36560: a2 = u8 [a0 + 0x10]\n 36563: a3 = u8 [a0 + 0x12]\n 36566: a4 = u8 [a0 + 0x13]\n 36569: a1 = a1 << 0x8\n 36572: a1 = a1 | a2\n 36575: a3 = a3 << 0x10\n 36578: a4 = a4 << 0x18\n 36581: a3 = a3 | a4\n 36584: a1 = a1 | a3\n 36587: a2 = u8 [a0 + 0x15]\n 36590: a3 = u8 [a0 + 0x14]\n 36593: a4 = u8 [a0 + 0x16]\n 36596: a5 = u8 [a0 + 0x17]\n 36599: a2 = a2 << 0x8\n 36602: a2 = a2 | a3\n 36605: a4 = a4 << 0x10\n 36608: a5 = a5 << 0x18\n 36611: a4 = a4 | a5\n 36614: a2 = a2 | a4\n 36617: a2 = a2 << 0x20\n 36620: t0 = a2 | a1\n 36623: a2 = u8 [a0 + 0x1]\n 36626: a3 = u8 [a0]\n 36628: a4 = u8 [a0 + 0x2]\n 36631: a5 = u8 [a0 + 0x3]\n 36634: a2 = a2 << 0x8\n 36637: a2 = a2 | a3\n 36640: a4 = a4 << 0x10\n 36643: a5 = a5 << 0x18\n 36646: a4 = a4 | a5\n 36649: a2 = a2 | a4\n 36652: a3 = u8 [a0 + 0x5]\n 36655: a4 = u8 [a0 + 0x4]\n 36658: a5 = u8 [a0 + 0x6]\n 36661: s1 = u8 [a0 + 0x7]\n 36664: a3 = a3 << 0x8\n 36667: a3 = a3 | a4\n 36670: a5 = a5 << 0x10\n 36673: s1 = s1 << 0x18\n 36676: a5 = a5 | s1\n 36679: a3 = a3 | a5\n 36682: a3 = a3 << 0x20\n 36685: a2 = a2 | a3\n 36688: a3 = u8 [a0 + 0x19]\n 36691: a4 = u8 [a0 + 0x18]\n 36694: a5 = u8 [a0 + 0x1a]\n 36697: s1 = u8 [a0 + 0x1b]\n 36700: a3 = a3 << 0x8\n 36703: a3 = a3 | a4\n 36706: a5 = a5 << 0x10\n 36709: s1 = s1 << 0x18\n 36712: a5 = a5 | s1\n 36715: a3 = a3 | a5\n 36718: a4 = u8 [a0 + 0x1d]\n 36721: a5 = u8 [a0 + 0x1c]\n 36724: s1 = u8 [a0 + 0x1e]\n 36727: a1 = u8 [a0 + 0x1f]\n 36730: a4 = a4 << 0x8\n 36733: a4 = a4 | a5\n 36736: s1 = s1 << 0x10\n 36739: a1 = a1 << 0x18\n 36742: a1 = a1 | s1\n 36745: a1 = a1 | a4\n 36748: a1 = a1 << 0x20\n 36751: a3 = a3 | a1\n 36754: a1 = u8 [a0 + 0x9]\n 36757: a4 = u8 [a0 + 0x8]\n 36760: a5 = u8 [a0 + 0xa]\n 36763: s1 = u8 [a0 + 0xb]\n 36766: a1 = a1 << 0x8\n 36769: a1 = a1 | a4\n 36772: a5 = a5 << 0x10\n 36775: s1 = s1 << 0x18\n 36778: a5 = a5 | s1\n 36781: a1 = a1 | a5\n 36784: a4 = u8 [a0 + 0xd]\n 36787: a5 = u8 [a0 + 0xc]\n 36790: s1 = u8 [a0 + 0xe]\n 36793: a0 = u8 [a0 + 0xf]\n 36796: a4 = a4 << 0x8\n 36799: a4 = a4 | a5\n 36802: s1 = s1 << 0x10\n 36805: a0 = a0 << 0x18\n 36808: a0 = a0 | s1\n 36811: a0 = a0 | a4\n 36814: a0 = a0 << 0x20\n 36817: a0 = a0 | a1\n 36820: a1 = reverse a0\n 36822: a0 = reverse a3\n 36824: a2 = reverse a2\n 36826: a3 = reverse t0\n 36828: a2 = a2 | a3\n 36831: a3 = a0 | a1\n 36834: a3 = a3 | a2\n 36837: a3 = a3 >> 0x20\n 36840: a1 = a1 | a2\n 36843: a1 = a1 << 0x20\n 36846: a1 = a1 | a3\n 36849: jump @520 if a1 == 0\n      : @517 (gas: 1)\n 36852: trap\n      : @518 (gas: 3)\n 36853: a0 = 0\n 36855: a1 = 0\n 36857: ra = 442, jump @0\n      : @519 [@dyn 221] (gas: 5)\n 36864: i32 a1 = a0 + 0\n 36866: a0 = 0x1\n 36869: a2 = 0\n 36871: ecalli 14 // 'seal_return'\n 36873: fallthrough\n      : @520 (gas: 4)\n 36874: i32 s1 = a0 + 0\n 36876: a1 = 0x20\n 36879: a0 = s1\n 36881: ra = 444, jump @0\n      : @521 [@dyn 222] (gas: 71)\n 36888: a1 = u64 [sp]\n 36890: a1 = reverse a1\n 36892: a2 = u64 [sp + 0x8]\n 36895: a2 = reverse a2\n 36897: a3 = u64 [sp + 0x10]\n 36900: a3 = reverse a3\n 36902: a4 = u64 [sp + 0x18]\n 36905: a4 = reverse a4\n 36907: a5 = a4 >> 0x38\n 36910: u8 [a0 + 0x1f] = a5\n 36913: a5 = a4 >> 0x30\n 36916: u8 [a0 + 0x1e] = a5\n 36919: a5 = a4 >> 0x28\n 36922: u8 [a0 + 0x1d] = a5\n 36925: a5 = a4 >> 0x20\n 36928: u8 [a0 + 0x1c] = a5\n 36931: a5 = a4 >> 0x18\n 36934: u8 [a0 + 0x1b] = a5\n 36937: a5 = a4 >> 0x10\n 36940: u8 [a0 + 0x1a] = a5\n 36943: a5 = a4 >> 0x8\n 36946: u8 [a0 + 0x19] = a5\n 36949: u8 [a0 + 0x18] = a4\n 36952: u8 [a0 + 0x10] = a3\n 36955: a4 = a3 >> 0x38\n 36958: u8 [a0 + 0x17] = a4\n 36961: a4 = a3 >> 0x30\n 36964: u8 [a0 + 0x16] = a4\n 36967: a4 = a3 >> 0x28\n 36970: u8 [a0 + 0x15] = a4\n 36973: a4 = a3 >> 0x20\n 36976: u8 [a0 + 0x14] = a4\n 36979: a4 = a3 >> 0x18\n 36982: u8 [a0 + 0x13] = a4\n 36985: a4 = a3 >> 0x10\n 36988: u8 [a0 + 0x12] = a4\n 36991: a3 = a3 >> 0x8\n 36994: u8 [a0 + 0x11] = a3\n 36997: u8 [a0 + 0x8] = a2\n 37000: a3 = a2 >> 0x38\n 37003: u8 [a0 + 0xf] = a3\n 37006: a3 = a2 >> 0x30\n 37009: u8 [a0 + 0xe] = a3\n 37012: a3 = a2 >> 0x28\n 37015: u8 [a0 + 0xd] = a3\n 37018: a3 = a2 >> 0x20\n 37021: u8 [a0 + 0xc] = a3\n 37024: a3 = a2 >> 0x18\n 37027: u8 [a0 + 0xb] = a3\n 37030: a3 = a2 >> 0x10\n 37033: u8 [a0 + 0xa] = a3\n 37036: a2 = a2 >> 0x8\n 37039: u8 [a0 + 0x9] = a2\n 37042: u8 [a0] = a1\n 37044: a2 = a1 >> 0x38\n 37047: u8 [a0 + 0x7] = a2\n 37050: a2 = a1 >> 0x30\n 37053: u8 [a0 + 0x6] = a2\n 37056: a2 = a1 >> 0x28\n 37059: u8 [a0 + 0x5] = a2\n 37062: a2 = a1 >> 0x20\n 37065: u8 [a0 + 0x4] = a2\n 37068: a2 = a1 >> 0x18\n 37071: u8 [a0 + 0x3] = a2\n 37074: a2 = a1 >> 0x10\n 37077: u8 [a0 + 0x2] = a2\n 37080: a1 = a1 >> 0x8\n 37083: u8 [a0 + 0x1] = a1\n 37086: a1 = 0x20\n 37089: a0 = s1\n 37091: ra = 446, jump @0\n      : @522 [@dyn 223] (gas: 6)\n 37098: i32 a1 = a0 + 0\n 37100: a2 = 0x20\n 37103: a0 = 0\n 37105: ra = 0x1c0\n 37109: ecalli 14 // 'seal_return'\n 37111: fallthrough\n      : @523 [@dyn 224] (gas: 9)\n 37112: a2 = u64 [a1 + 0x18]\n 37115: a3 = u64 [a1 + 0x10]\n 37118: a4 = u64 [a1 + 0x8]\n 37121: a1 = u64 [a1]\n 37123: u64 [a0 + 0x18] = a2\n 37126: u64 [a0 + 0x10] = a3\n 37129: u64 [a0 + 0x8] = a4\n 37132: u64 [a0] = a1\n 37134: ret\n      : @524 (gas: 8)\n 37136: a0 = u64 [sp + 0x90]\n 37140: a1 = u64 [sp + 0x98]\n 37144: a2 = u64 [sp + 0x88]\n 37148: a3 = u64 [sp + 0x80]\n 37152: a1 = a1 | a2\n 37155: a0 = a0 | a3\n 37158: a0 = a0 | a1\n 37161: jump @530 if a0 != 0\n      : @525 (gas: 2)\n 37165: a0 = i32 [0x20078]\n 37170: jump @530 if a0 <=u 67\n      : @526 (gas: 32)\n 37175: i32 a0 = sp + 0xa0\n 37179: a1 = 0x4\n 37182: ecalli 3 // 'call_data_load'\n 37184: a0 = u64 [sp + 0xa0]\n 37188: u64 [sp + 0x18] = a0\n 37191: a0 = u64 [sp + 0xa8]\n 37195: u64 [sp + 0x10] = a0\n 37198: a0 = u64 [sp + 0xb0]\n 37202: u64 [sp + 0x8] = a0\n 37205: s1 = u64 [sp + 0xb8]\n 37209: i32 a0 = sp + 0xa0\n 37213: a1 = 0x24\n 37216: ecalli 3 // 'call_data_load'\n 37218: a0 = u64 [sp + 0xa0]\n 37222: a1 = u64 [sp + 0xa8]\n 37226: a2 = u64 [sp + 0xb0]\n 37230: a3 = u64 [sp + 0xb8]\n 37234: u64 [sp + 0x38] = a3\n 37237: u64 [sp + 0x30] = a2\n 37240: u64 [sp + 0x28] = a1\n 37243: u64 [sp + 0x20] = a0\n 37246: u64 [sp + 0x58] = s1\n 37249: a0 = u64 [sp + 0x8]\n 37252: u64 [sp + 0x50] = a0\n 37255: a0 = u64 [sp + 0x10]\n 37258: u64 [sp + 0x48] = a0\n 37261: a0 = sp + 0x60\n 37264: a1 = sp + 0x40\n 37267: a2 = sp + 0x20\n 37270: a3 = u64 [sp + 0x18]\n 37273: u64 [sp + 0x40] = a3\n 37276: ra = 450, jump @1418\n      : @527 [@dyn 225] (gas: 11)\n 37283: a0 = u64 [sp + 0x78]\n 37286: u64 [sp] = a0\n 37288: a0 = u64 [sp + 0x70]\n 37291: u64 [sp + 0x8] = a0\n 37294: a0 = u64 [sp + 0x68]\n 37297: u64 [sp + 0x10] = a0\n 37300: a0 = u64 [sp + 0x60]\n 37303: u64 [sp + 0x18] = a0\n 37306: a0 = 0x40\n 37309: a1 = 0x20\n 37312: ra = 452, jump @0\n      : @528 [@dyn 226] (gas: 100)\n 37319: a1 = u8 [a0 + 0x11]\n 37322: a2 = u8 [a0 + 0x10]\n 37325: a3 = u8 [a0 + 0x12]\n 37328: a4 = u8 [a0 + 0x13]\n 37331: a1 = a1 << 0x8\n 37334: a1 = a1 | a2\n 37337: a3 = a3 << 0x10\n 37340: a4 = a4 << 0x18\n 37343: a3 = a3 | a4\n 37346: a1 = a1 | a3\n 37349: a2 = u8 [a0 + 0x15]\n 37352: a3 = u8 [a0 + 0x14]\n 37355: a4 = u8 [a0 + 0x16]\n 37358: a5 = u8 [a0 + 0x17]\n 37361: a2 = a2 << 0x8\n 37364: a2 = a2 | a3\n 37367: a4 = a4 << 0x10\n 37370: a5 = a5 << 0x18\n 37373: a4 = a4 | a5\n 37376: a2 = a2 | a4\n 37379: a2 = a2 << 0x20\n 37382: t0 = a2 | a1\n 37385: a2 = u8 [a0 + 0x1]\n 37388: a3 = u8 [a0]\n 37390: a4 = u8 [a0 + 0x2]\n 37393: a5 = u8 [a0 + 0x3]\n 37396: a2 = a2 << 0x8\n 37399: a2 = a2 | a3\n 37402: a4 = a4 << 0x10\n 37405: a5 = a5 << 0x18\n 37408: a4 = a4 | a5\n 37411: a2 = a2 | a4\n 37414: a3 = u8 [a0 + 0x5]\n 37417: a4 = u8 [a0 + 0x4]\n 37420: a5 = u8 [a0 + 0x6]\n 37423: s1 = u8 [a0 + 0x7]\n 37426: a3 = a3 << 0x8\n 37429: a3 = a3 | a4\n 37432: a5 = a5 << 0x10\n 37435: s1 = s1 << 0x18\n 37438: a5 = a5 | s1\n 37441: a3 = a3 | a5\n 37444: a3 = a3 << 0x20\n 37447: a2 = a2 | a3\n 37450: a3 = u8 [a0 + 0x19]\n 37453: a4 = u8 [a0 + 0x18]\n 37456: a5 = u8 [a0 + 0x1a]\n 37459: s1 = u8 [a0 + 0x1b]\n 37462: a3 = a3 << 0x8\n 37465: a3 = a3 | a4\n 37468: a5 = a5 << 0x10\n 37471: s1 = s1 << 0x18\n 37474: a5 = a5 | s1\n 37477: a3 = a3 | a5\n 37480: a4 = u8 [a0 + 0x1d]\n 37483: a5 = u8 [a0 + 0x1c]\n 37486: s1 = u8 [a0 + 0x1e]\n 37489: a1 = u8 [a0 + 0x1f]\n 37492: a4 = a4 << 0x8\n 37495: a4 = a4 | a5\n 37498: s1 = s1 << 0x10\n 37501: a1 = a1 << 0x18\n 37504: a1 = a1 | s1\n 37507: a1 = a1 | a4\n 37510: a1 = a1 << 0x20\n 37513: a3 = a3 | a1\n 37516: a1 = u8 [a0 + 0x9]\n 37519: a4 = u8 [a0 + 0x8]\n 37522: a5 = u8 [a0 + 0xa]\n 37525: s1 = u8 [a0 + 0xb]\n 37528: a1 = a1 << 0x8\n 37531: a1 = a1 | a4\n 37534: a5 = a5 << 0x10\n 37537: s1 = s1 << 0x18\n 37540: a5 = a5 | s1\n 37543: a1 = a1 | a5\n 37546: a4 = u8 [a0 + 0xd]\n 37549: a5 = u8 [a0 + 0xc]\n 37552: s1 = u8 [a0 + 0xe]\n 37555: a0 = u8 [a0 + 0xf]\n 37558: a4 = a4 << 0x8\n 37561: a4 = a4 | a5\n 37564: s1 = s1 << 0x10\n 37567: a0 = a0 << 0x18\n 37570: a0 = a0 | s1\n 37573: a0 = a0 | a4\n 37576: a0 = a0 << 0x20\n 37579: a0 = a0 | a1\n 37582: a1 = reverse a0\n 37584: a0 = reverse a3\n 37586: a2 = reverse a2\n 37588: a3 = reverse t0\n 37590: a2 = a2 | a3\n 37593: a3 = a0 | a1\n 37596: a3 = a3 | a2\n 37599: a3 = a3 >> 0x20\n 37602: a1 = a1 | a2\n 37605: a1 = a1 << 0x20\n 37608: a1 = a1 | a3\n 37611: jump @532 if a1 == 0\n      : @529 (gas: 1)\n 37614: trap\n      : @530 (gas: 3)\n 37615: a0 = 0\n 37617: a1 = 0\n 37619: ra = 454, jump @0\n      : @531 [@dyn 227] (gas: 5)\n 37626: i32 a1 = a0 + 0\n 37628: a0 = 0x1\n 37631: a2 = 0\n 37633: ecalli 14 // 'seal_return'\n 37635: fallthrough\n      : @532 (gas: 4)\n 37636: i32 s1 = a0 + 0\n 37638: a1 = 0x20\n 37641: a0 = s1\n 37643: ra = 456, jump @0\n      : @533 [@dyn 228] (gas: 71)\n 37650: a1 = u64 [sp]\n 37652: a1 = reverse a1\n 37654: a2 = u64 [sp + 0x8]\n 37657: a2 = reverse a2\n 37659: a3 = u64 [sp + 0x10]\n 37662: a3 = reverse a3\n 37664: a4 = u64 [sp + 0x18]\n 37667: a4 = reverse a4\n 37669: a5 = a4 >> 0x38\n 37672: u8 [a0 + 0x1f] = a5\n 37675: a5 = a4 >> 0x30\n 37678: u8 [a0 + 0x1e] = a5\n 37681: a5 = a4 >> 0x28\n 37684: u8 [a0 + 0x1d] = a5\n 37687: a5 = a4 >> 0x20\n 37690: u8 [a0 + 0x1c] = a5\n 37693: a5 = a4 >> 0x18\n 37696: u8 [a0 + 0x1b] = a5\n 37699: a5 = a4 >> 0x10\n 37702: u8 [a0 + 0x1a] = a5\n 37705: a5 = a4 >> 0x8\n 37708: u8 [a0 + 0x19] = a5\n 37711: u8 [a0 + 0x18] = a4\n 37714: u8 [a0 + 0x10] = a3\n 37717: a4 = a3 >> 0x38\n 37720: u8 [a0 + 0x17] = a4\n 37723: a4 = a3 >> 0x30\n 37726: u8 [a0 + 0x16] = a4\n 37729: a4 = a3 >> 0x28\n 37732: u8 [a0 + 0x15] = a4\n 37735: a4 = a3 >> 0x20\n 37738: u8 [a0 + 0x14] = a4\n 37741: a4 = a3 >> 0x18\n 37744: u8 [a0 + 0x13] = a4\n 37747: a4 = a3 >> 0x10\n 37750: u8 [a0 + 0x12] = a4\n 37753: a3 = a3 >> 0x8\n 37756: u8 [a0 + 0x11] = a3\n 37759: u8 [a0 + 0x8] = a2\n 37762: a3 = a2 >> 0x38\n 37765: u8 [a0 + 0xf] = a3\n 37768: a3 = a2 >> 0x30\n 37771: u8 [a0 + 0xe] = a3\n 37774: a3 = a2 >> 0x28\n 37777: u8 [a0 + 0xd] = a3\n 37780: a3 = a2 >> 0x20\n 37783: u8 [a0 + 0xc] = a3\n 37786: a3 = a2 >> 0x18\n 37789: u8 [a0 + 0xb] = a3\n 37792: a3 = a2 >> 0x10\n 37795: u8 [a0 + 0xa] = a3\n 37798: a2 = a2 >> 0x8\n 37801: u8 [a0 + 0x9] = a2\n 37804: u8 [a0] = a1\n 37806: a2 = a1 >> 0x38\n 37809: u8 [a0 + 0x7] = a2\n 37812: a2 = a1 >> 0x30\n 37815: u8 [a0 + 0x6] = a2\n 37818: a2 = a1 >> 0x28\n 37821: u8 [a0 + 0x5] = a2\n 37824: a2 = a1 >> 0x20\n 37827: u8 [a0 + 0x4] = a2\n 37830: a2 = a1 >> 0x18\n 37833: u8 [a0 + 0x3] = a2\n 37836: a2 = a1 >> 0x10\n 37839: u8 [a0 + 0x2] = a2\n 37842: a1 = a1 >> 0x8\n 37845: u8 [a0 + 0x1] = a1\n 37848: a1 = 0x20\n 37851: a0 = s1\n 37853: ra = 458, jump @0\n      : @534 [@dyn 229] (gas: 6)\n 37860: i32 a1 = a0 + 0\n 37862: a2 = 0x20\n 37865: a0 = 0\n 37867: ra = 0x1cc\n 37871: ecalli 14 // 'seal_return'\n 37873: fallthrough\n      : @535 [@dyn 230] (gas: 43)\n 37874: sp = sp + 0xfffffffffffffe80\n 37878: u64 [sp + 0x178] = ra\n 37882: u64 [sp + 0x170] = s0\n 37886: u64 [sp + 0x168] = s1\n 37890: s0 = sp + 0x180\n 37894: sp = sp & 0xffffffffffffffe0\n 37897: t2 = u64 [a2 + 0x8]\n 37900: ra = u64 [a1 + 0x8]\n 37903: s1 = u64 [a2]\n 37905: a5 = u64 [a1]\n 37907: t0 = u64 [a2 + 0x10]\n 37910: a4 = t2 ^ ra\n 37913: a3 = t2 <u ra\n 37916: t1 = s1 <u a5\n 37919: a3 = t1 if a4 == 0\n 37922: a4 = t2 - ra\n 37925: a4 = a4 - t1\n 37928: u64 [sp + 0x60] = s1\n 37931: u64 [sp + 0x98] = a5\n 37935: a5 = s1 - a5\n 37938: a5 = a5 <u 0x60\n 37941: a5 = a5 ^ 0x1\n 37944: t1 = u64 [a1 + 0x10]\n 37947: s1 = a4 >u 0\n 37949: a5 = s1 if a4 != 0\n 37952: a4 = u64 [a2 + 0x18]\n 37955: s1 = u64 [a1 + 0x18]\n 37958: a1 = t0 - t1\n 37961: a2 = a1 - a3\n 37964: a1 = a1 <u a3\n 37967: u64 [sp + 0x90] = t1\n 37971: a3 = t0 <u t1\n 37974: u64 [sp + 0x58] = a4\n 37977: u64 [sp + 0x88] = s1\n 37981: a4 = a4 - s1\n 37984: a4 = a4 - a3\n 37987: a4 = a4 - a1\n 37990: a1 = a4 >s 0\n 37992: a3 = a2 >u 0\n 37994: a3 = a1 if a4 != 0\n 37997: a2 = a2 | a4\n 38000: a5 = a3 if a2 != 0\n 38003: jump @546 if a5 == 0\n      : @536 (gas: 15)\n 38007: s1 = a0\n 38009: u64 [sp + 0x68] = t0\n 38012: u64 [sp + 0x70] = t2\n 38015: a2 = u64 [sp + 0x90]\n 38019: t2 = u64 [sp + 0x98]\n 38023: a0 = t2 | a2\n 38026: a1 = u64 [sp + 0x88]\n 38030: a1 = ra | a1\n 38033: a0 = a0 | a1\n 38036: a0 = a0 >> 0x20\n 38039: a1 = a1 | a2\n 38042: a1 = a1 << 0x20\n 38045: a0 = a0 | a1\n 38048: u64 [sp + 0x80] = ra\n 38052: jump @545 if a0 != 0\n      : @537 (gas: 5)\n 38056: i32 a1 = t2 + 0\n 38058: i32 a0 = sp + 0x140\n 38062: u64 [sp + 0x78] = a1\n 38065: ecalli 3 // 'call_data_load'\n 38067: fallthrough\n      : @538 (gas: 13)\n 38068: a0 = u64 [sp + 0x90]\n 38072: a1 = u64 [sp + 0x88]\n 38076: a2 = a0 | a1\n 38079: a0 = 0x100000000\n 38089: u64 [sp + 0x48] = a0\n 38092: a0 = 0xffffffe0\n 38102: a1 = u64 [sp + 0x98]\n 38106: a0 = a1 <u a0\n 38109: a1 = u64 [sp + 0x80]\n 38113: a0 = 0 if a1 != 0\n 38115: u64 [sp + 0x50] = a2\n 38118: a0 = 0 if a2 != 0\n 38120: jump @545 if a0 == 0\n      : @539 (gas: 13)\n 38124: a0 = u64 [sp + 0x158]\n 38128: u64 [sp + 0x38] = a0\n 38131: a0 = u64 [sp + 0x150]\n 38135: u64 [sp + 0x28] = a0\n 38138: a0 = u64 [sp + 0x148]\n 38142: u64 [sp + 0x40] = a0\n 38145: a0 = u64 [sp + 0x140]\n 38149: u64 [sp + 0x30] = a0\n 38152: a0 = u64 [sp + 0x78]\n 38155: i32 a1 = a0 + 0x20\n 38158: i32 a0 = sp + 0x140\n 38162: ecalli 3 // 'call_data_load'\n 38164: fallthrough\n      : @540 (gas: 9)\n 38165: a0 = u64 [sp + 0x48]\n 38168: a0 = a0 + 0xffffffffffffffc0\n 38171: a1 = u64 [sp + 0x98]\n 38175: a0 = a1 <u a0\n 38178: a1 = u64 [sp + 0x80]\n 38182: a0 = 0 if a1 != 0\n 38184: a1 = u64 [sp + 0x50]\n 38187: a0 = 0 if a1 != 0\n 38189: jump @545 if a0 == 0\n      : @541 (gas: 13)\n 38193: a0 = u64 [sp + 0x158]\n 38197: u64 [sp + 0x48] = a0\n 38200: a0 = u64 [sp + 0x150]\n 38204: u64 [sp + 0x18] = a0\n 38207: a0 = u64 [sp + 0x148]\n 38211: u64 [sp + 0x50] = a0\n 38214: a0 = u64 [sp + 0x140]\n 38218: u64 [sp + 0x20] = a0\n 38221: a0 = u64 [sp + 0x78]\n 38224: i32 a1 = a0 + 0x40\n 38227: i32 a0 = sp + 0x120\n 38231: ecalli 3 // 'call_data_load'\n 38233: fallthrough\n      : @542 (gas: 7)\n 38234: t0 = u64 [sp + 0x138]\n 38238: a1 = u64 [sp + 0x130]\n 38242: a2 = u64 [sp + 0x128]\n 38246: a3 = a1 | t0\n 38249: a4 = a2 <u 0x1\n 38252: a4 = 0 if a3 != 0\n 38254: jump @546 if a4 == 0\n      : @543 (gas: 35)\n 38258: a3 = u64 [sp + 0x120]\n 38262: a4 = u64 [sp + 0x98]\n 38266: a4 = a4 + a3\n 38269: a3 = a4 <u a3\n 38272: a5 = u64 [sp + 0x80]\n 38276: a5 = a5 + a2\n 38279: a5 = a5 + a3\n 38282: a0 = a5 ^ a2\n 38285: a2 = a5 <u a2\n 38288: a2 = a3 if a0 == 0\n 38291: a0 = u64 [sp + 0x90]\n 38295: a0 = a0 + a1\n 38298: a2 = a2 + a0\n 38301: a3 = a2 <u a0\n 38304: a0 = a0 <u a1\n 38307: a1 = u64 [sp + 0x88]\n 38311: t0 = t0 + a1\n 38314: a0 = a0 + t0\n 38317: a3 = a3 + a0\n 38320: a0 = u64 [sp + 0x60]\n 38323: u64 [sp + 0xa0] = a0\n 38327: a0 = u64 [sp + 0x70]\n 38330: u64 [sp + 0xa8] = a0\n 38334: u64 [sp + 0xc0] = a4\n 38338: a0 = u64 [sp + 0x68]\n 38341: u64 [sp + 0xb0] = a0\n 38345: a0 = u64 [sp + 0x58]\n 38348: u64 [sp + 0xb8] = a0\n 38352: u64 [sp + 0xc8] = a5\n 38356: u64 [sp + 0xd0] = a2\n 38360: a0 = sp + 0xe0\n 38364: a1 = sp + 0xc0\n 38368: a2 = sp + 0xa0\n 38372: u64 [sp + 0xd8] = a3\n 38376: ra = 462, jump @446\n      : @544 [@dyn 231] (gas: 38)\n 38382: t0 = u64 [sp + 0xe8]\n 38386: t1 = u64 [sp + 0xe0]\n 38390: a2 = u64 [sp + 0xf8]\n 38394: a3 = u64 [sp + 0xf0]\n 38398: a4 = u64 [sp + 0x110]\n 38402: a5 = u64 [sp + 0x118]\n 38406: a0 = u64 [sp + 0x100]\n 38410: a1 = u64 [sp + 0x108]\n 38414: u64 [s1 + 0x70] = a4\n 38417: u64 [s1 + 0x78] = a5\n 38420: u64 [s1 + 0x60] = a0\n 38423: u64 [s1 + 0x68] = a1\n 38426: u64 [s1 + 0x50] = a3\n 38429: u64 [s1 + 0x58] = a2\n 38432: u64 [s1 + 0x40] = t1\n 38435: u64 [s1 + 0x48] = t0\n 38438: a0 = u64 [sp + 0x18]\n 38441: u64 [s1 + 0x30] = a0\n 38444: a0 = u64 [sp + 0x48]\n 38447: u64 [s1 + 0x38] = a0\n 38450: a0 = u64 [sp + 0x20]\n 38453: u64 [s1 + 0x20] = a0\n 38456: a0 = u64 [sp + 0x50]\n 38459: u64 [s1 + 0x28] = a0\n 38462: a0 = u64 [sp + 0x28]\n 38465: u64 [s1 + 0x10] = a0\n 38468: a0 = u64 [sp + 0x38]\n 38471: u64 [s1 + 0x18] = a0\n 38474: a0 = u64 [sp + 0x30]\n 38477: u64 [s1] = a0\n 38479: a0 = u64 [sp + 0x40]\n 38482: u64 [s1 + 0x8] = a0\n 38485: sp = s0 + 0xfffffffffffffe80\n 38489: ra = u64 [sp + 0x178]\n 38493: s0 = u64 [sp + 0x170]\n 38497: s1 = u64 [sp + 0x168]\n 38501: sp = sp + 0x180\n 38505: ret\n      : @545 (gas: 1)\n 38507: trap\n      : @546 (gas: 3)\n 38508: a0 = 0\n 38510: a1 = 0\n 38512: ra = 464, jump @0\n      : @547 [@dyn 232] (gas: 6)\n 38519: i32 a1 = a0 + 0\n 38521: a0 = 0x1\n 38524: a2 = 0\n 38526: ra = 0x1d2\n 38530: ecalli 14 // 'seal_return'\n 38532: fallthrough\n      : @548 [@dyn 233] (gas: 13)\n 38533: sp = sp + 0xfffffffffffffe40\n 38537: u64 [sp + 0x1b8] = ra\n 38541: u64 [sp + 0x1b0] = s0\n 38545: u64 [sp + 0x1a8] = s1\n 38549: s0 = sp + 0x1c0\n 38553: sp = sp & 0xffffffffffffffe0\n 38556: u64 [sp + 408] = 0\n 38560: u64 [sp + 400] = 0\n 38564: u64 [sp + 392] = 0\n 38568: u64 [sp + 384] = 0\n 38572: i32 a0 = sp + 0x180\n 38576: ecalli 17 // 'value_transferred'\n 38578: fallthrough\n      : @549 (gas: 8)\n 38579: a0 = u64 [sp + 0x190]\n 38583: a1 = u64 [sp + 0x198]\n 38587: a2 = u64 [sp + 0x188]\n 38591: a3 = u64 [sp + 0x180]\n 38595: a1 = a1 | a2\n 38598: a0 = a0 | a3\n 38601: a0 = a0 | a1\n 38604: jump @555 if a0 != 0\n      : @550 (gas: 13)\n 38608: a0 = u32 [0x20078]\n 38613: u64 [sp + 216] = 0\n 38617: u64 [sp + 208] = 0\n 38621: u64 [sp + 200] = 0\n 38625: u64 [sp + 0xc0] = a0\n 38629: u64 [sp + 248] = 0\n 38633: u64 [sp + 240] = 0\n 38637: u64 [sp + 224] = 0x4\n 38642: a0 = sp + 0x100\n 38646: a1 = sp + 0xe0\n 38650: a2 = sp + 0xc0\n 38654: u64 [sp + 232] = 0\n 38658: ra = 468, jump @535\n      : @551 [@dyn 234] (gas: 47)\n 38664: a0 = u64 [sp + 0x100]\n 38668: u64 [sp + 0x38] = a0\n 38671: a0 = u64 [sp + 0x108]\n 38675: u64 [sp + 0x30] = a0\n 38678: a0 = u64 [sp + 0x110]\n 38682: u64 [sp + 0x28] = a0\n 38685: a0 = u64 [sp + 0x118]\n 38689: u64 [sp + 0x20] = a0\n 38692: a0 = u64 [sp + 0x120]\n 38696: u64 [sp + 0x18] = a0\n 38699: ra = u64 [sp + 0x128]\n 38703: t2 = u64 [sp + 0x130]\n 38707: t1 = u64 [sp + 0x138]\n 38711: t0 = u64 [sp + 0x140]\n 38715: s1 = u64 [sp + 0x148]\n 38719: a5 = u64 [sp + 0x150]\n 38723: a4 = u64 [sp + 0x158]\n 38727: a3 = u64 [sp + 0x160]\n 38731: a2 = u64 [sp + 0x168]\n 38735: a1 = u64 [sp + 0x170]\n 38739: a0 = u64 [sp + 0x178]\n 38743: u64 [sp + 0x58] = a0\n 38746: u64 [sp + 0x50] = a1\n 38749: u64 [sp + 0x48] = a2\n 38752: u64 [sp + 0x40] = a3\n 38755: u64 [sp + 0x78] = a4\n 38758: u64 [sp + 0x70] = a5\n 38761: u64 [sp + 0x68] = s1\n 38764: u64 [sp + 0x60] = t0\n 38767: u64 [sp + 0x98] = t1\n 38771: u64 [sp + 0x90] = t2\n 38775: u64 [sp + 0x88] = ra\n 38779: a0 = u64 [sp + 0x18]\n 38782: u64 [sp + 0x80] = a0\n 38786: a0 = u64 [sp + 0x20]\n 38789: u64 [sp + 0xb8] = a0\n 38793: a0 = u64 [sp + 0x28]\n 38796: u64 [sp + 0xb0] = a0\n 38800: a0 = u64 [sp + 0x30]\n 38803: u64 [sp + 0xa8] = a0\n 38807: a0 = sp + 0xa0\n 38811: a1 = sp + 0x80\n 38815: a2 = sp + 0x60\n 38818: a3 = sp + 0x40\n 38821: a4 = u64 [sp + 0x38]\n 38824: u64 [sp + 0xa0] = a4\n 38828: ra = 470, jump @1010\n      : @552 [@dyn 235] (gas: 3)\n 38835: a0 = 0x40\n 38838: a1 = 0x20\n 38841: ra = 472, jump @0\n      : @553 [@dyn 236] (gas: 100)\n 38848: a1 = u8 [a0 + 0x11]\n 38851: a2 = u8 [a0 + 0x10]\n 38854: a3 = u8 [a0 + 0x12]\n 38857: a4 = u8 [a0 + 0x13]\n 38860: a1 = a1 << 0x8\n 38863: a1 = a1 | a2\n 38866: a3 = a3 << 0x10\n 38869: a4 = a4 << 0x18\n 38872: a3 = a3 | a4\n 38875: a1 = a1 | a3\n 38878: a2 = u8 [a0 + 0x15]\n 38881: a3 = u8 [a0 + 0x14]\n 38884: a4 = u8 [a0 + 0x16]\n 38887: a5 = u8 [a0 + 0x17]\n 38890: a2 = a2 << 0x8\n 38893: a2 = a2 | a3\n 38896: a4 = a4 << 0x10\n 38899: a5 = a5 << 0x18\n 38902: a4 = a4 | a5\n 38905: a2 = a2 | a4\n 38908: a2 = a2 << 0x20\n 38911: t0 = a2 | a1\n 38914: a2 = u8 [a0 + 0x1]\n 38917: a3 = u8 [a0]\n 38919: a4 = u8 [a0 + 0x2]\n 38922: a5 = u8 [a0 + 0x3]\n 38925: a2 = a2 << 0x8\n 38928: a2 = a2 | a3\n 38931: a4 = a4 << 0x10\n 38934: a5 = a5 << 0x18\n 38937: a4 = a4 | a5\n 38940: a2 = a2 | a4\n 38943: a3 = u8 [a0 + 0x5]\n 38946: a4 = u8 [a0 + 0x4]\n 38949: a5 = u8 [a0 + 0x6]\n 38952: s1 = u8 [a0 + 0x7]\n 38955: a3 = a3 << 0x8\n 38958: a3 = a3 | a4\n 38961: a5 = a5 << 0x10\n 38964: s1 = s1 << 0x18\n 38967: a5 = a5 | s1\n 38970: a3 = a3 | a5\n 38973: a3 = a3 << 0x20\n 38976: a2 = a2 | a3\n 38979: a3 = u8 [a0 + 0x19]\n 38982: a4 = u8 [a0 + 0x18]\n 38985: a5 = u8 [a0 + 0x1a]\n 38988: s1 = u8 [a0 + 0x1b]\n 38991: a3 = a3 << 0x8\n 38994: a3 = a3 | a4\n 38997: a5 = a5 << 0x10\n 39000: s1 = s1 << 0x18\n 39003: a5 = a5 | s1\n 39006: a3 = a3 | a5\n 39009: a4 = u8 [a0 + 0x1d]\n 39012: a5 = u8 [a0 + 0x1c]\n 39015: s1 = u8 [a0 + 0x1e]\n 39018: a1 = u8 [a0 + 0x1f]\n 39021: a4 = a4 << 0x8\n 39024: a4 = a4 | a5\n 39027: s1 = s1 << 0x10\n 39030: a1 = a1 << 0x18\n 39033: a1 = a1 | s1\n 39036: a1 = a1 | a4\n 39039: a1 = a1 << 0x20\n 39042: a3 = a3 | a1\n 39045: a1 = u8 [a0 + 0x9]\n 39048: a4 = u8 [a0 + 0x8]\n 39051: a5 = u8 [a0 + 0xa]\n 39054: s1 = u8 [a0 + 0xb]\n 39057: a1 = a1 << 0x8\n 39060: a1 = a1 | a4\n 39063: a5 = a5 << 0x10\n 39066: s1 = s1 << 0x18\n 39069: a5 = a5 | s1\n 39072: a1 = a1 | a5\n 39075: a4 = u8 [a0 + 0xd]\n 39078: a5 = u8 [a0 + 0xc]\n 39081: s1 = u8 [a0 + 0xe]\n 39084: a0 = u8 [a0 + 0xf]\n 39087: a4 = a4 << 0x8\n 39090: a4 = a4 | a5\n 39093: s1 = s1 << 0x10\n 39096: a0 = a0 << 0x18\n 39099: a0 = a0 | s1\n 39102: a0 = a0 | a4\n 39105: a0 = a0 << 0x20\n 39108: a0 = a0 | a1\n 39111: a1 = reverse a0\n 39113: a0 = reverse a3\n 39115: a2 = reverse a2\n 39117: a3 = reverse t0\n 39119: a2 = a2 | a3\n 39122: a3 = a0 | a1\n 39125: a3 = a3 | a2\n 39128: a3 = a3 >> 0x20\n 39131: a1 = a1 | a2\n 39134: a1 = a1 << 0x20\n 39137: a1 = a1 | a3\n 39140: jump @557 if a1 == 0\n      : @554 (gas: 1)\n 39143: trap\n      : @555 (gas: 3)\n 39144: a0 = 0\n 39146: a1 = 0\n 39148: ra = 474, jump @0\n      : @556 [@dyn 237] (gas: 7)\n 39155: i32 a1 = a0 + 0\n 39157: a0 = 0x1\n 39160: a2 = 0\n 39162: ecalli 14 // 'seal_return'\n 39164: i32 a0 = a0 + 0\n 39166: ra = 0x1dc\n 39170: jump @0\n      : @557 (gas: 2)\n 39174: i32 a0 = a0 + 0\n 39176: ra = 476, jump @0\n      : @558 [@dyn 238] (gas: 6)\n 39183: i32 a1 = a0 + 0\n 39185: a0 = 0\n 39187: a2 = 0\n 39189: ra = 0x1de\n 39193: ecalli 14 // 'seal_return'\n 39195: fallthrough\n      : @559 [@dyn 239] (gas: 14)\n 39196: sp = sp + 0xffffffffffffffa0\n 39199: u64 [sp + 0x58] = ra\n 39202: u64 [sp + 0x50] = s0\n 39205: u64 [sp + 0x48] = s1\n 39208: s0 = sp + 0x60\n 39211: sp = sp & 0xfffffffffffffff0\n 39214: s1 = a0\n 39216: u64 [sp + 24] = 0\n 39219: u64 [sp + 16] = 0\n 39222: u64 [sp + 8] = 0\n 39225: a0 = sp + 0x20\n 39228: a1 = sp\n 39230: u64 [sp + 0] = 0\n 39232: ra = 480, jump @373\n      : @560 [@dyn 240] (gas: 14)\n 39238: a0 = u64 [sp + 0x30]\n 39241: a1 = u64 [sp + 0x38]\n 39244: a2 = u64 [sp + 0x20]\n 39247: a3 = u64 [sp + 0x28]\n 39250: u64 [s1 + 0x10] = a0\n 39253: u64 [s1 + 0x18] = a1\n 39256: u64 [s1] = a2\n 39258: u64 [s1 + 0x8] = a3\n 39261: sp = s0 + 0xffffffffffffffa0\n 39264: ra = u64 [sp + 0x58]\n 39267: s0 = u64 [sp + 0x50]\n 39270: s1 = u64 [sp + 0x48]\n 39273: sp = sp + 0x60\n 39276: ret\n      : @561 (gas: 8)\n 39278: a0 = u64 [sp + 0x110]\n 39282: a1 = u64 [sp + 0x118]\n 39286: a2 = u64 [sp + 0x108]\n 39290: a3 = u64 [sp + 0x100]\n 39294: a1 = a1 | a2\n 39297: a0 = a0 | a3\n 39300: a0 = a0 | a1\n 39303: jump @570 if a0 != 0\n      : @562 (gas: 2)\n 39307: a0 = i32 [0x20078]\n 39312: jump @570 if a0 <=u 3\n      : @563 (gas: 7)\n 39317: u64 [sp + 216] = 0\n 39321: u64 [sp + 208] = 0\n 39325: u64 [sp + 200] = 0\n 39329: a0 = sp + 0xe0\n 39333: a1 = sp + 0xc0\n 39337: u64 [sp + 192] = 0\n 39341: ra = 482, jump @373\n      : @564 [@dyn 241] (gas: 11)\n 39347: a0 = u64 [sp + 0xf8]\n 39351: u64 [sp + 0x40] = a0\n 39354: a0 = u64 [sp + 0xf0]\n 39358: u64 [sp + 0x48] = a0\n 39361: a0 = u64 [sp + 0xe8]\n 39365: u64 [sp + 0x50] = a0\n 39368: a0 = u64 [sp + 0xe0]\n 39372: u64 [sp + 0x58] = a0\n 39375: a0 = 0x40\n 39378: a1 = 0x20\n 39381: ra = 484, jump @0\n      : @565 [@dyn 242] (gas: 100)\n 39388: a1 = u8 [a0 + 0x11]\n 39391: a2 = u8 [a0 + 0x10]\n 39394: a3 = u8 [a0 + 0x12]\n 39397: a4 = u8 [a0 + 0x13]\n 39400: a1 = a1 << 0x8\n 39403: a1 = a1 | a2\n 39406: a3 = a3 << 0x10\n 39409: a4 = a4 << 0x18\n 39412: a3 = a3 | a4\n 39415: a1 = a1 | a3\n 39418: a2 = u8 [a0 + 0x15]\n 39421: a3 = u8 [a0 + 0x14]\n 39424: a4 = u8 [a0 + 0x16]\n 39427: a5 = u8 [a0 + 0x17]\n 39430: a2 = a2 << 0x8\n 39433: a2 = a2 | a3\n 39436: a4 = a4 << 0x10\n 39439: a5 = a5 << 0x18\n 39442: a4 = a4 | a5\n 39445: a2 = a2 | a4\n 39448: a2 = a2 << 0x20\n 39451: t0 = a2 | a1\n 39454: a2 = u8 [a0 + 0x1]\n 39457: a3 = u8 [a0]\n 39459: a4 = u8 [a0 + 0x2]\n 39462: a5 = u8 [a0 + 0x3]\n 39465: a2 = a2 << 0x8\n 39468: a2 = a2 | a3\n 39471: a4 = a4 << 0x10\n 39474: a5 = a5 << 0x18\n 39477: a4 = a4 | a5\n 39480: a2 = a2 | a4\n 39483: a3 = u8 [a0 + 0x5]\n 39486: a4 = u8 [a0 + 0x4]\n 39489: a5 = u8 [a0 + 0x6]\n 39492: s1 = u8 [a0 + 0x7]\n 39495: a3 = a3 << 0x8\n 39498: a3 = a3 | a4\n 39501: a5 = a5 << 0x10\n 39504: s1 = s1 << 0x18\n 39507: a5 = a5 | s1\n 39510: a3 = a3 | a5\n 39513: a3 = a3 << 0x20\n 39516: a2 = a2 | a3\n 39519: a3 = u8 [a0 + 0x19]\n 39522: a4 = u8 [a0 + 0x18]\n 39525: a5 = u8 [a0 + 0x1a]\n 39528: s1 = u8 [a0 + 0x1b]\n 39531: a3 = a3 << 0x8\n 39534: a3 = a3 | a4\n 39537: a5 = a5 << 0x10\n 39540: s1 = s1 << 0x18\n 39543: a5 = a5 | s1\n 39546: a3 = a3 | a5\n 39549: a4 = u8 [a0 + 0x1d]\n 39552: a5 = u8 [a0 + 0x1c]\n 39555: s1 = u8 [a0 + 0x1e]\n 39558: a1 = u8 [a0 + 0x1f]\n 39561: a4 = a4 << 0x8\n 39564: a4 = a4 | a5\n 39567: s1 = s1 << 0x10\n 39570: a1 = a1 << 0x18\n 39573: a1 = a1 | s1\n 39576: a1 = a1 | a4\n 39579: a1 = a1 << 0x20\n 39582: a3 = a3 | a1\n 39585: a1 = u8 [a0 + 0x9]\n 39588: a4 = u8 [a0 + 0x8]\n 39591: a5 = u8 [a0 + 0xa]\n 39594: s1 = u8 [a0 + 0xb]\n 39597: a1 = a1 << 0x8\n 39600: a1 = a1 | a4\n 39603: a5 = a5 << 0x10\n 39606: s1 = s1 << 0x18\n 39609: a5 = a5 | s1\n 39612: a1 = a1 | a5\n 39615: a4 = u8 [a0 + 0xd]\n 39618: a5 = u8 [a0 + 0xc]\n 39621: s1 = u8 [a0 + 0xe]\n 39624: a0 = u8 [a0 + 0xf]\n 39627: a4 = a4 << 0x8\n 39630: a4 = a4 | a5\n 39633: s1 = s1 << 0x10\n 39636: a0 = a0 << 0x18\n 39639: a0 = a0 | s1\n 39642: a0 = a0 | a4\n 39645: a0 = a0 << 0x20\n 39648: a0 = a0 | a1\n 39651: s1 = reverse a0\n 39653: a3 = reverse a3\n 39655: a4 = reverse a2\n 39657: a2 = reverse t0\n 39659: a0 = a2 | a4\n 39662: a1 = a3 | s1\n 39665: a1 = a1 | a0\n 39668: a1 = a1 >> 0x20\n 39671: a0 = a0 | s1\n 39674: a0 = a0 << 0x20\n 39677: a0 = a0 | a1\n 39680: jump @569 if a0 != 0\n      : @566 (gas: 19)\n 39684: a0 = a3 + 0x20\n 39687: u64 [sp + 0x18] = a0\n 39690: a0 = a0 <u a3\n 39693: a1 = a2 + a0\n 39696: u64 [sp + 0x8] = a1\n 39699: a1 = a1 <u a2\n 39702: a1 = a0 if a0 == 0\n 39705: a1 = a1 + s1\n 39708: u64 [sp + 0x10] = a1\n 39711: a0 = a1 <u s1\n 39714: a0 = a0 + a4\n 39717: u64 [sp + 0x20] = a0\n 39720: i32 a0 = a3 + 0\n 39722: a1 = 0x20\n 39725: u64 [sp] = a0\n 39727: u64 [sp + 0x30] = a3\n 39730: u64 [sp + 0x28] = a2\n 39733: u64 [sp + 0x38] = a4\n 39736: ra = 486, jump @0\n      : @567 [@dyn 243] (gas: 52)\n 39743: u8 [a0 + 31] = 0x20\n 39747: u8 [a0 + 30] = 0\n 39750: u8 [a0 + 29] = 0\n 39753: u8 [a0 + 28] = 0\n 39756: u8 [a0 + 27] = 0\n 39759: u8 [a0 + 26] = 0\n 39762: u8 [a0 + 25] = 0\n 39765: u8 [a0 + 24] = 0\n 39768: u8 [a0 + 23] = 0\n 39771: u8 [a0 + 22] = 0\n 39774: u8 [a0 + 21] = 0\n 39777: u8 [a0 + 20] = 0\n 39780: u8 [a0 + 19] = 0\n 39783: u8 [a0 + 18] = 0\n 39786: u8 [a0 + 17] = 0\n 39789: u8 [a0 + 16] = 0\n 39792: u8 [a0 + 15] = 0\n 39795: u8 [a0 + 14] = 0\n 39798: u8 [a0 + 13] = 0\n 39801: u8 [a0 + 12] = 0\n 39804: u8 [a0 + 11] = 0\n 39807: u8 [a0 + 10] = 0\n 39810: u8 [a0 + 9] = 0\n 39813: u8 [a0 + 8] = 0\n 39816: u8 [a0 + 7] = 0\n 39819: u8 [a0 + 6] = 0\n 39822: u8 [a0 + 5] = 0\n 39825: u8 [a0 + 4] = 0\n 39828: u8 [a0 + 3] = 0\n 39831: u8 [a0 + 2] = 0\n 39834: u8 [a0 + 1] = 0\n 39837: u8 [a0 + 0] = 0\n 39839: a0 = u64 [sp + 0x8]\n 39842: u64 [sp + 0x68] = a0\n 39845: a0 = u64 [sp + 0x18]\n 39848: u64 [sp + 0x60] = a0\n 39851: a0 = u64 [sp + 0x40]\n 39854: u64 [sp + 0x98] = a0\n 39858: a0 = u64 [sp + 0x48]\n 39861: u64 [sp + 0x90] = a0\n 39865: a0 = u64 [sp + 0x50]\n 39868: u64 [sp + 0x88] = a0\n 39872: a0 = u64 [sp + 0x58]\n 39875: u64 [sp + 0x80] = a0\n 39879: a0 = u64 [sp + 0x10]\n 39882: u64 [sp + 0x70] = a0\n 39885: a0 = sp + 0xa0\n 39889: a1 = sp + 0x80\n 39893: a2 = sp + 0x60\n 39896: a3 = u64 [sp + 0x20]\n 39899: u64 [sp + 0x78] = a3\n 39902: ra = 488, jump @468\n      : @568 [@dyn 244] (gas: 30)\n 39908: a0 = u64 [sp + 0xa8]\n 39912: t0 = u64 [sp + 0xb8]\n 39916: t1 = u64 [sp + 0xa0]\n 39920: a3 = u64 [sp + 0xb0]\n 39924: a1 = u64 [sp + 0x28]\n 39927: a4 = a0 ^ a1\n 39930: a5 = a0 <u a1\n 39933: t2 = a1\n 39935: a2 = u64 [sp + 0x30]\n 39938: a1 = t1 <u a2\n 39941: a5 = a1 if a4 == 0\n 39944: a4 = a3 - s1\n 39947: a3 = a3 <u s1\n 39950: s1 = u64 [sp + 0x38]\n 39953: s1 = t0 - s1\n 39956: s1 = s1 - a3\n 39959: a3 = a4 <u a5\n 39962: s1 = s1 - a3\n 39965: a4 = a4 - a5\n 39968: a0 = a0 - t2\n 39971: a1 = a0 - a1\n 39974: a0 = t1 - a2\n 39977: a1 = a1 | s1\n 39980: a2 = a0 | a4\n 39983: a2 = a2 | a1\n 39986: a1 = a1 | a4\n 39989: a2 = a2 >> 0x20\n 39992: a1 = a1 << 0x20\n 39995: a1 = a1 | a2\n 39998: jump @572 if a1 == 0\n      : @569 (gas: 1)\n 40001: trap\n      : @570 (gas: 3)\n 40002: a0 = 0\n 40004: a1 = 0\n 40006: ra = 490, jump @0\n      : @571 [@dyn 245] (gas: 5)\n 40013: i32 a1 = a0 + 0\n 40015: a0 = 0x1\n 40018: a2 = 0\n 40020: ecalli 14 // 'seal_return'\n 40022: fallthrough\n      : @572 (gas: 4)\n 40023: i32 s1 = a0 + 0\n 40025: a0 = u64 [sp]\n 40027: a1 = s1\n 40029: ra = 492, jump @0\n      : @573 [@dyn 246] (gas: 6)\n 40036: i32 a1 = a0 + 0\n 40038: a0 = 0\n 40040: a2 = s1\n 40042: ra = 0x1ee\n 40046: ecalli 14 // 'seal_return'\n 40048: fallthrough\n      : @574 [@dyn 247] (gas: 52)\n 40049: sp = sp + 0xffffffffffffff80\n 40052: u64 [sp + 0x78] = ra\n 40055: u64 [sp + 0x70] = s0\n 40058: u64 [sp + 0x68] = s1\n 40061: s0 = sp + 0x80\n 40065: sp = sp & 0xffffffffffffffe0\n 40068: t2 = u64 [a1 + 0x10]\n 40071: a5 = u64 [a1 + 0x8]\n 40074: t0 = u64 [a2 + 0x8]\n 40077: s1 = u64 [a1]\n 40079: u64 [sp + 0x10] = s1\n 40082: a4 = u64 [a2]\n 40084: u64 [sp + 0x18] = a4\n 40087: ra = u64 [a2 + 0x10]\n 40090: a3 = t0 ^ a5\n 40093: u64 [sp + 0x38] = a3\n 40096: a3 = t0 <u a5\n 40099: a4 = a4 <u s1\n 40102: t1 = u64 [sp + 0x38]\n 40105: a3 = a4 if t1 == 0\n 40108: t1 = a4\n 40110: a1 = u64 [a1 + 0x18]\n 40113: u64 [sp + 0x38] = a1\n 40116: a1 = u64 [a2 + 0x18]\n 40119: u64 [sp + 0x20] = a1\n 40122: a1 = ra - t2\n 40125: a2 = a1 - a3\n 40128: u64 [sp + 0x28] = a2\n 40131: a2 = a1 <u a3\n 40134: u64 [sp + 0x30] = t2\n 40137: a3 = ra <u t2\n 40140: a1 = u64 [sp + 0x38]\n 40143: a4 = u64 [sp + 0x20]\n 40146: a1 = a4 - a1\n 40149: a1 = a1 - a3\n 40152: t2 = a1 - a2\n 40155: s1 = t0 - a5\n 40158: a2 = s1 - t1\n 40161: t0 = u64 [sp + 0x10]\n 40164: a1 = u64 [sp + 0x18]\n 40167: a3 = a1 - t0\n 40170: a4 = a2 >u 0\n 40172: a3 = a3 <u 0x20\n 40175: a3 = a3 ^ 0x1\n 40178: a3 = a4 if a2 != 0\n 40181: a2 = t2 >s 0\n 40183: a1 = u64 [sp + 0x28]\n 40186: a4 = a1 >u 0\n 40188: a4 = a2 if t2 != 0\n 40191: a1 = a1 | t2\n 40194: a3 = a4 if a1 != 0\n 40197: jump @578 if a3 == 0\n      : @575 (gas: 11)\n 40200: s1 = a0\n 40202: a2 = u64 [sp + 0x30]\n 40205: a0 = t0 | a2\n 40208: a1 = u64 [sp + 0x38]\n 40211: a1 = a1 | a5\n 40214: a0 = a0 | a1\n 40217: a0 = a0 >> 0x20\n 40220: a1 = a1 | a2\n 40223: a1 = a1 << 0x20\n 40226: a0 = a0 | a1\n 40229: jump @577 if a0 != 0\n      : @576 (gas: 17)\n 40232: i32 a1 = t0 + 0\n 40234: i32 a0 = sp + 0x40\n 40237: ecalli 3 // 'call_data_load'\n 40239: a0 = u64 [sp + 0x58]\n 40242: a1 = u64 [sp + 0x50]\n 40245: a2 = u64 [sp + 0x48]\n 40248: a3 = u64 [sp + 0x40]\n 40251: u64 [s1 + 0x18] = a0\n 40254: u64 [s1 + 0x10] = a1\n 40257: u64 [s1 + 0x8] = a2\n 40260: u64 [s1] = a3\n 40262: sp = s0 + 0xffffffffffffff80\n 40265: ra = u64 [sp + 0x78]\n 40268: s0 = u64 [sp + 0x70]\n 40271: s1 = u64 [sp + 0x68]\n 40274: sp = sp + 0x80\n 40278: ret\n      : @577 (gas: 1)\n 40280: trap\n      : @578 (gas: 3)\n 40281: a0 = 0\n 40283: a1 = 0\n 40285: ra = 496, jump @0\n      : @579 [@dyn 248] (gas: 6)\n 40292: i32 a1 = a0 + 0\n 40294: a0 = 0x1\n 40297: a2 = 0\n 40299: ra = 0x1f2\n 40303: ecalli 14 // 'seal_return'\n 40305: fallthrough\n      : @580 [@dyn 249] (gas: 9)\n 40306: a2 = u64 [a1 + 0x18]\n 40309: a3 = u64 [a1 + 0x10]\n 40312: a4 = u64 [a1 + 0x8]\n 40315: a1 = u64 [a1]\n 40317: u64 [a0 + 0x18] = a2\n 40320: u64 [a0 + 0x10] = a3\n 40323: u64 [a0 + 0x8] = a4\n 40326: u64 [a0] = a1\n 40328: ret\n      : @581 [@dyn 250] (gas: 70)\n 40330: a1 = reverse s1\n 40332: a2 = u64 [sp + 0x68]\n 40335: a2 = reverse a2\n 40337: a3 = u64 [sp + 0x70]\n 40340: a3 = reverse a3\n 40342: a4 = u64 [sp + 0x78]\n 40345: a4 = reverse a4\n 40347: a5 = a4 >> 0x38\n 40350: u8 [a0 + 0x1f] = a5\n 40353: a5 = a4 >> 0x30\n 40356: u8 [a0 + 0x1e] = a5\n 40359: a5 = a4 >> 0x28\n 40362: u8 [a0 + 0x1d] = a5\n 40365: a5 = a4 >> 0x20\n 40368: u8 [a0 + 0x1c] = a5\n 40371: a5 = a4 >> 0x18\n 40374: u8 [a0 + 0x1b] = a5\n 40377: a5 = a4 >> 0x10\n 40380: u8 [a0 + 0x1a] = a5\n 40383: a5 = a4 >> 0x8\n 40386: u8 [a0 + 0x19] = a5\n 40389: u8 [a0 + 0x18] = a4\n 40392: a4 = a3 >> 0x38\n 40395: u8 [a0 + 0x17] = a4\n 40398: a4 = a3 >> 0x30\n 40401: u8 [a0 + 0x16] = a4\n 40404: a4 = a3 >> 0x28\n 40407: u8 [a0 + 0x15] = a4\n 40410: a4 = a3 >> 0x20\n 40413: u8 [a0 + 0x14] = a4\n 40416: a4 = a3 >> 0x18\n 40419: u8 [a0 + 0x13] = a4\n 40422: a4 = a3 >> 0x10\n 40425: u8 [a0 + 0x12] = a4\n 40428: a4 = a3 >> 0x8\n 40431: u8 [a0 + 0x11] = a4\n 40434: u8 [a0 + 0x10] = a3\n 40437: a3 = a2 >> 0x38\n 40440: u8 [a0 + 0xf] = a3\n 40443: a3 = a2 >> 0x30\n 40446: u8 [a0 + 0xe] = a3\n 40449: a3 = a2 >> 0x28\n 40452: u8 [a0 + 0xd] = a3\n 40455: a3 = a2 >> 0x20\n 40458: u8 [a0 + 0xc] = a3\n 40461: a3 = a2 >> 0x18\n 40464: u8 [a0 + 0xb] = a3\n 40467: a3 = a2 >> 0x10\n 40470: u8 [a0 + 0xa] = a3\n 40473: a3 = a2 >> 0x8\n 40476: u8 [a0 + 0x9] = a3\n 40479: u8 [a0 + 0x8] = a2\n 40482: a2 = a1 >> 0x38\n 40485: u8 [a0 + 0x7] = a2\n 40488: a2 = a1 >> 0x30\n 40491: u8 [a0 + 0x6] = a2\n 40494: a2 = a1 >> 0x28\n 40497: u8 [a0 + 0x5] = a2\n 40500: a2 = a1 >> 0x20\n 40503: u8 [a0 + 0x4] = a2\n 40506: a2 = a1 >> 0x18\n 40509: u8 [a0 + 0x3] = a2\n 40512: a2 = a1 >> 0x10\n 40515: u8 [a0 + 0x2] = a2\n 40518: a2 = a1 >> 0x8\n 40521: u8 [a0 + 0x1] = a2\n 40524: u8 [a0] = a1\n 40526: a0 = 0x20\n 40529: a1 = 0x20\n 40532: ra = 502, jump @0\n      : @582 [@dyn 251] (gas: 35)\n 40539: u8 [a0 + 31] = 0x4\n 40543: u8 [a0 + 30] = 0\n 40546: u8 [a0 + 29] = 0\n 40549: u8 [a0 + 28] = 0\n 40552: u8 [a0 + 27] = 0\n 40555: u8 [a0 + 26] = 0\n 40558: u8 [a0 + 25] = 0\n 40561: u8 [a0 + 24] = 0\n 40564: u8 [a0 + 23] = 0\n 40567: u8 [a0 + 22] = 0\n 40570: u8 [a0 + 21] = 0\n 40573: u8 [a0 + 20] = 0\n 40576: u8 [a0 + 19] = 0\n 40579: u8 [a0 + 18] = 0\n 40582: u8 [a0 + 17] = 0\n 40585: u8 [a0 + 16] = 0\n 40588: u8 [a0 + 15] = 0\n 40591: u8 [a0 + 14] = 0\n 40594: u8 [a0 + 13] = 0\n 40597: u8 [a0 + 12] = 0\n 40600: u8 [a0 + 11] = 0\n 40603: u8 [a0 + 10] = 0\n 40606: u8 [a0 + 9] = 0\n 40609: u8 [a0 + 8] = 0\n 40612: u8 [a0 + 7] = 0\n 40615: u8 [a0 + 6] = 0\n 40618: u8 [a0 + 5] = 0\n 40621: u8 [a0 + 4] = 0\n 40624: u8 [a0 + 3] = 0\n 40627: u8 [a0 + 2] = 0\n 40630: u8 [a0 + 1] = 0\n 40633: u8 [a0 + 0] = 0\n 40635: a1 = 0x40\n 40638: a0 = 0\n 40640: ra = 504, jump @0\n      : @583 [@dyn 252] (gas: 179)\n 40647: i32 a0 = a0 + 0\n 40649: i32 a2 = sp + 0xa0\n 40653: a1 = 0x40\n 40656: ecalli 9 // 'hash_keccak_256'\n 40658: a0 = u64 [sp + 0xb8]\n 40662: a1 = u64 [sp + 0xb0]\n 40666: a2 = u64 [sp + 0xa8]\n 40670: a3 = u64 [sp + 0xa0]\n 40674: s1 = reverse a0\n 40676: a1 = reverse a1\n 40678: u64 [sp + 0x70] = a1\n 40681: a2 = reverse a2\n 40683: u64 [sp + 0x58] = a2\n 40686: a0 = reverse a3\n 40688: u64 [sp + 0x78] = a0\n 40691: u64 [sp + 0x98] = a0\n 40695: u64 [sp + 0x90] = a2\n 40699: u64 [sp + 0x88] = a1\n 40703: u64 [sp + 0x80] = s1\n 40707: u64 [sp + 0x60] = s1\n 40710: u64 [sp + 184] = 0\n 40714: u64 [sp + 176] = 0\n 40718: u64 [sp + 168] = 0\n 40722: u64 [sp + 160] = 0\n 40726: u32 [sp + 192] = 0x20\n 40731: i32 a1 = sp + 0x80\n 40735: i32 a3 = sp + 0xa0\n 40739: i32 a4 = sp + 0xc0\n 40743: a2 = 0xffffffffffffffff\n 40746: a0 = 0\n 40748: ecalli 8 // 'get_storage'\n 40750: a0 = s1 + 0x1\n 40753: a1 = a0 <u 0x1\n 40756: a2 = u64 [sp + 0x70]\n 40759: a1 = a1 + a2\n 40762: a2 = a0 | a1\n 40765: a2 = a2 <u 0x1\n 40768: a3 = u64 [sp + 0x58]\n 40771: a2 = a2 + a3\n 40774: a3 = a2 <u a3\n 40777: a4 = u64 [sp + 0x78]\n 40780: a3 = a3 + a4\n 40783: u64 [sp + 0x98] = a3\n 40787: u64 [sp + 0x90] = a2\n 40791: a2 = u64 [sp + 0xa0]\n 40795: u64 [sp + 0x48] = a2\n 40798: u64 [sp + 0x88] = a1\n 40802: a1 = u64 [sp + 0xa8]\n 40806: u64 [sp + 0x40] = a1\n 40809: u64 [sp + 0x80] = a0\n 40813: a0 = u32 [sp + 0xb0]\n 40817: u64 [sp + 0x38] = a0\n 40820: u64 [sp + 184] = 0\n 40824: u64 [sp + 176] = 0\n 40828: u64 [sp + 168] = 0\n 40832: u64 [sp + 160] = 0\n 40836: u32 [sp + 192] = 0x20\n 40841: i32 a1 = sp + 0x80\n 40845: i32 a3 = sp + 0xa0\n 40849: i32 a4 = sp + 0xc0\n 40853: a2 = 0xffffffffffffffff\n 40856: a0 = 0\n 40858: ecalli 8 // 'get_storage'\n 40860: a0 = u64 [sp + 0xa0]\n 40864: u64 [sp + 0x30] = a0\n 40867: a0 = u64 [sp + 0xa8]\n 40871: u64 [sp + 0x28] = a0\n 40874: a0 = u64 [sp + 0xb0]\n 40878: u64 [sp + 0x20] = a0\n 40881: a0 = u64 [sp + 0xb8]\n 40885: u64 [sp + 0x18] = a0\n 40888: a0 = u64 [sp + 0x60]\n 40891: a1 = a0 + 0x2\n 40894: a0 = a1 <u a0\n 40897: a2 = a1\n 40899: u64 [sp + 0x68] = a1\n 40902: a1 = u64 [sp + 0x70]\n 40905: a3 = a1 + a0\n 40908: u64 [sp + 0x60] = a3\n 40911: s1 = a3 <u a1\n 40914: s1 = a0 if a0 == 0\n 40917: a0 = u64 [sp + 0x58]\n 40920: s1 = s1 + a0\n 40923: a0 = s1 <u a0\n 40926: a1 = u64 [sp + 0x78]\n 40929: a0 = a0 + a1\n 40932: u64 [sp + 0x78] = a0\n 40935: u64 [sp + 0x98] = a0\n 40939: u64 [sp + 0x90] = s1\n 40943: u64 [sp + 0x88] = a3\n 40947: u64 [sp + 0x80] = a2\n 40951: u64 [sp + 184] = 0\n 40955: u64 [sp + 176] = 0\n 40959: u64 [sp + 168] = 0\n 40963: u64 [sp + 160] = 0\n 40967: u32 [sp + 192] = 0x20\n 40972: i32 a1 = sp + 0x80\n 40976: i32 a3 = sp + 0xa0\n 40980: i32 a4 = sp + 0xc0\n 40984: a2 = 0xffffffffffffffff\n 40987: a0 = 0\n 40989: ecalli 8 // 'get_storage'\n 40991: a0 = u8 [sp + 0xa0]\n 40995: u64 [sp + 0x70] = a0\n 40998: a0 = u64 [sp + 0x78]\n 41001: u64 [sp + 0x98] = a0\n 41005: u64 [sp + 0x90] = s1\n 41009: a0 = u64 [sp + 0x60]\n 41012: u64 [sp + 0x88] = a0\n 41016: a0 = u64 [sp + 0x68]\n 41019: u64 [sp + 0x80] = a0\n 41023: u64 [sp + 184] = 0\n 41027: u64 [sp + 176] = 0\n 41031: u64 [sp + 168] = 0\n 41035: u64 [sp + 160] = 0\n 41039: u32 [sp + 192] = 0x20\n 41044: i32 a1 = sp + 0x80\n 41048: i32 a3 = sp + 0xa0\n 41052: i32 a4 = sp + 0xc0\n 41056: a2 = 0xffffffffffffffff\n 41059: a0 = 0\n 41061: ecalli 8 // 'get_storage'\n 41063: a0 = u8 [sp + 0xa1]\n 41067: u64 [sp + 0x58] = a0\n 41070: a0 = u64 [sp + 0x78]\n 41073: u64 [sp + 0x98] = a0\n 41077: u64 [sp + 0x90] = s1\n 41081: a0 = u64 [sp + 0x60]\n 41084: u64 [sp + 0x88] = a0\n 41088: a0 = u64 [sp + 0x68]\n 41091: u64 [sp + 0x80] = a0\n 41095: u64 [sp + 184] = 0\n 41099: u64 [sp + 176] = 0\n 41103: u64 [sp + 168] = 0\n 41107: u64 [sp + 160] = 0\n 41111: u32 [sp + 192] = 0x20\n 41116: i32 a1 = sp + 0x80\n 41120: i32 a3 = sp + 0xa0\n 41124: i32 a4 = sp + 0xc0\n 41128: a2 = 0xffffffffffffffff\n 41131: a0 = 0\n 41133: ecalli 8 // 'get_storage'\n 41135: a0 = u8 [sp + 0xa2]\n 41139: a1 = u64 [sp + 0x50]\n 41142: u64 [a1 + 152] = 0\n 41146: u64 [a1 + 144] = 0\n 41150: u64 [a1 + 136] = 0\n 41154: u64 [a1 + 0x80] = a0\n 41158: u64 [a1 + 120] = 0\n 41161: u64 [a1 + 112] = 0\n 41164: u64 [a1 + 104] = 0\n 41167: a0 = u64 [sp + 0x58]\n 41170: u64 [a1 + 0x60] = a0\n 41173: u64 [a1 + 88] = 0\n 41176: u64 [a1 + 80] = 0\n 41179: u64 [a1 + 72] = 0\n 41182: a0 = u64 [sp + 0x70]\n 41185: u64 [a1 + 0x40] = a0\n 41188: a0 = u64 [sp + 0x18]\n 41191: u64 [a1 + 0x38] = a0\n 41194: a0 = u64 [sp + 0x20]\n 41197: u64 [a1 + 0x30] = a0\n 41200: a0 = u64 [sp + 0x28]\n 41203: u64 [a1 + 0x28] = a0\n 41206: a0 = u64 [sp + 0x30]\n 41209: u64 [a1 + 0x20] = a0\n 41212: u64 [a1 + 24] = 0\n 41215: a0 = u64 [sp + 0x38]\n 41218: u64 [a1 + 0x10] = a0\n 41221: a0 = u64 [sp + 0x40]\n 41224: u64 [a1 + 0x8] = a0\n 41227: a0 = u64 [sp + 0x48]\n 41230: u64 [a1] = a0\n 41232: sp = s0 + 0xffffffffffffff20\n 41236: ra = u64 [sp + 0xd8]\n 41240: s0 = u64 [sp + 0xd0]\n 41244: s1 = u64 [sp + 0xc8]\n 41248: sp = sp + 0xe0\n 41252: ret\n      : @584 (gas: 21)\n 41254: sp = sp + 0xffffffffffffff30\n 41258: u64 [sp + 0xc8] = ra\n 41262: u64 [sp + 0xc0] = s0\n 41266: u64 [sp + 0xb8] = s1\n 41270: s0 = u64 [a1 + 0x10]\n 41273: t0 = u64 [a1 + 0x18]\n 41276: s1 = u64 [a1 + 0x8]\n 41279: a1 = u64 [a1]\n 41281: u64 [sp + 0xa8] = s1\n 41285: u64 [sp + 0x88] = t0\n 41289: t0 = s1 | t0\n 41292: u64 [sp + 0xb0] = a1\n 41296: s1 = a1 | s0\n 41299: s1 = s1 | t0\n 41302: s1 = s1 >> 0x20\n 41305: u64 [sp + 0x90] = s0\n 41309: a1 = t0 | s0\n 41312: a1 = a1 << 0x20\n 41315: a1 = a1 | s1\n 41318: u64 [sp + 0x40] = a0\n 41321: jump @595 if a1 != 0\n      : @585 (gas: 43)\n 41325: a0 = u64 [sp + 0xd0]\n 41329: a1 = u64 [a0 + 0x18]\n 41332: u64 [sp + 0x18] = a1\n 41335: a1 = u64 [a0 + 0x10]\n 41338: u64 [sp + 0x8] = a1\n 41341: a1 = u64 [a0 + 0x8]\n 41344: u64 [sp + 0x10] = a1\n 41347: a0 = u64 [a0]\n 41349: u64 [sp] = a0\n 41351: a0 = u64 [a5 + 0x18]\n 41354: u64 [sp + 0x38] = a0\n 41357: a0 = u64 [a5 + 0x10]\n 41360: u64 [sp + 0x28] = a0\n 41363: a0 = u64 [a5 + 0x8]\n 41366: u64 [sp + 0x30] = a0\n 41369: a0 = u64 [a5]\n 41371: u64 [sp + 0x20] = a0\n 41374: a0 = u64 [a4 + 0x18]\n 41377: u64 [sp + 0x60] = a0\n 41380: a0 = u64 [a4 + 0x10]\n 41383: u64 [sp + 0x50] = a0\n 41386: a0 = u64 [a4 + 0x8]\n 41389: u64 [sp + 0x58] = a0\n 41392: a0 = u64 [a4]\n 41394: u64 [sp + 0x48] = a0\n 41397: a0 = u64 [a3 + 0x18]\n 41400: u64 [sp + 0x70] = a0\n 41403: a0 = u64 [a3 + 0x10]\n 41406: u64 [sp + 0x78] = a0\n 41409: a0 = u64 [a3 + 0x8]\n 41412: u64 [sp + 0x80] = a0\n 41416: a0 = u64 [a2 + 0x10]\n 41419: a1 = u64 [a3]\n 41421: u64 [sp + 0x68] = a1\n 41424: a1 = u64 [a2 + 0x8]\n 41427: u64 [sp + 0x98] = a1\n 41431: s1 = u64 [a2]\n 41433: a0 = a0 << 0x20\n 41436: s0 = a0 >> 0x20\n 41439: a0 = i32 [sp + 0xb0]\n 41443: a1 = 0x20\n 41446: u64 [sp + 0xa0] = a0\n 41450: ra = 506, jump @0\n      : @586 [@dyn 253] (gas: 66)\n 41457: a1 = reverse s0\n 41459: a2 = u64 [sp + 0x98]\n 41463: a2 = reverse a2\n 41465: a3 = reverse s1\n 41467: a4 = a3 >> 0x38\n 41470: u8 [a0 + 0x1f] = a4\n 41473: a4 = a3 >> 0x30\n 41476: u8 [a0 + 0x1e] = a4\n 41479: a4 = a3 >> 0x28\n 41482: u8 [a0 + 0x1d] = a4\n 41485: a4 = a3 >> 0x20\n 41488: u8 [a0 + 0x1c] = a4\n 41491: a4 = a3 >> 0x18\n 41494: u8 [a0 + 0x1b] = a4\n 41497: a4 = a3 >> 0x10\n 41500: u8 [a0 + 0x1a] = a4\n 41503: a4 = a3 >> 0x8\n 41506: u8 [a0 + 0x19] = a4\n 41509: u8 [a0 + 0x18] = a3\n 41512: u8 [a0 + 0x10] = a2\n 41515: u8 [a0 + 11] = 0\n 41518: u8 [a0 + 10] = 0\n 41521: u8 [a0 + 9] = 0\n 41524: u8 [a0 + 7] = 0\n 41527: u8 [a0 + 6] = 0\n 41530: u8 [a0 + 5] = 0\n 41533: u8 [a0 + 4] = 0\n 41536: u8 [a0 + 3] = 0\n 41539: u8 [a0 + 2] = 0\n 41542: u8 [a0 + 1] = 0\n 41545: u8 [a0 + 0] = 0\n 41547: a3 = a2 >> 0x38\n 41550: u8 [a0 + 0x17] = a3\n 41553: a3 = a2 >> 0x30\n 41556: u8 [a0 + 0x16] = a3\n 41559: a3 = a2 >> 0x28\n 41562: u8 [a0 + 0x15] = a3\n 41565: a3 = a2 >> 0x20\n 41568: u8 [a0 + 0x14] = a3\n 41571: a3 = a2 >> 0x18\n 41574: u8 [a0 + 0x13] = a3\n 41577: a3 = a2 >> 0x10\n 41580: u8 [a0 + 0x12] = a3\n 41583: a2 = a2 >> 0x8\n 41586: u8 [a0 + 0x11] = a2\n 41589: u8 [a0 + 0x8] = a1\n 41592: a2 = a1 >> 0x38\n 41595: u8 [a0 + 0xf] = a2\n 41598: a2 = a1 >> 0x30\n 41601: u8 [a0 + 0xe] = a2\n 41604: a2 = a1 >> 0x28\n 41607: u8 [a0 + 0xd] = a2\n 41610: a1 = a1 >> 0x20\n 41613: a2 = u64 [sp + 0x90]\n 41617: a4 = u64 [sp + 0x88]\n 41621: a4 = a4 | a2\n 41624: s0 = 0x100000000\n 41634: a2 = 0xffffffe0\n 41644: a3 = u64 [sp + 0xb0]\n 41648: a2 = a3 <u a2\n 41651: a3 = u64 [sp + 0xa8]\n 41655: a2 = 0 if a3 != 0\n 41657: u64 [sp + 0x98] = a4\n 41661: a2 = 0 if a4 != 0\n 41663: u8 [a0 + 0xc] = a1\n 41666: jump @595 if a2 == 0\n      : @587 (gas: 4)\n 41670: a0 = u64 [sp + 0xa0]\n 41674: i32 a0 = a0 + 0x20\n 41677: a1 = 0x20\n 41680: ra = 508, jump @0\n      : @588 [@dyn 254] (gas: 76)\n 41687: a1 = u64 [sp + 0x70]\n 41690: a1 = reverse a1\n 41692: a2 = u64 [sp + 0x78]\n 41695: a2 = reverse a2\n 41697: a3 = u64 [sp + 0x80]\n 41701: a3 = reverse a3\n 41703: a4 = u64 [sp + 0x68]\n 41706: a4 = reverse a4\n 41708: a5 = a4 >> 0x38\n 41711: u8 [a0 + 0x1f] = a5\n 41714: a5 = a4 >> 0x30\n 41717: u8 [a0 + 0x1e] = a5\n 41720: a5 = a4 >> 0x28\n 41723: u8 [a0 + 0x1d] = a5\n 41726: a5 = a4 >> 0x20\n 41729: u8 [a0 + 0x1c] = a5\n 41732: a5 = a4 >> 0x18\n 41735: u8 [a0 + 0x1b] = a5\n 41738: a5 = a4 >> 0x10\n 41741: u8 [a0 + 0x1a] = a5\n 41744: a5 = a4 >> 0x8\n 41747: u8 [a0 + 0x19] = a5\n 41750: u8 [a0 + 0x18] = a4\n 41753: u8 [a0 + 0x10] = a3\n 41756: a4 = a3 >> 0x38\n 41759: u8 [a0 + 0x17] = a4\n 41762: a4 = a3 >> 0x30\n 41765: u8 [a0 + 0x16] = a4\n 41768: a4 = a3 >> 0x28\n 41771: u8 [a0 + 0x15] = a4\n 41774: a4 = a3 >> 0x20\n 41777: u8 [a0 + 0x14] = a4\n 41780: a4 = a3 >> 0x18\n 41783: u8 [a0 + 0x13] = a4\n 41786: a4 = a3 >> 0x10\n 41789: u8 [a0 + 0x12] = a4\n 41792: a3 = a3 >> 0x8\n 41795: u8 [a0 + 0x11] = a3\n 41798: u8 [a0 + 0x8] = a2\n 41801: a3 = a2 >> 0x38\n 41804: u8 [a0 + 0xf] = a3\n 41807: a3 = a2 >> 0x30\n 41810: u8 [a0 + 0xe] = a3\n 41813: a3 = a2 >> 0x28\n 41816: u8 [a0 + 0xd] = a3\n 41819: a3 = a2 >> 0x20\n 41822: u8 [a0 + 0xc] = a3\n 41825: a3 = a2 >> 0x18\n 41828: u8 [a0 + 0xb] = a3\n 41831: a3 = a2 >> 0x10\n 41834: u8 [a0 + 0xa] = a3\n 41837: a2 = a2 >> 0x8\n 41840: u8 [a0 + 0x9] = a2\n 41843: u8 [a0] = a1\n 41845: a2 = a1 >> 0x38\n 41848: u8 [a0 + 0x7] = a2\n 41851: a2 = a1 >> 0x30\n 41854: u8 [a0 + 0x6] = a2\n 41857: a2 = a1 >> 0x28\n 41860: u8 [a0 + 0x5] = a2\n 41863: a2 = a1 >> 0x20\n 41866: u8 [a0 + 0x4] = a2\n 41869: a2 = a1 >> 0x18\n 41872: u8 [a0 + 0x3] = a2\n 41875: a2 = a1 >> 0x10\n 41878: u8 [a0 + 0x2] = a2\n 41881: a1 = a1 >> 0x8\n 41884: a2 = s0 + 0xffffffffffffffc0\n 41887: a3 = u64 [sp + 0xb0]\n 41891: a2 = a3 <u a2\n 41894: a3 = u64 [sp + 0xa8]\n 41898: a2 = 0 if a3 != 0\n 41900: a3 = u64 [sp + 0x98]\n 41904: a2 = 0 if a3 != 0\n 41906: u8 [a0 + 0x1] = a1\n 41909: jump @595 if a2 == 0\n      : @589 (gas: 12)\n 41913: a0 = u64 [sp + 0x50]\n 41916: a1 = u64 [sp + 0x48]\n 41919: a0 = a0 | a1\n 41922: a1 = u64 [sp + 0x60]\n 41925: a2 = u64 [sp + 0x58]\n 41928: a1 = a1 | a2\n 41931: a0 = a0 | a1\n 41934: s0 = a0 >u 0\n 41936: a0 = u64 [sp + 0xa0]\n 41940: i32 a0 = a0 + 0x40\n 41943: a1 = 0x20\n 41946: ra = 510, jump @0\n      : @590 [@dyn 255] (gas: 41)\n 41953: u8 [a0 + 30] = 0\n 41956: u8 [a0 + 29] = 0\n 41959: u8 [a0 + 28] = 0\n 41962: u8 [a0 + 27] = 0\n 41965: u8 [a0 + 26] = 0\n 41968: u8 [a0 + 25] = 0\n 41971: u8 [a0 + 24] = 0\n 41974: u8 [a0 + 23] = 0\n 41977: u8 [a0 + 22] = 0\n 41980: u8 [a0 + 21] = 0\n 41983: u8 [a0 + 20] = 0\n 41986: u8 [a0 + 19] = 0\n 41989: u8 [a0 + 18] = 0\n 41992: u8 [a0 + 17] = 0\n 41995: u8 [a0 + 16] = 0\n 41998: u8 [a0 + 15] = 0\n 42001: u8 [a0 + 14] = 0\n 42004: u8 [a0 + 13] = 0\n 42007: u8 [a0 + 12] = 0\n 42010: u8 [a0 + 11] = 0\n 42013: u8 [a0 + 10] = 0\n 42016: u8 [a0 + 9] = 0\n 42019: u8 [a0 + 8] = 0\n 42022: u8 [a0 + 7] = 0\n 42025: u8 [a0 + 6] = 0\n 42028: u8 [a0 + 5] = 0\n 42031: u8 [a0 + 4] = 0\n 42034: u8 [a0 + 3] = 0\n 42037: u8 [a0 + 2] = 0\n 42040: u8 [a0 + 1] = 0\n 42043: u8 [a0 + 0x1f] = s0\n 42046: s0 = 0x100000000\n 42056: a1 = 0xffffffa0\n 42066: a2 = u64 [sp + 0xb0]\n 42070: a1 = a2 <u a1\n 42073: a2 = u64 [sp + 0xa8]\n 42077: a1 = 0 if a2 != 0\n 42079: a2 = u64 [sp + 0x98]\n 42083: a1 = 0 if a2 != 0\n 42085: u8 [a0 + 0] = 0\n 42087: jump @595 if a1 == 0\n      : @591 (gas: 12)\n 42091: a0 = u64 [sp + 0x28]\n 42094: a1 = u64 [sp + 0x20]\n 42097: a0 = a0 | a1\n 42100: a1 = u64 [sp + 0x38]\n 42103: a2 = u64 [sp + 0x30]\n 42106: a1 = a1 | a2\n 42109: a0 = a0 | a1\n 42112: s1 = a0 >u 0\n 42114: a0 = u64 [sp + 0xa0]\n 42118: i32 a0 = a0 + 0x60\n 42121: a1 = 0x20\n 42124: ra = 512, jump @0\n      : @592 [@dyn 256] (gas: 40)\n 42131: u8 [a0 + 30] = 0\n 42134: u8 [a0 + 29] = 0\n 42137: u8 [a0 + 28] = 0\n 42140: u8 [a0 + 27] = 0\n 42143: u8 [a0 + 26] = 0\n 42146: u8 [a0 + 25] = 0\n 42149: u8 [a0 + 24] = 0\n 42152: u8 [a0 + 23] = 0\n 42155: u8 [a0 + 22] = 0\n 42158: u8 [a0 + 21] = 0\n 42161: u8 [a0 + 20] = 0\n 42164: u8 [a0 + 19] = 0\n 42167: u8 [a0 + 18] = 0\n 42170: u8 [a0 + 17] = 0\n 42173: u8 [a0 + 16] = 0\n 42176: u8 [a0 + 15] = 0\n 42179: u8 [a0 + 14] = 0\n 42182: u8 [a0 + 13] = 0\n 42185: u8 [a0 + 12] = 0\n 42188: u8 [a0 + 11] = 0\n 42191: u8 [a0 + 10] = 0\n 42194: u8 [a0 + 9] = 0\n 42197: u8 [a0 + 8] = 0\n 42200: u8 [a0 + 7] = 0\n 42203: u8 [a0 + 6] = 0\n 42206: u8 [a0 + 5] = 0\n 42209: u8 [a0 + 4] = 0\n 42212: u8 [a0 + 3] = 0\n 42215: u8 [a0 + 2] = 0\n 42218: u8 [a0 + 1] = 0\n 42221: u8 [a0 + 0] = 0\n 42223: a1 = s0 + 0xffffffffffffff80\n 42226: a2 = u64 [sp + 0xb0]\n 42230: a1 = a2 <u a1\n 42233: a2 = u64 [sp + 0xa8]\n 42237: a1 = 0 if a2 != 0\n 42239: a2 = u64 [sp + 0x98]\n 42243: a1 = 0 if a2 != 0\n 42245: u8 [a0 + 0x1f] = s1\n 42248: jump @595 if a1 == 0\n      : @593 (gas: 27)\n 42252: a0 = u64 [sp + 0xb0]\n 42256: a1 = a0 + 0xa0\n 42260: u64 [sp + 0x98] = a1\n 42264: a0 = a1 <u a0\n 42267: a1 = u64 [sp + 0xa8]\n 42271: s1 = a1 + a0\n 42274: s0 = s1 <u a1\n 42277: s0 = a0 if a0 == 0\n 42280: a0 = u64 [sp + 0x90]\n 42284: s0 = s0 + a0\n 42287: a0 = s0 <u a0\n 42290: a1 = u64 [sp + 0x88]\n 42294: a0 = a0 + a1\n 42297: u64 [sp + 0xb0] = a0\n 42301: a0 = u64 [sp + 0x8]\n 42304: a1 = u64 [sp]\n 42306: a0 = a0 | a1\n 42309: a1 = u64 [sp + 0x18]\n 42312: a2 = u64 [sp + 0x10]\n 42315: a1 = a1 | a2\n 42318: a0 = a0 | a1\n 42321: a0 = a0 >u 0\n 42323: u64 [sp + 0xa8] = a0\n 42327: a0 = u64 [sp + 0xa0]\n 42331: i32 a0 = a0 + 0x80\n 42335: a1 = 0x20\n 42338: ra = 514, jump @0\n      : @594 [@dyn 257] (gas: 45)\n 42345: u8 [a0 + 30] = 0\n 42348: u8 [a0 + 29] = 0\n 42351: u8 [a0 + 28] = 0\n 42354: u8 [a0 + 27] = 0\n 42357: u8 [a0 + 26] = 0\n 42360: u8 [a0 + 25] = 0\n 42363: u8 [a0 + 24] = 0\n 42366: u8 [a0 + 23] = 0\n 42369: u8 [a0 + 22] = 0\n 42372: u8 [a0 + 21] = 0\n 42375: u8 [a0 + 20] = 0\n 42378: u8 [a0 + 19] = 0\n 42381: u8 [a0 + 18] = 0\n 42384: u8 [a0 + 17] = 0\n 42387: u8 [a0 + 16] = 0\n 42390: u8 [a0 + 15] = 0\n 42393: u8 [a0 + 14] = 0\n 42396: u8 [a0 + 13] = 0\n 42399: u8 [a0 + 12] = 0\n 42402: u8 [a0 + 11] = 0\n 42405: u8 [a0 + 10] = 0\n 42408: u8 [a0 + 9] = 0\n 42411: u8 [a0 + 8] = 0\n 42414: u8 [a0 + 7] = 0\n 42417: u8 [a0 + 6] = 0\n 42420: u8 [a0 + 5] = 0\n 42423: u8 [a0 + 4] = 0\n 42426: u8 [a0 + 3] = 0\n 42429: u8 [a0 + 2] = 0\n 42432: u8 [a0 + 1] = 0\n 42435: u8 [a0 + 0] = 0\n 42437: a1 = u64 [sp + 0xa8]\n 42441: u8 [a0 + 0x1f] = a1\n 42444: a0 = u64 [sp + 0x40]\n 42447: a1 = u64 [sp + 0x98]\n 42451: u64 [a0] = a1\n 42453: a1 = u64 [sp + 0xb0]\n 42457: u64 [a0 + 0x18] = a1\n 42460: u64 [a0 + 0x8] = s1\n 42463: u64 [a0 + 0x10] = s0\n 42466: ra = u64 [sp + 0xc8]\n 42470: s0 = u64 [sp + 0xc0]\n 42474: s1 = u64 [sp + 0xb8]\n 42478: sp = sp + 0xd0\n 42482: ret\n      : @595 (gas: 1)\n 42484: trap\n      : @596 (gas: 8)\n 42485: a0 = u64 [sp + 0x270]\n 42489: a1 = u64 [sp + 0x278]\n 42493: a2 = u64 [sp + 0x268]\n 42497: a3 = u64 [sp + 0x260]\n 42501: a1 = a1 | a2\n 42504: a0 = a0 | a3\n 42507: a0 = a0 | a1\n 42510: jump @604 if a0 != 0\n      : @597 (gas: 2)\n 42514: a0 = i32 [0x20078]\n 42519: jump @604 if a0 <=u 35\n      : @598 (gas: 32)\n 42524: i32 a0 = sp + 0x280\n 42528: a1 = 0x4\n 42531: ecalli 3 // 'call_data_load'\n 42533: a2 = u64 [sp + 0x280]\n 42537: a0 = u64 [sp + 0x288]\n 42541: a1 = u64 [sp + 0x290]\n 42545: a3 = u64 [sp + 0x298]\n 42549: u64 [sp + 0x1b8] = a3\n 42553: u64 [sp + 0x1b0] = a1\n 42557: u64 [sp + 0x1a8] = a0\n 42561: a0 = sp + 0x1c0\n 42565: a1 = sp + 0x1a0\n 42569: u64 [sp + 0x1a0] = a2\n 42573: ra = 0x204\n 42577: sp = sp + 0xffffffffffffff20\n 42581: u64 [sp + 0xd8] = ra\n 42585: u64 [sp + 0xd0] = s0\n 42589: u64 [sp + 0xc8] = s1\n 42593: s0 = sp + 0xe0\n 42597: sp = sp & 0xffffffffffffffe0\n 42600: a2 = u64 [a1]\n 42602: u64 [sp + 0x78] = a2\n 42605: a2 = u64 [a1 + 0x8]\n 42608: u64 [sp + 0x70] = a2\n 42611: a2 = u64 [a1 + 0x10]\n 42614: u64 [sp + 0x68] = a2\n 42617: s1 = u64 [a1 + 0x18]\n 42620: u64 [sp + 0x50] = a0\n 42623: a1 = 0x20\n 42626: a0 = 0\n 42628: ra = 0x1f4\n 42632: jump @0\n      : @599 [@dyn 258] (gas: 43)\n 42636: a0 = u64 [sp + 0x1c0]\n 42640: u64 [sp + 0xb0] = a0\n 42644: a0 = u64 [sp + 0x1c8]\n 42648: u64 [sp + 0xa8] = a0\n 42652: a0 = u64 [sp + 0x1d0]\n 42656: u64 [sp + 0xa0] = a0\n 42660: a0 = u64 [sp + 0x1d8]\n 42664: u64 [sp + 0x98] = a0\n 42668: a0 = u64 [sp + 0x1e0]\n 42672: u64 [sp + 0x90] = a0\n 42676: a0 = u64 [sp + 0x1e8]\n 42680: u64 [sp + 0x88] = a0\n 42684: a0 = u64 [sp + 0x1f0]\n 42688: u64 [sp + 0x80] = a0\n 42692: a0 = u64 [sp + 0x1f8]\n 42696: u64 [sp + 0x78] = a0\n 42699: a0 = u64 [sp + 0x200]\n 42703: u64 [sp + 0x70] = a0\n 42706: a0 = u64 [sp + 0x208]\n 42710: u64 [sp + 0x68] = a0\n 42713: a0 = u64 [sp + 0x210]\n 42717: u64 [sp + 0x60] = a0\n 42720: a0 = u64 [sp + 0x218]\n 42724: u64 [sp + 0x58] = a0\n 42727: a0 = u64 [sp + 0x220]\n 42731: u64 [sp + 0x50] = a0\n 42734: a0 = u64 [sp + 0x228]\n 42738: u64 [sp + 0x48] = a0\n 42741: a0 = u64 [sp + 0x230]\n 42745: u64 [sp + 0x40] = a0\n 42748: a0 = u64 [sp + 0x238]\n 42752: u64 [sp + 0x38] = a0\n 42755: a0 = u64 [sp + 0x240]\n 42759: u64 [sp + 0x30] = a0\n 42762: a0 = u64 [sp + 0x248]\n 42766: u64 [sp + 0x28] = a0\n 42769: a0 = u64 [sp + 0x250]\n 42773: u64 [sp + 0x20] = a0\n 42776: a0 = u64 [sp + 0x258]\n 42780: u64 [sp + 0x18] = a0\n 42783: a0 = 0x40\n 42786: a1 = 0x20\n 42789: ra = 518, jump @0\n      : @600 [@dyn 259] (gas: 148)\n 42796: a1 = u8 [a0 + 0x1]\n 42799: a2 = u8 [a0]\n 42801: a3 = u8 [a0 + 0x2]\n 42804: a4 = u8 [a0 + 0x3]\n 42807: a1 = a1 << 0x8\n 42810: a1 = a1 | a2\n 42813: a3 = a3 << 0x10\n 42816: a4 = a4 << 0x18\n 42819: a3 = a3 | a4\n 42822: a1 = a1 | a3\n 42825: a2 = u8 [a0 + 0x5]\n 42828: a3 = u8 [a0 + 0x4]\n 42831: a4 = u8 [a0 + 0x6]\n 42834: a5 = u8 [a0 + 0x7]\n 42837: a2 = a2 << 0x8\n 42840: a2 = a2 | a3\n 42843: a4 = a4 << 0x10\n 42846: a5 = a5 << 0x18\n 42849: a4 = a4 | a5\n 42852: a2 = a2 | a4\n 42855: a2 = a2 << 0x20\n 42858: t0 = a2 | a1\n 42861: a2 = u8 [a0 + 0x9]\n 42864: a3 = u8 [a0 + 0x8]\n 42867: a4 = u8 [a0 + 0xa]\n 42870: a5 = u8 [a0 + 0xb]\n 42873: a2 = a2 << 0x8\n 42876: a2 = a2 | a3\n 42879: a4 = a4 << 0x10\n 42882: a5 = a5 << 0x18\n 42885: a4 = a4 | a5\n 42888: a2 = a2 | a4\n 42891: a3 = u8 [a0 + 0xd]\n 42894: a4 = u8 [a0 + 0xc]\n 42897: a5 = u8 [a0 + 0xe]\n 42900: s1 = u8 [a0 + 0xf]\n 42903: a3 = a3 << 0x8\n 42906: a3 = a3 | a4\n 42909: a5 = a5 << 0x10\n 42912: s1 = s1 << 0x18\n 42915: a5 = a5 | s1\n 42918: a3 = a3 | a5\n 42921: a3 = a3 << 0x20\n 42924: a2 = a2 | a3\n 42927: a3 = u8 [a0 + 0x11]\n 42930: a4 = u8 [a0 + 0x10]\n 42933: a5 = u8 [a0 + 0x12]\n 42936: s1 = u8 [a0 + 0x13]\n 42939: a3 = a3 << 0x8\n 42942: a3 = a3 | a4\n 42945: a5 = a5 << 0x10\n 42948: s1 = s1 << 0x18\n 42951: a5 = a5 | s1\n 42954: a3 = a3 | a5\n 42957: a4 = u8 [a0 + 0x15]\n 42960: a5 = u8 [a0 + 0x14]\n 42963: s1 = u8 [a0 + 0x16]\n 42966: a1 = u8 [a0 + 0x17]\n 42969: a4 = a4 << 0x8\n 42972: a4 = a4 | a5\n 42975: s1 = s1 << 0x10\n 42978: a1 = a1 << 0x18\n 42981: a1 = a1 | s1\n 42984: a1 = a1 | a4\n 42987: a1 = a1 << 0x20\n 42990: a3 = a3 | a1\n 42993: a1 = u8 [a0 + 0x19]\n 42996: a4 = u8 [a0 + 0x18]\n 42999: a5 = u8 [a0 + 0x1a]\n 43002: s1 = u8 [a0 + 0x1b]\n 43005: a1 = a1 << 0x8\n 43008: a1 = a1 | a4\n 43011: a5 = a5 << 0x10\n 43014: s1 = s1 << 0x18\n 43017: a5 = a5 | s1\n 43020: a1 = a1 | a5\n 43023: a4 = u8 [a0 + 0x1d]\n 43026: a5 = u8 [a0 + 0x1c]\n 43029: s1 = u8 [a0 + 0x1e]\n 43032: a0 = u8 [a0 + 0x1f]\n 43035: a4 = a4 << 0x8\n 43038: a4 = a4 | a5\n 43041: s1 = s1 << 0x10\n 43044: a0 = a0 << 0x18\n 43047: a0 = a0 | s1\n 43050: a0 = a0 | a4\n 43053: a0 = a0 << 0x20\n 43056: a0 = a0 | a1\n 43059: s1 = reverse a0\n 43061: a3 = reverse a3\n 43063: u64 [sp + 0x8] = a3\n 43066: a1 = reverse a2\n 43068: u64 [sp + 0x10] = a1\n 43071: a2 = reverse t0\n 43073: u64 [sp + 0xb8] = a2\n 43077: a0 = sp + 0xc0\n 43081: u64 [sp] = a0\n 43083: a0 = u64 [sp + 0x18]\n 43086: u64 [sp + 0xd8] = a0\n 43090: a0 = u64 [sp + 0x20]\n 43093: u64 [sp + 0xd0] = a0\n 43097: a0 = u64 [sp + 0x28]\n 43100: u64 [sp + 0xc8] = a0\n 43104: a0 = u64 [sp + 0x30]\n 43107: u64 [sp + 0xc0] = a0\n 43111: a0 = u64 [sp + 0x38]\n 43114: u64 [sp + 0xf8] = a0\n 43118: a0 = u64 [sp + 0x40]\n 43121: u64 [sp + 0xf0] = a0\n 43125: a0 = u64 [sp + 0x48]\n 43128: u64 [sp + 0xe8] = a0\n 43132: a0 = u64 [sp + 0x50]\n 43135: u64 [sp + 0xe0] = a0\n 43139: a0 = u64 [sp + 0x58]\n 43142: u64 [sp + 0x118] = a0\n 43146: a0 = u64 [sp + 0x60]\n 43149: u64 [sp + 0x110] = a0\n 43153: a0 = u64 [sp + 0x68]\n 43156: u64 [sp + 0x108] = a0\n 43160: a0 = u64 [sp + 0x70]\n 43163: u64 [sp + 0x100] = a0\n 43167: a0 = u64 [sp + 0x78]\n 43170: u64 [sp + 0x138] = a0\n 43174: a0 = u64 [sp + 0x80]\n 43178: u64 [sp + 0x130] = a0\n 43182: a0 = u64 [sp + 0x88]\n 43186: u64 [sp + 0x128] = a0\n 43190: a0 = u64 [sp + 0x90]\n 43194: u64 [sp + 0x120] = a0\n 43198: a0 = u64 [sp + 0x98]\n 43202: u64 [sp + 0x158] = a0\n 43206: a0 = u64 [sp + 0xa0]\n 43210: u64 [sp + 0x150] = a0\n 43214: a0 = u64 [sp + 0xa8]\n 43218: u64 [sp + 0x148] = a0\n 43222: a0 = u64 [sp + 0xb0]\n 43226: u64 [sp + 0x140] = a0\n 43230: u64 [sp + 0x178] = a2\n 43234: u64 [sp + 0x170] = a1\n 43238: u64 [sp + 0x168] = a3\n 43242: a0 = sp + 0x180\n 43246: a1 = sp + 0x160\n 43250: a2 = sp + 0x140\n 43254: a3 = sp + 0x120\n 43258: a4 = sp + 0x100\n 43262: a5 = sp + 0xe0\n 43266: u64 [sp + 0x160] = s1\n 43270: ra = 520, jump @584\n      : @601 [@dyn 260] (gas: 12)\n 43276: a4 = u64 [sp + 0x8]\n 43279: a2 = s1\n 43281: a0 = u64 [sp + 0xb8]\n 43285: a0 = a0 | a4\n 43288: s1 = u64 [sp + 0x10]\n 43291: a1 = a2 | s1\n 43294: a1 = a1 | a0\n 43297: a1 = a1 >> 0x20\n 43300: a0 = a0 | s1\n 43303: a0 = a0 << 0x20\n 43306: a0 = a0 | a1\n 43309: jump @603 if a0 != 0\n      : @602 (gas: 29)\n 43312: a0 = u64 [sp + 0x188]\n 43316: a1 = u64 [sp + 0x198]\n 43320: u64 [sp + 0xb0] = a1\n 43324: t1 = u64 [sp + 0x180]\n 43328: a1 = u64 [sp + 0x190]\n 43332: t2 = a0 ^ a4\n 43335: a5 = a0 <u a4\n 43338: ra = t1 <u a2\n 43341: a5 = ra if t2 == 0\n 43344: a3 = a1 - s1\n 43347: t2 = a3 - a5\n 43350: t0 = a3 <u a5\n 43353: a3 = a1 <u s1\n 43356: a1 = u64 [sp + 0xb8]\n 43360: a5 = u64 [sp + 0xb0]\n 43364: a5 = a5 - a1\n 43367: a5 = a5 - a3\n 43370: a5 = a5 - t0\n 43373: a0 = a0 - a4\n 43376: a0 = a0 - ra\n 43379: s1 = t1 - a2\n 43382: a0 = a0 | a5\n 43385: a1 = s1 | t2\n 43388: a1 = a1 | a0\n 43391: a0 = a0 | t2\n 43394: a1 = a1 >> 0x20\n 43397: a0 = a0 << 0x20\n 43400: a0 = a0 | a1\n 43403: jump @606 if a0 == 0\n      : @603 (gas: 1)\n 43406: trap\n      : @604 (gas: 3)\n 43407: a0 = 0\n 43409: a1 = 0\n 43411: ra = 522, jump @0\n      : @605 [@dyn 261] (gas: 5)\n 43418: i32 a1 = a0 + 0\n 43420: a0 = 0x1\n 43423: a2 = 0\n 43425: ecalli 14 // 'seal_return'\n 43427: fallthrough\n      : @606 (gas: 4)\n 43428: i32 a0 = a2 + 0\n 43430: i32 s1 = s1 + 0\n 43432: a1 = s1\n 43434: ra = 524, jump @0\n      : @607 [@dyn 262] (gas: 6)\n 43441: i32 a1 = a0 + 0\n 43443: a0 = 0\n 43445: a2 = s1\n 43447: ra = 0x20e\n 43451: ecalli 14 // 'seal_return'\n 43453: fallthrough\n      : @608 [@dyn 263] (gas: 12)\n 43454: sp = sp + 0xffffffffffffff80\n 43457: u64 [sp + 0x78] = ra\n 43460: u64 [sp + 0x70] = s0\n 43463: s0 = sp + 0x80\n 43467: sp = sp & 0xffffffffffffffe0\n 43470: u64 [sp + 56] = 0\n 43473: u64 [sp + 48] = 0\n 43476: u64 [sp + 40] = 0\n 43479: u64 [sp + 32] = 0\n 43482: i32 a0 = sp + 0x20\n 43485: ecalli 17 // 'value_transferred'\n 43487: fallthrough\n      : @609 (gas: 8)\n 43488: a0 = u64 [sp + 0x30]\n 43491: a1 = u64 [sp + 0x38]\n 43494: a2 = u64 [sp + 0x28]\n 43497: a3 = u64 [sp + 0x20]\n 43500: a1 = a1 | a2\n 43503: a0 = a0 | a3\n 43506: a0 = a0 | a1\n 43509: jump @615 if a0 != 0\n      : @610 (gas: 2)\n 43513: a0 = i32 [0x20078]\n 43518: jump @615 if a0 <=u 35\n      : @611 (gas: 13)\n 43523: i32 a0 = sp + 0x40\n 43526: a1 = 0x4\n 43529: ecalli 3 // 'call_data_load'\n 43531: a1 = u64 [sp + 0x40]\n 43534: a0 = u64 [sp + 0x48]\n 43537: a2 = u64 [sp + 0x50]\n 43540: a3 = u64 [sp + 0x58]\n 43543: u64 [sp + 0x18] = a3\n 43546: u64 [sp + 0x10] = a2\n 43549: u64 [sp + 0x8] = a0\n 43552: a0 = sp\n 43554: u64 [sp] = a1\n 43556: ra = 528, jump @1128\n      : @612 [@dyn 264] (gas: 3)\n 43563: a0 = 0x40\n 43566: a1 = 0x20\n 43569: ra = 530, jump @0\n      : @613 [@dyn 265] (gas: 100)\n 43576: a1 = u8 [a0 + 0x11]\n 43579: a2 = u8 [a0 + 0x10]\n 43582: a3 = u8 [a0 + 0x12]\n 43585: a4 = u8 [a0 + 0x13]\n 43588: a1 = a1 << 0x8\n 43591: a1 = a1 | a2\n 43594: a3 = a3 << 0x10\n 43597: a4 = a4 << 0x18\n 43600: a3 = a3 | a4\n 43603: a1 = a1 | a3\n 43606: a2 = u8 [a0 + 0x15]\n 43609: a3 = u8 [a0 + 0x14]\n 43612: a4 = u8 [a0 + 0x16]\n 43615: a5 = u8 [a0 + 0x17]\n 43618: a2 = a2 << 0x8\n 43621: a2 = a2 | a3\n 43624: a4 = a4 << 0x10\n 43627: a5 = a5 << 0x18\n 43630: a4 = a4 | a5\n 43633: a2 = a2 | a4\n 43636: a2 = a2 << 0x20\n 43639: t0 = a2 | a1\n 43642: a2 = u8 [a0 + 0x1]\n 43645: a3 = u8 [a0]\n 43647: a4 = u8 [a0 + 0x2]\n 43650: a5 = u8 [a0 + 0x3]\n 43653: a2 = a2 << 0x8\n 43656: a2 = a2 | a3\n 43659: a4 = a4 << 0x10\n 43662: a5 = a5 << 0x18\n 43665: a4 = a4 | a5\n 43668: a2 = a2 | a4\n 43671: a3 = u8 [a0 + 0x5]\n 43674: a4 = u8 [a0 + 0x4]\n 43677: a5 = u8 [a0 + 0x6]\n 43680: a1 = u8 [a0 + 0x7]\n 43683: a3 = a3 << 0x8\n 43686: a3 = a3 | a4\n 43689: a5 = a5 << 0x10\n 43692: a1 = a1 << 0x18\n 43695: a1 = a1 | a5\n 43698: a1 = a1 | a3\n 43701: a1 = a1 << 0x20\n 43704: t1 = a1 | a2\n 43707: a1 = u8 [a0 + 0x19]\n 43710: a3 = u8 [a0 + 0x18]\n 43713: a4 = u8 [a0 + 0x1a]\n 43716: a5 = u8 [a0 + 0x1b]\n 43719: a1 = a1 << 0x8\n 43722: a1 = a1 | a3\n 43725: a4 = a4 << 0x10\n 43728: a5 = a5 << 0x18\n 43731: a4 = a4 | a5\n 43734: a1 = a1 | a4\n 43737: a3 = u8 [a0 + 0x1d]\n 43740: a4 = u8 [a0 + 0x1c]\n 43743: a5 = u8 [a0 + 0x1e]\n 43746: a2 = u8 [a0 + 0x1f]\n 43749: a3 = a3 << 0x8\n 43752: a3 = a3 | a4\n 43755: a5 = a5 << 0x10\n 43758: a2 = a2 << 0x18\n 43761: a2 = a2 | a5\n 43764: a2 = a2 | a3\n 43767: a2 = a2 << 0x20\n 43770: a3 = a2 | a1\n 43773: a1 = u8 [a0 + 0x9]\n 43776: a2 = u8 [a0 + 0x8]\n 43779: a4 = u8 [a0 + 0xa]\n 43782: a5 = u8 [a0 + 0xb]\n 43785: a1 = a1 << 0x8\n 43788: a1 = a1 | a2\n 43791: a4 = a4 << 0x10\n 43794: a5 = a5 << 0x18\n 43797: a4 = a4 | a5\n 43800: a1 = a1 | a4\n 43803: a2 = u8 [a0 + 0xd]\n 43806: a4 = u8 [a0 + 0xc]\n 43809: a5 = u8 [a0 + 0xe]\n 43812: a0 = u8 [a0 + 0xf]\n 43815: a2 = a2 << 0x8\n 43818: a2 = a2 | a4\n 43821: a5 = a5 << 0x10\n 43824: a0 = a0 << 0x18\n 43827: a0 = a0 | a5\n 43830: a0 = a0 | a2\n 43833: a0 = a0 << 0x20\n 43836: a0 = a0 | a1\n 43839: a1 = reverse a0\n 43841: a0 = reverse a3\n 43843: a2 = reverse t1\n 43845: a3 = reverse t0\n 43847: a2 = a2 | a3\n 43850: a3 = a0 | a1\n 43853: a3 = a3 | a2\n 43856: a3 = a3 >> 0x20\n 43859: a1 = a1 | a2\n 43862: a1 = a1 << 0x20\n 43865: a1 = a1 | a3\n 43868: jump @617 if a1 == 0\n      : @614 (gas: 1)\n 43871: trap\n      : @615 (gas: 3)\n 43872: a0 = 0\n 43874: a1 = 0\n 43876: ra = 532, jump @0\n      : @616 [@dyn 266] (gas: 7)\n 43883: i32 a1 = a0 + 0\n 43885: a0 = 0x1\n 43888: a2 = 0\n 43890: ecalli 14 // 'seal_return'\n 43892: i32 a0 = a0 + 0\n 43894: ra = 0x216\n 43898: jump @0\n      : @617 (gas: 2)\n 43902: i32 a0 = a0 + 0\n 43904: ra = 534, jump @0\n      : @618 [@dyn 267] (gas: 6)\n 43911: i32 a1 = a0 + 0\n 43913: a0 = 0\n 43915: a2 = 0\n 43917: ra = 0x218\n 43921: ecalli 14 // 'seal_return'\n 43923: fallthrough\n      : @619 [@dyn 268] (gas: 8)\n 43924: sp = sp + 0xffffffffffffffe0\n 43927: u64 [sp + 0x18] = ra\n 43930: u64 [sp + 0x10] = s0\n 43933: u64 [sp + 0x8] = s1\n 43936: s1 = 0x20070\n 43941: a1 = i32 [0x20070]\n 43946: s0 = a0\n 43948: jump @622 if a1 == 0\n      : @620 (gas: 6)\n 43951: a0 = 0x30080\n 43956: i32 a0 = a0 + 0\n 43958: u64 [sp] = a1\n 43960: i32 a1 = s1 + 0\n 43962: ecalli 7 // 'get_immutable_data'\n 43964: fallthrough\n      : @621 (gas: 4)\n 43965: a0 = i32 [0x20070]\n 43970: u32 [0x20070] = 0\n 43975: a1 = u64 [sp]\n 43977: jump @623 if a0 <u a1\n      : @622 (gas: 13)\n 43980: a1 = u64 [0x300f8]\n 43985: a2 = u64 [0x300f0]\n 43990: a3 = u64 [0x300e8]\n 43995: a0 = u64 [0x300e0]\n 44000: u64 [s0 + 0x18] = a1\n 44003: u64 [s0 + 0x10] = a2\n 44006: u64 [s0 + 0x8] = a3\n 44009: u64 [s0] = a0\n 44011: ra = u64 [sp + 0x18]\n 44014: s0 = u64 [sp + 0x10]\n 44017: s1 = u64 [sp + 0x8]\n 44020: sp = sp + 0x20\n 44023: ret\n      : @623 (gas: 1)\n 44025: trap\n      : @624 (gas: 8)\n 44026: a0 = u64 [sp + 0x30]\n 44029: a1 = u64 [sp + 0x38]\n 44032: a2 = u64 [sp + 0x28]\n 44035: a3 = u64 [sp + 0x20]\n 44038: a1 = a1 | a2\n 44041: a0 = a0 | a3\n 44044: a0 = a0 | a1\n 44047: jump @632 if a0 != 0\n      : @625 (gas: 2)\n 44051: a0 = i32 [0x20078]\n 44056: jump @632 if a0 <=u 3\n      : @626 (gas: 3)\n 44061: s1 = 0x20070\n 44066: a0 = i32 [0x20070]\n 44071: jump @629 if a0 == 0\n      : @627 (gas: 6)\n 44074: u64 [sp + 0x18] = a0\n 44077: a0 = 0x30080\n 44082: i32 a0 = a0 + 0\n 44084: i32 a1 = s1 + 0\n 44086: ecalli 7 // 'get_immutable_data'\n 44088: fallthrough\n      : @628 (gas: 4)\n 44089: a0 = i32 [0x20070]\n 44094: u32 [0x20070] = 0\n 44099: a1 = u64 [sp + 0x18]\n 44102: jump @631 if a0 <u a1\n      : @629 (gas: 11)\n 44106: a1 = u64 [0x300f8]\n 44111: u64 [sp] = a1\n 44113: a1 = u64 [0x300f0]\n 44118: u64 [sp + 0x8] = a1\n 44121: a1 = u64 [0x300e8]\n 44126: u64 [sp + 0x10] = a1\n 44129: a0 = u64 [0x300e0]\n 44134: u64 [sp + 0x18] = a0\n 44137: a0 = 0x40\n 44140: a1 = 0x20\n 44143: ra = 538, jump @0\n      : @630 [@dyn 269] (gas: 100)\n 44150: a1 = u8 [a0 + 0x11]\n 44153: a2 = u8 [a0 + 0x10]\n 44156: a3 = u8 [a0 + 0x12]\n 44159: a4 = u8 [a0 + 0x13]\n 44162: a1 = a1 << 0x8\n 44165: a1 = a1 | a2\n 44168: a3 = a3 << 0x10\n 44171: a4 = a4 << 0x18\n 44174: a3 = a3 | a4\n 44177: a1 = a1 | a3\n 44180: a2 = u8 [a0 + 0x15]\n 44183: a3 = u8 [a0 + 0x14]\n 44186: a4 = u8 [a0 + 0x16]\n 44189: a5 = u8 [a0 + 0x17]\n 44192: a2 = a2 << 0x8\n 44195: a2 = a2 | a3\n 44198: a4 = a4 << 0x10\n 44201: a5 = a5 << 0x18\n 44204: a4 = a4 | a5\n 44207: a2 = a2 | a4\n 44210: a2 = a2 << 0x20\n 44213: t0 = a2 | a1\n 44216: a2 = u8 [a0 + 0x1]\n 44219: a3 = u8 [a0]\n 44221: a4 = u8 [a0 + 0x2]\n 44224: a5 = u8 [a0 + 0x3]\n 44227: a2 = a2 << 0x8\n 44230: a2 = a2 | a3\n 44233: a4 = a4 << 0x10\n 44236: a5 = a5 << 0x18\n 44239: a4 = a4 | a5\n 44242: a2 = a2 | a4\n 44245: a3 = u8 [a0 + 0x5]\n 44248: a4 = u8 [a0 + 0x4]\n 44251: a5 = u8 [a0 + 0x6]\n 44254: s1 = u8 [a0 + 0x7]\n 44257: a3 = a3 << 0x8\n 44260: a3 = a3 | a4\n 44263: a5 = a5 << 0x10\n 44266: s1 = s1 << 0x18\n 44269: a5 = a5 | s1\n 44272: a3 = a3 | a5\n 44275: a3 = a3 << 0x20\n 44278: a2 = a2 | a3\n 44281: a3 = u8 [a0 + 0x19]\n 44284: a4 = u8 [a0 + 0x18]\n 44287: a5 = u8 [a0 + 0x1a]\n 44290: s1 = u8 [a0 + 0x1b]\n 44293: a3 = a3 << 0x8\n 44296: a3 = a3 | a4\n 44299: a5 = a5 << 0x10\n 44302: s1 = s1 << 0x18\n 44305: a5 = a5 | s1\n 44308: a3 = a3 | a5\n 44311: a4 = u8 [a0 + 0x1d]\n 44314: a5 = u8 [a0 + 0x1c]\n 44317: s1 = u8 [a0 + 0x1e]\n 44320: a1 = u8 [a0 + 0x1f]\n 44323: a4 = a4 << 0x8\n 44326: a4 = a4 | a5\n 44329: s1 = s1 << 0x10\n 44332: a1 = a1 << 0x18\n 44335: a1 = a1 | s1\n 44338: a1 = a1 | a4\n 44341: a1 = a1 << 0x20\n 44344: a3 = a3 | a1\n 44347: a1 = u8 [a0 + 0x9]\n 44350: a4 = u8 [a0 + 0x8]\n 44353: a5 = u8 [a0 + 0xa]\n 44356: s1 = u8 [a0 + 0xb]\n 44359: a1 = a1 << 0x8\n 44362: a1 = a1 | a4\n 44365: a5 = a5 << 0x10\n 44368: s1 = s1 << 0x18\n 44371: a5 = a5 | s1\n 44374: a1 = a1 | a5\n 44377: a4 = u8 [a0 + 0xd]\n 44380: a5 = u8 [a0 + 0xc]\n 44383: s1 = u8 [a0 + 0xe]\n 44386: a0 = u8 [a0 + 0xf]\n 44389: a4 = a4 << 0x8\n 44392: a4 = a4 | a5\n 44395: s1 = s1 << 0x10\n 44398: a0 = a0 << 0x18\n 44401: a0 = a0 | s1\n 44404: a0 = a0 | a4\n 44407: a0 = a0 << 0x20\n 44410: a0 = a0 | a1\n 44413: a1 = reverse a0\n 44415: a0 = reverse a3\n 44417: a2 = reverse a2\n 44419: a3 = reverse t0\n 44421: a2 = a2 | a3\n 44424: a3 = a0 | a1\n 44427: a3 = a3 | a2\n 44430: a3 = a3 >> 0x20\n 44433: a1 = a1 | a2\n 44436: a1 = a1 << 0x20\n 44439: a1 = a1 | a3\n 44442: jump @634 if a1 == 0\n      : @631 (gas: 1)\n 44445: trap\n      : @632 (gas: 3)\n 44446: a0 = 0\n 44448: a1 = 0\n 44450: ra = 540, jump @0\n      : @633 [@dyn 270] (gas: 5)\n 44457: i32 a1 = a0 + 0\n 44459: a0 = 0x1\n 44462: a2 = 0\n 44464: ecalli 14 // 'seal_return'\n 44466: fallthrough\n      : @634 (gas: 4)\n 44467: i32 s1 = a0 + 0\n 44469: a1 = 0x20\n 44472: a0 = s1\n 44474: ra = 542, jump @0\n      : @635 [@dyn 271] (gas: 71)\n 44481: a1 = u64 [sp]\n 44483: a1 = reverse a1\n 44485: a2 = u64 [sp + 0x8]\n 44488: a2 = reverse a2\n 44490: a3 = u64 [sp + 0x10]\n 44493: a3 = reverse a3\n 44495: a4 = u64 [sp + 0x18]\n 44498: a4 = reverse a4\n 44500: a5 = a4 >> 0x38\n 44503: u8 [a0 + 0x1f] = a5\n 44506: a5 = a4 >> 0x30\n 44509: u8 [a0 + 0x1e] = a5\n 44512: a5 = a4 >> 0x28\n 44515: u8 [a0 + 0x1d] = a5\n 44518: a5 = a4 >> 0x20\n 44521: u8 [a0 + 0x1c] = a5\n 44524: a5 = a4 >> 0x18\n 44527: u8 [a0 + 0x1b] = a5\n 44530: a5 = a4 >> 0x10\n 44533: u8 [a0 + 0x1a] = a5\n 44536: a5 = a4 >> 0x8\n 44539: u8 [a0 + 0x19] = a5\n 44542: u8 [a0 + 0x18] = a4\n 44545: u8 [a0 + 0x10] = a3\n 44548: a4 = a3 >> 0x38\n 44551: u8 [a0 + 0x17] = a4\n 44554: a4 = a3 >> 0x30\n 44557: u8 [a0 + 0x16] = a4\n 44560: a4 = a3 >> 0x28\n 44563: u8 [a0 + 0x15] = a4\n 44566: a4 = a3 >> 0x20\n 44569: u8 [a0 + 0x14] = a4\n 44572: a4 = a3 >> 0x18\n 44575: u8 [a0 + 0x13] = a4\n 44578: a4 = a3 >> 0x10\n 44581: u8 [a0 + 0x12] = a4\n 44584: a3 = a3 >> 0x8\n 44587: u8 [a0 + 0x11] = a3\n 44590: u8 [a0 + 0x8] = a2\n 44593: a3 = a2 >> 0x38\n 44596: u8 [a0 + 0xf] = a3\n 44599: a3 = a2 >> 0x30\n 44602: u8 [a0 + 0xe] = a3\n 44605: a3 = a2 >> 0x28\n 44608: u8 [a0 + 0xd] = a3\n 44611: a3 = a2 >> 0x20\n 44614: u8 [a0 + 0xc] = a3\n 44617: a3 = a2 >> 0x18\n 44620: u8 [a0 + 0xb] = a3\n 44623: a3 = a2 >> 0x10\n 44626: u8 [a0 + 0xa] = a3\n 44629: a2 = a2 >> 0x8\n 44632: u8 [a0 + 0x9] = a2\n 44635: u8 [a0] = a1\n 44637: a2 = a1 >> 0x38\n 44640: u8 [a0 + 0x7] = a2\n 44643: a2 = a1 >> 0x30\n 44646: u8 [a0 + 0x6] = a2\n 44649: a2 = a1 >> 0x28\n 44652: u8 [a0 + 0x5] = a2\n 44655: a2 = a1 >> 0x20\n 44658: u8 [a0 + 0x4] = a2\n 44661: a2 = a1 >> 0x18\n 44664: u8 [a0 + 0x3] = a2\n 44667: a2 = a1 >> 0x10\n 44670: u8 [a0 + 0x2] = a2\n 44673: a1 = a1 >> 0x8\n 44676: u8 [a0 + 0x1] = a1\n 44679: a1 = 0x20\n 44682: a0 = s1\n 44684: ra = 544, jump @0\n      : @636 [@dyn 272] (gas: 6)\n 44691: i32 a1 = a0 + 0\n 44693: a2 = 0x20\n 44696: a0 = 0\n 44698: ra = 0x222\n 44702: ecalli 14 // 'seal_return'\n 44704: fallthrough\n      : @637 [@dyn 273] (gas: 12)\n 44705: sp = sp + 0xffffffffffffff80\n 44708: u64 [sp + 0x78] = ra\n 44711: u64 [sp + 0x70] = s0\n 44714: s0 = sp + 0x80\n 44718: sp = sp & 0xffffffffffffffe0\n 44721: u64 [sp + 56] = 0\n 44724: u64 [sp + 48] = 0\n 44727: u64 [sp + 40] = 0\n 44730: u64 [sp + 32] = 0\n 44733: i32 a0 = sp + 0x20\n 44736: ecalli 17 // 'value_transferred'\n 44738: fallthrough\n      : @638 (gas: 8)\n 44739: a0 = u64 [sp + 0x30]\n 44742: a1 = u64 [sp + 0x38]\n 44745: a2 = u64 [sp + 0x28]\n 44748: a3 = u64 [sp + 0x20]\n 44751: a1 = a1 | a2\n 44754: a0 = a0 | a3\n 44757: a0 = a0 | a1\n 44760: jump @644 if a0 != 0\n      : @639 (gas: 2)\n 44764: a0 = i32 [0x20078]\n 44769: jump @644 if a0 <=u 35\n      : @640 (gas: 30)\n 44774: i32 a0 = sp + 0x40\n 44777: a1 = 0x4\n 44780: ecalli 3 // 'call_data_load'\n 44782: a1 = u64 [sp + 0x40]\n 44785: a0 = u64 [sp + 0x48]\n 44788: a2 = u64 [sp + 0x50]\n 44791: a3 = u64 [sp + 0x58]\n 44794: u64 [sp + 0x18] = a3\n 44797: u64 [sp + 0x10] = a2\n 44800: u64 [sp + 0x8] = a0\n 44803: a0 = sp\n 44805: u64 [sp] = a1\n 44807: ra = 0x224\n 44811: sp = sp + 0xfffffffffffffe20\n 44815: u64 [sp + 0x1d8] = ra\n 44819: u64 [sp + 0x1d0] = s0\n 44823: u64 [sp + 0x1c8] = s1\n 44827: s0 = sp + 0x1e0\n 44831: sp = sp & 0xffffffffffffffe0\n 44834: a1 = u64 [a0]\n 44836: u64 [sp + 0x58] = a1\n 44839: a1 = u64 [a0 + 0x8]\n 44842: u64 [sp + 0x50] = a1\n 44845: a1 = u64 [a0 + 0x10]\n 44848: u64 [sp + 0x48] = a1\n 44851: s1 = u64 [a0 + 0x18]\n 44854: a1 = 0x20\n 44857: a0 = 0\n 44859: ra = 0x418\n 44863: jump @0\n      : @641 [@dyn 274] (gas: 3)\n 44867: a0 = 0x40\n 44870: a1 = 0x20\n 44873: ra = 550, jump @0\n      : @642 [@dyn 275] (gas: 100)\n 44880: a1 = u8 [a0 + 0x11]\n 44883: a2 = u8 [a0 + 0x10]\n 44886: a3 = u8 [a0 + 0x12]\n 44889: a4 = u8 [a0 + 0x13]\n 44892: a1 = a1 << 0x8\n 44895: a1 = a1 | a2\n 44898: a3 = a3 << 0x10\n 44901: a4 = a4 << 0x18\n 44904: a3 = a3 | a4\n 44907: a1 = a1 | a3\n 44910: a2 = u8 [a0 + 0x15]\n 44913: a3 = u8 [a0 + 0x14]\n 44916: a4 = u8 [a0 + 0x16]\n 44919: a5 = u8 [a0 + 0x17]\n 44922: a2 = a2 << 0x8\n 44925: a2 = a2 | a3\n 44928: a4 = a4 << 0x10\n 44931: a5 = a5 << 0x18\n 44934: a4 = a4 | a5\n 44937: a2 = a2 | a4\n 44940: a2 = a2 << 0x20\n 44943: t0 = a2 | a1\n 44946: a2 = u8 [a0 + 0x1]\n 44949: a3 = u8 [a0]\n 44951: a4 = u8 [a0 + 0x2]\n 44954: a5 = u8 [a0 + 0x3]\n 44957: a2 = a2 << 0x8\n 44960: a2 = a2 | a3\n 44963: a4 = a4 << 0x10\n 44966: a5 = a5 << 0x18\n 44969: a4 = a4 | a5\n 44972: a2 = a2 | a4\n 44975: a3 = u8 [a0 + 0x5]\n 44978: a4 = u8 [a0 + 0x4]\n 44981: a5 = u8 [a0 + 0x6]\n 44984: a1 = u8 [a0 + 0x7]\n 44987: a3 = a3 << 0x8\n 44990: a3 = a3 | a4\n 44993: a5 = a5 << 0x10\n 44996: a1 = a1 << 0x18\n 44999: a1 = a1 | a5\n 45002: a1 = a1 | a3\n 45005: a1 = a1 << 0x20\n 45008: t1 = a1 | a2\n 45011: a1 = u8 [a0 + 0x19]\n 45014: a3 = u8 [a0 + 0x18]\n 45017: a4 = u8 [a0 + 0x1a]\n 45020: a5 = u8 [a0 + 0x1b]\n 45023: a1 = a1 << 0x8\n 45026: a1 = a1 | a3\n 45029: a4 = a4 << 0x10\n 45032: a5 = a5 << 0x18\n 45035: a4 = a4 | a5\n 45038: a1 = a1 | a4\n 45041: a3 = u8 [a0 + 0x1d]\n 45044: a4 = u8 [a0 + 0x1c]\n 45047: a5 = u8 [a0 + 0x1e]\n 45050: a2 = u8 [a0 + 0x1f]\n 45053: a3 = a3 << 0x8\n 45056: a3 = a3 | a4\n 45059: a5 = a5 << 0x10\n 45062: a2 = a2 << 0x18\n 45065: a2 = a2 | a5\n 45068: a2 = a2 | a3\n 45071: a2 = a2 << 0x20\n 45074: a3 = a2 | a1\n 45077: a1 = u8 [a0 + 0x9]\n 45080: a2 = u8 [a0 + 0x8]\n 45083: a4 = u8 [a0 + 0xa]\n 45086: a5 = u8 [a0 + 0xb]\n 45089: a1 = a1 << 0x8\n 45092: a1 = a1 | a2\n 45095: a4 = a4 << 0x10\n 45098: a5 = a5 << 0x18\n 45101: a4 = a4 | a5\n 45104: a1 = a1 | a4\n 45107: a2 = u8 [a0 + 0xd]\n 45110: a4 = u8 [a0 + 0xc]\n 45113: a5 = u8 [a0 + 0xe]\n 45116: a0 = u8 [a0 + 0xf]\n 45119: a2 = a2 << 0x8\n 45122: a2 = a2 | a4\n 45125: a5 = a5 << 0x10\n 45128: a0 = a0 << 0x18\n 45131: a0 = a0 | a5\n 45134: a0 = a0 | a2\n 45137: a0 = a0 << 0x20\n 45140: a0 = a0 | a1\n 45143: a1 = reverse a0\n 45145: a0 = reverse a3\n 45147: a2 = reverse t1\n 45149: a3 = reverse t0\n 45151: a2 = a2 | a3\n 45154: a3 = a0 | a1\n 45157: a3 = a3 | a2\n 45160: a3 = a3 >> 0x20\n 45163: a1 = a1 | a2\n 45166: a1 = a1 << 0x20\n 45169: a1 = a1 | a3\n 45172: jump @646 if a1 == 0\n      : @643 (gas: 1)\n 45175: trap\n      : @644 (gas: 3)\n 45176: a0 = 0\n 45178: a1 = 0\n 45180: ra = 552, jump @0\n      : @645 [@dyn 276] (gas: 7)\n 45187: i32 a1 = a0 + 0\n 45189: a0 = 0x1\n 45192: a2 = 0\n 45194: ecalli 14 // 'seal_return'\n 45196: i32 a0 = a0 + 0\n 45198: ra = 0x22a\n 45202: jump @0\n      : @646 (gas: 2)\n 45206: i32 a0 = a0 + 0\n 45208: ra = 554, jump @0\n      : @647 [@dyn 277] (gas: 6)\n 45215: i32 a1 = a0 + 0\n 45217: a0 = 0\n 45219: a2 = 0\n 45221: ra = 0x22c\n 45225: ecalli 14 // 'seal_return'\n 45227: fallthrough\n      : @648 [@dyn 278] (gas: 8)\n 45228: sp = sp + 0xffffffffffffffe0\n 45231: u64 [sp + 0x18] = ra\n 45234: u64 [sp + 0x10] = s0\n 45237: u64 [sp + 0x8] = s1\n 45240: s1 = 0x20070\n 45245: a1 = i32 [0x20070]\n 45250: s0 = a0\n 45252: jump @651 if a1 == 0\n      : @649 (gas: 6)\n 45255: a0 = 0x30080\n 45260: i32 a0 = a0 + 0\n 45262: u64 [sp] = a1\n 45264: i32 a1 = s1 + 0\n 45266: ecalli 7 // 'get_immutable_data'\n 45268: fallthrough\n      : @650 (gas: 4)\n 45269: a0 = i32 [0x20070]\n 45274: u32 [0x20070] = 0\n 45279: a1 = u64 [sp]\n 45281: jump @652 if a0 <u a1\n      : @651 (gas: 13)\n 45284: a1 = u64 [0x30098]\n 45289: a2 = u64 [0x30090]\n 45294: a3 = u64 [0x30088]\n 45299: a0 = u64 [0x30080]\n 45304: u64 [s0 + 0x18] = a1\n 45307: u64 [s0 + 0x10] = a2\n 45310: u64 [s0 + 0x8] = a3\n 45313: u64 [s0] = a0\n 45315: ra = u64 [sp + 0x18]\n 45318: s0 = u64 [sp + 0x10]\n 45321: s1 = u64 [sp + 0x8]\n 45324: sp = sp + 0x20\n 45327: ret\n      : @652 (gas: 1)\n 45329: trap\n      : @653 (gas: 8)\n 45330: a0 = u64 [sp + 0x30]\n 45333: a1 = u64 [sp + 0x38]\n 45336: a2 = u64 [sp + 0x28]\n 45339: a3 = u64 [sp + 0x20]\n 45342: a1 = a1 | a2\n 45345: a0 = a0 | a3\n 45348: a0 = a0 | a1\n 45351: jump @661 if a0 != 0\n      : @654 (gas: 2)\n 45355: a0 = i32 [0x20078]\n 45360: jump @661 if a0 <=u 3\n      : @655 (gas: 3)\n 45365: s1 = 0x20070\n 45370: a0 = i32 [0x20070]\n 45375: jump @658 if a0 == 0\n      : @656 (gas: 6)\n 45378: u64 [sp + 0x18] = a0\n 45381: a0 = 0x30080\n 45386: i32 a0 = a0 + 0\n 45388: i32 a1 = s1 + 0\n 45390: ecalli 7 // 'get_immutable_data'\n 45392: fallthrough\n      : @657 (gas: 4)\n 45393: a0 = i32 [0x20070]\n 45398: u32 [0x20070] = 0\n 45403: a1 = u64 [sp + 0x18]\n 45406: jump @660 if a0 <u a1\n      : @658 (gas: 9)\n 45410: a1 = u64 [0x30090]\n 45415: u64 [sp + 0x8] = a1\n 45418: a1 = u64 [0x30088]\n 45423: u64 [sp + 0x10] = a1\n 45426: a0 = u64 [0x30080]\n 45431: u64 [sp + 0x18] = a0\n 45434: a0 = 0x40\n 45437: a1 = 0x20\n 45440: ra = 558, jump @0\n      : @659 [@dyn 279] (gas: 100)\n 45447: a1 = u8 [a0 + 0x11]\n 45450: a2 = u8 [a0 + 0x10]\n 45453: a3 = u8 [a0 + 0x12]\n 45456: a4 = u8 [a0 + 0x13]\n 45459: a1 = a1 << 0x8\n 45462: a1 = a1 | a2\n 45465: a3 = a3 << 0x10\n 45468: a4 = a4 << 0x18\n 45471: a3 = a3 | a4\n 45474: a1 = a1 | a3\n 45477: a2 = u8 [a0 + 0x15]\n 45480: a3 = u8 [a0 + 0x14]\n 45483: a4 = u8 [a0 + 0x16]\n 45486: a5 = u8 [a0 + 0x17]\n 45489: a2 = a2 << 0x8\n 45492: a2 = a2 | a3\n 45495: a4 = a4 << 0x10\n 45498: a5 = a5 << 0x18\n 45501: a4 = a4 | a5\n 45504: a2 = a2 | a4\n 45507: a2 = a2 << 0x20\n 45510: t0 = a2 | a1\n 45513: a2 = u8 [a0 + 0x1]\n 45516: a3 = u8 [a0]\n 45518: a4 = u8 [a0 + 0x2]\n 45521: a5 = u8 [a0 + 0x3]\n 45524: a2 = a2 << 0x8\n 45527: a2 = a2 | a3\n 45530: a4 = a4 << 0x10\n 45533: a5 = a5 << 0x18\n 45536: a4 = a4 | a5\n 45539: a2 = a2 | a4\n 45542: a3 = u8 [a0 + 0x5]\n 45545: a4 = u8 [a0 + 0x4]\n 45548: a5 = u8 [a0 + 0x6]\n 45551: s1 = u8 [a0 + 0x7]\n 45554: a3 = a3 << 0x8\n 45557: a3 = a3 | a4\n 45560: a5 = a5 << 0x10\n 45563: s1 = s1 << 0x18\n 45566: a5 = a5 | s1\n 45569: a3 = a3 | a5\n 45572: a3 = a3 << 0x20\n 45575: a2 = a2 | a3\n 45578: a3 = u8 [a0 + 0x19]\n 45581: a4 = u8 [a0 + 0x18]\n 45584: a5 = u8 [a0 + 0x1a]\n 45587: s1 = u8 [a0 + 0x1b]\n 45590: a3 = a3 << 0x8\n 45593: a3 = a3 | a4\n 45596: a5 = a5 << 0x10\n 45599: s1 = s1 << 0x18\n 45602: a5 = a5 | s1\n 45605: a3 = a3 | a5\n 45608: a4 = u8 [a0 + 0x1d]\n 45611: a5 = u8 [a0 + 0x1c]\n 45614: s1 = u8 [a0 + 0x1e]\n 45617: a1 = u8 [a0 + 0x1f]\n 45620: a4 = a4 << 0x8\n 45623: a4 = a4 | a5\n 45626: s1 = s1 << 0x10\n 45629: a1 = a1 << 0x18\n 45632: a1 = a1 | s1\n 45635: a1 = a1 | a4\n 45638: a1 = a1 << 0x20\n 45641: a3 = a3 | a1\n 45644: a1 = u8 [a0 + 0x9]\n 45647: a4 = u8 [a0 + 0x8]\n 45650: a5 = u8 [a0 + 0xa]\n 45653: s1 = u8 [a0 + 0xb]\n 45656: a1 = a1 << 0x8\n 45659: a1 = a1 | a4\n 45662: a5 = a5 << 0x10\n 45665: s1 = s1 << 0x18\n 45668: a5 = a5 | s1\n 45671: a1 = a1 | a5\n 45674: a4 = u8 [a0 + 0xd]\n 45677: a5 = u8 [a0 + 0xc]\n 45680: s1 = u8 [a0 + 0xe]\n 45683: a0 = u8 [a0 + 0xf]\n 45686: a4 = a4 << 0x8\n 45689: a4 = a4 | a5\n 45692: s1 = s1 << 0x10\n 45695: a0 = a0 << 0x18\n 45698: a0 = a0 | s1\n 45701: a0 = a0 | a4\n 45704: a0 = a0 << 0x20\n 45707: a0 = a0 | a1\n 45710: a1 = reverse a0\n 45712: a0 = reverse a3\n 45714: a2 = reverse a2\n 45716: a3 = reverse t0\n 45718: a2 = a2 | a3\n 45721: a3 = a0 | a1\n 45724: a3 = a3 | a2\n 45727: a3 = a3 >> 0x20\n 45730: a1 = a1 | a2\n 45733: a1 = a1 << 0x20\n 45736: a1 = a1 | a3\n 45739: jump @663 if a1 == 0\n      : @660 (gas: 1)\n 45742: trap\n      : @661 (gas: 3)\n 45743: a0 = 0\n 45745: a1 = 0\n 45747: ra = 560, jump @0\n      : @662 [@dyn 280] (gas: 5)\n 45754: i32 a1 = a0 + 0\n 45756: a0 = 0x1\n 45759: a2 = 0\n 45761: ecalli 14 // 'seal_return'\n 45763: fallthrough\n      : @663 (gas: 7)\n 45764: a1 = u64 [sp + 0x8]\n 45767: a1 = a1 << 0x20\n 45770: s1 = a1 >> 0x20\n 45773: i32 a0 = a0 + 0\n 45775: u64 [sp + 0x8] = a0\n 45778: a1 = 0x20\n 45781: ra = 562, jump @0\n      : @664 [@dyn 281] (gas: 58)\n 45788: a1 = reverse s1\n 45790: a2 = u64 [sp + 0x10]\n 45793: a2 = reverse a2\n 45795: a3 = u64 [sp + 0x18]\n 45798: a3 = reverse a3\n 45800: a4 = a3 >> 0x38\n 45803: u8 [a0 + 0x1f] = a4\n 45806: a4 = a3 >> 0x30\n 45809: u8 [a0 + 0x1e] = a4\n 45812: a4 = a3 >> 0x28\n 45815: u8 [a0 + 0x1d] = a4\n 45818: a4 = a3 >> 0x20\n 45821: u8 [a0 + 0x1c] = a4\n 45824: a4 = a3 >> 0x18\n 45827: u8 [a0 + 0x1b] = a4\n 45830: a4 = a3 >> 0x10\n 45833: u8 [a0 + 0x1a] = a4\n 45836: a4 = a3 >> 0x8\n 45839: u8 [a0 + 0x19] = a4\n 45842: u8 [a0 + 0x18] = a3\n 45845: u8 [a0 + 0x10] = a2\n 45848: u8 [a0 + 11] = 0\n 45851: u8 [a0 + 10] = 0\n 45854: u8 [a0 + 9] = 0\n 45857: u8 [a0 + 7] = 0\n 45860: u8 [a0 + 6] = 0\n 45863: u8 [a0 + 5] = 0\n 45866: u8 [a0 + 4] = 0\n 45869: u8 [a0 + 3] = 0\n 45872: u8 [a0 + 2] = 0\n 45875: u8 [a0 + 1] = 0\n 45878: u8 [a0 + 0] = 0\n 45880: a3 = a2 >> 0x38\n 45883: u8 [a0 + 0x17] = a3\n 45886: a3 = a2 >> 0x30\n 45889: u8 [a0 + 0x16] = a3\n 45892: a3 = a2 >> 0x28\n 45895: u8 [a0 + 0x15] = a3\n 45898: a3 = a2 >> 0x20\n 45901: u8 [a0 + 0x14] = a3\n 45904: a3 = a2 >> 0x18\n 45907: u8 [a0 + 0x13] = a3\n 45910: a3 = a2 >> 0x10\n 45913: u8 [a0 + 0x12] = a3\n 45916: a2 = a2 >> 0x8\n 45919: u8 [a0 + 0x11] = a2\n 45922: u8 [a0 + 0x8] = a1\n 45925: a2 = a1 >> 0x38\n 45928: u8 [a0 + 0xf] = a2\n 45931: a2 = a1 >> 0x30\n 45934: u8 [a0 + 0xe] = a2\n 45937: a2 = a1 >> 0x28\n 45940: u8 [a0 + 0xd] = a2\n 45943: a1 = a1 >> 0x20\n 45946: u8 [a0 + 0xc] = a1\n 45949: a1 = 0x20\n 45952: a0 = u64 [sp + 0x8]\n 45955: ra = 564, jump @0\n      : @665 [@dyn 282] (gas: 6)\n 45962: i32 a1 = a0 + 0\n 45964: a2 = 0x20\n 45967: a0 = 0\n 45969: ra = 0x236\n 45973: ecalli 14 // 'seal_return'\n 45975: fallthrough\n      : @666 [@dyn 283] (gas: 8)\n 45976: sp = sp + 0xffffffffffffffe0\n 45979: u64 [sp + 0x18] = ra\n 45982: u64 [sp + 0x10] = s0\n 45985: u64 [sp + 0x8] = s1\n 45988: s1 = 0x20070\n 45993: a1 = i32 [0x20070]\n 45998: s0 = a0\n 46000: jump @669 if a1 == 0\n      : @667 (gas: 6)\n 46003: a0 = 0x30080\n 46008: i32 a0 = a0 + 0\n 46010: u64 [sp] = a1\n 46012: i32 a1 = s1 + 0\n 46014: ecalli 7 // 'get_immutable_data'\n 46016: fallthrough\n      : @668 (gas: 4)\n 46017: a0 = i32 [0x20070]\n 46022: u32 [0x20070] = 0\n 46027: a1 = u64 [sp]\n 46029: jump @670 if a0 <u a1\n      : @669 (gas: 13)\n 46032: a1 = u64 [0x300b8]\n 46037: a2 = u64 [0x300b0]\n 46042: a3 = u64 [0x300a8]\n 46047: a0 = u64 [0x300a0]\n 46052: u64 [s0 + 0x18] = a1\n 46055: u64 [s0 + 0x10] = a2\n 46058: u64 [s0 + 0x8] = a3\n 46061: u64 [s0] = a0\n 46063: ra = u64 [sp + 0x18]\n 46066: s0 = u64 [sp + 0x10]\n 46069: s1 = u64 [sp + 0x8]\n 46072: sp = sp + 0x20\n 46075: ret\n      : @670 (gas: 1)\n 46077: trap\n      : @671 (gas: 8)\n 46078: a0 = u64 [sp + 0x30]\n 46081: a1 = u64 [sp + 0x38]\n 46084: a2 = u64 [sp + 0x28]\n 46087: a3 = u64 [sp + 0x20]\n 46090: a1 = a1 | a2\n 46093: a0 = a0 | a3\n 46096: a0 = a0 | a1\n 46099: jump @679 if a0 != 0\n      : @672 (gas: 2)\n 46103: a0 = i32 [0x20078]\n 46108: jump @679 if a0 <=u 3\n      : @673 (gas: 3)\n 46113: s1 = 0x20070\n 46118: a0 = i32 [0x20070]\n 46123: jump @676 if a0 == 0\n      : @674 (gas: 6)\n 46126: u64 [sp + 0x18] = a0\n 46129: a0 = 0x30080\n 46134: i32 a0 = a0 + 0\n 46136: i32 a1 = s1 + 0\n 46138: ecalli 7 // 'get_immutable_data'\n 46140: fallthrough\n      : @675 (gas: 4)\n 46141: a0 = i32 [0x20070]\n 46146: u32 [0x20070] = 0\n 46151: a1 = u64 [sp + 0x18]\n 46154: jump @678 if a0 <u a1\n      : @676 (gas: 11)\n 46158: a1 = u64 [0x300b8]\n 46163: u64 [sp] = a1\n 46165: a1 = u64 [0x300b0]\n 46170: u64 [sp + 0x8] = a1\n 46173: a1 = u64 [0x300a8]\n 46178: u64 [sp + 0x10] = a1\n 46181: a0 = u64 [0x300a0]\n 46186: u64 [sp + 0x18] = a0\n 46189: a0 = 0x40\n 46192: a1 = 0x20\n 46195: ra = 568, jump @0\n      : @677 [@dyn 284] (gas: 100)\n 46202: a1 = u8 [a0 + 0x11]\n 46205: a2 = u8 [a0 + 0x10]\n 46208: a3 = u8 [a0 + 0x12]\n 46211: a4 = u8 [a0 + 0x13]\n 46214: a1 = a1 << 0x8\n 46217: a1 = a1 | a2\n 46220: a3 = a3 << 0x10\n 46223: a4 = a4 << 0x18\n 46226: a3 = a3 | a4\n 46229: a1 = a1 | a3\n 46232: a2 = u8 [a0 + 0x15]\n 46235: a3 = u8 [a0 + 0x14]\n 46238: a4 = u8 [a0 + 0x16]\n 46241: a5 = u8 [a0 + 0x17]\n 46244: a2 = a2 << 0x8\n 46247: a2 = a2 | a3\n 46250: a4 = a4 << 0x10\n 46253: a5 = a5 << 0x18\n 46256: a4 = a4 | a5\n 46259: a2 = a2 | a4\n 46262: a2 = a2 << 0x20\n 46265: t0 = a2 | a1\n 46268: a2 = u8 [a0 + 0x1]\n 46271: a3 = u8 [a0]\n 46273: a4 = u8 [a0 + 0x2]\n 46276: a5 = u8 [a0 + 0x3]\n 46279: a2 = a2 << 0x8\n 46282: a2 = a2 | a3\n 46285: a4 = a4 << 0x10\n 46288: a5 = a5 << 0x18\n 46291: a4 = a4 | a5\n 46294: a2 = a2 | a4\n 46297: a3 = u8 [a0 + 0x5]\n 46300: a4 = u8 [a0 + 0x4]\n 46303: a5 = u8 [a0 + 0x6]\n 46306: s1 = u8 [a0 + 0x7]\n 46309: a3 = a3 << 0x8\n 46312: a3 = a3 | a4\n 46315: a5 = a5 << 0x10\n 46318: s1 = s1 << 0x18\n 46321: a5 = a5 | s1\n 46324: a3 = a3 | a5\n 46327: a3 = a3 << 0x20\n 46330: a2 = a2 | a3\n 46333: a3 = u8 [a0 + 0x19]\n 46336: a4 = u8 [a0 + 0x18]\n 46339: a5 = u8 [a0 + 0x1a]\n 46342: s1 = u8 [a0 + 0x1b]\n 46345: a3 = a3 << 0x8\n 46348: a3 = a3 | a4\n 46351: a5 = a5 << 0x10\n 46354: s1 = s1 << 0x18\n 46357: a5 = a5 | s1\n 46360: a3 = a3 | a5\n 46363: a4 = u8 [a0 + 0x1d]\n 46366: a5 = u8 [a0 + 0x1c]\n 46369: s1 = u8 [a0 + 0x1e]\n 46372: a1 = u8 [a0 + 0x1f]\n 46375: a4 = a4 << 0x8\n 46378: a4 = a4 | a5\n 46381: s1 = s1 << 0x10\n 46384: a1 = a1 << 0x18\n 46387: a1 = a1 | s1\n 46390: a1 = a1 | a4\n 46393: a1 = a1 << 0x20\n 46396: a3 = a3 | a1\n 46399: a1 = u8 [a0 + 0x9]\n 46402: a4 = u8 [a0 + 0x8]\n 46405: a5 = u8 [a0 + 0xa]\n 46408: s1 = u8 [a0 + 0xb]\n 46411: a1 = a1 << 0x8\n 46414: a1 = a1 | a4\n 46417: a5 = a5 << 0x10\n 46420: s1 = s1 << 0x18\n 46423: a5 = a5 | s1\n 46426: a1 = a1 | a5\n 46429: a4 = u8 [a0 + 0xd]\n 46432: a5 = u8 [a0 + 0xc]\n 46435: s1 = u8 [a0 + 0xe]\n 46438: a0 = u8 [a0 + 0xf]\n 46441: a4 = a4 << 0x8\n 46444: a4 = a4 | a5\n 46447: s1 = s1 << 0x10\n 46450: a0 = a0 << 0x18\n 46453: a0 = a0 | s1\n 46456: a0 = a0 | a4\n 46459: a0 = a0 << 0x20\n 46462: a0 = a0 | a1\n 46465: a1 = reverse a0\n 46467: a0 = reverse a3\n 46469: a2 = reverse a2\n 46471: a3 = reverse t0\n 46473: a2 = a2 | a3\n 46476: a3 = a0 | a1\n 46479: a3 = a3 | a2\n 46482: a3 = a3 >> 0x20\n 46485: a1 = a1 | a2\n 46488: a1 = a1 << 0x20\n 46491: a1 = a1 | a3\n 46494: jump @681 if a1 == 0\n      : @678 (gas: 1)\n 46497: trap\n      : @679 (gas: 3)\n 46498: a0 = 0\n 46500: a1 = 0\n 46502: ra = 570, jump @0\n      : @680 [@dyn 285] (gas: 5)\n 46509: i32 a1 = a0 + 0\n 46511: a0 = 0x1\n 46514: a2 = 0\n 46516: ecalli 14 // 'seal_return'\n 46518: fallthrough\n      : @681 (gas: 4)\n 46519: i32 s1 = a0 + 0\n 46521: a1 = 0x20\n 46524: a0 = s1\n 46526: ra = 572, jump @0\n      : @682 [@dyn 286] (gas: 71)\n 46533: a1 = u64 [sp]\n 46535: a1 = reverse a1\n 46537: a2 = u64 [sp + 0x8]\n 46540: a2 = reverse a2\n 46542: a3 = u64 [sp + 0x10]\n 46545: a3 = reverse a3\n 46547: a4 = u64 [sp + 0x18]\n 46550: a4 = reverse a4\n 46552: a5 = a4 >> 0x38\n 46555: u8 [a0 + 0x1f] = a5\n 46558: a5 = a4 >> 0x30\n 46561: u8 [a0 + 0x1e] = a5\n 46564: a5 = a4 >> 0x28\n 46567: u8 [a0 + 0x1d] = a5\n 46570: a5 = a4 >> 0x20\n 46573: u8 [a0 + 0x1c] = a5\n 46576: a5 = a4 >> 0x18\n 46579: u8 [a0 + 0x1b] = a5\n 46582: a5 = a4 >> 0x10\n 46585: u8 [a0 + 0x1a] = a5\n 46588: a5 = a4 >> 0x8\n 46591: u8 [a0 + 0x19] = a5\n 46594: u8 [a0 + 0x18] = a4\n 46597: u8 [a0 + 0x10] = a3\n 46600: a4 = a3 >> 0x38\n 46603: u8 [a0 + 0x17] = a4\n 46606: a4 = a3 >> 0x30\n 46609: u8 [a0 + 0x16] = a4\n 46612: a4 = a3 >> 0x28\n 46615: u8 [a0 + 0x15] = a4\n 46618: a4 = a3 >> 0x20\n 46621: u8 [a0 + 0x14] = a4\n 46624: a4 = a3 >> 0x18\n 46627: u8 [a0 + 0x13] = a4\n 46630: a4 = a3 >> 0x10\n 46633: u8 [a0 + 0x12] = a4\n 46636: a3 = a3 >> 0x8\n 46639: u8 [a0 + 0x11] = a3\n 46642: u8 [a0 + 0x8] = a2\n 46645: a3 = a2 >> 0x38\n 46648: u8 [a0 + 0xf] = a3\n 46651: a3 = a2 >> 0x30\n 46654: u8 [a0 + 0xe] = a3\n 46657: a3 = a2 >> 0x28\n 46660: u8 [a0 + 0xd] = a3\n 46663: a3 = a2 >> 0x20\n 46666: u8 [a0 + 0xc] = a3\n 46669: a3 = a2 >> 0x18\n 46672: u8 [a0 + 0xb] = a3\n 46675: a3 = a2 >> 0x10\n 46678: u8 [a0 + 0xa] = a3\n 46681: a2 = a2 >> 0x8\n 46684: u8 [a0 + 0x9] = a2\n 46687: u8 [a0] = a1\n 46689: a2 = a1 >> 0x38\n 46692: u8 [a0 + 0x7] = a2\n 46695: a2 = a1 >> 0x30\n 46698: u8 [a0 + 0x6] = a2\n 46701: a2 = a1 >> 0x28\n 46704: u8 [a0 + 0x5] = a2\n 46707: a2 = a1 >> 0x20\n 46710: u8 [a0 + 0x4] = a2\n 46713: a2 = a1 >> 0x18\n 46716: u8 [a0 + 0x3] = a2\n 46719: a2 = a1 >> 0x10\n 46722: u8 [a0 + 0x2] = a2\n 46725: a1 = a1 >> 0x8\n 46728: u8 [a0 + 0x1] = a1\n 46731: a1 = 0x20\n 46734: a0 = s1\n 46736: ra = 574, jump @0\n      : @683 [@dyn 287] (gas: 6)\n 46743: i32 a1 = a0 + 0\n 46745: a2 = 0x20\n 46748: a0 = 0\n 46750: ra = 0x240\n 46754: ecalli 14 // 'seal_return'\n 46756: fallthrough\n      : @684 [@dyn 288] (gas: 12)\n 46757: sp = sp + 0xffffffffffffff80\n 46760: u64 [sp + 0x78] = ra\n 46763: u64 [sp + 0x70] = s0\n 46766: s0 = sp + 0x80\n 46770: sp = sp & 0xffffffffffffffe0\n 46773: u64 [sp + 56] = 0\n 46776: u64 [sp + 48] = 0\n 46779: u64 [sp + 40] = 0\n 46782: u64 [sp + 32] = 0\n 46785: i32 a0 = sp + 0x20\n 46788: ecalli 17 // 'value_transferred'\n 46790: fallthrough\n      : @685 (gas: 8)\n 46791: a0 = u64 [sp + 0x30]\n 46794: a1 = u64 [sp + 0x38]\n 46797: a2 = u64 [sp + 0x28]\n 46800: a3 = u64 [sp + 0x20]\n 46803: a1 = a1 | a2\n 46806: a0 = a0 | a3\n 46809: a0 = a0 | a1\n 46812: jump @691 if a0 != 0\n      : @686 (gas: 2)\n 46816: a0 = i32 [0x20078]\n 46821: jump @691 if a0 <=u 35\n      : @687 (gas: 13)\n 46826: i32 a0 = sp + 0x40\n 46829: a1 = 0x4\n 46832: ecalli 3 // 'call_data_load'\n 46834: a1 = u64 [sp + 0x40]\n 46837: a0 = u64 [sp + 0x48]\n 46840: a2 = u64 [sp + 0x50]\n 46843: a3 = u64 [sp + 0x58]\n 46846: u64 [sp + 0x18] = a3\n 46849: u64 [sp + 0x10] = a2\n 46852: u64 [sp + 0x8] = a0\n 46855: a0 = sp\n 46857: u64 [sp] = a1\n 46859: ra = 578, jump @1232\n      : @688 [@dyn 289] (gas: 3)\n 46866: a0 = 0x40\n 46869: a1 = 0x20\n 46872: ra = 580, jump @0\n      : @689 [@dyn 290] (gas: 100)\n 46879: a1 = u8 [a0 + 0x11]\n 46882: a2 = u8 [a0 + 0x10]\n 46885: a3 = u8 [a0 + 0x12]\n 46888: a4 = u8 [a0 + 0x13]\n 46891: a1 = a1 << 0x8\n 46894: a1 = a1 | a2\n 46897: a3 = a3 << 0x10\n 46900: a4 = a4 << 0x18\n 46903: a3 = a3 | a4\n 46906: a1 = a1 | a3\n 46909: a2 = u8 [a0 + 0x15]\n 46912: a3 = u8 [a0 + 0x14]\n 46915: a4 = u8 [a0 + 0x16]\n 46918: a5 = u8 [a0 + 0x17]\n 46921: a2 = a2 << 0x8\n 46924: a2 = a2 | a3\n 46927: a4 = a4 << 0x10\n 46930: a5 = a5 << 0x18\n 46933: a4 = a4 | a5\n 46936: a2 = a2 | a4\n 46939: a2 = a2 << 0x20\n 46942: t0 = a2 | a1\n 46945: a2 = u8 [a0 + 0x1]\n 46948: a3 = u8 [a0]\n 46950: a4 = u8 [a0 + 0x2]\n 46953: a5 = u8 [a0 + 0x3]\n 46956: a2 = a2 << 0x8\n 46959: a2 = a2 | a3\n 46962: a4 = a4 << 0x10\n 46965: a5 = a5 << 0x18\n 46968: a4 = a4 | a5\n 46971: a2 = a2 | a4\n 46974: a3 = u8 [a0 + 0x5]\n 46977: a4 = u8 [a0 + 0x4]\n 46980: a5 = u8 [a0 + 0x6]\n 46983: a1 = u8 [a0 + 0x7]\n 46986: a3 = a3 << 0x8\n 46989: a3 = a3 | a4\n 46992: a5 = a5 << 0x10\n 46995: a1 = a1 << 0x18\n 46998: a1 = a1 | a5\n 47001: a1 = a1 | a3\n 47004: a1 = a1 << 0x20\n 47007: t1 = a1 | a2\n 47010: a1 = u8 [a0 + 0x19]\n 47013: a3 = u8 [a0 + 0x18]\n 47016: a4 = u8 [a0 + 0x1a]\n 47019: a5 = u8 [a0 + 0x1b]\n 47022: a1 = a1 << 0x8\n 47025: a1 = a1 | a3\n 47028: a4 = a4 << 0x10\n 47031: a5 = a5 << 0x18\n 47034: a4 = a4 | a5\n 47037: a1 = a1 | a4\n 47040: a3 = u8 [a0 + 0x1d]\n 47043: a4 = u8 [a0 + 0x1c]\n 47046: a5 = u8 [a0 + 0x1e]\n 47049: a2 = u8 [a0 + 0x1f]\n 47052: a3 = a3 << 0x8\n 47055: a3 = a3 | a4\n 47058: a5 = a5 << 0x10\n 47061: a2 = a2 << 0x18\n 47064: a2 = a2 | a5\n 47067: a2 = a2 | a3\n 47070: a2 = a2 << 0x20\n 47073: a3 = a2 | a1\n 47076: a1 = u8 [a0 + 0x9]\n 47079: a2 = u8 [a0 + 0x8]\n 47082: a4 = u8 [a0 + 0xa]\n 47085: a5 = u8 [a0 + 0xb]\n 47088: a1 = a1 << 0x8\n 47091: a1 = a1 | a2\n 47094: a4 = a4 << 0x10\n 47097: a5 = a5 << 0x18\n 47100: a4 = a4 | a5\n 47103: a1 = a1 | a4\n 47106: a2 = u8 [a0 + 0xd]\n 47109: a4 = u8 [a0 + 0xc]\n 47112: a5 = u8 [a0 + 0xe]\n 47115: a0 = u8 [a0 + 0xf]\n 47118: a2 = a2 << 0x8\n 47121: a2 = a2 | a4\n 47124: a5 = a5 << 0x10\n 47127: a0 = a0 << 0x18\n 47130: a0 = a0 | a5\n 47133: a0 = a0 | a2\n 47136: a0 = a0 << 0x20\n 47139: a0 = a0 | a1\n 47142: a1 = reverse a0\n 47144: a0 = reverse a3\n 47146: a2 = reverse t1\n 47148: a3 = reverse t0\n 47150: a2 = a2 | a3\n 47153: a3 = a0 | a1\n 47156: a3 = a3 | a2\n 47159: a3 = a3 >> 0x20\n 47162: a1 = a1 | a2\n 47165: a1 = a1 << 0x20\n 47168: a1 = a1 | a3\n 47171: jump @693 if a1 == 0\n      : @690 (gas: 1)\n 47174: trap\n      : @691 (gas: 3)\n 47175: a0 = 0\n 47177: a1 = 0\n 47179: ra = 582, jump @0\n      : @692 [@dyn 291] (gas: 7)\n 47186: i32 a1 = a0 + 0\n 47188: a0 = 0x1\n 47191: a2 = 0\n 47193: ecalli 14 // 'seal_return'\n 47195: i32 a0 = a0 + 0\n 47197: ra = 0x248\n 47201: jump @0\n      : @693 (gas: 2)\n 47205: i32 a0 = a0 + 0\n 47207: ra = 584, jump @0\n      : @694 [@dyn 292] (gas: 6)\n 47214: i32 a1 = a0 + 0\n 47216: a0 = 0\n 47218: a2 = 0\n 47220: ra = 0x24a\n 47224: ecalli 14 // 'seal_return'\n 47226: fallthrough\n      : @695 [@dyn 293] (gas: 42)\n 47227: sp = sp + 0xfffffffffffffee0\n 47231: u64 [sp + 0x118] = ra\n 47235: u64 [sp + 0x110] = s0\n 47239: u64 [sp + 0x108] = s1\n 47243: s0 = sp + 0x120\n 47247: sp = sp & 0xffffffffffffffe0\n 47250: t2 = a1\n 47252: t0 = u64 [a2 + 0x8]\n 47255: ra = u64 [a1 + 0x8]\n 47258: a1 = u64 [a2]\n 47260: s1 = u64 [t2]\n 47262: t1 = u64 [a2 + 0x10]\n 47265: a4 = t0 ^ ra\n 47268: a3 = t0 <u ra\n 47271: a5 = a1 <u s1\n 47274: a3 = a5 if a4 == 0\n 47277: a4 = t0 - ra\n 47280: a4 = a4 - a5\n 47283: u64 [sp + 0x58] = s1\n 47286: u64 [sp + 0x40] = a1\n 47289: a5 = a1 - s1\n 47292: a5 = a5 <u 0x20\n 47295: a5 = a5 ^ 0x1\n 47298: a1 = u64 [t2 + 0x10]\n 47301: s1 = a4 >u 0\n 47303: a5 = s1 if a4 != 0\n 47306: a4 = u64 [a2 + 0x18]\n 47309: s1 = u64 [t2 + 0x18]\n 47312: a2 = t1 - a1\n 47315: t2 = a2 - a3\n 47318: a2 = a2 <u a3\n 47321: a3 = t1 <u a1\n 47324: u64 [sp + 0x30] = a4\n 47327: a4 = a4 - s1\n 47330: a4 = a4 - a3\n 47333: a4 = a4 - a2\n 47336: a2 = a4 >s 0\n 47338: a3 = t2 >u 0\n 47340: a3 = a2 if a4 != 0\n 47343: a2 = t2 | a4\n 47346: a5 = a3 if a2 != 0\n 47349: jump @702 if a5 == 0\n      : @696 (gas: 15)\n 47353: u64 [sp + 0x18] = a0\n 47356: u64 [sp + 0x48] = t1\n 47359: u64 [sp + 0x50] = t0\n 47362: a0 = u64 [sp + 0x58]\n 47365: a0 = a0 | a1\n 47368: u64 [sp + 0x38] = ra\n 47371: u64 [sp + 0x20] = s1\n 47374: a2 = ra | s1\n 47377: a0 = a0 | a2\n 47380: a0 = a0 >> 0x20\n 47383: u64 [sp + 0x28] = a1\n 47386: a1 = a1 | a2\n 47389: a1 = a1 << 0x20\n 47392: a0 = a0 | a1\n 47395: jump @701 if a0 != 0\n      : @697 (gas: 4)\n 47399: a1 = i32 [sp + 0x58]\n 47402: i32 a0 = sp + 0xe0\n 47406: ecalli 3 // 'call_data_load'\n 47408: fallthrough\n      : @698 (gas: 7)\n 47409: t0 = u64 [sp + 0xf8]\n 47413: a1 = u64 [sp + 0xf0]\n 47417: a2 = u64 [sp + 0xe8]\n 47421: a3 = a1 | t0\n 47424: a4 = a2 <u 0x1\n 47427: a4 = 0 if a3 != 0\n 47429: jump @702 if a4 == 0\n      : @699 (gas: 35)\n 47433: a3 = u64 [sp + 0xe0]\n 47437: a4 = u64 [sp + 0x58]\n 47440: a4 = a4 + a3\n 47443: a3 = a4 <u a3\n 47446: a5 = u64 [sp + 0x38]\n 47449: a5 = a5 + a2\n 47452: a5 = a5 + a3\n 47455: a0 = a5 ^ a2\n 47458: a2 = a5 <u a2\n 47461: a2 = a3 if a0 == 0\n 47464: a0 = u64 [sp + 0x28]\n 47467: a0 = a0 + a1\n 47470: a2 = a2 + a0\n 47473: a3 = a2 <u a0\n 47476: a0 = a0 <u a1\n 47479: a1 = u64 [sp + 0x20]\n 47482: t0 = t0 + a1\n 47485: a0 = a0 + t0\n 47488: a3 = a3 + a0\n 47491: a0 = u64 [sp + 0x40]\n 47494: u64 [sp + 0x60] = a0\n 47497: a0 = u64 [sp + 0x50]\n 47500: u64 [sp + 0x68] = a0\n 47503: u64 [sp + 0x80] = a4\n 47507: a0 = u64 [sp + 0x48]\n 47510: u64 [sp + 0x70] = a0\n 47513: a0 = u64 [sp + 0x30]\n 47516: u64 [sp + 0x78] = a0\n 47519: u64 [sp + 0x88] = a5\n 47523: u64 [sp + 0x90] = a2\n 47527: a0 = sp + 0xa0\n 47531: a1 = sp + 0x80\n 47535: a2 = sp + 0x60\n 47538: u64 [sp + 0x98] = a3\n 47542: ra = 588, jump @446\n      : @700 [@dyn 294] (gas: 23)\n 47548: t0 = u64 [sp + 0xa8]\n 47552: t1 = u64 [sp + 0xa0]\n 47556: a2 = u64 [sp + 0xb8]\n 47560: a3 = u64 [sp + 0xb0]\n 47564: a4 = u64 [sp + 0xd0]\n 47568: a5 = u64 [sp + 0xd8]\n 47572: a0 = u64 [sp + 0xc0]\n 47576: a1 = u64 [sp + 0xc8]\n 47580: s1 = u64 [sp + 0x18]\n 47583: u64 [s1 + 0x30] = a4\n 47586: u64 [s1 + 0x38] = a5\n 47589: u64 [s1 + 0x20] = a0\n 47592: u64 [s1 + 0x28] = a1\n 47595: u64 [s1 + 0x10] = a3\n 47598: u64 [s1 + 0x18] = a2\n 47601: u64 [s1] = t1\n 47603: u64 [s1 + 0x8] = t0\n 47606: sp = s0 + 0xfffffffffffffee0\n 47610: ra = u64 [sp + 0x118]\n 47614: s0 = u64 [sp + 0x110]\n 47618: s1 = u64 [sp + 0x108]\n 47622: sp = sp + 0x120\n 47626: ret\n      : @701 (gas: 1)\n 47628: trap\n      : @702 (gas: 3)\n 47629: a0 = 0\n 47631: a1 = 0\n 47633: ra = 590, jump @0\n      : @703 [@dyn 295] (gas: 6)\n 47640: i32 a1 = a0 + 0\n 47642: a0 = 0x1\n 47645: a2 = 0\n 47647: ra = 0x250\n 47651: ecalli 14 // 'seal_return'\n 47653: fallthrough\n      : @704 [@dyn 296] (gas: 12)\n 47654: sp = sp + 0xffffffffffffff00\n 47658: u64 [sp + 0xf8] = ra\n 47662: u64 [sp + 0xf0] = s0\n 47666: s0 = sp + 0x100\n 47670: sp = sp & 0xffffffffffffffe0\n 47673: u64 [sp + 216] = 0\n 47677: u64 [sp + 208] = 0\n 47681: u64 [sp + 200] = 0\n 47685: u64 [sp + 192] = 0\n 47689: i32 a0 = sp + 0xc0\n 47693: ecalli 17 // 'value_transferred'\n 47695: fallthrough\n      : @705 (gas: 8)\n 47696: a0 = u64 [sp + 0xd0]\n 47700: a1 = u64 [sp + 0xd8]\n 47704: a2 = u64 [sp + 0xc8]\n 47708: a3 = u64 [sp + 0xc0]\n 47712: a1 = a1 | a2\n 47715: a0 = a0 | a3\n 47718: a0 = a0 | a1\n 47721: jump @711 if a0 != 0\n      : @706 (gas: 13)\n 47725: a0 = u32 [0x20078]\n 47730: u64 [sp + 88] = 0\n 47733: u64 [sp + 80] = 0\n 47736: u64 [sp + 72] = 0\n 47739: u64 [sp + 0x40] = a0\n 47742: u64 [sp + 120] = 0\n 47745: u64 [sp + 112] = 0\n 47748: u64 [sp + 96] = 0x4\n 47752: a0 = sp + 0x80\n 47756: a1 = sp + 0x60\n 47759: a2 = sp + 0x40\n 47762: u64 [sp + 104] = 0\n 47765: ra = 594, jump @695\n      : @707 [@dyn 297] (gas: 19)\n 47771: t0 = u64 [sp + 0x80]\n 47775: t1 = u64 [sp + 0x88]\n 47779: a1 = u64 [sp + 0x90]\n 47783: a3 = u64 [sp + 0x98]\n 47787: a4 = u64 [sp + 0xa0]\n 47791: a5 = u64 [sp + 0xa8]\n 47795: a2 = u64 [sp + 0xb0]\n 47799: a0 = u64 [sp + 0xb8]\n 47803: u64 [sp + 0x18] = a0\n 47806: u64 [sp + 0x10] = a2\n 47809: u64 [sp + 0x8] = a5\n 47812: u64 [sp] = a4\n 47814: u64 [sp + 0x38] = a3\n 47817: u64 [sp + 0x30] = a1\n 47820: u64 [sp + 0x28] = t1\n 47823: a0 = sp + 0x20\n 47826: a1 = sp\n 47828: u64 [sp + 0x20] = t0\n 47831: ra = 596, jump @1284\n      : @708 [@dyn 298] (gas: 3)\n 47838: a0 = 0x40\n 47841: a1 = 0x20\n 47844: ra = 598, jump @0\n      : @709 [@dyn 299] (gas: 100)\n 47851: a1 = u8 [a0 + 0x11]\n 47854: a2 = u8 [a0 + 0x10]\n 47857: a3 = u8 [a0 + 0x12]\n 47860: a4 = u8 [a0 + 0x13]\n 47863: a1 = a1 << 0x8\n 47866: a1 = a1 | a2\n 47869: a3 = a3 << 0x10\n 47872: a4 = a4 << 0x18\n 47875: a3 = a3 | a4\n 47878: a1 = a1 | a3\n 47881: a2 = u8 [a0 + 0x15]\n 47884: a3 = u8 [a0 + 0x14]\n 47887: a4 = u8 [a0 + 0x16]\n 47890: a5 = u8 [a0 + 0x17]\n 47893: a2 = a2 << 0x8\n 47896: a2 = a2 | a3\n 47899: a4 = a4 << 0x10\n 47902: a5 = a5 << 0x18\n 47905: a4 = a4 | a5\n 47908: a2 = a2 | a4\n 47911: a2 = a2 << 0x20\n 47914: t0 = a2 | a1\n 47917: a2 = u8 [a0 + 0x1]\n 47920: a3 = u8 [a0]\n 47922: a4 = u8 [a0 + 0x2]\n 47925: a5 = u8 [a0 + 0x3]\n 47928: a2 = a2 << 0x8\n 47931: a2 = a2 | a3\n 47934: a4 = a4 << 0x10\n 47937: a5 = a5 << 0x18\n 47940: a4 = a4 | a5\n 47943: a2 = a2 | a4\n 47946: a3 = u8 [a0 + 0x5]\n 47949: a4 = u8 [a0 + 0x4]\n 47952: a5 = u8 [a0 + 0x6]\n 47955: a1 = u8 [a0 + 0x7]\n 47958: a3 = a3 << 0x8\n 47961: a3 = a3 | a4\n 47964: a5 = a5 << 0x10\n 47967: a1 = a1 << 0x18\n 47970: a1 = a1 | a5\n 47973: a1 = a1 | a3\n 47976: a1 = a1 << 0x20\n 47979: t1 = a1 | a2\n 47982: a1 = u8 [a0 + 0x19]\n 47985: a3 = u8 [a0 + 0x18]\n 47988: a4 = u8 [a0 + 0x1a]\n 47991: a5 = u8 [a0 + 0x1b]\n 47994: a1 = a1 << 0x8\n 47997: a1 = a1 | a3\n 48000: a4 = a4 << 0x10\n 48003: a5 = a5 << 0x18\n 48006: a4 = a4 | a5\n 48009: a1 = a1 | a4\n 48012: a3 = u8 [a0 + 0x1d]\n 48015: a4 = u8 [a0 + 0x1c]\n 48018: a5 = u8 [a0 + 0x1e]\n 48021: a2 = u8 [a0 + 0x1f]\n 48024: a3 = a3 << 0x8\n 48027: a3 = a3 | a4\n 48030: a5 = a5 << 0x10\n 48033: a2 = a2 << 0x18\n 48036: a2 = a2 | a5\n 48039: a2 = a2 | a3\n 48042: a2 = a2 << 0x20\n 48045: a3 = a2 | a1\n 48048: a1 = u8 [a0 + 0x9]\n 48051: a2 = u8 [a0 + 0x8]\n 48054: a4 = u8 [a0 + 0xa]\n 48057: a5 = u8 [a0 + 0xb]\n 48060: a1 = a1 << 0x8\n 48063: a1 = a1 | a2\n 48066: a4 = a4 << 0x10\n 48069: a5 = a5 << 0x18\n 48072: a4 = a4 | a5\n 48075: a1 = a1 | a4\n 48078: a2 = u8 [a0 + 0xd]\n 48081: a4 = u8 [a0 + 0xc]\n 48084: a5 = u8 [a0 + 0xe]\n 48087: a0 = u8 [a0 + 0xf]\n 48090: a2 = a2 << 0x8\n 48093: a2 = a2 | a4\n 48096: a5 = a5 << 0x10\n 48099: a0 = a0 << 0x18\n 48102: a0 = a0 | a5\n 48105: a0 = a0 | a2\n 48108: a0 = a0 << 0x20\n 48111: a0 = a0 | a1\n 48114: a1 = reverse a0\n 48116: a0 = reverse a3\n 48118: a2 = reverse t1\n 48120: a3 = reverse t0\n 48122: a2 = a2 | a3\n 48125: a3 = a0 | a1\n 48128: a3 = a3 | a2\n 48131: a3 = a3 >> 0x20\n 48134: a1 = a1 | a2\n 48137: a1 = a1 << 0x20\n 48140: a1 = a1 | a3\n 48143: jump @713 if a1 == 0\n      : @710 (gas: 1)\n 48146: trap\n      : @711 (gas: 3)\n 48147: a0 = 0\n 48149: a1 = 0\n 48151: ra = 600, jump @0\n      : @712 [@dyn 300] (gas: 7)\n 48158: i32 a1 = a0 + 0\n 48160: a0 = 0x1\n 48163: a2 = 0\n 48165: ecalli 14 // 'seal_return'\n 48167: i32 a0 = a0 + 0\n 48169: ra = 0x25a\n 48173: jump @0\n      : @713 (gas: 2)\n 48177: i32 a0 = a0 + 0\n 48179: ra = 602, jump @0\n      : @714 [@dyn 301] (gas: 6)\n 48186: i32 a1 = a0 + 0\n 48188: a0 = 0\n 48190: a2 = 0\n 48192: ra = 0x25c\n 48196: ecalli 14 // 'seal_return'\n 48198: fallthrough\n      : @715 [@dyn 302] (gas: 12)\n 48199: sp = sp + 0xffffffffffffff00\n 48203: u64 [sp + 0xf8] = ra\n 48207: u64 [sp + 0xf0] = s0\n 48211: s0 = sp + 0x100\n 48215: sp = sp & 0xffffffffffffffe0\n 48218: u64 [sp + 216] = 0\n 48222: u64 [sp + 208] = 0\n 48226: u64 [sp + 200] = 0\n 48230: u64 [sp + 192] = 0\n 48234: i32 a0 = sp + 0xc0\n 48238: ecalli 17 // 'value_transferred'\n 48240: fallthrough\n      : @716 (gas: 8)\n 48241: a0 = u64 [sp + 0xd0]\n 48245: a1 = u64 [sp + 0xd8]\n 48249: a2 = u64 [sp + 0xc8]\n 48253: a3 = u64 [sp + 0xc0]\n 48257: a1 = a1 | a2\n 48260: a0 = a0 | a3\n 48263: a0 = a0 | a1\n 48266: jump @722 if a0 != 0\n      : @717 (gas: 13)\n 48270: a0 = u32 [0x20078]\n 48275: u64 [sp + 88] = 0\n 48278: u64 [sp + 80] = 0\n 48281: u64 [sp + 72] = 0\n 48284: u64 [sp + 0x40] = a0\n 48287: u64 [sp + 120] = 0\n 48290: u64 [sp + 112] = 0\n 48293: u64 [sp + 96] = 0x4\n 48297: a0 = sp + 0x80\n 48301: a1 = sp + 0x60\n 48304: a2 = sp + 0x40\n 48307: u64 [sp + 104] = 0\n 48310: ra = 606, jump @695\n      : @718 [@dyn 303] (gas: 44)\n 48316: t0 = u64 [sp + 0x80]\n 48320: t1 = u64 [sp + 0x88]\n 48324: a1 = u64 [sp + 0x90]\n 48328: a3 = u64 [sp + 0x98]\n 48332: a4 = u64 [sp + 0xa0]\n 48336: a5 = u64 [sp + 0xa8]\n 48340: a2 = u64 [sp + 0xb0]\n 48344: a0 = u64 [sp + 0xb8]\n 48348: u64 [sp + 0x18] = a0\n 48351: u64 [sp + 0x10] = a2\n 48354: u64 [sp + 0x8] = a5\n 48357: u64 [sp] = a4\n 48359: u64 [sp + 0x38] = a3\n 48362: u64 [sp + 0x30] = a1\n 48365: u64 [sp + 0x28] = t1\n 48368: a0 = sp + 0x20\n 48371: a1 = sp\n 48373: u64 [sp + 0x20] = t0\n 48376: ra = 0x260\n 48380: sp = sp + 0xfffffffffffffec0\n 48384: u64 [sp + 0x138] = ra\n 48388: u64 [sp + 0x130] = s0\n 48392: u64 [sp + 0x128] = s1\n 48396: s0 = sp + 0x140\n 48400: sp = sp & 0xffffffffffffffe0\n 48403: a2 = u64 [a1 + 0x18]\n 48406: u64 [sp + 0x50] = a2\n 48409: a2 = u64 [a1 + 0x10]\n 48412: u64 [sp + 0x48] = a2\n 48415: a2 = u64 [a1 + 0x8]\n 48418: u64 [sp + 0x38] = a2\n 48421: a1 = u64 [a1]\n 48423: u64 [sp + 0x28] = a1\n 48426: a1 = u64 [a0 + 0x18]\n 48429: u64 [sp + 0x58] = a1\n 48432: a1 = u64 [a0 + 0x10]\n 48435: u64 [sp + 0x40] = a1\n 48438: a1 = u64 [a0 + 0x8]\n 48441: u64 [sp + 0x30] = a1\n 48444: a0 = u64 [a0]\n 48446: u64 [sp + 0x20] = a0\n 48449: i32 a0 = sp + 0x100\n 48453: ecalli 5 // 'caller'\n 48455: jump @1347\n      : @719 [@dyn 304] (gas: 3)\n 48459: a0 = 0x40\n 48462: a1 = 0x20\n 48465: ra = 610, jump @0\n      : @720 [@dyn 305] (gas: 100)\n 48472: a1 = u8 [a0 + 0x11]\n 48475: a2 = u8 [a0 + 0x10]\n 48478: a3 = u8 [a0 + 0x12]\n 48481: a4 = u8 [a0 + 0x13]\n 48484: a1 = a1 << 0x8\n 48487: a1 = a1 | a2\n 48490: a3 = a3 << 0x10\n 48493: a4 = a4 << 0x18\n 48496: a3 = a3 | a4\n 48499: a1 = a1 | a3\n 48502: a2 = u8 [a0 + 0x15]\n 48505: a3 = u8 [a0 + 0x14]\n 48508: a4 = u8 [a0 + 0x16]\n 48511: a5 = u8 [a0 + 0x17]\n 48514: a2 = a2 << 0x8\n 48517: a2 = a2 | a3\n 48520: a4 = a4 << 0x10\n 48523: a5 = a5 << 0x18\n 48526: a4 = a4 | a5\n 48529: a2 = a2 | a4\n 48532: a2 = a2 << 0x20\n 48535: t0 = a2 | a1\n 48538: a2 = u8 [a0 + 0x1]\n 48541: a3 = u8 [a0]\n 48543: a4 = u8 [a0 + 0x2]\n 48546: a5 = u8 [a0 + 0x3]\n 48549: a2 = a2 << 0x8\n 48552: a2 = a2 | a3\n 48555: a4 = a4 << 0x10\n 48558: a5 = a5 << 0x18\n 48561: a4 = a4 | a5\n 48564: a2 = a2 | a4\n 48567: a3 = u8 [a0 + 0x5]\n 48570: a4 = u8 [a0 + 0x4]\n 48573: a5 = u8 [a0 + 0x6]\n 48576: a1 = u8 [a0 + 0x7]\n 48579: a3 = a3 << 0x8\n 48582: a3 = a3 | a4\n 48585: a5 = a5 << 0x10\n 48588: a1 = a1 << 0x18\n 48591: a1 = a1 | a5\n 48594: a1 = a1 | a3\n 48597: a1 = a1 << 0x20\n 48600: t1 = a1 | a2\n 48603: a1 = u8 [a0 + 0x19]\n 48606: a3 = u8 [a0 + 0x18]\n 48609: a4 = u8 [a0 + 0x1a]\n 48612: a5 = u8 [a0 + 0x1b]\n 48615: a1 = a1 << 0x8\n 48618: a1 = a1 | a3\n 48621: a4 = a4 << 0x10\n 48624: a5 = a5 << 0x18\n 48627: a4 = a4 | a5\n 48630: a1 = a1 | a4\n 48633: a3 = u8 [a0 + 0x1d]\n 48636: a4 = u8 [a0 + 0x1c]\n 48639: a5 = u8 [a0 + 0x1e]\n 48642: a2 = u8 [a0 + 0x1f]\n 48645: a3 = a3 << 0x8\n 48648: a3 = a3 | a4\n 48651: a5 = a5 << 0x10\n 48654: a2 = a2 << 0x18\n 48657: a2 = a2 | a5\n 48660: a2 = a2 | a3\n 48663: a2 = a2 << 0x20\n 48666: a3 = a2 | a1\n 48669: a1 = u8 [a0 + 0x9]\n 48672: a2 = u8 [a0 + 0x8]\n 48675: a4 = u8 [a0 + 0xa]\n 48678: a5 = u8 [a0 + 0xb]\n 48681: a1 = a1 << 0x8\n 48684: a1 = a1 | a2\n 48687: a4 = a4 << 0x10\n 48690: a5 = a5 << 0x18\n 48693: a4 = a4 | a5\n 48696: a1 = a1 | a4\n 48699: a2 = u8 [a0 + 0xd]\n 48702: a4 = u8 [a0 + 0xc]\n 48705: a5 = u8 [a0 + 0xe]\n 48708: a0 = u8 [a0 + 0xf]\n 48711: a2 = a2 << 0x8\n 48714: a2 = a2 | a4\n 48717: a5 = a5 << 0x10\n 48720: a0 = a0 << 0x18\n 48723: a0 = a0 | a5\n 48726: a0 = a0 | a2\n 48729: a0 = a0 << 0x20\n 48732: a0 = a0 | a1\n 48735: a1 = reverse a0\n 48737: a0 = reverse a3\n 48739: a2 = reverse t1\n 48741: a3 = reverse t0\n 48743: a2 = a2 | a3\n 48746: a3 = a0 | a1\n 48749: a3 = a3 | a2\n 48752: a3 = a3 >> 0x20\n 48755: a1 = a1 | a2\n 48758: a1 = a1 << 0x20\n 48761: a1 = a1 | a3\n 48764: jump @724 if a1 == 0\n      : @721 (gas: 1)\n 48767: trap\n      : @722 (gas: 3)\n 48768: a0 = 0\n 48770: a1 = 0\n 48772: ra = 612, jump @0\n      : @723 [@dyn 306] (gas: 7)\n 48779: i32 a1 = a0 + 0\n 48781: a0 = 0x1\n 48784: a2 = 0\n 48786: ecalli 14 // 'seal_return'\n 48788: i32 a0 = a0 + 0\n 48790: ra = 0x266\n 48794: jump @0\n      : @724 (gas: 2)\n 48798: i32 a0 = a0 + 0\n 48800: ra = 614, jump @0\n      : @725 [@dyn 307] (gas: 6)\n 48807: i32 a1 = a0 + 0\n 48809: a0 = 0\n 48811: a2 = 0\n 48813: ra = 0x268\n 48817: ecalli 14 // 'seal_return'\n 48819: fallthrough\n      : @726 [@dyn 308] (gas: 194)\n 48820: sp = sp + 0xffffffffffffffa0\n 48823: u64 [sp + 0x58] = ra\n 48826: u64 [sp + 0x50] = s0\n 48829: u64 [sp + 0x48] = s1\n 48832: u64 [sp] = a0\n 48834: t1 = u64 [a1]\n 48836: ra = u64 [a1 + 0x8]\n 48839: a4 = u64 [a1 + 0x10]\n 48842: a1 = u64 [a1 + 0x18]\n 48845: t0 = u64 [a2]\n 48847: a3 = u64 [a2 + 0x8]\n 48850: t2 = u64 [a2 + 0x18]\n 48853: a2 = u64 [a2 + 0x10]\n 48856: s0 = t0 >> 0x3d\n 48859: s1 = a3 << 0x3\n 48862: s0 = s0 | s1\n 48865: a3 = a3 >> 0x3d\n 48868: s1 = a2 << 0x3\n 48871: a3 = a3 | s1\n 48874: a2 = a2 >> 0x3d\n 48877: t2 = t2 << 0x3\n 48880: s1 = t2 | a2\n 48883: t2 = t0 << 0x3\n 48886: a2 = s1 >u 0\n 48888: a5 = a3 >u 0\n 48890: a5 = a2 if s1 != 0\n 48893: a0 = s0 >u 0\n 48895: a2 = t2 <u 0x100\n 48899: t2 = a2 ^ 0x1\n 48902: t2 = a0 if s0 != 0\n 48905: a3 = a3 | s1\n 48908: t2 = a5 if a3 != 0\n 48911: u8 [sp + 71] = 0\n 48914: u8 [sp + 70] = 0\n 48917: u8 [sp + 69] = 0\n 48920: u8 [sp + 68] = 0\n 48923: u8 [sp + 67] = 0\n 48926: u8 [sp + 66] = 0\n 48929: u8 [sp + 65] = 0\n 48932: u8 [sp + 64] = 0\n 48935: u8 [sp + 63] = 0\n 48938: u8 [sp + 62] = 0\n 48941: u8 [sp + 61] = 0\n 48944: u8 [sp + 60] = 0\n 48947: u8 [sp + 59] = 0\n 48950: u8 [sp + 58] = 0\n 48953: u8 [sp + 57] = 0\n 48956: u8 [sp + 56] = 0\n 48959: u8 [sp + 55] = 0\n 48962: u8 [sp + 54] = 0\n 48965: u8 [sp + 53] = 0\n 48968: u8 [sp + 52] = 0\n 48971: u8 [sp + 51] = 0\n 48974: u8 [sp + 50] = 0\n 48977: u8 [sp + 49] = 0\n 48980: u8 [sp + 48] = 0\n 48983: u8 [sp + 47] = 0\n 48986: u8 [sp + 46] = 0\n 48989: u8 [sp + 45] = 0\n 48992: u8 [sp + 44] = 0\n 48995: u8 [sp + 43] = 0\n 48998: u8 [sp + 42] = 0\n 49001: u8 [sp + 41] = 0\n 49004: u8 [sp + 40] = 0\n 49007: u8 [sp + 0x20] = a1\n 49010: u8 [sp + 0x18] = a4\n 49013: u8 [sp + 0x10] = ra\n 49016: u8 [sp + 0x8] = t1\n 49019: a0 = a1 >> 0x38\n 49022: u8 [sp + 0x27] = a0\n 49025: a0 = a1 >> 0x30\n 49028: u8 [sp + 0x26] = a0\n 49031: a0 = a1 >> 0x28\n 49034: u8 [sp + 0x25] = a0\n 49037: a0 = a1 >> 0x20\n 49040: u8 [sp + 0x24] = a0\n 49043: a0 = a1 >> 0x18\n 49046: u8 [sp + 0x23] = a0\n 49049: a0 = a1 >> 0x10\n 49052: u8 [sp + 0x22] = a0\n 49055: a1 = a1 >> 0x8\n 49058: u8 [sp + 0x21] = a1\n 49061: a0 = a4 >> 0x38\n 49064: u8 [sp + 0x1f] = a0\n 49067: a0 = a4 >> 0x30\n 49070: u8 [sp + 0x1e] = a0\n 49073: a0 = a4 >> 0x28\n 49076: u8 [sp + 0x1d] = a0\n 49079: a0 = a4 >> 0x20\n 49082: u8 [sp + 0x1c] = a0\n 49085: a0 = a4 >> 0x18\n 49088: u8 [sp + 0x1b] = a0\n 49091: a0 = a4 >> 0x10\n 49094: u8 [sp + 0x1a] = a0\n 49097: a4 = a4 >> 0x8\n 49100: u8 [sp + 0x19] = a4\n 49103: a0 = ra >> 0x38\n 49106: u8 [sp + 0x17] = a0\n 49109: a0 = ra >> 0x30\n 49112: u8 [sp + 0x16] = a0\n 49115: a0 = ra >> 0x28\n 49118: u8 [sp + 0x15] = a0\n 49121: a0 = ra >> 0x20\n 49124: u8 [sp + 0x14] = a0\n 49127: a0 = ra >> 0x18\n 49130: u8 [sp + 0x13] = a0\n 49133: a0 = ra >> 0x10\n 49136: u8 [sp + 0x12] = a0\n 49139: a0 = ra >> 0x8\n 49142: u8 [sp + 0x11] = a0\n 49145: a0 = t1 >> 0x38\n 49148: u8 [sp + 0xf] = a0\n 49151: a0 = t1 >> 0x30\n 49154: u8 [sp + 0xe] = a0\n 49157: a0 = t1 >> 0x28\n 49160: u8 [sp + 0xd] = a0\n 49163: a0 = t1 >> 0x20\n 49166: u8 [sp + 0xc] = a0\n 49169: a0 = t1 >> 0x18\n 49172: u8 [sp + 0xb] = a0\n 49175: a0 = t1 >> 0x10\n 49178: u8 [sp + 0xa] = a0\n 49181: a0 = t1 >> 0x8\n 49184: u8 [sp + 0x9] = a0\n 49187: a1 = t0 & 0x1f\n 49190: a0 = sp + 0x8\n 49193: a1 = a1 + a0\n 49196: a0 = u8 [a1 + 0x9]\n 49199: a2 = u8 [a1 + 0x8]\n 49202: a3 = u8 [a1 + 0xa]\n 49205: a4 = u8 [a1 + 0xb]\n 49208: a0 = a0 << 0x8\n 49211: a0 = a0 | a2\n 49214: a3 = a3 << 0x10\n 49217: a4 = a4 << 0x18\n 49220: a3 = a3 | a4\n 49223: a0 = a0 | a3\n 49226: a2 = u8 [a1 + 0xd]\n 49229: a3 = u8 [a1 + 0xc]\n 49232: a4 = u8 [a1 + 0xe]\n 49235: a5 = u8 [a1 + 0xf]\n 49238: a2 = a2 << 0x8\n 49241: a2 = a2 | a3\n 49244: a4 = a4 << 0x10\n 49247: a5 = a5 << 0x18\n 49250: a4 = a4 | a5\n 49253: a2 = a2 | a4\n 49256: a2 = a2 << 0x20\n 49259: a3 = a2 | a0\n 49262: a0 = u8 [a1 + 0x1]\n 49265: a2 = u8 [a1]\n 49267: a4 = u8 [a1 + 0x2]\n 49270: a5 = u8 [a1 + 0x3]\n 49273: a0 = a0 << 0x8\n 49276: a0 = a0 | a2\n 49279: a4 = a4 << 0x10\n 49282: a5 = a5 << 0x18\n 49285: a4 = a4 | a5\n 49288: a0 = a0 | a4\n 49291: a2 = u8 [a1 + 0x5]\n 49294: a4 = u8 [a1 + 0x4]\n 49297: a5 = u8 [a1 + 0x6]\n 49300: s1 = u8 [a1 + 0x7]\n 49303: a2 = a2 << 0x8\n 49306: a2 = a2 | a4\n 49309: a5 = a5 << 0x10\n 49312: s1 = s1 << 0x18\n 49315: a5 = a5 | s1\n 49318: a2 = a2 | a5\n 49321: a2 = a2 << 0x20\n 49324: a0 = a0 | a2\n 49327: a2 = u8 [a1 + 0x11]\n 49330: a4 = u8 [a1 + 0x10]\n 49333: a5 = u8 [a1 + 0x12]\n 49336: a1 = u8 [a1 + 0x13]\n 49339: a2 = a2 << 0x8\n 49342: a2 = a2 | a4\n 49345: a5 = a5 << 0x10\n 49348: a1 = a1 << 0x18\n 49351: a1 = a1 | a5\n 49354: a1 = a1 | a2\n 49357: a0 = 0 if t2 != 0\n 49359: a3 = 0 if t2 != 0\n 49361: a1 = 0 if t2 != 0\n 49363: a2 = u64 [sp]\n 49365: u64 [a2 + 24] = 0\n 49368: u64 [a2 + 0x10] = a1\n 49371: u64 [a2 + 0x8] = a3\n 49374: u64 [a2] = a0\n 49376: ra = u64 [sp + 0x58]\n 49379: s0 = u64 [sp + 0x50]\n 49382: s1 = u64 [sp + 0x48]\n 49385: sp = sp + 0x60\n 49388: ret\n      : @727 (gas: 8)\n 49390: a0 = u64 [sp + 0x30]\n 49393: a1 = u64 [sp + 0x38]\n 49396: a2 = u64 [sp + 0x28]\n 49399: a3 = u64 [sp + 0x20]\n 49402: a1 = a1 | a2\n 49405: a0 = a0 | a3\n 49408: a0 = a0 | a1\n 49411: jump @732 if a0 != 0\n      : @728 (gas: 2)\n 49415: a0 = i32 [0x20078]\n 49420: jump @732 if a0 <=u 3\n      : @729 (gas: 24)\n 49425: u64 [sp + 88] = 0\n 49428: u64 [sp + 80] = 0\n 49431: u64 [sp + 72] = 0\n 49434: u64 [sp + 64] = 0x2\n 49438: u64 [sp + 120] = 0\n 49441: u64 [sp + 112] = 0\n 49444: u64 [sp + 104] = 0\n 49447: u64 [sp + 96] = 0\n 49450: u32 [sp + 128] = 0x20\n 49455: i32 a1 = sp + 0x40\n 49458: i32 a3 = sp + 0x60\n 49461: i32 a4 = sp + 0x80\n 49465: a2 = 0xffffffffffffffff\n 49468: a0 = 0\n 49470: ecalli 8 // 'get_storage'\n 49472: a0 = u64 [sp + 0x70]\n 49475: u64 [sp + 0x8] = a0\n 49478: a0 = u64 [sp + 0x68]\n 49481: u64 [sp + 0x10] = a0\n 49484: a0 = u64 [sp + 0x60]\n 49487: u64 [sp + 0x18] = a0\n 49490: a0 = 0x40\n 49493: a1 = 0x20\n 49496: ra = 618, jump @0\n      : @730 [@dyn 309] (gas: 100)\n 49503: a1 = u8 [a0 + 0x11]\n 49506: a2 = u8 [a0 + 0x10]\n 49509: a3 = u8 [a0 + 0x12]\n 49512: a4 = u8 [a0 + 0x13]\n 49515: a1 = a1 << 0x8\n 49518: a1 = a1 | a2\n 49521: a3 = a3 << 0x10\n 49524: a4 = a4 << 0x18\n 49527: a3 = a3 | a4\n 49530: a1 = a1 | a3\n 49533: a2 = u8 [a0 + 0x15]\n 49536: a3 = u8 [a0 + 0x14]\n 49539: a4 = u8 [a0 + 0x16]\n 49542: a5 = u8 [a0 + 0x17]\n 49545: a2 = a2 << 0x8\n 49548: a2 = a2 | a3\n 49551: a4 = a4 << 0x10\n 49554: a5 = a5 << 0x18\n 49557: a4 = a4 | a5\n 49560: a2 = a2 | a4\n 49563: a2 = a2 << 0x20\n 49566: t0 = a2 | a1\n 49569: a2 = u8 [a0 + 0x1]\n 49572: a3 = u8 [a0]\n 49574: a4 = u8 [a0 + 0x2]\n 49577: a5 = u8 [a0 + 0x3]\n 49580: a2 = a2 << 0x8\n 49583: a2 = a2 | a3\n 49586: a4 = a4 << 0x10\n 49589: a5 = a5 << 0x18\n 49592: a4 = a4 | a5\n 49595: a2 = a2 | a4\n 49598: a3 = u8 [a0 + 0x5]\n 49601: a4 = u8 [a0 + 0x4]\n 49604: a5 = u8 [a0 + 0x6]\n 49607: s1 = u8 [a0 + 0x7]\n 49610: a3 = a3 << 0x8\n 49613: a3 = a3 | a4\n 49616: a5 = a5 << 0x10\n 49619: s1 = s1 << 0x18\n 49622: a5 = a5 | s1\n 49625: a3 = a3 | a5\n 49628: a3 = a3 << 0x20\n 49631: a2 = a2 | a3\n 49634: a3 = u8 [a0 + 0x19]\n 49637: a4 = u8 [a0 + 0x18]\n 49640: a5 = u8 [a0 + 0x1a]\n 49643: s1 = u8 [a0 + 0x1b]\n 49646: a3 = a3 << 0x8\n 49649: a3 = a3 | a4\n 49652: a5 = a5 << 0x10\n 49655: s1 = s1 << 0x18\n 49658: a5 = a5 | s1\n 49661: a3 = a3 | a5\n 49664: a4 = u8 [a0 + 0x1d]\n 49667: a5 = u8 [a0 + 0x1c]\n 49670: s1 = u8 [a0 + 0x1e]\n 49673: a1 = u8 [a0 + 0x1f]\n 49676: a4 = a4 << 0x8\n 49679: a4 = a4 | a5\n 49682: s1 = s1 << 0x10\n 49685: a1 = a1 << 0x18\n 49688: a1 = a1 | s1\n 49691: a1 = a1 | a4\n 49694: a1 = a1 << 0x20\n 49697: a3 = a3 | a1\n 49700: a1 = u8 [a0 + 0x9]\n 49703: a4 = u8 [a0 + 0x8]\n 49706: a5 = u8 [a0 + 0xa]\n 49709: s1 = u8 [a0 + 0xb]\n 49712: a1 = a1 << 0x8\n 49715: a1 = a1 | a4\n 49718: a5 = a5 << 0x10\n 49721: s1 = s1 << 0x18\n 49724: a5 = a5 | s1\n 49727: a1 = a1 | a5\n 49730: a4 = u8 [a0 + 0xd]\n 49733: a5 = u8 [a0 + 0xc]\n 49736: s1 = u8 [a0 + 0xe]\n 49739: a0 = u8 [a0 + 0xf]\n 49742: a4 = a4 << 0x8\n 49745: a4 = a4 | a5\n 49748: s1 = s1 << 0x10\n 49751: a0 = a0 << 0x18\n 49754: a0 = a0 | s1\n 49757: a0 = a0 | a4\n 49760: a0 = a0 << 0x20\n 49763: a0 = a0 | a1\n 49766: a1 = reverse a0\n 49768: a0 = reverse a3\n 49770: a2 = reverse a2\n 49772: a3 = reverse t0\n 49774: a2 = a2 | a3\n 49777: a3 = a0 | a1\n 49780: a3 = a3 | a2\n 49783: a3 = a3 >> 0x20\n 49786: a1 = a1 | a2\n 49789: a1 = a1 << 0x20\n 49792: a1 = a1 | a3\n 49795: jump @734 if a1 == 0\n      : @731 (gas: 1)\n 49798: trap\n      : @732 (gas: 3)\n 49799: a0 = 0\n 49801: a1 = 0\n 49803: ra = 620, jump @0\n      : @733 [@dyn 310] (gas: 5)\n 49810: i32 a1 = a0 + 0\n 49812: a0 = 0x1\n 49815: a2 = 0\n 49817: ecalli 14 // 'seal_return'\n 49819: fallthrough\n      : @734 (gas: 7)\n 49820: a1 = u64 [sp + 0x8]\n 49823: a1 = a1 << 0x20\n 49826: s1 = a1 >> 0x20\n 49829: i32 a0 = a0 + 0\n 49831: u64 [sp + 0x8] = a0\n 49834: a1 = 0x20\n 49837: ra = 622, jump @0\n      : @735 [@dyn 311] (gas: 58)\n 49844: a1 = reverse s1\n 49846: a2 = u64 [sp + 0x10]\n 49849: a2 = reverse a2\n 49851: a3 = u64 [sp + 0x18]\n 49854: a3 = reverse a3\n 49856: a4 = a3 >> 0x38\n 49859: u8 [a0 + 0x1f] = a4\n 49862: a4 = a3 >> 0x30\n 49865: u8 [a0 + 0x1e] = a4\n 49868: a4 = a3 >> 0x28\n 49871: u8 [a0 + 0x1d] = a4\n 49874: a4 = a3 >> 0x20\n 49877: u8 [a0 + 0x1c] = a4\n 49880: a4 = a3 >> 0x18\n 49883: u8 [a0 + 0x1b] = a4\n 49886: a4 = a3 >> 0x10\n 49889: u8 [a0 + 0x1a] = a4\n 49892: a4 = a3 >> 0x8\n 49895: u8 [a0 + 0x19] = a4\n 49898: u8 [a0 + 0x18] = a3\n 49901: u8 [a0 + 0x10] = a2\n 49904: u8 [a0 + 11] = 0\n 49907: u8 [a0 + 10] = 0\n 49910: u8 [a0 + 9] = 0\n 49913: u8 [a0 + 7] = 0\n 49916: u8 [a0 + 6] = 0\n 49919: u8 [a0 + 5] = 0\n 49922: u8 [a0 + 4] = 0\n 49925: u8 [a0 + 3] = 0\n 49928: u8 [a0 + 2] = 0\n 49931: u8 [a0 + 1] = 0\n 49934: u8 [a0 + 0] = 0\n 49936: a3 = a2 >> 0x38\n 49939: u8 [a0 + 0x17] = a3\n 49942: a3 = a2 >> 0x30\n 49945: u8 [a0 + 0x16] = a3\n 49948: a3 = a2 >> 0x28\n 49951: u8 [a0 + 0x15] = a3\n 49954: a3 = a2 >> 0x20\n 49957: u8 [a0 + 0x14] = a3\n 49960: a3 = a2 >> 0x18\n 49963: u8 [a0 + 0x13] = a3\n 49966: a3 = a2 >> 0x10\n 49969: u8 [a0 + 0x12] = a3\n 49972: a2 = a2 >> 0x8\n 49975: u8 [a0 + 0x11] = a2\n 49978: u8 [a0 + 0x8] = a1\n 49981: a2 = a1 >> 0x38\n 49984: u8 [a0 + 0xf] = a2\n 49987: a2 = a1 >> 0x30\n 49990: u8 [a0 + 0xe] = a2\n 49993: a2 = a1 >> 0x28\n 49996: u8 [a0 + 0xd] = a2\n 49999: a1 = a1 >> 0x20\n 50002: u8 [a0 + 0xc] = a1\n 50005: a1 = 0x20\n 50008: a0 = u64 [sp + 0x8]\n 50011: ra = 624, jump @0\n      : @736 [@dyn 312] (gas: 6)\n 50018: i32 a1 = a0 + 0\n 50020: a2 = 0x20\n 50023: a0 = 0\n 50025: ra = 0x272\n 50029: ecalli 14 // 'seal_return'\n 50031: fallthrough\n      : @737 [@dyn 313] (gas: 18)\n 50032: sp = sp + 0xffffffffffffffc8\n 50035: u64 [sp + 0x30] = ra\n 50038: u64 [sp + 0x28] = s0\n 50041: u64 [sp + 0x20] = s1\n 50044: s1 = u64 [a0 + 0x10]\n 50047: a3 = u64 [a0 + 0x18]\n 50050: a1 = u64 [a0 + 0x8]\n 50053: a2 = u64 [a0]\n 50055: u64 [sp + 0x18] = a1\n 50058: u64 [sp + 0x10] = a3\n 50061: a0 = a1 | a3\n 50064: a1 = a2 | s1\n 50067: a1 = a1 | a0\n 50070: a1 = a1 >> 0x20\n 50073: a0 = a0 | s1\n 50076: a0 = a0 << 0x20\n 50079: a0 = a0 | a1\n 50082: jump @742 if a0 != 0\n      : @738 (gas: 6)\n 50086: i32 a0 = a2 + 0\n 50088: a1 = 0x20\n 50091: s0 = 0x20\n 50094: u64 [sp] = a0\n 50096: u64 [sp + 0x8] = a2\n 50099: ra = 628, jump @0\n      : @739 [@dyn 314] (gas: 43)\n 50106: u8 [a0 + 31] = 0x64\n 50110: u8 [a0 + 30] = 0x69\n 50114: u8 [a0 + 29] = 0x76\n 50118: u8 [a0 + 28] = 0x6f\n 50122: u8 [a0 + 27] = 0x72\n 50126: u8 [a0 + 26] = 0x70\n 50130: u8 [a0 + 0x19] = s0\n 50133: a5 = 0x65\n 50136: u8 [a0 + 0x18] = a5\n 50139: u8 [a0 + 23] = 0x68\n 50143: u8 [a0 + 22] = 0x74\n 50147: u8 [a0 + 0x15] = s0\n 50150: u8 [a0 + 20] = 0x74\n 50154: u8 [a0 + 19] = 0x6f\n 50158: u8 [a0 + 18] = 0x6e\n 50162: u8 [a0 + 0x11] = s0\n 50165: u8 [a0 + 16] = 0x73\n 50169: u8 [a0 + 15] = 0x69\n 50173: u8 [a0 + 0xe] = s0\n 50176: u8 [a0 + 13] = 0x72\n 50180: u8 [a0 + 0xc] = a5\n 50183: u8 [a0 + 11] = 0x6c\n 50187: u8 [a0 + 10] = 0x6c\n 50191: u8 [a0 + 9] = 0x61\n 50195: u8 [a0 + 8] = 0x63\n 50199: u8 [a0 + 0x7] = s0\n 50202: s0 = 0x72\n 50205: u8 [a0 + 6] = 0x3a\n 50209: u8 [a0 + 5] = 0x77\n 50213: u8 [a0 + 4] = 0x6f\n 50217: u8 [a0 + 0x3] = s0\n 50220: u8 [a0 + 2] = 0x63\n 50224: u8 [a0 + 1] = 0x73\n 50228: a2 = u64 [sp + 0x10]\n 50231: a2 = a2 | s1\n 50234: a3 = 0xffffffe0\n 50244: a4 = u64 [sp + 0x8]\n 50247: a3 = a4 <u a3\n 50250: a4 = u64 [sp + 0x18]\n 50253: a3 = 0 if a4 != 0\n 50255: a3 = 0 if a2 != 0\n 50257: u8 [a0 + 0] = 0x45\n 50260: jump @742 if a3 == 0\n      : @740 (gas: 4)\n 50264: a0 = u64 [sp]\n 50266: i32 a0 = a0 + 0x20\n 50269: a1 = 0x20\n 50272: ra = 630, jump @0\n      : @741 [@dyn 315] (gas: 38)\n 50279: u8 [a0 + 31] = 0\n 50282: u8 [a0 + 30] = 0\n 50285: u8 [a0 + 29] = 0\n 50288: u8 [a0 + 28] = 0\n 50291: u8 [a0 + 27] = 0\n 50294: u8 [a0 + 26] = 0\n 50297: u8 [a0 + 25] = 0\n 50300: u8 [a0 + 24] = 0\n 50303: u8 [a0 + 23] = 0\n 50306: u8 [a0 + 22] = 0\n 50309: u8 [a0 + 21] = 0\n 50312: u8 [a0 + 20] = 0\n 50315: u8 [a0 + 19] = 0\n 50318: u8 [a0 + 18] = 0\n 50321: u8 [a0 + 17] = 0\n 50324: u8 [a0 + 16] = 0\n 50327: u8 [a0 + 15] = 0\n 50330: u8 [a0 + 14] = 0\n 50333: u8 [a0 + 13] = 0\n 50336: u8 [a0 + 12] = 0\n 50339: u8 [a0 + 11] = 0\n 50342: u8 [a0 + 10] = 0\n 50345: u8 [a0 + 9] = 0\n 50348: u8 [a0 + 8] = 0\n 50351: u8 [a0 + 7] = 0\n 50354: u8 [a0 + 6] = 0\n 50357: u8 [a0 + 5] = 0\n 50360: u8 [a0 + 4] = 0\n 50363: u8 [a0 + 3] = 0\n 50366: u8 [a0 + 2] = 0\n 50369: u8 [a0 + 0x1] = s0\n 50372: a1 = 0x65\n 50375: u8 [a0] = a1\n 50377: ra = u64 [sp + 0x30]\n 50380: s0 = u64 [sp + 0x28]\n 50383: s1 = u64 [sp + 0x20]\n 50386: sp = sp + 0x38\n 50389: ret\n      : @742 (gas: 1)\n 50391: trap\n      : @743 (gas: 17)\n 50392: sp = sp + 0xffffffffffffffa0\n 50395: u64 [sp + 0x58] = ra\n 50398: u64 [sp + 0x50] = s0\n 50401: u64 [sp + 0x48] = s1\n 50404: a3 = u64 [a1 + 0x18]\n 50407: a4 = u64 [a1 + 0x10]\n 50410: a5 = u64 [a1 + 0x8]\n 50413: s1 = u64 [a1]\n 50415: a1 = a5 | a3\n 50418: a2 = s1 | a4\n 50421: a2 = a2 | a1\n 50424: a2 = a2 >> 0x20\n 50427: a1 = a1 | a4\n 50430: a1 = a1 << 0x20\n 50433: a1 = a1 | a2\n 50436: u64 [sp + 0x28] = a0\n 50439: jump @752 if a1 != 0\n      : @744 (gas: 19)\n 50443: a0 = s1 + 0x20\n 50446: u64 [sp + 0x40] = a0\n 50449: a0 = a0 <u s1\n 50452: a1 = a5 + a0\n 50455: u64 [sp + 0x38] = a1\n 50458: u64 [sp + 0x10] = a5\n 50461: s0 = a1 <u a5\n 50464: s0 = a0 if a0 == 0\n 50467: s0 = s0 + a4\n 50470: u64 [sp + 0x18] = a4\n 50473: a0 = s0 <u a4\n 50476: u64 [sp + 0x20] = a3\n 50479: a0 = a0 + a3\n 50482: u64 [sp + 0x30] = a0\n 50485: u64 [sp + 0x8] = s1\n 50488: i32 a0 = s1 + 0\n 50490: a1 = 0x20\n 50493: s1 = 0x20\n 50496: ra = 632, jump @0\n      : @745 [@dyn 316] (gas: 43)\n 50503: u8 [a0 + 0x1f] = s1\n 50506: a1 = u64 [sp + 0x40]\n 50509: a1 = a1 | s0\n 50512: a2 = u64 [sp + 0x38]\n 50515: a3 = u64 [sp + 0x30]\n 50518: a2 = a2 | a3\n 50521: a1 = a1 | a2\n 50524: a1 = a1 >> 0x20\n 50527: a2 = a2 | s0\n 50530: a2 = a2 << 0x20\n 50533: a1 = a1 | a2\n 50536: u8 [a0 + 30] = 0\n 50539: u8 [a0 + 29] = 0\n 50542: u8 [a0 + 28] = 0\n 50545: u8 [a0 + 27] = 0\n 50548: u8 [a0 + 26] = 0\n 50551: u8 [a0 + 25] = 0\n 50554: u8 [a0 + 24] = 0\n 50557: u8 [a0 + 23] = 0\n 50560: u8 [a0 + 22] = 0\n 50563: u8 [a0 + 21] = 0\n 50566: u8 [a0 + 20] = 0\n 50569: u8 [a0 + 19] = 0\n 50572: u8 [a0 + 18] = 0\n 50575: u8 [a0 + 17] = 0\n 50578: u8 [a0 + 16] = 0\n 50581: u8 [a0 + 15] = 0\n 50584: u8 [a0 + 14] = 0\n 50587: u8 [a0 + 13] = 0\n 50590: u8 [a0 + 12] = 0\n 50593: u8 [a0 + 11] = 0\n 50596: u8 [a0 + 10] = 0\n 50599: u8 [a0 + 9] = 0\n 50602: u8 [a0 + 8] = 0\n 50605: u8 [a0 + 7] = 0\n 50608: u8 [a0 + 6] = 0\n 50611: u8 [a0 + 5] = 0\n 50614: u8 [a0 + 4] = 0\n 50617: u8 [a0 + 3] = 0\n 50620: u8 [a0 + 2] = 0\n 50623: u8 [a0 + 1] = 0\n 50626: u8 [a0 + 0] = 0\n 50628: jump @752 if a1 != 0\n      : @746 (gas: 6)\n 50632: s1 = s0\n 50634: s0 = u64 [sp + 0x40]\n 50637: i32 a0 = s0 + 0\n 50639: a1 = 0x20\n 50642: u64 [sp] = a0\n 50644: ra = 634, jump @0\n      : @747 [@dyn 317] (gas: 42)\n 50651: u8 [a0 + 31] = 0x22\n 50655: u8 [a0 + 30] = 0\n 50658: u8 [a0 + 29] = 0\n 50661: u8 [a0 + 28] = 0\n 50664: u8 [a0 + 27] = 0\n 50667: u8 [a0 + 26] = 0\n 50670: u8 [a0 + 25] = 0\n 50673: u8 [a0 + 24] = 0\n 50676: u8 [a0 + 23] = 0\n 50679: u8 [a0 + 22] = 0\n 50682: u8 [a0 + 21] = 0\n 50685: u8 [a0 + 20] = 0\n 50688: u8 [a0 + 19] = 0\n 50691: u8 [a0 + 18] = 0\n 50694: u8 [a0 + 17] = 0\n 50697: u8 [a0 + 16] = 0\n 50700: u8 [a0 + 15] = 0\n 50703: u8 [a0 + 14] = 0\n 50706: u8 [a0 + 13] = 0\n 50709: u8 [a0 + 12] = 0\n 50712: u8 [a0 + 11] = 0\n 50715: u8 [a0 + 10] = 0\n 50718: u8 [a0 + 9] = 0\n 50721: u8 [a0 + 8] = 0\n 50724: u8 [a0 + 7] = 0\n 50727: u8 [a0 + 6] = 0\n 50730: u8 [a0 + 5] = 0\n 50733: u8 [a0 + 4] = 0\n 50736: u8 [a0 + 3] = 0\n 50739: u8 [a0 + 2] = 0\n 50742: u8 [a0 + 1] = 0\n 50745: a1 = u64 [sp + 0x30]\n 50748: a3 = s1 | a1\n 50751: s1 = 0x100000000\n 50761: a1 = 0xffffffe0\n 50771: a1 = s0 <u a1\n 50774: a2 = u64 [sp + 0x38]\n 50777: a1 = 0 if a2 != 0\n 50779: u64 [sp + 0x30] = a3\n 50782: a1 = 0 if a3 != 0\n 50784: u8 [a0 + 0] = 0\n 50786: jump @752 if a1 == 0\n      : @748 (gas: 4)\n 50790: s0 = u64 [sp]\n 50792: i32 a0 = s0 + 0x20\n 50795: a1 = 0x20\n 50798: ra = 636, jump @0\n      : @749 [@dyn 318] (gas: 43)\n 50805: u8 [a0 + 31] = 0x64\n 50809: t0 = 0x69\n 50812: u8 [a0 + 0x1e] = t0\n 50815: u8 [a0 + 29] = 0x76\n 50819: u8 [a0 + 28] = 0x6f\n 50823: a5 = 0x72\n 50826: u8 [a0 + 0x1b] = a5\n 50829: u8 [a0 + 26] = 0x70\n 50833: u8 [a0 + 25] = 0x20\n 50837: u8 [a0 + 24] = 0x65\n 50841: u8 [a0 + 23] = 0x68\n 50845: u8 [a0 + 22] = 0x74\n 50849: u8 [a0 + 21] = 0x20\n 50853: u8 [a0 + 20] = 0x74\n 50857: u8 [a0 + 19] = 0x6f\n 50861: u8 [a0 + 18] = 0x6e\n 50865: u8 [a0 + 17] = 0x20\n 50869: u8 [a0 + 16] = 0x73\n 50873: u8 [a0 + 0xf] = t0\n 50876: u8 [a0 + 14] = 0x20\n 50880: u8 [a0 + 0xd] = a5\n 50883: u8 [a0 + 12] = 0x65\n 50887: u8 [a0 + 11] = 0x6c\n 50891: u8 [a0 + 10] = 0x6c\n 50895: u8 [a0 + 9] = 0x61\n 50899: u8 [a0 + 8] = 0x63\n 50903: u8 [a0 + 7] = 0x20\n 50907: u8 [a0 + 6] = 0x3a\n 50911: a4 = 0x77\n 50914: u8 [a0 + 0x5] = a4\n 50917: u8 [a0 + 4] = 0x6f\n 50921: u8 [a0 + 0x3] = a5\n 50924: u8 [a0 + 2] = 0x63\n 50928: u8 [a0 + 1] = 0x73\n 50932: a2 = s1 + 0xffffffffffffffc0\n 50935: a3 = u64 [sp + 0x40]\n 50938: a2 = a3 <u a2\n 50941: a3 = u64 [sp + 0x38]\n 50944: a2 = 0 if a3 != 0\n 50946: a3 = u64 [sp + 0x30]\n 50949: a2 = 0 if a3 != 0\n 50951: u8 [a0 + 0] = 0x45\n 50954: jump @752 if a2 == 0\n      : @750 (gas: 3)\n 50958: i32 a0 = s0 + 0x40\n 50961: a1 = 0x20\n 50964: ra = 638, jump @0\n      : @751 [@dyn 319] (gas: 54)\n 50971: u8 [a0 + 31] = 0\n 50974: u8 [a0 + 30] = 0\n 50977: u8 [a0 + 29] = 0\n 50980: u8 [a0 + 28] = 0\n 50983: u8 [a0 + 27] = 0\n 50986: u8 [a0 + 26] = 0\n 50989: u8 [a0 + 25] = 0\n 50992: u8 [a0 + 24] = 0\n 50995: u8 [a0 + 23] = 0\n 50998: u8 [a0 + 22] = 0\n 51001: u8 [a0 + 21] = 0\n 51004: u8 [a0 + 20] = 0\n 51007: u8 [a0 + 19] = 0\n 51010: u8 [a0 + 18] = 0\n 51013: u8 [a0 + 17] = 0\n 51016: u8 [a0 + 16] = 0\n 51019: u8 [a0 + 15] = 0\n 51022: u8 [a0 + 14] = 0\n 51025: u8 [a0 + 13] = 0\n 51028: u8 [a0 + 12] = 0\n 51031: u8 [a0 + 11] = 0\n 51034: u8 [a0 + 10] = 0\n 51037: u8 [a0 + 9] = 0\n 51040: u8 [a0 + 8] = 0\n 51043: u8 [a0 + 7] = 0\n 51046: u8 [a0 + 6] = 0\n 51049: u8 [a0 + 5] = 0\n 51052: u8 [a0 + 4] = 0\n 51055: u8 [a0 + 3] = 0\n 51058: u8 [a0 + 2] = 0\n 51061: u8 [a0 + 1] = 0x72\n 51065: u8 [a0 + 0] = 0x65\n 51068: a1 = u64 [sp + 0x8]\n 51071: a0 = a1 + 0x80\n 51075: a1 = a0 <u a1\n 51078: a3 = u64 [sp + 0x10]\n 51081: a2 = a3 + a1\n 51084: a3 = a2 <u a3\n 51087: a3 = a1 if a1 == 0\n 51090: a1 = u64 [sp + 0x18]\n 51093: a3 = a3 + a1\n 51096: a1 = a3 <u a1\n 51099: a4 = u64 [sp + 0x20]\n 51102: a1 = a1 + a4\n 51105: a4 = u64 [sp + 0x28]\n 51108: u64 [a4] = a0\n 51110: u64 [a4 + 0x8] = a2\n 51113: u64 [a4 + 0x10] = a3\n 51116: u64 [a4 + 0x18] = a1\n 51119: ra = u64 [sp + 0x58]\n 51122: s0 = u64 [sp + 0x50]\n 51125: s1 = u64 [sp + 0x48]\n 51128: sp = sp + 0x60\n 51131: ret\n      : @752 (gas: 1)\n 51133: trap\n      : @753 (gas: 17)\n 51134: sp = sp + 0xffffffffffffff20\n 51138: u64 [sp + 0xd8] = ra\n 51142: u64 [sp + 0xd0] = s0\n 51146: u64 [sp + 0xc8] = s1\n 51150: s0 = sp + 0xe0\n 51154: sp = sp & 0xffffffffffffffe0\n 51157: a1 = u64 [a0 + 0x18]\n 51160: u64 [sp + 0x38] = a1\n 51163: a1 = u64 [a0 + 0x10]\n 51166: u64 [sp + 0x30] = a1\n 51169: a1 = u64 [a0 + 0x8]\n 51172: u64 [sp + 0x28] = a1\n 51175: a0 = u64 [a0]\n 51177: u64 [sp + 0x20] = a0\n 51180: i32 a0 = sp + 0xa0\n 51184: ecalli 5 // 'caller'\n 51186: fallthrough\n      : @754 (gas: 6)\n 51187: s1 = 0x20070\n 51192: a4 = i32 [sp + 0xb0]\n 51196: a2 = u64 [sp + 0xa0]\n 51200: a0 = i32 [0x20070]\n 51205: a1 = u64 [sp + 0xa8]\n 51209: jump @757 if a0 == 0\n      : @755 (gas: 9)\n 51212: u64 [sp] = a0\n 51214: a0 = 0x30080\n 51219: i32 a0 = a0 + 0\n 51221: u64 [sp + 0x8] = a1\n 51224: i32 a1 = s1 + 0\n 51226: u64 [sp + 0x18] = a4\n 51229: u64 [sp + 0x10] = a2\n 51232: ecalli 7 // 'get_immutable_data'\n 51234: fallthrough\n      : @756 (gas: 7)\n 51235: a1 = u64 [sp + 0x8]\n 51238: a2 = u64 [sp + 0x10]\n 51241: a4 = u64 [sp + 0x18]\n 51244: a0 = i32 [0x20070]\n 51249: u32 [0x20070] = 0\n 51254: a3 = u64 [sp]\n 51256: jump @765 if a0 <u a3\n      : @757 (gas: 19)\n 51260: a0 = reverse a1\n 51262: a1 = a0 >> 0x20\n 51265: a2 = reverse a2\n 51267: a3 = a2 << 0x20\n 51270: a1 = a1 | a3\n 51273: a0 = a0 << 0x20\n 51276: a4 = reverse a4\n 51278: a4 = a4 >> 0x20\n 51281: a0 = a0 | a4\n 51284: a4 = u64 [0x300c0]\n 51289: a5 = u32 [0x300d0]\n 51294: a2 = a2 >> 0x20\n 51297: a3 = u64 [0x300c8]\n 51302: a0 = a0 ^ a4\n 51305: a2 = a2 ^ a5\n 51308: a0 = a0 | a2\n 51311: a1 = a1 ^ a3\n 51314: a0 = a0 | a1\n 51317: jump @760 if a0 != 0\n      : @758 (gas: 10)\n 51320: a0 = u64 [sp + 0x20]\n 51323: u64 [sp + 0x40] = a0\n 51326: a0 = u64 [sp + 0x28]\n 51329: u64 [sp + 0x48] = a0\n 51332: a0 = u64 [sp + 0x30]\n 51335: u64 [sp + 0x50] = a0\n 51338: a0 = sp + 0x40\n 51341: a1 = u64 [sp + 0x38]\n 51344: u64 [sp + 0x58] = a1\n 51347: ra = 640, jump @779\n      : @759 [@dyn 320] (gas: 6)\n 51353: sp = s0 + 0xffffffffffffff20\n 51357: ra = u64 [sp + 0xd8]\n 51361: s0 = u64 [sp + 0xd0]\n 51365: s1 = u64 [sp + 0xc8]\n 51369: sp = sp + 0xe0\n 51373: ret\n      : @760 (gas: 3)\n 51375: a0 = 0x40\n 51378: a1 = 0x20\n 51381: ra = 642, jump @0\n      : @761 [@dyn 321] (gas: 103)\n 51388: a1 = u8 [a0 + 0x11]\n 51391: a2 = u8 [a0 + 0x10]\n 51394: a3 = u8 [a0 + 0x12]\n 51397: a4 = u8 [a0 + 0x13]\n 51400: a1 = a1 << 0x8\n 51403: a1 = a1 | a2\n 51406: a3 = a3 << 0x10\n 51409: a4 = a4 << 0x18\n 51412: a3 = a3 | a4\n 51415: a1 = a1 | a3\n 51418: a2 = u8 [a0 + 0x15]\n 51421: a3 = u8 [a0 + 0x14]\n 51424: a4 = u8 [a0 + 0x16]\n 51427: a5 = u8 [a0 + 0x17]\n 51430: a2 = a2 << 0x8\n 51433: a2 = a2 | a3\n 51436: a4 = a4 << 0x10\n 51439: a5 = a5 << 0x18\n 51442: a4 = a4 | a5\n 51445: a2 = a2 | a4\n 51448: a2 = a2 << 0x20\n 51451: t0 = a2 | a1\n 51454: a2 = u8 [a0 + 0x1]\n 51457: a3 = u8 [a0]\n 51459: a4 = u8 [a0 + 0x2]\n 51462: a5 = u8 [a0 + 0x3]\n 51465: a2 = a2 << 0x8\n 51468: a2 = a2 | a3\n 51471: a4 = a4 << 0x10\n 51474: a5 = a5 << 0x18\n 51477: a4 = a4 | a5\n 51480: a2 = a2 | a4\n 51483: a3 = u8 [a0 + 0x5]\n 51486: a4 = u8 [a0 + 0x4]\n 51489: a5 = u8 [a0 + 0x6]\n 51492: s1 = u8 [a0 + 0x7]\n 51495: a3 = a3 << 0x8\n 51498: a3 = a3 | a4\n 51501: a5 = a5 << 0x10\n 51504: s1 = s1 << 0x18\n 51507: a5 = a5 | s1\n 51510: a3 = a3 | a5\n 51513: a3 = a3 << 0x20\n 51516: a2 = a2 | a3\n 51519: a3 = u8 [a0 + 0x19]\n 51522: a4 = u8 [a0 + 0x18]\n 51525: a5 = u8 [a0 + 0x1a]\n 51528: s1 = u8 [a0 + 0x1b]\n 51531: a3 = a3 << 0x8\n 51534: a3 = a3 | a4\n 51537: a5 = a5 << 0x10\n 51540: s1 = s1 << 0x18\n 51543: a5 = a5 | s1\n 51546: a3 = a3 | a5\n 51549: a4 = u8 [a0 + 0x1d]\n 51552: a5 = u8 [a0 + 0x1c]\n 51555: s1 = u8 [a0 + 0x1e]\n 51558: a1 = u8 [a0 + 0x1f]\n 51561: a4 = a4 << 0x8\n 51564: a4 = a4 | a5\n 51567: s1 = s1 << 0x10\n 51570: a1 = a1 << 0x18\n 51573: a1 = a1 | s1\n 51576: a1 = a1 | a4\n 51579: a1 = a1 << 0x20\n 51582: a3 = a3 | a1\n 51585: a1 = u8 [a0 + 0x9]\n 51588: a4 = u8 [a0 + 0x8]\n 51591: a5 = u8 [a0 + 0xa]\n 51594: s1 = u8 [a0 + 0xb]\n 51597: a1 = a1 << 0x8\n 51600: a1 = a1 | a4\n 51603: a5 = a5 << 0x10\n 51606: s1 = s1 << 0x18\n 51609: a5 = a5 | s1\n 51612: a1 = a1 | a5\n 51615: a4 = u8 [a0 + 0xd]\n 51618: a5 = u8 [a0 + 0xc]\n 51621: s1 = u8 [a0 + 0xe]\n 51624: a0 = u8 [a0 + 0xf]\n 51627: a4 = a4 << 0x8\n 51630: a4 = a4 | a5\n 51633: s1 = s1 << 0x10\n 51636: a0 = a0 << 0x18\n 51639: a0 = a0 | s1\n 51642: a0 = a0 | a4\n 51645: a0 = a0 << 0x20\n 51648: a0 = a0 | a1\n 51651: s1 = reverse a0\n 51653: a1 = reverse a3\n 51655: a2 = reverse a2\n 51657: a0 = reverse t0\n 51659: u64 [sp + 0x38] = a0\n 51662: u64 [sp + 0x30] = a2\n 51665: a0 = a0 | a2\n 51668: a2 = a1\n 51670: a1 = a1 | s1\n 51673: a1 = a1 | a0\n 51676: a1 = a1 >> 0x20\n 51679: a0 = a0 | s1\n 51682: a0 = a0 << 0x20\n 51685: a0 = a0 | a1\n 51688: jump @765 if a0 != 0\n      : @762 (gas: 5)\n 51692: u64 [sp + 0x28] = a2\n 51695: i32 a0 = a2 + 0\n 51697: a1 = 0x20\n 51700: u64 [sp + 0x20] = a0\n 51703: ra = 644, jump @0\n      : @763 [@dyn 322] (gas: 50)\n 51710: u8 [a0 + 31] = 0\n 51713: u8 [a0 + 30] = 0\n 51716: u8 [a0 + 29] = 0\n 51719: u8 [a0 + 28] = 0\n 51722: u8 [a0 + 27] = 0\n 51725: u8 [a0 + 26] = 0\n 51728: u8 [a0 + 25] = 0\n 51731: u8 [a0 + 24] = 0\n 51734: u8 [a0 + 23] = 0\n 51737: u8 [a0 + 22] = 0\n 51740: u8 [a0 + 21] = 0\n 51743: u8 [a0 + 20] = 0\n 51746: u8 [a0 + 19] = 0\n 51749: u8 [a0 + 18] = 0\n 51752: u8 [a0 + 17] = 0\n 51755: u8 [a0 + 16] = 0\n 51758: u8 [a0 + 15] = 0\n 51761: u8 [a0 + 14] = 0\n 51764: u8 [a0 + 13] = 0\n 51767: u8 [a0 + 12] = 0\n 51770: u8 [a0 + 11] = 0\n 51773: u8 [a0 + 10] = 0\n 51776: u8 [a0 + 9] = 0\n 51779: u8 [a0 + 8] = 0\n 51782: u8 [a0 + 7] = 0\n 51785: u8 [a0 + 6] = 0\n 51788: u8 [a0 + 5] = 0\n 51791: u8 [a0 + 4] = 0\n 51794: u8 [a0 + 3] = 0xa0\n 51799: u8 [a0 + 2] = 0x79\n 51803: u8 [a0 + 1] = 0xc3\n 51808: u8 [a0 + 0] = 0x8\n 51811: a1 = u64 [sp + 0x28]\n 51814: a0 = a1 + 0x4\n 51817: a1 = a0 <u a1\n 51820: a3 = u64 [sp + 0x38]\n 51823: a2 = a3 + a1\n 51826: a3 = a2 <u a3\n 51829: a3 = a1 if a1 == 0\n 51832: a3 = a3 + s1\n 51835: a1 = a3 <u s1\n 51838: a4 = u64 [sp + 0x30]\n 51841: a4 = a4 + a1\n 51844: u64 [sp + 0x68] = a2\n 51847: u64 [sp + 0x60] = a0\n 51850: u64 [sp + 0x70] = a3\n 51853: a0 = sp + 0x80\n 51857: a1 = sp + 0x60\n 51860: u64 [sp + 0x78] = a4\n 51863: ra = 646, jump @743\n      : @764 [@dyn 323] (gas: 30)\n 51869: a0 = u64 [sp + 0x88]\n 51873: t0 = u64 [sp + 0x98]\n 51877: t1 = u64 [sp + 0x80]\n 51881: a3 = u64 [sp + 0x90]\n 51885: a1 = u64 [sp + 0x38]\n 51888: a4 = a0 ^ a1\n 51891: a5 = a0 <u a1\n 51894: t2 = a1\n 51896: a2 = u64 [sp + 0x28]\n 51899: a1 = t1 <u a2\n 51902: a5 = a1 if a4 == 0\n 51905: a4 = a3 - s1\n 51908: a3 = a3 <u s1\n 51911: s1 = u64 [sp + 0x30]\n 51914: s1 = t0 - s1\n 51917: s1 = s1 - a3\n 51920: a3 = a4 <u a5\n 51923: s1 = s1 - a3\n 51926: a4 = a4 - a5\n 51929: a0 = a0 - t2\n 51932: a1 = a0 - a1\n 51935: a0 = t1 - a2\n 51938: a1 = a1 | s1\n 51941: a2 = a0 | a4\n 51944: a2 = a2 | a1\n 51947: a1 = a1 | a4\n 51950: a2 = a2 >> 0x20\n 51953: a1 = a1 << 0x20\n 51956: a1 = a1 | a2\n 51959: jump @766 if a1 == 0\n      : @765 (gas: 1)\n 51962: trap\n      : @766 (gas: 4)\n 51963: i32 s1 = a0 + 0\n 51965: a0 = u64 [sp + 0x20]\n 51968: a1 = s1\n 51970: ra = 648, jump @0\n      : @767 [@dyn 324] (gas: 6)\n 51977: i32 a1 = a0 + 0\n 51979: a0 = 0x1\n 51982: a2 = s1\n 51984: ra = 0x28a\n 51988: ecalli 14 // 'seal_return'\n 51990: fallthrough\n      : @768 [@dyn 325] (gas: 9)\n 51991: a2 = u64 [a1 + 0x18]\n 51994: a3 = u64 [a1 + 0x10]\n 51997: a4 = u64 [a1 + 0x8]\n 52000: a1 = u64 [a1]\n 52002: u64 [a0 + 0x18] = a2\n 52005: u64 [a0 + 0x10] = a3\n 52008: u64 [a0 + 0x8] = a4\n 52011: u64 [a0] = a1\n 52013: ret\n      : @769 (gas: 17)\n 52015: sp = sp + 0xffffffffffffffa0\n 52018: u64 [sp + 0x58] = ra\n 52021: u64 [sp + 0x50] = s0\n 52024: u64 [sp + 0x48] = s1\n 52027: a3 = u64 [a1 + 0x18]\n 52030: a4 = u64 [a1 + 0x10]\n 52033: a5 = u64 [a1 + 0x8]\n 52036: s1 = u64 [a1]\n 52038: a1 = a5 | a3\n 52041: a2 = s1 | a4\n 52044: a2 = a2 | a1\n 52047: a2 = a2 >> 0x20\n 52050: a1 = a1 | a4\n 52053: a1 = a1 << 0x20\n 52056: a1 = a1 | a2\n 52059: u64 [sp + 0x28] = a0\n 52062: jump @778 if a1 != 0\n      : @770 (gas: 19)\n 52066: a0 = s1 + 0x20\n 52069: u64 [sp + 0x40] = a0\n 52072: a0 = a0 <u s1\n 52075: a1 = a5 + a0\n 52078: u64 [sp + 0x38] = a1\n 52081: u64 [sp + 0x10] = a5\n 52084: s0 = a1 <u a5\n 52087: s0 = a0 if a0 == 0\n 52090: s0 = s0 + a4\n 52093: u64 [sp + 0x18] = a4\n 52096: a0 = s0 <u a4\n 52099: u64 [sp + 0x20] = a3\n 52102: a0 = a0 + a3\n 52105: u64 [sp + 0x30] = a0\n 52108: u64 [sp + 0x8] = s1\n 52111: i32 a0 = s1 + 0\n 52113: a1 = 0x20\n 52116: s1 = 0x20\n 52119: ra = 652, jump @0\n      : @771 [@dyn 326] (gas: 43)\n 52126: u8 [a0 + 0x1f] = s1\n 52129: a1 = u64 [sp + 0x40]\n 52132: a1 = a1 | s0\n 52135: a2 = u64 [sp + 0x38]\n 52138: a3 = u64 [sp + 0x30]\n 52141: a2 = a2 | a3\n 52144: a1 = a1 | a2\n 52147: a1 = a1 >> 0x20\n 52150: a2 = a2 | s0\n 52153: a2 = a2 << 0x20\n 52156: a1 = a1 | a2\n 52159: u8 [a0 + 30] = 0\n 52162: u8 [a0 + 29] = 0\n 52165: u8 [a0 + 28] = 0\n 52168: u8 [a0 + 27] = 0\n 52171: u8 [a0 + 26] = 0\n 52174: u8 [a0 + 25] = 0\n 52177: u8 [a0 + 24] = 0\n 52180: u8 [a0 + 23] = 0\n 52183: u8 [a0 + 22] = 0\n 52186: u8 [a0 + 21] = 0\n 52189: u8 [a0 + 20] = 0\n 52192: u8 [a0 + 19] = 0\n 52195: u8 [a0 + 18] = 0\n 52198: u8 [a0 + 17] = 0\n 52201: u8 [a0 + 16] = 0\n 52204: u8 [a0 + 15] = 0\n 52207: u8 [a0 + 14] = 0\n 52210: u8 [a0 + 13] = 0\n 52213: u8 [a0 + 12] = 0\n 52216: u8 [a0 + 11] = 0\n 52219: u8 [a0 + 10] = 0\n 52222: u8 [a0 + 9] = 0\n 52225: u8 [a0 + 8] = 0\n 52228: u8 [a0 + 7] = 0\n 52231: u8 [a0 + 6] = 0\n 52234: u8 [a0 + 5] = 0\n 52237: u8 [a0 + 4] = 0\n 52240: u8 [a0 + 3] = 0\n 52243: u8 [a0 + 2] = 0\n 52246: u8 [a0 + 1] = 0\n 52249: u8 [a0 + 0] = 0\n 52251: jump @778 if a1 != 0\n      : @772 (gas: 6)\n 52255: s1 = s0\n 52257: s0 = u64 [sp + 0x40]\n 52260: i32 a0 = s0 + 0\n 52262: a1 = 0x20\n 52265: u64 [sp] = a0\n 52267: ra = 654, jump @0\n      : @773 [@dyn 327] (gas: 42)\n 52274: u8 [a0 + 31] = 0x25\n 52278: u8 [a0 + 30] = 0\n 52281: u8 [a0 + 29] = 0\n 52284: u8 [a0 + 28] = 0\n 52287: u8 [a0 + 27] = 0\n 52290: u8 [a0 + 26] = 0\n 52293: u8 [a0 + 25] = 0\n 52296: u8 [a0 + 24] = 0\n 52299: u8 [a0 + 23] = 0\n 52302: u8 [a0 + 22] = 0\n 52305: u8 [a0 + 21] = 0\n 52308: u8 [a0 + 20] = 0\n 52311: u8 [a0 + 19] = 0\n 52314: u8 [a0 + 18] = 0\n 52317: u8 [a0 + 17] = 0\n 52320: u8 [a0 + 16] = 0\n 52323: u8 [a0 + 15] = 0\n 52326: u8 [a0 + 14] = 0\n 52329: u8 [a0 + 13] = 0\n 52332: u8 [a0 + 12] = 0\n 52335: u8 [a0 + 11] = 0\n 52338: u8 [a0 + 10] = 0\n 52341: u8 [a0 + 9] = 0\n 52344: u8 [a0 + 8] = 0\n 52347: u8 [a0 + 7] = 0\n 52350: u8 [a0 + 6] = 0\n 52353: u8 [a0 + 5] = 0\n 52356: u8 [a0 + 4] = 0\n 52359: u8 [a0 + 3] = 0\n 52362: u8 [a0 + 2] = 0\n 52365: u8 [a0 + 1] = 0\n 52368: a1 = u64 [sp + 0x30]\n 52371: a3 = s1 | a1\n 52374: s1 = 0x100000000\n 52384: a1 = 0xffffffe0\n 52394: a1 = s0 <u a1\n 52397: a2 = u64 [sp + 0x38]\n 52400: a1 = 0 if a2 != 0\n 52402: u64 [sp + 0x30] = a3\n 52405: a1 = 0 if a3 != 0\n 52407: u8 [a0 + 0] = 0\n 52409: jump @778 if a1 == 0\n      : @774 (gas: 4)\n 52413: s0 = u64 [sp]\n 52415: i32 a0 = s0 + 0x20\n 52418: a1 = 0x20\n 52421: ra = 656, jump @0\n      : @775 [@dyn 328] (gas: 43)\n 52428: u8 [a0 + 31] = 0x64\n 52432: u8 [a0 + 30] = 0x61\n 52436: a4 = 0x20\n 52439: u8 [a0 + 0x1d] = a4\n 52442: t0 = 0x6f\n 52445: u8 [a0 + 0x1c] = t0\n 52448: a5 = 0x72\n 52451: u8 [a0 + 0x1b] = a5\n 52454: u8 [a0 + 26] = 0x65\n 52458: u8 [a0 + 25] = 0x7a\n 52462: u8 [a0 + 0x18] = a4\n 52465: u8 [a0 + 23] = 0x65\n 52469: u8 [a0 + 22] = 0x62\n 52473: u8 [a0 + 0x15] = a4\n 52476: u8 [a0 + 20] = 0x74\n 52480: u8 [a0 + 0x13] = t0\n 52483: u8 [a0 + 18] = 0x6e\n 52487: u8 [a0 + 17] = 0x6e\n 52491: u8 [a0 + 16] = 0x61\n 52495: u8 [a0 + 15] = 0x63\n 52499: u8 [a0 + 0xe] = a4\n 52502: u8 [a0 + 0xd] = a5\n 52505: u8 [a0 + 12] = 0x65\n 52509: u8 [a0 + 11] = 0x6e\n 52513: u8 [a0 + 10] = 0x67\n 52517: u8 [a0 + 9] = 0x69\n 52521: u8 [a0 + 8] = 0x73\n 52525: u8 [a0 + 0x7] = a4\n 52528: u8 [a0 + 6] = 0x3a\n 52532: u8 [a0 + 5] = 0x77\n 52536: u8 [a0 + 0x4] = t0\n 52539: u8 [a0 + 0x3] = a5\n 52542: u8 [a0 + 2] = 0x63\n 52546: u8 [a0 + 1] = 0x73\n 52550: a2 = s1 + 0xffffffffffffffc0\n 52553: a3 = u64 [sp + 0x40]\n 52556: a2 = a3 <u a2\n 52559: a3 = u64 [sp + 0x38]\n 52562: a2 = 0 if a3 != 0\n 52564: a3 = u64 [sp + 0x30]\n 52567: a2 = 0 if a3 != 0\n 52569: u8 [a0 + 0] = 0x45\n 52572: jump @778 if a2 == 0\n      : @776 (gas: 3)\n 52576: i32 a0 = s0 + 0x40\n 52579: a1 = 0x20\n 52582: ra = 658, jump @0\n      : @777 [@dyn 329] (gas: 54)\n 52589: u8 [a0 + 31] = 0\n 52592: u8 [a0 + 30] = 0\n 52595: u8 [a0 + 29] = 0\n 52598: u8 [a0 + 28] = 0\n 52601: u8 [a0 + 27] = 0\n 52604: u8 [a0 + 26] = 0\n 52607: u8 [a0 + 25] = 0\n 52610: u8 [a0 + 24] = 0\n 52613: u8 [a0 + 23] = 0\n 52616: u8 [a0 + 22] = 0\n 52619: u8 [a0 + 21] = 0\n 52622: u8 [a0 + 20] = 0\n 52625: u8 [a0 + 19] = 0\n 52628: u8 [a0 + 18] = 0\n 52631: u8 [a0 + 17] = 0\n 52634: u8 [a0 + 16] = 0\n 52637: u8 [a0 + 15] = 0\n 52640: u8 [a0 + 14] = 0\n 52643: u8 [a0 + 13] = 0\n 52646: u8 [a0 + 12] = 0\n 52649: u8 [a0 + 11] = 0\n 52652: u8 [a0 + 10] = 0\n 52655: u8 [a0 + 9] = 0\n 52658: u8 [a0 + 8] = 0\n 52661: u8 [a0 + 7] = 0\n 52664: u8 [a0 + 6] = 0\n 52667: u8 [a0 + 5] = 0\n 52670: u8 [a0 + 4] = 0x73\n 52674: u8 [a0 + 3] = 0x73\n 52678: u8 [a0 + 2] = 0x65\n 52682: u8 [a0 + 1] = 0x72\n 52686: u8 [a0 + 0] = 0x64\n 52689: a1 = u64 [sp + 0x8]\n 52692: a0 = a1 + 0x80\n 52696: a1 = a0 <u a1\n 52699: a3 = u64 [sp + 0x10]\n 52702: a2 = a3 + a1\n 52705: a3 = a2 <u a3\n 52708: a3 = a1 if a1 == 0\n 52711: a1 = u64 [sp + 0x18]\n 52714: a3 = a3 + a1\n 52717: a1 = a3 <u a1\n 52720: a4 = u64 [sp + 0x20]\n 52723: a1 = a1 + a4\n 52726: a4 = u64 [sp + 0x28]\n 52729: u64 [a4] = a0\n 52731: u64 [a4 + 0x8] = a2\n 52734: u64 [a4 + 0x10] = a3\n 52737: u64 [a4 + 0x18] = a1\n 52740: ra = u64 [sp + 0x58]\n 52743: s0 = u64 [sp + 0x50]\n 52746: s1 = u64 [sp + 0x48]\n 52749: sp = sp + 0x60\n 52752: ret\n      : @778 (gas: 1)\n 52754: trap\n      : @779 (gas: 14)\n 52755: sp = sp + 0xffffffffffffff20\n 52759: u64 [sp + 0xd8] = ra\n 52763: u64 [sp + 0xd0] = s0\n 52767: u64 [sp + 0xc8] = s1\n 52771: s0 = sp + 0xe0\n 52775: sp = sp & 0xffffffffffffffe0\n 52778: s1 = u32 [a0 + 0x10]\n 52781: a1 = u64 [a0]\n 52783: a2 = u64 [a0 + 0x8]\n 52786: u64 [sp + 0x18] = a1\n 52789: a0 = a1 | s1\n 52792: u64 [sp + 0x10] = a2\n 52795: a0 = a0 | a2\n 52798: jump @781 if a0 == 0\n      : @780 (gas: 41)\n 52802: u64 [sp + 152] = 0\n 52806: u64 [sp + 144] = 0\n 52810: u64 [sp + 136] = 0\n 52814: u64 [sp + 128] = 0x2\n 52819: u64 [sp + 184] = 0\n 52823: u64 [sp + 176] = 0\n 52827: u64 [sp + 168] = 0\n 52831: u64 [sp + 160] = 0\n 52835: u32 [sp + 96] = 0x20\n 52839: i32 a1 = sp + 0x80\n 52843: i32 a3 = sp + 0xa0\n 52847: i32 a4 = sp + 0x60\n 52850: a2 = 0xffffffffffffffff\n 52853: a0 = 0\n 52855: ecalli 8 // 'get_storage'\n 52857: a0 = u32 [sp + 0xb4]\n 52861: a0 = a0 << 0x20\n 52864: a1 = u64 [sp + 0xb8]\n 52868: a0 = a0 | s1\n 52871: u64 [sp + 152] = 0\n 52875: u64 [sp + 144] = 0\n 52879: u64 [sp + 136] = 0\n 52883: u64 [sp + 128] = 0x2\n 52888: u64 [sp + 0xb8] = a1\n 52892: u64 [sp + 0xb0] = a0\n 52896: a0 = u64 [sp + 0x10]\n 52899: u64 [sp + 0xa8] = a0\n 52903: a0 = u64 [sp + 0x18]\n 52906: u64 [sp + 0xa0] = a0\n 52910: i32 a1 = sp + 0x80\n 52914: i32 a3 = sp + 0xa0\n 52918: a2 = 0xffffffffffffffff\n 52921: a4 = 0x20\n 52924: a0 = 0\n 52926: ecalli 16 // 'set_storage'\n 52928: sp = s0 + 0xffffffffffffff20\n 52932: ra = u64 [sp + 0xd8]\n 52936: s0 = u64 [sp + 0xd0]\n 52940: s1 = u64 [sp + 0xc8]\n 52944: sp = sp + 0xe0\n 52948: ret\n      : @781 (gas: 3)\n 52950: a0 = 0x40\n 52953: a1 = 0x20\n 52956: ra = 660, jump @0\n      : @782 [@dyn 330] (gas: 103)\n 52963: a1 = u8 [a0 + 0x11]\n 52966: a2 = u8 [a0 + 0x10]\n 52969: a3 = u8 [a0 + 0x12]\n 52972: a4 = u8 [a0 + 0x13]\n 52975: a1 = a1 << 0x8\n 52978: a1 = a1 | a2\n 52981: a3 = a3 << 0x10\n 52984: a4 = a4 << 0x18\n 52987: a3 = a3 | a4\n 52990: a1 = a1 | a3\n 52993: a2 = u8 [a0 + 0x15]\n 52996: a3 = u8 [a0 + 0x14]\n 52999: a4 = u8 [a0 + 0x16]\n 53002: a5 = u8 [a0 + 0x17]\n 53005: a2 = a2 << 0x8\n 53008: a2 = a2 | a3\n 53011: a4 = a4 << 0x10\n 53014: a5 = a5 << 0x18\n 53017: a4 = a4 | a5\n 53020: a2 = a2 | a4\n 53023: a2 = a2 << 0x20\n 53026: t0 = a2 | a1\n 53029: a2 = u8 [a0 + 0x1]\n 53032: a3 = u8 [a0]\n 53034: a4 = u8 [a0 + 0x2]\n 53037: a5 = u8 [a0 + 0x3]\n 53040: a2 = a2 << 0x8\n 53043: a2 = a2 | a3\n 53046: a4 = a4 << 0x10\n 53049: a5 = a5 << 0x18\n 53052: a4 = a4 | a5\n 53055: a2 = a2 | a4\n 53058: a3 = u8 [a0 + 0x5]\n 53061: a4 = u8 [a0 + 0x4]\n 53064: a5 = u8 [a0 + 0x6]\n 53067: s1 = u8 [a0 + 0x7]\n 53070: a3 = a3 << 0x8\n 53073: a3 = a3 | a4\n 53076: a5 = a5 << 0x10\n 53079: s1 = s1 << 0x18\n 53082: a5 = a5 | s1\n 53085: a3 = a3 | a5\n 53088: a3 = a3 << 0x20\n 53091: a2 = a2 | a3\n 53094: a3 = u8 [a0 + 0x19]\n 53097: a4 = u8 [a0 + 0x18]\n 53100: a5 = u8 [a0 + 0x1a]\n 53103: s1 = u8 [a0 + 0x1b]\n 53106: a3 = a3 << 0x8\n 53109: a3 = a3 | a4\n 53112: a5 = a5 << 0x10\n 53115: s1 = s1 << 0x18\n 53118: a5 = a5 | s1\n 53121: a3 = a3 | a5\n 53124: a4 = u8 [a0 + 0x1d]\n 53127: a5 = u8 [a0 + 0x1c]\n 53130: s1 = u8 [a0 + 0x1e]\n 53133: a1 = u8 [a0 + 0x1f]\n 53136: a4 = a4 << 0x8\n 53139: a4 = a4 | a5\n 53142: s1 = s1 << 0x10\n 53145: a1 = a1 << 0x18\n 53148: a1 = a1 | s1\n 53151: a1 = a1 | a4\n 53154: a1 = a1 << 0x20\n 53157: a3 = a3 | a1\n 53160: a1 = u8 [a0 + 0x9]\n 53163: a4 = u8 [a0 + 0x8]\n 53166: a5 = u8 [a0 + 0xa]\n 53169: s1 = u8 [a0 + 0xb]\n 53172: a1 = a1 << 0x8\n 53175: a1 = a1 | a4\n 53178: a5 = a5 << 0x10\n 53181: s1 = s1 << 0x18\n 53184: a5 = a5 | s1\n 53187: a1 = a1 | a5\n 53190: a4 = u8 [a0 + 0xd]\n 53193: a5 = u8 [a0 + 0xc]\n 53196: s1 = u8 [a0 + 0xe]\n 53199: a0 = u8 [a0 + 0xf]\n 53202: a4 = a4 << 0x8\n 53205: a4 = a4 | a5\n 53208: s1 = s1 << 0x10\n 53211: a0 = a0 << 0x18\n 53214: a0 = a0 | s1\n 53217: a0 = a0 | a4\n 53220: a0 = a0 << 0x20\n 53223: a0 = a0 | a1\n 53226: s1 = reverse a0\n 53228: a1 = reverse a3\n 53230: a2 = reverse a2\n 53232: a0 = reverse t0\n 53234: u64 [sp + 0x18] = a0\n 53237: u64 [sp + 0x10] = a2\n 53240: a0 = a0 | a2\n 53243: a2 = a1\n 53245: a1 = a1 | s1\n 53248: a1 = a1 | a0\n 53251: a1 = a1 >> 0x20\n 53254: a0 = a0 | s1\n 53257: a0 = a0 << 0x20\n 53260: a0 = a0 | a1\n 53263: jump @786 if a0 != 0\n      : @783 (gas: 5)\n 53267: u64 [sp + 0x8] = a2\n 53270: i32 a0 = a2 + 0\n 53272: a1 = 0x20\n 53275: u64 [sp] = a0\n 53277: ra = 662, jump @0\n      : @784 [@dyn 331] (gas: 50)\n 53284: u8 [a0 + 31] = 0\n 53287: u8 [a0 + 30] = 0\n 53290: u8 [a0 + 29] = 0\n 53293: u8 [a0 + 28] = 0\n 53296: u8 [a0 + 27] = 0\n 53299: u8 [a0 + 26] = 0\n 53302: u8 [a0 + 25] = 0\n 53305: u8 [a0 + 24] = 0\n 53308: u8 [a0 + 23] = 0\n 53311: u8 [a0 + 22] = 0\n 53314: u8 [a0 + 21] = 0\n 53317: u8 [a0 + 20] = 0\n 53320: u8 [a0 + 19] = 0\n 53323: u8 [a0 + 18] = 0\n 53326: u8 [a0 + 17] = 0\n 53329: u8 [a0 + 16] = 0\n 53332: u8 [a0 + 15] = 0\n 53335: u8 [a0 + 14] = 0\n 53338: u8 [a0 + 13] = 0\n 53341: u8 [a0 + 12] = 0\n 53344: u8 [a0 + 11] = 0\n 53347: u8 [a0 + 10] = 0\n 53350: u8 [a0 + 9] = 0\n 53353: u8 [a0 + 8] = 0\n 53356: u8 [a0 + 7] = 0\n 53359: u8 [a0 + 6] = 0\n 53362: u8 [a0 + 5] = 0\n 53365: u8 [a0 + 4] = 0\n 53368: u8 [a0 + 3] = 0xa0\n 53373: u8 [a0 + 2] = 0x79\n 53377: u8 [a0 + 1] = 0xc3\n 53382: u8 [a0 + 0] = 0x8\n 53385: a1 = u64 [sp + 0x8]\n 53388: a0 = a1 + 0x4\n 53391: a1 = a0 <u a1\n 53394: a3 = u64 [sp + 0x18]\n 53397: a2 = a3 + a1\n 53400: a3 = a2 <u a3\n 53403: a3 = a1 if a1 == 0\n 53406: a3 = a3 + s1\n 53409: a1 = a3 <u s1\n 53412: a4 = u64 [sp + 0x10]\n 53415: a4 = a4 + a1\n 53418: u64 [sp + 0x28] = a2\n 53421: u64 [sp + 0x20] = a0\n 53424: u64 [sp + 0x30] = a3\n 53427: a0 = sp + 0x40\n 53430: a1 = sp + 0x20\n 53433: u64 [sp + 0x38] = a4\n 53436: ra = 664, jump @769\n      : @785 [@dyn 332] (gas: 30)\n 53442: a0 = u64 [sp + 0x48]\n 53445: t0 = u64 [sp + 0x58]\n 53448: t1 = u64 [sp + 0x40]\n 53451: a3 = u64 [sp + 0x50]\n 53454: a1 = u64 [sp + 0x18]\n 53457: a4 = a0 ^ a1\n 53460: a5 = a0 <u a1\n 53463: t2 = a1\n 53465: a2 = u64 [sp + 0x8]\n 53468: a1 = t1 <u a2\n 53471: a5 = a1 if a4 == 0\n 53474: a4 = a3 - s1\n 53477: a3 = a3 <u s1\n 53480: s1 = u64 [sp + 0x10]\n 53483: s1 = t0 - s1\n 53486: s1 = s1 - a3\n 53489: a3 = a4 <u a5\n 53492: s1 = s1 - a3\n 53495: a4 = a4 - a5\n 53498: a0 = a0 - t2\n 53501: a1 = a0 - a1\n 53504: a0 = t1 - a2\n 53507: a1 = a1 | s1\n 53510: a2 = a0 | a4\n 53513: a2 = a2 | a1\n 53516: a1 = a1 | a4\n 53519: a2 = a2 >> 0x20\n 53522: a1 = a1 << 0x20\n 53525: a1 = a1 | a2\n 53528: jump @787 if a1 == 0\n      : @786 (gas: 1)\n 53531: trap\n      : @787 (gas: 4)\n 53532: i32 s1 = a0 + 0\n 53534: a0 = u64 [sp]\n 53536: a1 = s1\n 53538: ra = 666, jump @0\n      : @788 [@dyn 333] (gas: 6)\n 53545: i32 a1 = a0 + 0\n 53547: a0 = 0x1\n 53550: a2 = s1\n 53552: ra = 0x29c\n 53556: ecalli 14 // 'seal_return'\n 53558: fallthrough\n      : @789 [@dyn 334] (gas: 15)\n 53559: sp = sp + 0xffffffffffffffd0\n 53562: u64 [sp + 0x28] = ra\n 53565: u64 [sp + 0x20] = s0\n 53568: s0 = sp + 0x30\n 53571: sp = sp & 0xfffffffffffffff0\n 53574: a1 = u64 [a0]\n 53576: a2 = u64 [a0 + 0x8]\n 53579: a3 = u64 [a0 + 0x10]\n 53582: a0 = u64 [a0 + 0x18]\n 53585: u64 [sp + 0x18] = a0\n 53588: u64 [sp + 0x10] = a3\n 53591: u64 [sp + 0x8] = a2\n 53594: a0 = sp\n 53596: u64 [sp] = a1\n 53598: ra = 670, jump @753\n      : @790 [@dyn 335] (gas: 5)\n 53604: sp = s0 + 0xffffffffffffffd0\n 53607: ra = u64 [sp + 0x28]\n 53610: s0 = u64 [sp + 0x20]\n 53613: sp = sp + 0x30\n 53616: ret\n      : @791 (gas: 17)\n 53618: sp = sp + 0xffffffffffffffa0\n 53621: u64 [sp + 0x58] = ra\n 53624: u64 [sp + 0x50] = s0\n 53627: u64 [sp + 0x48] = s1\n 53630: a3 = u64 [a1 + 0x18]\n 53633: a4 = u64 [a1 + 0x10]\n 53636: a5 = u64 [a1 + 0x8]\n 53639: s1 = u64 [a1]\n 53641: a1 = a5 | a3\n 53644: a2 = s1 | a4\n 53647: a2 = a2 | a1\n 53650: a2 = a2 >> 0x20\n 53653: a1 = a1 | a4\n 53656: a1 = a1 << 0x20\n 53659: a1 = a1 | a2\n 53662: u64 [sp + 0x20] = a0\n 53665: jump @800 if a1 != 0\n      : @792 (gas: 19)\n 53669: a0 = s1 + 0x20\n 53672: u64 [sp + 0x38] = a0\n 53675: a0 = a0 <u s1\n 53678: a1 = a5 + a0\n 53681: u64 [sp + 0x40] = a1\n 53684: u64 [sp + 0x8] = a5\n 53687: s0 = a1 <u a5\n 53690: s0 = a0 if a0 == 0\n 53693: s0 = s0 + a4\n 53696: u64 [sp + 0x10] = a4\n 53699: a0 = s0 <u a4\n 53702: u64 [sp + 0x18] = a3\n 53705: a0 = a0 + a3\n 53708: u64 [sp + 0x30] = a0\n 53711: u64 [sp] = s1\n 53713: i32 a0 = s1 + 0\n 53715: a1 = 0x20\n 53718: s1 = 0x20\n 53721: ra = 672, jump @0\n      : @793 [@dyn 336] (gas: 43)\n 53728: u8 [a0 + 0x1f] = s1\n 53731: a1 = u64 [sp + 0x38]\n 53734: a1 = a1 | s0\n 53737: a2 = u64 [sp + 0x40]\n 53740: a3 = u64 [sp + 0x30]\n 53743: a2 = a2 | a3\n 53746: a1 = a1 | a2\n 53749: a1 = a1 >> 0x20\n 53752: a2 = a2 | s0\n 53755: a2 = a2 << 0x20\n 53758: a1 = a1 | a2\n 53761: u8 [a0 + 30] = 0\n 53764: u8 [a0 + 29] = 0\n 53767: u8 [a0 + 28] = 0\n 53770: u8 [a0 + 27] = 0\n 53773: u8 [a0 + 26] = 0\n 53776: u8 [a0 + 25] = 0\n 53779: u8 [a0 + 24] = 0\n 53782: u8 [a0 + 23] = 0\n 53785: u8 [a0 + 22] = 0\n 53788: u8 [a0 + 21] = 0\n 53791: u8 [a0 + 20] = 0\n 53794: u8 [a0 + 19] = 0\n 53797: u8 [a0 + 18] = 0\n 53800: u8 [a0 + 17] = 0\n 53803: u8 [a0 + 16] = 0\n 53806: u8 [a0 + 15] = 0\n 53809: u8 [a0 + 14] = 0\n 53812: u8 [a0 + 13] = 0\n 53815: u8 [a0 + 12] = 0\n 53818: u8 [a0 + 11] = 0\n 53821: u8 [a0 + 10] = 0\n 53824: u8 [a0 + 9] = 0\n 53827: u8 [a0 + 8] = 0\n 53830: u8 [a0 + 7] = 0\n 53833: u8 [a0 + 6] = 0\n 53836: u8 [a0 + 5] = 0\n 53839: u8 [a0 + 4] = 0\n 53842: u8 [a0 + 3] = 0\n 53845: u8 [a0 + 2] = 0\n 53848: u8 [a0 + 1] = 0\n 53851: u8 [a0 + 0] = 0\n 53853: jump @800 if a1 != 0\n      : @794 (gas: 6)\n 53857: s1 = s0\n 53859: s0 = u64 [sp + 0x38]\n 53862: i32 a0 = s0 + 0\n 53864: a1 = 0x20\n 53867: u64 [sp + 0x28] = a0\n 53870: ra = 674, jump @0\n      : @795 [@dyn 337] (gas: 42)\n 53877: u8 [a0 + 31] = 0x24\n 53881: u8 [a0 + 30] = 0\n 53884: u8 [a0 + 29] = 0\n 53887: u8 [a0 + 28] = 0\n 53890: u8 [a0 + 27] = 0\n 53893: u8 [a0 + 26] = 0\n 53896: u8 [a0 + 25] = 0\n 53899: u8 [a0 + 24] = 0\n 53902: u8 [a0 + 23] = 0\n 53905: u8 [a0 + 22] = 0\n 53908: u8 [a0 + 21] = 0\n 53911: u8 [a0 + 20] = 0\n 53914: u8 [a0 + 19] = 0\n 53917: u8 [a0 + 18] = 0\n 53920: u8 [a0 + 17] = 0\n 53923: u8 [a0 + 16] = 0\n 53926: u8 [a0 + 15] = 0\n 53929: u8 [a0 + 14] = 0\n 53932: u8 [a0 + 13] = 0\n 53935: u8 [a0 + 12] = 0\n 53938: u8 [a0 + 11] = 0\n 53941: u8 [a0 + 10] = 0\n 53944: u8 [a0 + 9] = 0\n 53947: u8 [a0 + 8] = 0\n 53950: u8 [a0 + 7] = 0\n 53953: u8 [a0 + 6] = 0\n 53956: u8 [a0 + 5] = 0\n 53959: u8 [a0 + 4] = 0\n 53962: u8 [a0 + 3] = 0\n 53965: u8 [a0 + 2] = 0\n 53968: u8 [a0 + 1] = 0\n 53971: a1 = u64 [sp + 0x30]\n 53974: a3 = s1 | a1\n 53977: s1 = 0x100000000\n 53987: a1 = 0xffffffe0\n 53997: a1 = s0 <u a1\n 54000: a2 = u64 [sp + 0x40]\n 54003: a1 = 0 if a2 != 0\n 54005: u64 [sp + 0x30] = a3\n 54008: a1 = 0 if a3 != 0\n 54010: u8 [a0 + 0] = 0\n 54012: jump @800 if a1 == 0\n      : @796 (gas: 4)\n 54016: a0 = u64 [sp + 0x28]\n 54019: i32 a0 = a0 + 0x20\n 54022: a1 = 0x20\n 54025: ra = 676, jump @0\n      : @797 [@dyn 338] (gas: 42)\n 54032: u8 [a0 + 27] = 0x73\n 54036: u8 [a0 + 25] = 0x64\n 54040: u8 [a0 + 23] = 0x6c\n 54044: u8 [a0 + 21] = 0x76\n 54048: u8 [a0 + 19] = 0x49\n 54052: u8 [a0 + 26] = 0x20\n 54056: u8 [a0 + 18] = 0x20\n 54060: u8 [a0 + 17] = 0x3a\n 54064: u8 [a0 + 13] = 0x66\n 54068: u8 [a0 + 9] = 0x56\n 54072: u8 [a0 + 31] = 0x61\n 54076: u8 [a0 + 22] = 0x61\n 54080: u8 [a0 + 4] = 0x61\n 54084: u8 [a0 + 30] = 0x6e\n 54088: u8 [a0 + 20] = 0x6e\n 54092: u8 [a0 + 3] = 0x6e\n 54096: u8 [a0 + 29] = 0x67\n 54100: u8 [a0 + 2] = 0x67\n 54104: u8 [a0 + 28] = 0x69\n 54108: u8 [a0 + 24] = 0x69\n 54112: u8 [a0 + 14] = 0x69\n 54116: u8 [a0 + 12] = 0x69\n 54120: u8 [a0 + 1] = 0x69\n 54124: u8 [a0 + 0] = 0x53\n 54127: s0 = 0x72\n 54130: u8 [a0 + 0x10] = s0\n 54133: a1 = s1 + 0xffffffffffffffc0\n 54136: a2 = u64 [sp + 0x38]\n 54139: a1 = a2 <u a1\n 54142: s1 = 0x65\n 54145: u8 [a0 + 0xf] = s1\n 54148: u8 [a0 + 0xb] = s0\n 54151: u8 [a0 + 0xa] = s1\n 54154: u8 [a0 + 0x8] = s1\n 54157: u8 [a0 + 0x7] = s0\n 54160: a2 = u64 [sp + 0x40]\n 54163: a1 = 0 if a2 != 0\n 54165: u8 [a0 + 6] = 0x75\n 54169: a2 = u64 [sp + 0x30]\n 54172: a1 = 0 if a2 != 0\n 54174: u8 [a0 + 5] = 0x74\n 54178: jump @800 if a1 == 0\n      : @798 (gas: 4)\n 54182: a0 = u64 [sp + 0x28]\n 54185: i32 a0 = a0 + 0x40\n 54188: a1 = 0x20\n 54191: ra = 678, jump @0\n      : @799 [@dyn 339] (gas: 54)\n 54198: u8 [a0 + 31] = 0\n 54201: u8 [a0 + 30] = 0\n 54204: u8 [a0 + 29] = 0\n 54207: u8 [a0 + 28] = 0\n 54210: u8 [a0 + 27] = 0\n 54213: u8 [a0 + 26] = 0\n 54216: u8 [a0 + 25] = 0\n 54219: u8 [a0 + 24] = 0\n 54222: u8 [a0 + 23] = 0\n 54225: u8 [a0 + 22] = 0\n 54228: u8 [a0 + 21] = 0\n 54231: u8 [a0 + 20] = 0\n 54234: u8 [a0 + 19] = 0\n 54237: u8 [a0 + 18] = 0\n 54240: u8 [a0 + 17] = 0\n 54243: u8 [a0 + 16] = 0\n 54246: u8 [a0 + 15] = 0\n 54249: u8 [a0 + 14] = 0\n 54252: u8 [a0 + 13] = 0\n 54255: u8 [a0 + 12] = 0\n 54258: u8 [a0 + 11] = 0\n 54261: u8 [a0 + 10] = 0\n 54264: u8 [a0 + 9] = 0\n 54267: u8 [a0 + 8] = 0\n 54270: u8 [a0 + 7] = 0\n 54273: u8 [a0 + 6] = 0\n 54276: u8 [a0 + 5] = 0\n 54279: u8 [a0 + 4] = 0\n 54282: u8 [a0 + 0x3] = s1\n 54285: u8 [a0 + 0x2] = s0\n 54288: u8 [a0 + 1] = 0x75\n 54292: u8 [a0 + 0] = 0x74\n 54295: a1 = u64 [sp]\n 54297: a0 = a1 + 0x80\n 54301: a1 = a0 <u a1\n 54304: a3 = u64 [sp + 0x8]\n 54307: a2 = a3 + a1\n 54310: a3 = a2 <u a3\n 54313: a3 = a1 if a1 == 0\n 54316: a1 = u64 [sp + 0x10]\n 54319: a3 = a3 + a1\n 54322: a1 = a3 <u a1\n 54325: a4 = u64 [sp + 0x18]\n 54328: a1 = a1 + a4\n 54331: a4 = u64 [sp + 0x20]\n 54334: u64 [a4] = a0\n 54336: u64 [a4 + 0x8] = a2\n 54339: u64 [a4 + 0x10] = a3\n 54342: u64 [a4 + 0x18] = a1\n 54345: ra = u64 [sp + 0x58]\n 54348: s0 = u64 [sp + 0x50]\n 54351: s1 = u64 [sp + 0x48]\n 54354: sp = sp + 0x60\n 54357: ret\n      : @800 (gas: 1)\n 54359: trap\n      : @801 [@dyn 340] (gas: 30)\n 54360: a0 = u64 [sp + 0x138]\n 54364: u64 [sp + 0x20] = a0\n 54367: a0 = u64 [sp + 0x130]\n 54371: u64 [sp + 0x18] = a0\n 54374: a0 = u64 [sp + 0x128]\n 54378: u64 [sp + 0x10] = a0\n 54381: a0 = u64 [sp + 0x120]\n 54385: u64 [sp + 0x8] = a0\n 54388: a0 = u64 [sp + 0x110]\n 54392: u64 [sp + 0x38] = a0\n 54395: a0 = u64 [sp + 0x108]\n 54399: u64 [sp + 0x28] = a0\n 54402: a0 = u64 [sp + 0x100]\n 54406: u64 [sp + 0x30] = a0\n 54409: u64 [sp + 344] = 0\n 54413: u64 [sp + 336] = 0\n 54417: u64 [sp + 328] = 0\n 54421: u64 [sp + 320] = 0x2\n 54426: u64 [sp + 376] = 0\n 54430: u64 [sp + 368] = 0\n 54434: u64 [sp + 360] = 0\n 54438: u64 [sp + 352] = 0\n 54442: u32 [sp + 384] = 0x20\n 54447: i32 a1 = sp + 0x140\n 54451: i32 a3 = sp + 0x160\n 54455: i32 a4 = sp + 0x180\n 54459: a2 = 0xffffffffffffffff\n 54462: a0 = 0\n 54464: ecalli 8 // 'get_storage'\n 54466: fallthrough\n      : @802 (gas: 14)\n 54467: a0 = u64 [sp + 0x168]\n 54471: a1 = u64 [sp + 0x160]\n 54475: a2 = u64 [sp + 0x170]\n 54479: a3 = u64 [sp + 0x28]\n 54482: a0 = a0 ^ a3\n 54485: a3 = u64 [sp + 0x30]\n 54488: a1 = a1 ^ a3\n 54491: a3 = u64 [sp + 0x38]\n 54494: a2 = a2 ^ a3\n 54497: a2 = a2 << 0x20\n 54500: a2 = a2 >> 0x20\n 54503: a0 = a0 | a1\n 54506: a0 = a0 | a2\n 54509: jump @804 if a0 != 0\n      : @803 (gas: 14)\n 54512: a0 = u64 [sp + 0x8]\n 54515: u64 [s1] = a0\n 54517: a0 = u64 [sp + 0x10]\n 54520: u64 [s1 + 0x8] = a0\n 54523: a0 = u64 [sp + 0x18]\n 54526: u64 [s1 + 0x10] = a0\n 54529: a0 = u64 [sp + 0x20]\n 54532: u64 [s1 + 0x18] = a0\n 54535: sp = s0 + 0xfffffffffffffe60\n 54539: ra = u64 [sp + 0x198]\n 54543: s0 = u64 [sp + 0x190]\n 54547: s1 = u64 [sp + 0x188]\n 54551: sp = sp + 0x1a0\n 54555: ret\n      : @804 (gas: 3)\n 54557: a0 = 0x40\n 54560: a1 = 0x20\n 54563: ra = 682, jump @0\n      : @805 [@dyn 341] (gas: 103)\n 54570: a1 = u8 [a0 + 0x11]\n 54573: a2 = u8 [a0 + 0x10]\n 54576: a3 = u8 [a0 + 0x12]\n 54579: a4 = u8 [a0 + 0x13]\n 54582: a1 = a1 << 0x8\n 54585: a1 = a1 | a2\n 54588: a3 = a3 << 0x10\n 54591: a4 = a4 << 0x18\n 54594: a3 = a3 | a4\n 54597: a1 = a1 | a3\n 54600: a2 = u8 [a0 + 0x15]\n 54603: a3 = u8 [a0 + 0x14]\n 54606: a4 = u8 [a0 + 0x16]\n 54609: a5 = u8 [a0 + 0x17]\n 54612: a2 = a2 << 0x8\n 54615: a2 = a2 | a3\n 54618: a4 = a4 << 0x10\n 54621: a5 = a5 << 0x18\n 54624: a4 = a4 | a5\n 54627: a2 = a2 | a4\n 54630: a2 = a2 << 0x20\n 54633: t0 = a2 | a1\n 54636: a2 = u8 [a0 + 0x1]\n 54639: a3 = u8 [a0]\n 54641: a4 = u8 [a0 + 0x2]\n 54644: a5 = u8 [a0 + 0x3]\n 54647: a2 = a2 << 0x8\n 54650: a2 = a2 | a3\n 54653: a4 = a4 << 0x10\n 54656: a5 = a5 << 0x18\n 54659: a4 = a4 | a5\n 54662: a2 = a2 | a4\n 54665: a3 = u8 [a0 + 0x5]\n 54668: a4 = u8 [a0 + 0x4]\n 54671: a5 = u8 [a0 + 0x6]\n 54674: s1 = u8 [a0 + 0x7]\n 54677: a3 = a3 << 0x8\n 54680: a3 = a3 | a4\n 54683: a5 = a5 << 0x10\n 54686: s1 = s1 << 0x18\n 54689: a5 = a5 | s1\n 54692: a3 = a3 | a5\n 54695: a3 = a3 << 0x20\n 54698: a2 = a2 | a3\n 54701: a3 = u8 [a0 + 0x19]\n 54704: a4 = u8 [a0 + 0x18]\n 54707: a5 = u8 [a0 + 0x1a]\n 54710: s1 = u8 [a0 + 0x1b]\n 54713: a3 = a3 << 0x8\n 54716: a3 = a3 | a4\n 54719: a5 = a5 << 0x10\n 54722: s1 = s1 << 0x18\n 54725: a5 = a5 | s1\n 54728: a3 = a3 | a5\n 54731: a4 = u8 [a0 + 0x1d]\n 54734: a5 = u8 [a0 + 0x1c]\n 54737: s1 = u8 [a0 + 0x1e]\n 54740: a1 = u8 [a0 + 0x1f]\n 54743: a4 = a4 << 0x8\n 54746: a4 = a4 | a5\n 54749: s1 = s1 << 0x10\n 54752: a1 = a1 << 0x18\n 54755: a1 = a1 | s1\n 54758: a1 = a1 | a4\n 54761: a1 = a1 << 0x20\n 54764: a3 = a3 | a1\n 54767: a1 = u8 [a0 + 0x9]\n 54770: a4 = u8 [a0 + 0x8]\n 54773: a5 = u8 [a0 + 0xa]\n 54776: s1 = u8 [a0 + 0xb]\n 54779: a1 = a1 << 0x8\n 54782: a1 = a1 | a4\n 54785: a5 = a5 << 0x10\n 54788: s1 = s1 << 0x18\n 54791: a5 = a5 | s1\n 54794: a1 = a1 | a5\n 54797: a4 = u8 [a0 + 0xd]\n 54800: a5 = u8 [a0 + 0xc]\n 54803: s1 = u8 [a0 + 0xe]\n 54806: a0 = u8 [a0 + 0xf]\n 54809: a4 = a4 << 0x8\n 54812: a4 = a4 | a5\n 54815: s1 = s1 << 0x10\n 54818: a0 = a0 << 0x18\n 54821: a0 = a0 | s1\n 54824: a0 = a0 | a4\n 54827: a0 = a0 << 0x20\n 54830: a0 = a0 | a1\n 54833: s1 = reverse a0\n 54835: a1 = reverse a3\n 54837: a2 = reverse a2\n 54839: a0 = reverse t0\n 54841: u64 [sp + 0x38] = a0\n 54844: u64 [sp + 0x30] = a2\n 54847: a0 = a0 | a2\n 54850: a2 = a1\n 54852: a1 = a1 | s1\n 54855: a1 = a1 | a0\n 54858: a1 = a1 >> 0x20\n 54861: a0 = a0 | s1\n 54864: a0 = a0 << 0x20\n 54867: a0 = a0 | a1\n 54870: jump @809 if a0 != 0\n      : @806 (gas: 5)\n 54874: u64 [sp + 0x28] = a2\n 54877: i32 a0 = a2 + 0\n 54879: a1 = 0x20\n 54882: u64 [sp + 0x20] = a0\n 54885: ra = 684, jump @0\n      : @807 [@dyn 342] (gas: 50)\n 54892: u8 [a0 + 31] = 0\n 54895: u8 [a0 + 30] = 0\n 54898: u8 [a0 + 29] = 0\n 54901: u8 [a0 + 28] = 0\n 54904: u8 [a0 + 27] = 0\n 54907: u8 [a0 + 26] = 0\n 54910: u8 [a0 + 25] = 0\n 54913: u8 [a0 + 24] = 0\n 54916: u8 [a0 + 23] = 0\n 54919: u8 [a0 + 22] = 0\n 54922: u8 [a0 + 21] = 0\n 54925: u8 [a0 + 20] = 0\n 54928: u8 [a0 + 19] = 0\n 54931: u8 [a0 + 18] = 0\n 54934: u8 [a0 + 17] = 0\n 54937: u8 [a0 + 16] = 0\n 54940: u8 [a0 + 15] = 0\n 54943: u8 [a0 + 14] = 0\n 54946: u8 [a0 + 13] = 0\n 54949: u8 [a0 + 12] = 0\n 54952: u8 [a0 + 11] = 0\n 54955: u8 [a0 + 10] = 0\n 54958: u8 [a0 + 9] = 0\n 54961: u8 [a0 + 8] = 0\n 54964: u8 [a0 + 7] = 0\n 54967: u8 [a0 + 6] = 0\n 54970: u8 [a0 + 5] = 0\n 54973: u8 [a0 + 4] = 0\n 54976: u8 [a0 + 3] = 0xa0\n 54981: u8 [a0 + 2] = 0x79\n 54985: u8 [a0 + 1] = 0xc3\n 54990: u8 [a0 + 0] = 0x8\n 54993: a1 = u64 [sp + 0x28]\n 54996: a0 = a1 + 0x4\n 54999: a1 = a0 <u a1\n 55002: a3 = u64 [sp + 0x38]\n 55005: a2 = a3 + a1\n 55008: a3 = a2 <u a3\n 55011: a3 = a1 if a1 == 0\n 55014: a3 = a3 + s1\n 55017: a1 = a3 <u s1\n 55020: a4 = u64 [sp + 0x30]\n 55023: a4 = a4 + a1\n 55026: u64 [sp + 0x48] = a2\n 55029: u64 [sp + 0x40] = a0\n 55032: u64 [sp + 0x50] = a3\n 55035: a0 = sp + 0x60\n 55038: a1 = sp + 0x40\n 55041: u64 [sp + 0x58] = a4\n 55044: ra = 686, jump @791\n      : @808 [@dyn 343] (gas: 30)\n 55050: a0 = u64 [sp + 0x68]\n 55053: t0 = u64 [sp + 0x78]\n 55056: t1 = u64 [sp + 0x60]\n 55059: a3 = u64 [sp + 0x70]\n 55062: a1 = u64 [sp + 0x38]\n 55065: a4 = a0 ^ a1\n 55068: a5 = a0 <u a1\n 55071: t2 = a1\n 55073: a2 = u64 [sp + 0x28]\n 55076: a1 = t1 <u a2\n 55079: a5 = a1 if a4 == 0\n 55082: a4 = a3 - s1\n 55085: a3 = a3 <u s1\n 55088: s1 = u64 [sp + 0x30]\n 55091: s1 = t0 - s1\n 55094: s1 = s1 - a3\n 55097: a3 = a4 <u a5\n 55100: s1 = s1 - a3\n 55103: a4 = a4 - a5\n 55106: a0 = a0 - t2\n 55109: a1 = a0 - a1\n 55112: a0 = t1 - a2\n 55115: a1 = a1 | s1\n 55118: a2 = a0 | a4\n 55121: a2 = a2 | a1\n 55124: a1 = a1 | a4\n 55127: a2 = a2 >> 0x20\n 55130: a1 = a1 << 0x20\n 55133: a1 = a1 | a2\n 55136: jump @810 if a1 == 0\n      : @809 (gas: 1)\n 55139: trap\n      : @810 (gas: 4)\n 55140: i32 s1 = a0 + 0\n 55142: a0 = u64 [sp + 0x20]\n 55145: a1 = s1\n 55147: ra = 688, jump @0\n      : @811 [@dyn 344] (gas: 6)\n 55154: i32 a1 = a0 + 0\n 55156: a0 = 0x1\n 55159: a2 = s1\n 55161: ra = 0x2b2\n 55165: ecalli 14 // 'seal_return'\n 55167: fallthrough\n      : @812 [@dyn 345] (gas: 9)\n 55168: a2 = u64 [a1 + 0x18]\n 55171: a3 = u64 [a1 + 0x10]\n 55174: a4 = u64 [a1 + 0x8]\n 55177: a1 = u64 [a1]\n 55179: u64 [a0 + 0x18] = a2\n 55182: u64 [a0 + 0x10] = a3\n 55185: u64 [a0 + 0x8] = a4\n 55188: u64 [a0] = a1\n 55190: ret\n      : @813 (gas: 17)\n 55192: sp = sp + 0xffffffffffffffa0\n 55195: u64 [sp + 0x58] = ra\n 55198: u64 [sp + 0x50] = s0\n 55201: u64 [sp + 0x48] = s1\n 55204: a3 = u64 [a1 + 0x18]\n 55207: a4 = u64 [a1 + 0x10]\n 55210: a5 = u64 [a1 + 0x8]\n 55213: s1 = u64 [a1]\n 55215: a1 = a5 | a3\n 55218: a2 = s1 | a4\n 55221: a2 = a2 | a1\n 55224: a2 = a2 >> 0x20\n 55227: a1 = a1 | a4\n 55230: a1 = a1 << 0x20\n 55233: a1 = a1 | a2\n 55236: u64 [sp + 0x28] = a0\n 55239: jump @820 if a1 != 0\n      : @814 (gas: 19)\n 55243: a0 = s1 + 0x20\n 55246: u64 [sp + 0x30] = a0\n 55249: a0 = a0 <u s1\n 55252: a1 = a5 + a0\n 55255: u64 [sp + 0x40] = a1\n 55258: u64 [sp + 0x8] = a5\n 55261: s0 = a1 <u a5\n 55264: s0 = a0 if a0 == 0\n 55267: s0 = s0 + a4\n 55270: u64 [sp + 0x10] = a4\n 55273: a0 = s0 <u a4\n 55276: u64 [sp + 0x18] = a3\n 55279: a0 = a0 + a3\n 55282: u64 [sp + 0x38] = a0\n 55285: u64 [sp] = s1\n 55287: i32 a0 = s1 + 0\n 55289: a1 = 0x20\n 55292: s1 = 0x20\n 55295: ra = 692, jump @0\n      : @815 [@dyn 346] (gas: 45)\n 55302: u8 [a0 + 0x1f] = s1\n 55305: a1 = u64 [sp + 0x30]\n 55308: s1 = a1\n 55310: a1 = a1 | s0\n 55313: a2 = u64 [sp + 0x40]\n 55316: a4 = u64 [sp + 0x38]\n 55319: a2 = a2 | a4\n 55322: a1 = a1 | a2\n 55325: a1 = a1 >> 0x20\n 55328: u64 [sp + 0x20] = s0\n 55331: a2 = a2 | s0\n 55334: a2 = a2 << 0x20\n 55337: a1 = a1 | a2\n 55340: u8 [a0 + 30] = 0\n 55343: u8 [a0 + 29] = 0\n 55346: u8 [a0 + 28] = 0\n 55349: u8 [a0 + 27] = 0\n 55352: u8 [a0 + 26] = 0\n 55355: u8 [a0 + 25] = 0\n 55358: u8 [a0 + 24] = 0\n 55361: u8 [a0 + 23] = 0\n 55364: u8 [a0 + 22] = 0\n 55367: u8 [a0 + 21] = 0\n 55370: u8 [a0 + 20] = 0\n 55373: u8 [a0 + 19] = 0\n 55376: u8 [a0 + 18] = 0\n 55379: u8 [a0 + 17] = 0\n 55382: u8 [a0 + 16] = 0\n 55385: u8 [a0 + 15] = 0\n 55388: u8 [a0 + 14] = 0\n 55391: u8 [a0 + 13] = 0\n 55394: u8 [a0 + 12] = 0\n 55397: u8 [a0 + 11] = 0\n 55400: u8 [a0 + 10] = 0\n 55403: u8 [a0 + 9] = 0\n 55406: u8 [a0 + 8] = 0\n 55409: u8 [a0 + 7] = 0\n 55412: u8 [a0 + 6] = 0\n 55415: u8 [a0 + 5] = 0\n 55418: u8 [a0 + 4] = 0\n 55421: u8 [a0 + 3] = 0\n 55424: u8 [a0 + 2] = 0\n 55427: u8 [a0 + 1] = 0\n 55430: u8 [a0 + 0] = 0\n 55432: jump @820 if a1 != 0\n      : @816 (gas: 4)\n 55436: i32 s0 = s1 + 0\n 55438: a1 = 0x20\n 55441: a0 = s0\n 55443: ra = 694, jump @0\n      : @817 [@dyn 347] (gas: 41)\n 55450: u8 [a0 + 31] = 0x1b\n 55454: u8 [a0 + 30] = 0\n 55457: u8 [a0 + 29] = 0\n 55460: u8 [a0 + 28] = 0\n 55463: u8 [a0 + 27] = 0\n 55466: u8 [a0 + 26] = 0\n 55469: u8 [a0 + 25] = 0\n 55472: u8 [a0 + 24] = 0\n 55475: u8 [a0 + 23] = 0\n 55478: u8 [a0 + 22] = 0\n 55481: u8 [a0 + 21] = 0\n 55484: u8 [a0 + 20] = 0\n 55487: u8 [a0 + 19] = 0\n 55490: u8 [a0 + 18] = 0\n 55493: u8 [a0 + 17] = 0\n 55496: u8 [a0 + 16] = 0\n 55499: u8 [a0 + 15] = 0\n 55502: u8 [a0 + 14] = 0\n 55505: u8 [a0 + 13] = 0\n 55508: u8 [a0 + 12] = 0\n 55511: u8 [a0 + 11] = 0\n 55514: u8 [a0 + 10] = 0\n 55517: u8 [a0 + 9] = 0\n 55520: u8 [a0 + 8] = 0\n 55523: u8 [a0 + 7] = 0\n 55526: u8 [a0 + 6] = 0\n 55529: u8 [a0 + 5] = 0\n 55532: u8 [a0 + 4] = 0\n 55535: u8 [a0 + 3] = 0\n 55538: u8 [a0 + 2] = 0\n 55541: u8 [a0 + 1] = 0\n 55544: a1 = u64 [sp + 0x20]\n 55547: a2 = u64 [sp + 0x38]\n 55550: a1 = a1 | a2\n 55553: a2 = 0xffffffe0\n 55563: a2 = s1 <u a2\n 55566: a3 = u64 [sp + 0x40]\n 55569: a2 = 0 if a3 != 0\n 55571: a2 = 0 if a1 != 0\n 55573: u8 [a0 + 0] = 0\n 55575: jump @820 if a2 == 0\n      : @818 (gas: 3)\n 55579: i32 a0 = s0 + 0x20\n 55582: a1 = 0x20\n 55585: ra = 696, jump @0\n      : @819 [@dyn 348] (gas: 54)\n 55592: u8 [a0 + 23] = 0x65\n 55596: u8 [a0 + 20] = 0x68\n 55600: u8 [a0 + 17] = 0x75\n 55604: u8 [a0 + 16] = 0x70\n 55608: u8 [a0 + 26] = 0x64\n 55612: u8 [a0 + 14] = 0x64\n 55616: u8 [a0 + 12] = 0x6c\n 55620: u8 [a0 + 21] = 0x61\n 55624: u8 [a0 + 11] = 0x61\n 55628: u8 [a0 + 10] = 0x76\n 55632: u8 [a0 + 9] = 0x6e\n 55636: u8 [a0 + 25] = 0x69\n 55640: u8 [a0 + 13] = 0x69\n 55644: u8 [a0 + 8] = 0x69\n 55648: u8 [a0 + 31] = 0\n 55651: u8 [a0 + 30] = 0\n 55654: u8 [a0 + 29] = 0\n 55657: u8 [a0 + 28] = 0\n 55660: u8 [a0 + 27] = 0\n 55663: u8 [a0 + 24] = 0x20\n 55667: u8 [a0 + 15] = 0x20\n 55671: u8 [a0 + 7] = 0x20\n 55675: u8 [a0 + 6] = 0x3a\n 55679: u8 [a0 + 5] = 0x77\n 55683: u8 [a0 + 4] = 0x6f\n 55687: u8 [a0 + 18] = 0x72\n 55691: u8 [a0 + 3] = 0x72\n 55695: u8 [a0 + 19] = 0x63\n 55699: u8 [a0 + 2] = 0x63\n 55703: u8 [a0 + 22] = 0x73\n 55707: u8 [a0 + 1] = 0x73\n 55711: u8 [a0 + 0] = 0x45\n 55714: a1 = u64 [sp]\n 55716: a0 = a1 + 0x60\n 55719: a1 = a0 <u a1\n 55722: a3 = u64 [sp + 0x8]\n 55725: a2 = a3 + a1\n 55728: a3 = a2 <u a3\n 55731: a3 = a1 if a1 == 0\n 55734: a1 = u64 [sp + 0x10]\n 55737: a3 = a3 + a1\n 55740: a1 = a3 <u a1\n 55743: a4 = u64 [sp + 0x18]\n 55746: a1 = a1 + a4\n 55749: a4 = u64 [sp + 0x28]\n 55752: u64 [a4] = a0\n 55754: u64 [a4 + 0x8] = a2\n 55757: u64 [a4 + 0x10] = a3\n 55760: u64 [a4 + 0x18] = a1\n 55763: ra = u64 [sp + 0x58]\n 55766: s0 = u64 [sp + 0x50]\n 55769: s1 = u64 [sp + 0x48]\n 55772: sp = sp + 0x60\n 55775: ret\n      : @820 (gas: 1)\n 55777: trap\n      : @821 (gas: 17)\n 55778: sp = sp + 0xffffffffffffff38\n 55782: u64 [sp + 0xc0] = ra\n 55786: u64 [sp + 0xb8] = s0\n 55790: u64 [sp + 0xb0] = s1\n 55794: t0 = u64 [a1 + 0x18]\n 55797: s0 = u64 [a1 + 0x10]\n 55800: t1 = u64 [a1 + 0x8]\n 55803: s1 = u64 [a1]\n 55805: a1 = t1 | t0\n 55808: a5 = s1 | s0\n 55811: a5 = a5 | a1\n 55814: a5 = a5 >> 0x20\n 55817: a1 = a1 | s0\n 55820: a1 = a1 << 0x20\n 55823: a1 = a1 | a5\n 55826: u64 [sp + 0x30] = a0\n 55829: jump @834 if a1 != 0\n      : @822 (gas: 43)\n 55833: a0 = u64 [a4 + 0x18]\n 55836: u64 [sp + 0x8] = a0\n 55839: a0 = u64 [a4 + 0x10]\n 55842: u64 [sp + 0x10] = a0\n 55845: a0 = u64 [a4 + 0x8]\n 55848: u64 [sp + 0x18] = a0\n 55851: a0 = u64 [a4]\n 55853: u64 [sp + 0x20] = a0\n 55856: a0 = u64 [a3 + 0x18]\n 55859: u64 [sp + 0x88] = a0\n 55863: a0 = u64 [a3 + 0x10]\n 55866: u64 [sp + 0x80] = a0\n 55870: a0 = s1 + 0x40\n 55873: u64 [sp + 0xa0] = a0\n 55877: a0 = a0 <u s1\n 55880: a1 = t1 + a0\n 55883: u64 [sp + 0x98] = a1\n 55887: u64 [sp + 0x40] = t1\n 55890: a1 = a1 <u t1\n 55893: a1 = a0 if a0 == 0\n 55896: a0 = u64 [a3 + 0x8]\n 55899: u64 [sp + 0x78] = a0\n 55902: a0 = u64 [a3]\n 55904: u64 [sp + 0xa8] = a0\n 55908: a0 = u64 [a2 + 0x18]\n 55911: u64 [sp + 0x60] = a0\n 55914: a0 = u64 [a2 + 0x10]\n 55917: u64 [sp + 0x68] = a0\n 55920: a0 = u64 [a2 + 0x8]\n 55923: u64 [sp + 0x58] = a0\n 55926: a0 = u64 [a2]\n 55928: u64 [sp + 0x70] = a0\n 55931: a1 = a1 + s0\n 55934: u64 [sp + 0x90] = a1\n 55938: u64 [sp + 0x48] = s0\n 55941: a0 = a1 <u s0\n 55944: u64 [sp + 0x50] = t0\n 55947: s0 = t0 + a0\n 55950: u64 [sp + 0x38] = s1\n 55953: i32 a0 = s1 + 0\n 55955: a1 = 0x20\n 55958: u64 [sp] = a0\n 55960: ra = 698, jump @0\n      : @823 [@dyn 349] (gas: 43)\n 55967: a3 = u64 [sp + 0xa0]\n 55971: u8 [a0 + 31] = 0x40\n 55975: a4 = u64 [sp + 0x90]\n 55979: a1 = a3 | a4\n 55982: a2 = u64 [sp + 0x98]\n 55986: a2 = a2 | s0\n 55989: a1 = a1 | a2\n 55992: a1 = a1 >> 0x20\n 55995: a2 = a2 | a4\n 55998: a2 = a2 << 0x20\n 56001: a1 = a1 | a2\n 56004: u8 [a0 + 30] = 0\n 56007: u8 [a0 + 29] = 0\n 56010: u8 [a0 + 28] = 0\n 56013: u8 [a0 + 27] = 0\n 56016: u8 [a0 + 26] = 0\n 56019: u8 [a0 + 25] = 0\n 56022: u8 [a0 + 24] = 0\n 56025: u8 [a0 + 23] = 0\n 56028: u8 [a0 + 22] = 0\n 56031: u8 [a0 + 21] = 0\n 56034: u8 [a0 + 20] = 0\n 56037: u8 [a0 + 19] = 0\n 56040: u8 [a0 + 18] = 0\n 56043: u8 [a0 + 17] = 0\n 56046: u8 [a0 + 16] = 0\n 56049: u8 [a0 + 15] = 0\n 56052: u8 [a0 + 14] = 0\n 56055: u8 [a0 + 13] = 0\n 56058: u8 [a0 + 12] = 0\n 56061: u8 [a0 + 11] = 0\n 56064: u8 [a0 + 10] = 0\n 56067: u8 [a0 + 9] = 0\n 56070: u8 [a0 + 8] = 0\n 56073: u8 [a0 + 7] = 0\n 56076: u8 [a0 + 6] = 0\n 56079: u8 [a0 + 5] = 0\n 56082: u8 [a0 + 4] = 0\n 56085: u8 [a0 + 3] = 0\n 56088: u8 [a0 + 2] = 0\n 56091: u8 [a0 + 1] = 0\n 56094: u8 [a0 + 0] = 0\n 56096: jump @834 if a1 != 0\n      : @824 (gas: 4)\n 56100: u64 [sp + 0x28] = s0\n 56103: i32 a0 = a3 + 0\n 56105: a1 = 0x20\n 56108: ra = 700, jump @0\n      : @825 [@dyn 350] (gas: 80)\n 56115: t1 = u64 [sp + 0xa8]\n 56119: a1 = reverse t1\n 56121: a2 = a1 >> 0x38\n 56124: u8 [a0 + 0x1f] = a2\n 56127: a2 = a1 >> 0x30\n 56130: u8 [a0 + 0x1e] = a2\n 56133: a2 = a1 >> 0x28\n 56136: u8 [a0 + 0x1d] = a2\n 56139: a2 = a1 >> 0x20\n 56142: u8 [a0 + 0x1c] = a2\n 56145: a2 = a1 >> 0x18\n 56148: u8 [a0 + 0x1b] = a2\n 56151: a2 = a1 >> 0x10\n 56154: u8 [a0 + 0x1a] = a2\n 56157: a2 = a1 >> 0x8\n 56160: u8 [a0 + 0x19] = a2\n 56163: s1 = u64 [sp + 0x78]\n 56166: a2 = reverse s1\n 56168: u8 [a0 + 0x18] = a1\n 56171: a1 = a2 >> 0x38\n 56174: u8 [a0 + 0x17] = a1\n 56177: a1 = a2 >> 0x30\n 56180: u8 [a0 + 0x16] = a1\n 56183: a1 = a2 >> 0x28\n 56186: u8 [a0 + 0x15] = a1\n 56189: a1 = a2 >> 0x20\n 56192: u8 [a0 + 0x14] = a1\n 56195: a1 = a2 >> 0x18\n 56198: u8 [a0 + 0x13] = a1\n 56201: a1 = a2 >> 0x10\n 56204: u8 [a0 + 0x12] = a1\n 56207: a5 = u64 [sp + 0x80]\n 56211: a3 = reverse a5\n 56213: u8 [a0 + 0x10] = a2\n 56216: a2 = a2 >> 0x8\n 56219: u8 [a0 + 0x11] = a2\n 56222: a1 = a3 >> 0x38\n 56225: u8 [a0 + 0xf] = a1\n 56228: a1 = a3 >> 0x30\n 56231: u8 [a0 + 0xe] = a1\n 56234: a1 = a3 >> 0x28\n 56237: u8 [a0 + 0xd] = a1\n 56240: a1 = a3 >> 0x20\n 56243: u8 [a0 + 0xc] = a1\n 56246: a1 = a3 >> 0x18\n 56249: u8 [a0 + 0xb] = a1\n 56252: a1 = a3 >> 0x10\n 56255: u8 [a0 + 0xa] = a1\n 56258: a4 = u64 [sp + 0x88]\n 56262: a1 = reverse a4\n 56264: u8 [a0 + 0x8] = a3\n 56267: a3 = a3 >> 0x8\n 56270: u8 [a0 + 0x9] = a3\n 56273: a2 = a1 >> 0x38\n 56276: u8 [a0 + 0x7] = a2\n 56279: a2 = a1 >> 0x30\n 56282: u8 [a0 + 0x6] = a2\n 56285: a2 = a1 >> 0x28\n 56288: u8 [a0 + 0x5] = a2\n 56291: a2 = a1 >> 0x20\n 56294: u8 [a0 + 0x4] = a2\n 56297: a2 = a1 >> 0x18\n 56300: u8 [a0 + 0x3] = a2\n 56303: a2 = a1 >> 0x10\n 56306: u8 [a0 + 0x2] = a2\n 56309: a2 = u64 [sp + 0x60]\n 56312: s0 = u64 [sp + 0x58]\n 56315: s0 = s0 | a2\n 56318: t2 = u64 [sp + 0x70]\n 56321: a2 = u64 [sp + 0x68]\n 56324: a3 = t2 | a2\n 56327: a3 = a3 | s0\n 56330: a2 = a2 | s0\n 56333: a3 = a3 >> 0x20\n 56336: a2 = a2 << 0x20\n 56339: a2 = a2 | a3\n 56342: u8 [a0] = a1\n 56344: a1 = a1 >> 0x8\n 56347: u8 [a0 + 0x1] = a1\n 56350: jump @834 if a2 != 0\n      : @826 (gas: 13)\n 56354: a1 = a4\n 56356: a0 = t1 | a5\n 56359: a1 = a1 | s1\n 56362: a0 = a0 | a1\n 56365: a0 = a0 >> 0x20\n 56368: a1 = a1 | a5\n 56371: a1 = a1 << 0x20\n 56374: a0 = a0 | a1\n 56377: t0 = u64 [sp + 0x50]\n 56380: a4 = u64 [sp + 0x48]\n 56383: s0 = u64 [sp + 0x40]\n 56386: a2 = u64 [sp + 0x38]\n 56389: jump @834 if a0 != 0\n      : @827 (gas: 10)\n 56393: a0 = u64 [sp + 0x90]\n 56397: a1 = u64 [sp + 0x28]\n 56400: a0 = a0 | a1\n 56403: a1 = 0xffffffe0\n 56413: a3 = u64 [sp + 0xa0]\n 56417: a1 = a3 <u a1\n 56420: a3 = u64 [sp + 0x98]\n 56424: a1 = 0 if a3 != 0\n 56426: a1 = 0 if a0 != 0\n 56428: jump @834 if a1 == 0\n      : @828 (gas: 17)\n 56432: s1 = a2 + 0x60\n 56435: a0 = s1 <u a2\n 56438: a1 = s0 + a0\n 56441: u64 [sp + 0x98] = a1\n 56445: a1 = a1 <u s0\n 56448: a1 = a0 if a0 == 0\n 56451: a1 = a1 + a4\n 56454: u64 [sp + 0xa0] = a1\n 56458: a0 = a1 <u a4\n 56461: a0 = a0 + t0\n 56464: u64 [sp + 0x90] = a0\n 56468: i32 t2 = t2 + 0\n 56470: u64 [sp + 0x70] = t2\n 56473: i32 a0 = s1 + 0\n 56475: i32 s0 = t1 + 0\n 56477: a1 = s0\n 56479: ra = 702, jump @0\n      : @829 [@dyn 351] (gas: 6)\n 56486: i32 a0 = a0 + 0\n 56488: a1 = s0\n 56490: s0 = u64 [sp + 0x98]\n 56494: a2 = u64 [sp + 0x70]\n 56497: ecalli 2 // 'call_data_copy'\n 56499: fallthrough\n      : @830 (gas: 29)\n 56500: a0 = u64 [sp + 0xa8]\n 56504: a0 = a0 + s1\n 56507: u64 [sp + 0x70] = s1\n 56510: a1 = a0 <u s1\n 56513: a2 = u64 [sp + 0x78]\n 56516: a2 = a2 + s0\n 56519: a2 = a2 + a1\n 56522: a3 = a2 ^ s0\n 56525: a4 = a2 <u s0\n 56528: a4 = a1 if a3 == 0\n 56531: a1 = u64 [sp + 0x80]\n 56535: a5 = u64 [sp + 0xa0]\n 56539: a1 = a1 + a5\n 56542: a4 = a4 + a1\n 56545: a3 = a4 <u a1\n 56548: a1 = a1 <u a5\n 56551: a5 = u64 [sp + 0x88]\n 56555: s1 = u64 [sp + 0x90]\n 56559: a5 = a5 + s1\n 56562: a1 = a1 + a5\n 56565: a1 = a1 + a3\n 56568: a3 = a0 | a4\n 56571: a1 = a1 | a2\n 56574: a3 = a3 | a1\n 56577: a3 = a3 >> 0x20\n 56580: a1 = a1 | a4\n 56583: a1 = a1 << 0x20\n 56586: a1 = a1 | a3\n 56589: jump @834 if a1 != 0\n      : @831 (gas: 3)\n 56593: i32 a0 = a0 + 0\n 56595: a1 = 0x20\n 56598: ra = 704, jump @0\n      : @832 [@dyn 352] (gas: 53)\n 56605: u8 [a0 + 31] = 0\n 56608: u8 [a0 + 30] = 0\n 56611: u8 [a0 + 29] = 0\n 56614: u8 [a0 + 28] = 0\n 56617: u8 [a0 + 27] = 0\n 56620: u8 [a0 + 26] = 0\n 56623: u8 [a0 + 25] = 0\n 56626: u8 [a0 + 24] = 0\n 56629: u8 [a0 + 23] = 0\n 56632: u8 [a0 + 22] = 0\n 56635: u8 [a0 + 21] = 0\n 56638: u8 [a0 + 20] = 0\n 56641: u8 [a0 + 19] = 0\n 56644: u8 [a0 + 18] = 0\n 56647: u8 [a0 + 17] = 0\n 56650: u8 [a0 + 16] = 0\n 56653: u8 [a0 + 15] = 0\n 56656: u8 [a0 + 14] = 0\n 56659: u8 [a0 + 13] = 0\n 56662: u8 [a0 + 12] = 0\n 56665: u8 [a0 + 11] = 0\n 56668: u8 [a0 + 10] = 0\n 56671: u8 [a0 + 9] = 0\n 56674: u8 [a0 + 8] = 0\n 56677: u8 [a0 + 7] = 0\n 56680: u8 [a0 + 6] = 0\n 56683: u8 [a0 + 5] = 0\n 56686: u8 [a0 + 4] = 0\n 56689: u8 [a0 + 3] = 0\n 56692: u8 [a0 + 2] = 0\n 56695: u8 [a0 + 1] = 0\n 56698: u8 [a0 + 0] = 0\n 56700: a0 = u64 [sp + 0xa8]\n 56704: a0 = a0 + 0x1f\n 56707: a1 = 0x1ffffffe0\n 56717: a0 = a0 & a1\n 56720: a1 = u64 [sp + 0x70]\n 56723: a1 = a1 + a0\n 56726: u64 [sp + 0xa8] = a1\n 56730: s0 = a1 <u a0\n 56733: s1 = u64 [sp + 0x98]\n 56737: s1 = s1 + s0\n 56740: s0 = 0 if s1 != 0\n 56742: a0 = u64 [sp + 0xa0]\n 56746: s0 = s0 + a0\n 56749: a0 = s0 <u a0\n 56752: a1 = u64 [sp + 0x90]\n 56756: a0 = a0 + a1\n 56759: u64 [sp + 0xa0] = a0\n 56763: a0 = u64 [sp]\n 56765: i32 a0 = a0 + 0x20\n 56768: a1 = 0x20\n 56771: ra = 706, jump @0\n      : @833 [@dyn 353] (gas: 80)\n 56778: a1 = u64 [sp + 0x8]\n 56781: a1 = reverse a1\n 56783: a2 = u64 [sp + 0x10]\n 56786: a2 = reverse a2\n 56788: a3 = u64 [sp + 0x18]\n 56791: a3 = reverse a3\n 56793: a4 = u64 [sp + 0x20]\n 56796: a4 = reverse a4\n 56798: a5 = a4 >> 0x38\n 56801: u8 [a0 + 0x1f] = a5\n 56804: a5 = a4 >> 0x30\n 56807: u8 [a0 + 0x1e] = a5\n 56810: a5 = a4 >> 0x28\n 56813: u8 [a0 + 0x1d] = a5\n 56816: a5 = a4 >> 0x20\n 56819: u8 [a0 + 0x1c] = a5\n 56822: a5 = a4 >> 0x18\n 56825: u8 [a0 + 0x1b] = a5\n 56828: a5 = a4 >> 0x10\n 56831: u8 [a0 + 0x1a] = a5\n 56834: a5 = a4 >> 0x8\n 56837: u8 [a0 + 0x19] = a5\n 56840: u8 [a0 + 0x18] = a4\n 56843: a4 = a3 >> 0x38\n 56846: u8 [a0 + 0x17] = a4\n 56849: a4 = a3 >> 0x30\n 56852: u8 [a0 + 0x16] = a4\n 56855: a4 = a3 >> 0x28\n 56858: u8 [a0 + 0x15] = a4\n 56861: a4 = a3 >> 0x20\n 56864: u8 [a0 + 0x14] = a4\n 56867: a4 = a3 >> 0x18\n 56870: u8 [a0 + 0x13] = a4\n 56873: a4 = a3 >> 0x10\n 56876: u8 [a0 + 0x12] = a4\n 56879: a4 = a3 >> 0x8\n 56882: u8 [a0 + 0x11] = a4\n 56885: u8 [a0 + 0x10] = a3\n 56888: a3 = a2 >> 0x38\n 56891: u8 [a0 + 0xf] = a3\n 56894: a3 = a2 >> 0x30\n 56897: u8 [a0 + 0xe] = a3\n 56900: a3 = a2 >> 0x28\n 56903: u8 [a0 + 0xd] = a3\n 56906: a3 = a2 >> 0x20\n 56909: u8 [a0 + 0xc] = a3\n 56912: a3 = a2 >> 0x18\n 56915: u8 [a0 + 0xb] = a3\n 56918: a3 = a2 >> 0x10\n 56921: u8 [a0 + 0xa] = a3\n 56924: a3 = a2 >> 0x8\n 56927: u8 [a0 + 0x9] = a3\n 56930: u8 [a0 + 0x8] = a2\n 56933: a2 = a1 >> 0x38\n 56936: u8 [a0 + 0x7] = a2\n 56939: a2 = a1 >> 0x30\n 56942: u8 [a0 + 0x6] = a2\n 56945: a2 = a1 >> 0x28\n 56948: u8 [a0 + 0x5] = a2\n 56951: a2 = a1 >> 0x20\n 56954: u8 [a0 + 0x4] = a2\n 56957: a2 = a1 >> 0x18\n 56960: u8 [a0 + 0x3] = a2\n 56963: a2 = a1 >> 0x10\n 56966: u8 [a0 + 0x2] = a2\n 56969: a2 = a1 >> 0x8\n 56972: u8 [a0 + 0x1] = a2\n 56975: u8 [a0] = a1\n 56977: a0 = u64 [sp + 0x30]\n 56980: a1 = u64 [sp + 0xa8]\n 56984: u64 [a0] = a1\n 56986: u64 [a0 + 0x8] = s1\n 56989: u64 [a0 + 0x10] = s0\n 56992: a1 = u64 [sp + 0xa0]\n 56996: u64 [a0 + 0x18] = a1\n 56999: ra = u64 [sp + 0xc0]\n 57003: s0 = u64 [sp + 0xb8]\n 57007: s1 = u64 [sp + 0xb0]\n 57011: sp = sp + 0xc8\n 57015: ret\n      : @834 (gas: 1)\n 57017: trap\n      : @835 (gas: 18)\n 57018: sp = sp + 0xfffffffffffffea0\n 57022: u64 [sp + 0x158] = ra\n 57026: u64 [sp + 0x150] = s0\n 57030: u64 [sp + 0x148] = s1\n 57034: s0 = sp + 0x160\n 57038: sp = sp & 0xfffffffffffffff0\n 57041: a5 = u64 [a1 + 0x10]\n 57044: t0 = u64 [a1 + 0x18]\n 57047: s1 = u64 [a1 + 0x8]\n 57050: a4 = u64 [a1]\n 57052: a1 = s1 | t0\n 57055: a3 = a4 | a5\n 57058: a3 = a3 | a1\n 57061: a3 = a3 >> 0x20\n 57064: a1 = a1 | a5\n 57067: a1 = a1 << 0x20\n 57070: a1 = a1 | a3\n 57073: jump @850 if a1 != 0\n      : @836 (gas: 15)\n 57077: u64 [sp + 0xb0] = s1\n 57081: u64 [sp + 0xb8] = a5\n 57085: u64 [sp + 0x98] = t0\n 57089: u64 [sp + 0x18] = a0\n 57092: a0 = u64 [a2 + 0x18]\n 57095: u64 [sp + 0x88] = a0\n 57099: s1 = u64 [a2 + 0x10]\n 57102: a0 = u64 [a2 + 0x8]\n 57105: u64 [sp + 0xc0] = a0\n 57109: a0 = u64 [a2]\n 57111: u64 [sp + 0x90] = a0\n 57115: u64 [sp + 0xa8] = a4\n 57119: i32 a0 = a4 + 0\n 57121: a1 = 0x20\n 57124: ra = 708, jump @0\n      : @837 [@dyn 354] (gas: 12)\n 57131: a1 = u64 [sp + 0x90]\n 57135: a1 = a1 | s1\n 57138: a2 = u64 [sp + 0x88]\n 57142: a3 = u64 [sp + 0xc0]\n 57146: a2 = a2 | a3\n 57149: a1 = a1 | a2\n 57152: a1 = a1 >> 0x20\n 57155: u64 [sp + 0x78] = s1\n 57158: a2 = a2 | s1\n 57161: a2 = a2 << 0x20\n 57164: a1 = a1 | a2\n 57167: jump @850 if a1 != 0\n      : @838 (gas: 102)\n 57171: a1 = u8 [a0 + 0x19]\n 57174: a2 = u8 [a0 + 0x18]\n 57177: a3 = u8 [a0 + 0x1a]\n 57180: a4 = u8 [a0 + 0x1b]\n 57183: a1 = a1 << 0x8\n 57186: a1 = a1 | a2\n 57189: a3 = a3 << 0x10\n 57192: a4 = a4 << 0x18\n 57195: a3 = a3 | a4\n 57198: a1 = a1 | a3\n 57201: a2 = u8 [a0 + 0x1d]\n 57204: a3 = u8 [a0 + 0x1c]\n 57207: a4 = u8 [a0 + 0x1e]\n 57210: a5 = u8 [a0 + 0x1f]\n 57213: a2 = a2 << 0x8\n 57216: a2 = a2 | a3\n 57219: a4 = a4 << 0x10\n 57222: a5 = a5 << 0x18\n 57225: a4 = a4 | a5\n 57228: a2 = a2 | a4\n 57231: a2 = a2 << 0x20\n 57234: t0 = a2 | a1\n 57237: u64 [sp + 0xd0] = t0\n 57241: a1 = u8 [a0 + 0x11]\n 57244: a2 = u8 [a0 + 0x10]\n 57247: a3 = u8 [a0 + 0x12]\n 57250: a4 = u8 [a0 + 0x13]\n 57253: a1 = a1 << 0x8\n 57256: a1 = a1 | a2\n 57259: a3 = a3 << 0x10\n 57262: a4 = a4 << 0x18\n 57265: a3 = a3 | a4\n 57268: a1 = a1 | a3\n 57271: a2 = u8 [a0 + 0x15]\n 57274: a3 = u8 [a0 + 0x14]\n 57277: a4 = u8 [a0 + 0x16]\n 57280: a5 = u8 [a0 + 0x17]\n 57283: a2 = a2 << 0x8\n 57286: a2 = a2 | a3\n 57289: a4 = a4 << 0x10\n 57292: a5 = a5 << 0x18\n 57295: a4 = a4 | a5\n 57298: a2 = a2 | a4\n 57301: a2 = a2 << 0x20\n 57304: t1 = a2 | a1\n 57307: u64 [sp + 0xc8] = t1\n 57311: a1 = u8 [a0 + 0x9]\n 57314: a2 = u8 [a0 + 0x8]\n 57317: a3 = u8 [a0 + 0xa]\n 57320: a4 = u8 [a0 + 0xb]\n 57323: a1 = a1 << 0x8\n 57326: a1 = a1 | a2\n 57329: a3 = a3 << 0x10\n 57332: a4 = a4 << 0x18\n 57335: a3 = a3 | a4\n 57338: a1 = a1 | a3\n 57341: a2 = u8 [a0 + 0xd]\n 57344: a3 = u8 [a0 + 0xc]\n 57347: a4 = u8 [a0 + 0xe]\n 57350: a5 = u8 [a0 + 0xf]\n 57353: a2 = a2 << 0x8\n 57356: a2 = a2 | a3\n 57359: a4 = a4 << 0x10\n 57362: a5 = a5 << 0x18\n 57365: a4 = a4 | a5\n 57368: a2 = a2 | a4\n 57371: a2 = a2 << 0x20\n 57374: a5 = a2 | a1\n 57377: u64 [sp + 0x38] = a5\n 57380: a1 = u8 [a0 + 0x1]\n 57383: a2 = u8 [a0]\n 57385: a3 = u8 [a0 + 0x2]\n 57388: a4 = u8 [a0 + 0x3]\n 57391: a1 = a1 << 0x8\n 57394: a1 = a1 | a2\n 57397: a3 = a3 << 0x10\n 57400: a4 = a4 << 0x18\n 57403: a3 = a3 | a4\n 57406: a1 = a1 | a3\n 57409: a2 = u8 [a0 + 0x5]\n 57412: a3 = u8 [a0 + 0x4]\n 57415: a4 = u8 [a0 + 0x6]\n 57418: a0 = u8 [a0 + 0x7]\n 57421: a2 = a2 << 0x8\n 57424: a2 = a2 | a3\n 57427: a4 = a4 << 0x10\n 57430: a0 = a0 << 0x18\n 57433: a0 = a0 | a4\n 57436: a0 = a0 | a2\n 57439: a0 = a0 << 0x20\n 57442: s1 = a0 | a1\n 57445: a0 = reverse s1\n 57447: u64 [sp + 0x70] = a0\n 57450: a0 = reverse a5\n 57452: u64 [sp + 0x68] = a0\n 57455: a0 = reverse t1\n 57457: u64 [sp + 0x40] = a0\n 57460: a0 = reverse t0\n 57462: u64 [sp + 0x80] = a0\n 57466: a0 = i32 [sp + 0x90]\n 57470: a1 = 0x20\n 57473: ra = 710, jump @0\n      : @839 [@dyn 355] (gas: 117)\n 57480: a1 = u64 [sp + 0x90]\n 57484: a4 = a1 + 0x20\n 57487: a5 = a4 <u a1\n 57490: u64 [sp + 0x58] = a5\n 57493: a1 = u64 [sp + 0xc0]\n 57497: a5 = a5 + a1\n 57500: a1 = u64 [sp + 0x80]\n 57504: a2 = a1 >> 0x3b\n 57507: t1 = u64 [sp + 0x40]\n 57510: a3 = t1 << 0x5\n 57513: a2 = a2 | a3\n 57516: a3 = a1 << 0x5\n 57519: u64 [sp + 0x60] = a4\n 57522: a4 = a4 + a3\n 57525: u64 [sp + 0xa0] = a4\n 57529: a1 = a4 <u a3\n 57532: a4 = a2 + a5\n 57535: a3 = a4 + a1\n 57538: a4 = a3 ^ a2\n 57541: u64 [sp + 0xd8] = a3\n 57545: ra = a3 <u a2\n 57548: ra = a1 if a4 == 0\n 57551: t0 = u64 [sp + 0x38]\n 57554: a3 = t0 >> 0x38\n 57557: u8 [a0 + 0xf] = a3\n 57560: a3 = t0 >> 0x30\n 57563: u8 [a0 + 0xe] = a3\n 57566: a3 = t0 >> 0x28\n 57569: u8 [a0 + 0xd] = a3\n 57572: a3 = t0 >> 0x20\n 57575: u8 [a0 + 0xc] = a3\n 57578: a3 = t0 >> 0x18\n 57581: u8 [a0 + 0xb] = a3\n 57584: a3 = t0 >> 0x10\n 57587: u8 [a0 + 0xa] = a3\n 57590: a3 = t0 >> 0x8\n 57593: u8 [a0 + 0x9] = a3\n 57596: a3 = s1 >> 0x38\n 57599: u8 [a0 + 0x7] = a3\n 57602: a3 = s1 >> 0x30\n 57605: u8 [a0 + 0x6] = a3\n 57608: a3 = s1 >> 0x28\n 57611: u8 [a0 + 0x5] = a3\n 57614: a3 = s1 >> 0x20\n 57617: u8 [a0 + 0x4] = a3\n 57620: a3 = s1 >> 0x18\n 57623: u8 [a0 + 0x3] = a3\n 57626: a3 = s1 >> 0x10\n 57629: u8 [a0 + 0x2] = a3\n 57632: a3 = s1 >> 0x8\n 57635: u8 [a0 + 0x1] = a3\n 57638: t2 = u64 [sp + 0xc8]\n 57642: a3 = t2 >> 0x38\n 57645: u8 [a0 + 0x17] = a3\n 57648: a3 = t2 >> 0x30\n 57651: u8 [a0 + 0x16] = a3\n 57654: a3 = t2 >> 0x28\n 57657: u8 [a0 + 0x15] = a3\n 57660: a3 = t2 >> 0x20\n 57663: u8 [a0 + 0x14] = a3\n 57666: a3 = t2 >> 0x18\n 57669: u8 [a0 + 0x13] = a3\n 57672: a3 = t2 >> 0x10\n 57675: u8 [a0 + 0x12] = a3\n 57678: a3 = t2 >> 0x8\n 57681: u8 [a0 + 0x11] = a3\n 57684: a1 = u64 [sp + 0xd0]\n 57688: a3 = a1 >> 0x38\n 57691: u8 [a0 + 0x1f] = a3\n 57694: a3 = a1 >> 0x30\n 57697: u8 [a0 + 0x1e] = a3\n 57700: a3 = a1 >> 0x28\n 57703: u8 [a0 + 0x1d] = a3\n 57706: a3 = a1 >> 0x20\n 57709: u8 [a0 + 0x1c] = a3\n 57712: a3 = a1 >> 0x18\n 57715: u8 [a0 + 0x1b] = a3\n 57718: a3 = a1 >> 0x10\n 57721: u8 [a0 + 0x1a] = a3\n 57724: a3 = a1 >> 0x8\n 57727: u8 [a0 + 0x19] = a3\n 57730: u8 [a0 + 0x10] = t2\n 57733: u8 [a0 + 0x8] = t0\n 57736: u8 [a0] = s1\n 57738: u8 [a0 + 0x18] = a1\n 57741: a2 = a1\n 57743: u64 [sp + 0x50] = a5\n 57746: a0 = u64 [sp + 0xc0]\n 57750: a0 = a5 <u a0\n 57753: a1 = u64 [sp + 0x58]\n 57756: a0 = a1 if a1 == 0\n 57759: a4 = u64 [sp + 0x68]\n 57762: a1 = a4 >> 0x3b\n 57765: a3 = u64 [sp + 0x70]\n 57768: a3 = a3 << 0x5\n 57771: a1 = a1 | a3\n 57774: a3 = t1 >> 0x3b\n 57777: a4 = a4 << 0x5\n 57780: a3 = a3 | a4\n 57783: a4 = u64 [sp + 0x78]\n 57786: a5 = a4 + a0\n 57789: a0 = a5 <u a4\n 57792: t1 = u64 [sp + 0x88]\n 57796: t1 = t1 + a0\n 57799: a0 = a3 + a5\n 57802: a3 = a0 <u a3\n 57805: a1 = a1 + t1\n 57808: a1 = a1 + a3\n 57811: a3 = s1 | t2\n 57814: a4 = t0 | a2\n 57817: a3 = a3 | a4\n 57820: a2 = a0 + ra\n 57823: u64 [sp + 0xd0] = a2\n 57827: a0 = a2 <u a0\n 57830: a0 = a0 + a1\n 57833: u64 [sp + 0xc8] = a0\n 57837: jump @848 if a3 == 0\n      : @840 (gas: 242)\n 57841: t2 = 0x1\n 57844: a4 = u64 [sp + 0x80]\n 57848: a0 = a4\n 57850: t0 = u64 [sp + 0x40]\n 57853: a0 = t2 if t0 == 0\n 57856: a1 = maxu(a4, t2)\n 57859: a1 = a0 if t0 != 0\n 57862: a0 = u64 [sp + 0x68]\n 57865: a3 = a0 >u 0\n 57867: s1 = u64 [sp + 0x70]\n 57870: a2 = s1 >u 0\n 57872: a2 = a3 if s1 == 0\n 57875: a4 = t2 if a2 == 0\n 57878: a3 = a0 | s1\n 57881: a4 = a1 if a3 == 0\n 57884: u64 [sp + 0x80] = a4\n 57888: a0 = t0\n 57890: a0 = 0 if a2 == 0\n 57892: a0 = t0 if a3 == 0\n 57895: u64 [sp + 0x38] = a0\n 57898: a3 = 0x100000000\n 57908: a1 = u64 [sp + 0x60]\n 57911: a0 = a1\n 57913: a4 = u64 [sp + 0x50]\n 57916: a0 = a3 if a4 == 0\n 57919: a1 = maxu(a1, a3)\n 57922: a1 = a0 if a4 != 0\n 57925: a0 = a5 >u 0\n 57927: a2 = t1 >u 0\n 57929: a2 = a0 if t1 == 0\n 57932: u64 [sp + 0x48] = a5\n 57935: s1 = t1\n 57937: u64 [sp + 0x58] = t1\n 57940: t1 = u64 [sp + 0x60]\n 57943: t1 = a3 if a2 == 0\n 57946: s1 = s1 | a5\n 57949: t1 = a1 if s1 == 0\n 57952: a1 = a4\n 57954: a1 = 0 if a2 == 0\n 57956: a1 = a4 if s1 == 0\n 57959: a0 = u64 [sp + 0x90]\n 57963: a0 = a0 ^ 0xffffffffffffffff\n 57966: t1 = t1 + a0\n 57969: a0 = t1 <u a0\n 57972: a2 = u64 [sp + 0xc0]\n 57976: a2 = a2 ^ 0xffffffffffffffff\n 57979: a1 = a1 + a2\n 57982: a4 = a1 + a0\n 57985: u64 [sp + 0x30] = a4\n 57988: a1 = a4 ^ a2\n 57991: t2 = a4 <u a2\n 57994: t2 = a0 if a1 == 0\n 57997: a2 = 0xffffffe0\n 58007: t0 = u64 [sp + 0xa8]\n 58011: a0 = a2 <u t0\n 58014: a1 = u64 [sp + 0xb0]\n 58018: a3 = a1 >u 0\n 58020: a3 = a0 if a1 == 0\n 58023: s1 = a1\n 58025: a1 = u64 [sp + 0xb8]\n 58029: a4 = -a1\n 58031: ra = a4 - a3\n 58034: a3 = a4 <u a3\n 58037: a4 = a1 >u 0\n 58039: a1 = u64 [sp + 0x98]\n 58043: a4 = a4 + a1\n 58046: a4 = -a4\n 58048: a4 = a4 - a3\n 58051: a3 = ra >u 0\n 58053: a5 = a4 >u 0\n 58055: a5 = a3 if a4 == 0\n 58058: a3 = -s1\n 58060: a3 = a3 - a0\n 58063: a0 = a2 - t0\n 58066: u64 [sp + 0x40] = a2\n 58069: a2 = a2 <u a0\n 58072: s1 = a3 >u 0\n 58074: s1 = a2 if a3 == 0\n 58077: a2 = ra | a4\n 58080: s1 = a5 if a2 != 0\n 58083: a2 = u64 [sp + 0x48]\n 58086: a5 = a2\n 58088: a1 = u64 [sp + 0x58]\n 58091: a5 = 0 if a1 == 0\n 58093: a5 = a2 if a1 == 0\n 58096: a1 = u64 [sp + 0x78]\n 58099: a1 = a1 ^ 0xffffffffffffffff\n 58102: u64 [sp + 0x20] = a1\n 58105: a1 = a1 + a5\n 58108: u64 [sp + 0x10] = a1\n 58111: t2 = t2 + a1\n 58114: u64 [sp + 0x28] = t2\n 58117: t2 = t2 << 0x3b\n 58120: t0 = u64 [sp + 0x30]\n 58123: a2 = t0 >> 0x5\n 58126: t2 = a2 | t2\n 58129: t1 = t1 >> 0x5\n 58132: t0 = t0 << 0x3b\n 58135: a2 = t1 | t0\n 58138: a0 = 0 if s1 != 0\n 58140: a5 = a0 + 0x1f\n 58143: a0 = a5 <u a0\n 58146: a3 = 0 if s1 != 0\n 58148: t1 = a3 + a0\n 58151: a3 = t1 <u a3\n 58154: a3 = a0 if a0 == 0\n 58157: ra = 0 if s1 != 0\n 58159: a3 = a3 + ra\n 58162: a0 = a3 << 0x3b\n 58165: a1 = t1 >> 0x5\n 58168: a1 = a1 | a0\n 58171: t1 = t1 << 0x3b\n 58174: a0 = a5 >> 0x5\n 58177: a0 = a0 | t1\n 58180: u64 [sp + 0x8] = a0\n 58183: u64 [sp + 0x30] = a1\n 58186: t1 = t2 ^ a1\n 58189: a1 = t2 <u a1\n 58192: t0 = a2 <u a0\n 58195: t0 = a1 if t1 != 0\n 58198: a0 = u64 [sp + 0x88]\n 58202: a1 = a0 ^ 0xffffffffffffffff\n 58205: a0 = u64 [sp + 0x58]\n 58208: a0 = a0 + a1\n 58211: a1 = u64 [sp + 0x10]\n 58214: a5 = u64 [sp + 0x20]\n 58217: a5 = a1 <u a5\n 58220: t1 = a0 + a5\n 58223: a0 = u64 [sp + 0x28]\n 58226: a5 = a0 <u a1\n 58229: t1 = t1 + a5\n 58232: a5 = a0 >> 0x5\n 58235: a1 = t1 << 0x3b\n 58238: a5 = a5 | a1\n 58241: a4 = 0 if s1 != 0\n 58243: a1 = a3 <u ra\n 58246: a1 = a1 + a4\n 58249: a3 = a3 >> 0x5\n 58252: a4 = a1 << 0x3b\n 58255: ra = a3 | a4\n 58258: a3 = t1 >> 0x5\n 58261: s1 = a1 >> 0x5\n 58264: t1 = a5 <u ra\n 58267: a1 = a3 ^ s1\n 58270: a4 = a3 <u s1\n 58273: a4 = t1 if a1 == 0\n 58276: a0 = a5 ^ ra\n 58279: a0 = a0 | a1\n 58282: a4 = t0 if a0 == 0\n 58285: a0 = u64 [sp + 0x8]\n 58288: a2 = a0 if a4 == 0\n 58291: u64 [sp + 0x28] = a2\n 58294: a0 = u64 [sp + 0x30]\n 58297: t2 = a0 if a4 == 0\n 58300: a5 = ra if a4 == 0\n 58303: a3 = s1 if a4 == 0\n 58306: a1 = u64 [sp + 0x80]\n 58310: a0 = a1 <u 0x1\n 58313: t0 = u64 [sp + 0x38]\n 58316: t1 = t0 - a0\n 58319: a4 = a1 + 0xffffffffffffffff\n 58322: u64 [sp + 0x30] = a4\n 58325: ra = a1\n 58327: s1 = t1 ^ t2\n 58330: a0 = t1 <u t2\n 58333: a1 = a4 <u a2\n 58336: a1 = a0 if s1 != 0\n 58339: a4 = u64 [sp + 0x68]\n 58342: a0 = a4\n 58344: a2 = u64 [sp + 0x70]\n 58347: a0 = 0 if a2 == 0\n 58349: a0 = a4 if a2 == 0\n 58352: s1 = ra | t0\n 58355: s1 = s1 <u 0x1\n 58358: ra = a0 - s1\n 58361: a0 = a0 <u s1\n 58364: s1 = a2 - a0\n 58367: a2 = s1 ^ a3\n 58370: a4 = s1 <u a3\n 58373: a0 = ra <u a5\n 58376: a0 = a4 if a2 != 0\n 58379: a4 = ra ^ a5\n 58382: a2 = a2 | a4\n 58385: a1 = a0 if a2 != 0\n 58388: a3 = s1 if a1 != 0\n 58391: a5 = ra if a1 != 0\n 58394: t2 = t1 if a1 != 0\n 58397: t1 = u64 [sp + 0x60]\n 58400: a2 = u64 [sp + 0x28]\n 58403: a0 = u64 [sp + 0x30]\n 58406: a2 = a0 if a1 != 0\n 58409: t0 = u64 [sp + 0xa8]\n 58413: a0 = a2 >> 0x3b\n 58416: a4 = a2\n 58418: a1 = t2 << 0x5\n 58421: a0 = a0 | a1\n 58424: a1 = t2 >> 0x3b\n 58427: t2 = u64 [sp + 0x50]\n 58430: a2 = a5 << 0x5\n 58433: a1 = a1 | a2\n 58436: a5 = a5 >> 0x3b\n 58439: a3 = a3 << 0x5\n 58442: a3 = a3 | a5\n 58445: a2 = a4 << 0x5\n 58448: a4 = u64 [sp + 0x88]\n 58452: a3 = a3 + a4\n 58455: a4 = u64 [sp + 0x78]\n 58458: a1 = a1 + a4\n 58461: a4 = a1 <u a4\n 58464: a3 = a3 + a4\n 58467: s1 = u64 [sp + 0xc0]\n 58471: a0 = a0 + s1\n 58474: a4 = u64 [sp + 0x90]\n 58478: a2 = a2 + a4\n 58481: a4 = a2 <u a4\n 58484: a0 = a0 + a4\n 58487: a5 = a0 ^ s1\n 58490: s1 = a0 <u s1\n 58493: s1 = a4 if a5 == 0\n 58496: s1 = s1 + a1\n 58499: a1 = s1 <u a1\n 58502: a1 = a1 + a3\n 58505: a3 = a2 + 0x40\n 58508: u64 [sp + 0x38] = a3\n 58511: a2 = a3 <u a2\n 58514: a3 = a0 + a2\n 58517: u64 [sp + 0x30] = a3\n 58520: a0 = a3 <u a0\n 58523: a0 = a2 if a2 == 0\n 58526: a0 = a0 + s1\n 58529: u64 [sp + 0x28] = a0\n 58532: a0 = a0 <u s1\n 58535: a5 = u64 [sp + 0xb0]\n 58539: a4 = u64 [sp + 0xb8]\n 58543: a0 = a0 + a1\n 58546: u64 [sp + 0x20] = a0\n 58549: a0 = t1\n 58551: s1 = t2\n 58553: a3 = u64 [sp + 0x48]\n 58556: a1 = u64 [sp + 0x58]\n 58559: ra = u64 [sp + 0xa0]\n 58563: fallthrough\n      : @841 (gas: 15)\n 58564: u64 [sp + 0xa8] = t0\n 58568: u64 [sp + 0xb0] = a5\n 58572: u64 [sp + 0xb8] = a4\n 58576: u64 [sp + 0xc0] = a0\n 58580: a0 = a0 | a3\n 58583: u64 [sp + 0x90] = a1\n 58587: u64 [sp + 0x80] = s1\n 58591: a1 = a1 | s1\n 58594: a0 = a0 | a1\n 58597: a0 = a0 >> 0x20\n 58600: u64 [sp + 0x88] = a3\n 58604: a1 = a1 | a3\n 58607: a1 = a1 << 0x20\n 58610: a0 = a0 | a1\n 58613: jump @850 if a0 != 0\n      : @842 (gas: 27)\n 58617: a0 = ra <u t1\n 58620: a4 = u64 [sp + 0xd8]\n 58624: a1 = a4 ^ t2\n 58627: a2 = a4 <u t2\n 58630: a2 = a0 if a1 == 0\n 58633: a3 = u64 [sp + 0x48]\n 58636: a5 = u64 [sp + 0xd0]\n 58640: s1 = a5 - a3\n 58643: a1 = s1 - a2\n 58646: u64 [sp + 0x78] = a1\n 58649: a1 = s1 <u a2\n 58652: u64 [sp + 0xd0] = a5\n 58656: a2 = a5 <u a3\n 58659: a3 = u64 [sp + 0x58]\n 58662: a5 = u64 [sp + 0xc8]\n 58666: a3 = a5 - a3\n 58669: a3 = a3 - a2\n 58672: s1 = a3 - a1\n 58675: a1 = a4 - t2\n 58678: a1 = a1 - a0\n 58681: u64 [sp + 0x70] = a1\n 58684: u64 [sp + 0xa0] = ra\n 58688: a0 = ra - t1\n 58691: u64 [sp + 0x68] = a0\n 58694: a0 = i32 [sp + 0xc0]\n 58698: a1 = 0x20\n 58701: ra = 712, jump @0\n      : @843 [@dyn 356] (gas: 77)\n 58708: a1 = reverse s1\n 58710: a2 = u64 [sp + 0x78]\n 58713: a2 = reverse a2\n 58715: a3 = u64 [sp + 0x70]\n 58718: a3 = reverse a3\n 58720: a4 = u64 [sp + 0x68]\n 58723: a4 = reverse a4\n 58725: u8 [a0 + 0x18] = a4\n 58728: a5 = a4 >> 0x38\n 58731: u8 [a0 + 0x1f] = a5\n 58734: a5 = a4 >> 0x30\n 58737: u8 [a0 + 0x1e] = a5\n 58740: a5 = a4 >> 0x28\n 58743: u8 [a0 + 0x1d] = a5\n 58746: a5 = a4 >> 0x20\n 58749: u8 [a0 + 0x1c] = a5\n 58752: a5 = a4 >> 0x18\n 58755: u8 [a0 + 0x1b] = a5\n 58758: a5 = a4 >> 0x10\n 58761: u8 [a0 + 0x1a] = a5\n 58764: a4 = a4 >> 0x8\n 58767: u8 [a0 + 0x19] = a4\n 58770: u8 [a0 + 0x10] = a3\n 58773: a4 = a3 >> 0x38\n 58776: u8 [a0 + 0x17] = a4\n 58779: a4 = a3 >> 0x30\n 58782: u8 [a0 + 0x16] = a4\n 58785: a4 = a3 >> 0x28\n 58788: u8 [a0 + 0x15] = a4\n 58791: a4 = a3 >> 0x20\n 58794: u8 [a0 + 0x14] = a4\n 58797: a4 = a3 >> 0x18\n 58800: u8 [a0 + 0x13] = a4\n 58803: a4 = a3 >> 0x10\n 58806: u8 [a0 + 0x12] = a4\n 58809: a3 = a3 >> 0x8\n 58812: u8 [a0 + 0x11] = a3\n 58815: u8 [a0 + 0x8] = a2\n 58818: a3 = a2 >> 0x38\n 58821: u8 [a0 + 0xf] = a3\n 58824: a3 = a2 >> 0x30\n 58827: u8 [a0 + 0xe] = a3\n 58830: a3 = a2 >> 0x28\n 58833: u8 [a0 + 0xd] = a3\n 58836: a3 = a2 >> 0x20\n 58839: u8 [a0 + 0xc] = a3\n 58842: a3 = a2 >> 0x18\n 58845: u8 [a0 + 0xb] = a3\n 58848: a3 = a2 >> 0x10\n 58851: u8 [a0 + 0xa] = a3\n 58854: a2 = a2 >> 0x8\n 58857: u8 [a0 + 0x9] = a2\n 58860: u8 [a0] = a1\n 58862: a2 = a1 >> 0x38\n 58865: u8 [a0 + 0x7] = a2\n 58868: a2 = a1 >> 0x30\n 58871: u8 [a0 + 0x6] = a2\n 58874: a2 = a1 >> 0x28\n 58877: u8 [a0 + 0x5] = a2\n 58880: a2 = a1 >> 0x20\n 58883: u8 [a0 + 0x4] = a2\n 58886: a2 = a1 >> 0x18\n 58889: u8 [a0 + 0x3] = a2\n 58892: a2 = a1 >> 0x10\n 58895: u8 [a0 + 0x2] = a2\n 58898: t0 = a1 >> 0x8\n 58901: a4 = u64 [sp + 0x98]\n 58905: a5 = u64 [sp + 0xb8]\n 58909: a2 = a5 | a4\n 58912: a1 = u64 [sp + 0xa8]\n 58916: a3 = u64 [sp + 0x40]\n 58919: a3 = a1 <u a3\n 58922: s1 = u64 [sp + 0xb0]\n 58926: a3 = 0 if s1 != 0\n 58928: a3 = 0 if a2 != 0\n 58930: u8 [a0 + 0x1] = t0\n 58933: jump @850 if a3 == 0\n      : @844 (gas: 15)\n 58937: a2 = a1 + 0x20\n 58940: u64 [sp + 0x78] = a2\n 58943: a0 = a2 <u a1\n 58946: a1 = s1 + a0\n 58949: u64 [sp + 0xa8] = a1\n 58953: a1 = a1 <u s1\n 58956: a1 = a0 if a0 == 0\n 58959: a1 = a1 + a5\n 58962: u64 [sp + 0xb0] = a1\n 58966: a0 = a1 <u a5\n 58969: a4 = a4 + a0\n 58972: u64 [sp + 0x98] = a4\n 58976: i32 a0 = a2 + 0\n 58978: a1 = 0x20\n 58981: ra = 714, jump @0\n      : @845 [@dyn 357] (gas: 108)\n 58988: a1 = u8 [a0 + 0x1]\n 58991: a2 = u8 [a0]\n 58993: a3 = u8 [a0 + 0x2]\n 58996: a4 = u8 [a0 + 0x3]\n 58999: a1 = a1 << 0x8\n 59002: a1 = a1 | a2\n 59005: a3 = a3 << 0x10\n 59008: a4 = a4 << 0x18\n 59011: a3 = a3 | a4\n 59014: a1 = a1 | a3\n 59017: a2 = u8 [a0 + 0x5]\n 59020: a3 = u8 [a0 + 0x4]\n 59023: a4 = u8 [a0 + 0x6]\n 59026: a5 = u8 [a0 + 0x7]\n 59029: a2 = a2 << 0x8\n 59032: a2 = a2 | a3\n 59035: a4 = a4 << 0x10\n 59038: a5 = a5 << 0x18\n 59041: a4 = a4 | a5\n 59044: a2 = a2 | a4\n 59047: a2 = a2 << 0x20\n 59050: t0 = a2 | a1\n 59053: a2 = u8 [a0 + 0x9]\n 59056: a3 = u8 [a0 + 0x8]\n 59059: a4 = u8 [a0 + 0xa]\n 59062: a5 = u8 [a0 + 0xb]\n 59065: a2 = a2 << 0x8\n 59068: a2 = a2 | a3\n 59071: a4 = a4 << 0x10\n 59074: a5 = a5 << 0x18\n 59077: a4 = a4 | a5\n 59080: a2 = a2 | a4\n 59083: a3 = u8 [a0 + 0xd]\n 59086: a4 = u8 [a0 + 0xc]\n 59089: a5 = u8 [a0 + 0xe]\n 59092: s1 = u8 [a0 + 0xf]\n 59095: a3 = a3 << 0x8\n 59098: a3 = a3 | a4\n 59101: a5 = a5 << 0x10\n 59104: s1 = s1 << 0x18\n 59107: a5 = a5 | s1\n 59110: a3 = a3 | a5\n 59113: a3 = a3 << 0x20\n 59116: a2 = a2 | a3\n 59119: a3 = u8 [a0 + 0x11]\n 59122: a4 = u8 [a0 + 0x10]\n 59125: a5 = u8 [a0 + 0x12]\n 59128: s1 = u8 [a0 + 0x13]\n 59131: a3 = a3 << 0x8\n 59134: a3 = a3 | a4\n 59137: a5 = a5 << 0x10\n 59140: s1 = s1 << 0x18\n 59143: a5 = a5 | s1\n 59146: a3 = a3 | a5\n 59149: a4 = u8 [a0 + 0x15]\n 59152: a5 = u8 [a0 + 0x14]\n 59155: s1 = u8 [a0 + 0x16]\n 59158: a1 = u8 [a0 + 0x17]\n 59161: a4 = a4 << 0x8\n 59164: a4 = a4 | a5\n 59167: s1 = s1 << 0x10\n 59170: a1 = a1 << 0x18\n 59173: a1 = a1 | s1\n 59176: a1 = a1 | a4\n 59179: a1 = a1 << 0x20\n 59182: a3 = a3 | a1\n 59185: a1 = u8 [a0 + 0x19]\n 59188: a4 = u8 [a0 + 0x18]\n 59191: a5 = u8 [a0 + 0x1a]\n 59194: s1 = u8 [a0 + 0x1b]\n 59197: a1 = a1 << 0x8\n 59200: a1 = a1 | a4\n 59203: a5 = a5 << 0x10\n 59206: s1 = s1 << 0x18\n 59209: a5 = a5 | s1\n 59212: a1 = a1 | a5\n 59215: a4 = u8 [a0 + 0x1d]\n 59218: a5 = u8 [a0 + 0x1c]\n 59221: s1 = u8 [a0 + 0x1e]\n 59224: a0 = u8 [a0 + 0x1f]\n 59227: a4 = a4 << 0x8\n 59230: a4 = a4 | a5\n 59233: s1 = s1 << 0x10\n 59236: a0 = a0 << 0x18\n 59239: a0 = a0 | s1\n 59242: a0 = a0 | a4\n 59245: a0 = a0 << 0x20\n 59248: a0 = a0 | a1\n 59251: a4 = reverse a0\n 59253: a0 = reverse a3\n 59255: a1 = reverse a2\n 59257: a2 = reverse t0\n 59259: a3 = u64 [sp + 0xc8]\n 59263: u64 [sp + 0xf8] = a3\n 59267: a3 = u64 [sp + 0xd0]\n 59271: u64 [sp + 0xf0] = a3\n 59275: a3 = u64 [sp + 0xd8]\n 59279: u64 [sp + 0xe8] = a3\n 59283: a3 = u64 [sp + 0xa0]\n 59287: u64 [sp + 0xe0] = a3\n 59291: u64 [sp + 0x118] = a2\n 59295: u64 [sp + 0x110] = a1\n 59299: u64 [sp + 0x108] = a0\n 59303: a0 = sp + 0x120\n 59307: a1 = sp + 0x100\n 59311: a2 = sp + 0xe0\n 59315: u64 [sp + 0x100] = a4\n 59319: ra = 716, jump @468\n      : @846 [@dyn 358] (gas: 36)\n 59325: a0 = u64 [sp + 0x138]\n 59329: u64 [sp + 0xc8] = a0\n 59333: a0 = u64 [sp + 0x130]\n 59337: u64 [sp + 0xd0] = a0\n 59341: a0 = u64 [sp + 0x128]\n 59345: u64 [sp + 0xd8] = a0\n 59349: a1 = u64 [sp + 0xc0]\n 59353: a0 = a1 + 0x20\n 59356: a2 = a0 <u a1\n 59359: a1 = u64 [sp + 0x80]\n 59363: s1 = a1 + a2\n 59366: a3 = s1 <u a1\n 59369: a3 = a2 if a2 == 0\n 59372: a1 = u64 [sp + 0x88]\n 59376: a3 = a3 + a1\n 59379: a2 = a3 <u a1\n 59382: a1 = u64 [sp + 0x90]\n 59386: a1 = a1 + a2\n 59389: a2 = u64 [sp + 0x28]\n 59392: a2 = a2 ^ a3\n 59395: a4 = u64 [sp + 0x38]\n 59398: a4 = a4 ^ a0\n 59401: a2 = a2 | a4\n 59404: ra = u64 [sp + 0x120]\n 59408: a4 = u64 [sp + 0x20]\n 59411: a4 = a4 ^ a1\n 59414: a5 = u64 [sp + 0x30]\n 59417: a5 = a5 ^ s1\n 59420: a4 = a4 | a5\n 59423: a2 = a2 | a4\n 59426: t0 = u64 [sp + 0x78]\n 59429: a5 = u64 [sp + 0xa8]\n 59433: a4 = u64 [sp + 0xb0]\n 59437: t1 = u64 [sp + 0x60]\n 59440: t2 = u64 [sp + 0x50]\n 59443: jump @841 if a2 != 0\n      : @847 (gas: 1)\n 59447: jump @849\n      : @848 (gas: 2)\n 59449: ra = u64 [sp + 0xa0]\n 59453: fallthrough\n      : @849 (gas: 14)\n 59454: a0 = u64 [sp + 0x18]\n 59457: u64 [a0] = ra\n 59459: a1 = u64 [sp + 0xd8]\n 59463: u64 [a0 + 0x8] = a1\n 59466: a1 = u64 [sp + 0xd0]\n 59470: u64 [a0 + 0x10] = a1\n 59473: a1 = u64 [sp + 0xc8]\n 59477: u64 [a0 + 0x18] = a1\n 59480: sp = s0 + 0xfffffffffffffea0\n 59484: ra = u64 [sp + 0x158]\n 59488: s0 = u64 [sp + 0x150]\n 59492: s1 = u64 [sp + 0x148]\n 59496: sp = sp + 0x160\n 59500: ret\n      : @850 (gas: 1)\n 59502: trap\n      : @851 (gas: 23)\n 59503: sp = sp + 0xfffffffffffffe00\n 59507: u64 [sp + 0x1f8] = ra\n 59511: u64 [sp + 0x1f0] = s0\n 59515: u64 [sp + 0x1e8] = s1\n 59519: s0 = sp + 0x200\n 59523: sp = sp & 0xfffffffffffffff0\n 59526: t1 = u64 [a1 + 0x18]\n 59529: t2 = u64 [a1 + 0x10]\n 59532: t0 = u64 [a1 + 0x8]\n 59535: s1 = u64 [a1]\n 59537: u64 [sp + 0xb0] = t0\n 59541: u64 [sp + 0xa0] = t1\n 59545: a1 = t0 | t1\n 59548: u64 [sp + 0xb8] = s1\n 59552: s1 = s1 | t2\n 59555: s1 = s1 | a1\n 59558: s1 = s1 >> 0x20\n 59561: u64 [sp + 0x98] = t2\n 59565: a1 = a1 | t2\n 59568: a1 = a1 << 0x20\n 59571: a1 = a1 | s1\n 59574: u64 [sp + 0x28] = a0\n 59577: jump @865 if a1 != 0\n      : @852 (gas: 38)\n 59581: a0 = u64 [s0]\n 59583: a1 = u64 [a0 + 0x18]\n 59586: u64 [sp] = a1\n 59588: a1 = u64 [a0 + 0x10]\n 59591: u64 [sp + 0x8] = a1\n 59594: a1 = u64 [a0 + 0x8]\n 59597: u64 [sp + 0x10] = a1\n 59600: a0 = u64 [a0]\n 59602: u64 [sp + 0x18] = a0\n 59605: a0 = u64 [a5 + 0x18]\n 59608: u64 [sp + 0x20] = a0\n 59611: a0 = u64 [a4 + 0x18]\n 59614: u64 [sp + 0x48] = a0\n 59617: a0 = u64 [a4 + 0x10]\n 59620: u64 [sp + 0x50] = a0\n 59623: a0 = u64 [a4 + 0x8]\n 59626: u64 [sp + 0x58] = a0\n 59629: a0 = u64 [a4]\n 59631: u64 [sp + 0x60] = a0\n 59634: a0 = u64 [a3 + 0x18]\n 59637: u64 [sp + 0x68] = a0\n 59640: a0 = u64 [a3 + 0x10]\n 59643: u64 [sp + 0x70] = a0\n 59646: a0 = u64 [a3 + 0x8]\n 59649: u64 [sp + 0x78] = a0\n 59652: a0 = u64 [a2 + 0x10]\n 59655: a1 = u64 [a3]\n 59657: u64 [sp + 0x80] = a1\n 59661: a1 = u64 [a2 + 0x8]\n 59664: u64 [sp + 0x88] = a1\n 59668: a1 = u64 [a2]\n 59670: u64 [sp + 0x90] = a1\n 59674: a0 = a0 << 0x20\n 59677: s1 = a0 >> 0x20\n 59680: a0 = i32 [sp + 0xb8]\n 59684: a1 = 0x20\n 59687: u64 [sp + 0xa8] = a0\n 59691: ra = 718, jump @0\n      : @853 [@dyn 359] (gas: 68)\n 59698: a1 = reverse s1\n 59700: a2 = u64 [sp + 0x88]\n 59704: a2 = reverse a2\n 59706: a3 = u64 [sp + 0x90]\n 59710: a3 = reverse a3\n 59712: a4 = a3 >> 0x38\n 59715: u8 [a0 + 0x1f] = a4\n 59718: a4 = a3 >> 0x30\n 59721: u8 [a0 + 0x1e] = a4\n 59724: a4 = a3 >> 0x28\n 59727: u8 [a0 + 0x1d] = a4\n 59730: a4 = a3 >> 0x20\n 59733: u8 [a0 + 0x1c] = a4\n 59736: a4 = a3 >> 0x18\n 59739: u8 [a0 + 0x1b] = a4\n 59742: a4 = a3 >> 0x10\n 59745: u8 [a0 + 0x1a] = a4\n 59748: a4 = a3 >> 0x8\n 59751: u8 [a0 + 0x19] = a4\n 59754: u8 [a0 + 0x18] = a3\n 59757: u8 [a0 + 0x10] = a2\n 59760: u8 [a0 + 11] = 0\n 59763: u8 [a0 + 10] = 0\n 59766: u8 [a0 + 9] = 0\n 59769: u8 [a0 + 7] = 0\n 59772: u8 [a0 + 6] = 0\n 59775: u8 [a0 + 5] = 0\n 59778: u8 [a0 + 4] = 0\n 59781: u8 [a0 + 3] = 0\n 59784: u8 [a0 + 2] = 0\n 59787: u8 [a0 + 1] = 0\n 59790: u8 [a0 + 0] = 0\n 59792: a3 = a2 >> 0x38\n 59795: u8 [a0 + 0x17] = a3\n 59798: a3 = a2 >> 0x30\n 59801: u8 [a0 + 0x16] = a3\n 59804: a3 = a2 >> 0x28\n 59807: u8 [a0 + 0x15] = a3\n 59810: a3 = a2 >> 0x20\n 59813: u8 [a0 + 0x14] = a3\n 59816: a3 = a2 >> 0x18\n 59819: u8 [a0 + 0x13] = a3\n 59822: a3 = a2 >> 0x10\n 59825: u8 [a0 + 0x12] = a3\n 59828: a2 = a2 >> 0x8\n 59831: u8 [a0 + 0x11] = a2\n 59834: u8 [a0 + 0x8] = a1\n 59837: a2 = a1 >> 0x38\n 59840: u8 [a0 + 0xf] = a2\n 59843: a2 = a1 >> 0x30\n 59846: u8 [a0 + 0xe] = a2\n 59849: a2 = a1 >> 0x28\n 59852: u8 [a0 + 0xd] = a2\n 59855: a1 = a1 >> 0x20\n 59858: a5 = u64 [sp + 0xa0]\n 59862: s1 = u64 [sp + 0x98]\n 59866: a4 = s1 | a5\n 59869: a2 = 0x100000000\n 59879: u64 [sp + 0x88] = a2\n 59883: a2 = 0xffffffe0\n 59893: a3 = u64 [sp + 0xb8]\n 59897: a2 = a3 <u a2\n 59900: a3 = u64 [sp + 0xb0]\n 59904: a2 = 0 if a3 != 0\n 59906: u64 [sp + 0x90] = a4\n 59910: a2 = 0 if a4 != 0\n 59912: u8 [a0 + 0xc] = a1\n 59915: jump @865 if a2 == 0\n      : @854 (gas: 18)\n 59919: a4 = s1\n 59921: a0 = u64 [sp + 0xb8]\n 59925: a1 = a0 + 0xa0\n 59929: u64 [sp + 0x40] = a1\n 59932: a0 = a1 <u a0\n 59935: a1 = u64 [sp + 0xb0]\n 59939: a2 = a1 + a0\n 59942: u64 [sp + 0x38] = a2\n 59945: s1 = a2 <u a1\n 59948: s1 = a0 if a0 == 0\n 59951: s1 = s1 + a4\n 59954: a0 = s1 <u a4\n 59957: a0 = a0 + a5\n 59960: u64 [sp + 0x30] = a0\n 59963: a0 = u64 [sp + 0xa8]\n 59967: i32 a0 = a0 + 0x20\n 59970: a1 = 0x20\n 59973: ra = 720, jump @0\n      : @855 [@dyn 360] (gas: 51)\n 59980: u8 [a0 + 31] = 0xa0\n 59985: u8 [a0 + 30] = 0\n 59988: u8 [a0 + 29] = 0\n 59991: u8 [a0 + 28] = 0\n 59994: u8 [a0 + 27] = 0\n 59997: u8 [a0 + 26] = 0\n 60000: u8 [a0 + 25] = 0\n 60003: u8 [a0 + 24] = 0\n 60006: u8 [a0 + 23] = 0\n 60009: u8 [a0 + 22] = 0\n 60012: u8 [a0 + 21] = 0\n 60015: u8 [a0 + 20] = 0\n 60018: u8 [a0 + 19] = 0\n 60021: u8 [a0 + 18] = 0\n 60024: u8 [a0 + 17] = 0\n 60027: u8 [a0 + 16] = 0\n 60030: u8 [a0 + 15] = 0\n 60033: u8 [a0 + 14] = 0\n 60036: u8 [a0 + 13] = 0\n 60039: u8 [a0 + 12] = 0\n 60042: u8 [a0 + 11] = 0\n 60045: u8 [a0 + 10] = 0\n 60048: u8 [a0 + 9] = 0\n 60051: u8 [a0 + 8] = 0\n 60054: u8 [a0 + 7] = 0\n 60057: u8 [a0 + 6] = 0\n 60060: u8 [a0 + 5] = 0\n 60063: u8 [a0 + 4] = 0\n 60066: u8 [a0 + 3] = 0\n 60069: u8 [a0 + 2] = 0\n 60072: u8 [a0 + 1] = 0\n 60075: u8 [a0 + 0] = 0\n 60077: a0 = u64 [sp + 0x30]\n 60080: u64 [sp + 0x198] = a0\n 60084: u64 [sp + 0x190] = s1\n 60088: a0 = u64 [sp + 0x38]\n 60091: u64 [sp + 0x188] = a0\n 60095: a0 = u64 [sp + 0x40]\n 60098: u64 [sp + 0x180] = a0\n 60102: a0 = u64 [sp + 0x68]\n 60105: u64 [sp + 0x1b8] = a0\n 60109: a0 = u64 [sp + 0x70]\n 60112: u64 [sp + 0x1b0] = a0\n 60116: a0 = u64 [sp + 0x78]\n 60119: u64 [sp + 0x1a8] = a0\n 60123: a0 = sp + 0x1c0\n 60127: a1 = sp + 0x1a0\n 60131: a2 = sp + 0x180\n 60135: a3 = u64 [sp + 0x80]\n 60139: u64 [sp + 0x1a0] = a3\n 60143: ra = 722, jump @835\n      : @856 [@dyn 361] (gas: 9)\n 60149: a0 = u64 [sp + 0x88]\n 60153: a0 = a0 + 0xffffffffffffffc0\n 60156: a1 = u64 [sp + 0xb8]\n 60160: a0 = a1 <u a0\n 60163: a1 = u64 [sp + 0xb0]\n 60167: a0 = 0 if a1 != 0\n 60169: a1 = u64 [sp + 0x90]\n 60173: a0 = 0 if a1 != 0\n 60175: jump @865 if a0 == 0\n      : @857 (gas: 37)\n 60179: a2 = u64 [sp + 0x1c0]\n 60183: a5 = u64 [sp + 0x1c8]\n 60187: a4 = u64 [sp + 0x1d8]\n 60191: u64 [sp + 0x80] = a4\n 60195: t0 = u64 [sp + 0x1d0]\n 60199: a1 = u64 [sp + 0xb8]\n 60203: ra = a2 <u a1\n 60206: t2 = a2\n 60208: t1 = a1\n 60210: a3 = u64 [sp + 0xb0]\n 60214: a1 = a5 ^ a3\n 60217: a2 = a5 <u a3\n 60220: u64 [sp + 0x78] = a5\n 60223: s1 = a3\n 60225: a2 = ra if a1 == 0\n 60228: u64 [sp + 0x88] = t0\n 60232: a3 = u64 [sp + 0x98]\n 60236: a0 = t0 - a3\n 60239: a1 = a0 - a2\n 60242: u64 [sp + 0x70] = a1\n 60245: a1 = a0 <u a2\n 60248: a2 = t0 <u a3\n 60251: a3 = u64 [sp + 0xa0]\n 60255: a3 = a4 - a3\n 60258: a3 = a3 - a2\n 60261: a3 = a3 - a1\n 60264: u64 [sp + 0x68] = a3\n 60267: a1 = a5 - s1\n 60270: a0 = a1 - ra\n 60273: u64 [sp + 0x40] = a0\n 60276: a0 = t2 - t1\n 60279: u64 [sp + 0x38] = a0\n 60282: s1 = t2\n 60284: a0 = u64 [sp + 0xa8]\n 60288: i32 a0 = a0 + 0x40\n 60291: a1 = 0x20\n 60294: ra = 724, jump @0\n      : @858 [@dyn 362] (gas: 87)\n 60301: a1 = u64 [sp + 0x68]\n 60304: a1 = reverse a1\n 60306: a2 = u64 [sp + 0x70]\n 60309: a2 = reverse a2\n 60311: a3 = u64 [sp + 0x40]\n 60314: a3 = reverse a3\n 60316: a4 = u64 [sp + 0x38]\n 60319: a4 = reverse a4\n 60321: u8 [a0 + 0x18] = a4\n 60324: a5 = a4 >> 0x38\n 60327: u8 [a0 + 0x1f] = a5\n 60330: a5 = a4 >> 0x30\n 60333: u8 [a0 + 0x1e] = a5\n 60336: a5 = a4 >> 0x28\n 60339: u8 [a0 + 0x1d] = a5\n 60342: a5 = a4 >> 0x20\n 60345: u8 [a0 + 0x1c] = a5\n 60348: a5 = a4 >> 0x18\n 60351: u8 [a0 + 0x1b] = a5\n 60354: a5 = a4 >> 0x10\n 60357: u8 [a0 + 0x1a] = a5\n 60360: a4 = a4 >> 0x8\n 60363: u8 [a0 + 0x19] = a4\n 60366: u8 [a0 + 0x10] = a3\n 60369: a4 = a3 >> 0x38\n 60372: u8 [a0 + 0x17] = a4\n 60375: a4 = a3 >> 0x30\n 60378: u8 [a0 + 0x16] = a4\n 60381: a4 = a3 >> 0x28\n 60384: u8 [a0 + 0x15] = a4\n 60387: a4 = a3 >> 0x20\n 60390: u8 [a0 + 0x14] = a4\n 60393: a4 = a3 >> 0x18\n 60396: u8 [a0 + 0x13] = a4\n 60399: a4 = a3 >> 0x10\n 60402: u8 [a0 + 0x12] = a4\n 60405: a3 = a3 >> 0x8\n 60408: u8 [a0 + 0x11] = a3\n 60411: u8 [a0 + 0x8] = a2\n 60414: a3 = a2 >> 0x38\n 60417: u8 [a0 + 0xf] = a3\n 60420: a3 = a2 >> 0x30\n 60423: u8 [a0 + 0xe] = a3\n 60426: a3 = a2 >> 0x28\n 60429: u8 [a0 + 0xd] = a3\n 60432: a3 = a2 >> 0x20\n 60435: u8 [a0 + 0xc] = a3\n 60438: a3 = a2 >> 0x18\n 60441: u8 [a0 + 0xb] = a3\n 60444: a3 = a2 >> 0x10\n 60447: u8 [a0 + 0xa] = a3\n 60450: a2 = a2 >> 0x8\n 60453: u8 [a0 + 0x9] = a2\n 60456: u8 [a0] = a1\n 60458: a2 = a1 >> 0x38\n 60461: u8 [a0 + 0x7] = a2\n 60464: a2 = a1 >> 0x30\n 60467: u8 [a0 + 0x6] = a2\n 60470: a2 = a1 >> 0x28\n 60473: u8 [a0 + 0x5] = a2\n 60476: a2 = a1 >> 0x20\n 60479: u8 [a0 + 0x4] = a2\n 60482: a2 = a1 >> 0x18\n 60485: u8 [a0 + 0x3] = a2\n 60488: a2 = a1 >> 0x10\n 60491: u8 [a0 + 0x2] = a2\n 60494: a1 = a1 >> 0x8\n 60497: u8 [a0 + 0x1] = a1\n 60500: a0 = u64 [sp + 0x80]\n 60504: u64 [sp + 0x138] = a0\n 60508: a0 = u64 [sp + 0x88]\n 60512: u64 [sp + 0x130] = a0\n 60516: a0 = u64 [sp + 0x78]\n 60519: u64 [sp + 0x128] = a0\n 60523: u64 [sp + 0x120] = s1\n 60527: a0 = u64 [sp + 0x48]\n 60530: u64 [sp + 0x158] = a0\n 60534: a0 = u64 [sp + 0x50]\n 60537: u64 [sp + 0x150] = a0\n 60541: a0 = u64 [sp + 0x58]\n 60544: u64 [sp + 0x148] = a0\n 60548: a0 = sp + 0x160\n 60552: a1 = sp + 0x140\n 60556: a2 = sp + 0x120\n 60560: a3 = u64 [sp + 0x60]\n 60563: u64 [sp + 0x140] = a3\n 60567: ra = 726, jump @468\n      : @859 [@dyn 363] (gas: 10)\n 60573: s1 = 0x100000000\n 60583: u64 [sp + 0x70] = s1\n 60586: a0 = 0xffffffa0\n 60596: a1 = u64 [sp + 0xb8]\n 60600: a0 = a1 <u a0\n 60603: a1 = u64 [sp + 0xb0]\n 60607: a0 = 0 if a1 != 0\n 60609: a1 = u64 [sp + 0x90]\n 60613: a0 = 0 if a1 != 0\n 60615: jump @865 if a0 == 0\n      : @860 (gas: 15)\n 60619: a0 = u64 [sp + 0x178]\n 60623: u64 [sp + 0x78] = a0\n 60626: a0 = u64 [sp + 0x170]\n 60630: u64 [sp + 0x80] = a0\n 60634: a0 = u64 [sp + 0x168]\n 60638: u64 [sp + 0x88] = a0\n 60642: a0 = u64 [sp + 0x160]\n 60646: u64 [sp + 0x68] = a0\n 60649: a0 = u64 [sp + 0x20]\n 60652: a0 = a0 >> 0x20\n 60655: s1 = a0 << 0x20\n 60658: a0 = u64 [sp + 0xa8]\n 60662: i32 a0 = a0 + 0x60\n 60665: a1 = 0x20\n 60668: ra = 728, jump @0\n      : @861 [@dyn 364] (gas: 45)\n 60675: a1 = reverse s1\n 60677: u8 [a0 + 31] = 0\n 60680: u8 [a0 + 30] = 0\n 60683: u8 [a0 + 29] = 0\n 60686: u8 [a0 + 28] = 0\n 60689: u8 [a0 + 27] = 0\n 60692: u8 [a0 + 26] = 0\n 60695: u8 [a0 + 25] = 0\n 60698: u8 [a0 + 24] = 0\n 60701: u8 [a0 + 23] = 0\n 60704: u8 [a0 + 22] = 0\n 60707: u8 [a0 + 21] = 0\n 60710: u8 [a0 + 20] = 0\n 60713: u8 [a0 + 19] = 0\n 60716: u8 [a0 + 18] = 0\n 60719: u8 [a0 + 17] = 0\n 60722: u8 [a0 + 16] = 0\n 60725: u8 [a0 + 15] = 0\n 60728: u8 [a0 + 14] = 0\n 60731: u8 [a0 + 13] = 0\n 60734: u8 [a0 + 12] = 0\n 60737: u8 [a0 + 11] = 0\n 60740: u8 [a0 + 10] = 0\n 60743: u8 [a0 + 9] = 0\n 60746: u8 [a0 + 8] = 0\n 60749: u8 [a0 + 7] = 0\n 60752: u8 [a0 + 6] = 0\n 60755: u8 [a0 + 5] = 0\n 60758: u8 [a0 + 4] = 0\n 60761: u8 [a0] = a1\n 60763: a2 = a1 >> 0x18\n 60766: u8 [a0 + 0x3] = a2\n 60769: a2 = a1 >> 0x10\n 60772: u8 [a0 + 0x2] = a2\n 60775: a1 = a1 >> 0x8\n 60778: a2 = u64 [sp + 0x70]\n 60781: a2 = a2 + 0xffffffffffffff80\n 60784: a3 = u64 [sp + 0xb8]\n 60788: a2 = a3 <u a2\n 60791: a3 = u64 [sp + 0xb0]\n 60795: a2 = 0 if a3 != 0\n 60797: a3 = u64 [sp + 0x90]\n 60801: a2 = 0 if a3 != 0\n 60803: u8 [a0 + 0x1] = a1\n 60806: jump @865 if a2 == 0\n      : @862 (gas: 33)\n 60810: t0 = u64 [sp + 0xb8]\n 60814: a1 = u64 [sp + 0x68]\n 60817: t2 = a1 <u t0\n 60820: t1 = a1\n 60822: a5 = u64 [sp + 0xb0]\n 60826: a3 = u64 [sp + 0x88]\n 60830: a1 = a3 ^ a5\n 60833: a2 = a3 <u a5\n 60836: a4 = a3\n 60838: a2 = t2 if a1 == 0\n 60841: a3 = u64 [sp + 0x98]\n 60845: a1 = u64 [sp + 0x80]\n 60849: a0 = a1 - a3\n 60852: s1 = a0 - a2\n 60855: u64 [sp + 0x90] = s1\n 60859: s1 = a0 <u a2\n 60862: a2 = a1 <u a3\n 60865: a3 = u64 [sp + 0xa0]\n 60869: a1 = u64 [sp + 0x78]\n 60872: a3 = a1 - a3\n 60875: a3 = a3 - a2\n 60878: a3 = a3 - s1\n 60881: u64 [sp + 0xa0] = a3\n 60885: a1 = a4 - a5\n 60888: a0 = a1 - t2\n 60891: u64 [sp + 0xb0] = a0\n 60895: a0 = t1 - t0\n 60898: u64 [sp + 0xb8] = a0\n 60902: s1 = t1\n 60904: a0 = u64 [sp + 0xa8]\n 60908: i32 a0 = a0 + 0x80\n 60912: a1 = 0x20\n 60915: ra = 730, jump @0\n      : @863 [@dyn 365] (gas: 87)\n 60922: a1 = u64 [sp + 0xa0]\n 60926: a1 = reverse a1\n 60928: a2 = u64 [sp + 0x90]\n 60932: a2 = reverse a2\n 60934: a3 = u64 [sp + 0xb0]\n 60938: a3 = reverse a3\n 60940: a4 = u64 [sp + 0xb8]\n 60944: a4 = reverse a4\n 60946: u8 [a0 + 0x18] = a4\n 60949: a5 = a4 >> 0x38\n 60952: u8 [a0 + 0x1f] = a5\n 60955: a5 = a4 >> 0x30\n 60958: u8 [a0 + 0x1e] = a5\n 60961: a5 = a4 >> 0x28\n 60964: u8 [a0 + 0x1d] = a5\n 60967: a5 = a4 >> 0x20\n 60970: u8 [a0 + 0x1c] = a5\n 60973: a5 = a4 >> 0x18\n 60976: u8 [a0 + 0x1b] = a5\n 60979: a5 = a4 >> 0x10\n 60982: u8 [a0 + 0x1a] = a5\n 60985: a4 = a4 >> 0x8\n 60988: u8 [a0 + 0x19] = a4\n 60991: u8 [a0 + 0x10] = a3\n 60994: a4 = a3 >> 0x38\n 60997: u8 [a0 + 0x17] = a4\n 61000: a4 = a3 >> 0x30\n 61003: u8 [a0 + 0x16] = a4\n 61006: a4 = a3 >> 0x28\n 61009: u8 [a0 + 0x15] = a4\n 61012: a4 = a3 >> 0x20\n 61015: u8 [a0 + 0x14] = a4\n 61018: a4 = a3 >> 0x18\n 61021: u8 [a0 + 0x13] = a4\n 61024: a4 = a3 >> 0x10\n 61027: u8 [a0 + 0x12] = a4\n 61030: a3 = a3 >> 0x8\n 61033: u8 [a0 + 0x11] = a3\n 61036: u8 [a0 + 0x8] = a2\n 61039: a3 = a2 >> 0x38\n 61042: u8 [a0 + 0xf] = a3\n 61045: a3 = a2 >> 0x30\n 61048: u8 [a0 + 0xe] = a3\n 61051: a3 = a2 >> 0x28\n 61054: u8 [a0 + 0xd] = a3\n 61057: a3 = a2 >> 0x20\n 61060: u8 [a0 + 0xc] = a3\n 61063: a3 = a2 >> 0x18\n 61066: u8 [a0 + 0xb] = a3\n 61069: a3 = a2 >> 0x10\n 61072: u8 [a0 + 0xa] = a3\n 61075: a2 = a2 >> 0x8\n 61078: u8 [a0 + 0x9] = a2\n 61081: u8 [a0] = a1\n 61083: a2 = a1 >> 0x38\n 61086: u8 [a0 + 0x7] = a2\n 61089: a2 = a1 >> 0x30\n 61092: u8 [a0 + 0x6] = a2\n 61095: a2 = a1 >> 0x28\n 61098: u8 [a0 + 0x5] = a2\n 61101: a2 = a1 >> 0x20\n 61104: u8 [a0 + 0x4] = a2\n 61107: a2 = a1 >> 0x18\n 61110: u8 [a0 + 0x3] = a2\n 61113: a2 = a1 >> 0x10\n 61116: u8 [a0 + 0x2] = a2\n 61119: a1 = a1 >> 0x8\n 61122: u8 [a0 + 0x1] = a1\n 61125: a0 = u64 [sp + 0x78]\n 61128: u64 [sp + 0xd8] = a0\n 61132: a0 = u64 [sp + 0x80]\n 61136: u64 [sp + 0xd0] = a0\n 61140: a0 = u64 [sp + 0x88]\n 61144: u64 [sp + 0xc8] = a0\n 61148: u64 [sp + 0xc0] = s1\n 61152: a0 = u64 [sp]\n 61154: u64 [sp + 0xf8] = a0\n 61158: a0 = u64 [sp + 0x8]\n 61161: u64 [sp + 0xf0] = a0\n 61165: a0 = u64 [sp + 0x10]\n 61168: u64 [sp + 0xe8] = a0\n 61172: a0 = sp + 0x100\n 61176: a1 = sp + 0xe0\n 61180: a2 = sp + 0xc0\n 61184: a3 = u64 [sp + 0x18]\n 61187: u64 [sp + 0xe0] = a3\n 61191: ra = 732, jump @468\n      : @864 [@dyn 366] (gas: 15)\n 61197: a0 = u64 [sp + 0x110]\n 61201: a1 = u64 [sp + 0x118]\n 61205: a2 = u64 [sp + 0x100]\n 61209: a3 = u64 [sp + 0x108]\n 61213: a4 = u64 [sp + 0x28]\n 61216: u64 [a4 + 0x10] = a0\n 61219: u64 [a4 + 0x18] = a1\n 61222: u64 [a4] = a2\n 61224: u64 [a4 + 0x8] = a3\n 61227: sp = s0 + 0xfffffffffffffe00\n 61231: ra = u64 [sp + 0x1f8]\n 61235: s0 = u64 [sp + 0x1f0]\n 61239: s1 = u64 [sp + 0x1e8]\n 61243: sp = sp + 0x200\n 61247: ret\n      : @865 (gas: 1)\n 61249: trap\n      : @866 (gas: 32)\n 61250: sp = sp + 0xfffffffffffffaa0\n 61254: u64 [sp + 0x558] = ra\n 61258: u64 [sp + 0x550] = s0\n 61262: u64 [sp + 0x548] = s1\n 61266: s0 = sp + 0x560\n 61270: sp = sp & 0xffffffffffffffe0\n 61273: a3 = u64 [a2 + 0x18]\n 61276: u64 [sp + 0x188] = a3\n 61280: a3 = u64 [a2 + 0x10]\n 61283: u64 [sp + 0x190] = a3\n 61287: a3 = u64 [a2 + 0x8]\n 61290: u64 [sp + 0x198] = a3\n 61294: a2 = u64 [a2]\n 61296: u64 [sp + 0x1a0] = a2\n 61300: a2 = u64 [a1 + 0x18]\n 61303: u64 [sp + 0x1a8] = a2\n 61307: a2 = u64 [a1 + 0x10]\n 61310: u64 [sp + 0x1b0] = a2\n 61314: a2 = u64 [a1 + 0x8]\n 61317: u64 [sp + 0x1b8] = a2\n 61321: a1 = u64 [a1]\n 61323: u64 [sp + 0x1c0] = a1\n 61327: a1 = u64 [a0]\n 61329: u64 [sp + 0x1d8] = a1\n 61333: a1 = u64 [a0 + 0x8]\n 61336: u64 [sp + 0x1d0] = a1\n 61340: a1 = u64 [a0 + 0x10]\n 61343: u64 [sp + 0x1c8] = a1\n 61347: s1 = u64 [a0 + 0x18]\n 61350: a1 = 0x20\n 61353: a0 = 0\n 61355: ra = 734, jump @0\n      : @867 [@dyn 367] (gas: 103)\n 61362: u64 [sp + 0x180] = s1\n 61366: a2 = reverse s1\n 61368: a1 = u64 [sp + 0x1c8]\n 61372: a4 = reverse a1\n 61374: a1 = u64 [sp + 0x1d0]\n 61378: a5 = reverse a1\n 61380: a1 = u64 [sp + 0x1d8]\n 61384: a3 = reverse a1\n 61386: u8 [a0 + 0x18] = a3\n 61389: u8 [a0 + 0x10] = a5\n 61392: u8 [a0 + 0x8] = a4\n 61395: u8 [a0] = a2\n 61397: a1 = a3 >> 0x38\n 61400: u64 [sp + 0x170] = a1\n 61404: u8 [a0 + 0x1f] = a1\n 61407: a1 = a3 >> 0x30\n 61410: u64 [sp + 0x160] = a1\n 61414: u8 [a0 + 0x1e] = a1\n 61417: a1 = a3 >> 0x28\n 61420: u64 [sp + 0x158] = a1\n 61424: u8 [a0 + 0x1d] = a1\n 61427: a1 = a3 >> 0x20\n 61430: u64 [sp + 0x148] = a1\n 61434: u8 [a0 + 0x1c] = a1\n 61437: a1 = a3 >> 0x18\n 61440: u64 [sp + 0x140] = a1\n 61444: u8 [a0 + 0x1b] = a1\n 61447: a1 = a3 >> 0x10\n 61450: u64 [sp + 0x138] = a1\n 61454: u8 [a0 + 0x1a] = a1\n 61457: u64 [sp + 0x150] = a3\n 61461: a1 = a3 >> 0x8\n 61464: u64 [sp + 0x178] = a1\n 61468: u8 [a0 + 0x19] = a1\n 61471: a1 = a5 >> 0x38\n 61474: u64 [sp + 0x120] = a1\n 61478: u8 [a0 + 0x17] = a1\n 61481: a1 = a5 >> 0x30\n 61484: u64 [sp + 0x118] = a1\n 61488: u8 [a0 + 0x16] = a1\n 61491: a1 = a5 >> 0x28\n 61494: u64 [sp + 0x110] = a1\n 61498: u8 [a0 + 0x15] = a1\n 61501: a1 = a5 >> 0x20\n 61504: u64 [sp + 0x108] = a1\n 61508: u8 [a0 + 0x14] = a1\n 61511: a1 = a5 >> 0x18\n 61514: u64 [sp + 0x100] = a1\n 61518: u8 [a0 + 0x13] = a1\n 61521: a1 = a5 >> 0x10\n 61524: u64 [sp + 0xf8] = a1\n 61528: u8 [a0 + 0x12] = a1\n 61531: u64 [sp + 0x128] = a5\n 61535: a5 = a5 >> 0x8\n 61538: u64 [sp + 0xf0] = a5\n 61542: u8 [a0 + 0x11] = a5\n 61545: a1 = a4 >> 0x38\n 61548: u64 [sp + 0xe8] = a1\n 61552: u8 [a0 + 0xf] = a1\n 61555: a1 = a4 >> 0x30\n 61558: u64 [sp + 0xe0] = a1\n 61562: u8 [a0 + 0xe] = a1\n 61565: a1 = a4 >> 0x28\n 61568: u64 [sp + 0xd8] = a1\n 61572: u8 [a0 + 0xd] = a1\n 61575: a1 = a4 >> 0x20\n 61578: u64 [sp + 0xd0] = a1\n 61582: u8 [a0 + 0xc] = a1\n 61585: a1 = a4 >> 0x18\n 61588: u64 [sp + 0xc8] = a1\n 61592: u8 [a0 + 0xb] = a1\n 61595: a1 = a4 >> 0x10\n 61598: u64 [sp + 0xc0] = a1\n 61602: u8 [a0 + 0xa] = a1\n 61605: u64 [sp + 0x130] = a4\n 61609: a4 = a4 >> 0x8\n 61612: u64 [sp + 0xb8] = a4\n 61616: u8 [a0 + 0x9] = a4\n 61619: a1 = a2 >> 0x38\n 61622: u64 [sp + 0xb0] = a1\n 61626: u8 [a0 + 0x7] = a1\n 61629: a1 = a2 >> 0x30\n 61632: u64 [sp + 0xa8] = a1\n 61636: u8 [a0 + 0x6] = a1\n 61639: a1 = a2 >> 0x28\n 61642: u64 [sp + 0xa0] = a1\n 61646: u8 [a0 + 0x5] = a1\n 61649: a1 = a2 >> 0x20\n 61652: u64 [sp + 0x98] = a1\n 61656: u8 [a0 + 0x4] = a1\n 61659: a1 = a2 >> 0x18\n 61662: u64 [sp + 0x90] = a1\n 61666: u8 [a0 + 0x3] = a1\n 61669: a1 = a2 >> 0x10\n 61672: u64 [sp + 0x88] = a1\n 61676: u8 [a0 + 0x2] = a1\n 61679: u64 [sp + 0x168] = a2\n 61683: a2 = a2 >> 0x8\n 61686: u64 [sp + 0x80] = a2\n 61690: u8 [a0 + 0x1] = a2\n 61693: a0 = 0x20\n 61696: a1 = 0x20\n 61699: ra = 736, jump @0\n      : @868 [@dyn 368] (gas: 36)\n 61706: u8 [a0 + 31] = 0x4\n 61710: u8 [a0 + 30] = 0\n 61713: u8 [a0 + 29] = 0\n 61716: u8 [a0 + 28] = 0\n 61719: u8 [a0 + 27] = 0\n 61722: u8 [a0 + 26] = 0\n 61725: u8 [a0 + 25] = 0\n 61728: u8 [a0 + 24] = 0\n 61731: u8 [a0 + 23] = 0\n 61734: u8 [a0 + 22] = 0\n 61737: u8 [a0 + 21] = 0\n 61740: u8 [a0 + 20] = 0\n 61743: u8 [a0 + 19] = 0\n 61746: u8 [a0 + 18] = 0\n 61749: u8 [a0 + 17] = 0\n 61752: u8 [a0 + 16] = 0\n 61755: u8 [a0 + 15] = 0\n 61758: u8 [a0 + 14] = 0\n 61761: u8 [a0 + 13] = 0\n 61764: u8 [a0 + 12] = 0\n 61767: u8 [a0 + 11] = 0\n 61770: u8 [a0 + 10] = 0\n 61773: u8 [a0 + 9] = 0\n 61776: u8 [a0 + 8] = 0\n 61779: u8 [a0 + 7] = 0\n 61782: u8 [a0 + 6] = 0\n 61785: u8 [a0 + 5] = 0\n 61788: u8 [a0 + 4] = 0\n 61791: u8 [a0 + 3] = 0\n 61794: u8 [a0 + 2] = 0\n 61797: u8 [a0 + 1] = 0\n 61800: u8 [a0 + 0] = 0\n 61802: a1 = 0x40\n 61805: s1 = 0x40\n 61808: a0 = 0\n 61810: ra = 738, jump @0\n      : @869 [@dyn 369] (gas: 36)\n 61817: i32 a0 = a0 + 0\n 61819: i32 a2 = sp + 0x520\n 61823: a1 = 0x40\n 61826: ecalli 9 // 'hash_keccak_256'\n 61828: a0 = u64 [sp + 0x520]\n 61832: a1 = u64 [sp + 0x528]\n 61836: a2 = u64 [sp + 0x530]\n 61840: a3 = u64 [sp + 0x538]\n 61844: a0 = reverse a0\n 61846: a1 = reverse a1\n 61848: a2 = reverse a2\n 61850: a3 = reverse a3\n 61852: a3 = a3 + 0x1\n 61855: a4 = a3 <u 0x1\n 61858: a2 = a2 + a4\n 61861: a4 = a3 | a2\n 61864: a4 = a4 <u 0x1\n 61867: a4 = a4 + a1\n 61870: a1 = a4 <u a1\n 61873: a0 = a0 + a1\n 61876: u64 [sp + 0x508] = a2\n 61880: u64 [sp + 0x500] = a3\n 61884: u64 [sp + 0x510] = a4\n 61888: u64 [sp + 0x518] = a0\n 61892: u64 [sp + 1336] = 0\n 61896: u64 [sp + 1328] = 0\n 61900: u64 [sp + 1320] = 0\n 61904: u64 [sp + 1312] = 0\n 61908: u32 [sp + 1344] = 0x20\n 61913: i32 a1 = sp + 0x500\n 61917: i32 a3 = sp + 0x520\n 61921: i32 a4 = sp + 0x540\n 61925: a2 = 0xffffffffffffffff\n 61928: a0 = 0\n 61930: ecalli 8 // 'get_storage'\n 61932: fallthrough\n      : @870 (gas: 8)\n 61933: a0 = u64 [sp + 0x530]\n 61937: a1 = u64 [sp + 0x538]\n 61941: a2 = u64 [sp + 0x528]\n 61945: a3 = u64 [sp + 0x520]\n 61949: a1 = a1 | a2\n 61952: a0 = a0 | a3\n 61955: a0 = a0 | a1\n 61958: jump @880 if a0 != 0\n      : @871 (gas: 3)\n 61962: a0 = 0x40\n 61965: a1 = 0x20\n 61968: ra = 740, jump @0\n      : @872 [@dyn 370] (gas: 100)\n 61975: a1 = u8 [a0 + 0x11]\n 61978: a2 = u8 [a0 + 0x10]\n 61981: a3 = u8 [a0 + 0x12]\n 61984: a4 = u8 [a0 + 0x13]\n 61987: a1 = a1 << 0x8\n 61990: a1 = a1 | a2\n 61993: a3 = a3 << 0x10\n 61996: a4 = a4 << 0x18\n 61999: a3 = a3 | a4\n 62002: a1 = a1 | a3\n 62005: a2 = u8 [a0 + 0x15]\n 62008: a3 = u8 [a0 + 0x14]\n 62011: a4 = u8 [a0 + 0x16]\n 62014: a5 = u8 [a0 + 0x17]\n 62017: a2 = a2 << 0x8\n 62020: a2 = a2 | a3\n 62023: a4 = a4 << 0x10\n 62026: a5 = a5 << 0x18\n 62029: a4 = a4 | a5\n 62032: a2 = a2 | a4\n 62035: a2 = a2 << 0x20\n 62038: t0 = a2 | a1\n 62041: a2 = u8 [a0 + 0x1]\n 62044: a3 = u8 [a0]\n 62046: a4 = u8 [a0 + 0x2]\n 62049: a5 = u8 [a0 + 0x3]\n 62052: a2 = a2 << 0x8\n 62055: a2 = a2 | a3\n 62058: a4 = a4 << 0x10\n 62061: a5 = a5 << 0x18\n 62064: a4 = a4 | a5\n 62067: a2 = a2 | a4\n 62070: a3 = u8 [a0 + 0x5]\n 62073: a4 = u8 [a0 + 0x4]\n 62076: a5 = u8 [a0 + 0x6]\n 62079: s1 = u8 [a0 + 0x7]\n 62082: a3 = a3 << 0x8\n 62085: a3 = a3 | a4\n 62088: a5 = a5 << 0x10\n 62091: s1 = s1 << 0x18\n 62094: a5 = a5 | s1\n 62097: a3 = a3 | a5\n 62100: a3 = a3 << 0x20\n 62103: a2 = a2 | a3\n 62106: a3 = u8 [a0 + 0x19]\n 62109: a4 = u8 [a0 + 0x18]\n 62112: a5 = u8 [a0 + 0x1a]\n 62115: s1 = u8 [a0 + 0x1b]\n 62118: a3 = a3 << 0x8\n 62121: a3 = a3 | a4\n 62124: a5 = a5 << 0x10\n 62127: s1 = s1 << 0x18\n 62130: a5 = a5 | s1\n 62133: a3 = a3 | a5\n 62136: a4 = u8 [a0 + 0x1d]\n 62139: a5 = u8 [a0 + 0x1c]\n 62142: s1 = u8 [a0 + 0x1e]\n 62145: a1 = u8 [a0 + 0x1f]\n 62148: a4 = a4 << 0x8\n 62151: a4 = a4 | a5\n 62154: s1 = s1 << 0x10\n 62157: a1 = a1 << 0x18\n 62160: a1 = a1 | s1\n 62163: a1 = a1 | a4\n 62166: a1 = a1 << 0x20\n 62169: a3 = a3 | a1\n 62172: a1 = u8 [a0 + 0x9]\n 62175: a4 = u8 [a0 + 0x8]\n 62178: a5 = u8 [a0 + 0xa]\n 62181: s1 = u8 [a0 + 0xb]\n 62184: a1 = a1 << 0x8\n 62187: a1 = a1 | a4\n 62190: a5 = a5 << 0x10\n 62193: s1 = s1 << 0x18\n 62196: a5 = a5 | s1\n 62199: a1 = a1 | a5\n 62202: a4 = u8 [a0 + 0xd]\n 62205: a5 = u8 [a0 + 0xc]\n 62208: s1 = u8 [a0 + 0xe]\n 62211: a0 = u8 [a0 + 0xf]\n 62214: a4 = a4 << 0x8\n 62217: a4 = a4 | a5\n 62220: s1 = s1 << 0x10\n 62223: a0 = a0 << 0x18\n 62226: a0 = a0 | s1\n 62229: a0 = a0 | a4\n 62232: a0 = a0 << 0x20\n 62235: a0 = a0 | a1\n 62238: s1 = reverse a0\n 62240: a3 = reverse a3\n 62242: a4 = reverse a2\n 62244: a2 = reverse t0\n 62246: a0 = a2 | a4\n 62249: a1 = a3 | s1\n 62252: a1 = a1 | a0\n 62255: a1 = a1 >> 0x20\n 62258: a0 = a0 | s1\n 62261: a0 = a0 << 0x20\n 62264: a0 = a0 | a1\n 62267: jump @874 if a0 == 0\n      : @873 (gas: 1)\n 62270: jump @912\n      : @874 (gas: 7)\n 62273: i32 a0 = a3 + 0\n 62275: a1 = 0x20\n 62278: u64 [sp + 0x1c0] = a0\n 62282: u64 [sp + 0x1c8] = a3\n 62286: u64 [sp + 0x1d0] = a2\n 62290: u64 [sp + 0x1d8] = a4\n 62294: ra = 742, jump @0\n      : @875 [@dyn 371] (gas: 50)\n 62301: u8 [a0 + 31] = 0\n 62304: u8 [a0 + 30] = 0\n 62307: u8 [a0 + 29] = 0\n 62310: u8 [a0 + 28] = 0\n 62313: u8 [a0 + 27] = 0\n 62316: u8 [a0 + 26] = 0\n 62319: u8 [a0 + 25] = 0\n 62322: u8 [a0 + 24] = 0\n 62325: u8 [a0 + 23] = 0\n 62328: u8 [a0 + 22] = 0\n 62331: u8 [a0 + 21] = 0\n 62334: u8 [a0 + 20] = 0\n 62337: u8 [a0 + 19] = 0\n 62340: u8 [a0 + 18] = 0\n 62343: u8 [a0 + 17] = 0\n 62346: u8 [a0 + 16] = 0\n 62349: u8 [a0 + 15] = 0\n 62352: u8 [a0 + 14] = 0\n 62355: u8 [a0 + 13] = 0\n 62358: u8 [a0 + 12] = 0\n 62361: u8 [a0 + 11] = 0\n 62364: u8 [a0 + 10] = 0\n 62367: u8 [a0 + 9] = 0\n 62370: u8 [a0 + 8] = 0\n 62373: u8 [a0 + 7] = 0\n 62376: u8 [a0 + 6] = 0\n 62379: u8 [a0 + 5] = 0\n 62382: u8 [a0 + 4] = 0\n 62385: u8 [a0 + 3] = 0xa0\n 62390: u8 [a0 + 2] = 0x79\n 62394: u8 [a0 + 1] = 0xc3\n 62399: u8 [a0 + 0] = 0x8\n 62402: a1 = u64 [sp + 0x1c8]\n 62406: a0 = a1 + 0x4\n 62409: a1 = a0 <u a1\n 62412: a3 = u64 [sp + 0x1d0]\n 62416: a2 = a3 + a1\n 62419: a3 = a2 <u a3\n 62422: a3 = a1 if a1 == 0\n 62425: a3 = a3 + s1\n 62428: a1 = a3 <u s1\n 62431: a4 = u64 [sp + 0x1d8]\n 62435: a4 = a4 + a1\n 62438: u64 [sp + 0x1e8] = a2\n 62442: u64 [sp + 0x1e0] = a0\n 62446: u64 [sp + 0x1f0] = a3\n 62450: a0 = sp + 0x200\n 62454: a1 = sp + 0x1e0\n 62458: u64 [sp + 0x1f8] = a4\n 62462: ra = 744, jump @813\n      : @876 [@dyn 372] (gas: 30)\n 62468: a0 = u64 [sp + 0x208]\n 62472: t0 = u64 [sp + 0x218]\n 62476: t2 = u64 [sp + 0x200]\n 62480: a3 = u64 [sp + 0x210]\n 62484: a1 = u64 [sp + 0x1d0]\n 62488: a4 = a0 ^ a1\n 62491: a5 = a0 <u a1\n 62494: t1 = a1\n 62496: a2 = u64 [sp + 0x1c8]\n 62500: a1 = t2 <u a2\n 62503: a5 = a1 if a4 == 0\n 62506: a4 = a3 - s1\n 62509: a3 = a3 <u s1\n 62512: s1 = u64 [sp + 0x1d8]\n 62516: s1 = t0 - s1\n 62519: s1 = s1 - a3\n 62522: a3 = a4 <u a5\n 62525: s1 = s1 - a3\n 62528: a4 = a4 - a5\n 62531: a0 = a0 - t1\n 62534: a1 = a0 - a1\n 62537: a0 = t2 - a2\n 62540: a1 = a1 | s1\n 62543: a2 = a0 | a4\n 62546: a2 = a2 | a1\n 62549: a1 = a1 | a4\n 62552: a2 = a2 >> 0x20\n 62555: a1 = a1 << 0x20\n 62558: a1 = a1 | a2\n 62561: jump @878 if a1 == 0\n      : @877 (gas: 1)\n 62564: jump @912\n      : @878 (gas: 4)\n 62567: i32 s1 = a0 + 0\n 62569: a0 = u64 [sp + 0x1c0]\n 62573: a1 = s1\n 62575: ra = 746, jump @0\n      : @879 [@dyn 373] (gas: 5)\n 62582: i32 a1 = a0 + 0\n 62584: a0 = 0x1\n 62587: a2 = s1\n 62589: ecalli 14 // 'seal_return'\n 62591: fallthrough\n      : @880 (gas: 7)\n 62592: u64 [sp + 1208] = 0\n 62596: u64 [sp + 1200] = 0\n 62600: u64 [sp + 0x4a0] = s1\n 62604: a0 = sp + 0x4c0\n 62608: a1 = sp + 0x4a0\n 62612: u64 [sp + 1192] = 0\n 62616: ra = 748, jump @113\n      : @881 [@dyn 374] (gas: 12)\n 62623: a4 = u64 [sp + 0x4d8]\n 62627: a3 = u64 [sp + 0x4d0]\n 62631: a2 = u64 [sp + 0x4c8]\n 62635: s1 = u64 [sp + 0x4c0]\n 62639: a0 = a2 | a4\n 62642: a1 = s1 | a3\n 62645: a1 = a1 | a0\n 62648: a1 = a1 >> 0x20\n 62651: a0 = a0 | a3\n 62654: a0 = a0 << 0x20\n 62657: a0 = a0 | a1\n 62660: jump @883 if a0 == 0\n      : @882 (gas: 1)\n 62663: jump @912\n      : @883 (gas: 7)\n 62666: i32 a0 = s1 + 0\n 62668: a1 = 0x20\n 62671: u64 [sp + 0x60] = a0\n 62674: u64 [sp + 0x78] = a2\n 62677: u64 [sp + 0x70] = a3\n 62680: u64 [sp + 0x68] = a4\n 62683: ra = 750, jump @0\n      : @884 [@dyn 375] (gas: 42)\n 62690: a4 = 0x1\n 62693: a1 = u64 [sp + 0x70]\n 62696: a2 = u64 [sp + 0x68]\n 62699: a2 = a2 | a1\n 62702: a1 = 0xffffffe0\n 62712: a1 = s1 <u a1\n 62715: a3 = u64 [sp + 0x78]\n 62718: a1 = 0 if a3 != 0\n 62720: a1 = 0 if a2 != 0\n 62722: u8 [a0 + 0x1f] = a4\n 62725: u8 [a0 + 30] = 0\n 62728: u8 [a0 + 29] = 0\n 62731: u8 [a0 + 28] = 0\n 62734: u8 [a0 + 27] = 0\n 62737: u8 [a0 + 26] = 0\n 62740: u8 [a0 + 25] = 0\n 62743: u8 [a0 + 24] = 0\n 62746: u8 [a0 + 23] = 0\n 62749: u8 [a0 + 22] = 0\n 62752: u8 [a0 + 21] = 0\n 62755: u8 [a0 + 20] = 0\n 62758: u8 [a0 + 19] = 0\n 62761: u8 [a0 + 18] = 0\n 62764: u8 [a0 + 17] = 0\n 62767: u8 [a0 + 16] = 0\n 62770: u8 [a0 + 15] = 0\n 62773: u8 [a0 + 14] = 0\n 62776: u8 [a0 + 13] = 0\n 62779: u8 [a0 + 12] = 0\n 62782: u8 [a0 + 11] = 0\n 62785: u8 [a0 + 10] = 0\n 62788: u8 [a0 + 9] = 0\n 62791: u8 [a0 + 8] = 0\n 62794: u8 [a0 + 7] = 0\n 62797: u8 [a0 + 6] = 0\n 62800: u8 [a0 + 5] = 0\n 62803: u8 [a0 + 4] = 0\n 62806: u8 [a0 + 3] = 0\n 62809: u8 [a0 + 2] = 0\n 62812: u8 [a0 + 1] = 0\n 62815: u8 [a0 + 0] = 0\n 62817: jump @886 if a1 != 0\n      : @885 (gas: 1)\n 62820: jump @912\n      : @886 (gas: 6)\n 62823: u64 [sp + 0x30] = s1\n 62826: s1 = u64 [sp + 0x60]\n 62829: i32 a0 = s1 + 0x20\n 62832: a1 = 0x20\n 62835: u64 [sp + 0x58] = a0\n 62838: ra = 752, jump @0\n      : @887 [@dyn 376] (gas: 39)\n 62845: u8 [a0 + 31] = 0x60\n 62849: u8 [a0 + 30] = 0\n 62852: u8 [a0 + 29] = 0\n 62855: u8 [a0 + 28] = 0\n 62858: u8 [a0 + 27] = 0\n 62861: u8 [a0 + 26] = 0\n 62864: u8 [a0 + 25] = 0\n 62867: u8 [a0 + 24] = 0\n 62870: u8 [a0 + 23] = 0\n 62873: u8 [a0 + 22] = 0\n 62876: u8 [a0 + 21] = 0\n 62879: u8 [a0 + 20] = 0\n 62882: u8 [a0 + 19] = 0\n 62885: u8 [a0 + 18] = 0\n 62888: u8 [a0 + 17] = 0\n 62891: u8 [a0 + 16] = 0\n 62894: u8 [a0 + 15] = 0\n 62897: u8 [a0 + 14] = 0\n 62900: u8 [a0 + 13] = 0\n 62903: u8 [a0 + 12] = 0\n 62906: u8 [a0 + 11] = 0\n 62909: u8 [a0 + 10] = 0\n 62912: u8 [a0 + 9] = 0\n 62915: u8 [a0 + 8] = 0\n 62918: u8 [a0 + 7] = 0\n 62921: u8 [a0 + 6] = 0\n 62924: u8 [a0 + 5] = 0\n 62927: u8 [a0 + 4] = 0\n 62930: u8 [a0 + 3] = 0\n 62933: u8 [a0 + 2] = 0\n 62936: u8 [a0 + 1] = 0\n 62939: u8 [a0 + 0] = 0\n 62941: u64 [sp + 1144] = 0\n 62945: u64 [sp + 1136] = 0\n 62949: u64 [sp + 1120] = 0x1\n 62954: a0 = sp + 0x480\n 62958: a1 = sp + 0x460\n 62962: u64 [sp + 1128] = 0\n 62966: ra = 754, jump @373\n      : @888 [@dyn 377] (gas: 11)\n 62973: a0 = u64 [sp + 0x498]\n 62977: u64 [sp + 0x38] = a0\n 62980: a0 = u64 [sp + 0x490]\n 62984: u64 [sp + 0x40] = a0\n 62987: a0 = u64 [sp + 0x488]\n 62991: u64 [sp + 0x48] = a0\n 62994: a0 = u64 [sp + 0x480]\n 62998: u64 [sp + 0x50] = a0\n 63001: a1 = 0x20\n 63004: a0 = s1\n 63006: ra = 756, jump @0\n      : @889 [@dyn 378] (gas: 90)\n 63013: a1 = u8 [a0 + 0x11]\n 63016: a2 = u8 [a0 + 0x10]\n 63019: a3 = u8 [a0 + 0x12]\n 63022: a4 = u8 [a0 + 0x13]\n 63025: a1 = a1 << 0x8\n 63028: a1 = a1 | a2\n 63031: a3 = a3 << 0x10\n 63034: a4 = a4 << 0x18\n 63037: a3 = a3 | a4\n 63040: t0 = a3 | a1\n 63043: a2 = u8 [a0 + 0x1]\n 63046: a3 = u8 [a0]\n 63048: a4 = u8 [a0 + 0x2]\n 63051: a5 = u8 [a0 + 0x3]\n 63054: a2 = a2 << 0x8\n 63057: a2 = a2 | a3\n 63060: a4 = a4 << 0x10\n 63063: a5 = a5 << 0x18\n 63066: a4 = a4 | a5\n 63069: t1 = a4 | a2\n 63072: a3 = u8 [a0 + 0x15]\n 63075: a4 = u8 [a0 + 0x14]\n 63078: a5 = u8 [a0 + 0x16]\n 63081: s1 = u8 [a0 + 0x17]\n 63084: a3 = a3 << 0x8\n 63087: a3 = a3 | a4\n 63090: a5 = a5 << 0x10\n 63093: s1 = s1 << 0x18\n 63096: a5 = a5 | s1\n 63099: t2 = a5 | a3\n 63102: a4 = u8 [a0 + 0x5]\n 63105: a5 = u8 [a0 + 0x4]\n 63108: s1 = u8 [a0 + 0x6]\n 63111: a1 = u8 [a0 + 0x7]\n 63114: a4 = a4 << 0x8\n 63117: a4 = a4 | a5\n 63120: s1 = s1 << 0x10\n 63123: a1 = a1 << 0x18\n 63126: a1 = a1 | s1\n 63129: ra = a1 | a4\n 63132: a1 = u8 [a0 + 0x19]\n 63135: a5 = u8 [a0 + 0x18]\n 63138: s1 = u8 [a0 + 0x1a]\n 63141: a2 = u8 [a0 + 0x1b]\n 63144: a1 = a1 << 0x8\n 63147: a1 = a1 | a5\n 63150: s1 = s1 << 0x10\n 63153: a2 = a2 << 0x18\n 63156: a2 = a2 | s1\n 63159: a5 = a2 | a1\n 63162: a1 = u8 [a0 + 0x9]\n 63165: a2 = u8 [a0 + 0x8]\n 63168: s1 = u8 [a0 + 0xa]\n 63171: a3 = u8 [a0 + 0xb]\n 63174: a1 = a1 << 0x8\n 63177: a1 = a1 | a2\n 63180: s1 = s1 << 0x10\n 63183: a3 = a3 << 0x18\n 63186: a3 = a3 | s1\n 63189: s1 = a3 | a1\n 63192: a1 = u8 [a0 + 0x1d]\n 63195: a2 = u8 [a0 + 0x1c]\n 63198: a3 = u8 [a0 + 0x1e]\n 63201: a4 = u8 [a0 + 0x1f]\n 63204: a1 = a1 << 0x8\n 63207: a1 = a1 | a2\n 63210: a3 = a3 << 0x10\n 63213: a4 = a4 << 0x18\n 63216: a3 = a3 | a4\n 63219: a1 = a1 | a3\n 63222: a2 = u8 [a0 + 0xd]\n 63225: a3 = u8 [a0 + 0xc]\n 63228: a4 = u8 [a0 + 0xe]\n 63231: a0 = u8 [a0 + 0xf]\n 63234: a2 = a2 << 0x8\n 63237: a2 = a2 | a3\n 63240: a4 = a4 << 0x10\n 63243: a0 = a0 << 0x18\n 63246: a0 = a0 | a4\n 63249: a0 = a0 | a2\n 63252: a0 = a0 | a1\n 63255: a0 = a0 << 0x20\n 63258: a5 = a5 | s1\n 63261: a0 = a0 | a5\n 63264: a1 = ra | t2\n 63267: a1 = a1 << 0x20\n 63270: a2 = t1 | t0\n 63273: a1 = a1 | a2\n 63276: a0 = a0 | a1\n 63279: jump @913 if a0 == 0\n      : @890 (gas: 3)\n 63283: a1 = 0x20\n 63286: a0 = u64 [sp + 0x58]\n 63289: ra = 758, jump @0\n      : @891 [@dyn 379] (gas: 71)\n 63296: a1 = u64 [sp + 0x38]\n 63299: a1 = reverse a1\n 63301: a2 = u64 [sp + 0x40]\n 63304: a2 = reverse a2\n 63306: a3 = u64 [sp + 0x48]\n 63309: a3 = reverse a3\n 63311: a4 = u64 [sp + 0x50]\n 63314: a4 = reverse a4\n 63316: u8 [a0 + 0x18] = a4\n 63319: a5 = a4 >> 0x38\n 63322: u8 [a0 + 0x1f] = a5\n 63325: a5 = a4 >> 0x30\n 63328: u8 [a0 + 0x1e] = a5\n 63331: a5 = a4 >> 0x28\n 63334: u8 [a0 + 0x1d] = a5\n 63337: a5 = a4 >> 0x20\n 63340: u8 [a0 + 0x1c] = a5\n 63343: a5 = a4 >> 0x18\n 63346: u8 [a0 + 0x1b] = a5\n 63349: a5 = a4 >> 0x10\n 63352: u8 [a0 + 0x1a] = a5\n 63355: a4 = a4 >> 0x8\n 63358: u8 [a0 + 0x19] = a4\n 63361: u8 [a0 + 0x10] = a3\n 63364: a4 = a3 >> 0x38\n 63367: u8 [a0 + 0x17] = a4\n 63370: a4 = a3 >> 0x30\n 63373: u8 [a0 + 0x16] = a4\n 63376: a4 = a3 >> 0x28\n 63379: u8 [a0 + 0x15] = a4\n 63382: a4 = a3 >> 0x20\n 63385: u8 [a0 + 0x14] = a4\n 63388: a4 = a3 >> 0x18\n 63391: u8 [a0 + 0x13] = a4\n 63394: a4 = a3 >> 0x10\n 63397: u8 [a0 + 0x12] = a4\n 63400: a3 = a3 >> 0x8\n 63403: u8 [a0 + 0x11] = a3\n 63406: u8 [a0 + 0x8] = a2\n 63409: a3 = a2 >> 0x38\n 63412: u8 [a0 + 0xf] = a3\n 63415: a3 = a2 >> 0x30\n 63418: u8 [a0 + 0xe] = a3\n 63421: a3 = a2 >> 0x28\n 63424: u8 [a0 + 0xd] = a3\n 63427: a3 = a2 >> 0x20\n 63430: u8 [a0 + 0xc] = a3\n 63433: a3 = a2 >> 0x18\n 63436: u8 [a0 + 0xb] = a3\n 63439: a3 = a2 >> 0x10\n 63442: u8 [a0 + 0xa] = a3\n 63445: a2 = a2 >> 0x8\n 63448: u8 [a0 + 0x9] = a2\n 63451: u8 [a0] = a1\n 63453: a2 = a1 >> 0x38\n 63456: u8 [a0 + 0x7] = a2\n 63459: a2 = a1 >> 0x30\n 63462: u8 [a0 + 0x6] = a2\n 63465: a2 = a1 >> 0x28\n 63468: u8 [a0 + 0x5] = a2\n 63471: a2 = a1 >> 0x20\n 63474: u8 [a0 + 0x4] = a2\n 63477: a2 = a1 >> 0x18\n 63480: u8 [a0 + 0x3] = a2\n 63483: a2 = a1 >> 0x10\n 63486: u8 [a0 + 0x2] = a2\n 63489: a1 = a1 >> 0x8\n 63492: u8 [a0 + 0x1] = a1\n 63495: a1 = 0x20\n 63498: a0 = u64 [sp + 0x60]\n 63501: ra = 760, jump @0\n      : @892 [@dyn 380] (gas: 90)\n 63508: a1 = u8 [a0 + 0x11]\n 63511: a2 = u8 [a0 + 0x10]\n 63514: a3 = u8 [a0 + 0x12]\n 63517: a4 = u8 [a0 + 0x13]\n 63520: a1 = a1 << 0x8\n 63523: a1 = a1 | a2\n 63526: a3 = a3 << 0x10\n 63529: a4 = a4 << 0x18\n 63532: a3 = a3 | a4\n 63535: t0 = a3 | a1\n 63538: a2 = u8 [a0 + 0x1]\n 63541: a3 = u8 [a0]\n 63543: a4 = u8 [a0 + 0x2]\n 63546: a5 = u8 [a0 + 0x3]\n 63549: a2 = a2 << 0x8\n 63552: a2 = a2 | a3\n 63555: a4 = a4 << 0x10\n 63558: a5 = a5 << 0x18\n 63561: a4 = a4 | a5\n 63564: t1 = a4 | a2\n 63567: a3 = u8 [a0 + 0x15]\n 63570: a4 = u8 [a0 + 0x14]\n 63573: a5 = u8 [a0 + 0x16]\n 63576: s1 = u8 [a0 + 0x17]\n 63579: a3 = a3 << 0x8\n 63582: a3 = a3 | a4\n 63585: a5 = a5 << 0x10\n 63588: s1 = s1 << 0x18\n 63591: a5 = a5 | s1\n 63594: t2 = a5 | a3\n 63597: a4 = u8 [a0 + 0x5]\n 63600: a5 = u8 [a0 + 0x4]\n 63603: s1 = u8 [a0 + 0x6]\n 63606: a1 = u8 [a0 + 0x7]\n 63609: a4 = a4 << 0x8\n 63612: a4 = a4 | a5\n 63615: s1 = s1 << 0x10\n 63618: a1 = a1 << 0x18\n 63621: a1 = a1 | s1\n 63624: ra = a1 | a4\n 63627: a1 = u8 [a0 + 0x19]\n 63630: a5 = u8 [a0 + 0x18]\n 63633: s1 = u8 [a0 + 0x1a]\n 63636: a2 = u8 [a0 + 0x1b]\n 63639: a1 = a1 << 0x8\n 63642: a1 = a1 | a5\n 63645: s1 = s1 << 0x10\n 63648: a2 = a2 << 0x18\n 63651: a2 = a2 | s1\n 63654: a5 = a2 | a1\n 63657: a1 = u8 [a0 + 0x9]\n 63660: a2 = u8 [a0 + 0x8]\n 63663: s1 = u8 [a0 + 0xa]\n 63666: a3 = u8 [a0 + 0xb]\n 63669: a1 = a1 << 0x8\n 63672: a1 = a1 | a2\n 63675: s1 = s1 << 0x10\n 63678: a3 = a3 << 0x18\n 63681: a3 = a3 | s1\n 63684: s1 = a3 | a1\n 63687: a1 = u8 [a0 + 0x1d]\n 63690: a2 = u8 [a0 + 0x1c]\n 63693: a3 = u8 [a0 + 0x1e]\n 63696: a4 = u8 [a0 + 0x1f]\n 63699: a1 = a1 << 0x8\n 63702: a1 = a1 | a2\n 63705: a3 = a3 << 0x10\n 63708: a4 = a4 << 0x18\n 63711: a3 = a3 | a4\n 63714: a1 = a1 | a3\n 63717: a2 = u8 [a0 + 0xd]\n 63720: a3 = u8 [a0 + 0xc]\n 63723: a4 = u8 [a0 + 0xe]\n 63726: a0 = u8 [a0 + 0xf]\n 63729: a2 = a2 << 0x8\n 63732: a2 = a2 | a3\n 63735: a4 = a4 << 0x10\n 63738: a0 = a0 << 0x18\n 63741: a0 = a0 | a4\n 63744: a0 = a0 | a2\n 63747: a0 = a0 | a1\n 63750: a0 = a0 << 0x20\n 63753: a5 = a5 | s1\n 63756: a0 = a0 | a5\n 63759: a1 = ra | t2\n 63762: a1 = a1 << 0x20\n 63765: a2 = t1 | t0\n 63768: a1 = a1 | a2\n 63771: a0 = a0 | a1\n 63774: jump @915 if a0 == 0\n      : @893 (gas: 3)\n 63778: a1 = 0x20\n 63781: a0 = u64 [sp + 0x58]\n 63784: ra = 762, jump @0\n      : @894 [@dyn 381] (gas: 11)\n 63791: i32 a0 = sp + 0x4e0\n 63795: ecalli 0 // 'address'\n 63796: a0 = i32 [sp + 0x4f0]\n 63800: u64 [sp + 0x40] = a0\n 63803: a0 = u64 [sp + 0x4e0]\n 63807: u64 [sp + 0x38] = a0\n 63810: a0 = u64 [sp + 0x4e8]\n 63814: u64 [sp + 0x28] = a0\n 63817: a0 = 0x40\n 63820: a1 = 0x20\n 63823: ra = 764, jump @0\n      : @895 [@dyn 382] (gas: 142)\n 63830: a1 = u8 [a0 + 0x19]\n 63833: a2 = u8 [a0 + 0x18]\n 63836: a3 = u8 [a0 + 0x1a]\n 63839: a4 = u8 [a0 + 0x1b]\n 63842: a1 = a1 << 0x8\n 63845: a1 = a1 | a2\n 63848: a3 = a3 << 0x10\n 63851: a4 = a4 << 0x18\n 63854: a3 = a3 | a4\n 63857: a1 = a1 | a3\n 63860: a2 = u8 [a0 + 0x1d]\n 63863: a3 = u8 [a0 + 0x1c]\n 63866: a4 = u8 [a0 + 0x1e]\n 63869: a5 = u8 [a0 + 0x1f]\n 63872: a2 = a2 << 0x8\n 63875: a2 = a2 | a3\n 63878: a4 = a4 << 0x10\n 63881: a5 = a5 << 0x18\n 63884: a4 = a4 | a5\n 63887: a2 = a2 | a4\n 63890: a2 = a2 << 0x20\n 63893: t0 = a2 | a1\n 63896: a2 = u8 [a0 + 0x11]\n 63899: a3 = u8 [a0 + 0x10]\n 63902: a4 = u8 [a0 + 0x12]\n 63905: a5 = u8 [a0 + 0x13]\n 63908: a2 = a2 << 0x8\n 63911: a2 = a2 | a3\n 63914: a4 = a4 << 0x10\n 63917: a5 = a5 << 0x18\n 63920: a4 = a4 | a5\n 63923: a2 = a2 | a4\n 63926: a3 = u8 [a0 + 0x15]\n 63929: a4 = u8 [a0 + 0x14]\n 63932: a5 = u8 [a0 + 0x16]\n 63935: s1 = u8 [a0 + 0x17]\n 63938: a3 = a3 << 0x8\n 63941: a3 = a3 | a4\n 63944: a5 = a5 << 0x10\n 63947: s1 = s1 << 0x18\n 63950: a5 = a5 | s1\n 63953: a3 = a3 | a5\n 63956: a3 = a3 << 0x20\n 63959: a2 = a2 | a3\n 63962: a3 = u8 [a0 + 0x9]\n 63965: a4 = u8 [a0 + 0x8]\n 63968: a5 = u8 [a0 + 0xa]\n 63971: s1 = u8 [a0 + 0xb]\n 63974: a3 = a3 << 0x8\n 63977: a3 = a3 | a4\n 63980: a5 = a5 << 0x10\n 63983: s1 = s1 << 0x18\n 63986: a5 = a5 | s1\n 63989: a3 = a3 | a5\n 63992: a4 = u8 [a0 + 0xd]\n 63995: a5 = u8 [a0 + 0xc]\n 63998: s1 = u8 [a0 + 0xe]\n 64001: a1 = u8 [a0 + 0xf]\n 64004: a4 = a4 << 0x8\n 64007: a4 = a4 | a5\n 64010: s1 = s1 << 0x10\n 64013: a1 = a1 << 0x18\n 64016: a1 = a1 | s1\n 64019: a1 = a1 | a4\n 64022: a1 = a1 << 0x20\n 64025: a3 = a3 | a1\n 64028: a1 = u8 [a0 + 0x1]\n 64031: a4 = u8 [a0]\n 64033: a5 = u8 [a0 + 0x2]\n 64036: s1 = u8 [a0 + 0x3]\n 64039: a1 = a1 << 0x8\n 64042: a1 = a1 | a4\n 64045: a5 = a5 << 0x10\n 64048: s1 = s1 << 0x18\n 64051: a5 = a5 | s1\n 64054: a1 = a1 | a5\n 64057: a4 = u8 [a0 + 0x5]\n 64060: a5 = u8 [a0 + 0x4]\n 64063: s1 = u8 [a0 + 0x6]\n 64066: a0 = u8 [a0 + 0x7]\n 64069: a4 = a4 << 0x8\n 64072: a4 = a4 | a5\n 64075: s1 = s1 << 0x10\n 64078: a0 = a0 << 0x18\n 64081: a0 = a0 | s1\n 64084: a0 = a0 | a4\n 64087: a0 = a0 << 0x20\n 64090: a0 = a0 | a1\n 64093: a5 = reverse a0\n 64095: u64 [sp + 0x48] = a5\n 64098: a3 = reverse a3\n 64100: u64 [sp + 0x60] = a3\n 64103: a1 = reverse a2\n 64105: u64 [sp + 0x50] = a1\n 64108: a0 = reverse t0\n 64110: u64 [sp + 0x58] = a0\n 64113: a2 = a0 + 0x20\n 64116: a0 = a2 <u a0\n 64119: s1 = a1 + a0\n 64122: a1 = s1 <u a1\n 64125: a1 = a0 if a0 == 0\n 64128: a1 = a1 + a3\n 64131: a0 = a1 <u a3\n 64134: a5 = a5 + a0\n 64137: a0 = u64 [sp + 0x180]\n 64141: u64 [sp + 0x3d8] = a0\n 64145: a0 = u64 [sp + 0x1c8]\n 64149: u64 [sp + 0x3d0] = a0\n 64153: a0 = u64 [sp + 0x1d0]\n 64157: u64 [sp + 0x3c8] = a0\n 64161: a0 = u64 [sp + 0x1d8]\n 64165: u64 [sp + 0x3c0] = a0\n 64169: a0 = u64 [sp + 0x188]\n 64173: u64 [sp + 0x3f8] = a0\n 64177: a0 = u64 [sp + 0x190]\n 64181: u64 [sp + 0x3f0] = a0\n 64185: a0 = u64 [sp + 0x198]\n 64189: u64 [sp + 0x3e8] = a0\n 64193: a0 = u64 [sp + 0x1a0]\n 64197: u64 [sp + 0x3e0] = a0\n 64201: a0 = u64 [sp + 0x1a8]\n 64205: u64 [sp + 0x418] = a0\n 64209: a0 = u64 [sp + 0x1b0]\n 64213: u64 [sp + 0x410] = a0\n 64217: a0 = u64 [sp + 0x1b8]\n 64221: u64 [sp + 0x408] = a0\n 64225: a0 = u64 [sp + 0x1c0]\n 64229: u64 [sp + 0x400] = a0\n 64233: u64 [sp + 0x1d0] = a2\n 64237: u64 [sp + 0x420] = a2\n 64241: u64 [sp + 0x1c8] = s1\n 64245: u64 [sp + 0x428] = s1\n 64249: u64 [sp + 0x1c0] = a1\n 64253: u64 [sp + 0x430] = a1\n 64257: a0 = sp + 0x440\n 64261: a1 = sp + 0x420\n 64265: a2 = sp + 0x400\n 64269: a3 = sp + 0x3e0\n 64273: a4 = sp + 0x3c0\n 64277: u64 [sp + 0x1b8] = a5\n 64281: u64 [sp + 0x438] = a5\n 64285: ra = 766, jump @821\n      : @896 [@dyn 383] (gas: 12)\n 64291: a1 = u64 [sp + 0x48]\n 64294: a4 = u64 [sp + 0x60]\n 64297: a3 = u64 [sp + 0x58]\n 64300: a0 = u64 [sp + 0x50]\n 64303: a0 = a0 | a1\n 64306: a1 = a3 | a4\n 64309: a1 = a1 | a0\n 64312: a1 = a1 >> 0x20\n 64315: a0 = a0 | a4\n 64318: a0 = a0 << 0x20\n 64321: a0 = a0 | a1\n 64324: jump @912 if a0 != 0\n      : @897 (gas: 36)\n 64328: a0 = u64 [sp + 0x440]\n 64332: u64 [sp + 0x1d8] = a0\n 64336: s1 = u64 [sp + 0x448]\n 64340: t0 = u64 [sp + 0x458]\n 64344: u64 [sp + 0x1a0] = t0\n 64348: a5 = u64 [sp + 0x450]\n 64352: u64 [sp + 0x1a8] = a5\n 64356: a4 = u64 [sp + 0x1d0]\n 64360: t2 = a0 <u a4\n 64363: t1 = u64 [sp + 0x1c8]\n 64367: a1 = s1 ^ t1\n 64370: a2 = s1 <u t1\n 64373: a0 = s1\n 64375: u64 [sp + 0x198] = s1\n 64379: a2 = t2 if a1 == 0\n 64382: ra = u64 [sp + 0x1c0]\n 64386: s1 = a5 - ra\n 64389: a1 = s1 - a2\n 64392: u64 [sp + 0x1b0] = a1\n 64396: a1 = s1 <u a2\n 64399: a2 = a5 <u ra\n 64402: a2 = t0 - a2\n 64405: a5 = u64 [sp + 0x1b8]\n 64409: a2 = a2 - a5\n 64412: a2 = a2 - a1\n 64415: u64 [sp + 0x1c0] = a2\n 64419: a0 = a0 - t2\n 64422: a0 = a0 - t1\n 64425: u64 [sp + 0x1c8] = a0\n 64429: a0 = u64 [sp + 0x1d8]\n 64433: a0 = a0 - a4\n 64436: u64 [sp + 0x1d0] = a0\n 64440: i32 a0 = a3 + 0\n 64442: a1 = 0x20\n 64445: s1 = u64 [sp + 0x50]\n 64448: ra = 768, jump @0\n      : @898 [@dyn 384] (gas: 124)\n 64455: t2 = u64 [sp + 0x58]\n 64458: a5 = u64 [sp + 0x1d8]\n 64462: a2 = a5 <u t2\n 64465: a4 = u64 [sp + 0x198]\n 64469: a3 = a4 ^ s1\n 64472: a1 = a4 <u s1\n 64475: a1 = a2 if a3 == 0\n 64478: a3 = a4 - s1\n 64481: ra = a3 - a2\n 64484: a3 = a5 - t2\n 64487: a4 = a3 + 0x1f\n 64490: t1 = a4 <u a3\n 64493: a4 = a4 & 0xffffffffffffffe0\n 64496: t2 = t2 + a4\n 64499: u64 [sp + 0x1d8] = t2\n 64503: a4 = t2 <u a4\n 64506: a2 = ra + t1\n 64509: a5 = a2 + s1\n 64512: t0 = a5 + a4\n 64515: a5 = t0 ^ a2\n 64518: s1 = t0 <u a2\n 64521: s1 = a4 if a5 == 0\n 64524: a3 = u64 [sp + 0x48]\n 64527: a4 = u64 [sp + 0x1a0]\n 64531: a4 = a4 - a3\n 64534: a3 = u64 [sp + 0x60]\n 64537: t2 = u64 [sp + 0x1a8]\n 64541: a5 = t2 <u a3\n 64544: a4 = a4 - a5\n 64547: a3 = u64 [sp + 0x60]\n 64550: a5 = t2 - a3\n 64553: a3 = a5 <u a1\n 64556: a4 = a4 - a3\n 64559: a5 = a5 - a1\n 64562: a1 = a2 <u ra\n 64565: a1 = t1 if t1 == 0\n 64568: t1 = u64 [sp + 0x50]\n 64571: a1 = a1 + a5\n 64574: a2 = a1 <u a5\n 64577: a5 = u64 [sp + 0x48]\n 64580: a4 = a4 + a5\n 64583: a2 = a2 + a4\n 64586: t2 = u64 [sp + 0x60]\n 64589: a3 = a1 + t2\n 64592: s1 = s1 + a3\n 64595: a1 = a3 <u a1\n 64598: a3 = s1 <u a3\n 64601: a1 = a1 + a2\n 64604: a4 = a1 + a3\n 64607: a1 = a4 >u 0\n 64609: a2 = s1 >u 0\n 64611: a2 = a1 if a4 != 0\n 64614: a3 = s1 | a4\n 64617: a1 = t0 >u 0\n 64619: a1 = a2 if a3 != 0\n 64622: a2 = u64 [sp + 0x1d0]\n 64626: a2 = reverse a2\n 64628: a3 = a2 >> 0x38\n 64631: u8 [a0 + 0x1f] = a3\n 64634: a3 = a2 >> 0x30\n 64637: u8 [a0 + 0x1e] = a3\n 64640: a3 = a2 >> 0x28\n 64643: u8 [a0 + 0x1d] = a3\n 64646: a3 = a2 >> 0x20\n 64649: u8 [a0 + 0x1c] = a3\n 64652: a3 = a2 >> 0x18\n 64655: u8 [a0 + 0x1b] = a3\n 64658: a3 = a2 >> 0x10\n 64661: u8 [a0 + 0x1a] = a3\n 64664: a3 = u64 [sp + 0x1c8]\n 64668: a3 = reverse a3\n 64670: u8 [a0 + 0x18] = a2\n 64673: a2 = a2 >> 0x8\n 64676: u8 [a0 + 0x19] = a2\n 64679: a2 = a3 >> 0x38\n 64682: u8 [a0 + 0x17] = a2\n 64685: a2 = a3 >> 0x30\n 64688: u8 [a0 + 0x16] = a2\n 64691: a2 = a3 >> 0x28\n 64694: u8 [a0 + 0x15] = a2\n 64697: a2 = a3 >> 0x20\n 64700: u8 [a0 + 0x14] = a2\n 64703: a2 = a3 >> 0x18\n 64706: u8 [a0 + 0x13] = a2\n 64709: a2 = a3 >> 0x10\n 64712: u8 [a0 + 0x12] = a2\n 64715: a2 = u64 [sp + 0x1b0]\n 64719: a2 = reverse a2\n 64721: u8 [a0 + 0x10] = a3\n 64724: a3 = a3 >> 0x8\n 64727: u8 [a0 + 0x11] = a3\n 64730: a3 = a2 >> 0x38\n 64733: u8 [a0 + 0xf] = a3\n 64736: a3 = a2 >> 0x30\n 64739: u8 [a0 + 0xe] = a3\n 64742: a3 = a2 >> 0x28\n 64745: u8 [a0 + 0xd] = a3\n 64748: a3 = a2 >> 0x20\n 64751: u8 [a0 + 0xc] = a3\n 64754: a3 = a2 >> 0x18\n 64757: u8 [a0 + 0xb] = a3\n 64760: a3 = a2 >> 0x10\n 64763: u8 [a0 + 0xa] = a3\n 64766: a3 = u64 [sp + 0x1c0]\n 64770: a3 = reverse a3\n 64772: u8 [a0 + 0x8] = a2\n 64775: a2 = a2 >> 0x8\n 64778: u8 [a0 + 0x9] = a2\n 64781: a2 = a3 >> 0x38\n 64784: u8 [a0 + 0x7] = a2\n 64787: a2 = a3 >> 0x30\n 64790: u8 [a0 + 0x6] = a2\n 64793: a2 = a3 >> 0x28\n 64796: u8 [a0 + 0x5] = a2\n 64799: a2 = a3 >> 0x20\n 64802: u8 [a0 + 0x4] = a2\n 64805: a2 = a3 >> 0x18\n 64808: u8 [a0 + 0x3] = a2\n 64811: a2 = a3 >> 0x10\n 64814: u8 [a0 + 0x2] = a2\n 64817: u8 [a0] = a3\n 64819: a3 = a3 >> 0x8\n 64822: u8 [a0 + 0x1] = a3\n 64825: jump @917 if a1 != 0\n      : @899 (gas: 14)\n 64829: a0 = u64 [sp + 0x58]\n 64832: a1 = u64 [sp + 0x1d8]\n 64836: a0 = a1 <u a0\n 64839: a1 = t0 ^ t1\n 64842: a2 = t0 <u t1\n 64845: a2 = a0 if a1 == 0\n 64848: a0 = s1 <u t2\n 64851: a1 = a4 ^ a5\n 64854: a3 = a4 <u a5\n 64857: a3 = a0 if a1 == 0\n 64860: a0 = s1 ^ t2\n 64863: a0 = a0 | a1\n 64866: a3 = a2 if a0 == 0\n 64869: jump @917 if a3 != 0\n      : @900 (gas: 6)\n 64873: a0 = 0x40\n 64876: a1 = 0x20\n 64879: u64 [sp + 0x1c8] = s1\n 64883: u64 [sp + 0x1d0] = t0\n 64887: s1 = a4\n 64889: ra = 770, jump @0\n      : @901 [@dyn 385] (gas: 70)\n 64896: a1 = reverse s1\n 64898: a2 = u64 [sp + 0x1c8]\n 64902: a2 = reverse a2\n 64904: a3 = u64 [sp + 0x1d0]\n 64908: a3 = reverse a3\n 64910: a4 = u64 [sp + 0x1d8]\n 64914: a4 = reverse a4\n 64916: u8 [a0 + 0x18] = a4\n 64919: a5 = a4 >> 0x38\n 64922: u8 [a0 + 0x1f] = a5\n 64925: a5 = a4 >> 0x30\n 64928: u8 [a0 + 0x1e] = a5\n 64931: a5 = a4 >> 0x28\n 64934: u8 [a0 + 0x1d] = a5\n 64937: a5 = a4 >> 0x20\n 64940: u8 [a0 + 0x1c] = a5\n 64943: a5 = a4 >> 0x18\n 64946: u8 [a0 + 0x1b] = a5\n 64949: a5 = a4 >> 0x10\n 64952: u8 [a0 + 0x1a] = a5\n 64955: a4 = a4 >> 0x8\n 64958: u8 [a0 + 0x19] = a4\n 64961: u8 [a0 + 0x10] = a3\n 64964: a4 = a3 >> 0x38\n 64967: u8 [a0 + 0x17] = a4\n 64970: a4 = a3 >> 0x30\n 64973: u8 [a0 + 0x16] = a4\n 64976: a4 = a3 >> 0x28\n 64979: u8 [a0 + 0x15] = a4\n 64982: a4 = a3 >> 0x20\n 64985: u8 [a0 + 0x14] = a4\n 64988: a4 = a3 >> 0x18\n 64991: u8 [a0 + 0x13] = a4\n 64994: a4 = a3 >> 0x10\n 64997: u8 [a0 + 0x12] = a4\n 65000: a3 = a3 >> 0x8\n 65003: u8 [a0 + 0x11] = a3\n 65006: u8 [a0 + 0x8] = a2\n 65009: a3 = a2 >> 0x38\n 65012: u8 [a0 + 0xf] = a3\n 65015: a3 = a2 >> 0x30\n 65018: u8 [a0 + 0xe] = a3\n 65021: a3 = a2 >> 0x28\n 65024: u8 [a0 + 0xd] = a3\n 65027: a3 = a2 >> 0x20\n 65030: u8 [a0 + 0xc] = a3\n 65033: a3 = a2 >> 0x18\n 65036: u8 [a0 + 0xb] = a3\n 65039: a3 = a2 >> 0x10\n 65042: u8 [a0 + 0xa] = a3\n 65045: a2 = a2 >> 0x8\n 65048: u8 [a0 + 0x9] = a2\n 65051: u8 [a0] = a1\n 65053: a2 = a1 >> 0x38\n 65056: u8 [a0 + 0x7] = a2\n 65059: a2 = a1 >> 0x30\n 65062: u8 [a0 + 0x6] = a2\n 65065: a2 = a1 >> 0x28\n 65068: u8 [a0 + 0x5] = a2\n 65071: a2 = a1 >> 0x20\n 65074: u8 [a0 + 0x4] = a2\n 65077: a2 = a1 >> 0x18\n 65080: u8 [a0 + 0x3] = a2\n 65083: a2 = a1 >> 0x10\n 65086: u8 [a0 + 0x2] = a2\n 65089: a1 = a1 >> 0x8\n 65092: u8 [a0 + 0x1] = a1\n 65095: a0 = 0x40\n 65098: a1 = 0x20\n 65101: ra = 772, jump @0\n      : @902 [@dyn 386] (gas: 110)\n 65108: a1 = u8 [a0 + 0x19]\n 65111: a2 = u8 [a0 + 0x18]\n 65114: a3 = u8 [a0 + 0x1a]\n 65117: a4 = u8 [a0 + 0x1b]\n 65120: a1 = a1 << 0x8\n 65123: a1 = a1 | a2\n 65126: a3 = a3 << 0x10\n 65129: a4 = a4 << 0x18\n 65132: a3 = a3 | a4\n 65135: a1 = a1 | a3\n 65138: a2 = u8 [a0 + 0x1d]\n 65141: a3 = u8 [a0 + 0x1c]\n 65144: a4 = u8 [a0 + 0x1e]\n 65147: a5 = u8 [a0 + 0x1f]\n 65150: a2 = a2 << 0x8\n 65153: a2 = a2 | a3\n 65156: a4 = a4 << 0x10\n 65159: a5 = a5 << 0x18\n 65162: a4 = a4 | a5\n 65165: a2 = a2 | a4\n 65168: a2 = a2 << 0x20\n 65171: t0 = a2 | a1\n 65174: a2 = u8 [a0 + 0x11]\n 65177: a3 = u8 [a0 + 0x10]\n 65180: a4 = u8 [a0 + 0x12]\n 65183: a5 = u8 [a0 + 0x13]\n 65186: a2 = a2 << 0x8\n 65189: a2 = a2 | a3\n 65192: a4 = a4 << 0x10\n 65195: a5 = a5 << 0x18\n 65198: a4 = a4 | a5\n 65201: a2 = a2 | a4\n 65204: a3 = u8 [a0 + 0x15]\n 65207: a4 = u8 [a0 + 0x14]\n 65210: a5 = u8 [a0 + 0x16]\n 65213: s1 = u8 [a0 + 0x17]\n 65216: a3 = a3 << 0x8\n 65219: a3 = a3 | a4\n 65222: a5 = a5 << 0x10\n 65225: s1 = s1 << 0x18\n 65228: a5 = a5 | s1\n 65231: a3 = a3 | a5\n 65234: a3 = a3 << 0x20\n 65237: a2 = a2 | a3\n 65240: a3 = u8 [a0 + 0x9]\n 65243: a4 = u8 [a0 + 0x8]\n 65246: a5 = u8 [a0 + 0xa]\n 65249: s1 = u8 [a0 + 0xb]\n 65252: a3 = a3 << 0x8\n 65255: a3 = a3 | a4\n 65258: a5 = a5 << 0x10\n 65261: s1 = s1 << 0x18\n 65264: a5 = a5 | s1\n 65267: a3 = a3 | a5\n 65270: a4 = u8 [a0 + 0xd]\n 65273: a5 = u8 [a0 + 0xc]\n 65276: s1 = u8 [a0 + 0xe]\n 65279: a1 = u8 [a0 + 0xf]\n 65282: a4 = a4 << 0x8\n 65285: a4 = a4 | a5\n 65288: s1 = s1 << 0x10\n 65291: a1 = a1 << 0x18\n 65294: a1 = a1 | s1\n 65297: a1 = a1 | a4\n 65300: a1 = a1 << 0x20\n 65303: a3 = a3 | a1\n 65306: a1 = u8 [a0 + 0x1]\n 65309: a4 = u8 [a0]\n 65311: a5 = u8 [a0 + 0x2]\n 65314: s1 = u8 [a0 + 0x3]\n 65317: a1 = a1 << 0x8\n 65320: a1 = a1 | a4\n 65323: a5 = a5 << 0x10\n 65326: s1 = s1 << 0x18\n 65329: a5 = a5 | s1\n 65332: a1 = a1 | a5\n 65335: a4 = u8 [a0 + 0x5]\n 65338: a5 = u8 [a0 + 0x4]\n 65341: s1 = u8 [a0 + 0x6]\n 65344: a0 = u8 [a0 + 0x7]\n 65347: a4 = a4 << 0x8\n 65350: a4 = a4 | a5\n 65353: s1 = s1 << 0x10\n 65356: a0 = a0 << 0x18\n 65359: a0 = a0 | s1\n 65362: a0 = a0 | a4\n 65365: a0 = a0 << 0x20\n 65368: a0 = a0 | a1\n 65371: a5 = reverse a0\n 65373: a4 = reverse a3\n 65375: s1 = reverse a2\n 65377: t0 = reverse t0\n 65379: a0 = t0 + 0x20\n 65382: a1 = a0 <u t0\n 65385: a2 = s1 + a1\n 65388: a3 = a2 <u s1\n 65391: a3 = a1 if a1 == 0\n 65394: a3 = a3 + a4\n 65397: u64 [sp + 0x1d8] = a4\n 65401: a1 = a3 <u a4\n 65404: u64 [sp + 0x1d0] = a5\n 65408: a1 = a1 + a5\n 65411: a4 = a0 | a3\n 65414: a1 = a1 | a2\n 65417: a4 = a4 | a1\n 65420: a4 = a4 >> 0x20\n 65423: a1 = a1 | a3\n 65426: a1 = a1 << 0x20\n 65429: a1 = a1 | a4\n 65432: jump @912 if a1 != 0\n      : @903 (gas: 4)\n 65436: i32 a0 = a0 + 0\n 65438: a1 = 0x20\n 65441: u64 [sp + 0x1c8] = t0\n 65445: ra = 774, jump @0\n      : @904 [@dyn 387] (gas: 75)\n 65452: a3 = u64 [sp + 0x1c8]\n 65456: a1 = u64 [sp + 0x128]\n 65460: u8 [a0 + 0x10] = a1\n 65463: a1 = u64 [sp + 0xe8]\n 65467: u8 [a0 + 0xf] = a1\n 65470: a1 = u64 [sp + 0xe0]\n 65474: u8 [a0 + 0xe] = a1\n 65477: a1 = u64 [sp + 0xd8]\n 65481: u8 [a0 + 0xd] = a1\n 65484: a1 = u64 [sp + 0xd0]\n 65488: u8 [a0 + 0xc] = a1\n 65491: a1 = u64 [sp + 0xc8]\n 65495: u8 [a0 + 0xb] = a1\n 65498: a1 = u64 [sp + 0xc0]\n 65502: u8 [a0 + 0xa] = a1\n 65505: a1 = u64 [sp + 0xb8]\n 65509: u8 [a0 + 0x9] = a1\n 65512: a1 = u64 [sp + 0x130]\n 65516: u8 [a0 + 0x8] = a1\n 65519: a1 = u64 [sp + 0xb0]\n 65523: u8 [a0 + 0x7] = a1\n 65526: a1 = u64 [sp + 0xa8]\n 65530: u8 [a0 + 0x6] = a1\n 65533: a1 = u64 [sp + 0xa0]\n 65537: u8 [a0 + 0x5] = a1\n 65540: a1 = u64 [sp + 0x98]\n 65544: u8 [a0 + 0x4] = a1\n 65547: a1 = u64 [sp + 0x90]\n 65551: u8 [a0 + 0x3] = a1\n 65554: a1 = u64 [sp + 0x88]\n 65558: u8 [a0 + 0x2] = a1\n 65561: a1 = u64 [sp + 0x80]\n 65565: u8 [a0 + 0x1] = a1\n 65568: a1 = u64 [sp + 0x168]\n 65572: u8 [a0] = a1\n 65574: a1 = u64 [sp + 0x150]\n 65578: u8 [a0 + 0x18] = a1\n 65581: a1 = u64 [sp + 0x120]\n 65585: u8 [a0 + 0x17] = a1\n 65588: a1 = u64 [sp + 0x118]\n 65592: u8 [a0 + 0x16] = a1\n 65595: a1 = u64 [sp + 0x110]\n 65599: u8 [a0 + 0x15] = a1\n 65602: a1 = u64 [sp + 0x108]\n 65606: u8 [a0 + 0x14] = a1\n 65609: a1 = u64 [sp + 0x100]\n 65613: u8 [a0 + 0x13] = a1\n 65616: a1 = u64 [sp + 0xf8]\n 65620: u8 [a0 + 0x12] = a1\n 65623: a1 = u64 [sp + 0xf0]\n 65627: u8 [a0 + 0x11] = a1\n 65630: a1 = u64 [sp + 0x170]\n 65634: u8 [a0 + 0x1f] = a1\n 65637: a1 = u64 [sp + 0x160]\n 65641: u8 [a0 + 0x1e] = a1\n 65644: a1 = u64 [sp + 0x158]\n 65648: u8 [a0 + 0x1d] = a1\n 65651: a1 = u64 [sp + 0x148]\n 65655: u8 [a0 + 0x1c] = a1\n 65658: a1 = u64 [sp + 0x140]\n 65662: u8 [a0 + 0x1b] = a1\n 65665: a1 = u64 [sp + 0x138]\n 65669: u8 [a0 + 0x1a] = a1\n 65672: a4 = u64 [sp + 0x1d8]\n 65676: a1 = a3 | a4\n 65679: a2 = u64 [sp + 0x1d0]\n 65683: a2 = a2 | s1\n 65686: a1 = a1 | a2\n 65689: a1 = a1 >> 0x20\n 65692: a2 = a2 | a4\n 65695: a2 = a2 << 0x20\n 65698: a1 = a1 | a2\n 65701: a2 = u64 [sp + 0x178]\n 65705: u8 [a0 + 0x19] = a2\n 65708: jump @912 if a1 != 0\n      : @905 (gas: 3)\n 65712: i32 a0 = a3 + 0\n 65714: a1 = 0x20\n 65717: ra = 776, jump @0\n      : @906 [@dyn 388] (gas: 50)\n 65724: u8 [a0 + 31] = 0x20\n 65728: u8 [a0 + 30] = 0\n 65731: u8 [a0 + 29] = 0\n 65734: u8 [a0 + 28] = 0\n 65737: u8 [a0 + 27] = 0\n 65740: u8 [a0 + 26] = 0\n 65743: u8 [a0 + 25] = 0\n 65746: u8 [a0 + 24] = 0\n 65749: u8 [a0 + 23] = 0\n 65752: u8 [a0 + 22] = 0\n 65755: u8 [a0 + 21] = 0\n 65758: u8 [a0 + 20] = 0\n 65761: u8 [a0 + 19] = 0\n 65764: u8 [a0 + 18] = 0\n 65767: u8 [a0 + 17] = 0\n 65770: u8 [a0 + 16] = 0\n 65773: u8 [a0 + 15] = 0\n 65776: u8 [a0 + 14] = 0\n 65779: u8 [a0 + 13] = 0\n 65782: u8 [a0 + 12] = 0\n 65785: u8 [a0 + 11] = 0\n 65788: u8 [a0 + 10] = 0\n 65791: u8 [a0 + 9] = 0\n 65794: u8 [a0 + 8] = 0\n 65797: u8 [a0 + 7] = 0\n 65800: u8 [a0 + 6] = 0\n 65803: u8 [a0 + 5] = 0\n 65806: u8 [a0 + 4] = 0\n 65809: u8 [a0 + 3] = 0\n 65812: u8 [a0 + 2] = 0\n 65815: u8 [a0 + 1] = 0\n 65818: u8 [a0 + 0] = 0\n 65820: a0 = u64 [sp + 0x1c8]\n 65824: a1 = a0 + 0x40\n 65827: u64 [sp + 0x1c0] = a1\n 65831: a0 = a1 <u a0\n 65834: a1 = s1 + a0\n 65837: u64 [sp + 0x1b8] = a1\n 65841: u64 [sp + 0x1a8] = s1\n 65845: a1 = a1 <u s1\n 65848: a1 = a0 if a0 == 0\n 65851: a0 = u64 [sp + 0x1d8]\n 65855: s1 = a0 + a1\n 65858: a0 = s1 <u a0\n 65861: a1 = u64 [sp + 0x1d0]\n 65865: a0 = a0 + a1\n 65868: u64 [sp + 0x1b0] = a0\n 65872: a0 = 0x40\n 65875: a1 = 0x20\n 65878: ra = 778, jump @0\n      : @907 [@dyn 389] (gas: 70)\n 65885: a1 = u64 [sp + 0x1b0]\n 65889: a1 = reverse a1\n 65891: a2 = reverse s1\n 65893: a3 = u64 [sp + 0x1b8]\n 65897: a3 = reverse a3\n 65899: a4 = u64 [sp + 0x1c0]\n 65903: a4 = reverse a4\n 65905: a5 = a4 >> 0x38\n 65908: u8 [a0 + 0x1f] = a5\n 65911: a5 = a4 >> 0x30\n 65914: u8 [a0 + 0x1e] = a5\n 65917: a5 = a4 >> 0x28\n 65920: u8 [a0 + 0x1d] = a5\n 65923: a5 = a4 >> 0x20\n 65926: u8 [a0 + 0x1c] = a5\n 65929: a5 = a4 >> 0x18\n 65932: u8 [a0 + 0x1b] = a5\n 65935: a5 = a4 >> 0x10\n 65938: u8 [a0 + 0x1a] = a5\n 65941: a5 = a4 >> 0x8\n 65944: u8 [a0 + 0x19] = a5\n 65947: u8 [a0 + 0x18] = a4\n 65950: a4 = a3 >> 0x38\n 65953: u8 [a0 + 0x17] = a4\n 65956: a4 = a3 >> 0x30\n 65959: u8 [a0 + 0x16] = a4\n 65962: a4 = a3 >> 0x28\n 65965: u8 [a0 + 0x15] = a4\n 65968: a4 = a3 >> 0x20\n 65971: u8 [a0 + 0x14] = a4\n 65974: a4 = a3 >> 0x18\n 65977: u8 [a0 + 0x13] = a4\n 65980: a4 = a3 >> 0x10\n 65983: u8 [a0 + 0x12] = a4\n 65986: a4 = a3 >> 0x8\n 65989: u8 [a0 + 0x11] = a4\n 65992: u8 [a0 + 0x10] = a3\n 65995: u8 [a0 + 0x8] = a2\n 65998: a3 = a2 >> 0x38\n 66001: u8 [a0 + 0xf] = a3\n 66004: a3 = a2 >> 0x30\n 66007: u8 [a0 + 0xe] = a3\n 66010: a3 = a2 >> 0x28\n 66013: u8 [a0 + 0xd] = a3\n 66016: a3 = a2 >> 0x20\n 66019: u8 [a0 + 0xc] = a3\n 66022: a3 = a2 >> 0x18\n 66025: u8 [a0 + 0xb] = a3\n 66028: a3 = a2 >> 0x10\n 66031: u8 [a0 + 0xa] = a3\n 66034: a2 = a2 >> 0x8\n 66037: u8 [a0 + 0x9] = a2\n 66040: u8 [a0] = a1\n 66042: a2 = a1 >> 0x38\n 66045: u8 [a0 + 0x7] = a2\n 66048: a2 = a1 >> 0x30\n 66051: u8 [a0 + 0x6] = a2\n 66054: a2 = a1 >> 0x28\n 66057: u8 [a0 + 0x5] = a2\n 66060: a2 = a1 >> 0x20\n 66063: u8 [a0 + 0x4] = a2\n 66066: a2 = a1 >> 0x18\n 66069: u8 [a0 + 0x3] = a2\n 66072: a2 = a1 >> 0x10\n 66075: u8 [a0 + 0x2] = a2\n 66078: a1 = a1 >> 0x8\n 66081: u8 [a0 + 0x1] = a1\n 66084: a0 = 0x40\n 66087: a1 = 0x20\n 66090: ra = 780, jump @0\n      : @908 [@dyn 390] (gas: 100)\n 66097: a1 = u8 [a0 + 0x11]\n 66100: a2 = u8 [a0 + 0x10]\n 66103: a3 = u8 [a0 + 0x12]\n 66106: a4 = u8 [a0 + 0x13]\n 66109: a1 = a1 << 0x8\n 66112: a1 = a1 | a2\n 66115: a3 = a3 << 0x10\n 66118: a4 = a4 << 0x18\n 66121: a3 = a3 | a4\n 66124: a1 = a1 | a3\n 66127: a2 = u8 [a0 + 0x15]\n 66130: a3 = u8 [a0 + 0x14]\n 66133: a4 = u8 [a0 + 0x16]\n 66136: a5 = u8 [a0 + 0x17]\n 66139: a2 = a2 << 0x8\n 66142: a2 = a2 | a3\n 66145: a4 = a4 << 0x10\n 66148: a5 = a5 << 0x18\n 66151: a4 = a4 | a5\n 66154: a2 = a2 | a4\n 66157: a2 = a2 << 0x20\n 66160: t0 = a2 | a1\n 66163: a2 = u8 [a0 + 0x1]\n 66166: a3 = u8 [a0]\n 66168: a4 = u8 [a0 + 0x2]\n 66171: a5 = u8 [a0 + 0x3]\n 66174: a2 = a2 << 0x8\n 66177: a2 = a2 | a3\n 66180: a4 = a4 << 0x10\n 66183: a5 = a5 << 0x18\n 66186: a4 = a4 | a5\n 66189: a2 = a2 | a4\n 66192: a3 = u8 [a0 + 0x5]\n 66195: a4 = u8 [a0 + 0x4]\n 66198: a5 = u8 [a0 + 0x6]\n 66201: s1 = u8 [a0 + 0x7]\n 66204: a3 = a3 << 0x8\n 66207: a3 = a3 | a4\n 66210: a5 = a5 << 0x10\n 66213: s1 = s1 << 0x18\n 66216: a5 = a5 | s1\n 66219: a3 = a3 | a5\n 66222: a3 = a3 << 0x20\n 66225: a2 = a2 | a3\n 66228: a3 = u8 [a0 + 0x19]\n 66231: a4 = u8 [a0 + 0x18]\n 66234: a5 = u8 [a0 + 0x1a]\n 66237: s1 = u8 [a0 + 0x1b]\n 66240: a3 = a3 << 0x8\n 66243: a3 = a3 | a4\n 66246: a5 = a5 << 0x10\n 66249: s1 = s1 << 0x18\n 66252: a5 = a5 | s1\n 66255: a3 = a3 | a5\n 66258: a4 = u8 [a0 + 0x1d]\n 66261: a5 = u8 [a0 + 0x1c]\n 66264: s1 = u8 [a0 + 0x1e]\n 66267: a1 = u8 [a0 + 0x1f]\n 66270: a4 = a4 << 0x8\n 66273: a4 = a4 | a5\n 66276: s1 = s1 << 0x10\n 66279: a1 = a1 << 0x18\n 66282: a1 = a1 | s1\n 66285: a1 = a1 | a4\n 66288: a1 = a1 << 0x20\n 66291: a3 = a3 | a1\n 66294: a1 = u8 [a0 + 0x9]\n 66297: a4 = u8 [a0 + 0x8]\n 66300: a5 = u8 [a0 + 0xa]\n 66303: s1 = u8 [a0 + 0xb]\n 66306: a1 = a1 << 0x8\n 66309: a1 = a1 | a4\n 66312: a5 = a5 << 0x10\n 66315: s1 = s1 << 0x18\n 66318: a5 = a5 | s1\n 66321: a1 = a1 | a5\n 66324: a4 = u8 [a0 + 0xd]\n 66327: a5 = u8 [a0 + 0xc]\n 66330: s1 = u8 [a0 + 0xe]\n 66333: a0 = u8 [a0 + 0xf]\n 66336: a4 = a4 << 0x8\n 66339: a4 = a4 | a5\n 66342: s1 = s1 << 0x10\n 66345: a0 = a0 << 0x18\n 66348: a0 = a0 | s1\n 66351: a0 = a0 | a4\n 66354: a0 = a0 << 0x20\n 66357: a0 = a0 | a1\n 66360: s1 = reverse a0\n 66362: a4 = reverse a3\n 66364: a3 = reverse a2\n 66366: a2 = reverse t0\n 66368: a0 = a2 | a3\n 66371: a1 = a4 | s1\n 66374: a1 = a1 | a0\n 66377: a1 = a1 >> 0x20\n 66380: a0 = a0 | s1\n 66383: a0 = a0 << 0x20\n 66386: a0 = a0 | a1\n 66389: jump @912 if a0 != 0\n      : @909 (gas: 23)\n 66393: a0 = u64 [sp + 0x28]\n 66396: a0 = reverse a0\n 66398: a1 = a0 >> 0x20\n 66401: u64 [sp + 0x1b0] = a2\n 66405: a2 = u64 [sp + 0x38]\n 66408: a2 = reverse a2\n 66410: u64 [sp + 0x1c0] = a3\n 66414: a3 = a2 << 0x20\n 66417: a1 = a1 | a3\n 66420: u64 [sp + 0x1a0] = a1\n 66424: a0 = a0 << 0x20\n 66427: a1 = u64 [sp + 0x40]\n 66430: a1 = reverse a1\n 66432: a1 = a1 >> 0x20\n 66435: a0 = a0 | a1\n 66438: u64 [sp + 0x198] = a0\n 66442: a2 = a2 >> 0x20\n 66445: u64 [sp + 0x190] = a2\n 66449: i32 a0 = a4 + 0\n 66451: a1 = 0x20\n 66454: u64 [sp + 0x188] = a0\n 66458: u64 [sp + 0x1b8] = a4\n 66462: ra = 782, jump @0\n      : @910 [@dyn 391] (gas: 92)\n 66469: u8 [a0 + 31] = 0\n 66472: u8 [a0 + 30] = 0\n 66475: u8 [a0 + 29] = 0\n 66478: u8 [a0 + 28] = 0\n 66481: u8 [a0 + 27] = 0\n 66484: u8 [a0 + 26] = 0\n 66487: u8 [a0 + 25] = 0\n 66490: u8 [a0 + 24] = 0\n 66493: u8 [a0 + 23] = 0\n 66496: u8 [a0 + 22] = 0\n 66499: u8 [a0 + 21] = 0\n 66502: u8 [a0 + 20] = 0\n 66505: u8 [a0 + 19] = 0\n 66508: u8 [a0 + 18] = 0\n 66511: u8 [a0 + 17] = 0\n 66514: u8 [a0 + 16] = 0\n 66517: u8 [a0 + 15] = 0\n 66520: u8 [a0 + 14] = 0\n 66523: u8 [a0 + 13] = 0\n 66526: u8 [a0 + 12] = 0\n 66529: u8 [a0 + 11] = 0\n 66532: u8 [a0 + 10] = 0\n 66535: u8 [a0 + 9] = 0\n 66538: u8 [a0 + 8] = 0\n 66541: u8 [a0 + 7] = 0\n 66544: u8 [a0 + 6] = 0\n 66547: u8 [a0 + 5] = 0\n 66550: u8 [a0 + 4] = 0\n 66553: u8 [a0 + 3] = 0x30\n 66557: u8 [a0 + 2] = 0x18\n 66561: u8 [a0 + 1] = 0x6f\n 66565: u8 [a0 + 0] = 0x55\n 66568: a1 = u64 [sp + 0x1b8]\n 66572: a0 = a1 + 0x4\n 66575: a2 = a0 <u a1\n 66578: a3 = u64 [sp + 0x1b0]\n 66582: a1 = a3 + a2\n 66585: a3 = a1 <u a3\n 66588: a3 = a2 if a2 == 0\n 66591: a2 = s1 + a3\n 66594: t0 = a2 <u s1\n 66597: a3 = u64 [sp + 0x1c0]\n 66601: t0 = t0 + a3\n 66604: a3 = sp + 0x2e0\n 66608: u64 [sp] = a3\n 66610: a3 = u64 [sp + 0x1d0]\n 66614: u64 [sp + 0x2f8] = a3\n 66618: a3 = u64 [sp + 0x1d8]\n 66622: u64 [sp + 0x2f0] = a3\n 66626: a3 = u64 [sp + 0x1a8]\n 66630: u64 [sp + 0x2e8] = a3\n 66634: a3 = u64 [sp + 0x1c8]\n 66638: u64 [sp + 0x2e0] = a3\n 66642: a3 = 0x2951448200000000\n 66652: u64 [sp + 0x318] = a3\n 66656: u64 [sp + 784] = 0\n 66660: u64 [sp + 776] = 0\n 66664: u64 [sp + 768] = 0\n 66668: a3 = u64 [sp + 0x48]\n 66671: u64 [sp + 0x338] = a3\n 66675: a3 = u64 [sp + 0x60]\n 66678: u64 [sp + 0x330] = a3\n 66682: a3 = u64 [sp + 0x50]\n 66685: u64 [sp + 0x328] = a3\n 66689: a3 = u64 [sp + 0x58]\n 66692: u64 [sp + 0x320] = a3\n 66696: a3 = u64 [sp + 0x68]\n 66699: u64 [sp + 0x358] = a3\n 66703: a3 = u64 [sp + 0x70]\n 66706: u64 [sp + 0x350] = a3\n 66710: a3 = u64 [sp + 0x78]\n 66713: u64 [sp + 0x348] = a3\n 66717: a3 = u64 [sp + 0x30]\n 66720: u64 [sp + 0x340] = a3\n 66724: u64 [sp + 888] = 0\n 66728: a3 = u64 [sp + 0x190]\n 66732: u64 [sp + 0x370] = a3\n 66736: a3 = u64 [sp + 0x1a0]\n 66740: u64 [sp + 0x368] = a3\n 66744: a3 = u64 [sp + 0x198]\n 66748: u64 [sp + 0x360] = a3\n 66752: u64 [sp + 0x388] = a1\n 66756: u64 [sp + 0x380] = a0\n 66760: u64 [sp + 0x390] = a2\n 66764: a0 = sp + 0x3a0\n 66768: a1 = sp + 0x380\n 66772: a2 = sp + 0x360\n 66776: a3 = sp + 0x340\n 66780: a4 = sp + 0x320\n 66784: a5 = sp + 0x300\n 66788: u64 [sp + 0x398] = t0\n 66792: ra = 784, jump @851\n      : @911 [@dyn 392] (gas: 30)\n 66798: a0 = u64 [sp + 0x3a8]\n 66802: t0 = u64 [sp + 0x3b8]\n 66806: t2 = u64 [sp + 0x3a0]\n 66810: a3 = u64 [sp + 0x3b0]\n 66814: a1 = u64 [sp + 0x1b0]\n 66818: a4 = a0 ^ a1\n 66821: a5 = a0 <u a1\n 66824: t1 = a1\n 66826: a2 = u64 [sp + 0x1b8]\n 66830: a1 = t2 <u a2\n 66833: a5 = a1 if a4 == 0\n 66836: a4 = a3 - s1\n 66839: a3 = a3 <u s1\n 66842: s1 = u64 [sp + 0x1c0]\n 66846: s1 = t0 - s1\n 66849: s1 = s1 - a3\n 66852: a3 = a4 <u a5\n 66855: s1 = s1 - a3\n 66858: a4 = a4 - a5\n 66861: a0 = a0 - t1\n 66864: a1 = a0 - a1\n 66867: a0 = t2 - a2\n 66870: a1 = a1 | s1\n 66873: a2 = a0 | a4\n 66876: a2 = a2 | a1\n 66879: a1 = a1 | a4\n 66882: a2 = a2 >> 0x20\n 66885: a1 = a1 << 0x20\n 66888: a1 = a1 | a2\n 66891: jump @921 if a1 == 0\n      : @912 (gas: 1)\n 66895: trap\n      : @913 (gas: 8)\n 66896: u64 [sp + 592] = 0\n 66900: u64 [sp + 584] = 0\n 66904: u64 [sp + 576] = 0\n 66908: a0 = 0x4e487b7100000000\n 66918: a1 = sp + 0x240\n 66922: u64 [sp + 0x258] = a0\n 66926: a0 = 0\n 66928: ra = 786, jump @23\n      : @914 [@dyn 393] (gas: 8)\n 66935: u64 [sp + 568] = 0\n 66939: u64 [sp + 560] = 0\n 66943: u64 [sp + 544] = 0x32\n 66948: a0 = 0x4\n 66951: a1 = sp + 0x220\n 66955: u64 [sp + 552] = 0\n 66959: ra = 0x318\n 66963: jump @23\n      : @915 (gas: 8)\n 66967: u64 [sp + 656] = 0\n 66971: u64 [sp + 648] = 0\n 66975: u64 [sp + 640] = 0\n 66979: a0 = 0x4e487b7100000000\n 66989: a1 = sp + 0x280\n 66993: u64 [sp + 0x298] = a0\n 66997: a0 = 0\n 66999: ra = 788, jump @23\n      : @916 [@dyn 394] (gas: 8)\n 67006: u64 [sp + 632] = 0\n 67010: u64 [sp + 624] = 0\n 67014: u64 [sp + 608] = 0x32\n 67019: a0 = 0x4\n 67022: a1 = sp + 0x260\n 67026: u64 [sp + 616] = 0\n 67030: ra = 0x318\n 67034: jump @23\n      : @917 (gas: 8)\n 67038: u64 [sp + 720] = 0\n 67042: u64 [sp + 712] = 0\n 67046: u64 [sp + 704] = 0\n 67050: a0 = 0x4e487b7100000000\n 67060: a1 = sp + 0x2c0\n 67064: u64 [sp + 0x2d8] = a0\n 67068: a0 = 0\n 67070: ra = 790, jump @23\n      : @918 [@dyn 395] (gas: 7)\n 67077: u64 [sp + 696] = 0\n 67081: u64 [sp + 688] = 0\n 67085: u64 [sp + 672] = 0x41\n 67090: a0 = 0x4\n 67093: a1 = sp + 0x2a0\n 67097: u64 [sp + 680] = 0\n 67101: ra = 792, jump @23\n      : @919 [@dyn 396] (gas: 3)\n 67108: a1 = 0x24\n 67111: a0 = 0\n 67113: ra = 794, jump @0\n      : @920 [@dyn 397] (gas: 5)\n 67120: i32 a1 = a0 + 0\n 67122: a0 = 0x1\n 67125: a2 = 0x24\n 67128: ecalli 14 // 'seal_return'\n 67130: fallthrough\n      : @921 (gas: 5)\n 67131: i32 s1 = a0 + 0\n 67133: a0 = u64 [sp + 0x188]\n 67137: a1 = s1\n 67139: ra = 0x2ea\n 67143: jump @0\n      : @922 (gas: 17)\n 67147: sp = sp + 0xffffffffffffffa0\n 67150: u64 [sp + 0x58] = ra\n 67153: u64 [sp + 0x50] = s0\n 67156: u64 [sp + 0x48] = s1\n 67159: a3 = u64 [a1 + 0x18]\n 67162: a4 = u64 [a1 + 0x10]\n 67165: a5 = u64 [a1 + 0x8]\n 67168: s1 = u64 [a1]\n 67170: a1 = a5 | a3\n 67173: a2 = s1 | a4\n 67176: a2 = a2 | a1\n 67179: a2 = a2 >> 0x20\n 67182: a1 = a1 | a4\n 67185: a1 = a1 << 0x20\n 67188: a1 = a1 | a2\n 67191: u64 [sp + 0x28] = a0\n 67194: jump @929 if a1 != 0\n      : @923 (gas: 19)\n 67198: a0 = s1 + 0x20\n 67201: u64 [sp + 0x30] = a0\n 67204: a0 = a0 <u s1\n 67207: a1 = a5 + a0\n 67210: u64 [sp + 0x40] = a1\n 67213: u64 [sp + 0x8] = a5\n 67216: s0 = a1 <u a5\n 67219: s0 = a0 if a0 == 0\n 67222: s0 = s0 + a4\n 67225: u64 [sp + 0x10] = a4\n 67228: a0 = s0 <u a4\n 67231: u64 [sp + 0x18] = a3\n 67234: a0 = a0 + a3\n 67237: u64 [sp + 0x38] = a0\n 67240: u64 [sp] = s1\n 67242: i32 a0 = s1 + 0\n 67244: a1 = 0x20\n 67247: s1 = 0x20\n 67250: ra = 796, jump @0\n      : @924 [@dyn 398] (gas: 45)\n 67257: u8 [a0 + 0x1f] = s1\n 67260: a1 = u64 [sp + 0x30]\n 67263: s1 = a1\n 67265: a1 = a1 | s0\n 67268: a2 = u64 [sp + 0x40]\n 67271: a4 = u64 [sp + 0x38]\n 67274: a2 = a2 | a4\n 67277: a1 = a1 | a2\n 67280: a1 = a1 >> 0x20\n 67283: u64 [sp + 0x20] = s0\n 67286: a2 = a2 | s0\n 67289: a2 = a2 << 0x20\n 67292: a1 = a1 | a2\n 67295: u8 [a0 + 30] = 0\n 67298: u8 [a0 + 29] = 0\n 67301: u8 [a0 + 28] = 0\n 67304: u8 [a0 + 27] = 0\n 67307: u8 [a0 + 26] = 0\n 67310: u8 [a0 + 25] = 0\n 67313: u8 [a0 + 24] = 0\n 67316: u8 [a0 + 23] = 0\n 67319: u8 [a0 + 22] = 0\n 67322: u8 [a0 + 21] = 0\n 67325: u8 [a0 + 20] = 0\n 67328: u8 [a0 + 19] = 0\n 67331: u8 [a0 + 18] = 0\n 67334: u8 [a0 + 17] = 0\n 67337: u8 [a0 + 16] = 0\n 67340: u8 [a0 + 15] = 0\n 67343: u8 [a0 + 14] = 0\n 67346: u8 [a0 + 13] = 0\n 67349: u8 [a0 + 12] = 0\n 67352: u8 [a0 + 11] = 0\n 67355: u8 [a0 + 10] = 0\n 67358: u8 [a0 + 9] = 0\n 67361: u8 [a0 + 8] = 0\n 67364: u8 [a0 + 7] = 0\n 67367: u8 [a0 + 6] = 0\n 67370: u8 [a0 + 5] = 0\n 67373: u8 [a0 + 4] = 0\n 67376: u8 [a0 + 3] = 0\n 67379: u8 [a0 + 2] = 0\n 67382: u8 [a0 + 1] = 0\n 67385: u8 [a0 + 0] = 0\n 67387: jump @929 if a1 != 0\n      : @925 (gas: 4)\n 67391: i32 s0 = s1 + 0\n 67393: a1 = 0x20\n 67396: a0 = s0\n 67398: ra = 798, jump @0\n      : @926 [@dyn 399] (gas: 41)\n 67405: u8 [a0 + 31] = 0x16\n 67409: u8 [a0 + 30] = 0\n 67412: u8 [a0 + 29] = 0\n 67415: u8 [a0 + 28] = 0\n 67418: u8 [a0 + 27] = 0\n 67421: u8 [a0 + 26] = 0\n 67424: u8 [a0 + 25] = 0\n 67427: u8 [a0 + 24] = 0\n 67430: u8 [a0 + 23] = 0\n 67433: u8 [a0 + 22] = 0\n 67436: u8 [a0 + 21] = 0\n 67439: u8 [a0 + 20] = 0\n 67442: u8 [a0 + 19] = 0\n 67445: u8 [a0 + 18] = 0\n 67448: u8 [a0 + 17] = 0\n 67451: u8 [a0 + 16] = 0\n 67454: u8 [a0 + 15] = 0\n 67457: u8 [a0 + 14] = 0\n 67460: u8 [a0 + 13] = 0\n 67463: u8 [a0 + 12] = 0\n 67466: u8 [a0 + 11] = 0\n 67469: u8 [a0 + 10] = 0\n 67472: u8 [a0 + 9] = 0\n 67475: u8 [a0 + 8] = 0\n 67478: u8 [a0 + 7] = 0\n 67481: u8 [a0 + 6] = 0\n 67484: u8 [a0 + 5] = 0\n 67487: u8 [a0 + 4] = 0\n 67490: u8 [a0 + 3] = 0\n 67493: u8 [a0 + 2] = 0\n 67496: u8 [a0 + 1] = 0\n 67499: a1 = u64 [sp + 0x20]\n 67502: a2 = u64 [sp + 0x38]\n 67505: a1 = a1 | a2\n 67508: a2 = 0xffffffe0\n 67518: a2 = s1 <u a2\n 67521: a3 = u64 [sp + 0x40]\n 67524: a2 = 0 if a3 != 0\n 67526: a2 = 0 if a1 != 0\n 67528: u8 [a0 + 0] = 0\n 67530: jump @929 if a2 == 0\n      : @927 (gas: 3)\n 67534: i32 a0 = s0 + 0x20\n 67537: a1 = 0x20\n 67540: ra = 800, jump @0\n      : @928 [@dyn 400] (gas: 55)\n 67547: u8 [a0 + 31] = 0\n 67550: u8 [a0 + 30] = 0\n 67553: u8 [a0 + 29] = 0\n 67556: u8 [a0 + 28] = 0\n 67559: u8 [a0 + 27] = 0\n 67562: u8 [a0 + 26] = 0\n 67565: u8 [a0 + 25] = 0\n 67568: u8 [a0 + 24] = 0\n 67571: u8 [a0 + 23] = 0\n 67574: u8 [a0 + 22] = 0\n 67577: u8 [a0 + 21] = 0x6c\n 67581: u8 [a0 + 20] = 0x6c\n 67585: u8 [a0 + 19] = 0x61\n 67589: u8 [a0 + 18] = 0x63\n 67593: a5 = 0x20\n 67596: u8 [a0 + 0x11] = a5\n 67599: u8 [a0 + 16] = 0x74\n 67603: u8 [a0 + 15] = 0x6e\n 67607: u8 [a0 + 14] = 0x61\n 67611: u8 [a0 + 13] = 0x72\n 67615: u8 [a0 + 12] = 0x74\n 67619: u8 [a0 + 11] = 0x6e\n 67623: u8 [a0 + 10] = 0x65\n 67627: u8 [a0 + 9] = 0x65\n 67631: u8 [a0 + 8] = 0x72\n 67635: u8 [a0 + 0x7] = a5\n 67638: u8 [a0 + 6] = 0x3a\n 67642: u8 [a0 + 5] = 0x77\n 67646: u8 [a0 + 4] = 0x6f\n 67650: u8 [a0 + 3] = 0x72\n 67654: u8 [a0 + 2] = 0x63\n 67658: u8 [a0 + 1] = 0x73\n 67662: u8 [a0 + 0] = 0x45\n 67665: a1 = u64 [sp]\n 67667: a0 = a1 + 0x60\n 67670: a1 = a0 <u a1\n 67673: a3 = u64 [sp + 0x8]\n 67676: a2 = a3 + a1\n 67679: a3 = a2 <u a3\n 67682: a3 = a1 if a1 == 0\n 67685: a1 = u64 [sp + 0x10]\n 67688: a3 = a3 + a1\n 67691: a1 = a3 <u a1\n 67694: a4 = u64 [sp + 0x18]\n 67697: a1 = a1 + a4\n 67700: a4 = u64 [sp + 0x28]\n 67703: u64 [a4] = a0\n 67705: u64 [a4 + 0x8] = a2\n 67708: u64 [a4 + 0x10] = a3\n 67711: u64 [a4 + 0x18] = a1\n 67714: ra = u64 [sp + 0x58]\n 67717: s0 = u64 [sp + 0x50]\n 67720: s1 = u64 [sp + 0x48]\n 67723: sp = sp + 0x60\n 67726: ret\n      : @929 (gas: 1)\n 67728: trap\n      : @930 (gas: 23)\n 67729: sp = sp + 0xfffffffffffffee0\n 67733: u64 [sp + 0x118] = ra\n 67737: u64 [sp + 0x110] = s0\n 67741: u64 [sp + 0x108] = s1\n 67745: s0 = sp + 0x120\n 67749: sp = sp & 0xffffffffffffffe0\n 67752: s1 = a0\n 67754: u64 [sp + 216] = 0\n 67758: u64 [sp + 208] = 0\n 67762: u64 [sp + 200] = 0\n 67766: u64 [sp + 192] = 0x5\n 67771: u64 [sp + 248] = 0\n 67775: u64 [sp + 240] = 0\n 67779: u64 [sp + 232] = 0\n 67783: u64 [sp + 224] = 0\n 67787: u32 [sp + 160] = 0x20\n 67792: i32 a1 = sp + 0xc0\n 67796: i32 a3 = sp + 0xe0\n 67800: i32 a4 = sp + 0xa0\n 67804: a2 = 0xffffffffffffffff\n 67807: a0 = 0\n 67809: ecalli 8 // 'get_storage'\n 67811: fallthrough\n      : @931 (gas: 9)\n 67812: a0 = u64 [sp + 0xf8]\n 67816: a1 = u64 [sp + 0xe8]\n 67820: a2 = u64 [sp + 0xe0]\n 67824: a3 = u64 [sp + 0xf0]\n 67828: a0 = a0 | a1\n 67831: a1 = a2 ^ 0x1\n 67834: a1 = a1 | a3\n 67837: a0 = a0 | a1\n 67840: jump @934 if a0 != 0\n      : @932 (gas: 46)\n 67844: u64 [sp + 216] = 0\n 67848: u64 [sp + 208] = 0\n 67852: u64 [sp + 200] = 0\n 67856: u64 [sp + 192] = 0x5\n 67861: u64 [sp + 248] = 0\n 67865: u64 [sp + 240] = 0\n 67869: u64 [sp + 232] = 0\n 67873: u64 [sp + 224] = 0\n 67877: u32 [sp + 160] = 0x20\n 67882: i32 a1 = sp + 0xc0\n 67886: i32 a3 = sp + 0xe0\n 67890: i32 a4 = sp + 0xa0\n 67894: a2 = 0xffffffffffffffff\n 67897: a0 = 0\n 67899: ecalli 8 // 'get_storage'\n 67901: u64 [sp + 216] = 0\n 67905: u64 [sp + 208] = 0\n 67909: u64 [sp + 200] = 0\n 67913: u64 [sp + 192] = 0x5\n 67918: u64 [sp + 248] = 0\n 67922: u64 [sp + 240] = 0\n 67926: u64 [sp + 232] = 0\n 67930: u64 [sp + 224] = 0x2\n 67935: i32 a1 = sp + 0xc0\n 67939: i32 a3 = sp + 0xe0\n 67943: a2 = 0xffffffffffffffff\n 67946: a4 = 0x20\n 67949: a0 = 0\n 67951: ecalli 16 // 'set_storage'\n 67953: a0 = sp + 0x40\n 67956: ra = 0x322\n 67960: sp = sp + 0xfffffffffffffd40\n 67964: u64 [sp + 0x2b8] = ra\n 67968: u64 [sp + 0x2b0] = s0\n 67972: u64 [sp + 0x2a8] = s1\n 67976: s0 = sp + 0x2c0\n 67980: sp = sp & 0xffffffffffffffe0\n 67983: s1 = sp\n 67985: u64 [s1 + 0x18] = a0\n 67988: u64 [s1 + 440] = 0\n 67992: u64 [s1 + 432] = 0\n 67996: u64 [s1 + 424] = 0\n 68000: u64 [s1 + 416] = 0\n 68004: i32 a0 = s1 + 0x1a0\n 68008: ecalli 17 // 'value_transferred'\n 68010: jump @970\n      : @933 [@dyn 401] (gas: 51)\n 68013: a0 = u64 [sp + 0x40]\n 68016: u64 [sp + 0x18] = a0\n 68019: a0 = u64 [sp + 0x48]\n 68022: u64 [sp + 0x10] = a0\n 68025: a0 = u64 [sp + 0x50]\n 68028: u64 [sp + 0x8] = a0\n 68031: a0 = u64 [sp + 0x58]\n 68034: u64 [sp] = a0\n 68036: u64 [sp + 216] = 0\n 68040: u64 [sp + 208] = 0\n 68044: u64 [sp + 200] = 0\n 68048: u64 [sp + 192] = 0x5\n 68053: u64 [sp + 248] = 0\n 68057: u64 [sp + 240] = 0\n 68061: u64 [sp + 232] = 0\n 68065: u64 [sp + 224] = 0\n 68069: u32 [sp + 160] = 0x20\n 68074: i32 a1 = sp + 0xc0\n 68078: i32 a3 = sp + 0xe0\n 68082: i32 a4 = sp + 0xa0\n 68086: a2 = 0xffffffffffffffff\n 68089: a0 = 0\n 68091: ecalli 8 // 'get_storage'\n 68093: u64 [sp + 216] = 0\n 68097: u64 [sp + 208] = 0\n 68101: u64 [sp + 200] = 0\n 68105: u64 [sp + 192] = 0x5\n 68110: u64 [sp + 248] = 0\n 68114: u64 [sp + 240] = 0\n 68118: u64 [sp + 232] = 0\n 68122: u64 [sp + 224] = 0x1\n 68127: i32 a1 = sp + 0xc0\n 68131: i32 a3 = sp + 0xe0\n 68135: a2 = 0xffffffffffffffff\n 68138: a4 = 0x20\n 68141: a0 = 0\n 68143: ecalli 16 // 'set_storage'\n 68145: a0 = u64 [sp]\n 68147: u64 [s1 + 0x18] = a0\n 68150: a0 = u64 [sp + 0x8]\n 68153: u64 [s1 + 0x10] = a0\n 68156: a0 = u64 [sp + 0x10]\n 68159: u64 [s1 + 0x8] = a0\n 68162: a0 = u64 [sp + 0x18]\n 68165: u64 [s1] = a0\n 68167: sp = s0 + 0xfffffffffffffee0\n 68171: ra = u64 [sp + 0x118]\n 68175: s0 = u64 [sp + 0x110]\n 68179: s1 = u64 [sp + 0x108]\n 68183: sp = sp + 0x120\n 68187: ret\n      : @934 (gas: 3)\n 68189: a0 = 0x40\n 68192: a1 = 0x20\n 68195: ra = 804, jump @0\n      : @935 [@dyn 402] (gas: 103)\n 68202: a1 = u8 [a0 + 0x11]\n 68205: a2 = u8 [a0 + 0x10]\n 68208: a3 = u8 [a0 + 0x12]\n 68211: a4 = u8 [a0 + 0x13]\n 68214: a1 = a1 << 0x8\n 68217: a1 = a1 | a2\n 68220: a3 = a3 << 0x10\n 68223: a4 = a4 << 0x18\n 68226: a3 = a3 | a4\n 68229: a1 = a1 | a3\n 68232: a2 = u8 [a0 + 0x15]\n 68235: a3 = u8 [a0 + 0x14]\n 68238: a4 = u8 [a0 + 0x16]\n 68241: a5 = u8 [a0 + 0x17]\n 68244: a2 = a2 << 0x8\n 68247: a2 = a2 | a3\n 68250: a4 = a4 << 0x10\n 68253: a5 = a5 << 0x18\n 68256: a4 = a4 | a5\n 68259: a2 = a2 | a4\n 68262: a2 = a2 << 0x20\n 68265: t0 = a2 | a1\n 68268: a2 = u8 [a0 + 0x1]\n 68271: a3 = u8 [a0]\n 68273: a4 = u8 [a0 + 0x2]\n 68276: a5 = u8 [a0 + 0x3]\n 68279: a2 = a2 << 0x8\n 68282: a2 = a2 | a3\n 68285: a4 = a4 << 0x10\n 68288: a5 = a5 << 0x18\n 68291: a4 = a4 | a5\n 68294: a2 = a2 | a4\n 68297: a3 = u8 [a0 + 0x5]\n 68300: a4 = u8 [a0 + 0x4]\n 68303: a5 = u8 [a0 + 0x6]\n 68306: s1 = u8 [a0 + 0x7]\n 68309: a3 = a3 << 0x8\n 68312: a3 = a3 | a4\n 68315: a5 = a5 << 0x10\n 68318: s1 = s1 << 0x18\n 68321: a5 = a5 | s1\n 68324: a3 = a3 | a5\n 68327: a3 = a3 << 0x20\n 68330: a2 = a2 | a3\n 68333: a3 = u8 [a0 + 0x19]\n 68336: a4 = u8 [a0 + 0x18]\n 68339: a5 = u8 [a0 + 0x1a]\n 68342: s1 = u8 [a0 + 0x1b]\n 68345: a3 = a3 << 0x8\n 68348: a3 = a3 | a4\n 68351: a5 = a5 << 0x10\n 68354: s1 = s1 << 0x18\n 68357: a5 = a5 | s1\n 68360: a3 = a3 | a5\n 68363: a4 = u8 [a0 + 0x1d]\n 68366: a5 = u8 [a0 + 0x1c]\n 68369: s1 = u8 [a0 + 0x1e]\n 68372: a1 = u8 [a0 + 0x1f]\n 68375: a4 = a4 << 0x8\n 68378: a4 = a4 | a5\n 68381: s1 = s1 << 0x10\n 68384: a1 = a1 << 0x18\n 68387: a1 = a1 | s1\n 68390: a1 = a1 | a4\n 68393: a1 = a1 << 0x20\n 68396: a3 = a3 | a1\n 68399: a1 = u8 [a0 + 0x9]\n 68402: a4 = u8 [a0 + 0x8]\n 68405: a5 = u8 [a0 + 0xa]\n 68408: s1 = u8 [a0 + 0xb]\n 68411: a1 = a1 << 0x8\n 68414: a1 = a1 | a4\n 68417: a5 = a5 << 0x10\n 68420: s1 = s1 << 0x18\n 68423: a5 = a5 | s1\n 68426: a1 = a1 | a5\n 68429: a4 = u8 [a0 + 0xd]\n 68432: a5 = u8 [a0 + 0xc]\n 68435: s1 = u8 [a0 + 0xe]\n 68438: a0 = u8 [a0 + 0xf]\n 68441: a4 = a4 << 0x8\n 68444: a4 = a4 | a5\n 68447: s1 = s1 << 0x10\n 68450: a0 = a0 << 0x18\n 68453: a0 = a0 | s1\n 68456: a0 = a0 | a4\n 68459: a0 = a0 << 0x20\n 68462: a0 = a0 | a1\n 68465: s1 = reverse a0\n 68467: a1 = reverse a3\n 68469: a2 = reverse a2\n 68471: a0 = reverse t0\n 68473: u64 [sp + 0x18] = a0\n 68476: u64 [sp + 0x10] = a2\n 68479: a0 = a0 | a2\n 68482: a2 = a1\n 68484: a1 = a1 | s1\n 68487: a1 = a1 | a0\n 68490: a1 = a1 >> 0x20\n 68493: a0 = a0 | s1\n 68496: a0 = a0 << 0x20\n 68499: a0 = a0 | a1\n 68502: jump @939 if a0 != 0\n      : @936 (gas: 5)\n 68506: u64 [sp + 0x8] = a2\n 68509: i32 a0 = a2 + 0\n 68511: a1 = 0x20\n 68514: u64 [sp] = a0\n 68516: ra = 806, jump @0\n      : @937 [@dyn 403] (gas: 50)\n 68523: u8 [a0 + 31] = 0\n 68526: u8 [a0 + 30] = 0\n 68529: u8 [a0 + 29] = 0\n 68532: u8 [a0 + 28] = 0\n 68535: u8 [a0 + 27] = 0\n 68538: u8 [a0 + 26] = 0\n 68541: u8 [a0 + 25] = 0\n 68544: u8 [a0 + 24] = 0\n 68547: u8 [a0 + 23] = 0\n 68550: u8 [a0 + 22] = 0\n 68553: u8 [a0 + 21] = 0\n 68556: u8 [a0 + 20] = 0\n 68559: u8 [a0 + 19] = 0\n 68562: u8 [a0 + 18] = 0\n 68565: u8 [a0 + 17] = 0\n 68568: u8 [a0 + 16] = 0\n 68571: u8 [a0 + 15] = 0\n 68574: u8 [a0 + 14] = 0\n 68577: u8 [a0 + 13] = 0\n 68580: u8 [a0 + 12] = 0\n 68583: u8 [a0 + 11] = 0\n 68586: u8 [a0 + 10] = 0\n 68589: u8 [a0 + 9] = 0\n 68592: u8 [a0 + 8] = 0\n 68595: u8 [a0 + 7] = 0\n 68598: u8 [a0 + 6] = 0\n 68601: u8 [a0 + 5] = 0\n 68604: u8 [a0 + 4] = 0\n 68607: u8 [a0 + 3] = 0xa0\n 68612: u8 [a0 + 2] = 0x79\n 68616: u8 [a0 + 1] = 0xc3\n 68621: u8 [a0 + 0] = 0x8\n 68624: a1 = u64 [sp + 0x8]\n 68627: a0 = a1 + 0x4\n 68630: a1 = a0 <u a1\n 68633: a3 = u64 [sp + 0x18]\n 68636: a2 = a3 + a1\n 68639: a3 = a2 <u a3\n 68642: a3 = a1 if a1 == 0\n 68645: a3 = a3 + s1\n 68648: a1 = a3 <u s1\n 68651: a4 = u64 [sp + 0x10]\n 68654: a4 = a4 + a1\n 68657: u64 [sp + 0x68] = a2\n 68660: u64 [sp + 0x60] = a0\n 68663: u64 [sp + 0x70] = a3\n 68666: a0 = sp + 0x80\n 68670: a1 = sp + 0x60\n 68673: u64 [sp + 0x78] = a4\n 68676: ra = 808, jump @922\n      : @938 [@dyn 404] (gas: 30)\n 68682: a0 = u64 [sp + 0x88]\n 68686: t0 = u64 [sp + 0x98]\n 68690: t1 = u64 [sp + 0x80]\n 68694: a3 = u64 [sp + 0x90]\n 68698: a1 = u64 [sp + 0x18]\n 68701: a4 = a0 ^ a1\n 68704: a5 = a0 <u a1\n 68707: t2 = a1\n 68709: a2 = u64 [sp + 0x8]\n 68712: a1 = t1 <u a2\n 68715: a5 = a1 if a4 == 0\n 68718: a4 = a3 - s1\n 68721: a3 = a3 <u s1\n 68724: s1 = u64 [sp + 0x10]\n 68727: s1 = t0 - s1\n 68730: s1 = s1 - a3\n 68733: a3 = a4 <u a5\n 68736: s1 = s1 - a3\n 68739: a4 = a4 - a5\n 68742: a0 = a0 - t2\n 68745: a1 = a0 - a1\n 68748: a0 = t1 - a2\n 68751: a1 = a1 | s1\n 68754: a2 = a0 | a4\n 68757: a2 = a2 | a1\n 68760: a1 = a1 | a4\n 68763: a2 = a2 >> 0x20\n 68766: a1 = a1 << 0x20\n 68769: a1 = a1 | a2\n 68772: jump @940 if a1 == 0\n      : @939 (gas: 1)\n 68775: trap\n      : @940 (gas: 4)\n 68776: i32 s1 = a0 + 0\n 68778: a0 = u64 [sp]\n 68780: a1 = s1\n 68782: ra = 810, jump @0\n      : @941 [@dyn 405] (gas: 6)\n 68789: i32 a1 = a0 + 0\n 68791: a0 = 0x1\n 68794: a2 = s1\n 68796: ra = 0x32c\n 68800: ecalli 14 // 'seal_return'\n 68802: fallthrough\n      : @942 [@dyn 406] (gas: 12)\n 68803: a1 = u64 [a0 + 0x10]\n 68806: a2 = u64 [a0 + 0x18]\n 68809: a3 = u64 [a0 + 0x8]\n 68812: a0 = u64 [a0]\n 68814: a2 = a2 | a3\n 68817: a3 = a0 | a1\n 68820: a3 = a3 | a2\n 68823: a3 = a3 >> 0x20\n 68826: a1 = a1 | a2\n 68829: a1 = a1 << 0x20\n 68832: a1 = a1 | a3\n 68835: jump @945 if a1 != 0\n      : @943 (gas: 8)\n 68839: sp = sp + 0xffffffffffffffe8\n 68842: u64 [sp + 0x10] = ra\n 68845: u64 [sp + 0x8] = s0\n 68848: u64 [sp] = s1\n 68850: i32 a0 = a0 + 0\n 68852: a1 = 0x20\n 68855: s1 = 0x20\n 68858: ra = 814, jump @0\n      : @944 [@dyn 407] (gas: 42)\n 68865: u8 [a0 + 31] = 0x74\n 68869: u8 [a0 + 30] = 0x6e\n 68873: u8 [a0 + 29] = 0x75\n 68877: u8 [a0 + 28] = 0x6f\n 68881: u8 [a0 + 27] = 0x6d\n 68885: a5 = 0x61\n 68888: u8 [a0 + 0x1a] = a5\n 68891: u8 [a0 + 0x19] = s1\n 68894: u8 [a0 + 24] = 0x74\n 68898: u8 [a0 + 23] = 0x6e\n 68902: u8 [a0 + 22] = 0x65\n 68906: u8 [a0 + 21] = 0x6d\n 68910: u8 [a0 + 20] = 0x79\n 68914: u8 [a0 + 0x13] = a5\n 68917: u8 [a0 + 18] = 0x70\n 68921: u8 [a0 + 0x11] = s1\n 68924: u8 [a0 + 16] = 0x74\n 68928: a3 = 0x63\n 68931: u8 [a0 + 0xf] = a3\n 68934: u8 [a0 + 14] = 0x65\n 68938: a4 = 0x72\n 68941: u8 [a0 + 0xd] = a4\n 68944: u8 [a0 + 0xc] = a4\n 68947: u8 [a0 + 11] = 0x6f\n 68951: u8 [a0 + 0xa] = a3\n 68954: u8 [a0 + 9] = 0x6e\n 68958: u8 [a0 + 8] = 0x69\n 68962: u8 [a0 + 0x7] = s1\n 68965: u8 [a0 + 6] = 0x3a\n 68969: a2 = 0x77\n 68972: u8 [a0 + 0x5] = a2\n 68975: u8 [a0 + 4] = 0x6f\n 68979: u8 [a0 + 0x3] = a4\n 68982: u8 [a0 + 0x2] = a3\n 68985: u8 [a0 + 1] = 0x73\n 68989: a1 = 0x45\n 68992: u8 [a0] = a1\n 68994: ra = u64 [sp + 0x10]\n 68997: s0 = u64 [sp + 0x8]\n 69000: s1 = u64 [sp]\n 69002: sp = sp + 0x18\n 69005: ret\n      : @945 (gas: 1)\n 69007: trap\n      : @946 (gas: 16)\n 69008: sp = sp + 0xffffffffffffffa0\n 69011: u64 [sp + 0x58] = ra\n 69014: u64 [sp + 0x50] = s0\n 69017: u64 [sp + 0x48] = s1\n 69020: a3 = u64 [a1 + 0x18]\n 69023: a4 = u64 [a1 + 0x10]\n 69026: a5 = u64 [a1 + 0x8]\n 69029: s1 = u64 [a1]\n 69031: a1 = a5 | a3\n 69034: a2 = s1 | a4\n 69037: a2 = a2 | a1\n 69040: a2 = a2 >> 0x20\n 69043: a1 = a1 | a4\n 69046: a1 = a1 << 0x20\n 69049: a1 = a1 | a2\n 69052: jump @953 if a1 != 0\n      : @947 (gas: 20)\n 69056: u64 [sp + 0x10] = a0\n 69059: a0 = s1 + 0x20\n 69062: u64 [sp + 0x30] = a0\n 69065: a0 = a0 <u s1\n 69068: a1 = a5 + a0\n 69071: u64 [sp + 0x40] = a1\n 69074: u64 [sp + 0x8] = a5\n 69077: s0 = a1 <u a5\n 69080: s0 = a0 if a0 == 0\n 69083: s0 = s0 + a4\n 69086: u64 [sp + 0x18] = a4\n 69089: a0 = s0 <u a4\n 69092: u64 [sp + 0x20] = a3\n 69095: a0 = a0 + a3\n 69098: u64 [sp + 0x38] = a0\n 69101: u64 [sp] = s1\n 69103: i32 a0 = s1 + 0\n 69105: a1 = 0x20\n 69108: s1 = 0x20\n 69111: ra = 816, jump @0\n      : @948 [@dyn 408] (gas: 45)\n 69118: a1 = u64 [sp + 0x30]\n 69121: a3 = a1\n 69123: a1 = a1 | s0\n 69126: a2 = u64 [sp + 0x40]\n 69129: a4 = u64 [sp + 0x38]\n 69132: a2 = a2 | a4\n 69135: a1 = a1 | a2\n 69138: a1 = a1 >> 0x20\n 69141: u64 [sp + 0x28] = s0\n 69144: a2 = a2 | s0\n 69147: a2 = a2 << 0x20\n 69150: a1 = a1 | a2\n 69153: u8 [a0 + 0x1f] = s1\n 69156: u8 [a0 + 30] = 0\n 69159: u8 [a0 + 29] = 0\n 69162: u8 [a0 + 28] = 0\n 69165: u8 [a0 + 27] = 0\n 69168: u8 [a0 + 26] = 0\n 69171: u8 [a0 + 25] = 0\n 69174: u8 [a0 + 24] = 0\n 69177: u8 [a0 + 23] = 0\n 69180: u8 [a0 + 22] = 0\n 69183: u8 [a0 + 21] = 0\n 69186: u8 [a0 + 20] = 0\n 69189: u8 [a0 + 19] = 0\n 69192: u8 [a0 + 18] = 0\n 69195: u8 [a0 + 17] = 0\n 69198: u8 [a0 + 16] = 0\n 69201: u8 [a0 + 15] = 0\n 69204: u8 [a0 + 14] = 0\n 69207: u8 [a0 + 13] = 0\n 69210: u8 [a0 + 12] = 0\n 69213: u8 [a0 + 11] = 0\n 69216: u8 [a0 + 10] = 0\n 69219: u8 [a0 + 9] = 0\n 69222: u8 [a0 + 8] = 0\n 69225: u8 [a0 + 7] = 0\n 69228: u8 [a0 + 6] = 0\n 69231: u8 [a0 + 5] = 0\n 69234: u8 [a0 + 4] = 0\n 69237: u8 [a0 + 3] = 0\n 69240: u8 [a0 + 2] = 0\n 69243: u8 [a0 + 1] = 0\n 69246: u8 [a0 + 0] = 0\n 69248: jump @953 if a1 != 0\n      : @949 (gas: 5)\n 69252: s1 = a3\n 69254: i32 s0 = a3 + 0\n 69256: a1 = 0x20\n 69259: a0 = s0\n 69261: ra = 818, jump @0\n      : @950 [@dyn 409] (gas: 41)\n 69268: u8 [a0 + 31] = 0x20\n 69272: u8 [a0 + 30] = 0\n 69275: u8 [a0 + 29] = 0\n 69278: u8 [a0 + 28] = 0\n 69281: u8 [a0 + 27] = 0\n 69284: u8 [a0 + 26] = 0\n 69287: u8 [a0 + 25] = 0\n 69290: u8 [a0 + 24] = 0\n 69293: u8 [a0 + 23] = 0\n 69296: u8 [a0 + 22] = 0\n 69299: u8 [a0 + 21] = 0\n 69302: u8 [a0 + 20] = 0\n 69305: u8 [a0 + 19] = 0\n 69308: u8 [a0 + 18] = 0\n 69311: u8 [a0 + 17] = 0\n 69314: u8 [a0 + 16] = 0\n 69317: u8 [a0 + 15] = 0\n 69320: u8 [a0 + 14] = 0\n 69323: u8 [a0 + 13] = 0\n 69326: u8 [a0 + 12] = 0\n 69329: u8 [a0 + 11] = 0\n 69332: u8 [a0 + 10] = 0\n 69335: u8 [a0 + 9] = 0\n 69338: u8 [a0 + 8] = 0\n 69341: u8 [a0 + 7] = 0\n 69344: u8 [a0 + 6] = 0\n 69347: u8 [a0 + 5] = 0\n 69350: u8 [a0 + 4] = 0\n 69353: u8 [a0 + 3] = 0\n 69356: u8 [a0 + 2] = 0\n 69359: u8 [a0 + 1] = 0\n 69362: a1 = u64 [sp + 0x28]\n 69365: a2 = u64 [sp + 0x38]\n 69368: a1 = a1 | a2\n 69371: a2 = 0xffffffe0\n 69381: a2 = s1 <u a2\n 69384: a3 = u64 [sp + 0x40]\n 69387: a2 = 0 if a3 != 0\n 69389: a2 = 0 if a1 != 0\n 69391: u8 [a0 + 0] = 0\n 69393: jump @953 if a2 == 0\n      : @951 (gas: 4)\n 69397: i32 a0 = s0 + 0x20\n 69400: a1 = 0x20\n 69403: s0 = 0x20\n 69406: ra = 820, jump @0\n      : @952 [@dyn 410] (gas: 54)\n 69413: u8 [a0 + 29] = 0x75\n 69417: u8 [a0 + 27] = 0x6d\n 69421: u8 [a0 + 21] = 0x6d\n 69425: u8 [a0 + 20] = 0x79\n 69429: u8 [a0 + 26] = 0x61\n 69433: u8 [a0 + 19] = 0x61\n 69437: u8 [a0 + 18] = 0x70\n 69441: u8 [a0 + 31] = 0x74\n 69445: u8 [a0 + 24] = 0x74\n 69449: u8 [a0 + 16] = 0x74\n 69453: u8 [a0 + 22] = 0x65\n 69457: u8 [a0 + 14] = 0x65\n 69461: u8 [a0 + 30] = 0x6e\n 69465: u8 [a0 + 23] = 0x6e\n 69469: u8 [a0 + 9] = 0x6e\n 69473: u8 [a0 + 8] = 0x69\n 69477: u8 [a0 + 0x19] = s0\n 69480: u8 [a0 + 0x11] = s0\n 69483: u8 [a0 + 0x7] = s0\n 69486: u8 [a0 + 6] = 0x3a\n 69490: u8 [a0 + 5] = 0x77\n 69494: u8 [a0 + 28] = 0x6f\n 69498: u8 [a0 + 11] = 0x6f\n 69502: u8 [a0 + 4] = 0x6f\n 69506: u8 [a0 + 13] = 0x72\n 69510: u8 [a0 + 12] = 0x72\n 69514: u8 [a0 + 3] = 0x72\n 69518: u8 [a0 + 15] = 0x63\n 69522: u8 [a0 + 10] = 0x63\n 69526: u8 [a0 + 2] = 0x63\n 69530: u8 [a0 + 1] = 0x73\n 69534: u8 [a0 + 0] = 0x45\n 69537: a1 = u64 [sp]\n 69539: a0 = a1 + 0x60\n 69542: a1 = a0 <u a1\n 69545: a3 = u64 [sp + 0x8]\n 69548: a2 = a3 + a1\n 69551: a3 = a2 <u a3\n 69554: a3 = a1 if a1 == 0\n 69557: a1 = u64 [sp + 0x18]\n 69560: a3 = a3 + a1\n 69563: a1 = a3 <u a1\n 69566: a4 = u64 [sp + 0x20]\n 69569: a1 = a1 + a4\n 69572: a4 = u64 [sp + 0x10]\n 69575: u64 [a4] = a0\n 69577: u64 [a4 + 0x8] = a2\n 69580: u64 [a4 + 0x10] = a3\n 69583: u64 [a4 + 0x18] = a1\n 69586: ra = u64 [sp + 0x58]\n 69589: s0 = u64 [sp + 0x50]\n 69592: s1 = u64 [sp + 0x48]\n 69595: sp = sp + 0x60\n 69598: ret\n      : @953 (gas: 1)\n 69600: trap\n      : @954 (gas: 22)\n 69601: sp = sp + 0xfffffffffffffee0\n 69605: u64 [sp + 0x118] = ra\n 69609: u64 [sp + 0x110] = s0\n 69613: u64 [sp + 0x108] = s1\n 69617: s0 = sp + 0x120\n 69621: sp = sp & 0xffffffffffffffe0\n 69624: a4 = u64 [a1 + 0x10]\n 69627: a5 = u64 [a1 + 0x18]\n 69630: a2 = u64 [a1 + 0x8]\n 69633: a3 = u64 [a1]\n 69635: u64 [sp + 0x70] = a2\n 69638: u64 [sp + 0x58] = a5\n 69641: a1 = a2 | a5\n 69644: u64 [sp + 0x80] = a3\n 69648: a2 = a3 | a4\n 69651: a2 = a2 | a1\n 69654: a2 = a2 >> 0x20\n 69657: u64 [sp + 0x78] = a4\n 69660: a1 = a1 | a4\n 69663: a1 = a1 << 0x20\n 69666: a1 = a1 | a2\n 69669: jump @969 if a1 != 0\n      : @955 (gas: 12)\n 69673: a1 = u64 [a0 + 0x18]\n 69676: u64 [sp + 0x60] = a1\n 69679: a1 = u64 [a0 + 0x10]\n 69682: u64 [sp + 0x88] = a1\n 69686: a1 = u64 [a0 + 0x8]\n 69689: u64 [sp + 0x90] = a1\n 69693: a0 = u64 [a0]\n 69695: u64 [sp + 0x98] = a0\n 69699: a0 = i32 [sp + 0x80]\n 69703: a1 = 0x20\n 69706: u64 [sp + 0x68] = a0\n 69709: ra = 822, jump @0\n      : @956 [@dyn 411] (gas: 105)\n 69716: a1 = u8 [a0 + 0x11]\n 69719: a2 = u8 [a0 + 0x10]\n 69722: a3 = u8 [a0 + 0x12]\n 69725: a4 = u8 [a0 + 0x13]\n 69728: a1 = a1 << 0x8\n 69731: a1 = a1 | a2\n 69734: a3 = a3 << 0x10\n 69737: a4 = a4 << 0x18\n 69740: a3 = a3 | a4\n 69743: a1 = a1 | a3\n 69746: a2 = u8 [a0 + 0x15]\n 69749: a3 = u8 [a0 + 0x14]\n 69752: a4 = u8 [a0 + 0x16]\n 69755: a5 = u8 [a0 + 0x17]\n 69758: a2 = a2 << 0x8\n 69761: a2 = a2 | a3\n 69764: a4 = a4 << 0x10\n 69767: a5 = a5 << 0x18\n 69770: a4 = a4 | a5\n 69773: a2 = a2 | a4\n 69776: a2 = a2 << 0x20\n 69779: a1 = a1 | a2\n 69782: a2 = u8 [a0 + 0x19]\n 69785: a3 = u8 [a0 + 0x18]\n 69788: a4 = u8 [a0 + 0x1a]\n 69791: a5 = u8 [a0 + 0x1b]\n 69794: a2 = a2 << 0x8\n 69797: a2 = a2 | a3\n 69800: a4 = a4 << 0x10\n 69803: a5 = a5 << 0x18\n 69806: a4 = a4 | a5\n 69809: a2 = a2 | a4\n 69812: a3 = u8 [a0 + 0x1d]\n 69815: a4 = u8 [a0 + 0x1c]\n 69818: a5 = u8 [a0 + 0x1e]\n 69821: s1 = u8 [a0 + 0x1f]\n 69824: a3 = a3 << 0x8\n 69827: a3 = a3 | a4\n 69830: a5 = a5 << 0x10\n 69833: s1 = s1 << 0x18\n 69836: a5 = a5 | s1\n 69839: a3 = a3 | a5\n 69842: a3 = a3 << 0x20\n 69845: a2 = a2 | a3\n 69848: a3 = u8 [a0 + 0xd]\n 69851: a4 = u8 [a0 + 0xc]\n 69854: a5 = u8 [a0 + 0xe]\n 69857: a0 = u8 [a0 + 0xf]\n 69860: a3 = a3 << 0x8\n 69863: a3 = a3 | a4\n 69866: a5 = a5 << 0x10\n 69869: a0 = a0 << 0x18\n 69872: a0 = a0 | a5\n 69875: a0 = a0 | a3\n 69878: a2 = reverse a2\n 69880: u64 [sp + 0x50] = a2\n 69883: a1 = reverse a1\n 69885: u64 [sp + 0x48] = a1\n 69888: s1 = reverse a0\n 69890: s1 = s1 >> 0x20\n 69893: u64 [sp + 0x40] = s1\n 69896: s1 = u64 [sp + 0x60]\n 69899: u64 [sp + 0xd8] = s1\n 69903: a0 = u64 [sp + 0x88]\n 69907: u64 [sp + 0xd0] = a0\n 69911: a0 = u64 [sp + 0x90]\n 69915: u64 [sp + 0xc8] = a0\n 69919: a0 = u64 [sp + 0x98]\n 69923: u64 [sp + 0xc0] = a0\n 69927: u64 [sp + 248] = 0\n 69931: u64 [sp + 240] = 0\n 69935: u64 [sp + 232] = 0\n 69939: u64 [sp + 224] = 0\n 69943: u32 [sp + 160] = 0x20\n 69948: i32 a1 = sp + 0xc0\n 69952: i32 a3 = sp + 0xe0\n 69956: i32 a4 = sp + 0xa0\n 69960: a2 = 0xffffffffffffffff\n 69963: a0 = 0\n 69965: ecalli 8 // 'get_storage'\n 69967: a0 = u32 [sp + 0xf4]\n 69971: a0 = a0 << 0x20\n 69974: a1 = u64 [sp + 0xf8]\n 69978: a2 = u64 [sp + 0x40]\n 69981: a0 = a0 | a2\n 69984: u64 [sp + 0xd8] = s1\n 69988: a2 = u64 [sp + 0x88]\n 69992: u64 [sp + 0xd0] = a2\n 69996: a2 = u64 [sp + 0x90]\n 70000: u64 [sp + 0xc8] = a2\n 70004: a2 = u64 [sp + 0x98]\n 70008: u64 [sp + 0xc0] = a2\n 70012: u64 [sp + 0xf8] = a1\n 70016: u64 [sp + 0xf0] = a0\n 70020: a0 = u64 [sp + 0x48]\n 70023: u64 [sp + 0xe8] = a0\n 70027: a0 = u64 [sp + 0x50]\n 70030: u64 [sp + 0xe0] = a0\n 70034: i32 a1 = sp + 0xc0\n 70038: i32 a3 = sp + 0xe0\n 70042: a2 = 0xffffffffffffffff\n 70045: a4 = 0x20\n 70048: a0 = 0\n 70050: ecalli 16 // 'set_storage'\n 70052: fallthrough\n      : @957 (gas: 13)\n 70053: a0 = u64 [sp + 0x78]\n 70056: a2 = u64 [sp + 0x58]\n 70059: a2 = a2 | a0\n 70062: a0 = 0x100000000\n 70072: u64 [sp + 0x40] = a0\n 70075: a0 = 0xffffffe0\n 70085: a1 = u64 [sp + 0x80]\n 70089: a0 = a1 <u a0\n 70092: a1 = u64 [sp + 0x70]\n 70095: a0 = 0 if a1 != 0\n 70097: u64 [sp + 0x58] = a2\n 70100: a0 = 0 if a2 != 0\n 70102: jump @969 if a0 == 0\n      : @958 (gas: 20)\n 70106: a0 = u64 [sp + 0x98]\n 70110: a2 = a0 + 0x1\n 70113: u64 [sp + 0x48] = a2\n 70116: a0 = a2 <u 0x1\n 70119: a1 = u64 [sp + 0x90]\n 70123: a0 = a0 + a1\n 70126: u64 [sp + 0x78] = a0\n 70129: a0 = a0 | a2\n 70132: a0 = a0 <u 0x1\n 70135: a1 = u64 [sp + 0x88]\n 70139: a0 = a0 + a1\n 70142: u64 [sp + 0x50] = a0\n 70145: a0 = a0 <u a1\n 70148: a1 = u64 [sp + 0x60]\n 70151: a0 = a0 + a1\n 70154: u64 [sp + 0x38] = a0\n 70157: a0 = u64 [sp + 0x68]\n 70160: i32 a0 = a0 + 0x20\n 70163: a1 = 0x20\n 70166: ra = 824, jump @0\n      : @959 [@dyn 412] (gas: 137)\n 70173: a1 = u8 [a0 + 0x1]\n 70176: a2 = u8 [a0]\n 70178: a3 = u8 [a0 + 0x2]\n 70181: a4 = u8 [a0 + 0x3]\n 70184: a1 = a1 << 0x8\n 70187: a1 = a1 | a2\n 70190: a3 = a3 << 0x10\n 70193: a4 = a4 << 0x18\n 70196: a3 = a3 | a4\n 70199: a1 = a1 | a3\n 70202: a2 = u8 [a0 + 0x5]\n 70205: a3 = u8 [a0 + 0x4]\n 70208: a4 = u8 [a0 + 0x6]\n 70211: a5 = u8 [a0 + 0x7]\n 70214: a2 = a2 << 0x8\n 70217: a2 = a2 | a3\n 70220: a4 = a4 << 0x10\n 70223: a5 = a5 << 0x18\n 70226: a4 = a4 | a5\n 70229: a2 = a2 | a4\n 70232: a2 = a2 << 0x20\n 70235: t0 = a2 | a1\n 70238: a2 = u8 [a0 + 0x9]\n 70241: a3 = u8 [a0 + 0x8]\n 70244: a4 = u8 [a0 + 0xa]\n 70247: a5 = u8 [a0 + 0xb]\n 70250: a2 = a2 << 0x8\n 70253: a2 = a2 | a3\n 70256: a4 = a4 << 0x10\n 70259: a5 = a5 << 0x18\n 70262: a4 = a4 | a5\n 70265: a2 = a2 | a4\n 70268: a3 = u8 [a0 + 0xd]\n 70271: a4 = u8 [a0 + 0xc]\n 70274: a5 = u8 [a0 + 0xe]\n 70277: s1 = u8 [a0 + 0xf]\n 70280: a3 = a3 << 0x8\n 70283: a3 = a3 | a4\n 70286: a5 = a5 << 0x10\n 70289: s1 = s1 << 0x18\n 70292: a5 = a5 | s1\n 70295: a3 = a3 | a5\n 70298: a3 = a3 << 0x20\n 70301: a2 = a2 | a3\n 70304: a3 = u8 [a0 + 0x11]\n 70307: a4 = u8 [a0 + 0x10]\n 70310: a5 = u8 [a0 + 0x12]\n 70313: s1 = u8 [a0 + 0x13]\n 70316: a3 = a3 << 0x8\n 70319: a3 = a3 | a4\n 70322: a5 = a5 << 0x10\n 70325: s1 = s1 << 0x18\n 70328: a5 = a5 | s1\n 70331: a3 = a3 | a5\n 70334: a4 = u8 [a0 + 0x15]\n 70337: a5 = u8 [a0 + 0x14]\n 70340: s1 = u8 [a0 + 0x16]\n 70343: a1 = u8 [a0 + 0x17]\n 70346: a4 = a4 << 0x8\n 70349: a4 = a4 | a5\n 70352: s1 = s1 << 0x10\n 70355: a1 = a1 << 0x18\n 70358: a1 = a1 | s1\n 70361: a1 = a1 | a4\n 70364: a1 = a1 << 0x20\n 70367: a3 = a3 | a1\n 70370: a1 = u8 [a0 + 0x19]\n 70373: a4 = u8 [a0 + 0x18]\n 70376: a5 = u8 [a0 + 0x1a]\n 70379: s1 = u8 [a0 + 0x1b]\n 70382: a1 = a1 << 0x8\n 70385: a1 = a1 | a4\n 70388: a5 = a5 << 0x10\n 70391: s1 = s1 << 0x18\n 70394: a5 = a5 | s1\n 70397: a1 = a1 | a5\n 70400: a4 = u8 [a0 + 0x1d]\n 70403: a5 = u8 [a0 + 0x1c]\n 70406: s1 = u8 [a0 + 0x1e]\n 70409: a0 = u8 [a0 + 0x1f]\n 70412: a4 = a4 << 0x8\n 70415: a4 = a4 | a5\n 70418: s1 = s1 << 0x10\n 70421: a0 = a0 << 0x18\n 70424: a0 = a0 | s1\n 70427: a0 = a0 | a4\n 70430: a0 = a0 << 0x20\n 70433: a0 = a0 | a1\n 70436: u32 [sp + 160] = 0x20\n 70441: a0 = reverse a0\n 70443: u64 [sp + 0x30] = a0\n 70446: a0 = reverse a3\n 70448: u64 [sp + 0x28] = a0\n 70451: a0 = reverse a2\n 70453: u64 [sp + 0x20] = a0\n 70456: a0 = reverse t0\n 70458: u64 [sp + 0x18] = a0\n 70461: a0 = u64 [sp + 0x50]\n 70464: u64 [sp + 0xd0] = a0\n 70468: a0 = u64 [sp + 0x78]\n 70471: u64 [sp + 0xc8] = a0\n 70475: a0 = u64 [sp + 0x48]\n 70478: u64 [sp + 0xc0] = a0\n 70482: s1 = u64 [sp + 0x38]\n 70485: u64 [sp + 0xd8] = s1\n 70489: u64 [sp + 248] = 0\n 70493: u64 [sp + 240] = 0\n 70497: u64 [sp + 232] = 0\n 70501: u64 [sp + 224] = 0\n 70505: i32 a1 = sp + 0xc0\n 70509: i32 a3 = sp + 0xe0\n 70513: i32 a4 = sp + 0xa0\n 70517: a2 = 0xffffffffffffffff\n 70520: a0 = 0\n 70522: ecalli 8 // 'get_storage'\n 70524: u64 [sp + 0xd8] = s1\n 70528: a0 = u64 [sp + 0x50]\n 70531: u64 [sp + 0xd0] = a0\n 70535: a0 = u64 [sp + 0x78]\n 70538: u64 [sp + 0xc8] = a0\n 70542: a0 = u64 [sp + 0x48]\n 70545: u64 [sp + 0xc0] = a0\n 70549: a0 = u64 [sp + 0x18]\n 70552: u64 [sp + 0xf8] = a0\n 70556: a0 = u64 [sp + 0x20]\n 70559: u64 [sp + 0xf0] = a0\n 70563: a0 = u64 [sp + 0x28]\n 70566: u64 [sp + 0xe8] = a0\n 70570: a0 = u64 [sp + 0x30]\n 70573: u64 [sp + 0xe0] = a0\n 70577: i32 a1 = sp + 0xc0\n 70581: i32 a3 = sp + 0xe0\n 70585: a2 = 0xffffffffffffffff\n 70588: a4 = 0x20\n 70591: a0 = 0\n 70593: ecalli 16 // 'set_storage'\n 70595: fallthrough\n      : @960 (gas: 9)\n 70596: a0 = u64 [sp + 0x40]\n 70599: a0 = a0 + 0xffffffffffffffc0\n 70602: a1 = u64 [sp + 0x80]\n 70606: a0 = a1 <u a0\n 70609: a1 = u64 [sp + 0x70]\n 70612: a0 = 0 if a1 != 0\n 70614: a1 = u64 [sp + 0x58]\n 70617: a0 = 0 if a1 != 0\n 70619: jump @969 if a0 == 0\n      : @961 (gas: 20)\n 70623: a0 = u64 [sp + 0x98]\n 70627: a1 = a0 + 0x2\n 70630: u64 [sp + 0x78] = a1\n 70633: a0 = a1 <u a0\n 70636: a1 = u64 [sp + 0x90]\n 70640: a2 = a1 + a0\n 70643: u64 [sp + 0x98] = a2\n 70647: a1 = a2 <u a1\n 70650: a1 = a0 if a0 == 0\n 70653: a0 = u64 [sp + 0x88]\n 70657: a1 = a1 + a0\n 70660: u64 [sp + 0x90] = a1\n 70664: a0 = a1 <u a0\n 70667: a1 = u64 [sp + 0x60]\n 70670: a0 = a0 + a1\n 70673: u64 [sp + 0x88] = a0\n 70677: a0 = u64 [sp + 0x68]\n 70680: i32 a0 = a0 + 0x40\n 70683: a1 = 0x20\n 70686: ra = 826, jump @0\n      : @962 [@dyn 413] (gas: 135)\n 70693: a1 = u8 [a0 + 0x11]\n 70696: a2 = u8 [a0 + 0x10]\n 70699: a3 = u8 [a0 + 0x12]\n 70702: a4 = u8 [a0 + 0x13]\n 70705: a1 = a1 << 0x8\n 70708: a1 = a1 | a2\n 70711: a3 = a3 << 0x10\n 70714: a4 = a4 << 0x18\n 70717: a3 = a3 | a4\n 70720: t0 = a3 | a1\n 70723: a2 = u8 [a0 + 0x1]\n 70726: a3 = u8 [a0]\n 70728: a4 = u8 [a0 + 0x2]\n 70731: a5 = u8 [a0 + 0x3]\n 70734: a2 = a2 << 0x8\n 70737: a2 = a2 | a3\n 70740: a4 = a4 << 0x10\n 70743: a5 = a5 << 0x18\n 70746: a4 = a4 | a5\n 70749: t1 = a4 | a2\n 70752: a3 = u8 [a0 + 0x15]\n 70755: a4 = u8 [a0 + 0x14]\n 70758: a5 = u8 [a0 + 0x16]\n 70761: s1 = u8 [a0 + 0x17]\n 70764: a3 = a3 << 0x8\n 70767: a3 = a3 | a4\n 70770: a5 = a5 << 0x10\n 70773: s1 = s1 << 0x18\n 70776: a5 = a5 | s1\n 70779: t2 = a5 | a3\n 70782: a4 = u8 [a0 + 0x5]\n 70785: a5 = u8 [a0 + 0x4]\n 70788: s1 = u8 [a0 + 0x6]\n 70791: a1 = u8 [a0 + 0x7]\n 70794: a4 = a4 << 0x8\n 70797: a4 = a4 | a5\n 70800: s1 = s1 << 0x10\n 70803: a1 = a1 << 0x18\n 70806: a1 = a1 | s1\n 70809: ra = a1 | a4\n 70812: a1 = u8 [a0 + 0x19]\n 70815: a5 = u8 [a0 + 0x18]\n 70818: s1 = u8 [a0 + 0x1a]\n 70821: a2 = u8 [a0 + 0x1b]\n 70824: a1 = a1 << 0x8\n 70827: a1 = a1 | a5\n 70830: s1 = s1 << 0x10\n 70833: a2 = a2 << 0x18\n 70836: a2 = a2 | s1\n 70839: a5 = a2 | a1\n 70842: a1 = u8 [a0 + 0x9]\n 70845: a2 = u8 [a0 + 0x8]\n 70848: s1 = u8 [a0 + 0xa]\n 70851: a3 = u8 [a0 + 0xb]\n 70854: a1 = a1 << 0x8\n 70857: a1 = a1 | a2\n 70860: s1 = s1 << 0x10\n 70863: a3 = a3 << 0x18\n 70866: a3 = a3 | s1\n 70869: s1 = a3 | a1\n 70872: a1 = u8 [a0 + 0x1d]\n 70875: a2 = u8 [a0 + 0x1c]\n 70878: a3 = u8 [a0 + 0x1e]\n 70881: a4 = u8 [a0 + 0x1f]\n 70884: a1 = a1 << 0x8\n 70887: a1 = a1 | a2\n 70890: a3 = a3 << 0x10\n 70893: a4 = a4 << 0x18\n 70896: a3 = a3 | a4\n 70899: a1 = a1 | a3\n 70902: a2 = u8 [a0 + 0xd]\n 70905: a3 = u8 [a0 + 0xc]\n 70908: a4 = u8 [a0 + 0xe]\n 70911: a0 = u8 [a0 + 0xf]\n 70914: a2 = a2 << 0x8\n 70917: a2 = a2 | a3\n 70920: a4 = a4 << 0x10\n 70923: a0 = a0 << 0x18\n 70926: a0 = a0 | a4\n 70929: a0 = a0 | a2\n 70932: a0 = a0 | a1\n 70935: a5 = a5 | s1\n 70938: a0 = a0 << 0x20\n 70941: a0 = a0 | a5\n 70944: a1 = ra | t2\n 70947: a2 = t1 | t0\n 70950: a1 = a1 << 0x20\n 70953: a1 = a1 | a2\n 70956: a0 = a0 | a1\n 70959: a0 = a0 >u 0\n 70961: u64 [sp + 0x60] = a0\n 70964: a0 = u64 [sp + 0x88]\n 70968: u64 [sp + 0xd8] = a0\n 70972: a0 = u64 [sp + 0x90]\n 70976: u64 [sp + 0xd0] = a0\n 70980: a0 = u64 [sp + 0x98]\n 70984: u64 [sp + 0xc8] = a0\n 70988: s1 = u64 [sp + 0x78]\n 70991: u64 [sp + 0xc0] = s1\n 70995: u64 [sp + 248] = 0\n 70999: u64 [sp + 240] = 0\n 71003: u64 [sp + 232] = 0\n 71007: u64 [sp + 224] = 0\n 71011: u32 [sp + 160] = 0x20\n 71016: i32 a1 = sp + 0xc0\n 71020: i32 a3 = sp + 0xe0\n 71024: i32 a4 = sp + 0xa0\n 71028: a2 = 0xffffffffffffffff\n 71031: a0 = 0\n 71033: ecalli 8 // 'get_storage'\n 71035: a0 = u64 [sp + 0xe0]\n 71039: a1 = u64 [sp + 0xe8]\n 71043: a2 = u64 [sp + 0xf0]\n 71047: a3 = u64 [sp + 0xf8]\n 71051: a0 = a0 & 0xffffffffffffff00\n 71055: a4 = u64 [sp + 0x60]\n 71058: a0 = a0 | a4\n 71061: a4 = u64 [sp + 0x88]\n 71065: u64 [sp + 0xd8] = a4\n 71069: a4 = u64 [sp + 0x90]\n 71073: u64 [sp + 0xd0] = a4\n 71077: a4 = u64 [sp + 0x98]\n 71081: u64 [sp + 0xc8] = a4\n 71085: u64 [sp + 0xc0] = s1\n 71089: u64 [sp + 0xf8] = a3\n 71093: u64 [sp + 0xf0] = a2\n 71097: u64 [sp + 0xe8] = a1\n 71101: u64 [sp + 0xe0] = a0\n 71105: i32 a1 = sp + 0xc0\n 71109: i32 a3 = sp + 0xe0\n 71113: a2 = 0xffffffffffffffff\n 71116: a4 = 0x20\n 71119: a0 = 0\n 71121: ecalli 16 // 'set_storage'\n 71123: fallthrough\n      : @963 (gas: 10)\n 71124: a0 = 0x100000000\n 71134: u64 [sp + 0x60] = a0\n 71137: a0 = 0xffffffa0\n 71147: a1 = u64 [sp + 0x80]\n 71151: a0 = a1 <u a0\n 71154: a1 = u64 [sp + 0x70]\n 71157: a0 = 0 if a1 != 0\n 71159: a1 = u64 [sp + 0x58]\n 71162: a0 = 0 if a1 != 0\n 71164: jump @969 if a0 == 0\n      : @964 (gas: 4)\n 71168: a0 = u64 [sp + 0x68]\n 71171: i32 a0 = a0 + 0x60\n 71174: a1 = 0x20\n 71177: ra = 828, jump @0\n      : @965 [@dyn 414] (gas: 135)\n 71184: a1 = u8 [a0 + 0x1d]\n 71187: a2 = u8 [a0 + 0x1c]\n 71190: a3 = u8 [a0 + 0x1e]\n 71193: a4 = u8 [a0 + 0x1f]\n 71196: a1 = a1 << 0x8\n 71199: a1 = a1 | a2\n 71202: a3 = a3 << 0x10\n 71205: a4 = a4 << 0x18\n 71208: a3 = a3 | a4\n 71211: a1 = a1 | a3\n 71214: a2 = u8 [a0 + 0xd]\n 71217: a3 = u8 [a0 + 0xc]\n 71220: a4 = u8 [a0 + 0xe]\n 71223: a5 = u8 [a0 + 0xf]\n 71226: a2 = a2 << 0x8\n 71229: a2 = a2 | a3\n 71232: a4 = a4 << 0x10\n 71235: a5 = a5 << 0x18\n 71238: a4 = a4 | a5\n 71241: a2 = a2 | a4\n 71244: a1 = a1 | a2\n 71247: a1 = a1 << 0x20\n 71250: a2 = u8 [a0 + 0x9]\n 71253: a3 = u8 [a0 + 0x8]\n 71256: a4 = u8 [a0 + 0xa]\n 71259: a5 = u8 [a0 + 0xb]\n 71262: a2 = a2 << 0x8\n 71265: a2 = a2 | a3\n 71268: a4 = a4 << 0x10\n 71271: a5 = a5 << 0x18\n 71274: a4 = a4 | a5\n 71277: a2 = a2 | a4\n 71280: a3 = u8 [a0 + 0x19]\n 71283: a4 = u8 [a0 + 0x18]\n 71286: a5 = u8 [a0 + 0x1a]\n 71289: s1 = u8 [a0 + 0x1b]\n 71292: a3 = a3 << 0x8\n 71295: a3 = a3 | a4\n 71298: a5 = a5 << 0x10\n 71301: s1 = s1 << 0x18\n 71304: a5 = a5 | s1\n 71307: a3 = a3 | a5\n 71310: a2 = a2 | a3\n 71313: a1 = a1 | a2\n 71316: a2 = u8 [a0 + 0x15]\n 71319: a3 = u8 [a0 + 0x14]\n 71322: a4 = u8 [a0 + 0x16]\n 71325: a5 = u8 [a0 + 0x17]\n 71328: a2 = a2 << 0x8\n 71331: a2 = a2 | a3\n 71334: a4 = a4 << 0x10\n 71337: a5 = a5 << 0x18\n 71340: a4 = a4 | a5\n 71343: a2 = a2 | a4\n 71346: a3 = u8 [a0 + 0x5]\n 71349: a4 = u8 [a0 + 0x4]\n 71352: a5 = u8 [a0 + 0x6]\n 71355: s1 = u8 [a0 + 0x7]\n 71358: a3 = a3 << 0x8\n 71361: a3 = a3 | a4\n 71364: a5 = a5 << 0x10\n 71367: s1 = s1 << 0x18\n 71370: a5 = a5 | s1\n 71373: a3 = a3 | a5\n 71376: a2 = a2 | a3\n 71379: a3 = u8 [a0 + 0x1]\n 71382: a4 = u8 [a0]\n 71384: a5 = u8 [a0 + 0x2]\n 71387: s1 = u8 [a0 + 0x3]\n 71390: a3 = a3 << 0x8\n 71393: a3 = a3 | a4\n 71396: a5 = a5 << 0x10\n 71399: s1 = s1 << 0x18\n 71402: a4 = u8 [a0 + 0x11]\n 71405: a5 = a5 | s1\n 71408: a3 = a3 | a5\n 71411: a5 = u8 [a0 + 0x10]\n 71414: a4 = a4 << 0x8\n 71417: s1 = u8 [a0 + 0x12]\n 71420: a0 = u8 [a0 + 0x13]\n 71423: a4 = a4 | a5\n 71426: a2 = a2 << 0x20\n 71429: s1 = s1 << 0x10\n 71432: a0 = a0 << 0x18\n 71435: a0 = a0 | s1\n 71438: a0 = a0 | a4\n 71441: a0 = a0 | a3\n 71444: a0 = a0 | a2\n 71447: a0 = a0 | a1\n 71450: s1 = a0 >u 0\n 71452: a0 = u64 [sp + 0x88]\n 71456: u64 [sp + 0xd8] = a0\n 71460: a0 = u64 [sp + 0x90]\n 71464: u64 [sp + 0xd0] = a0\n 71468: a0 = u64 [sp + 0x98]\n 71472: u64 [sp + 0xc8] = a0\n 71476: a0 = u64 [sp + 0x78]\n 71479: u64 [sp + 0xc0] = a0\n 71483: u64 [sp + 248] = 0\n 71487: u64 [sp + 240] = 0\n 71491: u64 [sp + 232] = 0\n 71495: u64 [sp + 224] = 0\n 71499: u32 [sp + 160] = 0x20\n 71504: i32 a1 = sp + 0xc0\n 71508: i32 a3 = sp + 0xe0\n 71512: i32 a4 = sp + 0xa0\n 71516: a2 = 0xffffffffffffffff\n 71519: a0 = 0\n 71521: ecalli 8 // 'get_storage'\n 71523: a0 = u64 [sp + 0xe8]\n 71527: a1 = u64 [sp + 0xf0]\n 71531: a2 = u64 [sp + 0xf8]\n 71535: a3 = u64 [sp + 0xe0]\n 71539: s1 = s1 << 0x8\n 71542: a3 = a3 & 0xffffffffffff00ff\n 71547: a3 = a3 | s1\n 71550: a4 = u64 [sp + 0x88]\n 71554: u64 [sp + 0xd8] = a4\n 71558: a4 = u64 [sp + 0x90]\n 71562: u64 [sp + 0xd0] = a4\n 71566: a4 = u64 [sp + 0x98]\n 71570: u64 [sp + 0xc8] = a4\n 71574: a4 = u64 [sp + 0x78]\n 71577: u64 [sp + 0xc0] = a4\n 71581: u64 [sp + 0xf8] = a2\n 71585: u64 [sp + 0xf0] = a1\n 71589: u64 [sp + 0xe8] = a0\n 71593: u64 [sp + 0xe0] = a3\n 71597: i32 a1 = sp + 0xc0\n 71601: i32 a3 = sp + 0xe0\n 71605: a2 = 0xffffffffffffffff\n 71608: a4 = 0x20\n 71611: a0 = 0\n 71613: ecalli 16 // 'set_storage'\n 71615: fallthrough\n      : @966 (gas: 9)\n 71616: a0 = u64 [sp + 0x60]\n 71619: a0 = a0 + 0xffffffffffffff80\n 71622: a1 = u64 [sp + 0x80]\n 71626: a0 = a1 <u a0\n 71629: a1 = u64 [sp + 0x70]\n 71632: a0 = 0 if a1 != 0\n 71634: a1 = u64 [sp + 0x58]\n 71637: a0 = 0 if a1 != 0\n 71639: jump @969 if a0 == 0\n      : @967 (gas: 4)\n 71643: a0 = u64 [sp + 0x68]\n 71646: i32 a0 = a0 + 0x80\n 71650: a1 = 0x20\n 71653: ra = 830, jump @0\n      : @968 [@dyn 415] (gas: 140)\n 71660: a1 = u8 [a0 + 0x1d]\n 71663: a2 = u8 [a0 + 0x1c]\n 71666: a3 = u8 [a0 + 0x1e]\n 71669: a4 = u8 [a0 + 0x1f]\n 71672: a1 = a1 << 0x8\n 71675: a1 = a1 | a2\n 71678: a3 = a3 << 0x10\n 71681: a4 = a4 << 0x18\n 71684: a3 = a3 | a4\n 71687: a1 = a1 | a3\n 71690: a2 = u8 [a0 + 0xd]\n 71693: a3 = u8 [a0 + 0xc]\n 71696: a4 = u8 [a0 + 0xe]\n 71699: a5 = u8 [a0 + 0xf]\n 71702: a2 = a2 << 0x8\n 71705: a2 = a2 | a3\n 71708: a4 = a4 << 0x10\n 71711: a5 = a5 << 0x18\n 71714: a4 = a4 | a5\n 71717: a2 = a2 | a4\n 71720: a1 = a1 | a2\n 71723: a1 = a1 << 0x20\n 71726: a2 = u8 [a0 + 0x9]\n 71729: a3 = u8 [a0 + 0x8]\n 71732: a4 = u8 [a0 + 0xa]\n 71735: a5 = u8 [a0 + 0xb]\n 71738: a2 = a2 << 0x8\n 71741: a2 = a2 | a3\n 71744: a4 = a4 << 0x10\n 71747: a5 = a5 << 0x18\n 71750: a4 = a4 | a5\n 71753: a2 = a2 | a4\n 71756: a3 = u8 [a0 + 0x19]\n 71759: a4 = u8 [a0 + 0x18]\n 71762: a5 = u8 [a0 + 0x1a]\n 71765: s1 = u8 [a0 + 0x1b]\n 71768: a3 = a3 << 0x8\n 71771: a3 = a3 | a4\n 71774: a5 = a5 << 0x10\n 71777: s1 = s1 << 0x18\n 71780: a5 = a5 | s1\n 71783: a3 = a3 | a5\n 71786: a2 = a2 | a3\n 71789: a1 = a1 | a2\n 71792: a2 = u8 [a0 + 0x15]\n 71795: a3 = u8 [a0 + 0x14]\n 71798: a4 = u8 [a0 + 0x16]\n 71801: a5 = u8 [a0 + 0x17]\n 71804: a2 = a2 << 0x8\n 71807: a2 = a2 | a3\n 71810: a4 = a4 << 0x10\n 71813: a5 = a5 << 0x18\n 71816: a4 = a4 | a5\n 71819: a2 = a2 | a4\n 71822: a3 = u8 [a0 + 0x5]\n 71825: a4 = u8 [a0 + 0x4]\n 71828: a5 = u8 [a0 + 0x6]\n 71831: s1 = u8 [a0 + 0x7]\n 71834: a3 = a3 << 0x8\n 71837: a3 = a3 | a4\n 71840: a5 = a5 << 0x10\n 71843: s1 = s1 << 0x18\n 71846: a5 = a5 | s1\n 71849: a3 = a3 | a5\n 71852: a2 = a2 | a3\n 71855: a3 = u8 [a0 + 0x1]\n 71858: a4 = u8 [a0]\n 71860: a5 = u8 [a0 + 0x2]\n 71863: s1 = u8 [a0 + 0x3]\n 71866: a3 = a3 << 0x8\n 71869: a3 = a3 | a4\n 71872: a5 = a5 << 0x10\n 71875: s1 = s1 << 0x18\n 71878: a4 = u8 [a0 + 0x11]\n 71881: a5 = a5 | s1\n 71884: a3 = a3 | a5\n 71887: a5 = u8 [a0 + 0x10]\n 71890: a4 = a4 << 0x8\n 71893: s1 = u8 [a0 + 0x12]\n 71896: a0 = u8 [a0 + 0x13]\n 71899: a4 = a4 | a5\n 71902: a2 = a2 << 0x20\n 71905: s1 = s1 << 0x10\n 71908: a0 = a0 << 0x18\n 71911: a0 = a0 | s1\n 71914: a0 = a0 | a4\n 71917: a0 = a0 | a3\n 71920: a0 = a0 | a2\n 71923: a0 = a0 | a1\n 71926: s1 = a0 >u 0\n 71928: a0 = u64 [sp + 0x88]\n 71932: u64 [sp + 0xd8] = a0\n 71936: a0 = u64 [sp + 0x90]\n 71940: u64 [sp + 0xd0] = a0\n 71944: a0 = u64 [sp + 0x98]\n 71948: u64 [sp + 0xc8] = a0\n 71952: a0 = u64 [sp + 0x78]\n 71955: u64 [sp + 0xc0] = a0\n 71959: u64 [sp + 248] = 0\n 71963: u64 [sp + 240] = 0\n 71967: u64 [sp + 232] = 0\n 71971: u64 [sp + 224] = 0\n 71975: u32 [sp + 160] = 0x20\n 71980: i32 a1 = sp + 0xc0\n 71984: i32 a3 = sp + 0xe0\n 71988: i32 a4 = sp + 0xa0\n 71992: a2 = 0xffffffffffffffff\n 71995: a0 = 0\n 71997: ecalli 8 // 'get_storage'\n 71999: a0 = u64 [sp + 0xe8]\n 72003: a1 = u64 [sp + 0xf0]\n 72007: a2 = u64 [sp + 0xf8]\n 72011: a3 = u64 [sp + 0xe0]\n 72015: s1 = s1 << 0x10\n 72018: a3 = a3 & 0xffffffffff00ffff\n 72024: a3 = a3 | s1\n 72027: a4 = u64 [sp + 0x88]\n 72031: u64 [sp + 0xd8] = a4\n 72035: a4 = u64 [sp + 0x90]\n 72039: u64 [sp + 0xd0] = a4\n 72043: a4 = u64 [sp + 0x98]\n 72047: u64 [sp + 0xc8] = a4\n 72051: a4 = u64 [sp + 0x78]\n 72054: u64 [sp + 0xc0] = a4\n 72058: u64 [sp + 0xf8] = a2\n 72062: u64 [sp + 0xf0] = a1\n 72066: u64 [sp + 0xe8] = a0\n 72070: u64 [sp + 0xe0] = a3\n 72074: i32 a1 = sp + 0xc0\n 72078: i32 a3 = sp + 0xe0\n 72082: a2 = 0xffffffffffffffff\n 72085: a4 = 0x20\n 72088: a0 = 0\n 72090: ecalli 16 // 'set_storage'\n 72092: sp = s0 + 0xfffffffffffffee0\n 72096: ra = u64 [sp + 0x118]\n 72100: s0 = u64 [sp + 0x110]\n 72104: s1 = u64 [sp + 0x108]\n 72108: sp = sp + 0x120\n 72112: ret\n      : @969 (gas: 1)\n 72114: trap\n      : @970 (gas: 7)\n 72115: a1 = 0x20070\n 72120: t0 = u64 [s1 + 0x1b8]\n 72124: a4 = u64 [s1 + 0x1b0]\n 72128: t1 = u64 [s1 + 0x1a8]\n 72132: a0 = i32 [0x20070]\n 72137: a5 = u64 [s1 + 0x1a0]\n 72141: jump @973 if a0 == 0\n      : @971 (gas: 11)\n 72144: u64 [s1 + 0x78] = a0\n 72147: a0 = 0x30080\n 72152: i32 a0 = a0 + 0\n 72154: u64 [s1 + 0x70] = a1\n 72157: i32 a1 = a1 + 0\n 72159: u64 [s1 + 0x98] = t0\n 72163: u64 [s1 + 0x90] = t1\n 72167: u64 [s1 + 0x88] = a4\n 72171: u64 [s1 + 0x80] = a5\n 72175: ecalli 7 // 'get_immutable_data'\n 72177: fallthrough\n      : @972 (gas: 9)\n 72178: a5 = u64 [s1 + 0x80]\n 72182: a4 = u64 [s1 + 0x88]\n 72186: t1 = u64 [s1 + 0x90]\n 72190: t0 = u64 [s1 + 0x98]\n 72194: a1 = u64 [s1 + 0x70]\n 72197: a0 = i32 [a1]\n 72199: u32 [a1 + 0] = 0\n 72201: a1 = u64 [s1 + 0x78]\n 72204: jump @1001 if a0 <u a1\n      : @973 (gas: 12)\n 72208: a1 = u64 [0x300e0]\n 72213: a2 = u64 [0x300f0]\n 72218: a3 = u64 [0x300f8]\n 72223: a0 = u64 [0x300e8]\n 72228: a1 = a1 ^ a5\n 72231: a2 = a2 ^ a4\n 72234: a1 = a1 | a2\n 72237: a0 = t1 ^ a0\n 72240: a2 = t0 ^ a3\n 72243: a0 = a0 | a2\n 72246: a0 = a0 | a1\n 72249: jump @996 if a0 != 0\n      : @974 (gas: 16)\n 72253: u64 [s1 + 568] = 0\n 72257: u64 [s1 + 560] = 0\n 72261: u64 [s1 + 552] = 0\n 72265: u64 [s1 + 544] = 0x3\n 72270: u64 [s1 + 600] = 0\n 72274: u64 [s1 + 592] = 0\n 72278: u64 [s1 + 584] = 0\n 72282: u64 [s1 + 576] = 0\n 72286: u32 [s1 + 512] = 0x20\n 72291: i32 a1 = s1 + 0x220\n 72295: i32 a3 = s1 + 0x240\n 72299: i32 a4 = s1 + 0x200\n 72303: a2 = 0xffffffffffffffff\n 72306: a0 = 0\n 72308: ecalli 8 // 'get_storage'\n 72310: fallthrough\n      : @975 (gas: 24)\n 72311: a0 = u64 [s1 + 0x240]\n 72315: a2 = u64 [s1 + 0x258]\n 72319: a1 = u64 [s1 + 0x248]\n 72323: a3 = u64 [s1 + 0x250]\n 72327: u64 [s1 + 0x68] = a0\n 72330: a4 = a0 + 0x1\n 72333: a0 = a4 <u 0x1\n 72336: u64 [s1 + 0x60] = a1\n 72339: a1 = a1 + a0\n 72342: a0 = a4 | a1\n 72345: a0 = a0 <u 0x1\n 72348: a5 = a3 + a0\n 72351: u64 [s1 + 0x50] = a3\n 72354: a0 = a5 <u a3\n 72357: u64 [s1 + 0x58] = a2\n 72360: a0 = a0 + a2\n 72363: u64 [s1 + 0x90] = a1\n 72367: u64 [s1 + 0x80] = a0\n 72371: a0 = a0 | a1\n 72374: u64 [s1 + 0x98] = a4\n 72378: u64 [s1 + 0x88] = a5\n 72382: a1 = a4 | a5\n 72385: a0 = a0 | a1\n 72388: jump @1002 if a0 == 0\n      : @976 (gas: 67)\n 72392: u64 [s1 + 568] = 0\n 72396: u64 [s1 + 560] = 0\n 72400: u64 [s1 + 552] = 0\n 72404: u64 [s1 + 544] = 0x3\n 72409: u64 [s1 + 600] = 0\n 72413: u64 [s1 + 592] = 0\n 72417: u64 [s1 + 584] = 0\n 72421: u64 [s1 + 576] = 0\n 72425: u32 [s1 + 512] = 0x20\n 72430: i32 a1 = s1 + 0x220\n 72434: i32 a3 = s1 + 0x240\n 72438: i32 a4 = s1 + 0x200\n 72442: a2 = 0xffffffffffffffff\n 72445: a0 = 0\n 72447: ecalli 8 // 'get_storage'\n 72449: u64 [s1 + 568] = 0\n 72453: u64 [s1 + 560] = 0\n 72457: u64 [s1 + 552] = 0\n 72461: u64 [s1 + 544] = 0x3\n 72466: a0 = u64 [s1 + 0x80]\n 72470: u64 [s1 + 0x258] = a0\n 72474: a0 = u64 [s1 + 0x88]\n 72478: u64 [s1 + 0x250] = a0\n 72482: a0 = u64 [s1 + 0x90]\n 72486: u64 [s1 + 0x248] = a0\n 72490: a0 = u64 [s1 + 0x98]\n 72494: u64 [s1 + 0x240] = a0\n 72498: i32 a1 = s1 + 0x220\n 72502: i32 a3 = s1 + 0x240\n 72506: a2 = 0xffffffffffffffff\n 72509: a4 = 0x20\n 72512: a0 = 0\n 72514: ecalli 16 // 'set_storage'\n 72516: i32 a0 = s1 + 0x1c0\n 72520: ecalli 5 // 'caller'\n 72522: a0 = u32 [s1 + 0x1d0]\n 72526: u64 [s1 + 0x88] = a0\n 72530: a0 = u64 [s1 + 0x1c8]\n 72534: u64 [s1 + 0x48] = a0\n 72537: a0 = u64 [s1 + 0x1c0]\n 72541: u64 [s1 + 0x80] = a0\n 72545: a0 = sp + 0xffffffffffffffe0\n 72548: a0 = a0 & 0xffffffffffffffe0\n 72551: u64 [s1 + 0x98] = a0\n 72555: sp = a0\n 72557: u64 [a0 + 24] = 0\n 72560: u64 [a0 + 16] = 0\n 72563: u64 [a0 + 8] = 0\n 72566: u64 [a0 + 0] = 0\n 72568: i32 a0 = a0 + 0\n 72570: ecalli 17 // 'value_transferred'\n 72572: a1 = u64 [s1 + 0x98]\n 72576: a0 = u64 [a1 + 0x18]\n 72579: u64 [s1 + 0x28] = a0\n 72582: a0 = u64 [a1 + 0x10]\n 72585: u64 [s1 + 0x30] = a0\n 72588: a0 = u64 [a1 + 0x8]\n 72591: u64 [s1 + 0x38] = a0\n 72594: a0 = u64 [a1]\n 72596: u64 [s1 + 0x40] = a0\n 72599: u64 [s1 + 312] = 0\n 72603: u64 [s1 + 304] = 0\n 72607: u64 [s1 + 288] = 0xa0\n 72613: a0 = s1 + 0x140\n 72617: a1 = s1 + 0x120\n 72621: u64 [s1 + 296] = 0\n 72625: ra = 832, jump @113\n      : @977 [@dyn 416] (gas: 16)\n 72632: a2 = u64 [s1 + 0x158]\n 72636: a3 = u64 [s1 + 0x150]\n 72640: a0 = u64 [s1 + 0x148]\n 72644: a1 = u64 [s1 + 0x140]\n 72648: u64 [s1 + 0x90] = a0\n 72652: u64 [s1 + 0x70] = a2\n 72655: a0 = a0 | a2\n 72658: u64 [s1 + 0x98] = a1\n 72662: a1 = a1 | a3\n 72665: a1 = a1 | a0\n 72668: a1 = a1 >> 0x20\n 72671: u64 [s1 + 0x78] = a3\n 72674: a0 = a0 | a3\n 72677: a0 = a0 << 0x20\n 72680: a0 = a0 | a1\n 72683: jump @1001 if a0 != 0\n      : @978 (gas: 18)\n 72687: a0 = u64 [s1 + 0x80]\n 72691: a0 = reverse a0\n 72693: a0 = a0 << 0x20\n 72696: a1 = u64 [s1 + 0x48]\n 72699: a1 = reverse a1\n 72701: a2 = a1 >> 0x20\n 72704: a0 = a0 | a2\n 72707: u64 [s1 + 0x48] = a0\n 72710: a1 = a1 << 0x20\n 72713: a0 = u64 [s1 + 0x88]\n 72717: a0 = reverse a0\n 72719: a0 = a0 >> 0x20\n 72722: a0 = a0 | a1\n 72725: u64 [s1 + 0x20] = a0\n 72728: a0 = i32 [s1 + 0x98]\n 72732: a1 = 0x20\n 72735: u64 [s1 + 0x88] = a0\n 72739: ra = 834, jump @0\n      : @979 [@dyn 417] (gas: 67)\n 72746: a1 = u64 [s1 + 0x20]\n 72749: a1 = reverse a1\n 72751: a2 = u64 [s1 + 0x48]\n 72754: a2 = reverse a2\n 72756: a4 = u64 [s1 + 0x80]\n 72760: a3 = a4 >> 0x18\n 72763: u8 [a0 + 0xf] = a3\n 72766: a3 = a4 >> 0x10\n 72769: u8 [a0 + 0xe] = a3\n 72772: a3 = a4 >> 0x8\n 72775: u8 [a0 + 0xd] = a3\n 72778: u8 [a0 + 0xc] = a4\n 72781: u8 [a0 + 11] = 0\n 72784: u8 [a0 + 10] = 0\n 72787: u8 [a0 + 9] = 0\n 72790: u8 [a0 + 8] = 0\n 72793: u8 [a0 + 7] = 0\n 72796: u8 [a0 + 6] = 0\n 72799: u8 [a0 + 5] = 0\n 72802: u8 [a0 + 4] = 0\n 72805: u8 [a0 + 3] = 0\n 72808: u8 [a0 + 2] = 0\n 72811: u8 [a0 + 1] = 0\n 72814: u8 [a0 + 0] = 0\n 72816: u8 [a0 + 0x10] = a2\n 72819: u8 [a0 + 0x18] = a1\n 72822: a3 = a2 >> 0x38\n 72825: u8 [a0 + 0x17] = a3\n 72828: a3 = a2 >> 0x30\n 72831: u8 [a0 + 0x16] = a3\n 72834: a3 = a2 >> 0x28\n 72837: u8 [a0 + 0x15] = a3\n 72840: a3 = a2 >> 0x20\n 72843: u8 [a0 + 0x14] = a3\n 72846: a3 = a2 >> 0x18\n 72849: u8 [a0 + 0x13] = a3\n 72852: a3 = a2 >> 0x10\n 72855: u8 [a0 + 0x12] = a3\n 72858: a2 = a2 >> 0x8\n 72861: u8 [a0 + 0x11] = a2\n 72864: a2 = a1 >> 0x38\n 72867: u8 [a0 + 0x1f] = a2\n 72870: a2 = a1 >> 0x30\n 72873: u8 [a0 + 0x1e] = a2\n 72876: a2 = a1 >> 0x28\n 72879: u8 [a0 + 0x1d] = a2\n 72882: a2 = a1 >> 0x20\n 72885: u8 [a0 + 0x1c] = a2\n 72888: a2 = a1 >> 0x18\n 72891: u8 [a0 + 0x1b] = a2\n 72894: a2 = a1 >> 0x10\n 72897: u8 [a0 + 0x1a] = a2\n 72900: a1 = a1 >> 0x8\n 72903: a2 = u64 [s1 + 0x70]\n 72906: a4 = u64 [s1 + 0x78]\n 72909: a4 = a4 | a2\n 72912: a2 = 0x100000000\n 72922: u64 [s1 + 0x48] = a2\n 72925: a2 = 0xffffffe0\n 72935: a3 = u64 [s1 + 0x98]\n 72939: a2 = a3 <u a2\n 72942: a3 = u64 [s1 + 0x90]\n 72946: a2 = 0 if a3 != 0\n 72948: u64 [s1 + 0x80] = a4\n 72952: a2 = 0 if a4 != 0\n 72954: u8 [a0 + 0x19] = a1\n 72957: jump @1001 if a2 == 0\n      : @980 (gas: 4)\n 72961: a0 = u64 [s1 + 0x88]\n 72965: i32 a0 = a0 + 0x20\n 72968: a1 = 0x20\n 72971: ra = 836, jump @0\n      : @981 [@dyn 418] (gas: 77)\n 72978: a1 = u64 [s1 + 0x28]\n 72981: a1 = reverse a1\n 72983: a2 = u64 [s1 + 0x30]\n 72986: a2 = reverse a2\n 72988: a3 = u64 [s1 + 0x38]\n 72991: a3 = reverse a3\n 72993: a4 = u64 [s1 + 0x40]\n 72996: a4 = reverse a4\n 72998: a5 = a4 >> 0x38\n 73001: u8 [a0 + 0x1f] = a5\n 73004: a5 = a4 >> 0x30\n 73007: u8 [a0 + 0x1e] = a5\n 73010: a5 = a4 >> 0x28\n 73013: u8 [a0 + 0x1d] = a5\n 73016: a5 = a4 >> 0x20\n 73019: u8 [a0 + 0x1c] = a5\n 73022: a5 = a4 >> 0x18\n 73025: u8 [a0 + 0x1b] = a5\n 73028: a5 = a4 >> 0x10\n 73031: u8 [a0 + 0x1a] = a5\n 73034: a5 = a4 >> 0x8\n 73037: u8 [a0 + 0x19] = a5\n 73040: u8 [a0 + 0x18] = a4\n 73043: u8 [a0 + 0x10] = a3\n 73046: a4 = a3 >> 0x38\n 73049: u8 [a0 + 0x17] = a4\n 73052: a4 = a3 >> 0x30\n 73055: u8 [a0 + 0x16] = a4\n 73058: a4 = a3 >> 0x28\n 73061: u8 [a0 + 0x15] = a4\n 73064: a4 = a3 >> 0x20\n 73067: u8 [a0 + 0x14] = a4\n 73070: a4 = a3 >> 0x18\n 73073: u8 [a0 + 0x13] = a4\n 73076: a4 = a3 >> 0x10\n 73079: u8 [a0 + 0x12] = a4\n 73082: a3 = a3 >> 0x8\n 73085: u8 [a0 + 0x11] = a3\n 73088: u8 [a0 + 0x8] = a2\n 73091: a3 = a2 >> 0x38\n 73094: u8 [a0 + 0xf] = a3\n 73097: a3 = a2 >> 0x30\n 73100: u8 [a0 + 0xe] = a3\n 73103: a3 = a2 >> 0x28\n 73106: u8 [a0 + 0xd] = a3\n 73109: a3 = a2 >> 0x20\n 73112: u8 [a0 + 0xc] = a3\n 73115: a3 = a2 >> 0x18\n 73118: u8 [a0 + 0xb] = a3\n 73121: a3 = a2 >> 0x10\n 73124: u8 [a0 + 0xa] = a3\n 73127: a2 = a2 >> 0x8\n 73130: u8 [a0 + 0x9] = a2\n 73133: u8 [a0] = a1\n 73135: a2 = a1 >> 0x38\n 73138: u8 [a0 + 0x7] = a2\n 73141: a2 = a1 >> 0x30\n 73144: u8 [a0 + 0x6] = a2\n 73147: a2 = a1 >> 0x28\n 73150: u8 [a0 + 0x5] = a2\n 73153: a2 = a1 >> 0x20\n 73156: u8 [a0 + 0x4] = a2\n 73159: a2 = a1 >> 0x18\n 73162: u8 [a0 + 0x3] = a2\n 73165: a2 = a1 >> 0x10\n 73168: u8 [a0 + 0x2] = a2\n 73171: a1 = a1 >> 0x8\n 73174: a2 = u64 [s1 + 0x48]\n 73177: a2 = a2 + 0xffffffffffffffc0\n 73180: a3 = u64 [s1 + 0x98]\n 73184: a2 = a3 <u a2\n 73187: a3 = u64 [s1 + 0x90]\n 73191: a2 = 0 if a3 != 0\n 73193: a3 = u64 [s1 + 0x80]\n 73197: a2 = 0 if a3 != 0\n 73199: u8 [a0 + 0x1] = a1\n 73202: jump @1001 if a2 == 0\n      : @982 (gas: 4)\n 73206: a0 = u64 [s1 + 0x88]\n 73210: i32 a0 = a0 + 0x40\n 73213: a1 = 0x20\n 73216: ra = 838, jump @0\n      : @983 [@dyn 419] (gas: 42)\n 73223: u8 [a0 + 31] = 0\n 73226: u8 [a0 + 30] = 0\n 73229: u8 [a0 + 29] = 0\n 73232: u8 [a0 + 28] = 0\n 73235: u8 [a0 + 27] = 0\n 73238: u8 [a0 + 26] = 0\n 73241: u8 [a0 + 25] = 0\n 73244: u8 [a0 + 24] = 0\n 73247: u8 [a0 + 23] = 0\n 73250: u8 [a0 + 22] = 0\n 73253: u8 [a0 + 21] = 0\n 73256: u8 [a0 + 20] = 0\n 73259: u8 [a0 + 19] = 0\n 73262: u8 [a0 + 18] = 0\n 73265: u8 [a0 + 17] = 0\n 73268: u8 [a0 + 16] = 0\n 73271: u8 [a0 + 15] = 0\n 73274: u8 [a0 + 14] = 0\n 73277: u8 [a0 + 13] = 0\n 73280: u8 [a0 + 12] = 0\n 73283: u8 [a0 + 11] = 0\n 73286: u8 [a0 + 10] = 0\n 73289: u8 [a0 + 9] = 0\n 73292: u8 [a0 + 8] = 0\n 73295: u8 [a0 + 7] = 0\n 73298: u8 [a0 + 6] = 0\n 73301: u8 [a0 + 5] = 0\n 73304: u8 [a0 + 4] = 0\n 73307: u8 [a0 + 3] = 0\n 73310: u8 [a0 + 2] = 0\n 73313: u8 [a0 + 1] = 0\n 73316: a1 = 0x100000000\n 73326: u64 [s1 + 0x48] = a1\n 73329: a1 = 0xffffffa0\n 73339: a2 = u64 [s1 + 0x98]\n 73343: a1 = a2 <u a1\n 73346: a2 = u64 [s1 + 0x90]\n 73350: a1 = 0 if a2 != 0\n 73352: a2 = u64 [s1 + 0x80]\n 73356: a1 = 0 if a2 != 0\n 73358: u8 [a0 + 0] = 0\n 73360: jump @1001 if a1 == 0\n      : @984 (gas: 4)\n 73364: a0 = u64 [s1 + 0x88]\n 73368: i32 a0 = a0 + 0x60\n 73371: a1 = 0x20\n 73374: ra = 840, jump @0\n      : @985 [@dyn 420] (gas: 41)\n 73381: u8 [a0 + 31] = 0\n 73384: u8 [a0 + 30] = 0\n 73387: u8 [a0 + 29] = 0\n 73390: u8 [a0 + 28] = 0\n 73393: u8 [a0 + 27] = 0\n 73396: u8 [a0 + 26] = 0\n 73399: u8 [a0 + 25] = 0\n 73402: u8 [a0 + 24] = 0\n 73405: u8 [a0 + 23] = 0\n 73408: u8 [a0 + 22] = 0\n 73411: u8 [a0 + 21] = 0\n 73414: u8 [a0 + 20] = 0\n 73417: u8 [a0 + 19] = 0\n 73420: u8 [a0 + 18] = 0\n 73423: u8 [a0 + 17] = 0\n 73426: u8 [a0 + 16] = 0\n 73429: u8 [a0 + 15] = 0\n 73432: u8 [a0 + 14] = 0\n 73435: u8 [a0 + 13] = 0\n 73438: u8 [a0 + 12] = 0\n 73441: u8 [a0 + 11] = 0\n 73444: u8 [a0 + 10] = 0\n 73447: u8 [a0 + 9] = 0\n 73450: u8 [a0 + 8] = 0\n 73453: u8 [a0 + 7] = 0\n 73456: u8 [a0 + 6] = 0\n 73459: u8 [a0 + 5] = 0\n 73462: u8 [a0 + 4] = 0\n 73465: u8 [a0 + 3] = 0\n 73468: u8 [a0 + 2] = 0\n 73471: u8 [a0 + 1] = 0\n 73474: a1 = u64 [s1 + 0x48]\n 73477: a1 = a1 + 0xffffffffffffff80\n 73480: a2 = u64 [s1 + 0x98]\n 73484: a1 = a2 <u a1\n 73487: a2 = u64 [s1 + 0x90]\n 73491: a1 = 0 if a2 != 0\n 73493: a2 = u64 [s1 + 0x80]\n 73497: a1 = 0 if a2 != 0\n 73499: u8 [a0 + 0] = 0\n 73501: jump @1001 if a1 == 0\n      : @986 (gas: 4)\n 73505: a0 = u64 [s1 + 0x88]\n 73509: i32 a0 = a0 + 0x80\n 73513: a1 = 0x20\n 73516: ra = 842, jump @0\n      : @987 [@dyn 421] (gas: 35)\n 73523: u8 [a0 + 31] = 0\n 73526: u8 [a0 + 30] = 0\n 73529: u8 [a0 + 29] = 0\n 73532: u8 [a0 + 28] = 0\n 73535: u8 [a0 + 27] = 0\n 73538: u8 [a0 + 26] = 0\n 73541: u8 [a0 + 25] = 0\n 73544: u8 [a0 + 24] = 0\n 73547: u8 [a0 + 23] = 0\n 73550: u8 [a0 + 22] = 0\n 73553: u8 [a0 + 21] = 0\n 73556: u8 [a0 + 20] = 0\n 73559: u8 [a0 + 19] = 0\n 73562: u8 [a0 + 18] = 0\n 73565: u8 [a0 + 17] = 0\n 73568: u8 [a0 + 16] = 0\n 73571: u8 [a0 + 15] = 0\n 73574: u8 [a0 + 14] = 0\n 73577: u8 [a0 + 13] = 0\n 73580: u8 [a0 + 12] = 0\n 73583: u8 [a0 + 11] = 0\n 73586: u8 [a0 + 10] = 0\n 73589: u8 [a0 + 9] = 0\n 73592: u8 [a0 + 8] = 0\n 73595: u8 [a0 + 7] = 0\n 73598: u8 [a0 + 6] = 0\n 73601: u8 [a0 + 5] = 0\n 73604: u8 [a0 + 4] = 0\n 73607: u8 [a0 + 3] = 0\n 73610: u8 [a0 + 2] = 0\n 73613: u8 [a0 + 1] = 0\n 73616: u8 [a0 + 0] = 0\n 73618: a1 = 0x20\n 73621: a0 = 0\n 73623: ra = 844, jump @0\n      : @988 [@dyn 422] (gas: 75)\n 73630: a1 = u64 [s1 + 0x58]\n 73633: a2 = reverse a1\n 73635: a1 = u64 [s1 + 0x50]\n 73638: a3 = reverse a1\n 73640: a1 = u64 [s1 + 0x60]\n 73643: a4 = reverse a1\n 73645: a1 = u64 [s1 + 0x68]\n 73648: a5 = reverse a1\n 73650: a1 = a5 >> 0x38\n 73653: u8 [a0 + 0x1f] = a1\n 73656: a1 = a5 >> 0x30\n 73659: u8 [a0 + 0x1e] = a1\n 73662: a1 = a5 >> 0x28\n 73665: u8 [a0 + 0x1d] = a1\n 73668: a1 = a5 >> 0x20\n 73671: u8 [a0 + 0x1c] = a1\n 73674: a1 = a5 >> 0x18\n 73677: u8 [a0 + 0x1b] = a1\n 73680: a1 = a5 >> 0x10\n 73683: u8 [a0 + 0x1a] = a1\n 73686: a1 = a5 >> 0x8\n 73689: u8 [a0 + 0x19] = a1\n 73692: u64 [s1 + 0x40] = a5\n 73695: u8 [a0 + 0x18] = a5\n 73698: a1 = a4 >> 0x38\n 73701: u8 [a0 + 0x17] = a1\n 73704: a1 = a4 >> 0x30\n 73707: u8 [a0 + 0x16] = a1\n 73710: a1 = a4 >> 0x28\n 73713: u8 [a0 + 0x15] = a1\n 73716: a1 = a4 >> 0x20\n 73719: u8 [a0 + 0x14] = a1\n 73722: a1 = a4 >> 0x18\n 73725: u8 [a0 + 0x13] = a1\n 73728: a1 = a4 >> 0x10\n 73731: u8 [a0 + 0x12] = a1\n 73734: a1 = a4 >> 0x8\n 73737: u8 [a0 + 0x11] = a1\n 73740: u64 [s1 + 0x48] = a4\n 73743: u8 [a0 + 0x10] = a4\n 73746: a1 = a3 >> 0x38\n 73749: u8 [a0 + 0xf] = a1\n 73752: a1 = a3 >> 0x30\n 73755: u8 [a0 + 0xe] = a1\n 73758: a1 = a3 >> 0x28\n 73761: u8 [a0 + 0xd] = a1\n 73764: a1 = a3 >> 0x20\n 73767: u8 [a0 + 0xc] = a1\n 73770: a1 = a3 >> 0x18\n 73773: u8 [a0 + 0xb] = a1\n 73776: a1 = a3 >> 0x10\n 73779: u8 [a0 + 0xa] = a1\n 73782: a1 = a3 >> 0x8\n 73785: u8 [a0 + 0x9] = a1\n 73788: u64 [s1 + 0x80] = a3\n 73792: u8 [a0 + 0x8] = a3\n 73795: a1 = a2 >> 0x38\n 73798: u8 [a0 + 0x7] = a1\n 73801: a1 = a2 >> 0x30\n 73804: u8 [a0 + 0x6] = a1\n 73807: a1 = a2 >> 0x28\n 73810: u8 [a0 + 0x5] = a1\n 73813: a1 = a2 >> 0x20\n 73816: u8 [a0 + 0x4] = a1\n 73819: a1 = a2 >> 0x18\n 73822: u8 [a0 + 0x3] = a1\n 73825: a1 = a2 >> 0x10\n 73828: u8 [a0 + 0x2] = a1\n 73831: a1 = a2 >> 0x8\n 73834: u8 [a0 + 0x1] = a1\n 73837: u64 [s1 + 0x88] = a2\n 73841: u8 [a0] = a2\n 73843: a0 = 0x20\n 73846: a1 = 0x20\n 73849: ra = 846, jump @0\n      : @989 [@dyn 423] (gas: 35)\n 73856: u8 [a0 + 31] = 0x4\n 73860: u8 [a0 + 30] = 0\n 73863: u8 [a0 + 29] = 0\n 73866: u8 [a0 + 28] = 0\n 73869: u8 [a0 + 27] = 0\n 73872: u8 [a0 + 26] = 0\n 73875: u8 [a0 + 25] = 0\n 73878: u8 [a0 + 24] = 0\n 73881: u8 [a0 + 23] = 0\n 73884: u8 [a0 + 22] = 0\n 73887: u8 [a0 + 21] = 0\n 73890: u8 [a0 + 20] = 0\n 73893: u8 [a0 + 19] = 0\n 73896: u8 [a0 + 18] = 0\n 73899: u8 [a0 + 17] = 0\n 73902: u8 [a0 + 16] = 0\n 73905: u8 [a0 + 15] = 0\n 73908: u8 [a0 + 14] = 0\n 73911: u8 [a0 + 13] = 0\n 73914: u8 [a0 + 12] = 0\n 73917: u8 [a0 + 11] = 0\n 73920: u8 [a0 + 10] = 0\n 73923: u8 [a0 + 9] = 0\n 73926: u8 [a0 + 8] = 0\n 73929: u8 [a0 + 7] = 0\n 73932: u8 [a0 + 6] = 0\n 73935: u8 [a0 + 5] = 0\n 73938: u8 [a0 + 4] = 0\n 73941: u8 [a0 + 3] = 0\n 73944: u8 [a0 + 2] = 0\n 73947: u8 [a0 + 1] = 0\n 73950: u8 [a0 + 0] = 0\n 73952: a1 = 0x40\n 73955: a0 = 0\n 73957: ra = 848, jump @0\n      : @990 [@dyn 424] (gas: 27)\n 73964: i32 a0 = a0 + 0\n 73966: i32 a2 = s1 + 0x240\n 73970: a1 = 0x40\n 73973: ecalli 9 // 'hash_keccak_256'\n 73975: a0 = u64 [s1 + 0x258]\n 73979: a1 = u64 [s1 + 0x250]\n 73983: a2 = u64 [s1 + 0x248]\n 73987: a3 = u64 [s1 + 0x240]\n 73991: a4 = reverse a0\n 73993: a0 = reverse a1\n 73995: a1 = reverse a2\n 73997: a2 = reverse a3\n 73999: a3 = u64 [s1 + 0x70]\n 74002: u64 [s1 + 0xf8] = a3\n 74006: a3 = u64 [s1 + 0x78]\n 74009: u64 [s1 + 0xf0] = a3\n 74013: a3 = u64 [s1 + 0x90]\n 74017: u64 [s1 + 0xe8] = a3\n 74021: a3 = u64 [s1 + 0x98]\n 74025: u64 [s1 + 0xe0] = a3\n 74029: u64 [s1 + 0x118] = a2\n 74033: u64 [s1 + 0x110] = a1\n 74037: u64 [s1 + 0x108] = a0\n 74041: a0 = s1 + 0x100\n 74045: a1 = s1 + 0xe0\n 74049: u64 [s1 + 0x100] = a4\n 74053: ra = 850, jump @954\n      : @991 [@dyn 425] (gas: 30)\n 74059: i32 a0 = s1 + 0x1e0\n 74063: ecalli 5 // 'caller'\n 74065: a0 = u32 [s1 + 0x1f0]\n 74069: u64 [s1 + 0x78] = a0\n 74072: a0 = u64 [s1 + 0x1e8]\n 74076: u64 [s1 + 0x28] = a0\n 74079: a0 = u64 [s1 + 0x1e0]\n 74083: u64 [s1 + 0x98] = a0\n 74087: a0 = sp + 0xffffffffffffffe0\n 74090: a0 = a0 & 0xffffffffffffffe0\n 74093: u64 [s1 + 0x90] = a0\n 74097: sp = a0\n 74099: u64 [a0 + 24] = 0\n 74102: u64 [a0 + 16] = 0\n 74105: u64 [a0 + 8] = 0\n 74108: u64 [a0 + 0] = 0\n 74110: i32 a0 = a0 + 0\n 74112: ecalli 17 // 'value_transferred'\n 74114: a1 = u64 [s1 + 0x90]\n 74118: a0 = u64 [a1 + 0x18]\n 74121: u64 [s1 + 0x30] = a0\n 74124: a0 = u64 [a1 + 0x10]\n 74127: u64 [s1 + 0x38] = a0\n 74130: a0 = u64 [a1 + 0x8]\n 74133: u64 [s1 + 0x70] = a0\n 74136: a0 = u64 [a1]\n 74138: u64 [s1 + 0x90] = a0\n 74142: a0 = 0x40\n 74145: a1 = 0x20\n 74148: ra = 852, jump @0\n      : @992 [@dyn 426] (gas: 100)\n 74155: a1 = u8 [a0 + 0x11]\n 74158: a2 = u8 [a0 + 0x10]\n 74161: a3 = u8 [a0 + 0x12]\n 74164: a4 = u8 [a0 + 0x13]\n 74167: a1 = a1 << 0x8\n 74170: a1 = a1 | a2\n 74173: a3 = a3 << 0x10\n 74176: a4 = a4 << 0x18\n 74179: a3 = a3 | a4\n 74182: a1 = a1 | a3\n 74185: a2 = u8 [a0 + 0x15]\n 74188: a3 = u8 [a0 + 0x14]\n 74191: a4 = u8 [a0 + 0x16]\n 74194: a5 = u8 [a0 + 0x17]\n 74197: a2 = a2 << 0x8\n 74200: a2 = a2 | a3\n 74203: a4 = a4 << 0x10\n 74206: a5 = a5 << 0x18\n 74209: a4 = a4 | a5\n 74212: a2 = a2 | a4\n 74215: a2 = a2 << 0x20\n 74218: t0 = a2 | a1\n 74221: a2 = u8 [a0 + 0x1]\n 74224: a3 = u8 [a0]\n 74226: a4 = u8 [a0 + 0x2]\n 74229: a5 = u8 [a0 + 0x3]\n 74232: a2 = a2 << 0x8\n 74235: a2 = a2 | a3\n 74238: a4 = a4 << 0x10\n 74241: a5 = a5 << 0x18\n 74244: a4 = a4 | a5\n 74247: a2 = a2 | a4\n 74250: a3 = u8 [a0 + 0x5]\n 74253: a4 = u8 [a0 + 0x4]\n 74256: a5 = u8 [a0 + 0x6]\n 74259: a1 = u8 [a0 + 0x7]\n 74262: a3 = a3 << 0x8\n 74265: a3 = a3 | a4\n 74268: a5 = a5 << 0x10\n 74271: a1 = a1 << 0x18\n 74274: a1 = a1 | a5\n 74277: a1 = a1 | a3\n 74280: a1 = a1 << 0x20\n 74283: t1 = a1 | a2\n 74286: a1 = u8 [a0 + 0x19]\n 74289: a3 = u8 [a0 + 0x18]\n 74292: a4 = u8 [a0 + 0x1a]\n 74295: a5 = u8 [a0 + 0x1b]\n 74298: a1 = a1 << 0x8\n 74301: a1 = a1 | a3\n 74304: a4 = a4 << 0x10\n 74307: a5 = a5 << 0x18\n 74310: a4 = a4 | a5\n 74313: a1 = a1 | a4\n 74316: a3 = u8 [a0 + 0x1d]\n 74319: a4 = u8 [a0 + 0x1c]\n 74322: a5 = u8 [a0 + 0x1e]\n 74325: a2 = u8 [a0 + 0x1f]\n 74328: a3 = a3 << 0x8\n 74331: a3 = a3 | a4\n 74334: a5 = a5 << 0x10\n 74337: a2 = a2 << 0x18\n 74340: a2 = a2 | a5\n 74343: a2 = a2 | a3\n 74346: a2 = a2 << 0x20\n 74349: a3 = a2 | a1\n 74352: a1 = u8 [a0 + 0x9]\n 74355: a2 = u8 [a0 + 0x8]\n 74358: a4 = u8 [a0 + 0xa]\n 74361: a5 = u8 [a0 + 0xb]\n 74364: a1 = a1 << 0x8\n 74367: a1 = a1 | a2\n 74370: a4 = a4 << 0x10\n 74373: a5 = a5 << 0x18\n 74376: a4 = a4 | a5\n 74379: a1 = a1 | a4\n 74382: a2 = u8 [a0 + 0xd]\n 74385: a4 = u8 [a0 + 0xc]\n 74388: a5 = u8 [a0 + 0xe]\n 74391: a0 = u8 [a0 + 0xf]\n 74394: a2 = a2 << 0x8\n 74397: a2 = a2 | a4\n 74400: a5 = a5 << 0x10\n 74403: a0 = a0 << 0x18\n 74406: a0 = a0 | a5\n 74409: a0 = a0 | a2\n 74412: a0 = a0 << 0x20\n 74415: a0 = a0 | a1\n 74418: a1 = reverse a0\n 74420: a0 = reverse a3\n 74422: a2 = reverse t1\n 74424: a3 = reverse t0\n 74426: a2 = a2 | a3\n 74429: a3 = a0 | a1\n 74432: a3 = a3 | a2\n 74435: a3 = a3 >> 0x20\n 74438: a1 = a1 | a2\n 74441: a1 = a1 << 0x20\n 74444: a1 = a1 | a3\n 74447: jump @1001 if a1 != 0\n      : @993 (gas: 18)\n 74451: a1 = u64 [s1 + 0x28]\n 74454: a1 = reverse a1\n 74456: a2 = a1 << 0x20\n 74459: a3 = u64 [s1 + 0x78]\n 74462: a3 = reverse a3\n 74464: a3 = a3 >> 0x20\n 74467: a2 = a2 | a3\n 74470: u64 [s1 + 0x78] = a2\n 74473: a2 = u64 [s1 + 0x98]\n 74477: a2 = reverse a2\n 74479: a2 = a2 << 0x20\n 74482: a1 = a1 >> 0x20\n 74485: a1 = a1 | a2\n 74488: u64 [s1 + 0x28] = a1\n 74491: i32 a0 = a0 + 0\n 74493: u64 [s1 + 0x20] = a0\n 74496: a1 = 0x20\n 74499: ra = 854, jump @0\n      : @994 [@dyn 427] (gas: 71)\n 74506: a1 = u64 [s1 + 0x30]\n 74509: a1 = reverse a1\n 74511: a2 = u64 [s1 + 0x38]\n 74514: a2 = reverse a2\n 74516: a3 = u64 [s1 + 0x70]\n 74519: a3 = reverse a3\n 74521: a4 = u64 [s1 + 0x90]\n 74525: a4 = reverse a4\n 74527: a5 = a4 >> 0x38\n 74530: u8 [a0 + 0x1f] = a5\n 74533: a5 = a4 >> 0x30\n 74536: u8 [a0 + 0x1e] = a5\n 74539: a5 = a4 >> 0x28\n 74542: u8 [a0 + 0x1d] = a5\n 74545: a5 = a4 >> 0x20\n 74548: u8 [a0 + 0x1c] = a5\n 74551: a5 = a4 >> 0x18\n 74554: u8 [a0 + 0x1b] = a5\n 74557: a5 = a4 >> 0x10\n 74560: u8 [a0 + 0x1a] = a5\n 74563: a5 = a4 >> 0x8\n 74566: u8 [a0 + 0x19] = a5\n 74569: u8 [a0 + 0x18] = a4\n 74572: u8 [a0 + 0x10] = a3\n 74575: a4 = a3 >> 0x38\n 74578: u8 [a0 + 0x17] = a4\n 74581: a4 = a3 >> 0x30\n 74584: u8 [a0 + 0x16] = a4\n 74587: a4 = a3 >> 0x28\n 74590: u8 [a0 + 0x15] = a4\n 74593: a4 = a3 >> 0x20\n 74596: u8 [a0 + 0x14] = a4\n 74599: a4 = a3 >> 0x18\n 74602: u8 [a0 + 0x13] = a4\n 74605: a4 = a3 >> 0x10\n 74608: u8 [a0 + 0x12] = a4\n 74611: a3 = a3 >> 0x8\n 74614: u8 [a0 + 0x11] = a3\n 74617: u8 [a0 + 0x8] = a2\n 74620: a3 = a2 >> 0x38\n 74623: u8 [a0 + 0xf] = a3\n 74626: a3 = a2 >> 0x30\n 74629: u8 [a0 + 0xe] = a3\n 74632: a3 = a2 >> 0x28\n 74635: u8 [a0 + 0xd] = a3\n 74638: a3 = a2 >> 0x20\n 74641: u8 [a0 + 0xc] = a3\n 74644: a3 = a2 >> 0x18\n 74647: u8 [a0 + 0xb] = a3\n 74650: a3 = a2 >> 0x10\n 74653: u8 [a0 + 0xa] = a3\n 74656: a2 = a2 >> 0x8\n 74659: u8 [a0 + 0x9] = a2\n 74662: u8 [a0] = a1\n 74664: a2 = a1 >> 0x38\n 74667: u8 [a0 + 0x7] = a2\n 74670: a2 = a1 >> 0x30\n 74673: u8 [a0 + 0x6] = a2\n 74676: a2 = a1 >> 0x28\n 74679: u8 [a0 + 0x5] = a2\n 74682: a2 = a1 >> 0x20\n 74685: u8 [a0 + 0x4] = a2\n 74688: a2 = a1 >> 0x18\n 74691: u8 [a0 + 0x3] = a2\n 74694: a2 = a1 >> 0x10\n 74697: u8 [a0 + 0x2] = a2\n 74700: a1 = a1 >> 0x8\n 74703: u8 [a0 + 0x1] = a1\n 74706: a1 = 0x20\n 74709: a0 = u64 [s1 + 0x20]\n 74712: ra = 856, jump @0\n      : @995 [@dyn 428] (gas: 46)\n 74719: a1 = u64 [0x20000]\n 74724: a2 = u64 [0x20008]\n 74729: a3 = u64 [0x20010]\n 74734: a4 = u64 [0x20018]\n 74739: u64 [s1 + 0x258] = a1\n 74743: u64 [s1 + 0x250] = a2\n 74747: u64 [s1 + 0x248] = a3\n 74751: u64 [s1 + 0x240] = a4\n 74755: a1 = u64 [s1 + 0x40]\n 74758: u64 [s1 + 0x278] = a1\n 74762: a1 = u64 [s1 + 0x48]\n 74765: u64 [s1 + 0x270] = a1\n 74769: a1 = u64 [s1 + 0x80]\n 74773: u64 [s1 + 0x268] = a1\n 74777: a1 = u64 [s1 + 0x88]\n 74781: u64 [s1 + 0x260] = a1\n 74785: a1 = u64 [s1 + 0x28]\n 74788: a1 = reverse a1\n 74790: a2 = u64 [s1 + 0x78]\n 74793: a2 = reverse a2\n 74795: a3 = u64 [s1 + 0x98]\n 74799: a3 = a3 << 0x20\n 74802: u64 [s1 + 0x298] = a2\n 74806: u64 [s1 + 0x290] = a1\n 74810: u64 [s1 + 0x288] = a3\n 74814: u64 [s1 + 640] = 0\n 74818: i32 a2 = a0 + 0\n 74820: i32 a0 = s1 + 0x240\n 74824: a1 = 0x3\n 74827: a3 = 0x20\n 74830: ecalli 6 // 'deposit_event'\n 74832: a0 = u64 [s1 + 0x18]\n 74835: a1 = u64 [s1 + 0x58]\n 74838: u64 [a0 + 0x18] = a1\n 74841: a1 = u64 [s1 + 0x50]\n 74844: u64 [a0 + 0x10] = a1\n 74847: a1 = u64 [s1 + 0x60]\n 74850: u64 [a0 + 0x8] = a1\n 74853: a1 = u64 [s1 + 0x68]\n 74856: u64 [a0] = a1\n 74858: sp = s0 + 0xfffffffffffffd40\n 74862: ra = u64 [sp + 0x2b8]\n 74866: s0 = u64 [sp + 0x2b0]\n 74870: s1 = u64 [sp + 0x2a8]\n 74874: sp = sp + 0x2c0\n 74878: ret\n      : @996 (gas: 3)\n 74880: a0 = 0x40\n 74883: a1 = 0x20\n 74886: ra = 858, jump @0\n      : @997 [@dyn 429] (gas: 104)\n 74893: a1 = u8 [a0 + 0x11]\n 74896: a2 = u8 [a0 + 0x10]\n 74899: a3 = u8 [a0 + 0x12]\n 74902: a4 = u8 [a0 + 0x13]\n 74905: a1 = a1 << 0x8\n 74908: a1 = a1 | a2\n 74911: a3 = a3 << 0x10\n 74914: a4 = a4 << 0x18\n 74917: a3 = a3 | a4\n 74920: a1 = a1 | a3\n 74923: a2 = u8 [a0 + 0x15]\n 74926: a3 = u8 [a0 + 0x14]\n 74929: a4 = u8 [a0 + 0x16]\n 74932: a5 = u8 [a0 + 0x17]\n 74935: a2 = a2 << 0x8\n 74938: a2 = a2 | a3\n 74941: a4 = a4 << 0x10\n 74944: a5 = a5 << 0x18\n 74947: a4 = a4 | a5\n 74950: a2 = a2 | a4\n 74953: a2 = a2 << 0x20\n 74956: t0 = a2 | a1\n 74959: a2 = u8 [a0 + 0x1]\n 74962: a3 = u8 [a0]\n 74964: a4 = u8 [a0 + 0x2]\n 74967: a5 = u8 [a0 + 0x3]\n 74970: a2 = a2 << 0x8\n 74973: a2 = a2 | a3\n 74976: a4 = a4 << 0x10\n 74979: a5 = a5 << 0x18\n 74982: a4 = a4 | a5\n 74985: a2 = a2 | a4\n 74988: a3 = u8 [a0 + 0x5]\n 74991: a4 = u8 [a0 + 0x4]\n 74994: a5 = u8 [a0 + 0x6]\n 74997: a1 = u8 [a0 + 0x7]\n 75000: a3 = a3 << 0x8\n 75003: a3 = a3 | a4\n 75006: a5 = a5 << 0x10\n 75009: a1 = a1 << 0x18\n 75012: a1 = a1 | a5\n 75015: a1 = a1 | a3\n 75018: a1 = a1 << 0x20\n 75021: t1 = a1 | a2\n 75024: a1 = u8 [a0 + 0x19]\n 75027: a3 = u8 [a0 + 0x18]\n 75030: a4 = u8 [a0 + 0x1a]\n 75033: a5 = u8 [a0 + 0x1b]\n 75036: a1 = a1 << 0x8\n 75039: a1 = a1 | a3\n 75042: a4 = a4 << 0x10\n 75045: a5 = a5 << 0x18\n 75048: a4 = a4 | a5\n 75051: a1 = a1 | a4\n 75054: a3 = u8 [a0 + 0x1d]\n 75057: a4 = u8 [a0 + 0x1c]\n 75060: a5 = u8 [a0 + 0x1e]\n 75063: a2 = u8 [a0 + 0x1f]\n 75066: a3 = a3 << 0x8\n 75069: a3 = a3 | a4\n 75072: a5 = a5 << 0x10\n 75075: a2 = a2 << 0x18\n 75078: a2 = a2 | a5\n 75081: a2 = a2 | a3\n 75084: a2 = a2 << 0x20\n 75087: a3 = a2 | a1\n 75090: a1 = u8 [a0 + 0x9]\n 75093: a2 = u8 [a0 + 0x8]\n 75096: a4 = u8 [a0 + 0xa]\n 75099: a5 = u8 [a0 + 0xb]\n 75102: a1 = a1 << 0x8\n 75105: a1 = a1 | a2\n 75108: a4 = a4 << 0x10\n 75111: a5 = a5 << 0x18\n 75114: a4 = a4 | a5\n 75117: a1 = a1 | a4\n 75120: a2 = u8 [a0 + 0xd]\n 75123: a4 = u8 [a0 + 0xc]\n 75126: a5 = u8 [a0 + 0xe]\n 75129: a0 = u8 [a0 + 0xf]\n 75132: a2 = a2 << 0x8\n 75135: a2 = a2 | a4\n 75138: a5 = a5 << 0x10\n 75141: a0 = a0 << 0x18\n 75144: a0 = a0 | a5\n 75147: a0 = a0 | a2\n 75150: a0 = a0 << 0x20\n 75153: a0 = a0 | a1\n 75156: a4 = reverse a0\n 75158: a1 = reverse a3\n 75160: a2 = reverse t1\n 75162: a0 = reverse t0\n 75164: u64 [s1 + 0x98] = a0\n 75168: u64 [s1 + 0x88] = a2\n 75172: a0 = a0 | a2\n 75175: a2 = a1\n 75177: a1 = a1 | a4\n 75180: a1 = a1 | a0\n 75183: a1 = a1 >> 0x20\n 75186: u64 [s1 + 0x90] = a4\n 75190: a0 = a0 | a4\n 75193: a0 = a0 << 0x20\n 75196: a0 = a0 | a1\n 75199: jump @1001 if a0 != 0\n      : @998 (gas: 5)\n 75203: u64 [s1 + 0x80] = a2\n 75207: i32 a0 = a2 + 0\n 75209: a1 = 0x20\n 75212: u64 [s1 + 0x78] = a0\n 75215: ra = 860, jump @0\n      : @999 [@dyn 430] (gas: 51)\n 75222: u8 [a0 + 31] = 0\n 75225: u8 [a0 + 30] = 0\n 75228: u8 [a0 + 29] = 0\n 75231: u8 [a0 + 28] = 0\n 75234: u8 [a0 + 27] = 0\n 75237: u8 [a0 + 26] = 0\n 75240: u8 [a0 + 25] = 0\n 75243: u8 [a0 + 24] = 0\n 75246: u8 [a0 + 23] = 0\n 75249: u8 [a0 + 22] = 0\n 75252: u8 [a0 + 21] = 0\n 75255: u8 [a0 + 20] = 0\n 75258: u8 [a0 + 19] = 0\n 75261: u8 [a0 + 18] = 0\n 75264: u8 [a0 + 17] = 0\n 75267: u8 [a0 + 16] = 0\n 75270: u8 [a0 + 15] = 0\n 75273: u8 [a0 + 14] = 0\n 75276: u8 [a0 + 13] = 0\n 75279: u8 [a0 + 12] = 0\n 75282: u8 [a0 + 11] = 0\n 75285: u8 [a0 + 10] = 0\n 75288: u8 [a0 + 9] = 0\n 75291: u8 [a0 + 8] = 0\n 75294: u8 [a0 + 7] = 0\n 75297: u8 [a0 + 6] = 0\n 75300: u8 [a0 + 5] = 0\n 75303: u8 [a0 + 4] = 0\n 75306: u8 [a0 + 3] = 0xa0\n 75311: u8 [a0 + 2] = 0x79\n 75315: u8 [a0 + 1] = 0xc3\n 75320: u8 [a0 + 0] = 0x8\n 75323: a1 = u64 [s1 + 0x80]\n 75327: a0 = a1 + 0x4\n 75330: a1 = a0 <u a1\n 75333: a3 = u64 [s1 + 0x98]\n 75337: a2 = a3 + a1\n 75340: a3 = a2 <u a3\n 75343: a3 = a1 if a1 == 0\n 75346: a1 = u64 [s1 + 0x90]\n 75350: a3 = a3 + a1\n 75353: a1 = a3 <u a1\n 75356: a4 = u64 [s1 + 0x88]\n 75360: a4 = a4 + a1\n 75363: u64 [s1 + 0x168] = a2\n 75367: u64 [s1 + 0x160] = a0\n 75371: u64 [s1 + 0x170] = a3\n 75375: a0 = s1 + 0x180\n 75379: a1 = s1 + 0x160\n 75383: u64 [s1 + 0x178] = a4\n 75387: ra = 862, jump @946\n      : @1000 [@dyn 431] (gas: 31)\n 75393: a0 = u64 [s1 + 0x188]\n 75397: t0 = u64 [s1 + 0x198]\n 75401: t1 = u64 [s1 + 0x180]\n 75405: a3 = u64 [s1 + 0x190]\n 75409: a1 = u64 [s1 + 0x98]\n 75413: a4 = a0 ^ a1\n 75416: a5 = a0 <u a1\n 75419: ra = a1\n 75421: t2 = u64 [s1 + 0x80]\n 75425: a1 = t1 <u t2\n 75428: a5 = a1 if a4 == 0\n 75431: a2 = u64 [s1 + 0x90]\n 75435: a4 = a3 - a2\n 75438: a3 = a3 <u a2\n 75441: a2 = u64 [s1 + 0x88]\n 75445: a2 = t0 - a2\n 75448: a2 = a2 - a3\n 75451: a3 = a4 <u a5\n 75454: a2 = a2 - a3\n 75457: a4 = a4 - a5\n 75460: a0 = a0 - ra\n 75463: a1 = a0 - a1\n 75466: a0 = t1 - t2\n 75469: a1 = a1 | a2\n 75472: a2 = a0 | a4\n 75475: a2 = a2 | a1\n 75478: a1 = a1 | a4\n 75481: a2 = a2 >> 0x20\n 75484: a1 = a1 << 0x20\n 75487: a1 = a1 | a2\n 75490: jump @1006 if a1 == 0\n      : @1001 (gas: 1)\n 75493: trap\n      : @1002 (gas: 8)\n 75494: u64 [s1 + 208] = 0\n 75498: u64 [s1 + 200] = 0\n 75502: u64 [s1 + 192] = 0\n 75506: a0 = 0x4e487b7100000000\n 75516: a1 = s1 + 0xc0\n 75520: u64 [s1 + 0xd8] = a0\n 75524: a0 = 0\n 75526: ra = 864, jump @23\n      : @1003 [@dyn 432] (gas: 7)\n 75533: u64 [s1 + 184] = 0\n 75537: u64 [s1 + 176] = 0\n 75541: u64 [s1 + 160] = 0x11\n 75546: a0 = 0x4\n 75549: a1 = s1 + 0xa0\n 75553: u64 [s1 + 168] = 0\n 75557: ra = 866, jump @23\n      : @1004 [@dyn 433] (gas: 3)\n 75564: a1 = 0x24\n 75567: a0 = 0\n 75569: ra = 868, jump @0\n      : @1005 [@dyn 434] (gas: 5)\n 75576: i32 a1 = a0 + 0\n 75578: a0 = 0x1\n 75581: a2 = 0x24\n 75584: ecalli 14 // 'seal_return'\n 75586: fallthrough\n      : @1006 (gas: 4)\n 75587: i32 a1 = a0 + 0\n 75589: u64 [s1 + 0x98] = a1\n 75593: a0 = u64 [s1 + 0x78]\n 75596: ra = 870, jump @0\n      : @1007 [@dyn 435] (gas: 6)\n 75603: i32 a1 = a0 + 0\n 75605: a0 = 0x1\n 75608: a2 = u64 [s1 + 0x98]\n 75612: ra = 0x368\n 75616: ecalli 14 // 'seal_return'\n 75618: fallthrough\n      : @1008 [@dyn 436] (gas: 13)\n 75619: sp = sp + 0xffffffffffffffa0\n 75622: u64 [sp + 0x58] = ra\n 75625: u64 [sp + 0x50] = s0\n 75628: u64 [sp + 0x48] = s1\n 75631: s0 = sp + 0x60\n 75634: sp = sp & 0xfffffffffffffff0\n 75637: s1 = a0\n 75639: u64 [sp + 24] = 0\n 75642: u64 [sp + 16] = 0\n 75645: u64 [sp + 8] = 0\n 75648: a0 = sp + 0x20\n 75651: u64 [sp + 0] = 0\n 75653: ra = 874, jump @930\n      : @1009 [@dyn 437] (gas: 14)\n 75659: a0 = u64 [sp + 0x30]\n 75662: a1 = u64 [sp + 0x38]\n 75665: a2 = u64 [sp + 0x20]\n 75668: a3 = u64 [sp + 0x28]\n 75671: u64 [s1 + 0x10] = a0\n 75674: u64 [s1 + 0x18] = a1\n 75677: u64 [s1] = a2\n 75679: u64 [s1 + 0x8] = a3\n 75682: sp = s0 + 0xffffffffffffffa0\n 75685: ra = u64 [sp + 0x58]\n 75688: s0 = u64 [sp + 0x50]\n 75691: s1 = u64 [sp + 0x48]\n 75694: sp = sp + 0x60\n 75697: ret\n      : @1010 (gas: 55)\n 75699: sp = sp + 0xfffffffffffffe40\n 75703: u64 [sp + 0x1b8] = ra\n 75707: u64 [sp + 0x1b0] = s0\n 75711: u64 [sp + 0x1a8] = s1\n 75715: s0 = sp + 0x1c0\n 75719: sp = sp & 0xffffffffffffffe0\n 75722: a4 = u64 [a3 + 0x18]\n 75725: u64 [sp] = a4\n 75727: a4 = u64 [a3 + 0x10]\n 75730: u64 [sp + 0x8] = a4\n 75733: a4 = u64 [a3 + 0x8]\n 75736: u64 [sp + 0x10] = a4\n 75739: a3 = u64 [a3]\n 75741: u64 [sp + 0x18] = a3\n 75744: a3 = u64 [a2 + 0x18]\n 75747: u64 [sp + 0x20] = a3\n 75750: a3 = u64 [a2 + 0x10]\n 75753: u64 [sp + 0x28] = a3\n 75756: a3 = u64 [a2 + 0x8]\n 75759: u64 [sp + 0x30] = a3\n 75762: a2 = u64 [a2]\n 75764: u64 [sp + 0x38] = a2\n 75767: a2 = u64 [a1 + 0x18]\n 75770: u64 [sp + 0x40] = a2\n 75773: a2 = u64 [a1 + 0x10]\n 75776: u64 [sp + 0x48] = a2\n 75779: a2 = u64 [a1 + 0x8]\n 75782: u64 [sp + 0x50] = a2\n 75785: a1 = u64 [a1]\n 75787: u64 [sp + 0x58] = a1\n 75790: a1 = u64 [a0 + 0x18]\n 75793: u64 [sp + 0x60] = a1\n 75796: a1 = u64 [a0 + 0x10]\n 75799: u64 [sp + 0x68] = a1\n 75802: a1 = u64 [a0 + 0x8]\n 75805: u64 [sp + 0x70] = a1\n 75808: a0 = u64 [a0]\n 75810: u64 [sp + 0x78] = a0\n 75813: u64 [sp + 376] = 0\n 75817: u64 [sp + 368] = 0\n 75821: u64 [sp + 360] = 0\n 75825: s1 = 0x5\n 75828: u64 [sp + 0x160] = s1\n 75832: u64 [sp + 408] = 0\n 75836: u64 [sp + 400] = 0\n 75840: u64 [sp + 392] = 0\n 75844: u64 [sp + 384] = 0\n 75848: u32 [sp + 320] = 0x20\n 75853: i32 a1 = sp + 0x160\n 75857: i32 a3 = sp + 0x180\n 75861: i32 a4 = sp + 0x140\n 75865: a2 = 0xffffffffffffffff\n 75868: a0 = 0\n 75870: ecalli 8 // 'get_storage'\n 75872: fallthrough\n      : @1011 (gas: 9)\n 75873: a0 = u64 [sp + 0x198]\n 75877: a1 = u64 [sp + 0x188]\n 75881: a2 = u64 [sp + 0x180]\n 75885: a3 = u64 [sp + 0x190]\n 75889: a0 = a0 | a1\n 75892: a1 = a2 ^ 0x1\n 75895: a1 = a1 | a3\n 75898: a0 = a0 | a1\n 75901: jump @1014 if a0 != 0\n      : @1012 (gas: 66)\n 75905: u64 [sp + 376] = 0\n 75909: u64 [sp + 368] = 0\n 75913: u64 [sp + 360] = 0\n 75917: u64 [sp + 352] = 0x5\n 75922: u64 [sp + 408] = 0\n 75926: u64 [sp + 400] = 0\n 75930: u64 [sp + 392] = 0\n 75934: u64 [sp + 384] = 0\n 75938: u32 [sp + 320] = 0x20\n 75943: i32 a1 = sp + 0x160\n 75947: i32 a3 = sp + 0x180\n 75951: i32 a4 = sp + 0x140\n 75955: a2 = 0xffffffffffffffff\n 75958: a0 = 0\n 75960: ecalli 8 // 'get_storage'\n 75962: u64 [sp + 376] = 0\n 75966: u64 [sp + 368] = 0\n 75970: u64 [sp + 360] = 0\n 75974: u64 [sp + 352] = 0x5\n 75979: u64 [sp + 408] = 0\n 75983: u64 [sp + 400] = 0\n 75987: u64 [sp + 392] = 0\n 75991: u64 [sp + 384] = 0x2\n 75996: i32 a1 = sp + 0x160\n 76000: i32 a3 = sp + 0x180\n 76004: a2 = 0xffffffffffffffff\n 76007: a4 = 0x20\n 76010: a0 = 0\n 76012: ecalli 16 // 'set_storage'\n 76014: a0 = u64 [sp]\n 76016: u64 [sp + 0x98] = a0\n 76020: a0 = u64 [sp + 0x8]\n 76023: u64 [sp + 0x90] = a0\n 76027: a0 = u64 [sp + 0x10]\n 76030: u64 [sp + 0x88] = a0\n 76034: a0 = u64 [sp + 0x18]\n 76037: u64 [sp + 0x80] = a0\n 76041: a0 = u64 [sp + 0x20]\n 76044: u64 [sp + 0xb8] = a0\n 76048: a0 = u64 [sp + 0x28]\n 76051: u64 [sp + 0xb0] = a0\n 76055: a0 = u64 [sp + 0x30]\n 76058: u64 [sp + 0xa8] = a0\n 76062: a0 = u64 [sp + 0x38]\n 76065: u64 [sp + 0xa0] = a0\n 76069: a0 = u64 [sp + 0x40]\n 76072: u64 [sp + 0xd8] = a0\n 76076: a0 = u64 [sp + 0x48]\n 76079: u64 [sp + 0xd0] = a0\n 76083: a0 = u64 [sp + 0x50]\n 76086: u64 [sp + 0xc8] = a0\n 76090: a0 = u64 [sp + 0x58]\n 76093: u64 [sp + 0xc0] = a0\n 76097: a0 = u64 [sp + 0x60]\n 76100: u64 [sp + 0xf8] = a0\n 76104: a0 = u64 [sp + 0x68]\n 76107: u64 [sp + 0xf0] = a0\n 76111: a0 = u64 [sp + 0x70]\n 76114: u64 [sp + 0xe8] = a0\n 76118: a0 = sp + 0xe0\n 76122: a1 = sp + 0xc0\n 76126: a2 = sp + 0xa0\n 76130: a3 = sp + 0x80\n 76134: a4 = u64 [sp + 0x78]\n 76137: u64 [sp + 0xe0] = a4\n 76141: ra = 876, jump @1022\n      : @1013 [@dyn 438] (gas: 35)\n 76147: u64 [sp + 376] = 0\n 76151: u64 [sp + 368] = 0\n 76155: u64 [sp + 360] = 0\n 76159: u64 [sp + 0x160] = s1\n 76163: u64 [sp + 408] = 0\n 76167: u64 [sp + 400] = 0\n 76171: u64 [sp + 392] = 0\n 76175: u64 [sp + 384] = 0\n 76179: u32 [sp + 320] = 0x20\n 76184: i32 a1 = sp + 0x160\n 76188: i32 a3 = sp + 0x180\n 76192: i32 a4 = sp + 0x140\n 76196: a2 = 0xffffffffffffffff\n 76199: a0 = 0\n 76201: ecalli 8 // 'get_storage'\n 76203: u64 [sp + 376] = 0\n 76207: u64 [sp + 368] = 0\n 76211: u64 [sp + 360] = 0\n 76215: u64 [sp + 0x160] = s1\n 76219: u64 [sp + 408] = 0\n 76223: u64 [sp + 400] = 0\n 76227: u64 [sp + 392] = 0\n 76231: u64 [sp + 384] = 0x1\n 76236: i32 a1 = sp + 0x160\n 76240: i32 a3 = sp + 0x180\n 76244: a2 = 0xffffffffffffffff\n 76247: a4 = 0x20\n 76250: a0 = 0\n 76252: ecalli 16 // 'set_storage'\n 76254: sp = s0 + 0xfffffffffffffe40\n 76258: ra = u64 [sp + 0x1b8]\n 76262: s0 = u64 [sp + 0x1b0]\n 76266: s1 = u64 [sp + 0x1a8]\n 76270: sp = sp + 0x1c0\n 76274: ret\n      : @1014 (gas: 3)\n 76276: a0 = 0x40\n 76279: a1 = 0x20\n 76282: ra = 878, jump @0\n      : @1015 [@dyn 439] (gas: 103)\n 76289: a1 = u8 [a0 + 0x11]\n 76292: a2 = u8 [a0 + 0x10]\n 76295: a3 = u8 [a0 + 0x12]\n 76298: a4 = u8 [a0 + 0x13]\n 76301: a1 = a1 << 0x8\n 76304: a1 = a1 | a2\n 76307: a3 = a3 << 0x10\n 76310: a4 = a4 << 0x18\n 76313: a3 = a3 | a4\n 76316: a1 = a1 | a3\n 76319: a2 = u8 [a0 + 0x15]\n 76322: a3 = u8 [a0 + 0x14]\n 76325: a4 = u8 [a0 + 0x16]\n 76328: a5 = u8 [a0 + 0x17]\n 76331: a2 = a2 << 0x8\n 76334: a2 = a2 | a3\n 76337: a4 = a4 << 0x10\n 76340: a5 = a5 << 0x18\n 76343: a4 = a4 | a5\n 76346: a2 = a2 | a4\n 76349: a2 = a2 << 0x20\n 76352: t0 = a2 | a1\n 76355: a2 = u8 [a0 + 0x1]\n 76358: a3 = u8 [a0]\n 76360: a4 = u8 [a0 + 0x2]\n 76363: a5 = u8 [a0 + 0x3]\n 76366: a2 = a2 << 0x8\n 76369: a2 = a2 | a3\n 76372: a4 = a4 << 0x10\n 76375: a5 = a5 << 0x18\n 76378: a4 = a4 | a5\n 76381: a2 = a2 | a4\n 76384: a3 = u8 [a0 + 0x5]\n 76387: a4 = u8 [a0 + 0x4]\n 76390: a5 = u8 [a0 + 0x6]\n 76393: s1 = u8 [a0 + 0x7]\n 76396: a3 = a3 << 0x8\n 76399: a3 = a3 | a4\n 76402: a5 = a5 << 0x10\n 76405: s1 = s1 << 0x18\n 76408: a5 = a5 | s1\n 76411: a3 = a3 | a5\n 76414: a3 = a3 << 0x20\n 76417: a2 = a2 | a3\n 76420: a3 = u8 [a0 + 0x19]\n 76423: a4 = u8 [a0 + 0x18]\n 76426: a5 = u8 [a0 + 0x1a]\n 76429: s1 = u8 [a0 + 0x1b]\n 76432: a3 = a3 << 0x8\n 76435: a3 = a3 | a4\n 76438: a5 = a5 << 0x10\n 76441: s1 = s1 << 0x18\n 76444: a5 = a5 | s1\n 76447: a3 = a3 | a5\n 76450: a4 = u8 [a0 + 0x1d]\n 76453: a5 = u8 [a0 + 0x1c]\n 76456: s1 = u8 [a0 + 0x1e]\n 76459: a1 = u8 [a0 + 0x1f]\n 76462: a4 = a4 << 0x8\n 76465: a4 = a4 | a5\n 76468: s1 = s1 << 0x10\n 76471: a1 = a1 << 0x18\n 76474: a1 = a1 | s1\n 76477: a1 = a1 | a4\n 76480: a1 = a1 << 0x20\n 76483: a3 = a3 | a1\n 76486: a1 = u8 [a0 + 0x9]\n 76489: a4 = u8 [a0 + 0x8]\n 76492: a5 = u8 [a0 + 0xa]\n 76495: s1 = u8 [a0 + 0xb]\n 76498: a1 = a1 << 0x8\n 76501: a1 = a1 | a4\n 76504: a5 = a5 << 0x10\n 76507: s1 = s1 << 0x18\n 76510: a5 = a5 | s1\n 76513: a1 = a1 | a5\n 76516: a4 = u8 [a0 + 0xd]\n 76519: a5 = u8 [a0 + 0xc]\n 76522: s1 = u8 [a0 + 0xe]\n 76525: a0 = u8 [a0 + 0xf]\n 76528: a4 = a4 << 0x8\n 76531: a4 = a4 | a5\n 76534: s1 = s1 << 0x10\n 76537: a0 = a0 << 0x18\n 76540: a0 = a0 | s1\n 76543: a0 = a0 | a4\n 76546: a0 = a0 << 0x20\n 76549: a0 = a0 | a1\n 76552: s1 = reverse a0\n 76554: a1 = reverse a3\n 76556: a2 = reverse a2\n 76558: a0 = reverse t0\n 76560: u64 [sp + 0x78] = a0\n 76563: u64 [sp + 0x70] = a2\n 76566: a0 = a0 | a2\n 76569: a2 = a1\n 76571: a1 = a1 | s1\n 76574: a1 = a1 | a0\n 76577: a1 = a1 >> 0x20\n 76580: a0 = a0 | s1\n 76583: a0 = a0 << 0x20\n 76586: a0 = a0 | a1\n 76589: jump @1019 if a0 != 0\n      : @1016 (gas: 5)\n 76593: u64 [sp + 0x68] = a2\n 76596: i32 a0 = a2 + 0\n 76598: a1 = 0x20\n 76601: u64 [sp + 0x60] = a0\n 76604: ra = 880, jump @0\n      : @1017 [@dyn 440] (gas: 50)\n 76611: u8 [a0 + 31] = 0\n 76614: u8 [a0 + 30] = 0\n 76617: u8 [a0 + 29] = 0\n 76620: u8 [a0 + 28] = 0\n 76623: u8 [a0 + 27] = 0\n 76626: u8 [a0 + 26] = 0\n 76629: u8 [a0 + 25] = 0\n 76632: u8 [a0 + 24] = 0\n 76635: u8 [a0 + 23] = 0\n 76638: u8 [a0 + 22] = 0\n 76641: u8 [a0 + 21] = 0\n 76644: u8 [a0 + 20] = 0\n 76647: u8 [a0 + 19] = 0\n 76650: u8 [a0 + 18] = 0\n 76653: u8 [a0 + 17] = 0\n 76656: u8 [a0 + 16] = 0\n 76659: u8 [a0 + 15] = 0\n 76662: u8 [a0 + 14] = 0\n 76665: u8 [a0 + 13] = 0\n 76668: u8 [a0 + 12] = 0\n 76671: u8 [a0 + 11] = 0\n 76674: u8 [a0 + 10] = 0\n 76677: u8 [a0 + 9] = 0\n 76680: u8 [a0 + 8] = 0\n 76683: u8 [a0 + 7] = 0\n 76686: u8 [a0 + 6] = 0\n 76689: u8 [a0 + 5] = 0\n 76692: u8 [a0 + 4] = 0\n 76695: u8 [a0 + 3] = 0xa0\n 76700: u8 [a0 + 2] = 0x79\n 76704: u8 [a0 + 1] = 0xc3\n 76709: u8 [a0 + 0] = 0x8\n 76712: a1 = u64 [sp + 0x68]\n 76715: a0 = a1 + 0x4\n 76718: a1 = a0 <u a1\n 76721: a3 = u64 [sp + 0x78]\n 76724: a2 = a3 + a1\n 76727: a3 = a2 <u a3\n 76730: a3 = a1 if a1 == 0\n 76733: a3 = a3 + s1\n 76736: a1 = a3 <u s1\n 76739: a4 = u64 [sp + 0x70]\n 76742: a4 = a4 + a1\n 76745: u64 [sp + 0x108] = a2\n 76749: u64 [sp + 0x100] = a0\n 76753: u64 [sp + 0x110] = a3\n 76757: a0 = sp + 0x120\n 76761: a1 = sp + 0x100\n 76765: u64 [sp + 0x118] = a4\n 76769: ra = 882, jump @922\n      : @1018 [@dyn 441] (gas: 30)\n 76775: a0 = u64 [sp + 0x128]\n 76779: t0 = u64 [sp + 0x138]\n 76783: t1 = u64 [sp + 0x120]\n 76787: a3 = u64 [sp + 0x130]\n 76791: a1 = u64 [sp + 0x78]\n 76794: a4 = a0 ^ a1\n 76797: a5 = a0 <u a1\n 76800: t2 = a1\n 76802: a2 = u64 [sp + 0x68]\n 76805: a1 = t1 <u a2\n 76808: a5 = a1 if a4 == 0\n 76811: a4 = a3 - s1\n 76814: a3 = a3 <u s1\n 76817: s1 = u64 [sp + 0x70]\n 76820: s1 = t0 - s1\n 76823: s1 = s1 - a3\n 76826: a3 = a4 <u a5\n 76829: s1 = s1 - a3\n 76832: a4 = a4 - a5\n 76835: a0 = a0 - t2\n 76838: a1 = a0 - a1\n 76841: a0 = t1 - a2\n 76844: a1 = a1 | s1\n 76847: a2 = a0 | a4\n 76850: a2 = a2 | a1\n 76853: a1 = a1 | a4\n 76856: a2 = a2 >> 0x20\n 76859: a1 = a1 << 0x20\n 76862: a1 = a1 | a2\n 76865: jump @1020 if a1 == 0\n      : @1019 (gas: 1)\n 76868: trap\n      : @1020 (gas: 4)\n 76869: i32 s1 = a0 + 0\n 76871: a0 = u64 [sp + 0x60]\n 76874: a1 = s1\n 76876: ra = 884, jump @0\n      : @1021 [@dyn 442] (gas: 6)\n 76883: i32 a1 = a0 + 0\n 76885: a0 = 0x1\n 76888: a2 = s1\n 76890: ra = 0x376\n 76894: ecalli 14 // 'seal_return'\n 76896: fallthrough\n      : @1022 [@dyn 443] (gas: 41)\n 76897: sp = sp + 0xfffffffffffffe60\n 76901: u64 [sp + 0x198] = ra\n 76905: u64 [sp + 0x190] = s0\n 76909: u64 [sp + 0x188] = s1\n 76913: s0 = sp + 0x1a0\n 76917: sp = sp & 0xffffffffffffffe0\n 76920: a4 = u64 [a3 + 0x18]\n 76923: u64 [sp + 0x90] = a4\n 76927: a4 = u64 [a3 + 0x10]\n 76930: u64 [sp + 0x80] = a4\n 76934: a4 = u64 [a3 + 0x8]\n 76937: u64 [sp + 0x68] = a4\n 76940: a3 = u64 [a3]\n 76942: u64 [sp + 0x48] = a3\n 76945: a3 = u64 [a2 + 0x18]\n 76948: u64 [sp + 0x88] = a3\n 76952: a3 = u64 [a2 + 0x10]\n 76955: u64 [sp + 0x70] = a3\n 76958: a3 = u64 [a2 + 0x8]\n 76961: u64 [sp + 0x58] = a3\n 76964: a2 = u64 [a2]\n 76966: u64 [sp + 0x38] = a2\n 76969: a2 = u64 [a1 + 0x18]\n 76972: u64 [sp + 0x78] = a2\n 76975: a2 = u64 [a1 + 0x10]\n 76978: u64 [sp + 0x60] = a2\n 76981: a2 = u64 [a1 + 0x8]\n 76984: u64 [sp + 0x40] = a2\n 76987: a1 = u64 [a1]\n 76989: u64 [sp + 0x28] = a1\n 76992: a1 = u64 [a0 + 0x18]\n 76995: u64 [sp + 0x98] = a1\n 76999: a1 = u64 [a0 + 0x10]\n 77002: u64 [sp + 0x50] = a1\n 77005: a1 = u64 [a0 + 0x8]\n 77008: u64 [sp + 0x30] = a1\n 77011: a0 = u64 [a0]\n 77013: u64 [sp + 0x20] = a0\n 77016: i32 a0 = sp + 0x160\n 77020: ecalli 5 // 'caller'\n 77022: fallthrough\n      : @1023 (gas: 6)\n 77023: s1 = 0x20070\n 77028: a4 = i32 [sp + 0x170]\n 77032: a2 = u64 [sp + 0x160]\n 77036: a0 = i32 [0x20070]\n 77041: a1 = u64 [sp + 0x168]\n 77045: jump @1026 if a0 == 0\n      : @1024 (gas: 9)\n 77048: u64 [sp] = a0\n 77050: a0 = 0x30080\n 77055: i32 a0 = a0 + 0\n 77057: u64 [sp + 0x8] = a1\n 77060: i32 a1 = s1 + 0\n 77062: u64 [sp + 0x18] = a4\n 77065: u64 [sp + 0x10] = a2\n 77068: ecalli 7 // 'get_immutable_data'\n 77070: fallthrough\n      : @1025 (gas: 7)\n 77071: a1 = u64 [sp + 0x8]\n 77074: a2 = u64 [sp + 0x10]\n 77077: a4 = u64 [sp + 0x18]\n 77080: a0 = i32 [0x20070]\n 77085: u32 [0x20070] = 0\n 77090: a3 = u64 [sp]\n 77092: jump @1034 if a0 <u a3\n      : @1026 (gas: 19)\n 77096: a0 = reverse a1\n 77098: a1 = a0 >> 0x20\n 77101: a2 = reverse a2\n 77103: a3 = a2 << 0x20\n 77106: a1 = a1 | a3\n 77109: a0 = a0 << 0x20\n 77112: a4 = reverse a4\n 77114: a4 = a4 >> 0x20\n 77117: a0 = a0 | a4\n 77120: a4 = u64 [0x300c0]\n 77125: a5 = u32 [0x300d0]\n 77130: a2 = a2 >> 0x20\n 77133: a3 = u64 [0x300c8]\n 77138: a0 = a0 ^ a4\n 77141: a2 = a2 ^ a5\n 77144: a0 = a0 | a2\n 77147: a1 = a1 ^ a3\n 77150: a0 = a0 | a1\n 77153: jump @1029 if a0 != 0\n      : @1027 (gas: 78)\n 77157: a0 = u64 [sp + 0x48]\n 77160: u64 [sp + 0xa0] = a0\n 77164: a0 = u64 [sp + 0x38]\n 77167: u64 [sp + 0xc0] = a0\n 77171: a0 = u64 [sp + 0x28]\n 77174: u64 [sp + 0xe0] = a0\n 77178: a0 = u64 [sp + 0x20]\n 77181: u64 [sp + 0x100] = a0\n 77185: a0 = u64 [sp + 0x68]\n 77188: u64 [sp + 0xa8] = a0\n 77192: a0 = u64 [sp + 0x58]\n 77195: u64 [sp + 0xc8] = a0\n 77199: a0 = u64 [sp + 0x40]\n 77202: u64 [sp + 0xe8] = a0\n 77206: a0 = u64 [sp + 0x30]\n 77209: u64 [sp + 0x108] = a0\n 77213: a0 = u64 [sp + 0x80]\n 77217: u64 [sp + 0xb0] = a0\n 77221: a0 = u64 [sp + 0x70]\n 77224: u64 [sp + 0xd0] = a0\n 77228: a0 = u64 [sp + 0x60]\n 77231: u64 [sp + 0xf0] = a0\n 77235: a0 = u64 [sp + 0x50]\n 77238: u64 [sp + 0x110] = a0\n 77242: a0 = u64 [sp + 0x90]\n 77246: u64 [sp + 0xb8] = a0\n 77250: a0 = u64 [sp + 0x88]\n 77254: u64 [sp + 0xd8] = a0\n 77258: a0 = u64 [sp + 0x78]\n 77261: u64 [sp + 0xf8] = a0\n 77265: a0 = sp + 0x100\n 77269: a1 = sp + 0xe0\n 77273: a2 = sp + 0xc0\n 77277: a3 = sp + 0xa0\n 77281: a4 = u64 [sp + 0x98]\n 77285: u64 [sp + 0x118] = a4\n 77289: ra = 0x378\n 77293: sp = sp + 0xfffffffffffffba0\n 77297: u64 [sp + 0x458] = ra\n 77301: u64 [sp + 0x450] = s0\n 77305: u64 [sp + 0x448] = s1\n 77309: s0 = sp + 0x460\n 77313: sp = sp & 0xffffffffffffffe0\n 77316: a4 = u64 [a3 + 0x18]\n 77319: u64 [sp + 0x68] = a4\n 77322: a4 = u64 [a3 + 0x10]\n 77325: u64 [sp + 0x70] = a4\n 77328: a4 = u64 [a3 + 0x8]\n 77331: u64 [sp + 0x78] = a4\n 77334: a3 = u64 [a3]\n 77336: u64 [sp + 0x80] = a3\n 77340: a3 = u64 [a2 + 0x18]\n 77343: u64 [sp + 0x88] = a3\n 77347: a3 = u64 [a2 + 0x10]\n 77350: u64 [sp + 0x90] = a3\n 77354: a3 = u64 [a2 + 0x8]\n 77357: u64 [sp + 0x98] = a3\n 77361: a2 = u64 [a2]\n 77363: u64 [sp + 0xa0] = a2\n 77367: a2 = u64 [a1 + 0x18]\n 77370: u64 [sp + 0x58] = a2\n 77373: a2 = u64 [a1 + 0x10]\n 77376: u64 [sp + 0x50] = a2\n 77379: a2 = u64 [a1 + 0x8]\n 77382: u64 [sp + 0x48] = a2\n 77385: a1 = u64 [a1]\n 77387: u64 [sp + 0x40] = a1\n 77390: a1 = u64 [a0]\n 77392: u64 [sp + 0xd8] = a1\n 77396: a1 = u64 [a0 + 0x8]\n 77399: u64 [sp + 0xe0] = a1\n 77403: a1 = u64 [a0 + 0x10]\n 77406: u64 [sp + 0xe8] = a1\n 77410: s1 = u64 [a0 + 0x18]\n 77413: a1 = 0x20\n 77416: a0 = 0\n 77418: ra = 0x3a4\n 77422: jump @0\n      : @1028 [@dyn 444] (gas: 6)\n 77426: sp = s0 + 0xfffffffffffffe60\n 77430: ra = u64 [sp + 0x198]\n 77434: s0 = u64 [sp + 0x190]\n 77438: s1 = u64 [sp + 0x188]\n 77442: sp = sp + 0x1a0\n 77446: ret\n      : @1029 (gas: 3)\n 77448: a0 = 0x40\n 77451: a1 = 0x20\n 77454: ra = 890, jump @0\n      : @1030 [@dyn 445] (gas: 103)\n 77461: a1 = u8 [a0 + 0x11]\n 77464: a2 = u8 [a0 + 0x10]\n 77467: a3 = u8 [a0 + 0x12]\n 77470: a4 = u8 [a0 + 0x13]\n 77473: a1 = a1 << 0x8\n 77476: a1 = a1 | a2\n 77479: a3 = a3 << 0x10\n 77482: a4 = a4 << 0x18\n 77485: a3 = a3 | a4\n 77488: a1 = a1 | a3\n 77491: a2 = u8 [a0 + 0x15]\n 77494: a3 = u8 [a0 + 0x14]\n 77497: a4 = u8 [a0 + 0x16]\n 77500: a5 = u8 [a0 + 0x17]\n 77503: a2 = a2 << 0x8\n 77506: a2 = a2 | a3\n 77509: a4 = a4 << 0x10\n 77512: a5 = a5 << 0x18\n 77515: a4 = a4 | a5\n 77518: a2 = a2 | a4\n 77521: a2 = a2 << 0x20\n 77524: t0 = a2 | a1\n 77527: a2 = u8 [a0 + 0x1]\n 77530: a3 = u8 [a0]\n 77532: a4 = u8 [a0 + 0x2]\n 77535: a5 = u8 [a0 + 0x3]\n 77538: a2 = a2 << 0x8\n 77541: a2 = a2 | a3\n 77544: a4 = a4 << 0x10\n 77547: a5 = a5 << 0x18\n 77550: a4 = a4 | a5\n 77553: a2 = a2 | a4\n 77556: a3 = u8 [a0 + 0x5]\n 77559: a4 = u8 [a0 + 0x4]\n 77562: a5 = u8 [a0 + 0x6]\n 77565: s1 = u8 [a0 + 0x7]\n 77568: a3 = a3 << 0x8\n 77571: a3 = a3 | a4\n 77574: a5 = a5 << 0x10\n 77577: s1 = s1 << 0x18\n 77580: a5 = a5 | s1\n 77583: a3 = a3 | a5\n 77586: a3 = a3 << 0x20\n 77589: a2 = a2 | a3\n 77592: a3 = u8 [a0 + 0x19]\n 77595: a4 = u8 [a0 + 0x18]\n 77598: a5 = u8 [a0 + 0x1a]\n 77601: s1 = u8 [a0 + 0x1b]\n 77604: a3 = a3 << 0x8\n 77607: a3 = a3 | a4\n 77610: a5 = a5 << 0x10\n 77613: s1 = s1 << 0x18\n 77616: a5 = a5 | s1\n 77619: a3 = a3 | a5\n 77622: a4 = u8 [a0 + 0x1d]\n 77625: a5 = u8 [a0 + 0x1c]\n 77628: s1 = u8 [a0 + 0x1e]\n 77631: a1 = u8 [a0 + 0x1f]\n 77634: a4 = a4 << 0x8\n 77637: a4 = a4 | a5\n 77640: s1 = s1 << 0x10\n 77643: a1 = a1 << 0x18\n 77646: a1 = a1 | s1\n 77649: a1 = a1 | a4\n 77652: a1 = a1 << 0x20\n 77655: a3 = a3 | a1\n 77658: a1 = u8 [a0 + 0x9]\n 77661: a4 = u8 [a0 + 0x8]\n 77664: a5 = u8 [a0 + 0xa]\n 77667: s1 = u8 [a0 + 0xb]\n 77670: a1 = a1 << 0x8\n 77673: a1 = a1 | a4\n 77676: a5 = a5 << 0x10\n 77679: s1 = s1 << 0x18\n 77682: a5 = a5 | s1\n 77685: a1 = a1 | a5\n 77688: a4 = u8 [a0 + 0xd]\n 77691: a5 = u8 [a0 + 0xc]\n 77694: s1 = u8 [a0 + 0xe]\n 77697: a0 = u8 [a0 + 0xf]\n 77700: a4 = a4 << 0x8\n 77703: a4 = a4 | a5\n 77706: s1 = s1 << 0x10\n 77709: a0 = a0 << 0x18\n 77712: a0 = a0 | s1\n 77715: a0 = a0 | a4\n 77718: a0 = a0 << 0x20\n 77721: a0 = a0 | a1\n 77724: s1 = reverse a0\n 77726: a1 = reverse a3\n 77728: a2 = reverse a2\n 77730: a0 = reverse t0\n 77732: u64 [sp + 0x98] = a0\n 77736: u64 [sp + 0x90] = a2\n 77740: a0 = a0 | a2\n 77743: a2 = a1\n 77745: a1 = a1 | s1\n 77748: a1 = a1 | a0\n 77751: a1 = a1 >> 0x20\n 77754: a0 = a0 | s1\n 77757: a0 = a0 << 0x20\n 77760: a0 = a0 | a1\n 77763: jump @1034 if a0 != 0\n      : @1031 (gas: 5)\n 77767: u64 [sp + 0x88] = a2\n 77771: i32 a0 = a2 + 0\n 77773: a1 = 0x20\n 77776: u64 [sp + 0x80] = a0\n 77780: ra = 892, jump @0\n      : @1032 [@dyn 446] (gas: 50)\n 77787: u8 [a0 + 31] = 0\n 77790: u8 [a0 + 30] = 0\n 77793: u8 [a0 + 29] = 0\n 77796: u8 [a0 + 28] = 0\n 77799: u8 [a0 + 27] = 0\n 77802: u8 [a0 + 26] = 0\n 77805: u8 [a0 + 25] = 0\n 77808: u8 [a0 + 24] = 0\n 77811: u8 [a0 + 23] = 0\n 77814: u8 [a0 + 22] = 0\n 77817: u8 [a0 + 21] = 0\n 77820: u8 [a0 + 20] = 0\n 77823: u8 [a0 + 19] = 0\n 77826: u8 [a0 + 18] = 0\n 77829: u8 [a0 + 17] = 0\n 77832: u8 [a0 + 16] = 0\n 77835: u8 [a0 + 15] = 0\n 77838: u8 [a0 + 14] = 0\n 77841: u8 [a0 + 13] = 0\n 77844: u8 [a0 + 12] = 0\n 77847: u8 [a0 + 11] = 0\n 77850: u8 [a0 + 10] = 0\n 77853: u8 [a0 + 9] = 0\n 77856: u8 [a0 + 8] = 0\n 77859: u8 [a0 + 7] = 0\n 77862: u8 [a0 + 6] = 0\n 77865: u8 [a0 + 5] = 0\n 77868: u8 [a0 + 4] = 0\n 77871: u8 [a0 + 3] = 0xa0\n 77876: u8 [a0 + 2] = 0x79\n 77880: u8 [a0 + 1] = 0xc3\n 77885: u8 [a0 + 0] = 0x8\n 77888: a1 = u64 [sp + 0x88]\n 77892: a0 = a1 + 0x4\n 77895: a1 = a0 <u a1\n 77898: a3 = u64 [sp + 0x98]\n 77902: a2 = a3 + a1\n 77905: a3 = a2 <u a3\n 77908: a3 = a1 if a1 == 0\n 77911: a3 = a3 + s1\n 77914: a1 = a3 <u s1\n 77917: a4 = u64 [sp + 0x90]\n 77921: a4 = a4 + a1\n 77924: u64 [sp + 0x128] = a2\n 77928: u64 [sp + 0x120] = a0\n 77932: u64 [sp + 0x130] = a3\n 77936: a0 = sp + 0x140\n 77940: a1 = sp + 0x120\n 77944: u64 [sp + 0x138] = a4\n 77948: ra = 894, jump @743\n      : @1033 [@dyn 447] (gas: 30)\n 77954: a0 = u64 [sp + 0x148]\n 77958: t0 = u64 [sp + 0x158]\n 77962: t1 = u64 [sp + 0x140]\n 77966: a3 = u64 [sp + 0x150]\n 77970: a1 = u64 [sp + 0x98]\n 77974: a4 = a0 ^ a1\n 77977: a5 = a0 <u a1\n 77980: t2 = a1\n 77982: a2 = u64 [sp + 0x88]\n 77986: a1 = t1 <u a2\n 77989: a5 = a1 if a4 == 0\n 77992: a4 = a3 - s1\n 77995: a3 = a3 <u s1\n 77998: s1 = u64 [sp + 0x90]\n 78002: s1 = t0 - s1\n 78005: s1 = s1 - a3\n 78008: a3 = a4 <u a5\n 78011: s1 = s1 - a3\n 78014: a4 = a4 - a5\n 78017: a0 = a0 - t2\n 78020: a1 = a0 - a1\n 78023: a0 = t1 - a2\n 78026: a1 = a1 | s1\n 78029: a2 = a0 | a4\n 78032: a2 = a2 | a1\n 78035: a1 = a1 | a4\n 78038: a2 = a2 >> 0x20\n 78041: a1 = a1 << 0x20\n 78044: a1 = a1 | a2\n 78047: jump @1035 if a1 == 0\n      : @1034 (gas: 1)\n 78050: trap\n      : @1035 (gas: 4)\n 78051: i32 s1 = a0 + 0\n 78053: a0 = u64 [sp + 0x80]\n 78057: a1 = s1\n 78059: ra = 896, jump @0\n      : @1036 [@dyn 448] (gas: 6)\n 78066: i32 a1 = a0 + 0\n 78068: a0 = 0x1\n 78071: a2 = s1\n 78073: ra = 0x382\n 78077: ecalli 14 // 'seal_return'\n 78079: fallthrough\n      : @1037 [@dyn 449] (gas: 9)\n 78080: a2 = u64 [a1 + 0x18]\n 78083: a3 = u64 [a1 + 0x10]\n 78086: a4 = u64 [a1 + 0x8]\n 78089: a1 = u64 [a1]\n 78091: u64 [a0 + 0x18] = a2\n 78094: u64 [a0 + 0x10] = a3\n 78097: u64 [a0 + 0x8] = a4\n 78100: u64 [a0] = a1\n 78102: ret\n      : @1038 (gas: 17)\n 78104: sp = sp + 0xffffffffffffffa0\n 78107: u64 [sp + 0x58] = ra\n 78110: u64 [sp + 0x50] = s0\n 78113: u64 [sp + 0x48] = s1\n 78116: a3 = u64 [a1 + 0x18]\n 78119: a4 = u64 [a1 + 0x10]\n 78122: a5 = u64 [a1 + 0x8]\n 78125: s1 = u64 [a1]\n 78127: a1 = a5 | a3\n 78130: a2 = s1 | a4\n 78133: a2 = a2 | a1\n 78136: a2 = a2 >> 0x20\n 78139: a1 = a1 | a4\n 78142: a1 = a1 << 0x20\n 78145: a1 = a1 | a2\n 78148: u64 [sp + 0x28] = a0\n 78151: jump @1045 if a1 != 0\n      : @1039 (gas: 19)\n 78155: a0 = s1 + 0x20\n 78158: u64 [sp + 0x30] = a0\n 78161: a0 = a0 <u s1\n 78164: a1 = a5 + a0\n 78167: u64 [sp + 0x40] = a1\n 78170: u64 [sp + 0x8] = a5\n 78173: s0 = a1 <u a5\n 78176: s0 = a0 if a0 == 0\n 78179: s0 = s0 + a4\n 78182: u64 [sp + 0x10] = a4\n 78185: a0 = s0 <u a4\n 78188: u64 [sp + 0x18] = a3\n 78191: a0 = a0 + a3\n 78194: u64 [sp + 0x38] = a0\n 78197: u64 [sp] = s1\n 78199: i32 a0 = s1 + 0\n 78201: a1 = 0x20\n 78204: s1 = 0x20\n 78207: ra = 900, jump @0\n      : @1040 [@dyn 450] (gas: 45)\n 78214: u8 [a0 + 0x1f] = s1\n 78217: a1 = u64 [sp + 0x30]\n 78220: s1 = a1\n 78222: a1 = a1 | s0\n 78225: a2 = u64 [sp + 0x40]\n 78228: a4 = u64 [sp + 0x38]\n 78231: a2 = a2 | a4\n 78234: a1 = a1 | a2\n 78237: a1 = a1 >> 0x20\n 78240: u64 [sp + 0x20] = s0\n 78243: a2 = a2 | s0\n 78246: a2 = a2 << 0x20\n 78249: a1 = a1 | a2\n 78252: u8 [a0 + 30] = 0\n 78255: u8 [a0 + 29] = 0\n 78258: u8 [a0 + 28] = 0\n 78261: u8 [a0 + 27] = 0\n 78264: u8 [a0 + 26] = 0\n 78267: u8 [a0 + 25] = 0\n 78270: u8 [a0 + 24] = 0\n 78273: u8 [a0 + 23] = 0\n 78276: u8 [a0 + 22] = 0\n 78279: u8 [a0 + 21] = 0\n 78282: u8 [a0 + 20] = 0\n 78285: u8 [a0 + 19] = 0\n 78288: u8 [a0 + 18] = 0\n 78291: u8 [a0 + 17] = 0\n 78294: u8 [a0 + 16] = 0\n 78297: u8 [a0 + 15] = 0\n 78300: u8 [a0 + 14] = 0\n 78303: u8 [a0 + 13] = 0\n 78306: u8 [a0 + 12] = 0\n 78309: u8 [a0 + 11] = 0\n 78312: u8 [a0 + 10] = 0\n 78315: u8 [a0 + 9] = 0\n 78318: u8 [a0 + 8] = 0\n 78321: u8 [a0 + 7] = 0\n 78324: u8 [a0 + 6] = 0\n 78327: u8 [a0 + 5] = 0\n 78330: u8 [a0 + 4] = 0\n 78333: u8 [a0 + 3] = 0\n 78336: u8 [a0 + 2] = 0\n 78339: u8 [a0 + 1] = 0\n 78342: u8 [a0 + 0] = 0\n 78344: jump @1045 if a1 != 0\n      : @1041 (gas: 4)\n 78348: i32 s0 = s1 + 0\n 78350: a1 = 0x20\n 78353: a0 = s0\n 78355: ra = 902, jump @0\n      : @1042 [@dyn 451] (gas: 41)\n 78362: u8 [a0 + 31] = 0x1f\n 78366: u8 [a0 + 30] = 0\n 78369: u8 [a0 + 29] = 0\n 78372: u8 [a0 + 28] = 0\n 78375: u8 [a0 + 27] = 0\n 78378: u8 [a0 + 26] = 0\n 78381: u8 [a0 + 25] = 0\n 78384: u8 [a0 + 24] = 0\n 78387: u8 [a0 + 23] = 0\n 78390: u8 [a0 + 22] = 0\n 78393: u8 [a0 + 21] = 0\n 78396: u8 [a0 + 20] = 0\n 78399: u8 [a0 + 19] = 0\n 78402: u8 [a0 + 18] = 0\n 78405: u8 [a0 + 17] = 0\n 78408: u8 [a0 + 16] = 0\n 78411: u8 [a0 + 15] = 0\n 78414: u8 [a0 + 14] = 0\n 78417: u8 [a0 + 13] = 0\n 78420: u8 [a0 + 12] = 0\n 78423: u8 [a0 + 11] = 0\n 78426: u8 [a0 + 10] = 0\n 78429: u8 [a0 + 9] = 0\n 78432: u8 [a0 + 8] = 0\n 78435: u8 [a0 + 7] = 0\n 78438: u8 [a0 + 6] = 0\n 78441: u8 [a0 + 5] = 0\n 78444: u8 [a0 + 4] = 0\n 78447: u8 [a0 + 3] = 0\n 78450: u8 [a0 + 2] = 0\n 78453: u8 [a0 + 1] = 0\n 78456: a1 = u64 [sp + 0x20]\n 78459: a2 = u64 [sp + 0x38]\n 78462: a1 = a1 | a2\n 78465: a2 = 0xffffffe0\n 78475: a2 = s1 <u a2\n 78478: a3 = u64 [sp + 0x40]\n 78481: a2 = 0 if a3 != 0\n 78483: a2 = 0 if a1 != 0\n 78485: u8 [a0 + 0] = 0\n 78487: jump @1045 if a2 == 0\n      : @1043 (gas: 3)\n 78491: i32 a0 = s0 + 0x20\n 78494: a1 = 0x20\n 78497: ra = 904, jump @0\n      : @1044 [@dyn 452] (gas: 54)\n 78504: u8 [a0 + 27] = 0x69\n 78508: u8 [a0 + 30] = 0x64\n 78512: u8 [a0 + 21] = 0x64\n 78516: u8 [a0 + 25] = 0x6c\n 78520: u8 [a0 + 17] = 0x6c\n 78524: u8 [a0 + 14] = 0x74\n 78528: u8 [a0 + 13] = 0x6e\n 78532: u8 [a0 + 29] = 0x65\n 78536: u8 [a0 + 19] = 0x65\n 78540: u8 [a0 + 12] = 0x65\n 78544: u8 [a0 + 28] = 0x6d\n 78548: u8 [a0 + 11] = 0x6d\n 78552: u8 [a0 + 22] = 0x79\n 78556: u8 [a0 + 10] = 0x79\n 78560: u8 [a0 + 26] = 0x61\n 78564: u8 [a0 + 20] = 0x61\n 78568: u8 [a0 + 16] = 0x61\n 78572: u8 [a0 + 9] = 0x61\n 78576: u8 [a0 + 8] = 0x70\n 78580: u8 [a0 + 31] = 0\n 78583: u8 [a0 + 23] = 0x20\n 78587: u8 [a0 + 15] = 0x20\n 78591: u8 [a0 + 7] = 0x20\n 78595: u8 [a0 + 6] = 0x3a\n 78599: u8 [a0 + 5] = 0x77\n 78603: u8 [a0 + 4] = 0x6f\n 78607: u8 [a0 + 18] = 0x72\n 78611: u8 [a0 + 3] = 0x72\n 78615: u8 [a0 + 24] = 0x63\n 78619: u8 [a0 + 2] = 0x63\n 78623: u8 [a0 + 1] = 0x73\n 78627: u8 [a0 + 0] = 0x45\n 78630: a1 = u64 [sp]\n 78632: a0 = a1 + 0x60\n 78635: a1 = a0 <u a1\n 78638: a3 = u64 [sp + 0x8]\n 78641: a2 = a3 + a1\n 78644: a3 = a2 <u a3\n 78647: a3 = a1 if a1 == 0\n 78650: a1 = u64 [sp + 0x10]\n 78653: a3 = a3 + a1\n 78656: a1 = a3 <u a1\n 78659: a4 = u64 [sp + 0x18]\n 78662: a1 = a1 + a4\n 78665: a4 = u64 [sp + 0x28]\n 78668: u64 [a4] = a0\n 78670: u64 [a4 + 0x8] = a2\n 78673: u64 [a4 + 0x10] = a3\n 78676: u64 [a4 + 0x18] = a1\n 78679: ra = u64 [sp + 0x58]\n 78682: s0 = u64 [sp + 0x50]\n 78685: s1 = u64 [sp + 0x48]\n 78688: sp = sp + 0x60\n 78691: ret\n      : @1045 (gas: 1)\n 78693: trap\n      : @1046 (gas: 17)\n 78694: sp = sp + 0xffffffffffffffa0\n 78697: u64 [sp + 0x58] = ra\n 78700: u64 [sp + 0x50] = s0\n 78703: u64 [sp + 0x48] = s1\n 78706: a3 = u64 [a1 + 0x18]\n 78709: a4 = u64 [a1 + 0x10]\n 78712: a5 = u64 [a1 + 0x8]\n 78715: s1 = u64 [a1]\n 78717: a1 = a5 | a3\n 78720: a2 = s1 | a4\n 78723: a2 = a2 | a1\n 78726: a2 = a2 >> 0x20\n 78729: a1 = a1 | a4\n 78732: a1 = a1 << 0x20\n 78735: a1 = a1 | a2\n 78738: u64 [sp + 0x28] = a0\n 78741: jump @1053 if a1 != 0\n      : @1047 (gas: 19)\n 78745: a0 = s1 + 0x20\n 78748: u64 [sp + 0x30] = a0\n 78751: a0 = a0 <u s1\n 78754: a1 = a5 + a0\n 78757: u64 [sp + 0x40] = a1\n 78760: u64 [sp + 0x8] = a5\n 78763: s0 = a1 <u a5\n 78766: s0 = a0 if a0 == 0\n 78769: s0 = s0 + a4\n 78772: u64 [sp + 0x10] = a4\n 78775: a0 = s0 <u a4\n 78778: u64 [sp + 0x18] = a3\n 78781: a0 = a0 + a3\n 78784: u64 [sp + 0x38] = a0\n 78787: u64 [sp] = s1\n 78789: i32 a0 = s1 + 0\n 78791: a1 = 0x20\n 78794: s1 = 0x20\n 78797: ra = 906, jump @0\n      : @1048 [@dyn 453] (gas: 45)\n 78804: u8 [a0 + 0x1f] = s1\n 78807: a1 = u64 [sp + 0x30]\n 78810: s1 = a1\n 78812: a1 = a1 | s0\n 78815: a2 = u64 [sp + 0x40]\n 78818: a4 = u64 [sp + 0x38]\n 78821: a2 = a2 | a4\n 78824: a1 = a1 | a2\n 78827: a1 = a1 >> 0x20\n 78830: u64 [sp + 0x20] = s0\n 78833: a2 = a2 | s0\n 78836: a2 = a2 << 0x20\n 78839: a1 = a1 | a2\n 78842: u8 [a0 + 30] = 0\n 78845: u8 [a0 + 29] = 0\n 78848: u8 [a0 + 28] = 0\n 78851: u8 [a0 + 27] = 0\n 78854: u8 [a0 + 26] = 0\n 78857: u8 [a0 + 25] = 0\n 78860: u8 [a0 + 24] = 0\n 78863: u8 [a0 + 23] = 0\n 78866: u8 [a0 + 22] = 0\n 78869: u8 [a0 + 21] = 0\n 78872: u8 [a0 + 20] = 0\n 78875: u8 [a0 + 19] = 0\n 78878: u8 [a0 + 18] = 0\n 78881: u8 [a0 + 17] = 0\n 78884: u8 [a0 + 16] = 0\n 78887: u8 [a0 + 15] = 0\n 78890: u8 [a0 + 14] = 0\n 78893: u8 [a0 + 13] = 0\n 78896: u8 [a0 + 12] = 0\n 78899: u8 [a0 + 11] = 0\n 78902: u8 [a0 + 10] = 0\n 78905: u8 [a0 + 9] = 0\n 78908: u8 [a0 + 8] = 0\n 78911: u8 [a0 + 7] = 0\n 78914: u8 [a0 + 6] = 0\n 78917: u8 [a0 + 5] = 0\n 78920: u8 [a0 + 4] = 0\n 78923: u8 [a0 + 3] = 0\n 78926: u8 [a0 + 2] = 0\n 78929: u8 [a0 + 1] = 0\n 78932: u8 [a0 + 0] = 0\n 78934: jump @1053 if a1 != 0\n      : @1049 (gas: 4)\n 78938: i32 s0 = s1 + 0\n 78940: a1 = 0x20\n 78943: a0 = s0\n 78945: ra = 908, jump @0\n      : @1050 [@dyn 454] (gas: 41)\n 78952: u8 [a0 + 31] = 0x1e\n 78956: u8 [a0 + 30] = 0\n 78959: u8 [a0 + 29] = 0\n 78962: u8 [a0 + 28] = 0\n 78965: u8 [a0 + 27] = 0\n 78968: u8 [a0 + 26] = 0\n 78971: u8 [a0 + 25] = 0\n 78974: u8 [a0 + 24] = 0\n 78977: u8 [a0 + 23] = 0\n 78980: u8 [a0 + 22] = 0\n 78983: u8 [a0 + 21] = 0\n 78986: u8 [a0 + 20] = 0\n 78989: u8 [a0 + 19] = 0\n 78992: u8 [a0 + 18] = 0\n 78995: u8 [a0 + 17] = 0\n 78998: u8 [a0 + 16] = 0\n 79001: u8 [a0 + 15] = 0\n 79004: u8 [a0 + 14] = 0\n 79007: u8 [a0 + 13] = 0\n 79010: u8 [a0 + 12] = 0\n 79013: u8 [a0 + 11] = 0\n 79016: u8 [a0 + 10] = 0\n 79019: u8 [a0 + 9] = 0\n 79022: u8 [a0 + 8] = 0\n 79025: u8 [a0 + 7] = 0\n 79028: u8 [a0 + 6] = 0\n 79031: u8 [a0 + 5] = 0\n 79034: u8 [a0 + 4] = 0\n 79037: u8 [a0 + 3] = 0\n 79040: u8 [a0 + 2] = 0\n 79043: u8 [a0 + 1] = 0\n 79046: a1 = u64 [sp + 0x20]\n 79049: a2 = u64 [sp + 0x38]\n 79052: a1 = a1 | a2\n 79055: a2 = 0xffffffe0\n 79065: a2 = s1 <u a2\n 79068: a3 = u64 [sp + 0x40]\n 79071: a2 = 0 if a3 != 0\n 79073: a2 = 0 if a1 != 0\n 79075: u8 [a0 + 0] = 0\n 79077: jump @1053 if a2 == 0\n      : @1051 (gas: 3)\n 79081: i32 a0 = s0 + 0x20\n 79084: a1 = 0x20\n 79087: ra = 910, jump @0\n      : @1052 [@dyn 455] (gas: 54)\n 79094: u8 [a0 + 28] = 0x74\n 79098: u8 [a0 + 23] = 0x64\n 79102: u8 [a0 + 21] = 0x6e\n 79106: u8 [a0 + 24] = 0x69\n 79110: u8 [a0 + 20] = 0x69\n 79114: u8 [a0 + 17] = 0x69\n 79118: u8 [a0 + 29] = 0x65\n 79122: u8 [a0 + 15] = 0x65\n 79126: u8 [a0 + 13] = 0x61\n 79130: u8 [a0 + 12] = 0x68\n 79134: u8 [a0 + 27] = 0x75\n 79138: u8 [a0 + 9] = 0x75\n 79142: u8 [a0 + 26] = 0x70\n 79146: u8 [a0 + 8] = 0x70\n 79150: u8 [a0 + 31] = 0\n 79153: u8 [a0 + 30] = 0\n 79156: u8 [a0 + 22] = 0x20\n 79160: u8 [a0 + 19] = 0x20\n 79164: u8 [a0 + 16] = 0x20\n 79168: u8 [a0 + 7] = 0x20\n 79172: u8 [a0 + 6] = 0x3a\n 79176: u8 [a0 + 5] = 0x77\n 79180: u8 [a0 + 4] = 0x6f\n 79184: u8 [a0 + 10] = 0x72\n 79188: u8 [a0 + 3] = 0x72\n 79192: u8 [a0 + 11] = 0x63\n 79196: u8 [a0 + 2] = 0x63\n 79200: u8 [a0 + 25] = 0x73\n 79204: u8 [a0 + 18] = 0x73\n 79208: u8 [a0 + 14] = 0x73\n 79212: u8 [a0 + 1] = 0x73\n 79216: u8 [a0 + 0] = 0x45\n 79219: a1 = u64 [sp]\n 79221: a0 = a1 + 0x60\n 79224: a1 = a0 <u a1\n 79227: a3 = u64 [sp + 0x8]\n 79230: a2 = a3 + a1\n 79233: a3 = a2 <u a3\n 79236: a3 = a1 if a1 == 0\n 79239: a1 = u64 [sp + 0x10]\n 79242: a3 = a3 + a1\n 79245: a1 = a3 <u a1\n 79248: a4 = u64 [sp + 0x18]\n 79251: a1 = a1 + a4\n 79254: a4 = u64 [sp + 0x28]\n 79257: u64 [a4] = a0\n 79259: u64 [a4 + 0x8] = a2\n 79262: u64 [a4 + 0x10] = a3\n 79265: u64 [a4 + 0x18] = a1\n 79268: ra = u64 [sp + 0x58]\n 79271: s0 = u64 [sp + 0x50]\n 79274: s1 = u64 [sp + 0x48]\n 79277: sp = sp + 0x60\n 79280: ret\n      : @1053 (gas: 1)\n 79282: trap\n      : @1054 (gas: 16)\n 79283: sp = sp + 0xfffffffffffffee0\n 79287: u64 [sp + 0x118] = ra\n 79291: u64 [sp + 0x110] = s0\n 79295: u64 [sp + 0x108] = s1\n 79299: s0 = sp + 0x120\n 79303: sp = sp & 0xfffffffffffffff0\n 79306: a4 = u64 [a2 + 0x18]\n 79309: a5 = u64 [a2 + 0x10]\n 79312: s1 = u64 [a2 + 0x8]\n 79315: u64 [sp + 0x50] = a4\n 79318: u64 [sp + 0x48] = a5\n 79321: a4 = a4 | a5\n 79324: a5 = s1 <u 0x1\n 79327: a5 = 0 if a4 != 0\n 79329: u64 [sp] = a0\n 79331: jump @1068 if a5 == 0\n      : @1055 (gas: 35)\n 79335: a0 = u64 [a3 + 0x18]\n 79338: u64 [sp + 0x18] = a0\n 79341: a0 = u64 [a3 + 0x10]\n 79344: u64 [sp + 0x20] = a0\n 79347: a0 = u64 [a3 + 0x8]\n 79350: u64 [sp + 0x8] = a0\n 79353: a0 = u64 [a3]\n 79355: u64 [sp + 0x10] = a0\n 79358: a2 = u64 [a2]\n 79360: a0 = u64 [a1 + 0x18]\n 79363: u64 [sp + 0x70] = a0\n 79366: a0 = u64 [a1 + 0x10]\n 79369: u64 [sp + 0x78] = a0\n 79372: a0 = u64 [a1 + 0x8]\n 79375: u64 [sp + 0x68] = a0\n 79378: a0 = u64 [a1]\n 79380: u64 [sp + 0x60] = a0\n 79383: a0 = a2 + 0x1f\n 79386: u64 [sp + 0x40] = a2\n 79389: a1 = a0 <u a2\n 79392: a1 = a1 + s1\n 79395: a1 = a1 & 0x1\n 79398: a0 = a0 & 0xffffffffffffffe0\n 79401: a2 = a0 + 0x20\n 79404: a0 = a2 <u a0\n 79407: a3 = a1 + a0\n 79410: a4 = a3 <u a1\n 79413: a4 = a0 if a0 == 0\n 79416: u64 [sp + 216] = 0\n 79420: u64 [sp + 0xc0] = a2\n 79424: u64 [sp + 0xc8] = a3\n 79428: a0 = sp + 0xe0\n 79432: a1 = sp + 0xc0\n 79436: u64 [sp + 0xd0] = a4\n 79440: ra = 912, jump @113\n      : @1056 [@dyn 456] (gas: 15)\n 79447: a0 = u64 [sp + 0xf8]\n 79451: a2 = u64 [sp + 0xf0]\n 79455: a1 = u64 [sp + 0xe8]\n 79459: a3 = u64 [sp + 0xe0]\n 79463: u64 [sp + 0x58] = a0\n 79466: u64 [sp + 0x30] = a1\n 79469: a0 = a0 | a1\n 79472: a1 = a3 | a2\n 79475: a1 = a1 | a0\n 79478: a1 = a1 >> 0x20\n 79481: u64 [sp + 0x38] = a2\n 79484: a0 = a0 | a2\n 79487: a0 = a0 << 0x20\n 79490: a0 = a0 | a1\n 79493: jump @1067 if a0 != 0\n      : @1057 (gas: 4)\n 79497: u64 [sp + 0x28] = a3\n 79500: i32 a0 = a3 + 0\n 79502: a1 = 0x20\n 79505: ra = 914, jump @0\n      : @1058 [@dyn 457] (gas: 102)\n 79512: t2 = u64 [sp + 0x40]\n 79515: a1 = u64 [sp + 0x60]\n 79518: a1 = a1 + t2\n 79521: a3 = a1 <u t2\n 79524: a2 = u64 [sp + 0x68]\n 79527: a2 = a2 + s1\n 79530: a4 = a2 + a3\n 79533: a5 = a4 ^ s1\n 79536: a2 = a4 <u s1\n 79539: a2 = a3 if a5 == 0\n 79542: a5 = u64 [sp + 0x8]\n 79545: a3 = a4 ^ a5\n 79548: a4 = a5 <u a4\n 79551: a5 = u64 [sp + 0x10]\n 79554: a1 = a5 <u a1\n 79557: ra = u64 [sp + 0x48]\n 79560: a5 = u64 [sp + 0x78]\n 79563: a5 = a5 + ra\n 79566: a1 = a4 if a3 != 0\n 79569: a3 = a5 <u ra\n 79572: t1 = u64 [sp + 0x50]\n 79575: a4 = u64 [sp + 0x70]\n 79578: a4 = a4 + t1\n 79581: a3 = a3 + a4\n 79584: a2 = a2 + a5\n 79587: a4 = a2 <u a5\n 79590: a3 = a3 + a4\n 79593: a5 = u64 [sp + 0x18]\n 79596: a4 = a3 ^ a5\n 79599: a3 = a5 <u a3\n 79602: t0 = u64 [sp + 0x20]\n 79605: a5 = t0 <u a2\n 79608: a3 = a5 if a4 == 0\n 79611: a2 = a2 ^ t0\n 79614: a2 = a2 | a4\n 79617: a1 = a3 if a2 != 0\n 79620: a2 = reverse t2\n 79622: a3 = a2 >> 0x38\n 79625: u8 [a0 + 0x1f] = a3\n 79628: a3 = a2 >> 0x30\n 79631: u8 [a0 + 0x1e] = a3\n 79634: a3 = a2 >> 0x28\n 79637: u8 [a0 + 0x1d] = a3\n 79640: a3 = a2 >> 0x20\n 79643: u8 [a0 + 0x1c] = a3\n 79646: a3 = a2 >> 0x18\n 79649: u8 [a0 + 0x1b] = a3\n 79652: a3 = a2 >> 0x10\n 79655: u8 [a0 + 0x1a] = a3\n 79658: a3 = a2 >> 0x8\n 79661: u8 [a0 + 0x19] = a3\n 79664: a3 = reverse s1\n 79666: u8 [a0 + 0x18] = a2\n 79669: a2 = a3 >> 0x38\n 79672: u8 [a0 + 0x17] = a2\n 79675: a2 = a3 >> 0x30\n 79678: u8 [a0 + 0x16] = a2\n 79681: a2 = a3 >> 0x28\n 79684: u8 [a0 + 0x15] = a2\n 79687: a2 = a3 >> 0x20\n 79690: u8 [a0 + 0x14] = a2\n 79693: a2 = a3 >> 0x18\n 79696: u8 [a0 + 0x13] = a2\n 79699: a2 = a3 >> 0x10\n 79702: u8 [a0 + 0x12] = a2\n 79705: a2 = reverse ra\n 79707: u8 [a0 + 0x10] = a3\n 79710: a3 = a3 >> 0x8\n 79713: u8 [a0 + 0x11] = a3\n 79716: a3 = a2 >> 0x38\n 79719: u8 [a0 + 0xf] = a3\n 79722: a3 = a2 >> 0x30\n 79725: u8 [a0 + 0xe] = a3\n 79728: a3 = a2 >> 0x28\n 79731: u8 [a0 + 0xd] = a3\n 79734: a3 = a2 >> 0x20\n 79737: u8 [a0 + 0xc] = a3\n 79740: a3 = a2 >> 0x18\n 79743: u8 [a0 + 0xb] = a3\n 79746: a3 = a2 >> 0x10\n 79749: u8 [a0 + 0xa] = a3\n 79752: a3 = reverse t1\n 79754: u8 [a0 + 0x8] = a2\n 79757: a2 = a2 >> 0x8\n 79760: u8 [a0 + 0x9] = a2\n 79763: a2 = a3 >> 0x38\n 79766: u8 [a0 + 0x7] = a2\n 79769: a2 = a3 >> 0x30\n 79772: u8 [a0 + 0x6] = a2\n 79775: a2 = a3 >> 0x28\n 79778: u8 [a0 + 0x5] = a2\n 79781: a2 = a3 >> 0x20\n 79784: u8 [a0 + 0x4] = a2\n 79787: a2 = a3 >> 0x18\n 79790: u8 [a0 + 0x3] = a2\n 79793: a2 = a3 >> 0x10\n 79796: u8 [a0 + 0x2] = a2\n 79799: u8 [a0] = a3\n 79801: a3 = a3 >> 0x8\n 79804: u8 [a0 + 0x1] = a3\n 79807: t0 = u64 [sp + 0x60]\n 79810: jump @1072 if a1 != 0\n      : @1059 (gas: 12)\n 79814: a2 = u64 [sp + 0x78]\n 79817: a0 = t0 | a2\n 79820: a1 = u64 [sp + 0x70]\n 79823: a3 = u64 [sp + 0x68]\n 79826: a1 = a1 | a3\n 79829: a0 = a0 | a1\n 79832: a0 = a0 >> 0x20\n 79835: a1 = a1 | a2\n 79838: a1 = a1 << 0x20\n 79841: a0 = a0 | a1\n 79844: a3 = u64 [sp + 0x58]\n 79847: jump @1067 if a0 != 0\n      : @1060 (gas: 11)\n 79851: a0 = t2 | ra\n 79854: a1 = s1 | t1\n 79857: a0 = a0 | a1\n 79860: a0 = a0 >> 0x20\n 79863: a1 = a1 | ra\n 79866: a1 = a1 << 0x20\n 79869: a0 = a0 | a1\n 79872: a2 = u64 [sp + 0x38]\n 79875: a4 = u64 [sp + 0x30]\n 79878: a5 = u64 [sp + 0x28]\n 79881: jump @1067 if a0 != 0\n      : @1061 (gas: 7)\n 79885: u64 [sp + 0x78] = s1\n 79888: a0 = a2 | a3\n 79891: a1 = 0xffffffe0\n 79901: a1 = a5 <u a1\n 79904: a1 = 0 if a4 != 0\n 79906: a1 = 0 if a0 != 0\n 79908: jump @1067 if a1 == 0\n      : @1062 (gas: 16)\n 79912: s1 = a5 + 0x20\n 79915: a0 = s1 <u a5\n 79918: a1 = a4 + a0\n 79921: u64 [sp + 0x20] = a1\n 79924: a1 = a1 <u a4\n 79927: a1 = a0 if a0 == 0\n 79930: a1 = a1 + a2\n 79933: u64 [sp + 0x68] = a1\n 79936: a0 = a1 <u a2\n 79939: u64 [sp + 0x70] = a0\n 79942: i32 t0 = t0 + 0\n 79944: u64 [sp + 0x60] = t0\n 79947: i32 a0 = s1 + 0\n 79949: i32 a1 = t2 + 0\n 79951: u64 [sp + 0x18] = a1\n 79954: ra = 916, jump @0\n      : @1063 [@dyn 458] (gas: 5)\n 79961: i32 a0 = a0 + 0\n 79963: a1 = u64 [sp + 0x18]\n 79966: a2 = u64 [sp + 0x60]\n 79969: ecalli 2 // 'call_data_copy'\n 79971: fallthrough\n      : @1064 (gas: 31)\n 79972: a0 = u64 [sp + 0x40]\n 79975: a0 = a0 + s1\n 79978: a1 = a0 <u s1\n 79981: a2 = u64 [sp + 0x78]\n 79984: a4 = u64 [sp + 0x20]\n 79987: a2 = a2 + a4\n 79990: a2 = a2 + a1\n 79993: a3 = a2 ^ a4\n 79996: a4 = a2 <u a4\n 79999: a4 = a1 if a3 == 0\n 80002: a1 = u64 [sp + 0x48]\n 80005: a3 = u64 [sp + 0x68]\n 80008: a1 = a1 + a3\n 80011: a4 = a4 + a1\n 80014: t0 = a4 <u a1\n 80017: a1 = a1 <u a3\n 80020: a5 = u64 [sp + 0x50]\n 80023: s1 = u64 [sp + 0x58]\n 80026: a5 = a5 + s1\n 80029: a3 = u64 [sp + 0x70]\n 80032: a5 = a5 + a3\n 80035: a1 = a1 + a5\n 80038: a1 = a1 + t0\n 80041: a3 = a0 | a4\n 80044: a1 = a1 | a2\n 80047: a3 = a3 | a1\n 80050: a3 = a3 >> 0x20\n 80053: a1 = a1 | a4\n 80056: a1 = a1 << 0x20\n 80059: a1 = a1 | a3\n 80062: jump @1067 if a1 != 0\n      : @1065 (gas: 3)\n 80066: i32 a0 = a0 + 0\n 80068: a1 = 0x20\n 80071: ra = 918, jump @0\n      : @1066 [@dyn 459] (gas: 46)\n 80078: u8 [a0 + 31] = 0\n 80081: u8 [a0 + 30] = 0\n 80084: u8 [a0 + 29] = 0\n 80087: u8 [a0 + 28] = 0\n 80090: u8 [a0 + 27] = 0\n 80093: u8 [a0 + 26] = 0\n 80096: u8 [a0 + 25] = 0\n 80099: u8 [a0 + 24] = 0\n 80102: u8 [a0 + 23] = 0\n 80105: u8 [a0 + 22] = 0\n 80108: u8 [a0 + 21] = 0\n 80111: u8 [a0 + 20] = 0\n 80114: u8 [a0 + 19] = 0\n 80117: u8 [a0 + 18] = 0\n 80120: u8 [a0 + 17] = 0\n 80123: u8 [a0 + 16] = 0\n 80126: u8 [a0 + 15] = 0\n 80129: u8 [a0 + 14] = 0\n 80132: u8 [a0 + 13] = 0\n 80135: u8 [a0 + 12] = 0\n 80138: u8 [a0 + 11] = 0\n 80141: u8 [a0 + 10] = 0\n 80144: u8 [a0 + 9] = 0\n 80147: u8 [a0 + 8] = 0\n 80150: u8 [a0 + 7] = 0\n 80153: u8 [a0 + 6] = 0\n 80156: u8 [a0 + 5] = 0\n 80159: u8 [a0 + 4] = 0\n 80162: u8 [a0 + 3] = 0\n 80165: u8 [a0 + 2] = 0\n 80168: u8 [a0 + 1] = 0\n 80171: u8 [a0 + 0] = 0\n 80173: a0 = u64 [sp]\n 80175: a1 = u64 [sp + 0x28]\n 80178: u64 [a0] = a1\n 80180: u64 [a0 + 0x18] = s1\n 80183: a1 = u64 [sp + 0x30]\n 80186: u64 [a0 + 0x8] = a1\n 80189: a1 = u64 [sp + 0x38]\n 80192: u64 [a0 + 0x10] = a1\n 80195: sp = s0 + 0xfffffffffffffee0\n 80199: ra = u64 [sp + 0x118]\n 80203: s0 = u64 [sp + 0x110]\n 80207: s1 = u64 [sp + 0x108]\n 80211: sp = sp + 0x120\n 80215: ret\n      : @1067 (gas: 1)\n 80217: trap\n      : @1068 (gas: 8)\n 80218: u64 [sp + 176] = 0\n 80222: u64 [sp + 168] = 0\n 80226: u64 [sp + 160] = 0\n 80230: a0 = 0x4e487b7100000000\n 80240: a1 = sp + 0xa0\n 80244: u64 [sp + 0xb8] = a0\n 80248: a0 = 0\n 80250: ra = 920, jump @23\n      : @1069 [@dyn 460] (gas: 7)\n 80257: u64 [sp + 152] = 0\n 80261: u64 [sp + 144] = 0\n 80265: u64 [sp + 128] = 0x41\n 80270: a0 = 0x4\n 80273: a1 = sp + 0x80\n 80277: u64 [sp + 136] = 0\n 80281: ra = 922, jump @23\n      : @1070 [@dyn 461] (gas: 3)\n 80288: a1 = 0x24\n 80291: a0 = 0\n 80293: ra = 924, jump @0\n      : @1071 [@dyn 462] (gas: 5)\n 80300: i32 a1 = a0 + 0\n 80302: a0 = 0x1\n 80305: a2 = 0x24\n 80308: ecalli 14 // 'seal_return'\n 80310: fallthrough\n      : @1072 (gas: 3)\n 80311: a0 = 0\n 80313: a1 = 0\n 80315: ra = 926, jump @0\n      : @1073 [@dyn 463] (gas: 6)\n 80322: i32 a1 = a0 + 0\n 80324: a0 = 0x1\n 80327: a2 = 0\n 80329: ra = 0x3a0\n 80333: ecalli 14 // 'seal_return'\n 80335: fallthrough\n      : @1074 [@dyn 464] (gas: 33)\n 80336: sp = sp + 0xffffffffffffff60\n 80340: u64 [sp + 0x98] = ra\n 80344: u64 [sp + 0x90] = s0\n 80348: u64 [sp + 0x88] = s1\n 80352: s0 = sp + 0xa0\n 80356: sp = sp & 0xfffffffffffffff0\n 80359: t0 = u64 [a1]\n 80361: t1 = u64 [a1 + 0x8]\n 80364: t2 = u64 [a1 + 0x10]\n 80367: ra = u64 [a1 + 0x18]\n 80370: a4 = u64 [a2]\n 80372: a3 = u64 [a2 + 0x8]\n 80375: a5 = u64 [a2 + 0x10]\n 80378: a2 = u64 [a2 + 0x18]\n 80381: a1 = u32 [0x20078]\n 80386: s1 = a0\n 80388: u64 [sp + 24] = 0\n 80391: u64 [sp + 16] = 0\n 80394: u64 [sp + 8] = 0\n 80397: u64 [sp] = a1\n 80399: u64 [sp + 0x38] = a2\n 80402: u64 [sp + 0x30] = a5\n 80405: u64 [sp + 0x28] = a3\n 80408: u64 [sp + 0x20] = a4\n 80411: u64 [sp + 0x58] = ra\n 80414: u64 [sp + 0x50] = t2\n 80417: u64 [sp + 0x48] = t1\n 80420: a0 = sp + 0x60\n 80423: a1 = sp + 0x40\n 80426: a2 = sp + 0x20\n 80429: a3 = sp\n 80431: u64 [sp + 0x40] = t0\n 80434: ra = 930, jump @1054\n      : @1075 [@dyn 465] (gas: 14)\n 80440: a0 = u64 [sp + 0x70]\n 80443: a1 = u64 [sp + 0x78]\n 80446: a2 = u64 [sp + 0x60]\n 80449: a3 = u64 [sp + 0x68]\n 80452: u64 [s1 + 0x10] = a0\n 80455: u64 [s1 + 0x18] = a1\n 80458: u64 [s1] = a2\n 80460: u64 [s1 + 0x8] = a3\n 80463: sp = s0 + 0xffffffffffffff60\n 80467: ra = u64 [sp + 0x98]\n 80471: s0 = u64 [sp + 0x90]\n 80475: s1 = u64 [sp + 0x88]\n 80479: sp = sp + 0xa0\n 80483: ret\n      : @1076 [@dyn 466] (gas: 75)\n 80485: u64 [sp + 0x60] = s1\n 80488: a5 = reverse s1\n 80490: a1 = u64 [sp + 0xe8]\n 80494: a2 = reverse a1\n 80496: a1 = u64 [sp + 0xe0]\n 80500: a4 = reverse a1\n 80502: a1 = u64 [sp + 0xd8]\n 80506: a3 = reverse a1\n 80508: u8 [a0 + 0x18] = a3\n 80511: u8 [a0 + 0x10] = a4\n 80514: u8 [a0 + 0x8] = a2\n 80517: u8 [a0] = a5\n 80519: a1 = a3 >> 0x38\n 80522: u8 [a0 + 0x1f] = a1\n 80525: a1 = a3 >> 0x30\n 80528: u8 [a0 + 0x1e] = a1\n 80531: a1 = a3 >> 0x28\n 80534: u8 [a0 + 0x1d] = a1\n 80537: a1 = a3 >> 0x20\n 80540: u8 [a0 + 0x1c] = a1\n 80543: a1 = a3 >> 0x18\n 80546: u8 [a0 + 0x1b] = a1\n 80549: a1 = a3 >> 0x10\n 80552: u8 [a0 + 0x1a] = a1\n 80555: u64 [sp + 0x28] = a3\n 80558: a1 = a3 >> 0x8\n 80561: u8 [a0 + 0x19] = a1\n 80564: a1 = a4 >> 0x38\n 80567: u8 [a0 + 0x17] = a1\n 80570: a1 = a4 >> 0x30\n 80573: u8 [a0 + 0x16] = a1\n 80576: a1 = a4 >> 0x28\n 80579: u8 [a0 + 0x15] = a1\n 80582: a1 = a4 >> 0x20\n 80585: u8 [a0 + 0x14] = a1\n 80588: a1 = a4 >> 0x18\n 80591: u8 [a0 + 0x13] = a1\n 80594: a1 = a4 >> 0x10\n 80597: u8 [a0 + 0x12] = a1\n 80600: u64 [sp + 0x20] = a4\n 80603: a1 = a4 >> 0x8\n 80606: u8 [a0 + 0x11] = a1\n 80609: a1 = a2 >> 0x38\n 80612: u8 [a0 + 0xf] = a1\n 80615: a1 = a2 >> 0x30\n 80618: u8 [a0 + 0xe] = a1\n 80621: a1 = a2 >> 0x28\n 80624: u8 [a0 + 0xd] = a1\n 80627: a1 = a2 >> 0x20\n 80630: u8 [a0 + 0xc] = a1\n 80633: a1 = a2 >> 0x18\n 80636: u8 [a0 + 0xb] = a1\n 80639: a1 = a2 >> 0x10\n 80642: u8 [a0 + 0xa] = a1\n 80645: u64 [sp + 0x30] = a2\n 80648: a1 = a2 >> 0x8\n 80651: u8 [a0 + 0x9] = a1\n 80654: a1 = a5 >> 0x38\n 80657: u8 [a0 + 0x7] = a1\n 80660: a1 = a5 >> 0x30\n 80663: u8 [a0 + 0x6] = a1\n 80666: a1 = a5 >> 0x28\n 80669: u8 [a0 + 0x5] = a1\n 80672: a1 = a5 >> 0x20\n 80675: u8 [a0 + 0x4] = a1\n 80678: a1 = a5 >> 0x18\n 80681: u8 [a0 + 0x3] = a1\n 80684: a1 = a5 >> 0x10\n 80687: u8 [a0 + 0x2] = a1\n 80690: u64 [sp + 0x38] = a5\n 80693: a1 = a5 >> 0x8\n 80696: u8 [a0 + 0x1] = a1\n 80699: a0 = 0x20\n 80702: a1 = 0x20\n 80705: ra = 934, jump @0\n      : @1077 [@dyn 467] (gas: 35)\n 80712: u8 [a0 + 31] = 0x4\n 80716: u8 [a0 + 30] = 0\n 80719: u8 [a0 + 29] = 0\n 80722: u8 [a0 + 28] = 0\n 80725: u8 [a0 + 27] = 0\n 80728: u8 [a0 + 26] = 0\n 80731: u8 [a0 + 25] = 0\n 80734: u8 [a0 + 24] = 0\n 80737: u8 [a0 + 23] = 0\n 80740: u8 [a0 + 22] = 0\n 80743: u8 [a0 + 21] = 0\n 80746: u8 [a0 + 20] = 0\n 80749: u8 [a0 + 19] = 0\n 80752: u8 [a0 + 18] = 0\n 80755: u8 [a0 + 17] = 0\n 80758: u8 [a0 + 16] = 0\n 80761: u8 [a0 + 15] = 0\n 80764: u8 [a0 + 14] = 0\n 80767: u8 [a0 + 13] = 0\n 80770: u8 [a0 + 12] = 0\n 80773: u8 [a0 + 11] = 0\n 80776: u8 [a0 + 10] = 0\n 80779: u8 [a0 + 9] = 0\n 80782: u8 [a0 + 8] = 0\n 80785: u8 [a0 + 7] = 0\n 80788: u8 [a0 + 6] = 0\n 80791: u8 [a0 + 5] = 0\n 80794: u8 [a0 + 4] = 0\n 80797: u8 [a0 + 3] = 0\n 80800: u8 [a0 + 2] = 0\n 80803: u8 [a0 + 1] = 0\n 80806: u8 [a0 + 0] = 0\n 80808: a1 = 0x40\n 80811: a0 = 0\n 80813: ra = 936, jump @0\n      : @1078 [@dyn 468] (gas: 43)\n 80820: i32 a0 = a0 + 0\n 80822: i32 a2 = sp + 0x400\n 80826: a1 = 0x40\n 80829: ecalli 9 // 'hash_keccak_256'\n 80831: a0 = u64 [sp + 0x400]\n 80835: a1 = u64 [sp + 0x408]\n 80839: a2 = u64 [sp + 0x410]\n 80843: a3 = u64 [sp + 0x418]\n 80847: a4 = reverse a0\n 80849: a5 = reverse a1\n 80851: a1 = reverse a2\n 80853: a0 = reverse a3\n 80855: a2 = a0 + 0x2\n 80858: u64 [sp + 0xb0] = a0\n 80862: a0 = a2 <u a0\n 80865: a3 = a1 + a0\n 80868: u64 [sp + 0xb8] = a1\n 80872: a1 = a3 <u a1\n 80875: a1 = a0 if a0 == 0\n 80878: s1 = a5 + a1\n 80881: u64 [sp + 0xc0] = a5\n 80885: a0 = s1 <u a5\n 80888: u64 [sp + 0xc8] = a4\n 80892: a0 = a0 + a4\n 80895: u64 [sp + 0xf0] = a3\n 80899: u64 [sp + 0x3c8] = a3\n 80903: u64 [sp + 0xf8] = a2\n 80907: u64 [sp + 0x3c0] = a2\n 80911: u64 [sp + 0x3d0] = s1\n 80915: u64 [sp + 0xd0] = a0\n 80919: u64 [sp + 0x3d8] = a0\n 80923: u64 [sp + 1048] = 0\n 80927: u64 [sp + 1040] = 0\n 80931: u64 [sp + 1032] = 0\n 80935: u64 [sp + 1024] = 0\n 80939: u32 [sp + 992] = 0x20\n 80944: i32 a1 = sp + 0x3c0\n 80948: i32 a3 = sp + 0x400\n 80952: i32 a4 = sp + 0x3e0\n 80956: a2 = 0xffffffffffffffff\n 80959: a0 = 0\n 80961: ecalli 8 // 'get_storage'\n 80963: fallthrough\n      : @1079 (gas: 2)\n 80964: a0 = u8 [sp + 0x400]\n 80968: jump @1097 if a0 != 0\n      : @1080 (gas: 20)\n 80972: u64 [sp + 0xa8] = s1\n 80976: u64 [sp + 0x3d0] = s1\n 80980: a0 = u64 [sp + 0xf0]\n 80984: u64 [sp + 0x3c8] = a0\n 80988: a0 = u64 [sp + 0xf8]\n 80992: u64 [sp + 0x3c0] = a0\n 80996: a0 = u64 [sp + 0xd0]\n 81000: u64 [sp + 0x3d8] = a0\n 81004: u64 [sp + 1048] = 0\n 81008: u64 [sp + 1040] = 0\n 81012: u64 [sp + 1032] = 0\n 81016: u64 [sp + 1024] = 0\n 81020: u32 [sp + 992] = 0x20\n 81025: i32 a1 = sp + 0x3c0\n 81029: i32 a3 = sp + 0x400\n 81033: i32 a4 = sp + 0x3e0\n 81037: a2 = 0xffffffffffffffff\n 81040: a0 = 0\n 81042: ecalli 8 // 'get_storage'\n 81044: fallthrough\n      : @1081 (gas: 2)\n 81045: a0 = u8 [sp + 0x401]\n 81049: jump @1102 if a0 != 0\n      : @1082 (gas: 20)\n 81053: a0 = u64 [sp + 0x40]\n 81056: u64 [sp + 0x2e0] = a0\n 81060: a0 = u64 [sp + 0xd8]\n 81064: u64 [sp + 0x300] = a0\n 81068: a0 = u64 [sp + 0x48]\n 81071: u64 [sp + 0x2e8] = a0\n 81075: a0 = u64 [sp + 0xe0]\n 81079: u64 [sp + 0x308] = a0\n 81083: a0 = u64 [sp + 0x50]\n 81086: u64 [sp + 0x2f0] = a0\n 81090: a0 = u64 [sp + 0xe8]\n 81094: u64 [sp + 0x310] = a0\n 81098: a0 = u64 [sp + 0x58]\n 81101: u64 [sp + 0x2f8] = a0\n 81105: a0 = sp + 0x320\n 81109: a1 = sp + 0x300\n 81113: a2 = sp + 0x2e0\n 81117: a3 = u64 [sp + 0x60]\n 81120: u64 [sp + 0x318] = a3\n 81124: ra = 938, jump @1418\n      : @1083 [@dyn 469] (gas: 33)\n 81130: a0 = u64 [sp + 0x320]\n 81134: u64 [sp + 0xe8] = a0\n 81138: a1 = u64 [sp + 0x328]\n 81142: u64 [sp + 0xe0] = a1\n 81146: a1 = u64 [sp + 0x330]\n 81150: u64 [sp + 0xd8] = a1\n 81154: s1 = u64 [sp + 0x338]\n 81158: a0 = u32 [0x20078]\n 81163: u64 [sp + 632] = 0\n 81167: u64 [sp + 624] = 0\n 81171: u64 [sp + 616] = 0\n 81175: u64 [sp + 0x260] = a0\n 81179: a0 = u64 [sp + 0x68]\n 81182: u64 [sp + 0x298] = a0\n 81186: a0 = u64 [sp + 0x70]\n 81189: u64 [sp + 0x290] = a0\n 81193: a0 = u64 [sp + 0x78]\n 81196: u64 [sp + 0x288] = a0\n 81200: a0 = u64 [sp + 0x80]\n 81204: u64 [sp + 0x280] = a0\n 81208: a0 = u64 [sp + 0x88]\n 81212: u64 [sp + 0x2b8] = a0\n 81216: a0 = u64 [sp + 0x90]\n 81220: u64 [sp + 0x2b0] = a0\n 81224: a0 = u64 [sp + 0x98]\n 81228: u64 [sp + 0x2a8] = a0\n 81232: a0 = sp + 0x2c0\n 81236: a1 = sp + 0x2a0\n 81240: a2 = sp + 0x280\n 81244: a3 = sp + 0x260\n 81248: a4 = u64 [sp + 0xa0]\n 81252: u64 [sp + 0x2a0] = a4\n 81256: ra = 940, jump @1054\n      : @1084 [@dyn 470] (gas: 19)\n 81262: a0 = u64 [sp + 0x2c0]\n 81266: a1 = u64 [sp + 0x2c8]\n 81270: a2 = u64 [sp + 0x2d0]\n 81274: a3 = u64 [sp + 0x2d8]\n 81278: u64 [sp + 0x1d8] = a3\n 81282: u64 [sp + 0x1d0] = a2\n 81286: u64 [sp + 0x1c8] = a1\n 81290: u64 [sp + 0x1c0] = a0\n 81294: u64 [sp + 0x1f8] = s1\n 81298: a0 = u64 [sp + 0xd8]\n 81302: u64 [sp + 0x1f0] = a0\n 81306: a0 = u64 [sp + 0xe0]\n 81310: u64 [sp + 0x1e8] = a0\n 81314: a0 = sp + 0x200\n 81318: a1 = sp + 0x1e0\n 81322: a2 = sp + 0x1c0\n 81326: a3 = u64 [sp + 0xe8]\n 81330: u64 [sp + 0x1e0] = a3\n 81334: ra = 942, jump @1521\n      : @1085 [@dyn 471] (gas: 25)\n 81341: a0 = u64 [sp + 0x200]\n 81345: u64 [sp + 0xe8] = a0\n 81349: a0 = u32 [sp + 0x210]\n 81353: u64 [sp + 0xe0] = a0\n 81357: a0 = u64 [sp + 0x208]\n 81361: u64 [sp + 0xd8] = a0\n 81365: t0 = u64 [sp + 0x220]\n 81369: a0 = u64 [sp + 0x228]\n 81373: a1 = u64 [sp + 0x230]\n 81377: a3 = u64 [sp + 0x238]\n 81381: a4 = u64 [sp + 0x240]\n 81385: a5 = u64 [sp + 0x248]\n 81389: s1 = u64 [sp + 0x250]\n 81393: a2 = u64 [sp + 0x258]\n 81397: u64 [sp + 0x198] = a2\n 81401: u64 [sp + 0x190] = s1\n 81405: u64 [sp + 0x188] = a5\n 81409: u64 [sp + 0x180] = a4\n 81413: u64 [sp + 0x1b8] = a3\n 81417: u64 [sp + 0x1b0] = a1\n 81421: u64 [sp + 0x1a8] = a0\n 81425: a0 = sp + 0x1a0\n 81429: a1 = sp + 0x180\n 81433: u64 [sp + 0x1a0] = t0\n 81437: ra = 944, jump @1536\n      : @1086 [@dyn 472] (gas: 20)\n 81444: a0 = u64 [sp + 0xc8]\n 81448: u64 [sp + 0x3d8] = a0\n 81452: a0 = u64 [sp + 0xc0]\n 81456: u64 [sp + 0x3d0] = a0\n 81460: a0 = u64 [sp + 0xb8]\n 81464: u64 [sp + 0x3c8] = a0\n 81468: a0 = u64 [sp + 0xb0]\n 81472: u64 [sp + 0x3c0] = a0\n 81476: u64 [sp + 1048] = 0\n 81480: u64 [sp + 1040] = 0\n 81484: u64 [sp + 1032] = 0\n 81488: u64 [sp + 1024] = 0\n 81492: u32 [sp + 992] = 0x20\n 81497: i32 a1 = sp + 0x3c0\n 81501: i32 a3 = sp + 0x400\n 81505: i32 a4 = sp + 0x3e0\n 81509: a2 = 0xffffffffffffffff\n 81512: a0 = 0\n 81514: ecalli 8 // 'get_storage'\n 81516: fallthrough\n      : @1087 (gas: 12)\n 81517: a0 = u64 [sp + 0x408]\n 81521: a1 = u32 [sp + 0x410]\n 81525: a2 = u64 [sp + 0x400]\n 81529: a3 = u64 [sp + 0xd8]\n 81533: a0 = a0 ^ a3\n 81536: a3 = u64 [sp + 0xe0]\n 81540: a1 = a1 ^ a3\n 81543: a3 = u64 [sp + 0xe8]\n 81547: a2 = a2 ^ a3\n 81550: a1 = a1 | a2\n 81553: a0 = a0 | a1\n 81556: jump @1107 if a0 != 0\n      : @1088 (gas: 43)\n 81560: a0 = u64 [sp + 0xa8]\n 81564: u64 [sp + 0x3d0] = a0\n 81568: a0 = u64 [sp + 0xf0]\n 81572: u64 [sp + 0x3c8] = a0\n 81576: a0 = u64 [sp + 0xf8]\n 81580: u64 [sp + 0x3c0] = a0\n 81584: s1 = u64 [sp + 0xd0]\n 81588: u64 [sp + 0x3d8] = s1\n 81592: u64 [sp + 1048] = 0\n 81596: u64 [sp + 1040] = 0\n 81600: u64 [sp + 1032] = 0\n 81604: u64 [sp + 1024] = 0\n 81608: u32 [sp + 992] = 0x20\n 81613: i32 a1 = sp + 0x3c0\n 81617: i32 a3 = sp + 0x400\n 81621: i32 a4 = sp + 0x3e0\n 81625: a2 = 0xffffffffffffffff\n 81628: a0 = 0\n 81630: ecalli 8 // 'get_storage'\n 81632: a0 = u64 [sp + 0x400]\n 81636: a1 = u64 [sp + 0x408]\n 81640: a2 = u64 [sp + 0x410]\n 81644: a3 = u64 [sp + 0x418]\n 81648: a0 = a0 & 0xffffffffffffff00\n 81652: a0 = a0 | 0x1\n 81655: u64 [sp + 0x3d8] = s1\n 81659: a4 = u64 [sp + 0xa8]\n 81663: u64 [sp + 0x3d0] = a4\n 81667: a4 = u64 [sp + 0xf0]\n 81671: u64 [sp + 0x3c8] = a4\n 81675: a4 = u64 [sp + 0xf8]\n 81679: u64 [sp + 0x3c0] = a4\n 81683: u64 [sp + 0x418] = a3\n 81687: u64 [sp + 0x410] = a2\n 81691: u64 [sp + 0x408] = a1\n 81695: u64 [sp + 0x400] = a0\n 81699: i32 a1 = sp + 0x3c0\n 81703: i32 a3 = sp + 0x400\n 81707: a2 = 0xffffffffffffffff\n 81710: a4 = 0x20\n 81713: a0 = 0\n 81715: ecalli 16 // 'set_storage'\n 81717: fallthrough\n      : @1089 (gas: 3)\n 81718: s1 = 0x20070\n 81723: a0 = i32 [0x20070]\n 81728: jump @1092 if a0 == 0\n      : @1090 (gas: 6)\n 81731: u64 [sp + 0xf8] = a0\n 81735: a0 = 0x30080\n 81740: i32 a0 = a0 + 0\n 81742: i32 a1 = s1 + 0\n 81744: ecalli 7 // 'get_immutable_data'\n 81746: fallthrough\n      : @1091 (gas: 4)\n 81747: a0 = i32 [0x20070]\n 81752: u32 [0x20070] = 0\n 81757: a1 = u64 [sp + 0xf8]\n 81761: jump @1113 if a0 <u a1\n      : @1092 (gas: 53)\n 81765: a1 = u64 [0x300c0]\n 81770: a2 = u64 [0x300c8]\n 81775: a0 = u64 [0x300d0]\n 81780: s1 = 0xffffffff\n 81790: a1 = a1 & 0xffffffffffffffff\n 81793: u64 [sp + 0xf8] = a1\n 81797: a2 = a2 & 0xffffffffffffffff\n 81800: u64 [sp + 0xf0] = a2\n 81804: s1 = s1 & a0\n 81807: a0 = u64 [sp + 0xb0]\n 81811: a0 = a0 + 0x1\n 81814: a1 = a0 <u 0x1\n 81817: a2 = u64 [sp + 0xb8]\n 81821: a1 = a1 + a2\n 81824: a2 = a0 | a1\n 81827: a2 = a2 <u 0x1\n 81830: a3 = u64 [sp + 0xc0]\n 81834: a2 = a2 + a3\n 81837: a3 = a2 <u a3\n 81840: a4 = u64 [sp + 0xc8]\n 81844: a3 = a3 + a4\n 81847: u64 [sp + 0x3c8] = a1\n 81851: u64 [sp + 0x3c0] = a0\n 81855: u64 [sp + 0x3d0] = a2\n 81859: u64 [sp + 0x3d8] = a3\n 81863: u64 [sp + 1048] = 0\n 81867: u64 [sp + 1040] = 0\n 81871: u64 [sp + 1032] = 0\n 81875: u64 [sp + 1024] = 0\n 81879: u32 [sp + 992] = 0x20\n 81884: i32 a1 = sp + 0x3c0\n 81888: i32 a3 = sp + 0x400\n 81892: i32 a4 = sp + 0x3e0\n 81896: a2 = 0xffffffffffffffff\n 81899: a0 = 0\n 81901: ecalli 8 // 'get_storage'\n 81903: a0 = u64 [sp + 0x400]\n 81907: a1 = u64 [sp + 0x408]\n 81911: a2 = u64 [sp + 0x410]\n 81915: a3 = u64 [sp + 0x418]\n 81919: u64 [sp + 0x118] = a3\n 81923: u64 [sp + 0x110] = a2\n 81927: u64 [sp + 0x108] = a1\n 81931: u64 [sp + 0x100] = a0\n 81935: u64 [sp + 312] = 0\n 81939: u64 [sp + 0x130] = s1\n 81943: a0 = u64 [sp + 0xf0]\n 81947: u64 [sp + 0x128] = a0\n 81951: a0 = sp + 0x120\n 81955: a1 = sp + 0x100\n 81959: a2 = u64 [sp + 0xf8]\n 81963: u64 [sp + 0x120] = a2\n 81967: ra = 946, jump @1463\n      : @1093 [@dyn 473] (gas: 3)\n 81973: a0 = 0x40\n 81976: a1 = 0x20\n 81979: ra = 948, jump @0\n      : @1094 [@dyn 474] (gas: 100)\n 81986: a1 = u8 [a0 + 0x11]\n 81989: a2 = u8 [a0 + 0x10]\n 81992: a3 = u8 [a0 + 0x12]\n 81995: a4 = u8 [a0 + 0x13]\n 81998: a1 = a1 << 0x8\n 82001: a1 = a1 | a2\n 82004: a3 = a3 << 0x10\n 82007: a4 = a4 << 0x18\n 82010: a3 = a3 | a4\n 82013: a1 = a1 | a3\n 82016: a2 = u8 [a0 + 0x15]\n 82019: a3 = u8 [a0 + 0x14]\n 82022: a4 = u8 [a0 + 0x16]\n 82025: a5 = u8 [a0 + 0x17]\n 82028: a2 = a2 << 0x8\n 82031: a2 = a2 | a3\n 82034: a4 = a4 << 0x10\n 82037: a5 = a5 << 0x18\n 82040: a4 = a4 | a5\n 82043: a2 = a2 | a4\n 82046: a2 = a2 << 0x20\n 82049: t0 = a2 | a1\n 82052: a2 = u8 [a0 + 0x1]\n 82055: a3 = u8 [a0]\n 82057: a4 = u8 [a0 + 0x2]\n 82060: a5 = u8 [a0 + 0x3]\n 82063: a2 = a2 << 0x8\n 82066: a2 = a2 | a3\n 82069: a4 = a4 << 0x10\n 82072: a5 = a5 << 0x18\n 82075: a4 = a4 | a5\n 82078: a2 = a2 | a4\n 82081: a3 = u8 [a0 + 0x5]\n 82084: a4 = u8 [a0 + 0x4]\n 82087: a5 = u8 [a0 + 0x6]\n 82090: s1 = u8 [a0 + 0x7]\n 82093: a3 = a3 << 0x8\n 82096: a3 = a3 | a4\n 82099: a5 = a5 << 0x10\n 82102: s1 = s1 << 0x18\n 82105: a5 = a5 | s1\n 82108: a3 = a3 | a5\n 82111: a3 = a3 << 0x20\n 82114: a2 = a2 | a3\n 82117: a3 = u8 [a0 + 0x19]\n 82120: a4 = u8 [a0 + 0x18]\n 82123: a5 = u8 [a0 + 0x1a]\n 82126: s1 = u8 [a0 + 0x1b]\n 82129: a3 = a3 << 0x8\n 82132: a3 = a3 | a4\n 82135: a5 = a5 << 0x10\n 82138: s1 = s1 << 0x18\n 82141: a5 = a5 | s1\n 82144: a3 = a3 | a5\n 82147: a4 = u8 [a0 + 0x1d]\n 82150: a5 = u8 [a0 + 0x1c]\n 82153: s1 = u8 [a0 + 0x1e]\n 82156: a1 = u8 [a0 + 0x1f]\n 82159: a4 = a4 << 0x8\n 82162: a4 = a4 | a5\n 82165: s1 = s1 << 0x10\n 82168: a1 = a1 << 0x18\n 82171: a1 = a1 | s1\n 82174: a1 = a1 | a4\n 82177: a1 = a1 << 0x20\n 82180: a3 = a3 | a1\n 82183: a1 = u8 [a0 + 0x9]\n 82186: a4 = u8 [a0 + 0x8]\n 82189: a5 = u8 [a0 + 0xa]\n 82192: s1 = u8 [a0 + 0xb]\n 82195: a1 = a1 << 0x8\n 82198: a1 = a1 | a4\n 82201: a5 = a5 << 0x10\n 82204: s1 = s1 << 0x18\n 82207: a5 = a5 | s1\n 82210: a1 = a1 | a5\n 82213: a4 = u8 [a0 + 0xd]\n 82216: a5 = u8 [a0 + 0xc]\n 82219: s1 = u8 [a0 + 0xe]\n 82222: a0 = u8 [a0 + 0xf]\n 82225: a4 = a4 << 0x8\n 82228: a4 = a4 | a5\n 82231: s1 = s1 << 0x10\n 82234: a0 = a0 << 0x18\n 82237: a0 = a0 | s1\n 82240: a0 = a0 | a4\n 82243: a0 = a0 << 0x20\n 82246: a0 = a0 | a1\n 82249: a1 = reverse a0\n 82251: a0 = reverse a3\n 82253: a2 = reverse a2\n 82255: a3 = reverse t0\n 82257: a2 = a2 | a3\n 82260: a3 = a0 | a1\n 82263: a3 = a3 | a2\n 82266: a3 = a3 >> 0x20\n 82269: a1 = a1 | a2\n 82272: a1 = a1 << 0x20\n 82275: a1 = a1 | a3\n 82278: jump @1113 if a1 != 0\n      : @1095 (gas: 2)\n 82282: i32 a0 = a0 + 0\n 82284: ra = 950, jump @0\n      : @1096 [@dyn 475] (gas: 27)\n 82291: a1 = u64 [0x20020]\n 82296: a2 = u64 [0x20028]\n 82301: a3 = u64 [0x20030]\n 82306: a4 = u64 [0x20038]\n 82311: u64 [sp + 0x418] = a1\n 82315: u64 [sp + 0x410] = a2\n 82319: u64 [sp + 0x408] = a3\n 82323: u64 [sp + 0x400] = a4\n 82327: a1 = u64 [sp + 0x20]\n 82330: u64 [sp + 0x430] = a1\n 82334: a1 = u64 [sp + 0x30]\n 82337: u64 [sp + 0x428] = a1\n 82341: a1 = u64 [sp + 0x38]\n 82344: u64 [sp + 0x420] = a1\n 82348: a1 = u64 [sp + 0x28]\n 82351: u64 [sp + 0x438] = a1\n 82355: i32 a2 = a0 + 0\n 82357: i32 a0 = sp + 0x400\n 82361: a1 = 0x2\n 82364: a3 = 0\n 82366: ecalli 6 // 'deposit_event'\n 82368: sp = s0 + 0xfffffffffffffba0\n 82372: ra = u64 [sp + 0x458]\n 82376: s0 = u64 [sp + 0x450]\n 82380: s1 = u64 [sp + 0x448]\n 82384: sp = sp + 0x460\n 82388: ret\n      : @1097 (gas: 3)\n 82390: a0 = 0x40\n 82393: a1 = 0x20\n 82396: ra = 952, jump @0\n      : @1098 [@dyn 476] (gas: 103)\n 82403: a1 = u8 [a0 + 0x11]\n 82406: a2 = u8 [a0 + 0x10]\n 82409: a3 = u8 [a0 + 0x12]\n 82412: a4 = u8 [a0 + 0x13]\n 82415: a1 = a1 << 0x8\n 82418: a1 = a1 | a2\n 82421: a3 = a3 << 0x10\n 82424: a4 = a4 << 0x18\n 82427: a3 = a3 | a4\n 82430: a1 = a1 | a3\n 82433: a2 = u8 [a0 + 0x15]\n 82436: a3 = u8 [a0 + 0x14]\n 82439: a4 = u8 [a0 + 0x16]\n 82442: a5 = u8 [a0 + 0x17]\n 82445: a2 = a2 << 0x8\n 82448: a2 = a2 | a3\n 82451: a4 = a4 << 0x10\n 82454: a5 = a5 << 0x18\n 82457: a4 = a4 | a5\n 82460: a2 = a2 | a4\n 82463: a2 = a2 << 0x20\n 82466: t0 = a2 | a1\n 82469: a2 = u8 [a0 + 0x1]\n 82472: a3 = u8 [a0]\n 82474: a4 = u8 [a0 + 0x2]\n 82477: a5 = u8 [a0 + 0x3]\n 82480: a2 = a2 << 0x8\n 82483: a2 = a2 | a3\n 82486: a4 = a4 << 0x10\n 82489: a5 = a5 << 0x18\n 82492: a4 = a4 | a5\n 82495: a2 = a2 | a4\n 82498: a3 = u8 [a0 + 0x5]\n 82501: a4 = u8 [a0 + 0x4]\n 82504: a5 = u8 [a0 + 0x6]\n 82507: s1 = u8 [a0 + 0x7]\n 82510: a3 = a3 << 0x8\n 82513: a3 = a3 | a4\n 82516: a5 = a5 << 0x10\n 82519: s1 = s1 << 0x18\n 82522: a5 = a5 | s1\n 82525: a3 = a3 | a5\n 82528: a3 = a3 << 0x20\n 82531: a2 = a2 | a3\n 82534: a3 = u8 [a0 + 0x19]\n 82537: a4 = u8 [a0 + 0x18]\n 82540: a5 = u8 [a0 + 0x1a]\n 82543: s1 = u8 [a0 + 0x1b]\n 82546: a3 = a3 << 0x8\n 82549: a3 = a3 | a4\n 82552: a5 = a5 << 0x10\n 82555: s1 = s1 << 0x18\n 82558: a5 = a5 | s1\n 82561: a3 = a3 | a5\n 82564: a4 = u8 [a0 + 0x1d]\n 82567: a5 = u8 [a0 + 0x1c]\n 82570: s1 = u8 [a0 + 0x1e]\n 82573: a1 = u8 [a0 + 0x1f]\n 82576: a4 = a4 << 0x8\n 82579: a4 = a4 | a5\n 82582: s1 = s1 << 0x10\n 82585: a1 = a1 << 0x18\n 82588: a1 = a1 | s1\n 82591: a1 = a1 | a4\n 82594: a1 = a1 << 0x20\n 82597: a3 = a3 | a1\n 82600: a1 = u8 [a0 + 0x9]\n 82603: a4 = u8 [a0 + 0x8]\n 82606: a5 = u8 [a0 + 0xa]\n 82609: s1 = u8 [a0 + 0xb]\n 82612: a1 = a1 << 0x8\n 82615: a1 = a1 | a4\n 82618: a5 = a5 << 0x10\n 82621: s1 = s1 << 0x18\n 82624: a5 = a5 | s1\n 82627: a1 = a1 | a5\n 82630: a4 = u8 [a0 + 0xd]\n 82633: a5 = u8 [a0 + 0xc]\n 82636: s1 = u8 [a0 + 0xe]\n 82639: a0 = u8 [a0 + 0xf]\n 82642: a4 = a4 << 0x8\n 82645: a4 = a4 | a5\n 82648: s1 = s1 << 0x10\n 82651: a0 = a0 << 0x18\n 82654: a0 = a0 | s1\n 82657: a0 = a0 | a4\n 82660: a0 = a0 << 0x20\n 82663: a0 = a0 | a1\n 82666: s1 = reverse a0\n 82668: a1 = reverse a3\n 82670: a2 = reverse a2\n 82672: a0 = reverse t0\n 82674: u64 [sp + 0xf8] = a0\n 82678: u64 [sp + 0xf0] = a2\n 82682: a0 = a0 | a2\n 82685: a2 = a1\n 82687: a1 = a1 | s1\n 82690: a1 = a1 | a0\n 82693: a1 = a1 >> 0x20\n 82696: a0 = a0 | s1\n 82699: a0 = a0 << 0x20\n 82702: a0 = a0 | a1\n 82705: jump @1113 if a0 != 0\n      : @1099 (gas: 5)\n 82709: u64 [sp + 0xe8] = a2\n 82713: i32 a0 = a2 + 0\n 82715: a1 = 0x20\n 82718: u64 [sp + 0xe0] = a0\n 82722: ra = 954, jump @0\n      : @1100 [@dyn 477] (gas: 50)\n 82729: u8 [a0 + 31] = 0\n 82732: u8 [a0 + 30] = 0\n 82735: u8 [a0 + 29] = 0\n 82738: u8 [a0 + 28] = 0\n 82741: u8 [a0 + 27] = 0\n 82744: u8 [a0 + 26] = 0\n 82747: u8 [a0 + 25] = 0\n 82750: u8 [a0 + 24] = 0\n 82753: u8 [a0 + 23] = 0\n 82756: u8 [a0 + 22] = 0\n 82759: u8 [a0 + 21] = 0\n 82762: u8 [a0 + 20] = 0\n 82765: u8 [a0 + 19] = 0\n 82768: u8 [a0 + 18] = 0\n 82771: u8 [a0 + 17] = 0\n 82774: u8 [a0 + 16] = 0\n 82777: u8 [a0 + 15] = 0\n 82780: u8 [a0 + 14] = 0\n 82783: u8 [a0 + 13] = 0\n 82786: u8 [a0 + 12] = 0\n 82789: u8 [a0 + 11] = 0\n 82792: u8 [a0 + 10] = 0\n 82795: u8 [a0 + 9] = 0\n 82798: u8 [a0 + 8] = 0\n 82801: u8 [a0 + 7] = 0\n 82804: u8 [a0 + 6] = 0\n 82807: u8 [a0 + 5] = 0\n 82810: u8 [a0 + 4] = 0\n 82813: u8 [a0 + 3] = 0xa0\n 82818: u8 [a0 + 2] = 0x79\n 82822: u8 [a0 + 1] = 0xc3\n 82827: u8 [a0 + 0] = 0x8\n 82830: a1 = u64 [sp + 0xe8]\n 82834: a0 = a1 + 0x4\n 82837: a1 = a0 <u a1\n 82840: a3 = u64 [sp + 0xf8]\n 82844: a2 = a3 + a1\n 82847: a3 = a2 <u a3\n 82850: a3 = a1 if a1 == 0\n 82853: a3 = a3 + s1\n 82856: a1 = a3 <u s1\n 82859: a4 = u64 [sp + 0xf0]\n 82863: a4 = a4 + a1\n 82866: u64 [sp + 0x388] = a2\n 82870: u64 [sp + 0x380] = a0\n 82874: u64 [sp + 0x390] = a3\n 82878: a0 = sp + 0x3a0\n 82882: a1 = sp + 0x380\n 82886: u64 [sp + 0x398] = a4\n 82890: ra = 956, jump @1038\n      : @1101 [@dyn 478] (gas: 5)\n 82896: a0 = u64 [sp + 0x3a8]\n 82900: t0 = u64 [sp + 0x3b8]\n 82904: t1 = u64 [sp + 0x3a0]\n 82908: a3 = u64 [sp + 0x3b0]\n 82912: jump @1112\n      : @1102 (gas: 3)\n 82915: a0 = 0x40\n 82918: a1 = 0x20\n 82921: ra = 958, jump @0\n      : @1103 [@dyn 479] (gas: 103)\n 82928: a1 = u8 [a0 + 0x11]\n 82931: a2 = u8 [a0 + 0x10]\n 82934: a3 = u8 [a0 + 0x12]\n 82937: a4 = u8 [a0 + 0x13]\n 82940: a1 = a1 << 0x8\n 82943: a1 = a1 | a2\n 82946: a3 = a3 << 0x10\n 82949: a4 = a4 << 0x18\n 82952: a3 = a3 | a4\n 82955: a1 = a1 | a3\n 82958: a2 = u8 [a0 + 0x15]\n 82961: a3 = u8 [a0 + 0x14]\n 82964: a4 = u8 [a0 + 0x16]\n 82967: a5 = u8 [a0 + 0x17]\n 82970: a2 = a2 << 0x8\n 82973: a2 = a2 | a3\n 82976: a4 = a4 << 0x10\n 82979: a5 = a5 << 0x18\n 82982: a4 = a4 | a5\n 82985: a2 = a2 | a4\n 82988: a2 = a2 << 0x20\n 82991: t0 = a2 | a1\n 82994: a2 = u8 [a0 + 0x1]\n 82997: a3 = u8 [a0]\n 82999: a4 = u8 [a0 + 0x2]\n 83002: a5 = u8 [a0 + 0x3]\n 83005: a2 = a2 << 0x8\n 83008: a2 = a2 | a3\n 83011: a4 = a4 << 0x10\n 83014: a5 = a5 << 0x18\n 83017: a4 = a4 | a5\n 83020: a2 = a2 | a4\n 83023: a3 = u8 [a0 + 0x5]\n 83026: a4 = u8 [a0 + 0x4]\n 83029: a5 = u8 [a0 + 0x6]\n 83032: s1 = u8 [a0 + 0x7]\n 83035: a3 = a3 << 0x8\n 83038: a3 = a3 | a4\n 83041: a5 = a5 << 0x10\n 83044: s1 = s1 << 0x18\n 83047: a5 = a5 | s1\n 83050: a3 = a3 | a5\n 83053: a3 = a3 << 0x20\n 83056: a2 = a2 | a3\n 83059: a3 = u8 [a0 + 0x19]\n 83062: a4 = u8 [a0 + 0x18]\n 83065: a5 = u8 [a0 + 0x1a]\n 83068: s1 = u8 [a0 + 0x1b]\n 83071: a3 = a3 << 0x8\n 83074: a3 = a3 | a4\n 83077: a5 = a5 << 0x10\n 83080: s1 = s1 << 0x18\n 83083: a5 = a5 | s1\n 83086: a3 = a3 | a5\n 83089: a4 = u8 [a0 + 0x1d]\n 83092: a5 = u8 [a0 + 0x1c]\n 83095: s1 = u8 [a0 + 0x1e]\n 83098: a1 = u8 [a0 + 0x1f]\n 83101: a4 = a4 << 0x8\n 83104: a4 = a4 | a5\n 83107: s1 = s1 << 0x10\n 83110: a1 = a1 << 0x18\n 83113: a1 = a1 | s1\n 83116: a1 = a1 | a4\n 83119: a1 = a1 << 0x20\n 83122: a3 = a3 | a1\n 83125: a1 = u8 [a0 + 0x9]\n 83128: a4 = u8 [a0 + 0x8]\n 83131: a5 = u8 [a0 + 0xa]\n 83134: s1 = u8 [a0 + 0xb]\n 83137: a1 = a1 << 0x8\n 83140: a1 = a1 | a4\n 83143: a5 = a5 << 0x10\n 83146: s1 = s1 << 0x18\n 83149: a5 = a5 | s1\n 83152: a1 = a1 | a5\n 83155: a4 = u8 [a0 + 0xd]\n 83158: a5 = u8 [a0 + 0xc]\n 83161: s1 = u8 [a0 + 0xe]\n 83164: a0 = u8 [a0 + 0xf]\n 83167: a4 = a4 << 0x8\n 83170: a4 = a4 | a5\n 83173: s1 = s1 << 0x10\n 83176: a0 = a0 << 0x18\n 83179: a0 = a0 | s1\n 83182: a0 = a0 | a4\n 83185: a0 = a0 << 0x20\n 83188: a0 = a0 | a1\n 83191: s1 = reverse a0\n 83193: a1 = reverse a3\n 83195: a2 = reverse a2\n 83197: a0 = reverse t0\n 83199: u64 [sp + 0xf8] = a0\n 83203: u64 [sp + 0xf0] = a2\n 83207: a0 = a0 | a2\n 83210: a2 = a1\n 83212: a1 = a1 | s1\n 83215: a1 = a1 | a0\n 83218: a1 = a1 >> 0x20\n 83221: a0 = a0 | s1\n 83224: a0 = a0 << 0x20\n 83227: a0 = a0 | a1\n 83230: jump @1113 if a0 != 0\n      : @1104 (gas: 5)\n 83234: u64 [sp + 0xe8] = a2\n 83238: i32 a0 = a2 + 0\n 83240: a1 = 0x20\n 83243: u64 [sp + 0xe0] = a0\n 83247: ra = 960, jump @0\n      : @1105 [@dyn 480] (gas: 50)\n 83254: u8 [a0 + 31] = 0\n 83257: u8 [a0 + 30] = 0\n 83260: u8 [a0 + 29] = 0\n 83263: u8 [a0 + 28] = 0\n 83266: u8 [a0 + 27] = 0\n 83269: u8 [a0 + 26] = 0\n 83272: u8 [a0 + 25] = 0\n 83275: u8 [a0 + 24] = 0\n 83278: u8 [a0 + 23] = 0\n 83281: u8 [a0 + 22] = 0\n 83284: u8 [a0 + 21] = 0\n 83287: u8 [a0 + 20] = 0\n 83290: u8 [a0 + 19] = 0\n 83293: u8 [a0 + 18] = 0\n 83296: u8 [a0 + 17] = 0\n 83299: u8 [a0 + 16] = 0\n 83302: u8 [a0 + 15] = 0\n 83305: u8 [a0 + 14] = 0\n 83308: u8 [a0 + 13] = 0\n 83311: u8 [a0 + 12] = 0\n 83314: u8 [a0 + 11] = 0\n 83317: u8 [a0 + 10] = 0\n 83320: u8 [a0 + 9] = 0\n 83323: u8 [a0 + 8] = 0\n 83326: u8 [a0 + 7] = 0\n 83329: u8 [a0 + 6] = 0\n 83332: u8 [a0 + 5] = 0\n 83335: u8 [a0 + 4] = 0\n 83338: u8 [a0 + 3] = 0xa0\n 83343: u8 [a0 + 2] = 0x79\n 83347: u8 [a0 + 1] = 0xc3\n 83352: u8 [a0 + 0] = 0x8\n 83355: a1 = u64 [sp + 0xe8]\n 83359: a0 = a1 + 0x4\n 83362: a1 = a0 <u a1\n 83365: a3 = u64 [sp + 0xf8]\n 83369: a2 = a3 + a1\n 83372: a3 = a2 <u a3\n 83375: a3 = a1 if a1 == 0\n 83378: a3 = a3 + s1\n 83381: a1 = a3 <u s1\n 83384: a4 = u64 [sp + 0xf0]\n 83388: a4 = a4 + a1\n 83391: u64 [sp + 0x348] = a2\n 83395: u64 [sp + 0x340] = a0\n 83399: u64 [sp + 0x350] = a3\n 83403: a0 = sp + 0x360\n 83407: a1 = sp + 0x340\n 83411: u64 [sp + 0x358] = a4\n 83415: ra = 962, jump @1046\n      : @1106 [@dyn 481] (gas: 5)\n 83421: a0 = u64 [sp + 0x368]\n 83425: t0 = u64 [sp + 0x378]\n 83429: t1 = u64 [sp + 0x360]\n 83433: a3 = u64 [sp + 0x370]\n 83437: jump @1112\n      : @1107 (gas: 3)\n 83440: a0 = 0x40\n 83443: a1 = 0x20\n 83446: ra = 964, jump @0\n      : @1108 [@dyn 482] (gas: 103)\n 83453: a1 = u8 [a0 + 0x11]\n 83456: a2 = u8 [a0 + 0x10]\n 83459: a3 = u8 [a0 + 0x12]\n 83462: a4 = u8 [a0 + 0x13]\n 83465: a1 = a1 << 0x8\n 83468: a1 = a1 | a2\n 83471: a3 = a3 << 0x10\n 83474: a4 = a4 << 0x18\n 83477: a3 = a3 | a4\n 83480: a1 = a1 | a3\n 83483: a2 = u8 [a0 + 0x15]\n 83486: a3 = u8 [a0 + 0x14]\n 83489: a4 = u8 [a0 + 0x16]\n 83492: a5 = u8 [a0 + 0x17]\n 83495: a2 = a2 << 0x8\n 83498: a2 = a2 | a3\n 83501: a4 = a4 << 0x10\n 83504: a5 = a5 << 0x18\n 83507: a4 = a4 | a5\n 83510: a2 = a2 | a4\n 83513: a2 = a2 << 0x20\n 83516: t0 = a2 | a1\n 83519: a2 = u8 [a0 + 0x1]\n 83522: a3 = u8 [a0]\n 83524: a4 = u8 [a0 + 0x2]\n 83527: a5 = u8 [a0 + 0x3]\n 83530: a2 = a2 << 0x8\n 83533: a2 = a2 | a3\n 83536: a4 = a4 << 0x10\n 83539: a5 = a5 << 0x18\n 83542: a4 = a4 | a5\n 83545: a2 = a2 | a4\n 83548: a3 = u8 [a0 + 0x5]\n 83551: a4 = u8 [a0 + 0x4]\n 83554: a5 = u8 [a0 + 0x6]\n 83557: s1 = u8 [a0 + 0x7]\n 83560: a3 = a3 << 0x8\n 83563: a3 = a3 | a4\n 83566: a5 = a5 << 0x10\n 83569: s1 = s1 << 0x18\n 83572: a5 = a5 | s1\n 83575: a3 = a3 | a5\n 83578: a3 = a3 << 0x20\n 83581: a2 = a2 | a3\n 83584: a3 = u8 [a0 + 0x19]\n 83587: a4 = u8 [a0 + 0x18]\n 83590: a5 = u8 [a0 + 0x1a]\n 83593: s1 = u8 [a0 + 0x1b]\n 83596: a3 = a3 << 0x8\n 83599: a3 = a3 | a4\n 83602: a5 = a5 << 0x10\n 83605: s1 = s1 << 0x18\n 83608: a5 = a5 | s1\n 83611: a3 = a3 | a5\n 83614: a4 = u8 [a0 + 0x1d]\n 83617: a5 = u8 [a0 + 0x1c]\n 83620: s1 = u8 [a0 + 0x1e]\n 83623: a1 = u8 [a0 + 0x1f]\n 83626: a4 = a4 << 0x8\n 83629: a4 = a4 | a5\n 83632: s1 = s1 << 0x10\n 83635: a1 = a1 << 0x18\n 83638: a1 = a1 | s1\n 83641: a1 = a1 | a4\n 83644: a1 = a1 << 0x20\n 83647: a3 = a3 | a1\n 83650: a1 = u8 [a0 + 0x9]\n 83653: a4 = u8 [a0 + 0x8]\n 83656: a5 = u8 [a0 + 0xa]\n 83659: s1 = u8 [a0 + 0xb]\n 83662: a1 = a1 << 0x8\n 83665: a1 = a1 | a4\n 83668: a5 = a5 << 0x10\n 83671: s1 = s1 << 0x18\n 83674: a5 = a5 | s1\n 83677: a1 = a1 | a5\n 83680: a4 = u8 [a0 + 0xd]\n 83683: a5 = u8 [a0 + 0xc]\n 83686: s1 = u8 [a0 + 0xe]\n 83689: a0 = u8 [a0 + 0xf]\n 83692: a4 = a4 << 0x8\n 83695: a4 = a4 | a5\n 83698: s1 = s1 << 0x10\n 83701: a0 = a0 << 0x18\n 83704: a0 = a0 | s1\n 83707: a0 = a0 | a4\n 83710: a0 = a0 << 0x20\n 83713: a0 = a0 | a1\n 83716: s1 = reverse a0\n 83718: a1 = reverse a3\n 83720: a2 = reverse a2\n 83722: a0 = reverse t0\n 83724: u64 [sp + 0xf8] = a0\n 83728: u64 [sp + 0xf0] = a2\n 83732: a0 = a0 | a2\n 83735: a2 = a1\n 83737: a1 = a1 | s1\n 83740: a1 = a1 | a0\n 83743: a1 = a1 >> 0x20\n 83746: a0 = a0 | s1\n 83749: a0 = a0 << 0x20\n 83752: a0 = a0 | a1\n 83755: jump @1113 if a0 != 0\n      : @1109 (gas: 5)\n 83759: u64 [sp + 0xe8] = a2\n 83763: i32 a0 = a2 + 0\n 83765: a1 = 0x20\n 83768: u64 [sp + 0xe0] = a0\n 83772: ra = 966, jump @0\n      : @1110 [@dyn 483] (gas: 50)\n 83779: u8 [a0 + 31] = 0\n 83782: u8 [a0 + 30] = 0\n 83785: u8 [a0 + 29] = 0\n 83788: u8 [a0 + 28] = 0\n 83791: u8 [a0 + 27] = 0\n 83794: u8 [a0 + 26] = 0\n 83797: u8 [a0 + 25] = 0\n 83800: u8 [a0 + 24] = 0\n 83803: u8 [a0 + 23] = 0\n 83806: u8 [a0 + 22] = 0\n 83809: u8 [a0 + 21] = 0\n 83812: u8 [a0 + 20] = 0\n 83815: u8 [a0 + 19] = 0\n 83818: u8 [a0 + 18] = 0\n 83821: u8 [a0 + 17] = 0\n 83824: u8 [a0 + 16] = 0\n 83827: u8 [a0 + 15] = 0\n 83830: u8 [a0 + 14] = 0\n 83833: u8 [a0 + 13] = 0\n 83836: u8 [a0 + 12] = 0\n 83839: u8 [a0 + 11] = 0\n 83842: u8 [a0 + 10] = 0\n 83845: u8 [a0 + 9] = 0\n 83848: u8 [a0 + 8] = 0\n 83851: u8 [a0 + 7] = 0\n 83854: u8 [a0 + 6] = 0\n 83857: u8 [a0 + 5] = 0\n 83860: u8 [a0 + 4] = 0\n 83863: u8 [a0 + 3] = 0xa0\n 83868: u8 [a0 + 2] = 0x79\n 83872: u8 [a0 + 1] = 0xc3\n 83877: u8 [a0 + 0] = 0x8\n 83880: a1 = u64 [sp + 0xe8]\n 83884: a0 = a1 + 0x4\n 83887: a1 = a0 <u a1\n 83890: a3 = u64 [sp + 0xf8]\n 83894: a2 = a3 + a1\n 83897: a3 = a2 <u a3\n 83900: a3 = a1 if a1 == 0\n 83903: a3 = a3 + s1\n 83906: a1 = a3 <u s1\n 83909: a4 = u64 [sp + 0xf0]\n 83913: a4 = a4 + a1\n 83916: u64 [sp + 0x148] = a2\n 83920: u64 [sp + 0x140] = a0\n 83924: u64 [sp + 0x150] = a3\n 83928: a0 = sp + 0x160\n 83932: a1 = sp + 0x140\n 83936: u64 [sp + 0x158] = a4\n 83940: ra = 968, jump @791\n      : @1111 [@dyn 484] (gas: 5)\n 83946: a0 = u64 [sp + 0x168]\n 83950: t0 = u64 [sp + 0x178]\n 83954: t1 = u64 [sp + 0x160]\n 83958: a3 = u64 [sp + 0x170]\n 83962: fallthrough\n      : @1112 (gas: 26)\n 83963: a1 = u64 [sp + 0xf8]\n 83967: a4 = a0 ^ a1\n 83970: a5 = a0 <u a1\n 83973: t2 = a1\n 83975: a2 = u64 [sp + 0xe8]\n 83979: a1 = t1 <u a2\n 83982: a5 = a1 if a4 == 0\n 83985: a4 = a3 - s1\n 83988: a3 = a3 <u s1\n 83991: s1 = u64 [sp + 0xf0]\n 83995: s1 = t0 - s1\n 83998: s1 = s1 - a3\n 84001: a3 = a4 <u a5\n 84004: s1 = s1 - a3\n 84007: a4 = a4 - a5\n 84010: a0 = a0 - t2\n 84013: a1 = a0 - a1\n 84016: a0 = t1 - a2\n 84019: a1 = a1 | s1\n 84022: a2 = a0 | a4\n 84025: a2 = a2 | a1\n 84028: a1 = a1 | a4\n 84031: a2 = a2 >> 0x20\n 84034: a1 = a1 << 0x20\n 84037: a1 = a1 | a2\n 84040: jump @1114 if a1 == 0\n      : @1113 (gas: 1)\n 84043: trap\n      : @1114 (gas: 4)\n 84044: i32 s1 = a0 + 0\n 84046: a0 = u64 [sp + 0xe0]\n 84050: a1 = s1\n 84052: ra = 970, jump @0\n      : @1115 [@dyn 485] (gas: 6)\n 84059: i32 a1 = a0 + 0\n 84061: a0 = 0x1\n 84064: a2 = s1\n 84066: ra = 0x3cc\n 84070: ecalli 14 // 'seal_return'\n 84072: fallthrough\n      : @1116 [@dyn 486] (gas: 53)\n 84073: sp = sp + 0xffffffffffffff30\n 84077: u64 [sp + 0xc8] = ra\n 84081: u64 [sp + 0xc0] = s0\n 84085: u64 [sp + 0xb8] = s1\n 84089: s0 = sp + 0xd0\n 84093: sp = sp & 0xfffffffffffffff0\n 84096: a4 = u64 [a0]\n 84098: u64 [sp + 0x28] = a4\n 84101: a4 = u64 [a0 + 0x8]\n 84104: u64 [sp + 0x20] = a4\n 84107: a4 = u64 [a0 + 0x10]\n 84110: u64 [sp + 0x18] = a4\n 84113: a0 = u64 [a0 + 0x18]\n 84116: u64 [sp + 0x10] = a0\n 84119: a0 = u64 [a1]\n 84121: u64 [sp + 0x8] = a0\n 84124: ra = u64 [a1 + 0x8]\n 84127: s1 = u64 [a1 + 0x10]\n 84130: t2 = u64 [a1 + 0x18]\n 84133: t1 = u64 [a2]\n 84135: t0 = u64 [a2 + 0x8]\n 84138: a5 = u64 [a2 + 0x10]\n 84141: a4 = u64 [a2 + 0x18]\n 84144: a2 = u64 [a3]\n 84146: a1 = u64 [a3 + 0x8]\n 84149: a0 = u64 [a3 + 0x10]\n 84152: a3 = u64 [a3 + 0x18]\n 84155: u64 [sp + 0x48] = a3\n 84158: u64 [sp + 0x40] = a0\n 84161: u64 [sp + 0x38] = a1\n 84164: u64 [sp + 0x30] = a2\n 84167: u64 [sp + 0x68] = a4\n 84170: u64 [sp + 0x60] = a5\n 84173: u64 [sp + 0x58] = t0\n 84176: u64 [sp + 0x50] = t1\n 84179: u64 [sp + 0x88] = t2\n 84183: u64 [sp + 0x80] = s1\n 84187: u64 [sp + 0x78] = ra\n 84190: a0 = u64 [sp + 0x8]\n 84193: u64 [sp + 0x70] = a0\n 84196: a0 = u64 [sp + 0x10]\n 84199: u64 [sp + 0xa8] = a0\n 84203: a0 = u64 [sp + 0x18]\n 84206: u64 [sp + 0xa0] = a0\n 84210: a0 = u64 [sp + 0x20]\n 84213: u64 [sp + 0x98] = a0\n 84217: a0 = sp + 0x90\n 84221: a1 = sp + 0x70\n 84224: a2 = sp + 0x50\n 84227: a3 = sp + 0x30\n 84230: a4 = u64 [sp + 0x28]\n 84233: u64 [sp + 0x90] = a4\n 84237: ra = 974, jump @1010\n      : @1117 [@dyn 487] (gas: 6)\n 84243: sp = s0 + 0xffffffffffffff30\n 84247: ra = u64 [sp + 0xc8]\n 84251: s0 = u64 [sp + 0xc0]\n 84255: s1 = u64 [sp + 0xb8]\n 84259: sp = sp + 0xd0\n 84263: ret\n      : @1118 (gas: 17)\n 84265: sp = sp + 0xffffffffffffffa0\n 84268: u64 [sp + 0x58] = ra\n 84271: u64 [sp + 0x50] = s0\n 84274: u64 [sp + 0x48] = s1\n 84277: a3 = u64 [a1 + 0x18]\n 84280: a4 = u64 [a1 + 0x10]\n 84283: a5 = u64 [a1 + 0x8]\n 84286: s1 = u64 [a1]\n 84288: a1 = a5 | a3\n 84291: a2 = s1 | a4\n 84294: a2 = a2 | a1\n 84297: a2 = a2 >> 0x20\n 84300: a1 = a1 | a4\n 84303: a1 = a1 << 0x20\n 84306: a1 = a1 | a2\n 84309: u64 [sp + 0x28] = a0\n 84312: jump @1127 if a1 != 0\n      : @1119 (gas: 19)\n 84316: a0 = s1 + 0x20\n 84319: u64 [sp + 0x40] = a0\n 84322: a0 = a0 <u s1\n 84325: a1 = a5 + a0\n 84328: u64 [sp + 0x38] = a1\n 84331: u64 [sp + 0x10] = a5\n 84334: s0 = a1 <u a5\n 84337: s0 = a0 if a0 == 0\n 84340: s0 = s0 + a4\n 84343: u64 [sp + 0x18] = a4\n 84346: a0 = s0 <u a4\n 84349: u64 [sp + 0x20] = a3\n 84352: a0 = a0 + a3\n 84355: u64 [sp + 0x30] = a0\n 84358: u64 [sp + 0x8] = s1\n 84361: i32 a0 = s1 + 0\n 84363: a1 = 0x20\n 84366: s1 = 0x20\n 84369: ra = 976, jump @0\n      : @1120 [@dyn 488] (gas: 43)\n 84376: u8 [a0 + 0x1f] = s1\n 84379: a1 = u64 [sp + 0x40]\n 84382: a1 = a1 | s0\n 84385: a2 = u64 [sp + 0x38]\n 84388: a3 = u64 [sp + 0x30]\n 84391: a2 = a2 | a3\n 84394: a1 = a1 | a2\n 84397: a1 = a1 >> 0x20\n 84400: a2 = a2 | s0\n 84403: a2 = a2 << 0x20\n 84406: a1 = a1 | a2\n 84409: u8 [a0 + 30] = 0\n 84412: u8 [a0 + 29] = 0\n 84415: u8 [a0 + 28] = 0\n 84418: u8 [a0 + 27] = 0\n 84421: u8 [a0 + 26] = 0\n 84424: u8 [a0 + 25] = 0\n 84427: u8 [a0 + 24] = 0\n 84430: u8 [a0 + 23] = 0\n 84433: u8 [a0 + 22] = 0\n 84436: u8 [a0 + 21] = 0\n 84439: u8 [a0 + 20] = 0\n 84442: u8 [a0 + 19] = 0\n 84445: u8 [a0 + 18] = 0\n 84448: u8 [a0 + 17] = 0\n 84451: u8 [a0 + 16] = 0\n 84454: u8 [a0 + 15] = 0\n 84457: u8 [a0 + 14] = 0\n 84460: u8 [a0 + 13] = 0\n 84463: u8 [a0 + 12] = 0\n 84466: u8 [a0 + 11] = 0\n 84469: u8 [a0 + 10] = 0\n 84472: u8 [a0 + 9] = 0\n 84475: u8 [a0 + 8] = 0\n 84478: u8 [a0 + 7] = 0\n 84481: u8 [a0 + 6] = 0\n 84484: u8 [a0 + 5] = 0\n 84487: u8 [a0 + 4] = 0\n 84490: u8 [a0 + 3] = 0\n 84493: u8 [a0 + 2] = 0\n 84496: u8 [a0 + 1] = 0\n 84499: u8 [a0 + 0] = 0\n 84501: jump @1127 if a1 != 0\n      : @1121 (gas: 6)\n 84505: s1 = s0\n 84507: s0 = u64 [sp + 0x40]\n 84510: i32 a0 = s0 + 0\n 84512: a1 = 0x20\n 84515: u64 [sp] = a0\n 84517: ra = 978, jump @0\n      : @1122 [@dyn 489] (gas: 42)\n 84524: u8 [a0 + 31] = 0x21\n 84528: u8 [a0 + 30] = 0\n 84531: u8 [a0 + 29] = 0\n 84534: u8 [a0 + 28] = 0\n 84537: u8 [a0 + 27] = 0\n 84540: u8 [a0 + 26] = 0\n 84543: u8 [a0 + 25] = 0\n 84546: u8 [a0 + 24] = 0\n 84549: u8 [a0 + 23] = 0\n 84552: u8 [a0 + 22] = 0\n 84555: u8 [a0 + 21] = 0\n 84558: u8 [a0 + 20] = 0\n 84561: u8 [a0 + 19] = 0\n 84564: u8 [a0 + 18] = 0\n 84567: u8 [a0 + 17] = 0\n 84570: u8 [a0 + 16] = 0\n 84573: u8 [a0 + 15] = 0\n 84576: u8 [a0 + 14] = 0\n 84579: u8 [a0 + 13] = 0\n 84582: u8 [a0 + 12] = 0\n 84585: u8 [a0 + 11] = 0\n 84588: u8 [a0 + 10] = 0\n 84591: u8 [a0 + 9] = 0\n 84594: u8 [a0 + 8] = 0\n 84597: u8 [a0 + 7] = 0\n 84600: u8 [a0 + 6] = 0\n 84603: u8 [a0 + 5] = 0\n 84606: u8 [a0 + 4] = 0\n 84609: u8 [a0 + 3] = 0\n 84612: u8 [a0 + 2] = 0\n 84615: u8 [a0 + 1] = 0\n 84618: a1 = u64 [sp + 0x30]\n 84621: a3 = s1 | a1\n 84624: s1 = 0x100000000\n 84634: a1 = 0xffffffe0\n 84644: a1 = s0 <u a1\n 84647: a2 = u64 [sp + 0x38]\n 84650: a1 = 0 if a2 != 0\n 84652: u64 [sp + 0x30] = a3\n 84655: a1 = 0 if a3 != 0\n 84657: u8 [a0 + 0] = 0\n 84659: jump @1127 if a1 == 0\n      : @1123 (gas: 4)\n 84663: s0 = u64 [sp]\n 84665: i32 a0 = s0 + 0x20\n 84668: a1 = 0x20\n 84671: ra = 980, jump @0\n      : @1124 [@dyn 490] (gas: 40)\n 84678: u8 [a0 + 26] = 0x66\n 84682: u8 [a0 + 23] = 0x68\n 84686: u8 [a0 + 29] = 0x74\n 84690: u8 [a0 + 22] = 0x74\n 84694: u8 [a0 + 20] = 0x74\n 84698: u8 [a0 + 18] = 0x6e\n 84702: u8 [a0 + 15] = 0x69\n 84706: u8 [a0 + 24] = 0x65\n 84710: u8 [a0 + 12] = 0x65\n 84714: u8 [a0 + 11] = 0x6c\n 84718: u8 [a0 + 10] = 0x6c\n 84722: u8 [a0 + 27] = 0x61\n 84726: u8 [a0 + 9] = 0x61\n 84730: u8 [a0 + 25] = 0x20\n 84734: u8 [a0 + 21] = 0x20\n 84738: u8 [a0 + 17] = 0x20\n 84742: u8 [a0 + 14] = 0x20\n 84746: u8 [a0 + 7] = 0x20\n 84750: u8 [a0 + 6] = 0x3a\n 84754: u8 [a0 + 5] = 0x77\n 84758: u8 [a0 + 30] = 0x6f\n 84762: u8 [a0 + 19] = 0x6f\n 84766: u8 [a0 + 4] = 0x6f\n 84770: u8 [a0 + 31] = 0x72\n 84774: u8 [a0 + 13] = 0x72\n 84778: u8 [a0 + 3] = 0x72\n 84782: u8 [a0 + 28] = 0x63\n 84786: u8 [a0 + 8] = 0x63\n 84790: u8 [a0 + 2] = 0x63\n 84794: u8 [a0 + 16] = 0x73\n 84798: u8 [a0 + 1] = 0x73\n 84802: a1 = s1 + 0xffffffffffffffc0\n 84805: a2 = u64 [sp + 0x40]\n 84808: a1 = a2 <u a1\n 84811: a2 = u64 [sp + 0x38]\n 84814: a1 = 0 if a2 != 0\n 84816: a2 = u64 [sp + 0x30]\n 84819: a1 = 0 if a2 != 0\n 84821: u8 [a0 + 0] = 0x45\n 84824: jump @1127 if a1 == 0\n      : @1125 (gas: 3)\n 84828: i32 a0 = s0 + 0x40\n 84831: a1 = 0x20\n 84834: ra = 982, jump @0\n      : @1126 [@dyn 491] (gas: 54)\n 84841: u8 [a0 + 31] = 0\n 84844: u8 [a0 + 30] = 0\n 84847: u8 [a0 + 29] = 0\n 84850: u8 [a0 + 28] = 0\n 84853: u8 [a0 + 27] = 0\n 84856: u8 [a0 + 26] = 0\n 84859: u8 [a0 + 25] = 0\n 84862: u8 [a0 + 24] = 0\n 84865: u8 [a0 + 23] = 0\n 84868: u8 [a0 + 22] = 0\n 84871: u8 [a0 + 21] = 0\n 84874: u8 [a0 + 20] = 0\n 84877: u8 [a0 + 19] = 0\n 84880: u8 [a0 + 18] = 0\n 84883: u8 [a0 + 17] = 0\n 84886: u8 [a0 + 16] = 0\n 84889: u8 [a0 + 15] = 0\n 84892: u8 [a0 + 14] = 0\n 84895: u8 [a0 + 13] = 0\n 84898: u8 [a0 + 12] = 0\n 84901: u8 [a0 + 11] = 0\n 84904: u8 [a0 + 10] = 0\n 84907: u8 [a0 + 9] = 0\n 84910: u8 [a0 + 8] = 0\n 84913: u8 [a0 + 7] = 0\n 84916: u8 [a0 + 6] = 0\n 84919: u8 [a0 + 5] = 0\n 84922: u8 [a0 + 4] = 0\n 84925: u8 [a0 + 3] = 0\n 84928: u8 [a0 + 2] = 0\n 84931: u8 [a0 + 1] = 0\n 84934: u8 [a0 + 0] = 0x79\n 84937: a1 = u64 [sp + 0x8]\n 84940: a0 = a1 + 0x80\n 84944: a1 = a0 <u a1\n 84947: a3 = u64 [sp + 0x10]\n 84950: a2 = a3 + a1\n 84953: a3 = a2 <u a3\n 84956: a3 = a1 if a1 == 0\n 84959: a1 = u64 [sp + 0x18]\n 84962: a3 = a3 + a1\n 84965: a1 = a3 <u a1\n 84968: a4 = u64 [sp + 0x20]\n 84971: a1 = a1 + a4\n 84974: a4 = u64 [sp + 0x28]\n 84977: u64 [a4] = a0\n 84979: u64 [a4 + 0x8] = a2\n 84982: u64 [a4 + 0x10] = a3\n 84985: u64 [a4 + 0x18] = a1\n 84988: ra = u64 [sp + 0x58]\n 84991: s0 = u64 [sp + 0x50]\n 84994: s1 = u64 [sp + 0x48]\n 84997: sp = sp + 0x60\n 85000: ret\n      : @1127 (gas: 1)\n 85002: trap\n      : @1128 (gas: 17)\n 85003: sp = sp + 0xffffffffffffff20\n 85007: u64 [sp + 0xd8] = ra\n 85011: u64 [sp + 0xd0] = s0\n 85015: u64 [sp + 0xc8] = s1\n 85019: s0 = sp + 0xe0\n 85023: sp = sp & 0xffffffffffffffe0\n 85026: a1 = u64 [a0 + 0x18]\n 85029: u64 [sp + 0x38] = a1\n 85032: a1 = u64 [a0 + 0x10]\n 85035: u64 [sp + 0x30] = a1\n 85038: a1 = u64 [a0 + 0x8]\n 85041: u64 [sp + 0x28] = a1\n 85044: a0 = u64 [a0]\n 85046: u64 [sp + 0x20] = a0\n 85049: i32 a0 = sp + 0xa0\n 85053: ecalli 5 // 'caller'\n 85055: fallthrough\n      : @1129 (gas: 6)\n 85056: s1 = 0x20070\n 85061: a4 = i32 [sp + 0xb0]\n 85065: a2 = u64 [sp + 0xa0]\n 85069: a0 = i32 [0x20070]\n 85074: a1 = u64 [sp + 0xa8]\n 85078: jump @1132 if a0 == 0\n      : @1130 (gas: 9)\n 85081: u64 [sp] = a0\n 85083: a0 = 0x30080\n 85088: i32 a0 = a0 + 0\n 85090: u64 [sp + 0x8] = a1\n 85093: i32 a1 = s1 + 0\n 85095: u64 [sp + 0x18] = a4\n 85098: u64 [sp + 0x10] = a2\n 85101: ecalli 7 // 'get_immutable_data'\n 85103: fallthrough\n      : @1131 (gas: 7)\n 85104: a1 = u64 [sp + 0x8]\n 85107: a2 = u64 [sp + 0x10]\n 85110: a4 = u64 [sp + 0x18]\n 85113: a0 = i32 [0x20070]\n 85118: u32 [0x20070] = 0\n 85123: a3 = u64 [sp]\n 85125: jump @1140 if a0 <u a3\n      : @1132 (gas: 19)\n 85129: a0 = reverse a1\n 85131: a1 = a0 >> 0x20\n 85134: a2 = reverse a2\n 85136: a3 = a2 << 0x20\n 85139: a1 = a1 | a3\n 85142: a0 = a0 << 0x20\n 85145: a4 = reverse a4\n 85147: a4 = a4 >> 0x20\n 85150: a0 = a0 | a4\n 85153: a4 = u64 [0x30080]\n 85158: a5 = u32 [0x30090]\n 85163: a2 = a2 >> 0x20\n 85166: a3 = u64 [0x30088]\n 85171: a0 = a0 ^ a4\n 85174: a2 = a2 ^ a5\n 85177: a0 = a0 | a2\n 85180: a1 = a1 ^ a3\n 85183: a0 = a0 | a1\n 85186: jump @1135 if a0 != 0\n      : @1133 (gas: 10)\n 85189: a0 = u64 [sp + 0x20]\n 85192: u64 [sp + 0x40] = a0\n 85195: a0 = u64 [sp + 0x28]\n 85198: u64 [sp + 0x48] = a0\n 85201: a0 = u64 [sp + 0x30]\n 85204: u64 [sp + 0x50] = a0\n 85207: a0 = sp + 0x40\n 85210: a1 = u64 [sp + 0x38]\n 85213: u64 [sp + 0x58] = a1\n 85216: ra = 984, jump @1143\n      : @1134 [@dyn 492] (gas: 6)\n 85222: sp = s0 + 0xffffffffffffff20\n 85226: ra = u64 [sp + 0xd8]\n 85230: s0 = u64 [sp + 0xd0]\n 85234: s1 = u64 [sp + 0xc8]\n 85238: sp = sp + 0xe0\n 85242: ret\n      : @1135 (gas: 3)\n 85244: a0 = 0x40\n 85247: a1 = 0x20\n 85250: ra = 986, jump @0\n      : @1136 [@dyn 493] (gas: 103)\n 85257: a1 = u8 [a0 + 0x11]\n 85260: a2 = u8 [a0 + 0x10]\n 85263: a3 = u8 [a0 + 0x12]\n 85266: a4 = u8 [a0 + 0x13]\n 85269: a1 = a1 << 0x8\n 85272: a1 = a1 | a2\n 85275: a3 = a3 << 0x10\n 85278: a4 = a4 << 0x18\n 85281: a3 = a3 | a4\n 85284: a1 = a1 | a3\n 85287: a2 = u8 [a0 + 0x15]\n 85290: a3 = u8 [a0 + 0x14]\n 85293: a4 = u8 [a0 + 0x16]\n 85296: a5 = u8 [a0 + 0x17]\n 85299: a2 = a2 << 0x8\n 85302: a2 = a2 | a3\n 85305: a4 = a4 << 0x10\n 85308: a5 = a5 << 0x18\n 85311: a4 = a4 | a5\n 85314: a2 = a2 | a4\n 85317: a2 = a2 << 0x20\n 85320: t0 = a2 | a1\n 85323: a2 = u8 [a0 + 0x1]\n 85326: a3 = u8 [a0]\n 85328: a4 = u8 [a0 + 0x2]\n 85331: a5 = u8 [a0 + 0x3]\n 85334: a2 = a2 << 0x8\n 85337: a2 = a2 | a3\n 85340: a4 = a4 << 0x10\n 85343: a5 = a5 << 0x18\n 85346: a4 = a4 | a5\n 85349: a2 = a2 | a4\n 85352: a3 = u8 [a0 + 0x5]\n 85355: a4 = u8 [a0 + 0x4]\n 85358: a5 = u8 [a0 + 0x6]\n 85361: s1 = u8 [a0 + 0x7]\n 85364: a3 = a3 << 0x8\n 85367: a3 = a3 | a4\n 85370: a5 = a5 << 0x10\n 85373: s1 = s1 << 0x18\n 85376: a5 = a5 | s1\n 85379: a3 = a3 | a5\n 85382: a3 = a3 << 0x20\n 85385: a2 = a2 | a3\n 85388: a3 = u8 [a0 + 0x19]\n 85391: a4 = u8 [a0 + 0x18]\n 85394: a5 = u8 [a0 + 0x1a]\n 85397: s1 = u8 [a0 + 0x1b]\n 85400: a3 = a3 << 0x8\n 85403: a3 = a3 | a4\n 85406: a5 = a5 << 0x10\n 85409: s1 = s1 << 0x18\n 85412: a5 = a5 | s1\n 85415: a3 = a3 | a5\n 85418: a4 = u8 [a0 + 0x1d]\n 85421: a5 = u8 [a0 + 0x1c]\n 85424: s1 = u8 [a0 + 0x1e]\n 85427: a1 = u8 [a0 + 0x1f]\n 85430: a4 = a4 << 0x8\n 85433: a4 = a4 | a5\n 85436: s1 = s1 << 0x10\n 85439: a1 = a1 << 0x18\n 85442: a1 = a1 | s1\n 85445: a1 = a1 | a4\n 85448: a1 = a1 << 0x20\n 85451: a3 = a3 | a1\n 85454: a1 = u8 [a0 + 0x9]\n 85457: a4 = u8 [a0 + 0x8]\n 85460: a5 = u8 [a0 + 0xa]\n 85463: s1 = u8 [a0 + 0xb]\n 85466: a1 = a1 << 0x8\n 85469: a1 = a1 | a4\n 85472: a5 = a5 << 0x10\n 85475: s1 = s1 << 0x18\n 85478: a5 = a5 | s1\n 85481: a1 = a1 | a5\n 85484: a4 = u8 [a0 + 0xd]\n 85487: a5 = u8 [a0 + 0xc]\n 85490: s1 = u8 [a0 + 0xe]\n 85493: a0 = u8 [a0 + 0xf]\n 85496: a4 = a4 << 0x8\n 85499: a4 = a4 | a5\n 85502: s1 = s1 << 0x10\n 85505: a0 = a0 << 0x18\n 85508: a0 = a0 | s1\n 85511: a0 = a0 | a4\n 85514: a0 = a0 << 0x20\n 85517: a0 = a0 | a1\n 85520: s1 = reverse a0\n 85522: a1 = reverse a3\n 85524: a2 = reverse a2\n 85526: a0 = reverse t0\n 85528: u64 [sp + 0x38] = a0\n 85531: u64 [sp + 0x30] = a2\n 85534: a0 = a0 | a2\n 85537: a2 = a1\n 85539: a1 = a1 | s1\n 85542: a1 = a1 | a0\n 85545: a1 = a1 >> 0x20\n 85548: a0 = a0 | s1\n 85551: a0 = a0 << 0x20\n 85554: a0 = a0 | a1\n 85557: jump @1140 if a0 != 0\n      : @1137 (gas: 5)\n 85561: u64 [sp + 0x28] = a2\n 85564: i32 a0 = a2 + 0\n 85566: a1 = 0x20\n 85569: u64 [sp + 0x20] = a0\n 85572: ra = 988, jump @0\n      : @1138 [@dyn 494] (gas: 50)\n 85579: u8 [a0 + 31] = 0\n 85582: u8 [a0 + 30] = 0\n 85585: u8 [a0 + 29] = 0\n 85588: u8 [a0 + 28] = 0\n 85591: u8 [a0 + 27] = 0\n 85594: u8 [a0 + 26] = 0\n 85597: u8 [a0 + 25] = 0\n 85600: u8 [a0 + 24] = 0\n 85603: u8 [a0 + 23] = 0\n 85606: u8 [a0 + 22] = 0\n 85609: u8 [a0 + 21] = 0\n 85612: u8 [a0 + 20] = 0\n 85615: u8 [a0 + 19] = 0\n 85618: u8 [a0 + 18] = 0\n 85621: u8 [a0 + 17] = 0\n 85624: u8 [a0 + 16] = 0\n 85627: u8 [a0 + 15] = 0\n 85630: u8 [a0 + 14] = 0\n 85633: u8 [a0 + 13] = 0\n 85636: u8 [a0 + 12] = 0\n 85639: u8 [a0 + 11] = 0\n 85642: u8 [a0 + 10] = 0\n 85645: u8 [a0 + 9] = 0\n 85648: u8 [a0 + 8] = 0\n 85651: u8 [a0 + 7] = 0\n 85654: u8 [a0 + 6] = 0\n 85657: u8 [a0 + 5] = 0\n 85660: u8 [a0 + 4] = 0\n 85663: u8 [a0 + 3] = 0xa0\n 85668: u8 [a0 + 2] = 0x79\n 85672: u8 [a0 + 1] = 0xc3\n 85677: u8 [a0 + 0] = 0x8\n 85680: a1 = u64 [sp + 0x28]\n 85683: a0 = a1 + 0x4\n 85686: a1 = a0 <u a1\n 85689: a3 = u64 [sp + 0x38]\n 85692: a2 = a3 + a1\n 85695: a3 = a2 <u a3\n 85698: a3 = a1 if a1 == 0\n 85701: a3 = a3 + s1\n 85704: a1 = a3 <u s1\n 85707: a4 = u64 [sp + 0x30]\n 85710: a4 = a4 + a1\n 85713: u64 [sp + 0x68] = a2\n 85716: u64 [sp + 0x60] = a0\n 85719: u64 [sp + 0x70] = a3\n 85722: a0 = sp + 0x80\n 85726: a1 = sp + 0x60\n 85729: u64 [sp + 0x78] = a4\n 85732: ra = 990, jump @1118\n      : @1139 [@dyn 495] (gas: 30)\n 85738: a0 = u64 [sp + 0x88]\n 85742: t0 = u64 [sp + 0x98]\n 85746: t1 = u64 [sp + 0x80]\n 85750: a3 = u64 [sp + 0x90]\n 85754: a1 = u64 [sp + 0x38]\n 85757: a4 = a0 ^ a1\n 85760: a5 = a0 <u a1\n 85763: t2 = a1\n 85765: a2 = u64 [sp + 0x28]\n 85768: a1 = t1 <u a2\n 85771: a5 = a1 if a4 == 0\n 85774: a4 = a3 - s1\n 85777: a3 = a3 <u s1\n 85780: s1 = u64 [sp + 0x30]\n 85783: s1 = t0 - s1\n 85786: s1 = s1 - a3\n 85789: a3 = a4 <u a5\n 85792: s1 = s1 - a3\n 85795: a4 = a4 - a5\n 85798: a0 = a0 - t2\n 85801: a1 = a0 - a1\n 85804: a0 = t1 - a2\n 85807: a1 = a1 | s1\n 85810: a2 = a0 | a4\n 85813: a2 = a2 | a1\n 85816: a1 = a1 | a4\n 85819: a2 = a2 >> 0x20\n 85822: a1 = a1 << 0x20\n 85825: a1 = a1 | a2\n 85828: jump @1141 if a1 == 0\n      : @1140 (gas: 1)\n 85831: trap\n      : @1141 (gas: 4)\n 85832: i32 s1 = a0 + 0\n 85834: a0 = u64 [sp + 0x20]\n 85837: a1 = s1\n 85839: ra = 992, jump @0\n      : @1142 [@dyn 496] (gas: 6)\n 85846: i32 a1 = a0 + 0\n 85848: a0 = 0x1\n 85851: a2 = s1\n 85853: ra = 0x3e2\n 85857: ecalli 14 // 'seal_return'\n 85859: fallthrough\n      : @1143 [@dyn 497] (gas: 31)\n 85860: sp = sp + 0xffffffffffffff00\n 85864: u64 [sp + 0xf8] = ra\n 85868: u64 [sp + 0xf0] = s0\n 85872: u64 [sp + 0xe8] = s1\n 85876: s0 = sp + 0x100\n 85880: sp = sp & 0xffffffffffffffe0\n 85883: a1 = u64 [a0 + 0x18]\n 85886: u64 [sp] = a1\n 85888: a1 = u64 [a0 + 0x10]\n 85891: u64 [sp + 0x8] = a1\n 85894: a1 = u64 [a0 + 0x8]\n 85897: u64 [sp + 0x10] = a1\n 85900: a0 = u64 [a0]\n 85902: u64 [sp + 0x18] = a0\n 85905: u64 [sp + 184] = 0\n 85909: u64 [sp + 176] = 0\n 85913: u64 [sp + 168] = 0\n 85917: s1 = 0x5\n 85920: u64 [sp + 0xa0] = s1\n 85924: u64 [sp + 216] = 0\n 85928: u64 [sp + 208] = 0\n 85932: u64 [sp + 200] = 0\n 85936: u64 [sp + 192] = 0\n 85940: u32 [sp + 128] = 0x20\n 85945: i32 a1 = sp + 0xa0\n 85949: i32 a3 = sp + 0xc0\n 85953: i32 a4 = sp + 0x80\n 85957: a2 = 0xffffffffffffffff\n 85960: a0 = 0\n 85962: ecalli 8 // 'get_storage'\n 85964: fallthrough\n      : @1144 (gas: 9)\n 85965: a0 = u64 [sp + 0xd8]\n 85969: a1 = u64 [sp + 0xc8]\n 85973: a2 = u64 [sp + 0xc0]\n 85977: a3 = u64 [sp + 0xd0]\n 85981: a0 = a0 | a1\n 85984: a1 = a2 ^ 0x1\n 85987: a1 = a1 | a3\n 85990: a0 = a0 | a1\n 85993: jump @1147 if a0 != 0\n      : @1145 (gas: 56)\n 85997: u64 [sp + 184] = 0\n 86001: u64 [sp + 176] = 0\n 86005: u64 [sp + 168] = 0\n 86009: u64 [sp + 160] = 0x5\n 86014: u64 [sp + 216] = 0\n 86018: u64 [sp + 208] = 0\n 86022: u64 [sp + 200] = 0\n 86026: u64 [sp + 192] = 0\n 86030: u32 [sp + 128] = 0x20\n 86035: i32 a1 = sp + 0xa0\n 86039: i32 a3 = sp + 0xc0\n 86043: i32 a4 = sp + 0x80\n 86047: a2 = 0xffffffffffffffff\n 86050: a0 = 0\n 86052: ecalli 8 // 'get_storage'\n 86054: u64 [sp + 184] = 0\n 86058: u64 [sp + 176] = 0\n 86062: u64 [sp + 168] = 0\n 86066: u64 [sp + 160] = 0x5\n 86071: u64 [sp + 216] = 0\n 86075: u64 [sp + 208] = 0\n 86079: u64 [sp + 200] = 0\n 86083: u64 [sp + 192] = 0x2\n 86088: i32 a1 = sp + 0xa0\n 86092: i32 a3 = sp + 0xc0\n 86096: a2 = 0xffffffffffffffff\n 86099: a4 = 0x20\n 86102: a0 = 0\n 86104: ecalli 16 // 'set_storage'\n 86106: a0 = u64 [sp]\n 86108: u64 [sp + 0x38] = a0\n 86111: a0 = u64 [sp + 0x8]\n 86114: u64 [sp + 0x30] = a0\n 86117: a0 = u64 [sp + 0x10]\n 86120: u64 [sp + 0x28] = a0\n 86123: a0 = sp + 0x20\n 86126: a1 = u64 [sp + 0x18]\n 86129: u64 [sp + 0x20] = a1\n 86132: ra = 0x3e4\n 86136: sp = sp + 0xfffffffffffffee0\n 86140: u64 [sp + 0x118] = ra\n 86144: u64 [sp + 0x110] = s0\n 86148: u64 [sp + 264] = 0x5\n 86153: s0 = sp + 0x120\n 86157: sp = sp & 0xffffffffffffffe0\n 86160: a1 = u64 [a0]\n 86162: u64 [sp + 0x38] = a1\n 86165: a1 = u64 [a0 + 0x8]\n 86168: u64 [sp + 0x30] = a1\n 86171: a1 = u64 [a0 + 0x10]\n 86174: u64 [sp + 0x28] = a1\n 86177: s1 = u64 [a0 + 0x18]\n 86180: a1 = 0x20\n 86183: a0 = 0\n 86185: ra = 0x3f8\n 86189: jump @0\n      : @1146 [@dyn 498] (gas: 35)\n 86193: u64 [sp + 184] = 0\n 86197: u64 [sp + 176] = 0\n 86201: u64 [sp + 168] = 0\n 86205: u64 [sp + 0xa0] = s1\n 86209: u64 [sp + 216] = 0\n 86213: u64 [sp + 208] = 0\n 86217: u64 [sp + 200] = 0\n 86221: u64 [sp + 192] = 0\n 86225: u32 [sp + 128] = 0x20\n 86230: i32 a1 = sp + 0xa0\n 86234: i32 a3 = sp + 0xc0\n 86238: i32 a4 = sp + 0x80\n 86242: a2 = 0xffffffffffffffff\n 86245: a0 = 0\n 86247: ecalli 8 // 'get_storage'\n 86249: u64 [sp + 184] = 0\n 86253: u64 [sp + 176] = 0\n 86257: u64 [sp + 168] = 0\n 86261: u64 [sp + 0xa0] = s1\n 86265: u64 [sp + 216] = 0\n 86269: u64 [sp + 208] = 0\n 86273: u64 [sp + 200] = 0\n 86277: u64 [sp + 192] = 0x1\n 86282: i32 a1 = sp + 0xa0\n 86286: i32 a3 = sp + 0xc0\n 86290: a2 = 0xffffffffffffffff\n 86293: a4 = 0x20\n 86296: a0 = 0\n 86298: ecalli 16 // 'set_storage'\n 86300: sp = s0 + 0xffffffffffffff00\n 86304: ra = u64 [sp + 0xf8]\n 86308: s0 = u64 [sp + 0xf0]\n 86312: s1 = u64 [sp + 0xe8]\n 86316: sp = sp + 0x100\n 86320: ret\n      : @1147 (gas: 3)\n 86322: a0 = 0x40\n 86325: a1 = 0x20\n 86328: ra = 998, jump @0\n      : @1148 [@dyn 499] (gas: 103)\n 86335: a1 = u8 [a0 + 0x11]\n 86338: a2 = u8 [a0 + 0x10]\n 86341: a3 = u8 [a0 + 0x12]\n 86344: a4 = u8 [a0 + 0x13]\n 86347: a1 = a1 << 0x8\n 86350: a1 = a1 | a2\n 86353: a3 = a3 << 0x10\n 86356: a4 = a4 << 0x18\n 86359: a3 = a3 | a4\n 86362: a1 = a1 | a3\n 86365: a2 = u8 [a0 + 0x15]\n 86368: a3 = u8 [a0 + 0x14]\n 86371: a4 = u8 [a0 + 0x16]\n 86374: a5 = u8 [a0 + 0x17]\n 86377: a2 = a2 << 0x8\n 86380: a2 = a2 | a3\n 86383: a4 = a4 << 0x10\n 86386: a5 = a5 << 0x18\n 86389: a4 = a4 | a5\n 86392: a2 = a2 | a4\n 86395: a2 = a2 << 0x20\n 86398: t0 = a2 | a1\n 86401: a2 = u8 [a0 + 0x1]\n 86404: a3 = u8 [a0]\n 86406: a4 = u8 [a0 + 0x2]\n 86409: a5 = u8 [a0 + 0x3]\n 86412: a2 = a2 << 0x8\n 86415: a2 = a2 | a3\n 86418: a4 = a4 << 0x10\n 86421: a5 = a5 << 0x18\n 86424: a4 = a4 | a5\n 86427: a2 = a2 | a4\n 86430: a3 = u8 [a0 + 0x5]\n 86433: a4 = u8 [a0 + 0x4]\n 86436: a5 = u8 [a0 + 0x6]\n 86439: s1 = u8 [a0 + 0x7]\n 86442: a3 = a3 << 0x8\n 86445: a3 = a3 | a4\n 86448: a5 = a5 << 0x10\n 86451: s1 = s1 << 0x18\n 86454: a5 = a5 | s1\n 86457: a3 = a3 | a5\n 86460: a3 = a3 << 0x20\n 86463: a2 = a2 | a3\n 86466: a3 = u8 [a0 + 0x19]\n 86469: a4 = u8 [a0 + 0x18]\n 86472: a5 = u8 [a0 + 0x1a]\n 86475: s1 = u8 [a0 + 0x1b]\n 86478: a3 = a3 << 0x8\n 86481: a3 = a3 | a4\n 86484: a5 = a5 << 0x10\n 86487: s1 = s1 << 0x18\n 86490: a5 = a5 | s1\n 86493: a3 = a3 | a5\n 86496: a4 = u8 [a0 + 0x1d]\n 86499: a5 = u8 [a0 + 0x1c]\n 86502: s1 = u8 [a0 + 0x1e]\n 86505: a1 = u8 [a0 + 0x1f]\n 86508: a4 = a4 << 0x8\n 86511: a4 = a4 | a5\n 86514: s1 = s1 << 0x10\n 86517: a1 = a1 << 0x18\n 86520: a1 = a1 | s1\n 86523: a1 = a1 | a4\n 86526: a1 = a1 << 0x20\n 86529: a3 = a3 | a1\n 86532: a1 = u8 [a0 + 0x9]\n 86535: a4 = u8 [a0 + 0x8]\n 86538: a5 = u8 [a0 + 0xa]\n 86541: s1 = u8 [a0 + 0xb]\n 86544: a1 = a1 << 0x8\n 86547: a1 = a1 | a4\n 86550: a5 = a5 << 0x10\n 86553: s1 = s1 << 0x18\n 86556: a5 = a5 | s1\n 86559: a1 = a1 | a5\n 86562: a4 = u8 [a0 + 0xd]\n 86565: a5 = u8 [a0 + 0xc]\n 86568: s1 = u8 [a0 + 0xe]\n 86571: a0 = u8 [a0 + 0xf]\n 86574: a4 = a4 << 0x8\n 86577: a4 = a4 | a5\n 86580: s1 = s1 << 0x10\n 86583: a0 = a0 << 0x18\n 86586: a0 = a0 | s1\n 86589: a0 = a0 | a4\n 86592: a0 = a0 << 0x20\n 86595: a0 = a0 | a1\n 86598: s1 = reverse a0\n 86600: a1 = reverse a3\n 86602: a2 = reverse a2\n 86604: a0 = reverse t0\n 86606: u64 [sp + 0x18] = a0\n 86609: u64 [sp + 0x10] = a2\n 86612: a0 = a0 | a2\n 86615: a2 = a1\n 86617: a1 = a1 | s1\n 86620: a1 = a1 | a0\n 86623: a1 = a1 >> 0x20\n 86626: a0 = a0 | s1\n 86629: a0 = a0 << 0x20\n 86632: a0 = a0 | a1\n 86635: jump @1152 if a0 != 0\n      : @1149 (gas: 5)\n 86639: u64 [sp + 0x8] = a2\n 86642: i32 a0 = a2 + 0\n 86644: a1 = 0x20\n 86647: u64 [sp] = a0\n 86649: ra = 1000, jump @0\n      : @1150 [@dyn 500] (gas: 50)\n 86656: u8 [a0 + 31] = 0\n 86659: u8 [a0 + 30] = 0\n 86662: u8 [a0 + 29] = 0\n 86665: u8 [a0 + 28] = 0\n 86668: u8 [a0 + 27] = 0\n 86671: u8 [a0 + 26] = 0\n 86674: u8 [a0 + 25] = 0\n 86677: u8 [a0 + 24] = 0\n 86680: u8 [a0 + 23] = 0\n 86683: u8 [a0 + 22] = 0\n 86686: u8 [a0 + 21] = 0\n 86689: u8 [a0 + 20] = 0\n 86692: u8 [a0 + 19] = 0\n 86695: u8 [a0 + 18] = 0\n 86698: u8 [a0 + 17] = 0\n 86701: u8 [a0 + 16] = 0\n 86704: u8 [a0 + 15] = 0\n 86707: u8 [a0 + 14] = 0\n 86710: u8 [a0 + 13] = 0\n 86713: u8 [a0 + 12] = 0\n 86716: u8 [a0 + 11] = 0\n 86719: u8 [a0 + 10] = 0\n 86722: u8 [a0 + 9] = 0\n 86725: u8 [a0 + 8] = 0\n 86728: u8 [a0 + 7] = 0\n 86731: u8 [a0 + 6] = 0\n 86734: u8 [a0 + 5] = 0\n 86737: u8 [a0 + 4] = 0\n 86740: u8 [a0 + 3] = 0xa0\n 86745: u8 [a0 + 2] = 0x79\n 86749: u8 [a0 + 1] = 0xc3\n 86754: u8 [a0 + 0] = 0x8\n 86757: a1 = u64 [sp + 0x8]\n 86760: a0 = a1 + 0x4\n 86763: a1 = a0 <u a1\n 86766: a3 = u64 [sp + 0x18]\n 86769: a2 = a3 + a1\n 86772: a3 = a2 <u a3\n 86775: a3 = a1 if a1 == 0\n 86778: a3 = a3 + s1\n 86781: a1 = a3 <u s1\n 86784: a4 = u64 [sp + 0x10]\n 86787: a4 = a4 + a1\n 86790: u64 [sp + 0x48] = a2\n 86793: u64 [sp + 0x40] = a0\n 86796: u64 [sp + 0x50] = a3\n 86799: a0 = sp + 0x60\n 86802: a1 = sp + 0x40\n 86805: u64 [sp + 0x58] = a4\n 86808: ra = 1002, jump @922\n      : @1151 [@dyn 501] (gas: 30)\n 86814: a0 = u64 [sp + 0x68]\n 86817: t0 = u64 [sp + 0x78]\n 86820: t1 = u64 [sp + 0x60]\n 86823: a3 = u64 [sp + 0x70]\n 86826: a1 = u64 [sp + 0x18]\n 86829: a4 = a0 ^ a1\n 86832: a5 = a0 <u a1\n 86835: t2 = a1\n 86837: a2 = u64 [sp + 0x8]\n 86840: a1 = t1 <u a2\n 86843: a5 = a1 if a4 == 0\n 86846: a4 = a3 - s1\n 86849: a3 = a3 <u s1\n 86852: s1 = u64 [sp + 0x10]\n 86855: s1 = t0 - s1\n 86858: s1 = s1 - a3\n 86861: a3 = a4 <u a5\n 86864: s1 = s1 - a3\n 86867: a4 = a4 - a5\n 86870: a0 = a0 - t2\n 86873: a1 = a0 - a1\n 86876: a0 = t1 - a2\n 86879: a1 = a1 | s1\n 86882: a2 = a0 | a4\n 86885: a2 = a2 | a1\n 86888: a1 = a1 | a4\n 86891: a2 = a2 >> 0x20\n 86894: a1 = a1 << 0x20\n 86897: a1 = a1 | a2\n 86900: jump @1153 if a1 == 0\n      : @1152 (gas: 1)\n 86903: trap\n      : @1153 (gas: 4)\n 86904: i32 s1 = a0 + 0\n 86906: a0 = u64 [sp]\n 86908: a1 = s1\n 86910: ra = 1004, jump @0\n      : @1154 [@dyn 502] (gas: 6)\n 86917: i32 a1 = a0 + 0\n 86919: a0 = 0x1\n 86922: a2 = s1\n 86924: ra = 0x3ee\n 86928: ecalli 14 // 'seal_return'\n 86930: fallthrough\n      : @1155 [@dyn 503] (gas: 12)\n 86931: a1 = u64 [a0 + 0x10]\n 86934: a2 = u64 [a0 + 0x18]\n 86937: a3 = u64 [a0 + 0x8]\n 86940: a0 = u64 [a0]\n 86942: a2 = a2 | a3\n 86945: a3 = a0 | a1\n 86948: a3 = a3 | a2\n 86951: a3 = a3 >> 0x20\n 86954: a1 = a1 | a2\n 86957: a1 = a1 << 0x20\n 86960: a1 = a1 | a3\n 86963: jump @1158 if a1 != 0\n      : @1156 (gas: 7)\n 86967: sp = sp + 0xfffffffffffffff0\n 86970: u64 [sp + 0x8] = ra\n 86973: u64 [sp] = s0\n 86975: i32 a0 = a0 + 0\n 86977: a1 = 0x20\n 86980: s0 = 0x20\n 86983: ra = 1008, jump @0\n      : @1157 [@dyn 504] (gas: 40)\n 86990: u8 [a0 + 31] = 0\n 86993: u8 [a0 + 30] = 0\n 86996: u8 [a0 + 29] = 0\n 86999: u8 [a0 + 28] = 0\n 87002: u8 [a0 + 27] = 0\n 87005: u8 [a0 + 26] = 0\n 87008: u8 [a0 + 25] = 0\n 87011: u8 [a0 + 24] = 0\n 87014: u8 [a0 + 23] = 0\n 87017: u8 [a0 + 22] = 0\n 87020: u8 [a0 + 21] = 0\n 87023: u8 [a0 + 20] = 0x65\n 87027: u8 [a0 + 19] = 0x74\n 87031: u8 [a0 + 18] = 0x61\n 87035: u8 [a0 + 17] = 0x74\n 87039: u8 [a0 + 16] = 0x73\n 87043: u8 [a0 + 0xf] = s0\n 87046: u8 [a0 + 14] = 0x64\n 87050: a3 = 0x69\n 87053: u8 [a0 + 0xd] = a3\n 87056: a4 = 0x6c\n 87059: u8 [a0 + 0xc] = a4\n 87062: u8 [a0 + 11] = 0x61\n 87066: u8 [a0 + 10] = 0x76\n 87070: u8 [a0 + 9] = 0x6e\n 87074: u8 [a0 + 0x8] = a3\n 87077: u8 [a0 + 0x7] = s0\n 87080: u8 [a0 + 6] = 0x3a\n 87084: u8 [a0 + 5] = 0x77\n 87088: u8 [a0 + 4] = 0x6f\n 87092: u8 [a0 + 3] = 0x72\n 87096: a2 = 0x63\n 87099: u8 [a0 + 0x2] = a2\n 87102: u8 [a0 + 1] = 0x73\n 87106: a1 = 0x45\n 87109: u8 [a0] = a1\n 87111: ra = u64 [sp + 0x8]\n 87114: s0 = u64 [sp]\n 87116: sp = sp + 0x10\n 87119: ret\n      : @1158 (gas: 1)\n 87121: trap\n      : @1159 (gas: 17)\n 87122: sp = sp + 0xffffffffffffffa0\n 87125: u64 [sp + 0x58] = ra\n 87128: u64 [sp + 0x50] = s0\n 87131: u64 [sp + 0x48] = s1\n 87134: a3 = u64 [a1 + 0x18]\n 87137: a4 = u64 [a1 + 0x10]\n 87140: a5 = u64 [a1 + 0x8]\n 87143: s1 = u64 [a1]\n 87145: a1 = a5 | a3\n 87148: a2 = s1 | a4\n 87151: a2 = a2 | a1\n 87154: a2 = a2 >> 0x20\n 87157: a1 = a1 | a4\n 87160: a1 = a1 << 0x20\n 87163: a1 = a1 | a2\n 87166: u64 [sp + 0x28] = a0\n 87169: jump @1166 if a1 != 0\n      : @1160 (gas: 19)\n 87173: a0 = s1 + 0x20\n 87176: u64 [sp + 0x30] = a0\n 87179: a0 = a0 <u s1\n 87182: a1 = a5 + a0\n 87185: u64 [sp + 0x40] = a1\n 87188: u64 [sp + 0x8] = a5\n 87191: s0 = a1 <u a5\n 87194: s0 = a0 if a0 == 0\n 87197: s0 = s0 + a4\n 87200: u64 [sp + 0x10] = a4\n 87203: a0 = s0 <u a4\n 87206: u64 [sp + 0x18] = a3\n 87209: a0 = a0 + a3\n 87212: u64 [sp + 0x38] = a0\n 87215: u64 [sp] = s1\n 87217: i32 a0 = s1 + 0\n 87219: a1 = 0x20\n 87222: s1 = 0x20\n 87225: ra = 1010, jump @0\n      : @1161 [@dyn 505] (gas: 45)\n 87232: u8 [a0 + 0x1f] = s1\n 87235: a1 = u64 [sp + 0x30]\n 87238: s1 = a1\n 87240: a1 = a1 | s0\n 87243: a2 = u64 [sp + 0x40]\n 87246: a4 = u64 [sp + 0x38]\n 87249: a2 = a2 | a4\n 87252: a1 = a1 | a2\n 87255: a1 = a1 >> 0x20\n 87258: u64 [sp + 0x20] = s0\n 87261: a2 = a2 | s0\n 87264: a2 = a2 << 0x20\n 87267: a1 = a1 | a2\n 87270: u8 [a0 + 30] = 0\n 87273: u8 [a0 + 29] = 0\n 87276: u8 [a0 + 28] = 0\n 87279: u8 [a0 + 27] = 0\n 87282: u8 [a0 + 26] = 0\n 87285: u8 [a0 + 25] = 0\n 87288: u8 [a0 + 24] = 0\n 87291: u8 [a0 + 23] = 0\n 87294: u8 [a0 + 22] = 0\n 87297: u8 [a0 + 21] = 0\n 87300: u8 [a0 + 20] = 0\n 87303: u8 [a0 + 19] = 0\n 87306: u8 [a0 + 18] = 0\n 87309: u8 [a0 + 17] = 0\n 87312: u8 [a0 + 16] = 0\n 87315: u8 [a0 + 15] = 0\n 87318: u8 [a0 + 14] = 0\n 87321: u8 [a0 + 13] = 0\n 87324: u8 [a0 + 12] = 0\n 87327: u8 [a0 + 11] = 0\n 87330: u8 [a0 + 10] = 0\n 87333: u8 [a0 + 9] = 0\n 87336: u8 [a0 + 8] = 0\n 87339: u8 [a0 + 7] = 0\n 87342: u8 [a0 + 6] = 0\n 87345: u8 [a0 + 5] = 0\n 87348: u8 [a0 + 4] = 0\n 87351: u8 [a0 + 3] = 0\n 87354: u8 [a0 + 2] = 0\n 87357: u8 [a0 + 1] = 0\n 87360: u8 [a0 + 0] = 0\n 87362: jump @1166 if a1 != 0\n      : @1162 (gas: 4)\n 87366: i32 s0 = s1 + 0\n 87368: a1 = 0x20\n 87371: a0 = s0\n 87373: ra = 1012, jump @0\n      : @1163 [@dyn 506] (gas: 41)\n 87380: u8 [a0 + 31] = 0x15\n 87384: u8 [a0 + 30] = 0\n 87387: u8 [a0 + 29] = 0\n 87390: u8 [a0 + 28] = 0\n 87393: u8 [a0 + 27] = 0\n 87396: u8 [a0 + 26] = 0\n 87399: u8 [a0 + 25] = 0\n 87402: u8 [a0 + 24] = 0\n 87405: u8 [a0 + 23] = 0\n 87408: u8 [a0 + 22] = 0\n 87411: u8 [a0 + 21] = 0\n 87414: u8 [a0 + 20] = 0\n 87417: u8 [a0 + 19] = 0\n 87420: u8 [a0 + 18] = 0\n 87423: u8 [a0 + 17] = 0\n 87426: u8 [a0 + 16] = 0\n 87429: u8 [a0 + 15] = 0\n 87432: u8 [a0 + 14] = 0\n 87435: u8 [a0 + 13] = 0\n 87438: u8 [a0 + 12] = 0\n 87441: u8 [a0 + 11] = 0\n 87444: u8 [a0 + 10] = 0\n 87447: u8 [a0 + 9] = 0\n 87450: u8 [a0 + 8] = 0\n 87453: u8 [a0 + 7] = 0\n 87456: u8 [a0 + 6] = 0\n 87459: u8 [a0 + 5] = 0\n 87462: u8 [a0 + 4] = 0\n 87465: u8 [a0 + 3] = 0\n 87468: u8 [a0 + 2] = 0\n 87471: u8 [a0 + 1] = 0\n 87474: a1 = u64 [sp + 0x20]\n 87477: a2 = u64 [sp + 0x38]\n 87480: a1 = a1 | a2\n 87483: a2 = 0xffffffe0\n 87493: a2 = s1 <u a2\n 87496: a3 = u64 [sp + 0x40]\n 87499: a2 = 0 if a3 != 0\n 87501: a2 = 0 if a1 != 0\n 87503: u8 [a0 + 0] = 0\n 87505: jump @1166 if a2 == 0\n      : @1164 (gas: 3)\n 87509: i32 a0 = s0 + 0x20\n 87512: a1 = 0x20\n 87515: ra = 1014, jump @0\n      : @1165 [@dyn 507] (gas: 55)\n 87522: u8 [a0 + 31] = 0\n 87525: u8 [a0 + 30] = 0\n 87528: u8 [a0 + 29] = 0\n 87531: u8 [a0 + 28] = 0\n 87534: u8 [a0 + 27] = 0\n 87537: u8 [a0 + 26] = 0\n 87540: u8 [a0 + 25] = 0\n 87543: u8 [a0 + 24] = 0\n 87546: u8 [a0 + 23] = 0\n 87549: u8 [a0 + 22] = 0\n 87552: u8 [a0 + 21] = 0\n 87555: u8 [a0 + 20] = 0x65\n 87559: u8 [a0 + 19] = 0x74\n 87563: u8 [a0 + 18] = 0x61\n 87567: u8 [a0 + 17] = 0x74\n 87571: u8 [a0 + 16] = 0x73\n 87575: a5 = 0x20\n 87578: u8 [a0 + 0xf] = a5\n 87581: u8 [a0 + 14] = 0x64\n 87585: u8 [a0 + 13] = 0x69\n 87589: u8 [a0 + 12] = 0x6c\n 87593: u8 [a0 + 11] = 0x61\n 87597: u8 [a0 + 10] = 0x76\n 87601: u8 [a0 + 9] = 0x6e\n 87605: u8 [a0 + 8] = 0x69\n 87609: u8 [a0 + 0x7] = a5\n 87612: u8 [a0 + 6] = 0x3a\n 87616: u8 [a0 + 5] = 0x77\n 87620: u8 [a0 + 4] = 0x6f\n 87624: u8 [a0 + 3] = 0x72\n 87628: u8 [a0 + 2] = 0x63\n 87632: u8 [a0 + 1] = 0x73\n 87636: u8 [a0 + 0] = 0x45\n 87639: a1 = u64 [sp]\n 87641: a0 = a1 + 0x60\n 87644: a1 = a0 <u a1\n 87647: a3 = u64 [sp + 0x8]\n 87650: a2 = a3 + a1\n 87653: a3 = a2 <u a3\n 87656: a3 = a1 if a1 == 0\n 87659: a1 = u64 [sp + 0x10]\n 87662: a3 = a3 + a1\n 87665: a1 = a3 <u a1\n 87668: a4 = u64 [sp + 0x18]\n 87671: a1 = a1 + a4\n 87674: a4 = u64 [sp + 0x28]\n 87677: u64 [a4] = a0\n 87679: u64 [a4 + 0x8] = a2\n 87682: u64 [a4 + 0x10] = a3\n 87685: u64 [a4 + 0x18] = a1\n 87688: ra = u64 [sp + 0x58]\n 87691: s0 = u64 [sp + 0x50]\n 87694: s1 = u64 [sp + 0x48]\n 87697: sp = sp + 0x60\n 87700: ret\n      : @1166 (gas: 1)\n 87702: trap\n      : @1167 [@dyn 508] (gas: 70)\n 87703: a1 = reverse s1\n 87705: a2 = u64 [sp + 0x28]\n 87708: a2 = reverse a2\n 87710: a3 = u64 [sp + 0x30]\n 87713: a3 = reverse a3\n 87715: a4 = u64 [sp + 0x38]\n 87718: a4 = reverse a4\n 87720: u8 [a0 + 0x18] = a4\n 87723: u8 [a0 + 0x10] = a3\n 87726: u8 [a0 + 0x8] = a2\n 87729: u8 [a0] = a1\n 87731: a5 = a4 >> 0x38\n 87734: u8 [a0 + 0x1f] = a5\n 87737: a5 = a4 >> 0x30\n 87740: u8 [a0 + 0x1e] = a5\n 87743: a5 = a4 >> 0x28\n 87746: u8 [a0 + 0x1d] = a5\n 87749: a5 = a4 >> 0x20\n 87752: u8 [a0 + 0x1c] = a5\n 87755: a5 = a4 >> 0x18\n 87758: u8 [a0 + 0x1b] = a5\n 87761: a5 = a4 >> 0x10\n 87764: u8 [a0 + 0x1a] = a5\n 87767: a4 = a4 >> 0x8\n 87770: u8 [a0 + 0x19] = a4\n 87773: a4 = a3 >> 0x38\n 87776: u8 [a0 + 0x17] = a4\n 87779: a4 = a3 >> 0x30\n 87782: u8 [a0 + 0x16] = a4\n 87785: a4 = a3 >> 0x28\n 87788: u8 [a0 + 0x15] = a4\n 87791: a4 = a3 >> 0x20\n 87794: u8 [a0 + 0x14] = a4\n 87797: a4 = a3 >> 0x18\n 87800: u8 [a0 + 0x13] = a4\n 87803: a4 = a3 >> 0x10\n 87806: u8 [a0 + 0x12] = a4\n 87809: a3 = a3 >> 0x8\n 87812: u8 [a0 + 0x11] = a3\n 87815: a3 = a2 >> 0x38\n 87818: u8 [a0 + 0xf] = a3\n 87821: a3 = a2 >> 0x30\n 87824: u8 [a0 + 0xe] = a3\n 87827: a3 = a2 >> 0x28\n 87830: u8 [a0 + 0xd] = a3\n 87833: a3 = a2 >> 0x20\n 87836: u8 [a0 + 0xc] = a3\n 87839: a3 = a2 >> 0x18\n 87842: u8 [a0 + 0xb] = a3\n 87845: a3 = a2 >> 0x10\n 87848: u8 [a0 + 0xa] = a3\n 87851: a2 = a2 >> 0x8\n 87854: u8 [a0 + 0x9] = a2\n 87857: a2 = a1 >> 0x38\n 87860: u8 [a0 + 0x7] = a2\n 87863: a2 = a1 >> 0x30\n 87866: u8 [a0 + 0x6] = a2\n 87869: a2 = a1 >> 0x28\n 87872: u8 [a0 + 0x5] = a2\n 87875: a2 = a1 >> 0x20\n 87878: u8 [a0 + 0x4] = a2\n 87881: a2 = a1 >> 0x18\n 87884: u8 [a0 + 0x3] = a2\n 87887: a2 = a1 >> 0x10\n 87890: u8 [a0 + 0x2] = a2\n 87893: a1 = a1 >> 0x8\n 87896: u8 [a0 + 0x1] = a1\n 87899: a0 = 0x20\n 87902: a1 = 0x20\n 87905: ra = 1018, jump @0\n      : @1168 [@dyn 509] (gas: 35)\n 87912: u8 [a0 + 31] = 0x4\n 87916: u8 [a0 + 30] = 0\n 87919: u8 [a0 + 29] = 0\n 87922: u8 [a0 + 28] = 0\n 87925: u8 [a0 + 27] = 0\n 87928: u8 [a0 + 26] = 0\n 87931: u8 [a0 + 25] = 0\n 87934: u8 [a0 + 24] = 0\n 87937: u8 [a0 + 23] = 0\n 87940: u8 [a0 + 22] = 0\n 87943: u8 [a0 + 21] = 0\n 87946: u8 [a0 + 20] = 0\n 87949: u8 [a0 + 19] = 0\n 87952: u8 [a0 + 18] = 0\n 87955: u8 [a0 + 17] = 0\n 87958: u8 [a0 + 16] = 0\n 87961: u8 [a0 + 15] = 0\n 87964: u8 [a0 + 14] = 0\n 87967: u8 [a0 + 13] = 0\n 87970: u8 [a0 + 12] = 0\n 87973: u8 [a0 + 11] = 0\n 87976: u8 [a0 + 10] = 0\n 87979: u8 [a0 + 9] = 0\n 87982: u8 [a0 + 8] = 0\n 87985: u8 [a0 + 7] = 0\n 87988: u8 [a0 + 6] = 0\n 87991: u8 [a0 + 5] = 0\n 87994: u8 [a0 + 4] = 0\n 87997: u8 [a0 + 3] = 0\n 88000: u8 [a0 + 2] = 0\n 88003: u8 [a0 + 1] = 0\n 88006: u8 [a0 + 0] = 0\n 88008: a1 = 0x40\n 88011: a0 = 0\n 88013: ra = 1020, jump @0\n      : @1169 [@dyn 510] (gas: 43)\n 88020: i32 a0 = a0 + 0\n 88022: i32 a2 = sp + 0xe0\n 88026: a1 = 0x40\n 88029: ecalli 9 // 'hash_keccak_256'\n 88031: a0 = u64 [sp + 0xe0]\n 88035: a1 = u64 [sp + 0xe8]\n 88039: a2 = u64 [sp + 0xf0]\n 88043: a3 = u64 [sp + 0xf8]\n 88047: a4 = reverse a0\n 88049: a1 = reverse a1\n 88051: a2 = reverse a2\n 88053: a0 = reverse a3\n 88055: a3 = a0 + 0x2\n 88058: u64 [sp + 0x10] = a0\n 88061: a0 = a3 <u a0\n 88064: a5 = a2 + a0\n 88067: u64 [sp + 0x18] = a2\n 88070: s1 = a5 <u a2\n 88073: s1 = a0 if a0 == 0\n 88076: s1 = s1 + a1\n 88079: u64 [sp + 0x8] = a1\n 88082: a0 = s1 <u a1\n 88085: u64 [sp + 0x20] = a4\n 88088: a0 = a0 + a4\n 88091: u64 [sp + 0x30] = a5\n 88094: u64 [sp + 0xc8] = a5\n 88098: u64 [sp + 0x38] = a3\n 88101: u64 [sp + 0xc0] = a3\n 88105: u64 [sp + 0xd0] = s1\n 88109: u64 [sp + 0x28] = a0\n 88112: u64 [sp + 0xd8] = a0\n 88116: u64 [sp + 248] = 0\n 88120: u64 [sp + 240] = 0\n 88124: u64 [sp + 232] = 0\n 88128: u64 [sp + 224] = 0\n 88132: u32 [sp + 256] = 0x20\n 88137: i32 a1 = sp + 0xc0\n 88141: i32 a3 = sp + 0xe0\n 88145: i32 a4 = sp + 0x100\n 88149: a2 = 0xffffffffffffffff\n 88152: a0 = 0\n 88154: ecalli 8 // 'get_storage'\n 88156: fallthrough\n      : @1170 (gas: 2)\n 88157: a0 = u8 [sp + 0xe1]\n 88161: jump @1175 if a0 == 0\n      : @1171 (gas: 19)\n 88165: u64 [sp + 0xd0] = s1\n 88169: a0 = u64 [sp + 0x30]\n 88172: u64 [sp + 0xc8] = a0\n 88176: a0 = u64 [sp + 0x38]\n 88179: u64 [sp + 0xc0] = a0\n 88183: a0 = u64 [sp + 0x28]\n 88186: u64 [sp + 0xd8] = a0\n 88190: u64 [sp + 248] = 0\n 88194: u64 [sp + 240] = 0\n 88198: u64 [sp + 232] = 0\n 88202: u64 [sp + 224] = 0\n 88206: u32 [sp + 256] = 0x20\n 88211: i32 a1 = sp + 0xc0\n 88215: i32 a3 = sp + 0xe0\n 88219: i32 a4 = sp + 0x100\n 88223: a2 = 0xffffffffffffffff\n 88226: a0 = 0\n 88228: ecalli 8 // 'get_storage'\n 88230: fallthrough\n      : @1172 (gas: 2)\n 88231: a0 = u8 [sp + 0xe2]\n 88235: jump @1175 if a0 != 0\n      : @1173 (gas: 111)\n 88239: u64 [sp + 0xd0] = s1\n 88243: a0 = u64 [sp + 0x30]\n 88246: u64 [sp + 0xc8] = a0\n 88250: a0 = u64 [sp + 0x38]\n 88253: u64 [sp + 0xc0] = a0\n 88257: u64 [sp] = s1\n 88259: s1 = u64 [sp + 0x28]\n 88262: u64 [sp + 0xd8] = s1\n 88266: u64 [sp + 248] = 0\n 88270: u64 [sp + 240] = 0\n 88274: u64 [sp + 232] = 0\n 88278: u64 [sp + 224] = 0\n 88282: u32 [sp + 256] = 0x20\n 88287: i32 a1 = sp + 0xc0\n 88291: i32 a3 = sp + 0xe0\n 88295: i32 a4 = sp + 0x100\n 88299: a2 = 0xffffffffffffffff\n 88302: a0 = 0\n 88304: ecalli 8 // 'get_storage'\n 88306: a0 = u64 [sp + 0xe8]\n 88310: a1 = u64 [sp + 0xf0]\n 88314: a2 = u64 [sp + 0xe0]\n 88318: a3 = u64 [sp + 0xf8]\n 88322: a2 = a2 & 0xffffffffff00ffff\n 88328: a2 = a2 | 0x10000\n 88333: u64 [sp + 0xd8] = s1\n 88337: a4 = u64 [sp]\n 88339: u64 [sp + 0xd0] = a4\n 88343: a4 = u64 [sp + 0x30]\n 88346: u64 [sp + 0xc8] = a4\n 88350: a4 = u64 [sp + 0x38]\n 88353: u64 [sp + 0xc0] = a4\n 88357: u64 [sp + 0xf8] = a3\n 88361: u64 [sp + 0xf0] = a1\n 88365: u64 [sp + 0xe8] = a0\n 88369: u64 [sp + 0xe0] = a2\n 88373: i32 a1 = sp + 0xc0\n 88377: i32 a3 = sp + 0xe0\n 88381: a2 = 0xffffffffffffffff\n 88384: a4 = 0x20\n 88387: a0 = 0\n 88389: ecalli 16 // 'set_storage'\n 88391: a0 = u64 [sp + 0x20]\n 88394: u64 [sp + 0xd8] = a0\n 88398: s1 = u64 [sp + 0x8]\n 88401: u64 [sp + 0xd0] = s1\n 88405: a0 = u64 [sp + 0x18]\n 88408: u64 [sp + 0xc8] = a0\n 88412: a0 = u64 [sp + 0x10]\n 88415: u64 [sp + 0xc0] = a0\n 88419: u64 [sp + 248] = 0\n 88423: u64 [sp + 240] = 0\n 88427: u64 [sp + 232] = 0\n 88431: u64 [sp + 224] = 0\n 88435: u32 [sp + 256] = 0x20\n 88440: i32 a1 = sp + 0xc0\n 88444: i32 a3 = sp + 0xe0\n 88448: i32 a4 = sp + 0x100\n 88452: a2 = 0xffffffffffffffff\n 88455: a0 = 0\n 88457: ecalli 8 // 'get_storage'\n 88459: a0 = u64 [sp + 0xe0]\n 88463: u64 [sp + 0x38] = a0\n 88466: a0 = u64 [sp + 0xe8]\n 88470: u64 [sp + 0x30] = a0\n 88473: a0 = u32 [sp + 0xf0]\n 88477: u64 [sp + 0x28] = a0\n 88480: a0 = u64 [sp + 0x10]\n 88483: a0 = a0 + 0x1\n 88486: a1 = a0 <u 0x1\n 88489: a2 = u64 [sp + 0x18]\n 88492: a1 = a1 + a2\n 88495: a2 = a0 | a1\n 88498: a2 = a2 <u 0x1\n 88501: a2 = a2 + s1\n 88504: a3 = a2 <u s1\n 88507: a4 = u64 [sp + 0x20]\n 88510: a3 = a3 + a4\n 88513: u64 [sp + 0xd8] = a3\n 88517: u64 [sp + 0xd0] = a2\n 88521: u64 [sp + 0xc8] = a1\n 88525: u64 [sp + 0xc0] = a0\n 88529: u64 [sp + 248] = 0\n 88533: u64 [sp + 240] = 0\n 88537: u64 [sp + 232] = 0\n 88541: u64 [sp + 224] = 0\n 88545: u32 [sp + 256] = 0x20\n 88550: i32 a1 = sp + 0xc0\n 88554: i32 a3 = sp + 0xe0\n 88558: i32 a4 = sp + 0x100\n 88562: a2 = 0xffffffffffffffff\n 88565: a0 = 0\n 88567: ecalli 8 // 'get_storage'\n 88569: a0 = u64 [sp + 0xe0]\n 88573: a1 = u64 [sp + 0xe8]\n 88577: a2 = u64 [sp + 0xf0]\n 88581: a3 = u64 [sp + 0xf8]\n 88585: u64 [sp + 0x98] = a3\n 88589: u64 [sp + 0x90] = a2\n 88593: u64 [sp + 0x88] = a1\n 88597: u64 [sp + 0x80] = a0\n 88601: u64 [sp + 184] = 0\n 88605: a0 = u64 [sp + 0x28]\n 88608: u64 [sp + 0xb0] = a0\n 88612: a0 = u64 [sp + 0x30]\n 88615: u64 [sp + 0xa8] = a0\n 88619: a0 = sp + 0xa0\n 88623: a1 = sp + 0x80\n 88627: a2 = u64 [sp + 0x38]\n 88630: u64 [sp + 0xa0] = a2\n 88634: ra = 1022, jump @1463\n      : @1174 [@dyn 511] (gas: 6)\n 88640: sp = s0 + 0xfffffffffffffee0\n 88644: ra = u64 [sp + 0x118]\n 88648: s0 = u64 [sp + 0x110]\n 88652: s1 = u64 [sp + 0x108]\n 88656: sp = sp + 0x120\n 88660: ret\n      : @1175 (gas: 3)\n 88662: a0 = 0x40\n 88665: a1 = 0x20\n 88668: ra = 1024, jump @0\n      : @1176 [@dyn 512] (gas: 103)\n 88675: a1 = u8 [a0 + 0x11]\n 88678: a2 = u8 [a0 + 0x10]\n 88681: a3 = u8 [a0 + 0x12]\n 88684: a4 = u8 [a0 + 0x13]\n 88687: a1 = a1 << 0x8\n 88690: a1 = a1 | a2\n 88693: a3 = a3 << 0x10\n 88696: a4 = a4 << 0x18\n 88699: a3 = a3 | a4\n 88702: a1 = a1 | a3\n 88705: a2 = u8 [a0 + 0x15]\n 88708: a3 = u8 [a0 + 0x14]\n 88711: a4 = u8 [a0 + 0x16]\n 88714: a5 = u8 [a0 + 0x17]\n 88717: a2 = a2 << 0x8\n 88720: a2 = a2 | a3\n 88723: a4 = a4 << 0x10\n 88726: a5 = a5 << 0x18\n 88729: a4 = a4 | a5\n 88732: a2 = a2 | a4\n 88735: a2 = a2 << 0x20\n 88738: t0 = a2 | a1\n 88741: a2 = u8 [a0 + 0x1]\n 88744: a3 = u8 [a0]\n 88746: a4 = u8 [a0 + 0x2]\n 88749: a5 = u8 [a0 + 0x3]\n 88752: a2 = a2 << 0x8\n 88755: a2 = a2 | a3\n 88758: a4 = a4 << 0x10\n 88761: a5 = a5 << 0x18\n 88764: a4 = a4 | a5\n 88767: a2 = a2 | a4\n 88770: a3 = u8 [a0 + 0x5]\n 88773: a4 = u8 [a0 + 0x4]\n 88776: a5 = u8 [a0 + 0x6]\n 88779: s1 = u8 [a0 + 0x7]\n 88782: a3 = a3 << 0x8\n 88785: a3 = a3 | a4\n 88788: a5 = a5 << 0x10\n 88791: s1 = s1 << 0x18\n 88794: a5 = a5 | s1\n 88797: a3 = a3 | a5\n 88800: a3 = a3 << 0x20\n 88803: a2 = a2 | a3\n 88806: a3 = u8 [a0 + 0x19]\n 88809: a4 = u8 [a0 + 0x18]\n 88812: a5 = u8 [a0 + 0x1a]\n 88815: s1 = u8 [a0 + 0x1b]\n 88818: a3 = a3 << 0x8\n 88821: a3 = a3 | a4\n 88824: a5 = a5 << 0x10\n 88827: s1 = s1 << 0x18\n 88830: a5 = a5 | s1\n 88833: a3 = a3 | a5\n 88836: a4 = u8 [a0 + 0x1d]\n 88839: a5 = u8 [a0 + 0x1c]\n 88842: s1 = u8 [a0 + 0x1e]\n 88845: a1 = u8 [a0 + 0x1f]\n 88848: a4 = a4 << 0x8\n 88851: a4 = a4 | a5\n 88854: s1 = s1 << 0x10\n 88857: a1 = a1 << 0x18\n 88860: a1 = a1 | s1\n 88863: a1 = a1 | a4\n 88866: a1 = a1 << 0x20\n 88869: a3 = a3 | a1\n 88872: a1 = u8 [a0 + 0x9]\n 88875: a4 = u8 [a0 + 0x8]\n 88878: a5 = u8 [a0 + 0xa]\n 88881: s1 = u8 [a0 + 0xb]\n 88884: a1 = a1 << 0x8\n 88887: a1 = a1 | a4\n 88890: a5 = a5 << 0x10\n 88893: s1 = s1 << 0x18\n 88896: a5 = a5 | s1\n 88899: a1 = a1 | a5\n 88902: a4 = u8 [a0 + 0xd]\n 88905: a5 = u8 [a0 + 0xc]\n 88908: s1 = u8 [a0 + 0xe]\n 88911: a0 = u8 [a0 + 0xf]\n 88914: a4 = a4 << 0x8\n 88917: a4 = a4 | a5\n 88920: s1 = s1 << 0x10\n 88923: a0 = a0 << 0x18\n 88926: a0 = a0 | s1\n 88929: a0 = a0 | a4\n 88932: a0 = a0 << 0x20\n 88935: a0 = a0 | a1\n 88938: s1 = reverse a0\n 88940: a1 = reverse a3\n 88942: a2 = reverse a2\n 88944: a0 = reverse t0\n 88946: u64 [sp + 0x38] = a0\n 88949: u64 [sp + 0x30] = a2\n 88952: a0 = a0 | a2\n 88955: a2 = a1\n 88957: a1 = a1 | s1\n 88960: a1 = a1 | a0\n 88963: a1 = a1 >> 0x20\n 88966: a0 = a0 | s1\n 88969: a0 = a0 << 0x20\n 88972: a0 = a0 | a1\n 88975: jump @1180 if a0 != 0\n      : @1177 (gas: 5)\n 88979: u64 [sp + 0x28] = a2\n 88982: i32 a0 = a2 + 0\n 88984: a1 = 0x20\n 88987: u64 [sp + 0x20] = a0\n 88990: ra = 1026, jump @0\n      : @1178 [@dyn 513] (gas: 50)\n 88997: u8 [a0 + 31] = 0\n 89000: u8 [a0 + 30] = 0\n 89003: u8 [a0 + 29] = 0\n 89006: u8 [a0 + 28] = 0\n 89009: u8 [a0 + 27] = 0\n 89012: u8 [a0 + 26] = 0\n 89015: u8 [a0 + 25] = 0\n 89018: u8 [a0 + 24] = 0\n 89021: u8 [a0 + 23] = 0\n 89024: u8 [a0 + 22] = 0\n 89027: u8 [a0 + 21] = 0\n 89030: u8 [a0 + 20] = 0\n 89033: u8 [a0 + 19] = 0\n 89036: u8 [a0 + 18] = 0\n 89039: u8 [a0 + 17] = 0\n 89042: u8 [a0 + 16] = 0\n 89045: u8 [a0 + 15] = 0\n 89048: u8 [a0 + 14] = 0\n 89051: u8 [a0 + 13] = 0\n 89054: u8 [a0 + 12] = 0\n 89057: u8 [a0 + 11] = 0\n 89060: u8 [a0 + 10] = 0\n 89063: u8 [a0 + 9] = 0\n 89066: u8 [a0 + 8] = 0\n 89069: u8 [a0 + 7] = 0\n 89072: u8 [a0 + 6] = 0\n 89075: u8 [a0 + 5] = 0\n 89078: u8 [a0 + 4] = 0\n 89081: u8 [a0 + 3] = 0xa0\n 89086: u8 [a0 + 2] = 0x79\n 89090: u8 [a0 + 1] = 0xc3\n 89095: u8 [a0 + 0] = 0x8\n 89098: a1 = u64 [sp + 0x28]\n 89101: a0 = a1 + 0x4\n 89104: a1 = a0 <u a1\n 89107: a3 = u64 [sp + 0x38]\n 89110: a2 = a3 + a1\n 89113: a3 = a2 <u a3\n 89116: a3 = a1 if a1 == 0\n 89119: a3 = a3 + s1\n 89122: a1 = a3 <u s1\n 89125: a4 = u64 [sp + 0x30]\n 89128: a4 = a4 + a1\n 89131: u64 [sp + 0x48] = a2\n 89134: u64 [sp + 0x40] = a0\n 89137: u64 [sp + 0x50] = a3\n 89140: a0 = sp + 0x60\n 89143: a1 = sp + 0x40\n 89146: u64 [sp + 0x58] = a4\n 89149: ra = 1028, jump @1159\n      : @1179 [@dyn 514] (gas: 30)\n 89155: a0 = u64 [sp + 0x68]\n 89158: t0 = u64 [sp + 0x78]\n 89161: t1 = u64 [sp + 0x60]\n 89164: a3 = u64 [sp + 0x70]\n 89167: a1 = u64 [sp + 0x38]\n 89170: a4 = a0 ^ a1\n 89173: a5 = a0 <u a1\n 89176: t2 = a1\n 89178: a2 = u64 [sp + 0x28]\n 89181: a1 = t1 <u a2\n 89184: a5 = a1 if a4 == 0\n 89187: a4 = a3 - s1\n 89190: a3 = a3 <u s1\n 89193: s1 = u64 [sp + 0x30]\n 89196: s1 = t0 - s1\n 89199: s1 = s1 - a3\n 89202: a3 = a4 <u a5\n 89205: s1 = s1 - a3\n 89208: a4 = a4 - a5\n 89211: a0 = a0 - t2\n 89214: a1 = a0 - a1\n 89217: a0 = t1 - a2\n 89220: a1 = a1 | s1\n 89223: a2 = a0 | a4\n 89226: a2 = a2 | a1\n 89229: a1 = a1 | a4\n 89232: a2 = a2 >> 0x20\n 89235: a1 = a1 << 0x20\n 89238: a1 = a1 | a2\n 89241: jump @1181 if a1 == 0\n      : @1180 (gas: 1)\n 89244: trap\n      : @1181 (gas: 4)\n 89245: i32 s1 = a0 + 0\n 89247: a0 = u64 [sp + 0x20]\n 89250: a1 = s1\n 89252: ra = 1030, jump @0\n      : @1182 [@dyn 515] (gas: 6)\n 89259: i32 a1 = a0 + 0\n 89261: a0 = 0x1\n 89264: a2 = s1\n 89266: ra = 0x408\n 89270: ecalli 14 // 'seal_return'\n 89272: fallthrough\n      : @1183 [@dyn 516] (gas: 15)\n 89273: sp = sp + 0xffffffffffffffd0\n 89276: u64 [sp + 0x28] = ra\n 89279: u64 [sp + 0x20] = s0\n 89282: s0 = sp + 0x30\n 89285: sp = sp & 0xfffffffffffffff0\n 89288: a1 = u64 [a0]\n 89290: a2 = u64 [a0 + 0x8]\n 89293: a3 = u64 [a0 + 0x10]\n 89296: a0 = u64 [a0 + 0x18]\n 89299: u64 [sp + 0x18] = a0\n 89302: u64 [sp + 0x10] = a3\n 89305: u64 [sp + 0x8] = a2\n 89308: a0 = sp\n 89310: u64 [sp] = a1\n 89312: ra = 1034, jump @1128\n      : @1184 [@dyn 517] (gas: 5)\n 89318: sp = s0 + 0xffffffffffffffd0\n 89321: ra = u64 [sp + 0x28]\n 89324: s0 = u64 [sp + 0x20]\n 89327: sp = sp + 0x30\n 89330: ret\n      : @1185 (gas: 17)\n 89332: sp = sp + 0xffffffffffffffa0\n 89335: u64 [sp + 0x58] = ra\n 89338: u64 [sp + 0x50] = s0\n 89341: u64 [sp + 0x48] = s1\n 89344: a3 = u64 [a1 + 0x18]\n 89347: a4 = u64 [a1 + 0x10]\n 89350: a5 = u64 [a1 + 0x8]\n 89353: s1 = u64 [a1]\n 89355: a1 = a5 | a3\n 89358: a2 = s1 | a4\n 89361: a2 = a2 | a1\n 89364: a2 = a2 >> 0x20\n 89367: a1 = a1 | a4\n 89370: a1 = a1 << 0x20\n 89373: a1 = a1 | a2\n 89376: u64 [sp + 0x28] = a0\n 89379: jump @1192 if a1 != 0\n      : @1186 (gas: 19)\n 89383: a0 = s1 + 0x20\n 89386: u64 [sp + 0x30] = a0\n 89389: a0 = a0 <u s1\n 89392: a1 = a5 + a0\n 89395: u64 [sp + 0x40] = a1\n 89398: u64 [sp + 0x8] = a5\n 89401: s0 = a1 <u a5\n 89404: s0 = a0 if a0 == 0\n 89407: s0 = s0 + a4\n 89410: u64 [sp + 0x10] = a4\n 89413: a0 = s0 <u a4\n 89416: u64 [sp + 0x18] = a3\n 89419: a0 = a0 + a3\n 89422: u64 [sp + 0x38] = a0\n 89425: u64 [sp] = s1\n 89427: i32 a0 = s1 + 0\n 89429: a1 = 0x20\n 89432: s1 = 0x20\n 89435: ra = 1036, jump @0\n      : @1187 [@dyn 518] (gas: 45)\n 89442: u8 [a0 + 0x1f] = s1\n 89445: a1 = u64 [sp + 0x30]\n 89448: s1 = a1\n 89450: a1 = a1 | s0\n 89453: a2 = u64 [sp + 0x40]\n 89456: a4 = u64 [sp + 0x38]\n 89459: a2 = a2 | a4\n 89462: a1 = a1 | a2\n 89465: a1 = a1 >> 0x20\n 89468: u64 [sp + 0x20] = s0\n 89471: a2 = a2 | s0\n 89474: a2 = a2 << 0x20\n 89477: a1 = a1 | a2\n 89480: u8 [a0 + 30] = 0\n 89483: u8 [a0 + 29] = 0\n 89486: u8 [a0 + 28] = 0\n 89489: u8 [a0 + 27] = 0\n 89492: u8 [a0 + 26] = 0\n 89495: u8 [a0 + 25] = 0\n 89498: u8 [a0 + 24] = 0\n 89501: u8 [a0 + 23] = 0\n 89504: u8 [a0 + 22] = 0\n 89507: u8 [a0 + 21] = 0\n 89510: u8 [a0 + 20] = 0\n 89513: u8 [a0 + 19] = 0\n 89516: u8 [a0 + 18] = 0\n 89519: u8 [a0 + 17] = 0\n 89522: u8 [a0 + 16] = 0\n 89525: u8 [a0 + 15] = 0\n 89528: u8 [a0 + 14] = 0\n 89531: u8 [a0 + 13] = 0\n 89534: u8 [a0 + 12] = 0\n 89537: u8 [a0 + 11] = 0\n 89540: u8 [a0 + 10] = 0\n 89543: u8 [a0 + 9] = 0\n 89546: u8 [a0 + 8] = 0\n 89549: u8 [a0 + 7] = 0\n 89552: u8 [a0 + 6] = 0\n 89555: u8 [a0 + 5] = 0\n 89558: u8 [a0 + 4] = 0\n 89561: u8 [a0 + 3] = 0\n 89564: u8 [a0 + 2] = 0\n 89567: u8 [a0 + 1] = 0\n 89570: u8 [a0 + 0] = 0\n 89572: jump @1192 if a1 != 0\n      : @1188 (gas: 4)\n 89576: i32 s0 = s1 + 0\n 89578: a1 = 0x20\n 89581: a0 = s0\n 89583: ra = 1038, jump @0\n      : @1189 [@dyn 519] (gas: 41)\n 89590: u8 [a0 + 31] = 0x1f\n 89594: u8 [a0 + 30] = 0\n 89597: u8 [a0 + 29] = 0\n 89600: u8 [a0 + 28] = 0\n 89603: u8 [a0 + 27] = 0\n 89606: u8 [a0 + 26] = 0\n 89609: u8 [a0 + 25] = 0\n 89612: u8 [a0 + 24] = 0\n 89615: u8 [a0 + 23] = 0\n 89618: u8 [a0 + 22] = 0\n 89621: u8 [a0 + 21] = 0\n 89624: u8 [a0 + 20] = 0\n 89627: u8 [a0 + 19] = 0\n 89630: u8 [a0 + 18] = 0\n 89633: u8 [a0 + 17] = 0\n 89636: u8 [a0 + 16] = 0\n 89639: u8 [a0 + 15] = 0\n 89642: u8 [a0 + 14] = 0\n 89645: u8 [a0 + 13] = 0\n 89648: u8 [a0 + 12] = 0\n 89651: u8 [a0 + 11] = 0\n 89654: u8 [a0 + 10] = 0\n 89657: u8 [a0 + 9] = 0\n 89660: u8 [a0 + 8] = 0\n 89663: u8 [a0 + 7] = 0\n 89666: u8 [a0 + 6] = 0\n 89669: u8 [a0 + 5] = 0\n 89672: u8 [a0 + 4] = 0\n 89675: u8 [a0 + 3] = 0\n 89678: u8 [a0 + 2] = 0\n 89681: u8 [a0 + 1] = 0\n 89684: a1 = u64 [sp + 0x20]\n 89687: a2 = u64 [sp + 0x38]\n 89690: a1 = a1 | a2\n 89693: a2 = 0xffffffe0\n 89703: a2 = s1 <u a2\n 89706: a3 = u64 [sp + 0x40]\n 89709: a2 = 0 if a3 != 0\n 89711: a2 = 0 if a1 != 0\n 89713: u8 [a0 + 0] = 0\n 89715: jump @1192 if a2 == 0\n      : @1190 (gas: 3)\n 89719: i32 a0 = s0 + 0x20\n 89722: a1 = 0x20\n 89725: ra = 1040, jump @0\n      : @1191 [@dyn 520] (gas: 55)\n 89732: u8 [a0 + 31] = 0\n 89735: u8 [a0 + 30] = 0x72\n 89739: u8 [a0 + 29] = 0x65\n 89743: u8 [a0 + 28] = 0x79\n 89747: u8 [a0 + 27] = 0x75\n 89751: u8 [a0 + 26] = 0x62\n 89755: u8 [a0 + 25] = 0x20\n 89759: u8 [a0 + 24] = 0x65\n 89763: u8 [a0 + 23] = 0x68\n 89767: u8 [a0 + 22] = 0x74\n 89771: u8 [a0 + 21] = 0x20\n 89775: u8 [a0 + 20] = 0x74\n 89779: u8 [a0 + 19] = 0x6f\n 89783: u8 [a0 + 18] = 0x6e\n 89787: u8 [a0 + 17] = 0x20\n 89791: u8 [a0 + 16] = 0x73\n 89795: u8 [a0 + 15] = 0x69\n 89799: u8 [a0 + 14] = 0x20\n 89803: u8 [a0 + 13] = 0x72\n 89807: u8 [a0 + 12] = 0x65\n 89811: u8 [a0 + 11] = 0x6c\n 89815: u8 [a0 + 10] = 0x6c\n 89819: u8 [a0 + 9] = 0x61\n 89823: u8 [a0 + 8] = 0x63\n 89827: u8 [a0 + 7] = 0x20\n 89831: u8 [a0 + 6] = 0x3a\n 89835: a5 = 0x77\n 89838: u8 [a0 + 0x5] = a5\n 89841: u8 [a0 + 4] = 0x6f\n 89845: u8 [a0 + 3] = 0x72\n 89849: u8 [a0 + 2] = 0x63\n 89853: u8 [a0 + 1] = 0x73\n 89857: u8 [a0 + 0] = 0x45\n 89860: a1 = u64 [sp]\n 89862: a0 = a1 + 0x60\n 89865: a1 = a0 <u a1\n 89868: a3 = u64 [sp + 0x8]\n 89871: a2 = a3 + a1\n 89874: a3 = a2 <u a3\n 89877: a3 = a1 if a1 == 0\n 89880: a1 = u64 [sp + 0x10]\n 89883: a3 = a3 + a1\n 89886: a1 = a3 <u a1\n 89889: a4 = u64 [sp + 0x18]\n 89892: a1 = a1 + a4\n 89895: a4 = u64 [sp + 0x28]\n 89898: u64 [a4] = a0\n 89900: u64 [a4 + 0x8] = a2\n 89903: u64 [a4 + 0x10] = a3\n 89906: u64 [a4 + 0x18] = a1\n 89909: ra = u64 [sp + 0x58]\n 89912: s0 = u64 [sp + 0x50]\n 89915: s1 = u64 [sp + 0x48]\n 89918: sp = sp + 0x60\n 89921: ret\n      : @1192 (gas: 1)\n 89923: trap\n      : @1193 (gas: 17)\n 89924: sp = sp + 0xffffffffffffffa0\n 89927: u64 [sp + 0x58] = ra\n 89930: u64 [sp + 0x50] = s0\n 89933: u64 [sp + 0x48] = s1\n 89936: a3 = u64 [a1 + 0x18]\n 89939: a4 = u64 [a1 + 0x10]\n 89942: a5 = u64 [a1 + 0x8]\n 89945: s1 = u64 [a1]\n 89947: a1 = a5 | a3\n 89950: a2 = s1 | a4\n 89953: a2 = a2 | a1\n 89956: a2 = a2 >> 0x20\n 89959: a1 = a1 | a4\n 89962: a1 = a1 << 0x20\n 89965: a1 = a1 | a2\n 89968: u64 [sp + 0x28] = a0\n 89971: jump @1200 if a1 != 0\n      : @1194 (gas: 19)\n 89975: a0 = s1 + 0x20\n 89978: u64 [sp + 0x30] = a0\n 89981: a0 = a0 <u s1\n 89984: a1 = a5 + a0\n 89987: u64 [sp + 0x40] = a1\n 89990: u64 [sp + 0x8] = a5\n 89993: s0 = a1 <u a5\n 89996: s0 = a0 if a0 == 0\n 89999: s0 = s0 + a4\n 90002: u64 [sp + 0x10] = a4\n 90005: a0 = s0 <u a4\n 90008: u64 [sp + 0x18] = a3\n 90011: a0 = a0 + a3\n 90014: u64 [sp + 0x38] = a0\n 90017: u64 [sp] = s1\n 90019: i32 a0 = s1 + 0\n 90021: a1 = 0x20\n 90024: s1 = 0x20\n 90027: ra = 1042, jump @0\n      : @1195 [@dyn 521] (gas: 45)\n 90034: u8 [a0 + 0x1f] = s1\n 90037: a1 = u64 [sp + 0x30]\n 90040: s1 = a1\n 90042: a1 = a1 | s0\n 90045: a2 = u64 [sp + 0x40]\n 90048: a4 = u64 [sp + 0x38]\n 90051: a2 = a2 | a4\n 90054: a1 = a1 | a2\n 90057: a1 = a1 >> 0x20\n 90060: u64 [sp + 0x20] = s0\n 90063: a2 = a2 | s0\n 90066: a2 = a2 << 0x20\n 90069: a1 = a1 | a2\n 90072: u8 [a0 + 30] = 0\n 90075: u8 [a0 + 29] = 0\n 90078: u8 [a0 + 28] = 0\n 90081: u8 [a0 + 27] = 0\n 90084: u8 [a0 + 26] = 0\n 90087: u8 [a0 + 25] = 0\n 90090: u8 [a0 + 24] = 0\n 90093: u8 [a0 + 23] = 0\n 90096: u8 [a0 + 22] = 0\n 90099: u8 [a0 + 21] = 0\n 90102: u8 [a0 + 20] = 0\n 90105: u8 [a0 + 19] = 0\n 90108: u8 [a0 + 18] = 0\n 90111: u8 [a0 + 17] = 0\n 90114: u8 [a0 + 16] = 0\n 90117: u8 [a0 + 15] = 0\n 90120: u8 [a0 + 14] = 0\n 90123: u8 [a0 + 13] = 0\n 90126: u8 [a0 + 12] = 0\n 90129: u8 [a0 + 11] = 0\n 90132: u8 [a0 + 10] = 0\n 90135: u8 [a0 + 9] = 0\n 90138: u8 [a0 + 8] = 0\n 90141: u8 [a0 + 7] = 0\n 90144: u8 [a0 + 6] = 0\n 90147: u8 [a0 + 5] = 0\n 90150: u8 [a0 + 4] = 0\n 90153: u8 [a0 + 3] = 0\n 90156: u8 [a0 + 2] = 0\n 90159: u8 [a0 + 1] = 0\n 90162: u8 [a0 + 0] = 0\n 90164: jump @1200 if a1 != 0\n      : @1196 (gas: 4)\n 90168: i32 s0 = s1 + 0\n 90170: a1 = 0x20\n 90173: a0 = s0\n 90175: ra = 1044, jump @0\n      : @1197 [@dyn 522] (gas: 41)\n 90182: u8 [a0 + 31] = 0x1e\n 90186: u8 [a0 + 30] = 0\n 90189: u8 [a0 + 29] = 0\n 90192: u8 [a0 + 28] = 0\n 90195: u8 [a0 + 27] = 0\n 90198: u8 [a0 + 26] = 0\n 90201: u8 [a0 + 25] = 0\n 90204: u8 [a0 + 24] = 0\n 90207: u8 [a0 + 23] = 0\n 90210: u8 [a0 + 22] = 0\n 90213: u8 [a0 + 21] = 0\n 90216: u8 [a0 + 20] = 0\n 90219: u8 [a0 + 19] = 0\n 90222: u8 [a0 + 18] = 0\n 90225: u8 [a0 + 17] = 0\n 90228: u8 [a0 + 16] = 0\n 90231: u8 [a0 + 15] = 0\n 90234: u8 [a0 + 14] = 0\n 90237: u8 [a0 + 13] = 0\n 90240: u8 [a0 + 12] = 0\n 90243: u8 [a0 + 11] = 0\n 90246: u8 [a0 + 10] = 0\n 90249: u8 [a0 + 9] = 0\n 90252: u8 [a0 + 8] = 0\n 90255: u8 [a0 + 7] = 0\n 90258: u8 [a0 + 6] = 0\n 90261: u8 [a0 + 5] = 0\n 90264: u8 [a0 + 4] = 0\n 90267: u8 [a0 + 3] = 0\n 90270: u8 [a0 + 2] = 0\n 90273: u8 [a0 + 1] = 0\n 90276: a1 = u64 [sp + 0x20]\n 90279: a2 = u64 [sp + 0x38]\n 90282: a1 = a1 | a2\n 90285: a2 = 0xffffffe0\n 90295: a2 = s1 <u a2\n 90298: a3 = u64 [sp + 0x40]\n 90301: a2 = 0 if a3 != 0\n 90303: a2 = 0 if a1 != 0\n 90305: u8 [a0 + 0] = 0\n 90307: jump @1200 if a2 == 0\n      : @1198 (gas: 3)\n 90311: i32 a0 = s0 + 0x20\n 90314: a1 = 0x20\n 90317: ra = 1046, jump @0\n      : @1199 [@dyn 523] (gas: 54)\n 90324: u8 [a0 + 22] = 0x79\n 90328: u8 [a0 + 17] = 0x6c\n 90332: u8 [a0 + 25] = 0x61\n 90336: u8 [a0 + 20] = 0x61\n 90340: u8 [a0 + 16] = 0x61\n 90344: u8 [a0 + 28] = 0x65\n 90348: u8 [a0 + 19] = 0x65\n 90352: u8 [a0 + 14] = 0x65\n 90356: u8 [a0 + 13] = 0x74\n 90360: u8 [a0 + 12] = 0x75\n 90364: u8 [a0 + 11] = 0x70\n 90368: u8 [a0 + 26] = 0x69\n 90372: u8 [a0 + 9] = 0x69\n 90376: u8 [a0 + 29] = 0x64\n 90380: u8 [a0 + 21] = 0x64\n 90384: u8 [a0 + 8] = 0x64\n 90388: u8 [a0 + 31] = 0\n 90391: u8 [a0 + 30] = 0\n 90394: u8 [a0 + 23] = 0x20\n 90398: u8 [a0 + 15] = 0x20\n 90402: u8 [a0 + 7] = 0x20\n 90406: u8 [a0 + 6] = 0x3a\n 90410: u8 [a0 + 5] = 0x77\n 90414: u8 [a0 + 4] = 0x6f\n 90418: u8 [a0 + 24] = 0x72\n 90422: u8 [a0 + 18] = 0x72\n 90426: u8 [a0 + 3] = 0x72\n 90430: u8 [a0 + 2] = 0x63\n 90434: u8 [a0 + 27] = 0x73\n 90438: u8 [a0 + 10] = 0x73\n 90442: u8 [a0 + 1] = 0x73\n 90446: u8 [a0 + 0] = 0x45\n 90449: a1 = u64 [sp]\n 90451: a0 = a1 + 0x60\n 90454: a1 = a0 <u a1\n 90457: a3 = u64 [sp + 0x8]\n 90460: a2 = a3 + a1\n 90463: a3 = a2 <u a3\n 90466: a3 = a1 if a1 == 0\n 90469: a1 = u64 [sp + 0x10]\n 90472: a3 = a3 + a1\n 90475: a1 = a3 <u a1\n 90478: a4 = u64 [sp + 0x18]\n 90481: a1 = a1 + a4\n 90484: a4 = u64 [sp + 0x28]\n 90487: u64 [a4] = a0\n 90489: u64 [a4 + 0x8] = a2\n 90492: u64 [a4 + 0x10] = a3\n 90495: u64 [a4 + 0x18] = a1\n 90498: ra = u64 [sp + 0x58]\n 90501: s0 = u64 [sp + 0x50]\n 90504: s1 = u64 [sp + 0x48]\n 90507: sp = sp + 0x60\n 90510: ret\n      : @1200 (gas: 1)\n 90512: trap\n      : @1201 [@dyn 524] (gas: 74)\n 90513: a2 = reverse s1\n 90515: a1 = u64 [sp + 0x48]\n 90518: a3 = reverse a1\n 90520: a1 = u64 [sp + 0x50]\n 90523: a5 = reverse a1\n 90525: a1 = u64 [sp + 0x58]\n 90528: a4 = reverse a1\n 90530: u8 [a0 + 0x18] = a4\n 90533: u8 [a0 + 0x10] = a5\n 90536: u8 [a0 + 0x8] = a3\n 90539: u8 [a0] = a2\n 90541: a1 = a4 >> 0x38\n 90544: u8 [a0 + 0x1f] = a1\n 90547: a1 = a4 >> 0x30\n 90550: u8 [a0 + 0x1e] = a1\n 90553: a1 = a4 >> 0x28\n 90556: u8 [a0 + 0x1d] = a1\n 90559: a1 = a4 >> 0x20\n 90562: u8 [a0 + 0x1c] = a1\n 90565: a1 = a4 >> 0x18\n 90568: u8 [a0 + 0x1b] = a1\n 90571: a1 = a4 >> 0x10\n 90574: u8 [a0 + 0x1a] = a1\n 90577: u64 [sp + 0x10] = a4\n 90580: a1 = a4 >> 0x8\n 90583: u8 [a0 + 0x19] = a1\n 90586: a1 = a5 >> 0x38\n 90589: u8 [a0 + 0x17] = a1\n 90592: a1 = a5 >> 0x30\n 90595: u8 [a0 + 0x16] = a1\n 90598: a1 = a5 >> 0x28\n 90601: u8 [a0 + 0x15] = a1\n 90604: a1 = a5 >> 0x20\n 90607: u8 [a0 + 0x14] = a1\n 90610: a1 = a5 >> 0x18\n 90613: u8 [a0 + 0x13] = a1\n 90616: a1 = a5 >> 0x10\n 90619: u8 [a0 + 0x12] = a1\n 90622: u64 [sp + 0x8] = a5\n 90625: a1 = a5 >> 0x8\n 90628: u8 [a0 + 0x11] = a1\n 90631: a1 = a3 >> 0x38\n 90634: u8 [a0 + 0xf] = a1\n 90637: a1 = a3 >> 0x30\n 90640: u8 [a0 + 0xe] = a1\n 90643: a1 = a3 >> 0x28\n 90646: u8 [a0 + 0xd] = a1\n 90649: a1 = a3 >> 0x20\n 90652: u8 [a0 + 0xc] = a1\n 90655: a1 = a3 >> 0x18\n 90658: u8 [a0 + 0xb] = a1\n 90661: a1 = a3 >> 0x10\n 90664: u8 [a0 + 0xa] = a1\n 90667: u64 [sp + 0x18] = a3\n 90670: a1 = a3 >> 0x8\n 90673: u8 [a0 + 0x9] = a1\n 90676: a1 = a2 >> 0x38\n 90679: u8 [a0 + 0x7] = a1\n 90682: a1 = a2 >> 0x30\n 90685: u8 [a0 + 0x6] = a1\n 90688: a1 = a2 >> 0x28\n 90691: u8 [a0 + 0x5] = a1\n 90694: a1 = a2 >> 0x20\n 90697: u8 [a0 + 0x4] = a1\n 90700: a1 = a2 >> 0x18\n 90703: u8 [a0 + 0x3] = a1\n 90706: a1 = a2 >> 0x10\n 90709: u8 [a0 + 0x2] = a1\n 90712: u64 [sp + 0x20] = a2\n 90715: a1 = a2 >> 0x8\n 90718: u8 [a0 + 0x1] = a1\n 90721: a0 = 0x20\n 90724: a1 = 0x20\n 90727: ra = 1050, jump @0\n      : @1202 [@dyn 525] (gas: 35)\n 90734: u8 [a0 + 31] = 0x4\n 90738: u8 [a0 + 30] = 0\n 90741: u8 [a0 + 29] = 0\n 90744: u8 [a0 + 28] = 0\n 90747: u8 [a0 + 27] = 0\n 90750: u8 [a0 + 26] = 0\n 90753: u8 [a0 + 25] = 0\n 90756: u8 [a0 + 24] = 0\n 90759: u8 [a0 + 23] = 0\n 90762: u8 [a0 + 22] = 0\n 90765: u8 [a0 + 21] = 0\n 90768: u8 [a0 + 20] = 0\n 90771: u8 [a0 + 19] = 0\n 90774: u8 [a0 + 18] = 0\n 90777: u8 [a0 + 17] = 0\n 90780: u8 [a0 + 16] = 0\n 90783: u8 [a0 + 15] = 0\n 90786: u8 [a0 + 14] = 0\n 90789: u8 [a0 + 13] = 0\n 90792: u8 [a0 + 12] = 0\n 90795: u8 [a0 + 11] = 0\n 90798: u8 [a0 + 10] = 0\n 90801: u8 [a0 + 9] = 0\n 90804: u8 [a0 + 8] = 0\n 90807: u8 [a0 + 7] = 0\n 90810: u8 [a0 + 6] = 0\n 90813: u8 [a0 + 5] = 0\n 90816: u8 [a0 + 4] = 0\n 90819: u8 [a0 + 3] = 0\n 90822: u8 [a0 + 2] = 0\n 90825: u8 [a0 + 1] = 0\n 90828: u8 [a0 + 0] = 0\n 90830: a1 = 0x40\n 90833: a0 = 0\n 90835: ra = 1052, jump @0\n      : @1203 [@dyn 526] (gas: 53)\n 90842: i32 a0 = a0 + 0\n 90844: i32 a2 = sp + 0x180\n 90848: a1 = 0x40\n 90851: ecalli 9 // 'hash_keccak_256'\n 90853: a0 = u64 [sp + 0x198]\n 90857: a1 = u64 [sp + 0x190]\n 90861: a2 = u64 [sp + 0x188]\n 90865: a3 = u64 [sp + 0x180]\n 90869: a0 = reverse a0\n 90871: u64 [sp + 0x50] = a0\n 90874: a0 = reverse a1\n 90876: u64 [sp + 0x30] = a0\n 90879: a0 = reverse a2\n 90881: u64 [sp + 0x58] = a0\n 90884: s1 = reverse a3\n 90886: i32 a0 = sp + 0x120\n 90890: ecalli 5 // 'caller'\n 90892: a0 = u64 [sp + 0x128]\n 90896: a1 = u64 [sp + 0x120]\n 90900: a2 = i32 [sp + 0x130]\n 90904: a0 = reverse a0\n 90906: a3 = a0 >> 0x20\n 90909: a1 = reverse a1\n 90911: a4 = a1 << 0x20\n 90914: a3 = a3 | a4\n 90917: u64 [sp + 0x48] = a3\n 90920: a0 = a0 << 0x20\n 90923: a2 = reverse a2\n 90925: a2 = a2 >> 0x20\n 90928: a0 = a0 | a2\n 90931: u64 [sp + 0x40] = a0\n 90934: a1 = a1 >> 0x20\n 90937: u64 [sp + 0x38] = a1\n 90940: u64 [sp + 0x28] = s1\n 90943: u64 [sp + 0x178] = s1\n 90947: s1 = u64 [sp + 0x30]\n 90950: a0 = u64 [sp + 0x58]\n 90953: u64 [sp + 0x170] = a0\n 90957: u64 [sp + 0x168] = s1\n 90961: a0 = u64 [sp + 0x50]\n 90964: u64 [sp + 0x160] = a0\n 90968: u64 [sp + 408] = 0\n 90972: u64 [sp + 400] = 0\n 90976: u64 [sp + 392] = 0\n 90980: u64 [sp + 384] = 0\n 90984: u32 [sp + 320] = 0x20\n 90989: i32 a1 = sp + 0x160\n 90993: i32 a3 = sp + 0x180\n 90997: i32 a4 = sp + 0x140\n 91001: a2 = 0xffffffffffffffff\n 91004: a0 = 0\n 91006: ecalli 8 // 'get_storage'\n 91008: fallthrough\n      : @1204 (gas: 12)\n 91009: a0 = u32 [sp + 0x190]\n 91013: a1 = u64 [sp + 0x180]\n 91017: a2 = u64 [sp + 0x188]\n 91021: a3 = u64 [sp + 0x38]\n 91024: a0 = a0 ^ a3\n 91027: a3 = u64 [sp + 0x40]\n 91030: a1 = a1 ^ a3\n 91033: a0 = a0 | a1\n 91036: a1 = u64 [sp + 0x48]\n 91039: a1 = a1 ^ a2\n 91042: a0 = a0 | a1\n 91045: jump @1213 if a0 != 0\n      : @1205 (gas: 31)\n 91049: a0 = u64 [sp + 0x50]\n 91052: a1 = a0 + 0x2\n 91055: a0 = a1 <u a0\n 91058: a2 = s1 + a0\n 91061: s1 = a2 <u s1\n 91064: s1 = a0 if a0 == 0\n 91067: a0 = u64 [sp + 0x58]\n 91070: a3 = a0 + s1\n 91073: s1 = a2\n 91075: a0 = a3 <u a0\n 91078: a2 = u64 [sp + 0x28]\n 91081: a0 = a0 + a2\n 91084: u64 [sp + 0x58] = a1\n 91087: u64 [sp + 0x160] = a1\n 91091: u64 [sp + 0x168] = s1\n 91095: u64 [sp + 0x50] = a3\n 91098: u64 [sp + 0x170] = a3\n 91102: u64 [sp + 0x48] = a0\n 91105: u64 [sp + 0x178] = a0\n 91109: u64 [sp + 408] = 0\n 91113: u64 [sp + 400] = 0\n 91117: u64 [sp + 392] = 0\n 91121: u64 [sp + 384] = 0\n 91125: u32 [sp + 320] = 0x20\n 91130: i32 a1 = sp + 0x160\n 91134: i32 a3 = sp + 0x180\n 91138: i32 a4 = sp + 0x140\n 91142: a2 = 0xffffffffffffffff\n 91145: a0 = 0\n 91147: ecalli 8 // 'get_storage'\n 91149: fallthrough\n      : @1206 (gas: 2)\n 91150: a0 = u8 [sp + 0x180]\n 91154: jump @1218 if a0 != 0\n      : @1207 (gas: 19)\n 91158: a0 = u64 [sp + 0x50]\n 91161: u64 [sp + 0x170] = a0\n 91165: u64 [sp + 0x168] = s1\n 91169: a0 = u64 [sp + 0x58]\n 91172: u64 [sp + 0x160] = a0\n 91176: a0 = u64 [sp + 0x48]\n 91179: u64 [sp + 0x178] = a0\n 91183: u64 [sp + 408] = 0\n 91187: u64 [sp + 400] = 0\n 91191: u64 [sp + 392] = 0\n 91195: u64 [sp + 384] = 0\n 91199: u32 [sp + 320] = 0x20\n 91204: i32 a1 = sp + 0x160\n 91208: i32 a3 = sp + 0x180\n 91212: i32 a4 = sp + 0x140\n 91216: a2 = 0xffffffffffffffff\n 91219: a0 = 0\n 91221: ecalli 8 // 'get_storage'\n 91223: fallthrough\n      : @1208 (gas: 2)\n 91224: a0 = u8 [sp + 0x181]\n 91228: jump @1223 if a0 != 0\n      : @1209 (gas: 45)\n 91232: a0 = u64 [sp + 0x50]\n 91235: u64 [sp + 0x170] = a0\n 91239: u64 [sp + 0x168] = s1\n 91243: u64 [sp + 0x40] = s1\n 91246: a0 = u64 [sp + 0x58]\n 91249: u64 [sp + 0x160] = a0\n 91253: s1 = u64 [sp + 0x48]\n 91256: u64 [sp + 0x178] = s1\n 91260: u64 [sp + 408] = 0\n 91264: u64 [sp + 400] = 0\n 91268: u64 [sp + 392] = 0\n 91272: u64 [sp + 384] = 0\n 91276: u32 [sp + 320] = 0x20\n 91281: i32 a1 = sp + 0x160\n 91285: i32 a3 = sp + 0x180\n 91289: i32 a4 = sp + 0x140\n 91293: a2 = 0xffffffffffffffff\n 91296: a0 = 0\n 91298: ecalli 8 // 'get_storage'\n 91300: a0 = u64 [sp + 0x188]\n 91304: a1 = u64 [sp + 0x190]\n 91308: a2 = u64 [sp + 0x180]\n 91312: a3 = u64 [sp + 0x198]\n 91316: a2 = a2 & 0xffffffffffff00ff\n 91321: a2 = a2 | 0x100\n 91325: u64 [sp + 0x178] = s1\n 91329: a4 = u64 [sp + 0x50]\n 91332: u64 [sp + 0x170] = a4\n 91336: a4 = u64 [sp + 0x40]\n 91339: u64 [sp + 0x168] = a4\n 91343: a4 = u64 [sp + 0x58]\n 91346: u64 [sp + 0x160] = a4\n 91350: u64 [sp + 0x198] = a3\n 91354: u64 [sp + 0x190] = a1\n 91358: u64 [sp + 0x188] = a0\n 91362: u64 [sp + 0x180] = a2\n 91366: i32 a1 = sp + 0x160\n 91370: i32 a3 = sp + 0x180\n 91374: a2 = 0xffffffffffffffff\n 91377: a4 = 0x20\n 91380: a0 = 0\n 91382: ecalli 16 // 'set_storage'\n 91384: a0 = 0x40\n 91387: a1 = 0x20\n 91390: ra = 1054, jump @0\n      : @1210 [@dyn 527] (gas: 100)\n 91397: a1 = u8 [a0 + 0x11]\n 91400: a2 = u8 [a0 + 0x10]\n 91403: a3 = u8 [a0 + 0x12]\n 91406: a4 = u8 [a0 + 0x13]\n 91409: a1 = a1 << 0x8\n 91412: a1 = a1 | a2\n 91415: a3 = a3 << 0x10\n 91418: a4 = a4 << 0x18\n 91421: a3 = a3 | a4\n 91424: a1 = a1 | a3\n 91427: a2 = u8 [a0 + 0x15]\n 91430: a3 = u8 [a0 + 0x14]\n 91433: a4 = u8 [a0 + 0x16]\n 91436: a5 = u8 [a0 + 0x17]\n 91439: a2 = a2 << 0x8\n 91442: a2 = a2 | a3\n 91445: a4 = a4 << 0x10\n 91448: a5 = a5 << 0x18\n 91451: a4 = a4 | a5\n 91454: a2 = a2 | a4\n 91457: a2 = a2 << 0x20\n 91460: t0 = a2 | a1\n 91463: a2 = u8 [a0 + 0x1]\n 91466: a3 = u8 [a0]\n 91468: a4 = u8 [a0 + 0x2]\n 91471: a5 = u8 [a0 + 0x3]\n 91474: a2 = a2 << 0x8\n 91477: a2 = a2 | a3\n 91480: a4 = a4 << 0x10\n 91483: a5 = a5 << 0x18\n 91486: a4 = a4 | a5\n 91489: a2 = a2 | a4\n 91492: a3 = u8 [a0 + 0x5]\n 91495: a4 = u8 [a0 + 0x4]\n 91498: a5 = u8 [a0 + 0x6]\n 91501: s1 = u8 [a0 + 0x7]\n 91504: a3 = a3 << 0x8\n 91507: a3 = a3 | a4\n 91510: a5 = a5 << 0x10\n 91513: s1 = s1 << 0x18\n 91516: a5 = a5 | s1\n 91519: a3 = a3 | a5\n 91522: a3 = a3 << 0x20\n 91525: a2 = a2 | a3\n 91528: a3 = u8 [a0 + 0x19]\n 91531: a4 = u8 [a0 + 0x18]\n 91534: a5 = u8 [a0 + 0x1a]\n 91537: s1 = u8 [a0 + 0x1b]\n 91540: a3 = a3 << 0x8\n 91543: a3 = a3 | a4\n 91546: a5 = a5 << 0x10\n 91549: s1 = s1 << 0x18\n 91552: a5 = a5 | s1\n 91555: a3 = a3 | a5\n 91558: a4 = u8 [a0 + 0x1d]\n 91561: a5 = u8 [a0 + 0x1c]\n 91564: s1 = u8 [a0 + 0x1e]\n 91567: a1 = u8 [a0 + 0x1f]\n 91570: a4 = a4 << 0x8\n 91573: a4 = a4 | a5\n 91576: s1 = s1 << 0x10\n 91579: a1 = a1 << 0x18\n 91582: a1 = a1 | s1\n 91585: a1 = a1 | a4\n 91588: a1 = a1 << 0x20\n 91591: a3 = a3 | a1\n 91594: a1 = u8 [a0 + 0x9]\n 91597: a4 = u8 [a0 + 0x8]\n 91600: a5 = u8 [a0 + 0xa]\n 91603: s1 = u8 [a0 + 0xb]\n 91606: a1 = a1 << 0x8\n 91609: a1 = a1 | a4\n 91612: a5 = a5 << 0x10\n 91615: s1 = s1 << 0x18\n 91618: a5 = a5 | s1\n 91621: a1 = a1 | a5\n 91624: a4 = u8 [a0 + 0xd]\n 91627: a5 = u8 [a0 + 0xc]\n 91630: s1 = u8 [a0 + 0xe]\n 91633: a0 = u8 [a0 + 0xf]\n 91636: a4 = a4 << 0x8\n 91639: a4 = a4 | a5\n 91642: s1 = s1 << 0x10\n 91645: a0 = a0 << 0x18\n 91648: a0 = a0 | s1\n 91651: a0 = a0 | a4\n 91654: a0 = a0 << 0x20\n 91657: a0 = a0 | a1\n 91660: a1 = reverse a0\n 91662: a0 = reverse a3\n 91664: a2 = reverse a2\n 91666: a3 = reverse t0\n 91668: a2 = a2 | a3\n 91671: a3 = a0 | a1\n 91674: a3 = a3 | a2\n 91677: a3 = a3 >> 0x20\n 91680: a1 = a1 | a2\n 91683: a1 = a1 << 0x20\n 91686: a1 = a1 | a3\n 91689: jump @1229 if a1 != 0\n      : @1211 (gas: 2)\n 91693: i32 a0 = a0 + 0\n 91695: ra = 1056, jump @0\n      : @1212 [@dyn 528] (gas: 27)\n 91702: a1 = u64 [0x20040]\n 91707: a2 = u64 [0x20048]\n 91712: a3 = u64 [0x20050]\n 91717: a4 = u64 [0x20058]\n 91722: u64 [sp + 0x198] = a1\n 91726: u64 [sp + 0x190] = a2\n 91730: u64 [sp + 0x188] = a3\n 91734: u64 [sp + 0x180] = a4\n 91738: a1 = u64 [sp + 0x8]\n 91741: u64 [sp + 0x1b0] = a1\n 91745: a1 = u64 [sp + 0x18]\n 91748: u64 [sp + 0x1a8] = a1\n 91752: a1 = u64 [sp + 0x20]\n 91755: u64 [sp + 0x1a0] = a1\n 91759: a1 = u64 [sp + 0x10]\n 91762: u64 [sp + 0x1b8] = a1\n 91766: i32 a2 = a0 + 0\n 91768: i32 a0 = sp + 0x180\n 91772: a1 = 0x2\n 91775: a3 = 0\n 91777: ecalli 6 // 'deposit_event'\n 91779: sp = s0 + 0xfffffffffffffe20\n 91783: ra = u64 [sp + 0x1d8]\n 91787: s0 = u64 [sp + 0x1d0]\n 91791: s1 = u64 [sp + 0x1c8]\n 91795: sp = sp + 0x1e0\n 91799: ret\n      : @1213 (gas: 3)\n 91801: a0 = 0x40\n 91804: a1 = 0x20\n 91807: ra = 1058, jump @0\n      : @1214 [@dyn 529] (gas: 103)\n 91814: a1 = u8 [a0 + 0x11]\n 91817: a2 = u8 [a0 + 0x10]\n 91820: a3 = u8 [a0 + 0x12]\n 91823: a4 = u8 [a0 + 0x13]\n 91826: a1 = a1 << 0x8\n 91829: a1 = a1 | a2\n 91832: a3 = a3 << 0x10\n 91835: a4 = a4 << 0x18\n 91838: a3 = a3 | a4\n 91841: a1 = a1 | a3\n 91844: a2 = u8 [a0 + 0x15]\n 91847: a3 = u8 [a0 + 0x14]\n 91850: a4 = u8 [a0 + 0x16]\n 91853: a5 = u8 [a0 + 0x17]\n 91856: a2 = a2 << 0x8\n 91859: a2 = a2 | a3\n 91862: a4 = a4 << 0x10\n 91865: a5 = a5 << 0x18\n 91868: a4 = a4 | a5\n 91871: a2 = a2 | a4\n 91874: a2 = a2 << 0x20\n 91877: t0 = a2 | a1\n 91880: a2 = u8 [a0 + 0x1]\n 91883: a3 = u8 [a0]\n 91885: a4 = u8 [a0 + 0x2]\n 91888: a5 = u8 [a0 + 0x3]\n 91891: a2 = a2 << 0x8\n 91894: a2 = a2 | a3\n 91897: a4 = a4 << 0x10\n 91900: a5 = a5 << 0x18\n 91903: a4 = a4 | a5\n 91906: a2 = a2 | a4\n 91909: a3 = u8 [a0 + 0x5]\n 91912: a4 = u8 [a0 + 0x4]\n 91915: a5 = u8 [a0 + 0x6]\n 91918: s1 = u8 [a0 + 0x7]\n 91921: a3 = a3 << 0x8\n 91924: a3 = a3 | a4\n 91927: a5 = a5 << 0x10\n 91930: s1 = s1 << 0x18\n 91933: a5 = a5 | s1\n 91936: a3 = a3 | a5\n 91939: a3 = a3 << 0x20\n 91942: a2 = a2 | a3\n 91945: a3 = u8 [a0 + 0x19]\n 91948: a4 = u8 [a0 + 0x18]\n 91951: a5 = u8 [a0 + 0x1a]\n 91954: s1 = u8 [a0 + 0x1b]\n 91957: a3 = a3 << 0x8\n 91960: a3 = a3 | a4\n 91963: a5 = a5 << 0x10\n 91966: s1 = s1 << 0x18\n 91969: a5 = a5 | s1\n 91972: a3 = a3 | a5\n 91975: a4 = u8 [a0 + 0x1d]\n 91978: a5 = u8 [a0 + 0x1c]\n 91981: s1 = u8 [a0 + 0x1e]\n 91984: a1 = u8 [a0 + 0x1f]\n 91987: a4 = a4 << 0x8\n 91990: a4 = a4 | a5\n 91993: s1 = s1 << 0x10\n 91996: a1 = a1 << 0x18\n 91999: a1 = a1 | s1\n 92002: a1 = a1 | a4\n 92005: a1 = a1 << 0x20\n 92008: a3 = a3 | a1\n 92011: a1 = u8 [a0 + 0x9]\n 92014: a4 = u8 [a0 + 0x8]\n 92017: a5 = u8 [a0 + 0xa]\n 92020: s1 = u8 [a0 + 0xb]\n 92023: a1 = a1 << 0x8\n 92026: a1 = a1 | a4\n 92029: a5 = a5 << 0x10\n 92032: s1 = s1 << 0x18\n 92035: a5 = a5 | s1\n 92038: a1 = a1 | a5\n 92041: a4 = u8 [a0 + 0xd]\n 92044: a5 = u8 [a0 + 0xc]\n 92047: s1 = u8 [a0 + 0xe]\n 92050: a0 = u8 [a0 + 0xf]\n 92053: a4 = a4 << 0x8\n 92056: a4 = a4 | a5\n 92059: s1 = s1 << 0x10\n 92062: a0 = a0 << 0x18\n 92065: a0 = a0 | s1\n 92068: a0 = a0 | a4\n 92071: a0 = a0 << 0x20\n 92074: a0 = a0 | a1\n 92077: s1 = reverse a0\n 92079: a1 = reverse a3\n 92081: a2 = reverse a2\n 92083: a0 = reverse t0\n 92085: u64 [sp + 0x58] = a0\n 92088: u64 [sp + 0x50] = a2\n 92091: a0 = a0 | a2\n 92094: a2 = a1\n 92096: a1 = a1 | s1\n 92099: a1 = a1 | a0\n 92102: a1 = a1 >> 0x20\n 92105: a0 = a0 | s1\n 92108: a0 = a0 << 0x20\n 92111: a0 = a0 | a1\n 92114: jump @1229 if a0 != 0\n      : @1215 (gas: 5)\n 92118: u64 [sp + 0x48] = a2\n 92121: i32 a0 = a2 + 0\n 92123: a1 = 0x20\n 92126: u64 [sp + 0x40] = a0\n 92129: ra = 1060, jump @0\n      : @1216 [@dyn 530] (gas: 50)\n 92136: u8 [a0 + 31] = 0\n 92139: u8 [a0 + 30] = 0\n 92142: u8 [a0 + 29] = 0\n 92145: u8 [a0 + 28] = 0\n 92148: u8 [a0 + 27] = 0\n 92151: u8 [a0 + 26] = 0\n 92154: u8 [a0 + 25] = 0\n 92157: u8 [a0 + 24] = 0\n 92160: u8 [a0 + 23] = 0\n 92163: u8 [a0 + 22] = 0\n 92166: u8 [a0 + 21] = 0\n 92169: u8 [a0 + 20] = 0\n 92172: u8 [a0 + 19] = 0\n 92175: u8 [a0 + 18] = 0\n 92178: u8 [a0 + 17] = 0\n 92181: u8 [a0 + 16] = 0\n 92184: u8 [a0 + 15] = 0\n 92187: u8 [a0 + 14] = 0\n 92190: u8 [a0 + 13] = 0\n 92193: u8 [a0 + 12] = 0\n 92196: u8 [a0 + 11] = 0\n 92199: u8 [a0 + 10] = 0\n 92202: u8 [a0 + 9] = 0\n 92205: u8 [a0 + 8] = 0\n 92208: u8 [a0 + 7] = 0\n 92211: u8 [a0 + 6] = 0\n 92214: u8 [a0 + 5] = 0\n 92217: u8 [a0 + 4] = 0\n 92220: u8 [a0 + 3] = 0xa0\n 92225: u8 [a0 + 2] = 0x79\n 92229: u8 [a0 + 1] = 0xc3\n 92234: u8 [a0 + 0] = 0x8\n 92237: a1 = u64 [sp + 0x48]\n 92240: a0 = a1 + 0x4\n 92243: a1 = a0 <u a1\n 92246: a3 = u64 [sp + 0x58]\n 92249: a2 = a3 + a1\n 92252: a3 = a2 <u a3\n 92255: a3 = a1 if a1 == 0\n 92258: a3 = a3 + s1\n 92261: a1 = a3 <u s1\n 92264: a4 = u64 [sp + 0x50]\n 92267: a4 = a4 + a1\n 92270: u64 [sp + 0xe8] = a2\n 92274: u64 [sp + 0xe0] = a0\n 92278: u64 [sp + 0xf0] = a3\n 92282: a0 = sp + 0x100\n 92286: a1 = sp + 0xe0\n 92290: u64 [sp + 0xf8] = a4\n 92294: ra = 1062, jump @1185\n      : @1217 [@dyn 531] (gas: 5)\n 92300: a0 = u64 [sp + 0x108]\n 92304: t0 = u64 [sp + 0x118]\n 92308: t1 = u64 [sp + 0x100]\n 92312: a3 = u64 [sp + 0x110]\n 92316: jump @1228\n      : @1218 (gas: 3)\n 92319: a0 = 0x40\n 92322: a1 = 0x20\n 92325: ra = 1064, jump @0\n      : @1219 [@dyn 532] (gas: 103)\n 92332: a1 = u8 [a0 + 0x11]\n 92335: a2 = u8 [a0 + 0x10]\n 92338: a3 = u8 [a0 + 0x12]\n 92341: a4 = u8 [a0 + 0x13]\n 92344: a1 = a1 << 0x8\n 92347: a1 = a1 | a2\n 92350: a3 = a3 << 0x10\n 92353: a4 = a4 << 0x18\n 92356: a3 = a3 | a4\n 92359: a1 = a1 | a3\n 92362: a2 = u8 [a0 + 0x15]\n 92365: a3 = u8 [a0 + 0x14]\n 92368: a4 = u8 [a0 + 0x16]\n 92371: a5 = u8 [a0 + 0x17]\n 92374: a2 = a2 << 0x8\n 92377: a2 = a2 | a3\n 92380: a4 = a4 << 0x10\n 92383: a5 = a5 << 0x18\n 92386: a4 = a4 | a5\n 92389: a2 = a2 | a4\n 92392: a2 = a2 << 0x20\n 92395: t0 = a2 | a1\n 92398: a2 = u8 [a0 + 0x1]\n 92401: a3 = u8 [a0]\n 92403: a4 = u8 [a0 + 0x2]\n 92406: a5 = u8 [a0 + 0x3]\n 92409: a2 = a2 << 0x8\n 92412: a2 = a2 | a3\n 92415: a4 = a4 << 0x10\n 92418: a5 = a5 << 0x18\n 92421: a4 = a4 | a5\n 92424: a2 = a2 | a4\n 92427: a3 = u8 [a0 + 0x5]\n 92430: a4 = u8 [a0 + 0x4]\n 92433: a5 = u8 [a0 + 0x6]\n 92436: s1 = u8 [a0 + 0x7]\n 92439: a3 = a3 << 0x8\n 92442: a3 = a3 | a4\n 92445: a5 = a5 << 0x10\n 92448: s1 = s1 << 0x18\n 92451: a5 = a5 | s1\n 92454: a3 = a3 | a5\n 92457: a3 = a3 << 0x20\n 92460: a2 = a2 | a3\n 92463: a3 = u8 [a0 + 0x19]\n 92466: a4 = u8 [a0 + 0x18]\n 92469: a5 = u8 [a0 + 0x1a]\n 92472: s1 = u8 [a0 + 0x1b]\n 92475: a3 = a3 << 0x8\n 92478: a3 = a3 | a4\n 92481: a5 = a5 << 0x10\n 92484: s1 = s1 << 0x18\n 92487: a5 = a5 | s1\n 92490: a3 = a3 | a5\n 92493: a4 = u8 [a0 + 0x1d]\n 92496: a5 = u8 [a0 + 0x1c]\n 92499: s1 = u8 [a0 + 0x1e]\n 92502: a1 = u8 [a0 + 0x1f]\n 92505: a4 = a4 << 0x8\n 92508: a4 = a4 | a5\n 92511: s1 = s1 << 0x10\n 92514: a1 = a1 << 0x18\n 92517: a1 = a1 | s1\n 92520: a1 = a1 | a4\n 92523: a1 = a1 << 0x20\n 92526: a3 = a3 | a1\n 92529: a1 = u8 [a0 + 0x9]\n 92532: a4 = u8 [a0 + 0x8]\n 92535: a5 = u8 [a0 + 0xa]\n 92538: s1 = u8 [a0 + 0xb]\n 92541: a1 = a1 << 0x8\n 92544: a1 = a1 | a4\n 92547: a5 = a5 << 0x10\n 92550: s1 = s1 << 0x18\n 92553: a5 = a5 | s1\n 92556: a1 = a1 | a5\n 92559: a4 = u8 [a0 + 0xd]\n 92562: a5 = u8 [a0 + 0xc]\n 92565: s1 = u8 [a0 + 0xe]\n 92568: a0 = u8 [a0 + 0xf]\n 92571: a4 = a4 << 0x8\n 92574: a4 = a4 | a5\n 92577: s1 = s1 << 0x10\n 92580: a0 = a0 << 0x18\n 92583: a0 = a0 | s1\n 92586: a0 = a0 | a4\n 92589: a0 = a0 << 0x20\n 92592: a0 = a0 | a1\n 92595: s1 = reverse a0\n 92597: a1 = reverse a3\n 92599: a2 = reverse a2\n 92601: a0 = reverse t0\n 92603: u64 [sp + 0x58] = a0\n 92606: u64 [sp + 0x50] = a2\n 92609: a0 = a0 | a2\n 92612: a2 = a1\n 92614: a1 = a1 | s1\n 92617: a1 = a1 | a0\n 92620: a1 = a1 >> 0x20\n 92623: a0 = a0 | s1\n 92626: a0 = a0 << 0x20\n 92629: a0 = a0 | a1\n 92632: jump @1229 if a0 != 0\n      : @1220 (gas: 5)\n 92636: u64 [sp + 0x48] = a2\n 92639: i32 a0 = a2 + 0\n 92641: a1 = 0x20\n 92644: u64 [sp + 0x40] = a0\n 92647: ra = 1066, jump @0\n      : @1221 [@dyn 533] (gas: 50)\n 92654: u8 [a0 + 31] = 0\n 92657: u8 [a0 + 30] = 0\n 92660: u8 [a0 + 29] = 0\n 92663: u8 [a0 + 28] = 0\n 92666: u8 [a0 + 27] = 0\n 92669: u8 [a0 + 26] = 0\n 92672: u8 [a0 + 25] = 0\n 92675: u8 [a0 + 24] = 0\n 92678: u8 [a0 + 23] = 0\n 92681: u8 [a0 + 22] = 0\n 92684: u8 [a0 + 21] = 0\n 92687: u8 [a0 + 20] = 0\n 92690: u8 [a0 + 19] = 0\n 92693: u8 [a0 + 18] = 0\n 92696: u8 [a0 + 17] = 0\n 92699: u8 [a0 + 16] = 0\n 92702: u8 [a0 + 15] = 0\n 92705: u8 [a0 + 14] = 0\n 92708: u8 [a0 + 13] = 0\n 92711: u8 [a0 + 12] = 0\n 92714: u8 [a0 + 11] = 0\n 92717: u8 [a0 + 10] = 0\n 92720: u8 [a0 + 9] = 0\n 92723: u8 [a0 + 8] = 0\n 92726: u8 [a0 + 7] = 0\n 92729: u8 [a0 + 6] = 0\n 92732: u8 [a0 + 5] = 0\n 92735: u8 [a0 + 4] = 0\n 92738: u8 [a0 + 3] = 0xa0\n 92743: u8 [a0 + 2] = 0x79\n 92747: u8 [a0 + 1] = 0xc3\n 92752: u8 [a0 + 0] = 0x8\n 92755: a1 = u64 [sp + 0x48]\n 92758: a0 = a1 + 0x4\n 92761: a1 = a0 <u a1\n 92764: a3 = u64 [sp + 0x58]\n 92767: a2 = a3 + a1\n 92770: a3 = a2 <u a3\n 92773: a3 = a1 if a1 == 0\n 92776: a3 = a3 + s1\n 92779: a1 = a3 <u s1\n 92782: a4 = u64 [sp + 0x50]\n 92785: a4 = a4 + a1\n 92788: u64 [sp + 0xa8] = a2\n 92792: u64 [sp + 0xa0] = a0\n 92796: u64 [sp + 0xb0] = a3\n 92800: a0 = sp + 0xc0\n 92804: a1 = sp + 0xa0\n 92808: u64 [sp + 0xb8] = a4\n 92812: ra = 1068, jump @1038\n      : @1222 [@dyn 534] (gas: 5)\n 92818: a0 = u64 [sp + 0xc8]\n 92822: t0 = u64 [sp + 0xd8]\n 92826: t1 = u64 [sp + 0xc0]\n 92830: a3 = u64 [sp + 0xd0]\n 92834: jump @1228\n      : @1223 (gas: 3)\n 92837: a0 = 0x40\n 92840: a1 = 0x20\n 92843: ra = 1070, jump @0\n      : @1224 [@dyn 535] (gas: 103)\n 92850: a1 = u8 [a0 + 0x11]\n 92853: a2 = u8 [a0 + 0x10]\n 92856: a3 = u8 [a0 + 0x12]\n 92859: a4 = u8 [a0 + 0x13]\n 92862: a1 = a1 << 0x8\n 92865: a1 = a1 | a2\n 92868: a3 = a3 << 0x10\n 92871: a4 = a4 << 0x18\n 92874: a3 = a3 | a4\n 92877: a1 = a1 | a3\n 92880: a2 = u8 [a0 + 0x15]\n 92883: a3 = u8 [a0 + 0x14]\n 92886: a4 = u8 [a0 + 0x16]\n 92889: a5 = u8 [a0 + 0x17]\n 92892: a2 = a2 << 0x8\n 92895: a2 = a2 | a3\n 92898: a4 = a4 << 0x10\n 92901: a5 = a5 << 0x18\n 92904: a4 = a4 | a5\n 92907: a2 = a2 | a4\n 92910: a2 = a2 << 0x20\n 92913: t0 = a2 | a1\n 92916: a2 = u8 [a0 + 0x1]\n 92919: a3 = u8 [a0]\n 92921: a4 = u8 [a0 + 0x2]\n 92924: a5 = u8 [a0 + 0x3]\n 92927: a2 = a2 << 0x8\n 92930: a2 = a2 | a3\n 92933: a4 = a4 << 0x10\n 92936: a5 = a5 << 0x18\n 92939: a4 = a4 | a5\n 92942: a2 = a2 | a4\n 92945: a3 = u8 [a0 + 0x5]\n 92948: a4 = u8 [a0 + 0x4]\n 92951: a5 = u8 [a0 + 0x6]\n 92954: s1 = u8 [a0 + 0x7]\n 92957: a3 = a3 << 0x8\n 92960: a3 = a3 | a4\n 92963: a5 = a5 << 0x10\n 92966: s1 = s1 << 0x18\n 92969: a5 = a5 | s1\n 92972: a3 = a3 | a5\n 92975: a3 = a3 << 0x20\n 92978: a2 = a2 | a3\n 92981: a3 = u8 [a0 + 0x19]\n 92984: a4 = u8 [a0 + 0x18]\n 92987: a5 = u8 [a0 + 0x1a]\n 92990: s1 = u8 [a0 + 0x1b]\n 92993: a3 = a3 << 0x8\n 92996: a3 = a3 | a4\n 92999: a5 = a5 << 0x10\n 93002: s1 = s1 << 0x18\n 93005: a5 = a5 | s1\n 93008: a3 = a3 | a5\n 93011: a4 = u8 [a0 + 0x1d]\n 93014: a5 = u8 [a0 + 0x1c]\n 93017: s1 = u8 [a0 + 0x1e]\n 93020: a1 = u8 [a0 + 0x1f]\n 93023: a4 = a4 << 0x8\n 93026: a4 = a4 | a5\n 93029: s1 = s1 << 0x10\n 93032: a1 = a1 << 0x18\n 93035: a1 = a1 | s1\n 93038: a1 = a1 | a4\n 93041: a1 = a1 << 0x20\n 93044: a3 = a3 | a1\n 93047: a1 = u8 [a0 + 0x9]\n 93050: a4 = u8 [a0 + 0x8]\n 93053: a5 = u8 [a0 + 0xa]\n 93056: s1 = u8 [a0 + 0xb]\n 93059: a1 = a1 << 0x8\n 93062: a1 = a1 | a4\n 93065: a5 = a5 << 0x10\n 93068: s1 = s1 << 0x18\n 93071: a5 = a5 | s1\n 93074: a1 = a1 | a5\n 93077: a4 = u8 [a0 + 0xd]\n 93080: a5 = u8 [a0 + 0xc]\n 93083: s1 = u8 [a0 + 0xe]\n 93086: a0 = u8 [a0 + 0xf]\n 93089: a4 = a4 << 0x8\n 93092: a4 = a4 | a5\n 93095: s1 = s1 << 0x10\n 93098: a0 = a0 << 0x18\n 93101: a0 = a0 | s1\n 93104: a0 = a0 | a4\n 93107: a0 = a0 << 0x20\n 93110: a0 = a0 | a1\n 93113: s1 = reverse a0\n 93115: a1 = reverse a3\n 93117: a2 = reverse a2\n 93119: a0 = reverse t0\n 93121: u64 [sp + 0x58] = a0\n 93124: u64 [sp + 0x50] = a2\n 93127: a0 = a0 | a2\n 93130: a2 = a1\n 93132: a1 = a1 | s1\n 93135: a1 = a1 | a0\n 93138: a1 = a1 >> 0x20\n 93141: a0 = a0 | s1\n 93144: a0 = a0 << 0x20\n 93147: a0 = a0 | a1\n 93150: jump @1229 if a0 != 0\n      : @1225 (gas: 5)\n 93154: u64 [sp + 0x48] = a2\n 93157: i32 a0 = a2 + 0\n 93159: a1 = 0x20\n 93162: u64 [sp + 0x40] = a0\n 93165: ra = 1072, jump @0\n      : @1226 [@dyn 536] (gas: 50)\n 93172: u8 [a0 + 31] = 0\n 93175: u8 [a0 + 30] = 0\n 93178: u8 [a0 + 29] = 0\n 93181: u8 [a0 + 28] = 0\n 93184: u8 [a0 + 27] = 0\n 93187: u8 [a0 + 26] = 0\n 93190: u8 [a0 + 25] = 0\n 93193: u8 [a0 + 24] = 0\n 93196: u8 [a0 + 23] = 0\n 93199: u8 [a0 + 22] = 0\n 93202: u8 [a0 + 21] = 0\n 93205: u8 [a0 + 20] = 0\n 93208: u8 [a0 + 19] = 0\n 93211: u8 [a0 + 18] = 0\n 93214: u8 [a0 + 17] = 0\n 93217: u8 [a0 + 16] = 0\n 93220: u8 [a0 + 15] = 0\n 93223: u8 [a0 + 14] = 0\n 93226: u8 [a0 + 13] = 0\n 93229: u8 [a0 + 12] = 0\n 93232: u8 [a0 + 11] = 0\n 93235: u8 [a0 + 10] = 0\n 93238: u8 [a0 + 9] = 0\n 93241: u8 [a0 + 8] = 0\n 93244: u8 [a0 + 7] = 0\n 93247: u8 [a0 + 6] = 0\n 93250: u8 [a0 + 5] = 0\n 93253: u8 [a0 + 4] = 0\n 93256: u8 [a0 + 3] = 0xa0\n 93261: u8 [a0 + 2] = 0x79\n 93265: u8 [a0 + 1] = 0xc3\n 93270: u8 [a0 + 0] = 0x8\n 93273: a1 = u64 [sp + 0x48]\n 93276: a0 = a1 + 0x4\n 93279: a1 = a0 <u a1\n 93282: a3 = u64 [sp + 0x58]\n 93285: a2 = a3 + a1\n 93288: a3 = a2 <u a3\n 93291: a3 = a1 if a1 == 0\n 93294: a3 = a3 + s1\n 93297: a1 = a3 <u s1\n 93300: a4 = u64 [sp + 0x50]\n 93303: a4 = a4 + a1\n 93306: u64 [sp + 0x68] = a2\n 93309: u64 [sp + 0x60] = a0\n 93312: u64 [sp + 0x70] = a3\n 93315: a0 = sp + 0x80\n 93319: a1 = sp + 0x60\n 93322: u64 [sp + 0x78] = a4\n 93325: ra = 1074, jump @1193\n      : @1227 [@dyn 537] (gas: 5)\n 93331: a0 = u64 [sp + 0x88]\n 93335: t0 = u64 [sp + 0x98]\n 93339: t1 = u64 [sp + 0x80]\n 93343: a3 = u64 [sp + 0x90]\n 93347: fallthrough\n      : @1228 (gas: 26)\n 93348: a1 = u64 [sp + 0x58]\n 93351: a4 = a0 ^ a1\n 93354: a5 = a0 <u a1\n 93357: t2 = a1\n 93359: a2 = u64 [sp + 0x48]\n 93362: a1 = t1 <u a2\n 93365: a5 = a1 if a4 == 0\n 93368: a4 = a3 - s1\n 93371: a3 = a3 <u s1\n 93374: s1 = u64 [sp + 0x50]\n 93377: s1 = t0 - s1\n 93380: s1 = s1 - a3\n 93383: a3 = a4 <u a5\n 93386: s1 = s1 - a3\n 93389: a4 = a4 - a5\n 93392: a0 = a0 - t2\n 93395: a1 = a0 - a1\n 93398: a0 = t1 - a2\n 93401: a1 = a1 | s1\n 93404: a2 = a0 | a4\n 93407: a2 = a2 | a1\n 93410: a1 = a1 | a4\n 93413: a2 = a2 >> 0x20\n 93416: a1 = a1 << 0x20\n 93419: a1 = a1 | a2\n 93422: jump @1230 if a1 == 0\n      : @1229 (gas: 1)\n 93425: trap\n      : @1230 (gas: 4)\n 93426: i32 s1 = a0 + 0\n 93428: a0 = u64 [sp + 0x40]\n 93431: a1 = s1\n 93433: ra = 1076, jump @0\n      : @1231 [@dyn 538] (gas: 6)\n 93440: i32 a1 = a0 + 0\n 93442: a0 = 0x1\n 93445: a2 = s1\n 93447: ra = 0x436\n 93451: ecalli 14 // 'seal_return'\n 93453: fallthrough\n      : @1232 [@dyn 539] (gas: 17)\n 93454: sp = sp + 0xffffffffffffff20\n 93458: u64 [sp + 0xd8] = ra\n 93462: u64 [sp + 0xd0] = s0\n 93466: u64 [sp + 0xc8] = s1\n 93470: s0 = sp + 0xe0\n 93474: sp = sp & 0xffffffffffffffe0\n 93477: a1 = u64 [a0 + 0x18]\n 93480: u64 [sp + 0x38] = a1\n 93483: a1 = u64 [a0 + 0x10]\n 93486: u64 [sp + 0x30] = a1\n 93489: a1 = u64 [a0 + 0x8]\n 93492: u64 [sp + 0x28] = a1\n 93495: a0 = u64 [a0]\n 93497: u64 [sp + 0x20] = a0\n 93500: i32 a0 = sp + 0xa0\n 93504: ecalli 5 // 'caller'\n 93506: fallthrough\n      : @1233 (gas: 6)\n 93507: s1 = 0x20070\n 93512: a4 = i32 [sp + 0xb0]\n 93516: a2 = u64 [sp + 0xa0]\n 93520: a0 = i32 [0x20070]\n 93525: a1 = u64 [sp + 0xa8]\n 93529: jump @1236 if a0 == 0\n      : @1234 (gas: 9)\n 93532: u64 [sp] = a0\n 93534: a0 = 0x30080\n 93539: i32 a0 = a0 + 0\n 93541: u64 [sp + 0x8] = a1\n 93544: i32 a1 = s1 + 0\n 93546: u64 [sp + 0x18] = a4\n 93549: u64 [sp + 0x10] = a2\n 93552: ecalli 7 // 'get_immutable_data'\n 93554: fallthrough\n      : @1235 (gas: 7)\n 93555: a1 = u64 [sp + 0x8]\n 93558: a2 = u64 [sp + 0x10]\n 93561: a4 = u64 [sp + 0x18]\n 93564: a0 = i32 [0x20070]\n 93569: u32 [0x20070] = 0\n 93574: a3 = u64 [sp]\n 93576: jump @1244 if a0 <u a3\n      : @1236 (gas: 19)\n 93580: a0 = reverse a1\n 93582: a1 = a0 >> 0x20\n 93585: a2 = reverse a2\n 93587: a3 = a2 << 0x20\n 93590: a1 = a1 | a3\n 93593: a0 = a0 << 0x20\n 93596: a4 = reverse a4\n 93598: a4 = a4 >> 0x20\n 93601: a0 = a0 | a4\n 93604: a4 = u64 [0x30080]\n 93609: a5 = u32 [0x30090]\n 93614: a2 = a2 >> 0x20\n 93617: a3 = u64 [0x30088]\n 93622: a0 = a0 ^ a4\n 93625: a2 = a2 ^ a5\n 93628: a0 = a0 | a2\n 93631: a1 = a1 ^ a3\n 93634: a0 = a0 | a1\n 93637: jump @1239 if a0 != 0\n      : @1237 (gas: 10)\n 93640: a0 = u64 [sp + 0x20]\n 93643: u64 [sp + 0x40] = a0\n 93646: a0 = u64 [sp + 0x28]\n 93649: u64 [sp + 0x48] = a0\n 93652: a0 = u64 [sp + 0x30]\n 93655: u64 [sp + 0x50] = a0\n 93658: a0 = sp + 0x40\n 93661: a1 = u64 [sp + 0x38]\n 93664: u64 [sp + 0x58] = a1\n 93667: ra = 1080, jump @1247\n      : @1238 [@dyn 540] (gas: 6)\n 93673: sp = s0 + 0xffffffffffffff20\n 93677: ra = u64 [sp + 0xd8]\n 93681: s0 = u64 [sp + 0xd0]\n 93685: s1 = u64 [sp + 0xc8]\n 93689: sp = sp + 0xe0\n 93693: ret\n      : @1239 (gas: 3)\n 93695: a0 = 0x40\n 93698: a1 = 0x20\n 93701: ra = 1082, jump @0\n      : @1240 [@dyn 541] (gas: 103)\n 93708: a1 = u8 [a0 + 0x11]\n 93711: a2 = u8 [a0 + 0x10]\n 93714: a3 = u8 [a0 + 0x12]\n 93717: a4 = u8 [a0 + 0x13]\n 93720: a1 = a1 << 0x8\n 93723: a1 = a1 | a2\n 93726: a3 = a3 << 0x10\n 93729: a4 = a4 << 0x18\n 93732: a3 = a3 | a4\n 93735: a1 = a1 | a3\n 93738: a2 = u8 [a0 + 0x15]\n 93741: a3 = u8 [a0 + 0x14]\n 93744: a4 = u8 [a0 + 0x16]\n 93747: a5 = u8 [a0 + 0x17]\n 93750: a2 = a2 << 0x8\n 93753: a2 = a2 | a3\n 93756: a4 = a4 << 0x10\n 93759: a5 = a5 << 0x18\n 93762: a4 = a4 | a5\n 93765: a2 = a2 | a4\n 93768: a2 = a2 << 0x20\n 93771: t0 = a2 | a1\n 93774: a2 = u8 [a0 + 0x1]\n 93777: a3 = u8 [a0]\n 93779: a4 = u8 [a0 + 0x2]\n 93782: a5 = u8 [a0 + 0x3]\n 93785: a2 = a2 << 0x8\n 93788: a2 = a2 | a3\n 93791: a4 = a4 << 0x10\n 93794: a5 = a5 << 0x18\n 93797: a4 = a4 | a5\n 93800: a2 = a2 | a4\n 93803: a3 = u8 [a0 + 0x5]\n 93806: a4 = u8 [a0 + 0x4]\n 93809: a5 = u8 [a0 + 0x6]\n 93812: s1 = u8 [a0 + 0x7]\n 93815: a3 = a3 << 0x8\n 93818: a3 = a3 | a4\n 93821: a5 = a5 << 0x10\n 93824: s1 = s1 << 0x18\n 93827: a5 = a5 | s1\n 93830: a3 = a3 | a5\n 93833: a3 = a3 << 0x20\n 93836: a2 = a2 | a3\n 93839: a3 = u8 [a0 + 0x19]\n 93842: a4 = u8 [a0 + 0x18]\n 93845: a5 = u8 [a0 + 0x1a]\n 93848: s1 = u8 [a0 + 0x1b]\n 93851: a3 = a3 << 0x8\n 93854: a3 = a3 | a4\n 93857: a5 = a5 << 0x10\n 93860: s1 = s1 << 0x18\n 93863: a5 = a5 | s1\n 93866: a3 = a3 | a5\n 93869: a4 = u8 [a0 + 0x1d]\n 93872: a5 = u8 [a0 + 0x1c]\n 93875: s1 = u8 [a0 + 0x1e]\n 93878: a1 = u8 [a0 + 0x1f]\n 93881: a4 = a4 << 0x8\n 93884: a4 = a4 | a5\n 93887: s1 = s1 << 0x10\n 93890: a1 = a1 << 0x18\n 93893: a1 = a1 | s1\n 93896: a1 = a1 | a4\n 93899: a1 = a1 << 0x20\n 93902: a3 = a3 | a1\n 93905: a1 = u8 [a0 + 0x9]\n 93908: a4 = u8 [a0 + 0x8]\n 93911: a5 = u8 [a0 + 0xa]\n 93914: s1 = u8 [a0 + 0xb]\n 93917: a1 = a1 << 0x8\n 93920: a1 = a1 | a4\n 93923: a5 = a5 << 0x10\n 93926: s1 = s1 << 0x18\n 93929: a5 = a5 | s1\n 93932: a1 = a1 | a5\n 93935: a4 = u8 [a0 + 0xd]\n 93938: a5 = u8 [a0 + 0xc]\n 93941: s1 = u8 [a0 + 0xe]\n 93944: a0 = u8 [a0 + 0xf]\n 93947: a4 = a4 << 0x8\n 93950: a4 = a4 | a5\n 93953: s1 = s1 << 0x10\n 93956: a0 = a0 << 0x18\n 93959: a0 = a0 | s1\n 93962: a0 = a0 | a4\n 93965: a0 = a0 << 0x20\n 93968: a0 = a0 | a1\n 93971: s1 = reverse a0\n 93973: a1 = reverse a3\n 93975: a2 = reverse a2\n 93977: a0 = reverse t0\n 93979: u64 [sp + 0x38] = a0\n 93982: u64 [sp + 0x30] = a2\n 93985: a0 = a0 | a2\n 93988: a2 = a1\n 93990: a1 = a1 | s1\n 93993: a1 = a1 | a0\n 93996: a1 = a1 >> 0x20\n 93999: a0 = a0 | s1\n 94002: a0 = a0 << 0x20\n 94005: a0 = a0 | a1\n 94008: jump @1244 if a0 != 0\n      : @1241 (gas: 5)\n 94012: u64 [sp + 0x28] = a2\n 94015: i32 a0 = a2 + 0\n 94017: a1 = 0x20\n 94020: u64 [sp + 0x20] = a0\n 94023: ra = 1084, jump @0\n      : @1242 [@dyn 542] (gas: 50)\n 94030: u8 [a0 + 31] = 0\n 94033: u8 [a0 + 30] = 0\n 94036: u8 [a0 + 29] = 0\n 94039: u8 [a0 + 28] = 0\n 94042: u8 [a0 + 27] = 0\n 94045: u8 [a0 + 26] = 0\n 94048: u8 [a0 + 25] = 0\n 94051: u8 [a0 + 24] = 0\n 94054: u8 [a0 + 23] = 0\n 94057: u8 [a0 + 22] = 0\n 94060: u8 [a0 + 21] = 0\n 94063: u8 [a0 + 20] = 0\n 94066: u8 [a0 + 19] = 0\n 94069: u8 [a0 + 18] = 0\n 94072: u8 [a0 + 17] = 0\n 94075: u8 [a0 + 16] = 0\n 94078: u8 [a0 + 15] = 0\n 94081: u8 [a0 + 14] = 0\n 94084: u8 [a0 + 13] = 0\n 94087: u8 [a0 + 12] = 0\n 94090: u8 [a0 + 11] = 0\n 94093: u8 [a0 + 10] = 0\n 94096: u8 [a0 + 9] = 0\n 94099: u8 [a0 + 8] = 0\n 94102: u8 [a0 + 7] = 0\n 94105: u8 [a0 + 6] = 0\n 94108: u8 [a0 + 5] = 0\n 94111: u8 [a0 + 4] = 0\n 94114: u8 [a0 + 3] = 0xa0\n 94119: u8 [a0 + 2] = 0x79\n 94123: u8 [a0 + 1] = 0xc3\n 94128: u8 [a0 + 0] = 0x8\n 94131: a1 = u64 [sp + 0x28]\n 94134: a0 = a1 + 0x4\n 94137: a1 = a0 <u a1\n 94140: a3 = u64 [sp + 0x38]\n 94143: a2 = a3 + a1\n 94146: a3 = a2 <u a3\n 94149: a3 = a1 if a1 == 0\n 94152: a3 = a3 + s1\n 94155: a1 = a3 <u s1\n 94158: a4 = u64 [sp + 0x30]\n 94161: a4 = a4 + a1\n 94164: u64 [sp + 0x68] = a2\n 94167: u64 [sp + 0x60] = a0\n 94170: u64 [sp + 0x70] = a3\n 94173: a0 = sp + 0x80\n 94177: a1 = sp + 0x60\n 94180: u64 [sp + 0x78] = a4\n 94183: ra = 1086, jump @1118\n      : @1243 [@dyn 543] (gas: 30)\n 94189: a0 = u64 [sp + 0x88]\n 94193: t0 = u64 [sp + 0x98]\n 94197: t1 = u64 [sp + 0x80]\n 94201: a3 = u64 [sp + 0x90]\n 94205: a1 = u64 [sp + 0x38]\n 94208: a4 = a0 ^ a1\n 94211: a5 = a0 <u a1\n 94214: t2 = a1\n 94216: a2 = u64 [sp + 0x28]\n 94219: a1 = t1 <u a2\n 94222: a5 = a1 if a4 == 0\n 94225: a4 = a3 - s1\n 94228: a3 = a3 <u s1\n 94231: s1 = u64 [sp + 0x30]\n 94234: s1 = t0 - s1\n 94237: s1 = s1 - a3\n 94240: a3 = a4 <u a5\n 94243: s1 = s1 - a3\n 94246: a4 = a4 - a5\n 94249: a0 = a0 - t2\n 94252: a1 = a0 - a1\n 94255: a0 = t1 - a2\n 94258: a1 = a1 | s1\n 94261: a2 = a0 | a4\n 94264: a2 = a2 | a1\n 94267: a1 = a1 | a4\n 94270: a2 = a2 >> 0x20\n 94273: a1 = a1 << 0x20\n 94276: a1 = a1 | a2\n 94279: jump @1245 if a1 == 0\n      : @1244 (gas: 1)\n 94282: trap\n      : @1245 (gas: 4)\n 94283: i32 s1 = a0 + 0\n 94285: a0 = u64 [sp + 0x20]\n 94288: a1 = s1\n 94290: ra = 1088, jump @0\n      : @1246 [@dyn 544] (gas: 6)\n 94297: i32 a1 = a0 + 0\n 94299: a0 = 0x1\n 94302: a2 = s1\n 94304: ra = 0x442\n 94308: ecalli 14 // 'seal_return'\n 94310: fallthrough\n      : @1247 [@dyn 545] (gas: 31)\n 94311: sp = sp + 0xffffffffffffff00\n 94315: u64 [sp + 0xf8] = ra\n 94319: u64 [sp + 0xf0] = s0\n 94323: u64 [sp + 0xe8] = s1\n 94327: s0 = sp + 0x100\n 94331: sp = sp & 0xffffffffffffffe0\n 94334: a1 = u64 [a0 + 0x18]\n 94337: u64 [sp] = a1\n 94339: a1 = u64 [a0 + 0x10]\n 94342: u64 [sp + 0x8] = a1\n 94345: a1 = u64 [a0 + 0x8]\n 94348: u64 [sp + 0x10] = a1\n 94351: a0 = u64 [a0]\n 94353: u64 [sp + 0x18] = a0\n 94356: u64 [sp + 184] = 0\n 94360: u64 [sp + 176] = 0\n 94364: u64 [sp + 168] = 0\n 94368: s1 = 0x5\n 94371: u64 [sp + 0xa0] = s1\n 94375: u64 [sp + 216] = 0\n 94379: u64 [sp + 208] = 0\n 94383: u64 [sp + 200] = 0\n 94387: u64 [sp + 192] = 0\n 94391: u32 [sp + 128] = 0x20\n 94396: i32 a1 = sp + 0xa0\n 94400: i32 a3 = sp + 0xc0\n 94404: i32 a4 = sp + 0x80\n 94408: a2 = 0xffffffffffffffff\n 94411: a0 = 0\n 94413: ecalli 8 // 'get_storage'\n 94415: fallthrough\n      : @1248 (gas: 9)\n 94416: a0 = u64 [sp + 0xd8]\n 94420: a1 = u64 [sp + 0xc8]\n 94424: a2 = u64 [sp + 0xc0]\n 94428: a3 = u64 [sp + 0xd0]\n 94432: a0 = a0 | a1\n 94435: a1 = a2 ^ 0x1\n 94438: a1 = a1 | a3\n 94441: a0 = a0 | a1\n 94444: jump @1251 if a0 != 0\n      : @1249 (gas: 39)\n 94448: u64 [sp + 184] = 0\n 94452: u64 [sp + 176] = 0\n 94456: u64 [sp + 168] = 0\n 94460: u64 [sp + 160] = 0x5\n 94465: u64 [sp + 216] = 0\n 94469: u64 [sp + 208] = 0\n 94473: u64 [sp + 200] = 0\n 94477: u64 [sp + 192] = 0\n 94481: u32 [sp + 128] = 0x20\n 94486: i32 a1 = sp + 0xa0\n 94490: i32 a3 = sp + 0xc0\n 94494: i32 a4 = sp + 0x80\n 94498: a2 = 0xffffffffffffffff\n 94501: a0 = 0\n 94503: ecalli 8 // 'get_storage'\n 94505: u64 [sp + 184] = 0\n 94509: u64 [sp + 176] = 0\n 94513: u64 [sp + 168] = 0\n 94517: u64 [sp + 160] = 0x5\n 94522: u64 [sp + 216] = 0\n 94526: u64 [sp + 208] = 0\n 94530: u64 [sp + 200] = 0\n 94534: u64 [sp + 192] = 0x2\n 94539: i32 a1 = sp + 0xa0\n 94543: i32 a3 = sp + 0xc0\n 94547: a2 = 0xffffffffffffffff\n 94550: a4 = 0x20\n 94553: a0 = 0\n 94555: ecalli 16 // 'set_storage'\n 94557: a0 = u64 [sp]\n 94559: u64 [sp + 0x38] = a0\n 94562: a0 = u64 [sp + 0x8]\n 94565: u64 [sp + 0x30] = a0\n 94568: a0 = u64 [sp + 0x10]\n 94571: u64 [sp + 0x28] = a0\n 94574: a0 = sp + 0x20\n 94577: a1 = u64 [sp + 0x18]\n 94580: u64 [sp + 0x20] = a1\n 94583: ra = 1092, jump @1259\n      : @1250 [@dyn 546] (gas: 35)\n 94589: u64 [sp + 184] = 0\n 94593: u64 [sp + 176] = 0\n 94597: u64 [sp + 168] = 0\n 94601: u64 [sp + 0xa0] = s1\n 94605: u64 [sp + 216] = 0\n 94609: u64 [sp + 208] = 0\n 94613: u64 [sp + 200] = 0\n 94617: u64 [sp + 192] = 0\n 94621: u32 [sp + 128] = 0x20\n 94626: i32 a1 = sp + 0xa0\n 94630: i32 a3 = sp + 0xc0\n 94634: i32 a4 = sp + 0x80\n 94638: a2 = 0xffffffffffffffff\n 94641: a0 = 0\n 94643: ecalli 8 // 'get_storage'\n 94645: u64 [sp + 184] = 0\n 94649: u64 [sp + 176] = 0\n 94653: u64 [sp + 168] = 0\n 94657: u64 [sp + 0xa0] = s1\n 94661: u64 [sp + 216] = 0\n 94665: u64 [sp + 208] = 0\n 94669: u64 [sp + 200] = 0\n 94673: u64 [sp + 192] = 0x1\n 94678: i32 a1 = sp + 0xa0\n 94682: i32 a3 = sp + 0xc0\n 94686: a2 = 0xffffffffffffffff\n 94689: a4 = 0x20\n 94692: a0 = 0\n 94694: ecalli 16 // 'set_storage'\n 94696: sp = s0 + 0xffffffffffffff00\n 94700: ra = u64 [sp + 0xf8]\n 94704: s0 = u64 [sp + 0xf0]\n 94708: s1 = u64 [sp + 0xe8]\n 94712: sp = sp + 0x100\n 94716: ret\n      : @1251 (gas: 3)\n 94718: a0 = 0x40\n 94721: a1 = 0x20\n 94724: ra = 1094, jump @0\n      : @1252 [@dyn 547] (gas: 103)\n 94731: a1 = u8 [a0 + 0x11]\n 94734: a2 = u8 [a0 + 0x10]\n 94737: a3 = u8 [a0 + 0x12]\n 94740: a4 = u8 [a0 + 0x13]\n 94743: a1 = a1 << 0x8\n 94746: a1 = a1 | a2\n 94749: a3 = a3 << 0x10\n 94752: a4 = a4 << 0x18\n 94755: a3 = a3 | a4\n 94758: a1 = a1 | a3\n 94761: a2 = u8 [a0 + 0x15]\n 94764: a3 = u8 [a0 + 0x14]\n 94767: a4 = u8 [a0 + 0x16]\n 94770: a5 = u8 [a0 + 0x17]\n 94773: a2 = a2 << 0x8\n 94776: a2 = a2 | a3\n 94779: a4 = a4 << 0x10\n 94782: a5 = a5 << 0x18\n 94785: a4 = a4 | a5\n 94788: a2 = a2 | a4\n 94791: a2 = a2 << 0x20\n 94794: t0 = a2 | a1\n 94797: a2 = u8 [a0 + 0x1]\n 94800: a3 = u8 [a0]\n 94802: a4 = u8 [a0 + 0x2]\n 94805: a5 = u8 [a0 + 0x3]\n 94808: a2 = a2 << 0x8\n 94811: a2 = a2 | a3\n 94814: a4 = a4 << 0x10\n 94817: a5 = a5 << 0x18\n 94820: a4 = a4 | a5\n 94823: a2 = a2 | a4\n 94826: a3 = u8 [a0 + 0x5]\n 94829: a4 = u8 [a0 + 0x4]\n 94832: a5 = u8 [a0 + 0x6]\n 94835: s1 = u8 [a0 + 0x7]\n 94838: a3 = a3 << 0x8\n 94841: a3 = a3 | a4\n 94844: a5 = a5 << 0x10\n 94847: s1 = s1 << 0x18\n 94850: a5 = a5 | s1\n 94853: a3 = a3 | a5\n 94856: a3 = a3 << 0x20\n 94859: a2 = a2 | a3\n 94862: a3 = u8 [a0 + 0x19]\n 94865: a4 = u8 [a0 + 0x18]\n 94868: a5 = u8 [a0 + 0x1a]\n 94871: s1 = u8 [a0 + 0x1b]\n 94874: a3 = a3 << 0x8\n 94877: a3 = a3 | a4\n 94880: a5 = a5 << 0x10\n 94883: s1 = s1 << 0x18\n 94886: a5 = a5 | s1\n 94889: a3 = a3 | a5\n 94892: a4 = u8 [a0 + 0x1d]\n 94895: a5 = u8 [a0 + 0x1c]\n 94898: s1 = u8 [a0 + 0x1e]\n 94901: a1 = u8 [a0 + 0x1f]\n 94904: a4 = a4 << 0x8\n 94907: a4 = a4 | a5\n 94910: s1 = s1 << 0x10\n 94913: a1 = a1 << 0x18\n 94916: a1 = a1 | s1\n 94919: a1 = a1 | a4\n 94922: a1 = a1 << 0x20\n 94925: a3 = a3 | a1\n 94928: a1 = u8 [a0 + 0x9]\n 94931: a4 = u8 [a0 + 0x8]\n 94934: a5 = u8 [a0 + 0xa]\n 94937: s1 = u8 [a0 + 0xb]\n 94940: a1 = a1 << 0x8\n 94943: a1 = a1 | a4\n 94946: a5 = a5 << 0x10\n 94949: s1 = s1 << 0x18\n 94952: a5 = a5 | s1\n 94955: a1 = a1 | a5\n 94958: a4 = u8 [a0 + 0xd]\n 94961: a5 = u8 [a0 + 0xc]\n 94964: s1 = u8 [a0 + 0xe]\n 94967: a0 = u8 [a0 + 0xf]\n 94970: a4 = a4 << 0x8\n 94973: a4 = a4 | a5\n 94976: s1 = s1 << 0x10\n 94979: a0 = a0 << 0x18\n 94982: a0 = a0 | s1\n 94985: a0 = a0 | a4\n 94988: a0 = a0 << 0x20\n 94991: a0 = a0 | a1\n 94994: s1 = reverse a0\n 94996: a1 = reverse a3\n 94998: a2 = reverse a2\n 95000: a0 = reverse t0\n 95002: u64 [sp + 0x18] = a0\n 95005: u64 [sp + 0x10] = a2\n 95008: a0 = a0 | a2\n 95011: a2 = a1\n 95013: a1 = a1 | s1\n 95016: a1 = a1 | a0\n 95019: a1 = a1 >> 0x20\n 95022: a0 = a0 | s1\n 95025: a0 = a0 << 0x20\n 95028: a0 = a0 | a1\n 95031: jump @1256 if a0 != 0\n      : @1253 (gas: 5)\n 95035: u64 [sp + 0x8] = a2\n 95038: i32 a0 = a2 + 0\n 95040: a1 = 0x20\n 95043: u64 [sp] = a0\n 95045: ra = 1096, jump @0\n      : @1254 [@dyn 548] (gas: 50)\n 95052: u8 [a0 + 31] = 0\n 95055: u8 [a0 + 30] = 0\n 95058: u8 [a0 + 29] = 0\n 95061: u8 [a0 + 28] = 0\n 95064: u8 [a0 + 27] = 0\n 95067: u8 [a0 + 26] = 0\n 95070: u8 [a0 + 25] = 0\n 95073: u8 [a0 + 24] = 0\n 95076: u8 [a0 + 23] = 0\n 95079: u8 [a0 + 22] = 0\n 95082: u8 [a0 + 21] = 0\n 95085: u8 [a0 + 20] = 0\n 95088: u8 [a0 + 19] = 0\n 95091: u8 [a0 + 18] = 0\n 95094: u8 [a0 + 17] = 0\n 95097: u8 [a0 + 16] = 0\n 95100: u8 [a0 + 15] = 0\n 95103: u8 [a0 + 14] = 0\n 95106: u8 [a0 + 13] = 0\n 95109: u8 [a0 + 12] = 0\n 95112: u8 [a0 + 11] = 0\n 95115: u8 [a0 + 10] = 0\n 95118: u8 [a0 + 9] = 0\n 95121: u8 [a0 + 8] = 0\n 95124: u8 [a0 + 7] = 0\n 95127: u8 [a0 + 6] = 0\n 95130: u8 [a0 + 5] = 0\n 95133: u8 [a0 + 4] = 0\n 95136: u8 [a0 + 3] = 0xa0\n 95141: u8 [a0 + 2] = 0x79\n 95145: u8 [a0 + 1] = 0xc3\n 95150: u8 [a0 + 0] = 0x8\n 95153: a1 = u64 [sp + 0x8]\n 95156: a0 = a1 + 0x4\n 95159: a1 = a0 <u a1\n 95162: a3 = u64 [sp + 0x18]\n 95165: a2 = a3 + a1\n 95168: a3 = a2 <u a3\n 95171: a3 = a1 if a1 == 0\n 95174: a3 = a3 + s1\n 95177: a1 = a3 <u s1\n 95180: a4 = u64 [sp + 0x10]\n 95183: a4 = a4 + a1\n 95186: u64 [sp + 0x48] = a2\n 95189: u64 [sp + 0x40] = a0\n 95192: u64 [sp + 0x50] = a3\n 95195: a0 = sp + 0x60\n 95198: a1 = sp + 0x40\n 95201: u64 [sp + 0x58] = a4\n 95204: ra = 1098, jump @922\n      : @1255 [@dyn 549] (gas: 30)\n 95210: a0 = u64 [sp + 0x68]\n 95213: t0 = u64 [sp + 0x78]\n 95216: t1 = u64 [sp + 0x60]\n 95219: a3 = u64 [sp + 0x70]\n 95222: a1 = u64 [sp + 0x18]\n 95225: a4 = a0 ^ a1\n 95228: a5 = a0 <u a1\n 95231: t2 = a1\n 95233: a2 = u64 [sp + 0x8]\n 95236: a1 = t1 <u a2\n 95239: a5 = a1 if a4 == 0\n 95242: a4 = a3 - s1\n 95245: a3 = a3 <u s1\n 95248: s1 = u64 [sp + 0x10]\n 95251: s1 = t0 - s1\n 95254: s1 = s1 - a3\n 95257: a3 = a4 <u a5\n 95260: s1 = s1 - a3\n 95263: a4 = a4 - a5\n 95266: a0 = a0 - t2\n 95269: a1 = a0 - a1\n 95272: a0 = t1 - a2\n 95275: a1 = a1 | s1\n 95278: a2 = a0 | a4\n 95281: a2 = a2 | a1\n 95284: a1 = a1 | a4\n 95287: a2 = a2 >> 0x20\n 95290: a1 = a1 << 0x20\n 95293: a1 = a1 | a2\n 95296: jump @1257 if a1 == 0\n      : @1256 (gas: 1)\n 95299: trap\n      : @1257 (gas: 4)\n 95300: i32 s1 = a0 + 0\n 95302: a0 = u64 [sp]\n 95304: a1 = s1\n 95306: ra = 1100, jump @0\n      : @1258 [@dyn 550] (gas: 6)\n 95313: i32 a1 = a0 + 0\n 95315: a0 = 0x1\n 95318: a2 = s1\n 95320: ra = 0x44e\n 95324: ecalli 14 // 'seal_return'\n 95326: fallthrough\n      : @1259 [@dyn 551] (gas: 16)\n 95327: sp = sp + 0xfffffffffffffee0\n 95331: u64 [sp + 0x118] = ra\n 95335: u64 [sp + 0x110] = s0\n 95339: u64 [sp + 0x108] = s1\n 95343: s0 = sp + 0x120\n 95347: sp = sp & 0xffffffffffffffe0\n 95350: a1 = u64 [a0]\n 95352: u64 [sp + 0x38] = a1\n 95355: a1 = u64 [a0 + 0x8]\n 95358: u64 [sp + 0x30] = a1\n 95361: a1 = u64 [a0 + 0x10]\n 95364: u64 [sp + 0x28] = a1\n 95367: s1 = u64 [a0 + 0x18]\n 95370: a1 = 0x20\n 95373: a0 = 0\n 95375: ra = 1104, jump @0\n      : @1260 [@dyn 552] (gas: 70)\n 95382: a1 = reverse s1\n 95384: a2 = u64 [sp + 0x28]\n 95387: a2 = reverse a2\n 95389: a3 = u64 [sp + 0x30]\n 95392: a3 = reverse a3\n 95394: a4 = u64 [sp + 0x38]\n 95397: a4 = reverse a4\n 95399: u8 [a0 + 0x18] = a4\n 95402: u8 [a0 + 0x10] = a3\n 95405: u8 [a0 + 0x8] = a2\n 95408: u8 [a0] = a1\n 95410: a5 = a4 >> 0x38\n 95413: u8 [a0 + 0x1f] = a5\n 95416: a5 = a4 >> 0x30\n 95419: u8 [a0 + 0x1e] = a5\n 95422: a5 = a4 >> 0x28\n 95425: u8 [a0 + 0x1d] = a5\n 95428: a5 = a4 >> 0x20\n 95431: u8 [a0 + 0x1c] = a5\n 95434: a5 = a4 >> 0x18\n 95437: u8 [a0 + 0x1b] = a5\n 95440: a5 = a4 >> 0x10\n 95443: u8 [a0 + 0x1a] = a5\n 95446: a4 = a4 >> 0x8\n 95449: u8 [a0 + 0x19] = a4\n 95452: a4 = a3 >> 0x38\n 95455: u8 [a0 + 0x17] = a4\n 95458: a4 = a3 >> 0x30\n 95461: u8 [a0 + 0x16] = a4\n 95464: a4 = a3 >> 0x28\n 95467: u8 [a0 + 0x15] = a4\n 95470: a4 = a3 >> 0x20\n 95473: u8 [a0 + 0x14] = a4\n 95476: a4 = a3 >> 0x18\n 95479: u8 [a0 + 0x13] = a4\n 95482: a4 = a3 >> 0x10\n 95485: u8 [a0 + 0x12] = a4\n 95488: a3 = a3 >> 0x8\n 95491: u8 [a0 + 0x11] = a3\n 95494: a3 = a2 >> 0x38\n 95497: u8 [a0 + 0xf] = a3\n 95500: a3 = a2 >> 0x30\n 95503: u8 [a0 + 0xe] = a3\n 95506: a3 = a2 >> 0x28\n 95509: u8 [a0 + 0xd] = a3\n 95512: a3 = a2 >> 0x20\n 95515: u8 [a0 + 0xc] = a3\n 95518: a3 = a2 >> 0x18\n 95521: u8 [a0 + 0xb] = a3\n 95524: a3 = a2 >> 0x10\n 95527: u8 [a0 + 0xa] = a3\n 95530: a2 = a2 >> 0x8\n 95533: u8 [a0 + 0x9] = a2\n 95536: a2 = a1 >> 0x38\n 95539: u8 [a0 + 0x7] = a2\n 95542: a2 = a1 >> 0x30\n 95545: u8 [a0 + 0x6] = a2\n 95548: a2 = a1 >> 0x28\n 95551: u8 [a0 + 0x5] = a2\n 95554: a2 = a1 >> 0x20\n 95557: u8 [a0 + 0x4] = a2\n 95560: a2 = a1 >> 0x18\n 95563: u8 [a0 + 0x3] = a2\n 95566: a2 = a1 >> 0x10\n 95569: u8 [a0 + 0x2] = a2\n 95572: a1 = a1 >> 0x8\n 95575: u8 [a0 + 0x1] = a1\n 95578: a0 = 0x20\n 95581: a1 = 0x20\n 95584: ra = 1106, jump @0\n      : @1261 [@dyn 553] (gas: 35)\n 95591: u8 [a0 + 31] = 0x4\n 95595: u8 [a0 + 30] = 0\n 95598: u8 [a0 + 29] = 0\n 95601: u8 [a0 + 28] = 0\n 95604: u8 [a0 + 27] = 0\n 95607: u8 [a0 + 26] = 0\n 95610: u8 [a0 + 25] = 0\n 95613: u8 [a0 + 24] = 0\n 95616: u8 [a0 + 23] = 0\n 95619: u8 [a0 + 22] = 0\n 95622: u8 [a0 + 21] = 0\n 95625: u8 [a0 + 20] = 0\n 95628: u8 [a0 + 19] = 0\n 95631: u8 [a0 + 18] = 0\n 95634: u8 [a0 + 17] = 0\n 95637: u8 [a0 + 16] = 0\n 95640: u8 [a0 + 15] = 0\n 95643: u8 [a0 + 14] = 0\n 95646: u8 [a0 + 13] = 0\n 95649: u8 [a0 + 12] = 0\n 95652: u8 [a0 + 11] = 0\n 95655: u8 [a0 + 10] = 0\n 95658: u8 [a0 + 9] = 0\n 95661: u8 [a0 + 8] = 0\n 95664: u8 [a0 + 7] = 0\n 95667: u8 [a0 + 6] = 0\n 95670: u8 [a0 + 5] = 0\n 95673: u8 [a0 + 4] = 0\n 95676: u8 [a0 + 3] = 0\n 95679: u8 [a0 + 2] = 0\n 95682: u8 [a0 + 1] = 0\n 95685: u8 [a0 + 0] = 0\n 95687: a1 = 0x40\n 95690: a0 = 0\n 95692: ra = 1108, jump @0\n      : @1262 [@dyn 554] (gas: 44)\n 95699: i32 a0 = a0 + 0\n 95701: i32 a2 = sp + 0xe0\n 95705: a1 = 0x40\n 95708: ecalli 9 // 'hash_keccak_256'\n 95710: a0 = u64 [sp + 0xe0]\n 95714: a1 = u64 [sp + 0xe8]\n 95718: a2 = u64 [sp + 0xf0]\n 95722: a3 = u64 [sp + 0xf8]\n 95726: a4 = reverse a0\n 95728: a1 = reverse a1\n 95730: a2 = reverse a2\n 95732: a0 = reverse a3\n 95734: a3 = a0 + 0x2\n 95737: u64 [sp + 0x8] = a0\n 95740: a0 = a3 <u a0\n 95743: a5 = a2 + a0\n 95746: u64 [sp + 0x10] = a2\n 95749: s1 = a5 <u a2\n 95752: s1 = a0 if a0 == 0\n 95755: a2 = a1 + s1\n 95758: s1 = a5\n 95760: u64 [sp + 0x18] = a1\n 95763: a0 = a2 <u a1\n 95766: u64 [sp + 0x20] = a4\n 95769: a0 = a0 + a4\n 95772: u64 [sp + 0xc8] = a5\n 95776: u64 [sp + 0x38] = a3\n 95779: u64 [sp + 0xc0] = a3\n 95783: u64 [sp + 0x30] = a2\n 95786: u64 [sp + 0xd0] = a2\n 95790: u64 [sp + 0x28] = a0\n 95793: u64 [sp + 0xd8] = a0\n 95797: u64 [sp + 248] = 0\n 95801: u64 [sp + 240] = 0\n 95805: u64 [sp + 232] = 0\n 95809: u64 [sp + 224] = 0\n 95813: u32 [sp + 256] = 0x20\n 95818: i32 a1 = sp + 0xc0\n 95822: i32 a3 = sp + 0xe0\n 95826: i32 a4 = sp + 0x100\n 95830: a2 = 0xffffffffffffffff\n 95833: a0 = 0\n 95835: ecalli 8 // 'get_storage'\n 95837: fallthrough\n      : @1263 (gas: 2)\n 95838: a0 = u8 [sp + 0xe0]\n 95842: jump @1274 if a0 != 0\n      : @1264 (gas: 19)\n 95846: a0 = u64 [sp + 0x30]\n 95849: u64 [sp + 0xd0] = a0\n 95853: u64 [sp + 0xc8] = s1\n 95857: a0 = u64 [sp + 0x38]\n 95860: u64 [sp + 0xc0] = a0\n 95864: a0 = u64 [sp + 0x28]\n 95867: u64 [sp + 0xd8] = a0\n 95871: u64 [sp + 248] = 0\n 95875: u64 [sp + 240] = 0\n 95879: u64 [sp + 232] = 0\n 95883: u64 [sp + 224] = 0\n 95887: u32 [sp + 256] = 0x20\n 95892: i32 a1 = sp + 0xc0\n 95896: i32 a3 = sp + 0xe0\n 95900: i32 a4 = sp + 0x100\n 95904: a2 = 0xffffffffffffffff\n 95907: a0 = 0\n 95909: ecalli 8 // 'get_storage'\n 95911: fallthrough\n      : @1265 (gas: 2)\n 95912: a0 = u8 [sp + 0xe1]\n 95916: jump @1274 if a0 == 0\n      : @1266 (gas: 19)\n 95920: a0 = u64 [sp + 0x30]\n 95923: u64 [sp + 0xd0] = a0\n 95927: u64 [sp + 0xc8] = s1\n 95931: a0 = u64 [sp + 0x38]\n 95934: u64 [sp + 0xc0] = a0\n 95938: a0 = u64 [sp + 0x28]\n 95941: u64 [sp + 0xd8] = a0\n 95945: u64 [sp + 248] = 0\n 95949: u64 [sp + 240] = 0\n 95953: u64 [sp + 232] = 0\n 95957: u64 [sp + 224] = 0\n 95961: u32 [sp + 256] = 0x20\n 95966: i32 a1 = sp + 0xc0\n 95970: i32 a3 = sp + 0xe0\n 95974: i32 a4 = sp + 0x100\n 95978: a2 = 0xffffffffffffffff\n 95981: a0 = 0\n 95983: ecalli 8 // 'get_storage'\n 95985: fallthrough\n      : @1267 (gas: 2)\n 95986: a0 = u8 [sp + 0xe2]\n 95990: jump @1274 if a0 != 0\n      : @1268 (gas: 43)\n 95994: a0 = u64 [sp + 0x30]\n 95997: u64 [sp + 0xd0] = a0\n 96001: u64 [sp + 0xc8] = s1\n 96005: u64 [sp] = s1\n 96007: a0 = u64 [sp + 0x38]\n 96010: u64 [sp + 0xc0] = a0\n 96014: s1 = u64 [sp + 0x28]\n 96017: u64 [sp + 0xd8] = s1\n 96021: u64 [sp + 248] = 0\n 96025: u64 [sp + 240] = 0\n 96029: u64 [sp + 232] = 0\n 96033: u64 [sp + 224] = 0\n 96037: u32 [sp + 256] = 0x20\n 96042: i32 a1 = sp + 0xc0\n 96046: i32 a3 = sp + 0xe0\n 96050: i32 a4 = sp + 0x100\n 96054: a2 = 0xffffffffffffffff\n 96057: a0 = 0\n 96059: ecalli 8 // 'get_storage'\n 96061: a0 = u64 [sp + 0xe8]\n 96065: a1 = u64 [sp + 0xf0]\n 96069: a2 = u64 [sp + 0xe0]\n 96073: a3 = u64 [sp + 0xf8]\n 96077: a2 = a2 & 0xffffffffff00ffff\n 96083: a2 = a2 | 0x10000\n 96088: u64 [sp + 0xd8] = s1\n 96092: a4 = u64 [sp + 0x30]\n 96095: u64 [sp + 0xd0] = a4\n 96099: a4 = u64 [sp]\n 96101: u64 [sp + 0xc8] = a4\n 96105: a4 = u64 [sp + 0x38]\n 96108: u64 [sp + 0xc0] = a4\n 96112: u64 [sp + 0xf8] = a3\n 96116: u64 [sp + 0xf0] = a1\n 96120: u64 [sp + 0xe8] = a0\n 96124: u64 [sp + 0xe0] = a2\n 96128: i32 a1 = sp + 0xc0\n 96132: i32 a3 = sp + 0xe0\n 96136: a2 = 0xffffffffffffffff\n 96139: a4 = 0x20\n 96142: a0 = 0\n 96144: ecalli 16 // 'set_storage'\n 96146: fallthrough\n      : @1269 (gas: 3)\n 96147: s1 = 0x20070\n 96152: a0 = i32 [0x20070]\n 96157: jump @1272 if a0 == 0\n      : @1270 (gas: 6)\n 96160: u64 [sp + 0x38] = a0\n 96163: a0 = 0x30080\n 96168: i32 a0 = a0 + 0\n 96170: i32 a1 = s1 + 0\n 96172: ecalli 7 // 'get_immutable_data'\n 96174: fallthrough\n      : @1271 (gas: 4)\n 96175: a0 = i32 [0x20070]\n 96180: u32 [0x20070] = 0\n 96185: a1 = u64 [sp + 0x38]\n 96188: jump @1279 if a0 <u a1\n      : @1272 (gas: 49)\n 96192: a1 = u64 [0x300c0]\n 96197: u64 [sp + 0x38] = a1\n 96200: a1 = u64 [0x300c8]\n 96205: u64 [sp + 0x30] = a1\n 96208: s1 = u32 [0x300d0]\n 96213: a0 = u64 [sp + 0x8]\n 96216: a0 = a0 + 0x1\n 96219: a1 = a0 <u 0x1\n 96222: a2 = u64 [sp + 0x10]\n 96225: a1 = a1 + a2\n 96228: a2 = a0 | a1\n 96231: a2 = a2 <u 0x1\n 96234: a3 = u64 [sp + 0x18]\n 96237: a2 = a2 + a3\n 96240: a3 = a2 <u a3\n 96243: a4 = u64 [sp + 0x20]\n 96246: a3 = a3 + a4\n 96249: u64 [sp + 0xc8] = a1\n 96253: u64 [sp + 0xc0] = a0\n 96257: u64 [sp + 0xd0] = a2\n 96261: u64 [sp + 0xd8] = a3\n 96265: u64 [sp + 248] = 0\n 96269: u64 [sp + 240] = 0\n 96273: u64 [sp + 232] = 0\n 96277: u64 [sp + 224] = 0\n 96281: u32 [sp + 256] = 0x20\n 96286: i32 a1 = sp + 0xc0\n 96290: i32 a3 = sp + 0xe0\n 96294: i32 a4 = sp + 0x100\n 96298: a2 = 0xffffffffffffffff\n 96301: a0 = 0\n 96303: ecalli 8 // 'get_storage'\n 96305: a0 = u64 [sp + 0xe0]\n 96309: a1 = u64 [sp + 0xe8]\n 96313: a2 = u64 [sp + 0xf0]\n 96317: a3 = u64 [sp + 0xf8]\n 96321: u64 [sp + 0x98] = a3\n 96325: u64 [sp + 0x90] = a2\n 96329: u64 [sp + 0x88] = a1\n 96333: u64 [sp + 0x80] = a0\n 96337: u64 [sp + 184] = 0\n 96341: u64 [sp + 0xb0] = s1\n 96345: a0 = u64 [sp + 0x30]\n 96348: u64 [sp + 0xa8] = a0\n 96352: a0 = sp + 0xa0\n 96356: a1 = sp + 0x80\n 96360: a2 = u64 [sp + 0x38]\n 96363: u64 [sp + 0xa0] = a2\n 96367: ra = 1110, jump @1463\n      : @1273 [@dyn 555] (gas: 6)\n 96373: sp = s0 + 0xfffffffffffffee0\n 96377: ra = u64 [sp + 0x118]\n 96381: s0 = u64 [sp + 0x110]\n 96385: s1 = u64 [sp + 0x108]\n 96389: sp = sp + 0x120\n 96393: ret\n      : @1274 (gas: 3)\n 96395: a0 = 0x40\n 96398: a1 = 0x20\n 96401: ra = 1112, jump @0\n      : @1275 [@dyn 556] (gas: 103)\n 96408: a1 = u8 [a0 + 0x11]\n 96411: a2 = u8 [a0 + 0x10]\n 96414: a3 = u8 [a0 + 0x12]\n 96417: a4 = u8 [a0 + 0x13]\n 96420: a1 = a1 << 0x8\n 96423: a1 = a1 | a2\n 96426: a3 = a3 << 0x10\n 96429: a4 = a4 << 0x18\n 96432: a3 = a3 | a4\n 96435: a1 = a1 | a3\n 96438: a2 = u8 [a0 + 0x15]\n 96441: a3 = u8 [a0 + 0x14]\n 96444: a4 = u8 [a0 + 0x16]\n 96447: a5 = u8 [a0 + 0x17]\n 96450: a2 = a2 << 0x8\n 96453: a2 = a2 | a3\n 96456: a4 = a4 << 0x10\n 96459: a5 = a5 << 0x18\n 96462: a4 = a4 | a5\n 96465: a2 = a2 | a4\n 96468: a2 = a2 << 0x20\n 96471: t0 = a2 | a1\n 96474: a2 = u8 [a0 + 0x1]\n 96477: a3 = u8 [a0]\n 96479: a4 = u8 [a0 + 0x2]\n 96482: a5 = u8 [a0 + 0x3]\n 96485: a2 = a2 << 0x8\n 96488: a2 = a2 | a3\n 96491: a4 = a4 << 0x10\n 96494: a5 = a5 << 0x18\n 96497: a4 = a4 | a5\n 96500: a2 = a2 | a4\n 96503: a3 = u8 [a0 + 0x5]\n 96506: a4 = u8 [a0 + 0x4]\n 96509: a5 = u8 [a0 + 0x6]\n 96512: s1 = u8 [a0 + 0x7]\n 96515: a3 = a3 << 0x8\n 96518: a3 = a3 | a4\n 96521: a5 = a5 << 0x10\n 96524: s1 = s1 << 0x18\n 96527: a5 = a5 | s1\n 96530: a3 = a3 | a5\n 96533: a3 = a3 << 0x20\n 96536: a2 = a2 | a3\n 96539: a3 = u8 [a0 + 0x19]\n 96542: a4 = u8 [a0 + 0x18]\n 96545: a5 = u8 [a0 + 0x1a]\n 96548: s1 = u8 [a0 + 0x1b]\n 96551: a3 = a3 << 0x8\n 96554: a3 = a3 | a4\n 96557: a5 = a5 << 0x10\n 96560: s1 = s1 << 0x18\n 96563: a5 = a5 | s1\n 96566: a3 = a3 | a5\n 96569: a4 = u8 [a0 + 0x1d]\n 96572: a5 = u8 [a0 + 0x1c]\n 96575: s1 = u8 [a0 + 0x1e]\n 96578: a1 = u8 [a0 + 0x1f]\n 96581: a4 = a4 << 0x8\n 96584: a4 = a4 | a5\n 96587: s1 = s1 << 0x10\n 96590: a1 = a1 << 0x18\n 96593: a1 = a1 | s1\n 96596: a1 = a1 | a4\n 96599: a1 = a1 << 0x20\n 96602: a3 = a3 | a1\n 96605: a1 = u8 [a0 + 0x9]\n 96608: a4 = u8 [a0 + 0x8]\n 96611: a5 = u8 [a0 + 0xa]\n 96614: s1 = u8 [a0 + 0xb]\n 96617: a1 = a1 << 0x8\n 96620: a1 = a1 | a4\n 96623: a5 = a5 << 0x10\n 96626: s1 = s1 << 0x18\n 96629: a5 = a5 | s1\n 96632: a1 = a1 | a5\n 96635: a4 = u8 [a0 + 0xd]\n 96638: a5 = u8 [a0 + 0xc]\n 96641: s1 = u8 [a0 + 0xe]\n 96644: a0 = u8 [a0 + 0xf]\n 96647: a4 = a4 << 0x8\n 96650: a4 = a4 | a5\n 96653: s1 = s1 << 0x10\n 96656: a0 = a0 << 0x18\n 96659: a0 = a0 | s1\n 96662: a0 = a0 | a4\n 96665: a0 = a0 << 0x20\n 96668: a0 = a0 | a1\n 96671: s1 = reverse a0\n 96673: a1 = reverse a3\n 96675: a2 = reverse a2\n 96677: a0 = reverse t0\n 96679: u64 [sp + 0x38] = a0\n 96682: u64 [sp + 0x30] = a2\n 96685: a0 = a0 | a2\n 96688: a2 = a1\n 96690: a1 = a1 | s1\n 96693: a1 = a1 | a0\n 96696: a1 = a1 >> 0x20\n 96699: a0 = a0 | s1\n 96702: a0 = a0 << 0x20\n 96705: a0 = a0 | a1\n 96708: jump @1279 if a0 != 0\n      : @1276 (gas: 5)\n 96712: u64 [sp + 0x28] = a2\n 96715: i32 a0 = a2 + 0\n 96717: a1 = 0x20\n 96720: u64 [sp + 0x20] = a0\n 96723: ra = 1114, jump @0\n      : @1277 [@dyn 557] (gas: 50)\n 96730: u8 [a0 + 31] = 0\n 96733: u8 [a0 + 30] = 0\n 96736: u8 [a0 + 29] = 0\n 96739: u8 [a0 + 28] = 0\n 96742: u8 [a0 + 27] = 0\n 96745: u8 [a0 + 26] = 0\n 96748: u8 [a0 + 25] = 0\n 96751: u8 [a0 + 24] = 0\n 96754: u8 [a0 + 23] = 0\n 96757: u8 [a0 + 22] = 0\n 96760: u8 [a0 + 21] = 0\n 96763: u8 [a0 + 20] = 0\n 96766: u8 [a0 + 19] = 0\n 96769: u8 [a0 + 18] = 0\n 96772: u8 [a0 + 17] = 0\n 96775: u8 [a0 + 16] = 0\n 96778: u8 [a0 + 15] = 0\n 96781: u8 [a0 + 14] = 0\n 96784: u8 [a0 + 13] = 0\n 96787: u8 [a0 + 12] = 0\n 96790: u8 [a0 + 11] = 0\n 96793: u8 [a0 + 10] = 0\n 96796: u8 [a0 + 9] = 0\n 96799: u8 [a0 + 8] = 0\n 96802: u8 [a0 + 7] = 0\n 96805: u8 [a0 + 6] = 0\n 96808: u8 [a0 + 5] = 0\n 96811: u8 [a0 + 4] = 0\n 96814: u8 [a0 + 3] = 0xa0\n 96819: u8 [a0 + 2] = 0x79\n 96823: u8 [a0 + 1] = 0xc3\n 96828: u8 [a0 + 0] = 0x8\n 96831: a1 = u64 [sp + 0x28]\n 96834: a0 = a1 + 0x4\n 96837: a1 = a0 <u a1\n 96840: a3 = u64 [sp + 0x38]\n 96843: a2 = a3 + a1\n 96846: a3 = a2 <u a3\n 96849: a3 = a1 if a1 == 0\n 96852: a3 = a3 + s1\n 96855: a1 = a3 <u s1\n 96858: a4 = u64 [sp + 0x30]\n 96861: a4 = a4 + a1\n 96864: u64 [sp + 0x48] = a2\n 96867: u64 [sp + 0x40] = a0\n 96870: u64 [sp + 0x50] = a3\n 96873: a0 = sp + 0x60\n 96876: a1 = sp + 0x40\n 96879: u64 [sp + 0x58] = a4\n 96882: ra = 1116, jump @1159\n      : @1278 [@dyn 558] (gas: 30)\n 96888: a0 = u64 [sp + 0x68]\n 96891: t0 = u64 [sp + 0x78]\n 96894: t1 = u64 [sp + 0x60]\n 96897: a3 = u64 [sp + 0x70]\n 96900: a1 = u64 [sp + 0x38]\n 96903: a4 = a0 ^ a1\n 96906: a5 = a0 <u a1\n 96909: t2 = a1\n 96911: a2 = u64 [sp + 0x28]\n 96914: a1 = t1 <u a2\n 96917: a5 = a1 if a4 == 0\n 96920: a4 = a3 - s1\n 96923: a3 = a3 <u s1\n 96926: s1 = u64 [sp + 0x30]\n 96929: s1 = t0 - s1\n 96932: s1 = s1 - a3\n 96935: a3 = a4 <u a5\n 96938: s1 = s1 - a3\n 96941: a4 = a4 - a5\n 96944: a0 = a0 - t2\n 96947: a1 = a0 - a1\n 96950: a0 = t1 - a2\n 96953: a1 = a1 | s1\n 96956: a2 = a0 | a4\n 96959: a2 = a2 | a1\n 96962: a1 = a1 | a4\n 96965: a2 = a2 >> 0x20\n 96968: a1 = a1 << 0x20\n 96971: a1 = a1 | a2\n 96974: jump @1280 if a1 == 0\n      : @1279 (gas: 1)\n 96977: trap\n      : @1280 (gas: 4)\n 96978: i32 s1 = a0 + 0\n 96980: a0 = u64 [sp + 0x20]\n 96983: a1 = s1\n 96985: ra = 1118, jump @0\n      : @1281 [@dyn 559] (gas: 6)\n 96992: i32 a1 = a0 + 0\n 96994: a0 = 0x1\n 96997: a2 = s1\n 96999: ra = 0x460\n 97003: ecalli 14 // 'seal_return'\n 97005: fallthrough\n      : @1282 [@dyn 560] (gas: 15)\n 97006: sp = sp + 0xffffffffffffffd0\n 97009: u64 [sp + 0x28] = ra\n 97012: u64 [sp + 0x20] = s0\n 97015: s0 = sp + 0x30\n 97018: sp = sp & 0xfffffffffffffff0\n 97021: a1 = u64 [a0]\n 97023: a2 = u64 [a0 + 0x8]\n 97026: a3 = u64 [a0 + 0x10]\n 97029: a0 = u64 [a0 + 0x18]\n 97032: u64 [sp + 0x18] = a0\n 97035: u64 [sp + 0x10] = a3\n 97038: u64 [sp + 0x8] = a2\n 97041: a0 = sp\n 97043: u64 [sp] = a1\n 97045: ra = 1122, jump @1232\n      : @1283 [@dyn 561] (gas: 5)\n 97051: sp = s0 + 0xffffffffffffffd0\n 97054: ra = u64 [sp + 0x28]\n 97057: s0 = u64 [sp + 0x20]\n 97060: sp = sp + 0x30\n 97063: ret\n      : @1284 (gas: 25)\n 97065: sp = sp + 0xfffffffffffffee0\n 97069: u64 [sp + 0x118] = ra\n 97073: u64 [sp + 0x110] = s0\n 97077: u64 [sp + 0x108] = s1\n 97081: s0 = sp + 0x120\n 97085: sp = sp & 0xffffffffffffffe0\n 97088: a2 = u64 [a1 + 0x18]\n 97091: u64 [sp + 0x50] = a2\n 97094: a2 = u64 [a1 + 0x10]\n 97097: u64 [sp + 0x48] = a2\n 97100: a2 = u64 [a1 + 0x8]\n 97103: u64 [sp + 0x38] = a2\n 97106: a1 = u64 [a1]\n 97108: u64 [sp + 0x28] = a1\n 97111: a1 = u64 [a0 + 0x18]\n 97114: u64 [sp + 0x58] = a1\n 97117: a1 = u64 [a0 + 0x10]\n 97120: u64 [sp + 0x40] = a1\n 97123: a1 = u64 [a0 + 0x8]\n 97126: u64 [sp + 0x30] = a1\n 97129: a0 = u64 [a0]\n 97131: u64 [sp + 0x20] = a0\n 97134: i32 a0 = sp + 0xe0\n 97138: ecalli 5 // 'caller'\n 97140: fallthrough\n      : @1285 (gas: 6)\n 97141: s1 = 0x20070\n 97146: a4 = i32 [sp + 0xf0]\n 97150: a2 = u64 [sp + 0xe0]\n 97154: a0 = i32 [0x20070]\n 97159: a1 = u64 [sp + 0xe8]\n 97163: jump @1288 if a0 == 0\n      : @1286 (gas: 9)\n 97166: u64 [sp] = a0\n 97168: a0 = 0x30080\n 97173: i32 a0 = a0 + 0\n 97175: u64 [sp + 0x8] = a1\n 97178: i32 a1 = s1 + 0\n 97180: u64 [sp + 0x18] = a4\n 97183: u64 [sp + 0x10] = a2\n 97186: ecalli 7 // 'get_immutable_data'\n 97188: fallthrough\n      : @1287 (gas: 7)\n 97189: a1 = u64 [sp + 0x8]\n 97192: a2 = u64 [sp + 0x10]\n 97195: a4 = u64 [sp + 0x18]\n 97198: a0 = i32 [0x20070]\n 97203: u32 [0x20070] = 0\n 97208: a3 = u64 [sp]\n 97210: jump @1296 if a0 <u a3\n      : @1288 (gas: 19)\n 97214: a0 = reverse a1\n 97216: a1 = a0 >> 0x20\n 97219: a2 = reverse a2\n 97221: a3 = a2 << 0x20\n 97224: a1 = a1 | a3\n 97227: a0 = a0 << 0x20\n 97230: a4 = reverse a4\n 97232: a4 = a4 >> 0x20\n 97235: a0 = a0 | a4\n 97238: a4 = u64 [0x300c0]\n 97243: a5 = u32 [0x300d0]\n 97248: a2 = a2 >> 0x20\n 97251: a3 = u64 [0x300c8]\n 97256: a0 = a0 ^ a4\n 97259: a2 = a2 ^ a5\n 97262: a0 = a0 | a2\n 97265: a1 = a1 ^ a3\n 97268: a0 = a0 | a1\n 97271: jump @1291 if a0 != 0\n      : @1289 (gas: 19)\n 97274: a0 = u64 [sp + 0x28]\n 97277: u64 [sp + 0x60] = a0\n 97280: a0 = u64 [sp + 0x20]\n 97283: u64 [sp + 0x80] = a0\n 97287: a0 = u64 [sp + 0x38]\n 97290: u64 [sp + 0x68] = a0\n 97293: a0 = u64 [sp + 0x30]\n 97296: u64 [sp + 0x88] = a0\n 97300: a0 = u64 [sp + 0x48]\n 97303: u64 [sp + 0x70] = a0\n 97306: a0 = u64 [sp + 0x40]\n 97309: u64 [sp + 0x90] = a0\n 97313: a0 = u64 [sp + 0x50]\n 97316: u64 [sp + 0x78] = a0\n 97319: a0 = sp + 0x80\n 97323: a1 = sp + 0x60\n 97326: a2 = u64 [sp + 0x58]\n 97329: u64 [sp + 0x98] = a2\n 97333: ra = 1124, jump @1334\n      : @1290 [@dyn 562] (gas: 6)\n 97339: sp = s0 + 0xfffffffffffffee0\n 97343: ra = u64 [sp + 0x118]\n 97347: s0 = u64 [sp + 0x110]\n 97351: s1 = u64 [sp + 0x108]\n 97355: sp = sp + 0x120\n 97359: ret\n      : @1291 (gas: 3)\n 97361: a0 = 0x40\n 97364: a1 = 0x20\n 97367: ra = 1126, jump @0\n      : @1292 [@dyn 563] (gas: 103)\n 97374: a1 = u8 [a0 + 0x11]\n 97377: a2 = u8 [a0 + 0x10]\n 97380: a3 = u8 [a0 + 0x12]\n 97383: a4 = u8 [a0 + 0x13]\n 97386: a1 = a1 << 0x8\n 97389: a1 = a1 | a2\n 97392: a3 = a3 << 0x10\n 97395: a4 = a4 << 0x18\n 97398: a3 = a3 | a4\n 97401: a1 = a1 | a3\n 97404: a2 = u8 [a0 + 0x15]\n 97407: a3 = u8 [a0 + 0x14]\n 97410: a4 = u8 [a0 + 0x16]\n 97413: a5 = u8 [a0 + 0x17]\n 97416: a2 = a2 << 0x8\n 97419: a2 = a2 | a3\n 97422: a4 = a4 << 0x10\n 97425: a5 = a5 << 0x18\n 97428: a4 = a4 | a5\n 97431: a2 = a2 | a4\n 97434: a2 = a2 << 0x20\n 97437: t0 = a2 | a1\n 97440: a2 = u8 [a0 + 0x1]\n 97443: a3 = u8 [a0]\n 97445: a4 = u8 [a0 + 0x2]\n 97448: a5 = u8 [a0 + 0x3]\n 97451: a2 = a2 << 0x8\n 97454: a2 = a2 | a3\n 97457: a4 = a4 << 0x10\n 97460: a5 = a5 << 0x18\n 97463: a4 = a4 | a5\n 97466: a2 = a2 | a4\n 97469: a3 = u8 [a0 + 0x5]\n 97472: a4 = u8 [a0 + 0x4]\n 97475: a5 = u8 [a0 + 0x6]\n 97478: s1 = u8 [a0 + 0x7]\n 97481: a3 = a3 << 0x8\n 97484: a3 = a3 | a4\n 97487: a5 = a5 << 0x10\n 97490: s1 = s1 << 0x18\n 97493: a5 = a5 | s1\n 97496: a3 = a3 | a5\n 97499: a3 = a3 << 0x20\n 97502: a2 = a2 | a3\n 97505: a3 = u8 [a0 + 0x19]\n 97508: a4 = u8 [a0 + 0x18]\n 97511: a5 = u8 [a0 + 0x1a]\n 97514: s1 = u8 [a0 + 0x1b]\n 97517: a3 = a3 << 0x8\n 97520: a3 = a3 | a4\n 97523: a5 = a5 << 0x10\n 97526: s1 = s1 << 0x18\n 97529: a5 = a5 | s1\n 97532: a3 = a3 | a5\n 97535: a4 = u8 [a0 + 0x1d]\n 97538: a5 = u8 [a0 + 0x1c]\n 97541: s1 = u8 [a0 + 0x1e]\n 97544: a1 = u8 [a0 + 0x1f]\n 97547: a4 = a4 << 0x8\n 97550: a4 = a4 | a5\n 97553: s1 = s1 << 0x10\n 97556: a1 = a1 << 0x18\n 97559: a1 = a1 | s1\n 97562: a1 = a1 | a4\n 97565: a1 = a1 << 0x20\n 97568: a3 = a3 | a1\n 97571: a1 = u8 [a0 + 0x9]\n 97574: a4 = u8 [a0 + 0x8]\n 97577: a5 = u8 [a0 + 0xa]\n 97580: s1 = u8 [a0 + 0xb]\n 97583: a1 = a1 << 0x8\n 97586: a1 = a1 | a4\n 97589: a5 = a5 << 0x10\n 97592: s1 = s1 << 0x18\n 97595: a5 = a5 | s1\n 97598: a1 = a1 | a5\n 97601: a4 = u8 [a0 + 0xd]\n 97604: a5 = u8 [a0 + 0xc]\n 97607: s1 = u8 [a0 + 0xe]\n 97610: a0 = u8 [a0 + 0xf]\n 97613: a4 = a4 << 0x8\n 97616: a4 = a4 | a5\n 97619: s1 = s1 << 0x10\n 97622: a0 = a0 << 0x18\n 97625: a0 = a0 | s1\n 97628: a0 = a0 | a4\n 97631: a0 = a0 << 0x20\n 97634: a0 = a0 | a1\n 97637: s1 = reverse a0\n 97639: a1 = reverse a3\n 97641: a2 = reverse a2\n 97643: a0 = reverse t0\n 97645: u64 [sp + 0x58] = a0\n 97648: u64 [sp + 0x50] = a2\n 97651: a0 = a0 | a2\n 97654: a2 = a1\n 97656: a1 = a1 | s1\n 97659: a1 = a1 | a0\n 97662: a1 = a1 >> 0x20\n 97665: a0 = a0 | s1\n 97668: a0 = a0 << 0x20\n 97671: a0 = a0 | a1\n 97674: jump @1296 if a0 != 0\n      : @1293 (gas: 5)\n 97678: u64 [sp + 0x48] = a2\n 97681: i32 a0 = a2 + 0\n 97683: a1 = 0x20\n 97686: u64 [sp + 0x40] = a0\n 97689: ra = 1128, jump @0\n      : @1294 [@dyn 564] (gas: 50)\n 97696: u8 [a0 + 31] = 0\n 97699: u8 [a0 + 30] = 0\n 97702: u8 [a0 + 29] = 0\n 97705: u8 [a0 + 28] = 0\n 97708: u8 [a0 + 27] = 0\n 97711: u8 [a0 + 26] = 0\n 97714: u8 [a0 + 25] = 0\n 97717: u8 [a0 + 24] = 0\n 97720: u8 [a0 + 23] = 0\n 97723: u8 [a0 + 22] = 0\n 97726: u8 [a0 + 21] = 0\n 97729: u8 [a0 + 20] = 0\n 97732: u8 [a0 + 19] = 0\n 97735: u8 [a0 + 18] = 0\n 97738: u8 [a0 + 17] = 0\n 97741: u8 [a0 + 16] = 0\n 97744: u8 [a0 + 15] = 0\n 97747: u8 [a0 + 14] = 0\n 97750: u8 [a0 + 13] = 0\n 97753: u8 [a0 + 12] = 0\n 97756: u8 [a0 + 11] = 0\n 97759: u8 [a0 + 10] = 0\n 97762: u8 [a0 + 9] = 0\n 97765: u8 [a0 + 8] = 0\n 97768: u8 [a0 + 7] = 0\n 97771: u8 [a0 + 6] = 0\n 97774: u8 [a0 + 5] = 0\n 97777: u8 [a0 + 4] = 0\n 97780: u8 [a0 + 3] = 0xa0\n 97785: u8 [a0 + 2] = 0x79\n 97789: u8 [a0 + 1] = 0xc3\n 97794: u8 [a0 + 0] = 0x8\n 97797: a1 = u64 [sp + 0x48]\n 97800: a0 = a1 + 0x4\n 97803: a1 = a0 <u a1\n 97806: a3 = u64 [sp + 0x58]\n 97809: a2 = a3 + a1\n 97812: a3 = a2 <u a3\n 97815: a3 = a1 if a1 == 0\n 97818: a3 = a3 + s1\n 97821: a1 = a3 <u s1\n 97824: a4 = u64 [sp + 0x50]\n 97827: a4 = a4 + a1\n 97830: u64 [sp + 0xa8] = a2\n 97834: u64 [sp + 0xa0] = a0\n 97838: u64 [sp + 0xb0] = a3\n 97842: a0 = sp + 0xc0\n 97846: a1 = sp + 0xa0\n 97850: u64 [sp + 0xb8] = a4\n 97854: ra = 1130, jump @743\n      : @1295 [@dyn 565] (gas: 30)\n 97861: a0 = u64 [sp + 0xc8]\n 97865: t0 = u64 [sp + 0xd8]\n 97869: t1 = u64 [sp + 0xc0]\n 97873: a3 = u64 [sp + 0xd0]\n 97877: a1 = u64 [sp + 0x58]\n 97880: a4 = a0 ^ a1\n 97883: a5 = a0 <u a1\n 97886: t2 = a1\n 97888: a2 = u64 [sp + 0x48]\n 97891: a1 = t1 <u a2\n 97894: a5 = a1 if a4 == 0\n 97897: a4 = a3 - s1\n 97900: a3 = a3 <u s1\n 97903: s1 = u64 [sp + 0x50]\n 97906: s1 = t0 - s1\n 97909: s1 = s1 - a3\n 97912: a3 = a4 <u a5\n 97915: s1 = s1 - a3\n 97918: a4 = a4 - a5\n 97921: a0 = a0 - t2\n 97924: a1 = a0 - a1\n 97927: a0 = t1 - a2\n 97930: a1 = a1 | s1\n 97933: a2 = a0 | a4\n 97936: a2 = a2 | a1\n 97939: a1 = a1 | a4\n 97942: a2 = a2 >> 0x20\n 97945: a1 = a1 << 0x20\n 97948: a1 = a1 | a2\n 97951: jump @1297 if a1 == 0\n      : @1296 (gas: 1)\n 97954: trap\n      : @1297 (gas: 4)\n 97955: i32 s1 = a0 + 0\n 97957: a0 = u64 [sp + 0x40]\n 97960: a1 = s1\n 97962: ra = 1132, jump @0\n      : @1298 [@dyn 566] (gas: 6)\n 97969: i32 a1 = a0 + 0\n 97971: a0 = 0x1\n 97974: a2 = s1\n 97976: ra = 0x46e\n 97980: ecalli 14 // 'seal_return'\n 97982: fallthrough\n      : @1299 [@dyn 567] (gas: 17)\n 97983: t0 = u64 [a1]\n 97985: t1 = u64 [a1 + 0x8]\n 97988: t2 = u64 [a1 + 0x10]\n 97991: a1 = u64 [a1 + 0x18]\n 97994: a3 = u64 [a2 + 0x18]\n 97997: a4 = u64 [a2 + 0x10]\n 98000: a5 = u64 [a2 + 0x8]\n 98003: a2 = u64 [a2]\n 98005: u64 [a0 + 0x38] = a3\n 98008: u64 [a0 + 0x30] = a4\n 98011: u64 [a0 + 0x28] = a5\n 98014: u64 [a0 + 0x20] = a2\n 98017: u64 [a0 + 0x18] = a1\n 98020: u64 [a0 + 0x10] = t2\n 98023: u64 [a0 + 0x8] = t1\n 98026: u64 [a0] = t0\n 98028: ret\n      : @1300 (gas: 17)\n 98030: sp = sp + 0xfffffffffffffd00\n 98034: u64 [sp + 0x2f8] = ra\n 98038: u64 [sp + 0x2f0] = s0\n 98042: u64 [sp + 0x2e8] = s1\n 98046: s0 = sp + 0x300\n 98050: sp = sp & 0xffffffffffffffe0\n 98053: a5 = u64 [a2 + 0x18]\n 98056: a3 = u64 [a2 + 0x10]\n 98059: a4 = u64 [a2 + 0x8]\n 98062: u64 [sp + 0x48] = a3\n 98065: u64 [sp + 0x18] = a5\n 98068: a5 = a5 | a3\n 98071: u64 [sp + 0x40] = a4\n 98074: a3 = a4 <u 0x1\n 98077: u64 [sp + 0xb8] = a5\n 98081: a3 = 0 if a5 != 0\n 98083: jump @1326 if a3 == 0\n      : @1301 (gas: 34)\n 98087: a2 = u64 [a2]\n 98089: u64 [sp + 0x50] = a2\n 98092: a2 = u64 [a1 + 0x18]\n 98095: u64 [sp + 0x78] = a2\n 98098: a2 = u64 [a1 + 0x10]\n 98101: u64 [sp + 0x70] = a2\n 98104: a2 = u64 [a1 + 0x8]\n 98107: u64 [sp + 0x60] = a2\n 98110: a1 = u64 [a1]\n 98112: u64 [sp + 0x68] = a1\n 98115: a3 = u64 [a0 + 0x10]\n 98118: a1 = u64 [a0 + 0x8]\n 98121: a2 = u64 [a0]\n 98123: a0 = u64 [a0 + 0x18]\n 98126: u64 [sp + 0x38] = a3\n 98129: u64 [sp + 0x2b0] = a3\n 98133: u64 [sp + 0x20] = a1\n 98136: u64 [sp + 0x2a8] = a1\n 98140: u64 [sp + 0x28] = a2\n 98143: u64 [sp + 0x2a0] = a2\n 98147: u64 [sp + 0x30] = a0\n 98150: u64 [sp + 0x2b8] = a0\n 98154: u64 [sp + 728] = 0\n 98158: u64 [sp + 720] = 0\n 98162: u64 [sp + 712] = 0\n 98166: u64 [sp + 704] = 0\n 98170: u32 [sp + 640] = 0x20\n 98175: i32 a1 = sp + 0x2a0\n 98179: i32 a3 = sp + 0x2c0\n 98183: i32 a4 = sp + 0x280\n 98187: a2 = 0xffffffffffffffff\n 98190: a0 = 0\n 98192: ecalli 8 // 'get_storage'\n 98194: fallthrough\n      : @1302 (gas: 27)\n 98195: a0 = u64 [sp + 0x2d0]\n 98199: a1 = u64 [sp + 0x2c8]\n 98203: a2 = u64 [sp + 0x2c0]\n 98207: a3 = u64 [sp + 0x2d8]\n 98211: a4 = a0 << 0x3f\n 98214: a5 = a1 >> 0x1\n 98217: a4 = a4 | a5\n 98220: a5 = a3 << 0x3f\n 98223: a0 = a0 >> 0x1\n 98226: s1 = a0 | a5\n 98229: a1 = a1 << 0x3f\n 98232: a5 = a2 >> 0x1\n 98235: a1 = a1 | a5\n 98238: t1 = a3 >> 0x1\n 98241: a2 = a2 & 0x1\n 98244: a0 = -a2\n 98246: t0 = a2 <u 0x1\n 98249: a3 = a1 & 0x7f\n 98252: a5 = a0 & s1\n 98255: a4 = a4 & a0\n 98258: a3 = a1 if a2 != 0\n 98261: a1 = a0 & t1\n 98264: a0 = a3 <u 0x20\n 98267: a0 = 0 if a4 != 0\n 98269: a2 = a5 | a1\n 98272: a0 = 0 if a2 != 0\n 98274: jump @1328 if t0 != a0\n      : @1303 (gas: 24)\n 98278: a0 = u64 [sp + 0x50]\n 98281: u64 [sp + 0x1c0] = a0\n 98285: u64 [sp + 0x1e0] = a3\n 98289: a0 = u64 [sp + 0x28]\n 98292: u64 [sp + 0x200] = a0\n 98296: a0 = u64 [sp + 0x40]\n 98299: u64 [sp + 0x1c8] = a0\n 98303: u64 [sp + 0x1e8] = a4\n 98307: a0 = u64 [sp + 0x20]\n 98310: u64 [sp + 0x208] = a0\n 98314: a0 = u64 [sp + 0x48]\n 98317: u64 [sp + 0x1d0] = a0\n 98321: u64 [sp + 0x1f0] = a5\n 98325: a0 = u64 [sp + 0x38]\n 98328: u64 [sp + 0x210] = a0\n 98332: s1 = u64 [sp + 0x18]\n 98335: u64 [sp + 0x1d8] = s1\n 98339: u64 [sp + 0x1f8] = a1\n 98343: a0 = sp + 0x200\n 98347: a1 = sp + 0x1e0\n 98351: a2 = sp + 0x1c0\n 98355: a3 = u64 [sp + 0x30]\n 98358: u64 [sp + 0x218] = a3\n 98362: ra = 1136, jump @237\n      : @1304 [@dyn 568] (gas: 16)\n 98369: a5 = u64 [sp + 0x48]\n 98372: a3 = u64 [sp + 0x40]\n 98375: a4 = s1\n 98377: a0 = a3 >u 0\n 98379: s1 = u64 [sp + 0x50]\n 98382: a1 = s1 <u 0x20\n 98385: a1 = a1 ^ 0x1\n 98388: a1 = a0 if a3 != 0\n 98391: a0 = a5 >u 0\n 98393: a2 = a4 >u 0\n 98395: a2 = a0 if a4 == 0\n 98398: a0 = u64 [sp + 0xb8]\n 98402: a2 = a1 if a0 == 0\n 98405: t0 = u64 [sp + 0x38]\n 98408: a0 = s1\n 98410: jump @1314 if a2 == 0\n      : @1305 (gas: 6)\n 98414: a0 = a0 & 0xffffffffffffffe0\n 98417: u64 [sp + 0x58] = a0\n 98420: a1 = 0x20\n 98423: a0 = 0\n 98425: s1 = t0\n 98427: ra = 1138, jump @0\n      : @1306 [@dyn 569] (gas: 70)\n 98434: a1 = u64 [sp + 0x30]\n 98437: a1 = reverse a1\n 98439: a2 = reverse s1\n 98441: a3 = u64 [sp + 0x20]\n 98444: a3 = reverse a3\n 98446: a4 = u64 [sp + 0x28]\n 98449: a4 = reverse a4\n 98451: a5 = a4 >> 0x38\n 98454: u8 [a0 + 0x1f] = a5\n 98457: a5 = a4 >> 0x30\n 98460: u8 [a0 + 0x1e] = a5\n 98463: a5 = a4 >> 0x28\n 98466: u8 [a0 + 0x1d] = a5\n 98469: a5 = a4 >> 0x20\n 98472: u8 [a0 + 0x1c] = a5\n 98475: a5 = a4 >> 0x18\n 98478: u8 [a0 + 0x1b] = a5\n 98481: a5 = a4 >> 0x10\n 98484: u8 [a0 + 0x1a] = a5\n 98487: a5 = a4 >> 0x8\n 98490: u8 [a0 + 0x19] = a5\n 98493: u8 [a0 + 0x18] = a4\n 98496: u8 [a0 + 0x10] = a3\n 98499: a4 = a3 >> 0x38\n 98502: u8 [a0 + 0x17] = a4\n 98505: a4 = a3 >> 0x30\n 98508: u8 [a0 + 0x16] = a4\n 98511: a4 = a3 >> 0x28\n 98514: u8 [a0 + 0x15] = a4\n 98517: a4 = a3 >> 0x20\n 98520: u8 [a0 + 0x14] = a4\n 98523: a4 = a3 >> 0x18\n 98526: u8 [a0 + 0x13] = a4\n 98529: a4 = a3 >> 0x10\n 98532: u8 [a0 + 0x12] = a4\n 98535: a3 = a3 >> 0x8\n 98538: u8 [a0 + 0x11] = a3\n 98541: u8 [a0 + 0x8] = a2\n 98544: a3 = a2 >> 0x38\n 98547: u8 [a0 + 0xf] = a3\n 98550: a3 = a2 >> 0x30\n 98553: u8 [a0 + 0xe] = a3\n 98556: a3 = a2 >> 0x28\n 98559: u8 [a0 + 0xd] = a3\n 98562: a3 = a2 >> 0x20\n 98565: u8 [a0 + 0xc] = a3\n 98568: a3 = a2 >> 0x18\n 98571: u8 [a0 + 0xb] = a3\n 98574: a3 = a2 >> 0x10\n 98577: u8 [a0 + 0xa] = a3\n 98580: a2 = a2 >> 0x8\n 98583: u8 [a0 + 0x9] = a2\n 98586: u8 [a0] = a1\n 98588: a2 = a1 >> 0x38\n 98591: u8 [a0 + 0x7] = a2\n 98594: a2 = a1 >> 0x30\n 98597: u8 [a0 + 0x6] = a2\n 98600: a2 = a1 >> 0x28\n 98603: u8 [a0 + 0x5] = a2\n 98606: a2 = a1 >> 0x20\n 98609: u8 [a0 + 0x4] = a2\n 98612: a2 = a1 >> 0x18\n 98615: u8 [a0 + 0x3] = a2\n 98618: a2 = a1 >> 0x10\n 98621: u8 [a0 + 0x2] = a2\n 98624: a1 = a1 >> 0x8\n 98627: u8 [a0 + 0x1] = a1\n 98630: a1 = 0x20\n 98633: a0 = 0\n 98635: ra = 1140, jump @0\n      : @1307 [@dyn 570] (gas: 5)\n 98642: i32 a0 = a0 + 0\n 98644: i32 a2 = sp + 0x2c0\n 98648: a1 = 0x20\n 98651: ecalli 9 // 'hash_keccak_256'\n 98653: fallthrough\n      : @1308 (gas: 13)\n 98654: a0 = u64 [sp + 0x2c0]\n 98658: a1 = u64 [sp + 0x2c8]\n 98662: a2 = u64 [sp + 0x2d0]\n 98666: a3 = u64 [sp + 0x2d8]\n 98670: a0 = reverse a0\n 98672: u64 [sp + 0xb0] = a0\n 98676: t2 = reverse a1\n 98678: a0 = reverse a2\n 98680: u64 [sp + 0xb8] = a0\n 98684: a0 = reverse a3\n 98686: u64 [sp + 0xa0] = a0\n 98690: a0 = u64 [sp + 0x58]\n 98693: jump @1317 if a0 == 0\n      : @1309 (gas: 6)\n 98697: a3 = 0\n 98699: a4 = 0\n 98701: s1 = 0\n 98703: ra = 0\n 98705: a0 = t2\n 98707: fallthrough\n      : @1310 (gas: 31)\n 98708: u64 [sp + 0x80] = ra\n 98712: u64 [sp + 0xa8] = a0\n 98716: a1 = u64 [sp + 0x68]\n 98719: a1 = a1 + a3\n 98722: u64 [sp + 0x90] = a3\n 98726: a0 = a1 <u a3\n 98729: a2 = u64 [sp + 0x60]\n 98732: a2 = a2 + a4\n 98735: a2 = a2 + a0\n 98738: a3 = a2 ^ a4\n 98741: u64 [sp + 0x88] = a4\n 98745: a4 = a2 <u a4\n 98748: a4 = a0 if a3 == 0\n 98751: a0 = u64 [sp + 0x70]\n 98754: a0 = a0 + s1\n 98757: u64 [sp + 0x98] = s1\n 98761: a3 = a0 <u s1\n 98764: a5 = u64 [sp + 0x78]\n 98767: a5 = a5 + ra\n 98770: a3 = a3 + a5\n 98773: a4 = a4 + a0\n 98776: a0 = a4 <u a0\n 98779: a0 = a0 + a3\n 98782: a0 = a0 | a2\n 98785: a2 = a1 | a4\n 98788: a2 = a2 | a0\n 98791: a0 = a0 | a4\n 98794: a2 = a2 >> 0x20\n 98797: a0 = a0 << 0x20\n 98800: a0 = a0 | a2\n 98803: jump @1325 if a0 != 0\n      : @1311 (gas: 26)\n 98807: i32 a1 = a1 + 0\n 98809: i32 a0 = sp + 0x220\n 98813: ecalli 3 // 'call_data_load'\n 98815: a0 = u64 [sp + 0x220]\n 98819: a1 = u64 [sp + 0x228]\n 98823: a2 = u64 [sp + 0x230]\n 98827: a3 = u64 [sp + 0x238]\n 98831: a4 = u64 [sp + 0xb0]\n 98835: u64 [sp + 0x2b8] = a4\n 98839: a4 = u64 [sp + 0xa8]\n 98843: u64 [sp + 0x2b0] = a4\n 98847: a4 = u64 [sp + 0xb8]\n 98851: u64 [sp + 0x2a8] = a4\n 98855: s1 = u64 [sp + 0xa0]\n 98859: u64 [sp + 0x2a0] = s1\n 98863: u64 [sp + 0x2d8] = a3\n 98867: u64 [sp + 0x2d0] = a2\n 98871: u64 [sp + 0x2c8] = a1\n 98875: u64 [sp + 0x2c0] = a0\n 98879: i32 a1 = sp + 0x2a0\n 98883: i32 a3 = sp + 0x2c0\n 98887: a2 = 0xffffffffffffffff\n 98890: a4 = 0x20\n 98893: a0 = 0\n 98895: ecalli 16 // 'set_storage'\n 98897: fallthrough\n      : @1312 (gas: 38)\n 98898: s1 = s1 + 0x1\n 98901: a0 = s1 <u 0x1\n 98904: a1 = u64 [sp + 0xb8]\n 98908: a1 = a1 + a0\n 98911: u64 [sp + 0xb8] = a1\n 98915: u64 [sp + 0xa0] = s1\n 98919: a0 = u64 [sp + 0xb8]\n 98923: a0 = a0 | s1\n 98926: a0 = a0 <u 0x1\n 98929: a1 = u64 [sp + 0xa8]\n 98933: t2 = a1 + a0\n 98936: a3 = t2 <u a1\n 98939: a0 = u64 [sp + 0x90]\n 98943: a2 = a0 + 0x20\n 98946: a0 = a2 <u a0\n 98949: a4 = u64 [sp + 0x88]\n 98953: t0 = a4 + a0\n 98956: a4 = t0 <u a4\n 98959: a4 = a0 if a0 == 0\n 98962: a5 = u64 [sp + 0x98]\n 98966: t1 = a5 + a4\n 98969: a4 = t1 <u a5\n 98972: a1 = u64 [sp + 0x80]\n 98976: a1 = a1 + a4\n 98979: a4 = t1 | a1\n 98982: a5 = u64 [sp + 0x58]\n 98985: a5 = a2 <u a5\n 98988: a5 = 0 if t0 != 0\n 98990: a5 = 0 if a4 != 0\n 98992: a0 = u64 [sp + 0xb0]\n 98996: a0 = a0 + a3\n 98999: u64 [sp + 0xb0] = a0\n 99003: a3 = a2\n 99005: a4 = t0\n 99007: s1 = t1\n 99009: a0 = t2\n 99011: ra = a1\n 99013: jump @1310 if a5 != 0\n      : @1313 (gas: 1)\n 99017: jump @1318\n      : @1314 (gas: 4)\n 99020: a0 = a0 | a5\n 99023: a1 = a3 | a4\n 99026: a0 = a0 | a1\n 99029: jump @1322 if a0 == 0\n      : @1315 (gas: 12)\n 99033: a2 = u64 [sp + 0x70]\n 99036: a3 = u64 [sp + 0x68]\n 99039: a0 = a3 | a2\n 99042: a1 = u64 [sp + 0x78]\n 99045: a4 = u64 [sp + 0x60]\n 99048: a1 = a1 | a4\n 99051: a0 = a0 | a1\n 99054: a0 = a0 >> 0x20\n 99057: a1 = a1 | a2\n 99060: a1 = a1 << 0x20\n 99063: a0 = a0 | a1\n 99066: jump @1325 if a0 != 0\n      : @1316 (gas: 193)\n 99070: i32 a1 = a3 + 0\n 99072: i32 a0 = sp + 0x260\n 99076: ecalli 3 // 'call_data_load'\n 99078: a0 = u64 [sp + 0x278]\n 99082: u64 [sp + 0xb8] = a0\n 99086: a0 = u64 [sp + 0x270]\n 99090: u64 [sp + 0xb0] = a0\n 99094: t2 = u64 [sp + 0x268]\n 99098: ra = u64 [sp + 0x260]\n 99102: u8 [sp + 447] = 0\n 99106: u8 [sp + 446] = 0\n 99110: u8 [sp + 445] = 0\n 99114: u8 [sp + 444] = 0\n 99118: u8 [sp + 443] = 0\n 99122: u8 [sp + 442] = 0\n 99126: u8 [sp + 441] = 0\n 99130: u8 [sp + 440] = 0\n 99134: u8 [sp + 439] = 0\n 99138: u8 [sp + 438] = 0\n 99142: u8 [sp + 437] = 0\n 99146: u8 [sp + 436] = 0\n 99150: u8 [sp + 435] = 0\n 99154: u8 [sp + 434] = 0\n 99158: u8 [sp + 433] = 0\n 99162: u8 [sp + 432] = 0\n 99166: u8 [sp + 431] = 0\n 99170: u8 [sp + 430] = 0\n 99174: u8 [sp + 429] = 0\n 99178: u8 [sp + 428] = 0\n 99182: u8 [sp + 427] = 0\n 99186: u8 [sp + 426] = 0\n 99190: u8 [sp + 425] = 0\n 99194: u8 [sp + 424] = 0\n 99198: u8 [sp + 423] = 0\n 99202: u8 [sp + 422] = 0\n 99206: u8 [sp + 421] = 0\n 99210: u8 [sp + 420] = 0\n 99214: u8 [sp + 419] = 0\n 99218: u8 [sp + 418] = 0\n 99222: u8 [sp + 417] = 0\n 99226: u8 [sp + 416] = 0\n 99230: u8 [sp + 415] = 0xff\n 99236: u8 [sp + 414] = 0xff\n 99242: u8 [sp + 413] = 0xff\n 99248: u8 [sp + 411] = 0xff\n 99254: u8 [sp + 408] = 0xffffffffffffffff\n 99259: u8 [sp + 407] = 0xff\n 99265: u8 [sp + 406] = 0xff\n 99271: u8 [sp + 405] = 0xff\n 99277: u8 [sp + 403] = 0xff\n 99283: u8 [sp + 400] = 0xffffffffffffffff\n 99288: u8 [sp + 399] = 0xff\n 99294: u8 [sp + 398] = 0xff\n 99300: u8 [sp + 397] = 0xff\n 99306: u8 [sp + 395] = 0xff\n 99312: u8 [sp + 392] = 0xffffffffffffffff\n 99317: u8 [sp + 391] = 0xff\n 99323: u8 [sp + 390] = 0xff\n 99329: u8 [sp + 389] = 0xff\n 99335: u8 [sp + 387] = 0xff\n 99341: u8 [sp + 384] = 0xffffffffffffffff\n 99346: a0 = 0xffffffff\n 99356: u8 [sp + 0x19c] = a0\n 99360: a5 = 0xffffffffffff\n 99370: u8 [sp + 0x19a] = a5\n 99374: a4 = 0xffffffffffffff\n 99384: u8 [sp + 0x199] = a4\n 99388: u8 [sp + 0x194] = a0\n 99392: u8 [sp + 0x192] = a5\n 99396: u8 [sp + 0x191] = a4\n 99400: u8 [sp + 0x18c] = a0\n 99404: u8 [sp + 0x18a] = a5\n 99408: u8 [sp + 0x189] = a4\n 99412: u8 [sp + 0x184] = a0\n 99416: u8 [sp + 0x182] = a5\n 99420: u8 [sp + 0x181] = a4\n 99424: t0 = u64 [sp + 0x50]\n 99427: a4 = t0 & 0x1f\n 99430: a0 = sp + 0x180\n 99434: a4 = a4 + a0\n 99437: a0 = u8 [a4 + 0x19]\n 99440: a5 = u8 [a4 + 0x18]\n 99443: s1 = u8 [a4 + 0x1a]\n 99446: a1 = u8 [a4 + 0x1b]\n 99449: a0 = a0 << 0x8\n 99452: a0 = a0 | a5\n 99455: s1 = s1 << 0x10\n 99458: a1 = a1 << 0x18\n 99461: a1 = a1 | s1\n 99464: a0 = a0 | a1\n 99467: a1 = u8 [a4 + 0x1d]\n 99470: a5 = u8 [a4 + 0x1c]\n 99473: s1 = u8 [a4 + 0x1e]\n 99476: a2 = u8 [a4 + 0x1f]\n 99479: a1 = a1 << 0x8\n 99482: a1 = a1 | a5\n 99485: s1 = s1 << 0x10\n 99488: a2 = a2 << 0x18\n 99491: a2 = a2 | s1\n 99494: a1 = a1 | a2\n 99497: a1 = a1 << 0x20\n 99500: t1 = a1 | a0\n 99503: a0 = u8 [a4 + 0x11]\n 99506: a1 = u8 [a4 + 0x10]\n 99509: a2 = u8 [a4 + 0x12]\n 99512: s1 = u8 [a4 + 0x13]\n 99515: a0 = a0 << 0x8\n 99518: a0 = a0 | a1\n 99521: a2 = a2 << 0x10\n 99524: s1 = s1 << 0x18\n 99527: a2 = a2 | s1\n 99530: a0 = a0 | a2\n 99533: a1 = u8 [a4 + 0x15]\n 99536: a2 = u8 [a4 + 0x14]\n 99539: s1 = u8 [a4 + 0x16]\n 99542: a3 = u8 [a4 + 0x17]\n 99545: a1 = a1 << 0x8\n 99548: a1 = a1 | a2\n 99551: s1 = s1 << 0x10\n 99554: a3 = a3 << 0x18\n 99557: a3 = a3 | s1\n 99560: a1 = a1 | a3\n 99563: a1 = a1 << 0x20\n 99566: s1 = a1 | a0\n 99569: a0 = u8 [a4 + 0x9]\n 99572: a1 = u8 [a4 + 0x8]\n 99575: a2 = u8 [a4 + 0xa]\n 99578: a3 = u8 [a4 + 0xb]\n 99581: a0 = a0 << 0x8\n 99584: a0 = a0 | a1\n 99587: a2 = a2 << 0x10\n 99590: a3 = a3 << 0x18\n 99593: a2 = a2 | a3\n 99596: a5 = a2 | a0\n 99599: a1 = u8 [a4 + 0xd]\n 99602: a2 = u8 [a4 + 0xc]\n 99605: a3 = u8 [a4 + 0xe]\n 99608: a0 = u8 [a4 + 0xf]\n 99611: a1 = a1 << 0x8\n 99614: a1 = a1 | a2\n 99617: a3 = a3 << 0x10\n 99620: a0 = a0 << 0x18\n 99623: a0 = a0 | a3\n 99626: a0 = a0 | a1\n 99629: a0 = a0 << 0x20\n 99632: a0 = a0 | a5\n 99635: a1 = u8 [a4 + 0x1]\n 99638: a2 = u8 [a4]\n 99640: a3 = u8 [a4 + 0x2]\n 99643: a5 = u8 [a4 + 0x3]\n 99646: a1 = a1 << 0x8\n 99649: a1 = a1 | a2\n 99652: a3 = a3 << 0x10\n 99655: a5 = a5 << 0x18\n 99658: a3 = a3 | a5\n 99661: a1 = a1 | a3\n 99664: a2 = u8 [a4 + 0x5]\n 99667: a3 = u8 [a4 + 0x4]\n 99670: a5 = u8 [a4 + 0x6]\n 99673: a4 = u8 [a4 + 0x7]\n 99676: a2 = a2 << 0x8\n 99679: a2 = a2 | a3\n 99682: a5 = a5 << 0x10\n 99685: a4 = a4 << 0x18\n 99688: a4 = a4 | a5\n 99691: a2 = a2 | a4\n 99694: a2 = a2 << 0x20\n 99697: a1 = a1 | a2\n 99700: ra = ra & ~a1\n 99703: a2 = t2 & ~a0\n 99706: a0 = u64 [sp + 0xb0]\n 99710: a1 = a0 & ~s1\n 99713: a0 = u64 [sp + 0xb8]\n 99717: a0 = a0 & ~t1\n 99720: a4 = t0 >> 0x3f\n 99723: a3 = u64 [sp + 0x40]\n 99726: a5 = a3 << 0x1\n 99729: a4 = a4 | a5\n 99732: a5 = a3 >> 0x3f\n 99735: a3 = u64 [sp + 0x48]\n 99738: s1 = a3 << 0x1\n 99741: a5 = a5 | s1\n 99744: s1 = a3 >> 0x3f\n 99747: a3 = u64 [sp + 0x18]\n 99750: a3 = a3 << 0x1\n 99753: a3 = a3 | s1\n 99756: a0 = a0 | a3\n 99759: a1 = a1 | a5\n 99762: a2 = a2 | a4\n 99765: a3 = t0 << 0x1\n 99768: a3 = ra | a3\n 99771: t0 = u64 [sp + 0x38]\n 99774: jump @1323\n      : @1317 (gas: 5)\n 99777: a2 = 0\n 99779: t0 = 0\n 99781: t1 = 0\n 99783: ra = 0\n 99785: fallthrough\n      : @1318 (gas: 10)\n 99786: s1 = u64 [sp + 0x50]\n 99789: a3 = u64 [sp + 0x58]\n 99792: a3 = a3 ^ s1\n 99795: a5 = u64 [sp + 0x48]\n 99798: a3 = a3 | a5\n 99801: a0 = u64 [sp + 0x40]\n 99804: a4 = u64 [sp + 0x18]\n 99807: a4 = a4 | a0\n 99810: a3 = a3 | a4\n 99813: jump @1321 if a3 == 0\n      : @1319 (gas: 27)\n 99817: u64 [sp + 0xa8] = t2\n 99821: a3 = u64 [sp + 0x68]\n 99824: a3 = a3 + a2\n 99827: a2 = a3 <u a2\n 99830: a4 = u64 [sp + 0x60]\n 99833: a4 = a4 + t0\n 99836: a4 = a4 + a2\n 99839: a5 = a4 ^ t0\n 99842: a1 = a4 <u t0\n 99845: a1 = a2 if a5 == 0\n 99848: a2 = u64 [sp + 0x70]\n 99851: a2 = a2 + t1\n 99854: a1 = a1 + a2\n 99857: a5 = a1 <u a2\n 99860: a0 = a2 <u t1\n 99863: a2 = u64 [sp + 0x78]\n 99866: a2 = a2 + ra\n 99869: a0 = a0 + a2\n 99872: a0 = a0 + a5\n 99875: a2 = a3 | a1\n 99878: a0 = a0 | a4\n 99881: a2 = a2 | a0\n 99884: a2 = a2 >> 0x20\n 99887: a0 = a0 | a1\n 99890: a0 = a0 << 0x20\n 99893: a0 = a0 | a2\n 99896: jump @1325 if a0 != 0\n      : @1320 (gas: 194)\n 99900: i32 a1 = a3 + 0\n 99902: i32 a0 = sp + 0x240\n 99906: ecalli 3 // 'call_data_load'\n 99908: a0 = u64 [sp + 0x258]\n 99912: u64 [sp + 0x98] = a0\n 99916: t1 = u64 [sp + 0x250]\n 99920: t2 = u64 [sp + 0x248]\n 99924: ra = u64 [sp + 0x240]\n 99928: u8 [sp + 383] = 0\n 99932: u8 [sp + 382] = 0\n 99936: u8 [sp + 381] = 0\n 99940: u8 [sp + 380] = 0\n 99944: u8 [sp + 379] = 0\n 99948: u8 [sp + 378] = 0\n 99952: u8 [sp + 377] = 0\n 99956: u8 [sp + 376] = 0\n 99960: u8 [sp + 375] = 0\n 99964: u8 [sp + 374] = 0\n 99968: u8 [sp + 373] = 0\n 99972: u8 [sp + 372] = 0\n 99976: u8 [sp + 371] = 0\n 99980: u8 [sp + 370] = 0\n 99984: u8 [sp + 369] = 0\n 99988: u8 [sp + 368] = 0\n 99992: u8 [sp + 367] = 0\n 99996: u8 [sp + 366] = 0\n100000: u8 [sp + 365] = 0\n100004: u8 [sp + 364] = 0\n100008: u8 [sp + 363] = 0\n100012: u8 [sp + 362] = 0\n100016: u8 [sp + 361] = 0\n100020: u8 [sp + 360] = 0\n100024: u8 [sp + 359] = 0\n100028: u8 [sp + 358] = 0\n100032: u8 [sp + 357] = 0\n100036: u8 [sp + 356] = 0\n100040: u8 [sp + 355] = 0\n100044: u8 [sp + 354] = 0\n100048: u8 [sp + 353] = 0\n100052: u8 [sp + 352] = 0\n100056: u8 [sp + 351] = 0xff\n100062: u8 [sp + 350] = 0xff\n100068: u8 [sp + 349] = 0xff\n100074: u8 [sp + 347] = 0xff\n100080: u8 [sp + 344] = 0xffffffffffffffff\n100085: u8 [sp + 343] = 0xff\n100091: u8 [sp + 342] = 0xff\n100097: u8 [sp + 341] = 0xff\n100103: u8 [sp + 339] = 0xff\n100109: u8 [sp + 336] = 0xffffffffffffffff\n100114: u8 [sp + 335] = 0xff\n100120: u8 [sp + 334] = 0xff\n100126: u8 [sp + 333] = 0xff\n100132: u8 [sp + 331] = 0xff\n100138: u8 [sp + 328] = 0xffffffffffffffff\n100143: u8 [sp + 327] = 0xff\n100149: u8 [sp + 326] = 0xff\n100155: u8 [sp + 325] = 0xff\n100161: u8 [sp + 323] = 0xff\n100167: u8 [sp + 320] = 0xffffffffffffffff\n100172: a0 = 0xffffffff\n100182: u8 [sp + 0x15c] = a0\n100186: a5 = 0xffffffffffff\n100196: u8 [sp + 0x15a] = a5\n100200: a4 = 0xffffffffffffff\n100210: u8 [sp + 0x159] = a4\n100214: u8 [sp + 0x154] = a0\n100218: u8 [sp + 0x152] = a5\n100222: u8 [sp + 0x151] = a4\n100226: u8 [sp + 0x14c] = a0\n100230: u8 [sp + 0x14a] = a5\n100234: u8 [sp + 0x149] = a4\n100238: u8 [sp + 0x144] = a0\n100242: u8 [sp + 0x142] = a5\n100246: u8 [sp + 0x141] = a4\n100250: a4 = u64 [sp + 0x50]\n100253: a4 = a4 & 0x1f\n100256: a0 = sp + 0x140\n100260: a4 = a4 + a0\n100263: a0 = u8 [a4 + 0x19]\n100266: a5 = u8 [a4 + 0x18]\n100269: s1 = u8 [a4 + 0x1a]\n100272: a1 = u8 [a4 + 0x1b]\n100275: a0 = a0 << 0x8\n100278: a0 = a0 | a5\n100281: s1 = s1 << 0x10\n100284: a1 = a1 << 0x18\n100287: a1 = a1 | s1\n100290: a0 = a0 | a1\n100293: a1 = u8 [a4 + 0x1d]\n100296: a5 = u8 [a4 + 0x1c]\n100299: s1 = u8 [a4 + 0x1e]\n100302: a2 = u8 [a4 + 0x1f]\n100305: a1 = a1 << 0x8\n100308: a1 = a1 | a5\n100311: s1 = s1 << 0x10\n100314: a2 = a2 << 0x18\n100317: a2 = a2 | s1\n100320: a1 = a1 | a2\n100323: a1 = a1 << 0x20\n100326: t0 = a1 | a0\n100329: a0 = u8 [a4 + 0x11]\n100332: a1 = u8 [a4 + 0x10]\n100335: a2 = u8 [a4 + 0x12]\n100338: s1 = u8 [a4 + 0x13]\n100341: a0 = a0 << 0x8\n100344: a0 = a0 | a1\n100347: a2 = a2 << 0x10\n100350: s1 = s1 << 0x18\n100353: a2 = a2 | s1\n100356: a0 = a0 | a2\n100359: a1 = u8 [a4 + 0x15]\n100362: a2 = u8 [a4 + 0x14]\n100365: s1 = u8 [a4 + 0x16]\n100368: a3 = u8 [a4 + 0x17]\n100371: a1 = a1 << 0x8\n100374: a1 = a1 | a2\n100377: s1 = s1 << 0x10\n100380: a3 = a3 << 0x18\n100383: a3 = a3 | s1\n100386: a1 = a1 | a3\n100389: a1 = a1 << 0x20\n100392: s1 = a1 | a0\n100395: a0 = u8 [a4 + 0x9]\n100398: a1 = u8 [a4 + 0x8]\n100401: a2 = u8 [a4 + 0xa]\n100404: a3 = u8 [a4 + 0xb]\n100407: a0 = a0 << 0x8\n100410: a0 = a0 | a1\n100413: a2 = a2 << 0x10\n100416: a3 = a3 << 0x18\n100419: a2 = a2 | a3\n100422: a5 = a2 | a0\n100425: a1 = u8 [a4 + 0xd]\n100428: a2 = u8 [a4 + 0xc]\n100431: a3 = u8 [a4 + 0xe]\n100434: a0 = u8 [a4 + 0xf]\n100437: a1 = a1 << 0x8\n100440: a1 = a1 | a2\n100443: a3 = a3 << 0x10\n100446: a0 = a0 << 0x18\n100449: a0 = a0 | a3\n100452: a0 = a0 | a1\n100455: a0 = a0 << 0x20\n100458: a0 = a0 | a5\n100461: a1 = u8 [a4 + 0x1]\n100464: a2 = u8 [a4]\n100466: a3 = u8 [a4 + 0x2]\n100469: a5 = u8 [a4 + 0x3]\n100472: a1 = a1 << 0x8\n100475: a1 = a1 | a2\n100478: a3 = a3 << 0x10\n100481: a5 = a5 << 0x18\n100484: a3 = a3 | a5\n100487: a1 = a1 | a3\n100490: a2 = u8 [a4 + 0x5]\n100493: a3 = u8 [a4 + 0x4]\n100496: a5 = u8 [a4 + 0x6]\n100499: a4 = u8 [a4 + 0x7]\n100502: a2 = a2 << 0x8\n100505: a2 = a2 | a3\n100508: a5 = a5 << 0x10\n100511: a4 = a4 << 0x18\n100514: a4 = a4 | a5\n100517: a2 = a2 | a4\n100520: a2 = a2 << 0x20\n100523: a1 = a1 | a2\n100526: a1 = ra & ~a1\n100529: a0 = t2 & ~a0\n100532: a2 = t1 & ~s1\n100535: a3 = u64 [sp + 0x98]\n100539: a3 = a3 & ~t0\n100542: a4 = u64 [sp + 0xb0]\n100546: u64 [sp + 0x2b8] = a4\n100550: a4 = u64 [sp + 0xa8]\n100554: u64 [sp + 0x2b0] = a4\n100558: a4 = u64 [sp + 0xb8]\n100562: u64 [sp + 0x2a8] = a4\n100566: a4 = u64 [sp + 0xa0]\n100570: u64 [sp + 0x2a0] = a4\n100574: u64 [sp + 0x2d8] = a3\n100578: u64 [sp + 0x2d0] = a2\n100582: u64 [sp + 0x2c8] = a0\n100586: u64 [sp + 0x2c0] = a1\n100590: i32 a1 = sp + 0x2a0\n100594: i32 a3 = sp + 0x2c0\n100598: a2 = 0xffffffffffffffff\n100601: a4 = 0x20\n100604: a0 = 0\n100606: ecalli 16 // 'set_storage'\n100608: s1 = u64 [sp + 0x50]\n100611: a5 = u64 [sp + 0x48]\n100614: a0 = u64 [sp + 0x40]\n100617: fallthrough\n      : @1321 (gas: 25)\n100618: a2 = a5 >> 0x3f\n100621: a1 = u64 [sp + 0x18]\n100624: a1 = a1 << 0x1\n100627: t0 = a1 | a2\n100630: a1 = a0 >> 0x3f\n100633: a2 = a5 << 0x1\n100636: a1 = a1 | a2\n100639: a2 = s1 >> 0x3f\n100642: a3 = a0 << 0x1\n100645: a2 = a2 | a3\n100648: a3 = s1 << 0x1\n100651: a3 = a3 + 0x1\n100654: a4 = u64 [sp + 0x20]\n100657: u64 [sp + 0x2a8] = a4\n100661: a4 = u64 [sp + 0x28]\n100664: u64 [sp + 0x2a0] = a4\n100668: a4 = u64 [sp + 0x38]\n100671: u64 [sp + 0x2b0] = a4\n100675: a4 = u64 [sp + 0x30]\n100678: u64 [sp + 0x2b8] = a4\n100682: u64 [sp + 0x2c0] = a3\n100686: u64 [sp + 0x2c8] = a2\n100690: u64 [sp + 0x2d0] = a1\n100694: u64 [sp + 0x2d8] = t0\n100698: jump @1324\n      : @1322 (gas: 4)\n100700: a3 = 0\n100702: a2 = 0\n100704: a1 = 0\n100706: fallthrough\n      : @1323 (gas: 12)\n100707: a4 = u64 [sp + 0x20]\n100710: u64 [sp + 0x2a8] = a4\n100714: a4 = u64 [sp + 0x28]\n100717: u64 [sp + 0x2a0] = a4\n100721: u64 [sp + 0x2b0] = t0\n100725: a4 = u64 [sp + 0x30]\n100728: u64 [sp + 0x2b8] = a4\n100732: u64 [sp + 0x2c0] = a3\n100736: u64 [sp + 0x2c8] = a2\n100740: u64 [sp + 0x2d0] = a1\n100744: u64 [sp + 0x2d8] = a0\n100748: fallthrough\n      : @1324 (gas: 12)\n100749: i32 a1 = sp + 0x2a0\n100753: i32 a3 = sp + 0x2c0\n100757: a2 = 0xffffffffffffffff\n100760: a4 = 0x20\n100763: a0 = 0\n100765: ecalli 16 // 'set_storage'\n100767: sp = s0 + 0xfffffffffffffd00\n100771: ra = u64 [sp + 0x2f8]\n100775: s0 = u64 [sp + 0x2f0]\n100779: s1 = u64 [sp + 0x2e8]\n100783: sp = sp + 0x300\n100787: ret\n      : @1325 (gas: 1)\n100789: trap\n      : @1326 (gas: 8)\n100790: u64 [sp + 240] = 0\n100794: u64 [sp + 232] = 0\n100798: u64 [sp + 224] = 0\n100802: a0 = 0x4e487b7100000000\n100812: a1 = sp + 0xe0\n100816: u64 [sp + 0xf8] = a0\n100820: a0 = 0\n100822: ra = 1142, jump @23\n      : @1327 [@dyn 571] (gas: 8)\n100829: u64 [sp + 216] = 0\n100833: u64 [sp + 208] = 0\n100837: u64 [sp + 192] = 0x41\n100842: a0 = 0x4\n100845: a1 = sp + 0xc0\n100849: u64 [sp + 200] = 0\n100853: ra = 0x47a\n100857: jump @23\n      : @1328 (gas: 8)\n100861: u64 [sp + 304] = 0\n100865: u64 [sp + 296] = 0\n100869: u64 [sp + 288] = 0\n100873: a0 = 0x4e487b7100000000\n100883: a1 = sp + 0x120\n100887: u64 [sp + 0x138] = a0\n100891: a0 = 0\n100893: ra = 1144, jump @23\n      : @1329 [@dyn 572] (gas: 7)\n100900: u64 [sp + 280] = 0\n100904: u64 [sp + 272] = 0\n100908: u64 [sp + 256] = 0x22\n100913: a0 = 0x4\n100916: a1 = sp + 0x100\n100920: u64 [sp + 264] = 0\n100924: ra = 1146, jump @23\n      : @1330 [@dyn 573] (gas: 3)\n100931: a1 = 0x24\n100934: a0 = 0\n100936: ra = 1148, jump @0\n      : @1331 [@dyn 574] (gas: 6)\n100943: i32 a1 = a0 + 0\n100945: a0 = 0x1\n100948: a2 = 0x24\n100951: ra = 0x47e\n100955: ecalli 14 // 'seal_return'\n100957: fallthrough\n      : @1332 [@dyn 575] (gas: 36)\n100958: sp = sp + 0xffffffffffffff70\n100962: u64 [sp + 0x88] = ra\n100966: u64 [sp + 0x80] = s0\n100970: u64 [sp + 0x78] = s1\n100973: s0 = sp + 0x90\n100977: sp = sp & 0xfffffffffffffff0\n100980: a3 = u64 [a0]\n100982: u64 [sp + 0x8] = a3\n100985: t1 = u64 [a0 + 0x8]\n100988: t2 = u64 [a0 + 0x10]\n100991: ra = u64 [a0 + 0x18]\n100994: t0 = u64 [a1]\n100996: a4 = u64 [a1 + 0x8]\n100999: a5 = u64 [a1 + 0x10]\n101002: a3 = u64 [a1 + 0x18]\n101005: s1 = u64 [a2]\n101007: a1 = u64 [a2 + 0x8]\n101010: a0 = u64 [a2 + 0x10]\n101013: a2 = u64 [a2 + 0x18]\n101016: u64 [sp + 0x28] = a2\n101019: u64 [sp + 0x20] = a0\n101022: u64 [sp + 0x18] = a1\n101025: u64 [sp + 0x10] = s1\n101028: u64 [sp + 0x48] = a3\n101031: u64 [sp + 0x40] = a5\n101034: u64 [sp + 0x38] = a4\n101037: u64 [sp + 0x30] = t0\n101040: u64 [sp + 0x68] = ra\n101043: u64 [sp + 0x60] = t2\n101046: u64 [sp + 0x58] = t1\n101049: a0 = sp + 0x50\n101052: a1 = sp + 0x30\n101055: a2 = sp + 0x10\n101058: a3 = u64 [sp + 0x8]\n101061: u64 [sp + 0x50] = a3\n101064: ra = 1152, jump @1300\n      : @1333 [@dyn 576] (gas: 6)\n101070: sp = s0 + 0xffffffffffffff70\n101074: ra = u64 [sp + 0x88]\n101078: s0 = u64 [sp + 0x80]\n101082: s1 = u64 [sp + 0x78]\n101085: sp = sp + 0x90\n101089: ret\n      : @1334 (gas: 14)\n101091: sp = sp + 0xffffffffffffff20\n101095: u64 [sp + 0xd8] = ra\n101099: u64 [sp + 0xd0] = s0\n101103: u64 [sp + 0xc8] = s1\n101107: s0 = sp + 0xe0\n101111: sp = sp & 0xfffffffffffffff0\n101114: a2 = u64 [a1 + 0x10]\n101117: a3 = u64 [a1 + 0x18]\n101120: a5 = u64 [a1 + 0x8]\n101123: s1 = u64 [a1]\n101125: a4 = a5 | a3\n101128: a1 = s1 | a2\n101131: a1 = a1 | a4\n101134: jump @1337 if a1 == 0\n      : @1335 (gas: 20)\n101137: t0 = u64 [a0 + 0x18]\n101140: a1 = u64 [a0 + 0x10]\n101143: a4 = u64 [a0 + 0x8]\n101146: a0 = u64 [a0]\n101148: u64 [sp + 0x60] = s1\n101151: u64 [sp + 0x80] = a0\n101155: u64 [sp + 184] = 0\n101159: u64 [sp + 176] = 0\n101163: u64 [sp + 168] = 0\n101167: u64 [sp + 160] = 0x1\n101172: u64 [sp + 0x68] = a5\n101175: u64 [sp + 0x88] = a4\n101179: u64 [sp + 0x70] = a2\n101182: u64 [sp + 0x90] = a1\n101186: u64 [sp + 0x78] = a3\n101189: a0 = sp + 0xa0\n101193: a1 = sp + 0x80\n101197: a2 = sp + 0x60\n101200: u64 [sp + 0x98] = t0\n101204: ra = 1154, jump @1300\n      : @1336 [@dyn 577] (gas: 6)\n101210: sp = s0 + 0xffffffffffffff20\n101214: ra = u64 [sp + 0xd8]\n101218: s0 = u64 [sp + 0xd0]\n101222: s1 = u64 [sp + 0xc8]\n101226: sp = sp + 0xe0\n101230: ret\n      : @1337 (gas: 3)\n101232: a0 = 0x40\n101235: a1 = 0x20\n101238: ra = 1156, jump @0\n      : @1338 [@dyn 578] (gas: 103)\n101245: a1 = u8 [a0 + 0x11]\n101248: a2 = u8 [a0 + 0x10]\n101251: a3 = u8 [a0 + 0x12]\n101254: a4 = u8 [a0 + 0x13]\n101257: a1 = a1 << 0x8\n101260: a1 = a1 | a2\n101263: a3 = a3 << 0x10\n101266: a4 = a4 << 0x18\n101269: a3 = a3 | a4\n101272: a1 = a1 | a3\n101275: a2 = u8 [a0 + 0x15]\n101278: a3 = u8 [a0 + 0x14]\n101281: a4 = u8 [a0 + 0x16]\n101284: a5 = u8 [a0 + 0x17]\n101287: a2 = a2 << 0x8\n101290: a2 = a2 | a3\n101293: a4 = a4 << 0x10\n101296: a5 = a5 << 0x18\n101299: a4 = a4 | a5\n101302: a2 = a2 | a4\n101305: a2 = a2 << 0x20\n101308: t0 = a2 | a1\n101311: a2 = u8 [a0 + 0x1]\n101314: a3 = u8 [a0]\n101316: a4 = u8 [a0 + 0x2]\n101319: a5 = u8 [a0 + 0x3]\n101322: a2 = a2 << 0x8\n101325: a2 = a2 | a3\n101328: a4 = a4 << 0x10\n101331: a5 = a5 << 0x18\n101334: a4 = a4 | a5\n101337: a2 = a2 | a4\n101340: a3 = u8 [a0 + 0x5]\n101343: a4 = u8 [a0 + 0x4]\n101346: a5 = u8 [a0 + 0x6]\n101349: s1 = u8 [a0 + 0x7]\n101352: a3 = a3 << 0x8\n101355: a3 = a3 | a4\n101358: a5 = a5 << 0x10\n101361: s1 = s1 << 0x18\n101364: a5 = a5 | s1\n101367: a3 = a3 | a5\n101370: a3 = a3 << 0x20\n101373: a2 = a2 | a3\n101376: a3 = u8 [a0 + 0x19]\n101379: a4 = u8 [a0 + 0x18]\n101382: a5 = u8 [a0 + 0x1a]\n101385: s1 = u8 [a0 + 0x1b]\n101388: a3 = a3 << 0x8\n101391: a3 = a3 | a4\n101394: a5 = a5 << 0x10\n101397: s1 = s1 << 0x18\n101400: a5 = a5 | s1\n101403: a3 = a3 | a5\n101406: a4 = u8 [a0 + 0x1d]\n101409: a5 = u8 [a0 + 0x1c]\n101412: s1 = u8 [a0 + 0x1e]\n101415: a1 = u8 [a0 + 0x1f]\n101418: a4 = a4 << 0x8\n101421: a4 = a4 | a5\n101424: s1 = s1 << 0x10\n101427: a1 = a1 << 0x18\n101430: a1 = a1 | s1\n101433: a1 = a1 | a4\n101436: a1 = a1 << 0x20\n101439: a3 = a3 | a1\n101442: a1 = u8 [a0 + 0x9]\n101445: a4 = u8 [a0 + 0x8]\n101448: a5 = u8 [a0 + 0xa]\n101451: s1 = u8 [a0 + 0xb]\n101454: a1 = a1 << 0x8\n101457: a1 = a1 | a4\n101460: a5 = a5 << 0x10\n101463: s1 = s1 << 0x18\n101466: a5 = a5 | s1\n101469: a1 = a1 | a5\n101472: a4 = u8 [a0 + 0xd]\n101475: a5 = u8 [a0 + 0xc]\n101478: s1 = u8 [a0 + 0xe]\n101481: a0 = u8 [a0 + 0xf]\n101484: a4 = a4 << 0x8\n101487: a4 = a4 | a5\n101490: s1 = s1 << 0x10\n101493: a0 = a0 << 0x18\n101496: a0 = a0 | s1\n101499: a0 = a0 | a4\n101502: a0 = a0 << 0x20\n101505: a0 = a0 | a1\n101508: s1 = reverse a0\n101510: a1 = reverse a3\n101512: a2 = reverse a2\n101514: a0 = reverse t0\n101516: u64 [sp + 0x18] = a0\n101519: u64 [sp + 0x10] = a2\n101522: a0 = a0 | a2\n101525: a2 = a1\n101527: a1 = a1 | s1\n101530: a1 = a1 | a0\n101533: a1 = a1 >> 0x20\n101536: a0 = a0 | s1\n101539: a0 = a0 << 0x20\n101542: a0 = a0 | a1\n101545: jump @1342 if a0 != 0\n      : @1339 (gas: 5)\n101549: u64 [sp + 0x8] = a2\n101552: i32 a0 = a2 + 0\n101554: a1 = 0x20\n101557: u64 [sp] = a0\n101559: ra = 1158, jump @0\n      : @1340 [@dyn 579] (gas: 50)\n101566: u8 [a0 + 31] = 0\n101569: u8 [a0 + 30] = 0\n101572: u8 [a0 + 29] = 0\n101575: u8 [a0 + 28] = 0\n101578: u8 [a0 + 27] = 0\n101581: u8 [a0 + 26] = 0\n101584: u8 [a0 + 25] = 0\n101587: u8 [a0 + 24] = 0\n101590: u8 [a0 + 23] = 0\n101593: u8 [a0 + 22] = 0\n101596: u8 [a0 + 21] = 0\n101599: u8 [a0 + 20] = 0\n101602: u8 [a0 + 19] = 0\n101605: u8 [a0 + 18] = 0\n101608: u8 [a0 + 17] = 0\n101611: u8 [a0 + 16] = 0\n101614: u8 [a0 + 15] = 0\n101617: u8 [a0 + 14] = 0\n101620: u8 [a0 + 13] = 0\n101623: u8 [a0 + 12] = 0\n101626: u8 [a0 + 11] = 0\n101629: u8 [a0 + 10] = 0\n101632: u8 [a0 + 9] = 0\n101635: u8 [a0 + 8] = 0\n101638: u8 [a0 + 7] = 0\n101641: u8 [a0 + 6] = 0\n101644: u8 [a0 + 5] = 0\n101647: u8 [a0 + 4] = 0\n101650: u8 [a0 + 3] = 0xa0\n101655: u8 [a0 + 2] = 0x79\n101659: u8 [a0 + 1] = 0xc3\n101664: u8 [a0 + 0] = 0x8\n101667: a1 = u64 [sp + 0x8]\n101670: a0 = a1 + 0x4\n101673: a1 = a0 <u a1\n101676: a3 = u64 [sp + 0x18]\n101679: a2 = a3 + a1\n101682: a3 = a2 <u a3\n101685: a3 = a1 if a1 == 0\n101688: a3 = a3 + s1\n101691: a1 = a3 <u s1\n101694: a4 = u64 [sp + 0x10]\n101697: a4 = a4 + a1\n101700: u64 [sp + 0x28] = a2\n101703: u64 [sp + 0x20] = a0\n101706: u64 [sp + 0x30] = a3\n101709: a0 = sp + 0x40\n101712: a1 = sp + 0x20\n101715: u64 [sp + 0x38] = a4\n101718: ra = 1160, jump @219\n      : @1341 [@dyn 580] (gas: 30)\n101725: a0 = u64 [sp + 0x48]\n101728: t0 = u64 [sp + 0x58]\n101731: t1 = u64 [sp + 0x40]\n101734: a3 = u64 [sp + 0x50]\n101737: a1 = u64 [sp + 0x18]\n101740: a4 = a0 ^ a1\n101743: a5 = a0 <u a1\n101746: t2 = a1\n101748: a2 = u64 [sp + 0x8]\n101751: a1 = t1 <u a2\n101754: a5 = a1 if a4 == 0\n101757: a4 = a3 - s1\n101760: a3 = a3 <u s1\n101763: s1 = u64 [sp + 0x10]\n101766: s1 = t0 - s1\n101769: s1 = s1 - a3\n101772: a3 = a4 <u a5\n101775: s1 = s1 - a3\n101778: a4 = a4 - a5\n101781: a0 = a0 - t2\n101784: a1 = a0 - a1\n101787: a0 = t1 - a2\n101790: a1 = a1 | s1\n101793: a2 = a0 | a4\n101796: a2 = a2 | a1\n101799: a1 = a1 | a4\n101802: a2 = a2 >> 0x20\n101805: a1 = a1 << 0x20\n101808: a1 = a1 | a2\n101811: jump @1343 if a1 == 0\n      : @1342 (gas: 1)\n101814: trap\n      : @1343 (gas: 4)\n101815: i32 s1 = a0 + 0\n101817: a0 = u64 [sp]\n101819: a1 = s1\n101821: ra = 1162, jump @0\n      : @1344 [@dyn 581] (gas: 6)\n101828: i32 a1 = a0 + 0\n101830: a0 = 0x1\n101833: a2 = s1\n101835: ra = 0x48c\n101839: ecalli 14 // 'seal_return'\n101841: fallthrough\n      : @1345 [@dyn 582] (gas: 24)\n101842: sp = sp + 0xffffffffffffffb0\n101845: u64 [sp + 0x48] = ra\n101848: u64 [sp + 0x40] = s0\n101851: s0 = sp + 0x50\n101854: sp = sp & 0xfffffffffffffff0\n101857: t0 = u64 [a0]\n101859: t1 = u64 [a0 + 0x8]\n101862: a4 = u64 [a0 + 0x10]\n101865: a0 = u64 [a0 + 0x18]\n101868: a5 = u64 [a1]\n101870: a2 = u64 [a1 + 0x8]\n101873: a3 = u64 [a1 + 0x10]\n101876: a1 = u64 [a1 + 0x18]\n101879: u64 [sp + 0x18] = a1\n101882: u64 [sp + 0x10] = a3\n101885: u64 [sp + 0x8] = a2\n101888: u64 [sp] = a5\n101890: u64 [sp + 0x38] = a0\n101893: u64 [sp + 0x30] = a4\n101896: u64 [sp + 0x28] = t1\n101899: a0 = sp + 0x20\n101902: a1 = sp\n101904: u64 [sp + 0x20] = t0\n101907: ra = 1166, jump @1284\n      : @1346 [@dyn 583] (gas: 5)\n101913: sp = s0 + 0xffffffffffffffb0\n101916: ra = u64 [sp + 0x48]\n101919: s0 = u64 [sp + 0x40]\n101922: sp = sp + 0x50\n101925: ret\n      : @1347 (gas: 6)\n101927: s1 = 0x20070\n101932: a4 = i32 [sp + 0x110]\n101936: a2 = u64 [sp + 0x100]\n101940: a0 = i32 [0x20070]\n101945: a1 = u64 [sp + 0x108]\n101949: jump @1350 if a0 == 0\n      : @1348 (gas: 9)\n101952: u64 [sp] = a0\n101954: a0 = 0x30080\n101959: i32 a0 = a0 + 0\n101961: u64 [sp + 0x8] = a1\n101964: i32 a1 = s1 + 0\n101966: u64 [sp + 0x18] = a4\n101969: u64 [sp + 0x10] = a2\n101972: ecalli 7 // 'get_immutable_data'\n101974: fallthrough\n      : @1349 (gas: 7)\n101975: a1 = u64 [sp + 0x8]\n101978: a2 = u64 [sp + 0x10]\n101981: a4 = u64 [sp + 0x18]\n101984: a0 = i32 [0x20070]\n101989: u32 [0x20070] = 0\n101994: a3 = u64 [sp]\n101996: jump @1358 if a0 <u a3\n      : @1350 (gas: 19)\n102000: a0 = reverse a1\n102002: a1 = a0 >> 0x20\n102005: a2 = reverse a2\n102007: a3 = a2 << 0x20\n102010: a1 = a1 | a3\n102013: a0 = a0 << 0x20\n102016: a4 = reverse a4\n102018: a4 = a4 >> 0x20\n102021: a0 = a0 | a4\n102024: a4 = u64 [0x300c0]\n102029: a5 = u32 [0x300d0]\n102034: a2 = a2 >> 0x20\n102037: a3 = u64 [0x300c8]\n102042: a0 = a0 ^ a4\n102045: a2 = a2 ^ a5\n102048: a0 = a0 | a2\n102051: a1 = a1 ^ a3\n102054: a0 = a0 | a1\n102057: jump @1353 if a0 != 0\n      : @1351 (gas: 24)\n102060: a0 = u64 [sp + 0x28]\n102063: u64 [sp + 0x60] = a0\n102066: a0 = u64 [sp + 0x20]\n102069: u64 [sp + 0x80] = a0\n102073: u64 [sp + 184] = 0\n102077: u64 [sp + 176] = 0\n102081: u64 [sp + 168] = 0\n102085: u64 [sp + 160] = 0\n102089: a0 = u64 [sp + 0x38]\n102092: u64 [sp + 0x68] = a0\n102095: a0 = u64 [sp + 0x30]\n102098: u64 [sp + 0x88] = a0\n102102: a0 = u64 [sp + 0x48]\n102105: u64 [sp + 0x70] = a0\n102108: a0 = u64 [sp + 0x40]\n102111: u64 [sp + 0x90] = a0\n102115: a0 = u64 [sp + 0x50]\n102118: u64 [sp + 0x78] = a0\n102121: a0 = sp + 0xa0\n102125: a1 = sp + 0x80\n102129: a2 = sp + 0x60\n102132: a3 = u64 [sp + 0x58]\n102135: u64 [sp + 0x98] = a3\n102139: ra = 1168, jump @1300\n      : @1352 [@dyn 584] (gas: 6)\n102145: sp = s0 + 0xfffffffffffffec0\n102149: ra = u64 [sp + 0x138]\n102153: s0 = u64 [sp + 0x130]\n102157: s1 = u64 [sp + 0x128]\n102161: sp = sp + 0x140\n102165: ret\n      : @1353 (gas: 3)\n102167: a0 = 0x40\n102170: a1 = 0x20\n102173: ra = 1170, jump @0\n      : @1354 [@dyn 585] (gas: 103)\n102180: a1 = u8 [a0 + 0x11]\n102183: a2 = u8 [a0 + 0x10]\n102186: a3 = u8 [a0 + 0x12]\n102189: a4 = u8 [a0 + 0x13]\n102192: a1 = a1 << 0x8\n102195: a1 = a1 | a2\n102198: a3 = a3 << 0x10\n102201: a4 = a4 << 0x18\n102204: a3 = a3 | a4\n102207: a1 = a1 | a3\n102210: a2 = u8 [a0 + 0x15]\n102213: a3 = u8 [a0 + 0x14]\n102216: a4 = u8 [a0 + 0x16]\n102219: a5 = u8 [a0 + 0x17]\n102222: a2 = a2 << 0x8\n102225: a2 = a2 | a3\n102228: a4 = a4 << 0x10\n102231: a5 = a5 << 0x18\n102234: a4 = a4 | a5\n102237: a2 = a2 | a4\n102240: a2 = a2 << 0x20\n102243: t0 = a2 | a1\n102246: a2 = u8 [a0 + 0x1]\n102249: a3 = u8 [a0]\n102251: a4 = u8 [a0 + 0x2]\n102254: a5 = u8 [a0 + 0x3]\n102257: a2 = a2 << 0x8\n102260: a2 = a2 | a3\n102263: a4 = a4 << 0x10\n102266: a5 = a5 << 0x18\n102269: a4 = a4 | a5\n102272: a2 = a2 | a4\n102275: a3 = u8 [a0 + 0x5]\n102278: a4 = u8 [a0 + 0x4]\n102281: a5 = u8 [a0 + 0x6]\n102284: s1 = u8 [a0 + 0x7]\n102287: a3 = a3 << 0x8\n102290: a3 = a3 | a4\n102293: a5 = a5 << 0x10\n102296: s1 = s1 << 0x18\n102299: a5 = a5 | s1\n102302: a3 = a3 | a5\n102305: a3 = a3 << 0x20\n102308: a2 = a2 | a3\n102311: a3 = u8 [a0 + 0x19]\n102314: a4 = u8 [a0 + 0x18]\n102317: a5 = u8 [a0 + 0x1a]\n102320: s1 = u8 [a0 + 0x1b]\n102323: a3 = a3 << 0x8\n102326: a3 = a3 | a4\n102329: a5 = a5 << 0x10\n102332: s1 = s1 << 0x18\n102335: a5 = a5 | s1\n102338: a3 = a3 | a5\n102341: a4 = u8 [a0 + 0x1d]\n102344: a5 = u8 [a0 + 0x1c]\n102347: s1 = u8 [a0 + 0x1e]\n102350: a1 = u8 [a0 + 0x1f]\n102353: a4 = a4 << 0x8\n102356: a4 = a4 | a5\n102359: s1 = s1 << 0x10\n102362: a1 = a1 << 0x18\n102365: a1 = a1 | s1\n102368: a1 = a1 | a4\n102371: a1 = a1 << 0x20\n102374: a3 = a3 | a1\n102377: a1 = u8 [a0 + 0x9]\n102380: a4 = u8 [a0 + 0x8]\n102383: a5 = u8 [a0 + 0xa]\n102386: s1 = u8 [a0 + 0xb]\n102389: a1 = a1 << 0x8\n102392: a1 = a1 | a4\n102395: a5 = a5 << 0x10\n102398: s1 = s1 << 0x18\n102401: a5 = a5 | s1\n102404: a1 = a1 | a5\n102407: a4 = u8 [a0 + 0xd]\n102410: a5 = u8 [a0 + 0xc]\n102413: s1 = u8 [a0 + 0xe]\n102416: a0 = u8 [a0 + 0xf]\n102419: a4 = a4 << 0x8\n102422: a4 = a4 | a5\n102425: s1 = s1 << 0x10\n102428: a0 = a0 << 0x18\n102431: a0 = a0 | s1\n102434: a0 = a0 | a4\n102437: a0 = a0 << 0x20\n102440: a0 = a0 | a1\n102443: s1 = reverse a0\n102445: a1 = reverse a3\n102447: a2 = reverse a2\n102449: a0 = reverse t0\n102451: u64 [sp + 0x58] = a0\n102454: u64 [sp + 0x50] = a2\n102457: a0 = a0 | a2\n102460: a2 = a1\n102462: a1 = a1 | s1\n102465: a1 = a1 | a0\n102468: a1 = a1 >> 0x20\n102471: a0 = a0 | s1\n102474: a0 = a0 << 0x20\n102477: a0 = a0 | a1\n102480: jump @1358 if a0 != 0\n      : @1355 (gas: 5)\n102484: u64 [sp + 0x48] = a2\n102487: i32 a0 = a2 + 0\n102489: a1 = 0x20\n102492: u64 [sp + 0x40] = a0\n102495: ra = 1172, jump @0\n      : @1356 [@dyn 586] (gas: 50)\n102502: u8 [a0 + 31] = 0\n102505: u8 [a0 + 30] = 0\n102508: u8 [a0 + 29] = 0\n102511: u8 [a0 + 28] = 0\n102514: u8 [a0 + 27] = 0\n102517: u8 [a0 + 26] = 0\n102520: u8 [a0 + 25] = 0\n102523: u8 [a0 + 24] = 0\n102526: u8 [a0 + 23] = 0\n102529: u8 [a0 + 22] = 0\n102532: u8 [a0 + 21] = 0\n102535: u8 [a0 + 20] = 0\n102538: u8 [a0 + 19] = 0\n102541: u8 [a0 + 18] = 0\n102544: u8 [a0 + 17] = 0\n102547: u8 [a0 + 16] = 0\n102550: u8 [a0 + 15] = 0\n102553: u8 [a0 + 14] = 0\n102556: u8 [a0 + 13] = 0\n102559: u8 [a0 + 12] = 0\n102562: u8 [a0 + 11] = 0\n102565: u8 [a0 + 10] = 0\n102568: u8 [a0 + 9] = 0\n102571: u8 [a0 + 8] = 0\n102574: u8 [a0 + 7] = 0\n102577: u8 [a0 + 6] = 0\n102580: u8 [a0 + 5] = 0\n102583: u8 [a0 + 4] = 0\n102586: u8 [a0 + 3] = 0xa0\n102591: u8 [a0 + 2] = 0x79\n102595: u8 [a0 + 1] = 0xc3\n102600: u8 [a0 + 0] = 0x8\n102603: a1 = u64 [sp + 0x48]\n102606: a0 = a1 + 0x4\n102609: a1 = a0 <u a1\n102612: a3 = u64 [sp + 0x58]\n102615: a2 = a3 + a1\n102618: a3 = a2 <u a3\n102621: a3 = a1 if a1 == 0\n102624: a3 = a3 + s1\n102627: a1 = a3 <u s1\n102630: a4 = u64 [sp + 0x50]\n102633: a4 = a4 + a1\n102636: u64 [sp + 0xc8] = a2\n102640: u64 [sp + 0xc0] = a0\n102644: u64 [sp + 0xd0] = a3\n102648: a0 = sp + 0xe0\n102652: a1 = sp + 0xc0\n102656: u64 [sp + 0xd8] = a4\n102660: ra = 1174, jump @743\n      : @1357 [@dyn 587] (gas: 30)\n102667: a0 = u64 [sp + 0xe8]\n102671: t0 = u64 [sp + 0xf8]\n102675: t1 = u64 [sp + 0xe0]\n102679: a3 = u64 [sp + 0xf0]\n102683: a1 = u64 [sp + 0x58]\n102686: a4 = a0 ^ a1\n102689: a5 = a0 <u a1\n102692: t2 = a1\n102694: a2 = u64 [sp + 0x48]\n102697: a1 = t1 <u a2\n102700: a5 = a1 if a4 == 0\n102703: a4 = a3 - s1\n102706: a3 = a3 <u s1\n102709: s1 = u64 [sp + 0x50]\n102712: s1 = t0 - s1\n102715: s1 = s1 - a3\n102718: a3 = a4 <u a5\n102721: s1 = s1 - a3\n102724: a4 = a4 - a5\n102727: a0 = a0 - t2\n102730: a1 = a0 - a1\n102733: a0 = t1 - a2\n102736: a1 = a1 | s1\n102739: a2 = a0 | a4\n102742: a2 = a2 | a1\n102745: a1 = a1 | a4\n102748: a2 = a2 >> 0x20\n102751: a1 = a1 << 0x20\n102754: a1 = a1 | a2\n102757: jump @1359 if a1 == 0\n      : @1358 (gas: 1)\n102760: trap\n      : @1359 (gas: 4)\n102761: i32 s1 = a0 + 0\n102763: a0 = u64 [sp + 0x40]\n102766: a1 = s1\n102768: ra = 1176, jump @0\n      : @1360 [@dyn 588] (gas: 6)\n102775: i32 a1 = a0 + 0\n102777: a0 = 0x1\n102780: a2 = s1\n102782: ra = 0x49a\n102786: ecalli 14 // 'seal_return'\n102788: fallthrough\n      : @1361 [@dyn 589] (gas: 29)\n102789: sp = sp + 0xffffffffffffff90\n102792: u64 [sp + 0x68] = ra\n102795: u64 [sp + 0x60] = s0\n102798: s0 = sp + 0x70\n102801: sp = sp & 0xfffffffffffffff0\n102804: t0 = u64 [a0]\n102806: t1 = u64 [a0 + 0x8]\n102809: a4 = u64 [a0 + 0x10]\n102812: a0 = u64 [a0 + 0x18]\n102815: a5 = u64 [a1]\n102817: a3 = u64 [a1 + 0x8]\n102820: a2 = u64 [a1 + 0x10]\n102823: a1 = u64 [a1 + 0x18]\n102826: u64 [sp + 88] = 0\n102829: u64 [sp + 80] = 0\n102832: u64 [sp + 72] = 0\n102835: u64 [sp + 64] = 0\n102838: u64 [sp + 0x18] = a1\n102841: u64 [sp + 0x10] = a2\n102844: u64 [sp + 0x8] = a3\n102847: u64 [sp] = a5\n102849: u64 [sp + 0x38] = a0\n102852: u64 [sp + 0x30] = a4\n102855: u64 [sp + 0x28] = t1\n102858: a0 = sp + 0x40\n102861: a1 = sp + 0x20\n102864: a2 = sp\n102866: u64 [sp + 0x20] = t0\n102869: ra = 1180, jump @1300\n      : @1362 [@dyn 590] (gas: 5)\n102875: sp = s0 + 0xffffffffffffff90\n102878: ra = u64 [sp + 0x68]\n102881: s0 = u64 [sp + 0x60]\n102884: sp = sp + 0x70\n102887: ret\n      : @1363 (gas: 42)\n102889: sp = sp + 0xfffffffffffffde0\n102893: u64 [sp + 0x218] = ra\n102897: u64 [sp + 0x210] = s0\n102901: u64 [sp + 0x208] = s1\n102905: s0 = sp + 0x220\n102909: sp = sp & 0xffffffffffffffe0\n102912: s1 = u64 [a2 + 0x8]\n102915: t2 = u64 [a1 + 0x8]\n102918: a5 = u64 [a2]\n102920: ra = u64 [a1]\n102922: t1 = u64 [a2 + 0x10]\n102925: a4 = s1 ^ t2\n102928: a3 = s1 <u t2\n102931: t0 = a5 <u ra\n102934: a3 = t0 if a4 == 0\n102937: u64 [sp + 0x90] = s1\n102941: a4 = s1 - t2\n102944: a4 = a4 - t0\n102947: u64 [sp + 0x88] = a5\n102951: a5 = a5 - ra\n102954: a5 = a5 <u 0x60\n102957: a5 = a5 ^ 0x1\n102960: t0 = u64 [a1 + 0x10]\n102963: s1 = a4 >u 0\n102965: a5 = s1 if a4 != 0\n102968: a4 = u64 [a2 + 0x18]\n102971: s1 = u64 [a1 + 0x18]\n102974: a1 = t1 - t0\n102977: a2 = a1 - a3\n102980: a1 = a1 <u a3\n102983: u64 [sp + 0x80] = t1\n102987: a3 = t1 <u t0\n102990: u64 [sp + 0x78] = a4\n102993: a4 = a4 - s1\n102996: a4 = a4 - a3\n102999: a4 = a4 - a1\n103002: a1 = a4 >s 0\n103004: a3 = a2 >u 0\n103006: a3 = a1 if a4 != 0\n103009: a2 = a2 | a4\n103012: a5 = a3 if a2 != 0\n103015: jump @1381 if a5 == 0\n      : @1364 (gas: 10)\n103019: a2 = ra | t0\n103022: u64 [sp + 0x98] = t2\n103026: a1 = t2 | s1\n103029: a2 = a2 | a1\n103032: a2 = a2 >> 0x20\n103035: u64 [sp + 0x70] = t0\n103038: a1 = a1 | t0\n103041: a1 = a1 << 0x20\n103044: a1 = a1 | a2\n103047: jump @1380 if a1 != 0\n      : @1365 (gas: 8)\n103051: u64 [sp + 0x68] = s1\n103054: u64 [sp + 0x38] = a0\n103057: i32 a1 = ra + 0\n103059: i32 a0 = sp + 0x1a0\n103063: u64 [sp + 0x58] = a1\n103066: s1 = ra\n103068: ecalli 3 // 'call_data_load'\n103070: fallthrough\n      : @1366 (gas: 7)\n103071: a0 = u64 [sp + 0x1b8]\n103075: a1 = u64 [sp + 0x1b0]\n103079: a2 = u64 [sp + 0x1a8]\n103083: a3 = a1 | a0\n103086: a4 = a2 <u 0x1\n103089: a4 = 0 if a3 != 0\n103091: jump @1381 if a4 == 0\n      : @1367 (gas: 43)\n103095: a3 = u64 [sp + 0x1a0]\n103099: t0 = a3 + s1\n103102: a3 = t0 <u a3\n103105: a4 = u64 [sp + 0x98]\n103109: a4 = a4 + a2\n103112: t1 = a4 + a3\n103115: a4 = t1 ^ a2\n103118: u64 [sp + 0x60] = s1\n103121: s1 = t1 <u a2\n103124: s1 = a3 if a4 == 0\n103127: a2 = u64 [sp + 0x70]\n103130: a2 = a2 + a1\n103133: s1 = s1 + a2\n103136: a3 = s1 <u a2\n103139: a1 = a2 <u a1\n103142: a2 = u64 [sp + 0x68]\n103145: a0 = a0 + a2\n103148: a0 = a0 + a1\n103151: ra = a0 + a3\n103154: a0 = t0 + 0x1f\n103157: a1 = a0 <u t0\n103160: a2 = t1 + a1\n103163: a3 = a2 <u t1\n103166: a3 = a1 if a1 == 0\n103169: t2 = s1 + a3\n103172: a1 = t2 <u s1\n103175: a1 = a1 + ra\n103178: a5 = u64 [sp + 0x90]\n103182: a4 = a2 ^ a5\n103185: a2 = a2 <u a5\n103188: a5 = u64 [sp + 0x88]\n103192: a0 = a0 <u a5\n103195: a0 = a2 if a4 != 0\n103198: a5 = u64 [sp + 0x80]\n103202: a2 = t2 <u a5\n103205: a4 = u64 [sp + 0x78]\n103208: a3 = a1 ^ a4\n103211: a1 = a1 <s a4\n103214: a1 = a2 if a3 == 0\n103217: a2 = t2 ^ a5\n103220: a2 = a2 | a3\n103223: a0 = a1 if a2 != 0\n103226: jump @1382 if a0 == 0\n      : @1368 (gas: 11)\n103230: a0 = t0 | s1\n103233: u64 [sp + 0x50] = t1\n103236: u64 [sp + 0x40] = ra\n103239: a1 = t1 | ra\n103242: a0 = a0 | a1\n103245: a0 = a0 >> 0x20\n103248: u64 [sp + 0x48] = s1\n103251: a1 = a1 | s1\n103254: a1 = a1 << 0x20\n103257: a0 = a0 | a1\n103260: jump @1380 if a0 != 0\n      : @1369 (gas: 40)\n103264: i32 a1 = t0 + 0\n103266: i32 a0 = sp + 0x1e0\n103270: s1 = t0\n103272: ecalli 3 // 'call_data_load'\n103274: t0 = u64 [sp + 0x1e0]\n103278: t1 = u64 [sp + 0x1e8]\n103282: a2 = u64 [sp + 0x1f0]\n103286: a3 = u64 [sp + 0x1f8]\n103290: a4 = s1 + 0x20\n103293: a5 = a4 <u s1\n103296: a1 = u64 [sp + 0x50]\n103299: a0 = a1 + a5\n103302: a1 = a0 <u a1\n103305: a1 = a5 if a5 == 0\n103308: a5 = u64 [sp + 0x48]\n103311: a1 = a1 + a5\n103314: a5 = a1 <u a5\n103317: s1 = u64 [sp + 0x40]\n103320: a5 = a5 + s1\n103323: s1 = u64 [sp + 0x78]\n103326: u64 [sp + 0x138] = s1\n103330: s1 = u64 [sp + 0x80]\n103334: u64 [sp + 0x130] = s1\n103338: s1 = u64 [sp + 0x90]\n103342: u64 [sp + 0x128] = s1\n103346: s1 = u64 [sp + 0x88]\n103350: u64 [sp + 0x120] = s1\n103354: u64 [sp + 0x158] = a3\n103358: u64 [sp + 0x150] = a2\n103362: u64 [sp + 0x148] = t1\n103366: u64 [sp + 0x140] = t0\n103370: u64 [sp + 0x168] = a0\n103374: u64 [sp + 0x160] = a4\n103378: u64 [sp + 0x170] = a1\n103382: a0 = sp + 0x180\n103386: a1 = sp + 0x160\n103390: a2 = sp + 0x140\n103394: a3 = sp + 0x120\n103398: u64 [sp + 0x178] = a5\n103402: ra = 1182, jump @1054\n      : @1370 [@dyn 591] (gas: 10)\n103408: a0 = u64 [sp + 0x70]\n103411: s1 = u64 [sp + 0x68]\n103414: s1 = s1 | a0\n103417: a0 = 0xffffffe0\n103427: a1 = u64 [sp + 0x60]\n103430: a0 = a1 <u a0\n103433: a1 = u64 [sp + 0x98]\n103437: a0 = 0 if a1 != 0\n103439: a0 = 0 if s1 != 0\n103441: jump @1380 if a0 == 0\n      : @1371 (gas: 13)\n103445: a0 = u64 [sp + 0x198]\n103449: u64 [sp + 0x30] = a0\n103452: a0 = u64 [sp + 0x190]\n103456: u64 [sp + 0x40] = a0\n103459: a0 = u64 [sp + 0x188]\n103463: u64 [sp + 0x48] = a0\n103466: a0 = u64 [sp + 0x180]\n103470: u64 [sp + 0x50] = a0\n103473: a0 = u64 [sp + 0x58]\n103476: i32 a1 = a0 + 0x20\n103479: i32 a0 = sp + 0x1e0\n103483: ecalli 3 // 'call_data_load'\n103485: fallthrough\n      : @1372 (gas: 7)\n103486: a4 = u64 [sp + 0x1f8]\n103490: a3 = u64 [sp + 0x1f0]\n103494: a2 = u64 [sp + 0x1e8]\n103498: a0 = a3 | a4\n103501: a1 = a2 <u 0x1\n103504: a1 = 0 if a0 != 0\n103506: jump @1384 if a1 == 0\n      : @1373 (gas: 10)\n103510: u64 [sp + 0x18] = a4\n103513: u64 [sp + 0x20] = a3\n103516: u64 [sp + 0x28] = a2\n103519: a0 = 0xffffffc0\n103529: a1 = u64 [sp + 0x60]\n103532: a0 = a1 <u a0\n103535: a1 = u64 [sp + 0x98]\n103539: a0 = 0 if a1 != 0\n103541: a0 = 0 if s1 != 0\n103543: jump @1380 if a0 == 0\n      : @1374 (gas: 7)\n103547: a0 = u64 [sp + 0x1e0]\n103551: u64 [sp + 0x10] = a0\n103554: a0 = u64 [sp + 0x58]\n103557: i32 a1 = a0 + 0x40\n103560: i32 a0 = sp + 0x1c0\n103564: ecalli 3 // 'call_data_load'\n103566: fallthrough\n      : @1375 (gas: 7)\n103567: a0 = u64 [sp + 0x1d8]\n103571: a1 = u64 [sp + 0x1d0]\n103575: a2 = u64 [sp + 0x1c8]\n103579: a3 = a1 | a0\n103582: a4 = a2 <u 0x1\n103585: a4 = 0 if a3 != 0\n103587: jump @1381 if a4 == 0\n      : @1376 (gas: 43)\n103591: a3 = u64 [sp + 0x1c0]\n103595: a4 = u64 [sp + 0x60]\n103598: t0 = a3 + a4\n103601: a3 = t0 <u a3\n103604: a4 = u64 [sp + 0x98]\n103608: a4 = a4 + a2\n103611: t1 = a4 + a3\n103614: a4 = t1 ^ a2\n103617: s1 = t1 <u a2\n103620: s1 = a3 if a4 == 0\n103623: a2 = u64 [sp + 0x70]\n103626: a2 = a2 + a1\n103629: s1 = s1 + a2\n103632: a3 = s1 <u a2\n103635: a1 = a2 <u a1\n103638: a2 = u64 [sp + 0x68]\n103641: a0 = a0 + a2\n103644: a0 = a0 + a1\n103647: ra = a0 + a3\n103650: a0 = t0 + 0x1f\n103653: a1 = a0 <u t0\n103656: a2 = t1 + a1\n103659: a3 = a2 <u t1\n103662: a3 = a1 if a1 == 0\n103665: t2 = s1 + a3\n103668: a1 = t2 <u s1\n103671: a1 = a1 + ra\n103674: a5 = u64 [sp + 0x90]\n103678: a4 = a2 ^ a5\n103681: a2 = a2 <u a5\n103684: a5 = u64 [sp + 0x88]\n103688: a0 = a0 <u a5\n103691: a0 = a2 if a4 != 0\n103694: a5 = u64 [sp + 0x80]\n103698: a2 = t2 <u a5\n103701: a4 = u64 [sp + 0x78]\n103704: a3 = a1 ^ a4\n103707: a1 = a1 <u a4\n103710: a1 = a2 if a3 == 0\n103713: a2 = t2 ^ a5\n103716: a2 = a2 | a3\n103719: a0 = a1 if a2 != 0\n103722: jump @1382 if a0 == 0\n      : @1377 (gas: 11)\n103726: a0 = t0 | s1\n103729: u64 [sp + 0x98] = t1\n103733: u64 [sp + 0x68] = ra\n103736: a1 = t1 | ra\n103739: a0 = a0 | a1\n103742: a0 = a0 >> 0x20\n103745: u64 [sp + 0x70] = s1\n103748: a1 = a1 | s1\n103751: a1 = a1 << 0x20\n103754: a0 = a0 | a1\n103757: jump @1380 if a0 != 0\n      : @1378 (gas: 40)\n103761: i32 a1 = t0 + 0\n103763: i32 a0 = sp + 0x1e0\n103767: s1 = t0\n103769: ecalli 3 // 'call_data_load'\n103771: t0 = u64 [sp + 0x1e0]\n103775: t1 = u64 [sp + 0x1e8]\n103779: a2 = u64 [sp + 0x1f0]\n103783: a3 = u64 [sp + 0x1f8]\n103787: a4 = s1 + 0x20\n103790: a5 = a4 <u s1\n103793: a1 = u64 [sp + 0x98]\n103797: a0 = a1 + a5\n103800: a1 = a0 <u a1\n103803: a1 = a5 if a5 == 0\n103806: a5 = u64 [sp + 0x70]\n103809: a1 = a1 + a5\n103812: a5 = a1 <u a5\n103815: s1 = u64 [sp + 0x68]\n103818: a5 = a5 + s1\n103821: s1 = u64 [sp + 0x78]\n103824: u64 [sp + 0xb8] = s1\n103828: s1 = u64 [sp + 0x80]\n103832: u64 [sp + 0xb0] = s1\n103836: s1 = u64 [sp + 0x90]\n103840: u64 [sp + 0xa8] = s1\n103844: s1 = u64 [sp + 0x88]\n103848: u64 [sp + 0xa0] = s1\n103852: u64 [sp + 0xd8] = a3\n103856: u64 [sp + 0xd0] = a2\n103860: u64 [sp + 0xc8] = t1\n103864: u64 [sp + 0xc0] = t0\n103868: u64 [sp + 0xe8] = a0\n103872: u64 [sp + 0xe0] = a4\n103876: u64 [sp + 0xf0] = a1\n103880: a0 = sp + 0x100\n103884: a1 = sp + 0xe0\n103888: a2 = sp + 0xc0\n103892: a3 = sp + 0xa0\n103896: u64 [sp + 0xf8] = a5\n103900: ra = 1184, jump @1054\n      : @1379 [@dyn 592] (gas: 31)\n103906: a0 = u64 [sp + 0x118]\n103910: a1 = u64 [sp + 0x110]\n103914: a2 = u64 [sp + 0x108]\n103918: a3 = u64 [sp + 0x100]\n103922: a4 = u64 [sp + 0x38]\n103925: u64 [a4 + 0x58] = a0\n103928: u64 [a4 + 0x50] = a1\n103931: u64 [a4 + 0x48] = a2\n103934: u64 [a4 + 0x40] = a3\n103937: a0 = u64 [sp + 0x18]\n103940: u64 [a4 + 0x38] = a0\n103943: a0 = u64 [sp + 0x20]\n103946: u64 [a4 + 0x30] = a0\n103949: a0 = u64 [sp + 0x28]\n103952: u64 [a4 + 0x28] = a0\n103955: a0 = u64 [sp + 0x10]\n103958: u64 [a4 + 0x20] = a0\n103961: a0 = u64 [sp + 0x30]\n103964: u64 [a4 + 0x18] = a0\n103967: a0 = u64 [sp + 0x40]\n103970: u64 [a4 + 0x10] = a0\n103973: a0 = u64 [sp + 0x48]\n103976: u64 [a4 + 0x8] = a0\n103979: a0 = u64 [sp + 0x50]\n103982: u64 [a4] = a0\n103984: sp = s0 + 0xfffffffffffffde0\n103988: ra = u64 [sp + 0x218]\n103992: s0 = u64 [sp + 0x210]\n103996: s1 = u64 [sp + 0x208]\n104000: sp = sp + 0x220\n104004: ret\n      : @1380 (gas: 1)\n104006: trap\n      : @1381 (gas: 4)\n104007: a0 = 0\n104009: a1 = 0\n104011: ra = 0x4a2\n104015: jump @0\n      : @1382 (gas: 2)\n104019: a1 = 0\n104021: ra = 1186, jump @0\n      : @1383 [@dyn 593] (gas: 7)\n104028: i32 a1 = a0 + 0\n104030: a0 = 0x1\n104033: a2 = 0\n104035: ecalli 14 // 'seal_return'\n104037: a0 = 0\n104039: ra = 0x4a2\n104043: jump @0\n      : @1384 (gas: 3)\n104047: a0 = 0\n104049: ra = 0x4a2\n104053: jump @0\n      : @1385 (gas: 17)\n104057: sp = sp + 0xffffffffffffffa0\n104060: u64 [sp + 0x58] = ra\n104063: u64 [sp + 0x50] = s0\n104066: u64 [sp + 0x48] = s1\n104069: a3 = u64 [a1 + 0x18]\n104072: a4 = u64 [a1 + 0x10]\n104075: a5 = u64 [a1 + 0x8]\n104078: s1 = u64 [a1]\n104080: a1 = a5 | a3\n104083: a2 = s1 | a4\n104086: a2 = a2 | a1\n104089: a2 = a2 >> 0x20\n104092: a1 = a1 | a4\n104095: a1 = a1 << 0x20\n104098: a1 = a1 | a2\n104101: u64 [sp + 0x20] = a0\n104104: jump @1394 if a1 != 0\n      : @1386 (gas: 19)\n104108: a0 = s1 + 0x20\n104111: u64 [sp + 0x40] = a0\n104114: a0 = a0 <u s1\n104117: a1 = a5 + a0\n104120: u64 [sp + 0x38] = a1\n104123: u64 [sp + 0x8] = a5\n104126: s0 = a1 <u a5\n104129: s0 = a0 if a0 == 0\n104132: s0 = s0 + a4\n104135: u64 [sp + 0x10] = a4\n104138: a0 = s0 <u a4\n104141: u64 [sp + 0x18] = a3\n104144: a0 = a0 + a3\n104147: u64 [sp + 0x30] = a0\n104150: u64 [sp] = s1\n104152: i32 a0 = s1 + 0\n104154: a1 = 0x20\n104157: s1 = 0x20\n104160: ra = 1188, jump @0\n      : @1387 [@dyn 594] (gas: 43)\n104167: u8 [a0 + 0x1f] = s1\n104170: a1 = u64 [sp + 0x40]\n104173: a1 = a1 | s0\n104176: a2 = u64 [sp + 0x38]\n104179: a3 = u64 [sp + 0x30]\n104182: a2 = a2 | a3\n104185: a1 = a1 | a2\n104188: a1 = a1 >> 0x20\n104191: a2 = a2 | s0\n104194: a2 = a2 << 0x20\n104197: a1 = a1 | a2\n104200: u8 [a0 + 30] = 0\n104203: u8 [a0 + 29] = 0\n104206: u8 [a0 + 28] = 0\n104209: u8 [a0 + 27] = 0\n104212: u8 [a0 + 26] = 0\n104215: u8 [a0 + 25] = 0\n104218: u8 [a0 + 24] = 0\n104221: u8 [a0 + 23] = 0\n104224: u8 [a0 + 22] = 0\n104227: u8 [a0 + 21] = 0\n104230: u8 [a0 + 20] = 0\n104233: u8 [a0 + 19] = 0\n104236: u8 [a0 + 18] = 0\n104239: u8 [a0 + 17] = 0\n104242: u8 [a0 + 16] = 0\n104245: u8 [a0 + 15] = 0\n104248: u8 [a0 + 14] = 0\n104251: u8 [a0 + 13] = 0\n104254: u8 [a0 + 12] = 0\n104257: u8 [a0 + 11] = 0\n104260: u8 [a0 + 10] = 0\n104263: u8 [a0 + 9] = 0\n104266: u8 [a0 + 8] = 0\n104269: u8 [a0 + 7] = 0\n104272: u8 [a0 + 6] = 0\n104275: u8 [a0 + 5] = 0\n104278: u8 [a0 + 4] = 0\n104281: u8 [a0 + 3] = 0\n104284: u8 [a0 + 2] = 0\n104287: u8 [a0 + 1] = 0\n104290: u8 [a0 + 0] = 0\n104292: jump @1394 if a1 != 0\n      : @1388 (gas: 6)\n104296: s1 = s0\n104298: s0 = u64 [sp + 0x40]\n104301: i32 a0 = s0 + 0\n104303: a1 = 0x20\n104306: u64 [sp + 0x28] = a0\n104309: ra = 1190, jump @0\n      : @1389 [@dyn 595] (gas: 42)\n104316: u8 [a0 + 31] = 0x24\n104320: u8 [a0 + 30] = 0\n104323: u8 [a0 + 29] = 0\n104326: u8 [a0 + 28] = 0\n104329: u8 [a0 + 27] = 0\n104332: u8 [a0 + 26] = 0\n104335: u8 [a0 + 25] = 0\n104338: u8 [a0 + 24] = 0\n104341: u8 [a0 + 23] = 0\n104344: u8 [a0 + 22] = 0\n104347: u8 [a0 + 21] = 0\n104350: u8 [a0 + 20] = 0\n104353: u8 [a0 + 19] = 0\n104356: u8 [a0 + 18] = 0\n104359: u8 [a0 + 17] = 0\n104362: u8 [a0 + 16] = 0\n104365: u8 [a0 + 15] = 0\n104368: u8 [a0 + 14] = 0\n104371: u8 [a0 + 13] = 0\n104374: u8 [a0 + 12] = 0\n104377: u8 [a0 + 11] = 0\n104380: u8 [a0 + 10] = 0\n104383: u8 [a0 + 9] = 0\n104386: u8 [a0 + 8] = 0\n104389: u8 [a0 + 7] = 0\n104392: u8 [a0 + 6] = 0\n104395: u8 [a0 + 5] = 0\n104398: u8 [a0 + 4] = 0\n104401: u8 [a0 + 3] = 0\n104404: u8 [a0 + 2] = 0\n104407: u8 [a0 + 1] = 0\n104410: a1 = u64 [sp + 0x30]\n104413: a2 = s1 | a1\n104416: s1 = 0x100000000\n104426: a1 = 0xffffffe0\n104436: a1 = s0 <u a1\n104439: s0 = u64 [sp + 0x38]\n104442: a1 = 0 if s0 != 0\n104444: u64 [sp + 0x30] = a2\n104447: a1 = 0 if a2 != 0\n104449: u8 [a0 + 0] = 0\n104451: jump @1394 if a1 == 0\n      : @1390 (gas: 4)\n104455: a0 = u64 [sp + 0x28]\n104458: i32 a0 = a0 + 0x20\n104461: a1 = 0x20\n104464: ra = 1192, jump @0\n      : @1391 [@dyn 596] (gas: 41)\n104471: u8 [a0 + 31] = 0x70\n104475: u8 [a0 + 30] = 0x78\n104479: u8 [a0 + 28] = 0x20\n104483: u8 [a0 + 18] = 0x20\n104487: u8 [a0 + 17] = 0x3a\n104491: u8 [a0 + 13] = 0x66\n104495: u8 [a0 + 9] = 0x56\n104499: u8 [a0 + 25] = 0x75\n104503: u8 [a0 + 6] = 0x75\n104507: u8 [a0 + 24] = 0x74\n104511: u8 [a0 + 5] = 0x74\n104515: u8 [a0 + 23] = 0x61\n104519: u8 [a0 + 4] = 0x61\n104523: u8 [a0 + 22] = 0x6e\n104527: u8 [a0 + 3] = 0x6e\n104531: u8 [a0 + 21] = 0x67\n104535: u8 [a0 + 2] = 0x67\n104539: u8 [a0 + 19] = 0x53\n104543: u8 [a0 + 0] = 0x53\n104546: a1 = s1 + 0xffffffffffffffc0\n104549: a2 = u64 [sp + 0x40]\n104552: a1 = a2 <u a1\n104555: s1 = 0x65\n104558: u8 [a0 + 0x1d] = s1\n104561: u8 [a0 + 0x1b] = s1\n104564: a1 = 0 if s0 != 0\n104566: u8 [a0 + 26] = 0x72\n104570: a2 = u64 [sp + 0x30]\n104573: a1 = 0 if a2 != 0\n104575: s0 = 0x69\n104578: u8 [a0 + 0x14] = s0\n104581: u8 [a0 + 16] = 0x72\n104585: u8 [a0 + 0xf] = s1\n104588: u8 [a0 + 0xe] = s0\n104591: u8 [a0 + 0xc] = s0\n104594: u8 [a0 + 11] = 0x72\n104598: u8 [a0 + 0xa] = s1\n104601: u8 [a0 + 0x8] = s1\n104604: u8 [a0 + 7] = 0x72\n104608: u8 [a0 + 0x1] = s0\n104611: jump @1394 if a1 == 0\n      : @1392 (gas: 4)\n104615: a0 = u64 [sp + 0x28]\n104618: i32 a0 = a0 + 0x40\n104621: a1 = 0x20\n104624: ra = 1194, jump @0\n      : @1393 [@dyn 597] (gas: 54)\n104631: u8 [a0 + 31] = 0\n104634: u8 [a0 + 30] = 0\n104637: u8 [a0 + 29] = 0\n104640: u8 [a0 + 28] = 0\n104643: u8 [a0 + 27] = 0\n104646: u8 [a0 + 26] = 0\n104649: u8 [a0 + 25] = 0\n104652: u8 [a0 + 24] = 0\n104655: u8 [a0 + 23] = 0\n104658: u8 [a0 + 22] = 0\n104661: u8 [a0 + 21] = 0\n104664: u8 [a0 + 20] = 0\n104667: u8 [a0 + 19] = 0\n104670: u8 [a0 + 18] = 0\n104673: u8 [a0 + 17] = 0\n104676: u8 [a0 + 16] = 0\n104679: u8 [a0 + 15] = 0\n104682: u8 [a0 + 14] = 0\n104685: u8 [a0 + 13] = 0\n104688: u8 [a0 + 12] = 0\n104691: u8 [a0 + 11] = 0\n104694: u8 [a0 + 10] = 0\n104697: u8 [a0 + 9] = 0\n104700: u8 [a0 + 8] = 0\n104703: u8 [a0 + 7] = 0\n104706: u8 [a0 + 6] = 0\n104709: u8 [a0 + 5] = 0\n104712: u8 [a0 + 4] = 0\n104715: u8 [a0 + 3] = 0x64\n104719: u8 [a0 + 0x2] = s1\n104722: u8 [a0 + 1] = 0x72\n104726: u8 [a0] = s0\n104728: a1 = u64 [sp]\n104730: a0 = a1 + 0x80\n104734: a1 = a0 <u a1\n104737: a3 = u64 [sp + 0x8]\n104740: a2 = a3 + a1\n104743: a3 = a2 <u a3\n104746: a3 = a1 if a1 == 0\n104749: a1 = u64 [sp + 0x10]\n104752: a3 = a3 + a1\n104755: a1 = a3 <u a1\n104758: a4 = u64 [sp + 0x18]\n104761: a1 = a1 + a4\n104764: a4 = u64 [sp + 0x20]\n104767: u64 [a4] = a0\n104769: u64 [a4 + 0x8] = a2\n104772: u64 [a4 + 0x10] = a3\n104775: u64 [a4 + 0x18] = a1\n104778: ra = u64 [sp + 0x58]\n104781: s0 = u64 [sp + 0x50]\n104784: s1 = u64 [sp + 0x48]\n104787: sp = sp + 0x60\n104790: ret\n      : @1394 (gas: 1)\n104792: trap\n      : @1395 [@dyn 598] (gas: 67)\n104793: a0 = u64 [sp + 0x380]\n104797: u64 [sp + 0x98] = a0\n104801: a0 = u64 [sp + 0x388]\n104805: u64 [sp + 0x90] = a0\n104809: a0 = u64 [sp + 0x390]\n104813: u64 [sp + 0x88] = a0\n104817: a0 = u64 [sp + 0x398]\n104821: u64 [sp + 0x80] = a0\n104825: a0 = u64 [sp + 0x360]\n104829: u64 [sp + 0xb8] = a0\n104833: a0 = u64 [sp + 0x368]\n104837: u64 [sp + 0x58] = a0\n104840: a0 = u64 [sp + 0x370]\n104844: u64 [sp + 0x48] = a0\n104847: a0 = u64 [sp + 0x378]\n104851: u64 [sp + 0x38] = a0\n104854: a0 = u64 [sp + 0x340]\n104858: u64 [sp + 0xa0] = a0\n104862: a0 = u64 [sp + 0x348]\n104866: u64 [sp + 0xa8] = a0\n104870: a0 = u64 [sp + 0x350]\n104874: u64 [sp + 0xb0] = a0\n104878: s1 = u64 [sp + 0x358]\n104882: i32 a0 = sp + 0x3a0\n104886: ecalli 0 // 'address'\n104887: a0 = u64 [sp + 0x3a8]\n104891: a1 = i32 [sp + 0x3b0]\n104895: a2 = u64 [sp + 0x3a0]\n104899: a0 = reverse a0\n104901: a3 = a0 << 0x20\n104904: a1 = reverse a1\n104906: a1 = a1 >> 0x20\n104909: a1 = a1 | a3\n104912: u64 [sp + 0x20] = a1\n104915: a0 = a0 >> 0x20\n104918: a1 = reverse a2\n104920: a2 = u32 [0x20078]\n104925: a3 = a1 << 0x20\n104928: a0 = a0 | a3\n104931: u64 [sp + 0x18] = a0\n104934: a1 = a1 >> 0x20\n104937: u64 [sp + 0x10] = a1\n104940: u64 [sp + 664] = 0\n104944: u64 [sp + 656] = 0\n104948: u64 [sp + 648] = 0\n104952: u64 [sp + 0x280] = a2\n104956: a0 = u64 [sp + 0x28]\n104959: u64 [sp + 0x2b8] = a0\n104963: a0 = u64 [sp + 0x30]\n104966: u64 [sp + 0x2b0] = a0\n104970: a0 = u64 [sp + 0x40]\n104973: u64 [sp + 0x2a8] = a0\n104977: a0 = u64 [sp + 0x50]\n104980: u64 [sp + 0x2a0] = a0\n104984: a0 = u64 [sp + 0x60]\n104987: u64 [sp + 0x2d8] = a0\n104991: a0 = u64 [sp + 0x68]\n104994: u64 [sp + 0x2d0] = a0\n104998: a0 = u64 [sp + 0x70]\n105001: u64 [sp + 0x2c8] = a0\n105005: a0 = sp + 0x2e0\n105009: a1 = sp + 0x2c0\n105013: a2 = sp + 0x2a0\n105017: a3 = sp + 0x280\n105021: a4 = u64 [sp + 0x78]\n105024: u64 [sp + 0x2c0] = a4\n105028: ra = 1198, jump @1054\n      : @1396 [@dyn 599] (gas: 37)\n105034: a0 = u64 [sp + 0x2e0]\n105038: a1 = u64 [sp + 0x2e8]\n105042: a2 = u64 [sp + 0x2f0]\n105046: a3 = u64 [sp + 0x2f8]\n105050: u64 [sp + 0x78] = s1\n105053: u64 [sp + 0x1f8] = s1\n105057: a4 = u64 [sp + 0xb0]\n105061: u64 [sp + 0x1f0] = a4\n105065: a4 = u64 [sp + 0xa8]\n105069: u64 [sp + 0x1e8] = a4\n105073: a4 = u64 [sp + 0xa0]\n105077: u64 [sp + 0x1e0] = a4\n105081: u64 [sp + 0x218] = a3\n105085: u64 [sp + 0x210] = a2\n105089: u64 [sp + 0x208] = a1\n105093: u64 [sp + 0x200] = a0\n105097: a0 = u64 [sp + 0x38]\n105100: u64 [sp + 0x238] = a0\n105104: a0 = u64 [sp + 0x48]\n105107: u64 [sp + 0x230] = a0\n105111: a0 = u64 [sp + 0x58]\n105114: u64 [sp + 0x228] = a0\n105118: a0 = u64 [sp + 0xb8]\n105122: u64 [sp + 0x220] = a0\n105126: a0 = u64 [sp + 0x10]\n105129: u64 [sp + 0x250] = a0\n105133: a0 = u64 [sp + 0x18]\n105136: u64 [sp + 0x248] = a0\n105140: a0 = u64 [sp + 0x20]\n105143: u64 [sp + 0x240] = a0\n105147: a0 = sp + 0x260\n105151: a1 = sp + 0x240\n105155: a2 = sp + 0x220\n105159: a3 = sp + 0x200\n105163: a4 = sp + 0x1e0\n105167: u64 [sp + 600] = 0\n105171: ra = 1200, jump @1492\n      : @1397 [@dyn 600] (gas: 20)\n105177: a3 = u64 [sp + 0x260]\n105181: a0 = u64 [sp + 0x268]\n105185: a1 = u64 [sp + 0x270]\n105189: a2 = u64 [sp + 0x278]\n105193: a4 = u64 [sp + 0x80]\n105197: u64 [sp + 0x158] = a4\n105201: a4 = u64 [sp + 0x88]\n105205: u64 [sp + 0x150] = a4\n105209: a4 = u64 [sp + 0x90]\n105213: u64 [sp + 0x148] = a4\n105217: a4 = u64 [sp + 0x98]\n105221: u64 [sp + 0x140] = a4\n105225: u64 [sp + 0x178] = a2\n105229: u64 [sp + 0x170] = a1\n105233: u64 [sp + 0x168] = a0\n105237: a0 = sp + 0x180\n105241: a1 = sp + 0x160\n105245: a2 = sp + 0x140\n105249: u64 [sp + 0x160] = a3\n105253: ra = 1202, jump @1521\n      : @1398 [@dyn 601] (gas: 27)\n105259: t1 = u64 [sp + 0x1d8]\n105263: a1 = u64 [sp + 0x1d0]\n105267: a2 = u64 [sp + 0x1c8]\n105271: a3 = u64 [sp + 0x1c0]\n105275: a4 = u64 [sp + 0x1b8]\n105279: a5 = u64 [sp + 0x1b0]\n105283: s1 = u64 [sp + 0x1a8]\n105287: t0 = u64 [sp + 0x1a0]\n105291: a0 = u64 [sp + 0x198]\n105295: u64 [sp + 0x98] = a0\n105299: a0 = u64 [sp + 0x190]\n105303: u64 [sp + 0x90] = a0\n105307: a0 = u64 [sp + 0x188]\n105311: u64 [sp + 0x88] = a0\n105315: a0 = u64 [sp + 0x180]\n105319: u64 [sp + 0x80] = a0\n105323: u64 [sp + 0x118] = t1\n105327: u64 [sp + 0x110] = a1\n105331: u64 [sp + 0x108] = a2\n105335: u64 [sp + 0x100] = a3\n105339: u64 [sp + 0x138] = a4\n105343: u64 [sp + 0x130] = a5\n105347: u64 [sp + 0x128] = s1\n105351: a0 = sp + 0x120\n105355: a1 = sp + 0x100\n105359: u64 [sp + 0x120] = t0\n105363: ra = 1204, jump @1536\n      : @1399 [@dyn 602] (gas: 3)\n105369: i32 a0 = sp + 0x3c0\n105373: ecalli 10 // 'now'\n105375: fallthrough\n      : @1400 (gas: 15)\n105376: a0 = u64 [sp + 0x3d8]\n105380: a1 = u64 [sp + 0x3d0]\n105384: a2 = u64 [sp + 0x3c8]\n105388: a3 = u64 [sp + 0x3c0]\n105392: a4 = a0 <u 0x1\n105395: a5 = a1 <u 0x1\n105398: a5 = a4 if a0 != 0\n105401: a4 = u64 [sp + 0xb8]\n105405: a3 = a4 <u a3\n105408: a3 = a3 ^ 0x1\n105411: a4 = a2 <u 0x1\n105414: a4 = a3 if a2 == 0\n105417: a0 = a0 | a1\n105420: a4 = a5 if a0 != 0\n105423: jump @1402 if a4 == 0\n      : @1401 (gas: 23)\n105426: a0 = u64 [sp + 0x8]\n105429: a1 = u64 [sp + 0xa0]\n105433: u64 [a0 + 0x20] = a1\n105436: a1 = u64 [sp + 0x80]\n105440: u64 [a0] = a1\n105442: a1 = u64 [sp + 0xa8]\n105446: u64 [a0 + 0x28] = a1\n105449: a1 = u64 [sp + 0x88]\n105453: u64 [a0 + 0x8] = a1\n105456: a1 = u64 [sp + 0xb0]\n105460: u64 [a0 + 0x30] = a1\n105463: a1 = u64 [sp + 0x90]\n105467: u64 [a0 + 0x10] = a1\n105470: a1 = u64 [sp + 0x78]\n105473: u64 [a0 + 0x38] = a1\n105476: a1 = u64 [sp + 0x98]\n105480: u64 [a0 + 0x18] = a1\n105483: sp = s0 + 0xfffffffffffffc00\n105487: ra = u64 [sp + 0x3f8]\n105491: s0 = u64 [sp + 0x3f0]\n105495: s1 = u64 [sp + 0x3e8]\n105499: sp = sp + 0x400\n105503: ret\n      : @1402 (gas: 3)\n105505: a0 = 0x40\n105508: a1 = 0x20\n105511: ra = 1206, jump @0\n      : @1403 [@dyn 603] (gas: 103)\n105518: a1 = u8 [a0 + 0x11]\n105521: a2 = u8 [a0 + 0x10]\n105524: a3 = u8 [a0 + 0x12]\n105527: a4 = u8 [a0 + 0x13]\n105530: a1 = a1 << 0x8\n105533: a1 = a1 | a2\n105536: a3 = a3 << 0x10\n105539: a4 = a4 << 0x18\n105542: a3 = a3 | a4\n105545: a1 = a1 | a3\n105548: a2 = u8 [a0 + 0x15]\n105551: a3 = u8 [a0 + 0x14]\n105554: a4 = u8 [a0 + 0x16]\n105557: a5 = u8 [a0 + 0x17]\n105560: a2 = a2 << 0x8\n105563: a2 = a2 | a3\n105566: a4 = a4 << 0x10\n105569: a5 = a5 << 0x18\n105572: a4 = a4 | a5\n105575: a2 = a2 | a4\n105578: a2 = a2 << 0x20\n105581: t0 = a2 | a1\n105584: a2 = u8 [a0 + 0x1]\n105587: a3 = u8 [a0]\n105589: a4 = u8 [a0 + 0x2]\n105592: a5 = u8 [a0 + 0x3]\n105595: a2 = a2 << 0x8\n105598: a2 = a2 | a3\n105601: a4 = a4 << 0x10\n105604: a5 = a5 << 0x18\n105607: a4 = a4 | a5\n105610: a2 = a2 | a4\n105613: a3 = u8 [a0 + 0x5]\n105616: a4 = u8 [a0 + 0x4]\n105619: a5 = u8 [a0 + 0x6]\n105622: s1 = u8 [a0 + 0x7]\n105625: a3 = a3 << 0x8\n105628: a3 = a3 | a4\n105631: a5 = a5 << 0x10\n105634: s1 = s1 << 0x18\n105637: a5 = a5 | s1\n105640: a3 = a3 | a5\n105643: a3 = a3 << 0x20\n105646: a2 = a2 | a3\n105649: a3 = u8 [a0 + 0x19]\n105652: a4 = u8 [a0 + 0x18]\n105655: a5 = u8 [a0 + 0x1a]\n105658: s1 = u8 [a0 + 0x1b]\n105661: a3 = a3 << 0x8\n105664: a3 = a3 | a4\n105667: a5 = a5 << 0x10\n105670: s1 = s1 << 0x18\n105673: a5 = a5 | s1\n105676: a3 = a3 | a5\n105679: a4 = u8 [a0 + 0x1d]\n105682: a5 = u8 [a0 + 0x1c]\n105685: s1 = u8 [a0 + 0x1e]\n105688: a1 = u8 [a0 + 0x1f]\n105691: a4 = a4 << 0x8\n105694: a4 = a4 | a5\n105697: s1 = s1 << 0x10\n105700: a1 = a1 << 0x18\n105703: a1 = a1 | s1\n105706: a1 = a1 | a4\n105709: a1 = a1 << 0x20\n105712: a3 = a3 | a1\n105715: a1 = u8 [a0 + 0x9]\n105718: a4 = u8 [a0 + 0x8]\n105721: a5 = u8 [a0 + 0xa]\n105724: s1 = u8 [a0 + 0xb]\n105727: a1 = a1 << 0x8\n105730: a1 = a1 | a4\n105733: a5 = a5 << 0x10\n105736: s1 = s1 << 0x18\n105739: a5 = a5 | s1\n105742: a1 = a1 | a5\n105745: a4 = u8 [a0 + 0xd]\n105748: a5 = u8 [a0 + 0xc]\n105751: s1 = u8 [a0 + 0xe]\n105754: a0 = u8 [a0 + 0xf]\n105757: a4 = a4 << 0x8\n105760: a4 = a4 | a5\n105763: s1 = s1 << 0x10\n105766: a0 = a0 << 0x18\n105769: a0 = a0 | s1\n105772: a0 = a0 | a4\n105775: a0 = a0 << 0x20\n105778: a0 = a0 | a1\n105781: s1 = reverse a0\n105783: a1 = reverse a3\n105785: a2 = reverse a2\n105787: a0 = reverse t0\n105789: u64 [sp + 0xb8] = a0\n105793: u64 [sp + 0xb0] = a2\n105797: a0 = a0 | a2\n105800: a2 = a1\n105802: a1 = a1 | s1\n105805: a1 = a1 | a0\n105808: a1 = a1 >> 0x20\n105811: a0 = a0 | s1\n105814: a0 = a0 << 0x20\n105817: a0 = a0 | a1\n105820: jump @1407 if a0 != 0\n      : @1404 (gas: 5)\n105824: u64 [sp + 0xa8] = a2\n105828: i32 a0 = a2 + 0\n105830: a1 = 0x20\n105833: u64 [sp + 0xa0] = a0\n105837: ra = 1208, jump @0\n      : @1405 [@dyn 604] (gas: 50)\n105844: u8 [a0 + 31] = 0\n105847: u8 [a0 + 30] = 0\n105850: u8 [a0 + 29] = 0\n105853: u8 [a0 + 28] = 0\n105856: u8 [a0 + 27] = 0\n105859: u8 [a0 + 26] = 0\n105862: u8 [a0 + 25] = 0\n105865: u8 [a0 + 24] = 0\n105868: u8 [a0 + 23] = 0\n105871: u8 [a0 + 22] = 0\n105874: u8 [a0 + 21] = 0\n105877: u8 [a0 + 20] = 0\n105880: u8 [a0 + 19] = 0\n105883: u8 [a0 + 18] = 0\n105886: u8 [a0 + 17] = 0\n105889: u8 [a0 + 16] = 0\n105892: u8 [a0 + 15] = 0\n105895: u8 [a0 + 14] = 0\n105898: u8 [a0 + 13] = 0\n105901: u8 [a0 + 12] = 0\n105904: u8 [a0 + 11] = 0\n105907: u8 [a0 + 10] = 0\n105910: u8 [a0 + 9] = 0\n105913: u8 [a0 + 8] = 0\n105916: u8 [a0 + 7] = 0\n105919: u8 [a0 + 6] = 0\n105922: u8 [a0 + 5] = 0\n105925: u8 [a0 + 4] = 0\n105928: u8 [a0 + 3] = 0xa0\n105933: u8 [a0 + 2] = 0x79\n105937: u8 [a0 + 1] = 0xc3\n105942: u8 [a0 + 0] = 0x8\n105945: a1 = u64 [sp + 0xa8]\n105949: a0 = a1 + 0x4\n105952: a1 = a0 <u a1\n105955: a3 = u64 [sp + 0xb8]\n105959: a2 = a3 + a1\n105962: a3 = a2 <u a3\n105965: a3 = a1 if a1 == 0\n105968: a3 = a3 + s1\n105971: a1 = a3 <u s1\n105974: a4 = u64 [sp + 0xb0]\n105978: a4 = a4 + a1\n105981: u64 [sp + 0xc8] = a2\n105985: u64 [sp + 0xc0] = a0\n105989: u64 [sp + 0xd0] = a3\n105993: a0 = sp + 0xe0\n105997: a1 = sp + 0xc0\n106001: u64 [sp + 0xd8] = a4\n106005: ra = 1210, jump @1385\n      : @1406 [@dyn 605] (gas: 30)\n106011: a0 = u64 [sp + 0xe8]\n106015: t0 = u64 [sp + 0xf8]\n106019: t1 = u64 [sp + 0xe0]\n106023: a3 = u64 [sp + 0xf0]\n106027: a1 = u64 [sp + 0xb8]\n106031: a4 = a0 ^ a1\n106034: a5 = a0 <u a1\n106037: t2 = a1\n106039: a2 = u64 [sp + 0xa8]\n106043: a1 = t1 <u a2\n106046: a5 = a1 if a4 == 0\n106049: a4 = a3 - s1\n106052: a3 = a3 <u s1\n106055: s1 = u64 [sp + 0xb0]\n106059: s1 = t0 - s1\n106062: s1 = s1 - a3\n106065: a3 = a4 <u a5\n106068: s1 = s1 - a3\n106071: a4 = a4 - a5\n106074: a0 = a0 - t2\n106077: a1 = a0 - a1\n106080: a0 = t1 - a2\n106083: a1 = a1 | s1\n106086: a2 = a0 | a4\n106089: a2 = a2 | a1\n106092: a1 = a1 | a4\n106095: a2 = a2 >> 0x20\n106098: a1 = a1 << 0x20\n106101: a1 = a1 | a2\n106104: jump @1408 if a1 == 0\n      : @1407 (gas: 1)\n106107: trap\n      : @1408 (gas: 4)\n106108: i32 s1 = a0 + 0\n106110: a0 = u64 [sp + 0xa0]\n106114: a1 = s1\n106116: ra = 1212, jump @0\n      : @1409 [@dyn 606] (gas: 6)\n106123: i32 a1 = a0 + 0\n106125: a0 = 0x1\n106128: a2 = s1\n106130: ra = 0x4be\n106134: ecalli 14 // 'seal_return'\n106136: fallthrough\n      : @1410 [@dyn 607] (gas: 21)\n106137: sp = sp + 0xffffffffffffff70\n106141: u64 [sp + 0x88] = ra\n106145: u64 [sp + 0x80] = s0\n106149: u64 [sp + 0x78] = s1\n106152: s0 = u64 [a1 + 0x10]\n106155: t0 = u64 [a1 + 0x18]\n106158: a5 = u64 [a1 + 0x8]\n106161: s1 = u64 [a1]\n106163: u64 [sp + 0x50] = a5\n106166: u64 [sp + 0x60] = t0\n106169: a1 = a5 | t0\n106172: u64 [sp + 0x70] = s1\n106175: a5 = s1 | s0\n106178: a5 = a5 | a1\n106181: a5 = a5 >> 0x20\n106184: u64 [sp + 0x68] = s0\n106187: a1 = a1 | s0\n106190: a1 = a1 << 0x20\n106193: a1 = a1 | a5\n106196: u64 [sp + 0x40] = a0\n106199: jump @1417 if a1 != 0\n      : @1411 (gas: 26)\n106203: a0 = u64 [a4 + 0x18]\n106206: u64 [sp] = a0\n106208: a0 = u64 [a4 + 0x10]\n106211: u64 [sp + 0x8] = a0\n106214: a0 = u64 [a4 + 0x8]\n106217: u64 [sp + 0x10] = a0\n106220: a0 = u64 [a4]\n106222: u64 [sp + 0x18] = a0\n106225: a0 = u64 [a3 + 0x18]\n106228: u64 [sp + 0x28] = a0\n106231: a0 = u64 [a3 + 0x10]\n106234: u64 [sp + 0x30] = a0\n106237: a0 = u64 [a3 + 0x8]\n106240: u64 [sp + 0x38] = a0\n106243: a0 = u64 [a2 + 0x10]\n106246: a1 = u64 [a3]\n106248: u64 [sp + 0x20] = a1\n106251: s1 = u64 [a2 + 0x8]\n106254: a1 = u64 [a2]\n106256: u64 [sp + 0x48] = a1\n106259: a0 = a0 << 0x20\n106262: s0 = a0 >> 0x20\n106265: a0 = i32 [sp + 0x70]\n106268: a1 = 0x20\n106271: u64 [sp + 0x58] = a0\n106274: ra = 1216, jump @0\n      : @1412 [@dyn 608] (gas: 66)\n106281: a1 = reverse s0\n106283: a2 = reverse s1\n106285: a3 = u64 [sp + 0x48]\n106288: a3 = reverse a3\n106290: a4 = a3 >> 0x38\n106293: u8 [a0 + 0x1f] = a4\n106296: a4 = a3 >> 0x30\n106299: u8 [a0 + 0x1e] = a4\n106302: a4 = a3 >> 0x28\n106305: u8 [a0 + 0x1d] = a4\n106308: a4 = a3 >> 0x20\n106311: u8 [a0 + 0x1c] = a4\n106314: a4 = a3 >> 0x18\n106317: u8 [a0 + 0x1b] = a4\n106320: a4 = a3 >> 0x10\n106323: u8 [a0 + 0x1a] = a4\n106326: a4 = a3 >> 0x8\n106329: u8 [a0 + 0x19] = a4\n106332: u8 [a0 + 0x18] = a3\n106335: u8 [a0 + 0x10] = a2\n106338: u8 [a0 + 11] = 0\n106341: u8 [a0 + 10] = 0\n106344: u8 [a0 + 9] = 0\n106347: u8 [a0 + 7] = 0\n106350: u8 [a0 + 6] = 0\n106353: u8 [a0 + 5] = 0\n106356: u8 [a0 + 4] = 0\n106359: u8 [a0 + 3] = 0\n106362: u8 [a0 + 2] = 0\n106365: u8 [a0 + 1] = 0\n106368: u8 [a0 + 0] = 0\n106370: a3 = a2 >> 0x38\n106373: u8 [a0 + 0x17] = a3\n106376: a3 = a2 >> 0x30\n106379: u8 [a0 + 0x16] = a3\n106382: a3 = a2 >> 0x28\n106385: u8 [a0 + 0x15] = a3\n106388: a3 = a2 >> 0x20\n106391: u8 [a0 + 0x14] = a3\n106394: a3 = a2 >> 0x18\n106397: u8 [a0 + 0x13] = a3\n106400: a3 = a2 >> 0x10\n106403: u8 [a0 + 0x12] = a3\n106406: a2 = a2 >> 0x8\n106409: u8 [a0 + 0x11] = a2\n106412: u8 [a0 + 0x8] = a1\n106415: a2 = a1 >> 0x38\n106418: u8 [a0 + 0xf] = a2\n106421: a2 = a1 >> 0x30\n106424: u8 [a0 + 0xe] = a2\n106427: a2 = a1 >> 0x28\n106430: u8 [a0 + 0xd] = a2\n106433: a1 = a1 >> 0x20\n106436: a2 = u64 [sp + 0x68]\n106439: a3 = u64 [sp + 0x60]\n106442: a3 = a3 | a2\n106445: s1 = 0x100000000\n106455: a2 = 0xffffffe0\n106465: a4 = u64 [sp + 0x70]\n106468: a2 = a4 <u a2\n106471: s0 = u64 [sp + 0x50]\n106474: a2 = 0 if s0 != 0\n106476: u64 [sp + 0x48] = a3\n106479: a2 = 0 if a3 != 0\n106481: u8 [a0 + 0xc] = a1\n106484: jump @1417 if a2 == 0\n      : @1413 (gas: 4)\n106488: a0 = u64 [sp + 0x58]\n106491: i32 a0 = a0 + 0x20\n106494: a1 = 0x20\n106497: ra = 1218, jump @0\n      : @1414 [@dyn 609] (gas: 75)\n106504: a1 = u64 [sp + 0x28]\n106507: a1 = reverse a1\n106509: a2 = u64 [sp + 0x30]\n106512: a2 = reverse a2\n106514: a3 = u64 [sp + 0x38]\n106517: a3 = reverse a3\n106519: a4 = u64 [sp + 0x20]\n106522: a4 = reverse a4\n106524: a5 = a4 >> 0x38\n106527: u8 [a0 + 0x1f] = a5\n106530: a5 = a4 >> 0x30\n106533: u8 [a0 + 0x1e] = a5\n106536: a5 = a4 >> 0x28\n106539: u8 [a0 + 0x1d] = a5\n106542: a5 = a4 >> 0x20\n106545: u8 [a0 + 0x1c] = a5\n106548: a5 = a4 >> 0x18\n106551: u8 [a0 + 0x1b] = a5\n106554: a5 = a4 >> 0x10\n106557: u8 [a0 + 0x1a] = a5\n106560: a5 = a4 >> 0x8\n106563: u8 [a0 + 0x19] = a5\n106566: u8 [a0 + 0x18] = a4\n106569: u8 [a0 + 0x10] = a3\n106572: a4 = a3 >> 0x38\n106575: u8 [a0 + 0x17] = a4\n106578: a4 = a3 >> 0x30\n106581: u8 [a0 + 0x16] = a4\n106584: a4 = a3 >> 0x28\n106587: u8 [a0 + 0x15] = a4\n106590: a4 = a3 >> 0x20\n106593: u8 [a0 + 0x14] = a4\n106596: a4 = a3 >> 0x18\n106599: u8 [a0 + 0x13] = a4\n106602: a4 = a3 >> 0x10\n106605: u8 [a0 + 0x12] = a4\n106608: a3 = a3 >> 0x8\n106611: u8 [a0 + 0x11] = a3\n106614: u8 [a0 + 0x8] = a2\n106617: a3 = a2 >> 0x38\n106620: u8 [a0 + 0xf] = a3\n106623: a3 = a2 >> 0x30\n106626: u8 [a0 + 0xe] = a3\n106629: a3 = a2 >> 0x28\n106632: u8 [a0 + 0xd] = a3\n106635: a3 = a2 >> 0x20\n106638: u8 [a0 + 0xc] = a3\n106641: a3 = a2 >> 0x18\n106644: u8 [a0 + 0xb] = a3\n106647: a3 = a2 >> 0x10\n106650: u8 [a0 + 0xa] = a3\n106653: a2 = a2 >> 0x8\n106656: u8 [a0 + 0x9] = a2\n106659: u8 [a0] = a1\n106661: a2 = a1 >> 0x38\n106664: u8 [a0 + 0x7] = a2\n106667: a2 = a1 >> 0x30\n106670: u8 [a0 + 0x6] = a2\n106673: a2 = a1 >> 0x28\n106676: u8 [a0 + 0x5] = a2\n106679: a2 = a1 >> 0x20\n106682: u8 [a0 + 0x4] = a2\n106685: a2 = a1 >> 0x18\n106688: u8 [a0 + 0x3] = a2\n106691: a2 = a1 >> 0x10\n106694: u8 [a0 + 0x2] = a2\n106697: a1 = a1 >> 0x8\n106700: a2 = s1 + 0xffffffffffffffc0\n106703: a3 = u64 [sp + 0x70]\n106706: a2 = a3 <u a2\n106709: a2 = 0 if s0 != 0\n106711: a3 = u64 [sp + 0x48]\n106714: a2 = 0 if a3 != 0\n106716: u8 [a0 + 0x1] = a1\n106719: jump @1417 if a2 == 0\n      : @1415 (gas: 18)\n106723: a0 = u64 [sp + 0x70]\n106726: a1 = a0 + 0x60\n106729: u64 [sp + 0x48] = a1\n106732: a0 = a1 <u a0\n106735: a1 = s0\n106737: s0 = s0 + a0\n106740: s1 = s0 <u a1\n106743: s1 = a0 if a0 == 0\n106746: a0 = u64 [sp + 0x68]\n106749: s1 = s1 + a0\n106752: a0 = s1 <u a0\n106755: a1 = u64 [sp + 0x60]\n106758: a0 = a0 + a1\n106761: u64 [sp + 0x70] = a0\n106764: a0 = u64 [sp + 0x58]\n106767: i32 a0 = a0 + 0x40\n106770: a1 = 0x20\n106773: ra = 1220, jump @0\n      : @1416 [@dyn 610] (gas: 80)\n106780: a1 = u64 [sp]\n106782: a1 = reverse a1\n106784: a2 = u64 [sp + 0x8]\n106787: a2 = reverse a2\n106789: a3 = u64 [sp + 0x10]\n106792: a3 = reverse a3\n106794: a4 = u64 [sp + 0x18]\n106797: a4 = reverse a4\n106799: a5 = a4 >> 0x38\n106802: u8 [a0 + 0x1f] = a5\n106805: a5 = a4 >> 0x30\n106808: u8 [a0 + 0x1e] = a5\n106811: a5 = a4 >> 0x28\n106814: u8 [a0 + 0x1d] = a5\n106817: a5 = a4 >> 0x20\n106820: u8 [a0 + 0x1c] = a5\n106823: a5 = a4 >> 0x18\n106826: u8 [a0 + 0x1b] = a5\n106829: a5 = a4 >> 0x10\n106832: u8 [a0 + 0x1a] = a5\n106835: a5 = a4 >> 0x8\n106838: u8 [a0 + 0x19] = a5\n106841: u8 [a0 + 0x18] = a4\n106844: u8 [a0 + 0x10] = a3\n106847: a4 = a3 >> 0x38\n106850: u8 [a0 + 0x17] = a4\n106853: a4 = a3 >> 0x30\n106856: u8 [a0 + 0x16] = a4\n106859: a4 = a3 >> 0x28\n106862: u8 [a0 + 0x15] = a4\n106865: a4 = a3 >> 0x20\n106868: u8 [a0 + 0x14] = a4\n106871: a4 = a3 >> 0x18\n106874: u8 [a0 + 0x13] = a4\n106877: a4 = a3 >> 0x10\n106880: u8 [a0 + 0x12] = a4\n106883: a3 = a3 >> 0x8\n106886: u8 [a0 + 0x11] = a3\n106889: u8 [a0 + 0x8] = a2\n106892: a3 = a2 >> 0x38\n106895: u8 [a0 + 0xf] = a3\n106898: a3 = a2 >> 0x30\n106901: u8 [a0 + 0xe] = a3\n106904: a3 = a2 >> 0x28\n106907: u8 [a0 + 0xd] = a3\n106910: a3 = a2 >> 0x20\n106913: u8 [a0 + 0xc] = a3\n106916: a3 = a2 >> 0x18\n106919: u8 [a0 + 0xb] = a3\n106922: a3 = a2 >> 0x10\n106925: u8 [a0 + 0xa] = a3\n106928: a2 = a2 >> 0x8\n106931: u8 [a0 + 0x9] = a2\n106934: u8 [a0] = a1\n106936: a2 = a1 >> 0x38\n106939: u8 [a0 + 0x7] = a2\n106942: a2 = a1 >> 0x30\n106945: u8 [a0 + 0x6] = a2\n106948: a2 = a1 >> 0x28\n106951: u8 [a0 + 0x5] = a2\n106954: a2 = a1 >> 0x20\n106957: u8 [a0 + 0x4] = a2\n106960: a2 = a1 >> 0x18\n106963: u8 [a0 + 0x3] = a2\n106966: a2 = a1 >> 0x10\n106969: u8 [a0 + 0x2] = a2\n106972: a1 = a1 >> 0x8\n106975: u8 [a0 + 0x1] = a1\n106978: a0 = u64 [sp + 0x40]\n106981: a1 = u64 [sp + 0x48]\n106984: u64 [a0] = a1\n106986: u64 [a0 + 0x8] = s0\n106989: u64 [a0 + 0x10] = s1\n106992: a1 = u64 [sp + 0x70]\n106995: u64 [a0 + 0x18] = a1\n106998: ra = u64 [sp + 0x88]\n107002: s0 = u64 [sp + 0x80]\n107006: s1 = u64 [sp + 0x78]\n107009: sp = sp + 0x90\n107013: ret\n      : @1417 (gas: 1)\n107015: trap\n      : @1418 (gas: 35)\n107016: sp = sp + 0xffffffffffffff00\n107020: u64 [sp + 0xf8] = ra\n107024: u64 [sp + 0xf0] = s0\n107028: u64 [sp + 0xe8] = s1\n107032: s0 = sp + 0x100\n107036: sp = sp & 0xffffffffffffffe0\n107039: s1 = sp\n107041: a3 = u64 [a2 + 0x18]\n107044: u64 [s1 + 0x20] = a3\n107047: a3 = u64 [a2 + 0x10]\n107050: u64 [s1 + 0x28] = a3\n107053: a3 = u64 [a2 + 0x8]\n107056: u64 [s1 + 0x30] = a3\n107059: a2 = u64 [a2]\n107061: u64 [s1 + 0x38] = a2\n107064: a2 = u64 [a1 + 0x18]\n107067: u64 [s1 + 0x48] = a2\n107070: a2 = u64 [a1 + 0x10]\n107073: u64 [s1 + 0x50] = a2\n107076: a2 = u64 [a1 + 0x8]\n107079: u64 [s1 + 0x58] = a2\n107082: a1 = u64 [a1]\n107084: u64 [s1 + 0x60] = a1\n107087: u64 [s1 + 0x18] = a0\n107090: i32 a0 = s1 + 0xc0\n107094: ecalli 0 // 'address'\n107095: a0 = u32 [s1 + 0xd0]\n107099: u64 [s1 + 0xb0] = a0\n107103: a0 = u64 [s1 + 0xc8]\n107107: u64 [s1 + 0x78] = a0\n107110: a0 = u64 [s1 + 0xc0]\n107114: u64 [s1 + 0xa8] = a0\n107118: a0 = 0x40\n107121: a1 = 0x20\n107124: ra = 1222, jump @0\n      : @1419 [@dyn 611] (gas: 116)\n107131: a1 = u8 [a0 + 0x19]\n107134: a2 = u8 [a0 + 0x18]\n107137: a3 = u8 [a0 + 0x1a]\n107140: a4 = u8 [a0 + 0x1b]\n107143: a1 = a1 << 0x8\n107146: a1 = a1 | a2\n107149: a3 = a3 << 0x10\n107152: a4 = a4 << 0x18\n107155: a3 = a3 | a4\n107158: a1 = a1 | a3\n107161: a2 = u8 [a0 + 0x1d]\n107164: a3 = u8 [a0 + 0x1c]\n107167: a4 = u8 [a0 + 0x1e]\n107170: a5 = u8 [a0 + 0x1f]\n107173: a2 = a2 << 0x8\n107176: a2 = a2 | a3\n107179: a4 = a4 << 0x10\n107182: a5 = a5 << 0x18\n107185: a4 = a4 | a5\n107188: a2 = a2 | a4\n107191: a2 = a2 << 0x20\n107194: t0 = a2 | a1\n107197: a2 = u8 [a0 + 0x11]\n107200: a3 = u8 [a0 + 0x10]\n107203: a4 = u8 [a0 + 0x12]\n107206: a5 = u8 [a0 + 0x13]\n107209: a2 = a2 << 0x8\n107212: a2 = a2 | a3\n107215: a4 = a4 << 0x10\n107218: a5 = a5 << 0x18\n107221: a4 = a4 | a5\n107224: a2 = a2 | a4\n107227: a3 = u8 [a0 + 0x15]\n107230: a4 = u8 [a0 + 0x14]\n107233: a5 = u8 [a0 + 0x16]\n107236: a1 = u8 [a0 + 0x17]\n107239: a3 = a3 << 0x8\n107242: a3 = a3 | a4\n107245: a5 = a5 << 0x10\n107248: a1 = a1 << 0x18\n107251: a1 = a1 | a5\n107254: a1 = a1 | a3\n107257: a1 = a1 << 0x20\n107260: t1 = a1 | a2\n107263: a1 = u8 [a0 + 0x9]\n107266: a3 = u8 [a0 + 0x8]\n107269: a4 = u8 [a0 + 0xa]\n107272: a5 = u8 [a0 + 0xb]\n107275: a1 = a1 << 0x8\n107278: a1 = a1 | a3\n107281: a4 = a4 << 0x10\n107284: a5 = a5 << 0x18\n107287: a4 = a4 | a5\n107290: a1 = a1 | a4\n107293: a3 = u8 [a0 + 0xd]\n107296: a4 = u8 [a0 + 0xc]\n107299: a5 = u8 [a0 + 0xe]\n107302: a2 = u8 [a0 + 0xf]\n107305: a3 = a3 << 0x8\n107308: a3 = a3 | a4\n107311: a5 = a5 << 0x10\n107314: a2 = a2 << 0x18\n107317: a2 = a2 | a5\n107320: a2 = a2 | a3\n107323: a2 = a2 << 0x20\n107326: a3 = a2 | a1\n107329: a1 = u8 [a0 + 0x1]\n107332: a2 = u8 [a0]\n107334: a4 = u8 [a0 + 0x2]\n107337: a5 = u8 [a0 + 0x3]\n107340: a1 = a1 << 0x8\n107343: a1 = a1 | a2\n107346: a4 = a4 << 0x10\n107349: a5 = a5 << 0x18\n107352: a4 = a4 | a5\n107355: a1 = a1 | a4\n107358: a2 = u8 [a0 + 0x5]\n107361: a4 = u8 [a0 + 0x4]\n107364: a5 = u8 [a0 + 0x6]\n107367: a0 = u8 [a0 + 0x7]\n107370: a2 = a2 << 0x8\n107373: a2 = a2 | a4\n107376: a5 = a5 << 0x10\n107379: a0 = a0 << 0x18\n107382: a0 = a0 | a5\n107385: a0 = a0 | a2\n107388: a0 = a0 << 0x20\n107391: a0 = a0 | a1\n107394: a2 = reverse a0\n107396: a3 = reverse a3\n107398: a1 = reverse t1\n107400: a0 = reverse t0\n107402: a4 = a0 + 0x20\n107405: u64 [s1 + 0x80] = a0\n107409: a0 = a4 <u a0\n107412: a5 = a1 + a0\n107415: u64 [s1 + 0x88] = a1\n107419: a1 = a5 <u a1\n107422: a1 = a0 if a0 == 0\n107425: a1 = a1 + a3\n107428: u64 [s1 + 0x90] = a3\n107432: a0 = a1 <u a3\n107435: u64 [s1 + 0x98] = a2\n107439: a2 = a2 + a0\n107442: u64 [s1 + 0xb8] = a4\n107446: a0 = a4 | a1\n107449: u64 [s1 + 0xa0] = a5\n107453: u64 [s1 + 0x68] = a2\n107456: a2 = a2 | a5\n107459: a0 = a0 | a2\n107462: a0 = a0 >> 0x20\n107465: u64 [s1 + 0x70] = a1\n107468: a1 = a1 | a2\n107471: a1 = a1 << 0x20\n107474: a0 = a0 | a1\n107477: jump @1432 if a0 != 0\n      : @1420 (gas: 18)\n107481: a0 = u64 [s1 + 0xa8]\n107485: a0 = reverse a0\n107487: a0 = a0 << 0x20\n107490: a1 = u64 [s1 + 0x78]\n107493: a1 = reverse a1\n107495: a2 = a1 >> 0x20\n107498: a0 = a0 | a2\n107501: u64 [s1 + 0x78] = a0\n107504: a1 = a1 << 0x20\n107507: a0 = u64 [s1 + 0xb0]\n107511: a0 = reverse a0\n107513: a0 = a0 >> 0x20\n107516: a0 = a0 | a1\n107519: u64 [s1 + 0x40] = a0\n107522: a0 = i32 [s1 + 0xb8]\n107526: a1 = 0x20\n107529: u64 [s1 + 0xb0] = a0\n107533: ra = 1224, jump @0\n      : @1421 [@dyn 612] (gas: 67)\n107540: a1 = u64 [s1 + 0x40]\n107543: a1 = reverse a1\n107545: a2 = u64 [s1 + 0x78]\n107548: a2 = reverse a2\n107550: a4 = u64 [s1 + 0xa8]\n107554: a3 = a4 >> 0x18\n107557: u8 [a0 + 0xf] = a3\n107560: a3 = a4 >> 0x10\n107563: u8 [a0 + 0xe] = a3\n107566: a3 = a4 >> 0x8\n107569: u8 [a0 + 0xd] = a3\n107572: u8 [a0 + 0xc] = a4\n107575: u8 [a0 + 11] = 0\n107578: u8 [a0 + 10] = 0\n107581: u8 [a0 + 9] = 0\n107584: u8 [a0 + 8] = 0\n107587: u8 [a0 + 7] = 0\n107590: u8 [a0 + 6] = 0\n107593: u8 [a0 + 5] = 0\n107596: u8 [a0 + 4] = 0\n107599: u8 [a0 + 3] = 0\n107602: u8 [a0 + 2] = 0\n107605: u8 [a0 + 1] = 0\n107608: u8 [a0 + 0] = 0\n107610: u8 [a0 + 0x10] = a2\n107613: u8 [a0 + 0x18] = a1\n107616: a3 = a2 >> 0x38\n107619: u8 [a0 + 0x17] = a3\n107622: a3 = a2 >> 0x30\n107625: u8 [a0 + 0x16] = a3\n107628: a3 = a2 >> 0x28\n107631: u8 [a0 + 0x15] = a3\n107634: a3 = a2 >> 0x20\n107637: u8 [a0 + 0x14] = a3\n107640: a3 = a2 >> 0x18\n107643: u8 [a0 + 0x13] = a3\n107646: a3 = a2 >> 0x10\n107649: u8 [a0 + 0x12] = a3\n107652: a2 = a2 >> 0x8\n107655: u8 [a0 + 0x11] = a2\n107658: a2 = a1 >> 0x38\n107661: u8 [a0 + 0x1f] = a2\n107664: a2 = a1 >> 0x30\n107667: u8 [a0 + 0x1e] = a2\n107670: a2 = a1 >> 0x28\n107673: u8 [a0 + 0x1d] = a2\n107676: a2 = a1 >> 0x20\n107679: u8 [a0 + 0x1c] = a2\n107682: a2 = a1 >> 0x18\n107685: u8 [a0 + 0x1b] = a2\n107688: a2 = a1 >> 0x10\n107691: u8 [a0 + 0x1a] = a2\n107694: a1 = a1 >> 0x8\n107697: a2 = u64 [s1 + 0x70]\n107700: a4 = u64 [s1 + 0x68]\n107703: a4 = a4 | a2\n107706: a2 = 0x100000000\n107716: u64 [s1 + 0x78] = a2\n107719: a2 = 0xffffffe0\n107729: a3 = u64 [s1 + 0xb8]\n107733: a2 = a3 <u a2\n107736: a3 = u64 [s1 + 0xa0]\n107740: a2 = 0 if a3 != 0\n107742: u64 [s1 + 0xa8] = a4\n107746: a2 = 0 if a4 != 0\n107748: u8 [a0 + 0x19] = a1\n107751: jump @1432 if a2 == 0\n      : @1422 (gas: 4)\n107755: a0 = u64 [s1 + 0xb0]\n107759: i32 a0 = a0 + 0x20\n107762: a1 = 0x20\n107765: ra = 1226, jump @0\n      : @1423 [@dyn 613] (gas: 77)\n107772: a1 = u64 [s1 + 0x48]\n107775: a1 = reverse a1\n107777: a2 = u64 [s1 + 0x50]\n107780: a2 = reverse a2\n107782: a3 = u64 [s1 + 0x58]\n107785: a3 = reverse a3\n107787: a4 = u64 [s1 + 0x60]\n107790: a4 = reverse a4\n107792: a5 = a4 >> 0x38\n107795: u8 [a0 + 0x1f] = a5\n107798: a5 = a4 >> 0x30\n107801: u8 [a0 + 0x1e] = a5\n107804: a5 = a4 >> 0x28\n107807: u8 [a0 + 0x1d] = a5\n107810: a5 = a4 >> 0x20\n107813: u8 [a0 + 0x1c] = a5\n107816: a5 = a4 >> 0x18\n107819: u8 [a0 + 0x1b] = a5\n107822: a5 = a4 >> 0x10\n107825: u8 [a0 + 0x1a] = a5\n107828: a5 = a4 >> 0x8\n107831: u8 [a0 + 0x19] = a5\n107834: u8 [a0 + 0x18] = a4\n107837: u8 [a0 + 0x10] = a3\n107840: a4 = a3 >> 0x38\n107843: u8 [a0 + 0x17] = a4\n107846: a4 = a3 >> 0x30\n107849: u8 [a0 + 0x16] = a4\n107852: a4 = a3 >> 0x28\n107855: u8 [a0 + 0x15] = a4\n107858: a4 = a3 >> 0x20\n107861: u8 [a0 + 0x14] = a4\n107864: a4 = a3 >> 0x18\n107867: u8 [a0 + 0x13] = a4\n107870: a4 = a3 >> 0x10\n107873: u8 [a0 + 0x12] = a4\n107876: a3 = a3 >> 0x8\n107879: u8 [a0 + 0x11] = a3\n107882: u8 [a0 + 0x8] = a2\n107885: a3 = a2 >> 0x38\n107888: u8 [a0 + 0xf] = a3\n107891: a3 = a2 >> 0x30\n107894: u8 [a0 + 0xe] = a3\n107897: a3 = a2 >> 0x28\n107900: u8 [a0 + 0xd] = a3\n107903: a3 = a2 >> 0x20\n107906: u8 [a0 + 0xc] = a3\n107909: a3 = a2 >> 0x18\n107912: u8 [a0 + 0xb] = a3\n107915: a3 = a2 >> 0x10\n107918: u8 [a0 + 0xa] = a3\n107921: a2 = a2 >> 0x8\n107924: u8 [a0 + 0x9] = a2\n107927: u8 [a0] = a1\n107929: a2 = a1 >> 0x38\n107932: u8 [a0 + 0x7] = a2\n107935: a2 = a1 >> 0x30\n107938: u8 [a0 + 0x6] = a2\n107941: a2 = a1 >> 0x28\n107944: u8 [a0 + 0x5] = a2\n107947: a2 = a1 >> 0x20\n107950: u8 [a0 + 0x4] = a2\n107953: a2 = a1 >> 0x18\n107956: u8 [a0 + 0x3] = a2\n107959: a2 = a1 >> 0x10\n107962: u8 [a0 + 0x2] = a2\n107965: a1 = a1 >> 0x8\n107968: a2 = u64 [s1 + 0x78]\n107971: a2 = a2 + 0xffffffffffffffc0\n107974: a3 = u64 [s1 + 0xb8]\n107978: a2 = a3 <u a2\n107981: a3 = u64 [s1 + 0xa0]\n107985: a2 = 0 if a3 != 0\n107987: a3 = u64 [s1 + 0xa8]\n107991: a2 = 0 if a3 != 0\n107993: u8 [a0 + 0x1] = a1\n107996: jump @1432 if a2 == 0\n      : @1424 (gas: 4)\n108000: a0 = u64 [s1 + 0xb0]\n108004: i32 a0 = a0 + 0x40\n108007: a1 = 0x20\n108010: ra = 1228, jump @0\n      : @1425 [@dyn 614] (gas: 80)\n108017: a1 = u64 [s1 + 0x20]\n108020: a1 = reverse a1\n108022: a2 = u64 [s1 + 0x28]\n108025: a2 = reverse a2\n108027: a3 = u64 [s1 + 0x30]\n108030: a3 = reverse a3\n108032: a4 = u64 [s1 + 0x38]\n108035: a4 = reverse a4\n108037: a5 = a4 >> 0x38\n108040: u8 [a0 + 0x1f] = a5\n108043: a5 = a4 >> 0x30\n108046: u8 [a0 + 0x1e] = a5\n108049: a5 = a4 >> 0x28\n108052: u8 [a0 + 0x1d] = a5\n108055: a5 = a4 >> 0x20\n108058: u8 [a0 + 0x1c] = a5\n108061: a5 = a4 >> 0x18\n108064: u8 [a0 + 0x1b] = a5\n108067: a5 = a4 >> 0x10\n108070: u8 [a0 + 0x1a] = a5\n108073: a5 = a4 >> 0x8\n108076: u8 [a0 + 0x19] = a5\n108079: u8 [a0 + 0x18] = a4\n108082: u8 [a0 + 0x10] = a3\n108085: a4 = a3 >> 0x38\n108088: u8 [a0 + 0x17] = a4\n108091: a4 = a3 >> 0x30\n108094: u8 [a0 + 0x16] = a4\n108097: a4 = a3 >> 0x28\n108100: u8 [a0 + 0x15] = a4\n108103: a4 = a3 >> 0x20\n108106: u8 [a0 + 0x14] = a4\n108109: a4 = a3 >> 0x18\n108112: u8 [a0 + 0x13] = a4\n108115: a4 = a3 >> 0x10\n108118: u8 [a0 + 0x12] = a4\n108121: a3 = a3 >> 0x8\n108124: u8 [a0 + 0x11] = a3\n108127: u8 [a0 + 0x8] = a2\n108130: a3 = a2 >> 0x38\n108133: u8 [a0 + 0xf] = a3\n108136: a3 = a2 >> 0x30\n108139: u8 [a0 + 0xe] = a3\n108142: a3 = a2 >> 0x28\n108145: u8 [a0 + 0xd] = a3\n108148: a3 = a2 >> 0x20\n108151: u8 [a0 + 0xc] = a3\n108154: a3 = a2 >> 0x18\n108157: u8 [a0 + 0xb] = a3\n108160: a3 = a2 >> 0x10\n108163: u8 [a0 + 0xa] = a3\n108166: a2 = a2 >> 0x8\n108169: u8 [a0 + 0x9] = a2\n108172: u8 [a0] = a1\n108174: a2 = a1 >> 0x38\n108177: u8 [a0 + 0x7] = a2\n108180: a2 = a1 >> 0x30\n108183: u8 [a0 + 0x6] = a2\n108186: a2 = a1 >> 0x28\n108189: u8 [a0 + 0x5] = a2\n108192: a2 = a1 >> 0x20\n108195: u8 [a0 + 0x4] = a2\n108198: a2 = a1 >> 0x18\n108201: u8 [a0 + 0x3] = a2\n108204: a2 = a1 >> 0x10\n108207: u8 [a0 + 0x2] = a2\n108210: t0 = a1 >> 0x8\n108213: a5 = u64 [s1 + 0x90]\n108217: a4 = u64 [s1 + 0x80]\n108221: a2 = a4 | a5\n108224: a3 = u64 [s1 + 0x98]\n108228: a1 = u64 [s1 + 0x88]\n108232: a3 = a3 | a1\n108235: a2 = a2 | a3\n108238: a2 = a2 >> 0x20\n108241: a3 = a3 | a5\n108244: a3 = a3 << 0x20\n108247: a2 = a2 | a3\n108250: u8 [a0 + 0x1] = t0\n108253: jump @1432 if a2 != 0\n      : @1426 (gas: 4)\n108257: i32 a0 = a4 + 0\n108259: u64 [s1 + 0xb8] = a0\n108263: a1 = 0x20\n108266: ra = 1230, jump @0\n      : @1427 [@dyn 615] (gas: 51)\n108273: u8 [a0 + 31] = 0x60\n108277: u8 [a0 + 30] = 0\n108280: u8 [a0 + 29] = 0\n108283: u8 [a0 + 28] = 0\n108286: u8 [a0 + 27] = 0\n108289: u8 [a0 + 26] = 0\n108292: u8 [a0 + 25] = 0\n108295: u8 [a0 + 24] = 0\n108298: u8 [a0 + 23] = 0\n108301: u8 [a0 + 22] = 0\n108304: u8 [a0 + 21] = 0\n108307: u8 [a0 + 20] = 0\n108310: u8 [a0 + 19] = 0\n108313: u8 [a0 + 18] = 0\n108316: u8 [a0 + 17] = 0\n108319: u8 [a0 + 16] = 0\n108322: u8 [a0 + 15] = 0\n108325: u8 [a0 + 14] = 0\n108328: u8 [a0 + 13] = 0\n108331: u8 [a0 + 12] = 0\n108334: u8 [a0 + 11] = 0\n108337: u8 [a0 + 10] = 0\n108340: u8 [a0 + 9] = 0\n108343: u8 [a0 + 8] = 0\n108346: u8 [a0 + 7] = 0\n108349: u8 [a0 + 6] = 0\n108352: u8 [a0 + 5] = 0\n108355: u8 [a0 + 4] = 0\n108358: u8 [a0 + 3] = 0\n108361: u8 [a0 + 2] = 0\n108364: u8 [a0 + 1] = 0\n108367: u8 [a0 + 0] = 0\n108369: a0 = u64 [s1 + 0x80]\n108373: a1 = a0 + 0x80\n108377: u64 [s1 + 0xa8] = a1\n108381: a0 = a1 <u a0\n108384: a1 = u64 [s1 + 0x88]\n108388: a2 = a1 + a0\n108391: u64 [s1 + 0xa0] = a2\n108395: a1 = a2 <u a1\n108398: a1 = a0 if a0 == 0\n108401: a0 = u64 [s1 + 0x90]\n108405: a1 = a1 + a0\n108408: u64 [s1 + 0x88] = a1\n108412: a0 = a1 <u a0\n108415: a1 = u64 [s1 + 0x98]\n108419: a0 = a0 + a1\n108422: u64 [s1 + 0x98] = a0\n108426: a0 = 0x40\n108429: a1 = 0x20\n108432: ra = 1232, jump @0\n      : @1428 [@dyn 616] (gas: 71)\n108439: a1 = u64 [s1 + 0x98]\n108443: a1 = reverse a1\n108445: a2 = u64 [s1 + 0x88]\n108449: a2 = reverse a2\n108451: a3 = u64 [s1 + 0xa0]\n108455: a3 = reverse a3\n108457: a4 = u64 [s1 + 0xa8]\n108461: a4 = reverse a4\n108463: a5 = a4 >> 0x38\n108466: u8 [a0 + 0x1f] = a5\n108469: a5 = a4 >> 0x30\n108472: u8 [a0 + 0x1e] = a5\n108475: a5 = a4 >> 0x28\n108478: u8 [a0 + 0x1d] = a5\n108481: a5 = a4 >> 0x20\n108484: u8 [a0 + 0x1c] = a5\n108487: a5 = a4 >> 0x18\n108490: u8 [a0 + 0x1b] = a5\n108493: a5 = a4 >> 0x10\n108496: u8 [a0 + 0x1a] = a5\n108499: a5 = a4 >> 0x8\n108502: u8 [a0 + 0x19] = a5\n108505: u8 [a0 + 0x18] = a4\n108508: a4 = a3 >> 0x38\n108511: u8 [a0 + 0x17] = a4\n108514: a4 = a3 >> 0x30\n108517: u8 [a0 + 0x16] = a4\n108520: a4 = a3 >> 0x28\n108523: u8 [a0 + 0x15] = a4\n108526: a4 = a3 >> 0x20\n108529: u8 [a0 + 0x14] = a4\n108532: a4 = a3 >> 0x18\n108535: u8 [a0 + 0x13] = a4\n108538: a4 = a3 >> 0x10\n108541: u8 [a0 + 0x12] = a4\n108544: a4 = a3 >> 0x8\n108547: u8 [a0 + 0x11] = a4\n108550: u8 [a0 + 0x10] = a3\n108553: u8 [a0 + 0x8] = a2\n108556: a3 = a2 >> 0x38\n108559: u8 [a0 + 0xf] = a3\n108562: a3 = a2 >> 0x30\n108565: u8 [a0 + 0xe] = a3\n108568: a3 = a2 >> 0x28\n108571: u8 [a0 + 0xd] = a3\n108574: a3 = a2 >> 0x20\n108577: u8 [a0 + 0xc] = a3\n108580: a3 = a2 >> 0x18\n108583: u8 [a0 + 0xb] = a3\n108586: a3 = a2 >> 0x10\n108589: u8 [a0 + 0xa] = a3\n108592: a2 = a2 >> 0x8\n108595: u8 [a0 + 0x9] = a2\n108598: u8 [a0] = a1\n108600: a2 = a1 >> 0x38\n108603: u8 [a0 + 0x7] = a2\n108606: a2 = a1 >> 0x30\n108609: u8 [a0 + 0x6] = a2\n108612: a2 = a1 >> 0x28\n108615: u8 [a0 + 0x5] = a2\n108618: a2 = a1 >> 0x20\n108621: u8 [a0 + 0x4] = a2\n108624: a2 = a1 >> 0x18\n108627: u8 [a0 + 0x3] = a2\n108630: a2 = a1 >> 0x10\n108633: u8 [a0 + 0x2] = a2\n108636: a1 = a1 >> 0x8\n108639: u8 [a0 + 0x1] = a1\n108642: a1 = 0x20\n108645: a0 = u64 [s1 + 0xb8]\n108649: ra = 1234, jump @0\n      : @1429 [@dyn 617] (gas: 100)\n108656: a1 = u8 [a0 + 0x11]\n108659: a2 = u8 [a0 + 0x10]\n108662: a3 = u8 [a0 + 0x12]\n108665: a4 = u8 [a0 + 0x13]\n108668: a1 = a1 << 0x8\n108671: a1 = a1 | a2\n108674: a3 = a3 << 0x10\n108677: a4 = a4 << 0x18\n108680: a3 = a3 | a4\n108683: a1 = a1 | a3\n108686: a2 = u8 [a0 + 0x15]\n108689: a3 = u8 [a0 + 0x14]\n108692: a4 = u8 [a0 + 0x16]\n108695: a5 = u8 [a0 + 0x17]\n108698: a2 = a2 << 0x8\n108701: a2 = a2 | a3\n108704: a4 = a4 << 0x10\n108707: a5 = a5 << 0x18\n108710: a4 = a4 | a5\n108713: a2 = a2 | a4\n108716: a2 = a2 << 0x20\n108719: t0 = a2 | a1\n108722: a2 = u8 [a0 + 0x1]\n108725: a3 = u8 [a0]\n108727: a4 = u8 [a0 + 0x2]\n108730: a5 = u8 [a0 + 0x3]\n108733: a2 = a2 << 0x8\n108736: a2 = a2 | a3\n108739: a4 = a4 << 0x10\n108742: a5 = a5 << 0x18\n108745: a4 = a4 | a5\n108748: a2 = a2 | a4\n108751: a3 = u8 [a0 + 0x5]\n108754: a4 = u8 [a0 + 0x4]\n108757: a5 = u8 [a0 + 0x6]\n108760: a1 = u8 [a0 + 0x7]\n108763: a3 = a3 << 0x8\n108766: a3 = a3 | a4\n108769: a5 = a5 << 0x10\n108772: a1 = a1 << 0x18\n108775: a1 = a1 | a5\n108778: a1 = a1 | a3\n108781: a1 = a1 << 0x20\n108784: t1 = a1 | a2\n108787: a1 = u8 [a0 + 0x19]\n108790: a3 = u8 [a0 + 0x18]\n108793: a4 = u8 [a0 + 0x1a]\n108796: a5 = u8 [a0 + 0x1b]\n108799: a1 = a1 << 0x8\n108802: a1 = a1 | a3\n108805: a4 = a4 << 0x10\n108808: a5 = a5 << 0x18\n108811: a4 = a4 | a5\n108814: a1 = a1 | a4\n108817: a3 = u8 [a0 + 0x1d]\n108820: a4 = u8 [a0 + 0x1c]\n108823: a5 = u8 [a0 + 0x1e]\n108826: a2 = u8 [a0 + 0x1f]\n108829: a3 = a3 << 0x8\n108832: a3 = a3 | a4\n108835: a5 = a5 << 0x10\n108838: a2 = a2 << 0x18\n108841: a2 = a2 | a5\n108844: a2 = a2 | a3\n108847: a2 = a2 << 0x20\n108850: a3 = a2 | a1\n108853: a1 = u8 [a0 + 0x9]\n108856: a2 = u8 [a0 + 0x8]\n108859: a4 = u8 [a0 + 0xa]\n108862: a5 = u8 [a0 + 0xb]\n108865: a1 = a1 << 0x8\n108868: a1 = a1 | a2\n108871: a4 = a4 << 0x10\n108874: a5 = a5 << 0x18\n108877: a4 = a4 | a5\n108880: a1 = a1 | a4\n108883: a2 = u8 [a0 + 0xd]\n108886: a4 = u8 [a0 + 0xc]\n108889: a5 = u8 [a0 + 0xe]\n108892: a0 = u8 [a0 + 0xf]\n108895: a2 = a2 << 0x8\n108898: a2 = a2 | a4\n108901: a5 = a5 << 0x10\n108904: a0 = a0 << 0x18\n108907: a0 = a0 | a5\n108910: a0 = a0 | a2\n108913: a0 = a0 << 0x20\n108916: a0 = a0 | a1\n108919: a1 = reverse a0\n108921: a0 = reverse a3\n108923: a2 = reverse t1\n108925: a3 = reverse t0\n108927: a2 = a2 | a3\n108930: a3 = a0 | a1\n108933: a3 = a3 | a2\n108936: a3 = a3 >> 0x20\n108939: a1 = a1 | a2\n108942: a1 = a1 << 0x20\n108945: a1 = a1 | a3\n108948: jump @1432 if a1 != 0\n      : @1430 (gas: 4)\n108951: i32 a1 = a0 + 0\n108953: u64 [s1 + 0xb8] = a1\n108957: a0 = u64 [s1 + 0xb0]\n108961: ra = 1236, jump @0\n      : @1431 [@dyn 618] (gas: 28)\n108968: a1 = sp + 0xffffffffffffffe0\n108971: a1 = a1 & 0xffffffffffffffe0\n108974: u64 [s1 + 0xb0] = a1\n108978: sp = a1\n108980: i32 a0 = a0 + 0\n108982: i32 a2 = a1 + 0\n108984: a1 = u64 [s1 + 0xb8]\n108988: ecalli 9 // 'hash_keccak_256'\n108990: a3 = u64 [s1 + 0xb0]\n108994: a0 = u64 [a3 + 0x18]\n108997: a1 = u64 [a3 + 0x10]\n109000: a2 = u64 [a3 + 0x8]\n109003: a3 = u64 [a3]\n109005: a0 = reverse a0\n109007: a1 = reverse a1\n109009: a2 = reverse a2\n109011: a3 = reverse a3\n109013: a4 = u64 [s1 + 0x18]\n109016: u64 [a4 + 0x18] = a3\n109019: u64 [a4 + 0x10] = a2\n109022: u64 [a4 + 0x8] = a1\n109025: u64 [a4] = a0\n109027: sp = s0 + 0xffffffffffffff00\n109031: ra = u64 [sp + 0xf8]\n109035: s0 = u64 [sp + 0xf0]\n109039: s1 = u64 [sp + 0xe8]\n109043: sp = sp + 0x100\n109047: ret\n      : @1432 (gas: 1)\n109049: trap\n      : @1433 (gas: 16)\n109050: sp = sp + 0xffffffffffffff20\n109054: u64 [sp + 0xd8] = ra\n109058: u64 [sp + 0xd0] = s0\n109062: u64 [sp + 0xc8] = s1\n109066: s0 = sp + 0xe0\n109070: sp = sp & 0xfffffffffffffff0\n109073: a3 = u64 [a1 + 0x18]\n109076: a2 = u64 [a1 + 0x10]\n109079: a4 = u64 [a1 + 0x8]\n109082: u64 [sp + 0x10] = a2\n109085: u64 [sp + 0x8] = a3\n109088: a2 = a2 | a3\n109091: a3 = a4 <u 0x1\n109094: a3 = 0 if a2 != 0\n109096: u64 [sp + 0x38] = a0\n109099: jump @1439 if a3 == 0\n      : @1434 (gas: 19)\n109103: s1 = u64 [a1]\n109105: a0 = s1 + 0x1f\n109108: a1 = a0 <u s1\n109111: u64 [sp + 0x18] = a4\n109114: a1 = a1 + a4\n109117: a1 = a1 & 0x1\n109120: a0 = a0 & 0xffffffffffffffe0\n109123: a2 = a0 + 0x20\n109126: a0 = a2 <u a0\n109129: a3 = a1 + a0\n109132: a4 = a3 <u a1\n109135: a4 = a0 if a0 == 0\n109138: u64 [sp + 152] = 0\n109142: u64 [sp + 0x80] = a2\n109146: u64 [sp + 0x88] = a3\n109150: a0 = sp + 0xa0\n109154: a1 = sp + 0x80\n109158: u64 [sp + 0x90] = a4\n109162: ra = 1238, jump @113\n      : @1435 [@dyn 619] (gas: 15)\n109169: a0 = u64 [sp + 0xb8]\n109173: a2 = u64 [sp + 0xb0]\n109177: a1 = u64 [sp + 0xa8]\n109181: a3 = u64 [sp + 0xa0]\n109185: u64 [sp + 0x28] = a0\n109188: u64 [sp + 0x20] = a1\n109191: a0 = a0 | a1\n109194: a1 = a3 | a2\n109197: a1 = a1 | a0\n109200: a1 = a1 >> 0x20\n109203: u64 [sp + 0x30] = a2\n109206: a0 = a0 | a2\n109209: a0 = a0 << 0x20\n109212: a0 = a0 | a1\n109215: jump @1438 if a0 != 0\n      : @1436 (gas: 4)\n109219: i32 a0 = a3 + 0\n109221: a1 = 0x20\n109224: u64 [sp] = a3\n109226: ra = 1240, jump @0\n      : @1437 [@dyn 620] (gas: 82)\n109233: a1 = u64 [sp + 0x8]\n109236: a1 = reverse a1\n109238: a2 = u64 [sp + 0x10]\n109241: a2 = reverse a2\n109243: a3 = u64 [sp + 0x18]\n109246: a3 = reverse a3\n109248: a4 = reverse s1\n109250: a5 = a4 >> 0x38\n109253: u8 [a0 + 0x1f] = a5\n109256: a5 = a4 >> 0x30\n109259: u8 [a0 + 0x1e] = a5\n109262: a5 = a4 >> 0x28\n109265: u8 [a0 + 0x1d] = a5\n109268: a5 = a4 >> 0x20\n109271: u8 [a0 + 0x1c] = a5\n109274: a5 = a4 >> 0x18\n109277: u8 [a0 + 0x1b] = a5\n109280: a5 = a4 >> 0x10\n109283: u8 [a0 + 0x1a] = a5\n109286: a5 = a4 >> 0x8\n109289: u8 [a0 + 0x19] = a5\n109292: u8 [a0 + 0x18] = a4\n109295: u8 [a0 + 0x10] = a3\n109298: a4 = a3 >> 0x38\n109301: u8 [a0 + 0x17] = a4\n109304: a4 = a3 >> 0x30\n109307: u8 [a0 + 0x16] = a4\n109310: a4 = a3 >> 0x28\n109313: u8 [a0 + 0x15] = a4\n109316: a4 = a3 >> 0x20\n109319: u8 [a0 + 0x14] = a4\n109322: a4 = a3 >> 0x18\n109325: u8 [a0 + 0x13] = a4\n109328: a4 = a3 >> 0x10\n109331: u8 [a0 + 0x12] = a4\n109334: a3 = a3 >> 0x8\n109337: u8 [a0 + 0x11] = a3\n109340: u8 [a0 + 0x8] = a2\n109343: a3 = a2 >> 0x38\n109346: u8 [a0 + 0xf] = a3\n109349: a3 = a2 >> 0x30\n109352: u8 [a0 + 0xe] = a3\n109355: a3 = a2 >> 0x28\n109358: u8 [a0 + 0xd] = a3\n109361: a3 = a2 >> 0x20\n109364: u8 [a0 + 0xc] = a3\n109367: a3 = a2 >> 0x18\n109370: u8 [a0 + 0xb] = a3\n109373: a3 = a2 >> 0x10\n109376: u8 [a0 + 0xa] = a3\n109379: a2 = a2 >> 0x8\n109382: u8 [a0 + 0x9] = a2\n109385: u8 [a0] = a1\n109387: a2 = a1 >> 0x38\n109390: u8 [a0 + 0x7] = a2\n109393: a2 = a1 >> 0x30\n109396: u8 [a0 + 0x6] = a2\n109399: a2 = a1 >> 0x28\n109402: u8 [a0 + 0x5] = a2\n109405: a2 = a1 >> 0x20\n109408: u8 [a0 + 0x4] = a2\n109411: a2 = a1 >> 0x18\n109414: u8 [a0 + 0x3] = a2\n109417: a2 = a1 >> 0x10\n109420: u8 [a0 + 0x2] = a2\n109423: a1 = a1 >> 0x8\n109426: u8 [a0 + 0x1] = a1\n109429: a0 = u64 [sp + 0x38]\n109432: a1 = u64 [sp]\n109434: u64 [a0] = a1\n109436: a1 = u64 [sp + 0x28]\n109439: u64 [a0 + 0x18] = a1\n109442: a1 = u64 [sp + 0x20]\n109445: u64 [a0 + 0x8] = a1\n109448: a1 = u64 [sp + 0x30]\n109451: u64 [a0 + 0x10] = a1\n109454: sp = s0 + 0xffffffffffffff20\n109458: ra = u64 [sp + 0xd8]\n109462: s0 = u64 [sp + 0xd0]\n109466: s1 = u64 [sp + 0xc8]\n109470: sp = sp + 0xe0\n109474: ret\n      : @1438 (gas: 1)\n109476: trap\n      : @1439 (gas: 8)\n109477: u64 [sp + 112] = 0\n109480: u64 [sp + 104] = 0\n109483: u64 [sp + 96] = 0\n109486: a0 = 0x4e487b7100000000\n109496: a1 = sp + 0x60\n109499: u64 [sp + 0x78] = a0\n109502: a0 = 0\n109504: ra = 1242, jump @23\n      : @1440 [@dyn 621] (gas: 7)\n109511: u64 [sp + 88] = 0\n109514: u64 [sp + 80] = 0\n109517: u64 [sp + 64] = 0x41\n109521: a0 = 0x4\n109524: a1 = sp + 0x40\n109527: u64 [sp + 72] = 0\n109530: ra = 1244, jump @23\n      : @1441 [@dyn 622] (gas: 3)\n109537: a1 = 0x24\n109540: a0 = 0\n109542: ra = 1246, jump @0\n      : @1442 [@dyn 623] (gas: 6)\n109549: i32 a1 = a0 + 0\n109551: a0 = 0x1\n109554: a2 = 0x24\n109557: ra = 0x4e0\n109561: ecalli 14 // 'seal_return'\n109563: fallthrough\n      : @1443 [@dyn 624] (gas: 9)\n109564: sp = sp + 0xffffffffffffff60\n109568: u64 [sp + 0x98] = ra\n109572: u64 [sp + 0x90] = s0\n109576: u64 [sp + 0x88] = s1\n109580: s0 = sp + 0xa0\n109584: sp = sp & 0xffffffffffffffe0\n109587: s1 = a0\n109589: ecalli 13 // 'return_data_size'\n109591: fallthrough\n      : @1444 (gas: 1)\n109592: jump @1453 if a0 == 0\n      : @1445 (gas: 9)\n109596: u64 [sp + 0x20] = s1\n109599: ecalli 13 // 'return_data_size'\n109601: u64 [sp + 88] = 0\n109604: u64 [sp + 80] = 0\n109607: u64 [sp + 0x40] = a0\n109610: a0 = sp + 0x60\n109613: a1 = sp + 0x40\n109616: u64 [sp + 72] = 0\n109619: ra = 1250, jump @1433\n      : @1446 [@dyn 625] (gas: 9)\n109625: a0 = u64 [sp + 0x78]\n109628: u64 [sp + 0x38] = a0\n109631: a0 = u64 [sp + 0x70]\n109634: u64 [sp + 0x30] = a0\n109637: a0 = u64 [sp + 0x68]\n109640: u64 [sp + 0x28] = a0\n109643: s1 = u64 [sp + 0x60]\n109646: ecalli 13 // 'return_data_size'\n109648: fallthrough\n      : @1447 (gas: 20)\n109649: a1 = s1 + 0x20\n109652: u64 [sp + 0x18] = s1\n109655: a2 = a1 <u s1\n109658: a4 = u64 [sp + 0x28]\n109661: a3 = a4 + a2\n109664: a4 = a3 <u a4\n109667: a4 = a2 if a2 == 0\n109670: a2 = u64 [sp + 0x30]\n109673: a4 = a4 + a2\n109676: a2 = a4 <u a2\n109679: a5 = u64 [sp + 0x38]\n109682: a2 = a2 + a5\n109685: a5 = a1 | a4\n109688: a2 = a2 | a3\n109691: a5 = a5 | a2\n109694: a5 = a5 >> 0x20\n109697: a2 = a2 | a4\n109700: a2 = a2 << 0x20\n109703: a2 = a2 | a5\n109706: jump @1452 if a2 != 0\n      : @1448 (gas: 3)\n109709: s1 = a0\n109711: a0 = a0 >> 0x20\n109714: jump @1452 if a0 != 0\n      : @1449 (gas: 4)\n109717: i32 a0 = a1 + 0\n109719: i32 a1 = s1 + 0\n109721: u64 [sp + 0x10] = a1\n109724: ra = 1252, jump @0\n      : @1450 [@dyn 626] (gas: 6)\n109731: u32 [sp + 0x80] = s1\n109735: i32 a0 = a0 + 0\n109737: i32 a1 = sp + 0x80\n109741: a2 = 0\n109743: ecalli 12 // 'return_data_copy'\n109745: fallthrough\n      : @1451 (gas: 8)\n109746: a0 = i32 [sp + 0x80]\n109750: s1 = u64 [sp + 0x20]\n109753: a1 = u64 [sp + 0x38]\n109756: a2 = u64 [sp + 0x30]\n109759: a3 = u64 [sp + 0x28]\n109762: a4 = u64 [sp + 0x18]\n109765: a5 = u64 [sp + 0x10]\n109768: jump @1454 if a0 >=u a5\n      : @1452 (gas: 1)\n109771: trap\n      : @1453 (gas: 5)\n109772: a3 = 0\n109774: a2 = 0\n109776: a1 = 0\n109778: a4 = 0x60\n109781: fallthrough\n      : @1454 (gas: 10)\n109782: u64 [s1] = a4\n109784: u64 [s1 + 0x8] = a3\n109787: u64 [s1 + 0x10] = a2\n109790: u64 [s1 + 0x18] = a1\n109793: sp = s0 + 0xffffffffffffff60\n109797: ra = u64 [sp + 0x98]\n109801: s0 = u64 [sp + 0x90]\n109805: s1 = u64 [sp + 0x88]\n109809: sp = sp + 0xa0\n109813: ret\n      : @1455 (gas: 17)\n109815: sp = sp + 0xffffffffffffffa0\n109818: u64 [sp + 0x58] = ra\n109821: u64 [sp + 0x50] = s0\n109824: u64 [sp + 0x48] = s1\n109827: a3 = u64 [a1 + 0x18]\n109830: a4 = u64 [a1 + 0x10]\n109833: a5 = u64 [a1 + 0x8]\n109836: s1 = u64 [a1]\n109838: a1 = a5 | a3\n109841: a2 = s1 | a4\n109844: a2 = a2 | a1\n109847: a2 = a2 >> 0x20\n109850: a1 = a1 | a4\n109853: a1 = a1 << 0x20\n109856: a1 = a1 | a2\n109859: u64 [sp + 0x28] = a0\n109862: jump @1462 if a1 != 0\n      : @1456 (gas: 19)\n109866: a0 = s1 + 0x20\n109869: u64 [sp + 0x30] = a0\n109872: a0 = a0 <u s1\n109875: a1 = a5 + a0\n109878: u64 [sp + 0x40] = a1\n109881: u64 [sp + 0x8] = a5\n109884: s0 = a1 <u a5\n109887: s0 = a0 if a0 == 0\n109890: s0 = s0 + a4\n109893: u64 [sp + 0x10] = a4\n109896: a0 = s0 <u a4\n109899: u64 [sp + 0x18] = a3\n109902: a0 = a0 + a3\n109905: u64 [sp + 0x38] = a0\n109908: u64 [sp] = s1\n109910: i32 a0 = s1 + 0\n109912: a1 = 0x20\n109915: s1 = 0x20\n109918: ra = 1254, jump @0\n      : @1457 [@dyn 627] (gas: 45)\n109925: u8 [a0 + 0x1f] = s1\n109928: a1 = u64 [sp + 0x30]\n109931: s1 = a1\n109933: a1 = a1 | s0\n109936: a2 = u64 [sp + 0x40]\n109939: a4 = u64 [sp + 0x38]\n109942: a2 = a2 | a4\n109945: a1 = a1 | a2\n109948: a1 = a1 >> 0x20\n109951: u64 [sp + 0x20] = s0\n109954: a2 = a2 | s0\n109957: a2 = a2 << 0x20\n109960: a1 = a1 | a2\n109963: u8 [a0 + 30] = 0\n109966: u8 [a0 + 29] = 0\n109969: u8 [a0 + 28] = 0\n109972: u8 [a0 + 27] = 0\n109975: u8 [a0 + 26] = 0\n109978: u8 [a0 + 25] = 0\n109981: u8 [a0 + 24] = 0\n109984: u8 [a0 + 23] = 0\n109987: u8 [a0 + 22] = 0\n109990: u8 [a0 + 21] = 0\n109993: u8 [a0 + 20] = 0\n109996: u8 [a0 + 19] = 0\n109999: u8 [a0 + 18] = 0\n110002: u8 [a0 + 17] = 0\n110005: u8 [a0 + 16] = 0\n110008: u8 [a0 + 15] = 0\n110011: u8 [a0 + 14] = 0\n110014: u8 [a0 + 13] = 0\n110017: u8 [a0 + 12] = 0\n110020: u8 [a0 + 11] = 0\n110023: u8 [a0 + 10] = 0\n110026: u8 [a0 + 9] = 0\n110029: u8 [a0 + 8] = 0\n110032: u8 [a0 + 7] = 0\n110035: u8 [a0 + 6] = 0\n110038: u8 [a0 + 5] = 0\n110041: u8 [a0 + 4] = 0\n110044: u8 [a0 + 3] = 0\n110047: u8 [a0 + 2] = 0\n110050: u8 [a0 + 1] = 0\n110053: u8 [a0 + 0] = 0\n110055: jump @1462 if a1 != 0\n      : @1458 (gas: 4)\n110059: i32 s0 = s1 + 0\n110061: a1 = 0x20\n110064: a0 = s0\n110066: ra = 1256, jump @0\n      : @1459 [@dyn 628] (gas: 41)\n110073: u8 [a0 + 31] = 0x1b\n110077: u8 [a0 + 30] = 0\n110080: u8 [a0 + 29] = 0\n110083: u8 [a0 + 28] = 0\n110086: u8 [a0 + 27] = 0\n110089: u8 [a0 + 26] = 0\n110092: u8 [a0 + 25] = 0\n110095: u8 [a0 + 24] = 0\n110098: u8 [a0 + 23] = 0\n110101: u8 [a0 + 22] = 0\n110104: u8 [a0 + 21] = 0\n110107: u8 [a0 + 20] = 0\n110110: u8 [a0 + 19] = 0\n110113: u8 [a0 + 18] = 0\n110116: u8 [a0 + 17] = 0\n110119: u8 [a0 + 16] = 0\n110122: u8 [a0 + 15] = 0\n110125: u8 [a0 + 14] = 0\n110128: u8 [a0 + 13] = 0\n110131: u8 [a0 + 12] = 0\n110134: u8 [a0 + 11] = 0\n110137: u8 [a0 + 10] = 0\n110140: u8 [a0 + 9] = 0\n110143: u8 [a0 + 8] = 0\n110146: u8 [a0 + 7] = 0\n110149: u8 [a0 + 6] = 0\n110152: u8 [a0 + 5] = 0\n110155: u8 [a0 + 4] = 0\n110158: u8 [a0 + 3] = 0\n110161: u8 [a0 + 2] = 0\n110164: u8 [a0 + 1] = 0\n110167: a1 = u64 [sp + 0x20]\n110170: a2 = u64 [sp + 0x38]\n110173: a1 = a1 | a2\n110176: a2 = 0xffffffe0\n110186: a2 = s1 <u a2\n110189: a3 = u64 [sp + 0x40]\n110192: a2 = 0 if a3 != 0\n110194: a2 = 0 if a1 != 0\n110196: u8 [a0 + 0] = 0\n110198: jump @1462 if a2 == 0\n      : @1460 (gas: 3)\n110202: i32 a0 = s0 + 0x20\n110205: a1 = 0x20\n110208: ra = 1258, jump @0\n      : @1461 [@dyn 629] (gas: 55)\n110215: u8 [a0 + 31] = 0\n110218: u8 [a0 + 30] = 0\n110221: u8 [a0 + 29] = 0\n110224: u8 [a0 + 28] = 0\n110227: u8 [a0 + 27] = 0\n110230: u8 [a0 + 26] = 0x64\n110234: u8 [a0 + 25] = 0x65\n110238: u8 [a0 + 24] = 0x6c\n110242: u8 [a0 + 23] = 0x69\n110246: u8 [a0 + 22] = 0x61\n110250: u8 [a0 + 21] = 0x66\n110254: a5 = 0x20\n110257: u8 [a0 + 0x14] = a5\n110260: u8 [a0 + 19] = 0x72\n110264: u8 [a0 + 18] = 0x65\n110268: u8 [a0 + 17] = 0x66\n110272: u8 [a0 + 16] = 0x73\n110276: u8 [a0 + 15] = 0x6e\n110280: u8 [a0 + 14] = 0x61\n110284: u8 [a0 + 13] = 0x72\n110288: u8 [a0 + 12] = 0x74\n110292: u8 [a0 + 0xb] = a5\n110295: u8 [a0 + 10] = 0x48\n110299: u8 [a0 + 9] = 0x54\n110303: u8 [a0 + 8] = 0x45\n110307: u8 [a0 + 0x7] = a5\n110310: u8 [a0 + 6] = 0x3a\n110314: u8 [a0 + 5] = 0x77\n110318: u8 [a0 + 4] = 0x6f\n110322: u8 [a0 + 3] = 0x72\n110326: u8 [a0 + 2] = 0x63\n110330: u8 [a0 + 1] = 0x73\n110334: u8 [a0 + 0] = 0x45\n110337: a1 = u64 [sp]\n110339: a0 = a1 + 0x60\n110342: a1 = a0 <u a1\n110345: a3 = u64 [sp + 0x8]\n110348: a2 = a3 + a1\n110351: a3 = a2 <u a3\n110354: a3 = a1 if a1 == 0\n110357: a1 = u64 [sp + 0x10]\n110360: a3 = a3 + a1\n110363: a1 = a3 <u a1\n110366: a4 = u64 [sp + 0x18]\n110369: a1 = a1 + a4\n110372: a4 = u64 [sp + 0x28]\n110375: u64 [a4] = a0\n110377: u64 [a4 + 0x8] = a2\n110380: u64 [a4 + 0x10] = a3\n110383: u64 [a4 + 0x18] = a1\n110386: ra = u64 [sp + 0x58]\n110389: s0 = u64 [sp + 0x50]\n110392: s1 = u64 [sp + 0x48]\n110395: sp = sp + 0x60\n110398: ret\n      : @1462 (gas: 1)\n110400: trap\n      : @1463 (gas: 23)\n110401: sp = sp + 0xfffffffffffffea0\n110405: u64 [sp + 0x158] = ra\n110409: u64 [sp + 0x150] = s0\n110413: u64 [sp + 0x148] = s1\n110417: s0 = sp + 0x160\n110421: sp = sp & 0xffffffffffffffe0\n110424: a2 = u64 [a1]\n110426: u64 [sp + 0x58] = a2\n110429: a2 = u64 [a1 + 0x8]\n110432: u64 [sp + 0x50] = a2\n110435: a2 = u64 [a1 + 0x10]\n110438: u64 [sp + 0x48] = a2\n110441: a1 = u64 [a1 + 0x18]\n110444: u64 [sp + 0x40] = a1\n110447: a1 = u64 [a0]\n110449: u64 [sp + 0x38] = a1\n110452: a1 = u64 [a0 + 0x10]\n110455: u64 [sp + 0x30] = a1\n110458: a0 = u64 [a0 + 0x8]\n110461: u64 [sp + 0x28] = a0\n110464: a0 = 0x40\n110467: a1 = 0x20\n110470: ra = 1260, jump @0\n      : @1464 [@dyn 630] (gas: 97)\n110477: a1 = u8 [a0 + 0x11]\n110480: a2 = u8 [a0 + 0x10]\n110483: a3 = u8 [a0 + 0x12]\n110486: a4 = u8 [a0 + 0x13]\n110489: a1 = a1 << 0x8\n110492: a1 = a1 | a2\n110495: a3 = a3 << 0x10\n110498: a4 = a4 << 0x18\n110501: a3 = a3 | a4\n110504: a1 = a1 | a3\n110507: a2 = u8 [a0 + 0x15]\n110510: a3 = u8 [a0 + 0x14]\n110513: a4 = u8 [a0 + 0x16]\n110516: a5 = u8 [a0 + 0x17]\n110519: a2 = a2 << 0x8\n110522: a2 = a2 | a3\n110525: a4 = a4 << 0x10\n110528: a5 = a5 << 0x18\n110531: a4 = a4 | a5\n110534: a2 = a2 | a4\n110537: a2 = a2 << 0x20\n110540: t0 = a2 | a1\n110543: a2 = u8 [a0 + 0x1]\n110546: a3 = u8 [a0]\n110548: a4 = u8 [a0 + 0x2]\n110551: a5 = u8 [a0 + 0x3]\n110554: a2 = a2 << 0x8\n110557: a2 = a2 | a3\n110560: a4 = a4 << 0x10\n110563: a5 = a5 << 0x18\n110566: a4 = a4 | a5\n110569: a2 = a2 | a4\n110572: a3 = u8 [a0 + 0x5]\n110575: a4 = u8 [a0 + 0x4]\n110578: a5 = u8 [a0 + 0x6]\n110581: s1 = u8 [a0 + 0x7]\n110584: a3 = a3 << 0x8\n110587: a3 = a3 | a4\n110590: a5 = a5 << 0x10\n110593: s1 = s1 << 0x18\n110596: a5 = a5 | s1\n110599: a3 = a3 | a5\n110602: a3 = a3 << 0x20\n110605: a2 = a2 | a3\n110608: a3 = u8 [a0 + 0x19]\n110611: a4 = u8 [a0 + 0x18]\n110614: a5 = u8 [a0 + 0x1a]\n110617: s1 = u8 [a0 + 0x1b]\n110620: a3 = a3 << 0x8\n110623: a3 = a3 | a4\n110626: a5 = a5 << 0x10\n110629: s1 = s1 << 0x18\n110632: a5 = a5 | s1\n110635: a3 = a3 | a5\n110638: a4 = u8 [a0 + 0x1d]\n110641: a5 = u8 [a0 + 0x1c]\n110644: s1 = u8 [a0 + 0x1e]\n110647: a1 = u8 [a0 + 0x1f]\n110650: a4 = a4 << 0x8\n110653: a4 = a4 | a5\n110656: s1 = s1 << 0x10\n110659: a1 = a1 << 0x18\n110662: a1 = a1 | s1\n110665: a1 = a1 | a4\n110668: a1 = a1 << 0x20\n110671: a3 = a3 | a1\n110674: a1 = u8 [a0 + 0x9]\n110677: a4 = u8 [a0 + 0x8]\n110680: a5 = u8 [a0 + 0xa]\n110683: s1 = u8 [a0 + 0xb]\n110686: a1 = a1 << 0x8\n110689: a1 = a1 | a4\n110692: a5 = a5 << 0x10\n110695: s1 = s1 << 0x18\n110698: a5 = a5 | s1\n110701: a1 = a1 | a5\n110704: a4 = u8 [a0 + 0xd]\n110707: a5 = u8 [a0 + 0xc]\n110710: s1 = u8 [a0 + 0xe]\n110713: a0 = u8 [a0 + 0xf]\n110716: a4 = a4 << 0x8\n110719: a4 = a4 | a5\n110722: s1 = s1 << 0x10\n110725: a0 = a0 << 0x18\n110728: a0 = a0 | s1\n110731: a0 = a0 | a4\n110734: a0 = a0 << 0x20\n110737: a0 = a0 | a1\n110740: s1 = reverse a0\n110742: a0 = reverse a3\n110744: u64 [sp + 0x10] = a0\n110747: a0 = reverse a2\n110749: u64 [sp + 0x20] = a0\n110752: a0 = reverse t0\n110754: u64 [sp + 0x18] = a0\n110757: ecalli 11 // 'ref_time_left'\n110759: fallthrough\n      : @1465 (gas: 36)\n110760: u64 [sp + 0x8] = a0\n110763: a0 = u64 [sp + 0x28]\n110766: a0 = reverse a0\n110768: a1 = u64 [sp + 0x30]\n110771: a1 = reverse a1\n110773: a1 = a1 >> 0x20\n110776: a2 = a0 << 0x20\n110779: a1 = a1 | a2\n110782: a0 = a0 >> 0x20\n110785: a2 = u64 [sp + 0x38]\n110788: a2 = reverse a2\n110790: a3 = a2 << 0x20\n110793: a0 = a0 | a3\n110796: u64 [sp + 0xc8] = a0\n110800: u64 [sp + 0xc0] = a1\n110804: a2 = a2 >> 0x20\n110807: u32 [sp + 0xd0] = a2\n110811: a2 = u64 [sp + 0x10]\n110814: a0 = u64 [sp + 0x40]\n110817: u64 [sp + 0xf8] = a0\n110821: a0 = u64 [sp + 0x48]\n110824: u64 [sp + 0xf0] = a0\n110828: a0 = u64 [sp + 0x50]\n110831: u64 [sp + 0xe8] = a0\n110835: a0 = u64 [sp + 0x20]\n110838: a1 = u64 [sp + 0x18]\n110841: a0 = a0 | a1\n110844: a1 = a2 | s1\n110847: a1 = a1 | a0\n110850: a0 = a0 | s1\n110853: a1 = a1 >> 0x20\n110856: a0 = a0 << 0x20\n110859: a0 = a0 | a1\n110862: a1 = u64 [sp + 0x58]\n110865: u64 [sp + 0xe0] = a1\n110869: jump @1476 if a0 != 0\n      : @1466 (gas: 3)\n110873: i32 a0 = a2 + 0\n110875: a1 = 0\n110877: ra = 1262, jump @0\n      : @1467 [@dyn 631] (gas: 4)\n110884: u64 [sp + 0x58] = a0\n110887: a0 = 0\n110889: a1 = 0\n110891: ra = 1264, jump @0\n      : @1468 [@dyn 632] (gas: 34)\n110898: u32 [sp + 256] = 0\n110902: a2 = u64 [sp + 0x8]\n110905: a1 = a2 >u 0x8fc\n110909: a2 = -a1\n110911: u64 [sp + 0x138] = a2\n110915: u64 [sp + 0x130] = a2\n110919: u64 [sp + 0x128] = a2\n110923: u64 [sp + 0x120] = a2\n110927: a2 = sp + 0xc0\n110931: a2 = a2 << 0x20\n110934: a2 = a2 >> 0x20\n110937: a1 = a1 << 0x23\n110940: s1 = a1 | a2\n110943: a1 = sp + 0xe0\n110947: a1 = a1 << 0x20\n110950: a1 = a1 >> 0x20\n110953: a2 = sp + 0x120\n110957: a2 = a2 << 0x20\n110960: a3 = a2 | a1\n110963: a4 = u64 [sp + 0x58]\n110966: a4 = a4 << 0x20\n110969: a4 = a4 >> 0x20\n110972: a0 = a0 << 0x20\n110975: a0 = a0 >> 0x20\n110978: a1 = sp + 0x100\n110982: a1 = a1 << 0x20\n110985: a5 = a1 | a0\n110988: a1 = 0xffffffffffffffff\n110991: a2 = 0xffffffffffffffff\n110994: a0 = s1\n110996: ecalli 1 // 'call'\n110998: s1 = a0\n111000: a0 = sp + 0xa0\n111004: ra = 1266, jump @1443\n      : @1469 [@dyn 633] (gas: 1)\n111010: jump @1471 if s1 != 0\n      : @1470 (gas: 6)\n111013: sp = s0 + 0xfffffffffffffea0\n111017: ra = u64 [sp + 0x158]\n111021: s0 = u64 [sp + 0x150]\n111025: s1 = u64 [sp + 0x148]\n111029: sp = sp + 0x160\n111033: ret\n      : @1471 (gas: 3)\n111035: a0 = 0x40\n111038: a1 = 0x20\n111041: ra = 1268, jump @0\n      : @1472 [@dyn 634] (gas: 103)\n111048: a1 = u8 [a0 + 0x11]\n111051: a2 = u8 [a0 + 0x10]\n111054: a3 = u8 [a0 + 0x12]\n111057: a4 = u8 [a0 + 0x13]\n111060: a1 = a1 << 0x8\n111063: a1 = a1 | a2\n111066: a3 = a3 << 0x10\n111069: a4 = a4 << 0x18\n111072: a3 = a3 | a4\n111075: a1 = a1 | a3\n111078: a2 = u8 [a0 + 0x15]\n111081: a3 = u8 [a0 + 0x14]\n111084: a4 = u8 [a0 + 0x16]\n111087: a5 = u8 [a0 + 0x17]\n111090: a2 = a2 << 0x8\n111093: a2 = a2 | a3\n111096: a4 = a4 << 0x10\n111099: a5 = a5 << 0x18\n111102: a4 = a4 | a5\n111105: a2 = a2 | a4\n111108: a2 = a2 << 0x20\n111111: t0 = a2 | a1\n111114: a2 = u8 [a0 + 0x1]\n111117: a3 = u8 [a0]\n111119: a4 = u8 [a0 + 0x2]\n111122: a5 = u8 [a0 + 0x3]\n111125: a2 = a2 << 0x8\n111128: a2 = a2 | a3\n111131: a4 = a4 << 0x10\n111134: a5 = a5 << 0x18\n111137: a4 = a4 | a5\n111140: a2 = a2 | a4\n111143: a3 = u8 [a0 + 0x5]\n111146: a4 = u8 [a0 + 0x4]\n111149: a5 = u8 [a0 + 0x6]\n111152: s1 = u8 [a0 + 0x7]\n111155: a3 = a3 << 0x8\n111158: a3 = a3 | a4\n111161: a5 = a5 << 0x10\n111164: s1 = s1 << 0x18\n111167: a5 = a5 | s1\n111170: a3 = a3 | a5\n111173: a3 = a3 << 0x20\n111176: a2 = a2 | a3\n111179: a3 = u8 [a0 + 0x19]\n111182: a4 = u8 [a0 + 0x18]\n111185: a5 = u8 [a0 + 0x1a]\n111188: s1 = u8 [a0 + 0x1b]\n111191: a3 = a3 << 0x8\n111194: a3 = a3 | a4\n111197: a5 = a5 << 0x10\n111200: s1 = s1 << 0x18\n111203: a5 = a5 | s1\n111206: a3 = a3 | a5\n111209: a4 = u8 [a0 + 0x1d]\n111212: a5 = u8 [a0 + 0x1c]\n111215: s1 = u8 [a0 + 0x1e]\n111218: a1 = u8 [a0 + 0x1f]\n111221: a4 = a4 << 0x8\n111224: a4 = a4 | a5\n111227: s1 = s1 << 0x10\n111230: a1 = a1 << 0x18\n111233: a1 = a1 | s1\n111236: a1 = a1 | a4\n111239: a1 = a1 << 0x20\n111242: a3 = a3 | a1\n111245: a1 = u8 [a0 + 0x9]\n111248: a4 = u8 [a0 + 0x8]\n111251: a5 = u8 [a0 + 0xa]\n111254: s1 = u8 [a0 + 0xb]\n111257: a1 = a1 << 0x8\n111260: a1 = a1 | a4\n111263: a5 = a5 << 0x10\n111266: s1 = s1 << 0x18\n111269: a5 = a5 | s1\n111272: a1 = a1 | a5\n111275: a4 = u8 [a0 + 0xd]\n111278: a5 = u8 [a0 + 0xc]\n111281: s1 = u8 [a0 + 0xe]\n111284: a0 = u8 [a0 + 0xf]\n111287: a4 = a4 << 0x8\n111290: a4 = a4 | a5\n111293: s1 = s1 << 0x10\n111296: a0 = a0 << 0x18\n111299: a0 = a0 | s1\n111302: a0 = a0 | a4\n111305: a0 = a0 << 0x20\n111308: a0 = a0 | a1\n111311: s1 = reverse a0\n111313: a1 = reverse a3\n111315: a2 = reverse a2\n111317: a0 = reverse t0\n111319: u64 [sp + 0x58] = a0\n111322: u64 [sp + 0x50] = a2\n111325: a0 = a0 | a2\n111328: a2 = a1\n111330: a1 = a1 | s1\n111333: a1 = a1 | a0\n111336: a1 = a1 >> 0x20\n111339: a0 = a0 | s1\n111342: a0 = a0 << 0x20\n111345: a0 = a0 | a1\n111348: jump @1476 if a0 != 0\n      : @1473 (gas: 5)\n111352: u64 [sp + 0x48] = a2\n111355: i32 a0 = a2 + 0\n111357: a1 = 0x20\n111360: u64 [sp + 0x40] = a0\n111363: ra = 1270, jump @0\n      : @1474 [@dyn 635] (gas: 50)\n111370: u8 [a0 + 31] = 0\n111373: u8 [a0 + 30] = 0\n111376: u8 [a0 + 29] = 0\n111379: u8 [a0 + 28] = 0\n111382: u8 [a0 + 27] = 0\n111385: u8 [a0 + 26] = 0\n111388: u8 [a0 + 25] = 0\n111391: u8 [a0 + 24] = 0\n111394: u8 [a0 + 23] = 0\n111397: u8 [a0 + 22] = 0\n111400: u8 [a0 + 21] = 0\n111403: u8 [a0 + 20] = 0\n111406: u8 [a0 + 19] = 0\n111409: u8 [a0 + 18] = 0\n111412: u8 [a0 + 17] = 0\n111415: u8 [a0 + 16] = 0\n111418: u8 [a0 + 15] = 0\n111421: u8 [a0 + 14] = 0\n111424: u8 [a0 + 13] = 0\n111427: u8 [a0 + 12] = 0\n111430: u8 [a0 + 11] = 0\n111433: u8 [a0 + 10] = 0\n111436: u8 [a0 + 9] = 0\n111439: u8 [a0 + 8] = 0\n111442: u8 [a0 + 7] = 0\n111445: u8 [a0 + 6] = 0\n111448: u8 [a0 + 5] = 0\n111451: u8 [a0 + 4] = 0\n111454: u8 [a0 + 3] = 0xa0\n111459: u8 [a0 + 2] = 0x79\n111463: u8 [a0 + 1] = 0xc3\n111468: u8 [a0 + 0] = 0x8\n111471: a1 = u64 [sp + 0x48]\n111474: a0 = a1 + 0x4\n111477: a1 = a0 <u a1\n111480: a3 = u64 [sp + 0x58]\n111483: a2 = a3 + a1\n111486: a3 = a2 <u a3\n111489: a3 = a1 if a1 == 0\n111492: a3 = a3 + s1\n111495: a1 = a3 <u s1\n111498: a4 = u64 [sp + 0x50]\n111501: a4 = a4 + a1\n111504: u64 [sp + 0x68] = a2\n111507: u64 [sp + 0x60] = a0\n111510: u64 [sp + 0x70] = a3\n111513: a0 = sp + 0x80\n111517: a1 = sp + 0x60\n111520: u64 [sp + 0x78] = a4\n111523: ra = 1272, jump @1455\n      : @1475 [@dyn 636] (gas: 30)\n111529: a0 = u64 [sp + 0x88]\n111533: t0 = u64 [sp + 0x98]\n111537: t1 = u64 [sp + 0x80]\n111541: a3 = u64 [sp + 0x90]\n111545: a1 = u64 [sp + 0x58]\n111548: a4 = a0 ^ a1\n111551: a5 = a0 <u a1\n111554: t2 = a1\n111556: a2 = u64 [sp + 0x48]\n111559: a1 = t1 <u a2\n111562: a5 = a1 if a4 == 0\n111565: a4 = a3 - s1\n111568: a3 = a3 <u s1\n111571: s1 = u64 [sp + 0x50]\n111574: s1 = t0 - s1\n111577: s1 = s1 - a3\n111580: a3 = a4 <u a5\n111583: s1 = s1 - a3\n111586: a4 = a4 - a5\n111589: a0 = a0 - t2\n111592: a1 = a0 - a1\n111595: a0 = t1 - a2\n111598: a1 = a1 | s1\n111601: a2 = a0 | a4\n111604: a2 = a2 | a1\n111607: a1 = a1 | a4\n111610: a2 = a2 >> 0x20\n111613: a1 = a1 << 0x20\n111616: a1 = a1 | a2\n111619: jump @1477 if a1 == 0\n      : @1476 (gas: 1)\n111622: trap\n      : @1477 (gas: 4)\n111623: i32 s1 = a0 + 0\n111625: a0 = u64 [sp + 0x40]\n111628: a1 = s1\n111630: ra = 1274, jump @0\n      : @1478 [@dyn 637] (gas: 6)\n111637: i32 a1 = a0 + 0\n111639: a0 = 0x1\n111642: a2 = s1\n111644: ra = 0x4fc\n111648: ecalli 14 // 'seal_return'\n111650: fallthrough\n      : @1479 [@dyn 638] (gas: 9)\n111651: a2 = u64 [a1 + 0x18]\n111654: a3 = u64 [a1 + 0x10]\n111657: a4 = u64 [a1 + 0x8]\n111660: a1 = u64 [a1]\n111662: u64 [a0 + 0x18] = a2\n111665: u64 [a0 + 0x10] = a3\n111668: u64 [a0 + 0x8] = a4\n111671: u64 [a0] = a1\n111673: ret\n      : @1480 (gas: 20)\n111675: sp = sp + 0xffffffffffffff50\n111679: u64 [sp + 0xa8] = ra\n111683: u64 [sp + 0xa0] = s0\n111687: u64 [sp + 0x98] = s1\n111691: s1 = u64 [a1 + 0x10]\n111694: t0 = u64 [a1 + 0x18]\n111697: s0 = u64 [a1 + 0x8]\n111700: a1 = u64 [a1]\n111702: u64 [sp + 0x88] = s0\n111706: u64 [sp + 0x70] = t0\n111709: t0 = s0 | t0\n111712: u64 [sp + 0x90] = a1\n111716: s0 = a1 | s1\n111719: s0 = s0 | t0\n111722: s0 = s0 >> 0x20\n111725: u64 [sp + 0x78] = s1\n111728: a1 = t0 | s1\n111731: a1 = a1 << 0x20\n111734: a1 = a1 | s0\n111737: jump @1491 if a1 != 0\n      : @1481 (gas: 29)\n111741: u64 [sp + 0x20] = a0\n111744: a0 = u64 [a5 + 0x18]\n111747: u64 [sp] = a0\n111749: a0 = u64 [a5 + 0x10]\n111752: u64 [sp + 0x8] = a0\n111755: a0 = u64 [a5 + 0x8]\n111758: u64 [sp + 0x10] = a0\n111761: a0 = u64 [a5]\n111763: u64 [sp + 0x18] = a0\n111766: a0 = u64 [a4 + 0x18]\n111769: u64 [sp + 0x28] = a0\n111772: a0 = u64 [a4 + 0x10]\n111775: u64 [sp + 0x30] = a0\n111778: a0 = u64 [a4 + 0x8]\n111781: u64 [sp + 0x38] = a0\n111784: a0 = u64 [a4]\n111786: u64 [sp + 0x40] = a0\n111789: a0 = u64 [a3]\n111791: u64 [sp + 0x48] = a0\n111794: a0 = u64 [a2 + 0x10]\n111797: u64 [sp + 0x60] = a0\n111800: a0 = u64 [a2 + 0x8]\n111803: u64 [sp + 0x58] = a0\n111806: a0 = u64 [a2]\n111808: u64 [sp + 0x50] = a0\n111811: s1 = i32 [sp + 0x90]\n111815: a1 = 0x20\n111818: a0 = s1\n111820: ra = 1278, jump @0\n      : @1482 [@dyn 639] (gas: 44)\n111827: u8 [a0 + 31] = 0\n111830: u8 [a0 + 30] = 0\n111833: u8 [a0 + 29] = 0\n111836: u8 [a0 + 28] = 0\n111839: u8 [a0 + 27] = 0\n111842: u8 [a0 + 26] = 0\n111845: u8 [a0 + 25] = 0\n111848: u8 [a0 + 24] = 0\n111851: u8 [a0 + 23] = 0\n111854: u8 [a0 + 22] = 0\n111857: u8 [a0 + 21] = 0\n111860: u8 [a0 + 20] = 0\n111863: u8 [a0 + 19] = 0\n111866: u8 [a0 + 18] = 0\n111869: u8 [a0 + 17] = 0\n111872: u8 [a0 + 16] = 0\n111875: u8 [a0 + 15] = 0\n111878: u8 [a0 + 14] = 0\n111881: u8 [a0 + 13] = 0\n111884: u8 [a0 + 12] = 0\n111887: u8 [a0 + 11] = 0\n111890: u8 [a0 + 10] = 0\n111893: u8 [a0 + 9] = 0\n111896: u8 [a0 + 8] = 0\n111899: u8 [a0 + 7] = 0\n111902: u8 [a0 + 6] = 0\n111905: u8 [a0 + 5] = 0\n111908: u8 [a0 + 4] = 0\n111911: u8 [a0 + 3] = 0\n111914: u8 [a0 + 2] = 0\n111917: u8 [a0 + 0] = 0x19\n111920: a1 = u64 [sp + 0x78]\n111923: a3 = u64 [sp + 0x70]\n111926: a3 = a3 | a1\n111929: s0 = 0x100000000\n111939: a1 = 0xfffffffe\n111949: a2 = u64 [sp + 0x90]\n111953: a1 = a2 <u a1\n111956: a2 = u64 [sp + 0x88]\n111960: a1 = 0 if a2 != 0\n111962: u64 [sp + 0x80] = a3\n111966: a1 = 0 if a3 != 0\n111968: u8 [a0 + 1] = 0\n111971: jump @1491 if a1 == 0\n      : @1483 (gas: 4)\n111975: u64 [sp + 0x68] = s1\n111978: i32 a0 = s1 + 0x2\n111981: a1 = 0x20\n111984: ra = 1280, jump @0\n      : @1484 [@dyn 640] (gas: 64)\n111991: a1 = u64 [sp + 0x50]\n111994: s1 = reverse a1\n111996: a1 = u64 [sp + 0x58]\n111999: a3 = reverse a1\n112001: a1 = u64 [sp + 0x60]\n112004: a2 = reverse a1\n112006: t0 = a2 >> 0x20\n112009: a4 = a3 >> 0x20\n112012: a1 = s1 >> 0x20\n112015: u8 [a0 + 31] = 0\n112018: u8 [a0 + 30] = 0\n112021: u8 [a0 + 29] = 0\n112024: u8 [a0 + 28] = 0\n112027: u8 [a0 + 27] = 0\n112030: u8 [a0 + 26] = 0\n112033: u8 [a0 + 25] = 0\n112036: u8 [a0 + 24] = 0\n112039: u8 [a0 + 23] = 0\n112042: u8 [a0 + 22] = 0\n112045: u8 [a0 + 21] = 0\n112048: u8 [a0 + 20] = 0\n112051: a5 = s1 >> 0x38\n112054: u8 [a0 + 0x13] = a5\n112057: a5 = s1 >> 0x30\n112060: u8 [a0 + 0x12] = a5\n112063: a5 = s1 >> 0x28\n112066: u8 [a0 + 0x11] = a5\n112069: u8 [a0 + 0x10] = a1\n112072: a1 = s1 >> 0x18\n112075: u8 [a0 + 0xf] = a1\n112078: a1 = s1 >> 0x10\n112081: u8 [a0 + 0xe] = a1\n112084: a1 = s1 >> 0x8\n112087: u8 [a0 + 0xd] = a1\n112090: u8 [a0 + 0xc] = s1\n112093: u8 [a0 + 0x4] = a3\n112096: a1 = a3 >> 0x38\n112099: u8 [a0 + 0xb] = a1\n112102: a1 = a3 >> 0x30\n112105: u8 [a0 + 0xa] = a1\n112108: a1 = a3 >> 0x28\n112111: u8 [a0 + 0x9] = a1\n112114: u8 [a0 + 0x8] = a4\n112117: a1 = a3 >> 0x18\n112120: u8 [a0 + 0x7] = a1\n112123: a1 = a3 >> 0x10\n112126: u8 [a0 + 0x6] = a1\n112129: a3 = a3 >> 0x8\n112132: u8 [a0 + 0x5] = a3\n112135: a1 = a2 >> 0x38\n112138: u8 [a0 + 0x3] = a1\n112141: a1 = a2 >> 0x30\n112144: u8 [a0 + 0x2] = a1\n112147: a2 = a2 >> 0x28\n112150: u8 [a0 + 0x1] = a2\n112153: s0 = s0 + 0xffffffffffffffea\n112156: a1 = u64 [sp + 0x90]\n112160: a1 = a1 <u s0\n112163: a2 = u64 [sp + 0x88]\n112167: a1 = 0 if a2 != 0\n112169: a2 = u64 [sp + 0x80]\n112173: a1 = 0 if a2 != 0\n112175: u8 [a0] = t0\n112177: jump @1491 if a1 == 0\n      : @1485 (gas: 4)\n112181: s1 = u64 [sp + 0x68]\n112184: i32 a0 = s1 + 0x16\n112187: a1 = 0x20\n112190: ra = 1282, jump @0\n      : @1486 [@dyn 641] (gas: 50)\n112197: a1 = u64 [sp + 0x48]\n112200: a1 = reverse a1\n112202: u8 [a0 + 31] = 0\n112205: u8 [a0 + 30] = 0\n112208: u8 [a0 + 29] = 0\n112211: u8 [a0 + 28] = 0\n112214: u8 [a0 + 27] = 0\n112217: u8 [a0 + 26] = 0\n112220: u8 [a0 + 25] = 0\n112223: u8 [a0 + 24] = 0\n112226: u8 [a0 + 23] = 0\n112229: u8 [a0 + 22] = 0\n112232: u8 [a0 + 21] = 0\n112235: u8 [a0 + 20] = 0\n112238: u8 [a0 + 19] = 0\n112241: u8 [a0 + 18] = 0\n112244: u8 [a0 + 17] = 0\n112247: u8 [a0 + 16] = 0\n112250: u8 [a0 + 15] = 0\n112253: u8 [a0 + 14] = 0\n112256: u8 [a0 + 13] = 0\n112259: u8 [a0 + 12] = 0\n112262: u8 [a0 + 11] = 0\n112265: u8 [a0 + 10] = 0\n112268: u8 [a0 + 9] = 0\n112271: a2 = a1 >> 0x38\n112274: u8 [a0 + 0x7] = a2\n112277: a2 = a1 >> 0x30\n112280: u8 [a0 + 0x6] = a2\n112283: a2 = a1 >> 0x28\n112286: u8 [a0 + 0x5] = a2\n112289: a2 = a1 >> 0x20\n112292: u8 [a0 + 0x4] = a2\n112295: a2 = a1 >> 0x18\n112298: u8 [a0 + 0x3] = a2\n112301: a2 = a1 >> 0x10\n112304: u8 [a0 + 0x2] = a2\n112307: a2 = a1 >> 0x8\n112310: u8 [a0 + 0x1] = a2\n112313: u8 [a0] = a1\n112315: s0 = 0x100000000\n112325: a1 = 0xffffffe2\n112335: a2 = u64 [sp + 0x90]\n112339: a1 = a2 <u a1\n112342: a2 = u64 [sp + 0x88]\n112346: a1 = 0 if a2 != 0\n112348: a2 = u64 [sp + 0x80]\n112352: a1 = 0 if a2 != 0\n112354: u8 [a0 + 8] = 0\n112357: jump @1491 if a1 == 0\n      : @1487 (gas: 3)\n112361: i32 a0 = s1 + 0x1e\n112364: a1 = 0x20\n112367: ra = 1284, jump @0\n      : @1488 [@dyn 642] (gas: 78)\n112374: a1 = u64 [sp + 0x28]\n112377: a1 = reverse a1\n112379: a2 = u64 [sp + 0x30]\n112382: a2 = reverse a2\n112384: a3 = u64 [sp + 0x38]\n112387: a3 = reverse a3\n112389: a4 = u64 [sp + 0x40]\n112392: a4 = reverse a4\n112394: a5 = a4 >> 0x38\n112397: u8 [a0 + 0x1f] = a5\n112400: a5 = a4 >> 0x30\n112403: u8 [a0 + 0x1e] = a5\n112406: a5 = a4 >> 0x28\n112409: u8 [a0 + 0x1d] = a5\n112412: a5 = a4 >> 0x20\n112415: u8 [a0 + 0x1c] = a5\n112418: a5 = a4 >> 0x18\n112421: u8 [a0 + 0x1b] = a5\n112424: a5 = a4 >> 0x10\n112427: u8 [a0 + 0x1a] = a5\n112430: a5 = a4 >> 0x8\n112433: u8 [a0 + 0x19] = a5\n112436: u8 [a0 + 0x18] = a4\n112439: u8 [a0 + 0x10] = a3\n112442: a4 = a3 >> 0x38\n112445: u8 [a0 + 0x17] = a4\n112448: a4 = a3 >> 0x30\n112451: u8 [a0 + 0x16] = a4\n112454: a4 = a3 >> 0x28\n112457: u8 [a0 + 0x15] = a4\n112460: a4 = a3 >> 0x20\n112463: u8 [a0 + 0x14] = a4\n112466: a4 = a3 >> 0x18\n112469: u8 [a0 + 0x13] = a4\n112472: a4 = a3 >> 0x10\n112475: u8 [a0 + 0x12] = a4\n112478: a3 = a3 >> 0x8\n112481: u8 [a0 + 0x11] = a3\n112484: u8 [a0 + 0x8] = a2\n112487: a3 = a2 >> 0x38\n112490: u8 [a0 + 0xf] = a3\n112493: a3 = a2 >> 0x30\n112496: u8 [a0 + 0xe] = a3\n112499: a3 = a2 >> 0x28\n112502: u8 [a0 + 0xd] = a3\n112505: a3 = a2 >> 0x20\n112508: u8 [a0 + 0xc] = a3\n112511: a3 = a2 >> 0x18\n112514: u8 [a0 + 0xb] = a3\n112517: a3 = a2 >> 0x10\n112520: u8 [a0 + 0xa] = a3\n112523: a2 = a2 >> 0x8\n112526: u8 [a0 + 0x9] = a2\n112529: u8 [a0] = a1\n112531: a2 = a1 >> 0x38\n112534: u8 [a0 + 0x7] = a2\n112537: a2 = a1 >> 0x30\n112540: u8 [a0 + 0x6] = a2\n112543: a2 = a1 >> 0x28\n112546: u8 [a0 + 0x5] = a2\n112549: a2 = a1 >> 0x20\n112552: u8 [a0 + 0x4] = a2\n112555: a2 = a1 >> 0x18\n112558: u8 [a0 + 0x3] = a2\n112561: a2 = a1 >> 0x10\n112564: u8 [a0 + 0x2] = a2\n112567: a1 = a1 >> 0x8\n112570: a2 = s0 + 0xffffffffffffffc2\n112573: a3 = u64 [sp + 0x90]\n112577: a2 = a3 <u a2\n112580: a3 = u64 [sp + 0x88]\n112584: a2 = 0 if a3 != 0\n112586: a3 = u64 [sp + 0x80]\n112590: a2 = 0 if a3 != 0\n112592: u8 [a0 + 0x1] = a1\n112595: s0 = u64 [sp + 0x78]\n112598: s1 = u64 [sp + 0x70]\n112601: jump @1491 if a2 == 0\n      : @1489 (gas: 4)\n112605: a0 = u64 [sp + 0x68]\n112608: i32 a0 = a0 + 0x3e\n112611: a1 = 0x20\n112614: ra = 1286, jump @0\n      : @1490 [@dyn 643] (gas: 88)\n112621: a1 = u64 [sp]\n112623: a1 = reverse a1\n112625: a2 = u64 [sp + 0x8]\n112628: a2 = reverse a2\n112630: a3 = u64 [sp + 0x10]\n112633: a3 = reverse a3\n112635: a4 = u64 [sp + 0x18]\n112638: a4 = reverse a4\n112640: a5 = a4 >> 0x38\n112643: u8 [a0 + 0x1f] = a5\n112646: a5 = a4 >> 0x30\n112649: u8 [a0 + 0x1e] = a5\n112652: a5 = a4 >> 0x28\n112655: u8 [a0 + 0x1d] = a5\n112658: a5 = a4 >> 0x20\n112661: u8 [a0 + 0x1c] = a5\n112664: a5 = a4 >> 0x18\n112667: u8 [a0 + 0x1b] = a5\n112670: a5 = a4 >> 0x10\n112673: u8 [a0 + 0x1a] = a5\n112676: a5 = a4 >> 0x8\n112679: u8 [a0 + 0x19] = a5\n112682: u8 [a0 + 0x18] = a4\n112685: u8 [a0 + 0x10] = a3\n112688: a4 = a3 >> 0x38\n112691: u8 [a0 + 0x17] = a4\n112694: a4 = a3 >> 0x30\n112697: u8 [a0 + 0x16] = a4\n112700: a4 = a3 >> 0x28\n112703: u8 [a0 + 0x15] = a4\n112706: a4 = a3 >> 0x20\n112709: u8 [a0 + 0x14] = a4\n112712: a4 = a3 >> 0x18\n112715: u8 [a0 + 0x13] = a4\n112718: a4 = a3 >> 0x10\n112721: u8 [a0 + 0x12] = a4\n112724: a3 = a3 >> 0x8\n112727: u8 [a0 + 0x11] = a3\n112730: u8 [a0 + 0x8] = a2\n112733: a3 = a2 >> 0x38\n112736: u8 [a0 + 0xf] = a3\n112739: a3 = a2 >> 0x30\n112742: u8 [a0 + 0xe] = a3\n112745: a3 = a2 >> 0x28\n112748: u8 [a0 + 0xd] = a3\n112751: a3 = a2 >> 0x20\n112754: u8 [a0 + 0xc] = a3\n112757: a3 = a2 >> 0x18\n112760: u8 [a0 + 0xb] = a3\n112763: a3 = a2 >> 0x10\n112766: u8 [a0 + 0xa] = a3\n112769: a2 = a2 >> 0x8\n112772: u8 [a0 + 0x9] = a2\n112775: u8 [a0] = a1\n112777: a2 = a1 >> 0x38\n112780: u8 [a0 + 0x7] = a2\n112783: a2 = a1 >> 0x30\n112786: u8 [a0 + 0x6] = a2\n112789: a2 = a1 >> 0x28\n112792: u8 [a0 + 0x5] = a2\n112795: a2 = a1 >> 0x20\n112798: u8 [a0 + 0x4] = a2\n112801: a2 = a1 >> 0x18\n112804: u8 [a0 + 0x3] = a2\n112807: a2 = a1 >> 0x10\n112810: u8 [a0 + 0x2] = a2\n112813: a1 = a1 >> 0x8\n112816: u8 [a0 + 0x1] = a1\n112819: a1 = u64 [sp + 0x90]\n112823: a0 = a1 + 0x5e\n112826: a1 = a0 <u a1\n112829: a3 = u64 [sp + 0x88]\n112833: a2 = a3 + a1\n112836: a3 = a2 <u a3\n112839: a3 = a1 if a1 == 0\n112842: a3 = a3 + s0\n112845: a1 = a3 <u s0\n112848: a1 = a1 + s1\n112851: a4 = u64 [sp + 0x20]\n112854: u64 [a4] = a0\n112856: u64 [a4 + 0x8] = a2\n112859: u64 [a4 + 0x10] = a3\n112862: u64 [a4 + 0x18] = a1\n112865: ra = u64 [sp + 0xa8]\n112869: s0 = u64 [sp + 0xa0]\n112873: s1 = u64 [sp + 0x98]\n112877: sp = sp + 0xb0\n112881: ret\n      : @1491 (gas: 1)\n112883: trap\n      : @1492 (gas: 23)\n112884: sp = sp + 0xfffffffffffffe20\n112888: u64 [sp + 0x1d8] = ra\n112892: u64 [sp + 0x1d0] = s0\n112896: u64 [sp + 0x1c8] = s1\n112900: s0 = sp + 0x1e0\n112904: sp = sp & 0xffffffffffffffe0\n112907: s1 = sp\n112909: t1 = u64 [a3 + 0x10]\n112912: t2 = u64 [a3 + 0x18]\n112915: a5 = u64 [a3 + 0x8]\n112918: t0 = u64 [a3]\n112920: u64 [s1 + 0x98] = a5\n112924: u64 [s1 + 0x88] = t2\n112928: a3 = a5 | t2\n112931: a5 = t0 | t1\n112934: a5 = a5 | a3\n112937: a5 = a5 >> 0x20\n112940: u64 [s1 + 0x90] = t1\n112944: a3 = a3 | t1\n112947: a3 = a3 << 0x20\n112950: a3 = a3 | a5\n112953: u64 [s1 + 0x30] = a0\n112956: jump @1515 if a3 != 0\n      : @1493 (gas: 29)\n112960: a0 = u64 [a4 + 0x18]\n112963: u64 [s1 + 0xa8] = a0\n112967: a0 = u64 [a4 + 0x10]\n112970: u64 [s1 + 0xa0] = a0\n112974: a0 = u64 [a4 + 0x8]\n112977: u64 [s1 + 0xb8] = a0\n112981: a0 = u64 [a4]\n112983: u64 [s1 + 0xb0] = a0\n112987: a0 = u64 [a2 + 0x18]\n112990: u64 [s1 + 0x38] = a0\n112993: a0 = u64 [a2 + 0x10]\n112996: u64 [s1 + 0x40] = a0\n112999: a0 = u64 [a2 + 0x8]\n113002: u64 [s1 + 0x48] = a0\n113005: a0 = u64 [a2]\n113007: u64 [s1 + 0x50] = a0\n113010: a0 = u64 [a1 + 0x18]\n113013: u64 [s1 + 0x58] = a0\n113016: a0 = u64 [a1 + 0x10]\n113019: u64 [s1 + 0x60] = a0\n113022: a0 = u64 [a1 + 0x8]\n113025: u64 [s1 + 0x68] = a0\n113028: a0 = u64 [a1]\n113030: u64 [s1 + 0x70] = a0\n113033: i32 a0 = t0 + 0\n113035: a1 = 0x20\n113038: u64 [s1 + 0x78] = a0\n113041: u64 [s1 + 0x80] = t0\n113045: ra = 1288, jump @0\n      : @1494 [@dyn 644] (gas: 10)\n113052: a1 = u64 [s1 + 0x90]\n113056: a2 = u64 [s1 + 0x88]\n113060: a1 = a1 | a2\n113063: a2 = 0xffffffe0\n113073: a3 = u64 [s1 + 0x80]\n113077: a2 = a3 <u a2\n113080: a3 = u64 [s1 + 0x98]\n113084: a2 = 0 if a3 != 0\n113086: a2 = 0 if a1 != 0\n113088: jump @1515 if a2 == 0\n      : @1495 (gas: 100)\n113092: a1 = u8 [a0 + 0x19]\n113095: a2 = u8 [a0 + 0x18]\n113098: a3 = u8 [a0 + 0x1a]\n113101: a4 = u8 [a0 + 0x1b]\n113104: a1 = a1 << 0x8\n113107: a1 = a1 | a2\n113110: a3 = a3 << 0x10\n113113: a4 = a4 << 0x18\n113116: a3 = a3 | a4\n113119: a1 = a1 | a3\n113122: a2 = u8 [a0 + 0x1d]\n113125: a3 = u8 [a0 + 0x1c]\n113128: a4 = u8 [a0 + 0x1e]\n113131: a5 = u8 [a0 + 0x1f]\n113134: a2 = a2 << 0x8\n113137: a2 = a2 | a3\n113140: a4 = a4 << 0x10\n113143: a5 = a5 << 0x18\n113146: a4 = a4 | a5\n113149: a2 = a2 | a4\n113152: a2 = a2 << 0x20\n113155: t0 = a2 | a1\n113158: a2 = u8 [a0 + 0x11]\n113161: a3 = u8 [a0 + 0x10]\n113164: a4 = u8 [a0 + 0x12]\n113167: a5 = u8 [a0 + 0x13]\n113170: a2 = a2 << 0x8\n113173: a2 = a2 | a3\n113176: a4 = a4 << 0x10\n113179: a5 = a5 << 0x18\n113182: a4 = a4 | a5\n113185: a2 = a2 | a4\n113188: a3 = u8 [a0 + 0x15]\n113191: a4 = u8 [a0 + 0x14]\n113194: a5 = u8 [a0 + 0x16]\n113197: a1 = u8 [a0 + 0x17]\n113200: a3 = a3 << 0x8\n113203: a3 = a3 | a4\n113206: a5 = a5 << 0x10\n113209: a1 = a1 << 0x18\n113212: a1 = a1 | a5\n113215: a1 = a1 | a3\n113218: a1 = a1 << 0x20\n113221: t1 = a1 | a2\n113224: a1 = u8 [a0 + 0x9]\n113227: a3 = u8 [a0 + 0x8]\n113230: a4 = u8 [a0 + 0xa]\n113233: a5 = u8 [a0 + 0xb]\n113236: a1 = a1 << 0x8\n113239: a1 = a1 | a3\n113242: a4 = a4 << 0x10\n113245: a5 = a5 << 0x18\n113248: a4 = a4 | a5\n113251: a1 = a1 | a4\n113254: a3 = u8 [a0 + 0xd]\n113257: a4 = u8 [a0 + 0xc]\n113260: a5 = u8 [a0 + 0xe]\n113263: a2 = u8 [a0 + 0xf]\n113266: a3 = a3 << 0x8\n113269: a3 = a3 | a4\n113272: a5 = a5 << 0x10\n113275: a2 = a2 << 0x18\n113278: a2 = a2 | a5\n113281: a2 = a2 | a3\n113284: a2 = a2 << 0x20\n113287: a3 = a2 | a1\n113290: a1 = u8 [a0 + 0x1]\n113293: a2 = u8 [a0]\n113295: a4 = u8 [a0 + 0x2]\n113298: a5 = u8 [a0 + 0x3]\n113301: a1 = a1 << 0x8\n113304: a1 = a1 | a2\n113307: a4 = a4 << 0x10\n113310: a5 = a5 << 0x18\n113313: a4 = a4 | a5\n113316: a1 = a1 | a4\n113319: a2 = u8 [a0 + 0x5]\n113322: a4 = u8 [a0 + 0x4]\n113325: a5 = u8 [a0 + 0x6]\n113328: a0 = u8 [a0 + 0x7]\n113331: a2 = a2 << 0x8\n113334: a2 = a2 | a4\n113337: a5 = a5 << 0x10\n113340: a0 = a0 << 0x18\n113343: a0 = a0 | a5\n113346: a0 = a0 | a2\n113349: a0 = a0 << 0x20\n113352: a0 = a0 | a1\n113355: a0 = reverse a0\n113357: a2 = reverse a3\n113359: a3 = reverse t1\n113361: a1 = reverse t0\n113363: a4 = a1 | a2\n113366: a0 = a0 | a3\n113369: a4 = a4 | a0\n113372: a4 = a4 >> 0x20\n113375: a0 = a0 | a2\n113378: a0 = a0 << 0x20\n113381: a0 = a0 | a4\n113384: jump @1515 if a0 != 0\n      : @1496 (gas: 5)\n113388: a0 = u64 [s1 + 0x78]\n113391: i32 a0 = a0 + 0x20\n113394: i32 a1 = a1 + 0\n113396: u64 [s1 + 0x98] = a1\n113400: ra = 1290, jump @0\n      : @1497 [@dyn 645] (gas: 9)\n113407: a1 = sp + 0xffffffffffffffe0\n113410: a1 = a1 & 0xffffffffffffffe0\n113413: sp = a1\n113415: i32 a0 = a0 + 0\n113417: u64 [s1 + 0x90] = a1\n113421: i32 a2 = a1 + 0\n113423: a1 = u64 [s1 + 0x98]\n113427: ecalli 9 // 'hash_keccak_256'\n113429: fallthrough\n      : @1498 (gas: 12)\n113430: a2 = u64 [s1 + 0xb0]\n113434: a3 = u64 [s1 + 0xa0]\n113438: a0 = a2 | a3\n113441: a1 = u64 [s1 + 0xb8]\n113445: a4 = u64 [s1 + 0xa8]\n113449: a1 = a1 | a4\n113452: a0 = a0 | a1\n113455: a0 = a0 >> 0x20\n113458: a1 = a1 | a3\n113461: a1 = a1 << 0x20\n113464: a0 = a0 | a1\n113467: jump @1515 if a0 != 0\n      : @1499 (gas: 13)\n113471: a1 = u64 [s1 + 0x90]\n113475: a0 = u64 [a1 + 0x18]\n113478: u64 [s1 + 0x98] = a0\n113482: a0 = u64 [a1 + 0x10]\n113485: u64 [s1 + 0x88] = a0\n113489: a0 = u64 [a1 + 0x8]\n113492: u64 [s1 + 0x80] = a0\n113496: a0 = u64 [a1]\n113498: u64 [s1 + 0x78] = a0\n113501: i32 a0 = a2 + 0\n113503: a1 = 0x20\n113506: u64 [s1 + 0x90] = a0\n113510: ra = 1292, jump @0\n      : @1500 [@dyn 646] (gas: 10)\n113517: a1 = u64 [s1 + 0xa0]\n113521: a2 = u64 [s1 + 0xa8]\n113525: a1 = a1 | a2\n113528: a2 = 0xffffffe0\n113538: a3 = u64 [s1 + 0xb0]\n113542: a2 = a3 <u a2\n113545: a3 = u64 [s1 + 0xb8]\n113549: a2 = 0 if a3 != 0\n113551: a2 = 0 if a1 != 0\n113553: jump @1515 if a2 == 0\n      : @1501 (gas: 100)\n113557: a1 = u8 [a0 + 0x19]\n113560: a2 = u8 [a0 + 0x18]\n113563: a3 = u8 [a0 + 0x1a]\n113566: a4 = u8 [a0 + 0x1b]\n113569: a1 = a1 << 0x8\n113572: a1 = a1 | a2\n113575: a3 = a3 << 0x10\n113578: a4 = a4 << 0x18\n113581: a3 = a3 | a4\n113584: a1 = a1 | a3\n113587: a2 = u8 [a0 + 0x1d]\n113590: a3 = u8 [a0 + 0x1c]\n113593: a4 = u8 [a0 + 0x1e]\n113596: a5 = u8 [a0 + 0x1f]\n113599: a2 = a2 << 0x8\n113602: a2 = a2 | a3\n113605: a4 = a4 << 0x10\n113608: a5 = a5 << 0x18\n113611: a4 = a4 | a5\n113614: a2 = a2 | a4\n113617: a2 = a2 << 0x20\n113620: t0 = a2 | a1\n113623: a2 = u8 [a0 + 0x11]\n113626: a3 = u8 [a0 + 0x10]\n113629: a4 = u8 [a0 + 0x12]\n113632: a5 = u8 [a0 + 0x13]\n113635: a2 = a2 << 0x8\n113638: a2 = a2 | a3\n113641: a4 = a4 << 0x10\n113644: a5 = a5 << 0x18\n113647: a4 = a4 | a5\n113650: a2 = a2 | a4\n113653: a3 = u8 [a0 + 0x15]\n113656: a4 = u8 [a0 + 0x14]\n113659: a5 = u8 [a0 + 0x16]\n113662: a1 = u8 [a0 + 0x17]\n113665: a3 = a3 << 0x8\n113668: a3 = a3 | a4\n113671: a5 = a5 << 0x10\n113674: a1 = a1 << 0x18\n113677: a1 = a1 | a5\n113680: a1 = a1 | a3\n113683: a1 = a1 << 0x20\n113686: t1 = a1 | a2\n113689: a1 = u8 [a0 + 0x9]\n113692: a3 = u8 [a0 + 0x8]\n113695: a4 = u8 [a0 + 0xa]\n113698: a5 = u8 [a0 + 0xb]\n113701: a1 = a1 << 0x8\n113704: a1 = a1 | a3\n113707: a4 = a4 << 0x10\n113710: a5 = a5 << 0x18\n113713: a4 = a4 | a5\n113716: a1 = a1 | a4\n113719: a3 = u8 [a0 + 0xd]\n113722: a4 = u8 [a0 + 0xc]\n113725: a5 = u8 [a0 + 0xe]\n113728: a2 = u8 [a0 + 0xf]\n113731: a3 = a3 << 0x8\n113734: a3 = a3 | a4\n113737: a5 = a5 << 0x10\n113740: a2 = a2 << 0x18\n113743: a2 = a2 | a5\n113746: a2 = a2 | a3\n113749: a2 = a2 << 0x20\n113752: a3 = a2 | a1\n113755: a1 = u8 [a0 + 0x1]\n113758: a2 = u8 [a0]\n113760: a4 = u8 [a0 + 0x2]\n113763: a5 = u8 [a0 + 0x3]\n113766: a1 = a1 << 0x8\n113769: a1 = a1 | a2\n113772: a4 = a4 << 0x10\n113775: a5 = a5 << 0x18\n113778: a4 = a4 | a5\n113781: a1 = a1 | a4\n113784: a2 = u8 [a0 + 0x5]\n113787: a4 = u8 [a0 + 0x4]\n113790: a5 = u8 [a0 + 0x6]\n113793: a0 = u8 [a0 + 0x7]\n113796: a2 = a2 << 0x8\n113799: a2 = a2 | a4\n113802: a5 = a5 << 0x10\n113805: a0 = a0 << 0x18\n113808: a0 = a0 | a5\n113811: a0 = a0 | a2\n113814: a0 = a0 << 0x20\n113817: a0 = a0 | a1\n113820: a0 = reverse a0\n113822: a2 = reverse a3\n113824: a3 = reverse t1\n113826: a1 = reverse t0\n113828: a4 = a1 | a2\n113831: a0 = a0 | a3\n113834: a4 = a4 | a0\n113837: a4 = a4 >> 0x20\n113840: a0 = a0 | a2\n113843: a0 = a0 << 0x20\n113846: a0 = a0 | a4\n113849: jump @1515 if a0 != 0\n      : @1502 (gas: 17)\n113853: a0 = u64 [s1 + 0x78]\n113856: a0 = reverse a0\n113858: u64 [s1 + 0x78] = a0\n113861: a0 = u64 [s1 + 0x80]\n113865: a0 = reverse a0\n113867: u64 [s1 + 0x80] = a0\n113871: a0 = u64 [s1 + 0x88]\n113875: a0 = reverse a0\n113877: u64 [s1 + 0x88] = a0\n113881: a0 = u64 [s1 + 0x98]\n113885: a0 = reverse a0\n113887: u64 [s1 + 0x98] = a0\n113891: a0 = u64 [s1 + 0x90]\n113895: i32 a0 = a0 + 0x20\n113898: i32 a1 = a1 + 0\n113900: u64 [s1 + 0xb8] = a1\n113904: ra = 1294, jump @0\n      : @1503 [@dyn 647] (gas: 24)\n113911: a1 = sp + 0xffffffffffffffe0\n113914: a1 = a1 & 0xffffffffffffffe0\n113917: u64 [s1 + 0xb0] = a1\n113921: sp = a1\n113923: i32 a0 = a0 + 0\n113925: i32 a2 = a1 + 0\n113927: a1 = u64 [s1 + 0xb8]\n113931: ecalli 9 // 'hash_keccak_256'\n113933: a3 = u64 [s1 + 0xb0]\n113937: a0 = u64 [a3 + 0x18]\n113940: a1 = u64 [a3 + 0x10]\n113943: a2 = u64 [a3 + 0x8]\n113946: a3 = u64 [a3]\n113948: a0 = reverse a0\n113950: u64 [s1 + 0x90] = a0\n113954: a0 = reverse a1\n113956: u64 [s1 + 0x28] = a0\n113959: a0 = reverse a2\n113961: u64 [s1 + 0x20] = a0\n113964: a0 = reverse a3\n113966: u64 [s1 + 0x18] = a0\n113969: a0 = 0x40\n113972: a1 = 0x20\n113975: ra = 1296, jump @0\n      : @1504 [@dyn 648] (gas: 151)\n113982: a1 = u8 [a0 + 0x19]\n113985: a2 = u8 [a0 + 0x18]\n113988: a3 = u8 [a0 + 0x1a]\n113991: a4 = u8 [a0 + 0x1b]\n113994: a1 = a1 << 0x8\n113997: a1 = a1 | a2\n114000: a3 = a3 << 0x10\n114003: a4 = a4 << 0x18\n114006: a3 = a3 | a4\n114009: a1 = a1 | a3\n114012: a2 = u8 [a0 + 0x1d]\n114015: a3 = u8 [a0 + 0x1c]\n114018: a4 = u8 [a0 + 0x1e]\n114021: a5 = u8 [a0 + 0x1f]\n114024: a2 = a2 << 0x8\n114027: a2 = a2 | a3\n114030: a4 = a4 << 0x10\n114033: a5 = a5 << 0x18\n114036: a4 = a4 | a5\n114039: a2 = a2 | a4\n114042: a2 = a2 << 0x20\n114045: t0 = a2 | a1\n114048: a2 = u8 [a0 + 0x11]\n114051: a3 = u8 [a0 + 0x10]\n114054: a4 = u8 [a0 + 0x12]\n114057: a5 = u8 [a0 + 0x13]\n114060: a2 = a2 << 0x8\n114063: a2 = a2 | a3\n114066: a4 = a4 << 0x10\n114069: a5 = a5 << 0x18\n114072: a4 = a4 | a5\n114075: a2 = a2 | a4\n114078: a3 = u8 [a0 + 0x15]\n114081: a4 = u8 [a0 + 0x14]\n114084: a5 = u8 [a0 + 0x16]\n114087: a1 = u8 [a0 + 0x17]\n114090: a3 = a3 << 0x8\n114093: a3 = a3 | a4\n114096: a5 = a5 << 0x10\n114099: a1 = a1 << 0x18\n114102: a1 = a1 | a5\n114105: a1 = a1 | a3\n114108: a1 = a1 << 0x20\n114111: t1 = a1 | a2\n114114: a1 = u8 [a0 + 0x9]\n114117: a3 = u8 [a0 + 0x8]\n114120: a4 = u8 [a0 + 0xa]\n114123: a5 = u8 [a0 + 0xb]\n114126: a1 = a1 << 0x8\n114129: a1 = a1 | a3\n114132: a4 = a4 << 0x10\n114135: a5 = a5 << 0x18\n114138: a4 = a4 | a5\n114141: a1 = a1 | a4\n114144: a3 = u8 [a0 + 0xd]\n114147: a4 = u8 [a0 + 0xc]\n114150: a5 = u8 [a0 + 0xe]\n114153: a2 = u8 [a0 + 0xf]\n114156: a3 = a3 << 0x8\n114159: a3 = a3 | a4\n114162: a5 = a5 << 0x10\n114165: a2 = a2 << 0x18\n114168: a2 = a2 | a5\n114171: a2 = a2 | a3\n114174: a2 = a2 << 0x20\n114177: a3 = a2 | a1\n114180: a1 = u8 [a0 + 0x1]\n114183: a2 = u8 [a0]\n114185: a4 = u8 [a0 + 0x2]\n114188: a5 = u8 [a0 + 0x3]\n114191: a1 = a1 << 0x8\n114194: a1 = a1 | a2\n114197: a4 = a4 << 0x10\n114200: a5 = a5 << 0x18\n114203: a4 = a4 | a5\n114206: a1 = a1 | a4\n114209: a2 = u8 [a0 + 0x5]\n114212: a4 = u8 [a0 + 0x4]\n114215: a5 = u8 [a0 + 0x6]\n114218: a0 = u8 [a0 + 0x7]\n114221: a2 = a2 << 0x8\n114224: a2 = a2 | a4\n114227: a5 = a5 << 0x10\n114230: a0 = a0 << 0x18\n114233: a0 = a0 | a5\n114236: a0 = a0 | a2\n114239: a0 = a0 << 0x20\n114242: a0 = a0 | a1\n114245: a4 = reverse a0\n114247: u64 [s1 + 0xa8] = a4\n114251: a3 = reverse a3\n114253: u64 [s1 + 0xb0] = a3\n114257: a1 = reverse t1\n114259: u64 [s1 + 0xa0] = a1\n114263: a0 = reverse t0\n114265: u64 [s1 + 0xb8] = a0\n114269: t1 = a0 + 0x20\n114272: a0 = t1 <u a0\n114275: a2 = a1 + a0\n114278: a1 = a2 <u a1\n114281: a1 = a0 if a0 == 0\n114284: a1 = a1 + a3\n114287: a0 = a1 <u a3\n114290: t0 = a4 + a0\n114293: a0 = u64 [s1 + 0x18]\n114296: u64 [s1 + 0x118] = a0\n114300: a0 = u64 [s1 + 0x20]\n114303: u64 [s1 + 0x110] = a0\n114307: a0 = u64 [s1 + 0x28]\n114310: u64 [s1 + 0x108] = a0\n114314: a0 = u64 [s1 + 0x90]\n114318: u64 [s1 + 0x100] = a0\n114322: a0 = u64 [s1 + 0x78]\n114325: u64 [s1 + 0x138] = a0\n114329: a0 = u64 [s1 + 0x80]\n114333: u64 [s1 + 0x130] = a0\n114337: a0 = u64 [s1 + 0x88]\n114341: u64 [s1 + 0x128] = a0\n114345: a0 = u64 [s1 + 0x98]\n114349: u64 [s1 + 0x120] = a0\n114353: a0 = u64 [s1 + 0x38]\n114356: u64 [s1 + 0x158] = a0\n114360: a0 = u64 [s1 + 0x40]\n114363: u64 [s1 + 0x150] = a0\n114367: a0 = u64 [s1 + 0x48]\n114370: u64 [s1 + 0x148] = a0\n114374: a0 = u64 [s1 + 0x50]\n114377: u64 [s1 + 0x140] = a0\n114381: a0 = u64 [s1 + 0x58]\n114384: u64 [s1 + 0x178] = a0\n114388: a0 = u64 [s1 + 0x60]\n114391: u64 [s1 + 0x170] = a0\n114395: a0 = u64 [s1 + 0x68]\n114398: u64 [s1 + 0x168] = a0\n114402: a0 = u64 [s1 + 0x70]\n114405: u64 [s1 + 0x160] = a0\n114409: u64 [s1 + 0x98] = t1\n114413: u64 [s1 + 0x180] = t1\n114417: u64 [s1 + 0x90] = a2\n114421: u64 [s1 + 0x188] = a2\n114425: u64 [s1 + 0x88] = a1\n114429: u64 [s1 + 0x190] = a1\n114433: a0 = s1 + 0x1a0\n114437: a1 = s1 + 0x180\n114441: a2 = s1 + 0x160\n114445: a3 = s1 + 0x140\n114449: a4 = s1 + 0x120\n114453: a5 = s1 + 0x100\n114457: u64 [s1 + 0x80] = t0\n114461: u64 [s1 + 0x198] = t0\n114465: ra = 1298, jump @1480\n      : @1505 [@dyn 649] (gas: 12)\n114471: a1 = u64 [s1 + 0xa0]\n114475: a0 = u64 [s1 + 0xa8]\n114479: a0 = a0 | a1\n114482: a2 = u64 [s1 + 0xb0]\n114486: a1 = u64 [s1 + 0xb8]\n114490: a1 = a1 | a2\n114493: a1 = a1 | a0\n114496: a1 = a1 >> 0x20\n114499: a0 = a0 | a2\n114502: a0 = a0 << 0x20\n114505: a0 = a0 | a1\n114508: jump @1515 if a0 != 0\n      : @1506 (gas: 35)\n114512: a0 = u64 [s1 + 0x1a0]\n114516: u64 [s1 + 0x78] = a0\n114519: t0 = u64 [s1 + 0x1a8]\n114523: t2 = u64 [s1 + 0x1b8]\n114527: u64 [s1 + 0x40] = t2\n114530: a4 = u64 [s1 + 0x1b0]\n114534: u64 [s1 + 0x48] = a4\n114537: a5 = u64 [s1 + 0x98]\n114541: t1 = a0 <u a5\n114544: a1 = u64 [s1 + 0x90]\n114548: ra = t0 ^ a1\n114551: a2 = t0 <u a1\n114554: u64 [s1 + 0x38] = t0\n114557: a2 = t1 if ra == 0\n114560: a0 = u64 [s1 + 0x88]\n114564: ra = a4 - a0\n114567: a3 = ra - a2\n114570: u64 [s1 + 0x60] = a3\n114573: a3 = ra <u a2\n114576: a2 = a4 <u a0\n114579: a2 = t2 - a2\n114582: a0 = u64 [s1 + 0x80]\n114586: a2 = a2 - a0\n114589: a2 = a2 - a3\n114592: u64 [s1 + 0x68] = a2\n114595: a0 = t0 - t1\n114598: a0 = a0 - a1\n114601: u64 [s1 + 0x58] = a0\n114604: a0 = u64 [s1 + 0x78]\n114607: a0 = a0 - a5\n114610: u64 [s1 + 0x50] = a0\n114613: a0 = i32 [s1 + 0xb8]\n114617: a1 = 0x20\n114620: u64 [s1 + 0x70] = a0\n114623: ra = 1300, jump @0\n      : @1507 [@dyn 650] (gas: 125)\n114630: t0 = u64 [s1 + 0x78]\n114633: a2 = u64 [s1 + 0xb8]\n114637: t1 = t0 <u a2\n114640: a5 = u64 [s1 + 0xa0]\n114644: a4 = u64 [s1 + 0x38]\n114647: a3 = a4 ^ a5\n114650: a1 = a4 <u a5\n114653: a1 = t1 if a3 == 0\n114656: a3 = a4 - a5\n114659: t1 = a3 - t1\n114662: u64 [s1 + 0x28] = t1\n114665: a3 = t0 - a2\n114668: a4 = a3 + 0x1f\n114671: t0 = a4 <u a3\n114674: u64 [s1 + 0x38] = t0\n114677: a4 = a4 & 0xffffffffffffffe0\n114680: a2 = a2 + a4\n114683: u64 [s1 + 0x78] = a2\n114686: a3 = a2 <u a4\n114689: a2 = t1 + t0\n114692: a4 = a2 + a5\n114695: t0 = a4 + a3\n114698: a4 = t0 ^ a2\n114701: ra = t0 <u a2\n114704: ra = a3 if a4 == 0\n114707: t1 = u64 [s1 + 0xa8]\n114711: a3 = u64 [s1 + 0x40]\n114714: t2 = a3 - t1\n114717: a4 = u64 [s1 + 0xb0]\n114721: a3 = u64 [s1 + 0x48]\n114724: a5 = a3 <u a4\n114727: t2 = t2 - a5\n114730: a5 = a3 - a4\n114733: a3 = a5 <u a1\n114736: a3 = t2 - a3\n114739: a5 = a5 - a1\n114742: a1 = u64 [s1 + 0x28]\n114745: a1 = a2 <u a1\n114748: a2 = u64 [s1 + 0x38]\n114751: a1 = a2 if a2 == 0\n114754: a1 = a1 + a5\n114757: a2 = a1 <u a5\n114760: a3 = a3 + t1\n114763: a2 = a2 + a3\n114766: a3 = a1 + a4\n114769: a1 = a3 <u a1\n114772: a1 = a1 + a2\n114775: ra = ra + a3\n114778: a2 = ra <u a3\n114781: a5 = a1 + a2\n114784: a1 = a5 >u 0\n114786: a2 = ra >u 0\n114788: a2 = a1 if a5 != 0\n114791: a3 = ra | a5\n114794: a1 = t0 >u 0\n114796: a1 = a2 if a3 != 0\n114799: a2 = u64 [s1 + 0x50]\n114802: a2 = reverse a2\n114804: a3 = a2 >> 0x38\n114807: u8 [a0 + 0x1f] = a3\n114810: a3 = a2 >> 0x30\n114813: u8 [a0 + 0x1e] = a3\n114816: a3 = a2 >> 0x28\n114819: u8 [a0 + 0x1d] = a3\n114822: a3 = a2 >> 0x20\n114825: u8 [a0 + 0x1c] = a3\n114828: a3 = a2 >> 0x18\n114831: u8 [a0 + 0x1b] = a3\n114834: a3 = a2 >> 0x10\n114837: u8 [a0 + 0x1a] = a3\n114840: a3 = u64 [s1 + 0x58]\n114843: a3 = reverse a3\n114845: u8 [a0 + 0x18] = a2\n114848: a2 = a2 >> 0x8\n114851: u8 [a0 + 0x19] = a2\n114854: a2 = a3 >> 0x38\n114857: u8 [a0 + 0x17] = a2\n114860: a2 = a3 >> 0x30\n114863: u8 [a0 + 0x16] = a2\n114866: a2 = a3 >> 0x28\n114869: u8 [a0 + 0x15] = a2\n114872: a2 = a3 >> 0x20\n114875: u8 [a0 + 0x14] = a2\n114878: a2 = a3 >> 0x18\n114881: u8 [a0 + 0x13] = a2\n114884: a2 = a3 >> 0x10\n114887: u8 [a0 + 0x12] = a2\n114890: a2 = u64 [s1 + 0x60]\n114893: a2 = reverse a2\n114895: u8 [a0 + 0x10] = a3\n114898: a3 = a3 >> 0x8\n114901: u8 [a0 + 0x11] = a3\n114904: a3 = a2 >> 0x38\n114907: u8 [a0 + 0xf] = a3\n114910: a3 = a2 >> 0x30\n114913: u8 [a0 + 0xe] = a3\n114916: a3 = a2 >> 0x28\n114919: u8 [a0 + 0xd] = a3\n114922: a3 = a2 >> 0x20\n114925: u8 [a0 + 0xc] = a3\n114928: a3 = a2 >> 0x18\n114931: u8 [a0 + 0xb] = a3\n114934: a3 = a2 >> 0x10\n114937: u8 [a0 + 0xa] = a3\n114940: a3 = u64 [s1 + 0x68]\n114943: a3 = reverse a3\n114945: u8 [a0 + 0x8] = a2\n114948: a2 = a2 >> 0x8\n114951: u8 [a0 + 0x9] = a2\n114954: a2 = a3 >> 0x38\n114957: u8 [a0 + 0x7] = a2\n114960: a2 = a3 >> 0x30\n114963: u8 [a0 + 0x6] = a2\n114966: a2 = a3 >> 0x28\n114969: u8 [a0 + 0x5] = a2\n114972: a2 = a3 >> 0x20\n114975: u8 [a0 + 0x4] = a2\n114978: a2 = a3 >> 0x18\n114981: u8 [a0 + 0x3] = a2\n114984: a2 = a3 >> 0x10\n114987: u8 [a0 + 0x2] = a2\n114990: u8 [a0] = a3\n114992: a3 = a3 >> 0x8\n114995: u8 [a0 + 0x1] = a3\n114998: jump @1516 if a1 != 0\n      : @1508 (gas: 17)\n115002: a0 = u64 [s1 + 0xb8]\n115006: a1 = u64 [s1 + 0x78]\n115009: a0 = a1 <u a0\n115012: a2 = u64 [s1 + 0xa0]\n115016: a1 = t0 ^ a2\n115019: a2 = t0 <u a2\n115022: a2 = a0 if a1 == 0\n115025: a4 = u64 [s1 + 0xb0]\n115029: a0 = ra <u a4\n115032: a3 = u64 [s1 + 0xa8]\n115036: a1 = a5 ^ a3\n115039: a3 = a5 <u a3\n115042: a3 = a0 if a1 == 0\n115045: a0 = ra ^ a4\n115048: a0 = a0 | a1\n115051: a3 = a2 if a0 == 0\n115054: jump @1516 if a3 != 0\n      : @1509 (gas: 6)\n115058: a0 = 0x40\n115061: a1 = 0x20\n115064: u64 [s1 + 0xb8] = t0\n115068: u64 [s1 + 0xb0] = ra\n115072: u64 [s1 + 0xa8] = a5\n115076: ra = 1302, jump @0\n      : @1510 [@dyn 651] (gas: 71)\n115083: a1 = u64 [s1 + 0xa8]\n115087: a1 = reverse a1\n115089: a2 = u64 [s1 + 0xb0]\n115093: a2 = reverse a2\n115095: a3 = u64 [s1 + 0xb8]\n115099: a3 = reverse a3\n115101: a4 = u64 [s1 + 0x78]\n115104: a4 = reverse a4\n115106: u8 [a0 + 0x18] = a4\n115109: a5 = a4 >> 0x38\n115112: u8 [a0 + 0x1f] = a5\n115115: a5 = a4 >> 0x30\n115118: u8 [a0 + 0x1e] = a5\n115121: a5 = a4 >> 0x28\n115124: u8 [a0 + 0x1d] = a5\n115127: a5 = a4 >> 0x20\n115130: u8 [a0 + 0x1c] = a5\n115133: a5 = a4 >> 0x18\n115136: u8 [a0 + 0x1b] = a5\n115139: a5 = a4 >> 0x10\n115142: u8 [a0 + 0x1a] = a5\n115145: a4 = a4 >> 0x8\n115148: u8 [a0 + 0x19] = a4\n115151: u8 [a0 + 0x10] = a3\n115154: a4 = a3 >> 0x38\n115157: u8 [a0 + 0x17] = a4\n115160: a4 = a3 >> 0x30\n115163: u8 [a0 + 0x16] = a4\n115166: a4 = a3 >> 0x28\n115169: u8 [a0 + 0x15] = a4\n115172: a4 = a3 >> 0x20\n115175: u8 [a0 + 0x14] = a4\n115178: a4 = a3 >> 0x18\n115181: u8 [a0 + 0x13] = a4\n115184: a4 = a3 >> 0x10\n115187: u8 [a0 + 0x12] = a4\n115190: a3 = a3 >> 0x8\n115193: u8 [a0 + 0x11] = a3\n115196: u8 [a0 + 0x8] = a2\n115199: a3 = a2 >> 0x38\n115202: u8 [a0 + 0xf] = a3\n115205: a3 = a2 >> 0x30\n115208: u8 [a0 + 0xe] = a3\n115211: a3 = a2 >> 0x28\n115214: u8 [a0 + 0xd] = a3\n115217: a3 = a2 >> 0x20\n115220: u8 [a0 + 0xc] = a3\n115223: a3 = a2 >> 0x18\n115226: u8 [a0 + 0xb] = a3\n115229: a3 = a2 >> 0x10\n115232: u8 [a0 + 0xa] = a3\n115235: a2 = a2 >> 0x8\n115238: u8 [a0 + 0x9] = a2\n115241: u8 [a0] = a1\n115243: a2 = a1 >> 0x38\n115246: u8 [a0 + 0x7] = a2\n115249: a2 = a1 >> 0x30\n115252: u8 [a0 + 0x6] = a2\n115255: a2 = a1 >> 0x28\n115258: u8 [a0 + 0x5] = a2\n115261: a2 = a1 >> 0x20\n115264: u8 [a0 + 0x4] = a2\n115267: a2 = a1 >> 0x18\n115270: u8 [a0 + 0x3] = a2\n115273: a2 = a1 >> 0x10\n115276: u8 [a0 + 0x2] = a2\n115279: a1 = a1 >> 0x8\n115282: u8 [a0 + 0x1] = a1\n115285: a1 = 0x20\n115288: a0 = u64 [s1 + 0x70]\n115291: ra = 1304, jump @0\n      : @1511 [@dyn 652] (gas: 12)\n115298: t2 = u64 [s1 + 0x98]\n115302: a3 = u64 [s1 + 0x88]\n115306: a1 = t2 | a3\n115309: a2 = u64 [s1 + 0x90]\n115313: a4 = u64 [s1 + 0x80]\n115317: a2 = a2 | a4\n115320: a1 = a1 | a2\n115323: a1 = a1 >> 0x20\n115326: a2 = a2 | a3\n115329: a2 = a2 << 0x20\n115332: a1 = a1 | a2\n115335: jump @1515 if a1 != 0\n      : @1512 (gas: 100)\n115339: a1 = u8 [a0 + 0x19]\n115342: a2 = u8 [a0 + 0x18]\n115345: a3 = u8 [a0 + 0x1a]\n115348: a4 = u8 [a0 + 0x1b]\n115351: a1 = a1 << 0x8\n115354: a1 = a1 | a2\n115357: a3 = a3 << 0x10\n115360: a4 = a4 << 0x18\n115363: a3 = a3 | a4\n115366: a1 = a1 | a3\n115369: a2 = u8 [a0 + 0x1d]\n115372: a3 = u8 [a0 + 0x1c]\n115375: a4 = u8 [a0 + 0x1e]\n115378: a5 = u8 [a0 + 0x1f]\n115381: a2 = a2 << 0x8\n115384: a2 = a2 | a3\n115387: a4 = a4 << 0x10\n115390: a5 = a5 << 0x18\n115393: a4 = a4 | a5\n115396: a2 = a2 | a4\n115399: a2 = a2 << 0x20\n115402: t0 = a2 | a1\n115405: a2 = u8 [a0 + 0x11]\n115408: a3 = u8 [a0 + 0x10]\n115411: a4 = u8 [a0 + 0x12]\n115414: a5 = u8 [a0 + 0x13]\n115417: a2 = a2 << 0x8\n115420: a2 = a2 | a3\n115423: a4 = a4 << 0x10\n115426: a5 = a5 << 0x18\n115429: a4 = a4 | a5\n115432: a2 = a2 | a4\n115435: a3 = u8 [a0 + 0x15]\n115438: a4 = u8 [a0 + 0x14]\n115441: a5 = u8 [a0 + 0x16]\n115444: a1 = u8 [a0 + 0x17]\n115447: a3 = a3 << 0x8\n115450: a3 = a3 | a4\n115453: a5 = a5 << 0x10\n115456: a1 = a1 << 0x18\n115459: a1 = a1 | a5\n115462: a1 = a1 | a3\n115465: a1 = a1 << 0x20\n115468: t1 = a1 | a2\n115471: a1 = u8 [a0 + 0x9]\n115474: a3 = u8 [a0 + 0x8]\n115477: a4 = u8 [a0 + 0xa]\n115480: a5 = u8 [a0 + 0xb]\n115483: a1 = a1 << 0x8\n115486: a1 = a1 | a3\n115489: a4 = a4 << 0x10\n115492: a5 = a5 << 0x18\n115495: a4 = a4 | a5\n115498: a1 = a1 | a4\n115501: a3 = u8 [a0 + 0xd]\n115504: a4 = u8 [a0 + 0xc]\n115507: a5 = u8 [a0 + 0xe]\n115510: a2 = u8 [a0 + 0xf]\n115513: a3 = a3 << 0x8\n115516: a3 = a3 | a4\n115519: a5 = a5 << 0x10\n115522: a2 = a2 << 0x18\n115525: a2 = a2 | a5\n115528: a2 = a2 | a3\n115531: a2 = a2 << 0x20\n115534: a3 = a2 | a1\n115537: a1 = u8 [a0 + 0x1]\n115540: a2 = u8 [a0]\n115542: a4 = u8 [a0 + 0x2]\n115545: a5 = u8 [a0 + 0x3]\n115548: a1 = a1 << 0x8\n115551: a1 = a1 | a2\n115554: a4 = a4 << 0x10\n115557: a5 = a5 << 0x18\n115560: a4 = a4 | a5\n115563: a1 = a1 | a4\n115566: a2 = u8 [a0 + 0x5]\n115569: a4 = u8 [a0 + 0x4]\n115572: a5 = u8 [a0 + 0x6]\n115575: a0 = u8 [a0 + 0x7]\n115578: a2 = a2 << 0x8\n115581: a2 = a2 | a4\n115584: a5 = a5 << 0x10\n115587: a0 = a0 << 0x18\n115590: a0 = a0 | a5\n115593: a0 = a0 | a2\n115596: a0 = a0 << 0x20\n115599: a0 = a0 | a1\n115602: a0 = reverse a0\n115604: a2 = reverse a3\n115606: a3 = reverse t1\n115608: a1 = reverse t0\n115610: a4 = a1 | a2\n115613: a0 = a0 | a3\n115616: a4 = a4 | a0\n115619: a4 = a4 >> 0x20\n115622: a0 = a0 | a2\n115625: a0 = a0 << 0x20\n115628: a0 = a0 | a4\n115631: jump @1515 if a0 != 0\n      : @1513 (gas: 4)\n115634: i32 a0 = t2 + 0\n115636: i32 a1 = a1 + 0\n115638: u64 [s1 + 0xb8] = a1\n115642: ra = 1306, jump @0\n      : @1514 [@dyn 653] (gas: 28)\n115649: a1 = sp + 0xffffffffffffffe0\n115652: a1 = a1 & 0xffffffffffffffe0\n115655: u64 [s1 + 0xb0] = a1\n115659: sp = a1\n115661: i32 a0 = a0 + 0\n115663: i32 a2 = a1 + 0\n115665: a1 = u64 [s1 + 0xb8]\n115669: ecalli 9 // 'hash_keccak_256'\n115671: a3 = u64 [s1 + 0xb0]\n115675: a0 = u64 [a3 + 0x18]\n115678: a1 = u64 [a3 + 0x10]\n115681: a2 = u64 [a3 + 0x8]\n115684: a3 = u64 [a3]\n115686: a0 = reverse a0\n115688: a1 = reverse a1\n115690: a2 = reverse a2\n115692: a3 = reverse a3\n115694: a4 = u64 [s1 + 0x30]\n115697: u64 [a4 + 0x18] = a3\n115700: u64 [a4 + 0x10] = a2\n115703: u64 [a4 + 0x8] = a1\n115706: u64 [a4] = a0\n115708: sp = s0 + 0xfffffffffffffe20\n115712: ra = u64 [sp + 0x1d8]\n115716: s0 = u64 [sp + 0x1d0]\n115720: s1 = u64 [sp + 0x1c8]\n115724: sp = sp + 0x1e0\n115728: ret\n      : @1515 (gas: 1)\n115730: trap\n      : @1516 (gas: 8)\n115731: u64 [s1 + 240] = 0\n115735: u64 [s1 + 232] = 0\n115739: u64 [s1 + 224] = 0\n115743: a0 = 0x4e487b7100000000\n115753: a1 = s1 + 0xe0\n115757: u64 [s1 + 0xf8] = a0\n115761: a0 = 0\n115763: ra = 1308, jump @23\n      : @1517 [@dyn 654] (gas: 7)\n115770: u64 [s1 + 216] = 0\n115774: u64 [s1 + 208] = 0\n115778: u64 [s1 + 192] = 0x41\n115783: a0 = 0x4\n115786: a1 = s1 + 0xc0\n115790: u64 [s1 + 200] = 0\n115794: ra = 1310, jump @23\n      : @1518 [@dyn 655] (gas: 3)\n115801: a1 = 0x24\n115804: a0 = 0\n115806: ra = 1312, jump @0\n      : @1519 [@dyn 656] (gas: 6)\n115813: i32 a1 = a0 + 0\n115815: a0 = 0x1\n115818: a2 = 0x24\n115821: ra = 0x522\n115825: ecalli 14 // 'seal_return'\n115827: fallthrough\n      : @1520 [@dyn 657] (gas: 5)\n115828: u64 [a0 + 24] = 0\n115831: u64 [a0 + 16] = 0\n115834: u64 [a0 + 8] = 0\n115837: u64 [a0 + 0] = 0\n115839: ret\n      : @1521 (gas: 22)\n115841: sp = sp + 0xfffffffffffffdb0\n115845: u64 [sp + 0x248] = ra\n115849: u64 [sp + 0x240] = s0\n115853: u64 [sp + 0x238] = s1\n115857: s0 = sp + 0x250\n115861: sp = sp & 0xfffffffffffffff0\n115864: a5 = u64 [a2 + 0x10]\n115867: s1 = u64 [a2 + 0x18]\n115870: a3 = u64 [a2 + 0x8]\n115873: a4 = u64 [a2]\n115875: u64 [sp + 0x130] = a3\n115879: u64 [sp + 0x120] = s1\n115883: a2 = a3 | s1\n115886: a3 = a4 | a5\n115889: a3 = a3 | a2\n115892: a3 = a3 >> 0x20\n115895: u64 [sp + 0x128] = a5\n115899: a2 = a2 | a5\n115902: a2 = a2 << 0x20\n115905: a2 = a2 | a3\n115908: u64 [sp + 0x138] = a0\n115912: jump @1535 if a2 != 0\n      : @1522 (gas: 13)\n115916: a0 = u64 [a1 + 0x18]\n115919: u64 [sp + 0x100] = a0\n115923: a0 = u64 [a1 + 0x10]\n115926: u64 [sp + 0x108] = a0\n115930: a0 = u64 [a1 + 0x8]\n115933: u64 [sp + 0x110] = a0\n115937: a0 = u64 [a1]\n115939: u64 [sp + 0x118] = a0\n115943: u64 [sp + 0x140] = a4\n115947: i32 a0 = a4 + 0\n115949: a1 = 0x20\n115952: u64 [sp + 0x148] = a0\n115956: ra = 1316, jump @0\n      : @1523 [@dyn 658] (gas: 93)\n115963: a1 = u8 [a0 + 0x9]\n115966: a2 = u8 [a0 + 0x8]\n115969: a3 = u8 [a0 + 0xa]\n115972: a4 = u8 [a0 + 0xb]\n115975: a1 = a1 << 0x8\n115978: a1 = a1 | a2\n115981: a3 = a3 << 0x10\n115984: a4 = a4 << 0x18\n115987: a3 = a3 | a4\n115990: a1 = a1 | a3\n115993: a2 = u8 [a0 + 0xd]\n115996: a3 = u8 [a0 + 0xc]\n115999: a4 = u8 [a0 + 0xe]\n116002: a5 = u8 [a0 + 0xf]\n116005: a2 = a2 << 0x8\n116008: a2 = a2 | a3\n116011: a4 = a4 << 0x10\n116014: a5 = a5 << 0x18\n116017: a4 = a4 | a5\n116020: a2 = a2 | a4\n116023: a2 = a2 << 0x20\n116026: t0 = a2 | a1\n116029: a2 = u8 [a0 + 0x19]\n116032: a3 = u8 [a0 + 0x18]\n116035: a4 = u8 [a0 + 0x1a]\n116038: a5 = u8 [a0 + 0x1b]\n116041: a2 = a2 << 0x8\n116044: a2 = a2 | a3\n116047: a4 = a4 << 0x10\n116050: a5 = a5 << 0x18\n116053: a4 = a4 | a5\n116056: a2 = a2 | a4\n116059: a3 = u8 [a0 + 0x1d]\n116062: a4 = u8 [a0 + 0x1c]\n116065: a5 = u8 [a0 + 0x1e]\n116068: a1 = u8 [a0 + 0x1f]\n116071: a3 = a3 << 0x8\n116074: a3 = a3 | a4\n116077: a5 = a5 << 0x10\n116080: a1 = a1 << 0x18\n116083: a1 = a1 | a5\n116086: a1 = a1 | a3\n116089: a1 = a1 << 0x20\n116092: t1 = a1 | a2\n116095: a1 = u8 [a0 + 0x11]\n116098: a3 = u8 [a0 + 0x10]\n116101: a4 = u8 [a0 + 0x12]\n116104: a5 = u8 [a0 + 0x13]\n116107: a1 = a1 << 0x8\n116110: a1 = a1 | a3\n116113: a4 = a4 << 0x10\n116116: a5 = a5 << 0x18\n116119: a3 = a5 | a4\n116122: a3 = a3 | a1\n116125: a1 = u8 [a0 + 0x1]\n116128: a4 = u8 [a0]\n116130: a5 = u8 [a0 + 0x2]\n116133: s1 = u8 [a0 + 0x3]\n116136: a1 = a1 << 0x8\n116139: a1 = a1 | a4\n116142: a5 = a5 << 0x10\n116145: s1 = s1 << 0x18\n116148: a4 = s1 | a5\n116151: a4 = a4 | a1\n116154: a1 = u8 [a0 + 0x15]\n116157: a5 = u8 [a0 + 0x14]\n116160: s1 = u8 [a0 + 0x16]\n116163: a2 = u8 [a0 + 0x17]\n116166: a1 = a1 << 0x8\n116169: a1 = a1 | a5\n116172: s1 = s1 << 0x10\n116175: a2 = a2 << 0x18\n116178: a2 = a2 | s1\n116181: a1 = a1 | a2\n116184: a2 = u8 [a0 + 0x5]\n116187: a5 = u8 [a0 + 0x4]\n116190: s1 = u8 [a0 + 0x6]\n116193: a0 = u8 [a0 + 0x7]\n116196: a2 = a2 << 0x8\n116199: a2 = a2 | a5\n116202: s1 = s1 << 0x10\n116205: a0 = a0 << 0x18\n116208: a0 = a0 | s1\n116211: a0 = a0 | a2\n116214: a2 = 0x4100000000000000\n116224: a2 = t1 ^ a2\n116227: a2 = t0 | a2\n116230: a0 = a0 | a1\n116233: a0 = a0 << 0x20\n116236: a3 = a3 | a4\n116239: a0 = a0 | a3\n116242: a0 = a0 | a2\n116245: jump @1532 if a0 != 0\n      : @1524 (gas: 14)\n116249: a1 = u64 [sp + 0x148]\n116253: a0 = u64 [sp + 0x128]\n116257: a2 = u64 [sp + 0x120]\n116261: a3 = a0 | a2\n116264: a0 = 0x100000000\n116274: u64 [sp + 0x120] = a0\n116278: a0 = 0xffffffe0\n116288: a2 = u64 [sp + 0x140]\n116292: a0 = a2 <u a0\n116295: s1 = u64 [sp + 0x130]\n116299: a0 = 0 if s1 != 0\n116301: u64 [sp + 0x128] = a3\n116305: a0 = 0 if a3 != 0\n116307: jump @1535 if a0 == 0\n      : @1525 (gas: 3)\n116311: i32 a0 = a1 + 0x20\n116314: a1 = 0x20\n116317: ra = 1318, jump @0\n      : @1526 [@dyn 659] (gas: 8)\n116324: a1 = u64 [sp + 0x120]\n116328: a1 = a1 + 0xffffffffffffffc0\n116331: a2 = u64 [sp + 0x140]\n116335: a1 = a2 <u a1\n116338: a1 = 0 if s1 != 0\n116340: a2 = u64 [sp + 0x128]\n116344: a1 = 0 if a2 != 0\n116346: jump @1535 if a1 == 0\n      : @1527 (gas: 68)\n116350: a1 = u8 [a0 + 0x18]\n116353: u64 [sp + 0x28] = a1\n116356: a1 = u8 [a0 + 0x19]\n116359: u64 [sp + 0x8] = a1\n116362: a1 = u8 [a0 + 0x1a]\n116365: u64 [sp + 0x18] = a1\n116368: a1 = u8 [a0 + 0x1b]\n116371: u64 [sp + 0x10] = a1\n116374: a1 = u8 [a0 + 0x1c]\n116377: u64 [sp + 0x40] = a1\n116380: a1 = u8 [a0 + 0x1d]\n116383: u64 [sp + 0x20] = a1\n116386: a1 = u8 [a0 + 0x1e]\n116389: u64 [sp + 0x38] = a1\n116392: a1 = u8 [a0 + 0x1f]\n116395: u64 [sp + 0x30] = a1\n116398: a1 = u8 [a0 + 0x10]\n116401: u64 [sp + 0x68] = a1\n116404: a1 = u8 [a0 + 0x11]\n116407: u64 [sp + 0x48] = a1\n116410: a1 = u8 [a0 + 0x12]\n116413: u64 [sp + 0x58] = a1\n116416: a1 = u8 [a0 + 0x13]\n116419: u64 [sp + 0x50] = a1\n116422: a1 = u8 [a0 + 0x14]\n116425: u64 [sp + 0x80] = a1\n116429: a1 = u8 [a0 + 0x15]\n116432: u64 [sp + 0x60] = a1\n116435: a1 = u8 [a0 + 0x16]\n116438: u64 [sp + 0x78] = a1\n116441: a1 = u8 [a0 + 0x17]\n116444: u64 [sp + 0x70] = a1\n116447: a1 = u8 [a0 + 0x8]\n116450: u64 [sp + 0xa8] = a1\n116454: a1 = u8 [a0 + 0x9]\n116457: u64 [sp + 0x88] = a1\n116461: a1 = u8 [a0 + 0xa]\n116464: u64 [sp + 0x98] = a1\n116468: a1 = u8 [a0 + 0xb]\n116471: u64 [sp + 0x90] = a1\n116475: a1 = u8 [a0 + 0xc]\n116478: u64 [sp + 0xc0] = a1\n116482: a1 = u8 [a0 + 0xd]\n116485: u64 [sp + 0xa0] = a1\n116489: a1 = u8 [a0 + 0xe]\n116492: u64 [sp + 0xb8] = a1\n116496: a1 = u8 [a0 + 0xf]\n116499: u64 [sp + 0xb0] = a1\n116503: a1 = u8 [a0]\n116505: u64 [sp + 0xe8] = a1\n116509: a1 = u8 [a0 + 0x1]\n116512: u64 [sp + 0xc8] = a1\n116516: a1 = u8 [a0 + 0x2]\n116519: u64 [sp + 0xd8] = a1\n116523: a1 = u8 [a0 + 0x3]\n116526: u64 [sp + 0xd0] = a1\n116530: a1 = u8 [a0 + 0x4]\n116533: u64 [sp + 0x120] = a1\n116537: a1 = u8 [a0 + 0x5]\n116540: u64 [sp + 0xe0] = a1\n116544: a1 = u8 [a0 + 0x6]\n116547: u64 [sp + 0xf8] = a1\n116551: a0 = u8 [a0 + 0x7]\n116554: u64 [sp + 0xf0] = a0\n116558: a0 = u64 [sp + 0x148]\n116562: i32 a0 = a0 + 0x40\n116565: a1 = 0x20\n116568: ra = 1320, jump @0\n      : @1528 [@dyn 660] (gas: 7)\n116575: a1 = 0xffffffa0\n116585: a2 = u64 [sp + 0x140]\n116589: a1 = a2 <u a1\n116592: a1 = 0 if s1 != 0\n116594: a2 = u64 [sp + 0x128]\n116598: a1 = 0 if a2 != 0\n116600: jump @1535 if a1 == 0\n      : @1529 (gas: 197)\n116604: a1 = u64 [sp + 0x8]\n116607: a1 = a1 << 0x8\n116610: a2 = u64 [sp + 0x28]\n116613: a1 = a1 | a2\n116616: a2 = u64 [sp + 0x18]\n116619: a2 = a2 << 0x10\n116622: a3 = u64 [sp + 0x10]\n116625: a3 = a3 << 0x18\n116628: a2 = a2 | a3\n116631: a1 = a1 | a2\n116634: a2 = u64 [sp + 0x20]\n116637: a2 = a2 << 0x8\n116640: a3 = u64 [sp + 0x40]\n116643: a2 = a2 | a3\n116646: a3 = u64 [sp + 0x38]\n116649: a3 = a3 << 0x10\n116652: a4 = u64 [sp + 0x30]\n116655: a4 = a4 << 0x18\n116658: a3 = a3 | a4\n116661: a2 = a2 | a3\n116664: a2 = a2 << 0x20\n116667: a1 = a1 | a2\n116670: u64 [sp + 0x140] = a1\n116674: a1 = u64 [sp + 0x48]\n116677: a1 = a1 << 0x8\n116680: a2 = u64 [sp + 0x68]\n116683: a1 = a1 | a2\n116686: a2 = u64 [sp + 0x58]\n116689: a2 = a2 << 0x10\n116692: a3 = u64 [sp + 0x50]\n116695: a3 = a3 << 0x18\n116698: a2 = a2 | a3\n116701: a1 = a1 | a2\n116704: a2 = u64 [sp + 0x60]\n116707: a2 = a2 << 0x8\n116710: a3 = u64 [sp + 0x80]\n116714: a2 = a2 | a3\n116717: a3 = u64 [sp + 0x78]\n116720: a3 = a3 << 0x10\n116723: a4 = u64 [sp + 0x70]\n116726: a4 = a4 << 0x18\n116729: a3 = a3 | a4\n116732: a2 = a2 | a3\n116735: a2 = a2 << 0x20\n116738: t1 = a2 | a1\n116741: a1 = u64 [sp + 0x88]\n116745: a1 = a1 << 0x8\n116748: a2 = u64 [sp + 0xa8]\n116752: a1 = a1 | a2\n116755: a2 = u64 [sp + 0x98]\n116759: a2 = a2 << 0x10\n116762: a3 = u64 [sp + 0x90]\n116766: a3 = a3 << 0x18\n116769: a2 = a2 | a3\n116772: a1 = a1 | a2\n116775: a2 = u64 [sp + 0xa0]\n116779: a2 = a2 << 0x8\n116782: a3 = u64 [sp + 0xc0]\n116786: a2 = a2 | a3\n116789: a3 = u64 [sp + 0xb8]\n116793: a3 = a3 << 0x10\n116796: a4 = u64 [sp + 0xb0]\n116800: a4 = a4 << 0x18\n116803: a3 = a3 | a4\n116806: a2 = a2 | a3\n116809: a2 = a2 << 0x20\n116812: t2 = a2 | a1\n116815: a1 = u64 [sp + 0xc8]\n116819: a1 = a1 << 0x8\n116822: a2 = u64 [sp + 0xe8]\n116826: a1 = a1 | a2\n116829: a2 = u64 [sp + 0xd8]\n116833: a2 = a2 << 0x10\n116836: a4 = u64 [sp + 0xd0]\n116840: a4 = a4 << 0x18\n116843: a2 = a2 | a4\n116846: a1 = a1 | a2\n116849: a2 = u64 [sp + 0xe0]\n116853: a2 = a2 << 0x8\n116856: a3 = u64 [sp + 0x120]\n116860: a2 = a2 | a3\n116863: a4 = u64 [sp + 0xf8]\n116867: a4 = a4 << 0x10\n116870: a5 = u64 [sp + 0xf0]\n116874: a5 = a5 << 0x18\n116877: a4 = a4 | a5\n116880: a2 = a2 | a4\n116883: a2 = a2 << 0x20\n116886: ra = a2 | a1\n116889: a1 = u8 [a0 + 0x1]\n116892: a2 = u8 [a0]\n116894: a5 = u8 [a0 + 0x2]\n116897: s1 = u8 [a0 + 0x3]\n116900: a1 = a1 << 0x8\n116903: a1 = a1 | a2\n116906: a5 = a5 << 0x10\n116909: s1 = s1 << 0x18\n116912: a5 = a5 | s1\n116915: a1 = a1 | a5\n116918: a2 = u8 [a0 + 0x5]\n116921: a5 = u8 [a0 + 0x4]\n116924: s1 = u8 [a0 + 0x6]\n116927: a3 = u8 [a0 + 0x7]\n116930: a2 = a2 << 0x8\n116933: a2 = a2 | a5\n116936: s1 = s1 << 0x10\n116939: a3 = a3 << 0x18\n116942: a3 = a3 | s1\n116945: a2 = a2 | a3\n116948: a2 = a2 << 0x20\n116951: t0 = a2 | a1\n116954: a1 = u8 [a0 + 0x9]\n116957: a2 = u8 [a0 + 0x8]\n116960: a3 = u8 [a0 + 0xa]\n116963: s1 = u8 [a0 + 0xb]\n116966: a1 = a1 << 0x8\n116969: a1 = a1 | a2\n116972: a3 = a3 << 0x10\n116975: s1 = s1 << 0x18\n116978: a3 = a3 | s1\n116981: a1 = a1 | a3\n116984: a2 = u8 [a0 + 0xd]\n116987: a3 = u8 [a0 + 0xc]\n116990: s1 = u8 [a0 + 0xe]\n116993: a4 = u8 [a0 + 0xf]\n116996: a2 = a2 << 0x8\n116999: a2 = a2 | a3\n117002: s1 = s1 << 0x10\n117005: a4 = a4 << 0x18\n117008: a4 = a4 | s1\n117011: a2 = a2 | a4\n117014: a2 = a2 << 0x20\n117017: a5 = a2 | a1\n117020: a2 = u8 [a0 + 0x11]\n117023: a3 = u8 [a0 + 0x10]\n117026: a4 = u8 [a0 + 0x12]\n117029: s1 = u8 [a0 + 0x13]\n117032: a2 = a2 << 0x8\n117035: a2 = a2 | a3\n117038: a4 = a4 << 0x10\n117041: s1 = s1 << 0x18\n117044: a4 = a4 | s1\n117047: a2 = a2 | a4\n117050: a3 = u8 [a0 + 0x15]\n117053: a4 = u8 [a0 + 0x14]\n117056: s1 = u8 [a0 + 0x16]\n117059: a1 = u8 [a0 + 0x17]\n117062: a3 = a3 << 0x8\n117065: a3 = a3 | a4\n117068: s1 = s1 << 0x10\n117071: a1 = a1 << 0x18\n117074: a1 = a1 | s1\n117077: a1 = a1 | a3\n117080: a1 = a1 << 0x20\n117083: a2 = a2 | a1\n117086: a1 = u8 [a0 + 0x19]\n117089: a3 = u8 [a0 + 0x18]\n117092: a4 = u8 [a0 + 0x1a]\n117095: s1 = u8 [a0 + 0x1b]\n117098: a1 = a1 << 0x8\n117101: a1 = a1 | a3\n117104: a4 = a4 << 0x10\n117107: s1 = s1 << 0x18\n117110: a4 = a4 | s1\n117113: a1 = a1 | a4\n117116: a3 = u8 [a0 + 0x1d]\n117119: a4 = u8 [a0 + 0x1c]\n117122: s1 = u8 [a0 + 0x1e]\n117125: a0 = u8 [a0 + 0x1f]\n117128: a3 = a3 << 0x8\n117131: a3 = a3 | a4\n117134: s1 = s1 << 0x10\n117137: a0 = a0 << 0x18\n117140: a0 = a0 | s1\n117143: a0 = a0 | a3\n117146: a0 = a0 << 0x20\n117149: a0 = a0 | a1\n117152: s1 = reverse ra\n117154: a1 = reverse t2\n117156: u64 [sp + 0xe8] = a1\n117160: a1 = reverse t1\n117162: u64 [sp + 0xf0] = a1\n117166: a1 = u64 [sp + 0x140]\n117170: a1 = reverse a1\n117172: u64 [sp + 0xf8] = a1\n117176: a0 = reverse a0\n117178: u64 [sp + 0x140] = a0\n117182: a0 = reverse a2\n117184: u64 [sp + 0x130] = a0\n117188: a0 = reverse a5\n117190: u64 [sp + 0x128] = a0\n117194: a0 = reverse t0\n117196: u64 [sp + 0x120] = a0\n117200: a0 = u64 [sp + 0x148]\n117204: i32 a0 = a0 + 0x60\n117207: a1 = 0x20\n117210: ra = 1322, jump @0\n      : @1530 [@dyn 661] (gas: 34)\n117217: a0 = u8 [a0]\n117219: u64 [sp + 0x188] = s1\n117223: a1 = u64 [sp + 0xe8]\n117227: u64 [sp + 0x180] = a1\n117231: a1 = u64 [sp + 0xf0]\n117235: u64 [sp + 0x178] = a1\n117239: a1 = u64 [sp + 0xf8]\n117243: u64 [sp + 0x170] = a1\n117247: u64 [sp + 0x190] = a0\n117251: u64 [sp + 424] = 0\n117255: u64 [sp + 416] = 0\n117259: u64 [sp + 408] = 0\n117263: a0 = u64 [sp + 0x100]\n117267: u64 [sp + 0x1c8] = a0\n117271: a0 = u64 [sp + 0x108]\n117275: u64 [sp + 0x1c0] = a0\n117279: a0 = u64 [sp + 0x110]\n117283: u64 [sp + 0x1b8] = a0\n117287: a0 = u64 [sp + 0x118]\n117291: u64 [sp + 0x1b0] = a0\n117295: a0 = u64 [sp + 0x120]\n117299: u64 [sp + 0x168] = a0\n117303: a0 = u64 [sp + 0x128]\n117307: u64 [sp + 0x160] = a0\n117311: a0 = u64 [sp + 0x130]\n117315: u64 [sp + 0x158] = a0\n117319: a0 = sp + 0x1d0\n117323: a1 = sp + 0x1b0\n117327: a2 = sp + 0x190\n117331: a3 = sp + 0x170\n117335: a4 = sp + 0x150\n117339: a5 = u64 [sp + 0x140]\n117343: u64 [sp + 0x150] = a5\n117347: ra = 1324, jump @1568\n      : @1531 [@dyn 662] (gas: 15)\n117353: a5 = u64 [sp + 0x1e8]\n117357: t1 = u64 [sp + 0x1e0]\n117361: s1 = u64 [sp + 0x1d8]\n117365: a0 = u64 [sp + 0x1d0]\n117369: u64 [sp + 0x148] = a0\n117373: a0 = u64 [sp + 0x208]\n117377: u64 [sp + 0x140] = a0\n117381: ra = u64 [sp + 0x200]\n117385: t2 = u64 [sp + 0x1f8]\n117389: a4 = u64 [sp + 0x1f0]\n117393: a0 = u64 [sp + 0x228]\n117397: a3 = u64 [sp + 0x220]\n117401: a2 = u64 [sp + 0x218]\n117405: t0 = u64 [sp + 0x210]\n117409: jump @1534\n      : @1532 (gas: 3)\n117412: a1 = 0x20\n117415: a0 = u64 [sp + 0x148]\n117419: ra = 1326, jump @0\n      : @1533 [@dyn 663] (gas: 103)\n117426: u64 [sp + 328] = 0\n117430: u64 [sp + 304] = 0\n117434: u64 [sp + 296] = 0\n117438: t2 = 0\n117440: ra = 0\n117442: u64 [sp + 320] = 0\n117446: a2 = u8 [a0 + 0x19]\n117449: a3 = u8 [a0 + 0x18]\n117452: a4 = u8 [a0 + 0x1a]\n117455: a5 = u8 [a0 + 0x1b]\n117458: a2 = a2 << 0x8\n117461: a2 = a2 | a3\n117464: a4 = a4 << 0x10\n117467: a5 = a5 << 0x18\n117470: a4 = a4 | a5\n117473: a2 = a2 | a4\n117476: a3 = u8 [a0 + 0x1d]\n117479: a4 = u8 [a0 + 0x1c]\n117482: a5 = u8 [a0 + 0x1e]\n117485: s1 = u8 [a0 + 0x1f]\n117488: a3 = a3 << 0x8\n117491: a3 = a3 | a4\n117494: a5 = a5 << 0x10\n117497: s1 = s1 << 0x18\n117500: a5 = a5 | s1\n117503: a3 = a3 | a5\n117506: a3 = a3 << 0x20\n117509: t0 = a3 | a2\n117512: a2 = u8 [a0 + 0x11]\n117515: a3 = u8 [a0 + 0x10]\n117518: a5 = u8 [a0 + 0x12]\n117521: s1 = u8 [a0 + 0x13]\n117524: a2 = a2 << 0x8\n117527: a2 = a2 | a3\n117530: a5 = a5 << 0x10\n117533: s1 = s1 << 0x18\n117536: a5 = a5 | s1\n117539: a2 = a2 | a5\n117542: a3 = u8 [a0 + 0x15]\n117545: a5 = u8 [a0 + 0x14]\n117548: s1 = u8 [a0 + 0x16]\n117551: a4 = u8 [a0 + 0x17]\n117554: a3 = a3 << 0x8\n117557: a3 = a3 | a5\n117560: s1 = s1 << 0x10\n117563: a4 = a4 << 0x18\n117566: a4 = a4 | s1\n117569: a3 = a3 | a4\n117572: a3 = a3 << 0x20\n117575: a2 = a2 | a3\n117578: a3 = u8 [a0 + 0x9]\n117581: a4 = u8 [a0 + 0x8]\n117584: a5 = u8 [a0 + 0xa]\n117587: s1 = u8 [a0 + 0xb]\n117590: a3 = a3 << 0x8\n117593: a3 = a3 | a4\n117596: a5 = a5 << 0x10\n117599: s1 = s1 << 0x18\n117602: a5 = a5 | s1\n117605: a3 = a3 | a5\n117608: a4 = u8 [a0 + 0xd]\n117611: a5 = u8 [a0 + 0xc]\n117614: s1 = u8 [a0 + 0xe]\n117617: t1 = u8 [a0 + 0xf]\n117620: a4 = a4 << 0x8\n117623: a4 = a4 | a5\n117626: s1 = s1 << 0x10\n117629: t1 = t1 << 0x18\n117632: a5 = t1 | s1\n117635: t1 = 0\n117637: a4 = a4 | a5\n117640: a4 = a4 << 0x20\n117643: a3 = a3 | a4\n117646: a4 = u8 [a0 + 0x1]\n117649: a5 = u8 [a0]\n117651: s1 = u8 [a0 + 0x2]\n117654: a1 = u8 [a0 + 0x3]\n117657: a4 = a4 << 0x8\n117660: a4 = a4 | a5\n117663: s1 = s1 << 0x10\n117666: a1 = a1 << 0x18\n117669: a1 = a1 | s1\n117672: a1 = a1 | a4\n117675: a4 = u8 [a0 + 0x5]\n117678: a5 = u8 [a0 + 0x4]\n117681: s1 = u8 [a0 + 0x6]\n117684: a0 = u8 [a0 + 0x7]\n117687: a4 = a4 << 0x8\n117690: a4 = a4 | a5\n117693: a5 = u64 [sp + 0x128]\n117697: s1 = s1 << 0x10\n117700: a0 = a0 << 0x18\n117703: a0 = a0 | s1\n117706: s1 = u64 [sp + 0x130]\n117710: a0 = a0 | a4\n117713: a0 = a0 << 0x20\n117716: a0 = a0 | a1\n117719: a0 = reverse a0\n117721: a3 = reverse a3\n117723: a2 = reverse a2\n117725: t0 = reverse t0\n117727: a4 = 0x2\n117730: fallthrough\n      : @1534 (gas: 21)\n117731: a1 = u64 [sp + 0x138]\n117735: u64 [a1 + 0x40] = t0\n117738: u64 [a1 + 0x20] = a4\n117741: a4 = u64 [sp + 0x148]\n117745: u64 [a1] = a4\n117747: u64 [a1 + 0x48] = a2\n117750: u64 [a1 + 0x28] = t2\n117753: u64 [a1 + 0x8] = s1\n117756: u64 [a1 + 0x50] = a3\n117759: u64 [a1 + 0x30] = ra\n117762: u64 [a1 + 0x10] = t1\n117765: u64 [a1 + 0x58] = a0\n117768: a0 = u64 [sp + 0x140]\n117772: u64 [a1 + 0x38] = a0\n117775: u64 [a1 + 0x18] = a5\n117778: sp = s0 + 0xfffffffffffffdb0\n117782: ra = u64 [sp + 0x248]\n117786: s0 = u64 [sp + 0x240]\n117790: s1 = u64 [sp + 0x238]\n117794: sp = sp + 0x250\n117798: ret\n      : @1535 (gas: 1)\n117800: trap\n      : @1536 (gas: 15)\n117801: sp = sp + 0xffffffffffffff80\n117804: u64 [sp + 0x78] = ra\n117807: u64 [sp + 0x70] = s0\n117810: u64 [sp + 0x68] = s1\n117813: s0 = sp + 0x80\n117817: sp = sp & 0xfffffffffffffff0\n117820: a3 = u64 [a0 + 0x18]\n117823: a4 = u64 [a0 + 0x10]\n117826: a2 = u64 [a0]\n117828: a0 = u64 [a0 + 0x8]\n117831: a3 = a3 | a4\n117834: a4 = a2 <u 0x4\n117837: a4 = 0 if a0 != 0\n117839: a4 = 0 if a3 != 0\n117841: jump @1539 if a4 == 0\n      : @1537 (gas: 2)\n117844: a0 = a2 & 0x3\n117847: jump @1542 if a0 != 0\n      : @1538 (gas: 6)\n117850: sp = s0 + 0xffffffffffffff80\n117853: ra = u64 [sp + 0x78]\n117856: s0 = u64 [sp + 0x70]\n117859: s1 = u64 [sp + 0x68]\n117862: sp = sp + 0x80\n117866: ret\n      : @1539 (gas: 8)\n117868: u64 [sp + 80] = 0\n117871: u64 [sp + 72] = 0\n117874: u64 [sp + 64] = 0\n117877: a0 = 0x4e487b7100000000\n117887: a1 = sp + 0x40\n117890: u64 [sp + 0x58] = a0\n117893: a0 = 0\n117895: ra = 1328, jump @23\n      : @1540 [@dyn 664] (gas: 7)\n117902: u64 [sp + 56] = 0\n117905: u64 [sp + 48] = 0\n117908: u64 [sp + 32] = 0x21\n117912: a0 = 0x4\n117915: a1 = sp + 0x20\n117918: u64 [sp + 40] = 0\n117921: ra = 1330, jump @23\n      : @1541 [@dyn 665] (gas: 1)\n117928: jump @1553\n      : @1542 (gas: 1)\n117931: jump @1546 if a0 != 1\n      : @1543 (gas: 3)\n117936: a1 = 0x20\n117939: a0 = 0\n117941: ra = 1332, jump @0\n      : @1544 [@dyn 666] (gas: 35)\n117948: u8 [a0 + 31] = 0\n117951: u8 [a0 + 30] = 0\n117954: u8 [a0 + 29] = 0\n117957: u8 [a0 + 28] = 0\n117960: u8 [a0 + 27] = 0\n117963: u8 [a0 + 26] = 0\n117966: u8 [a0 + 25] = 0\n117969: u8 [a0 + 24] = 0\n117972: u8 [a0 + 23] = 0\n117975: u8 [a0 + 22] = 0\n117978: u8 [a0 + 21] = 0\n117981: u8 [a0 + 20] = 0\n117984: u8 [a0 + 19] = 0\n117987: u8 [a0 + 18] = 0\n117990: u8 [a0 + 17] = 0\n117993: u8 [a0 + 16] = 0\n117996: u8 [a0 + 15] = 0\n117999: u8 [a0 + 14] = 0\n118002: u8 [a0 + 13] = 0\n118005: u8 [a0 + 12] = 0\n118008: u8 [a0 + 11] = 0\n118011: u8 [a0 + 10] = 0\n118014: u8 [a0 + 9] = 0\n118017: u8 [a0 + 8] = 0\n118020: u8 [a0 + 7] = 0\n118023: u8 [a0 + 6] = 0\n118026: u8 [a0 + 5] = 0\n118029: u8 [a0 + 4] = 0\n118032: u8 [a0 + 3] = 0xdf\n118037: u8 [a0 + 2] = 0xee\n118042: u8 [a0 + 1] = 0x45\n118046: u8 [a0 + 0] = 0xf6\n118050: a1 = 0x4\n118053: a0 = 0\n118055: ra = 1334, jump @0\n      : @1545 [@dyn 667] (gas: 5)\n118062: i32 a1 = a0 + 0\n118064: a0 = 0x1\n118067: a2 = 0x4\n118070: ecalli 14 // 'seal_return'\n118072: fallthrough\n      : @1546 (gas: 8)\n118073: s1 = u64 [a1 + 0x18]\n118076: a2 = u64 [a1 + 0x10]\n118079: u64 [sp + 0x8] = a2\n118082: a2 = u64 [a1 + 0x8]\n118085: u64 [sp + 0x10] = a2\n118088: a1 = u64 [a1]\n118090: u64 [sp + 0x18] = a1\n118093: jump @1549 if a0 != 2\n      : @1547 (gas: 3)\n118097: a1 = 0x20\n118100: a0 = 0\n118102: ra = 1336, jump @0\n      : @1548 [@dyn 668] (gas: 33)\n118109: u8 [a0 + 31] = 0\n118112: u8 [a0 + 30] = 0\n118115: u8 [a0 + 29] = 0\n118118: u8 [a0 + 28] = 0\n118121: u8 [a0 + 27] = 0\n118124: u8 [a0 + 26] = 0\n118127: u8 [a0 + 25] = 0\n118130: u8 [a0 + 24] = 0\n118133: u8 [a0 + 23] = 0\n118136: u8 [a0 + 22] = 0\n118139: u8 [a0 + 21] = 0\n118142: u8 [a0 + 20] = 0\n118145: u8 [a0 + 19] = 0\n118148: u8 [a0 + 18] = 0\n118151: u8 [a0 + 17] = 0\n118154: u8 [a0 + 16] = 0\n118157: u8 [a0 + 15] = 0\n118160: u8 [a0 + 14] = 0\n118163: u8 [a0 + 13] = 0\n118166: u8 [a0 + 12] = 0\n118169: u8 [a0 + 11] = 0\n118172: u8 [a0 + 10] = 0\n118175: u8 [a0 + 9] = 0\n118178: u8 [a0 + 8] = 0\n118181: u8 [a0 + 7] = 0\n118184: u8 [a0 + 6] = 0\n118187: u8 [a0 + 5] = 0\n118190: u8 [a0 + 4] = 0\n118193: u8 [a0 + 3] = 0xf7\n118198: u8 [a0 + 2] = 0x98\n118203: u8 [a0 + 1] = 0xe6\n118208: a1 = 0xfc\n118212: jump @1551\n      : @1549 (gas: 3)\n118214: a1 = 0x20\n118217: a0 = 0\n118219: ra = 1338, jump @0\n      : @1550 [@dyn 669] (gas: 33)\n118226: u8 [a0 + 31] = 0\n118229: u8 [a0 + 30] = 0\n118232: u8 [a0 + 29] = 0\n118235: u8 [a0 + 28] = 0\n118238: u8 [a0 + 27] = 0\n118241: u8 [a0 + 26] = 0\n118244: u8 [a0 + 25] = 0\n118247: u8 [a0 + 24] = 0\n118250: u8 [a0 + 23] = 0\n118253: u8 [a0 + 22] = 0\n118256: u8 [a0 + 21] = 0\n118259: u8 [a0 + 20] = 0\n118262: u8 [a0 + 19] = 0\n118265: u8 [a0 + 18] = 0\n118268: u8 [a0 + 17] = 0\n118271: u8 [a0 + 16] = 0\n118274: u8 [a0 + 15] = 0\n118277: u8 [a0 + 14] = 0\n118280: u8 [a0 + 13] = 0\n118283: u8 [a0 + 12] = 0\n118286: u8 [a0 + 11] = 0\n118289: u8 [a0 + 10] = 0\n118292: u8 [a0 + 9] = 0\n118295: u8 [a0 + 8] = 0\n118298: u8 [a0 + 7] = 0\n118301: u8 [a0 + 6] = 0\n118304: u8 [a0 + 5] = 0\n118307: u8 [a0 + 4] = 0\n118310: u8 [a0 + 3] = 0xc\n118314: u8 [a0 + 2] = 0xce\n118319: u8 [a0 + 1] = 0x8b\n118324: a1 = 0xd7\n118328: fallthrough\n      : @1551 (gas: 4)\n118329: u8 [a0] = a1\n118331: a0 = 0x4\n118334: a1 = 0x20\n118337: ra = 1340, jump @0\n      : @1552 [@dyn 670] (gas: 68)\n118344: a1 = reverse s1\n118346: a2 = u64 [sp + 0x8]\n118349: a2 = reverse a2\n118351: a3 = u64 [sp + 0x10]\n118354: a3 = reverse a3\n118356: a4 = u64 [sp + 0x18]\n118359: a4 = reverse a4\n118361: a5 = a4 >> 0x38\n118364: u8 [a0 + 0x1f] = a5\n118367: a5 = a4 >> 0x30\n118370: u8 [a0 + 0x1e] = a5\n118373: a5 = a4 >> 0x28\n118376: u8 [a0 + 0x1d] = a5\n118379: a5 = a4 >> 0x20\n118382: u8 [a0 + 0x1c] = a5\n118385: a5 = a4 >> 0x18\n118388: u8 [a0 + 0x1b] = a5\n118391: a5 = a4 >> 0x10\n118394: u8 [a0 + 0x1a] = a5\n118397: a5 = a4 >> 0x8\n118400: u8 [a0 + 0x19] = a5\n118403: u8 [a0 + 0x18] = a4\n118406: a4 = a3 >> 0x38\n118409: u8 [a0 + 0x17] = a4\n118412: a4 = a3 >> 0x30\n118415: u8 [a0 + 0x16] = a4\n118418: a4 = a3 >> 0x28\n118421: u8 [a0 + 0x15] = a4\n118424: a4 = a3 >> 0x20\n118427: u8 [a0 + 0x14] = a4\n118430: a4 = a3 >> 0x18\n118433: u8 [a0 + 0x13] = a4\n118436: a4 = a3 >> 0x10\n118439: u8 [a0 + 0x12] = a4\n118442: a4 = a3 >> 0x8\n118445: u8 [a0 + 0x11] = a4\n118448: u8 [a0 + 0x10] = a3\n118451: a3 = a2 >> 0x38\n118454: u8 [a0 + 0xf] = a3\n118457: a3 = a2 >> 0x30\n118460: u8 [a0 + 0xe] = a3\n118463: a3 = a2 >> 0x28\n118466: u8 [a0 + 0xd] = a3\n118469: a3 = a2 >> 0x20\n118472: u8 [a0 + 0xc] = a3\n118475: a3 = a2 >> 0x18\n118478: u8 [a0 + 0xb] = a3\n118481: a3 = a2 >> 0x10\n118484: u8 [a0 + 0xa] = a3\n118487: a3 = a2 >> 0x8\n118490: u8 [a0 + 0x9] = a3\n118493: u8 [a0 + 0x8] = a2\n118496: u8 [a0] = a1\n118498: a2 = a1 >> 0x38\n118501: u8 [a0 + 0x7] = a2\n118504: a2 = a1 >> 0x30\n118507: u8 [a0 + 0x6] = a2\n118510: a2 = a1 >> 0x28\n118513: u8 [a0 + 0x5] = a2\n118516: a2 = a1 >> 0x20\n118519: u8 [a0 + 0x4] = a2\n118522: a2 = a1 >> 0x18\n118525: u8 [a0 + 0x3] = a2\n118528: a2 = a1 >> 0x10\n118531: u8 [a0 + 0x2] = a2\n118534: a1 = a1 >> 0x8\n118537: u8 [a0 + 0x1] = a1\n118540: fallthrough\n      : @1553 (gas: 3)\n118541: a1 = 0x24\n118544: a0 = 0\n118546: ra = 1342, jump @0\n      : @1554 [@dyn 671] (gas: 6)\n118553: i32 a1 = a0 + 0\n118555: a0 = 0x1\n118558: a2 = 0x24\n118561: ra = 0x540\n118565: ecalli 14 // 'seal_return'\n118567: fallthrough\n      : @1555 [@dyn 672] (gas: 9)\n118568: a2 = u64 [a1 + 0x18]\n118571: a3 = u64 [a1 + 0x10]\n118574: a4 = u64 [a1 + 0x8]\n118577: a1 = u64 [a1]\n118579: u64 [a0 + 0x18] = a2\n118582: u64 [a0 + 0x10] = a3\n118585: u64 [a0 + 0x8] = a4\n118588: u64 [a0] = a1\n118590: ret\n      : @1556 [@dyn 673] (gas: 97)\n118592: a1 = u8 [a0 + 0x11]\n118595: a2 = u8 [a0 + 0x10]\n118598: a3 = u8 [a0 + 0x12]\n118601: a4 = u8 [a0 + 0x13]\n118604: a1 = a1 << 0x8\n118607: a1 = a1 | a2\n118610: a3 = a3 << 0x10\n118613: a4 = a4 << 0x18\n118616: a3 = a3 | a4\n118619: a1 = a1 | a3\n118622: a2 = u8 [a0 + 0x15]\n118625: a3 = u8 [a0 + 0x14]\n118628: a4 = u8 [a0 + 0x16]\n118631: a5 = u8 [a0 + 0x17]\n118634: a2 = a2 << 0x8\n118637: a2 = a2 | a3\n118640: a4 = a4 << 0x10\n118643: a5 = a5 << 0x18\n118646: a4 = a4 | a5\n118649: a2 = a2 | a4\n118652: a2 = a2 << 0x20\n118655: t0 = a2 | a1\n118658: a2 = u8 [a0 + 0x1]\n118661: a3 = u8 [a0]\n118663: a4 = u8 [a0 + 0x2]\n118666: a5 = u8 [a0 + 0x3]\n118669: a2 = a2 << 0x8\n118672: a2 = a2 | a3\n118675: a4 = a4 << 0x10\n118678: a5 = a5 << 0x18\n118681: a4 = a4 | a5\n118684: a2 = a2 | a4\n118687: a3 = u8 [a0 + 0x5]\n118690: a4 = u8 [a0 + 0x4]\n118693: a5 = u8 [a0 + 0x6]\n118696: s1 = u8 [a0 + 0x7]\n118699: a3 = a3 << 0x8\n118702: a3 = a3 | a4\n118705: a5 = a5 << 0x10\n118708: s1 = s1 << 0x18\n118711: a5 = a5 | s1\n118714: a3 = a3 | a5\n118717: a3 = a3 << 0x20\n118720: a2 = a2 | a3\n118723: a3 = u8 [a0 + 0x19]\n118726: a4 = u8 [a0 + 0x18]\n118729: a5 = u8 [a0 + 0x1a]\n118732: s1 = u8 [a0 + 0x1b]\n118735: a3 = a3 << 0x8\n118738: a3 = a3 | a4\n118741: a5 = a5 << 0x10\n118744: s1 = s1 << 0x18\n118747: a5 = a5 | s1\n118750: a3 = a3 | a5\n118753: a4 = u8 [a0 + 0x1d]\n118756: a5 = u8 [a0 + 0x1c]\n118759: s1 = u8 [a0 + 0x1e]\n118762: a1 = u8 [a0 + 0x1f]\n118765: a4 = a4 << 0x8\n118768: a4 = a4 | a5\n118771: s1 = s1 << 0x10\n118774: a1 = a1 << 0x18\n118777: a1 = a1 | s1\n118780: a1 = a1 | a4\n118783: a1 = a1 << 0x20\n118786: a3 = a3 | a1\n118789: a1 = u8 [a0 + 0x9]\n118792: a4 = u8 [a0 + 0x8]\n118795: a5 = u8 [a0 + 0xa]\n118798: s1 = u8 [a0 + 0xb]\n118801: a1 = a1 << 0x8\n118804: a1 = a1 | a4\n118807: a5 = a5 << 0x10\n118810: s1 = s1 << 0x18\n118813: a5 = a5 | s1\n118816: a1 = a1 | a5\n118819: a4 = u8 [a0 + 0xd]\n118822: a5 = u8 [a0 + 0xc]\n118825: s1 = u8 [a0 + 0xe]\n118828: a0 = u8 [a0 + 0xf]\n118831: a4 = a4 << 0x8\n118834: a4 = a4 | a5\n118837: s1 = s1 << 0x10\n118840: a0 = a0 << 0x18\n118843: a0 = a0 | s1\n118846: a0 = a0 | a4\n118849: a0 = a0 << 0x20\n118852: a0 = a0 | a1\n118855: s1 = reverse a0\n118857: a0 = reverse a3\n118859: u64 [sp + 0x8] = a0\n118862: a0 = reverse a2\n118864: u64 [sp + 0x18] = a0\n118867: a0 = reverse t0\n118869: u64 [sp + 0x10] = a0\n118872: ecalli 13 // 'return_data_size'\n118874: fallthrough\n      : @1557 (gas: 11)\n118875: a3 = u64 [sp + 0x8]\n118878: a1 = u64 [sp + 0x18]\n118881: a2 = u64 [sp + 0x10]\n118884: a1 = a1 | a2\n118887: a2 = a3 | s1\n118890: a2 = a2 | a1\n118893: a2 = a2 >> 0x20\n118896: a1 = a1 | s1\n118899: a1 = a1 << 0x20\n118902: a1 = a1 | a2\n118905: jump @1564 if a1 != 0\n      : @1558 (gas: 3)\n118908: s1 = a0\n118910: a0 = a0 >> 0x20\n118913: jump @1564 if a0 != 0\n      : @1559 (gas: 5)\n118916: i32 a0 = a3 + 0\n118918: i32 a1 = s1 + 0\n118920: u64 [sp + 0x18] = a1\n118923: u64 [sp + 0x10] = a0\n118926: ra = 1348, jump @0\n      : @1560 [@dyn 674] (gas: 6)\n118933: u32 [sp + 0x20] = s1\n118936: i32 a0 = a0 + 0\n118938: i32 a1 = sp + 0x20\n118941: a2 = 0\n118943: ecalli 12 // 'return_data_copy'\n118945: fallthrough\n      : @1561 (gas: 3)\n118946: a0 = i32 [sp + 0x20]\n118949: a1 = u64 [sp + 0x18]\n118952: jump @1564 if a0 <u a1\n      : @1562 (gas: 2)\n118955: ecalli 13 // 'return_data_size'\n118957: fallthrough\n      : @1563 (gas: 2)\n118958: a1 = a0 >> 0x20\n118961: jump @1565 if a1 == 0\n      : @1564 (gas: 1)\n118964: trap\n      : @1565 (gas: 4)\n118965: i32 s1 = a0 + 0\n118967: a0 = u64 [sp + 0x10]\n118970: a1 = s1\n118972: ra = 1350, jump @0\n      : @1566 [@dyn 675] (gas: 6)\n118979: i32 a1 = a0 + 0\n118981: a0 = 0x1\n118984: a2 = s1\n118986: ra = 0x548\n118990: ecalli 14 // 'seal_return'\n118992: fallthrough\n      : @1567 [@dyn 676] (gas: 9)\n118993: a2 = u64 [a1 + 0x18]\n118996: a3 = u64 [a1 + 0x10]\n118999: a4 = u64 [a1 + 0x8]\n119002: a1 = u64 [a1]\n119004: u64 [a0 + 0x18] = a2\n119007: u64 [a0 + 0x10] = a3\n119010: u64 [a0 + 0x8] = a4\n119013: u64 [a0] = a1\n119015: ret\n      : @1568 (gas: 30)\n119017: sp = sp + 0xfffffffffffffec0\n119021: u64 [sp + 0x138] = ra\n119025: u64 [sp + 0x130] = s0\n119029: u64 [sp + 0x128] = s1\n119033: s0 = sp + 0x140\n119037: sp = sp & 0xffffffffffffffe0\n119040: t2 = u64 [a4 + 0x10]\n119043: t1 = u64 [a4]\n119045: ra = u64 [a4 + 0x8]\n119048: t0 = u64 [0x20060]\n119053: s1 = u64 [0x20068]\n119058: a5 = u64 [a4 + 0x18]\n119061: a4 = ra ^ t0\n119064: u64 [sp + 0x90] = a4\n119068: u64 [sp + 0x98] = ra\n119072: t0 = ra <u t0\n119075: u64 [sp + 0x78] = t1\n119078: s1 = t1 <u s1\n119081: a4 = u64 [sp + 0x90]\n119085: s1 = t0 if a4 != 0\n119088: a4 = 0x7fffffffffffffff\n119098: ra = a5 ^ a4\n119101: u64 [sp + 0x80] = a5\n119105: t0 = a5 <u a4\n119108: a4 = t2 <u 0xffffffffffffffff\n119111: a4 = t0 if ra != 0\n119114: t0 = t2\n119116: a5 = ra | ~t2\n119119: a4 = s1 if a5 == 0\n119122: jump @1570 if a4 != 0\n      : @1569 (gas: 8)\n119125: a3 = 0\n119127: s1 = 0\n119129: a2 = 0\n119131: a5 = 0x3\n119134: t1 = u64 [sp + 0x80]\n119138: a1 = u64 [sp + 0x78]\n119141: t2 = u64 [sp + 0x98]\n119145: jump @1586\n      : @1570 (gas: 23)\n119148: u64 [sp + 0x18] = t0\n119151: u64 [sp + 0x10] = a0\n119154: a0 = u64 [a3 + 0x18]\n119157: u64 [sp + 0x20] = a0\n119160: a0 = u64 [a3 + 0x10]\n119163: u64 [sp + 0x28] = a0\n119166: a0 = u64 [a3 + 0x8]\n119169: u64 [sp + 0x30] = a0\n119172: a0 = u64 [a3]\n119174: u64 [sp + 0x38] = a0\n119177: a0 = u64 [a2]\n119179: u64 [sp + 0x40] = a0\n119182: a0 = u64 [a1 + 0x18]\n119185: u64 [sp + 0x50] = a0\n119188: a0 = u64 [a1 + 0x10]\n119191: u64 [sp + 0x58] = a0\n119194: a0 = u64 [a1 + 0x8]\n119197: u64 [sp + 0x60] = a0\n119200: a0 = u64 [a1]\n119202: u64 [sp + 0x68] = a0\n119205: a0 = 0x40\n119208: a1 = 0x20\n119211: ra = 1354, jump @0\n      : @1571 [@dyn 677] (gas: 103)\n119218: a1 = u8 [a0 + 0x11]\n119221: a2 = u8 [a0 + 0x10]\n119224: a3 = u8 [a0 + 0x12]\n119227: a4 = u8 [a0 + 0x13]\n119230: a1 = a1 << 0x8\n119233: a1 = a1 | a2\n119236: a3 = a3 << 0x10\n119239: a4 = a4 << 0x18\n119242: a3 = a3 | a4\n119245: a1 = a1 | a3\n119248: a2 = u8 [a0 + 0x15]\n119251: a3 = u8 [a0 + 0x14]\n119254: a4 = u8 [a0 + 0x16]\n119257: a5 = u8 [a0 + 0x17]\n119260: a2 = a2 << 0x8\n119263: a2 = a2 | a3\n119266: a4 = a4 << 0x10\n119269: a5 = a5 << 0x18\n119272: a4 = a4 | a5\n119275: a2 = a2 | a4\n119278: a2 = a2 << 0x20\n119281: t0 = a2 | a1\n119284: a2 = u8 [a0 + 0x1]\n119287: a3 = u8 [a0]\n119289: a4 = u8 [a0 + 0x2]\n119292: a5 = u8 [a0 + 0x3]\n119295: a2 = a2 << 0x8\n119298: a2 = a2 | a3\n119301: a4 = a4 << 0x10\n119304: a5 = a5 << 0x18\n119307: a4 = a4 | a5\n119310: a2 = a2 | a4\n119313: a3 = u8 [a0 + 0x5]\n119316: a4 = u8 [a0 + 0x4]\n119319: a5 = u8 [a0 + 0x6]\n119322: s1 = u8 [a0 + 0x7]\n119325: a3 = a3 << 0x8\n119328: a3 = a3 | a4\n119331: a5 = a5 << 0x10\n119334: s1 = s1 << 0x18\n119337: a5 = a5 | s1\n119340: a3 = a3 | a5\n119343: a3 = a3 << 0x20\n119346: a2 = a2 | a3\n119349: a3 = u8 [a0 + 0x19]\n119352: a4 = u8 [a0 + 0x18]\n119355: a5 = u8 [a0 + 0x1a]\n119358: s1 = u8 [a0 + 0x1b]\n119361: a3 = a3 << 0x8\n119364: a3 = a3 | a4\n119367: a5 = a5 << 0x10\n119370: s1 = s1 << 0x18\n119373: a5 = a5 | s1\n119376: a3 = a3 | a5\n119379: a4 = u8 [a0 + 0x1d]\n119382: a5 = u8 [a0 + 0x1c]\n119385: s1 = u8 [a0 + 0x1e]\n119388: a1 = u8 [a0 + 0x1f]\n119391: a4 = a4 << 0x8\n119394: a4 = a4 | a5\n119397: s1 = s1 << 0x10\n119400: a1 = a1 << 0x18\n119403: a1 = a1 | s1\n119406: a1 = a1 | a4\n119409: a1 = a1 << 0x20\n119412: a3 = a3 | a1\n119415: a1 = u8 [a0 + 0x9]\n119418: a4 = u8 [a0 + 0x8]\n119421: a5 = u8 [a0 + 0xa]\n119424: s1 = u8 [a0 + 0xb]\n119427: a1 = a1 << 0x8\n119430: a1 = a1 | a4\n119433: a5 = a5 << 0x10\n119436: s1 = s1 << 0x18\n119439: a5 = a5 | s1\n119442: a1 = a1 | a5\n119445: a4 = u8 [a0 + 0xd]\n119448: a5 = u8 [a0 + 0xc]\n119451: s1 = u8 [a0 + 0xe]\n119454: a0 = u8 [a0 + 0xf]\n119457: a4 = a4 << 0x8\n119460: a4 = a4 | a5\n119463: s1 = s1 << 0x10\n119466: a0 = a0 << 0x18\n119469: a0 = a0 | s1\n119472: a0 = a0 | a4\n119475: a0 = a0 << 0x20\n119478: a0 = a0 | a1\n119481: s1 = reverse a0\n119483: a1 = reverse a3\n119485: a2 = reverse a2\n119487: a0 = reverse t0\n119489: u64 [sp + 0x70] = a0\n119492: u64 [sp + 0x48] = a2\n119495: a0 = a0 | a2\n119498: u64 [sp + 0x90] = a1\n119502: a1 = a1 | s1\n119505: a1 = a1 | a0\n119508: a1 = a1 >> 0x20\n119511: a0 = a0 | s1\n119514: a0 = a0 << 0x20\n119517: a0 = a0 | a1\n119520: jump @1587 if a0 != 0\n      : @1572 (gas: 4)\n119524: a0 = i32 [sp + 0x90]\n119528: a1 = 0x20\n119531: u64 [sp + 0x88] = a0\n119535: ra = 1356, jump @0\n      : @1573 [@dyn 678] (gas: 79)\n119542: a1 = u64 [sp + 0x50]\n119545: a1 = reverse a1\n119547: a2 = u64 [sp + 0x58]\n119550: a2 = reverse a2\n119552: a3 = u64 [sp + 0x60]\n119555: a3 = reverse a3\n119557: a4 = u64 [sp + 0x68]\n119560: a4 = reverse a4\n119562: a5 = a4 >> 0x38\n119565: u8 [a0 + 0x1f] = a5\n119568: a5 = a4 >> 0x30\n119571: u8 [a0 + 0x1e] = a5\n119574: a5 = a4 >> 0x28\n119577: u8 [a0 + 0x1d] = a5\n119580: a5 = a4 >> 0x20\n119583: u8 [a0 + 0x1c] = a5\n119586: a5 = a4 >> 0x18\n119589: u8 [a0 + 0x1b] = a5\n119592: a5 = a4 >> 0x10\n119595: u8 [a0 + 0x1a] = a5\n119598: a5 = a4 >> 0x8\n119601: u8 [a0 + 0x19] = a5\n119604: u8 [a0 + 0x18] = a4\n119607: u8 [a0 + 0x10] = a3\n119610: a4 = a3 >> 0x38\n119613: u8 [a0 + 0x17] = a4\n119616: a4 = a3 >> 0x30\n119619: u8 [a0 + 0x16] = a4\n119622: a4 = a3 >> 0x28\n119625: u8 [a0 + 0x15] = a4\n119628: a4 = a3 >> 0x20\n119631: u8 [a0 + 0x14] = a4\n119634: a4 = a3 >> 0x18\n119637: u8 [a0 + 0x13] = a4\n119640: a4 = a3 >> 0x10\n119643: u8 [a0 + 0x12] = a4\n119646: a3 = a3 >> 0x8\n119649: u8 [a0 + 0x11] = a3\n119652: u8 [a0 + 0x8] = a2\n119655: a3 = a2 >> 0x38\n119658: u8 [a0 + 0xf] = a3\n119661: a3 = a2 >> 0x30\n119664: u8 [a0 + 0xe] = a3\n119667: a3 = a2 >> 0x28\n119670: u8 [a0 + 0xd] = a3\n119673: a3 = a2 >> 0x20\n119676: u8 [a0 + 0xc] = a3\n119679: a3 = a2 >> 0x18\n119682: u8 [a0 + 0xb] = a3\n119685: a3 = a2 >> 0x10\n119688: u8 [a0 + 0xa] = a3\n119691: a2 = a2 >> 0x8\n119694: u8 [a0 + 0x9] = a2\n119697: u8 [a0] = a1\n119699: a2 = a1 >> 0x38\n119702: u8 [a0 + 0x7] = a2\n119705: a2 = a1 >> 0x30\n119708: u8 [a0 + 0x6] = a2\n119711: a2 = a1 >> 0x28\n119714: u8 [a0 + 0x5] = a2\n119717: a2 = a1 >> 0x20\n119720: u8 [a0 + 0x4] = a2\n119723: a2 = a1 >> 0x18\n119726: u8 [a0 + 0x3] = a2\n119729: a2 = a1 >> 0x10\n119732: u8 [a0 + 0x2] = a2\n119735: a1 = a1 >> 0x8\n119738: a4 = u64 [sp + 0x48]\n119741: a4 = a4 | s1\n119744: s1 = 0x100000000\n119754: a2 = 0xffffffe0\n119764: a3 = u64 [sp + 0x90]\n119768: a2 = a3 <u a2\n119771: a3 = u64 [sp + 0x70]\n119774: a2 = 0 if a3 != 0\n119776: u64 [sp + 0x68] = a4\n119779: a2 = 0 if a4 != 0\n119781: u8 [a0 + 0x1] = a1\n119784: jump @1587 if a2 == 0\n      : @1574 (gas: 4)\n119788: a0 = u64 [sp + 0x88]\n119792: i32 a0 = a0 + 0x20\n119795: a1 = 0x20\n119798: ra = 1358, jump @0\n      : @1575 [@dyn 679] (gas: 41)\n119805: a1 = u64 [sp + 0x40]\n119808: u8 [a0 + 0x1f] = a1\n119811: u8 [a0 + 30] = 0\n119814: u8 [a0 + 29] = 0\n119817: u8 [a0 + 28] = 0\n119820: u8 [a0 + 27] = 0\n119823: u8 [a0 + 26] = 0\n119826: u8 [a0 + 25] = 0\n119829: u8 [a0 + 24] = 0\n119832: u8 [a0 + 23] = 0\n119835: u8 [a0 + 22] = 0\n119838: u8 [a0 + 21] = 0\n119841: u8 [a0 + 20] = 0\n119844: u8 [a0 + 19] = 0\n119847: u8 [a0 + 18] = 0\n119850: u8 [a0 + 17] = 0\n119853: u8 [a0 + 16] = 0\n119856: u8 [a0 + 15] = 0\n119859: u8 [a0 + 14] = 0\n119862: u8 [a0 + 13] = 0\n119865: u8 [a0 + 12] = 0\n119868: u8 [a0 + 11] = 0\n119871: u8 [a0 + 10] = 0\n119874: u8 [a0 + 9] = 0\n119877: u8 [a0 + 8] = 0\n119880: u8 [a0 + 7] = 0\n119883: u8 [a0 + 6] = 0\n119886: u8 [a0 + 5] = 0\n119889: u8 [a0 + 4] = 0\n119892: u8 [a0 + 3] = 0\n119895: u8 [a0 + 2] = 0\n119898: u8 [a0 + 1] = 0\n119901: a1 = s1 + 0xffffffffffffffc0\n119904: a2 = u64 [sp + 0x90]\n119908: a1 = a2 <u a1\n119911: a2 = u64 [sp + 0x70]\n119914: a1 = 0 if a2 != 0\n119916: s1 = u64 [sp + 0x68]\n119919: a1 = 0 if s1 != 0\n119921: u8 [a0 + 0] = 0\n119923: jump @1587 if a1 == 0\n      : @1576 (gas: 4)\n119927: a0 = u64 [sp + 0x88]\n119931: i32 a0 = a0 + 0x40\n119934: a1 = 0x20\n119937: ra = 1360, jump @0\n      : @1577 [@dyn 680] (gas: 76)\n119944: a1 = u64 [sp + 0x20]\n119947: a1 = reverse a1\n119949: a2 = u64 [sp + 0x28]\n119952: a2 = reverse a2\n119954: a3 = u64 [sp + 0x30]\n119957: a3 = reverse a3\n119959: a4 = u64 [sp + 0x38]\n119962: a4 = reverse a4\n119964: a5 = a4 >> 0x38\n119967: u8 [a0 + 0x1f] = a5\n119970: a5 = a4 >> 0x30\n119973: u8 [a0 + 0x1e] = a5\n119976: a5 = a4 >> 0x28\n119979: u8 [a0 + 0x1d] = a5\n119982: a5 = a4 >> 0x20\n119985: u8 [a0 + 0x1c] = a5\n119988: a5 = a4 >> 0x18\n119991: u8 [a0 + 0x1b] = a5\n119994: a5 = a4 >> 0x10\n119997: u8 [a0 + 0x1a] = a5\n120000: a5 = a4 >> 0x8\n120003: u8 [a0 + 0x19] = a5\n120006: u8 [a0 + 0x18] = a4\n120009: u8 [a0 + 0x10] = a3\n120012: a4 = a3 >> 0x38\n120015: u8 [a0 + 0x17] = a4\n120018: a4 = a3 >> 0x30\n120021: u8 [a0 + 0x16] = a4\n120024: a4 = a3 >> 0x28\n120027: u8 [a0 + 0x15] = a4\n120030: a4 = a3 >> 0x20\n120033: u8 [a0 + 0x14] = a4\n120036: a4 = a3 >> 0x18\n120039: u8 [a0 + 0x13] = a4\n120042: a4 = a3 >> 0x10\n120045: u8 [a0 + 0x12] = a4\n120048: a3 = a3 >> 0x8\n120051: u8 [a0 + 0x11] = a3\n120054: u8 [a0 + 0x8] = a2\n120057: a3 = a2 >> 0x38\n120060: u8 [a0 + 0xf] = a3\n120063: a3 = a2 >> 0x30\n120066: u8 [a0 + 0xe] = a3\n120069: a3 = a2 >> 0x28\n120072: u8 [a0 + 0xd] = a3\n120075: a3 = a2 >> 0x20\n120078: u8 [a0 + 0xc] = a3\n120081: a3 = a2 >> 0x18\n120084: u8 [a0 + 0xb] = a3\n120087: a3 = a2 >> 0x10\n120090: u8 [a0 + 0xa] = a3\n120093: a2 = a2 >> 0x8\n120096: u8 [a0 + 0x9] = a2\n120099: u8 [a0] = a1\n120101: a2 = a1 >> 0x38\n120104: u8 [a0 + 0x7] = a2\n120107: a2 = a1 >> 0x30\n120110: u8 [a0 + 0x6] = a2\n120113: a2 = a1 >> 0x28\n120116: u8 [a0 + 0x5] = a2\n120119: a2 = a1 >> 0x20\n120122: u8 [a0 + 0x4] = a2\n120125: a2 = a1 >> 0x18\n120128: u8 [a0 + 0x3] = a2\n120131: a2 = a1 >> 0x10\n120134: u8 [a0 + 0x2] = a2\n120137: a1 = a1 >> 0x8\n120140: a2 = 0xffffffa0\n120150: a3 = u64 [sp + 0x90]\n120154: a2 = a3 <u a2\n120157: a3 = u64 [sp + 0x70]\n120160: a2 = 0 if a3 != 0\n120162: a2 = 0 if s1 != 0\n120164: u8 [a0 + 0x1] = a1\n120167: s1 = u64 [sp + 0x80]\n120171: jump @1587 if a2 == 0\n      : @1578 (gas: 4)\n120175: a0 = u64 [sp + 0x88]\n120179: i32 a0 = a0 + 0x60\n120182: a1 = 0x20\n120185: ra = 1362, jump @0\n      : @1579 [@dyn 681] (gas: 70)\n120192: a1 = reverse s1\n120194: a2 = u64 [sp + 0x18]\n120197: a2 = reverse a2\n120199: a3 = u64 [sp + 0x98]\n120203: a3 = reverse a3\n120205: a4 = u64 [sp + 0x78]\n120208: a4 = reverse a4\n120210: a5 = a4 >> 0x38\n120213: u8 [a0 + 0x1f] = a5\n120216: a5 = a4 >> 0x30\n120219: u8 [a0 + 0x1e] = a5\n120222: a5 = a4 >> 0x28\n120225: u8 [a0 + 0x1d] = a5\n120228: a5 = a4 >> 0x20\n120231: u8 [a0 + 0x1c] = a5\n120234: a5 = a4 >> 0x18\n120237: u8 [a0 + 0x1b] = a5\n120240: a5 = a4 >> 0x10\n120243: u8 [a0 + 0x1a] = a5\n120246: a5 = a4 >> 0x8\n120249: u8 [a0 + 0x19] = a5\n120252: u8 [a0 + 0x18] = a4\n120255: u8 [a0 + 0x10] = a3\n120258: a4 = a3 >> 0x38\n120261: u8 [a0 + 0x17] = a4\n120264: a4 = a3 >> 0x30\n120267: u8 [a0 + 0x16] = a4\n120270: a4 = a3 >> 0x28\n120273: u8 [a0 + 0x15] = a4\n120276: a4 = a3 >> 0x20\n120279: u8 [a0 + 0x14] = a4\n120282: a4 = a3 >> 0x18\n120285: u8 [a0 + 0x13] = a4\n120288: a4 = a3 >> 0x10\n120291: u8 [a0 + 0x12] = a4\n120294: a3 = a3 >> 0x8\n120297: u8 [a0 + 0x11] = a3\n120300: u8 [a0 + 0x8] = a2\n120303: a3 = a2 >> 0x38\n120306: u8 [a0 + 0xf] = a3\n120309: a3 = a2 >> 0x30\n120312: u8 [a0 + 0xe] = a3\n120315: a3 = a2 >> 0x28\n120318: u8 [a0 + 0xd] = a3\n120321: a3 = a2 >> 0x20\n120324: u8 [a0 + 0xc] = a3\n120327: a3 = a2 >> 0x18\n120330: u8 [a0 + 0xb] = a3\n120333: a3 = a2 >> 0x10\n120336: u8 [a0 + 0xa] = a3\n120339: a2 = a2 >> 0x8\n120342: u8 [a0 + 0x9] = a2\n120345: u8 [a0] = a1\n120347: a2 = a1 >> 0x38\n120350: u8 [a0 + 0x7] = a2\n120353: a2 = a1 >> 0x30\n120356: u8 [a0 + 0x6] = a2\n120359: a2 = a1 >> 0x28\n120362: u8 [a0 + 0x5] = a2\n120365: a2 = a1 >> 0x20\n120368: u8 [a0 + 0x4] = a2\n120371: a2 = a1 >> 0x18\n120374: u8 [a0 + 0x3] = a2\n120377: a2 = a1 >> 0x10\n120380: u8 [a0 + 0x2] = a2\n120383: a1 = a1 >> 0x8\n120386: u8 [a0 + 0x1] = a1\n120389: a1 = 0x20\n120392: a0 = 0\n120394: ra = 1364, jump @0\n      : @1580 [@dyn 682] (gas: 43)\n120401: u8 [a0 + 31] = 0\n120404: u8 [a0 + 30] = 0\n120407: u8 [a0 + 29] = 0\n120410: u8 [a0 + 28] = 0\n120413: u8 [a0 + 27] = 0\n120416: u8 [a0 + 26] = 0\n120419: u8 [a0 + 25] = 0\n120422: u8 [a0 + 24] = 0\n120425: u8 [a0 + 23] = 0\n120428: u8 [a0 + 22] = 0\n120431: u8 [a0 + 21] = 0\n120434: u8 [a0 + 20] = 0\n120437: u8 [a0 + 19] = 0\n120440: u8 [a0 + 18] = 0\n120443: u8 [a0 + 17] = 0\n120446: u8 [a0 + 16] = 0\n120449: u8 [a0 + 15] = 0\n120452: u8 [a0 + 14] = 0\n120455: u8 [a0 + 13] = 0\n120458: u8 [a0 + 12] = 0\n120461: u8 [a0 + 11] = 0\n120464: u8 [a0 + 10] = 0\n120467: u8 [a0 + 9] = 0\n120470: u8 [a0 + 8] = 0\n120473: u8 [a0 + 7] = 0\n120476: u8 [a0 + 6] = 0\n120479: u8 [a0 + 5] = 0\n120482: u8 [a0 + 4] = 0\n120485: u8 [a0 + 3] = 0\n120488: u8 [a0 + 2] = 0\n120491: u8 [a0 + 1] = 0\n120494: u8 [a0 + 0] = 0\n120496: ecalli 11 // 'ref_time_left'\n120498: u64 [sp + 168] = 0\n120502: u64 [sp + 160] = 0\n120506: u32 [sp + 176] = 0x1000000\n120514: u64 [sp + 216] = 0\n120518: u64 [sp + 208] = 0\n120522: u64 [sp + 200] = 0\n120526: u64 [sp + 192] = 0\n120530: a1 = 0x80\n120534: a0 = u64 [sp + 0x88]\n120538: ra = 1366, jump @0\n      : @1581 [@dyn 683] (gas: 4)\n120545: u64 [sp + 0x98] = a0\n120549: a1 = 0x20\n120552: a0 = 0\n120554: ra = 1368, jump @0\n      : @1582 [@dyn 684] (gas: 31)\n120561: u32 [sp + 224] = 0x20\n120566: u64 [sp + 280] = 0\n120570: u64 [sp + 272] = 0\n120574: u64 [sp + 264] = 0\n120578: u64 [sp + 256] = 0\n120582: a1 = sp + 0xa0\n120586: a1 = a1 << 0x20\n120589: a1 = a1 >> 0x20\n120592: a2 = 0x1800000000\n120602: s1 = a1 | a2\n120605: a1 = sp + 0xc0\n120609: a1 = a1 << 0x20\n120612: a1 = a1 >> 0x20\n120615: a2 = sp + 0x100\n120619: a2 = a2 << 0x20\n120622: a3 = a2 | a1\n120625: a1 = u64 [sp + 0x98]\n120629: a1 = a1 << 0x20\n120632: a1 = a1 >> 0x20\n120635: a4 = 0x8000000000\n120645: a4 = a4 | a1\n120648: a0 = a0 << 0x20\n120651: a0 = a0 >> 0x20\n120654: a1 = sp + 0xe0\n120658: a1 = a1 << 0x20\n120661: a5 = a1 | a0\n120664: a1 = 0xffffffffffffffff\n120667: a2 = 0xffffffffffffffff\n120670: a0 = s1\n120672: ecalli 1 // 'call'\n120674: fallthrough\n      : @1583 (gas: 1)\n120675: jump @1588 if a0 != 0\n      : @1584 (gas: 2)\n120679: a1 = 0x20\n120682: ra = 1370, jump @0\n      : @1585 [@dyn 685] (gas: 110)\n120689: a1 = 0\n120691: u64 [sp + 152] = 0\n120695: t0 = 0\n120697: a2 = u8 [a0 + 0x9]\n120700: a3 = u8 [a0 + 0x8]\n120703: a4 = u8 [a0 + 0xa]\n120706: a5 = u8 [a0 + 0xb]\n120709: a2 = a2 << 0x8\n120712: a2 = a2 | a3\n120715: a4 = a4 << 0x10\n120718: a5 = a5 << 0x18\n120721: a4 = a4 | a5\n120724: a2 = a2 | a4\n120727: a3 = u8 [a0 + 0xd]\n120730: a4 = u8 [a0 + 0xc]\n120733: a5 = u8 [a0 + 0xe]\n120736: s1 = u8 [a0 + 0xf]\n120739: a3 = a3 << 0x8\n120742: a3 = a3 | a4\n120745: a5 = a5 << 0x10\n120748: s1 = s1 << 0x18\n120751: a5 = a5 | s1\n120754: a3 = a3 | a5\n120757: a3 = a3 << 0x20\n120760: a2 = a2 | a3\n120763: u64 [sp + 0x90] = a2\n120767: a3 = u8 [a0 + 0x19]\n120770: a4 = u8 [a0 + 0x18]\n120773: a5 = u8 [a0 + 0x1a]\n120776: s1 = u8 [a0 + 0x1b]\n120779: a3 = a3 << 0x8\n120782: a3 = a3 | a4\n120785: a5 = a5 << 0x10\n120788: s1 = s1 << 0x18\n120791: a5 = a5 | s1\n120794: a3 = a3 | a5\n120797: a4 = u8 [a0 + 0x1d]\n120800: a5 = u8 [a0 + 0x1c]\n120803: s1 = u8 [a0 + 0x1e]\n120806: a2 = u8 [a0 + 0x1f]\n120809: a4 = a4 << 0x8\n120812: a4 = a4 | a5\n120815: s1 = s1 << 0x10\n120818: a2 = a2 << 0x18\n120821: a2 = a2 | s1\n120824: a2 = a2 | a4\n120827: a2 = a2 << 0x20\n120830: t1 = a2 | a3\n120833: a2 = u8 [a0 + 0x11]\n120836: a4 = u8 [a0 + 0x10]\n120839: a5 = u8 [a0 + 0x12]\n120842: s1 = u8 [a0 + 0x13]\n120845: a2 = a2 << 0x8\n120848: a2 = a2 | a4\n120851: a5 = a5 << 0x10\n120854: s1 = s1 << 0x18\n120857: a5 = a5 | s1\n120860: a2 = a2 | a5\n120863: a4 = u8 [a0 + 0x15]\n120866: a5 = u8 [a0 + 0x14]\n120869: s1 = u8 [a0 + 0x16]\n120872: a3 = u8 [a0 + 0x17]\n120875: a4 = a4 << 0x8\n120878: a4 = a4 | a5\n120881: s1 = s1 << 0x10\n120884: a3 = a3 << 0x18\n120887: a3 = a3 | s1\n120890: a3 = a3 | a4\n120893: a3 = a3 << 0x20\n120896: a4 = a3 | a2\n120899: a2 = u8 [a0 + 0x1]\n120902: a3 = u8 [a0]\n120904: a5 = u8 [a0 + 0x2]\n120907: s1 = u8 [a0 + 0x3]\n120910: a2 = a2 << 0x8\n120913: a2 = a2 | a3\n120916: a5 = a5 << 0x10\n120919: s1 = s1 << 0x18\n120922: a5 = a5 | s1\n120925: a2 = a2 | a5\n120928: a3 = u8 [a0 + 0x5]\n120931: a5 = u8 [a0 + 0x4]\n120934: s1 = u8 [a0 + 0x6]\n120937: a0 = u8 [a0 + 0x7]\n120940: a3 = a3 << 0x8\n120943: a3 = a3 | a5\n120946: s1 = s1 << 0x10\n120949: a0 = a0 << 0x18\n120952: a0 = a0 | s1\n120955: a0 = a0 | a3\n120958: a0 = a0 << 0x20\n120961: a5 = a0 | a2\n120964: s1 = reverse a4\n120966: a3 = reverse t1\n120968: t1 = 0\n120970: t2 = u64 [sp + 0x98]\n120974: a0 = u64 [sp + 0x90]\n120978: a2 = reverse a0\n120980: a4 = a2 << 0x20\n120983: a4 = a4 >> 0x20\n120986: a0 = a3 | s1\n120989: a0 = a0 | a4\n120992: a4 = reverse a5\n120994: a4 = 0 if a0 == 0\n120996: a2 = 0 if a0 == 0\n120998: s1 = 0 if a0 == 0\n121000: a3 = 0 if a0 == 0\n121002: a5 = a0 <u 0x1\n121005: a0 = u64 [sp + 0x10]\n121008: fallthrough\n      : @1586 (gas: 18)\n121009: u64 [a0 + 0x40] = a1\n121012: u64 [a0 + 0x20] = a5\n121015: u64 [a0] = a3\n121017: u64 [a0 + 0x48] = t2\n121020: u64 [a0 + 40] = 0\n121023: u64 [a0 + 0x8] = s1\n121026: u64 [a0 + 0x50] = t0\n121029: u64 [a0 + 48] = 0\n121032: u64 [a0 + 0x10] = a2\n121035: u64 [a0 + 0x58] = t1\n121038: u64 [a0 + 56] = 0\n121041: u64 [a0 + 0x18] = a4\n121044: sp = s0 + 0xfffffffffffffec0\n121048: ra = u64 [sp + 0x138]\n121052: s0 = u64 [sp + 0x130]\n121056: s1 = u64 [sp + 0x128]\n121060: sp = sp + 0x140\n121064: ret\n      : @1587 (gas: 1)\n121066: trap\n      : @1588 (gas: 11)\n121067: ra = 0x55c\n121071: sp = sp + 0xffffffffffffffc0\n121074: u64 [sp + 0x38] = ra\n121077: u64 [sp + 0x30] = s0\n121080: u64 [sp + 0x28] = s1\n121083: s0 = sp + 0x40\n121086: sp = sp & 0xffffffffffffffe0\n121089: a0 = 0x40\n121092: a1 = 0x20\n121095: ra = 0x542\n121099: jump @0\n      : @1589 [@dyn 686] [export #0: 'call'] (gas: 2)\n121103: a0 = 0\n121105: ra = 1374, jump @25\n      : @1590 [@dyn 687] [export #1: 'deploy'] (gas: 2)\n121112: a0 = 0x1\n121115: ra = 1376, jump @25\n      : @1591 [@dyn 688] (gas: 27)\n121122: sp = sp + 0xffffffffffffff60\n121126: u64 [sp + 0x98] = ra\n121130: u64 [sp + 0x90] = s0\n121134: u64 [sp + 0x88] = s1\n121138: s0 = sp + 0xa0\n121142: sp = sp & 0xfffffffffffffff0\n121145: t0 = u64 [a1]\n121147: t1 = u64 [a1 + 0x8]\n121150: t2 = u64 [a1 + 0x10]\n121153: a1 = u64 [a1 + 0x18]\n121156: a3 = u64 [a2]\n121158: a4 = u64 [a2 + 0x8]\n121161: a5 = u64 [a2 + 0x10]\n121164: a2 = u64 [a2 + 0x18]\n121167: s1 = a0\n121169: u64 [sp + 0x18] = a2\n121172: u64 [sp + 0x10] = a5\n121175: u64 [sp + 0x8] = a4\n121178: u64 [sp] = a3\n121180: u64 [sp + 0x38] = a1\n121183: u64 [sp + 0x30] = t2\n121186: u64 [sp + 0x28] = t1\n121189: a0 = sp + 0x40\n121192: a1 = sp + 0x20\n121195: a2 = sp\n121197: u64 [sp + 0x20] = t0\n121200: ra = 1378, jump @446\n      : @1592 [@dyn 689] (gas: 22)\n121207: t0 = u64 [sp + 0x48]\n121210: t1 = u64 [sp + 0x40]\n121213: a2 = u64 [sp + 0x58]\n121216: a3 = u64 [sp + 0x50]\n121219: a4 = u64 [sp + 0x70]\n121222: a5 = u64 [sp + 0x78]\n121225: a0 = u64 [sp + 0x60]\n121228: a1 = u64 [sp + 0x68]\n121231: u64 [s1 + 0x30] = a4\n121234: u64 [s1 + 0x38] = a5\n121237: u64 [s1 + 0x20] = a0\n121240: u64 [s1 + 0x28] = a1\n121243: u64 [s1 + 0x10] = a3\n121246: u64 [s1 + 0x18] = a2\n121249: u64 [s1] = t1\n121251: u64 [s1 + 0x8] = t0\n121254: sp = s0 + 0xffffffffffffff60\n121258: ra = u64 [sp + 0x98]\n121262: s0 = u64 [sp + 0x90]\n121266: s1 = u64 [sp + 0x88]\n121270: sp = sp + 0xa0\n121274: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"buyService()": "5c646b5a",
							"ccipCallback(bytes,bytes)": "29514482",
							"checkDelivery(uint256,bytes)": "558eab4b",
							"claimDigest(uint256,bytes32)": "5ec96f75",
							"claimPayment(uint256,bytes32,bytes)": "60595ac9",
							"description()": "7284e416",
							"factory()": "c45a0155",
							"factoryRefundBuyer(uint256)": "88985ec5",
							"factoryReleaseToProvider(uint256)": "df686ded",
							"gateway()": "116191b6",
							"gatewaySigner()": "f3253c63",
							"nextPurchaseId()": "23b4a7a3",
							"price()": "a035b1fe",
							"provider()": "085d4883",
							"purchases(uint256)": "8392fe31",
							"raiseDispute(uint256)": "a5c1674e",
							"serviceId()": "da20ec6a",
							"updateDescription(string)": "e735b48a",
							"updateGateway(string)": "e7261687",
							"updateGatewaySigner(address)": "11acfb3d"
						}
					},
					"irOptimized": "/// @use-src 1:\"EscroDot.sol\"\nobject \"ServiceEscrow_1052\" {\n    code {\n        {\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            mstore(64, memoryguard(0x0100))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1, _2, _3, _4, _5, _6, _7 := copy_arguments_for_constructor_object_ServiceEscrow()\n            constructor_ServiceEscrow(_1, _2, _3, _4, _5, _6, _7)\n            let _8 := allocate_unbounded()\n            codecopy(_8, dataoffset(\"ServiceEscrow_1052_deployed\"), datasize(\"ServiceEscrow_1052_deployed\"))\n            setimmutable(_8, \"358\", mload(128))\n            setimmutable(_8, \"361\", mload(160))\n            setimmutable(_8, \"364\", mload(192))\n            setimmutable(_8, \"367\", mload(224))\n            return(_8, datasize(\"ServiceEscrow_1052_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function cleanup_bytes32(value) -> cleaned\n        { cleaned := value }\n        function validator_revert_bytes32(value)\n        {\n            if iszero(eq(value, cleanup_bytes32(value))) { revert(0, 0) }\n        }\n        function abi_decode_bytes32_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_bytes32(value)\n        }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function validator_revert_uint256(value)\n        {\n            if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n        }\n        function abi_decode_uint256_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_uint256(value)\n        }\n        function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n        { revert(0, 0) }\n        function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n        { revert(0, 0) }\n        function array_allocation_size_string(length) -> size\n        {\n            if gt(length, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            size := round_up_to_mul_of(length)\n            size := add(size, 0x20)\n        }\n        function copy_memory_to_memory_with_cleanup(src, dst, length)\n        {\n            mcopy(dst, src, length)\n            mstore(add(dst, length), 0)\n        }\n        function abi_decode_available_length_string_fromMemory(src, length, end) -> array\n        {\n            array := allocate_memory(array_allocation_size_string(length))\n            mstore(array, length)\n            let dst := add(array, 0x20)\n            if gt(add(src, length), end)\n            {\n                revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            }\n            copy_memory_to_memory_with_cleanup(src, dst, length)\n        }\n        function abi_decode_string_fromMemory(offset, end) -> array\n        {\n            if iszero(slt(add(offset, 0x1f), end))\n            {\n                revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            }\n            let length := mload(offset)\n            array := abi_decode_available_length_string_fromMemory(add(offset, 0x20), length, end)\n        }\n        function abi_decode_addresst_bytes32t_addresst_uint256t_stringt_addresst_string_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n        {\n            if slt(sub(dataEnd, headStart), 224)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n            let offset_1 := 32\n            value1 := abi_decode_bytes32_fromMemory(add(headStart, offset_1), dataEnd)\n            let offset_2 := 64\n            value2 := abi_decode_address_fromMemory(add(headStart, offset_2), dataEnd)\n            let offset_3 := 96\n            value3 := abi_decode_uint256_fromMemory(add(headStart, offset_3), dataEnd)\n            let offset_4 := mload(add(headStart, 128))\n            if gt(offset_4, sub(shl(64, 1), 1))\n            {\n                revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            }\n            value4 := abi_decode_string_fromMemory(add(headStart, offset_4), dataEnd)\n            let offset_5 := 160\n            value5 := abi_decode_address_fromMemory(add(headStart, offset_5), dataEnd)\n            let offset_6 := mload(add(headStart, 192))\n            if gt(offset_6, sub(shl(64, 1), 1))\n            {\n                revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            }\n            value6 := abi_decode_string_fromMemory(add(headStart, offset_6), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_ServiceEscrow() -> ret_param, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6\n        {\n            let programSize := datasize(\"ServiceEscrow_1052\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param, ret_param_1, ret_param_2, ret_param_3, ret_param_4, ret_param_5, ret_param_6 := abi_decode_addresst_bytes32t_addresst_uint256t_stringt_addresst_string_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_rational_by(value) -> cleaned\n        { cleaned := value }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_rational_by_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_rational_by_to_uint256(slot, value)\n        {\n            let convertedValue := convert_rational_by_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        function cleanup_t_rational_by(value) -> cleaned\n        { cleaned := value }\n        function convert_rational_by_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n        }\n        function convert_rational_by_to_address(value) -> converted\n        {\n            converted := convert_rational_by_to_uint160(value)\n        }\n        function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n        {\n            mstore(pos, length)\n            updated_pos := add(pos, 0x20)\n        }\n        function store_literal_in_memory_abefa298a2b3ad1c12fccec8c89af0379056a8c92f071b11ef86232d03fcde63(memPtr)\n        {\n            mstore(add(memPtr, 0), \"Escrow: factory is zero address\")\n        }\n        function abi_encode_stringliteral_abef(pos) -> end\n        {\n            pos := array_storeLengthForEncoding_string(pos, 31)\n            store_literal_in_memory_abefa298a2b3ad1c12fccec8c89af0379056a8c92f071b11ef86232d03fcde63(pos)\n            end := add(pos, 32)\n        }\n        function abi_encode_tuple_stringliteral_abef(headStart) -> tail\n        {\n            tail := add(headStart, 32)\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_stringliteral_abef(tail)\n        }\n        function require_helper_stringliteral_abef(condition)\n        {\n            if iszero(condition)\n            {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, shl(229, 4594637))\n                let end := abi_encode_tuple_stringliteral_abef(add(memPtr, 4))\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n        function store_literal_in_memory_339e0f99c26dc547806c208e931d196e28e2213b6c2a94a704ce04e61fd99030(memPtr)\n        {\n            mstore(add(memPtr, 0), \"Escrow: provider is zero address\")\n        }\n        function abi_encode_stringliteral_339e(pos) -> end\n        {\n            pos := array_storeLengthForEncoding_string(pos, 32)\n            store_literal_in_memory_339e0f99c26dc547806c208e931d196e28e2213b6c2a94a704ce04e61fd99030(pos)\n            end := add(pos, 32)\n        }\n        function abi_encode_tuple_stringliteral_339e(headStart) -> tail\n        {\n            tail := add(headStart, 32)\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_stringliteral_339e(tail)\n        }\n        function require_helper_stringliteral_339e(condition)\n        {\n            if iszero(condition)\n            {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, shl(229, 4594637))\n                let end := abi_encode_tuple_stringliteral_339e(add(memPtr, 4))\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n        function convert_t_rational_by_to_t_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n        }\n        function store_literal_in_memory_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d(memPtr)\n        {\n            mstore(add(memPtr, 0), \"Escrow: price must be > 0\")\n        }\n        function abi_encode_stringliteral_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d(pos) -> end\n        {\n            pos := array_storeLengthForEncoding_string(pos, 25)\n            store_literal_in_memory_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d(pos)\n            end := add(pos, 32)\n        }\n        function abi_encode_stringliteral_248e(headStart) -> tail\n        {\n            tail := add(headStart, 32)\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_stringliteral_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d(tail)\n        }\n        function require_helper_stringliteral_248e(condition)\n        {\n            if iszero(condition)\n            {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, shl(229, 4594637))\n                let end := abi_encode_stringliteral_248e(add(memPtr, 4))\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n        function convert_array_string_to_bytes(value) -> converted\n        { converted := value }\n        function array_length_bytes(value) -> length\n        { length := mload(value) }\n        function store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(memPtr)\n        {\n            mstore(add(memPtr, 0), \"Escrow: gateway cannot be empty\")\n        }\n        function abi_encode_stringliteral_795f(pos) -> end\n        {\n            pos := array_storeLengthForEncoding_string(pos, 31)\n            store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(pos)\n            end := add(pos, 32)\n        }\n        function abi_encode_tuple_stringliteral_795f(headStart) -> tail\n        {\n            tail := add(headStart, 32)\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_stringliteral_795f(tail)\n        }\n        function require_helper_stringliteral_795f(condition)\n        {\n            if iszero(condition)\n            {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, shl(229, 4594637))\n                let end := abi_encode_tuple_stringliteral_795f(add(memPtr, 4))\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n        function store_literal_in_memory_4a8119fd33623d83457a85b5e68bd50015eabb7b61ece3735951e6a4a921aa58(memPtr)\n        {\n            mstore(add(memPtr, 0), \"Escrow: gateway signer cannot be\")\n            mstore(add(memPtr, 32), \" zero address\")\n        }\n        function abi_encode_stringliteral_4a81(pos) -> end\n        {\n            pos := array_storeLengthForEncoding_string(pos, 45)\n            store_literal_in_memory_4a8119fd33623d83457a85b5e68bd50015eabb7b61ece3735951e6a4a921aa58(pos)\n            end := add(pos, 64)\n        }\n        function abi_encode_tuple_stringliteral_4a81(headStart) -> tail\n        {\n            tail := add(headStart, 32)\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_stringliteral_4a81(tail)\n        }\n        function require_helper_stringliteral_4a81(condition)\n        {\n            if iszero(condition)\n            {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, shl(229, 4594637))\n                let end := abi_encode_tuple_stringliteral_4a81(add(memPtr, 4))\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n        function array_length_string(value) -> length\n        { length := mload(value) }\n        function panic_error_0x22()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n        function extract_byte_array_length(data) -> length\n        {\n            length := div(data, 2)\n            let outOfPlaceEncoding := and(data, 1)\n            if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n            if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n        }\n        function array_dataslot_string_storage(ptr) -> data\n        {\n            data := ptr\n            mstore(0, ptr)\n            data := keccak256(0, 0x20)\n        }\n        function divide_by_ceil(value) -> result\n        {\n            result := div(add(value, 31), 32)\n        }\n        function shift_left_dynamic(bits, value) -> newValue\n        { newValue := shl(bits, value) }\n        function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n        {\n            let shiftBits := mul(shiftBytes, 8)\n            let mask := shift_left_dynamic(shiftBits, not(0))\n            toInsert := shift_left_dynamic(shiftBits, toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_uint256_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_uint256(value)))\n        }\n        function update_storage_value_uint256_to_uint256(slot, offset, value)\n        {\n            let convertedValue := convert_uint256_to_uint256(value)\n            sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n        }\n        function zero_value_for_split_uint256() -> ret\n        { ret := 0 }\n        function storage_set_to_zero_uint256(slot, offset)\n        {\n            let zero := zero_value_for_split_uint256()\n            update_storage_value_uint256_to_uint256(slot, offset, zero)\n        }\n        function clear_storage_range_bytes1(start, end)\n        {\n            for { } lt(start, end) { start := add(start, 1) }\n            {\n                storage_set_to_zero_uint256(start, 0)\n            }\n        }\n        function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n        {\n            if gt(len, 31)\n            {\n                let dataArea := array_dataslot_string_storage(array)\n                let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                if lt(startIndex, 32) { deleteStart := dataArea }\n                clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n            }\n        }\n        function shift_right_unsigned_dynamic(bits, value) -> newValue\n        { newValue := shr(bits, value) }\n        function mask_bytes_dynamic(data, bytes) -> result\n        {\n            let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n            result := and(data, mask)\n        }\n        function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n        {\n            data := mask_bytes_dynamic(data, len)\n            used := or(data, mul(2, len))\n        }\n        function copy_byte_array_to_storage_from_string_to_string(slot, src)\n        {\n            let newLen := array_length_string(src)\n            if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n            let oldLen := extract_byte_array_length(sload(slot))\n            clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n            let srcOffset := 0\n            srcOffset := 0x20\n            switch gt(newLen, 31)\n            case 1 {\n                let loopEnd := and(newLen, not(0x1f))\n                let dstPtr := array_dataslot_string_storage(slot)\n                let i := 0\n                for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                {\n                    sstore(dstPtr, mload(add(src, srcOffset)))\n                    dstPtr := add(dstPtr, 1)\n                    srcOffset := add(srcOffset, 32)\n                }\n                if lt(loopEnd, newLen)\n                {\n                    let lastValue := mload(add(src, srcOffset))\n                    sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                }\n                sstore(slot, add(mul(newLen, 2), 1))\n            }\n            default {\n                let value := 0\n                if newLen\n                {\n                    value := mload(add(src, srcOffset))\n                }\n                sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n            }\n        }\n        function update_storage_value_offset_string_to_string(slot, value)\n        {\n            copy_byte_array_to_storage_from_string_to_string(slot, value)\n        }\n        function update_byte_slice_shift_0(value, toInsert) -> result\n        {\n            let mask := sub(shl(160, 1), 1)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function convert_uint160_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_uint160(value)))\n        }\n        function convert_uint160_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_uint160(value)\n        }\n        function convert_address_to_address(value) -> converted\n        {\n            converted := convert_uint160_to_address(value)\n        }\n        function prepare_store_address(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_address_to_address(slot, value)\n        {\n            let convertedValue := convert_address_to_address(value)\n            sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_address(convertedValue)))\n        }\n        /// @ast-id 579 @src 1:4348:5209  \"constructor(...\"\n        function constructor_ServiceEscrow(var_factory, var_serviceId, var_provider, var_price, var_gateway_mpos, var_gatewaySigner, var_description_mpos)\n        {\n            /// @src 1:3703:3704  \"1\"\n            let expr := 0x01\n            update_storage_value_offset_rational_by_to_uint256(0x05, expr)\n            /// @src 1:4589:4597  \"_factory\"\n            let _1 := var_factory\n            let expr_1 := _1\n            /// @src 1:4609:4610  \"0\"\n            let expr_2 := 0x00\n            /// @src 1:4601:4611  \"address(0)\"\n            let expr_3 := convert_rational_by_to_address(expr_2)\n            /// @src 1:4589:4611  \"_factory != address(0)\"\n            let expr_4 := iszero(eq(cleanup_address(expr_1), cleanup_address(expr_3)))\n            /// @src 1:4581:4647  \"require(_factory != address(0), \\\"Escrow: factory is zero address\\\")\"\n            require_helper_stringliteral_abef(expr_4)\n            /// @src 1:4665:4674  \"_provider\"\n            let _2 := var_provider\n            let expr_5 := _2\n            /// @src 1:4686:4687  \"0\"\n            let expr_6 := 0x00\n            /// @src 1:4678:4688  \"address(0)\"\n            let expr_7 := convert_rational_by_to_address(expr_6)\n            /// @src 1:4665:4688  \"_provider != address(0)\"\n            let expr_8 := iszero(eq(cleanup_address(expr_5), cleanup_address(expr_7)))\n            /// @src 1:4657:4725  \"require(_provider != address(0), \\\"Escrow: provider is zero address\\\")\"\n            require_helper_stringliteral_339e(expr_8)\n            /// @src 1:4743:4749  \"_price\"\n            let _3 := var_price\n            let expr_9 := _3\n            /// @src 1:4752:4753  \"0\"\n            let expr_10 := 0x00\n            /// @src 1:4743:4753  \"_price > 0\"\n            let expr_11 := gt(cleanup_uint256(expr_9), convert_t_rational_by_to_t_uint256(expr_10))\n            /// @src 1:4735:4783  \"require(_price > 0, \\\"Escrow: price must be > 0\\\")\"\n            require_helper_stringliteral_248e(expr_11)\n            /// @src 1:4807:4815  \"_gateway\"\n            let _12_mpos := var_gateway_mpos\n            let expr_532_mpos := _12_mpos\n            /// @src 1:4801:4816  \"bytes(_gateway)\"\n            let expr_mpos := convert_array_string_to_bytes(expr_532_mpos)\n            /// @src 1:4801:4823  \"bytes(_gateway).length\"\n            let expr_12 := array_length_bytes(expr_mpos)\n            /// @src 1:4826:4827  \"0\"\n            let expr_13 := 0x00\n            /// @src 1:4801:4827  \"bytes(_gateway).length > 0\"\n            let expr_14 := gt(cleanup_uint256(expr_12), convert_t_rational_by_to_t_uint256(expr_13))\n            /// @src 1:4793:4863  \"require(bytes(_gateway).length > 0, \\\"Escrow: gateway cannot be empty\\\")\"\n            require_helper_stringliteral_795f(expr_14)\n            /// @src 1:4881:4895  \"_gatewaySigner\"\n            let _4 := var_gatewaySigner\n            let expr_15 := _4\n            /// @src 1:4907:4908  \"0\"\n            let expr_16 := 0x00\n            /// @src 1:4899:4909  \"address(0)\"\n            let expr_17 := convert_rational_by_to_address(expr_16)\n            /// @src 1:4881:4909  \"_gatewaySigner != address(0)\"\n            let expr_18 := iszero(eq(cleanup_address(expr_15), cleanup_address(expr_17)))\n            /// @src 1:4873:4959  \"require(_gatewaySigner != address(0), \\\"Escrow: gateway signer cannot be zero address\\\")\"\n            require_helper_stringliteral_4a81(expr_18)\n            /// @src 1:4984:4992  \"_factory\"\n            let _5 := var_factory\n            let expr_19 := _5\n            /// @src 1:4969:4992  \"factory      = _factory\"\n            let _6 := expr_19\n            mstore(128, _6)\n            /// @src 1:5017:5027  \"_serviceId\"\n            let _7 := var_serviceId\n            let expr_20 := _7\n            /// @src 1:5002:5027  \"serviceId    = _serviceId\"\n            let _8 := expr_20\n            mstore(160, _8)\n            /// @src 1:5052:5061  \"_provider\"\n            let _9 := var_provider\n            let expr_21 := _9\n            /// @src 1:5037:5061  \"provider     = _provider\"\n            let _10 := expr_21\n            mstore(192, _10)\n            /// @src 1:5086:5092  \"_price\"\n            let _11 := var_price\n            let expr_22 := _11\n            /// @src 1:5071:5092  \"price        = _price\"\n            let _12 := expr_22\n            mstore(224, _12)\n            /// @src 1:5117:5125  \"_gateway\"\n            let _mpos := var_gateway_mpos\n            let expr_567_mpos := _mpos\n            /// @src 1:5102:5125  \"gateway      = _gateway\"\n            update_storage_value_offset_string_to_string(0x01, expr_567_mpos)\n            /// @src 1:5151:5165  \"_gatewaySigner\"\n            let _13 := var_gatewaySigner\n            let expr_23 := _13\n            /// @src 1:5135:5165  \"gatewaySigner = _gatewaySigner\"\n            update_storage_value_offset_address_to_address(0x02, expr_23)\n            /// @src 1:5190:5202  \"_description\"\n            let _25_mpos := var_description_mpos\n            let expr_575_mpos := _25_mpos\n            /// @src 1:5175:5202  \"description  = _description\"\n            update_storage_value_offset_string_to_string(0x00, expr_575_mpos)\n        }\n    }\n    /// @use-src 0:\"ECDSA.sol\", 1:\"EscroDot.sol\", 2:\"SignatureVerifier.sol\"\n    object \"ServiceEscrow_1052_deployed\" {\n        code {\n            {\n                /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_224_unsigned(calldataload(0))\n                    switch selector\n                    case 0x085d4883 { external_fun_provider() }\n                    case 0x116191b6 { external_fun_gateway() }\n                    case 0x11acfb3d {\n                        external_fun_updateGatewaySigner()\n                    }\n                    case 0x23b4a7a3 { external_fun_nextPurchaseId() }\n                    case 0x29514482 { external_fun_ccipCallback() }\n                    case 0x558eab4b { external_fun_checkDelivery() }\n                    case 0x5c646b5a { external_fun_buyService() }\n                    case 0x5ec96f75 { external_fun_claimDigest() }\n                    case 0x60595ac9 { external_fun_claimPayment() }\n                    case 0x7284e416 { external_fun_description() }\n                    case 0x8392fe31 { external_fun_purchases() }\n                    case 0x88985ec5 {\n                        external_fun_factoryRefundBuyer()\n                    }\n                    case 0xa035b1fe { external_fun_price() }\n                    case 0xa5c1674e { external_fun_raiseDispute() }\n                    case 0xc45a0155 { external_fun_factory() }\n                    case 0xda20ec6a { external_fun_serviceId() }\n                    case 0xdf686ded {\n                        external_fun_factoryReleaseToProvider()\n                    }\n                    case 0xe7261687 { external_fun_updateGateway() }\n                    case 0xe735b48a {\n                        external_fun_updateDescription()\n                    }\n                    case 0xf3253c63 { external_fun_gatewaySigner() }\n                    default { }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            }\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            /// @ast-id 364 @src 1:1365:1398  \"address public immutable provider\"\n            function getter_fun_provider() -> rval\n            { rval := loadimmutable(\"364\") }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_provider()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_provider()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function panic_error_0x00()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x00)\n                revert(0, 0x24)\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_string_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_string_storage(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_string(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_string_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_string_storage(value0, pos)\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_string_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function read_from_storage_dynamic_split_string(slot, offset) -> value\n            {\n                if gt(offset, 0) { panic_error_0x00() }\n                value := copy_array_from_storage_to_memory_string(slot)\n            }\n            /// @ast-id 373 @src 1:1669:1691  \"string  public gateway\"\n            function getter_fun_gateway() -> ret_mpos\n            {\n                let slot := 1\n                let offset := 0\n                ret_mpos := read_from_storage_dynamic_split_string(slot, offset)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function array_length_string(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_string_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                mcopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_string(value)\n                pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_string(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_string_memory_ptr(value0, tail)\n            }\n            function external_fun_gateway()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_gateway()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_string(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function validator_revert_address(value)\n            {\n                if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n            }\n            function abi_decode_address(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_address(value)\n            }\n            function abi_decode_tuple_address(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_address(add(headStart, offset), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_updateGatewaySigner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_address(4, calldatasize())\n                fun_updateGatewaySigner(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 379 @src 1:1858:1887  \"uint256 public nextPurchaseId\"\n            function getter_fun_nextPurchaseId() -> ret\n            {\n                let slot := 3\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_nextPurchaseId()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_nextPurchaseId()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n            { revert(0, 0) }\n            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            { revert(0, 0) }\n            function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff)\n                {\n                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                }\n                arrayPos := add(offset, 0x20)\n                if gt(add(arrayPos, mul(length, 0x01)), end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n            }\n            function abi_decode_bytes_calldatat_bytes_calldata(headStart, dataEnd) -> value0, value1, value2, value3\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := calldataload(add(headStart, 0))\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value0, value1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n                let offset_1 := calldataload(add(headStart, 32))\n                if gt(offset_1, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value2, value3 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n            }\n            function array_length_bytes(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_bytes(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function abi_encode_bytes_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_bytes(value)\n                pos := array_storeLengthForEncoding_bytes(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_bytes(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_bytes_memory_ptr(value0, tail)\n            }\n            function external_fun_ccipCallback()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3 := abi_decode_bytes_calldatat_bytes_calldata(4, calldatasize())\n                let ret := fun_ccipCallback(param, param_1, param_2, param_3)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_bytes(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function abi_decode_uint256t_bytes_calldata(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := calldataload(add(headStart, 32))\n                if gt(offset_1, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value1, value2 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_checkDelivery()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_uint256t_bytes_calldata(4, calldatasize())\n                fun_checkDelivery(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_buyService()\n            {\n                abi_decode(4, calldatasize())\n                let ret := fun_buyService()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_bytes32(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_bytes32(value)\n            {\n                if iszero(eq(value, cleanup_bytes32(value))) { revert(0, 0) }\n            }\n            function abi_decode_bytes32(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bytes32(value)\n            }\n            function abi_decode_uint256t_bytes32(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_bytes32(add(headStart, offset_1), dataEnd)\n            }\n            function abi_encode_bytes32_to_bytes32(value, pos)\n            {\n                mstore(pos, cleanup_bytes32(value))\n            }\n            function abi_encode_tuple_bytes32(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n            }\n            function external_fun_claimDigest()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_bytes32(4, calldatasize())\n                let ret := fun_claimDigest(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_bytes32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_uint256t_bytes32t_bytes_calldata(headStart, dataEnd) -> value0, value1, value2, value3\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_bytes32(add(headStart, offset_1), dataEnd)\n                let offset_2 := calldataload(add(headStart, 64))\n                if gt(offset_2, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value2, value3 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n            }\n            function external_fun_claimPayment()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3 := abi_decode_uint256t_bytes32t_bytes_calldata(4, calldatasize())\n                fun_claimPayment(param, param_1, param_2, param_3)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 370 @src 1:1573:1599  \"string  public description\"\n            function getter_fun_description() -> ret_mpos\n            {\n                let slot := 0\n                let offset := 0\n                ret_mpos := read_from_storage_dynamic_split_string(slot, offset)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function external_fun_description()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_description()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_string(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_0_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_0_bool(sload(slot))\n            }\n            function shift_right_8_unsigned(value) -> newValue\n            { newValue := shr(8, value) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_8_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(16, value) }\n            function extract_from_storage_value_offset_t_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_2_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_bool(sload(slot))\n            }\n            /// @ast-id 396 @src 1:2435:2480  \"mapping(uint256 => Purchase) public purchases\"\n            function getter_fun_purchases(key) -> ret, ret_1, ret_2, ret_3, ret_4\n            {\n                let slot := 4\n                slot := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_t_bool(add(slot, 2))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 2))\n                ret_4 := read_from_storage_split_offset_2_bool(add(slot, 2))\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_uint256_bool_bool_bool(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                tail := add(headStart, 160)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_bool(value2, add(headStart, 64))\n                abi_encode_bool(value3, add(headStart, 96))\n                abi_encode_bool(value4, add(headStart, 128))\n            }\n            function external_fun_purchases()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3, ret_4 := getter_fun_purchases(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_bool_bool_bool(memPos, ret, ret_1, ret_2, ret_3, ret_4)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_factoryRefundBuyer()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_factoryRefundBuyer(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 367 @src 1:1456:1486  \"uint256 public immutable price\"\n            function getter_fun_price() -> rval\n            { rval := loadimmutable(\"367\") }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function external_fun_price()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_price()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_raiseDispute()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_raiseDispute(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 358 @src 1:1134:1166  \"address public immutable factory\"\n            function getter_fun_factory() -> rval\n            { rval := loadimmutable(\"358\") }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function external_fun_factory()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_factory()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 361 @src 1:1248:1282  \"bytes32 public immutable serviceId\"\n            function getter_fun_serviceId() -> rval\n            { rval := loadimmutable(\"361\") }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function external_fun_serviceId()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_serviceId()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_bytes32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_factoryReleaseToProvider()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_factoryReleaseToProvider(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_string_calldata_ptr(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff)\n                {\n                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                }\n                arrayPos := add(offset, 0x20)\n                if gt(add(arrayPos, mul(length, 0x01)), end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n            }\n            function abi_decode_string_calldata(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := calldataload(add(headStart, 0))\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value0, value1 := abi_decode_string_calldata_ptr(add(headStart, offset), dataEnd)\n            }\n            function external_fun_updateGateway()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_string_calldata(4, calldatasize())\n                fun_updateGateway(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_updateDescription()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_string_calldata(4, calldatasize())\n                fun_updateDescription(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function extract_from_storage_value_dynamict_address(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_address(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_address(sload(slot), offset)\n            }\n            /// @ast-id 376 @src 1:1772:1800  \"address public gatewaySigner\"\n            function getter_fun_gatewaySigner() -> ret\n            {\n                let slot := 2\n                let offset := 0\n                ret := read_from_storage_split_dynamic_address(slot, offset)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function external_fun_gatewaySigner()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_gatewaySigner()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            { revert(0, 0) }\n            function store_literal_in_memory_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: caller is not the provid\")\n                mstore(add(memPtr, 32), \"er\")\n            }\n            function abi_encode_stringliteral_4b50(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 34)\n                store_literal_in_memory_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_stringliteral_4b50(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_4b50(tail)\n            }\n            function require_helper_stringliteral_4b50(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_4b50(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 449 @src 1:3349:3470  \"modifier onlyProvider() {...\"\n            function modifier_onlyProvider_967(var_newSigner)\n            {\n                /// @src 1:3391:3401  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:3405:3413  \"provider\"\n                let _1 := loadimmutable(\"364\")\n                let expr_1 := _1\n                /// @src 1:3391:3413  \"msg.sender == provider\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:3383:3452  \"require(msg.sender == provider, \\\"Escrow: caller is not the provider\\\")\"\n                require_helper_stringliteral_4b50(expr_2)\n                /// @src 1:3462:3463  \"_\"\n                fun_updateGatewaySigner_inner(var_newSigner)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function cleanup_t_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by_1(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function store_literal_in_memory_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: signer cannot be zero ad\")\n                mstore(add(memPtr, 32), \"dress\")\n            }\n            function abi_encode_stringliteral_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 37)\n                store_literal_in_memory_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_cd1a(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216(tail)\n            }\n            function require_helper_stringliteral_cd1a(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_cd1a(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left_0(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            /// @src 1:10358:10553  \"function updateGatewaySigner(address newSigner) external onlyProvider {...\"\n            function fun_updateGatewaySigner_inner(var_newSigner)\n            {\n                /// @src 1:10446:10455  \"newSigner\"\n                let _1 := var_newSigner\n                let expr := _1\n                /// @src 1:10467:10468  \"0\"\n                let expr_1 := 0x00\n                /// @src 1:10459:10469  \"address(0)\"\n                let expr_2 := convert_rational_by_to_address(expr_1)\n                /// @src 1:10446:10469  \"newSigner != address(0)\"\n                let expr_3 := iszero(eq(cleanup_address(expr), cleanup_address(expr_2)))\n                /// @src 1:10438:10511  \"require(newSigner != address(0), \\\"Escrow: signer cannot be zero address\\\")\"\n                require_helper_stringliteral_cd1a(expr_3)\n                /// @src 1:10537:10546  \"newSigner\"\n                let _2 := var_newSigner\n                let expr_4 := _2\n                /// @src 1:10521:10546  \"gatewaySigner = newSigner\"\n                update_storage_value_offset_address_to_address(0x02, expr_4)\n            }\n            /// @ast-id 984 @src 1:10358:10553  \"function updateGatewaySigner(address newSigner) external onlyProvider {...\"\n            function fun_updateGatewaySigner(var_newSigner)\n            {\n                modifier_onlyProvider_967(var_newSigner)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function store_literal_in_memory_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SignatureVerifier: Invalid signa\")\n                mstore(add(memPtr, 32), \"ture\")\n            }\n            function abi_encode_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 36)\n                store_literal_in_memory_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_6f31(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(tail)\n            }\n            function require_helper_stringliteral_6f31(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_6f31(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 709 @src 1:7019:7398  \"function ccipCallback(bytes calldata response, bytes calldata extraData)...\"\n            function fun_ccipCallback(var_response_682_offset, var_response_682_length, var_extraData_offset, var_extraData_length) -> var__mpos\n            {\n                /// @src 1:7139:7151  \"bytes memory\"\n                let zero_bytes_mpos := zero_value_for_split_bytes()\n                var__mpos := zero_bytes_mpos\n                /// @src 1:7245:7254  \"extraData\"\n                let _5_offset := var_extraData_offset\n                let _5_length := var_extraData_length\n                let expr_695_offset := _5_offset\n                let expr_length := _5_length\n                /// @src 1:7268:7276  \"response\"\n                let _offset := var_response_682_offset\n                let _6_length := var_response_682_length\n                let expr_696_offset := _offset\n                let expr_696_length := _6_length\n                /// @src 1:7207:7286  \"SignatureVerifier.verify(...\"\n                let expr_697_component, expr_697_component_2_mpos := fun_verify(expr_695_offset, expr_length, expr_696_offset, expr_696_length)\n                /// @src 1:7167:7286  \"(address signer, bytes memory result) = SignatureVerifier.verify(...\"\n                let var_signer := expr_697_component\n                let var_result_692_mpos := expr_697_component_2_mpos\n                /// @src 1:7304:7310  \"signer\"\n                let _1 := var_signer\n                let expr := _1\n                /// @src 1:7314:7327  \"gatewaySigner\"\n                let _2 := read_from_storage_split_offset_address(0x02)\n                let expr_1 := _2\n                /// @src 1:7304:7327  \"signer == gatewaySigner\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:7296:7368  \"require(signer == gatewaySigner, \\\"SignatureVerifier: Invalid signature\\\")\"\n                require_helper_stringliteral_6f31(expr_2)\n                /// @src 1:7385:7391  \"result\"\n                let _9_mpos := var_result_692_mpos\n                let expr_706_mpos := _9_mpos\n                /// @src 1:7378:7391  \"return result\"\n                var__mpos := expr_706_mpos\n                leave\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function convert_rational_0_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by_1(value)))\n            }\n            function store_literal_in_memory_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: invalid purchase id\")\n            }\n            function abi_encode_stringliteral_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 27)\n                store_literal_in_memory_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_6858(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_6858(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_1_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_array_string_dyn(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := mul(length, 0x20)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_array_string_dyn(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_array_string_dyn(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_string() -> ret\n            { ret := 96 }\n            function zero_complex_memory_array_array_string_dyn(dataStart, dataSizeInBytes)\n            {\n                let i := 0\n                for { } lt(i, dataSizeInBytes) { i := add(i, 32) }\n                {\n                    mstore(add(dataStart, i), zero_value_for_string())\n                }\n            }\n            function allocate_and_zero_memory_array_array_string_dyn(length) -> memPtr\n            {\n                memPtr := allocate_memory_array_array_string_dyn(length)\n                let dataStart := memPtr\n                let dataSize := array_allocation_size_array_string_dyn(length)\n                dataStart := add(dataStart, 32)\n                dataSize := sub(dataSize, 32)\n                zero_complex_memory_array_array_string_dyn(dataStart, dataSize)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_string_dyn(value) -> length\n            { length := mload(value) }\n            function memory_array_index_access_string_dyn(baseRef, index) -> addr\n            {\n                if iszero(lt(index, array_length_array_string_dyn(baseRef))) { panic_error_0x32() }\n                let offset := mul(index, 32)\n                offset := add(offset, 32)\n                addr := add(baseRef, offset)\n            }\n            function convert_array_string_storage_to_string(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_string(value)\n            }\n            function convert_contract_ServiceEscrow_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_bytes_calldata(start, length, pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes(pos, length)\n                copy_calldata_to_memory_with_cleanup(start, pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_bytes_calldata_uint256(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_bytes_calldata(value0, value1, tail)\n                abi_encode_uint256_to_uint256(value2, add(headStart, 32))\n            }\n            function cleanup_uint32(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffff)\n            }\n            function cleanup_bytes4(value) -> cleaned\n            {\n                cleaned := and(value, shl(224, 0xffffffff))\n            }\n            function shift_left_224(value) -> newValue\n            { newValue := shl(224, value) }\n            function convert_uint32_to_bytes4(value) -> converted\n            {\n                converted := cleanup_bytes4(shift_left_224(cleanup_uint32(value)))\n            }\n            function array_storeLengthForEncoding_array_string_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_string_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_string_to_string(value, pos) -> end\n            {\n                let length := array_length_string(value)\n                pos := array_storeLengthForEncoding_string(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encodeUpdatedPos_string(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_string_to_string(value0, pos)\n            }\n            function array_nextElement_array_string_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_string_dyn(value, pos) -> end\n            {\n                let length := array_length_array_string_dyn(value)\n                pos := array_storeLengthForEncoding_array_string_dyn(pos, length)\n                let headStart := pos\n                let tail := add(pos, mul(length, 0x20))\n                let baseRef := array_dataslot_array_string_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    mstore(pos, sub(tail, headStart))\n                    let elementValue0 := mload(srcPtr)\n                    tail := abi_encodeUpdatedPos_string(elementValue0, tail)\n                    srcPtr := array_nextElement_array_string_dyn(srcPtr)\n                    pos := add(pos, 0x20)\n                }\n                pos := tail\n                end := pos\n            }\n            function abi_encode_bytes4(value, pos)\n            {\n                mstore(pos, cleanup_bytes4(value))\n            }\n            function abi_encode_address_array_string_dyn_bytes_bytes4_bytes(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                tail := add(headStart, 160)\n                abi_encode_address(value0, add(headStart, 0))\n                mstore(add(headStart, 32), sub(tail, headStart))\n                tail := abi_encode_array_string_dyn(value1, tail)\n                mstore(add(headStart, 64), sub(tail, headStart))\n                tail := abi_encode_bytes_memory_ptr(value2, tail)\n                abi_encode_bytes4(value3, add(headStart, 96))\n                mstore(add(headStart, 128), sub(tail, headStart))\n                tail := abi_encode_bytes_memory_ptr(value4, tail)\n            }\n            /// @ast-id 679 @src 1:6305:6818  \"function checkDelivery(uint256 purchaseId, bytes calldata userInput) external view {...\"\n            function fun_checkDelivery(var_purchaseId, var_userInput_offset, var_userInput_length)\n            {\n                /// @src 1:6406:6415  \"purchases\"\n                let _10_slot := 0x04\n                let expr_slot := _10_slot\n                /// @src 1:6416:6426  \"purchaseId\"\n                let _1 := var_purchaseId\n                let expr := _1\n                /// @src 1:6406:6427  \"purchases[purchaseId]\"\n                let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_slot, expr)\n                let _13_slot := _2\n                let expr_634_slot := _13_slot\n                /// @src 1:6406:6434  \"purchases[purchaseId].amount\"\n                let _3 := add(expr_634_slot, 1)\n                let _4 := read_from_storage_split_offset_uint256(_3)\n                let expr_1 := _4\n                /// @src 1:6437:6438  \"0\"\n                let expr_2 := 0x00\n                /// @src 1:6406:6438  \"purchases[purchaseId].amount > 0\"\n                let expr_3 := gt(cleanup_uint256(expr_1), convert_rational_0_by_1_to_uint256(expr_2))\n                /// @src 1:6398:6470  \"require(purchases[purchaseId].amount > 0, \\\"Escrow: invalid purchase id\\\")\"\n                require_helper_stringliteral(expr_3)\n                /// @src 1:6517:6518  \"1\"\n                let expr_4 := 0x01\n                /// @src 1:6504:6519  \"new string[](1)\"\n                let _5 := convert_rational_1_by_1_to_uint256(expr_4)\n                let expr_650_mpos := allocate_and_zero_memory_array_array_string_dyn(_5)\n                /// @src 1:6481:6519  \"string[] memory urls = new string[](1)\"\n                let var_urls_mpos := expr_650_mpos\n                /// @src 1:6539:6546  \"gateway\"\n                let _17_slot := 0x01\n                let expr_655_slot := _17_slot\n                /// @src 1:6529:6533  \"urls\"\n                let _18_mpos := var_urls_mpos\n                let expr_652_mpos := _18_mpos\n                /// @src 1:6534:6535  \"0\"\n                let expr_5 := 0x00\n                /// @src 1:6529:6546  \"urls[0] = gateway\"\n                mstore(memory_array_index_access_string_dyn(expr_652_mpos, convert_rational_0_by_1_to_uint256(expr_5)), convert_array_string_storage_to_string(expr_655_slot))\n                pop(mload(memory_array_index_access_string_dyn(expr_652_mpos, convert_rational_0_by_1_to_uint256(expr_5))))\n                /// @src 1:6609:6613  \"this\"\n                let expr_661_address := address()\n                /// @src 1:6601:6614  \"address(this)\"\n                let expr_6 := convert_contract_ServiceEscrow_to_address(expr_661_address)\n                /// @src 1:6634:6638  \"urls\"\n                let _20_mpos := var_urls_mpos\n                let expr_663_mpos := _20_mpos\n                /// @src 1:6673:6682  \"userInput\"\n                let _21_offset := var_userInput_offset\n                let _21_length := var_userInput_length\n                let expr_666_offset := _21_offset\n                let expr_666_length := _21_length\n                /// @src 1:6684:6694  \"purchaseId\"\n                let _6 := var_purchaseId\n                let expr_7 := _6\n                /// @src 1:6662:6695  \"abi.encode(userInput, purchaseId)\"\n                let expr_668_mpos := allocate_unbounded()\n                let _7 := add(expr_668_mpos, 0x20)\n                let _8 := abi_encode_bytes_calldata_uint256(_7, expr_666_offset, expr_666_length, expr_7)\n                mstore(expr_668_mpos, sub(_8, add(expr_668_mpos, 0x20)))\n                finalize_allocation(expr_668_mpos, sub(_8, expr_668_mpos))\n                /// @src 1:6727:6744  \"this.ccipCallback\"\n                let expr_functionSelector := 0x29514482\n                /// @src 1:6727:6753  \"this.ccipCallback.selector\"\n                let expr_8 := convert_uint32_to_bytes4(expr_functionSelector)\n                /// @src 1:6789:6799  \"purchaseId\"\n                let _9 := var_purchaseId\n                let expr_9 := _9\n                /// @src 1:6778:6800  \"abi.encode(purchaseId)\"\n                let expr_675_mpos := allocate_unbounded()\n                let _10 := add(expr_675_mpos, 0x20)\n                let _11 := abi_encode_uint256(_10, expr_9)\n                mstore(expr_675_mpos, sub(_11, add(expr_675_mpos, 0x20)))\n                finalize_allocation(expr_675_mpos, sub(_11, expr_675_mpos))\n                /// @src 1:6564:6811  \"OffchainLookup({...\"\n                let _12 := allocate_unbounded()\n                mstore(_12, shl(228, 0x0556f183))\n                let _13 := abi_encode_address_array_string_dyn_bytes_bytes4_bytes(add(_12, 4), expr_6, expr_663_mpos, expr_668_mpos, expr_8, expr_675_mpos)\n                revert(_12, sub(_13, _12))\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function store_literal_in_memory_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: reentrant call\")\n            }\n            function abi_encode_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 22)\n                store_literal_in_memory_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_2e89(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(tail)\n            }\n            function require_helper_stringliteral_2e89(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_2e89(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_2_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_2_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_2_by(value)))\n            }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @ast-id 484 @src 1:3710:3851  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant(var_purchaseId) -> _1\n            {\n                _1 := var_purchaseId\n                /// @src 1:3752:3759  \"_locked\"\n                let _2 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _2\n                /// @src 1:3763:3764  \"1\"\n                let expr_1 := 0x01\n                /// @src 1:3752:3764  \"_locked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                /// @src 1:3744:3791  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                require_helper_stringliteral_2e89(expr_2)\n                /// @src 1:3811:3812  \"2\"\n                let expr_3 := 0x02\n                /// @src 1:3801:3812  \"_locked = 2\"\n                let _3 := convert_rational_2_by_1_to_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x05, _3)\n                /// @src 1:3822:3823  \"_\"\n                _1 := fun_buyService_inner(var_purchaseId)\n                /// @src 1:3843:3844  \"1\"\n                let expr_4 := 0x01\n                /// @src 1:3833:3844  \"_locked = 1\"\n                let _4 := convert_rational_1_by_1_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x05, _4)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function store_literal_in_memory_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: incorrect payment amount\")\n            }\n            function abi_encode_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 32)\n                store_literal_in_memory_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_d266(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(tail)\n            }\n            function require_helper_stringliteral_d266(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_d266(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function increment_uint256(value) -> ret\n            {\n                value := cleanup_uint256(value)\n                if eq(value, not(0)) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function allocate_memory_struct_struct_Purchase_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(160)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(8, value) }\n            function update_byte_slice_shift_1(value, toInsert) -> result\n            {\n                let mask := 65280\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_t_bool_to_t_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_1(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function shift_left_16(value) -> newValue\n            { newValue := shl(16, value) }\n            function update_byte_slice_shift_2(value, toInsert) -> result\n            {\n                let mask := 16711680\n                toInsert := shift_left_16(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_2_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_2(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function copy_struct_to_storage_from_struct_Purchase_to_struct_Purchase(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_bool(memberSrcPtr_2)\n                update_storage_value_offset_bool_to_bool(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 2)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_t_bool_to_t_bool(memberSlot_3, memberValue_3)\n                let memberSlot_4 := add(slot, 2)\n                let memberSrcPtr_4 := add(value, 128)\n                let memberValue_4 := read_from_memoryt_bool(memberSrcPtr_4)\n                update_storage_value_offset_2_bool_to_bool(memberSlot_4, memberValue_4)\n            }\n            function update_storage_value_offset_struct_Purchase_to_struct_Purchase(slot, value)\n            {\n                copy_struct_to_storage_from_struct_Purchase_to_struct_Purchase(slot, value)\n            }\n            /// @src 1:5374:5844  \"function buyService() external payable nonReentrant returns (uint256 purchaseId) {...\"\n            function fun_buyService_inner(_1) -> var_purchaseId\n            {\n                var_purchaseId := _1\n                /// @src 1:5473:5482  \"msg.value\"\n                let expr := callvalue()\n                /// @src 1:5486:5491  \"price\"\n                let _2 := loadimmutable(\"367\")\n                let expr_1 := _2\n                /// @src 1:5473:5491  \"msg.value == price\"\n                let expr_2 := eq(cleanup_uint256(expr), cleanup_uint256(expr_1))\n                /// @src 1:5465:5528  \"require(msg.value == price, \\\"Escrow: incorrect payment amount\\\")\"\n                require_helper_stringliteral_d266(expr_2)\n                /// @src 1:5552:5568  \"nextPurchaseId++\"\n                let _3 := read_from_storage_split_offset_uint256(0x03)\n                let _4 := increment_uint256(_3)\n                update_storage_value_offset_uint256_to_uint256(0x03, _4)\n                let expr_3 := _3\n                /// @src 1:5539:5568  \"purchaseId = nextPurchaseId++\"\n                var_purchaseId := expr_3\n                /// @src 1:5632:5642  \"msg.sender\"\n                let expr_4 := caller()\n                /// @src 1:5664:5673  \"msg.value\"\n                let expr_5 := callvalue()\n                /// @src 1:5696:5701  \"false\"\n                let expr_6 := 0x00\n                /// @src 1:5725:5730  \"false\"\n                let expr_7 := 0x00\n                /// @src 1:5754:5759  \"false\"\n                let expr_8 := 0x00\n                /// @src 1:5602:5770  \"Purchase({...\"\n                let expr_611_mpos := allocate_memory_struct_struct_Purchase_storage_ptr()\n                write_to_memory_address(add(expr_611_mpos, 0), expr_4)\n                write_to_memory_uint256(add(expr_611_mpos, 32), expr_5)\n                write_to_memory_bool(add(expr_611_mpos, 64), expr_6)\n                write_to_memory_bool(add(expr_611_mpos, 96), expr_7)\n                write_to_memory_bool(add(expr_611_mpos, 128), expr_8)\n                /// @src 1:5578:5587  \"purchases\"\n                let _39_slot := 0x04\n                let expr_600_slot := _39_slot\n                /// @src 1:5588:5598  \"purchaseId\"\n                let _5 := var_purchaseId\n                let expr_9 := _5\n                /// @src 1:5578:5599  \"purchases[purchaseId]\"\n                let _6 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_600_slot, expr_9)\n                /// @src 1:5578:5770  \"purchases[purchaseId] = Purchase({...\"\n                update_storage_value_offset_struct_Purchase_to_struct_Purchase(_6, expr_611_mpos)\n                /// @src 1:5803:5813  \"purchaseId\"\n                let _7 := var_purchaseId\n                let expr_10 := _7\n                /// @src 1:5815:5825  \"msg.sender\"\n                let expr_11 := caller()\n                /// @src 1:5827:5836  \"msg.value\"\n                let expr_12 := callvalue()\n                /// @src 1:5786:5837  \"ServicePurchased(purchaseId, msg.sender, msg.value)\"\n                let _8 := 0x6989fd04c5bc56c8995f68ff4d4a94e67e56cf4efa352219e731185ac2736df5\n                let _9 := convert_uint256_to_uint256(expr_10)\n                let _10 := convert_address_to_address(expr_11)\n                let _11 := allocate_unbounded()\n                let _12 := abi_encode_uint256(_11, expr_12)\n                log3(_11, sub(_12, _11), _8, _9, _10)\n            }\n            /// @ast-id 623 @src 1:5374:5844  \"function buyService() external payable nonReentrant returns (uint256 purchaseId) {...\"\n            function fun_buyService() -> var_purchaseId\n            {\n                /// @src 1:5435:5453  \"uint256 purchaseId\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_purchaseId := zero_uint256\n                var_purchaseId := modifier_nonReentrant(var_purchaseId)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function zero_value_for_split_bytes32() -> ret\n            { ret := 0 }\n            /// @ast-id 1000 @src 1:10651:10814  \"function claimDigest(uint256 purchaseId, bytes32 deliverableHash) external view returns (bytes32) {...\"\n            function fun_claimDigest(var_purchaseId, var_deliverableHash) -> var\n            {\n                /// @src 1:10740:10747  \"bytes32\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var := zero_bytes32\n                /// @src 1:10779:10789  \"purchaseId\"\n                let _1 := var_purchaseId\n                let expr := _1\n                /// @src 1:10791:10806  \"deliverableHash\"\n                let _2 := var_deliverableHash\n                let expr_1 := _2\n                /// @src 1:10766:10807  \"_claimDigest(purchaseId, deliverableHash)\"\n                let expr_2 := fun__claimDigest(expr, expr_1)\n                /// @src 1:10759:10807  \"return _claimDigest(purchaseId, deliverableHash)\"\n                var := expr_2\n                leave\n            }\n            /// @ast-id 484 @src 1:3710:3851  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant_719(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_716_length)\n            {\n                /// @src 1:3752:3759  \"_locked\"\n                let _1 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _1\n                /// @src 1:3763:3764  \"1\"\n                let expr_1 := 0x01\n                /// @src 1:3752:3764  \"_locked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                /// @src 1:3744:3791  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                require_helper_stringliteral_2e89(expr_2)\n                /// @src 1:3811:3812  \"2\"\n                let expr_3 := 0x02\n                /// @src 1:3801:3812  \"_locked = 2\"\n                let _2 := convert_rational_2_by_1_to_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x05, _2)\n                /// @src 1:3822:3823  \"_\"\n                modifier_onlyProvider_721(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_716_length)\n                /// @src 1:3843:3844  \"1\"\n                let expr_4 := 0x01\n                /// @src 1:3833:3844  \"_locked = 1\"\n                let _3 := convert_rational_1_by_1_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x05, _3)\n            }\n            /// @ast-id 449 @src 1:3349:3470  \"modifier onlyProvider() {...\"\n            function modifier_onlyProvider_721(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            {\n                /// @src 1:3391:3401  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:3405:3413  \"provider\"\n                let _1 := loadimmutable(\"364\")\n                let expr_1 := _1\n                /// @src 1:3391:3413  \"msg.sender == provider\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:3383:3452  \"require(msg.sender == provider, \\\"Escrow: caller is not the provider\\\")\"\n                require_helper_stringliteral_4b50(expr_2)\n                /// @src 1:3462:3463  \"_\"\n                fun_claimPayment_inner(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function convert_struct_Purchase_storage_to_struct_Purchase_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: payment already claimed\")\n            }\n            function abi_encode_stringliteral_9796(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                store_literal_in_memory_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_9796(tail)\n            }\n            function require_helper_stringliteral_9796(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: purchase is in dispute\")\n            }\n            function abi_encode_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 30)\n                store_literal_in_memory_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_14a8(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(tail)\n            }\n            function require_helper_stringliteral_14a8(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_14a8(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function abi_decode_available_length_bytes(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_bytes(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function convert_array_bytes_calldata_to_bytes(value, length) -> converted\n            {\n                converted := abi_decode_available_length_bytes(value, length, calldatasize())\n            }\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            /// @src 1:7736:8490  \"function claimPayment(...\"\n            function fun_claimPayment_inner(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            {\n                /// @src 1:7937:7946  \"purchases\"\n                let _56_slot := 0x04\n                let expr_726_slot := _56_slot\n                /// @src 1:7947:7957  \"purchaseId\"\n                let _1 := var_purchaseId\n                let expr := _1\n                /// @src 1:7937:7958  \"purchases[purchaseId]\"\n                let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_726_slot, expr)\n                let _59_slot := _2\n                let expr_728_slot := _59_slot\n                /// @src 1:7909:7958  \"Purchase storage purchase = purchases[purchaseId]\"\n                let var_purchase_725_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_728_slot)\n                /// @src 1:7978:7986  \"purchase\"\n                let _60_slot := var_purchase_725_slot\n                let expr_731_slot := _60_slot\n                /// @src 1:7978:7994  \"purchase.claimed\"\n                let _3 := add(expr_731_slot, 2)\n                let _4 := read_from_storage_split_offset_t_bool(_3)\n                let expr_1 := _4\n                /// @src 1:7977:7994  \"!purchase.claimed\"\n                let expr_2 := cleanup_bool(iszero(expr_1))\n                /// @src 1:7969:8031  \"require(!purchase.claimed,  \\\"Escrow: payment already claimed\\\")\"\n                require_helper_stringliteral_9796(expr_2)\n                /// @src 1:8050:8058  \"purchase\"\n                let _63_slot := var_purchase_725_slot\n                let expr_738_slot := _63_slot\n                /// @src 1:8050:8067  \"purchase.disputed\"\n                let _5 := add(expr_738_slot, 2)\n                let _6 := read_from_storage_split_offset_bool(_5)\n                let expr_3 := _6\n                /// @src 1:8049:8067  \"!purchase.disputed\"\n                let expr_4 := cleanup_bool(iszero(expr_3))\n                /// @src 1:8041:8102  \"require(!purchase.disputed, \\\"Escrow: purchase is in dispute\\\")\"\n                require_helper_stringliteral_14a8(expr_4)\n                /// @src 1:8178:8188  \"purchaseId\"\n                let _7 := var_purchaseId\n                let expr_5 := _7\n                /// @src 1:8190:8205  \"deliverableHash\"\n                let _8 := var_deliverableHash\n                let expr_6 := _8\n                /// @src 1:8165:8206  \"_claimDigest(purchaseId, deliverableHash)\"\n                let expr_7 := fun__claimDigest(expr_5, expr_6)\n                /// @src 1:8148:8206  \"bytes32 digest = _claimDigest(purchaseId, deliverableHash)\"\n                let var_digest := expr_7\n                /// @src 1:8247:8253  \"digest\"\n                let _9 := var_digest\n                let expr_8 := _9\n                /// @src 1:8255:8269  \"buyerSignature\"\n                let _69_offset := var_buyerSignature_offset\n                let _69_length := var_buyerSignature_length\n                let expr_756_offset := _69_offset\n                let expr_756_length := _69_length\n                /// @src 1:8233:8270  \"ECDSA.recover(digest, buyerSignature)\"\n                let _70_mpos := convert_array_bytes_calldata_to_bytes(expr_756_offset, expr_756_length)\n                let expr_9 := fun_recover(expr_8, _70_mpos)\n                /// @src 1:8216:8270  \"address signer = ECDSA.recover(digest, buyerSignature)\"\n                let var_signer := expr_9\n                /// @src 1:8288:8294  \"signer\"\n                let _10 := var_signer\n                let expr_10 := _10\n                /// @src 1:8298:8306  \"purchase\"\n                let _72_slot := var_purchase_725_slot\n                let expr_761_slot := _72_slot\n                /// @src 1:8298:8312  \"purchase.buyer\"\n                let _11 := add(expr_761_slot, 0)\n                let _12 := read_from_storage_split_offset_address(_11)\n                let expr_11 := _12\n                /// @src 1:8288:8312  \"signer == purchase.buyer\"\n                let expr_12 := eq(cleanup_address(expr_10), cleanup_address(expr_11))\n                /// @src 1:8280:8353  \"require(signer == purchase.buyer, \\\"SignatureVerifier: Invalid signature\\\")\"\n                require_helper_stringliteral_6f31(expr_12)\n                /// @src 1:8383:8387  \"true\"\n                let expr_13 := 0x01\n                /// @src 1:8364:8372  \"purchase\"\n                let _75_slot := var_purchase_725_slot\n                let expr_767_slot := _75_slot\n                /// @src 1:8364:8380  \"purchase.claimed\"\n                let _13 := add(expr_767_slot, 2)\n                /// @src 1:8364:8387  \"purchase.claimed = true\"\n                update_storage_value_offset_bool_to_bool(_13, expr_13)\n                /// @src 1:8414:8422  \"provider\"\n                let _14 := loadimmutable(\"364\")\n                let expr_14 := _14\n                /// @src 1:8406:8423  \"payable(provider)\"\n                let expr_15 := convert_address_to_address_payable(expr_14)\n                /// @src 1:8425:8433  \"purchase\"\n                let _78_slot := var_purchase_725_slot\n                let expr_778_slot := _78_slot\n                /// @src 1:8425:8440  \"purchase.amount\"\n                let _15 := add(expr_778_slot, 1)\n                let _16 := read_from_storage_split_offset_uint256(_15)\n                let expr_16 := _16\n                fun_sendETH(expr_15, expr_16)\n                /// @src 1:8472:8482  \"purchaseId\"\n                let _17 := var_purchaseId\n                let expr_17 := _17\n                /// @src 1:8457:8483  \"PaymentClaimed(purchaseId)\"\n                let _18 := 0x9b6fad3638aff112640e0386ff933ec4087b8ef6944df50928b1b578fa968c19\n                let _19 := convert_uint256_to_uint256(expr_17)\n                let _20 := allocate_unbounded()\n                let _21 := abi_encode_tuple(_20)\n                log2(_20, sub(_21, _20), _18, _19)\n            }\n            /// @ast-id 787 @src 1:7736:8490  \"function claimPayment(...\"\n            function fun_claimPayment(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            {\n                modifier_nonReentrant_719(var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function store_literal_in_memory_e5c00a4eee7d31f86bc5aa9e56edddaee61755eba58c430976c3a31eb9b68dc5(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: caller is not the factor\")\n                mstore(add(memPtr, 32), \"y\")\n            }\n            function abi_encode_stringliteral_e5c0(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 33)\n                store_literal_in_memory_e5c00a4eee7d31f86bc5aa9e56edddaee61755eba58c430976c3a31eb9b68dc5(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_stringliteral_e5c0(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_e5c0(tail)\n            }\n            function require_helper_stringliteral_e5c0(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_e5c0(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 462 @src 1:3553:3671  \"modifier onlyFactory() {...\"\n            function modifier_onlyFactory_839(var_purchaseId)\n            {\n                /// @src 1:3594:3604  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:3608:3615  \"factory\"\n                let _1 := loadimmutable(\"358\")\n                let expr_1 := _1\n                /// @src 1:3594:3615  \"msg.sender == factory\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:3586:3653  \"require(msg.sender == factory, \\\"Escrow: caller is not the factory\\\")\"\n                require_helper_stringliteral_e5c0(expr_2)\n                /// @src 1:3663:3664  \"_\"\n                modifier_nonReentrant_841(var_purchaseId)\n            }\n            /// @ast-id 484 @src 1:3710:3851  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant_841(var_purchaseId)\n            {\n                /// @src 1:3752:3759  \"_locked\"\n                let _1 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _1\n                /// @src 1:3763:3764  \"1\"\n                let expr_1 := 0x01\n                /// @src 1:3752:3764  \"_locked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                /// @src 1:3744:3791  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                require_helper_stringliteral_2e89(expr_2)\n                /// @src 1:3811:3812  \"2\"\n                let expr_3 := 0x02\n                /// @src 1:3801:3812  \"_locked = 2\"\n                let _2 := convert_rational_2_by_1_to_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x05, _2)\n                /// @src 1:3822:3823  \"_\"\n                fun_factoryRefundBuyer_inner(var_purchaseId)\n                /// @src 1:3843:3844  \"1\"\n                let expr_4 := 0x01\n                /// @src 1:3833:3844  \"_locked = 1\"\n                let _3 := convert_rational_1_by_1_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x05, _3)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function store_literal_in_memory_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: invalid state\")\n            }\n            function abi_encode_stringliteral_fe47(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 21)\n                store_literal_in_memory_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_fe47(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_fe47(tail)\n            }\n            function require_helper_stringliteral_fe47(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_fe47(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @src 1:9047:9373  \"function factoryRefundBuyer(uint256 purchaseId) external onlyFactory nonReentrant {...\"\n            function fun_factoryRefundBuyer_inner(var_purchaseId)\n            {\n                /// @src 1:9167:9176  \"purchases\"\n                let _90_slot := 0x04\n                let expr_846_slot := _90_slot\n                /// @src 1:9177:9187  \"purchaseId\"\n                let _1 := var_purchaseId\n                let expr := _1\n                /// @src 1:9167:9188  \"purchases[purchaseId]\"\n                let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_846_slot, expr)\n                let _93_slot := _2\n                let expr_848_slot := _93_slot\n                /// @src 1:9139:9188  \"Purchase storage purchase = purchases[purchaseId]\"\n                let var_purchase_845_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_848_slot)\n                /// @src 1:9206:9214  \"purchase\"\n                let _94_slot := var_purchase_845_slot\n                let expr_851_slot := _94_slot\n                /// @src 1:9206:9223  \"purchase.disputed\"\n                let _3 := add(expr_851_slot, 2)\n                let _4 := read_from_storage_split_offset_bool(_3)\n                let expr_1 := _4\n                /// @src 1:9206:9245  \"purchase.disputed && !purchase.resolved\"\n                let expr_2 := expr_1\n                if expr_2\n                {\n                    /// @src 1:9228:9236  \"purchase\"\n                    let _97_slot := var_purchase_845_slot\n                    let expr_853_slot := _97_slot\n                    /// @src 1:9228:9245  \"purchase.resolved\"\n                    let _5 := add(expr_853_slot, 2)\n                    let _6 := read_from_storage_split_offset_2_bool(_5)\n                    let expr_3 := _6\n                    /// @src 1:9227:9245  \"!purchase.resolved\"\n                    let expr_4 := cleanup_bool(iszero(expr_3))\n                    /// @src 1:9206:9245  \"purchase.disputed && !purchase.resolved\"\n                    expr_2 := expr_4\n                }\n                /// @src 1:9198:9271  \"require(purchase.disputed && !purchase.resolved, \\\"Escrow: invalid state\\\")\"\n                require_helper_stringliteral_fe47(expr_2)\n                /// @src 1:9302:9306  \"true\"\n                let expr_5 := 0x01\n                /// @src 1:9282:9290  \"purchase\"\n                let _100_slot := var_purchase_845_slot\n                let expr_860_slot := _100_slot\n                /// @src 1:9282:9299  \"purchase.resolved\"\n                let _7 := add(expr_860_slot, 2)\n                /// @src 1:9282:9306  \"purchase.resolved = true\"\n                update_storage_value_offset_2_bool_to_bool(_7, expr_5)\n                /// @src 1:9333:9341  \"purchase\"\n                let _102_slot := var_purchase_845_slot\n                let expr_869_slot := _102_slot\n                /// @src 1:9333:9347  \"purchase.buyer\"\n                let _8 := add(expr_869_slot, 0)\n                let _9 := read_from_storage_split_offset_address(_8)\n                let expr_6 := _9\n                /// @src 1:9325:9348  \"payable(purchase.buyer)\"\n                let expr_7 := convert_address_to_address_payable(expr_6)\n                /// @src 1:9350:9358  \"purchase\"\n                let _105_slot := var_purchase_845_slot\n                let expr_872_slot := _105_slot\n                /// @src 1:9350:9365  \"purchase.amount\"\n                let _10 := add(expr_872_slot, 1)\n                let _11 := read_from_storage_split_offset_uint256(_10)\n                let expr_8 := _11\n                fun_sendETH(expr_7, expr_8)\n            }\n            /// @ast-id 877 @src 1:9047:9373  \"function factoryRefundBuyer(uint256 purchaseId) external onlyFactory nonReentrant {...\"\n            function fun_factoryRefundBuyer(var_purchaseId)\n            {\n                modifier_onlyFactory_839(var_purchaseId)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function store_literal_in_memory_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: caller is not the buyer\")\n            }\n            function abi_encode_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                store_literal_in_memory_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_f4d3(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(tail)\n            }\n            function require_helper_stringliteral_f4d3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_f4d3(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: dispute already raised\")\n            }\n            function abi_encode_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 30)\n                store_literal_in_memory_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_3a45(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(tail)\n            }\n            function require_helper_stringliteral_3a45(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_3a45(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 833 @src 1:8496:8932  \"function raiseDispute(uint256 purchaseId) external {...\"\n            function fun_raiseDispute(var_purchaseId)\n            {\n                /// @src 1:8585:8594  \"purchases\"\n                let _108_slot := 0x04\n                let expr_795_slot := _108_slot\n                /// @src 1:8595:8605  \"purchaseId\"\n                let _1 := var_purchaseId\n                let expr := _1\n                /// @src 1:8585:8606  \"purchases[purchaseId]\"\n                let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_795_slot, expr)\n                let _111_slot := _2\n                let expr_797_slot := _111_slot\n                /// @src 1:8557:8606  \"Purchase storage purchase = purchases[purchaseId]\"\n                let var_purchase_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_797_slot)\n                /// @src 1:8625:8635  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 1:8639:8647  \"purchase\"\n                let _112_slot := var_purchase_slot\n                let expr_802_slot := _112_slot\n                /// @src 1:8639:8653  \"purchase.buyer\"\n                let _3 := add(expr_802_slot, 0)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_2 := _4\n                /// @src 1:8625:8653  \"msg.sender == purchase.buyer\"\n                let expr_3 := eq(cleanup_address(expr_1), cleanup_address(expr_2))\n                /// @src 1:8617:8689  \"require(msg.sender == purchase.buyer, \\\"Escrow: caller is not the buyer\\\")\"\n                require_helper_stringliteral_f4d3(expr_3)\n                /// @src 1:8708:8716  \"purchase\"\n                let _115_slot := var_purchase_slot\n                let expr_809_slot := _115_slot\n                /// @src 1:8708:8724  \"purchase.claimed\"\n                let _5 := add(expr_809_slot, 2)\n                let _6 := read_from_storage_split_offset_t_bool(_5)\n                let expr_4 := _6\n                /// @src 1:8707:8724  \"!purchase.claimed\"\n                let expr_5 := cleanup_bool(iszero(expr_4))\n                /// @src 1:8699:8770  \"require(!purchase.claimed,           \\\"Escrow: payment already claimed\\\")\"\n                require_helper_stringliteral_9796(expr_5)\n                /// @src 1:8789:8797  \"purchase\"\n                let _118_slot := var_purchase_slot\n                let expr_816_slot := _118_slot\n                /// @src 1:8789:8806  \"purchase.disputed\"\n                let _7 := add(expr_816_slot, 2)\n                let _8 := read_from_storage_split_offset_bool(_7)\n                let expr_6 := _8\n                /// @src 1:8788:8806  \"!purchase.disputed\"\n                let expr_7 := cleanup_bool(iszero(expr_6))\n                /// @src 1:8780:8850  \"require(!purchase.disputed,          \\\"Escrow: dispute already raised\\\")\"\n                require_helper_stringliteral_3a45(expr_7)\n                /// @src 1:8881:8885  \"true\"\n                let expr_8 := 0x01\n                /// @src 1:8861:8869  \"purchase\"\n                let _121_slot := var_purchase_slot\n                let expr_822_slot := _121_slot\n                /// @src 1:8861:8878  \"purchase.disputed\"\n                let _9 := add(expr_822_slot, 2)\n                /// @src 1:8861:8885  \"purchase.disputed = true\"\n                update_storage_value_offset_t_bool_to_t_bool(_9, expr_8)\n                /// @src 1:8914:8924  \"purchaseId\"\n                let _10 := var_purchaseId\n                let expr_9 := _10\n                /// @src 1:8900:8925  \"DisputeRaised(purchaseId)\"\n                let _11 := 0x04901f83201c8724eadf084436db8aa391820bae6d11f9f78a17edb6f2eef3cf\n                let _12 := convert_uint256_to_uint256(expr_9)\n                let _13 := allocate_unbounded()\n                let _14 := abi_encode_tuple(_13)\n                log2(_13, sub(_14, _13), _11, _12)\n            }\n            /// @ast-id 462 @src 1:3553:3671  \"modifier onlyFactory() {...\"\n            function modifier_onlyFactory(var_purchaseId)\n            {\n                /// @src 1:3594:3604  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:3608:3615  \"factory\"\n                let _1 := loadimmutable(\"358\")\n                let expr_1 := _1\n                /// @src 1:3594:3615  \"msg.sender == factory\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:3586:3653  \"require(msg.sender == factory, \\\"Escrow: caller is not the factory\\\")\"\n                require_helper_stringliteral_e5c0(expr_2)\n                /// @src 1:3663:3664  \"_\"\n                modifier_nonReentrant_885(var_purchaseId)\n            }\n            /// @ast-id 484 @src 1:3710:3851  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant_885(var_purchaseId)\n            {\n                /// @src 1:3752:3759  \"_locked\"\n                let _1 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _1\n                /// @src 1:3763:3764  \"1\"\n                let expr_1 := 0x01\n                /// @src 1:3752:3764  \"_locked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                /// @src 1:3744:3791  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                require_helper_stringliteral_2e89(expr_2)\n                /// @src 1:3811:3812  \"2\"\n                let expr_3 := 0x02\n                /// @src 1:3801:3812  \"_locked = 2\"\n                let _2 := convert_rational_2_by_1_to_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x05, _2)\n                /// @src 1:3822:3823  \"_\"\n                fun_factoryReleaseToProvider_inner(var_purchaseId)\n                /// @src 1:3843:3844  \"1\"\n                let expr_4 := 0x01\n                /// @src 1:3833:3844  \"_locked = 1\"\n                let _3 := convert_rational_1_by_1_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x05, _3)\n            }\n            /// @src 1:9472:9819  \"function factoryReleaseToProvider(uint256 purchaseId) external onlyFactory nonReentrant {...\"\n            function fun_factoryReleaseToProvider_inner(var_purchaseId)\n            {\n                /// @src 1:9598:9607  \"purchases\"\n                let _132_slot := 0x04\n                let expr_890_slot := _132_slot\n                /// @src 1:9608:9618  \"purchaseId\"\n                let _1 := var_purchaseId\n                let expr := _1\n                /// @src 1:9598:9619  \"purchases[purchaseId]\"\n                let _2 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_890_slot, expr)\n                let _135_slot := _2\n                let expr_892_slot := _135_slot\n                /// @src 1:9570:9619  \"Purchase storage purchase = purchases[purchaseId]\"\n                let var_purchase_889_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_892_slot)\n                /// @src 1:9638:9646  \"purchase\"\n                let _136_slot := var_purchase_889_slot\n                let expr_895_slot := _136_slot\n                /// @src 1:9638:9654  \"purchase.claimed\"\n                let _3 := add(expr_895_slot, 2)\n                let _4 := read_from_storage_split_offset_t_bool(_3)\n                let expr_1 := _4\n                /// @src 1:9637:9654  \"!purchase.claimed\"\n                let expr_2 := cleanup_bool(iszero(expr_1))\n                /// @src 1:9637:9675  \"!purchase.claimed && purchase.disputed\"\n                let expr_3 := expr_2\n                if expr_3\n                {\n                    /// @src 1:9658:9666  \"purchase\"\n                    let _139_slot := var_purchase_889_slot\n                    let expr_898_slot := _139_slot\n                    /// @src 1:9658:9675  \"purchase.disputed\"\n                    let _5 := add(expr_898_slot, 2)\n                    let _6 := read_from_storage_split_offset_bool(_5)\n                    let expr_4 := _6\n                    /// @src 1:9637:9675  \"!purchase.claimed && purchase.disputed\"\n                    expr_3 := expr_4\n                }\n                /// @src 1:9637:9697  \"!purchase.claimed && purchase.disputed && !purchase.resolved\"\n                let expr_5 := expr_3\n                if expr_5\n                {\n                    /// @src 1:9680:9688  \"purchase\"\n                    let _142_slot := var_purchase_889_slot\n                    let expr_901_slot := _142_slot\n                    /// @src 1:9680:9697  \"purchase.resolved\"\n                    let _7 := add(expr_901_slot, 2)\n                    let _8 := read_from_storage_split_offset_2_bool(_7)\n                    let expr_6 := _8\n                    /// @src 1:9679:9697  \"!purchase.resolved\"\n                    let expr_7 := cleanup_bool(iszero(expr_6))\n                    /// @src 1:9637:9697  \"!purchase.claimed && purchase.disputed && !purchase.resolved\"\n                    expr_5 := expr_7\n                }\n                /// @src 1:9629:9723  \"require(!purchase.claimed && purchase.disputed && !purchase.resolved, \\\"Escrow: invalid state\\\")\"\n                require_helper_stringliteral_fe47(expr_5)\n                /// @src 1:9754:9758  \"true\"\n                let expr_8 := 0x01\n                /// @src 1:9734:9742  \"purchase\"\n                let _slot := var_purchase_889_slot\n                let expr_908_slot := _slot\n                /// @src 1:9734:9751  \"purchase.resolved\"\n                let _9 := add(expr_908_slot, 2)\n                /// @src 1:9734:9758  \"purchase.resolved = true\"\n                update_storage_value_offset_2_bool_to_bool(_9, expr_8)\n                /// @src 1:9785:9793  \"provider\"\n                let _10 := loadimmutable(\"364\")\n                let expr_9 := _10\n                /// @src 1:9777:9794  \"payable(provider)\"\n                let expr_10 := convert_address_to_address_payable(expr_9)\n                /// @src 1:9796:9804  \"purchase\"\n                let _148_slot := var_purchase_889_slot\n                let expr_919_slot := _148_slot\n                /// @src 1:9796:9811  \"purchase.amount\"\n                let _11 := add(expr_919_slot, 1)\n                let _12 := read_from_storage_split_offset_uint256(_11)\n                let expr_11 := _12\n                fun_sendETH(expr_10, expr_11)\n            }\n            /// @ast-id 924 @src 1:9472:9819  \"function factoryReleaseToProvider(uint256 purchaseId) external onlyFactory nonReentrant {...\"\n            function fun_factoryReleaseToProvider(var_purchaseId)\n            {\n                modifier_onlyFactory(var_purchaseId)\n            }\n            /// @ast-id 449 @src 1:3349:3470  \"modifier onlyProvider() {...\"\n            function modifier_onlyProvider(var_newGateway_offset, var_newGateway_927_length)\n            {\n                /// @src 1:3391:3401  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:3405:3413  \"provider\"\n                let _1 := loadimmutable(\"364\")\n                let expr_1 := _1\n                /// @src 1:3391:3413  \"msg.sender == provider\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:3383:3452  \"require(msg.sender == provider, \\\"Escrow: caller is not the provider\\\")\"\n                require_helper_stringliteral_4b50(expr_2)\n                /// @src 1:3462:3463  \"_\"\n                fun_updateGateway_inner(var_newGateway_offset, var_newGateway_927_length)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function convert_array_string_calldata_to_bytes_calldata(value, length) -> converted, outLength\n            {\n                converted := value\n                outLength := length\n            }\n            function array_length_bytes_calldata(value, len) -> length\n            { length := len }\n            function store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: gateway cannot be empty\")\n            }\n            function abi_encode_stringliteral_795f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_795f(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_795f(tail)\n            }\n            function require_helper_stringliteral_795f(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_795f(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function array_length_string_calldata(value, len) -> length\n            { length := len }\n            function divide_by_ceil(value) -> result\n            {\n                result := div(add(value, 31), 32)\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function storage_set_to_zero_uint256(slot, offset)\n            {\n                let zero := zero_value_for_split_uint256()\n                update_storage_value_uint256_to_uint256(slot, offset, zero)\n            }\n            function clear_storage_range_bytes1(start, end)\n            {\n                for { } lt(start, end) { start := add(start, 1) }\n                {\n                    storage_set_to_zero_uint256(start, 0)\n                }\n            }\n            function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_string_storage(array)\n                    let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                }\n            }\n            function mask_bytes_dynamic(data, bytes) -> result\n            {\n                let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                result := and(data, mask)\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                data := mask_bytes_dynamic(data, len)\n                used := or(data, mul(2, len))\n            }\n            function copy_byte_array_to_storage_from_string_calldata_to_string(slot, src, len)\n            {\n                let newLen := array_length_string_calldata(src, len)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_string_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, calldataload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := calldataload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := calldataload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_offset_string_calldata_to_string(slot, value, value_1)\n            {\n                copy_byte_array_to_storage_from_string_calldata_to_string(slot, value, value_1)\n            }\n            /// @src 1:9885:10077  \"function updateGateway(string calldata newGateway) external onlyProvider {...\"\n            function fun_updateGateway_inner(var_newGateway_offset, var_newGateway_length)\n            {\n                /// @src 1:9982:9992  \"newGateway\"\n                let _152_offset := var_newGateway_offset\n                let _152_length := var_newGateway_length\n                let expr_935_offset := _152_offset\n                let expr_935_length := _152_length\n                /// @src 1:9976:9993  \"bytes(newGateway)\"\n                let expr_936_offset, expr_936_length := convert_array_string_calldata_to_bytes_calldata(expr_935_offset, expr_935_length)\n                /// @src 1:9976:10000  \"bytes(newGateway).length\"\n                let expr := array_length_bytes_calldata(expr_936_offset, expr_936_length)\n                /// @src 1:10003:10004  \"0\"\n                let expr_1 := 0x00\n                /// @src 1:9976:10004  \"bytes(newGateway).length > 0\"\n                let expr_2 := gt(cleanup_uint256(expr), convert_rational_0_by_1_to_uint256(expr_1))\n                /// @src 1:9968:10040  \"require(bytes(newGateway).length > 0, \\\"Escrow: gateway cannot be empty\\\")\"\n                require_helper_stringliteral_795f(expr_2)\n                /// @src 1:10060:10070  \"newGateway\"\n                let _153_offset := var_newGateway_offset\n                let _length := var_newGateway_length\n                let expr_944_offset := _153_offset\n                let expr_944_length := _length\n                /// @src 1:10050:10070  \"gateway = newGateway\"\n                update_storage_value_offset_string_calldata_to_string(0x01, expr_944_offset, expr_944_length)\n            }\n            /// @ast-id 948 @src 1:9885:10077  \"function updateGateway(string calldata newGateway) external onlyProvider {...\"\n            function fun_updateGateway(var_newGateway_offset, var_newGateway_length)\n            {\n                modifier_onlyProvider(var_newGateway_offset, var_newGateway_length)\n            }\n            /// @ast-id 449 @src 1:3349:3470  \"modifier onlyProvider() {...\"\n            function modifier_onlyProvider_954(var_newDescription_offset, var_newDescription_length)\n            {\n                /// @src 1:3391:3401  \"msg.sender\"\n                let expr := caller()\n                /// @src 1:3405:3413  \"provider\"\n                let _1 := loadimmutable(\"364\")\n                let expr_1 := _1\n                /// @src 1:3391:3413  \"msg.sender == provider\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 1:3383:3452  \"require(msg.sender == provider, \\\"Escrow: caller is not the provider\\\")\"\n                require_helper_stringliteral_4b50(expr_2)\n                /// @src 1:3462:3463  \"_\"\n                fun_updateDescription_inner(var_newDescription_offset, var_newDescription_length)\n            }\n            /// @src 1:10155:10281  \"function updateDescription(string calldata newDescription) external onlyProvider {...\"\n            function fun_updateDescription_inner(var_newDescription_offset, var_newDescription_length)\n            {\n                /// @src 1:10260:10274  \"newDescription\"\n                let _156_offset := var_newDescription_offset\n                let _156_length := var_newDescription_length\n                let expr_957_offset := _156_offset\n                let expr_957_length := _156_length\n                /// @src 1:10246:10274  \"description = newDescription\"\n                update_storage_value_offset_string_calldata_to_string(0x00, expr_957_offset, expr_957_length)\n            }\n            /// @ast-id 961 @src 1:10155:10281  \"function updateDescription(string calldata newDescription) external onlyProvider {...\"\n            function fun_updateDescription(var_newDescription_offset, var_newDescription_length)\n            {\n                modifier_onlyProvider_954(var_newDescription_offset, var_newDescription_length)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function zero_value_for_split_address() -> ret\n            { ret := 0 }\n            function abi_decode_bytes(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                let length := calldataload(offset)\n                array := abi_decode_available_length_bytes(add(offset, 0x20), length, end)\n            }\n            function cleanup_uint64(value) -> cleaned\n            {\n                cleaned := and(value, 0xffffffffffffffff)\n            }\n            function validator_revert_uint64(value)\n            {\n                if iszero(eq(value, cleanup_uint64(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint64(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint64(value)\n            }\n            function abi_decode_bytest_uint64t_bytes(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := calldataload(add(headStart, 0))\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value0 := abi_decode_bytes(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint64(add(headStart, offset_1), dataEnd)\n                let offset_2 := calldataload(add(headStart, 64))\n                if gt(offset_2, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value2 := abi_decode_bytes(add(headStart, offset_2), dataEnd)\n            }\n            function convert_contract_SignatureVerifier_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function convert_uint64_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint64(value)))\n            }\n            function store_literal_in_memory_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SignatureVerifier: Signature exp\")\n                mstore(add(memPtr, 32), \"ired\")\n            }\n            function abi_encode_stringliteral_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 36)\n                store_literal_in_memory_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_e5f9(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a(tail)\n            }\n            function require_helper_stringliteral_e5f9(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_e5f9(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 1626 @src 2:1316:1893  \"function verify(...\"\n            function fun_verify(var_request_offset, var_request_length, var_response_offset, var_response_length) -> var, var_mpos\n            {\n                /// @src 2:1426:1433  \"address\"\n                let zero_t_address := zero_value_for_split_address()\n                var := zero_t_address\n                /// @src 2:1435:1447  \"bytes memory\"\n                let zero_bytes_memory_ptr_mpos := zero_value_for_split_bytes()\n                var_mpos := zero_bytes_memory_ptr_mpos\n                /// @src 2:1541:1549  \"response\"\n                let _160_offset := var_response_offset\n                let _160_length := var_response_length\n                let expr_offset := _160_offset\n                let expr_1587_length := _160_length\n                /// @src 2:1517:1595  \"abi.decode(...\"\n                let expr_1595_component_1_mpos, expr_1595_component, expr_1595_component_3_mpos := abi_decode_bytest_uint64t_bytes(expr_offset, add(expr_offset, expr_1587_length))\n                /// @src 2:1459:1595  \"(bytes memory result, uint64 expires, bytes memory sig) = abi.decode(...\"\n                let var_result_1580_mpos := expr_1595_component_1_mpos\n                let var_expires := expr_1595_component\n                let var_sig_mpos := expr_1595_component_3_mpos\n                /// @src 2:1675:1679  \"this\"\n                let expr_1604_address := address()\n                /// @src 2:1667:1680  \"address(this)\"\n                let expr := convert_contract_SignatureVerifier_to_address(expr_1604_address)\n                /// @src 2:1682:1689  \"expires\"\n                let _1 := var_expires\n                let expr_1 := _1\n                /// @src 2:1691:1698  \"request\"\n                let _162_offset := var_request_offset\n                let _162_length := var_request_length\n                let expr_1607_offset := _162_offset\n                let expr_1607_length := _162_length\n                /// @src 2:1700:1706  \"result\"\n                let _mpos := var_result_1580_mpos\n                let expr_1608_mpos := _mpos\n                /// @src 2:1649:1707  \"makeSignatureHash(address(this), expires, request, result)\"\n                let _164_mpos := convert_array_bytes_calldata_to_bytes(expr_1607_offset, expr_1607_length)\n                let expr_2 := fun_makeSignatureHash(expr, expr_1, _164_mpos, expr_1608_mpos)\n                /// @src 2:1721:1724  \"sig\"\n                let _165_mpos := var_sig_mpos\n                let expr_1610_mpos := _165_mpos\n                /// @src 2:1622:1734  \"ECDSA.recover(...\"\n                let expr_3 := fun_recover(expr_2, expr_1610_mpos)\n                /// @src 2:1605:1734  \"address signer = ECDSA.recover(...\"\n                let var_signer := expr_3\n                /// @src 2:1765:1772  \"expires\"\n                let _2 := var_expires\n                let expr_4 := _2\n                /// @src 2:1776:1791  \"block.timestamp\"\n                let expr_5 := timestamp()\n                /// @src 2:1765:1791  \"expires >= block.timestamp\"\n                let expr_6 := iszero(lt(convert_uint64_to_uint256(expr_4), cleanup_uint256(expr_5)))\n                /// @src 2:1744:1853  \"require(...\"\n                require_helper_stringliteral_e5f9(expr_6)\n                /// @src 2:1871:1877  \"signer\"\n                let _3 := var_signer\n                let expr_7 := _3\n                /// @src 2:1870:1886  \"(signer, result)\"\n                let expr_1623_component := expr_7\n                /// @src 2:1879:1885  \"result\"\n                let _168_mpos := var_result_1580_mpos\n                let expr_1622_mpos := _168_mpos\n                /// @src 2:1870:1886  \"(signer, result)\"\n                let expr_component_mpos := expr_1622_mpos\n                /// @src 2:1863:1886  \"return (signer, result)\"\n                var := expr_1623_component\n                var_mpos := expr_component_mpos\n                leave\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function abi_encode_address_uint256_bytes32(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 96)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_bytes32_to_bytes32(value2, add(headStart, 64))\n            }\n            function array_dataslot_bytes(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            /// @ast-id 1023 @src 1:10904:11092  \"function _claimDigest(uint256 purchaseId, bytes32 deliverableHash) internal view returns (bytes32) {...\"\n            function fun__claimDigest(var_purchaseId, var_deliverableHash) -> var\n            {\n                /// @src 1:10994:11001  \"bytes32\"\n                let zero_t_bytes32 := zero_value_for_split_bytes32()\n                var := zero_t_bytes32\n                /// @src 1:11049:11053  \"this\"\n                let expr_1015_address := address()\n                /// @src 1:11041:11054  \"address(this)\"\n                let expr := convert_contract_ServiceEscrow_to_address(expr_1015_address)\n                /// @src 1:11056:11066  \"purchaseId\"\n                let _1 := var_purchaseId\n                let expr_1 := _1\n                /// @src 1:11068:11083  \"deliverableHash\"\n                let _2 := var_deliverableHash\n                let expr_2 := _2\n                /// @src 1:11030:11084  \"abi.encode(address(this), purchaseId, deliverableHash)\"\n                let expr_1019_mpos := allocate_unbounded()\n                let _3 := add(expr_1019_mpos, 0x20)\n                let _4 := abi_encode_address_uint256_bytes32(_3, expr, expr_1, expr_2)\n                mstore(expr_1019_mpos, sub(_4, add(expr_1019_mpos, 0x20)))\n                finalize_allocation(expr_1019_mpos, sub(_4, expr_1019_mpos))\n                /// @src 1:11020:11085  \"keccak256(abi.encode(address(this), purchaseId, deliverableHash))\"\n                let expr_3 := keccak256(array_dataslot_bytes(expr_1019_mpos), array_length_bytes(expr_1019_mpos))\n                /// @src 1:11013:11085  \"return keccak256(abi.encode(address(this), purchaseId, deliverableHash))\"\n                var := expr_3\n                leave\n            }\n            /// @ast-id 103 @src 0:3702:3957  \"function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {...\"\n            function fun_recover(var_hash, var_signature_78_mpos) -> var\n            {\n                /// @src 0:3780:3787  \"address\"\n                let zero_address := zero_value_for_split_address()\n                var := zero_address\n                /// @src 0:3870:3874  \"hash\"\n                let _1 := var_hash\n                let expr := _1\n                /// @src 0:3876:3885  \"signature\"\n                let _176_mpos := var_signature_78_mpos\n                let expr_mpos := _176_mpos\n                /// @src 0:3859:3886  \"tryRecover(hash, signature)\"\n                let expr_93_component, expr_93_component_1, expr_93_component_2 := fun_tryRecover(expr, expr_mpos)\n                /// @src 0:3799:3886  \"(address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature)\"\n                let var_recovered := expr_93_component\n                let var_error := expr_93_component_1\n                let var_errorArg := expr_93_component_2\n                /// @src 0:3908:3913  \"error\"\n                let _2 := var_error\n                let expr_1 := _2\n                /// @src 0:3915:3923  \"errorArg\"\n                let _3 := var_errorArg\n                let expr_2 := _3\n                fun_throwError(expr_1, expr_2)\n                /// @src 0:3941:3950  \"recovered\"\n                let _4 := var_recovered\n                let expr_3 := _4\n                /// @src 0:3934:3950  \"return recovered\"\n                var := expr_3\n                leave\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_stringliteral_c5d2(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                end := add(pos, 0)\n            }\n            function abi_encode_packed_stringliteral_c5d2(pos) -> end\n            {\n                pos := abi_encode_stringliteral_c5d2(pos)\n                end := pos\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            function store_literal_in_memory_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: ETH transfer failed\")\n            }\n            function abi_encode_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 27)\n                store_literal_in_memory_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_c822(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(tail)\n            }\n            function require_helper_stringliteral_c822(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_c822(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 1046 @src 1:11181:11362  \"function _sendETH(address payable to, uint256 amount) private {...\"\n            function fun_sendETH(var_to, var_amount)\n            {\n                /// @src 1:11272:11274  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 1:11272:11279  \"to.call\"\n                let expr_1034_address := convert_address_payable_to_address(expr)\n                /// @src 1:11287:11293  \"amount\"\n                let _2 := var_amount\n                let expr_1 := _2\n                /// @src 1:11272:11294  \"to.call{value: amount}\"\n                let expr_address := expr_1034_address\n                let expr_value := expr_1\n                /// @src 1:11272:11298  \"to.call{value: amount}(\\\"\\\")\"\n                let _3 := allocate_unbounded()\n                let _4 := sub(abi_encode_packed_stringliteral_c5d2(_3), _3)\n                let expr_1038_component := call(gas(), expr_address, expr_value, _3, _4, 0, 0)\n                pop(extract_returndata())\n                /// @src 1:11253:11298  \"(bool success, ) = to.call{value: amount}(\\\"\\\")\"\n                let var_success := expr_1038_component\n                /// @src 1:11316:11323  \"success\"\n                let _5 := var_success\n                let expr_2 := _5\n                /// @src 1:11308:11355  \"require(success, \\\"Escrow: ETH transfer failed\\\")\"\n                require_helper_stringliteral_c822(expr_2)\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function array_storeLengthForEncoding_string_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function store_literal_in_memory_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a(memPtr)\n            {\n                mstore(add(memPtr, 0), shl(248, 25))\n            }\n            function abi_encode_stringliteral_73fd(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_nonPadded_inplace(pos, 2)\n                store_literal_in_memory_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a(pos)\n                end := add(pos, 2)\n            }\n            function shift_left_96(value) -> newValue\n            { newValue := shl(96, value) }\n            function leftAlign_uint160(value) -> aligned\n            {\n                aligned := shift_left_96(value)\n            }\n            function leftAlign_address(value) -> aligned\n            {\n                aligned := leftAlign_uint160(value)\n            }\n            function abi_encode_address_to_address_nonPadded_inplace(value, pos)\n            {\n                mstore(pos, leftAlign_address(cleanup_address(value)))\n            }\n            function shift_left_192(value) -> newValue\n            { newValue := shl(192, value) }\n            function leftAlign_uint64(value) -> aligned\n            {\n                aligned := shift_left_192(value)\n            }\n            function abi_encode_uint64(value, pos)\n            {\n                mstore(pos, leftAlign_uint64(cleanup_uint64(value)))\n            }\n            function leftAlign_bytes32(value) -> aligned\n            { aligned := value }\n            function abi_encode_bytes32(value, pos)\n            {\n                mstore(pos, leftAlign_bytes32(cleanup_bytes32(value)))\n            }\n            function abi_encode_packed_stringliteral_73fd_address_uint64_bytes32_bytes32(pos, value0, value1, value2, value3) -> end\n            {\n                pos := abi_encode_stringliteral_73fd(pos)\n                abi_encode_address_to_address_nonPadded_inplace(value0, pos)\n                pos := add(pos, 20)\n                abi_encode_uint64(value1, pos)\n                pos := add(pos, 8)\n                abi_encode_bytes32(value2, pos)\n                pos := add(pos, 32)\n                abi_encode_bytes32(value3, pos)\n                pos := add(pos, 32)\n                end := pos\n            }\n            /// @ast-id 1567 @src 2:388:838  \"function makeSignatureHash(...\"\n            function fun_makeSignatureHash(var_target, var_expires, var_request_mpos, var_result_mpos) -> var_\n            {\n                /// @src 2:551:558  \"bytes32\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var_ := zero_bytes32\n                /// @src 2:685:691  \"target\"\n                let _1 := var_target\n                let expr := _1\n                /// @src 2:713:720  \"expires\"\n                let _2 := var_expires\n                let expr_1 := _2\n                /// @src 2:752:759  \"request\"\n                let _188_mpos := var_request_mpos\n                let expr_1558_mpos := _188_mpos\n                /// @src 2:742:760  \"keccak256(request)\"\n                let expr_2 := keccak256(array_dataslot_bytes(expr_1558_mpos), array_length_bytes(expr_1558_mpos))\n                /// @src 2:792:798  \"result\"\n                let _189_mpos := var_result_mpos\n                let expr_1561_mpos := _189_mpos\n                /// @src 2:782:799  \"keccak256(result)\"\n                let expr_3 := keccak256(array_dataslot_bytes(expr_1561_mpos), array_length_bytes(expr_1561_mpos))\n                /// @src 2:616:817  \"abi.encodePacked(...\"\n                let expr_1563_mpos := allocate_unbounded()\n                let _3 := add(expr_1563_mpos, 0x20)\n                let _4 := abi_encode_packed_stringliteral_73fd_address_uint64_bytes32_bytes32(_3, expr, expr_1, expr_2, expr_3)\n                mstore(expr_1563_mpos, sub(_4, add(expr_1563_mpos, 0x20)))\n                finalize_allocation(expr_1563_mpos, sub(_4, expr_1563_mpos))\n                /// @src 2:589:831  \"keccak256(...\"\n                let expr_4 := keccak256(array_dataslot_bytes(expr_1563_mpos), array_length_bytes(expr_1563_mpos))\n                /// @src 2:570:831  \"return...\"\n                var_ := expr_4\n                leave\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function zero_value_for_split_enum_RecoverError() -> ret\n            { ret := 0 }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function convert_uint256_to_bytes32(value) -> converted\n            {\n                converted := cleanup_bytes32(shift_left_0(cleanup_uint256(value)))\n            }\n            function zero_value_for_split_uint8() -> ret\n            { ret := 0 }\n            /// @ast-id 73 @src 0:2129:2895  \"function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {...\"\n            function fun_tryRecover(var_hash, var_signature_mpos) -> var, var_1, var_2\n            {\n                /// @src 0:2210:2217  \"address\"\n                let zero_address := zero_value_for_split_address()\n                var := zero_address\n                /// @src 0:2219:2231  \"RecoverError\"\n                let zero_enum_RecoverError := zero_value_for_split_enum_RecoverError()\n                var_1 := zero_enum_RecoverError\n                /// @src 0:2233:2240  \"bytes32\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var_2 := zero_bytes32\n                /// @src 0:2256:2265  \"signature\"\n                let _195_mpos := var_signature_mpos\n                let expr_35_mpos := _195_mpos\n                /// @src 0:2256:2272  \"signature.length\"\n                let expr := array_length_bytes(expr_35_mpos)\n                /// @src 0:2276:2278  \"65\"\n                let expr_1 := 0x41\n                /// @src 0:2256:2278  \"signature.length == 65\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:2252:2889  \"if (signature.length == 65) {...\"\n                switch expr_2\n                case 0 {\n                    /// @src 0:2811:2812  \"0\"\n                    let expr_3 := 0x00\n                    /// @src 0:2803:2813  \"address(0)\"\n                    let expr_4 := convert_rational_by_to_address(expr_3)\n                    /// @src 0:2802:2878  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    let expr_component := expr_4\n                    /// @src 0:2815:2850  \"RecoverError.InvalidSignatureLength\"\n                    let expr_5 := 2\n                    /// @src 0:2802:2878  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    let expr_component_1 := expr_5\n                    /// @src 0:2860:2869  \"signature\"\n                    let _196_mpos := var_signature_mpos\n                    let expr_65_mpos := _196_mpos\n                    /// @src 0:2860:2876  \"signature.length\"\n                    let expr_6 := array_length_bytes(expr_65_mpos)\n                    /// @src 0:2852:2877  \"bytes32(signature.length)\"\n                    let expr_7 := convert_uint256_to_bytes32(expr_6)\n                    /// @src 0:2802:2878  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    let expr_component_2 := expr_7\n                    /// @src 0:2795:2878  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    var := expr_component\n                    var_1 := expr_component_1\n                    var_2 := expr_component_2\n                    leave\n                }\n                default /// @src 0:2252:2889  \"if (signature.length == 65) {...\"\n                {\n                    /// @src 0:2294:2303  \"bytes32 r\"\n                    let var_r\n                    let zero_bytes32_1 := zero_value_for_split_bytes32()\n                    var_r := zero_bytes32_1\n                    /// @src 0:2317:2326  \"bytes32 s\"\n                    let var_s\n                    let zero_bytes32_2 := zero_value_for_split_bytes32()\n                    var_s := zero_bytes32_2\n                    /// @src 0:2340:2347  \"uint8 v\"\n                    let var_v\n                    let zero_uint8 := zero_value_for_split_uint8()\n                    var_v := zero_uint8\n                    /// @src 0:2539:2719  \"assembly {...\"\n                    var_r := mload(add(var_signature_mpos, 0x20))\n                    var_s := mload(add(var_signature_mpos, 0x40))\n                    var_v := byte(0, mload(add(var_signature_mpos, 0x60)))\n                    /// @src 0:2750:2754  \"hash\"\n                    let _1 := var_hash\n                    let expr_8 := _1\n                    /// @src 0:2756:2757  \"v\"\n                    let _2 := var_v\n                    let expr_9 := _2\n                    /// @src 0:2759:2760  \"r\"\n                    let _3 := var_r\n                    let expr_10 := _3\n                    /// @src 0:2762:2763  \"s\"\n                    let _4 := var_s\n                    let expr_11 := _4\n                    /// @src 0:2739:2764  \"tryRecover(hash, v, r, s)\"\n                    let expr_54_component, expr_54_component_1, expr_54_component_2 := fun_tryRecover_261(expr_8, expr_9, expr_10, expr_11)\n                    /// @src 0:2732:2764  \"return tryRecover(hash, v, r, s)\"\n                    var := expr_54_component\n                    var_1 := expr_54_component_1\n                    var_2 := expr_54_component_2\n                    leave\n                }\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function panic_error_0x21()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x21)\n                revert(0, 0x24)\n            }\n            function validator_assert_enum_RecoverError(value)\n            {\n                if iszero(lt(value, 4)) { panic_error_0x21() }\n            }\n            function cleanup_enum_RecoverError(value) -> cleaned\n            {\n                cleaned := value\n                validator_assert_enum_RecoverError(value)\n            }\n            function convert_bytes32_to_uint256(value) -> converted\n            {\n                converted := convert_uint256_to_uint256(shift_right_0_unsigned(value))\n            }\n            /// @ast-id 346 @src 0:7196:7728  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n            function fun_throwError(var_error, var_errorArg)\n            {\n                /// @src 0:7282:7287  \"error\"\n                let _1 := var_error\n                let expr := _1\n                /// @src 0:7291:7311  \"RecoverError.NoError\"\n                let expr_1 := 0\n                /// @src 0:7282:7311  \"error == RecoverError.NoError\"\n                let expr_2 := eq(cleanup_enum_RecoverError(expr), cleanup_enum_RecoverError(expr_1))\n                /// @src 0:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                switch expr_2\n                case 0 {\n                    /// @src 0:7378:7383  \"error\"\n                    let _2 := var_error\n                    let expr_3 := _2\n                    /// @src 0:7387:7416  \"RecoverError.InvalidSignature\"\n                    let expr_4 := 1\n                    /// @src 0:7378:7416  \"error == RecoverError.InvalidSignature\"\n                    let expr_5 := eq(cleanup_enum_RecoverError(expr_3), cleanup_enum_RecoverError(expr_4))\n                    /// @src 0:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                    switch expr_5\n                    case 0 {\n                        /// @src 0:7483:7488  \"error\"\n                        let _3 := var_error\n                        let expr_6 := _3\n                        /// @src 0:7492:7527  \"RecoverError.InvalidSignatureLength\"\n                        let expr_7 := 2\n                        /// @src 0:7483:7527  \"error == RecoverError.InvalidSignatureLength\"\n                        let expr_8 := eq(cleanup_enum_RecoverError(expr_6), cleanup_enum_RecoverError(expr_7))\n                        /// @src 0:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        switch expr_8\n                        case 0 {\n                            /// @src 0:7617:7622  \"error\"\n                            let _4 := var_error\n                            let expr_9 := _4\n                            /// @src 0:7626:7656  \"RecoverError.InvalidSignatureS\"\n                            let expr_10 := 3\n                            /// @src 0:7617:7656  \"error == RecoverError.InvalidSignatureS\"\n                            let expr_11 := eq(cleanup_enum_RecoverError(expr_9), cleanup_enum_RecoverError(expr_10))\n                            /// @src 0:7613:7722  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                            if expr_11\n                            {\n                                /// @src 0:7702:7710  \"errorArg\"\n                                let _5 := var_errorArg\n                                let expr_12 := _5\n                                /// @src 0:7679:7711  \"ECDSAInvalidSignatureS(errorArg)\"\n                                let _6 := 0\n                                mstore(_6, shl(226, 0x35e2f383))\n                                let _7 := abi_encode_tuple_bytes32(add(_6, 4), expr_12)\n                                revert(_6, sub(_7, _6))\n                            }\n                        }\n                        default /// @src 0:7479:7722  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        {\n                            /// @src 0:7586:7594  \"errorArg\"\n                            let _8 := var_errorArg\n                            let expr_13 := _8\n                            /// @src 0:7578:7595  \"uint256(errorArg)\"\n                            let expr_14 := convert_bytes32_to_uint256(expr_13)\n                            /// @src 0:7550:7596  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            let _9 := 0\n                            mstore(_9, shl(224, 0xfce698f7))\n                            let _10 := abi_encode_uint256(add(_9, 4), expr_14)\n                            revert(_9, sub(_10, _9))\n                        }\n                    }\n                    default /// @src 0:7374:7722  \"if (error == RecoverError.InvalidSignature) {...\"\n                    {\n                        /// @src 0:7439:7462  \"ECDSAInvalidSignature()\"\n                        let _11 := 0\n                        mstore(_11, shl(224, 0xf645eedf))\n                        let _12 := abi_encode_tuple(add(_11, 4))\n                        revert(_11, sub(_12, _11))\n                    }\n                }\n                default /// @src 0:7278:7722  \"if (error == RecoverError.NoError) {...\"\n                {\n                    /// @src 0:7327:7334  \"return;\"\n                    leave\n                }\n            }\n            /// @src 1:1007:11487  \"contract ServiceEscrow {...\"\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            function cleanup_uint8(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function abi_encode_uint8(value, pos)\n            {\n                mstore(pos, cleanup_uint8(value))\n            }\n            function abi_encode_bytes32_uint8_bytes32_bytes32(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n                abi_encode_uint8(value1, add(headStart, 32))\n                abi_encode_bytes32_to_bytes32(value2, add(headStart, 64))\n                abi_encode_bytes32_to_bytes32(value3, add(headStart, 96))\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function convert_rational_by_to_bytes32(value) -> converted\n            {\n                converted := cleanup_bytes32(shift_left_0(cleanup_t_rational_by_1(value)))\n            }\n            /// @ast-id 261 @src 0:5140:6670  \"function tryRecover(...\"\n            function fun_tryRecover_261(var_hash, var_v, var_r, var_s) -> var, var_1, var_2\n            {\n                /// @src 0:5266:5273  \"address\"\n                let zero_address := zero_value_for_split_address()\n                var := zero_address\n                /// @src 0:5275:5287  \"RecoverError\"\n                let zero_t_enum_RecoverError := zero_value_for_split_enum_RecoverError()\n                var_1 := zero_t_enum_RecoverError\n                /// @src 0:5289:5296  \"bytes32\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var_2 := zero_bytes32\n                /// @src 0:6194:6195  \"s\"\n                let _1 := var_s\n                let expr := _1\n                /// @src 0:6186:6196  \"uint256(s)\"\n                let expr_1 := convert_bytes32_to_uint256(expr)\n                /// @src 0:6199:6265  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\"\n                let expr_2 := 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n                /// @src 0:6186:6265  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\"\n                let expr_3 := gt(cleanup_uint256(expr_1), convert_t_rational_by_to_t_uint256(expr_2))\n                /// @src 0:6182:6346  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                if expr_3\n                {\n                    /// @src 0:6297:6298  \"0\"\n                    let expr_4 := 0x00\n                    /// @src 0:6289:6299  \"address(0)\"\n                    let expr_5 := convert_rational_by_to_address(expr_4)\n                    /// @src 0:6288:6335  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                    let expr_component := expr_5\n                    /// @src 0:6301:6331  \"RecoverError.InvalidSignatureS\"\n                    let expr_6 := 3\n                    /// @src 0:6288:6335  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                    let expr_218_component := expr_6\n                    /// @src 0:6333:6334  \"s\"\n                    let _2 := var_s\n                    let expr_7 := _2\n                    /// @src 0:6288:6335  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                    let expr_218_component_1 := expr_7\n                    /// @src 0:6281:6335  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var := expr_component\n                    var_1 := expr_218_component\n                    var_2 := expr_218_component_1\n                    leave\n                }\n                /// @src 0:6467:6471  \"hash\"\n                let _3 := var_hash\n                let expr_8 := _3\n                /// @src 0:6473:6474  \"v\"\n                let _4 := var_v\n                let expr_9 := _4\n                /// @src 0:6476:6477  \"r\"\n                let _5 := var_r\n                let expr_10 := _5\n                /// @src 0:6479:6480  \"s\"\n                let _6 := var_s\n                let expr_11 := _6\n                /// @src 0:6457:6481  \"ecrecover(hash, v, r, s)\"\n                let _7 := allocate_unbounded()\n                let _8 := abi_encode_bytes32_uint8_bytes32_bytes32(_7, expr_8, expr_9, expr_10, expr_11)\n                mstore(0, 0)\n                let _9 := staticcall(gas(), 1, _7, sub(_8, _7), 0, 32)\n                if iszero(_9) { revert_forward() }\n                let expr_12 := shift_left_0(mload(0))\n                /// @src 0:6440:6481  \"address signer = ecrecover(hash, v, r, s)\"\n                let var_signer := expr_12\n                /// @src 0:6495:6501  \"signer\"\n                let _10 := var_signer\n                let expr_13 := _10\n                /// @src 0:6513:6514  \"0\"\n                let expr_14 := 0x00\n                /// @src 0:6505:6515  \"address(0)\"\n                let expr_15 := convert_rational_by_to_address(expr_14)\n                /// @src 0:6495:6515  \"signer == address(0)\"\n                let expr_16 := eq(cleanup_address(expr_13), cleanup_address(expr_15))\n                /// @src 0:6491:6604  \"if (signer == address(0)) {...\"\n                if expr_16\n                {\n                    /// @src 0:6547:6548  \"0\"\n                    let expr_17 := 0x00\n                    /// @src 0:6539:6549  \"address(0)\"\n                    let expr_18 := convert_rational_by_to_address(expr_17)\n                    /// @src 0:6538:6593  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    let expr_247_component := expr_18\n                    /// @src 0:6551:6580  \"RecoverError.InvalidSignature\"\n                    let expr_19 := 1\n                    /// @src 0:6538:6593  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    let expr_247_component_1 := expr_19\n                    /// @src 0:6590:6591  \"0\"\n                    let expr_20 := 0x00\n                    /// @src 0:6582:6592  \"bytes32(0)\"\n                    let expr_21 := convert_rational_by_to_bytes32(expr_20)\n                    /// @src 0:6538:6593  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    let expr_247_component_2 := expr_21\n                    /// @src 0:6531:6593  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var := expr_247_component\n                    var_1 := expr_247_component_1\n                    var_2 := expr_247_component_2\n                    leave\n                }\n                /// @src 0:6622:6628  \"signer\"\n                let _11 := var_signer\n                let expr_22 := _11\n                /// @src 0:6621:6663  \"(signer, RecoverError.NoError, bytes32(0))\"\n                let expr_258_component := expr_22\n                /// @src 0:6630:6650  \"RecoverError.NoError\"\n                let expr_23 := 0\n                /// @src 0:6621:6663  \"(signer, RecoverError.NoError, bytes32(0))\"\n                let expr_258_component_1 := expr_23\n                /// @src 0:6660:6661  \"0\"\n                let expr_24 := 0x00\n                /// @src 0:6652:6662  \"bytes32(0)\"\n                let expr_25 := convert_rational_by_to_bytes32(expr_24)\n                /// @src 0:6621:6663  \"(signer, RecoverError.NoError, bytes32(0))\"\n                let expr_258_component_2 := expr_25\n                /// @src 0:6614:6663  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                var := expr_258_component\n                var_1 := expr_258_component_1\n                var_2 := expr_258_component_2\n                leave\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220c4317320fd0c5cb30c5e46fca5aabf974a6e34d2237b5c9aa11a67ce66c3134064736f6c634300081c0033\"\n    }\n}\n",
					"hash": "f9e96d0a8f1b951989586b46be771709505f61e51ea89525fb413a47f8410a35",
					"factoryDependencies": {}
				}
			},
			"SignatureVerifier.sol": {
				"SignatureVerifier": {
					"abi": [],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"SignatureVerifier.sol\":\"SignatureVerifier\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"SignatureVerifier.sol\":{\"keccak256\":\"0xc1d30621557da515270569c4b5ee5abed3c1266b4ea44ad0ce6bd2f7eff30f29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://30d2453fb9dc02e392a8243a577d39357d4f253661c6f02f845b9051bea4037a\",\"dweb:/ipfs/QmXb4TDEWAXwTHi3awHes3XEWEXMwTwbHHY5rh3rephNuh\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 4/65584 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 462\n// Code size = 1356 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20004]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20004] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 [@dyn 1] (gas: 71)\n    64: a1 = reverse s1\n    66: a2 = reverse s0\n    68: a3 = u64 [sp]\n    70: a3 = reverse a3\n    72: a4 = u64 [sp + 0x8]\n    75: a4 = reverse a4\n    77: u8 [a0 + 0x18] = a4\n    80: u8 [a0 + 0x10] = a3\n    83: u8 [a0 + 0x8] = a2\n    86: u8 [a0] = a1\n    88: a5 = a4 >> 0x38\n    91: u8 [a0 + 0x1f] = a5\n    94: a5 = a4 >> 0x30\n    97: u8 [a0 + 0x1e] = a5\n   100: a5 = a4 >> 0x28\n   103: u8 [a0 + 0x1d] = a5\n   106: a5 = a4 >> 0x20\n   109: u8 [a0 + 0x1c] = a5\n   112: a5 = a4 >> 0x18\n   115: u8 [a0 + 0x1b] = a5\n   118: a5 = a4 >> 0x10\n   121: u8 [a0 + 0x1a] = a5\n   124: a4 = a4 >> 0x8\n   127: u8 [a0 + 0x19] = a4\n   130: a4 = a3 >> 0x38\n   133: u8 [a0 + 0x17] = a4\n   136: a4 = a3 >> 0x30\n   139: u8 [a0 + 0x16] = a4\n   142: a4 = a3 >> 0x28\n   145: u8 [a0 + 0x15] = a4\n   148: a4 = a3 >> 0x20\n   151: u8 [a0 + 0x14] = a4\n   154: a4 = a3 >> 0x18\n   157: u8 [a0 + 0x13] = a4\n   160: a4 = a3 >> 0x10\n   163: u8 [a0 + 0x12] = a4\n   166: a3 = a3 >> 0x8\n   169: u8 [a0 + 0x11] = a3\n   172: a3 = a2 >> 0x38\n   175: u8 [a0 + 0xf] = a3\n   178: a3 = a2 >> 0x30\n   181: u8 [a0 + 0xe] = a3\n   184: a3 = a2 >> 0x28\n   187: u8 [a0 + 0xd] = a3\n   190: a3 = a2 >> 0x20\n   193: u8 [a0 + 0xc] = a3\n   196: a3 = a2 >> 0x18\n   199: u8 [a0 + 0xb] = a3\n   202: a3 = a2 >> 0x10\n   205: u8 [a0 + 0xa] = a3\n   208: a2 = a2 >> 0x8\n   211: u8 [a0 + 0x9] = a2\n   214: a2 = a1 >> 0x38\n   217: u8 [a0 + 0x7] = a2\n   220: a2 = a1 >> 0x30\n   223: u8 [a0 + 0x6] = a2\n   226: a2 = a1 >> 0x28\n   229: u8 [a0 + 0x5] = a2\n   232: a2 = a1 >> 0x20\n   235: u8 [a0 + 0x4] = a2\n   238: a2 = a1 >> 0x18\n   241: u8 [a0 + 0x3] = a2\n   244: a2 = a1 >> 0x10\n   247: u8 [a0 + 0x2] = a2\n   250: a1 = a1 >> 0x8\n   253: u8 [a0 + 0x1] = a1\n   256: ra = u64 [sp + 0x20]\n   259: s0 = u64 [sp + 0x18]\n   262: s1 = u64 [sp + 0x10]\n   265: sp = sp + 0x28\n   268: ret\n      : @9 (gas: 6)\n   270: sp = sp + 0xfffffffffffffff0\n   273: u64 [sp + 0x8] = ra\n   276: u64 [sp] = s0\n   278: s0 = a0 & 0x1\n   281: ecalli 2 // 'call_data_size'\n   283: fallthrough\n      : @10 (gas: 2)\n   284: u32 [0x20008] = a0\n   289: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   292: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   296: ra = 6, jump @27\n      : @13 [@dyn 3] (gas: 9)\n   301: sp = sp + 0xffffffffffffffa0\n   304: u64 [sp + 0x58] = ra\n   307: u64 [sp + 0x50] = s0\n   310: u64 [sp + 0x48] = s1\n   313: s0 = sp + 0x60\n   316: sp = sp & 0xffffffffffffffe0\n   319: a0 = 0x40\n   322: a1 = 0x20\n   325: ra = 8, jump @0\n      : @14 [@dyn 4] (gas: 39)\n   330: u8 [a0 + 31] = 0x80\n   335: u8 [a0 + 30] = 0\n   338: u8 [a0 + 29] = 0\n   341: u8 [a0 + 28] = 0\n   344: u8 [a0 + 27] = 0\n   347: u8 [a0 + 26] = 0\n   350: u8 [a0 + 25] = 0\n   353: u8 [a0 + 24] = 0\n   356: u8 [a0 + 23] = 0\n   359: u8 [a0 + 22] = 0\n   362: u8 [a0 + 21] = 0\n   365: u8 [a0 + 20] = 0\n   368: u8 [a0 + 19] = 0\n   371: u8 [a0 + 18] = 0\n   374: u8 [a0 + 17] = 0\n   377: u8 [a0 + 16] = 0\n   380: u8 [a0 + 15] = 0\n   383: u8 [a0 + 14] = 0\n   386: u8 [a0 + 13] = 0\n   389: u8 [a0 + 12] = 0\n   392: u8 [a0 + 11] = 0\n   395: u8 [a0 + 10] = 0\n   398: u8 [a0 + 9] = 0\n   401: u8 [a0 + 8] = 0\n   404: u8 [a0 + 7] = 0\n   407: u8 [a0 + 6] = 0\n   410: u8 [a0 + 5] = 0\n   413: u8 [a0 + 4] = 0\n   416: u8 [a0 + 3] = 0\n   419: u8 [a0 + 2] = 0\n   422: u8 [a0 + 1] = 0\n   425: u8 [a0 + 0] = 0\n   427: u64 [sp + 24] = 0\n   430: u64 [sp + 0] = 0\n   432: u64 [sp + 8] = 0\n   435: u64 [sp + 16] = 0\n   438: i32 a0 = sp + 0\n   440: ecalli 5 // 'value_transferred'\n   442: fallthrough\n      : @15 (gas: 8)\n   443: a0 = u64 [sp + 0x10]\n   446: a1 = u64 [sp + 0x18]\n   449: a2 = u64 [sp + 0x8]\n   452: a3 = u64 [sp]\n   454: a1 = a1 | a2\n   457: a0 = a0 | a3\n   460: a0 = a0 | a1\n   463: jump @19 if a0 != 0\n      : @16 (gas: 3)\n   467: a0 = 0x40\n   470: a1 = 0x20\n   473: ra = 10, jump @0\n      : @17 [@dyn 5] (gas: 100)\n   478: a1 = u8 [a0 + 0x11]\n   481: a2 = u8 [a0 + 0x10]\n   484: a3 = u8 [a0 + 0x12]\n   487: a4 = u8 [a0 + 0x13]\n   490: a1 = a1 << 0x8\n   493: a1 = a1 | a2\n   496: a3 = a3 << 0x10\n   499: a4 = a4 << 0x18\n   502: a3 = a3 | a4\n   505: a1 = a1 | a3\n   508: a2 = u8 [a0 + 0x15]\n   511: a3 = u8 [a0 + 0x14]\n   514: a4 = u8 [a0 + 0x16]\n   517: a5 = u8 [a0 + 0x17]\n   520: a2 = a2 << 0x8\n   523: a2 = a2 | a3\n   526: a4 = a4 << 0x10\n   529: a5 = a5 << 0x18\n   532: a4 = a4 | a5\n   535: a2 = a2 | a4\n   538: a2 = a2 << 0x20\n   541: t0 = a2 | a1\n   544: a2 = u8 [a0 + 0x1]\n   547: a3 = u8 [a0]\n   549: a4 = u8 [a0 + 0x2]\n   552: a5 = u8 [a0 + 0x3]\n   555: a2 = a2 << 0x8\n   558: a2 = a2 | a3\n   561: a4 = a4 << 0x10\n   564: a5 = a5 << 0x18\n   567: a4 = a4 | a5\n   570: a2 = a2 | a4\n   573: a3 = u8 [a0 + 0x5]\n   576: a4 = u8 [a0 + 0x4]\n   579: a5 = u8 [a0 + 0x6]\n   582: s1 = u8 [a0 + 0x7]\n   585: a3 = a3 << 0x8\n   588: a3 = a3 | a4\n   591: a5 = a5 << 0x10\n   594: s1 = s1 << 0x18\n   597: a5 = a5 | s1\n   600: a3 = a3 | a5\n   603: a3 = a3 << 0x20\n   606: a2 = a2 | a3\n   609: a3 = u8 [a0 + 0x19]\n   612: a4 = u8 [a0 + 0x18]\n   615: a5 = u8 [a0 + 0x1a]\n   618: s1 = u8 [a0 + 0x1b]\n   621: a3 = a3 << 0x8\n   624: a3 = a3 | a4\n   627: a5 = a5 << 0x10\n   630: s1 = s1 << 0x18\n   633: a5 = a5 | s1\n   636: a3 = a3 | a5\n   639: a4 = u8 [a0 + 0x1d]\n   642: a5 = u8 [a0 + 0x1c]\n   645: s1 = u8 [a0 + 0x1e]\n   648: a1 = u8 [a0 + 0x1f]\n   651: a4 = a4 << 0x8\n   654: a4 = a4 | a5\n   657: s1 = s1 << 0x10\n   660: a1 = a1 << 0x18\n   663: a1 = a1 | s1\n   666: a1 = a1 | a4\n   669: a1 = a1 << 0x20\n   672: a3 = a3 | a1\n   675: a1 = u8 [a0 + 0x9]\n   678: a4 = u8 [a0 + 0x8]\n   681: a5 = u8 [a0 + 0xa]\n   684: s1 = u8 [a0 + 0xb]\n   687: a1 = a1 << 0x8\n   690: a1 = a1 | a4\n   693: a5 = a5 << 0x10\n   696: s1 = s1 << 0x18\n   699: a5 = a5 | s1\n   702: a1 = a1 | a5\n   705: a4 = u8 [a0 + 0xd]\n   708: a5 = u8 [a0 + 0xc]\n   711: s1 = u8 [a0 + 0xe]\n   714: a0 = u8 [a0 + 0xf]\n   717: a4 = a4 << 0x8\n   720: a4 = a4 | a5\n   723: s1 = s1 << 0x10\n   726: a0 = a0 << 0x18\n   729: a0 = a0 | s1\n   732: a0 = a0 | a4\n   735: a0 = a0 << 0x20\n   738: a0 = a0 | a1\n   741: a0 = reverse a0\n   743: s1 = reverse a3\n   745: a1 = reverse a2\n   747: a2 = reverse t0\n   749: a1 = a1 | a2\n   752: a2 = s1 | a0\n   755: a2 = a2 | a1\n   758: a2 = a2 >> 0x20\n   761: a0 = a0 | a1\n   764: a0 = a0 << 0x20\n   767: a0 = a0 | a2\n   770: jump @21 if a0 == 0\n      : @18 (gas: 1)\n   773: trap\n      : @19 (gas: 3)\n   774: a0 = 0\n   776: a1 = 0\n   778: ra = 12, jump @0\n      : @20 [@dyn 6] (gas: 5)\n   783: i32 a1 = a0 + 0\n   785: a0 = 0x1\n   788: a2 = 0\n   790: ecalli 3 // 'seal_return'\n   792: fallthrough\n      : @21 (gas: 4)\n   793: i32 s1 = s1 + 0\n   795: a0 = s1\n   797: a1 = 0\n   799: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 7)\n   804: i32 a0 = a0 + 0\n   806: a1 = 0\n   808: a2 = 0\n   810: ecalli 1 // 'call_data_copy'\n   812: i32 a0 = sp + 0x20\n   815: ecalli 0 // 'address'\n   816: fallthrough\n      : @23 (gas: 21)\n   817: a0 = u64 [sp + 0x28]\n   820: a1 = i32 [sp + 0x30]\n   823: a2 = u64 [sp + 0x20]\n   826: a0 = reverse a0\n   828: a3 = a0 << 0x20\n   831: a1 = reverse a1\n   833: a1 = a1 >> 0x20\n   836: a3 = a3 | a1\n   839: a1 = a0 >> 0x20\n   842: a2 = reverse a2\n   844: a4 = a2 << 0x20\n   847: a5 = 0x20000\n   852: a0 = 0x30010\n   857: a4 = a4 | a1\n   860: a2 = a2 >> 0x20\n   863: a1 = i32 [0x20000]\n   868: u64 [0x30020] = a2\n   873: u64 [0x30028] = 0\n   878: u64 [0x30018] = a4\n   883: u64 [0x30010] = a3\n   888: jump @25 if a1 == 0\n      : @24 (gas: 3)\n   891: i32 a0 = a0 + 0\n   893: ecalli 4 // 'set_immutable_data'\n   895: fallthrough\n      : @25 (gas: 3)\n   896: a0 = s1\n   898: a1 = 0\n   900: ra = 16, jump @0\n      : @26 [@dyn 8] (gas: 6)\n   905: i32 a1 = a0 + 0\n   907: a0 = 0\n   909: a2 = 0\n   911: ra = 0x12\n   914: ecalli 3 // 'seal_return'\n   916: fallthrough\n      : @27 [@dyn 9] (gas: 25)\n   917: sp = sp + 0xffffffffffffffd0\n   920: u64 [sp + 0x28] = ra\n   923: u64 [sp + 0x20] = s0\n   926: s0 = sp + 0x30\n   929: sp = sp & 0xfffffffffffffff0\n   932: u64 [sp + 24] = 0\n   935: u64 [sp + 16] = 0\n   938: u64 [sp + 0] = 0x80\n   942: a1 = sp\n   944: u64 [sp + 8] = 0\n   947: ra = 0x14\n   950: sp = sp + 0xffffffffffffffd8\n   953: u64 [sp + 0x20] = ra\n   956: u64 [sp + 0x18] = s0\n   959: u64 [sp + 0x10] = s1\n   962: a2 = u64 [a1]\n   964: u64 [sp + 0x8] = a2\n   967: a2 = u64 [a1 + 0x8]\n   970: u64 [sp] = a2\n   972: s0 = u64 [a1 + 0x10]\n   975: s1 = u64 [a1 + 0x18]\n   978: a0 = 0x40\n   981: a1 = 0x20\n   984: ra = 0x2\n   987: jump @0\n      : @28 [@dyn 10] (gas: 1)\n   990: ra = 22, jump @31\n      : @29 [@dyn 11] (gas: 7)\n   995: sp = sp + 0xfffffffffffffff0\n   998: u64 [sp + 0x8] = ra\n  1001: u64 [sp] = s0\n  1003: s0 = a0\n  1005: a0 = 0x40\n  1008: a1 = 0x20\n  1011: ra = 24, jump @0\n      : @30 [@dyn 12] (gas: 100)\n  1016: a1 = u8 [a0 + 0x1]\n  1019: a2 = u8 [a0]\n  1021: a3 = u8 [a0 + 0x2]\n  1024: a4 = u8 [a0 + 0x3]\n  1027: a1 = a1 << 0x8\n  1030: a1 = a1 | a2\n  1033: a3 = a3 << 0x10\n  1036: a4 = a4 << 0x18\n  1039: a3 = a3 | a4\n  1042: a1 = a1 | a3\n  1045: a2 = u8 [a0 + 0x5]\n  1048: a3 = u8 [a0 + 0x4]\n  1051: a4 = u8 [a0 + 0x6]\n  1054: a5 = u8 [a0 + 0x7]\n  1057: a2 = a2 << 0x8\n  1060: a2 = a2 | a3\n  1063: a4 = a4 << 0x10\n  1066: a5 = a5 << 0x18\n  1069: a4 = a4 | a5\n  1072: a2 = a2 | a4\n  1075: a2 = a2 << 0x20\n  1078: t0 = a2 | a1\n  1081: a2 = u8 [a0 + 0x9]\n  1084: a3 = u8 [a0 + 0x8]\n  1087: a4 = u8 [a0 + 0xa]\n  1090: a5 = u8 [a0 + 0xb]\n  1093: a2 = a2 << 0x8\n  1096: a2 = a2 | a3\n  1099: a4 = a4 << 0x10\n  1102: a5 = a5 << 0x18\n  1105: a4 = a4 | a5\n  1108: a2 = a2 | a4\n  1111: a3 = u8 [a0 + 0xd]\n  1114: a4 = u8 [a0 + 0xc]\n  1117: a5 = u8 [a0 + 0xe]\n  1120: a1 = u8 [a0 + 0xf]\n  1123: a3 = a3 << 0x8\n  1126: a3 = a3 | a4\n  1129: a5 = a5 << 0x10\n  1132: a1 = a1 << 0x18\n  1135: a1 = a1 | a5\n  1138: a1 = a1 | a3\n  1141: a1 = a1 << 0x20\n  1144: t1 = a1 | a2\n  1147: a1 = u8 [a0 + 0x11]\n  1150: a3 = u8 [a0 + 0x10]\n  1153: a4 = u8 [a0 + 0x12]\n  1156: a5 = u8 [a0 + 0x13]\n  1159: a1 = a1 << 0x8\n  1162: a1 = a1 | a3\n  1165: a4 = a4 << 0x10\n  1168: a5 = a5 << 0x18\n  1171: a4 = a4 | a5\n  1174: a1 = a1 | a4\n  1177: a3 = u8 [a0 + 0x15]\n  1180: a4 = u8 [a0 + 0x14]\n  1183: a5 = u8 [a0 + 0x16]\n  1186: a2 = u8 [a0 + 0x17]\n  1189: a3 = a3 << 0x8\n  1192: a3 = a3 | a4\n  1195: a5 = a5 << 0x10\n  1198: a2 = a2 << 0x18\n  1201: a2 = a2 | a5\n  1204: a2 = a2 | a3\n  1207: a2 = a2 << 0x20\n  1210: a3 = a2 | a1\n  1213: a1 = u8 [a0 + 0x19]\n  1216: a2 = u8 [a0 + 0x18]\n  1219: a4 = u8 [a0 + 0x1a]\n  1222: a5 = u8 [a0 + 0x1b]\n  1225: a1 = a1 << 0x8\n  1228: a1 = a1 | a2\n  1231: a4 = a4 << 0x10\n  1234: a5 = a5 << 0x18\n  1237: a4 = a4 | a5\n  1240: a1 = a1 | a4\n  1243: a2 = u8 [a0 + 0x1d]\n  1246: a4 = u8 [a0 + 0x1c]\n  1249: a5 = u8 [a0 + 0x1e]\n  1252: a0 = u8 [a0 + 0x1f]\n  1255: a2 = a2 << 0x8\n  1258: a2 = a2 | a4\n  1261: a5 = a5 << 0x10\n  1264: a0 = a0 << 0x18\n  1267: a0 = a0 | a5\n  1270: a0 = a0 | a2\n  1273: a0 = a0 << 0x20\n  1276: a0 = a0 | a1\n  1279: a0 = reverse a0\n  1281: a1 = reverse a3\n  1283: a2 = reverse t1\n  1285: a3 = reverse t0\n  1287: u64 [s0 + 0x18] = a3\n  1290: u64 [s0 + 0x10] = a2\n  1293: u64 [s0 + 0x8] = a1\n  1296: u64 [s0] = a0\n  1298: ra = u64 [sp + 0x8]\n  1301: s0 = u64 [sp]\n  1303: sp = sp + 0x10\n  1306: ret\n      : @31 (gas: 5)\n  1308: sp = sp + 0xfffffffffffffff8\n  1311: u64 [sp] = ra\n  1313: a0 = 0\n  1315: a1 = 0\n  1317: ra = 26, jump @0\n      : @32 [@dyn 13] (gas: 7)\n  1322: i32 a1 = a0 + 0\n  1324: a0 = 0x1\n  1327: a2 = 0\n  1329: ecalli 3 // 'seal_return'\n  1331: a0 = 0\n  1333: ra = 0x1c\n  1336: jump @9\n      : @33 [export #0: 'call'] (gas: 2)\n  1339: a0 = 0\n  1341: ra = 28, jump @9\n      : @34 [@dyn 14] [export #1: 'deploy'] (gas: 2)\n  1346: a0 = 0x1\n  1349: ra = 30, jump @9\n      : @35 [@dyn 15] (gas: 1)\n  1354: jump @31\n",
						"bytecode": {
							"object": "50564d0000b706000000000000010700c13000c00040030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102853b0463616c6c8542066465706c6f790686180f02854c400028012d014a01de010f03240389039503de03e303f8032a0542054a058b791052093b3309010001ae9833c8780883881f8488e0553801000128390a040002ae8a123d080400023308100002c8870732003308100002c88707320000006f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a02013d07080002510507501004095010066d029511a07b10587b15507b16489515608411e0330740330820501008bbfe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a0501821710821818821908821ad49808d4a707d487075207370133074033082050100a27fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cf6fc837833070133090a030183666467330850100ee1fc8377330833090a018317200a018217288118308219206f77977a206f88988820d48a0a9878206f99979b20330c0000023307100003d48b0b98992039080000023e0920000321032800033e0b1800033e0a10000351080883770a0401646733085010107cfc8378330733093300120a03019511d07b10287b15209515308411f04911184911104901800064184911083300149511d87b10207b15187b161082897b19088289087b198285108286183307403308203300022825fc5010163e019511f07b10087b1564753307403308205010180dfc7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511f87b103307330850101adbfa837833070133090a03330733001c28d6fb330750101cd1fb33070150101ec9fb28d249489220248414d25529494992244992244992244992244992244992244992244952521a12214992248424499224499224499224494a494d529248429224499224499224294992244992244992244992244992244992244992244992a42a4992648552ab5095939492941092104208a915aa34499244499294942449482a09294992244992244992244992244992244992244992244992244992244992244992aa24a5942a942a29240400"
						},
						"deployedBytecode": {
							"object": "50564d0000b706000000000000010700c13000c00040030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102853b0463616c6c8542066465706c6f790686180f02854c400028012d014a01de010f03240389039503de03e303f8032a0542054a058b791052093b3309010001ae9833c8780883881f8488e0553801000128390a040002ae8a123d080400023308100002c8870732003308100002c88707320000006f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a02013d07080002510507501004095010066d029511a07b10587b15507b16489515608411e0330740330820501008bbfe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a0501821710821818821908821ad49808d4a707d487075207370133074033082050100a27fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cf6fc837833070133090a030183666467330850100ee1fc8377330833090a018317200a018217288118308219206f77977a206f88988820d48a0a9878206f99979b20330c0000023307100003d48b0b98992039080000023e0920000321032800033e0b1800033e0a10000351080883770a0401646733085010107cfc8378330733093300120a03019511d07b10287b15209515308411f04911184911104901800064184911083300149511d87b10207b15187b161082897b19088289087b198285108286183307403308203300022825fc5010163e019511f07b10087b1564753307403308205010180dfc7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511f87b103307330850101adbfa837833070133090a03330733001c28d6fb330750101cd1fb33070150101ec9fb28d249489220248414d25529494992244992244992244992244992244992244992244952521a12214992248424499224499224499224494a494d529248429224499224499224294992244992244992244992244992244992244992244992a42a4992648552ab5095939492941092104208a915aa34499244499294942449482a09294992244992244992244992244992244992244992244992244992244992244992aa24a5942a942a29240400"
						},
						"methodIdentifiers": {}
					},
					"irOptimized": "/// @use-src 2:\"SignatureVerifier.sol\"\nobject \"SignatureVerifier_1627\" {\n    code {\n        {\n            /// @src 2:80:1895  \"library SignatureVerifier {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"SignatureVerifier_1627_deployed\"), datasize(\"SignatureVerifier_1627_deployed\"))\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, datasize(\"SignatureVerifier_1627_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 2:\"SignatureVerifier.sol\"\n    object \"SignatureVerifier_1627_deployed\" {\n        code {\n            {\n                /// @src 2:80:1895  \"library SignatureVerifier {...\"\n                mstore(64, memoryguard(0x80))\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n        }\n        data \".metadata\" hex\"a2646970667358221220597230c1c868f4dde5dccdf82222bcf190abb0e6e02879eef8f9dc88f6da91aa64736f6c634300081c0033\"\n    }\n}\n",
					"hash": "fab3d82f9929e7670e2b5da35abe1f8496614c48168bb74d24f035eb11c39480",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"ECDSA.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							347
						]
					},
					"id": 348,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:0",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 347,
							"linearizedBaseContracts": [
								347
							],
							"name": "ECDSA",
							"nameLocation": "352:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 7,
									"members": [
										{
											"id": 3,
											"name": "NoError",
											"nameLocation": "392:7:0",
											"nodeType": "EnumValue",
											"src": "392:7:0"
										},
										{
											"id": 4,
											"name": "InvalidSignature",
											"nameLocation": "409:16:0",
											"nodeType": "EnumValue",
											"src": "409:16:0"
										},
										{
											"id": 5,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:0",
											"nodeType": "EnumValue",
											"src": "435:22:0"
										},
										{
											"id": 6,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:0",
											"nodeType": "EnumValue",
											"src": "467:17:0"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:0",
									"nodeType": "EnumDefinition",
									"src": "364:126:0"
								},
								{
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:0",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 10,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:0"
									},
									"src": "564:30:0"
								},
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:0",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 15,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "699:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:0"
									},
									"src": "665:50:0"
								},
								{
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:0",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 20,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "840:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 17,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:0"
									},
									"src": "811:40:0"
								},
								{
									"body": {
										"id": 72,
										"nodeType": "Block",
										"src": "2242:653:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 35,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 25,
															"src": "2256:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 36,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2266:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2256:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 37,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2276:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2256:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 70,
													"nodeType": "Block",
													"src": "2781:108:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 59,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2811:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 58,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2803:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 57,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2803:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 60,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2803:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 61,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 7,
																			"src": "2815:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 62,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2828:22:0",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 5,
																		"src": "2815:35:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$7",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 65,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 25,
																					"src": "2860:9:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 66,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2870:6:0",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2860:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 64,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2852:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 63,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2852:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 67,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2852:25:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 68,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2802:76:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 34,
															"id": 69,
															"nodeType": "Return",
															"src": "2795:83:0"
														}
													]
												},
												"id": 71,
												"nodeType": "IfStatement",
												"src": "2252:637:0",
												"trueBody": {
													"id": 56,
													"nodeType": "Block",
													"src": "2280:495:0",
													"statements": [
														{
															"assignments": [
																40
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 40,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2302:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 56,
																	"src": "2294:9:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 39,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2294:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 41,
															"nodeType": "VariableDeclarationStatement",
															"src": "2294:9:0"
														},
														{
															"assignments": [
																43
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 43,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2325:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 56,
																	"src": "2317:9:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 42,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2317:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 44,
															"nodeType": "VariableDeclarationStatement",
															"src": "2317:9:0"
														},
														{
															"assignments": [
																46
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 46,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2346:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 56,
																	"src": "2340:7:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 45,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2340:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 47,
															"nodeType": "VariableDeclarationStatement",
															"src": "2340:7:0"
														},
														{
															"AST": {
																"nativeSrc": "2548:171:0",
																"nodeType": "YulBlock",
																"src": "2548:171:0",
																"statements": [
																	{
																		"nativeSrc": "2566:32:0",
																		"nodeType": "YulAssignment",
																		"src": "2566:32:0",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2581:9:0",
																							"nodeType": "YulIdentifier",
																							"src": "2581:9:0"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2592:4:0",
																							"nodeType": "YulLiteral",
																							"src": "2592:4:0",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2577:3:0",
																						"nodeType": "YulIdentifier",
																						"src": "2577:3:0"
																					},
																					"nativeSrc": "2577:20:0",
																					"nodeType": "YulFunctionCall",
																					"src": "2577:20:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2571:5:0",
																				"nodeType": "YulIdentifier",
																				"src": "2571:5:0"
																			},
																			"nativeSrc": "2571:27:0",
																			"nodeType": "YulFunctionCall",
																			"src": "2571:27:0"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2566:1:0",
																				"nodeType": "YulIdentifier",
																				"src": "2566:1:0"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2615:32:0",
																		"nodeType": "YulAssignment",
																		"src": "2615:32:0",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2630:9:0",
																							"nodeType": "YulIdentifier",
																							"src": "2630:9:0"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2641:4:0",
																							"nodeType": "YulLiteral",
																							"src": "2641:4:0",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2626:3:0",
																						"nodeType": "YulIdentifier",
																						"src": "2626:3:0"
																					},
																					"nativeSrc": "2626:20:0",
																					"nodeType": "YulFunctionCall",
																					"src": "2626:20:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2620:5:0",
																				"nodeType": "YulIdentifier",
																				"src": "2620:5:0"
																			},
																			"nativeSrc": "2620:27:0",
																			"nodeType": "YulFunctionCall",
																			"src": "2620:27:0"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2615:1:0",
																				"nodeType": "YulIdentifier",
																				"src": "2615:1:0"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2664:41:0",
																		"nodeType": "YulAssignment",
																		"src": "2664:41:0",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2674:1:0",
																					"nodeType": "YulLiteral",
																					"src": "2674:1:0",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2687:9:0",
																									"nodeType": "YulIdentifier",
																									"src": "2687:9:0"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2698:4:0",
																									"nodeType": "YulLiteral",
																									"src": "2698:4:0",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2683:3:0",
																								"nodeType": "YulIdentifier",
																								"src": "2683:3:0"
																							},
																							"nativeSrc": "2683:20:0",
																							"nodeType": "YulFunctionCall",
																							"src": "2683:20:0"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2677:5:0",
																						"nodeType": "YulIdentifier",
																						"src": "2677:5:0"
																					},
																					"nativeSrc": "2677:27:0",
																					"nodeType": "YulFunctionCall",
																					"src": "2677:27:0"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2669:4:0",
																				"nodeType": "YulIdentifier",
																				"src": "2669:4:0"
																			},
																			"nativeSrc": "2669:36:0",
																			"nodeType": "YulFunctionCall",
																			"src": "2669:36:0"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2664:1:0",
																				"nodeType": "YulIdentifier",
																				"src": "2664:1:0"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 40,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2566:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 43,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2615:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 25,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2581:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 25,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2630:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 25,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2687:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 46,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2664:1:0",
																	"valueSize": 1
																}
															],
															"id": 48,
															"nodeType": "InlineAssembly",
															"src": "2539:180:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 50,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 23,
																		"src": "2750:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 51,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 46,
																		"src": "2756:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 52,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 40,
																		"src": "2759:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 53,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 43,
																		"src": "2762:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 49,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		73,
																		153,
																		261
																	],
																	"referencedDeclaration": 261,
																	"src": "2739:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2739:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 34,
															"id": 55,
															"nodeType": "Return",
															"src": "2732:32:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:0",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 73,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2157:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2149:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 22,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2176:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2163:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 24,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2163:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:38:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2210:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2219:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$7",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 30,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 29,
														"name": "RecoverError",
														"nameLocations": [
															"2219:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 7,
														"src": "2219:12:0"
													},
													"referencedDeclaration": 7,
													"src": "2219:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2233:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 32,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:32:0"
									},
									"scope": 347,
									"src": "2129:766:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "3789:168:0",
										"statements": [
											{
												"assignments": [
													84,
													87,
													89
												],
												"declarations": [
													{
														"constant": false,
														"id": 84,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3808:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "3800:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 83,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3800:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 87,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3832:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "3819:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 86,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 85,
																"name": "RecoverError",
																"nameLocations": [
																	"3819:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 7,
																"src": "3819:12:0"
															},
															"referencedDeclaration": 7,
															"src": "3819:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 89,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3847:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "3839:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 88,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3839:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 94,
												"initialValue": {
													"arguments": [
														{
															"id": 91,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "3870:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 92,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 78,
															"src": "3876:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 90,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															73,
															153,
															261
														],
														"referencedDeclaration": 73,
														"src": "3859:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 93,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3859:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3799:87:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 96,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "3908:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 97,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 89,
															"src": "3915:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 95,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "3896:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$7_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3896:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "3896:28:0"
											},
											{
												"expression": {
													"id": 100,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 84,
													"src": "3941:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 82,
												"id": 101,
												"nodeType": "Return",
												"src": "3934:16:0"
											}
										]
									},
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "2901:796:0",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3711:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3727:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "3719:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 75,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3719:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3746:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "3733:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 77,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3733:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3718:38:0"
									},
									"returnParameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "3780:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3780:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3779:9:0"
									},
									"scope": 347,
									"src": "3702:255:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 152,
										"nodeType": "Block",
										"src": "4285:342:0",
										"statements": [
											{
												"id": 151,
												"nodeType": "UncheckedBlock",
												"src": "4295:326:0",
												"statements": [
													{
														"assignments": [
															121
														],
														"declarations": [
															{
																"constant": false,
																"id": 121,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4327:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 151,
																"src": "4319:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 120,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4319:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 128,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 122,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 110,
																"src": "4331:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 125,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4344:66:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4336:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 123,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4336:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 126,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4336:75:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4331:80:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4319:92:0"
													},
													{
														"assignments": [
															130
														],
														"declarations": [
															{
																"constant": false,
																"id": 130,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4528:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 151,
																"src": "4522:7:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 129,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4522:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 143,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 138,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 135,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 110,
																							"src": "4547:2:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 134,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4539:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 133,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4539:7:0",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 136,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4539:11:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 137,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4554:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4539:18:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 139,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4538:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 140,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4561:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4538:25:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4532:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 131,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4532:5:0",
																	"typeDescriptions": {}
																}
															},
															"id": 142,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4532:32:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4522:42:0"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 145,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 106,
																	"src": "4596:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 146,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "4602:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 147,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 108,
																	"src": "4605:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 148,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 121,
																	"src": "4608:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 144,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	73,
																	153,
																	261
																],
																"referencedDeclaration": 261,
																"src": "4585:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4585:25:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 119,
														"id": 150,
														"nodeType": "Return",
														"src": "4578:32:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 104,
										"nodeType": "StructuredDocumentation",
										"src": "3963:205:0",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4182:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4201:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4193:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 105,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4215:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4207:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 107,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4207:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4226:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4218:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4218:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4192:37:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4253:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4253:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4262:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$7",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 115,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 114,
														"name": "RecoverError",
														"nameLocations": [
															"4262:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 7,
														"src": "4262:12:0"
													},
													"referencedDeclaration": 7,
													"src": "4262:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4276:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 117,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4276:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:32:0"
									},
									"scope": 347,
									"src": "4173:454:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 185,
										"nodeType": "Block",
										"src": "4840:164:0",
										"statements": [
											{
												"assignments": [
													166,
													169,
													171
												],
												"declarations": [
													{
														"constant": false,
														"id": 166,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4859:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 185,
														"src": "4851:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 165,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4851:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 169,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4883:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 185,
														"src": "4870:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 168,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 167,
																"name": "RecoverError",
																"nameLocations": [
																	"4870:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 7,
																"src": "4870:12:0"
															},
															"referencedDeclaration": 7,
															"src": "4870:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 171,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4898:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 185,
														"src": "4890:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 170,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4890:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 177,
												"initialValue": {
													"arguments": [
														{
															"id": 173,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "4921:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 174,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "4927:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 175,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 160,
															"src": "4930:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 172,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															73,
															153,
															261
														],
														"referencedDeclaration": 153,
														"src": "4910:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4910:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4850:83:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 179,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "4955:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 180,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "4962:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 178,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "4943:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$7_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "4943:28:0"
											},
											{
												"expression": {
													"id": 183,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 166,
													"src": "4988:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 164,
												"id": 184,
												"nodeType": "Return",
												"src": "4981:16:0"
											}
										]
									},
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "4633:116:0",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4763:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4779:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "4771:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 155,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4771:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4793:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "4785:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 157,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4804:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "4796:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 159,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4796:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4770:37:0"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "4831:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4831:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4830:9:0"
									},
									"scope": 347,
									"src": "4754:250:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 260,
										"nodeType": "Block",
										"src": "5298:1372:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 207,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 195,
																"src": "6194:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6186:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 205,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6186:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 208,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6186:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 209,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6199:66:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6186:79:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 221,
												"nodeType": "IfStatement",
												"src": "6182:164:0",
												"trueBody": {
													"id": 220,
													"nodeType": "Block",
													"src": "6267:79:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 213,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6297:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6289:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 211,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6289:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 214,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6289:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 215,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 7,
																			"src": "6301:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 216,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6314:17:0",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 6,
																		"src": "6301:30:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$7",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 217,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 195,
																		"src": "6333:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 218,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6288:47:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 204,
															"id": 219,
															"nodeType": "Return",
															"src": "6281:54:0"
														}
													]
												}
											},
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6448:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 260,
														"src": "6440:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 222,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6440:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 230,
												"initialValue": {
													"arguments": [
														{
															"id": 225,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "6467:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 226,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 191,
															"src": "6473:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 227,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "6476:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 228,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 195,
															"src": "6479:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 224,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6457:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6457:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6440:41:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 231,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "6495:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 234,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6513:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6505:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 232,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6505:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 235,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6505:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6495:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 250,
												"nodeType": "IfStatement",
												"src": "6491:113:0",
												"trueBody": {
													"id": 249,
													"nodeType": "Block",
													"src": "6517:87:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 239,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6547:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 238,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6539:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 237,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6539:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 240,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6539:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 241,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 7,
																			"src": "6551:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6564:16:0",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4,
																		"src": "6551:29:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$7",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 245,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6590:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 244,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6582:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 243,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6582:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 246,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6582:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 247,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6538:55:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 204,
															"id": 248,
															"nodeType": "Return",
															"src": "6531:62:0"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 251,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "6622:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 252,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "6630:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6643:7:0",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3,
															"src": "6630:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6660:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 255,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6652:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 254,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6652:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 257,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6652:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 258,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6621:42:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 204,
												"id": 259,
												"nodeType": "Return",
												"src": "6614:49:0"
											}
										]
									},
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "5010:125:0",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5149:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5177:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5169:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 188,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5197:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5191:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 190,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5191:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5216:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5208:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5208:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5235:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5227:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 194,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5227:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5159:83:0"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5266:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5275:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$7",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 200,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 199,
														"name": "RecoverError",
														"nameLocations": [
															"5275:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 7,
														"src": "5275:12:0"
													},
													"referencedDeclaration": 7,
													"src": "5275:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5289:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 202,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5289:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5265:32:0"
									},
									"scope": 347,
									"src": "5140:1530:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 296,
										"nodeType": "Block",
										"src": "6897:166:0",
										"statements": [
											{
												"assignments": [
													276,
													279,
													281
												],
												"declarations": [
													{
														"constant": false,
														"id": 276,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6916:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 296,
														"src": "6908:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 275,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6908:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 279,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6940:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 296,
														"src": "6927:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 278,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 277,
																"name": "RecoverError",
																"nameLocations": [
																	"6927:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 7,
																"src": "6927:12:0"
															},
															"referencedDeclaration": 7,
															"src": "6927:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 281,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "6955:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 296,
														"src": "6947:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 280,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6947:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 288,
												"initialValue": {
													"arguments": [
														{
															"id": 283,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "6978:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 284,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 266,
															"src": "6984:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 285,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "6987:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 286,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "6990:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 282,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															73,
															153,
															261
														],
														"referencedDeclaration": 261,
														"src": "6967:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6967:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6907:85:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 290,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "7014:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 291,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "7021:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 289,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "7002:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$7_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7002:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 293,
												"nodeType": "ExpressionStatement",
												"src": "7002:28:0"
											},
											{
												"expression": {
													"id": 294,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 276,
													"src": "7047:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 274,
												"id": 295,
												"nodeType": "Return",
												"src": "7040:16:0"
											}
										]
									},
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "6676:122:0",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 297,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6812:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6828:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "6820:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 263,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6820:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6840:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "6834:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 265,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6834:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6851:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "6843:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 267,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6843:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6862:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "6854:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 269,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6854:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6819:45:0"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "6888:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6888:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6887:9:0"
									},
									"scope": 347,
									"src": "6803:260:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "7268:460:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 306,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "7282:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 307,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "7291:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 308,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7304:7:0",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3,
														"src": "7291:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7282:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 315,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 312,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 301,
															"src": "7378:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 313,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "7387:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7400:16:0",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4,
															"src": "7387:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7378:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 323,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 320,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 301,
																"src": "7483:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$7",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 321,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "7492:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 322,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7505:22:0",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 5,
																"src": "7492:35:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$7",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7483:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$7",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 335,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 332,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "7617:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$7",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 333,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "7626:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7639:17:0",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 6,
																	"src": "7626:30:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$7",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7617:39:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 341,
															"nodeType": "IfStatement",
															"src": "7613:109:0",
															"trueBody": {
																"id": 340,
																"nodeType": "Block",
																"src": "7658:64:0",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 337,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 303,
																					"src": "7702:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 336,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 20,
																				"src": "7679:22:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$_t_error_$",
																					"typeString": "function (bytes32) pure returns (error)"
																				}
																			},
																			"id": 338,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7679:32:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 339,
																		"nodeType": "RevertStatement",
																		"src": "7672:39:0"
																	}
																]
															}
														},
														"id": 342,
														"nodeType": "IfStatement",
														"src": "7479:243:0",
														"trueBody": {
															"id": 331,
															"nodeType": "Block",
															"src": "7529:78:0",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 327,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 303,
																						"src": "7586:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 326,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7578:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 325,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7578:7:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 328,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7578:17:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 324,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 15,
																			"src": "7550:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (uint256) pure returns (error)"
																			}
																		},
																		"id": 329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7550:46:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 330,
																	"nodeType": "RevertStatement",
																	"src": "7543:53:0"
																}
															]
														}
													},
													"id": 343,
													"nodeType": "IfStatement",
													"src": "7374:348:0",
													"trueBody": {
														"id": 319,
														"nodeType": "Block",
														"src": "7418:55:0",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 316,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 10,
																		"src": "7439:21:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																			"typeString": "function () pure returns (error)"
																		}
																	},
																	"id": 317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7439:23:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 318,
																"nodeType": "RevertStatement",
																"src": "7432:30:0"
															}
														]
													}
												},
												"id": 344,
												"nodeType": "IfStatement",
												"src": "7278:444:0",
												"trueBody": {
													"id": 311,
													"nodeType": "Block",
													"src": "7313:55:0",
													"statements": [
														{
															"functionReturnParameters": 305,
															"id": 310,
															"nodeType": "Return",
															"src": "7327:7:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 298,
										"nodeType": "StructuredDocumentation",
										"src": "7069:122:0",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7205:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7230:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7217:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$7",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 300,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 299,
														"name": "RecoverError",
														"nameLocations": [
															"7217:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 7,
														"src": "7217:12:0"
													},
													"referencedDeclaration": 7,
													"src": "7217:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7245:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7237:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 302,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7237:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7216:38:0"
									},
									"returnParameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7268:0:0"
									},
									"scope": 347,
									"src": "7196:532:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 348,
							"src": "344:7386:0",
							"usedErrors": [
								10,
								15,
								20
							],
							"usedEvents": []
						}
					],
					"src": "112:7619:0"
				}
			},
			"EscroDot.sol": {
				"id": 1,
				"ast": {
					"absolutePath": "EscroDot.sol",
					"exportedSymbols": {
						"ECDSA": [
							347
						],
						"EscroDotFactory": [
							1534
						],
						"ServiceEscrow": [
							1052
						],
						"SignatureVerifier": [
							1627
						]
					},
					"id": 1535,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 349,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:1"
						},
						{
							"absolutePath": "ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 350,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1535,
							"sourceUnit": 348,
							"src": "58:21:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "SignatureVerifier.sol",
							"file": "./SignatureVerifier.sol",
							"id": 351,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1535,
							"sourceUnit": 1628,
							"src": "80:33:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ServiceEscrow",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 352,
								"nodeType": "StructuredDocumentation",
								"src": "115:891:1",
								"text": " @title EscroDot – minimal escrow & staking framework for AI‑agent services\n @author Mike Liu (mikelxc)\n/**\n @title EscroDot – AI‑Agent Escrow (v0.4 – CCIP‑Read + Buyer‑Signed Claim + Open Arbiter)\n • Off‑chain delivery (ERC‑3668): `checkDelivery()` triggers CCIP‑Read. Gateway returns the\n   AI result. The buyer inspects the output off‑chain and, if satisfied, signs a message that\n   lets the provider claim funds.\n • Buyer‑signed claim: `claimPayment()` is called by the provider, supplying the buyer's\n   signature. Contract verifies and releases payment.\n • Open Dispute Resolution: Any address can become an arbiter – it just needs to deposit a\n   stake ≥ purchase value when calling `resolveDispute()`. (For brevity we return the stake in\n   the same tx; extend with lock‑and‑slash logic in later versions.)"
							},
							"fullyImplemented": true,
							"id": 1052,
							"linearizedBaseContracts": [
								1052
							],
							"name": "ServiceEscrow",
							"nameLocation": "1016:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 355,
									"libraryName": {
										"id": 353,
										"name": "ECDSA",
										"nameLocations": [
											"1042:5:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 347,
										"src": "1042:5:1"
									},
									"nodeType": "UsingForDirective",
									"src": "1036:24:1",
									"typeName": {
										"id": 354,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1052:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									}
								},
								{
									"constant": false,
									"documentation": {
										"id": 356,
										"nodeType": "StructuredDocumentation",
										"src": "1066:63:1",
										"text": "@notice Address of the factory that deployed this contract."
									},
									"functionSelector": "c45a0155",
									"id": 358,
									"mutability": "immutable",
									"name": "factory",
									"nameLocation": "1159:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "1134:32:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 357,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1134:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 359,
										"nodeType": "StructuredDocumentation",
										"src": "1173:70:1",
										"text": "@notice Deterministic service identifier = keccak256(serviceName)."
									},
									"functionSelector": "da20ec6a",
									"id": 361,
									"mutability": "immutable",
									"name": "serviceId",
									"nameLocation": "1273:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "1248:34:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 360,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1248:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "1289:71:1",
										"text": "@notice Wallet address that owns the service and receives payments."
									},
									"functionSelector": "085d4883",
									"id": 364,
									"mutability": "immutable",
									"name": "provider",
									"nameLocation": "1390:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "1365:33:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 363,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1365:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 365,
										"nodeType": "StructuredDocumentation",
										"src": "1405:46:1",
										"text": "@notice Fixed price (in wei) per purchase."
									},
									"functionSelector": "a035b1fe",
									"id": 367,
									"mutability": "immutable",
									"name": "price",
									"nameLocation": "1481:5:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "1456:30:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 366,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1456:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "1493:75:1",
										"text": "@notice Human‑readable description or IPFS CID (mutable by provider)."
									},
									"functionSelector": "7284e416",
									"id": 370,
									"mutability": "mutable",
									"name": "description",
									"nameLocation": "1588:11:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "1573:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 369,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1573:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "1606:58:1",
										"text": "@notice CCIP‑Read gateway URL (mutable by provider)."
									},
									"functionSelector": "116191b6",
									"id": 373,
									"mutability": "mutable",
									"name": "gateway",
									"nameLocation": "1684:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "1669:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 372,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1669:6:1",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 374,
										"nodeType": "StructuredDocumentation",
										"src": "1698:69:1",
										"text": "@notice CCIP‑Read gateway signer address (mutable by provider)."
									},
									"functionSelector": "f3253c63",
									"id": 376,
									"mutability": "mutable",
									"name": "gatewaySigner",
									"nameLocation": "1787:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "1772:28:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 375,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1772:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 377,
										"nodeType": "StructuredDocumentation",
										"src": "1807:46:1",
										"text": "@dev Incremental identifier for purchases."
									},
									"functionSelector": "23b4a7a3",
									"id": 379,
									"mutability": "mutable",
									"name": "nextPurchaseId",
									"nameLocation": "1873:14:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "1858:29:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 378,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1858:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "ServiceEscrow.Purchase",
									"documentation": {
										"id": 380,
										"nodeType": "StructuredDocumentation",
										"src": "1894:384:1",
										"text": " @dev Track the lifecycle of each purchase.\n @param buyer     Address that paid for the service.\n @param amount    Amount of ETH locked (should equal `price`).\n @param claimed   True if provider has successfully claimed the funds.\n @param disputed  True if buyer raised a dispute.\n @param resolved  True if factory resolved the dispute."
									},
									"id": 391,
									"members": [
										{
											"constant": false,
											"id": 382,
											"mutability": "mutable",
											"name": "buyer",
											"nameLocation": "2317:5:1",
											"nodeType": "VariableDeclaration",
											"scope": 391,
											"src": "2309:13:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 381,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "2309:7:1",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 384,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "2340:6:1",
											"nodeType": "VariableDeclaration",
											"scope": 391,
											"src": "2332:14:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 383,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2332:7:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 386,
											"mutability": "mutable",
											"name": "claimed",
											"nameLocation": "2364:7:1",
											"nodeType": "VariableDeclaration",
											"scope": 391,
											"src": "2356:15:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 385,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2356:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 388,
											"mutability": "mutable",
											"name": "disputed",
											"nameLocation": "2389:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 391,
											"src": "2381:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 387,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2381:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 390,
											"mutability": "mutable",
											"name": "resolved",
											"nameLocation": "2415:8:1",
											"nodeType": "VariableDeclaration",
											"scope": 391,
											"src": "2407:16:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 389,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2407:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Purchase",
									"nameLocation": "2290:8:1",
									"nodeType": "StructDefinition",
									"scope": 1052,
									"src": "2283:147:1",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "8392fe31",
									"id": 396,
									"mutability": "mutable",
									"name": "purchases",
									"nameLocation": "2471:9:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "2435:45:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$391_storage_$",
										"typeString": "mapping(uint256 => struct ServiceEscrow.Purchase)"
									},
									"typeName": {
										"id": 395,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 392,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2443:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "2435:28:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$391_storage_$",
											"typeString": "mapping(uint256 => struct ServiceEscrow.Purchase)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 394,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 393,
												"name": "Purchase",
												"nameLocations": [
													"2454:8:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 391,
												"src": "2454:8:1"
											},
											"referencedDeclaration": 391,
											"src": "2454:8:1",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
												"typeString": "struct ServiceEscrow.Purchase"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 397,
										"nodeType": "StructuredDocumentation",
										"src": "2508:52:1",
										"text": "@notice Buyer successfully paid for the service."
									},
									"eventSelector": "6989fd04c5bc56c8995f68ff4d4a94e67e56cf4efa352219e731185ac2736df5",
									"id": 405,
									"name": "ServicePurchased",
									"nameLocation": "2571:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 399,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "2604:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2588:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 398,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2588:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 401,
												"indexed": true,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "2632:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2616:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 400,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2616:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 403,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2647:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 405,
												"src": "2639:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2639:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2587:67:1"
									},
									"src": "2565:90:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 406,
										"nodeType": "StructuredDocumentation",
										"src": "2661:75:1",
										"text": "@notice Off‑chain gateway supplied a deliverable hash for a purchase."
									},
									"eventSelector": "70e8b1fb3e2d7b32226f4190b7c4f94dcaf1d06ea6b6ba7a99da7b37a6688fa5",
									"id": 412,
									"name": "OffchainDelivery",
									"nameLocation": "2747:16:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 408,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "2780:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2764:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 407,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2764:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 410,
												"indexed": false,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "2800:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "2792:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 409,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2792:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2763:53:1"
									},
									"src": "2741:76:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 413,
										"nodeType": "StructuredDocumentation",
										"src": "2823:75:1",
										"text": "@notice Provider claimed the locked payment (buyer signature verified)."
									},
									"eventSelector": "9b6fad3638aff112640e0386ff933ec4087b8ef6944df50928b1b578fa968c19",
									"id": 417,
									"name": "PaymentClaimed",
									"nameLocation": "2909:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 415,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "2940:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 417,
												"src": "2924:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2924:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2923:28:1"
									},
									"src": "2903:49:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 418,
										"nodeType": "StructuredDocumentation",
										"src": "2958:51:1",
										"text": "@notice Buyer flagged the purchase for dispute."
									},
									"eventSelector": "04901f83201c8724eadf084436db8aa391820bae6d11f9f78a17edb6f2eef3cf",
									"id": 422,
									"name": "DisputeRaised",
									"nameLocation": "3020:13:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 420,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "3050:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 422,
												"src": "3034:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 419,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3034:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3033:28:1"
									},
									"src": "3014:48:1"
								},
								{
									"documentation": {
										"id": 423,
										"nodeType": "StructuredDocumentation",
										"src": "3068:48:1",
										"text": "@dev See EIP‑3668 for parameter semantics."
									},
									"errorSelector": "556f1830",
									"id": 436,
									"name": "OffchainLookup",
									"nameLocation": "3127:14:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3159:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "3151:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 424,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3151:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "urls",
												"nameLocation": "3184:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "3175:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 426,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "3175:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 427,
													"nodeType": "ArrayTypeName",
													"src": "3175:8:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 430,
												"mutability": "mutable",
												"name": "callData",
												"nameLocation": "3204:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "3198:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 429,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3198:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"mutability": "mutable",
												"name": "callbackFunction",
												"nameLocation": "3229:16:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "3222:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 431,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "3222:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "extraData",
												"nameLocation": "3261:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "3255:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 433,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3255:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3141:135:1"
									},
									"src": "3121:156:1"
								},
								{
									"body": {
										"id": 448,
										"nodeType": "Block",
										"src": "3373:97:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 440,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3391:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 441,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3395:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3391:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 442,
																"name": "provider",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 364,
																"src": "3405:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3391:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a2063616c6c6572206973206e6f74207468652070726f7669646572",
															"id": 444,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3415:36:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825",
																"typeString": "literal_string \"Escrow: caller is not the provider\""
															},
															"value": "Escrow: caller is not the provider"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825",
																"typeString": "literal_string \"Escrow: caller is not the provider\""
															}
														],
														"id": 439,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3383:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3383:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 446,
												"nodeType": "ExpressionStatement",
												"src": "3383:69:1"
											},
											{
												"id": 447,
												"nodeType": "PlaceholderStatement",
												"src": "3462:1:1"
											}
										]
									},
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "3283:61:1",
										"text": "@dev Restrict a function to the provider of this service."
									},
									"id": 449,
									"name": "onlyProvider",
									"nameLocation": "3358:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3370:2:1"
									},
									"src": "3349:121:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 461,
										"nodeType": "Block",
										"src": "3576:95:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 453,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "3594:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 454,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "3598:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "3594:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 455,
																"name": "factory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 358,
																"src": "3608:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "3594:21:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a2063616c6c6572206973206e6f742074686520666163746f7279",
															"id": 457,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3617:35:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e5c00a4eee7d31f86bc5aa9e56edddaee61755eba58c430976c3a31eb9b68dc5",
																"typeString": "literal_string \"Escrow: caller is not the factory\""
															},
															"value": "Escrow: caller is not the factory"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e5c00a4eee7d31f86bc5aa9e56edddaee61755eba58c430976c3a31eb9b68dc5",
																"typeString": "literal_string \"Escrow: caller is not the factory\""
															}
														],
														"id": 452,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3586:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3586:67:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 459,
												"nodeType": "ExpressionStatement",
												"src": "3586:67:1"
											},
											{
												"id": 460,
												"nodeType": "PlaceholderStatement",
												"src": "3663:1:1"
											}
										]
									},
									"documentation": {
										"id": 450,
										"nodeType": "StructuredDocumentation",
										"src": "3476:72:1",
										"text": "@dev Restrict a function to the factory that deployed this contract."
									},
									"id": 462,
									"name": "onlyFactory",
									"nameLocation": "3562:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 451,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3573:2:1"
									},
									"src": "3553:118:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 465,
									"mutability": "mutable",
									"name": "_locked",
									"nameLocation": "3693:7:1",
									"nodeType": "VariableDeclaration",
									"scope": 1052,
									"src": "3677:27:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 463,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "3677:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 464,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3703:1:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 483,
										"nodeType": "Block",
										"src": "3734:117:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 470,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 468,
																"name": "_locked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 465,
																"src": "3752:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 469,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3763:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "3752:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207265656e7472616e742063616c6c",
															"id": 471,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3766:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3",
																"typeString": "literal_string \"Escrow: reentrant call\""
															},
															"value": "Escrow: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3",
																"typeString": "literal_string \"Escrow: reentrant call\""
															}
														],
														"id": 467,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3744:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3744:47:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 473,
												"nodeType": "ExpressionStatement",
												"src": "3744:47:1"
											},
											{
												"expression": {
													"id": 476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 474,
														"name": "_locked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 465,
														"src": "3801:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32",
														"id": 475,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3811:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "3801:11:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 477,
												"nodeType": "ExpressionStatement",
												"src": "3801:11:1"
											},
											{
												"id": 478,
												"nodeType": "PlaceholderStatement",
												"src": "3822:1:1"
											},
											{
												"expression": {
													"id": 481,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 479,
														"name": "_locked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 465,
														"src": "3833:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 480,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3843:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3833:11:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 482,
												"nodeType": "ExpressionStatement",
												"src": "3833:11:1"
											}
										]
									},
									"id": 484,
									"name": "nonReentrant",
									"nameLocation": "3719:12:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3731:2:1"
									},
									"src": "3710:141:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 578,
										"nodeType": "Block",
										"src": "4571:638:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 508,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 503,
																"name": "_factory",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 487,
																"src": "4589:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 506,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4609:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 505,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4601:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 504,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4601:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 507,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4601:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4589:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20666163746f7279206973207a65726f2061646472657373",
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4613:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_abefa298a2b3ad1c12fccec8c89af0379056a8c92f071b11ef86232d03fcde63",
																"typeString": "literal_string \"Escrow: factory is zero address\""
															},
															"value": "Escrow: factory is zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_abefa298a2b3ad1c12fccec8c89af0379056a8c92f071b11ef86232d03fcde63",
																"typeString": "literal_string \"Escrow: factory is zero address\""
															}
														],
														"id": 502,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4581:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4581:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 511,
												"nodeType": "ExpressionStatement",
												"src": "4581:66:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 513,
																"name": "_provider",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 491,
																"src": "4665:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 516,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4686:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 515,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4678:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 514,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4678:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4678:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4665:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a2070726f7669646572206973207a65726f2061646472657373",
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4690:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_339e0f99c26dc547806c208e931d196e28e2213b6c2a94a704ce04e61fd99030",
																"typeString": "literal_string \"Escrow: provider is zero address\""
															},
															"value": "Escrow: provider is zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_339e0f99c26dc547806c208e931d196e28e2213b6c2a94a704ce04e61fd99030",
																"typeString": "literal_string \"Escrow: provider is zero address\""
															}
														],
														"id": 512,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4657:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 520,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4657:68:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 521,
												"nodeType": "ExpressionStatement",
												"src": "4657:68:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 523,
																"name": "_price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 493,
																"src": "4743:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 524,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4752:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4743:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207072696365206d757374206265203e2030",
															"id": 526,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4755:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d",
																"typeString": "literal_string \"Escrow: price must be > 0\""
															},
															"value": "Escrow: price must be > 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_248e4d7e29025063d96260f7048b6b87c8602fb36c4c4436079dcda486fa870d",
																"typeString": "literal_string \"Escrow: price must be > 0\""
															}
														],
														"id": 522,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4735:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 527,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4735:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 528,
												"nodeType": "ExpressionStatement",
												"src": "4735:48:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 536,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 532,
																			"name": "_gateway",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 495,
																			"src": "4807:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 531,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4801:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 530,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4801:5:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 533,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4801:15:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																"id": 534,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4817:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4801:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4826:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4801:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20676174657761792063616e6e6f7420626520656d707479",
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4829:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808",
																"typeString": "literal_string \"Escrow: gateway cannot be empty\""
															},
															"value": "Escrow: gateway cannot be empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808",
																"typeString": "literal_string \"Escrow: gateway cannot be empty\""
															}
														],
														"id": 529,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4793:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 538,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4793:70:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 539,
												"nodeType": "ExpressionStatement",
												"src": "4793:70:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 546,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 541,
																"name": "_gatewaySigner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 497,
																"src": "4881:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 544,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4907:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 543,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4899:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 542,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4899:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 545,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4899:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4881:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a2067617465776179207369676e65722063616e6e6f74206265207a65726f2061646472657373",
															"id": 547,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4911:47:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4a8119fd33623d83457a85b5e68bd50015eabb7b61ece3735951e6a4a921aa58",
																"typeString": "literal_string \"Escrow: gateway signer cannot be zero address\""
															},
															"value": "Escrow: gateway signer cannot be zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4a8119fd33623d83457a85b5e68bd50015eabb7b61ece3735951e6a4a921aa58",
																"typeString": "literal_string \"Escrow: gateway signer cannot be zero address\""
															}
														],
														"id": 540,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4873:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 548,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4873:86:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 549,
												"nodeType": "ExpressionStatement",
												"src": "4873:86:1"
											},
											{
												"expression": {
													"id": 552,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 550,
														"name": "factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 358,
														"src": "4969:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 551,
														"name": "_factory",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 487,
														"src": "4984:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4969:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 553,
												"nodeType": "ExpressionStatement",
												"src": "4969:23:1"
											},
											{
												"expression": {
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 554,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 361,
														"src": "5002:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 555,
														"name": "_serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 489,
														"src": "5017:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "5002:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 557,
												"nodeType": "ExpressionStatement",
												"src": "5002:25:1"
											},
											{
												"expression": {
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 558,
														"name": "provider",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 364,
														"src": "5037:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 559,
														"name": "_provider",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 491,
														"src": "5052:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5037:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 561,
												"nodeType": "ExpressionStatement",
												"src": "5037:24:1"
											},
											{
												"expression": {
													"id": 564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 562,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 367,
														"src": "5071:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 563,
														"name": "_price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 493,
														"src": "5086:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5071:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 565,
												"nodeType": "ExpressionStatement",
												"src": "5071:21:1"
											},
											{
												"expression": {
													"id": 568,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 566,
														"name": "gateway",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 373,
														"src": "5102:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 567,
														"name": "_gateway",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 495,
														"src": "5117:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "5102:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 569,
												"nodeType": "ExpressionStatement",
												"src": "5102:23:1"
											},
											{
												"expression": {
													"id": 572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 570,
														"name": "gatewaySigner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 376,
														"src": "5135:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 571,
														"name": "_gatewaySigner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 497,
														"src": "5151:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5135:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 573,
												"nodeType": "ExpressionStatement",
												"src": "5135:30:1"
											},
											{
												"expression": {
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 574,
														"name": "description",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "5175:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 575,
														"name": "_description",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 499,
														"src": "5190:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "5175:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 577,
												"nodeType": "ExpressionStatement",
												"src": "5175:27:1"
											}
										]
									},
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "3857:486:1",
										"text": " @param _factory      Address of the EscroDotFactory contract.\n @param _serviceId    keccak256 hash of the chosen service name.\n @param _provider     Owner of the service.\n @param _price        Fixed price per purchase (wei).\n @param _gateway      HTTPS/IPFS URL implementing the CCIP‑Read spec.\n @param _gatewaySigner Address of the CCIP‑Read gateway signer.\n @param _description  Short text or IPFS CID describing the service."
									},
									"id": 579,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 487,
												"mutability": "mutable",
												"name": "_factory",
												"nameLocation": "4377:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4369:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 486,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4369:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 489,
												"mutability": "mutable",
												"name": "_serviceId",
												"nameLocation": "4403:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4395:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 488,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4395:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "_provider",
												"nameLocation": "4431:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4423:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 490,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4423:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "_price",
												"nameLocation": "4458:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4450:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4450:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "_gateway",
												"nameLocation": "4488:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4474:22:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 494,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4474:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "_gatewaySigner",
												"nameLocation": "4514:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4506:22:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 496,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4506:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "_description",
												"nameLocation": "4552:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 579,
												"src": "4538:26:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 498,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4538:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4359:211:1"
									},
									"returnParameters": {
										"id": 501,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4571:0:1"
									},
									"scope": 1052,
									"src": "4348:861:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 622,
										"nodeType": "Block",
										"src": "5455:389:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 591,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 588,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5473:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 589,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5477:5:1",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "5473:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 590,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 367,
																"src": "5486:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5473:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20696e636f7272656374207061796d656e7420616d6f756e74",
															"id": 592,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5493:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f",
																"typeString": "literal_string \"Escrow: incorrect payment amount\""
															},
															"value": "Escrow: incorrect payment amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f",
																"typeString": "literal_string \"Escrow: incorrect payment amount\""
															}
														],
														"id": 587,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5465:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 593,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5465:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 594,
												"nodeType": "ExpressionStatement",
												"src": "5465:63:1"
											},
											{
												"expression": {
													"id": 598,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 595,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 585,
														"src": "5539:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 597,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "5552:16:1",
														"subExpression": {
															"id": 596,
															"name": "nextPurchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 379,
															"src": "5552:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5539:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 599,
												"nodeType": "ExpressionStatement",
												"src": "5539:29:1"
											},
											{
												"expression": {
													"id": 612,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 600,
															"name": "purchases",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "5578:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$391_storage_$",
																"typeString": "mapping(uint256 => struct ServiceEscrow.Purchase storage ref)"
															}
														},
														"id": 602,
														"indexExpression": {
															"id": 601,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 585,
															"src": "5588:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5578:21:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$391_storage",
															"typeString": "struct ServiceEscrow.Purchase storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 604,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5632:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 605,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5636:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5632:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 606,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5664:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 607,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5668:5:1",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "5664:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 608,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5696:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "66616c7365",
																"id": 609,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5725:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "66616c7365",
																"id": 610,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5754:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 603,
															"name": "Purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 391,
															"src": "5602:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Purchase_$391_storage_ptr_$",
																"typeString": "type(struct ServiceEscrow.Purchase storage pointer)"
															}
														},
														"id": 611,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [
															"5625:5:1",
															"5656:6:1",
															"5687:7:1",
															"5715:8:1",
															"5744:8:1"
														],
														"names": [
															"buyer",
															"amount",
															"claimed",
															"disputed",
															"resolved"
														],
														"nodeType": "FunctionCall",
														"src": "5602:168:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$391_memory_ptr",
															"typeString": "struct ServiceEscrow.Purchase memory"
														}
													},
													"src": "5578:192:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$391_storage",
														"typeString": "struct ServiceEscrow.Purchase storage ref"
													}
												},
												"id": 613,
												"nodeType": "ExpressionStatement",
												"src": "5578:192:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 615,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 585,
															"src": "5803:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 616,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5815:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5819:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5815:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 618,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5827:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 619,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5831:5:1",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5827:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 614,
														"name": "ServicePurchased",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 405,
														"src": "5786:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,address,uint256)"
														}
													},
													"id": 620,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5786:51:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 621,
												"nodeType": "EmitStatement",
												"src": "5781:56:1"
											}
										]
									},
									"documentation": {
										"id": 580,
										"nodeType": "StructuredDocumentation",
										"src": "5215:154:1",
										"text": " @notice Purchase the service by locking `price` ETH in this contract.\n @return purchaseId  A unique identifier for this purchase."
									},
									"functionSelector": "5c646b5a",
									"id": 623,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 583,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 582,
												"name": "nonReentrant",
												"nameLocations": [
													"5413:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 484,
												"src": "5413:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "5413:12:1"
										}
									],
									"name": "buyService",
									"nameLocation": "5383:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5393:2:1"
									},
									"returnParameters": {
										"id": 586,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 585,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "5443:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 623,
												"src": "5435:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 584,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5435:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5434:20:1"
									},
									"scope": 1052,
									"src": "5374:470:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 678,
										"nodeType": "Block",
										"src": "6388:430:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 637,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 632,
																		"name": "purchases",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 396,
																		"src": "6406:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$391_storage_$",
																			"typeString": "mapping(uint256 => struct ServiceEscrow.Purchase storage ref)"
																		}
																	},
																	"id": 634,
																	"indexExpression": {
																		"id": 633,
																		"name": "purchaseId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 626,
																		"src": "6416:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "6406:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$391_storage",
																		"typeString": "struct ServiceEscrow.Purchase storage ref"
																	}
																},
																"id": 635,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6428:6:1",
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 384,
																"src": "6406:28:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 636,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6437:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "6406:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20696e76616c6964207075726368617365206964",
															"id": 638,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6440:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad",
																"typeString": "literal_string \"Escrow: invalid purchase id\""
															},
															"value": "Escrow: invalid purchase id"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6858e2a1a7ea84fcb7dc293b21306f6c13223f42cbb217e8b0281c87533dc1ad",
																"typeString": "literal_string \"Escrow: invalid purchase id\""
															}
														],
														"id": 631,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6398:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 639,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6398:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 640,
												"nodeType": "ExpressionStatement",
												"src": "6398:72:1"
											},
											{
												"assignments": [
													645
												],
												"declarations": [
													{
														"constant": false,
														"id": 645,
														"mutability": "mutable",
														"name": "urls",
														"nameLocation": "6497:4:1",
														"nodeType": "VariableDeclaration",
														"scope": 678,
														"src": "6481:20:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
															"typeString": "string[]"
														},
														"typeName": {
															"baseType": {
																"id": 643,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "6481:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string"
																}
															},
															"id": 644,
															"nodeType": "ArrayTypeName",
															"src": "6481:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
																"typeString": "string[]"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 651,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "31",
															"id": 649,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6517:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															}
														],
														"id": 648,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "6504:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory[] memory)"
														},
														"typeName": {
															"baseType": {
																"id": 646,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "6508:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string"
																}
															},
															"id": 647,
															"nodeType": "ArrayTypeName",
															"src": "6508:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
																"typeString": "string[]"
															}
														}
													},
													"id": 650,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6504:15:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
														"typeString": "string memory[] memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6481:38:1"
											},
											{
												"expression": {
													"id": 656,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 652,
															"name": "urls",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "6529:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																"typeString": "string memory[] memory"
															}
														},
														"id": 654,
														"indexExpression": {
															"hexValue": "30",
															"id": 653,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6534:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "6529:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 655,
														"name": "gateway",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 373,
														"src": "6539:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"src": "6529:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"id": 657,
												"nodeType": "ExpressionStatement",
												"src": "6529:17:1"
											},
											{
												"errorCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 661,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6609:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																		"typeString": "contract ServiceEscrow"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																		"typeString": "contract ServiceEscrow"
																	}
																],
																"id": 660,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6601:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 659,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6601:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6601:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 663,
															"name": "urls",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 645,
															"src": "6634:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																"typeString": "string memory[] memory"
															}
														},
														{
															"arguments": [
																{
																	"id": 666,
																	"name": "userInput",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 628,
																	"src": "6673:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																{
																	"id": 667,
																	"name": "purchaseId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 626,
																	"src": "6684:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 664,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "6662:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 665,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "6666:6:1",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "6662:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 668,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6662:33:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"expression": {
																"expression": {
																	"id": 669,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "6727:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																		"typeString": "contract ServiceEscrow"
																	}
																},
																"id": 670,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6732:12:1",
																"memberName": "ccipCallback",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 709,
																"src": "6727:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes memory,bytes memory) view external returns (bytes memory)"
																}
															},
															"id": 671,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6745:8:1",
															"memberName": "selector",
															"nodeType": "MemberAccess",
															"src": "6727:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															}
														},
														{
															"arguments": [
																{
																	"id": 674,
																	"name": "purchaseId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 626,
																	"src": "6789:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 672,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "6778:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 673,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "6782:6:1",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "6778:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 675,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6778:22:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
																"typeString": "string memory[] memory"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 658,
														"name": "OffchainLookup",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 436,
														"src": "6564:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_error_pure$_t_address_$_t_array$_t_string_memory_ptr_$dyn_memory_ptr_$_t_bytes_memory_ptr_$_t_bytes4_$_t_bytes_memory_ptr_$returns$_t_error_$",
															"typeString": "function (address,string memory[] memory,bytes memory,bytes4,bytes memory) pure returns (error)"
														}
													},
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [
														"6593:6:1",
														"6628:4:1",
														"6652:8:1",
														"6709:16:1",
														"6767:9:1"
													],
													"names": [
														"sender",
														"urls",
														"callData",
														"callbackFunction",
														"extraData"
													],
													"nodeType": "FunctionCall",
													"src": "6564:247:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_error",
														"typeString": "error"
													}
												},
												"id": 677,
												"nodeType": "RevertStatement",
												"src": "6557:254:1"
											}
										]
									},
									"documentation": {
										"id": 624,
										"nodeType": "StructuredDocumentation",
										"src": "5850:450:1",
										"text": " @notice Trigger an ERC‑3668 OffchainLookup so that a gateway can return the deliverable.\n @param purchaseId  Identifier of the purchase to query.\n @param userInput   Arbitrary payload forwarded to the gateway (e.g., API key, prompt).\n The caller MUST handle the OffchainLookup error, perform the HTTPS request(s) to the\n provided `gateway`, then call `ccipCallback` with the ABI‑encoded response."
									},
									"functionSelector": "558eab4b",
									"id": 679,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "checkDelivery",
									"nameLocation": "6314:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "6336:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "6328:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 625,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6328:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 628,
												"mutability": "mutable",
												"name": "userInput",
												"nameLocation": "6363:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 679,
												"src": "6348:24:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 627,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6348:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6327:46:1"
									},
									"returnParameters": {
										"id": 630,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6388:0:1"
									},
									"scope": 1052,
									"src": "6305:513:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 708,
										"nodeType": "Block",
										"src": "7157:241:1",
										"statements": [
											{
												"assignments": [
													690,
													692
												],
												"declarations": [
													{
														"constant": false,
														"id": 690,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "7176:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7168:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 689,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7168:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 692,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "7197:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 708,
														"src": "7184:19:1",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 691,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "7184:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 698,
												"initialValue": {
													"arguments": [
														{
															"id": 695,
															"name": "extraData",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 684,
															"src": "7245:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														},
														{
															"id": 696,
															"name": "response",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 682,
															"src": "7268:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															},
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"expression": {
															"id": 693,
															"name": "SignatureVerifier",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1627,
															"src": "7207:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_SignatureVerifier_$1627_$",
																"typeString": "type(library SignatureVerifier)"
															}
														},
														"id": 694,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7225:6:1",
														"memberName": "verify",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1626,
														"src": "7207:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes_calldata_ptr_$_t_bytes_calldata_ptr_$returns$_t_address_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes calldata,bytes calldata) view returns (address,bytes memory)"
														}
													},
													"id": 697,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7207:79:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(address,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7167:119:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 702,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 700,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 690,
																"src": "7304:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 701,
																"name": "gatewaySigner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 376,
																"src": "7314:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7304:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5369676e617475726556657269666965723a20496e76616c6964207369676e6174757265",
															"id": 703,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7329:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496",
																"typeString": "literal_string \"SignatureVerifier: Invalid signature\""
															},
															"value": "SignatureVerifier: Invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496",
																"typeString": "literal_string \"SignatureVerifier: Invalid signature\""
															}
														],
														"id": 699,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7296:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7296:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 705,
												"nodeType": "ExpressionStatement",
												"src": "7296:72:1"
											},
											{
												"expression": {
													"id": 706,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 692,
													"src": "7385:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 688,
												"id": 707,
												"nodeType": "Return",
												"src": "7378:13:1"
											}
										]
									},
									"documentation": {
										"id": 680,
										"nodeType": "StructuredDocumentation",
										"src": "6824:190:1",
										"text": " @notice CCIP‑Read callback that simply logs the deliverable hash off‑chain.\n @dev  No state change other than the event emission so the provider can later claim."
									},
									"functionSelector": "29514482",
									"id": 709,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ccipCallback",
									"nameLocation": "7028:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 685,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "response",
												"nameLocation": "7056:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7041:23:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 681,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7041:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 684,
												"mutability": "mutable",
												"name": "extraData",
												"nameLocation": "7081:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7066:24:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 683,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7066:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7040:51:1"
									},
									"returnParameters": {
										"id": 688,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 687,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 709,
												"src": "7139:12:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 686,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7139:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7138:14:1"
									},
									"scope": 1052,
									"src": "7019:379:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 786,
										"nodeType": "Block",
										"src": "7899:591:1",
										"statements": [
											{
												"assignments": [
													725
												],
												"declarations": [
													{
														"constant": false,
														"id": 725,
														"mutability": "mutable",
														"name": "purchase",
														"nameLocation": "7926:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 786,
														"src": "7909:25:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
															"typeString": "struct ServiceEscrow.Purchase"
														},
														"typeName": {
															"id": 724,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 723,
																"name": "Purchase",
																"nameLocations": [
																	"7909:8:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 391,
																"src": "7909:8:1"
															},
															"referencedDeclaration": 391,
															"src": "7909:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																"typeString": "struct ServiceEscrow.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 729,
												"initialValue": {
													"baseExpression": {
														"id": 726,
														"name": "purchases",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 396,
														"src": "7937:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$391_storage_$",
															"typeString": "mapping(uint256 => struct ServiceEscrow.Purchase storage ref)"
														}
													},
													"id": 728,
													"indexExpression": {
														"id": 727,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 712,
														"src": "7947:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7937:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$391_storage",
														"typeString": "struct ServiceEscrow.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7909:49:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 733,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "7977:17:1",
															"subExpression": {
																"expression": {
																	"id": 731,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 725,
																	"src": "7978:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																		"typeString": "struct ServiceEscrow.Purchase storage pointer"
																	}
																},
																"id": 732,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7987:7:1",
																"memberName": "claimed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 386,
																"src": "7978:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207061796d656e7420616c726561647920636c61696d6564",
															"id": 734,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7997:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8",
																"typeString": "literal_string \"Escrow: payment already claimed\""
															},
															"value": "Escrow: payment already claimed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8",
																"typeString": "literal_string \"Escrow: payment already claimed\""
															}
														],
														"id": 730,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7969:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 735,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7969:62:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 736,
												"nodeType": "ExpressionStatement",
												"src": "7969:62:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "8049:18:1",
															"subExpression": {
																"expression": {
																	"id": 738,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 725,
																	"src": "8050:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																		"typeString": "struct ServiceEscrow.Purchase storage pointer"
																	}
																},
																"id": 739,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8059:8:1",
																"memberName": "disputed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 388,
																"src": "8050:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20707572636861736520697320696e2064697370757465",
															"id": 741,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8069:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074",
																"typeString": "literal_string \"Escrow: purchase is in dispute\""
															},
															"value": "Escrow: purchase is in dispute"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074",
																"typeString": "literal_string \"Escrow: purchase is in dispute\""
															}
														],
														"id": 737,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8041:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 742,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8041:61:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 743,
												"nodeType": "ExpressionStatement",
												"src": "8041:61:1"
											},
											{
												"assignments": [
													745
												],
												"declarations": [
													{
														"constant": false,
														"id": 745,
														"mutability": "mutable",
														"name": "digest",
														"nameLocation": "8156:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 786,
														"src": "8148:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 744,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "8148:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 750,
												"initialValue": {
													"arguments": [
														{
															"id": 747,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 712,
															"src": "8178:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 748,
															"name": "deliverableHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 714,
															"src": "8190:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 746,
														"name": "_claimDigest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1023,
														"src": "8165:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (uint256,bytes32) view returns (bytes32)"
														}
													},
													"id": 749,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8165:41:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8148:58:1"
											},
											{
												"assignments": [
													752
												],
												"declarations": [
													{
														"constant": false,
														"id": 752,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "8224:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 786,
														"src": "8216:14:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 751,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "8216:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 758,
												"initialValue": {
													"arguments": [
														{
															"id": 755,
															"name": "digest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 745,
															"src": "8247:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 756,
															"name": "buyerSignature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 716,
															"src": "8255:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"expression": {
															"id": 753,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "8233:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$347_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 754,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8239:7:1",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 103,
														"src": "8233:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address)"
														}
													},
													"id": 757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8233:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8216:54:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 760,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 752,
																"src": "8288:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 761,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 725,
																	"src": "8298:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																		"typeString": "struct ServiceEscrow.Purchase storage pointer"
																	}
																},
																"id": 762,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8307:5:1",
																"memberName": "buyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 382,
																"src": "8298:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8288:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5369676e617475726556657269666965723a20496e76616c6964207369676e6174757265",
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8314:38:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496",
																"typeString": "literal_string \"SignatureVerifier: Invalid signature\""
															},
															"value": "SignatureVerifier: Invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496",
																"typeString": "literal_string \"SignatureVerifier: Invalid signature\""
															}
														],
														"id": 759,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8280:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 765,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8280:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 766,
												"nodeType": "ExpressionStatement",
												"src": "8280:73:1"
											},
											{
												"expression": {
													"id": 771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 767,
															"name": "purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 725,
															"src": "8364:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																"typeString": "struct ServiceEscrow.Purchase storage pointer"
															}
														},
														"id": 769,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8373:7:1",
														"memberName": "claimed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 386,
														"src": "8364:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 770,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8383:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "8364:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 772,
												"nodeType": "ExpressionStatement",
												"src": "8364:23:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 776,
																	"name": "provider",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "8414:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 775,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8406:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 774,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8406:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 777,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8406:17:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 778,
																"name": "purchase",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 725,
																"src": "8425:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																	"typeString": "struct ServiceEscrow.Purchase storage pointer"
																}
															},
															"id": 779,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8434:6:1",
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 384,
															"src": "8425:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 773,
														"name": "_sendETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1046,
														"src": "8397:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 780,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8397:44:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 781,
												"nodeType": "ExpressionStatement",
												"src": "8397:44:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 783,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 712,
															"src": "8472:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 782,
														"name": "PaymentClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 417,
														"src": "8457:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8457:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 785,
												"nodeType": "EmitStatement",
												"src": "8452:31:1"
											}
										]
									},
									"documentation": {
										"id": 710,
										"nodeType": "StructuredDocumentation",
										"src": "7404:327:1",
										"text": " @notice Provider claims funds by presenting a buyer‑signed message.\n @param purchaseId       Identifier of the purchase to claim.\n @param deliverableHash  Hash returned by the CCIP gateway (buyer has inspected).\n @param buyerSignature   ECDSA signature of the buyer over the claim digest."
									},
									"functionSelector": "60595ac9",
									"id": 787,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 719,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 718,
												"name": "nonReentrant",
												"nameLocations": [
													"7873:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 484,
												"src": "7873:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "7873:12:1"
										},
										{
											"id": 721,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 720,
												"name": "onlyProvider",
												"nameLocations": [
													"7886:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 449,
												"src": "7886:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "7886:12:1"
										}
									],
									"name": "claimPayment",
									"nameLocation": "7745:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 717,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 712,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "7775:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "7767:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 711,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7767:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 714,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "7803:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "7795:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 713,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7795:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 716,
												"mutability": "mutable",
												"name": "buyerSignature",
												"nameLocation": "7843:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "7828:29:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 715,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7828:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7757:106:1"
									},
									"returnParameters": {
										"id": 722,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7899:0:1"
									},
									"scope": 1052,
									"src": "7736:754:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 832,
										"nodeType": "Block",
										"src": "8547:385:1",
										"statements": [
											{
												"assignments": [
													794
												],
												"declarations": [
													{
														"constant": false,
														"id": 794,
														"mutability": "mutable",
														"name": "purchase",
														"nameLocation": "8574:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 832,
														"src": "8557:25:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
															"typeString": "struct ServiceEscrow.Purchase"
														},
														"typeName": {
															"id": 793,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 792,
																"name": "Purchase",
																"nameLocations": [
																	"8557:8:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 391,
																"src": "8557:8:1"
															},
															"referencedDeclaration": 391,
															"src": "8557:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																"typeString": "struct ServiceEscrow.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 798,
												"initialValue": {
													"baseExpression": {
														"id": 795,
														"name": "purchases",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 396,
														"src": "8585:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$391_storage_$",
															"typeString": "mapping(uint256 => struct ServiceEscrow.Purchase storage ref)"
														}
													},
													"id": 797,
													"indexExpression": {
														"id": 796,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 789,
														"src": "8595:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8585:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$391_storage",
														"typeString": "struct ServiceEscrow.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8557:49:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 800,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "8625:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8629:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "8625:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 802,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 794,
																	"src": "8639:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																		"typeString": "struct ServiceEscrow.Purchase storage pointer"
																	}
																},
																"id": 803,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8648:5:1",
																"memberName": "buyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 382,
																"src": "8639:14:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8625:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a2063616c6c6572206973206e6f7420746865206275796572",
															"id": 805,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8655:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6",
																"typeString": "literal_string \"Escrow: caller is not the buyer\""
															},
															"value": "Escrow: caller is not the buyer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6",
																"typeString": "literal_string \"Escrow: caller is not the buyer\""
															}
														],
														"id": 799,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8617:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8617:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 807,
												"nodeType": "ExpressionStatement",
												"src": "8617:72:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 811,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "8707:17:1",
															"subExpression": {
																"expression": {
																	"id": 809,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 794,
																	"src": "8708:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																		"typeString": "struct ServiceEscrow.Purchase storage pointer"
																	}
																},
																"id": 810,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8717:7:1",
																"memberName": "claimed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 386,
																"src": "8708:16:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207061796d656e7420616c726561647920636c61696d6564",
															"id": 812,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8736:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8",
																"typeString": "literal_string \"Escrow: payment already claimed\""
															},
															"value": "Escrow: payment already claimed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8",
																"typeString": "literal_string \"Escrow: payment already claimed\""
															}
														],
														"id": 808,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8699:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8699:71:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 814,
												"nodeType": "ExpressionStatement",
												"src": "8699:71:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 818,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "8788:18:1",
															"subExpression": {
																"expression": {
																	"id": 816,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 794,
																	"src": "8789:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																		"typeString": "struct ServiceEscrow.Purchase storage pointer"
																	}
																},
																"id": 817,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8798:8:1",
																"memberName": "disputed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 388,
																"src": "8789:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a206469737075746520616c726561647920726169736564",
															"id": 819,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8817:32:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4",
																"typeString": "literal_string \"Escrow: dispute already raised\""
															},
															"value": "Escrow: dispute already raised"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4",
																"typeString": "literal_string \"Escrow: dispute already raised\""
															}
														],
														"id": 815,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8780:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8780:70:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 821,
												"nodeType": "ExpressionStatement",
												"src": "8780:70:1"
											},
											{
												"expression": {
													"id": 826,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 822,
															"name": "purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 794,
															"src": "8861:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																"typeString": "struct ServiceEscrow.Purchase storage pointer"
															}
														},
														"id": 824,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8870:8:1",
														"memberName": "disputed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 388,
														"src": "8861:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 825,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8881:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "8861:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 827,
												"nodeType": "ExpressionStatement",
												"src": "8861:24:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 829,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 789,
															"src": "8914:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 828,
														"name": "DisputeRaised",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 422,
														"src": "8900:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 830,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8900:25:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 831,
												"nodeType": "EmitStatement",
												"src": "8895:30:1"
											}
										]
									},
									"functionSelector": "a5c1674e",
									"id": 833,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "raiseDispute",
									"nameLocation": "8505:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 789,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "8526:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 833,
												"src": "8518:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 788,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8518:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8517:20:1"
									},
									"returnParameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8547:0:1"
									},
									"scope": 1052,
									"src": "8496:436:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 876,
										"nodeType": "Block",
										"src": "9129:244:1",
										"statements": [
											{
												"assignments": [
													845
												],
												"declarations": [
													{
														"constant": false,
														"id": 845,
														"mutability": "mutable",
														"name": "purchase",
														"nameLocation": "9156:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 876,
														"src": "9139:25:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
															"typeString": "struct ServiceEscrow.Purchase"
														},
														"typeName": {
															"id": 844,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 843,
																"name": "Purchase",
																"nameLocations": [
																	"9139:8:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 391,
																"src": "9139:8:1"
															},
															"referencedDeclaration": 391,
															"src": "9139:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																"typeString": "struct ServiceEscrow.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 849,
												"initialValue": {
													"baseExpression": {
														"id": 846,
														"name": "purchases",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 396,
														"src": "9167:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$391_storage_$",
															"typeString": "mapping(uint256 => struct ServiceEscrow.Purchase storage ref)"
														}
													},
													"id": 848,
													"indexExpression": {
														"id": 847,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 836,
														"src": "9177:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9167:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$391_storage",
														"typeString": "struct ServiceEscrow.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9139:49:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 851,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "9206:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																		"typeString": "struct ServiceEscrow.Purchase storage pointer"
																	}
																},
																"id": 852,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9215:8:1",
																"memberName": "disputed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 388,
																"src": "9206:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"id": 855,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "9227:18:1",
																"subExpression": {
																	"expression": {
																		"id": 853,
																		"name": "purchase",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 845,
																		"src": "9228:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																			"typeString": "struct ServiceEscrow.Purchase storage pointer"
																		}
																	},
																	"id": 854,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9237:8:1",
																	"memberName": "resolved",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 390,
																	"src": "9228:17:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9206:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20696e76616c6964207374617465",
															"id": 857,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9247:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e",
																"typeString": "literal_string \"Escrow: invalid state\""
															},
															"value": "Escrow: invalid state"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e",
																"typeString": "literal_string \"Escrow: invalid state\""
															}
														],
														"id": 850,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9198:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 858,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9198:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 859,
												"nodeType": "ExpressionStatement",
												"src": "9198:73:1"
											},
											{
												"expression": {
													"id": 864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 860,
															"name": "purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 845,
															"src": "9282:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																"typeString": "struct ServiceEscrow.Purchase storage pointer"
															}
														},
														"id": 862,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "9291:8:1",
														"memberName": "resolved",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 390,
														"src": "9282:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 863,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9302:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "9282:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 865,
												"nodeType": "ExpressionStatement",
												"src": "9282:24:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 869,
																		"name": "purchase",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 845,
																		"src": "9333:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																			"typeString": "struct ServiceEscrow.Purchase storage pointer"
																		}
																	},
																	"id": 870,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9342:5:1",
																	"memberName": "buyer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 382,
																	"src": "9333:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 868,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9325:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 867,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9325:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 871,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9325:23:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 872,
																"name": "purchase",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 845,
																"src": "9350:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																	"typeString": "struct ServiceEscrow.Purchase storage pointer"
																}
															},
															"id": 873,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9359:6:1",
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 384,
															"src": "9350:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 866,
														"name": "_sendETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1046,
														"src": "9316:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 874,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9316:50:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 875,
												"nodeType": "ExpressionStatement",
												"src": "9316:50:1"
											}
										]
									},
									"documentation": {
										"id": 834,
										"nodeType": "StructuredDocumentation",
										"src": "8938:104:1",
										"text": " @dev Refunds the buyer – callable only by the factory after successful arbitration."
									},
									"functionSelector": "88985ec5",
									"id": 877,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 839,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 838,
												"name": "onlyFactory",
												"nameLocations": [
													"9104:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 462,
												"src": "9104:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "9104:11:1"
										},
										{
											"id": 841,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 840,
												"name": "nonReentrant",
												"nameLocations": [
													"9116:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 484,
												"src": "9116:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "9116:12:1"
										}
									],
									"name": "factoryRefundBuyer",
									"nameLocation": "9056:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 837,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 836,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "9083:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "9075:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 835,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9075:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9074:20:1"
									},
									"returnParameters": {
										"id": 842,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9129:0:1"
									},
									"scope": 1052,
									"src": "9047:326:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 923,
										"nodeType": "Block",
										"src": "9560:259:1",
										"statements": [
											{
												"assignments": [
													889
												],
												"declarations": [
													{
														"constant": false,
														"id": 889,
														"mutability": "mutable",
														"name": "purchase",
														"nameLocation": "9587:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 923,
														"src": "9570:25:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
															"typeString": "struct ServiceEscrow.Purchase"
														},
														"typeName": {
															"id": 888,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 887,
																"name": "Purchase",
																"nameLocations": [
																	"9570:8:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 391,
																"src": "9570:8:1"
															},
															"referencedDeclaration": 391,
															"src": "9570:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																"typeString": "struct ServiceEscrow.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 893,
												"initialValue": {
													"baseExpression": {
														"id": 890,
														"name": "purchases",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 396,
														"src": "9598:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$391_storage_$",
															"typeString": "mapping(uint256 => struct ServiceEscrow.Purchase storage ref)"
														}
													},
													"id": 892,
													"indexExpression": {
														"id": 891,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 880,
														"src": "9608:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "9598:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$391_storage",
														"typeString": "struct ServiceEscrow.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9570:49:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 904,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 900,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 897,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "!",
																	"prefix": true,
																	"src": "9637:17:1",
																	"subExpression": {
																		"expression": {
																			"id": 895,
																			"name": "purchase",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 889,
																			"src": "9638:8:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																				"typeString": "struct ServiceEscrow.Purchase storage pointer"
																			}
																		},
																		"id": 896,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "9647:7:1",
																		"memberName": "claimed",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 386,
																		"src": "9638:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"expression": {
																		"id": 898,
																		"name": "purchase",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 889,
																		"src": "9658:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																			"typeString": "struct ServiceEscrow.Purchase storage pointer"
																		}
																	},
																	"id": 899,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9667:8:1",
																	"memberName": "disputed",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 388,
																	"src": "9658:17:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "9637:38:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"id": 903,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "9679:18:1",
																"subExpression": {
																	"expression": {
																		"id": 901,
																		"name": "purchase",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 889,
																		"src": "9680:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																			"typeString": "struct ServiceEscrow.Purchase storage pointer"
																		}
																	},
																	"id": 902,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "9689:8:1",
																	"memberName": "resolved",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 390,
																	"src": "9680:17:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "9637:60:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20696e76616c6964207374617465",
															"id": 905,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9699:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e",
																"typeString": "literal_string \"Escrow: invalid state\""
															},
															"value": "Escrow: invalid state"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e",
																"typeString": "literal_string \"Escrow: invalid state\""
															}
														],
														"id": 894,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9629:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 906,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9629:94:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 907,
												"nodeType": "ExpressionStatement",
												"src": "9629:94:1"
											},
											{
												"expression": {
													"id": 912,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 908,
															"name": "purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 889,
															"src": "9734:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																"typeString": "struct ServiceEscrow.Purchase storage pointer"
															}
														},
														"id": 910,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "9743:8:1",
														"memberName": "resolved",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 390,
														"src": "9734:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 911,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9754:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "9734:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 913,
												"nodeType": "ExpressionStatement",
												"src": "9734:24:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 917,
																	"name": "provider",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 364,
																	"src": "9785:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 916,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9777:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 915,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9777:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 918,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9777:17:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 919,
																"name": "purchase",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 889,
																"src": "9796:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Purchase_$391_storage_ptr",
																	"typeString": "struct ServiceEscrow.Purchase storage pointer"
																}
															},
															"id": 920,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "9805:6:1",
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 384,
															"src": "9796:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 914,
														"name": "_sendETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1046,
														"src": "9768:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 921,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9768:44:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 922,
												"nodeType": "ExpressionStatement",
												"src": "9768:44:1"
											}
										]
									},
									"documentation": {
										"id": 878,
										"nodeType": "StructuredDocumentation",
										"src": "9379:88:1",
										"text": " @dev Releases funds to the provider – callable only by the factory."
									},
									"functionSelector": "df686ded",
									"id": 924,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 883,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 882,
												"name": "onlyFactory",
												"nameLocations": [
													"9535:11:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 462,
												"src": "9535:11:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "9535:11:1"
										},
										{
											"id": 885,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 884,
												"name": "nonReentrant",
												"nameLocations": [
													"9547:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 484,
												"src": "9547:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "9547:12:1"
										}
									],
									"name": "factoryReleaseToProvider",
									"nameLocation": "9481:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 881,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "9514:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 924,
												"src": "9506:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 879,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9506:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9505:20:1"
									},
									"returnParameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9560:0:1"
									},
									"scope": 1052,
									"src": "9472:347:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 947,
										"nodeType": "Block",
										"src": "9958:119:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 939,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 935,
																			"name": "newGateway",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 927,
																			"src": "9982:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		],
																		"id": 934,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "9976:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 933,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "9976:5:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 936,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9976:17:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																"id": 937,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "9994:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "9976:24:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 938,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10003:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "9976:28:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20676174657761792063616e6e6f7420626520656d707479",
															"id": 940,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10006:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808",
																"typeString": "literal_string \"Escrow: gateway cannot be empty\""
															},
															"value": "Escrow: gateway cannot be empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808",
																"typeString": "literal_string \"Escrow: gateway cannot be empty\""
															}
														],
														"id": 932,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9968:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 941,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9968:72:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 942,
												"nodeType": "ExpressionStatement",
												"src": "9968:72:1"
											},
											{
												"expression": {
													"id": 945,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 943,
														"name": "gateway",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 373,
														"src": "10050:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 944,
														"name": "newGateway",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 927,
														"src": "10060:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_calldata_ptr",
															"typeString": "string calldata"
														}
													},
													"src": "10050:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 946,
												"nodeType": "ExpressionStatement",
												"src": "10050:20:1"
											}
										]
									},
									"documentation": {
										"id": 925,
										"nodeType": "StructuredDocumentation",
										"src": "9825:55:1",
										"text": " @notice Update the CCIP gateway URL."
									},
									"functionSelector": "e7261687",
									"id": 948,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 930,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 929,
												"name": "onlyProvider",
												"nameLocations": [
													"9945:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 449,
												"src": "9945:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "9945:12:1"
										}
									],
									"name": "updateGateway",
									"nameLocation": "9894:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "newGateway",
												"nameLocation": "9924:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 948,
												"src": "9908:26:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 926,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9908:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9907:28:1"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9958:0:1"
									},
									"scope": 1052,
									"src": "9885:192:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 960,
										"nodeType": "Block",
										"src": "10236:45:1",
										"statements": [
											{
												"expression": {
													"id": 958,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 956,
														"name": "description",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "10246:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 957,
														"name": "newDescription",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 951,
														"src": "10260:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_string_calldata_ptr",
															"typeString": "string calldata"
														}
													},
													"src": "10246:28:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 959,
												"nodeType": "ExpressionStatement",
												"src": "10246:28:1"
											}
										]
									},
									"documentation": {
										"id": 949,
										"nodeType": "StructuredDocumentation",
										"src": "10083:67:1",
										"text": " @notice Update the human‑readable description."
									},
									"functionSelector": "e735b48a",
									"id": 961,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 954,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 953,
												"name": "onlyProvider",
												"nameLocations": [
													"10223:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 449,
												"src": "10223:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "10223:12:1"
										}
									],
									"name": "updateDescription",
									"nameLocation": "10164:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 952,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 951,
												"mutability": "mutable",
												"name": "newDescription",
												"nameLocation": "10198:14:1",
												"nodeType": "VariableDeclaration",
												"scope": 961,
												"src": "10182:30:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 950,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "10182:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10181:32:1"
									},
									"returnParameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10236:0:1"
									},
									"scope": 1052,
									"src": "10155:126:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 983,
										"nodeType": "Block",
										"src": "10428:125:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 975,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 970,
																"name": "newSigner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 964,
																"src": "10446:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 973,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10467:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 972,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10459:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 971,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10459:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 974,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10459:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10446:23:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207369676e65722063616e6e6f74206265207a65726f2061646472657373",
															"id": 976,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10471:39:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216",
																"typeString": "literal_string \"Escrow: signer cannot be zero address\""
															},
															"value": "Escrow: signer cannot be zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cd1afa286e5f0d9de5e28d090d8f179f3fb990c3911672102173d3911675f216",
																"typeString": "literal_string \"Escrow: signer cannot be zero address\""
															}
														],
														"id": 969,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10438:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 977,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10438:73:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 978,
												"nodeType": "ExpressionStatement",
												"src": "10438:73:1"
											},
											{
												"expression": {
													"id": 981,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 979,
														"name": "gatewaySigner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 376,
														"src": "10521:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 980,
														"name": "newSigner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 964,
														"src": "10537:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10521:25:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 982,
												"nodeType": "ExpressionStatement",
												"src": "10521:25:1"
											}
										]
									},
									"documentation": {
										"id": 962,
										"nodeType": "StructuredDocumentation",
										"src": "10287:66:1",
										"text": " @notice Update the CCIP gateway signer address."
									},
									"functionSelector": "11acfb3d",
									"id": 984,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 967,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 966,
												"name": "onlyProvider",
												"nameLocations": [
													"10415:12:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 449,
												"src": "10415:12:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "10415:12:1"
										}
									],
									"name": "updateGatewaySigner",
									"nameLocation": "10367:19:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "newSigner",
												"nameLocation": "10395:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "10387:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10387:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10386:19:1"
									},
									"returnParameters": {
										"id": 968,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10428:0:1"
									},
									"scope": 1052,
									"src": "10358:195:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 999,
										"nodeType": "Block",
										"src": "10749:65:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 995,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 987,
															"src": "10779:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 996,
															"name": "deliverableHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 989,
															"src": "10791:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 994,
														"name": "_claimDigest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1023,
														"src": "10766:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (uint256,bytes32) view returns (bytes32)"
														}
													},
													"id": 997,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10766:41:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 993,
												"id": 998,
												"nodeType": "Return",
												"src": "10759:48:1"
											}
										]
									},
									"documentation": {
										"id": 985,
										"nodeType": "StructuredDocumentation",
										"src": "10559:87:1",
										"text": " @dev Compute the digest that a buyer must sign to authorise payment."
									},
									"functionSelector": "5ec96f75",
									"id": 1000,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimDigest",
									"nameLocation": "10660:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "10680:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "10672:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10672:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "10700:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "10692:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 988,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10692:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10671:45:1"
									},
									"returnParameters": {
										"id": 993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 992,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1000,
												"src": "10740:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 991,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10740:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10739:9:1"
									},
									"scope": 1052,
									"src": "10651:163:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1022,
										"nodeType": "Block",
										"src": "11003:89:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1015,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "11049:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																				"typeString": "contract ServiceEscrow"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																				"typeString": "contract ServiceEscrow"
																			}
																		],
																		"id": 1014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "11041:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1013,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "11041:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1016,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "11041:13:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1017,
																	"name": "purchaseId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1003,
																	"src": "11056:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1018,
																	"name": "deliverableHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1005,
																	"src": "11068:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1011,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "11030:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1012,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "11034:6:1",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "11030:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1019,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11030:54:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1010,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "11020:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1020,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11020:65:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1009,
												"id": 1021,
												"nodeType": "Return",
												"src": "11013:72:1"
											}
										]
									},
									"documentation": {
										"id": 1001,
										"nodeType": "StructuredDocumentation",
										"src": "10820:79:1",
										"text": " @dev Internal: generate claim digest without message prefix."
									},
									"id": 1023,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_claimDigest",
									"nameLocation": "10913:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "10934:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "10926:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1002,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10926:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "10954:15:1",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "10946:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1004,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10946:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10925:45:1"
									},
									"returnParameters": {
										"id": 1009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1023,
												"src": "10994:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1007,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10994:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10993:9:1"
									},
									"scope": 1052,
									"src": "10904:188:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1045,
										"nodeType": "Block",
										"src": "11243:119:1",
										"statements": [
											{
												"assignments": [
													1032,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1032,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "11259:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 1045,
														"src": "11254:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1031,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "11254:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1039,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1037,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11295:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1033,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1026,
																"src": "11272:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1034,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "11275:4:1",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "11272:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1036,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1035,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1028,
																"src": "11287:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "11272:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1038,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11272:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11253:45:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1041,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1032,
															"src": "11316:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20455448207472616e73666572206661696c6564",
															"id": 1042,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11325:29:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c",
																"typeString": "literal_string \"Escrow: ETH transfer failed\""
															},
															"value": "Escrow: ETH transfer failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c",
																"typeString": "literal_string \"Escrow: ETH transfer failed\""
															}
														],
														"id": 1040,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11308:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1043,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11308:47:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1044,
												"nodeType": "ExpressionStatement",
												"src": "11308:47:1"
											}
										]
									},
									"documentation": {
										"id": 1024,
										"nodeType": "StructuredDocumentation",
										"src": "11098:78:1",
										"text": " @dev Internal helper to send ETH and bubble up any failure."
									},
									"id": 1046,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_sendETH",
									"nameLocation": "11190:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1029,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1026,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11215:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "11199:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1025,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11199:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1028,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11227:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1046,
												"src": "11219:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1027,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11219:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11198:36:1"
									},
									"returnParameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11243:0:1"
									},
									"scope": 1052,
									"src": "11181:181:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1050,
										"nodeType": "Block",
										"src": "11483:2:1",
										"statements": []
									},
									"documentation": {
										"id": 1047,
										"nodeType": "StructuredDocumentation",
										"src": "11368:83:1",
										"text": "@notice Receive function – allows provider to top‑up escrow if ever needed."
									},
									"id": 1051,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11463:2:1"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11483:0:1"
									},
									"scope": 1052,
									"src": "11456:29:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1535,
							"src": "1007:10480:1",
							"usedErrors": [
								10,
								15,
								20,
								436
							],
							"usedEvents": [
								405,
								412,
								417,
								422
							]
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "EscroDotFactory",
							"contractDependencies": [
								1052
							],
							"contractKind": "contract",
							"documentation": {
								"id": 1053,
								"nodeType": "StructuredDocumentation",
								"src": "11489:119:1",
								"text": " @title EscroDotFactory\n @notice Deploys ServiceEscrow contracts and manages provider stakes & arbitration."
							},
							"fullyImplemented": true,
							"id": 1534,
							"linearizedBaseContracts": [
								1534
							],
							"name": "EscroDotFactory",
							"nameLocation": "11618:15:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 1054,
										"nodeType": "StructuredDocumentation",
										"src": "11885:62:1",
										"text": "@notice Map: serviceId ⇒ ServiceEscrow contract address."
									},
									"functionSelector": "0a790eb7",
									"id": 1058,
									"mutability": "mutable",
									"name": "services",
									"nameLocation": "11987:8:1",
									"nodeType": "VariableDeclaration",
									"scope": 1534,
									"src": "11952:43:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
										"typeString": "mapping(bytes32 => address)"
									},
									"typeName": {
										"id": 1057,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1055,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "11960:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "11952:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
											"typeString": "mapping(bytes32 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1056,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "11971:7:1",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1059,
										"nodeType": "StructuredDocumentation",
										"src": "12002:64:1",
										"text": "@notice List of all serviceIds (for off‑chain pagination)."
									},
									"functionSelector": "69d26933",
									"id": 1062,
									"mutability": "mutable",
									"name": "serviceIds",
									"nameLocation": "12088:10:1",
									"nodeType": "VariableDeclaration",
									"scope": 1534,
									"src": "12071:27:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
										"typeString": "bytes32[]"
									},
									"typeName": {
										"baseType": {
											"id": 1060,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "12071:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"id": 1061,
										"nodeType": "ArrayTypeName",
										"src": "12071:9:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
											"typeString": "bytes32[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1063,
										"nodeType": "StructuredDocumentation",
										"src": "12350:71:1",
										"text": "@notice Map: serviceId ⇒ provider's collateral (held by factory)."
									},
									"functionSelector": "8fee6407",
									"id": 1067,
									"mutability": "mutable",
									"name": "stakes",
									"nameLocation": "12461:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 1534,
									"src": "12426:41:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
										"typeString": "mapping(bytes32 => uint256)"
									},
									"typeName": {
										"id": 1066,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 1064,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "12434:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "12426:27:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
											"typeString": "mapping(bytes32 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1065,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "12445:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1068,
										"nodeType": "StructuredDocumentation",
										"src": "12719:33:1",
										"text": "@notice New service deployed."
									},
									"eventSelector": "55617356247c187daefc7e9c394e92ac79246493b4da24a6d351d4076f9bac4d",
									"id": 1080,
									"name": "ServiceDeployed",
									"nameLocation": "12763:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1079,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1070,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "12795:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "12779:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1069,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12779:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"indexed": false,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "12813:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "12806:11:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1071,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12806:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1074,
												"indexed": false,
												"mutability": "mutable",
												"name": "escrow",
												"nameLocation": "12827:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "12819:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1073,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12819:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1076,
												"indexed": true,
												"mutability": "mutable",
												"name": "provider",
												"nameLocation": "12851:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "12835:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1075,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12835:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1078,
												"indexed": false,
												"mutability": "mutable",
												"name": "stake",
												"nameLocation": "12869:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 1080,
												"src": "12861:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1077,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12861:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12778:97:1"
									},
									"src": "12757:119:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1081,
										"nodeType": "StructuredDocumentation",
										"src": "12882:43:1",
										"text": "@notice Provider topped up their stake."
									},
									"eventSelector": "077a7ccf44b26a4e3477c9abb31e09a68f3d67436717d4ffa709adb2949dc70b",
									"id": 1089,
									"name": "StakeToppedUp",
									"nameLocation": "12936:13:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "12966:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1089,
												"src": "12950:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1082,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12950:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1085,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12985:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1089,
												"src": "12977:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12977:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1087,
												"indexed": false,
												"mutability": "mutable",
												"name": "newTotal",
												"nameLocation": "13001:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1089,
												"src": "12993:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1086,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12993:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12949:61:1"
									},
									"src": "12930:81:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1090,
										"nodeType": "StructuredDocumentation",
										"src": "13017:50:1",
										"text": "@notice Provider withdrew part of their stake."
									},
									"eventSelector": "64b42729c893e3b5f300276ef3057e004bd614dfc15219a30a3b069ec4386933",
									"id": 1098,
									"name": "StakeWithdrawn",
									"nameLocation": "13078:14:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1097,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1092,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "13109:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1098,
												"src": "13093:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1091,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13093:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1094,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13128:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1098,
												"src": "13120:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13120:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1096,
												"indexed": false,
												"mutability": "mutable",
												"name": "newTotal",
												"nameLocation": "13144:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1098,
												"src": "13136:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1095,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13136:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13092:61:1"
									},
									"src": "13072:82:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1099,
										"nodeType": "StructuredDocumentation",
										"src": "13160:43:1",
										"text": "@notice Dispute resolved by an arbiter."
									},
									"eventSelector": "bc15360fdbc18726032673554343b47ea8c03297136da385c28550253778baf5",
									"id": 1109,
									"name": "DisputeResolved",
									"nameLocation": "13214:15:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1108,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1101,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "13246:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "13230:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1100,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13230:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1103,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "13273:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "13257:26:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13257:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1105,
												"indexed": false,
												"mutability": "mutable",
												"name": "refunded",
												"nameLocation": "13290:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "13285:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1104,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13285:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1107,
												"indexed": true,
												"mutability": "mutable",
												"name": "arbiter",
												"nameLocation": "13316:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1109,
												"src": "13300:23:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13300:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13229:95:1"
									},
									"src": "13208:117:1"
								},
								{
									"body": {
										"id": 1224,
										"nodeType": "Block",
										"src": "13859:881:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1128,
																			"name": "name",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1112,
																			"src": "13883:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		],
																		"id": 1127,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "13877:5:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1126,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "13877:5:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "13877:11:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																"id": 1130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13889:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "13877:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 1131,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13898:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13877:22:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a206e616d652063616e6e6f7420626520656d707479",
															"id": 1133,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13901:31:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0ebd5ed1e3fc00d82b641a5ddd6970eece6fee0bb9a2acf92e19df5edcd82b5d",
																"typeString": "literal_string \"Factory: name cannot be empty\""
															},
															"value": "Factory: name cannot be empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0ebd5ed1e3fc00d82b641a5ddd6970eece6fee0bb9a2acf92e19df5edcd82b5d",
																"typeString": "literal_string \"Factory: name cannot be empty\""
															}
														],
														"id": 1125,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13869:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1134,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13869:64:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1135,
												"nodeType": "ExpressionStatement",
												"src": "13869:64:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1137,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "13951:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1138,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13955:5:1",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "13951:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1139,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1114,
																"src": "13964:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13951:18:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a207374616b65206d75737420636f766572206174206c65617374206f6e6520726566756e64",
															"id": 1141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13975:47:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a32fb7eb5859af14d9f22b4c155b99fd0f88c319b62ba9957f02f7c238ffc608",
																"typeString": "literal_string \"Factory: stake must cover at least one refund\""
															},
															"value": "Factory: stake must cover at least one refund"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a32fb7eb5859af14d9f22b4c155b99fd0f88c319b62ba9957f02f7c238ffc608",
																"typeString": "literal_string \"Factory: stake must cover at least one refund\""
															}
														],
														"id": 1136,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13943:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13943:80:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1143,
												"nodeType": "ExpressionStatement",
												"src": "13943:80:1"
											},
											{
												"assignments": [
													1145
												],
												"declarations": [
													{
														"constant": false,
														"id": 1145,
														"mutability": "mutable",
														"name": "serviceId",
														"nameLocation": "14042:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 1224,
														"src": "14034:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1144,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "14034:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1152,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1149,
																	"name": "name",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1112,
																	"src": "14070:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_calldata_ptr",
																		"typeString": "string calldata"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_calldata_ptr",
																		"typeString": "string calldata"
																	}
																],
																"id": 1148,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14064:5:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1147,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "14064:5:1",
																	"typeDescriptions": {}
																}
															},
															"id": 1150,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14064:11:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"id": 1146,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "14054:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14054:22:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14034:42:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1161,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 1154,
																	"name": "services",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1058,
																	"src": "14094:8:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
																		"typeString": "mapping(bytes32 => address)"
																	}
																},
																"id": 1156,
																"indexExpression": {
																	"id": 1155,
																	"name": "serviceId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1145,
																	"src": "14103:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "14094:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "14125:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1158,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "14117:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1157,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "14117:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 1160,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14117:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "14094:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a2073657276696365206e616d6520616c72656164792074616b656e",
															"id": 1162,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14129:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0aa9f05bab895d0aa6548722458ce14a26ab4517847b5c08d27168045f5b9dff",
																"typeString": "literal_string \"Factory: service name already taken\""
															},
															"value": "Factory: service name already taken"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0aa9f05bab895d0aa6548722458ce14a26ab4517847b5c08d27168045f5b9dff",
																"typeString": "literal_string \"Factory: service name already taken\""
															}
														],
														"id": 1153,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14086:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1163,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14086:81:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1164,
												"nodeType": "ExpressionStatement",
												"src": "14086:81:1"
											},
											{
												"assignments": [
													1167
												],
												"declarations": [
													{
														"constant": false,
														"id": 1167,
														"mutability": "mutable",
														"name": "newEscrow",
														"nameLocation": "14192:9:1",
														"nodeType": "VariableDeclaration",
														"scope": 1224,
														"src": "14178:23:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
															"typeString": "contract ServiceEscrow"
														},
														"typeName": {
															"id": 1166,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1165,
																"name": "ServiceEscrow",
																"nameLocations": [
																	"14178:13:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1052,
																"src": "14178:13:1"
															},
															"referencedDeclaration": 1052,
															"src": "14178:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																"typeString": "contract ServiceEscrow"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1183,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1173,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "14254:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EscroDotFactory_$1534",
																		"typeString": "contract EscroDotFactory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EscroDotFactory_$1534",
																		"typeString": "contract EscroDotFactory"
																	}
																],
																"id": 1172,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14246:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1171,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "14246:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 1174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14246:13:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1175,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1145,
															"src": "14285:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 1176,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "14319:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "14323:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "14319:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1178,
															"name": "price",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1114,
															"src": "14351:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1179,
															"name": "gateway",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1116,
															"src": "14380:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														},
														{
															"id": 1180,
															"name": "gatewaySigner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1118,
															"src": "14417:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1181,
															"name": "description",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1120,
															"src": "14458:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														],
														"id": 1170,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "14204:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_creation_nonpayable$_t_address_$_t_bytes32_$_t_address_$_t_uint256_$_t_string_memory_ptr_$_t_address_$_t_string_memory_ptr_$returns$_t_contract$_ServiceEscrow_$1052_$",
															"typeString": "function (address,bytes32,address,uint256,string memory,address,string memory) returns (contract ServiceEscrow)"
														},
														"typeName": {
															"id": 1169,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1168,
																"name": "ServiceEscrow",
																"nameLocations": [
																	"14208:13:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1052,
																"src": "14208:13:1"
															},
															"referencedDeclaration": 1052,
															"src": "14208:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																"typeString": "contract ServiceEscrow"
															}
														}
													},
													"id": 1182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [
														"14236:8:1",
														"14273:10:1",
														"14308:9:1",
														"14343:6:1",
														"14370:8:1",
														"14401:14:1",
														"14444:12:1"
													],
													"names": [
														"_factory",
														"_serviceId",
														"_provider",
														"_price",
														"_gateway",
														"_gatewaySigner",
														"_description"
													],
													"nodeType": "FunctionCall",
													"src": "14204:276:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
														"typeString": "contract ServiceEscrow"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14178:302:1"
											},
											{
												"expression": {
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1184,
															"name": "services",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1058,
															"src": "14491:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
																"typeString": "mapping(bytes32 => address)"
															}
														},
														"id": 1186,
														"indexExpression": {
															"id": 1185,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1145,
															"src": "14500:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "14491:19:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1189,
																"name": "newEscrow",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1167,
																"src": "14521:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																	"typeString": "contract ServiceEscrow"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																	"typeString": "contract ServiceEscrow"
																}
															],
															"id": 1188,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "14513:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1187,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "14513:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 1190,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "14513:18:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "14491:40:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1192,
												"nodeType": "ExpressionStatement",
												"src": "14491:40:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1196,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1145,
															"src": "14557:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1193,
															"name": "serviceIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "14541:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																"typeString": "bytes32[] storage ref"
															}
														},
														"id": 1195,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "14552:4:1",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "14541:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
															"typeString": "function (bytes32[] storage pointer,bytes32)"
														}
													},
													"id": 1197,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14541:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1198,
												"nodeType": "ExpressionStatement",
												"src": "14541:26:1"
											},
											{
												"expression": {
													"id": 1204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1199,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "14577:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1201,
														"indexExpression": {
															"id": 1200,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1145,
															"src": "14584:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "14577:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 1202,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "14597:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1203,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "14601:5:1",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "14597:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "14577:29:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1205,
												"nodeType": "ExpressionStatement",
												"src": "14577:29:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1207,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1145,
															"src": "14638:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1208,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1112,
															"src": "14649:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														},
														{
															"arguments": [
																{
																	"id": 1211,
																	"name": "newEscrow",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1167,
																	"src": "14663:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																		"typeString": "contract ServiceEscrow"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																		"typeString": "contract ServiceEscrow"
																	}
																],
																"id": 1210,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14655:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1209,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "14655:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 1212,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14655:18:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1213,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "14675:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "14679:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "14675:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 1215,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "14687:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1216,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "14691:5:1",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "14687:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1206,
														"name": "ServiceDeployed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1080,
														"src": "14622:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,string memory,address,address,uint256)"
														}
													},
													"id": 1217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14622:75:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1218,
												"nodeType": "EmitStatement",
												"src": "14617:80:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1221,
															"name": "newEscrow",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1167,
															"src": "14723:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																"typeString": "contract ServiceEscrow"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																"typeString": "contract ServiceEscrow"
															}
														],
														"id": 1220,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "14715:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_address_$",
															"typeString": "type(address)"
														},
														"typeName": {
															"id": 1219,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "14715:7:1",
															"typeDescriptions": {}
														}
													},
													"id": 1222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14715:18:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1124,
												"id": 1223,
												"nodeType": "Return",
												"src": "14708:25:1"
											}
										]
									},
									"documentation": {
										"id": 1110,
										"nodeType": "StructuredDocumentation",
										"src": "13331:298:1",
										"text": " @param name         Human‑readable service name (unique).\n @param price        Fixed price in wei.\n @param gateway      CCIP‑Read endpoint.\n @param description  IPFS CID or text description.\n `msg.value` – initial stake (must be ≥ `price`)."
									},
									"functionSelector": "a269eeb4",
									"id": 1225,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createService",
									"nameLocation": "13643:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1121,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "13682:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "13666:20:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1111,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "13666:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "13704:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "13696:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13696:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "gateway",
												"nameLocation": "13735:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "13719:23:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1115,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "13719:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1118,
												"mutability": "mutable",
												"name": "gatewaySigner",
												"nameLocation": "13760:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "13752:21:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13752:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1120,
												"mutability": "mutable",
												"name": "description",
												"nameLocation": "13799:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "13783:27:1",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1119,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "13783:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13656:160:1"
									},
									"returnParameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "escrow",
												"nameLocation": "13851:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1225,
												"src": "13843:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1122,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13843:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13842:16:1"
									},
									"scope": 1534,
									"src": "13634:1106:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1278,
										"nodeType": "Block",
										"src": "14851:402:1",
										"statements": [
											{
												"assignments": [
													1232
												],
												"declarations": [
													{
														"constant": false,
														"id": 1232,
														"mutability": "mutable",
														"name": "escrowAddr",
														"nameLocation": "14869:10:1",
														"nodeType": "VariableDeclaration",
														"scope": 1278,
														"src": "14861:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1231,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "14861:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1236,
												"initialValue": {
													"baseExpression": {
														"id": 1233,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "14882:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
															"typeString": "mapping(bytes32 => address)"
														}
													},
													"id": 1235,
													"indexExpression": {
														"id": 1234,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1228,
														"src": "14891:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "14882:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14861:40:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1238,
																"name": "escrowAddr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1232,
																"src": "14919:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1241,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "14941:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1240,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "14933:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1239,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "14933:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 1242,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "14933:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "14919:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a20756e6b6e6f776e2073657276696365",
															"id": 1244,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14945:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e",
																"typeString": "literal_string \"Factory: unknown service\""
															},
															"value": "Factory: unknown service"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e",
																"typeString": "literal_string \"Factory: unknown service\""
															}
														],
														"id": 1237,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14911:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1245,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14911:61:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1246,
												"nodeType": "ExpressionStatement",
												"src": "14911:61:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1258,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1248,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "15041:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1249,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "15045:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "15041:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1253,
																						"name": "escrowAddr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1232,
																						"src": "15077:10:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"id": 1252,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "15069:8:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_address_payable_$",
																						"typeString": "type(address payable)"
																					},
																					"typeName": {
																						"id": 1251,
																						"name": "address",
																						"nodeType": "ElementaryTypeName",
																						"src": "15069:8:1",
																						"stateMutability": "payable",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1254,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "15069:19:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address_payable",
																					"typeString": "address payable"
																				}
																			],
																			"id": 1250,
																			"name": "ServiceEscrow",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1052,
																			"src": "15055:13:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_ServiceEscrow_$1052_$",
																				"typeString": "type(contract ServiceEscrow)"
																			}
																		},
																		"id": 1255,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15055:34:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																			"typeString": "contract ServiceEscrow"
																		}
																	},
																	"id": 1256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15090:8:1",
																	"memberName": "provider",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 364,
																	"src": "15055:43:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																		"typeString": "function () view external returns (address)"
																	}
																},
																"id": 1257,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15055:45:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15041:59:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a2063616c6c6572206973206e6f742070726f7669646572",
															"id": 1259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5147aea77307eebbc82386d11f46cd6583e977ed77df0a1f2373dd831babb95e",
																"typeString": "literal_string \"Factory: caller is not provider\""
															},
															"value": "Factory: caller is not provider"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5147aea77307eebbc82386d11f46cd6583e977ed77df0a1f2373dd831babb95e",
																"typeString": "literal_string \"Factory: caller is not provider\""
															}
														],
														"id": 1247,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "15033:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15033:103:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1261,
												"nodeType": "ExpressionStatement",
												"src": "15033:103:1"
											},
											{
												"expression": {
													"id": 1267,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1262,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "15147:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1264,
														"indexExpression": {
															"id": 1263,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1228,
															"src": "15154:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "15147:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"expression": {
															"id": 1265,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "15168:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1266,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "15172:5:1",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "15168:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "15147:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1268,
												"nodeType": "ExpressionStatement",
												"src": "15147:30:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1270,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1228,
															"src": "15206:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 1271,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "15217:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1272,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "15221:5:1",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "15217:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1273,
																"name": "stakes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1067,
																"src": "15228:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																	"typeString": "mapping(bytes32 => uint256)"
																}
															},
															"id": 1275,
															"indexExpression": {
																"id": 1274,
																"name": "serviceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1228,
																"src": "15235:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15228:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1269,
														"name": "StakeToppedUp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1089,
														"src": "15192:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,uint256,uint256)"
														}
													},
													"id": 1276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15192:54:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1277,
												"nodeType": "EmitStatement",
												"src": "15187:59:1"
											}
										]
									},
									"documentation": {
										"id": 1226,
										"nodeType": "StructuredDocumentation",
										"src": "14746:44:1",
										"text": "@notice Increase stake for a service. "
									},
									"functionSelector": "eaa3668f",
									"id": 1279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "topUpStake",
									"nameLocation": "14804:10:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1228,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "14823:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1279,
												"src": "14815:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1227,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "14815:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14814:19:1"
									},
									"returnParameters": {
										"id": 1230,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14851:0:1"
									},
									"scope": 1534,
									"src": "14795:458:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1355,
										"nodeType": "Block",
										"src": "15420:519:1",
										"statements": [
											{
												"assignments": [
													1288
												],
												"declarations": [
													{
														"constant": false,
														"id": 1288,
														"mutability": "mutable",
														"name": "escrowAddr",
														"nameLocation": "15438:10:1",
														"nodeType": "VariableDeclaration",
														"scope": 1355,
														"src": "15430:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1287,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "15430:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1292,
												"initialValue": {
													"baseExpression": {
														"id": 1289,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "15451:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
															"typeString": "mapping(bytes32 => address)"
														}
													},
													"id": 1291,
													"indexExpression": {
														"id": 1290,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1282,
														"src": "15460:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "15451:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15430:40:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1299,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1294,
																"name": "escrowAddr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1288,
																"src": "15488:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1297,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15510:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1296,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15502:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1295,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "15502:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 1298,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15502:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15488:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a20756e6b6e6f776e2073657276696365",
															"id": 1300,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15514:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e",
																"typeString": "literal_string \"Factory: unknown service\""
															},
															"value": "Factory: unknown service"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e",
																"typeString": "literal_string \"Factory: unknown service\""
															}
														],
														"id": 1293,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "15480:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15480:61:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1302,
												"nodeType": "ExpressionStatement",
												"src": "15480:61:1"
											},
											{
												"assignments": [
													1305
												],
												"declarations": [
													{
														"constant": false,
														"id": 1305,
														"mutability": "mutable",
														"name": "escrow",
														"nameLocation": "15566:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 1355,
														"src": "15552:20:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
															"typeString": "contract ServiceEscrow"
														},
														"typeName": {
															"id": 1304,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1303,
																"name": "ServiceEscrow",
																"nameLocations": [
																	"15552:13:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1052,
																"src": "15552:13:1"
															},
															"referencedDeclaration": 1052,
															"src": "15552:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																"typeString": "contract ServiceEscrow"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1312,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1309,
																	"name": "escrowAddr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1288,
																	"src": "15597:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1308,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15589:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1307,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "15589:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1310,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15589:19:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 1306,
														"name": "ServiceEscrow",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1052,
														"src": "15575:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_ServiceEscrow_$1052_$",
															"typeString": "type(contract ServiceEscrow)"
														}
													},
													"id": 1311,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15575:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
														"typeString": "contract ServiceEscrow"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15552:57:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1319,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1314,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "15627:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1315,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "15631:6:1",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "15627:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1316,
																		"name": "escrow",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1305,
																		"src": "15641:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																			"typeString": "contract ServiceEscrow"
																		}
																	},
																	"id": 1317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15648:8:1",
																	"memberName": "provider",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 364,
																	"src": "15641:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
																		"typeString": "function () view external returns (address)"
																	}
																},
																"id": 1318,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15641:17:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15627:31:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a2063616c6c6572206973206e6f742070726f7669646572",
															"id": 1320,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15660:33:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5147aea77307eebbc82386d11f46cd6583e977ed77df0a1f2373dd831babb95e",
																"typeString": "literal_string \"Factory: caller is not provider\""
															},
															"value": "Factory: caller is not provider"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5147aea77307eebbc82386d11f46cd6583e977ed77df0a1f2373dd831babb95e",
																"typeString": "literal_string \"Factory: caller is not provider\""
															}
														],
														"id": 1313,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "15619:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1321,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15619:75:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1322,
												"nodeType": "ExpressionStatement",
												"src": "15619:75:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1324,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1284,
																"src": "15712:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 1325,
																	"name": "stakes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1067,
																	"src": "15722:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																		"typeString": "mapping(bytes32 => uint256)"
																	}
																},
																"id": 1327,
																"indexExpression": {
																	"id": 1326,
																	"name": "serviceId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1282,
																	"src": "15729:9:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "15722:17:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "15712:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a20696e73756666696369656e74207374616b652062616c616e6365",
															"id": 1329,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15741:37:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e11480b26723b251671881ef357122778bc578ee0426134da4dddb81bd998963",
																"typeString": "literal_string \"Factory: insufficient stake balance\""
															},
															"value": "Factory: insufficient stake balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e11480b26723b251671881ef357122778bc578ee0426134da4dddb81bd998963",
																"typeString": "literal_string \"Factory: insufficient stake balance\""
															}
														],
														"id": 1323,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "15704:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15704:75:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1331,
												"nodeType": "ExpressionStatement",
												"src": "15704:75:1"
											},
											{
												"expression": {
													"id": 1336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1332,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1067,
															"src": "15790:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1334,
														"indexExpression": {
															"id": 1333,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "15797:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "15790:17:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1335,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1284,
														"src": "15811:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "15790:27:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1337,
												"nodeType": "ExpressionStatement",
												"src": "15790:27:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1341,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "15844:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1342,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15848:6:1",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "15844:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1340,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15836:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1339,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "15836:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1343,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15836:19:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1344,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "15857:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1338,
														"name": "_sendETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1525,
														"src": "15827:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 1345,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15827:37:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1346,
												"nodeType": "ExpressionStatement",
												"src": "15827:37:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1348,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1282,
															"src": "15895:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1349,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1284,
															"src": "15906:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1350,
																"name": "stakes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1067,
																"src": "15914:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																	"typeString": "mapping(bytes32 => uint256)"
																}
															},
															"id": 1352,
															"indexExpression": {
																"id": 1351,
																"name": "serviceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1282,
																"src": "15921:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "15914:17:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1347,
														"name": "StakeWithdrawn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1098,
														"src": "15880:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,uint256,uint256)"
														}
													},
													"id": 1353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15880:52:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1354,
												"nodeType": "EmitStatement",
												"src": "15875:57:1"
											}
										]
									},
									"documentation": {
										"id": 1280,
										"nodeType": "StructuredDocumentation",
										"src": "15259:89:1",
										"text": " @notice Withdraw unused stake (cannot exceed balance held by factory)."
									},
									"functionSelector": "19dc5716",
									"id": 1356,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "withdrawStake",
									"nameLocation": "15362:13:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1282,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "15384:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "15376:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1281,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15376:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1284,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "15403:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1356,
												"src": "15395:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1283,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15395:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15375:35:1"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15420:0:1"
									},
									"scope": 1534,
									"src": "15353:586:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1455,
										"nodeType": "Block",
										"src": "16369:914:1",
										"statements": [
											{
												"assignments": [
													1367
												],
												"declarations": [
													{
														"constant": false,
														"id": 1367,
														"mutability": "mutable",
														"name": "escrowAddr",
														"nameLocation": "16387:10:1",
														"nodeType": "VariableDeclaration",
														"scope": 1455,
														"src": "16379:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1366,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "16379:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1371,
												"initialValue": {
													"baseExpression": {
														"id": 1368,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1058,
														"src": "16400:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
															"typeString": "mapping(bytes32 => address)"
														}
													},
													"id": 1370,
													"indexExpression": {
														"id": 1369,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1359,
														"src": "16409:9:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "16400:19:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16379:40:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 1378,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1373,
																"name": "escrowAddr",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1367,
																"src": "16437:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 1376,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "16459:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 1375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "16451:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 1374,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "16451:7:1",
																		"typeDescriptions": {}
																	}
																},
																"id": 1377,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16451:10:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "16437:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a20756e6b6e6f776e2073657276696365",
															"id": 1379,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16463:26:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e",
																"typeString": "literal_string \"Factory: unknown service\""
															},
															"value": "Factory: unknown service"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_96d5d65e968b679cf6e031afea35841ac8bb1d85d77a2982699cfa1cf95b706e",
																"typeString": "literal_string \"Factory: unknown service\""
															}
														],
														"id": 1372,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "16429:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1380,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16429:61:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1381,
												"nodeType": "ExpressionStatement",
												"src": "16429:61:1"
											},
											{
												"assignments": [
													1384
												],
												"declarations": [
													{
														"constant": false,
														"id": 1384,
														"mutability": "mutable",
														"name": "escrow",
														"nameLocation": "16515:6:1",
														"nodeType": "VariableDeclaration",
														"scope": 1455,
														"src": "16501:20:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
															"typeString": "contract ServiceEscrow"
														},
														"typeName": {
															"id": 1383,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1382,
																"name": "ServiceEscrow",
																"nameLocations": [
																	"16501:13:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1052,
																"src": "16501:13:1"
															},
															"referencedDeclaration": 1052,
															"src": "16501:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																"typeString": "contract ServiceEscrow"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1391,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1388,
																	"name": "escrowAddr",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1367,
																	"src": "16546:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1387,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16538:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1386,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16538:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1389,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16538:19:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 1385,
														"name": "ServiceEscrow",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1052,
														"src": "16524:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_contract$_ServiceEscrow_$1052_$",
															"typeString": "type(contract ServiceEscrow)"
														}
													},
													"id": 1390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16524:34:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
														"typeString": "contract ServiceEscrow"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16501:57:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1393,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "16646:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 1394,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "16650:5:1",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "16646:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 1395,
																		"name": "escrow",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1384,
																		"src": "16659:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																			"typeString": "contract ServiceEscrow"
																		}
																	},
																	"id": 1396,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "16666:5:1",
																	"memberName": "price",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 367,
																	"src": "16659:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																		"typeString": "function () view external returns (uint256)"
																	}
																},
																"id": 1397,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16659:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "16646:27:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a206172626974657220626f6e6420746f6f206c6f77",
															"id": 1399,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16675:31:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8c33e9b7e89158e89f6230403ddfe89c870b6225dae3121bb8a7c93f0f49c833",
																"typeString": "literal_string \"Factory: arbiter bond too low\""
															},
															"value": "Factory: arbiter bond too low"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8c33e9b7e89158e89f6230403ddfe89c870b6225dae3121bb8a7c93f0f49c833",
																"typeString": "literal_string \"Factory: arbiter bond too low\""
															}
														],
														"id": 1392,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "16638:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1400,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16638:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1401,
												"nodeType": "ExpressionStatement",
												"src": "16638:69:1"
											},
											{
												"condition": {
													"id": 1402,
													"name": "refundBuyer",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1363,
													"src": "16722:11:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1435,
													"nodeType": "Block",
													"src": "16950:108:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1432,
																		"name": "purchaseId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1361,
																		"src": "17036:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1429,
																		"name": "escrow",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1384,
																		"src": "17004:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																			"typeString": "contract ServiceEscrow"
																		}
																	},
																	"id": 1431,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "17011:24:1",
																	"memberName": "factoryReleaseToProvider",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 924,
																	"src": "17004:31:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 1433,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17004:43:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1434,
															"nodeType": "ExpressionStatement",
															"src": "17004:43:1"
														}
													]
												},
												"id": 1436,
												"nodeType": "IfStatement",
												"src": "16718:340:1",
												"trueBody": {
													"id": 1428,
													"nodeType": "Block",
													"src": "16735:209:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1410,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 1404,
																				"name": "stakes",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1067,
																				"src": "16757:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																					"typeString": "mapping(bytes32 => uint256)"
																				}
																			},
																			"id": 1406,
																			"indexExpression": {
																				"id": 1405,
																				"name": "serviceId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1359,
																				"src": "16764:9:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "16757:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"expression": {
																					"id": 1407,
																					"name": "escrow",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1384,
																					"src": "16778:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																						"typeString": "contract ServiceEscrow"
																					}
																				},
																				"id": 1408,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "16785:5:1",
																				"memberName": "price",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 367,
																				"src": "16778:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																					"typeString": "function () view external returns (uint256)"
																				}
																			},
																			"id": 1409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "16778:14:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "16757:35:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "466163746f72793a2070726f7669646572207374616b6520696e73756666696369656e74",
																		"id": 1411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "16794:38:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_316d003cf7324603515d8dcd625fbcf6567a4d02bc2c462a306571c229aef252",
																			"typeString": "literal_string \"Factory: provider stake insufficient\""
																		},
																		"value": "Factory: provider stake insufficient"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_316d003cf7324603515d8dcd625fbcf6567a4d02bc2c462a306571c229aef252",
																			"typeString": "literal_string \"Factory: provider stake insufficient\""
																		}
																	],
																	"id": 1403,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "16749:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1412,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16749:84:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1413,
															"nodeType": "ExpressionStatement",
															"src": "16749:84:1"
														},
														{
															"expression": {
																"id": 1420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1414,
																		"name": "stakes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1067,
																		"src": "16847:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 1416,
																	"indexExpression": {
																		"id": 1415,
																		"name": "serviceId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1359,
																		"src": "16854:9:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "16847:17:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"expression": {
																			"id": 1417,
																			"name": "escrow",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1384,
																			"src": "16868:6:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																				"typeString": "contract ServiceEscrow"
																			}
																		},
																		"id": 1418,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "16875:5:1",
																		"memberName": "price",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 367,
																		"src": "16868:12:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
																			"typeString": "function () view external returns (uint256)"
																		}
																	},
																	"id": 1419,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "16868:14:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "16847:35:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1421,
															"nodeType": "ExpressionStatement",
															"src": "16847:35:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1425,
																		"name": "purchaseId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1361,
																		"src": "16922:10:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1422,
																		"name": "escrow",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1384,
																		"src": "16896:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_ServiceEscrow_$1052",
																			"typeString": "contract ServiceEscrow"
																		}
																	},
																	"id": 1424,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "16903:18:1",
																	"memberName": "factoryRefundBuyer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 877,
																	"src": "16896:25:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) external"
																	}
																},
																"id": 1426,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16896:37:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1427,
															"nodeType": "ExpressionStatement",
															"src": "16896:37:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1440,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "17174:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "17178:6:1",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "17174:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1439,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17166:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1438,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17166:8:1",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1442,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17166:19:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 1443,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "17187:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1444,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "17191:5:1",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "17187:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1437,
														"name": "_sendETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1525,
														"src": "17157:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 1445,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17157:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1446,
												"nodeType": "ExpressionStatement",
												"src": "17157:40:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1448,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1359,
															"src": "17229:9:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1449,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1361,
															"src": "17240:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1450,
															"name": "refundBuyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1363,
															"src": "17252:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 1451,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "17265:3:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "17269:6:1",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "17265:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1447,
														"name": "DisputeResolved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1109,
														"src": "17213:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_bool_$_t_address_$returns$__$",
															"typeString": "function (bytes32,uint256,bool,address)"
														}
													},
													"id": 1453,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17213:63:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1454,
												"nodeType": "EmitStatement",
												"src": "17208:68:1"
											}
										]
									},
									"documentation": {
										"id": 1357,
										"nodeType": "StructuredDocumentation",
										"src": "15945:291:1",
										"text": " @notice Resolve a dispute. Anyone can act as arbiter by bonding ≥ price.\n @param serviceId   Service identifier.\n @param purchaseId  Identifier within the ServiceEscrow contract.\n @param refundBuyer If true, refund buyer; otherwise release to provider."
									},
									"functionSelector": "faf0bbbf",
									"id": 1456,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "resolveDispute",
									"nameLocation": "16250:14:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1364,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1359,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "16282:9:1",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "16274:17:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1358,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "16274:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1361,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "16309:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "16301:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1360,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16301:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1363,
												"mutability": "mutable",
												"name": "refundBuyer",
												"nameLocation": "16334:11:1",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "16329:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1362,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16329:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16264:87:1"
									},
									"returnParameters": {
										"id": 1365,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16369:0:1"
									},
									"scope": 1534,
									"src": "16241:1042:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1502,
										"nodeType": "Block",
										"src": "17511:186:1",
										"statements": [
											{
												"expression": {
													"id": 1468,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1466,
														"name": "ids",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1461,
														"src": "17521:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1467,
														"name": "serviceIds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1062,
														"src": "17531:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"src": "17521:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"id": 1469,
												"nodeType": "ExpressionStatement",
												"src": "17521:20:1"
											},
											{
												"expression": {
													"id": 1477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1470,
														"name": "escrows",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1464,
														"src": "17551:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 1474,
																	"name": "ids",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1461,
																	"src": "17575:3:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																		"typeString": "bytes32[] memory"
																	}
																},
																"id": 1475,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "17579:6:1",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "17575:10:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 1473,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "NewExpression",
															"src": "17561:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_address_$dyn_memory_ptr_$",
																"typeString": "function (uint256) pure returns (address[] memory)"
															},
															"typeName": {
																"baseType": {
																	"id": 1471,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17565:7:1",
																	"stateMutability": "nonpayable",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1472,
																"nodeType": "ArrayTypeName",
																"src": "17565:9:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
																	"typeString": "address[]"
																}
															}
														},
														"id": 1476,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "17561:25:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
															"typeString": "address[] memory"
														}
													},
													"src": "17551:35:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
														"typeString": "address[] memory"
													}
												},
												"id": 1478,
												"nodeType": "ExpressionStatement",
												"src": "17551:35:1"
											},
											{
												"body": {
													"id": 1500,
													"nodeType": "Block",
													"src": "17637:54:1",
													"statements": [
														{
															"expression": {
																"id": 1498,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1490,
																		"name": "escrows",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1464,
																		"src": "17651:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																			"typeString": "address[] memory"
																		}
																	},
																	"id": 1492,
																	"indexExpression": {
																		"id": 1491,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1480,
																		"src": "17659:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "17651:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1493,
																		"name": "services",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1058,
																		"src": "17664:8:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_address_$",
																			"typeString": "mapping(bytes32 => address)"
																		}
																	},
																	"id": 1497,
																	"indexExpression": {
																		"baseExpression": {
																			"id": 1494,
																			"name": "ids",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1461,
																			"src": "17673:3:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																				"typeString": "bytes32[] memory"
																			}
																		},
																		"id": 1496,
																		"indexExpression": {
																			"id": 1495,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1480,
																			"src": "17677:1:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "17673:6:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "17664:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "17651:29:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1499,
															"nodeType": "ExpressionStatement",
															"src": "17651:29:1"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1483,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1480,
														"src": "17616:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1484,
															"name": "ids",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1461,
															"src": "17620:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
																"typeString": "bytes32[] memory"
															}
														},
														"id": 1485,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "17624:6:1",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "17620:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "17616:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1501,
												"initializationExpression": {
													"assignments": [
														1480
													],
													"declarations": [
														{
															"constant": false,
															"id": 1480,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "17609:1:1",
															"nodeType": "VariableDeclaration",
															"scope": 1501,
															"src": "17601:9:1",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1479,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "17601:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1482,
													"initialValue": {
														"hexValue": "30",
														"id": 1481,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17613:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "17601:13:1"
												},
												"isSimpleCounterLoop": true,
												"loopExpression": {
													"expression": {
														"id": 1488,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": true,
														"src": "17632:3:1",
														"subExpression": {
															"id": 1487,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1480,
															"src": "17634:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1489,
													"nodeType": "ExpressionStatement",
													"src": "17632:3:1"
												},
												"nodeType": "ForStatement",
												"src": "17596:95:1"
											}
										]
									},
									"documentation": {
										"id": 1457,
										"nodeType": "StructuredDocumentation",
										"src": "17289:122:1",
										"text": "@return ids         Array of all service IDs.\n @return escrows     Parallel array of escrow contract addresses."
									},
									"functionSelector": "de1c5488",
									"id": 1503,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "listServices",
									"nameLocation": "17425:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1458,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17437:2:1"
									},
									"returnParameters": {
										"id": 1465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "ids",
												"nameLocation": "17480:3:1",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "17463:20:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1459,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "17463:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1460,
													"nodeType": "ArrayTypeName",
													"src": "17463:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1464,
												"mutability": "mutable",
												"name": "escrows",
												"nameLocation": "17502:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 1503,
												"src": "17485:24:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1462,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "17485:7:1",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1463,
													"nodeType": "ArrayTypeName",
													"src": "17485:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17462:48:1"
									},
									"scope": 1534,
									"src": "17416:281:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1524,
										"nodeType": "Block",
										"src": "17765:120:1",
										"statements": [
											{
												"assignments": [
													1511,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1511,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "17781:7:1",
														"nodeType": "VariableDeclaration",
														"scope": 1524,
														"src": "17776:12:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1510,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "17776:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1518,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1516,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17817:2:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1512,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1505,
																"src": "17794:2:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1513,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "17797:4:1",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "17794:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1515,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1514,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1507,
																"src": "17809:6:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "17794:22:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1517,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17794:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17775:45:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1520,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1511,
															"src": "17838:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "466163746f72793a20455448207472616e73666572206661696c6564",
															"id": 1521,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17847:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_016b51de617488da0a7e7c807388db04b530ae80a0bfb01224d2d4e4074c3727",
																"typeString": "literal_string \"Factory: ETH transfer failed\""
															},
															"value": "Factory: ETH transfer failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_016b51de617488da0a7e7c807388db04b530ae80a0bfb01224d2d4e4074c3727",
																"typeString": "literal_string \"Factory: ETH transfer failed\""
															}
														],
														"id": 1519,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "17830:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17830:48:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1523,
												"nodeType": "ExpressionStatement",
												"src": "17830:48:1"
											}
										]
									},
									"id": 1525,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_sendETH",
									"nameLocation": "17712:8:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1505,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "17737:2:1",
												"nodeType": "VariableDeclaration",
												"scope": 1525,
												"src": "17721:18:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1504,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17721:15:1",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "17749:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 1525,
												"src": "17741:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17741:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17720:36:1"
									},
									"returnParameters": {
										"id": 1509,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17765:0:1"
									},
									"scope": 1534,
									"src": "17703:182:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1532,
										"nodeType": "Block",
										"src": "17918:59:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "466163746f72793a2064697265637420455448206e6f74206163636570746564",
															"id": 1529,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17935:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6d4fc89db44c3e5ab24f2621240f8027c53de8a354eb06192b1d04c56008c4ee",
																"typeString": "literal_string \"Factory: direct ETH not accepted\""
															},
															"value": "Factory: direct ETH not accepted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_6d4fc89db44c3e5ab24f2621240f8027c53de8a354eb06192b1d04c56008c4ee",
																"typeString": "literal_string \"Factory: direct ETH not accepted\""
															}
														],
														"id": 1528,
														"name": "revert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967277,
															4294967277
														],
														"referencedDeclaration": 4294967277,
														"src": "17928:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory) pure"
														}
													},
													"id": 1530,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17928:42:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1531,
												"nodeType": "ExpressionStatement",
												"src": "17928:42:1"
											}
										]
									},
									"id": 1533,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17898:2:1"
									},
									"returnParameters": {
										"id": 1527,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17918:0:1"
									},
									"scope": 1534,
									"src": "17891:86:1",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1535,
							"src": "11609:6370:1",
							"usedErrors": [],
							"usedEvents": [
								1080,
								1089,
								1098,
								1109
							]
						}
					],
					"src": "32:17947:1"
				}
			},
			"SignatureVerifier.sol": {
				"id": 2,
				"ast": {
					"absolutePath": "SignatureVerifier.sol",
					"exportedSymbols": {
						"ECDSA": [
							347
						],
						"SignatureVerifier": [
							1627
						]
					},
					"id": 1628,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1536,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:2"
						},
						{
							"absolutePath": "ECDSA.sol",
							"file": "./ECDSA.sol",
							"id": 1537,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1628,
							"sourceUnit": 348,
							"src": "57:21:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignatureVerifier",
							"contractDependencies": [],
							"contractKind": "library",
							"fullyImplemented": true,
							"id": 1627,
							"linearizedBaseContracts": [
								1627
							],
							"name": "SignatureVerifier",
							"nameLocation": "88:17:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1566,
										"nodeType": "Block",
										"src": "560:278:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 1554,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "654:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 1555,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1540,
																	"src": "685:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1556,
																	"name": "expires",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1542,
																	"src": "713:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1558,
																			"name": "request",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1544,
																			"src": "752:7:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 1557,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "742:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1559,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "742:18:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1561,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1546,
																			"src": "792:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		],
																		"id": 1560,
																		"name": "keccak256",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967288,
																		"src": "782:9:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																			"typeString": "function (bytes memory) pure returns (bytes32)"
																		}
																	},
																	"id": 1562,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "782:17:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1552,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "616:3:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1553,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "620:12:2",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "616:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1563,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "616:201:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1551,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "589:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1564,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "589:242:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1550,
												"id": 1565,
												"nodeType": "Return",
												"src": "570:261:2"
											}
										]
									},
									"documentation": {
										"id": 1538,
										"nodeType": "StructuredDocumentation",
										"src": "112:271:2",
										"text": " @dev Generates a hash for signing/verifying.\n @param target: The address the signature is for.\n @param request: The original request that was sent.\n @param result: The `result` field of the response (not including the signature part)."
									},
									"id": 1567,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "makeSignatureHash",
									"nameLocation": "397:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1540,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "432:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1567,
												"src": "424:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1539,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "424:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1542,
												"mutability": "mutable",
												"name": "expires",
												"nameLocation": "455:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1567,
												"src": "448:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 1541,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "448:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "485:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1567,
												"src": "472:20:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1543,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "472:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1546,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "515:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 1567,
												"src": "502:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1545,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "502:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "414:113:2"
									},
									"returnParameters": {
										"id": 1550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1567,
												"src": "551:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1548,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "551:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "550:9:2"
									},
									"scope": 1627,
									"src": "388:450:2",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1625,
										"nodeType": "Block",
										"src": "1449:444:2",
										"statements": [
											{
												"assignments": [
													1580,
													1582,
													1584
												],
												"declarations": [
													{
														"constant": false,
														"id": 1580,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "1473:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 1625,
														"src": "1460:19:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1579,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1460:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1582,
														"mutability": "mutable",
														"name": "expires",
														"nameLocation": "1488:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 1625,
														"src": "1481:14:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 1581,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "1481:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1584,
														"mutability": "mutable",
														"name": "sig",
														"nameLocation": "1510:3:2",
														"nodeType": "VariableDeclaration",
														"scope": 1625,
														"src": "1497:16:2",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1583,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1497:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1596,
												"initialValue": {
													"arguments": [
														{
															"id": 1587,
															"name": "response",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1572,
															"src": "1541:8:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														},
														{
															"components": [
																{
																	"id": 1589,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1564:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1588,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "1564:5:2",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 1591,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1571:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 1590,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "1571:6:2",
																		"typeDescriptions": {}
																	}
																},
																{
																	"id": 1593,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "1579:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1592,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "1579:5:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"id": 1594,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1563:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_uint64_$_$_t_type$_t_bytes_storage_ptr_$_$",
																"typeString": "tuple(type(bytes storage pointer),type(uint64),type(bytes storage pointer))"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															},
															{
																"typeIdentifier": "t_tuple$_t_type$_t_bytes_storage_ptr_$_$_t_type$_t_uint64_$_$_t_type$_t_bytes_storage_ptr_$_$",
																"typeString": "tuple(type(bytes storage pointer),type(uint64),type(bytes storage pointer))"
															}
														],
														"expression": {
															"id": 1585,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "1517:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 1586,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1521:6:2",
														"memberName": "decode",
														"nodeType": "MemberAccess",
														"src": "1517:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
															"typeString": "function () pure"
														}
													},
													"id": 1595,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1517:78:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bytes_memory_ptr_$_t_uint64_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bytes memory,uint64,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1459:136:2"
											},
											{
												"assignments": [
													1598
												],
												"declarations": [
													{
														"constant": false,
														"id": 1598,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "1613:6:2",
														"nodeType": "VariableDeclaration",
														"scope": 1625,
														"src": "1605:14:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1597,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1605:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1612,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1604,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "1675:4:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SignatureVerifier_$1627",
																				"typeString": "library SignatureVerifier"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SignatureVerifier_$1627",
																				"typeString": "library SignatureVerifier"
																			}
																		],
																		"id": 1603,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "1667:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1602,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "1667:7:2",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1605,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1667:13:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1606,
																	"name": "expires",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1582,
																	"src": "1682:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																{
																	"id": 1607,
																	"name": "request",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1570,
																	"src": "1691:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																{
																	"id": 1608,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1580,
																	"src": "1700:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	},
																	{
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1601,
																"name": "makeSignatureHash",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1567,
																"src": "1649:17:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_address_$_t_uint64_$_t_bytes_memory_ptr_$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (address,uint64,bytes memory,bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1649:58:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1610,
															"name": "sig",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1584,
															"src": "1721:3:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1599,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "1622:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$347_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1600,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1628:7:2",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 103,
														"src": "1622:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address)"
														}
													},
													"id": 1611,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1622:112:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1605:129:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1614,
																"name": "expires",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1582,
																"src": "1765:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 1615,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "1776:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1616,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "1782:9:2",
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "1776:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1765:26:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5369676e617475726556657269666965723a205369676e61747572652065787069726564",
															"id": 1618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1805:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a",
																"typeString": "literal_string \"SignatureVerifier: Signature expired\""
															},
															"value": "SignatureVerifier: Signature expired"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e5f9c70fb0fca7bcee302c537d829defa0b7af6be58fa206ab11f91d3c83ab0a",
																"typeString": "literal_string \"SignatureVerifier: Signature expired\""
															}
														],
														"id": 1613,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1744:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1744:109:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1620,
												"nodeType": "ExpressionStatement",
												"src": "1744:109:2"
											},
											{
												"expression": {
													"components": [
														{
															"id": 1621,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1598,
															"src": "1871:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1622,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1580,
															"src": "1879:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"id": 1623,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "1870:16:2",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(address,bytes memory)"
													}
												},
												"functionReturnParameters": 1578,
												"id": 1624,
												"nodeType": "Return",
												"src": "1863:23:2"
											}
										]
									},
									"documentation": {
										"id": 1568,
										"nodeType": "StructuredDocumentation",
										"src": "844:467:2",
										"text": " @dev Verifies a signed message returned from a callback.\n @param request: The original request that was sent.\n @param response: An ABI encoded tuple of `(bytes result, uint64 expires, bytes sig)`, where `result` is the data to return\n        to the caller, and `sig` is the (r,s,v) encoded message signature.\n @return signer: The address that signed this message.\n @return result: The `result` decoded from `response`."
									},
									"id": 1626,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verify",
									"nameLocation": "1325:6:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1570,
												"mutability": "mutable",
												"name": "request",
												"nameLocation": "1356:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "1341:22:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1569,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1341:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1572,
												"mutability": "mutable",
												"name": "response",
												"nameLocation": "1388:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "1373:23:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1571,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1373:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1331:71:2"
									},
									"returnParameters": {
										"id": 1578,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1575,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "1426:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1426:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1577,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1626,
												"src": "1435:12:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1576,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1435:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1425:23:2"
									},
									"scope": 1627,
									"src": "1316:577:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1628,
							"src": "80:1815:2",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "32:1863:2"
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": null,
				"formattedMessage": "\nWarning: It looks like you are using 'ecrecover' to validate a signature of a user account.\nPolkadot comes with native account abstraction support, therefore it is highly recommended NOT\nto rely on the fact that the account has an ECDSA private key attached to it since accounts might\nimplement other signature schemes.\n\n--> ECDSA.sol\n",
				"message": "\nWarning: It looks like you are using 'ecrecover' to validate a signature of a user account.\nPolkadot comes with native account abstraction support, therefore it is highly recommended NOT\nto rely on the fact that the account has an ECDSA private key attached to it since accounts might\nimplement other signature schemes.\n",
				"severity": "warning",
				"sourceLocation": {
					"file": "0",
					"start": 6457,
					"end": 6481
				},
				"type": "Warning"
			}
		],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}