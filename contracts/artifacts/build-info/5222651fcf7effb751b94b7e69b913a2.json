{
	"id": "5222651fcf7effb751b94b7e69b913a2",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"EscroDotLite.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.28;\n\n/**\n * @title EscroDot – minimal escrow & staking framework for AI‑agent services\n * @author Mike Liu (mikelxc)\n *\n * @title EscroDot – AI‑Agent Escrow (v0.4 – Buyer‑Signed Claim + Open Arbiter)\n *\n * • Buyer‑signed claim: `claimPayment()` is called by the provider, supplying the buyer's\n *   signature. Contract verifies and releases payment.\n * • Open Dispute Resolution: Any address can become an arbiter – it just needs to deposit a\n *   stake ≥ purchase value when calling `resolveDispute()`. (For brevity we return the stake in\n *   the same tx; extend with lock‑and‑slash logic in later versions.)\n */\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n\ncontract EscroDot {\n    using ECDSA for bytes32;\n\n    /* ---------------------------------------------------------------------- */\n    /*                              Service Registry                           */\n    /* ---------------------------------------------------------------------- */\n\n    /// @notice Map: serviceId ⇒ Service data\n    mapping(bytes32 => Service) public services;\n\n    /// @notice List of all serviceIds (for off‑chain pagination)\n    bytes32[] public serviceIds;\n\n    /// @notice Map: serviceId ⇒ provider's collateral\n    mapping(bytes32 => uint256) public stakes;\n\n    /// @notice Map: serviceId ⇒ purchaseId ⇒ Purchase\n    mapping(bytes32 => mapping(uint256 => Purchase)) public purchases;\n\n    /// @notice Map: serviceId ⇒ next purchase ID\n    mapping(bytes32 => uint256) public nextPurchaseIds;\n\n    struct Service {\n        address provider;\n        uint256 price;\n        string description;\n        string gateway;\n    }\n\n    struct Purchase {\n        address buyer;\n        uint256 amount;\n        bool claimed;\n        bool disputed;\n        bool resolved;\n    }\n\n    /* ---------------------------------------------------------------------- */\n    /*                                   Events                                */\n    /* ---------------------------------------------------------------------- */\n\n    /// @notice New service deployed\n    event ServiceDeployed(bytes32 indexed serviceId, string name, address indexed provider, uint256 stake);\n\n    /// @notice Service updated\n    event ServiceUpdated(bytes32 indexed serviceId, string description, string gateway);\n\n    /// @notice Provider topped up their stake\n    event StakeToppedUp(bytes32 indexed serviceId, uint256 amount, uint256 newTotal);\n\n    /// @notice Provider withdrew part of their stake\n    event StakeWithdrawn(bytes32 indexed serviceId, uint256 amount, uint256 newTotal);\n\n    /// @notice Buyer successfully paid for the service\n    event ServicePurchased(bytes32 indexed serviceId, uint256 indexed purchaseId, address indexed buyer, uint256 amount);\n\n    /// @notice Provider claimed the locked payment (buyer signature verified)\n    event PaymentClaimed(bytes32 indexed serviceId, uint256 indexed purchaseId);\n\n    /// @notice Buyer flagged the purchase for dispute\n    event DisputeRaised(bytes32 indexed serviceId, uint256 indexed purchaseId);\n\n    /// @notice Dispute resolved by an arbiter\n    event DisputeResolved(bytes32 indexed serviceId, uint256 indexed purchaseId, bool refunded, address indexed arbiter);\n\n    /// @dev Restrict a function to the provider of a service\n    modifier onlyProvider(bytes32 serviceId) {\n        require(msg.sender == services[serviceId].provider, \"Escrow: caller is not the provider\");\n        _;\n    }\n\n    uint256 private _locked = 1;\n    modifier nonReentrant() {\n        require(_locked == 1, \"Escrow: reentrant call\");\n        _locked = 2;\n        _;\n        _locked = 1;\n    }\n\n    /**\n     * @notice Create a new service\n     * @param name         Human‑readable service name (unique)\n     * @param price        Fixed price in wei\n     * @param gateway      Service endpoint URL\n     * @param description  IPFS CID or text description\n     *\n     * `msg.value` – initial stake (must be ≥ `price`)\n     */\n    function createService(\n        string calldata name,\n        uint256 price,\n        string calldata gateway,\n        string calldata description\n    ) external payable returns (bytes32 serviceId) {\n        require(bytes(name).length > 0, \"Escrow: name cannot be empty\");\n        require(msg.value >= price, \"Escrow: stake must cover at least one refund\");\n        require(bytes(gateway).length > 0, \"Escrow: gateway cannot be empty\");\n\n        serviceId = keccak256(bytes(name));\n        require(services[serviceId].provider == address(0), \"Escrow: service name already taken\");\n\n        services[serviceId] = Service({\n            provider: msg.sender,\n            price: price,\n            description: description,\n            gateway: gateway\n        });\n\n        serviceIds.push(serviceId);\n        stakes[serviceId] = msg.value;\n\n        emit ServiceDeployed(serviceId, name, msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Update service details\n     */\n    function updateService(\n        bytes32 serviceId,\n        string calldata description,\n        string calldata gateway\n    ) external onlyProvider(serviceId) {\n        require(bytes(gateway).length > 0, \"Escrow: gateway cannot be empty\");\n\n        Service storage service = services[serviceId];\n        service.description = description;\n        service.gateway = gateway;\n\n        emit ServiceUpdated(serviceId, description, gateway);\n    }\n\n    /**\n     * @notice Purchase the service by locking `price` ETH in this contract\n     */\n    function buyService(bytes32 serviceId) external payable nonReentrant returns (uint256 purchaseId) {\n        Service storage service = services[serviceId];\n        require(service.provider != address(0), \"Escrow: service does not exist\");\n        require(msg.value == service.price, \"Escrow: incorrect payment amount\");\n\n        purchaseId = nextPurchaseIds[serviceId]++;\n        purchases[serviceId][purchaseId] = Purchase({\n            buyer: msg.sender,\n            amount: msg.value,\n            claimed: false,\n            disputed: false,\n            resolved: false\n        });\n\n        emit ServicePurchased(serviceId, purchaseId, msg.sender, msg.value);\n    }\n\n    /**\n     * @notice Provider claims funds by presenting a buyer‑signed message\n     */\n    function claimPayment(\n        bytes32 serviceId,\n        uint256 purchaseId,\n        bytes32 deliverableHash,\n        bytes calldata buyerSignature\n    ) external nonReentrant onlyProvider(serviceId) {\n        Purchase storage purchase = purchases[serviceId][purchaseId];\n\n        require(!purchase.claimed, \"Escrow: payment already claimed\");\n        require(!purchase.disputed, \"Escrow: purchase is in dispute\");\n\n        // Verify buyer signature\n        bytes32 digest = _claimDigest(serviceId, purchaseId, deliverableHash);\n        address signer = ECDSA.recover(digest, buyerSignature);\n        require(signer == purchase.buyer, \"SignatureVerifier: Invalid signature\");\n\n        purchase.claimed = true;\n        _sendETH(payable(services[serviceId].provider), purchase.amount);\n\n        emit PaymentClaimed(serviceId, purchaseId);\n    }\n\n    function raiseDispute(bytes32 serviceId, uint256 purchaseId) external {\n        Purchase storage purchase = purchases[serviceId][purchaseId];\n\n        require(msg.sender == purchase.buyer, \"Escrow: caller is not the buyer\");\n        require(!purchase.claimed, \"Escrow: payment already claimed\");\n        require(!purchase.disputed, \"Escrow: dispute already raised\");\n\n        purchase.disputed = true;\n        emit DisputeRaised(serviceId, purchaseId);\n    }\n\n    /**\n     * @notice Resolve a dispute. Anyone can act as arbiter by bonding ≥ price\n     */\n    function resolveDispute(\n        bytes32 serviceId,\n        uint256 purchaseId,\n        bool refundBuyer\n    ) external payable nonReentrant {\n        Service storage service = services[serviceId];\n        Purchase storage purchase = purchases[serviceId][purchaseId];\n\n        require(service.provider != address(0), \"Escrow: service does not exist\");\n        require(purchase.disputed && !purchase.resolved, \"Escrow: invalid state\");\n        require(msg.value >= service.price, \"Escrow: arbiter bond too low\");\n\n        if (refundBuyer) {\n            require(stakes[serviceId] >= service.price, \"Escrow: provider stake insufficient\");\n            stakes[serviceId] -= service.price;\n            purchase.resolved = true;\n            _sendETH(payable(purchase.buyer), purchase.amount);\n        } else {\n            purchase.resolved = true;\n            _sendETH(payable(service.provider), purchase.amount);\n        }\n\n        // Return arbiter bond immediately in v1.2. Extend with delayed release in prod\n        _sendETH(payable(msg.sender), msg.value);\n\n        emit DisputeResolved(serviceId, purchaseId, refundBuyer, msg.sender);\n    }\n\n    /** @notice Increase stake for a service */\n    function topUpStake(bytes32 serviceId) external payable onlyProvider(serviceId) {\n        stakes[serviceId] += msg.value;\n        emit StakeToppedUp(serviceId, msg.value, stakes[serviceId]);\n    }\n\n    /**\n     * @notice Withdraw unused stake (cannot exceed balance held by contract)\n     */\n    function withdrawStake(bytes32 serviceId, uint256 amount) external onlyProvider(serviceId) {\n        require(amount <= stakes[serviceId], \"Escrow: insufficient stake balance\");\n        stakes[serviceId] -= amount;\n        _sendETH(payable(msg.sender), amount);\n        emit StakeWithdrawn(serviceId, amount, stakes[serviceId]);\n    }\n\n    /// @return ids Array of all service IDs\n    function listServices() external view returns (bytes32[] memory ids) {\n        ids = serviceIds;\n    }\n\n    /**\n     * @dev Compute the digest that a buyer must sign to authorise payment\n     */\n    function claimDigest(bytes32 serviceId, uint256 purchaseId, bytes32 deliverableHash) external view returns (bytes32) {\n        return _claimDigest(serviceId, purchaseId, deliverableHash);\n    }\n\n    /**\n     * @dev Internal: generate claim digest without message prefix\n     */\n    function _claimDigest(bytes32 serviceId, uint256 purchaseId, bytes32 deliverableHash) internal view returns (bytes32) {\n        return keccak256(abi.encode(address(this), serviceId, purchaseId, deliverableHash));\n    }\n\n    /**\n     * @dev Internal helper to send ETH and bubble up any failure\n     */\n    function _sendETH(address payable to, uint256 amount) private {\n        (bool success, ) = to.call{value: amount}(\"\");\n        require(success, \"Escrow: ETH transfer failed\");\n    }\n\n    receive() external payable {}\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"EscroDotLite.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"author\":\"Mike Liu (mikelxc)\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"EscroDot \\u2013\\u00a0minimal escrow & staking framework for AI\\u2011agent servicesEscroDot \\u2013 AI\\u2011Agent Escrow (v0.4 \\u2013 Buyer\\u2011Signed Claim + Open Arbiter) \\u2022 Buyer\\u2011signed claim: `claimPayment()` is called by the provider, supplying the buyer's   signature. Contract verifies and releases payment. \\u2022 Open Dispute Resolution: Any address can become an arbiter \\u2013 it just needs to deposit a   stake \\u2265 purchase value when calling `resolveDispute()`. (For brevity we return the stake in   the same tx; extend with lock\\u2011and\\u2011slash logic in later versions.)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"EscroDotLite.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"EscroDotLite.sol\":{\"keccak256\":\"0x034012af9c62c5484751cb61a6567c259e44328cd0983313a197e3744586e5e6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79e37de199140b9ccebfac51bb5618d455fdabbac20cafaaa12ec04a7c43435c\",\"dweb:/ipfs/QmT3tU2HznwXSH5PhdoEEWvfj1JFonYZUDF65vCTC6vgi9\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"author": "Mike Liu (mikelxc)",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "EscroDot – minimal escrow & staking framework for AI‑agent servicesEscroDot – AI‑Agent Escrow (v0.4 – Buyer‑Signed Claim + Open Arbiter) • Buyer‑signed claim: `claimPayment()` is called by the provider, supplying the buyer's   signature. Contract verifies and releases payment. • Open Dispute Resolution: Any address can become an arbiter – it just needs to deposit a   stake ≥ purchase value when calling `resolveDispute()`. (For brevity we return the stake in   the same tx; extend with lock‑and‑slash logic in later versions.)",
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 4/65584 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 462\n// Code size = 1356 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20004]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20004] = a1\n    42: a1 = 0x20010\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20010\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 [@dyn 1] (gas: 71)\n    64: a1 = reverse s1\n    66: a2 = reverse s0\n    68: a3 = u64 [sp]\n    70: a3 = reverse a3\n    72: a4 = u64 [sp + 0x8]\n    75: a4 = reverse a4\n    77: u8 [a0 + 0x18] = a4\n    80: u8 [a0 + 0x10] = a3\n    83: u8 [a0 + 0x8] = a2\n    86: u8 [a0] = a1\n    88: a5 = a4 >> 0x38\n    91: u8 [a0 + 0x1f] = a5\n    94: a5 = a4 >> 0x30\n    97: u8 [a0 + 0x1e] = a5\n   100: a5 = a4 >> 0x28\n   103: u8 [a0 + 0x1d] = a5\n   106: a5 = a4 >> 0x20\n   109: u8 [a0 + 0x1c] = a5\n   112: a5 = a4 >> 0x18\n   115: u8 [a0 + 0x1b] = a5\n   118: a5 = a4 >> 0x10\n   121: u8 [a0 + 0x1a] = a5\n   124: a4 = a4 >> 0x8\n   127: u8 [a0 + 0x19] = a4\n   130: a4 = a3 >> 0x38\n   133: u8 [a0 + 0x17] = a4\n   136: a4 = a3 >> 0x30\n   139: u8 [a0 + 0x16] = a4\n   142: a4 = a3 >> 0x28\n   145: u8 [a0 + 0x15] = a4\n   148: a4 = a3 >> 0x20\n   151: u8 [a0 + 0x14] = a4\n   154: a4 = a3 >> 0x18\n   157: u8 [a0 + 0x13] = a4\n   160: a4 = a3 >> 0x10\n   163: u8 [a0 + 0x12] = a4\n   166: a3 = a3 >> 0x8\n   169: u8 [a0 + 0x11] = a3\n   172: a3 = a2 >> 0x38\n   175: u8 [a0 + 0xf] = a3\n   178: a3 = a2 >> 0x30\n   181: u8 [a0 + 0xe] = a3\n   184: a3 = a2 >> 0x28\n   187: u8 [a0 + 0xd] = a3\n   190: a3 = a2 >> 0x20\n   193: u8 [a0 + 0xc] = a3\n   196: a3 = a2 >> 0x18\n   199: u8 [a0 + 0xb] = a3\n   202: a3 = a2 >> 0x10\n   205: u8 [a0 + 0xa] = a3\n   208: a2 = a2 >> 0x8\n   211: u8 [a0 + 0x9] = a2\n   214: a2 = a1 >> 0x38\n   217: u8 [a0 + 0x7] = a2\n   220: a2 = a1 >> 0x30\n   223: u8 [a0 + 0x6] = a2\n   226: a2 = a1 >> 0x28\n   229: u8 [a0 + 0x5] = a2\n   232: a2 = a1 >> 0x20\n   235: u8 [a0 + 0x4] = a2\n   238: a2 = a1 >> 0x18\n   241: u8 [a0 + 0x3] = a2\n   244: a2 = a1 >> 0x10\n   247: u8 [a0 + 0x2] = a2\n   250: a1 = a1 >> 0x8\n   253: u8 [a0 + 0x1] = a1\n   256: ra = u64 [sp + 0x20]\n   259: s0 = u64 [sp + 0x18]\n   262: s1 = u64 [sp + 0x10]\n   265: sp = sp + 0x28\n   268: ret\n      : @9 (gas: 6)\n   270: sp = sp + 0xfffffffffffffff0\n   273: u64 [sp + 0x8] = ra\n   276: u64 [sp] = s0\n   278: s0 = a0 & 0x1\n   281: ecalli 2 // 'call_data_size'\n   283: fallthrough\n      : @10 (gas: 2)\n   284: u32 [0x20008] = a0\n   289: jump @12 if s0 == 0\n      : @11 (gas: 1)\n   292: ra = 4, jump @13\n      : @12 [@dyn 2] (gas: 1)\n   296: ra = 6, jump @27\n      : @13 [@dyn 3] (gas: 9)\n   301: sp = sp + 0xffffffffffffffa0\n   304: u64 [sp + 0x58] = ra\n   307: u64 [sp + 0x50] = s0\n   310: u64 [sp + 0x48] = s1\n   313: s0 = sp + 0x60\n   316: sp = sp & 0xffffffffffffffe0\n   319: a0 = 0x40\n   322: a1 = 0x20\n   325: ra = 8, jump @0\n      : @14 [@dyn 4] (gas: 39)\n   330: u8 [a0 + 31] = 0x80\n   335: u8 [a0 + 30] = 0\n   338: u8 [a0 + 29] = 0\n   341: u8 [a0 + 28] = 0\n   344: u8 [a0 + 27] = 0\n   347: u8 [a0 + 26] = 0\n   350: u8 [a0 + 25] = 0\n   353: u8 [a0 + 24] = 0\n   356: u8 [a0 + 23] = 0\n   359: u8 [a0 + 22] = 0\n   362: u8 [a0 + 21] = 0\n   365: u8 [a0 + 20] = 0\n   368: u8 [a0 + 19] = 0\n   371: u8 [a0 + 18] = 0\n   374: u8 [a0 + 17] = 0\n   377: u8 [a0 + 16] = 0\n   380: u8 [a0 + 15] = 0\n   383: u8 [a0 + 14] = 0\n   386: u8 [a0 + 13] = 0\n   389: u8 [a0 + 12] = 0\n   392: u8 [a0 + 11] = 0\n   395: u8 [a0 + 10] = 0\n   398: u8 [a0 + 9] = 0\n   401: u8 [a0 + 8] = 0\n   404: u8 [a0 + 7] = 0\n   407: u8 [a0 + 6] = 0\n   410: u8 [a0 + 5] = 0\n   413: u8 [a0 + 4] = 0\n   416: u8 [a0 + 3] = 0\n   419: u8 [a0 + 2] = 0\n   422: u8 [a0 + 1] = 0\n   425: u8 [a0 + 0] = 0\n   427: u64 [sp + 24] = 0\n   430: u64 [sp + 0] = 0\n   432: u64 [sp + 8] = 0\n   435: u64 [sp + 16] = 0\n   438: i32 a0 = sp + 0\n   440: ecalli 5 // 'value_transferred'\n   442: fallthrough\n      : @15 (gas: 8)\n   443: a0 = u64 [sp + 0x10]\n   446: a1 = u64 [sp + 0x18]\n   449: a2 = u64 [sp + 0x8]\n   452: a3 = u64 [sp]\n   454: a1 = a1 | a2\n   457: a0 = a0 | a3\n   460: a0 = a0 | a1\n   463: jump @19 if a0 != 0\n      : @16 (gas: 3)\n   467: a0 = 0x40\n   470: a1 = 0x20\n   473: ra = 10, jump @0\n      : @17 [@dyn 5] (gas: 100)\n   478: a1 = u8 [a0 + 0x11]\n   481: a2 = u8 [a0 + 0x10]\n   484: a3 = u8 [a0 + 0x12]\n   487: a4 = u8 [a0 + 0x13]\n   490: a1 = a1 << 0x8\n   493: a1 = a1 | a2\n   496: a3 = a3 << 0x10\n   499: a4 = a4 << 0x18\n   502: a3 = a3 | a4\n   505: a1 = a1 | a3\n   508: a2 = u8 [a0 + 0x15]\n   511: a3 = u8 [a0 + 0x14]\n   514: a4 = u8 [a0 + 0x16]\n   517: a5 = u8 [a0 + 0x17]\n   520: a2 = a2 << 0x8\n   523: a2 = a2 | a3\n   526: a4 = a4 << 0x10\n   529: a5 = a5 << 0x18\n   532: a4 = a4 | a5\n   535: a2 = a2 | a4\n   538: a2 = a2 << 0x20\n   541: t0 = a2 | a1\n   544: a2 = u8 [a0 + 0x1]\n   547: a3 = u8 [a0]\n   549: a4 = u8 [a0 + 0x2]\n   552: a5 = u8 [a0 + 0x3]\n   555: a2 = a2 << 0x8\n   558: a2 = a2 | a3\n   561: a4 = a4 << 0x10\n   564: a5 = a5 << 0x18\n   567: a4 = a4 | a5\n   570: a2 = a2 | a4\n   573: a3 = u8 [a0 + 0x5]\n   576: a4 = u8 [a0 + 0x4]\n   579: a5 = u8 [a0 + 0x6]\n   582: s1 = u8 [a0 + 0x7]\n   585: a3 = a3 << 0x8\n   588: a3 = a3 | a4\n   591: a5 = a5 << 0x10\n   594: s1 = s1 << 0x18\n   597: a5 = a5 | s1\n   600: a3 = a3 | a5\n   603: a3 = a3 << 0x20\n   606: a2 = a2 | a3\n   609: a3 = u8 [a0 + 0x19]\n   612: a4 = u8 [a0 + 0x18]\n   615: a5 = u8 [a0 + 0x1a]\n   618: s1 = u8 [a0 + 0x1b]\n   621: a3 = a3 << 0x8\n   624: a3 = a3 | a4\n   627: a5 = a5 << 0x10\n   630: s1 = s1 << 0x18\n   633: a5 = a5 | s1\n   636: a3 = a3 | a5\n   639: a4 = u8 [a0 + 0x1d]\n   642: a5 = u8 [a0 + 0x1c]\n   645: s1 = u8 [a0 + 0x1e]\n   648: a1 = u8 [a0 + 0x1f]\n   651: a4 = a4 << 0x8\n   654: a4 = a4 | a5\n   657: s1 = s1 << 0x10\n   660: a1 = a1 << 0x18\n   663: a1 = a1 | s1\n   666: a1 = a1 | a4\n   669: a1 = a1 << 0x20\n   672: a3 = a3 | a1\n   675: a1 = u8 [a0 + 0x9]\n   678: a4 = u8 [a0 + 0x8]\n   681: a5 = u8 [a0 + 0xa]\n   684: s1 = u8 [a0 + 0xb]\n   687: a1 = a1 << 0x8\n   690: a1 = a1 | a4\n   693: a5 = a5 << 0x10\n   696: s1 = s1 << 0x18\n   699: a5 = a5 | s1\n   702: a1 = a1 | a5\n   705: a4 = u8 [a0 + 0xd]\n   708: a5 = u8 [a0 + 0xc]\n   711: s1 = u8 [a0 + 0xe]\n   714: a0 = u8 [a0 + 0xf]\n   717: a4 = a4 << 0x8\n   720: a4 = a4 | a5\n   723: s1 = s1 << 0x10\n   726: a0 = a0 << 0x18\n   729: a0 = a0 | s1\n   732: a0 = a0 | a4\n   735: a0 = a0 << 0x20\n   738: a0 = a0 | a1\n   741: a0 = reverse a0\n   743: s1 = reverse a3\n   745: a1 = reverse a2\n   747: a2 = reverse t0\n   749: a1 = a1 | a2\n   752: a2 = s1 | a0\n   755: a2 = a2 | a1\n   758: a2 = a2 >> 0x20\n   761: a0 = a0 | a1\n   764: a0 = a0 << 0x20\n   767: a0 = a0 | a2\n   770: jump @21 if a0 == 0\n      : @18 (gas: 1)\n   773: trap\n      : @19 (gas: 3)\n   774: a0 = 0\n   776: a1 = 0\n   778: ra = 12, jump @0\n      : @20 [@dyn 6] (gas: 5)\n   783: i32 a1 = a0 + 0\n   785: a0 = 0x1\n   788: a2 = 0\n   790: ecalli 3 // 'seal_return'\n   792: fallthrough\n      : @21 (gas: 4)\n   793: i32 s1 = s1 + 0\n   795: a0 = s1\n   797: a1 = 0\n   799: ra = 14, jump @0\n      : @22 [@dyn 7] (gas: 7)\n   804: i32 a0 = a0 + 0\n   806: a1 = 0\n   808: a2 = 0\n   810: ecalli 1 // 'call_data_copy'\n   812: i32 a0 = sp + 0x20\n   815: ecalli 0 // 'address'\n   816: fallthrough\n      : @23 (gas: 21)\n   817: a0 = u64 [sp + 0x28]\n   820: a1 = i32 [sp + 0x30]\n   823: a2 = u64 [sp + 0x20]\n   826: a0 = reverse a0\n   828: a3 = a0 << 0x20\n   831: a1 = reverse a1\n   833: a1 = a1 >> 0x20\n   836: a3 = a3 | a1\n   839: a1 = a0 >> 0x20\n   842: a2 = reverse a2\n   844: a4 = a2 << 0x20\n   847: a5 = 0x20000\n   852: a0 = 0x30010\n   857: a4 = a4 | a1\n   860: a2 = a2 >> 0x20\n   863: a1 = i32 [0x20000]\n   868: u64 [0x30020] = a2\n   873: u64 [0x30028] = 0\n   878: u64 [0x30018] = a4\n   883: u64 [0x30010] = a3\n   888: jump @25 if a1 == 0\n      : @24 (gas: 3)\n   891: i32 a0 = a0 + 0\n   893: ecalli 4 // 'set_immutable_data'\n   895: fallthrough\n      : @25 (gas: 3)\n   896: a0 = s1\n   898: a1 = 0\n   900: ra = 16, jump @0\n      : @26 [@dyn 8] (gas: 6)\n   905: i32 a1 = a0 + 0\n   907: a0 = 0\n   909: a2 = 0\n   911: ra = 0x12\n   914: ecalli 3 // 'seal_return'\n   916: fallthrough\n      : @27 [@dyn 9] (gas: 25)\n   917: sp = sp + 0xffffffffffffffd0\n   920: u64 [sp + 0x28] = ra\n   923: u64 [sp + 0x20] = s0\n   926: s0 = sp + 0x30\n   929: sp = sp & 0xfffffffffffffff0\n   932: u64 [sp + 24] = 0\n   935: u64 [sp + 16] = 0\n   938: u64 [sp + 0] = 0x80\n   942: a1 = sp\n   944: u64 [sp + 8] = 0\n   947: ra = 0x14\n   950: sp = sp + 0xffffffffffffffd8\n   953: u64 [sp + 0x20] = ra\n   956: u64 [sp + 0x18] = s0\n   959: u64 [sp + 0x10] = s1\n   962: a2 = u64 [a1]\n   964: u64 [sp + 0x8] = a2\n   967: a2 = u64 [a1 + 0x8]\n   970: u64 [sp] = a2\n   972: s0 = u64 [a1 + 0x10]\n   975: s1 = u64 [a1 + 0x18]\n   978: a0 = 0x40\n   981: a1 = 0x20\n   984: ra = 0x2\n   987: jump @0\n      : @28 [@dyn 10] (gas: 1)\n   990: ra = 22, jump @31\n      : @29 [@dyn 11] (gas: 7)\n   995: sp = sp + 0xfffffffffffffff0\n   998: u64 [sp + 0x8] = ra\n  1001: u64 [sp] = s0\n  1003: s0 = a0\n  1005: a0 = 0x40\n  1008: a1 = 0x20\n  1011: ra = 24, jump @0\n      : @30 [@dyn 12] (gas: 100)\n  1016: a1 = u8 [a0 + 0x1]\n  1019: a2 = u8 [a0]\n  1021: a3 = u8 [a0 + 0x2]\n  1024: a4 = u8 [a0 + 0x3]\n  1027: a1 = a1 << 0x8\n  1030: a1 = a1 | a2\n  1033: a3 = a3 << 0x10\n  1036: a4 = a4 << 0x18\n  1039: a3 = a3 | a4\n  1042: a1 = a1 | a3\n  1045: a2 = u8 [a0 + 0x5]\n  1048: a3 = u8 [a0 + 0x4]\n  1051: a4 = u8 [a0 + 0x6]\n  1054: a5 = u8 [a0 + 0x7]\n  1057: a2 = a2 << 0x8\n  1060: a2 = a2 | a3\n  1063: a4 = a4 << 0x10\n  1066: a5 = a5 << 0x18\n  1069: a4 = a4 | a5\n  1072: a2 = a2 | a4\n  1075: a2 = a2 << 0x20\n  1078: t0 = a2 | a1\n  1081: a2 = u8 [a0 + 0x9]\n  1084: a3 = u8 [a0 + 0x8]\n  1087: a4 = u8 [a0 + 0xa]\n  1090: a5 = u8 [a0 + 0xb]\n  1093: a2 = a2 << 0x8\n  1096: a2 = a2 | a3\n  1099: a4 = a4 << 0x10\n  1102: a5 = a5 << 0x18\n  1105: a4 = a4 | a5\n  1108: a2 = a2 | a4\n  1111: a3 = u8 [a0 + 0xd]\n  1114: a4 = u8 [a0 + 0xc]\n  1117: a5 = u8 [a0 + 0xe]\n  1120: a1 = u8 [a0 + 0xf]\n  1123: a3 = a3 << 0x8\n  1126: a3 = a3 | a4\n  1129: a5 = a5 << 0x10\n  1132: a1 = a1 << 0x18\n  1135: a1 = a1 | a5\n  1138: a1 = a1 | a3\n  1141: a1 = a1 << 0x20\n  1144: t1 = a1 | a2\n  1147: a1 = u8 [a0 + 0x11]\n  1150: a3 = u8 [a0 + 0x10]\n  1153: a4 = u8 [a0 + 0x12]\n  1156: a5 = u8 [a0 + 0x13]\n  1159: a1 = a1 << 0x8\n  1162: a1 = a1 | a3\n  1165: a4 = a4 << 0x10\n  1168: a5 = a5 << 0x18\n  1171: a4 = a4 | a5\n  1174: a1 = a1 | a4\n  1177: a3 = u8 [a0 + 0x15]\n  1180: a4 = u8 [a0 + 0x14]\n  1183: a5 = u8 [a0 + 0x16]\n  1186: a2 = u8 [a0 + 0x17]\n  1189: a3 = a3 << 0x8\n  1192: a3 = a3 | a4\n  1195: a5 = a5 << 0x10\n  1198: a2 = a2 << 0x18\n  1201: a2 = a2 | a5\n  1204: a2 = a2 | a3\n  1207: a2 = a2 << 0x20\n  1210: a3 = a2 | a1\n  1213: a1 = u8 [a0 + 0x19]\n  1216: a2 = u8 [a0 + 0x18]\n  1219: a4 = u8 [a0 + 0x1a]\n  1222: a5 = u8 [a0 + 0x1b]\n  1225: a1 = a1 << 0x8\n  1228: a1 = a1 | a2\n  1231: a4 = a4 << 0x10\n  1234: a5 = a5 << 0x18\n  1237: a4 = a4 | a5\n  1240: a1 = a1 | a4\n  1243: a2 = u8 [a0 + 0x1d]\n  1246: a4 = u8 [a0 + 0x1c]\n  1249: a5 = u8 [a0 + 0x1e]\n  1252: a0 = u8 [a0 + 0x1f]\n  1255: a2 = a2 << 0x8\n  1258: a2 = a2 | a4\n  1261: a5 = a5 << 0x10\n  1264: a0 = a0 << 0x18\n  1267: a0 = a0 | a5\n  1270: a0 = a0 | a2\n  1273: a0 = a0 << 0x20\n  1276: a0 = a0 | a1\n  1279: a0 = reverse a0\n  1281: a1 = reverse a3\n  1283: a2 = reverse t1\n  1285: a3 = reverse t0\n  1287: u64 [s0 + 0x18] = a3\n  1290: u64 [s0 + 0x10] = a2\n  1293: u64 [s0 + 0x8] = a1\n  1296: u64 [s0] = a0\n  1298: ra = u64 [sp + 0x8]\n  1301: s0 = u64 [sp]\n  1303: sp = sp + 0x10\n  1306: ret\n      : @31 (gas: 5)\n  1308: sp = sp + 0xfffffffffffffff8\n  1311: u64 [sp] = ra\n  1313: a0 = 0\n  1315: a1 = 0\n  1317: ra = 26, jump @0\n      : @32 [@dyn 13] (gas: 7)\n  1322: i32 a1 = a0 + 0\n  1324: a0 = 0x1\n  1327: a2 = 0\n  1329: ecalli 3 // 'seal_return'\n  1331: a0 = 0\n  1333: ra = 0x1c\n  1336: jump @9\n      : @33 [export #0: 'call'] (gas: 2)\n  1339: a0 = 0\n  1341: ra = 28, jump @9\n      : @34 [@dyn 14] [export #1: 'deploy'] (gas: 2)\n  1346: a0 = 0x1\n  1349: ra = 30, jump @9\n      : @35 [@dyn 15] (gas: 1)\n  1354: jump @31\n",
						"bytecode": {
							"object": "50564d0000b706000000000000010700c13000c00040030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102853b0463616c6c8542066465706c6f790686180f02854c400028012d014a01de010f03240389039503de03e303f8032a0542054a058b791052093b3309010001ae9833c8780883881f8488e0553801000128390a040002ae8a123d080400023308100002c8870732003308100002c88707320000006f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a02013d07080002510507501004095010066d029511a07b10587b15507b16489515608411e0330740330820501008bbfe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a0501821710821818821908821ad49808d4a707d487075207370133074033082050100a27fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cf6fc837833070133090a030183666467330850100ee1fc8377330833090a018317200a018217288118308219206f77977a206f88988820d48a0a9878206f99979b20330c0000023307100003d48b0b98992039080000023e0920000321032800033e0b1800033e0a10000351080883770a0401646733085010107cfc8378330733093300120a03019511d07b10287b15209515308411f04911184911104901800064184911083300149511d87b10207b15187b161082897b19088289087b198285108286183307403308203300022825fc5010163e019511f07b10087b1564753307403308205010180dfc7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511f87b103307330850101adbfa837833070133090a03330733001c28d6fb330750101cd1fb33070150101ec9fb28d249489220248414d25529494992244992244992244992244992244992244992244952521a12214992248424499224499224499224494a494d529248429224499224499224294992244992244992244992244992244992244992244992a42a4992648552ab5095939492941092104208a915aa34499244499294942449482a09294992244992244992244992244992244992244992244992244992244992244992aa24a5942a942a29240400"
						},
						"deployedBytecode": {
							"object": "50564d0000b706000000000000010700c13000c00040030420000000046a06000000000700000015000000230000002e000000400000006164647265737363616c6c5f646174615f636f707963616c6c5f646174615f73697a657365616c5f72657475726e7365745f696d6d757461626c655f6461746176616c75655f7472616e73666572726564051102853b0463616c6c8542066465706c6f790686180f02854c400028012d014a01de010f03240389039503de03e303f8032a0542054a058b791052093b3309010001ae9833c8780883881f8488e0553801000128390a040002ae8a123d080400023308100002c8870732003308100002c88707320000006f686f59821a6faa821b086fbb787b18787a10787908787898bc38787c1f98bc30787c1e98bc28787c1d98bc20787c1c98bc18787c1b98bc10787c1a98bb08787b1998ab38787b1798ab30787b1698ab28787b1598ab20787b1498ab18787b1398ab10787b1298aa08787a11989a38787a0f989a30787a0e989a28787a0d989a20787a0c989a18787a0b989a10787a0a98990878790998893878790798893078790698892878790598892078790498891878790398891078790298880878780182102082151882161095112832009511f07b10087b158475010a02013d07080002510507501004095010066d029511a07b10587b15507b16489515608411e0330740330820501008bbfe46171f800046171e46171d46171c46171b46171a46171946171846171746171646171546171446171346171246171146171046170f46170e46170d46170c46170b46170a4617094617084617074617064617054617044617034617024617014607491118490149110849111083170a0501821710821818821908821ad49808d4a707d487075207370133074033082050100a27fe7c78117c79107c7a127c7b13978808d4980897aa1097bb18d4ba0ad4a8087c79157c7a147c7b167c7c17979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79017c7a7c7b027c7c03979908d4a90997bb1097cc18d4cb0bd4b9097c7a057c7b047c7c067c760797aa08d4ba0a97cc10976618d46c0cd4ca0a97aa20d4a9097c7a197c7b187c7c1a7c761b97aa08d4ba0a97cc10976618d46c0cd4ca0a7c7b1d7c7c1c7c761e7c781f97bb08d4cb0b976610978818d46808d4b808978820d48a0a7c78097c7b087c7c0a7c760b978808d4b80897cc10976618d46c0cd4c8087c7b0d7c7c0c7c760e7c770f97bb08d4cb0b976610977718d46707d4b707977720d487076f776fa66f986f29d49808d47609d48909989920d48707977720d49707510717003307330850100cf6fc837833070133090a030183666467330850100ee1fc8377330833090a018317200a018217288118308219206f77977a206f88988820d48a0a9878206f99979b20330c0000023307100003d48b0b98992039080000023e0920000321032800033e0b1800033e0a10000351080883770a0401646733085010107cfc8378330733093300120a03019511d07b10287b15209515308411f04911184911104901800064184911083300149511d87b10207b15187b161082897b19088289087b198285108286183307403308203300022825fc5010163e019511f07b10087b1564753307403308205010180dfc7c78017c797c7a027c7b03978808d4980897aa1097bb18d4ba0ad4a8087c79057c7a047c7b067c7c07979908d4a90997bb1097cc18d4cb0bd4b909979920d489027c79097c7a087c7b0a7c7c0b979908d4a90997bb1097cc18d4cb0bd4b9097c7a0d7c7b0c7c7c0e7c780f97aa08d4ba0a97cc10978818d4c808d4a808978820d498037c78117c7a107c7b127c7c13978808d4a80897bb1097cc18d4cb0bd4b8087c7a157c7b147c7c167c791797aa08d4ba0a97cc10979918d4c909d4a909979920d4890a7c78197c79187c7b1a7c7c1b978808d4980897bb1097cc18d4cb0bd4b8087c791d7c7b1c7c7c1e7c771f979908d4b90997cc10977718d4c707d49707977720d487076f776fa86f396f2a7b5a187b59107b58087b57821008821595111032009511f87b103307330850101adbfa837833070133090a03330733001c28d6fb330750101cd1fb33070150101ec9fb28d249489220248414d25529494992244992244992244992244992244992244992244952521a12214992248424499224499224499224494a494d529248429224499224499224294992244992244992244992244992244992244992244992a42a4992648552ab5095939492941092104208a915aa34499244499294942449482a09294992244992244992244992244992244992244992244992244992244992244992aa24a5942a942a29240400"
						},
						"methodIdentifiers": {}
					},
					"irOptimized": "/// @use-src 0:\"EscroDotLite.sol\"\nobject \"ECDSA_347\" {\n    code {\n        {\n            /// @src 0:696:8082  \"library ECDSA {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"ECDSA_347_deployed\"), datasize(\"ECDSA_347_deployed\"))\n            setimmutable(_1, \"library_deploy_address\", address())\n            return(_1, datasize(\"ECDSA_347_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n    }\n    /// @use-src 0:\"EscroDotLite.sol\"\n    object \"ECDSA_347_deployed\" {\n        code {\n            {\n                /// @src 0:696:8082  \"library ECDSA {...\"\n                mstore(64, memoryguard(0x80))\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n        }\n        data \".metadata\" hex\"a26469706673582212202c8b197da9c67b684e904d95888c4109308f3030955f2689e87f44ccaa84c2b564736f6c634300081c0033\"\n    }\n}\n",
					"hash": "fab3d82f9929e7670e2b5da35abe1f8496614c48168bb74d24f035eb11c39480",
					"factoryDependencies": {}
				},
				"EscroDot": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "DisputeRaised",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "refunded",
									"type": "bool"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "arbiter",
									"type": "address"
								}
							],
							"name": "DisputeResolved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "PaymentClaimed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "provider",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "stake",
									"type": "uint256"
								}
							],
							"name": "ServiceDeployed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "ServicePurchased",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "description",
									"type": "string"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "gateway",
									"type": "string"
								}
							],
							"name": "ServiceUpdated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newTotal",
									"type": "uint256"
								}
							],
							"name": "StakeToppedUp",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "newTotal",
									"type": "uint256"
								}
							],
							"name": "StakeWithdrawn",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								}
							],
							"name": "buyService",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "deliverableHash",
									"type": "bytes32"
								}
							],
							"name": "claimDigest",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "deliverableHash",
									"type": "bytes32"
								},
								{
									"internalType": "bytes",
									"name": "buyerSignature",
									"type": "bytes"
								}
							],
							"name": "claimPayment",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "gateway",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "description",
									"type": "string"
								}
							],
							"name": "createService",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "listServices",
							"outputs": [
								{
									"internalType": "bytes32[]",
									"name": "ids",
									"type": "bytes32[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "nextPurchaseIds",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "purchases",
							"outputs": [
								{
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "claimed",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "disputed",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "resolved",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "raiseDispute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "refundBuyer",
									"type": "bool"
								}
							],
							"name": "resolveDispute",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "serviceIds",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "services",
							"outputs": [
								{
									"internalType": "address",
									"name": "provider",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "description",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "gateway",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"name": "stakes",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								}
							],
							"name": "topUpStake",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "string",
									"name": "description",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "gateway",
									"type": "string"
								}
							],
							"name": "updateService",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "serviceId",
									"type": "bytes32"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"stateMutability": "payable",
							"type": "receive"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"DisputeRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"arbiter\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"PaymentClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"ServiceDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ServicePurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gateway\",\"type\":\"string\"}],\"name\":\"ServiceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"StakeToppedUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotal\",\"type\":\"uint256\"}],\"name\":\"StakeWithdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"name\":\"buyService\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"claimDigest\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"buyerSignature\",\"type\":\"bytes\"}],\"name\":\"claimPayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gateway\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"createService\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listServices\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"ids\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nextPurchaseIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"raiseDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refundBuyer\",\"type\":\"bool\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"serviceIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"services\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gateway\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"}],\"name\":\"topUpStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"gateway\",\"type\":\"string\"}],\"name\":\"updateService\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"serviceId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{\"claimDigest(bytes32,uint256,bytes32)\":{\"details\":\"Compute the digest that a buyer must sign to authorise payment\"},\"createService(string,uint256,string,string)\":{\"params\":{\"description\":\"IPFS CID or text description `msg.value` \\u2013 initial stake (must be \\u2265 `price`)\",\"gateway\":\"Service endpoint URL\",\"name\":\"Human\\u2011readable service name (unique)\",\"price\":\"Fixed price in wei\"}},\"listServices()\":{\"returns\":{\"ids\":\"Array of all service IDs\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DisputeRaised(bytes32,uint256)\":{\"notice\":\"Buyer flagged the purchase for dispute\"},\"DisputeResolved(bytes32,uint256,bool,address)\":{\"notice\":\"Dispute resolved by an arbiter\"},\"PaymentClaimed(bytes32,uint256)\":{\"notice\":\"Provider claimed the locked payment (buyer signature verified)\"},\"ServiceDeployed(bytes32,string,address,uint256)\":{\"notice\":\"New service deployed\"},\"ServicePurchased(bytes32,uint256,address,uint256)\":{\"notice\":\"Buyer successfully paid for the service\"},\"ServiceUpdated(bytes32,string,string)\":{\"notice\":\"Service updated\"},\"StakeToppedUp(bytes32,uint256,uint256)\":{\"notice\":\"Provider topped up their stake\"},\"StakeWithdrawn(bytes32,uint256,uint256)\":{\"notice\":\"Provider withdrew part of their stake\"}},\"kind\":\"user\",\"methods\":{\"buyService(bytes32)\":{\"notice\":\"Purchase the service by locking `price` ETH in this contract\"},\"claimPayment(bytes32,uint256,bytes32,bytes)\":{\"notice\":\"Provider claims funds by presenting a buyer\\u2011signed message\"},\"createService(string,uint256,string,string)\":{\"notice\":\"Create a new service\"},\"nextPurchaseIds(bytes32)\":{\"notice\":\"Map: serviceId \\u21d2 next purchase ID\"},\"purchases(bytes32,uint256)\":{\"notice\":\"Map: serviceId \\u21d2 purchaseId \\u21d2 Purchase\"},\"resolveDispute(bytes32,uint256,bool)\":{\"notice\":\"Resolve a dispute. Anyone can act as arbiter by bonding \\u2265 price\"},\"serviceIds(uint256)\":{\"notice\":\"List of all serviceIds (for off\\u2011chain pagination)\"},\"services(bytes32)\":{\"notice\":\"Map: serviceId \\u21d2 Service data\"},\"stakes(bytes32)\":{\"notice\":\"Map: serviceId \\u21d2 provider's collateral\"},\"topUpStake(bytes32)\":{\"notice\":\"Increase stake for a service \"},\"updateService(bytes32,string,string)\":{\"notice\":\"Update service details\"},\"withdrawStake(bytes32,uint256)\":{\"notice\":\"Withdraw unused stake (cannot exceed balance held by contract)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"EscroDotLite.sol\":\"EscroDot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"EscroDotLite.sol\":{\"keccak256\":\"0x034012af9c62c5484751cb61a6567c259e44328cd0983313a197e3744586e5e6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79e37de199140b9ccebfac51bb5618d455fdabbac20cafaaa12ec04a7c43435c\",\"dweb:/ipfs/QmT3tU2HznwXSH5PhdoEEWvfj1JFonYZUDF65vCTC6vgi9\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"claimDigest(bytes32,uint256,bytes32)": {
								"details": "Compute the digest that a buyer must sign to authorise payment"
							},
							"createService(string,uint256,string,string)": {
								"params": {
									"description": "IPFS CID or text description `msg.value` – initial stake (must be ≥ `price`)",
									"gateway": "Service endpoint URL",
									"name": "Human‑readable service name (unique)",
									"price": "Fixed price in wei"
								}
							},
							"listServices()": {
								"returns": {
									"ids": "Array of all service IDs"
								}
							}
						},
						"version": 1
					},
					"userdoc": {
						"events": {
							"DisputeRaised(bytes32,uint256)": {
								"notice": "Buyer flagged the purchase for dispute"
							},
							"DisputeResolved(bytes32,uint256,bool,address)": {
								"notice": "Dispute resolved by an arbiter"
							},
							"PaymentClaimed(bytes32,uint256)": {
								"notice": "Provider claimed the locked payment (buyer signature verified)"
							},
							"ServiceDeployed(bytes32,string,address,uint256)": {
								"notice": "New service deployed"
							},
							"ServicePurchased(bytes32,uint256,address,uint256)": {
								"notice": "Buyer successfully paid for the service"
							},
							"ServiceUpdated(bytes32,string,string)": {
								"notice": "Service updated"
							},
							"StakeToppedUp(bytes32,uint256,uint256)": {
								"notice": "Provider topped up their stake"
							},
							"StakeWithdrawn(bytes32,uint256,uint256)": {
								"notice": "Provider withdrew part of their stake"
							}
						},
						"kind": "user",
						"methods": {
							"buyService(bytes32)": {
								"notice": "Purchase the service by locking `price` ETH in this contract"
							},
							"claimPayment(bytes32,uint256,bytes32,bytes)": {
								"notice": "Provider claims funds by presenting a buyer‑signed message"
							},
							"createService(string,uint256,string,string)": {
								"notice": "Create a new service"
							},
							"nextPurchaseIds(bytes32)": {
								"notice": "Map: serviceId ⇒ next purchase ID"
							},
							"purchases(bytes32,uint256)": {
								"notice": "Map: serviceId ⇒ purchaseId ⇒ Purchase"
							},
							"resolveDispute(bytes32,uint256,bool)": {
								"notice": "Resolve a dispute. Anyone can act as arbiter by bonding ≥ price"
							},
							"serviceIds(uint256)": {
								"notice": "List of all serviceIds (for off‑chain pagination)"
							},
							"services(bytes32)": {
								"notice": "Map: serviceId ⇒ Service data"
							},
							"stakes(bytes32)": {
								"notice": "Map: serviceId ⇒ provider's collateral"
							},
							"topUpStake(bytes32)": {
								"notice": "Increase stake for a service "
							},
							"updateService(bytes32,string,string)": {
								"notice": "Update service details"
							},
							"withdrawStake(bytes32,uint256)": {
								"notice": "Withdraw unused stake (cannot exceed balance held by contract)"
							}
						},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 356,
								"contract": "EscroDotLite.sol:EscroDot",
								"label": "services",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_bytes32,t_struct(Service)387_storage)"
							},
							{
								"astId": 360,
								"contract": "EscroDotLite.sol:EscroDot",
								"label": "serviceIds",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_bytes32)dyn_storage"
							},
							{
								"astId": 365,
								"contract": "EscroDotLite.sol:EscroDot",
								"label": "stakes",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_bytes32,t_uint256)"
							},
							{
								"astId": 373,
								"contract": "EscroDotLite.sol:EscroDot",
								"label": "purchases",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Purchase)398_storage))"
							},
							{
								"astId": 378,
								"contract": "EscroDotLite.sol:EscroDot",
								"label": "nextPurchaseIds",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_bytes32,t_uint256)"
							},
							{
								"astId": 493,
								"contract": "EscroDotLite.sol:EscroDot",
								"label": "_locked",
								"offset": 0,
								"slot": "5",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_bytes32)dyn_storage": {
								"base": "t_bytes32",
								"encoding": "dynamic_array",
								"label": "bytes32[]",
								"numberOfBytes": "32"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_bytes32": {
								"encoding": "inplace",
								"label": "bytes32",
								"numberOfBytes": "32"
							},
							"t_mapping(t_bytes32,t_mapping(t_uint256,t_struct(Purchase)398_storage))": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => mapping(uint256 => struct EscroDot.Purchase))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_struct(Purchase)398_storage)"
							},
							"t_mapping(t_bytes32,t_struct(Service)387_storage)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => struct EscroDot.Service)",
								"numberOfBytes": "32",
								"value": "t_struct(Service)387_storage"
							},
							"t_mapping(t_bytes32,t_uint256)": {
								"encoding": "mapping",
								"key": "t_bytes32",
								"label": "mapping(bytes32 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_struct(Purchase)398_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct EscroDot.Purchase)",
								"numberOfBytes": "32",
								"value": "t_struct(Purchase)398_storage"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Purchase)398_storage": {
								"encoding": "inplace",
								"label": "struct EscroDot.Purchase",
								"members": [
									{
										"astId": 389,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "buyer",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 391,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "amount",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 393,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "claimed",
										"offset": 0,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 395,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "disputed",
										"offset": 1,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 397,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "resolved",
										"offset": 2,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_struct(Service)387_storage": {
								"encoding": "inplace",
								"label": "struct EscroDot.Service",
								"members": [
									{
										"astId": 380,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "provider",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 382,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "price",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 384,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "description",
										"offset": 0,
										"slot": "2",
										"type": "t_string_storage"
									},
									{
										"astId": 386,
										"contract": "EscroDotLite.sol:EscroDot",
										"label": "gateway",
										"offset": 0,
										"slot": "3",
										"type": "t_string_storage"
									}
								],
								"numberOfBytes": "128"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 272/65824 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 39823\n// Code size = 127424 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x20110]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x20110] = a1\n    42: a1 = 0x20120\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x20120\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 1)\n    64: jump @22 if a0 == a1\n      : @9 (gas: 9)\n    67: a3 = a1 << 0x20\n    70: a3 = a3 >> 0x20\n    73: a4 = a0 << 0x20\n    76: a4 = a4 >> 0x20\n    79: a4 = a4 + a2\n    82: a3 = a3 - a4\n    85: a4 = a2 << 0x1\n    88: a4 = -a4\n    90: jump @15 if a4 >=u a3\n      : @10 (gas: 1)\n    93: jump @19 if a0 >=u a1\n      : @11 (gas: 1)\n    96: jump @22 if a2 == 0\n      : @12 (gas: 3)\n    99: a2 = a2 + a0\n   102: a3 = a0\n   104: fallthrough\n      : @13 (gas: 6)\n   105: a4 = u8 [a1]\n   107: a1 = a1 + 0x1\n   110: a5 = a3 + 0x1\n   113: u8 [a3] = a4\n   115: a3 = a5\n   117: jump @13 if a5 != a2\n      : @14 (gas: 1)\n   120: jump @22\n      : @15 (gas: 1)\n   122: jump @22 if a2 == 0\n      : @16 (gas: 3)\n   125: a2 = a2 + a0\n   128: a3 = a0\n   130: fallthrough\n      : @17 (gas: 6)\n   131: a4 = u8 [a1]\n   133: a1 = a1 + 0x1\n   136: a5 = a3 + 0x1\n   139: u8 [a3] = a4\n   141: a3 = a5\n   143: jump @17 if a5 != a2\n      : @18 (gas: 1)\n   146: jump @22\n      : @19 (gas: 1)\n   148: jump @22 if a2 == 0\n      : @20 (gas: 2)\n   151: i32 a3 = a2 + 0xffffffffffffffff\n   154: fallthrough\n      : @21 (gas: 7)\n   155: a4 = a1 + a3\n   158: a4 = u8 [a4]\n   160: a2 = a2 + 0xffffffffffffffff\n   163: a5 = a0 + a3\n   166: u8 [a5] = a4\n   168: i32 a3 = a3 + 0xffffffffffffffff\n   171: jump @21 if a2 != 0\n      : @22 (gas: 1)\n   174: ret\n      : @23 (gas: 13)\n   176: sp = sp + 0xffffffffffffffd8\n   179: u64 [sp + 0x20] = ra\n   182: u64 [sp + 0x18] = s0\n   185: u64 [sp + 0x10] = s1\n   188: a2 = u64 [a1]\n   190: u64 [sp + 0x8] = a2\n   193: a2 = u64 [a1 + 0x8]\n   196: u64 [sp] = a2\n   198: s0 = u64 [a1 + 0x10]\n   201: s1 = u64 [a1 + 0x18]\n   204: i32 a0 = a0 + 0\n   206: a1 = 0x20\n   209: ra = 2, jump @0\n      : @24 [@dyn 1] (gas: 71)\n   214: a1 = reverse s1\n   216: a2 = reverse s0\n   218: a3 = u64 [sp]\n   220: a3 = reverse a3\n   222: a4 = u64 [sp + 0x8]\n   225: a4 = reverse a4\n   227: u8 [a0 + 0x18] = a4\n   230: u8 [a0 + 0x10] = a3\n   233: u8 [a0 + 0x8] = a2\n   236: u8 [a0] = a1\n   238: a5 = a4 >> 0x38\n   241: u8 [a0 + 0x1f] = a5\n   244: a5 = a4 >> 0x30\n   247: u8 [a0 + 0x1e] = a5\n   250: a5 = a4 >> 0x28\n   253: u8 [a0 + 0x1d] = a5\n   256: a5 = a4 >> 0x20\n   259: u8 [a0 + 0x1c] = a5\n   262: a5 = a4 >> 0x18\n   265: u8 [a0 + 0x1b] = a5\n   268: a5 = a4 >> 0x10\n   271: u8 [a0 + 0x1a] = a5\n   274: a4 = a4 >> 0x8\n   277: u8 [a0 + 0x19] = a4\n   280: a4 = a3 >> 0x38\n   283: u8 [a0 + 0x17] = a4\n   286: a4 = a3 >> 0x30\n   289: u8 [a0 + 0x16] = a4\n   292: a4 = a3 >> 0x28\n   295: u8 [a0 + 0x15] = a4\n   298: a4 = a3 >> 0x20\n   301: u8 [a0 + 0x14] = a4\n   304: a4 = a3 >> 0x18\n   307: u8 [a0 + 0x13] = a4\n   310: a4 = a3 >> 0x10\n   313: u8 [a0 + 0x12] = a4\n   316: a3 = a3 >> 0x8\n   319: u8 [a0 + 0x11] = a3\n   322: a3 = a2 >> 0x38\n   325: u8 [a0 + 0xf] = a3\n   328: a3 = a2 >> 0x30\n   331: u8 [a0 + 0xe] = a3\n   334: a3 = a2 >> 0x28\n   337: u8 [a0 + 0xd] = a3\n   340: a3 = a2 >> 0x20\n   343: u8 [a0 + 0xc] = a3\n   346: a3 = a2 >> 0x18\n   349: u8 [a0 + 0xb] = a3\n   352: a3 = a2 >> 0x10\n   355: u8 [a0 + 0xa] = a3\n   358: a2 = a2 >> 0x8\n   361: u8 [a0 + 0x9] = a2\n   364: a2 = a1 >> 0x38\n   367: u8 [a0 + 0x7] = a2\n   370: a2 = a1 >> 0x30\n   373: u8 [a0 + 0x6] = a2\n   376: a2 = a1 >> 0x28\n   379: u8 [a0 + 0x5] = a2\n   382: a2 = a1 >> 0x20\n   385: u8 [a0 + 0x4] = a2\n   388: a2 = a1 >> 0x18\n   391: u8 [a0 + 0x3] = a2\n   394: a2 = a1 >> 0x10\n   397: u8 [a0 + 0x2] = a2\n   400: a1 = a1 >> 0x8\n   403: u8 [a0 + 0x1] = a1\n   406: ra = u64 [sp + 0x20]\n   409: s0 = u64 [sp + 0x18]\n   412: s1 = u64 [sp + 0x10]\n   415: sp = sp + 0x28\n   418: ret\n      : @25 (gas: 6)\n   420: sp = sp + 0xfffffffffffffff0\n   423: u64 [sp + 0x8] = ra\n   426: u64 [sp] = s0\n   428: s0 = a0 & 0x1\n   431: ecalli 4 // 'call_data_size'\n   433: fallthrough\n      : @26 (gas: 2)\n   434: u32 [0x20114] = a0\n   439: jump @28 if s0 == 0\n      : @27 (gas: 1)\n   442: ra = 4, jump @29\n      : @28 [@dyn 2] (gas: 1)\n   446: ra = 6, jump @43\n      : @29 [@dyn 3] (gas: 9)\n   451: sp = sp + 0xffffffffffffff60\n   455: u64 [sp + 0x98] = ra\n   459: u64 [sp + 0x90] = s0\n   463: u64 [sp + 0x88] = s1\n   467: s0 = sp + 0xa0\n   471: sp = sp & 0xffffffffffffffe0\n   474: a0 = 0x40\n   477: a1 = 0x20\n   480: ra = 8, jump @0\n      : @30 [@dyn 4] (gas: 39)\n   485: u8 [a0 + 31] = 0x80\n   490: u8 [a0 + 30] = 0\n   493: u8 [a0 + 29] = 0\n   496: u8 [a0 + 28] = 0\n   499: u8 [a0 + 27] = 0\n   502: u8 [a0 + 26] = 0\n   505: u8 [a0 + 25] = 0\n   508: u8 [a0 + 24] = 0\n   511: u8 [a0 + 23] = 0\n   514: u8 [a0 + 22] = 0\n   517: u8 [a0 + 21] = 0\n   520: u8 [a0 + 20] = 0\n   523: u8 [a0 + 19] = 0\n   526: u8 [a0 + 18] = 0\n   529: u8 [a0 + 17] = 0\n   532: u8 [a0 + 16] = 0\n   535: u8 [a0 + 15] = 0\n   538: u8 [a0 + 14] = 0\n   541: u8 [a0 + 13] = 0\n   544: u8 [a0 + 12] = 0\n   547: u8 [a0 + 11] = 0\n   550: u8 [a0 + 10] = 0\n   553: u8 [a0 + 9] = 0\n   556: u8 [a0 + 8] = 0\n   559: u8 [a0 + 7] = 0\n   562: u8 [a0 + 6] = 0\n   565: u8 [a0 + 5] = 0\n   568: u8 [a0 + 4] = 0\n   571: u8 [a0 + 3] = 0\n   574: u8 [a0 + 2] = 0\n   577: u8 [a0 + 1] = 0\n   580: u8 [a0 + 0] = 0\n   582: u64 [sp + 24] = 0\n   585: u64 [sp + 0] = 0\n   587: u64 [sp + 8] = 0\n   590: u64 [sp + 16] = 0\n   593: i32 a0 = sp + 0\n   595: ecalli 15 // 'value_transferred'\n   597: fallthrough\n      : @31 (gas: 8)\n   598: a0 = u64 [sp + 0x10]\n   601: a1 = u64 [sp + 0x18]\n   604: a2 = u64 [sp + 0x8]\n   607: a3 = u64 [sp]\n   609: a1 = a1 | a2\n   612: a0 = a0 | a3\n   615: a0 = a0 | a1\n   618: jump @35 if a0 != 0\n      : @32 (gas: 33)\n   622: u64 [sp + 88] = 0\n   625: u64 [sp + 80] = 0\n   628: u64 [sp + 72] = 0\n   631: s1 = 0x5\n   634: u64 [sp + 0x40] = s1\n   637: u64 [sp + 120] = 0\n   640: u64 [sp + 112] = 0\n   643: u64 [sp + 104] = 0\n   646: u64 [sp + 96] = 0\n   649: u32 [sp + 32] = 0x20\n   653: i32 a1 = sp + 0x40\n   656: i32 a3 = sp + 0x60\n   659: i32 a4 = sp + 0x20\n   662: a2 = 0xffffffffffffffff\n   665: a0 = 0\n   667: ecalli 7 // 'get_storage'\n   669: u64 [sp + 88] = 0\n   672: u64 [sp + 80] = 0\n   675: u64 [sp + 72] = 0\n   678: u64 [sp + 0x40] = s1\n   681: u64 [sp + 120] = 0\n   684: u64 [sp + 112] = 0\n   687: u64 [sp + 104] = 0\n   690: u64 [sp + 96] = 0x1\n   694: i32 a1 = sp + 0x40\n   697: i32 a3 = sp + 0x60\n   700: a2 = 0xffffffffffffffff\n   703: a4 = 0x20\n   706: a0 = 0\n   708: ecalli 14 // 'set_storage'\n   710: a0 = 0x40\n   713: a1 = 0x20\n   716: ra = 10, jump @0\n      : @33 [@dyn 5] (gas: 100)\n   721: a1 = u8 [a0 + 0x11]\n   724: a2 = u8 [a0 + 0x10]\n   727: a3 = u8 [a0 + 0x12]\n   730: a4 = u8 [a0 + 0x13]\n   733: a1 = a1 << 0x8\n   736: a1 = a1 | a2\n   739: a3 = a3 << 0x10\n   742: a4 = a4 << 0x18\n   745: a3 = a3 | a4\n   748: a1 = a1 | a3\n   751: a2 = u8 [a0 + 0x15]\n   754: a3 = u8 [a0 + 0x14]\n   757: a4 = u8 [a0 + 0x16]\n   760: a5 = u8 [a0 + 0x17]\n   763: a2 = a2 << 0x8\n   766: a2 = a2 | a3\n   769: a4 = a4 << 0x10\n   772: a5 = a5 << 0x18\n   775: a4 = a4 | a5\n   778: a2 = a2 | a4\n   781: a2 = a2 << 0x20\n   784: t0 = a2 | a1\n   787: a2 = u8 [a0 + 0x1]\n   790: a3 = u8 [a0]\n   792: a4 = u8 [a0 + 0x2]\n   795: a5 = u8 [a0 + 0x3]\n   798: a2 = a2 << 0x8\n   801: a2 = a2 | a3\n   804: a4 = a4 << 0x10\n   807: a5 = a5 << 0x18\n   810: a4 = a4 | a5\n   813: a2 = a2 | a4\n   816: a3 = u8 [a0 + 0x5]\n   819: a4 = u8 [a0 + 0x4]\n   822: a5 = u8 [a0 + 0x6]\n   825: s1 = u8 [a0 + 0x7]\n   828: a3 = a3 << 0x8\n   831: a3 = a3 | a4\n   834: a5 = a5 << 0x10\n   837: s1 = s1 << 0x18\n   840: a5 = a5 | s1\n   843: a3 = a3 | a5\n   846: a3 = a3 << 0x20\n   849: a2 = a2 | a3\n   852: a3 = u8 [a0 + 0x19]\n   855: a4 = u8 [a0 + 0x18]\n   858: a5 = u8 [a0 + 0x1a]\n   861: s1 = u8 [a0 + 0x1b]\n   864: a3 = a3 << 0x8\n   867: a3 = a3 | a4\n   870: a5 = a5 << 0x10\n   873: s1 = s1 << 0x18\n   876: a5 = a5 | s1\n   879: a3 = a3 | a5\n   882: a4 = u8 [a0 + 0x1d]\n   885: a5 = u8 [a0 + 0x1c]\n   888: s1 = u8 [a0 + 0x1e]\n   891: a1 = u8 [a0 + 0x1f]\n   894: a4 = a4 << 0x8\n   897: a4 = a4 | a5\n   900: s1 = s1 << 0x10\n   903: a1 = a1 << 0x18\n   906: a1 = a1 | s1\n   909: a1 = a1 | a4\n   912: a1 = a1 << 0x20\n   915: a3 = a3 | a1\n   918: a1 = u8 [a0 + 0x9]\n   921: a4 = u8 [a0 + 0x8]\n   924: a5 = u8 [a0 + 0xa]\n   927: s1 = u8 [a0 + 0xb]\n   930: a1 = a1 << 0x8\n   933: a1 = a1 | a4\n   936: a5 = a5 << 0x10\n   939: s1 = s1 << 0x18\n   942: a5 = a5 | s1\n   945: a1 = a1 | a5\n   948: a4 = u8 [a0 + 0xd]\n   951: a5 = u8 [a0 + 0xc]\n   954: s1 = u8 [a0 + 0xe]\n   957: a0 = u8 [a0 + 0xf]\n   960: a4 = a4 << 0x8\n   963: a4 = a4 | a5\n   966: s1 = s1 << 0x10\n   969: a0 = a0 << 0x18\n   972: a0 = a0 | s1\n   975: a0 = a0 | a4\n   978: a0 = a0 << 0x20\n   981: a0 = a0 | a1\n   984: a0 = reverse a0\n   986: s1 = reverse a3\n   988: a1 = reverse a2\n   990: a2 = reverse t0\n   992: a1 = a1 | a2\n   995: a2 = s1 | a0\n   998: a2 = a2 | a1\n  1001: a2 = a2 >> 0x20\n  1004: a0 = a0 | a1\n  1007: a0 = a0 << 0x20\n  1010: a0 = a0 | a2\n  1013: jump @37 if a0 == 0\n      : @34 (gas: 1)\n  1016: trap\n      : @35 (gas: 3)\n  1017: a0 = 0\n  1019: a1 = 0\n  1021: ra = 12, jump @0\n      : @36 [@dyn 6] (gas: 5)\n  1026: i32 a1 = a0 + 0\n  1028: a0 = 0x1\n  1031: a2 = 0\n  1033: ecalli 12 // 'seal_return'\n  1035: fallthrough\n      : @37 (gas: 4)\n  1036: i32 s1 = s1 + 0\n  1038: a0 = s1\n  1040: a1 = 0\n  1042: ra = 14, jump @0\n      : @38 [@dyn 7] (gas: 5)\n  1047: i32 a0 = a0 + 0\n  1049: a1 = 0\n  1051: a2 = 0\n  1053: ecalli 2 // 'call_data_copy'\n  1055: fallthrough\n      : @39 (gas: 2)\n  1056: a1 = i32 [0x20118]\n  1061: jump @41 if a1 == 0\n      : @40 (gas: 4)\n  1064: a0 = 0x30120\n  1069: i32 a0 = a0 + 0\n  1071: ecalli 13 // 'set_immutable_data'\n  1073: fallthrough\n      : @41 (gas: 3)\n  1074: a0 = s1\n  1076: a1 = 0\n  1078: ra = 16, jump @0\n      : @42 [@dyn 8] (gas: 6)\n  1083: i32 a1 = a0 + 0\n  1085: a0 = 0\n  1087: a2 = 0\n  1089: ra = 0x12\n  1092: ecalli 12 // 'seal_return'\n  1094: fallthrough\n      : @43 [@dyn 9] (gas: 9)\n  1095: sp = sp + 0xfffffffffffffea0\n  1099: u64 [sp + 0x158] = ra\n  1103: u64 [sp + 0x150] = s0\n  1107: u64 [sp + 0x148] = s1\n  1111: s0 = sp + 0x160\n  1115: sp = sp & 0xffffffffffffffe0\n  1118: a0 = 0x40\n  1121: a1 = 0x20\n  1124: ra = 20, jump @0\n      : @44 [@dyn 10] (gas: 35)\n  1129: u8 [a0 + 31] = 0x80\n  1134: u8 [a0 + 30] = 0\n  1137: u8 [a0 + 29] = 0\n  1140: u8 [a0 + 28] = 0\n  1143: u8 [a0 + 27] = 0\n  1146: u8 [a0 + 26] = 0\n  1149: u8 [a0 + 25] = 0\n  1152: u8 [a0 + 24] = 0\n  1155: u8 [a0 + 23] = 0\n  1158: u8 [a0 + 22] = 0\n  1161: u8 [a0 + 21] = 0\n  1164: u8 [a0 + 20] = 0\n  1167: u8 [a0 + 19] = 0\n  1170: u8 [a0 + 18] = 0\n  1173: u8 [a0 + 17] = 0\n  1176: u8 [a0 + 16] = 0\n  1179: u8 [a0 + 15] = 0\n  1182: u8 [a0 + 14] = 0\n  1185: u8 [a0 + 13] = 0\n  1188: u8 [a0 + 12] = 0\n  1191: u8 [a0 + 11] = 0\n  1194: u8 [a0 + 10] = 0\n  1197: u8 [a0 + 9] = 0\n  1200: u8 [a0 + 8] = 0\n  1203: u8 [a0 + 7] = 0\n  1206: u8 [a0 + 3] = 0\n  1209: s1 = 0x20114\n  1214: u8 [a0 + 2] = 0\n  1217: u8 [a0 + 1] = 0\n  1220: u8 [a0 + 0] = 0\n  1222: a1 = i32 [0x20114]\n  1227: u8 [a0 + 6] = 0\n  1230: u8 [a0 + 5] = 0\n  1233: u8 [a0 + 4] = 0\n  1236: jump @86 if a1 <u 4\n      : @45 (gas: 4)\n  1241: i32 a0 = sp + 0x120\n  1245: a1 = 0\n  1247: ecalli 3 // 'call_data_load'\n  1249: fallthrough\n      : @46 (gas: 2)\n  1250: a0 = i32 [sp + 0x13c]\n  1254: jump @56 if a0 <=s 3936577166\n      : @47 (gas: 1)\n  1262: jump @61 if a0 >s 433870613\n      : @48 (gas: 2)\n  1270: a1 = 0xa791000\n  1276: jump @72 if a0 >s 175705782\n      : @49 (gas: 1)\n  1284: jump @81 if a0 == 3936577167\n      : @50 (gas: 1)\n  1292: jump @85 if a0 != 4210080703\n      : @51 (gas: 13)\n  1300: a0 = u32 [0x20114]\n  1305: u64 [sp + 152] = 0\n  1309: u64 [sp + 144] = 0\n  1313: u64 [sp + 136] = 0\n  1317: u64 [sp + 0x80] = a0\n  1321: u64 [sp + 184] = 0\n  1325: u64 [sp + 176] = 0\n  1329: u64 [sp + 160] = 0x4\n  1334: a0 = sp + 0xc0\n  1338: a1 = sp + 0xa0\n  1342: a2 = sp + 0x80\n  1346: u64 [sp + 168] = 0\n  1350: ra = 22, jump @484\n      : @52 [@dyn 11] (gas: 30)\n  1355: a0 = u64 [sp + 0xc0]\n  1359: u64 [sp + 0x18] = a0\n  1362: t1 = u64 [sp + 0xc8]\n  1366: t2 = u64 [sp + 0xd0]\n  1370: ra = u64 [sp + 0xd8]\n  1374: t0 = u64 [sp + 0xe0]\n  1378: a5 = u64 [sp + 0xe8]\n  1382: s1 = u64 [sp + 0xf0]\n  1386: a4 = u64 [sp + 0xf8]\n  1390: a3 = u64 [sp + 0x100]\n  1394: a1 = u64 [sp + 0x108]\n  1398: a2 = u64 [sp + 0x110]\n  1402: a0 = u64 [sp + 0x118]\n  1406: u64 [sp + 0x38] = a0\n  1409: u64 [sp + 0x30] = a2\n  1412: u64 [sp + 0x28] = a1\n  1415: u64 [sp + 0x20] = a3\n  1418: u64 [sp + 0x58] = a4\n  1421: u64 [sp + 0x50] = s1\n  1424: u64 [sp + 0x48] = a5\n  1427: u64 [sp + 0x40] = t0\n  1430: u64 [sp + 0x78] = ra\n  1433: u64 [sp + 0x70] = t2\n  1436: u64 [sp + 0x68] = t1\n  1439: a0 = sp + 0x60\n  1442: a1 = sp + 0x40\n  1445: a2 = sp + 0x20\n  1448: a3 = u64 [sp + 0x18]\n  1451: u64 [sp + 0x60] = a3\n  1454: ra = 24, jump @1254\n      : @53 [@dyn 12] (gas: 3)\n  1460: a0 = 0x40\n  1463: a1 = 0x20\n  1466: ra = 26, jump @0\n      : @54 [@dyn 13] (gas: 100)\n  1471: a1 = u8 [a0 + 0x11]\n  1474: a2 = u8 [a0 + 0x10]\n  1477: a3 = u8 [a0 + 0x12]\n  1480: a4 = u8 [a0 + 0x13]\n  1483: a1 = a1 << 0x8\n  1486: a1 = a1 | a2\n  1489: a3 = a3 << 0x10\n  1492: a4 = a4 << 0x18\n  1495: a3 = a3 | a4\n  1498: a1 = a1 | a3\n  1501: a2 = u8 [a0 + 0x15]\n  1504: a3 = u8 [a0 + 0x14]\n  1507: a4 = u8 [a0 + 0x16]\n  1510: a5 = u8 [a0 + 0x17]\n  1513: a2 = a2 << 0x8\n  1516: a2 = a2 | a3\n  1519: a4 = a4 << 0x10\n  1522: a5 = a5 << 0x18\n  1525: a4 = a4 | a5\n  1528: a2 = a2 | a4\n  1531: a2 = a2 << 0x20\n  1534: t0 = a2 | a1\n  1537: a2 = u8 [a0 + 0x1]\n  1540: a3 = u8 [a0]\n  1542: a4 = u8 [a0 + 0x2]\n  1545: a5 = u8 [a0 + 0x3]\n  1548: a2 = a2 << 0x8\n  1551: a2 = a2 | a3\n  1554: a4 = a4 << 0x10\n  1557: a5 = a5 << 0x18\n  1560: a4 = a4 | a5\n  1563: a2 = a2 | a4\n  1566: a3 = u8 [a0 + 0x5]\n  1569: a4 = u8 [a0 + 0x4]\n  1572: a5 = u8 [a0 + 0x6]\n  1575: s1 = u8 [a0 + 0x7]\n  1578: a3 = a3 << 0x8\n  1581: a3 = a3 | a4\n  1584: a5 = a5 << 0x10\n  1587: s1 = s1 << 0x18\n  1590: a5 = a5 | s1\n  1593: a3 = a3 | a5\n  1596: a3 = a3 << 0x20\n  1599: a2 = a2 | a3\n  1602: a3 = u8 [a0 + 0x19]\n  1605: a4 = u8 [a0 + 0x18]\n  1608: a5 = u8 [a0 + 0x1a]\n  1611: s1 = u8 [a0 + 0x1b]\n  1614: a3 = a3 << 0x8\n  1617: a3 = a3 | a4\n  1620: a5 = a5 << 0x10\n  1623: s1 = s1 << 0x18\n  1626: a5 = a5 | s1\n  1629: a3 = a3 | a5\n  1632: a4 = u8 [a0 + 0x1d]\n  1635: a5 = u8 [a0 + 0x1c]\n  1638: s1 = u8 [a0 + 0x1e]\n  1641: a1 = u8 [a0 + 0x1f]\n  1644: a4 = a4 << 0x8\n  1647: a4 = a4 | a5\n  1650: s1 = s1 << 0x10\n  1653: a1 = a1 << 0x18\n  1656: a1 = a1 | s1\n  1659: a1 = a1 | a4\n  1662: a1 = a1 << 0x20\n  1665: a3 = a3 | a1\n  1668: a1 = u8 [a0 + 0x9]\n  1671: a4 = u8 [a0 + 0x8]\n  1674: a5 = u8 [a0 + 0xa]\n  1677: s1 = u8 [a0 + 0xb]\n  1680: a1 = a1 << 0x8\n  1683: a1 = a1 | a4\n  1686: a5 = a5 << 0x10\n  1689: s1 = s1 << 0x18\n  1692: a5 = a5 | s1\n  1695: a1 = a1 | a5\n  1698: a4 = u8 [a0 + 0xd]\n  1701: a5 = u8 [a0 + 0xc]\n  1704: s1 = u8 [a0 + 0xe]\n  1707: a0 = u8 [a0 + 0xf]\n  1710: a4 = a4 << 0x8\n  1713: a4 = a4 | a5\n  1716: s1 = s1 << 0x10\n  1719: a0 = a0 << 0x18\n  1722: a0 = a0 | s1\n  1725: a0 = a0 | a4\n  1728: a0 = a0 << 0x20\n  1731: a0 = a0 | a1\n  1734: a1 = reverse a0\n  1736: a0 = reverse a3\n  1738: a2 = reverse a2\n  1740: a3 = reverse t0\n  1742: a2 = a2 | a3\n  1745: a3 = a0 | a1\n  1748: a3 = a3 | a2\n  1751: a3 = a3 >> 0x20\n  1754: a1 = a1 | a2\n  1757: a1 = a1 << 0x20\n  1760: a1 = a1 | a3\n  1763: jump @91 if a1 == 0\n      : @55 (gas: 1)\n  1767: trap\n      : @56 (gas: 1)\n  1768: jump @65 if a0 <=s 2552464528\n      : @57 (gas: 2)\n  1775: a1 = 0xffffffffde1c5000\n  1781: jump @69 if a0 >s 3726398599\n      : @58 (gas: 1)\n  1789: jump @78 if a0 == 2552464529\n      : @59 (gas: 1)\n  1797: jump @85 if a0 != 2731774008\n      : @60 (gas: 1)\n  1805: ra = 28, jump @400\n      : @61 [@dyn 14] (gas: 2)\n  1810: a1 = 0x69d27000\n  1816: jump @75 if a0 >s 1775397170\n      : @62 (gas: 1)\n  1824: jump @82 if a0 == 433870614\n      : @63 (gas: 1)\n  1832: jump @85 if a0 != 937816907\n      : @64 (gas: 14)\n  1840: ra = 0x1e\n  1843: sp = sp + 0xfffffffffffffd20\n  1847: u64 [sp + 0x2d8] = ra\n  1851: u64 [sp + 0x2d0] = s0\n  1855: u64 [sp + 0x2c8] = s1\n  1859: s0 = sp + 0x2e0\n  1863: sp = sp & 0xffffffffffffffe0\n  1866: u64 [sp + 664] = 0\n  1870: u64 [sp + 656] = 0\n  1874: u64 [sp + 648] = 0\n  1878: u64 [sp + 640] = 0\n  1882: i32 a0 = sp + 0x280\n  1886: ecalli 15 // 'value_transferred'\n  1888: jump @250\n      : @65 [@dyn 15] (gas: 1)\n  1891: jump @88 if a0 == 2414765063\n      : @66 (gas: 1)\n  1899: jump @80 if a0 == 2434888443\n      : @67 (gas: 1)\n  1907: jump @85 if a0 != 2458667258\n      : @68 (gas: 1)\n  1915: ra = 32, jump @377\n      : @69 [@dyn 16] (gas: 2)\n  1920: i32 a1 = a1 + 0x488\n  1924: jump @79 if a0 == a1\n      : @70 (gas: 1)\n  1928: jump @85 if a0 != 3900265090\n      : @71 (gas: 14)\n  1936: ra = 0x22\n  1939: sp = sp + 0xffffffffffffff60\n  1943: u64 [sp + 0x98] = ra\n  1947: u64 [sp + 0x90] = s0\n  1951: u64 [sp + 0x88] = s1\n  1955: s0 = sp + 0xa0\n  1959: sp = sp & 0xffffffffffffffe0\n  1962: u64 [sp + 56] = 0\n  1965: u64 [sp + 48] = 0\n  1968: u64 [sp + 40] = 0\n  1971: u64 [sp + 32] = 0\n  1974: i32 a0 = sp + 0x20\n  1977: ecalli 15 // 'value_transferred'\n  1979: jump @451\n      : @72 [@dyn 17] (gas: 2)\n  1982: i32 a1 = a1 + 0xfffffffffffffeb7\n  1986: jump @83 if a0 == a1\n      : @73 (gas: 1)\n  1990: jump @85 if a0 != 300277071\n      : @74 (gas: 14)\n  1998: ra = 0x24\n  2001: sp = sp + 0xfffffffffffffde0\n  2005: u64 [sp + 0x218] = ra\n  2009: u64 [sp + 0x210] = s0\n  2013: u64 [sp + 0x208] = s1\n  2017: s0 = sp + 0x220\n  2021: sp = sp & 0xffffffffffffffe0\n  2024: u64 [sp + 504] = 0\n  2028: u64 [sp + 496] = 0\n  2032: u64 [sp + 488] = 0\n  2036: u64 [sp + 480] = 0\n  2040: i32 a0 = sp + 0x1e0\n  2044: ecalli 15 // 'value_transferred'\n  2046: jump @199\n      : @75 [@dyn 18] (gas: 2)\n  2049: i32 a1 = a1 + 0xfffffffffffff933\n  2053: jump @84 if a0 == a1\n      : @76 (gas: 1)\n  2057: jump @85 if a0 != 1913946127\n      : @77 (gas: 1)\n  2065: ra = 38, jump @312\n      : @78 [@dyn 19] (gas: 1)\n  2070: ra = 40, jump @389\n      : @79 [@dyn 20] (gas: 14)\n  2075: ra = 0x2a\n  2078: sp = sp + 0xfffffffffffffee0\n  2082: u64 [sp + 0x118] = ra\n  2086: u64 [sp + 0x110] = s0\n  2090: u64 [sp + 0x108] = s1\n  2094: s0 = sp + 0x120\n  2098: sp = sp & 0xffffffffffffffe0\n  2101: u64 [sp + 248] = 0\n  2105: u64 [sp + 240] = 0\n  2109: u64 [sp + 232] = 0\n  2113: u64 [sp + 224] = 0\n  2117: i32 a0 = sp + 0xe0\n  2121: ecalli 15 // 'value_transferred'\n  2123: jump @435\n      : @80 [@dyn 21] (gas: 1)\n  2126: ra = 44, jump @359\n      : @81 [@dyn 22] (gas: 1)\n  2131: ra = 46, jump @464\n      : @82 [@dyn 23] (gas: 1)\n  2136: ra = 48, jump @217\n      : @83 [@dyn 24] (gas: 14)\n  2141: ra = 0x32\n  2144: sp = sp + 0xfffffffffffffda0\n  2148: u64 [sp + 0x258] = ra\n  2152: u64 [sp + 0x250] = s0\n  2156: u64 [sp + 0x248] = s1\n  2160: s0 = sp + 0x260\n  2164: sp = sp & 0xffffffffffffffe0\n  2167: u64 [sp + 536] = 0\n  2171: u64 [sp + 528] = 0\n  2175: u64 [sp + 520] = 0\n  2179: u64 [sp + 512] = 0\n  2183: i32 a0 = sp + 0x200\n  2187: ecalli 15 // 'value_transferred'\n  2189: jump @160\n      : @84 [@dyn 25] (gas: 14)\n  2192: ra = 0x34\n  2195: sp = sp + 0xffffffffffffff40\n  2199: u64 [sp + 0xb8] = ra\n  2203: u64 [sp + 0xb0] = s0\n  2207: u64 [sp + 0xa8] = s1\n  2211: s0 = sp + 0xc0\n  2215: sp = sp & 0xffffffffffffffe0\n  2218: u64 [sp + 120] = 0\n  2221: u64 [sp + 112] = 0\n  2224: u64 [sp + 104] = 0\n  2227: u64 [sp + 96] = 0\n  2230: i32 a0 = sp + 0x60\n  2233: ecalli 15 // 'value_transferred'\n  2235: jump @286\n      : @85 [@dyn 26] (gas: 2)\n  2238: a1 = i32 [s1]\n  2240: fallthrough\n      : @86 (gas: 1)\n  2241: jump @89 if a1 == 0\n      : @87 (gas: 7)\n  2244: ra = 0x36\n  2247: sp = sp + 0xfffffffffffffff8\n  2250: u64 [sp] = ra\n  2252: a0 = 0\n  2254: a1 = 0\n  2256: ra = 0x8c\n  2260: jump @0\n      : @88 [@dyn 27] (gas: 14)\n  2263: ra = 0x38\n  2266: sp = sp + 0xffffffffffffff60\n  2270: u64 [sp + 0x98] = ra\n  2274: u64 [sp + 0x90] = s0\n  2278: u64 [sp + 0x88] = s1\n  2282: s0 = sp + 0xa0\n  2286: sp = sp & 0xffffffffffffffe0\n  2289: u64 [sp + 56] = 0\n  2292: u64 [sp + 48] = 0\n  2295: u64 [sp + 40] = 0\n  2298: u64 [sp + 32] = 0\n  2301: i32 a0 = sp + 0x20\n  2304: ecalli 15 // 'value_transferred'\n  2306: jump @327\n      : @89 [@dyn 28] (gas: 2)\n  2309: a0 = 0\n  2311: ra = 58, jump @0\n      : @90 [@dyn 29] (gas: 7)\n  2316: i32 a1 = a0 + 0\n  2318: a0 = 0\n  2320: a2 = 0\n  2322: ecalli 12 // 'seal_return'\n  2324: i32 a0 = a0 + 0\n  2326: ra = 0x3a\n  2329: jump @0\n      : @91 (gas: 3)\n  2332: i32 a0 = a0 + 0\n  2334: ra = 0x3a\n  2337: jump @0\n      : @92 (gas: 39)\n  2340: sp = sp + 0xfffffffffffffea0\n  2344: u64 [sp + 0x158] = ra\n  2348: u64 [sp + 0x150] = s0\n  2352: u64 [sp + 0x148] = s1\n  2356: s0 = sp + 0x160\n  2360: sp = sp & 0xffffffffffffffe0\n  2363: u64 [sp + 0x8] = a0\n  2366: a0 = u64 [a2 + 0x18]\n  2369: u64 [sp + 0xb0] = a0\n  2373: a0 = u64 [a2 + 0x10]\n  2376: u64 [sp + 0xa8] = a0\n  2380: a0 = u64 [a2 + 0x8]\n  2383: u64 [sp + 0xa0] = a0\n  2387: a0 = u64 [a2]\n  2389: u64 [sp + 0xb8] = a0\n  2393: a4 = u64 [a1 + 0x18]\n  2396: a3 = u64 [a1 + 0x10]\n  2399: a2 = u64 [a1 + 0x8]\n  2402: a0 = u64 [a1]\n  2404: u64 [sp + 0x18] = a4\n  2407: u64 [sp + 0x118] = a4\n  2411: u64 [sp + 0x20] = a3\n  2414: u64 [sp + 0x110] = a3\n  2418: u64 [sp + 0x68] = a2\n  2421: u64 [sp + 0x108] = a2\n  2425: u64 [sp + 0x70] = a0\n  2428: u64 [sp + 0x100] = a0\n  2432: u64 [sp + 312] = 0\n  2436: u64 [sp + 304] = 0\n  2440: u64 [sp + 296] = 0\n  2444: u64 [sp + 288] = 0\n  2448: u32 [sp + 320] = 0x20\n  2453: i32 a1 = sp + 0x100\n  2457: i32 a3 = sp + 0x120\n  2461: i32 a4 = sp + 0x140\n  2465: a2 = 0xffffffffffffffff\n  2468: a0 = 0\n  2470: ecalli 7 // 'get_storage'\n  2472: fallthrough\n      : @93 (gas: 32)\n  2473: t0 = u64 [sp + 0x130]\n  2477: t1 = u64 [sp + 0x128]\n  2481: t2 = u64 [sp + 0x138]\n  2485: a5 = u64 [sp + 0x120]\n  2489: a0 = t0 << 0x3f\n  2492: a1 = t1 >> 0x1\n  2495: a0 = a0 | a1\n  2498: a1 = t2 << 0x3f\n  2501: a2 = t0 >> 0x1\n  2504: a1 = a1 | a2\n  2507: a2 = t1 << 0x3f\n  2510: a3 = a5 >> 0x1\n  2513: a4 = a3 | a2\n  2516: a2 = t2 >> 0x1\n  2519: u64 [sp + 0x78] = a5\n  2522: a5 = a5 & 0x1\n  2525: a3 = -a5\n  2527: ra = a4 & 0x7f\n  2530: a1 = a1 & a3\n  2533: s1 = a3 & a0\n  2536: a4 = ra if a5 == 0\n  2539: a2 = a2 & a3\n  2542: u64 [sp + 0x58] = a4\n  2545: a0 = a4 <u 0x20\n  2548: u64 [sp + 0x48] = s1\n  2551: a0 = 0 if s1 != 0\n  2553: u64 [sp + 0x50] = a1\n  2556: u64 [sp + 0x40] = a2\n  2559: a1 = a1 | a2\n  2562: a0 = 0 if a1 != 0\n  2564: a1 = a5 <u 0x1\n  2567: jump @112 if a1 != a0\n      : @94 (gas: 17)\n  2571: u64 [sp + 0x98] = a5\n  2575: u64 [sp + 0x10] = ra\n  2578: u64 [sp + 0x80] = t1\n  2582: u64 [sp + 0x88] = t0\n  2586: u64 [sp + 0x90] = t2\n  2590: a0 = u64 [sp + 0xb8]\n  2594: a2 = u64 [sp + 0xa8]\n  2598: a0 = a0 | a2\n  2601: a1 = u64 [sp + 0xb0]\n  2605: a3 = u64 [sp + 0xa0]\n  2609: a1 = a1 | a3\n  2612: a0 = a0 | a1\n  2615: a0 = a0 >> 0x20\n  2618: a1 = a1 | a2\n  2621: a1 = a1 << 0x20\n  2624: a0 = a0 | a1\n  2627: jump @111 if a0 != 0\n      : @95 (gas: 4)\n  2631: s1 = u64 [sp + 0xb8]\n  2635: i32 a0 = s1 + 0\n  2637: a1 = 0x20\n  2640: ra = 60, jump @0\n      : @96 [@dyn 30] (gas: 85)\n  2645: a1 = u64 [sp + 0x40]\n  2648: a1 = reverse a1\n  2650: a2 = u64 [sp + 0x58]\n  2653: a2 = reverse a2\n  2655: a3 = a2 >> 0x38\n  2658: u8 [a0 + 0x1f] = a3\n  2661: a3 = a2 >> 0x30\n  2664: u8 [a0 + 0x1e] = a3\n  2667: a3 = a2 >> 0x28\n  2670: u8 [a0 + 0x1d] = a3\n  2673: a3 = a2 >> 0x20\n  2676: u8 [a0 + 0x1c] = a3\n  2679: a3 = a2 >> 0x18\n  2682: u8 [a0 + 0x1b] = a3\n  2685: a3 = a2 >> 0x10\n  2688: u8 [a0 + 0x1a] = a3\n  2691: a3 = a2 >> 0x8\n  2694: u8 [a0 + 0x19] = a3\n  2697: a3 = u64 [sp + 0x48]\n  2700: a3 = reverse a3\n  2702: u8 [a0 + 0x18] = a2\n  2705: a2 = a3 >> 0x38\n  2708: u8 [a0 + 0x17] = a2\n  2711: a2 = a3 >> 0x30\n  2714: u8 [a0 + 0x16] = a2\n  2717: a2 = a3 >> 0x28\n  2720: u8 [a0 + 0x15] = a2\n  2723: a2 = a3 >> 0x20\n  2726: u8 [a0 + 0x14] = a2\n  2729: a2 = a3 >> 0x18\n  2732: u8 [a0 + 0x13] = a2\n  2735: a2 = a3 >> 0x10\n  2738: u8 [a0 + 0x12] = a2\n  2741: a2 = u64 [sp + 0x50]\n  2744: a2 = reverse a2\n  2746: u8 [a0 + 0x10] = a3\n  2749: a3 = a3 >> 0x8\n  2752: u8 [a0 + 0x11] = a3\n  2755: u8 [a0 + 0x8] = a2\n  2758: a3 = a2 >> 0x38\n  2761: u8 [a0 + 0xf] = a3\n  2764: a3 = a2 >> 0x30\n  2767: u8 [a0 + 0xe] = a3\n  2770: a3 = a2 >> 0x28\n  2773: u8 [a0 + 0xd] = a3\n  2776: a3 = a2 >> 0x20\n  2779: u8 [a0 + 0xc] = a3\n  2782: a3 = a2 >> 0x18\n  2785: u8 [a0 + 0xb] = a3\n  2788: a3 = a2 >> 0x10\n  2791: u8 [a0 + 0xa] = a3\n  2794: a2 = a2 >> 0x8\n  2797: u8 [a0 + 0x9] = a2\n  2800: u8 [a0] = a1\n  2802: a2 = a1 >> 0x38\n  2805: u8 [a0 + 0x7] = a2\n  2808: a2 = a1 >> 0x30\n  2811: u8 [a0 + 0x6] = a2\n  2814: a2 = a1 >> 0x28\n  2817: u8 [a0 + 0x5] = a2\n  2820: a2 = a1 >> 0x20\n  2823: u8 [a0 + 0x4] = a2\n  2826: a2 = a1 >> 0x18\n  2829: u8 [a0 + 0x3] = a2\n  2832: a2 = a1 >> 0x10\n  2835: u8 [a0 + 0x2] = a2\n  2838: a1 = a1 >> 0x8\n  2841: u8 [a0 + 0x1] = a1\n  2844: a0 = s1 + 0x20\n  2847: u64 [sp + 0x60] = a0\n  2850: a0 = a0 <u s1\n  2853: a3 = u64 [sp + 0xa0]\n  2857: a1 = a3 + a0\n  2860: u64 [sp + 0x28] = a1\n  2863: a1 = a1 <u a3\n  2866: a1 = a0 if a0 == 0\n  2869: a0 = u64 [sp + 0xa8]\n  2873: a1 = a1 + a0\n  2876: u64 [sp + 0x30] = a1\n  2879: a0 = a1 <u a0\n  2882: a1 = u64 [sp + 0xb0]\n  2886: a0 = a0 + a1\n  2889: u64 [sp + 0x38] = a0\n  2892: a0 = u64 [sp + 0x98]\n  2896: jump @100 if a0 != 0\n      : @97 (gas: 9)\n  2900: a0 = u64 [sp + 0xb0]\n  2904: a1 = u64 [sp + 0xa8]\n  2908: a0 = a0 | a1\n  2911: a1 = 0xffffffe0\n  2921: a2 = u64 [sp + 0xb8]\n  2925: a1 = a2 <u a1\n  2928: a1 = 0 if a3 != 0\n  2930: a1 = 0 if a0 != 0\n  2932: jump @111 if a1 == 0\n      : @98 (gas: 5)\n  2936: a0 = u64 [sp + 0x78]\n  2939: s1 = a0 & 0xffffffffffffff00\n  2943: a0 = i32 [sp + 0x60]\n  2946: a1 = 0x20\n  2949: ra = 62, jump @0\n      : @99 [@dyn 31] (gas: 73)\n  2954: t0 = 0\n  2956: t1 = 0\n  2958: u64 [sp + 176] = 0\n  2962: a3 = reverse s1\n  2964: a4 = a3 >> 0x30\n  2967: u8 [a0 + 0x1e] = a4\n  2970: a4 = a3 >> 0x28\n  2973: u8 [a0 + 0x1d] = a4\n  2976: a4 = a3 >> 0x20\n  2979: u8 [a0 + 0x1c] = a4\n  2982: a4 = a3 >> 0x18\n  2985: u8 [a0 + 0x1b] = a4\n  2988: a4 = a3 >> 0x10\n  2991: u8 [a0 + 0x1a] = a4\n  2994: a1 = u64 [sp + 0x80]\n  2998: a4 = reverse a1\n  3000: u8 [a0 + 0x18] = a3\n  3003: a3 = a3 >> 0x8\n  3006: u8 [a0 + 0x19] = a3\n  3009: a3 = a4 >> 0x38\n  3012: u8 [a0 + 0x17] = a3\n  3015: a3 = a4 >> 0x30\n  3018: u8 [a0 + 0x16] = a3\n  3021: a3 = a4 >> 0x28\n  3024: u8 [a0 + 0x15] = a3\n  3027: a3 = a4 >> 0x20\n  3030: u8 [a0 + 0x14] = a3\n  3033: a3 = a4 >> 0x18\n  3036: u8 [a0 + 0x13] = a3\n  3039: a3 = a4 >> 0x10\n  3042: u8 [a0 + 0x12] = a3\n  3045: a1 = u64 [sp + 0x88]\n  3049: a3 = reverse a1\n  3051: u8 [a0 + 0x10] = a4\n  3054: a4 = a4 >> 0x8\n  3057: u8 [a0 + 0x11] = a4\n  3060: a4 = a3 >> 0x38\n  3063: u8 [a0 + 0xf] = a4\n  3066: a4 = a3 >> 0x30\n  3069: u8 [a0 + 0xe] = a4\n  3072: a4 = a3 >> 0x28\n  3075: u8 [a0 + 0xd] = a4\n  3078: a4 = a3 >> 0x20\n  3081: u8 [a0 + 0xc] = a4\n  3084: a4 = a3 >> 0x18\n  3087: u8 [a0 + 0xb] = a4\n  3090: a4 = a3 >> 0x10\n  3093: u8 [a0 + 0xa] = a4\n  3096: a1 = u64 [sp + 0x90]\n  3100: a4 = reverse a1\n  3102: u8 [a0 + 31] = 0\n  3105: u8 [a0 + 0x8] = a3\n  3108: a3 = a3 >> 0x8\n  3111: u8 [a0 + 0x9] = a3\n  3114: u8 [a0] = a4\n  3116: a3 = a4 >> 0x38\n  3119: u8 [a0 + 0x7] = a3\n  3122: a3 = a4 >> 0x30\n  3125: u8 [a0 + 0x6] = a3\n  3128: a3 = a4 >> 0x28\n  3131: u8 [a0 + 0x5] = a3\n  3134: a3 = a4 >> 0x20\n  3137: u8 [a0 + 0x4] = a3\n  3140: a3 = a4 >> 0x18\n  3143: u8 [a0 + 0x3] = a3\n  3146: a3 = a4 >> 0x10\n  3149: u8 [a0 + 0x2] = a3\n  3152: a4 = a4 >> 0x8\n  3155: u8 [a0 + 0x1] = a4\n  3158: a0 = u64 [sp + 0x10]\n  3161: a0 = a0 >u 0\n  3163: ra = a0 << 0x5\n  3166: jump @110\n      : @100 (gas: 3)\n  3169: a1 = 0x20\n  3172: a0 = 0\n  3174: ra = 64, jump @0\n      : @101 [@dyn 32] (gas: 71)\n  3179: a1 = u64 [sp + 0x18]\n  3182: a1 = reverse a1\n  3184: a2 = u64 [sp + 0x20]\n  3187: a2 = reverse a2\n  3189: a3 = u64 [sp + 0x68]\n  3192: a3 = reverse a3\n  3194: a4 = u64 [sp + 0x70]\n  3197: a4 = reverse a4\n  3199: a5 = a4 >> 0x38\n  3202: u8 [a0 + 0x1f] = a5\n  3205: a5 = a4 >> 0x30\n  3208: u8 [a0 + 0x1e] = a5\n  3211: a5 = a4 >> 0x28\n  3214: u8 [a0 + 0x1d] = a5\n  3217: a5 = a4 >> 0x20\n  3220: u8 [a0 + 0x1c] = a5\n  3223: a5 = a4 >> 0x18\n  3226: u8 [a0 + 0x1b] = a5\n  3229: a5 = a4 >> 0x10\n  3232: u8 [a0 + 0x1a] = a5\n  3235: a5 = a4 >> 0x8\n  3238: u8 [a0 + 0x19] = a5\n  3241: u8 [a0 + 0x18] = a4\n  3244: u8 [a0 + 0x10] = a3\n  3247: a4 = a3 >> 0x38\n  3250: u8 [a0 + 0x17] = a4\n  3253: a4 = a3 >> 0x30\n  3256: u8 [a0 + 0x16] = a4\n  3259: a4 = a3 >> 0x28\n  3262: u8 [a0 + 0x15] = a4\n  3265: a4 = a3 >> 0x20\n  3268: u8 [a0 + 0x14] = a4\n  3271: a4 = a3 >> 0x18\n  3274: u8 [a0 + 0x13] = a4\n  3277: a4 = a3 >> 0x10\n  3280: u8 [a0 + 0x12] = a4\n  3283: a3 = a3 >> 0x8\n  3286: u8 [a0 + 0x11] = a3\n  3289: u8 [a0 + 0x8] = a2\n  3292: a3 = a2 >> 0x38\n  3295: u8 [a0 + 0xf] = a3\n  3298: a3 = a2 >> 0x30\n  3301: u8 [a0 + 0xe] = a3\n  3304: a3 = a2 >> 0x28\n  3307: u8 [a0 + 0xd] = a3\n  3310: a3 = a2 >> 0x20\n  3313: u8 [a0 + 0xc] = a3\n  3316: a3 = a2 >> 0x18\n  3319: u8 [a0 + 0xb] = a3\n  3322: a3 = a2 >> 0x10\n  3325: u8 [a0 + 0xa] = a3\n  3328: a2 = a2 >> 0x8\n  3331: u8 [a0 + 0x9] = a2\n  3334: u8 [a0] = a1\n  3336: a2 = a1 >> 0x38\n  3339: u8 [a0 + 0x7] = a2\n  3342: a2 = a1 >> 0x30\n  3345: u8 [a0 + 0x6] = a2\n  3348: a2 = a1 >> 0x28\n  3351: u8 [a0 + 0x5] = a2\n  3354: a2 = a1 >> 0x20\n  3357: u8 [a0 + 0x4] = a2\n  3360: a2 = a1 >> 0x18\n  3363: u8 [a0 + 0x3] = a2\n  3366: a2 = a1 >> 0x10\n  3369: u8 [a0 + 0x2] = a2\n  3372: a1 = a1 >> 0x8\n  3375: u8 [a0 + 0x1] = a1\n  3378: a1 = 0x20\n  3381: a0 = 0\n  3383: ra = 66, jump @0\n      : @102 [@dyn 33] (gas: 5)\n  3388: i32 a0 = a0 + 0\n  3390: i32 a2 = sp + 0x120\n  3394: a1 = 0x20\n  3397: ecalli 8 // 'hash_keccak_256'\n  3399: fallthrough\n      : @103 (gas: 9)\n  3400: a0 = u64 [sp + 0x78]\n  3403: a0 = a0 <u 0x2\n  3406: a1 = u64 [sp + 0x80]\n  3410: a0 = 0 if a1 != 0\n  3412: a1 = u64 [sp + 0x90]\n  3416: a2 = u64 [sp + 0x88]\n  3420: a1 = a1 | a2\n  3423: a0 = 0 if a1 != 0\n  3425: jump @105 if a0 == 0\n      : @104 (gas: 5)\n  3428: ra = 0\n  3430: t0 = 0\n  3432: t1 = 0\n  3434: u64 [sp + 176] = 0\n  3438: jump @110\n      : @105 (gas: 19)\n  3441: u64 [sp + 168] = 0\n  3445: u64 [sp + 160] = 0\n  3449: s1 = 0\n  3451: u64 [sp + 176] = 0\n  3455: a0 = u64 [sp + 0x120]\n  3459: a1 = u64 [sp + 0x128]\n  3463: a2 = u64 [sp + 0x130]\n  3467: a3 = u64 [sp + 0x138]\n  3471: a0 = reverse a0\n  3473: a5 = reverse a1\n  3475: a1 = reverse a2\n  3477: t2 = reverse a3\n  3479: i32 a3 = sp + 0x100\n  3483: u64 [sp + 0x20] = a3\n  3486: i32 a3 = sp + 0x120\n  3490: u64 [sp + 0x18] = a3\n  3493: i32 a3 = sp + 0x140\n  3497: u64 [sp + 0x10] = a3\n  3500: fallthrough\n      : @106 (gas: 20)\n  3501: u64 [sp + 0x88] = a5\n  3505: u64 [sp + 0x110] = a5\n  3509: u64 [sp + 0xb8] = a1\n  3513: u64 [sp + 0x108] = a1\n  3517: u64 [sp + 0x90] = t2\n  3521: u64 [sp + 0x100] = t2\n  3525: u64 [sp + 0x98] = a0\n  3529: u64 [sp + 0x118] = a0\n  3533: u64 [sp + 312] = 0\n  3537: u64 [sp + 304] = 0\n  3541: u64 [sp + 296] = 0\n  3545: u64 [sp + 288] = 0\n  3549: u32 [sp + 320] = 0x20\n  3554: a2 = 0xffffffffffffffff\n  3557: a0 = 0\n  3559: a1 = u64 [sp + 0x20]\n  3562: a3 = u64 [sp + 0x18]\n  3565: a4 = u64 [sp + 0x10]\n  3568: ecalli 7 // 'get_storage'\n  3570: fallthrough\n      : @107 (gas: 30)\n  3571: a0 = u64 [sp + 0x60]\n  3574: a1 = u64 [sp + 0xa8]\n  3578: a0 = a0 + a1\n  3581: a1 = a0 <u a1\n  3584: a2 = u64 [sp + 0x28]\n  3587: a4 = u64 [sp + 0xa0]\n  3591: a2 = a2 + a4\n  3594: a2 = a2 + a1\n  3597: a3 = a2 ^ a4\n  3600: a4 = a2 <u a4\n  3603: a4 = a1 if a3 == 0\n  3606: a1 = u64 [sp + 0x30]\n  3609: a1 = a1 + s1\n  3612: u64 [sp + 0x80] = s1\n  3616: a3 = a1 <u s1\n  3619: a5 = u64 [sp + 0x38]\n  3622: s1 = u64 [sp + 0xb0]\n  3626: a5 = a5 + s1\n  3629: a3 = a3 + a5\n  3632: a4 = a4 + a1\n  3635: a1 = a4 <u a1\n  3638: a1 = a1 + a3\n  3641: a1 = a1 | a2\n  3644: a2 = a0 | a4\n  3647: a2 = a2 | a1\n  3650: a1 = a1 | a4\n  3653: a2 = a2 >> 0x20\n  3656: a1 = a1 << 0x20\n  3659: a1 = a1 | a2\n  3662: jump @111 if a1 != 0\n      : @108 (gas: 10)\n  3666: a1 = u64 [sp + 0x138]\n  3670: u64 [sp + 0x70] = a1\n  3673: a1 = u64 [sp + 0x130]\n  3677: u64 [sp + 0x78] = a1\n  3680: a1 = u64 [sp + 0x128]\n  3684: u64 [sp + 0x68] = a1\n  3687: s1 = u64 [sp + 0x120]\n  3691: i32 a0 = a0 + 0\n  3693: a1 = 0x20\n  3696: ra = 68, jump @0\n      : @109 [@dyn 34] (gas: 115)\n  3701: a1 = reverse s1\n  3703: a2 = a1 >> 0x38\n  3706: u8 [a0 + 0x1f] = a2\n  3709: a2 = a1 >> 0x30\n  3712: u8 [a0 + 0x1e] = a2\n  3715: a2 = a1 >> 0x28\n  3718: u8 [a0 + 0x1d] = a2\n  3721: a2 = a1 >> 0x20\n  3724: u8 [a0 + 0x1c] = a2\n  3727: a2 = a1 >> 0x18\n  3730: u8 [a0 + 0x1b] = a2\n  3733: a2 = a1 >> 0x10\n  3736: u8 [a0 + 0x1a] = a2\n  3739: a2 = a1 >> 0x8\n  3742: u8 [a0 + 0x19] = a2\n  3745: a2 = u64 [sp + 0x68]\n  3748: a2 = reverse a2\n  3750: u8 [a0 + 0x18] = a1\n  3753: a1 = a2 >> 0x38\n  3756: u8 [a0 + 0x17] = a1\n  3759: a1 = a2 >> 0x30\n  3762: u8 [a0 + 0x16] = a1\n  3765: a1 = a2 >> 0x28\n  3768: u8 [a0 + 0x15] = a1\n  3771: a1 = a2 >> 0x20\n  3774: u8 [a0 + 0x14] = a1\n  3777: a1 = a2 >> 0x18\n  3780: u8 [a0 + 0x13] = a1\n  3783: a1 = a2 >> 0x10\n  3786: u8 [a0 + 0x12] = a1\n  3789: a1 = u64 [sp + 0x70]\n  3792: a1 = reverse a1\n  3794: a3 = u64 [sp + 0x78]\n  3797: a3 = reverse a3\n  3799: u8 [a0 + 0x10] = a2\n  3802: a2 = a2 >> 0x8\n  3805: u8 [a0 + 0x11] = a2\n  3808: u8 [a0 + 0x8] = a3\n  3811: a2 = a3 >> 0x38\n  3814: u8 [a0 + 0xf] = a2\n  3817: a2 = a3 >> 0x30\n  3820: u8 [a0 + 0xe] = a2\n  3823: a2 = a3 >> 0x28\n  3826: u8 [a0 + 0xd] = a2\n  3829: a2 = a3 >> 0x20\n  3832: u8 [a0 + 0xc] = a2\n  3835: a2 = a3 >> 0x18\n  3838: u8 [a0 + 0xb] = a2\n  3841: a2 = a3 >> 0x10\n  3844: u8 [a0 + 0xa] = a2\n  3847: a3 = a3 >> 0x8\n  3850: u8 [a0 + 0x9] = a3\n  3853: u8 [a0] = a1\n  3855: a2 = a1 >> 0x38\n  3858: u8 [a0 + 0x7] = a2\n  3861: a2 = a1 >> 0x30\n  3864: u8 [a0 + 0x6] = a2\n  3867: a2 = a1 >> 0x28\n  3870: u8 [a0 + 0x5] = a2\n  3873: a2 = a1 >> 0x20\n  3876: u8 [a0 + 0x4] = a2\n  3879: a2 = a1 >> 0x18\n  3882: u8 [a0 + 0x3] = a2\n  3885: a2 = a1 >> 0x10\n  3888: u8 [a0 + 0x2] = a2\n  3891: a1 = a1 >> 0x8\n  3894: u8 [a0 + 0x1] = a1\n  3897: t2 = u64 [sp + 0x90]\n  3901: t2 = t2 + 0x1\n  3904: a0 = t2 <u 0x1\n  3907: a1 = u64 [sp + 0xb8]\n  3911: a1 = a1 + a0\n  3914: u64 [sp + 0xb8] = a1\n  3918: a0 = u64 [sp + 0xa8]\n  3922: ra = a0 + 0x20\n  3925: a2 = ra <u a0\n  3928: a0 = u64 [sp + 0xa0]\n  3932: t0 = a0 + a2\n  3935: a3 = t0 <u a0\n  3938: a3 = a2 if a2 == 0\n  3941: a0 = u64 [sp + 0x80]\n  3945: t1 = a0 + a3\n  3948: a3 = t1 <u a0\n  3951: a5 = u64 [sp + 0xb0]\n  3955: a5 = a5 + a3\n  3958: a1 = u64 [sp + 0x50]\n  3961: a0 = t1 <u a1\n  3964: u64 [sp + 0xa8] = a0\n  3968: a2 = u64 [sp + 0x58]\n  3971: a4 = ra <u a2\n  3974: a2 = u64 [sp + 0x48]\n  3977: s1 = t0 ^ a2\n  3980: a3 = t0 <u a2\n  3983: a3 = a4 if s1 == 0\n  3986: a2 = u64 [sp + 0x40]\n  3989: a0 = a5 ^ a2\n  3992: u64 [sp + 0xb0] = a5\n  3996: s1 = a5 <u a2\n  3999: a2 = u64 [sp + 0xa8]\n  4003: s1 = a2 if a0 == 0\n  4006: a4 = t1 ^ a1\n  4009: a1 = u64 [sp + 0xb8]\n  4013: a0 = a0 | a4\n  4016: a5 = t2 | a1\n  4019: a5 = a5 <u 0x1\n  4022: a4 = u64 [sp + 0x88]\n  4026: a5 = a5 + a4\n  4029: a4 = a5 <u a4\n  4032: a3 = s1 if a0 != 0\n  4035: a0 = u64 [sp + 0x98]\n  4039: a0 = a0 + a4\n  4042: u64 [sp + 0xa8] = ra\n  4046: u64 [sp + 0xa0] = t0\n  4050: s1 = t1\n  4052: jump @106 if a3 != 0\n      : @110 (gas: 30)\n  4056: a3 = u64 [sp + 0x60]\n  4059: a3 = a3 + ra\n  4062: a0 = a3 <u ra\n  4065: a4 = u64 [sp + 0x28]\n  4068: a4 = a4 + t0\n  4071: a4 = a4 + a0\n  4074: a5 = a4 ^ t0\n  4077: a1 = a4 <u t0\n  4080: a1 = a0 if a5 == 0\n  4083: a0 = u64 [sp + 0x30]\n  4086: a0 = a0 + t1\n  4089: a1 = a1 + a0\n  4092: a5 = a1 <u a0\n  4095: a0 = a0 <u t1\n  4098: a2 = u64 [sp + 0x38]\n  4101: s1 = u64 [sp + 0xb0]\n  4105: a2 = a2 + s1\n  4108: a0 = a0 + a2\n  4111: a0 = a0 + a5\n  4114: a2 = u64 [sp + 0x8]\n  4117: u64 [a2] = a3\n  4119: u64 [a2 + 0x8] = a4\n  4122: u64 [a2 + 0x10] = a1\n  4125: u64 [a2 + 0x18] = a0\n  4128: sp = s0 + 0xfffffffffffffea0\n  4132: ra = u64 [sp + 0x158]\n  4136: s0 = u64 [sp + 0x150]\n  4140: s1 = u64 [sp + 0x148]\n  4144: sp = sp + 0x160\n  4148: ret\n      : @111 (gas: 1)\n  4150: trap\n      : @112 (gas: 8)\n  4151: u64 [sp + 240] = 0\n  4155: u64 [sp + 232] = 0\n  4159: u64 [sp + 224] = 0\n  4163: a0 = 0x4e487b7100000000\n  4173: a1 = sp + 0xe0\n  4177: u64 [sp + 0xf8] = a0\n  4181: a0 = 0\n  4183: ra = 70, jump @23\n      : @113 [@dyn 35] (gas: 7)\n  4188: u64 [sp + 216] = 0\n  4192: u64 [sp + 208] = 0\n  4196: u64 [sp + 192] = 0x22\n  4201: a0 = 0x4\n  4204: a1 = sp + 0xc0\n  4208: u64 [sp + 200] = 0\n  4212: ra = 72, jump @23\n      : @114 [@dyn 36] (gas: 3)\n  4217: a1 = 0x24\n  4220: a0 = 0\n  4222: ra = 74, jump @0\n      : @115 [@dyn 37] (gas: 6)\n  4227: i32 a1 = a0 + 0\n  4229: a0 = 0x1\n  4232: a2 = 0x24\n  4235: ra = 0x4c\n  4238: ecalli 12 // 'seal_return'\n  4240: fallthrough\n      : @116 [@dyn 38] (gas: 27)\n  4241: sp = sp + 0xffffffffffffff80\n  4244: u64 [sp + 0x78] = ra\n  4247: u64 [sp + 0x70] = s0\n  4250: u64 [sp + 0x68] = s1\n  4253: s0 = sp + 0x80\n  4257: sp = sp & 0xfffffffffffffff0\n  4260: t0 = u64 [a1]\n  4262: t1 = u64 [a1 + 0x8]\n  4265: t2 = u64 [a1 + 0x10]\n  4268: a1 = u64 [a1 + 0x18]\n  4271: a3 = u64 [a2]\n  4273: a4 = u64 [a2 + 0x8]\n  4276: a5 = u64 [a2 + 0x10]\n  4279: a2 = u64 [a2 + 0x18]\n  4282: s1 = a0\n  4284: u64 [sp + 0x18] = a2\n  4287: u64 [sp + 0x10] = a5\n  4290: u64 [sp + 0x8] = a4\n  4293: u64 [sp] = a3\n  4295: u64 [sp + 0x38] = a1\n  4298: u64 [sp + 0x30] = t2\n  4301: u64 [sp + 0x28] = t1\n  4304: a0 = sp + 0x40\n  4307: a1 = sp + 0x20\n  4310: a2 = sp\n  4312: u64 [sp + 0x20] = t0\n  4315: ra = 78, jump @92\n      : @117 [@dyn 39] (gas: 14)\n  4320: a0 = u64 [sp + 0x50]\n  4323: a1 = u64 [sp + 0x58]\n  4326: a2 = u64 [sp + 0x40]\n  4329: a3 = u64 [sp + 0x48]\n  4332: u64 [s1 + 0x10] = a0\n  4335: u64 [s1 + 0x18] = a1\n  4338: u64 [s1] = a2\n  4340: u64 [s1 + 0x8] = a3\n  4343: sp = s0 + 0xffffffffffffff80\n  4346: ra = u64 [sp + 0x78]\n  4349: s0 = u64 [sp + 0x70]\n  4352: s1 = u64 [sp + 0x68]\n  4355: sp = sp + 0x80\n  4359: ret\n      : @118 (gas: 18)\n  4361: sp = sp + 0xffffffffffffff00\n  4365: u64 [sp + 0xf8] = ra\n  4369: u64 [sp + 0xf0] = s0\n  4373: u64 [sp + 0xe8] = s1\n  4377: s0 = sp + 0x100\n  4381: sp = sp & 0xfffffffffffffff0\n  4384: a2 = u64 [a1]\n  4386: u64 [sp + 0x20] = a2\n  4389: a2 = u64 [a1 + 0x8]\n  4392: u64 [sp + 0x10] = a2\n  4395: a2 = u64 [a1 + 0x10]\n  4398: u64 [sp + 0x8] = a2\n  4401: a1 = u64 [a1 + 0x18]\n  4404: u64 [sp] = a1\n  4406: u64 [sp + 0x18] = a0\n  4409: a0 = 0x40\n  4412: a1 = 0x20\n  4415: ra = 80, jump @0\n      : @119 [@dyn 40] (gas: 111)\n  4420: a1 = u8 [a0 + 0x1]\n  4423: a2 = u8 [a0]\n  4425: a3 = u8 [a0 + 0x2]\n  4428: a4 = u8 [a0 + 0x3]\n  4431: a1 = a1 << 0x8\n  4434: a1 = a1 | a2\n  4437: a3 = a3 << 0x10\n  4440: a4 = a4 << 0x18\n  4443: a3 = a3 | a4\n  4446: a1 = a1 | a3\n  4449: a2 = u8 [a0 + 0x5]\n  4452: a3 = u8 [a0 + 0x4]\n  4455: a4 = u8 [a0 + 0x6]\n  4458: a5 = u8 [a0 + 0x7]\n  4461: a2 = a2 << 0x8\n  4464: a2 = a2 | a3\n  4467: a4 = a4 << 0x10\n  4470: a5 = a5 << 0x18\n  4473: a4 = a4 | a5\n  4476: a2 = a2 | a4\n  4479: a2 = a2 << 0x20\n  4482: t0 = a2 | a1\n  4485: a2 = u8 [a0 + 0x9]\n  4488: a3 = u8 [a0 + 0x8]\n  4491: a4 = u8 [a0 + 0xa]\n  4494: a5 = u8 [a0 + 0xb]\n  4497: a2 = a2 << 0x8\n  4500: a2 = a2 | a3\n  4503: a4 = a4 << 0x10\n  4506: a5 = a5 << 0x18\n  4509: a4 = a4 | a5\n  4512: a2 = a2 | a4\n  4515: a3 = u8 [a0 + 0xd]\n  4518: a4 = u8 [a0 + 0xc]\n  4521: a5 = u8 [a0 + 0xe]\n  4524: s1 = u8 [a0 + 0xf]\n  4527: a3 = a3 << 0x8\n  4530: a3 = a3 | a4\n  4533: a5 = a5 << 0x10\n  4536: s1 = s1 << 0x18\n  4539: a5 = a5 | s1\n  4542: a3 = a3 | a5\n  4545: a3 = a3 << 0x20\n  4548: a2 = a2 | a3\n  4551: a3 = u8 [a0 + 0x11]\n  4554: a4 = u8 [a0 + 0x10]\n  4557: a5 = u8 [a0 + 0x12]\n  4560: s1 = u8 [a0 + 0x13]\n  4563: a3 = a3 << 0x8\n  4566: a3 = a3 | a4\n  4569: a5 = a5 << 0x10\n  4572: s1 = s1 << 0x18\n  4575: a5 = a5 | s1\n  4578: a3 = a3 | a5\n  4581: a4 = u8 [a0 + 0x15]\n  4584: a5 = u8 [a0 + 0x14]\n  4587: s1 = u8 [a0 + 0x16]\n  4590: a1 = u8 [a0 + 0x17]\n  4593: a4 = a4 << 0x8\n  4596: a4 = a4 | a5\n  4599: s1 = s1 << 0x10\n  4602: a1 = a1 << 0x18\n  4605: a1 = a1 | s1\n  4608: a1 = a1 | a4\n  4611: a1 = a1 << 0x20\n  4614: a3 = a3 | a1\n  4617: a1 = u8 [a0 + 0x19]\n  4620: a4 = u8 [a0 + 0x18]\n  4623: a5 = u8 [a0 + 0x1a]\n  4626: s1 = u8 [a0 + 0x1b]\n  4629: a1 = a1 << 0x8\n  4632: a1 = a1 | a4\n  4635: a5 = a5 << 0x10\n  4638: s1 = s1 << 0x18\n  4641: a5 = a5 | s1\n  4644: a1 = a1 | a5\n  4647: a4 = u8 [a0 + 0x1d]\n  4650: a5 = u8 [a0 + 0x1c]\n  4653: s1 = u8 [a0 + 0x1e]\n  4656: a0 = u8 [a0 + 0x1f]\n  4659: a4 = a4 << 0x8\n  4662: a4 = a4 | a5\n  4665: s1 = s1 << 0x10\n  4668: a0 = a0 << 0x18\n  4671: a0 = a0 | s1\n  4674: a0 = a0 | a4\n  4677: a0 = a0 << 0x20\n  4680: a0 = a0 | a1\n  4683: a4 = reverse a0\n  4685: u64 [sp + 0x38] = a4\n  4688: s1 = reverse a3\n  4690: a2 = reverse a2\n  4692: u64 [sp + 0x30] = a2\n  4695: a1 = reverse t0\n  4697: u64 [sp + 0x28] = a1\n  4700: a0 = u64 [sp]\n  4702: u64 [sp + 0xb8] = a0\n  4706: a0 = u64 [sp + 0x8]\n  4709: u64 [sp + 0xb0] = a0\n  4713: a0 = u64 [sp + 0x10]\n  4716: u64 [sp + 0xa8] = a0\n  4720: a0 = u64 [sp + 0x20]\n  4723: u64 [sp + 0xa0] = a0\n  4727: u64 [sp + 0x98] = a1\n  4731: u64 [sp + 0x90] = a2\n  4735: u64 [sp + 0x88] = s1\n  4739: a0 = sp + 0xc0\n  4743: a1 = sp + 0xa0\n  4747: a2 = sp + 0x80\n  4751: u64 [sp + 0x80] = a4\n  4755: ra = 82, jump @92\n      : @120 [@dyn 41] (gas: 58)\n  4760: t2 = s1\n  4762: a3 = u64 [sp + 0xc8]\n  4766: a0 = u64 [sp + 0xd8]\n  4770: u64 [sp + 0x10] = a0\n  4773: a4 = u64 [sp + 0xc0]\n  4777: t1 = u64 [sp + 0xd0]\n  4781: a5 = a3 ^ s1\n  4784: a1 = a3 <u s1\n  4787: a2 = u64 [sp + 0x38]\n  4790: s1 = a4 <u a2\n  4793: a1 = s1 if a5 == 0\n  4796: a3 = a3 - t2\n  4799: a3 = a3 - s1\n  4802: u64 [sp + 0x8] = a3\n  4805: a4 = a4 - a2\n  4808: a5 = a4 + 0x1f\n  4811: a4 = a5 <u a4\n  4814: a3 = a3 + a4\n  4817: a5 = a5 & 0xffffffffffffffe0\n  4820: a0 = a3 + t2\n  4823: a2 = a2 + a5\n  4826: u64 [sp + 0x20] = a2\n  4829: a5 = a2 <u a5\n  4832: t0 = a0 + a5\n  4835: a0 = t0 ^ a3\n  4838: a2 = t0 <u a3\n  4841: a2 = a5 if a0 == 0\n  4844: s1 = u64 [sp + 0x30]\n  4847: a0 = t1 - s1\n  4850: a5 = t1 <u s1\n  4853: t1 = s1\n  4855: ra = u64 [sp + 0x28]\n  4858: s1 = u64 [sp + 0x10]\n  4861: s1 = s1 - ra\n  4864: s1 = s1 - a5\n  4867: a5 = a0 <u a1\n  4870: s1 = s1 - a5\n  4873: a0 = a0 - a1\n  4876: a1 = u64 [sp + 0x8]\n  4879: a1 = a3 <u a1\n  4882: a1 = a4 if a4 == 0\n  4885: a1 = a1 + a0\n  4888: a0 = a1 <u a0\n  4891: a3 = a1 + t1\n  4894: a5 = a3 + a2\n  4897: a1 = a3 <u a1\n  4900: a2 = a5 <u a3\n  4903: s1 = s1 + ra\n  4906: a0 = a0 + s1\n  4909: a0 = a0 + a1\n  4912: s1 = a0 + a2\n  4915: a0 = s1 >u 0\n  4917: a1 = a5 >u 0\n  4919: a1 = a0 if s1 != 0\n  4922: a0 = a5 | s1\n  4925: a2 = t0 >u 0\n  4927: a2 = a1 if a0 != 0\n  4930: jump @124 if a2 != 0\n      : @121 (gas: 15)\n  4934: a4 = t1\n  4936: a0 = u64 [sp + 0x38]\n  4939: a1 = u64 [sp + 0x20]\n  4942: a0 = a1 <u a0\n  4945: a1 = t0 ^ t2\n  4948: a2 = t0 <u t2\n  4951: a2 = a0 if a1 == 0\n  4954: a0 = a5 <u t1\n  4957: a1 = s1 ^ ra\n  4960: a3 = s1 <u ra\n  4963: a3 = a0 if a1 == 0\n  4966: a0 = a5 ^ t1\n  4969: a0 = a0 | a1\n  4972: a3 = a2 if a0 == 0\n  4975: jump @124 if a3 != 0\n      : @122 (gas: 6)\n  4979: a0 = 0x40\n  4982: a1 = 0x20\n  4985: u64 [sp + 0x10] = t2\n  4988: u64 [sp + 0x8] = t0\n  4991: u64 [sp] = a5\n  4993: ra = 84, jump @0\n      : @123 [@dyn 42] (gas: 82)\n  4998: a1 = reverse s1\n  5000: a2 = u64 [sp]\n  5002: a2 = reverse a2\n  5004: a3 = u64 [sp + 0x8]\n  5007: a3 = reverse a3\n  5009: a4 = u64 [sp + 0x20]\n  5012: a4 = reverse a4\n  5014: u8 [a0 + 0x18] = a4\n  5017: a5 = a4 >> 0x38\n  5020: u8 [a0 + 0x1f] = a5\n  5023: a5 = a4 >> 0x30\n  5026: u8 [a0 + 0x1e] = a5\n  5029: a5 = a4 >> 0x28\n  5032: u8 [a0 + 0x1d] = a5\n  5035: a5 = a4 >> 0x20\n  5038: u8 [a0 + 0x1c] = a5\n  5041: a5 = a4 >> 0x18\n  5044: u8 [a0 + 0x1b] = a5\n  5047: a5 = a4 >> 0x10\n  5050: u8 [a0 + 0x1a] = a5\n  5053: a4 = a4 >> 0x8\n  5056: u8 [a0 + 0x19] = a4\n  5059: u8 [a0 + 0x10] = a3\n  5062: a4 = a3 >> 0x38\n  5065: u8 [a0 + 0x17] = a4\n  5068: a4 = a3 >> 0x30\n  5071: u8 [a0 + 0x16] = a4\n  5074: a4 = a3 >> 0x28\n  5077: u8 [a0 + 0x15] = a4\n  5080: a4 = a3 >> 0x20\n  5083: u8 [a0 + 0x14] = a4\n  5086: a4 = a3 >> 0x18\n  5089: u8 [a0 + 0x13] = a4\n  5092: a4 = a3 >> 0x10\n  5095: u8 [a0 + 0x12] = a4\n  5098: a3 = a3 >> 0x8\n  5101: u8 [a0 + 0x11] = a3\n  5104: u8 [a0 + 0x8] = a2\n  5107: a3 = a2 >> 0x38\n  5110: u8 [a0 + 0xf] = a3\n  5113: a3 = a2 >> 0x30\n  5116: u8 [a0 + 0xe] = a3\n  5119: a3 = a2 >> 0x28\n  5122: u8 [a0 + 0xd] = a3\n  5125: a3 = a2 >> 0x20\n  5128: u8 [a0 + 0xc] = a3\n  5131: a3 = a2 >> 0x18\n  5134: u8 [a0 + 0xb] = a3\n  5137: a3 = a2 >> 0x10\n  5140: u8 [a0 + 0xa] = a3\n  5143: a2 = a2 >> 0x8\n  5146: u8 [a0 + 0x9] = a2\n  5149: u8 [a0] = a1\n  5151: a2 = a1 >> 0x38\n  5154: u8 [a0 + 0x7] = a2\n  5157: a2 = a1 >> 0x30\n  5160: u8 [a0 + 0x6] = a2\n  5163: a2 = a1 >> 0x28\n  5166: u8 [a0 + 0x5] = a2\n  5169: a2 = a1 >> 0x20\n  5172: u8 [a0 + 0x4] = a2\n  5175: a2 = a1 >> 0x18\n  5178: u8 [a0 + 0x3] = a2\n  5181: a2 = a1 >> 0x10\n  5184: u8 [a0 + 0x2] = a2\n  5187: a1 = a1 >> 0x8\n  5190: u8 [a0 + 0x1] = a1\n  5193: a0 = u64 [sp + 0x18]\n  5196: a1 = u64 [sp + 0x38]\n  5199: u64 [a0] = a1\n  5201: a1 = u64 [sp + 0x28]\n  5204: u64 [a0 + 0x18] = a1\n  5207: a1 = u64 [sp + 0x10]\n  5210: u64 [a0 + 0x8] = a1\n  5213: a1 = u64 [sp + 0x30]\n  5216: u64 [a0 + 0x10] = a1\n  5219: sp = s0 + 0xffffffffffffff00\n  5223: ra = u64 [sp + 0xf8]\n  5227: s0 = u64 [sp + 0xf0]\n  5231: s1 = u64 [sp + 0xe8]\n  5235: sp = sp + 0x100\n  5239: ret\n      : @124 (gas: 8)\n  5241: u64 [sp + 112] = 0\n  5244: u64 [sp + 104] = 0\n  5247: u64 [sp + 96] = 0\n  5250: a0 = 0x4e487b7100000000\n  5260: a1 = sp + 0x60\n  5263: u64 [sp + 0x78] = a0\n  5266: a0 = 0\n  5268: ra = 86, jump @23\n      : @125 [@dyn 43] (gas: 7)\n  5273: u64 [sp + 88] = 0\n  5276: u64 [sp + 80] = 0\n  5279: u64 [sp + 64] = 0x41\n  5283: a0 = 0x4\n  5286: a1 = sp + 0x40\n  5289: u64 [sp + 72] = 0\n  5292: ra = 88, jump @23\n      : @126 [@dyn 44] (gas: 3)\n  5297: a1 = 0x24\n  5300: a0 = 0\n  5302: ra = 90, jump @0\n      : @127 [@dyn 45] (gas: 6)\n  5307: i32 a1 = a0 + 0\n  5309: a0 = 0x1\n  5312: a2 = 0x24\n  5315: ra = 0x5c\n  5318: ecalli 12 // 'seal_return'\n  5320: fallthrough\n      : @128 [@dyn 46] (gas: 17)\n  5321: sp = sp + 0xfffffffffffffea0\n  5325: u64 [sp + 0x158] = ra\n  5329: u64 [sp + 0x150] = s0\n  5333: u64 [sp + 0x148] = s1\n  5337: s0 = sp + 0x160\n  5341: sp = sp & 0xffffffffffffffe0\n  5344: a2 = u64 [a1]\n  5346: u64 [sp + 0x78] = a2\n  5349: a2 = u64 [a1 + 0x8]\n  5352: u64 [sp + 0x70] = a2\n  5355: a2 = u64 [a1 + 0x10]\n  5358: u64 [sp + 0x68] = a2\n  5361: s1 = u64 [a1 + 0x18]\n  5364: u64 [sp + 0x60] = a0\n  5367: a1 = 0x20\n  5370: a0 = 0\n  5372: ra = 94, jump @0\n      : @129 [@dyn 47] (gas: 70)\n  5377: a1 = reverse s1\n  5379: a2 = u64 [sp + 0x68]\n  5382: a2 = reverse a2\n  5384: a3 = u64 [sp + 0x70]\n  5387: a3 = reverse a3\n  5389: a4 = u64 [sp + 0x78]\n  5392: a4 = reverse a4\n  5394: a5 = a4 >> 0x38\n  5397: u8 [a0 + 0x1f] = a5\n  5400: a5 = a4 >> 0x30\n  5403: u8 [a0 + 0x1e] = a5\n  5406: a5 = a4 >> 0x28\n  5409: u8 [a0 + 0x1d] = a5\n  5412: a5 = a4 >> 0x20\n  5415: u8 [a0 + 0x1c] = a5\n  5418: a5 = a4 >> 0x18\n  5421: u8 [a0 + 0x1b] = a5\n  5424: a5 = a4 >> 0x10\n  5427: u8 [a0 + 0x1a] = a5\n  5430: a5 = a4 >> 0x8\n  5433: u8 [a0 + 0x19] = a5\n  5436: u8 [a0 + 0x18] = a4\n  5439: a4 = a3 >> 0x38\n  5442: u8 [a0 + 0x17] = a4\n  5445: a4 = a3 >> 0x30\n  5448: u8 [a0 + 0x16] = a4\n  5451: a4 = a3 >> 0x28\n  5454: u8 [a0 + 0x15] = a4\n  5457: a4 = a3 >> 0x20\n  5460: u8 [a0 + 0x14] = a4\n  5463: a4 = a3 >> 0x18\n  5466: u8 [a0 + 0x13] = a4\n  5469: a4 = a3 >> 0x10\n  5472: u8 [a0 + 0x12] = a4\n  5475: a4 = a3 >> 0x8\n  5478: u8 [a0 + 0x11] = a4\n  5481: u8 [a0 + 0x10] = a3\n  5484: a3 = a2 >> 0x38\n  5487: u8 [a0 + 0xf] = a3\n  5490: a3 = a2 >> 0x30\n  5493: u8 [a0 + 0xe] = a3\n  5496: a3 = a2 >> 0x28\n  5499: u8 [a0 + 0xd] = a3\n  5502: a3 = a2 >> 0x20\n  5505: u8 [a0 + 0xc] = a3\n  5508: a3 = a2 >> 0x18\n  5511: u8 [a0 + 0xb] = a3\n  5514: a3 = a2 >> 0x10\n  5517: u8 [a0 + 0xa] = a3\n  5520: a3 = a2 >> 0x8\n  5523: u8 [a0 + 0x9] = a3\n  5526: u8 [a0 + 0x8] = a2\n  5529: a2 = a1 >> 0x38\n  5532: u8 [a0 + 0x7] = a2\n  5535: a2 = a1 >> 0x30\n  5538: u8 [a0 + 0x6] = a2\n  5541: a2 = a1 >> 0x28\n  5544: u8 [a0 + 0x5] = a2\n  5547: a2 = a1 >> 0x20\n  5550: u8 [a0 + 0x4] = a2\n  5553: a2 = a1 >> 0x18\n  5556: u8 [a0 + 0x3] = a2\n  5559: a2 = a1 >> 0x10\n  5562: u8 [a0 + 0x2] = a2\n  5565: a2 = a1 >> 0x8\n  5568: u8 [a0 + 0x1] = a2\n  5571: u8 [a0] = a1\n  5573: a0 = 0x20\n  5576: a1 = 0x20\n  5579: ra = 96, jump @0\n      : @130 [@dyn 48] (gas: 35)\n  5584: u8 [a0 + 31] = 0\n  5587: u8 [a0 + 30] = 0\n  5590: u8 [a0 + 29] = 0\n  5593: u8 [a0 + 28] = 0\n  5596: u8 [a0 + 27] = 0\n  5599: u8 [a0 + 26] = 0\n  5602: u8 [a0 + 25] = 0\n  5605: u8 [a0 + 24] = 0\n  5608: u8 [a0 + 23] = 0\n  5611: u8 [a0 + 22] = 0\n  5614: u8 [a0 + 21] = 0\n  5617: u8 [a0 + 20] = 0\n  5620: u8 [a0 + 19] = 0\n  5623: u8 [a0 + 18] = 0\n  5626: u8 [a0 + 17] = 0\n  5629: u8 [a0 + 16] = 0\n  5632: u8 [a0 + 15] = 0\n  5635: u8 [a0 + 14] = 0\n  5638: u8 [a0 + 13] = 0\n  5641: u8 [a0 + 12] = 0\n  5644: u8 [a0 + 11] = 0\n  5647: u8 [a0 + 10] = 0\n  5650: u8 [a0 + 9] = 0\n  5653: u8 [a0 + 8] = 0\n  5656: u8 [a0 + 7] = 0\n  5659: u8 [a0 + 6] = 0\n  5662: u8 [a0 + 5] = 0\n  5665: u8 [a0 + 4] = 0\n  5668: u8 [a0 + 3] = 0\n  5671: u8 [a0 + 2] = 0\n  5674: u8 [a0 + 1] = 0\n  5677: u8 [a0 + 0] = 0\n  5679: a1 = 0x40\n  5682: a0 = 0\n  5684: ra = 98, jump @0\n      : @131 [@dyn 49] (gas: 88)\n  5689: i32 a0 = a0 + 0\n  5691: i32 a2 = sp + 0x120\n  5695: a1 = 0x40\n  5698: ecalli 8 // 'hash_keccak_256'\n  5700: a0 = u64 [sp + 0x138]\n  5704: a1 = u64 [sp + 0x130]\n  5708: a2 = u64 [sp + 0x128]\n  5712: a3 = u64 [sp + 0x120]\n  5716: a4 = reverse a0\n  5718: u64 [sp + 0x68] = a4\n  5721: a1 = reverse a1\n  5723: u64 [sp + 0x70] = a1\n  5726: s1 = reverse a2\n  5728: a0 = reverse a3\n  5730: u64 [sp + 0x78] = a0\n  5733: u64 [sp + 0x118] = a0\n  5737: u64 [sp + 0x110] = s1\n  5741: u64 [sp + 0x108] = a1\n  5745: u64 [sp + 0x100] = a4\n  5749: u64 [sp + 312] = 0\n  5753: u64 [sp + 304] = 0\n  5757: u64 [sp + 296] = 0\n  5761: u64 [sp + 288] = 0\n  5765: u32 [sp + 320] = 0x20\n  5770: i32 a1 = sp + 0x100\n  5774: i32 a3 = sp + 0x120\n  5778: i32 a4 = sp + 0x140\n  5782: a2 = 0xffffffffffffffff\n  5785: a0 = 0\n  5787: ecalli 7 // 'get_storage'\n  5789: a0 = u64 [sp + 0x68]\n  5792: a0 = a0 + 0x1\n  5795: a1 = a0 <u 0x1\n  5798: a2 = u64 [sp + 0x70]\n  5801: a1 = a1 + a2\n  5804: a2 = a0 | a1\n  5807: a2 = a2 <u 0x1\n  5810: a2 = a2 + s1\n  5813: a3 = a2 <u s1\n  5816: a4 = u64 [sp + 0x78]\n  5819: a3 = a3 + a4\n  5822: u64 [sp + 0x118] = a3\n  5826: u64 [sp + 0x110] = a2\n  5830: u64 [sp + 0x108] = a1\n  5834: a1 = u64 [sp + 0x128]\n  5838: u64 [sp + 0x58] = a1\n  5841: u64 [sp + 0x100] = a0\n  5845: a0 = u64 [sp + 0x120]\n  5849: u64 [sp + 0x50] = a0\n  5852: u32 [sp + 320] = 0x20\n  5857: a0 = u32 [sp + 0x130]\n  5861: u64 [sp + 0x48] = a0\n  5864: u64 [sp + 312] = 0\n  5868: u64 [sp + 304] = 0\n  5872: u64 [sp + 296] = 0\n  5876: u64 [sp + 288] = 0\n  5880: i32 a1 = sp + 0x100\n  5884: i32 a3 = sp + 0x120\n  5888: i32 a4 = sp + 0x140\n  5892: a2 = 0xffffffffffffffff\n  5895: a0 = 0\n  5897: ecalli 7 // 'get_storage'\n  5899: a0 = u64 [sp + 0x128]\n  5903: u64 [sp + 0x40] = a0\n  5906: a0 = u64 [sp + 0x120]\n  5910: u64 [sp + 0x38] = a0\n  5913: a0 = u64 [sp + 0x138]\n  5917: u64 [sp + 0x30] = a0\n  5920: a0 = u64 [sp + 0x130]\n  5924: u64 [sp + 0x28] = a0\n  5927: a0 = u64 [sp + 0x68]\n  5930: a2 = a0 + 0x2\n  5933: a0 = a2 <u a0\n  5936: a3 = u64 [sp + 0x70]\n  5939: a1 = a3 + a0\n  5942: a3 = a1 <u a3\n  5945: a3 = a0 if a0 == 0\n  5948: a3 = a3 + s1\n  5951: a0 = a3 <u s1\n  5954: a4 = u64 [sp + 0x78]\n  5957: a0 = a0 + a4\n  5960: u64 [sp + 0xd8] = a0\n  5964: u64 [sp + 0xd0] = a3\n  5968: u64 [sp + 0xc8] = a1\n  5972: a0 = sp + 0xe0\n  5976: a1 = sp + 0xc0\n  5980: u64 [sp + 0xc0] = a2\n  5984: ra = 100, jump @118\n      : @132 [@dyn 50] (gas: 26)\n  5989: a0 = u64 [sp + 0xe8]\n  5993: u64 [sp + 0x20] = a0\n  5996: a0 = u64 [sp + 0xe0]\n  6000: u64 [sp + 0x18] = a0\n  6003: a0 = u64 [sp + 0xf8]\n  6007: u64 [sp + 0x10] = a0\n  6010: a0 = u64 [sp + 0xf0]\n  6014: u64 [sp + 0x8] = a0\n  6017: a0 = u64 [sp + 0x68]\n  6020: a2 = a0 + 0x3\n  6023: a0 = a2 <u a0\n  6026: a3 = u64 [sp + 0x70]\n  6029: a1 = a3 + a0\n  6032: a3 = a1 <u a3\n  6035: a3 = a0 if a0 == 0\n  6038: a3 = a3 + s1\n  6041: a0 = a3 <u s1\n  6044: a4 = u64 [sp + 0x78]\n  6047: a0 = a0 + a4\n  6050: u64 [sp + 0x98] = a0\n  6054: u64 [sp + 0x90] = a3\n  6058: u64 [sp + 0x88] = a1\n  6062: a0 = sp + 0xa0\n  6066: a1 = sp + 0x80\n  6070: u64 [sp + 0x80] = a2\n  6074: ra = 102, jump @118\n      : @133 [@dyn 51] (gas: 38)\n  6079: a0 = u64 [sp + 0xb0]\n  6083: a1 = u64 [sp + 0xb8]\n  6087: a2 = u64 [sp + 0xa0]\n  6091: a3 = u64 [sp + 0xa8]\n  6095: a4 = u64 [sp + 0x60]\n  6098: u64 [a4 + 0x70] = a0\n  6101: u64 [a4 + 0x78] = a1\n  6104: u64 [a4 + 0x60] = a2\n  6107: u64 [a4 + 0x68] = a3\n  6110: a0 = u64 [sp + 0x8]\n  6113: u64 [a4 + 0x50] = a0\n  6116: a0 = u64 [sp + 0x10]\n  6119: u64 [a4 + 0x58] = a0\n  6122: a0 = u64 [sp + 0x18]\n  6125: u64 [a4 + 0x40] = a0\n  6128: a0 = u64 [sp + 0x20]\n  6131: u64 [a4 + 0x48] = a0\n  6134: a0 = u64 [sp + 0x28]\n  6137: u64 [a4 + 0x30] = a0\n  6140: a0 = u64 [sp + 0x30]\n  6143: u64 [a4 + 0x38] = a0\n  6146: a0 = u64 [sp + 0x38]\n  6149: u64 [a4 + 0x20] = a0\n  6152: a0 = u64 [sp + 0x40]\n  6155: u64 [a4 + 0x28] = a0\n  6158: a0 = u64 [sp + 0x48]\n  6161: u64 [a4 + 0x10] = a0\n  6164: a0 = u64 [sp + 0x50]\n  6167: u64 [a4] = a0\n  6169: a0 = u64 [sp + 0x58]\n  6172: u64 [a4 + 0x8] = a0\n  6175: u64 [a4 + 24] = 0\n  6178: sp = s0 + 0xfffffffffffffea0\n  6182: ra = u64 [sp + 0x158]\n  6186: s0 = u64 [sp + 0x150]\n  6190: s1 = u64 [sp + 0x148]\n  6194: sp = sp + 0x160\n  6198: ret\n      : @134 (gas: 16)\n  6200: sp = sp + 0xffffffffffffff88\n  6203: u64 [sp + 0x70] = ra\n  6206: u64 [sp + 0x68] = s0\n  6209: u64 [sp + 0x60] = s1\n  6212: a5 = u64 [a1 + 0x10]\n  6215: s1 = u64 [a1 + 0x18]\n  6218: a4 = u64 [a1 + 0x8]\n  6221: s0 = u64 [a1]\n  6223: a1 = a4 | s1\n  6226: a3 = s0 | a5\n  6229: a3 = a3 | a1\n  6232: a3 = a3 >> 0x20\n  6235: a1 = a1 | a5\n  6238: a1 = a1 << 0x20\n  6241: a1 = a1 | a3\n  6244: jump @147 if a1 != 0\n      : @135 (gas: 16)\n  6248: u64 [sp + 0x28] = s1\n  6251: u64 [sp + 0x30] = a5\n  6254: u64 [sp + 0x40] = a4\n  6257: u64 [sp] = a0\n  6259: a0 = u64 [a2 + 0x18]\n  6262: u64 [sp + 0x58] = a0\n  6265: s1 = u64 [a2 + 0x10]\n  6268: a0 = u64 [a2 + 0x8]\n  6271: u64 [sp + 0x50] = a0\n  6274: a0 = u64 [a2]\n  6276: u64 [sp + 0x48] = a0\n  6279: u64 [sp + 0x20] = s0\n  6282: i32 a0 = s0 + 0\n  6284: a1 = 0x20\n  6287: u64 [sp + 0x8] = a0\n  6290: ra = 104, jump @0\n      : @136 [@dyn 52] (gas: 12)\n  6295: t0 = u64 [sp + 0x48]\n  6298: a1 = t0 | s1\n  6301: a2 = u64 [sp + 0x58]\n  6304: a3 = u64 [sp + 0x50]\n  6307: a2 = a2 | a3\n  6310: a1 = a1 | a2\n  6313: a1 = a1 >> 0x20\n  6316: u64 [sp + 0x38] = s1\n  6319: a2 = a2 | s1\n  6322: a2 = a2 << 0x20\n  6325: a1 = a1 | a2\n  6328: jump @147 if a1 != 0\n      : @137 (gas: 93)\n  6332: a1 = u8 [a0 + 0x19]\n  6335: a2 = u8 [a0 + 0x18]\n  6338: a3 = u8 [a0 + 0x1a]\n  6341: a4 = u8 [a0 + 0x1b]\n  6344: a1 = a1 << 0x8\n  6347: a1 = a1 | a2\n  6350: a3 = a3 << 0x10\n  6353: a4 = a4 << 0x18\n  6356: a3 = a3 | a4\n  6359: a1 = a1 | a3\n  6362: a2 = u8 [a0 + 0x1d]\n  6365: a3 = u8 [a0 + 0x1c]\n  6368: a4 = u8 [a0 + 0x1e]\n  6371: a5 = u8 [a0 + 0x1f]\n  6374: a2 = a2 << 0x8\n  6377: a2 = a2 | a3\n  6380: a4 = a4 << 0x10\n  6383: a5 = a5 << 0x18\n  6386: a4 = a4 | a5\n  6389: a2 = a2 | a4\n  6392: a2 = a2 << 0x20\n  6395: a1 = a1 | a2\n  6398: u64 [sp + 0x18] = a1\n  6401: a1 = u8 [a0 + 0x11]\n  6404: a2 = u8 [a0 + 0x10]\n  6407: a3 = u8 [a0 + 0x12]\n  6410: a4 = u8 [a0 + 0x13]\n  6413: a1 = a1 << 0x8\n  6416: a1 = a1 | a2\n  6419: a3 = a3 << 0x10\n  6422: a4 = a4 << 0x18\n  6425: a3 = a3 | a4\n  6428: a1 = a1 | a3\n  6431: a2 = u8 [a0 + 0x15]\n  6434: a3 = u8 [a0 + 0x14]\n  6437: a4 = u8 [a0 + 0x16]\n  6440: a5 = u8 [a0 + 0x17]\n  6443: a2 = a2 << 0x8\n  6446: a2 = a2 | a3\n  6449: a4 = a4 << 0x10\n  6452: a5 = a5 << 0x18\n  6455: a4 = a4 | a5\n  6458: a2 = a2 | a4\n  6461: a2 = a2 << 0x20\n  6464: a1 = a1 | a2\n  6467: u64 [sp + 0x10] = a1\n  6470: a1 = u8 [a0 + 0x9]\n  6473: a2 = u8 [a0 + 0x8]\n  6476: a3 = u8 [a0 + 0xa]\n  6479: a4 = u8 [a0 + 0xb]\n  6482: a1 = a1 << 0x8\n  6485: a1 = a1 | a2\n  6488: a3 = a3 << 0x10\n  6491: a4 = a4 << 0x18\n  6494: a3 = a3 | a4\n  6497: a1 = a1 | a3\n  6500: a2 = u8 [a0 + 0xd]\n  6503: a3 = u8 [a0 + 0xc]\n  6506: a4 = u8 [a0 + 0xe]\n  6509: a5 = u8 [a0 + 0xf]\n  6512: a2 = a2 << 0x8\n  6515: a2 = a2 | a3\n  6518: a4 = a4 << 0x10\n  6521: a5 = a5 << 0x18\n  6524: a4 = a4 | a5\n  6527: a2 = a2 | a4\n  6530: a2 = a2 << 0x20\n  6533: s1 = a2 | a1\n  6536: a1 = u8 [a0 + 0x1]\n  6539: a2 = u8 [a0]\n  6541: a3 = u8 [a0 + 0x2]\n  6544: a4 = u8 [a0 + 0x3]\n  6547: a1 = a1 << 0x8\n  6550: a1 = a1 | a2\n  6553: a3 = a3 << 0x10\n  6556: a4 = a4 << 0x18\n  6559: a3 = a3 | a4\n  6562: a1 = a1 | a3\n  6565: a2 = u8 [a0 + 0x5]\n  6568: a3 = u8 [a0 + 0x4]\n  6571: a4 = u8 [a0 + 0x6]\n  6574: a0 = u8 [a0 + 0x7]\n  6577: a2 = a2 << 0x8\n  6580: a2 = a2 | a3\n  6583: a4 = a4 << 0x10\n  6586: a0 = a0 << 0x18\n  6589: a0 = a0 | a4\n  6592: a0 = a0 | a2\n  6595: a0 = a0 << 0x20\n  6598: s0 = a0 | a1\n  6601: i32 a0 = t0 + 0\n  6603: a1 = 0x20\n  6606: ra = 106, jump @0\n      : @138 [@dyn 53] (gas: 73)\n  6611: a4 = s1\n  6613: a2 = u64 [sp + 0x10]\n  6616: s1 = u64 [sp + 0x18]\n  6619: t0 = u64 [sp + 0x48]\n  6622: a1 = a4 >> 0x38\n  6625: u8 [a0 + 0xf] = a1\n  6628: a1 = a4 >> 0x30\n  6631: u8 [a0 + 0xe] = a1\n  6634: a1 = a4 >> 0x28\n  6637: u8 [a0 + 0xd] = a1\n  6640: a1 = a4 >> 0x20\n  6643: u8 [a0 + 0xc] = a1\n  6646: a1 = a4 >> 0x18\n  6649: u8 [a0 + 0xb] = a1\n  6652: a1 = a4 >> 0x10\n  6655: u8 [a0 + 0xa] = a1\n  6658: a1 = a4 >> 0x8\n  6661: u8 [a0 + 0x9] = a1\n  6664: a1 = s0 >> 0x38\n  6667: u8 [a0 + 0x7] = a1\n  6670: a1 = s0 >> 0x30\n  6673: u8 [a0 + 0x6] = a1\n  6676: a1 = s0 >> 0x28\n  6679: u8 [a0 + 0x5] = a1\n  6682: a1 = s0 >> 0x20\n  6685: u8 [a0 + 0x4] = a1\n  6688: a1 = s0 >> 0x18\n  6691: u8 [a0 + 0x3] = a1\n  6694: a1 = s0 >> 0x10\n  6697: u8 [a0 + 0x2] = a1\n  6700: a1 = s0 >> 0x8\n  6703: u8 [a0 + 0x1] = a1\n  6706: a1 = a2 >> 0x38\n  6709: u8 [a0 + 0x17] = a1\n  6712: a1 = a2 >> 0x30\n  6715: u8 [a0 + 0x16] = a1\n  6718: a1 = a2 >> 0x28\n  6721: u8 [a0 + 0x15] = a1\n  6724: a1 = a2 >> 0x20\n  6727: u8 [a0 + 0x14] = a1\n  6730: a1 = a2 >> 0x18\n  6733: u8 [a0 + 0x13] = a1\n  6736: a1 = a2 >> 0x10\n  6739: u8 [a0 + 0x12] = a1\n  6742: a1 = a2 >> 0x8\n  6745: u8 [a0 + 0x11] = a1\n  6748: a1 = s1 >> 0x38\n  6751: u8 [a0 + 0x1f] = a1\n  6754: a1 = s1 >> 0x30\n  6757: u8 [a0 + 0x1e] = a1\n  6760: a1 = s1 >> 0x28\n  6763: u8 [a0 + 0x1d] = a1\n  6766: a1 = s1 >> 0x20\n  6769: u8 [a0 + 0x1c] = a1\n  6772: a1 = s1 >> 0x18\n  6775: u8 [a0 + 0x1b] = a1\n  6778: a1 = s1 >> 0x10\n  6781: u8 [a0 + 0x1a] = a1\n  6784: a1 = s1 >> 0x8\n  6787: u8 [a0 + 0x19] = a1\n  6790: ra = u64 [sp + 0x58]\n  6793: t2 = u64 [sp + 0x38]\n  6796: t1 = t2 | ra\n  6799: a1 = 0xffffffe0\n  6809: a3 = t0 <u a1\n  6812: a5 = u64 [sp + 0x50]\n  6815: a3 = 0 if a5 != 0\n  6817: a3 = 0 if t1 != 0\n  6819: u8 [a0 + 0x10] = a2\n  6822: u8 [a0 + 0x8] = a4\n  6825: u8 [a0] = s0\n  6827: u8 [a0 + 0x18] = s1\n  6830: jump @147 if a3 == 0\n      : @139 (gas: 9)\n  6834: a0 = u64 [sp + 0x30]\n  6837: a3 = u64 [sp + 0x28]\n  6840: a0 = a0 | a3\n  6843: a3 = u64 [sp + 0x20]\n  6846: a1 = a3 <u a1\n  6849: a3 = u64 [sp + 0x40]\n  6852: a1 = 0 if a3 != 0\n  6854: a1 = 0 if a0 != 0\n  6856: jump @147 if a1 == 0\n      : @140 (gas: 15)\n  6860: a1 = reverse s0\n  6862: a3 = reverse a4\n  6864: a4 = reverse a2\n  6866: s0 = reverse s1\n  6868: a0 = s0 | a3\n  6871: u64 [sp + 0x30] = a1\n  6874: u64 [sp + 0x20] = a4\n  6877: a1 = a1 | a4\n  6880: a0 = a0 | a1\n  6883: a0 = a0 >> 0x20\n  6886: u64 [sp + 0x28] = a3\n  6889: a1 = a1 | a3\n  6892: a1 = a1 << 0x20\n  6895: a0 = a0 | a1\n  6898: jump @147 if a0 != 0\n      : @141 (gas: 19)\n  6902: a3 = t0 + 0x20\n  6905: u64 [sp + 0x40] = a3\n  6908: a0 = a3 <u t0\n  6911: a1 = a5 + a0\n  6914: u64 [sp + 0x48] = a1\n  6917: a1 = a1 <u a5\n  6920: a1 = a0 if a0 == 0\n  6923: a1 = a1 + t2\n  6926: u64 [sp + 0x50] = a1\n  6929: a0 = a1 <u t2\n  6932: a0 = a0 + ra\n  6935: u64 [sp + 0x58] = a0\n  6938: i32 a0 = a3 + 0\n  6940: a1 = u64 [sp + 0x8]\n  6943: i32 a1 = a1 + 0x20\n  6946: u64 [sp + 0x38] = a1\n  6949: i32 s1 = s0 + 0\n  6951: a1 = s1\n  6953: ra = 108, jump @0\n      : @142 [@dyn 54] (gas: 5)\n  6958: u64 [sp + 0x18] = a0\n  6961: a0 = u64 [sp + 0x38]\n  6964: a1 = s1\n  6966: s1 = s0\n  6968: ra = 110, jump @0\n      : @143 [@dyn 55] (gas: 4)\n  6973: a1 = a0\n  6975: a0 = u64 [sp + 0x18]\n  6978: a2 = s0\n  6980: ra = 112, jump @8\n      : @144 [@dyn 56] (gas: 29)\n  6985: a0 = u64 [sp + 0x40]\n  6988: a0 = a0 + s0\n  6991: a1 = a0 <u s0\n  6994: a4 = u64 [sp + 0x20]\n  6997: a2 = u64 [sp + 0x48]\n  7000: a2 = a2 + a4\n  7003: a2 = a2 + a1\n  7006: a3 = a2 ^ a4\n  7009: a4 = a2 <u a4\n  7012: a4 = a1 if a3 == 0\n  7015: a5 = u64 [sp + 0x28]\n  7018: a1 = u64 [sp + 0x50]\n  7021: a1 = a1 + a5\n  7024: a4 = a4 + a1\n  7027: a3 = a4 <u a1\n  7030: a1 = a1 <u a5\n  7033: a5 = u64 [sp + 0x30]\n  7036: s0 = u64 [sp + 0x58]\n  7039: a5 = a5 + s0\n  7042: a1 = a1 + a5\n  7045: a1 = a1 + a3\n  7048: a3 = a0 | a4\n  7051: a1 = a1 | a2\n  7054: a3 = a3 | a1\n  7057: a3 = a3 >> 0x20\n  7060: a1 = a1 | a4\n  7063: a1 = a1 << 0x20\n  7066: a1 = a1 | a3\n  7069: jump @147 if a1 != 0\n      : @145 (gas: 3)\n  7073: i32 a0 = a0 + 0\n  7075: a1 = 0x20\n  7078: ra = 114, jump @0\n      : @146 [@dyn 57] (gas: 56)\n  7083: u8 [a0 + 31] = 0\n  7086: u8 [a0 + 30] = 0\n  7089: u8 [a0 + 29] = 0\n  7092: u8 [a0 + 28] = 0\n  7095: u8 [a0 + 27] = 0\n  7098: u8 [a0 + 26] = 0\n  7101: u8 [a0 + 25] = 0\n  7104: u8 [a0 + 24] = 0\n  7107: u8 [a0 + 23] = 0\n  7110: u8 [a0 + 22] = 0\n  7113: u8 [a0 + 21] = 0\n  7116: u8 [a0 + 20] = 0\n  7119: u8 [a0 + 19] = 0\n  7122: u8 [a0 + 18] = 0\n  7125: u8 [a0 + 17] = 0\n  7128: u8 [a0 + 16] = 0\n  7131: u8 [a0 + 15] = 0\n  7134: u8 [a0 + 14] = 0\n  7137: u8 [a0 + 13] = 0\n  7140: u8 [a0 + 12] = 0\n  7143: u8 [a0 + 11] = 0\n  7146: u8 [a0 + 10] = 0\n  7149: u8 [a0 + 9] = 0\n  7152: u8 [a0 + 8] = 0\n  7155: u8 [a0 + 7] = 0\n  7158: u8 [a0 + 6] = 0\n  7161: u8 [a0 + 5] = 0\n  7164: u8 [a0 + 4] = 0\n  7167: u8 [a0 + 3] = 0\n  7170: u8 [a0 + 2] = 0\n  7173: u8 [a0 + 1] = 0\n  7176: u8 [a0 + 0] = 0\n  7178: a0 = s1 + 0x1f\n  7181: a1 = 0x1ffffffe0\n  7191: a0 = a0 & a1\n  7194: a1 = u64 [sp + 0x40]\n  7197: a1 = a1 + a0\n  7200: a0 = a1 <u a0\n  7203: a2 = u64 [sp + 0x48]\n  7206: a2 = a2 + a0\n  7209: a0 = 0 if a2 != 0\n  7211: a3 = u64 [sp + 0x50]\n  7214: a0 = a0 + a3\n  7217: a3 = a0 <u a3\n  7220: a4 = u64 [sp + 0x58]\n  7223: a3 = a3 + a4\n  7226: a4 = u64 [sp]\n  7228: u64 [a4] = a1\n  7230: u64 [a4 + 0x8] = a2\n  7233: u64 [a4 + 0x10] = a0\n  7236: u64 [a4 + 0x18] = a3\n  7239: ra = u64 [sp + 0x70]\n  7242: s0 = u64 [sp + 0x68]\n  7245: s1 = u64 [sp + 0x60]\n  7248: sp = sp + 0x78\n  7251: ret\n      : @147 (gas: 1)\n  7253: trap\n      : @148 (gas: 23)\n  7254: sp = sp + 0xfffffffffffffe80\n  7258: u64 [sp + 0x178] = ra\n  7262: u64 [sp + 0x170] = s0\n  7266: u64 [sp + 0x168] = s1\n  7270: s0 = sp + 0x180\n  7274: sp = sp & 0xfffffffffffffff0\n  7277: t1 = u64 [a1 + 0x18]\n  7280: t2 = u64 [a1 + 0x10]\n  7283: t0 = u64 [a1 + 0x8]\n  7286: s1 = u64 [a1]\n  7288: u64 [sp + 0x90] = t0\n  7292: u64 [sp + 0x88] = t1\n  7296: a1 = t0 | t1\n  7299: u64 [sp + 0x98] = s1\n  7303: s1 = s1 | t2\n  7306: s1 = s1 | a1\n  7309: s1 = s1 >> 0x20\n  7312: u64 [sp + 0x80] = t2\n  7316: a1 = a1 | t2\n  7319: a1 = a1 << 0x20\n  7322: a1 = a1 | s1\n  7325: u64 [sp + 0x40] = a0\n  7328: jump @159 if a1 != 0\n      : @149 (gas: 35)\n  7332: a0 = u64 [a5 + 0x18]\n  7335: u64 [sp] = a0\n  7337: a0 = u64 [a5 + 0x10]\n  7340: u64 [sp + 0x8] = a0\n  7343: a0 = u64 [a5 + 0x8]\n  7346: u64 [sp + 0x10] = a0\n  7349: a0 = u64 [a5]\n  7351: u64 [sp + 0x18] = a0\n  7354: a0 = u64 [a4 + 0x18]\n  7357: u64 [sp + 0x20] = a0\n  7360: a0 = u64 [a4 + 0x10]\n  7363: u64 [sp + 0x28] = a0\n  7366: a0 = u64 [a4 + 0x8]\n  7369: u64 [sp + 0x30] = a0\n  7372: a0 = u64 [a4]\n  7374: u64 [sp + 0x38] = a0\n  7377: a0 = u64 [a3 + 0x18]\n  7380: u64 [sp + 0x50] = a0\n  7383: a0 = u64 [a3 + 0x10]\n  7386: u64 [sp + 0x58] = a0\n  7389: a0 = u64 [a3 + 0x8]\n  7392: u64 [sp + 0x60] = a0\n  7395: a0 = u64 [a2 + 0x10]\n  7398: a1 = u64 [a3]\n  7400: u64 [sp + 0x48] = a1\n  7403: a1 = u64 [a2 + 0x8]\n  7406: u64 [sp + 0x68] = a1\n  7409: a1 = u64 [a2]\n  7411: u64 [sp + 0x70] = a1\n  7414: a0 = a0 << 0x20\n  7417: s1 = a0 >> 0x20\n  7420: a0 = i32 [sp + 0x98]\n  7424: a1 = 0x20\n  7427: u64 [sp + 0x78] = a0\n  7430: ra = 116, jump @0\n      : @150 [@dyn 58] (gas: 67)\n  7435: a1 = reverse s1\n  7437: a2 = u64 [sp + 0x68]\n  7440: a2 = reverse a2\n  7442: a3 = u64 [sp + 0x70]\n  7445: a3 = reverse a3\n  7447: a4 = a3 >> 0x38\n  7450: u8 [a0 + 0x1f] = a4\n  7453: a4 = a3 >> 0x30\n  7456: u8 [a0 + 0x1e] = a4\n  7459: a4 = a3 >> 0x28\n  7462: u8 [a0 + 0x1d] = a4\n  7465: a4 = a3 >> 0x20\n  7468: u8 [a0 + 0x1c] = a4\n  7471: a4 = a3 >> 0x18\n  7474: u8 [a0 + 0x1b] = a4\n  7477: a4 = a3 >> 0x10\n  7480: u8 [a0 + 0x1a] = a4\n  7483: a4 = a3 >> 0x8\n  7486: u8 [a0 + 0x19] = a4\n  7489: u8 [a0 + 0x18] = a3\n  7492: u8 [a0 + 0x10] = a2\n  7495: u8 [a0 + 11] = 0\n  7498: u8 [a0 + 10] = 0\n  7501: u8 [a0 + 9] = 0\n  7504: u8 [a0 + 7] = 0\n  7507: u8 [a0 + 6] = 0\n  7510: u8 [a0 + 5] = 0\n  7513: u8 [a0 + 4] = 0\n  7516: u8 [a0 + 3] = 0\n  7519: u8 [a0 + 2] = 0\n  7522: u8 [a0 + 1] = 0\n  7525: u8 [a0 + 0] = 0\n  7527: a3 = a2 >> 0x38\n  7530: u8 [a0 + 0x17] = a3\n  7533: a3 = a2 >> 0x30\n  7536: u8 [a0 + 0x16] = a3\n  7539: a3 = a2 >> 0x28\n  7542: u8 [a0 + 0x15] = a3\n  7545: a3 = a2 >> 0x20\n  7548: u8 [a0 + 0x14] = a3\n  7551: a3 = a2 >> 0x18\n  7554: u8 [a0 + 0x13] = a3\n  7557: a3 = a2 >> 0x10\n  7560: u8 [a0 + 0x12] = a3\n  7563: a2 = a2 >> 0x8\n  7566: u8 [a0 + 0x11] = a2\n  7569: u8 [a0 + 0x8] = a1\n  7572: a2 = a1 >> 0x38\n  7575: u8 [a0 + 0xf] = a2\n  7578: a2 = a1 >> 0x30\n  7581: u8 [a0 + 0xe] = a2\n  7584: a2 = a1 >> 0x28\n  7587: u8 [a0 + 0xd] = a2\n  7590: a1 = a1 >> 0x20\n  7593: a2 = u64 [sp + 0x88]\n  7597: a4 = u64 [sp + 0x80]\n  7601: a4 = a4 | a2\n  7604: s1 = 0x100000000\n  7614: a2 = 0xffffffe0\n  7624: a3 = u64 [sp + 0x98]\n  7628: a2 = a3 <u a2\n  7631: a3 = u64 [sp + 0x90]\n  7635: a2 = 0 if a3 != 0\n  7637: u64 [sp + 0x70] = a4\n  7640: a2 = 0 if a4 != 0\n  7642: u8 [a0 + 0xc] = a1\n  7645: jump @159 if a2 == 0\n      : @151 (gas: 4)\n  7649: a0 = u64 [sp + 0x78]\n  7652: i32 a0 = a0 + 0x20\n  7655: a1 = 0x20\n  7658: ra = 118, jump @0\n      : @152 [@dyn 59] (gas: 76)\n  7663: a1 = u64 [sp + 0x50]\n  7666: a1 = reverse a1\n  7668: a2 = u64 [sp + 0x58]\n  7671: a2 = reverse a2\n  7673: a3 = u64 [sp + 0x60]\n  7676: a3 = reverse a3\n  7678: a4 = u64 [sp + 0x48]\n  7681: a4 = reverse a4\n  7683: a5 = a4 >> 0x38\n  7686: u8 [a0 + 0x1f] = a5\n  7689: a5 = a4 >> 0x30\n  7692: u8 [a0 + 0x1e] = a5\n  7695: a5 = a4 >> 0x28\n  7698: u8 [a0 + 0x1d] = a5\n  7701: a5 = a4 >> 0x20\n  7704: u8 [a0 + 0x1c] = a5\n  7707: a5 = a4 >> 0x18\n  7710: u8 [a0 + 0x1b] = a5\n  7713: a5 = a4 >> 0x10\n  7716: u8 [a0 + 0x1a] = a5\n  7719: a5 = a4 >> 0x8\n  7722: u8 [a0 + 0x19] = a5\n  7725: u8 [a0 + 0x18] = a4\n  7728: u8 [a0 + 0x10] = a3\n  7731: a4 = a3 >> 0x38\n  7734: u8 [a0 + 0x17] = a4\n  7737: a4 = a3 >> 0x30\n  7740: u8 [a0 + 0x16] = a4\n  7743: a4 = a3 >> 0x28\n  7746: u8 [a0 + 0x15] = a4\n  7749: a4 = a3 >> 0x20\n  7752: u8 [a0 + 0x14] = a4\n  7755: a4 = a3 >> 0x18\n  7758: u8 [a0 + 0x13] = a4\n  7761: a4 = a3 >> 0x10\n  7764: u8 [a0 + 0x12] = a4\n  7767: a3 = a3 >> 0x8\n  7770: u8 [a0 + 0x11] = a3\n  7773: u8 [a0 + 0x8] = a2\n  7776: a3 = a2 >> 0x38\n  7779: u8 [a0 + 0xf] = a3\n  7782: a3 = a2 >> 0x30\n  7785: u8 [a0 + 0xe] = a3\n  7788: a3 = a2 >> 0x28\n  7791: u8 [a0 + 0xd] = a3\n  7794: a3 = a2 >> 0x20\n  7797: u8 [a0 + 0xc] = a3\n  7800: a3 = a2 >> 0x18\n  7803: u8 [a0 + 0xb] = a3\n  7806: a3 = a2 >> 0x10\n  7809: u8 [a0 + 0xa] = a3\n  7812: a2 = a2 >> 0x8\n  7815: u8 [a0 + 0x9] = a2\n  7818: u8 [a0] = a1\n  7820: a2 = a1 >> 0x38\n  7823: u8 [a0 + 0x7] = a2\n  7826: a2 = a1 >> 0x30\n  7829: u8 [a0 + 0x6] = a2\n  7832: a2 = a1 >> 0x28\n  7835: u8 [a0 + 0x5] = a2\n  7838: a2 = a1 >> 0x20\n  7841: u8 [a0 + 0x4] = a2\n  7844: a2 = a1 >> 0x18\n  7847: u8 [a0 + 0x3] = a2\n  7850: a2 = a1 >> 0x10\n  7853: u8 [a0 + 0x2] = a2\n  7856: a1 = a1 >> 0x8\n  7859: a2 = s1 + 0xffffffffffffffc0\n  7862: a3 = u64 [sp + 0x98]\n  7866: a2 = a3 <u a2\n  7869: a3 = u64 [sp + 0x90]\n  7873: a2 = 0 if a3 != 0\n  7875: a3 = u64 [sp + 0x70]\n  7878: a2 = 0 if a3 != 0\n  7880: u8 [a0 + 0x1] = a1\n  7883: jump @159 if a2 == 0\n      : @153 (gas: 19)\n  7887: a0 = u64 [sp + 0x98]\n  7891: a1 = a0 + 0x80\n  7895: u64 [sp + 0x68] = a1\n  7898: a0 = a1 <u a0\n  7901: a1 = u64 [sp + 0x90]\n  7905: a2 = a1 + a0\n  7908: u64 [sp + 0x60] = a2\n  7911: s1 = a2 <u a1\n  7914: s1 = a0 if a0 == 0\n  7917: a0 = u64 [sp + 0x80]\n  7921: s1 = s1 + a0\n  7924: a0 = s1 <u a0\n  7927: a1 = u64 [sp + 0x88]\n  7931: a0 = a0 + a1\n  7934: u64 [sp + 0x58] = a0\n  7937: a0 = u64 [sp + 0x78]\n  7940: i32 a0 = a0 + 0x40\n  7943: a1 = 0x20\n  7946: ra = 120, jump @0\n      : @154 [@dyn 60] (gas: 51)\n  7951: u8 [a0 + 31] = 0x80\n  7956: u8 [a0 + 30] = 0\n  7959: u8 [a0 + 29] = 0\n  7962: u8 [a0 + 28] = 0\n  7965: u8 [a0 + 27] = 0\n  7968: u8 [a0 + 26] = 0\n  7971: u8 [a0 + 25] = 0\n  7974: u8 [a0 + 24] = 0\n  7977: u8 [a0 + 23] = 0\n  7980: u8 [a0 + 22] = 0\n  7983: u8 [a0 + 21] = 0\n  7986: u8 [a0 + 20] = 0\n  7989: u8 [a0 + 19] = 0\n  7992: u8 [a0 + 18] = 0\n  7995: u8 [a0 + 17] = 0\n  7998: u8 [a0 + 16] = 0\n  8001: u8 [a0 + 15] = 0\n  8004: u8 [a0 + 14] = 0\n  8007: u8 [a0 + 13] = 0\n  8010: u8 [a0 + 12] = 0\n  8013: u8 [a0 + 11] = 0\n  8016: u8 [a0 + 10] = 0\n  8019: u8 [a0 + 9] = 0\n  8022: u8 [a0 + 8] = 0\n  8025: u8 [a0 + 7] = 0\n  8028: u8 [a0 + 6] = 0\n  8031: u8 [a0 + 5] = 0\n  8034: u8 [a0 + 4] = 0\n  8037: u8 [a0 + 3] = 0\n  8040: u8 [a0 + 2] = 0\n  8043: u8 [a0 + 1] = 0\n  8046: u8 [a0 + 0] = 0\n  8048: a0 = u64 [sp + 0x58]\n  8051: u64 [sp + 0x118] = a0\n  8055: u64 [sp + 0x110] = s1\n  8059: a0 = u64 [sp + 0x60]\n  8062: u64 [sp + 0x108] = a0\n  8066: a0 = u64 [sp + 0x68]\n  8069: u64 [sp + 0x100] = a0\n  8073: a0 = u64 [sp + 0x20]\n  8076: u64 [sp + 0x138] = a0\n  8080: a0 = u64 [sp + 0x28]\n  8083: u64 [sp + 0x130] = a0\n  8087: a0 = u64 [sp + 0x30]\n  8090: u64 [sp + 0x128] = a0\n  8094: a0 = sp + 0x140\n  8098: a1 = sp + 0x120\n  8102: a2 = sp + 0x100\n  8106: a3 = u64 [sp + 0x38]\n  8109: u64 [sp + 0x120] = a3\n  8113: ra = 122, jump @134\n      : @155 [@dyn 61] (gas: 8)\n  8118: a0 = 0xffffffa0\n  8128: a1 = u64 [sp + 0x98]\n  8132: a0 = a1 <u a0\n  8135: a1 = u64 [sp + 0x90]\n  8139: a0 = 0 if a1 != 0\n  8141: a1 = u64 [sp + 0x70]\n  8144: a0 = 0 if a1 != 0\n  8146: jump @159 if a0 == 0\n      : @156 (gas: 36)\n  8150: a1 = u64 [sp + 0x140]\n  8154: a3 = u64 [sp + 0x148]\n  8158: t0 = u64 [sp + 0x150]\n  8162: t1 = u64 [sp + 0x98]\n  8166: ra = a1 <u t1\n  8169: t2 = a1\n  8171: a5 = u64 [sp + 0x90]\n  8175: a1 = a3 ^ a5\n  8178: a2 = a3 <u a5\n  8181: s1 = a3\n  8183: u64 [sp + 0x60] = a3\n  8186: a2 = ra if a1 == 0\n  8189: a0 = u64 [sp + 0x158]\n  8193: u64 [sp + 0x68] = a0\n  8196: u64 [sp + 0x70] = t0\n  8199: a4 = u64 [sp + 0x80]\n  8203: a1 = t0 - a4\n  8206: a3 = a1 - a2\n  8209: u64 [sp + 0x58] = a3\n  8212: a1 = a1 <u a2\n  8215: a2 = t0 <u a4\n  8218: a3 = u64 [sp + 0x88]\n  8222: a3 = a0 - a3\n  8225: a3 = a3 - a2\n  8228: a3 = a3 - a1\n  8231: u64 [sp + 0x88] = a3\n  8235: a1 = s1 - a5\n  8238: a0 = a1 - ra\n  8241: u64 [sp + 0x90] = a0\n  8245: a0 = t2 - t1\n  8248: u64 [sp + 0x98] = a0\n  8252: s1 = t2\n  8254: a0 = u64 [sp + 0x78]\n  8257: i32 a0 = a0 + 0x60\n  8260: a1 = 0x20\n  8263: ra = 124, jump @0\n      : @157 [@dyn 62] (gas: 87)\n  8268: a1 = u64 [sp + 0x88]\n  8272: a1 = reverse a1\n  8274: a2 = u64 [sp + 0x58]\n  8277: a2 = reverse a2\n  8279: a3 = u64 [sp + 0x90]\n  8283: a3 = reverse a3\n  8285: a4 = u64 [sp + 0x98]\n  8289: a4 = reverse a4\n  8291: u8 [a0 + 0x18] = a4\n  8294: a5 = a4 >> 0x38\n  8297: u8 [a0 + 0x1f] = a5\n  8300: a5 = a4 >> 0x30\n  8303: u8 [a0 + 0x1e] = a5\n  8306: a5 = a4 >> 0x28\n  8309: u8 [a0 + 0x1d] = a5\n  8312: a5 = a4 >> 0x20\n  8315: u8 [a0 + 0x1c] = a5\n  8318: a5 = a4 >> 0x18\n  8321: u8 [a0 + 0x1b] = a5\n  8324: a5 = a4 >> 0x10\n  8327: u8 [a0 + 0x1a] = a5\n  8330: a4 = a4 >> 0x8\n  8333: u8 [a0 + 0x19] = a4\n  8336: u8 [a0 + 0x10] = a3\n  8339: a4 = a3 >> 0x38\n  8342: u8 [a0 + 0x17] = a4\n  8345: a4 = a3 >> 0x30\n  8348: u8 [a0 + 0x16] = a4\n  8351: a4 = a3 >> 0x28\n  8354: u8 [a0 + 0x15] = a4\n  8357: a4 = a3 >> 0x20\n  8360: u8 [a0 + 0x14] = a4\n  8363: a4 = a3 >> 0x18\n  8366: u8 [a0 + 0x13] = a4\n  8369: a4 = a3 >> 0x10\n  8372: u8 [a0 + 0x12] = a4\n  8375: a3 = a3 >> 0x8\n  8378: u8 [a0 + 0x11] = a3\n  8381: u8 [a0 + 0x8] = a2\n  8384: a3 = a2 >> 0x38\n  8387: u8 [a0 + 0xf] = a3\n  8390: a3 = a2 >> 0x30\n  8393: u8 [a0 + 0xe] = a3\n  8396: a3 = a2 >> 0x28\n  8399: u8 [a0 + 0xd] = a3\n  8402: a3 = a2 >> 0x20\n  8405: u8 [a0 + 0xc] = a3\n  8408: a3 = a2 >> 0x18\n  8411: u8 [a0 + 0xb] = a3\n  8414: a3 = a2 >> 0x10\n  8417: u8 [a0 + 0xa] = a3\n  8420: a2 = a2 >> 0x8\n  8423: u8 [a0 + 0x9] = a2\n  8426: u8 [a0] = a1\n  8428: a2 = a1 >> 0x38\n  8431: u8 [a0 + 0x7] = a2\n  8434: a2 = a1 >> 0x30\n  8437: u8 [a0 + 0x6] = a2\n  8440: a2 = a1 >> 0x28\n  8443: u8 [a0 + 0x5] = a2\n  8446: a2 = a1 >> 0x20\n  8449: u8 [a0 + 0x4] = a2\n  8452: a2 = a1 >> 0x18\n  8455: u8 [a0 + 0x3] = a2\n  8458: a2 = a1 >> 0x10\n  8461: u8 [a0 + 0x2] = a2\n  8464: a1 = a1 >> 0x8\n  8467: u8 [a0 + 0x1] = a1\n  8470: a0 = u64 [sp + 0x68]\n  8473: u64 [sp + 0xb8] = a0\n  8477: a0 = u64 [sp + 0x70]\n  8480: u64 [sp + 0xb0] = a0\n  8484: a0 = u64 [sp + 0x60]\n  8487: u64 [sp + 0xa8] = a0\n  8491: u64 [sp + 0xa0] = s1\n  8495: a0 = u64 [sp]\n  8497: u64 [sp + 0xd8] = a0\n  8501: a0 = u64 [sp + 0x8]\n  8504: u64 [sp + 0xd0] = a0\n  8508: a0 = u64 [sp + 0x10]\n  8511: u64 [sp + 0xc8] = a0\n  8515: a0 = sp + 0xe0\n  8519: a1 = sp + 0xc0\n  8523: a2 = sp + 0xa0\n  8527: a3 = u64 [sp + 0x18]\n  8530: u64 [sp + 0xc0] = a3\n  8534: ra = 126, jump @134\n      : @158 [@dyn 63] (gas: 15)\n  8539: a0 = u64 [sp + 0xf0]\n  8543: a1 = u64 [sp + 0xf8]\n  8547: a2 = u64 [sp + 0xe0]\n  8551: a3 = u64 [sp + 0xe8]\n  8555: a4 = u64 [sp + 0x40]\n  8558: u64 [a4 + 0x10] = a0\n  8561: u64 [a4 + 0x18] = a1\n  8564: u64 [a4] = a2\n  8566: u64 [a4 + 0x8] = a3\n  8569: sp = s0 + 0xfffffffffffffe80\n  8573: ra = u64 [sp + 0x178]\n  8577: s0 = u64 [sp + 0x170]\n  8581: s1 = u64 [sp + 0x168]\n  8585: sp = sp + 0x180\n  8589: ret\n      : @159 (gas: 1)\n  8591: trap\n      : @160 (gas: 8)\n  8592: a0 = u64 [sp + 0x210]\n  8596: a1 = u64 [sp + 0x218]\n  8600: a2 = u64 [sp + 0x208]\n  8604: a3 = u64 [sp + 0x200]\n  8608: a1 = a1 | a2\n  8611: a0 = a0 | a3\n  8614: a0 = a0 | a1\n  8617: jump @168 if a0 != 0\n      : @161 (gas: 2)\n  8621: a0 = i32 [0x20114]\n  8626: jump @168 if a0 <=u 35\n      : @162 (gas: 14)\n  8631: i32 a0 = sp + 0x220\n  8635: a1 = 0x4\n  8638: ecalli 3 // 'call_data_load'\n  8640: a2 = u64 [sp + 0x220]\n  8644: a0 = u64 [sp + 0x228]\n  8648: a1 = u64 [sp + 0x230]\n  8652: a3 = u64 [sp + 0x238]\n  8656: u64 [sp + 0x178] = a3\n  8660: u64 [sp + 0x170] = a1\n  8664: u64 [sp + 0x168] = a0\n  8668: a0 = sp + 0x180\n  8672: a1 = sp + 0x160\n  8676: u64 [sp + 0x160] = a2\n  8680: ra = 128, jump @128\n      : @163 [@dyn 64] (gas: 35)\n  8686: a0 = u64 [sp + 0x180]\n  8690: u64 [sp + 0x90] = a0\n  8694: a0 = u64 [sp + 0x188]\n  8698: u64 [sp + 0x88] = a0\n  8702: a0 = u64 [sp + 0x190]\n  8706: u64 [sp + 0x80] = a0\n  8710: a0 = u64 [sp + 0x198]\n  8714: u64 [sp + 0x78] = a0\n  8717: a0 = u64 [sp + 0x1a0]\n  8721: u64 [sp + 0x70] = a0\n  8724: a0 = u64 [sp + 0x1a8]\n  8728: u64 [sp + 0x68] = a0\n  8731: a0 = u64 [sp + 0x1b0]\n  8735: u64 [sp + 0x60] = a0\n  8738: a0 = u64 [sp + 0x1b8]\n  8742: u64 [sp + 0x58] = a0\n  8745: a0 = u64 [sp + 0x1c0]\n  8749: u64 [sp + 0x50] = a0\n  8752: a0 = u64 [sp + 0x1c8]\n  8756: u64 [sp + 0x48] = a0\n  8759: a0 = u64 [sp + 0x1d0]\n  8763: u64 [sp + 0x40] = a0\n  8766: a0 = u64 [sp + 0x1d8]\n  8770: u64 [sp + 0x38] = a0\n  8773: a0 = u64 [sp + 0x1e0]\n  8777: u64 [sp + 0x30] = a0\n  8780: a0 = u64 [sp + 0x1e8]\n  8784: u64 [sp + 0x28] = a0\n  8787: a0 = u64 [sp + 0x1f0]\n  8791: u64 [sp + 0x20] = a0\n  8794: a0 = u64 [sp + 0x1f8]\n  8798: u64 [sp + 0x18] = a0\n  8801: a0 = 0x40\n  8804: a1 = 0x20\n  8807: ra = 130, jump @0\n      : @164 [@dyn 65] (gas: 138)\n  8813: a1 = u8 [a0 + 0x1]\n  8816: a2 = u8 [a0]\n  8818: a3 = u8 [a0 + 0x2]\n  8821: a4 = u8 [a0 + 0x3]\n  8824: a1 = a1 << 0x8\n  8827: a1 = a1 | a2\n  8830: a3 = a3 << 0x10\n  8833: a4 = a4 << 0x18\n  8836: a3 = a3 | a4\n  8839: a1 = a1 | a3\n  8842: a2 = u8 [a0 + 0x5]\n  8845: a3 = u8 [a0 + 0x4]\n  8848: a4 = u8 [a0 + 0x6]\n  8851: a5 = u8 [a0 + 0x7]\n  8854: a2 = a2 << 0x8\n  8857: a2 = a2 | a3\n  8860: a4 = a4 << 0x10\n  8863: a5 = a5 << 0x18\n  8866: a4 = a4 | a5\n  8869: a2 = a2 | a4\n  8872: a2 = a2 << 0x20\n  8875: t0 = a2 | a1\n  8878: a2 = u8 [a0 + 0x9]\n  8881: a3 = u8 [a0 + 0x8]\n  8884: a4 = u8 [a0 + 0xa]\n  8887: a5 = u8 [a0 + 0xb]\n  8890: a2 = a2 << 0x8\n  8893: a2 = a2 | a3\n  8896: a4 = a4 << 0x10\n  8899: a5 = a5 << 0x18\n  8902: a4 = a4 | a5\n  8905: a2 = a2 | a4\n  8908: a3 = u8 [a0 + 0xd]\n  8911: a4 = u8 [a0 + 0xc]\n  8914: a5 = u8 [a0 + 0xe]\n  8917: s1 = u8 [a0 + 0xf]\n  8920: a3 = a3 << 0x8\n  8923: a3 = a3 | a4\n  8926: a5 = a5 << 0x10\n  8929: s1 = s1 << 0x18\n  8932: a5 = a5 | s1\n  8935: a3 = a3 | a5\n  8938: a3 = a3 << 0x20\n  8941: a2 = a2 | a3\n  8944: a3 = u8 [a0 + 0x11]\n  8947: a4 = u8 [a0 + 0x10]\n  8950: a5 = u8 [a0 + 0x12]\n  8953: s1 = u8 [a0 + 0x13]\n  8956: a3 = a3 << 0x8\n  8959: a3 = a3 | a4\n  8962: a5 = a5 << 0x10\n  8965: s1 = s1 << 0x18\n  8968: a5 = a5 | s1\n  8971: a3 = a3 | a5\n  8974: a4 = u8 [a0 + 0x15]\n  8977: a5 = u8 [a0 + 0x14]\n  8980: s1 = u8 [a0 + 0x16]\n  8983: a1 = u8 [a0 + 0x17]\n  8986: a4 = a4 << 0x8\n  8989: a4 = a4 | a5\n  8992: s1 = s1 << 0x10\n  8995: a1 = a1 << 0x18\n  8998: a1 = a1 | s1\n  9001: a1 = a1 | a4\n  9004: a1 = a1 << 0x20\n  9007: a3 = a3 | a1\n  9010: a1 = u8 [a0 + 0x19]\n  9013: a4 = u8 [a0 + 0x18]\n  9016: a5 = u8 [a0 + 0x1a]\n  9019: s1 = u8 [a0 + 0x1b]\n  9022: a1 = a1 << 0x8\n  9025: a1 = a1 | a4\n  9028: a5 = a5 << 0x10\n  9031: s1 = s1 << 0x18\n  9034: a5 = a5 | s1\n  9037: a1 = a1 | a5\n  9040: a4 = u8 [a0 + 0x1d]\n  9043: a5 = u8 [a0 + 0x1c]\n  9046: s1 = u8 [a0 + 0x1e]\n  9049: a0 = u8 [a0 + 0x1f]\n  9052: a4 = a4 << 0x8\n  9055: a4 = a4 | a5\n  9058: s1 = s1 << 0x10\n  9061: a0 = a0 << 0x18\n  9064: a0 = a0 | s1\n  9067: a0 = a0 | a4\n  9070: a0 = a0 << 0x20\n  9073: a0 = a0 | a1\n  9076: s1 = reverse a0\n  9078: a3 = reverse a3\n  9080: u64 [sp + 0x8] = a3\n  9083: a1 = reverse a2\n  9085: u64 [sp + 0x10] = a1\n  9088: a2 = reverse t0\n  9090: u64 [sp + 0x98] = a2\n  9094: a0 = u64 [sp + 0x18]\n  9097: u64 [sp + 0xb8] = a0\n  9101: a0 = u64 [sp + 0x20]\n  9104: u64 [sp + 0xb0] = a0\n  9108: a0 = u64 [sp + 0x28]\n  9111: u64 [sp + 0xa8] = a0\n  9115: a0 = u64 [sp + 0x30]\n  9118: u64 [sp + 0xa0] = a0\n  9122: a0 = u64 [sp + 0x38]\n  9125: u64 [sp + 0xd8] = a0\n  9129: a0 = u64 [sp + 0x40]\n  9132: u64 [sp + 0xd0] = a0\n  9136: a0 = u64 [sp + 0x48]\n  9139: u64 [sp + 0xc8] = a0\n  9143: a0 = u64 [sp + 0x50]\n  9146: u64 [sp + 0xc0] = a0\n  9150: a0 = u64 [sp + 0x58]\n  9153: u64 [sp + 0xf8] = a0\n  9157: a0 = u64 [sp + 0x60]\n  9160: u64 [sp + 0xf0] = a0\n  9164: a0 = u64 [sp + 0x68]\n  9167: u64 [sp + 0xe8] = a0\n  9171: a0 = u64 [sp + 0x70]\n  9174: u64 [sp + 0xe0] = a0\n  9178: a0 = u64 [sp + 0x78]\n  9181: u64 [sp + 0x118] = a0\n  9185: a0 = u64 [sp + 0x80]\n  9189: u64 [sp + 0x110] = a0\n  9193: a0 = u64 [sp + 0x88]\n  9197: u64 [sp + 0x108] = a0\n  9201: a0 = u64 [sp + 0x90]\n  9205: u64 [sp + 0x100] = a0\n  9209: u64 [sp + 0x138] = a2\n  9213: u64 [sp + 0x130] = a1\n  9217: u64 [sp + 0x128] = a3\n  9221: a0 = sp + 0x140\n  9225: a1 = sp + 0x120\n  9229: a2 = sp + 0x100\n  9233: a3 = sp + 0xe0\n  9237: a4 = sp + 0xc0\n  9241: a5 = sp + 0xa0\n  9245: u64 [sp + 0x120] = s1\n  9249: ra = 132, jump @148\n      : @165 [@dyn 66] (gas: 12)\n  9255: a4 = u64 [sp + 0x8]\n  9258: a2 = s1\n  9260: a0 = u64 [sp + 0x98]\n  9264: a0 = a0 | a4\n  9267: s1 = u64 [sp + 0x10]\n  9270: a1 = a2 | s1\n  9273: a1 = a1 | a0\n  9276: a1 = a1 >> 0x20\n  9279: a0 = a0 | s1\n  9282: a0 = a0 << 0x20\n  9285: a0 = a0 | a1\n  9288: jump @167 if a0 != 0\n      : @166 (gas: 29)\n  9291: a0 = u64 [sp + 0x148]\n  9295: a1 = u64 [sp + 0x158]\n  9299: u64 [sp + 0x90] = a1\n  9303: t1 = u64 [sp + 0x140]\n  9307: a1 = u64 [sp + 0x150]\n  9311: t2 = a0 ^ a4\n  9314: a5 = a0 <u a4\n  9317: ra = t1 <u a2\n  9320: a5 = ra if t2 == 0\n  9323: a3 = a1 - s1\n  9326: t2 = a3 - a5\n  9329: t0 = a3 <u a5\n  9332: a3 = a1 <u s1\n  9335: a1 = u64 [sp + 0x98]\n  9339: a5 = u64 [sp + 0x90]\n  9343: a5 = a5 - a1\n  9346: a5 = a5 - a3\n  9349: a5 = a5 - t0\n  9352: a0 = a0 - a4\n  9355: a0 = a0 - ra\n  9358: s1 = t1 - a2\n  9361: a0 = a0 | a5\n  9364: a1 = s1 | t2\n  9367: a1 = a1 | a0\n  9370: a0 = a0 | t2\n  9373: a1 = a1 >> 0x20\n  9376: a0 = a0 << 0x20\n  9379: a0 = a0 | a1\n  9382: jump @170 if a0 == 0\n      : @167 (gas: 1)\n  9385: trap\n      : @168 (gas: 3)\n  9386: a0 = 0\n  9388: a1 = 0\n  9390: ra = 134, jump @0\n      : @169 [@dyn 67] (gas: 5)\n  9396: i32 a1 = a0 + 0\n  9398: a0 = 0x1\n  9401: a2 = 0\n  9403: ecalli 12 // 'seal_return'\n  9405: fallthrough\n      : @170 (gas: 4)\n  9406: i32 a0 = a2 + 0\n  9408: i32 s1 = s1 + 0\n  9410: a1 = s1\n  9412: ra = 136, jump @0\n      : @171 [@dyn 68] (gas: 6)\n  9418: i32 a1 = a0 + 0\n  9420: a0 = 0\n  9422: a2 = s1\n  9424: ra = 0x8a\n  9428: ecalli 12 // 'seal_return'\n  9430: fallthrough\n      : @172 [@dyn 69] (gas: 1)\n  9431: ret\n      : @173 [@dyn 70] (gas: 6)\n  9433: i32 a1 = a0 + 0\n  9435: a0 = 0x1\n  9438: a2 = 0\n  9440: ra = 0x8e\n  9444: ecalli 12 // 'seal_return'\n  9446: fallthrough\n      : @174 [@dyn 71] (gas: 37)\n  9447: sp = sp + 0xffffffffffffff60\n  9451: u64 [sp + 0x98] = ra\n  9455: u64 [sp + 0x90] = s0\n  9459: u64 [sp + 0x88] = s1\n  9463: s0 = sp + 0xa0\n  9467: sp = sp & 0xffffffffffffffe0\n  9470: a4 = u64 [a1]\n  9472: s1 = u64 [a2 + 0x8]\n  9475: ra = u64 [a1 + 0x8]\n  9478: t1 = u64 [a2]\n  9480: a3 = a4 + 0x1f\n  9483: u64 [sp + 0x58] = a4\n  9486: t0 = a3 <u a4\n  9489: a5 = ra + t0\n  9492: u64 [sp + 0x40] = t1\n  9495: t1 = a3 <u t1\n  9498: a3 = a5 ^ s1\n  9501: u64 [sp + 0x48] = s1\n  9504: a4 = a5 <u s1\n  9507: a4 = t1 if a3 == 0\n  9510: t2 = u64 [a1 + 0x10]\n  9513: a3 = a5 <u ra\n  9516: a3 = t0 if t0 == 0\n  9519: t0 = u64 [a2 + 0x18]\n  9522: t1 = u64 [a1 + 0x18]\n  9525: s1 = u64 [a2 + 0x10]\n  9528: a3 = a3 + t2\n  9531: a1 = a3 <u t2\n  9534: a1 = a1 + t1\n  9537: a2 = a1 ^ t0\n  9540: a1 = a1 <s t0\n  9543: a5 = a3 <u s1\n  9546: a1 = a5 if a2 == 0\n  9549: a3 = a3 ^ s1\n  9552: a2 = a2 | a3\n  9555: a4 = a1 if a2 != 0\n  9558: jump @181 if a4 == 0\n      : @175 (gas: 14)\n  9562: u64 [sp + 0x28] = t0\n  9565: u64 [sp + 0x30] = s1\n  9568: u64 [sp + 0x38] = a0\n  9571: a0 = u64 [sp + 0x58]\n  9574: a0 = a0 | t2\n  9577: u64 [sp + 0x18] = t1\n  9580: a1 = ra | t1\n  9583: a0 = a0 | a1\n  9586: a0 = a0 >> 0x20\n  9589: u64 [sp + 0x20] = t2\n  9592: a1 = a1 | t2\n  9595: a1 = a1 << 0x20\n  9598: a0 = a0 | a1\n  9601: jump @180 if a0 != 0\n      : @176 (gas: 5)\n  9605: s1 = ra\n  9607: a1 = i32 [sp + 0x58]\n  9610: i32 a0 = sp + 0x60\n  9613: ecalli 3 // 'call_data_load'\n  9615: fallthrough\n      : @177 (gas: 8)\n  9616: a0 = u64 [sp + 0x78]\n  9619: a1 = u64 [sp + 0x70]\n  9622: t1 = u64 [sp + 0x68]\n  9625: u64 [sp + 0x50] = a0\n  9628: a0 = a0 | a1\n  9631: a3 = t1 <u 0x1\n  9634: a3 = 0 if a0 != 0\n  9636: jump @181 if a3 == 0\n      : @178 (gas: 46)\n  9640: a2 = u64 [sp + 0x60]\n  9643: a0 = u64 [sp + 0x58]\n  9646: a4 = a0 + 0x20\n  9649: a0 = a4 <u a0\n  9652: ra = s1 + a0\n  9655: u64 [sp + 0x10] = a4\n  9658: a4 = a4 + a2\n  9661: u64 [sp + 0x58] = a2\n  9664: t0 = a4 <u a2\n  9667: a5 = t1 + ra\n  9670: a5 = a5 + t0\n  9673: a2 = a5 ^ t1\n  9676: a3 = a5 <u t1\n  9679: a3 = t0 if a2 == 0\n  9682: a2 = ra <u s1\n  9685: a2 = a0 if a0 == 0\n  9688: a0 = u64 [sp + 0x20]\n  9691: t2 = a0 + a2\n  9694: s1 = t2 <u a0\n  9697: a0 = u64 [sp + 0x18]\n  9700: a0 = a0 + s1\n  9703: s1 = u64 [sp + 0x48]\n  9706: a2 = a5 ^ s1\n  9709: a5 = s1 <u a5\n  9712: s1 = u64 [sp + 0x40]\n  9715: a4 = s1 <u a4\n  9718: a4 = a5 if a2 != 0\n  9721: a2 = a1 + t2\n  9724: a5 = a2 <u a1\n  9727: s1 = u64 [sp + 0x50]\n  9730: u64 [sp + 0x48] = a0\n  9733: s1 = s1 + a0\n  9736: a5 = a5 + s1\n  9739: a3 = a3 + a2\n  9742: a2 = a3 <u a2\n  9745: a2 = a2 + a5\n  9748: s1 = u64 [sp + 0x28]\n  9751: a5 = a2 ^ s1\n  9754: t0 = s1 <u a2\n  9757: a2 = u64 [sp + 0x30]\n  9760: s1 = a2 <u a3\n  9763: s1 = t0 if a5 != 0\n  9766: a2 = a2 ^ a3\n  9769: a2 = a2 | a5\n  9772: a4 = s1 if a2 != 0\n  9775: jump @181 if a4 != 0\n      : @179 (gas: 19)\n  9778: a2 = u64 [sp + 0x38]\n  9781: a0 = u64 [sp + 0x58]\n  9784: u64 [a2 + 0x20] = a0\n  9787: a0 = u64 [sp + 0x10]\n  9790: u64 [a2] = a0\n  9792: u64 [a2 + 0x28] = t1\n  9795: u64 [a2 + 0x8] = ra\n  9798: u64 [a2 + 0x30] = a1\n  9801: u64 [a2 + 0x10] = t2\n  9804: a0 = u64 [sp + 0x50]\n  9807: u64 [a2 + 0x38] = a0\n  9810: a0 = u64 [sp + 0x48]\n  9813: u64 [a2 + 0x18] = a0\n  9816: sp = s0 + 0xffffffffffffff60\n  9820: ra = u64 [sp + 0x98]\n  9824: s0 = u64 [sp + 0x90]\n  9828: s1 = u64 [sp + 0x88]\n  9832: sp = sp + 0xa0\n  9836: ret\n      : @180 (gas: 1)\n  9838: trap\n      : @181 (gas: 3)\n  9839: a0 = 0\n  9841: a1 = 0\n  9843: ra = 144, jump @0\n      : @182 [@dyn 72] (gas: 6)\n  9849: i32 a1 = a0 + 0\n  9851: a0 = 0x1\n  9854: a2 = 0\n  9856: ra = 0x92\n  9860: ecalli 12 // 'seal_return'\n  9862: fallthrough\n      : @183 [@dyn 73] (gas: 43)\n  9863: sp = sp + 0xfffffffffffffe60\n  9867: u64 [sp + 0x198] = ra\n  9871: u64 [sp + 0x190] = s0\n  9875: u64 [sp + 0x188] = s1\n  9879: s0 = sp + 0x1a0\n  9883: sp = sp & 0xffffffffffffffe0\n  9886: t2 = u64 [a2 + 0x8]\n  9889: ra = u64 [a1 + 0x8]\n  9892: s1 = u64 [a2]\n  9894: a5 = u64 [a1]\n  9896: t0 = u64 [a2 + 0x10]\n  9899: a4 = t2 ^ ra\n  9902: a3 = t2 <u ra\n  9905: t1 = s1 <u a5\n  9908: a3 = t1 if a4 == 0\n  9911: a4 = t2 - ra\n  9914: a4 = a4 - t1\n  9917: u64 [sp + 0x70] = s1\n  9920: u64 [sp + 0xb8] = a5\n  9924: a5 = s1 - a5\n  9927: a5 = a5 <u 0x80\n  9931: a5 = a5 ^ 0x1\n  9934: t1 = u64 [a1 + 0x10]\n  9937: s1 = a4 >u 0\n  9939: a5 = s1 if a4 != 0\n  9942: a4 = u64 [a2 + 0x18]\n  9945: s1 = u64 [a1 + 0x18]\n  9948: a1 = t0 - t1\n  9951: a2 = a1 - a3\n  9954: a1 = a1 <u a3\n  9957: u64 [sp + 0xa8] = t1\n  9961: a3 = t0 <u t1\n  9964: u64 [sp + 0x68] = a4\n  9967: u64 [sp + 0xa0] = s1\n  9971: a4 = a4 - s1\n  9974: a4 = a4 - a3\n  9977: a4 = a4 - a1\n  9980: a1 = a4 >s 0\n  9982: a3 = a2 >u 0\n  9984: a3 = a1 if a4 != 0\n  9987: a2 = a2 | a4\n  9990: a5 = a3 if a2 != 0\n  9993: jump @196 if a5 == 0\n      : @184 (gas: 15)\n  9997: s1 = a0\n  9999: u64 [sp + 0x78] = t0\n 10002: u64 [sp + 0x80] = t2\n 10006: a2 = u64 [sp + 0xa8]\n 10010: t2 = u64 [sp + 0xb8]\n 10014: a0 = t2 | a2\n 10017: a1 = u64 [sp + 0xa0]\n 10021: a1 = ra | a1\n 10024: a0 = a0 | a1\n 10027: a0 = a0 >> 0x20\n 10030: a1 = a1 | a2\n 10033: a1 = a1 << 0x20\n 10036: a0 = a0 | a1\n 10039: u64 [sp + 0xb0] = ra\n 10043: jump @195 if a0 != 0\n      : @185 (gas: 5)\n 10047: i32 a1 = t2 + 0\n 10049: i32 a0 = sp + 0x160\n 10053: u64 [sp + 0x98] = a1\n 10057: ecalli 3 // 'call_data_load'\n 10059: fallthrough\n      : @186 (gas: 13)\n 10060: a0 = u64 [sp + 0xa8]\n 10064: a2 = u64 [sp + 0xa0]\n 10068: a2 = a2 | a0\n 10071: a0 = 0x100000000\n 10081: u64 [sp + 0x88] = a0\n 10085: a0 = 0xffffffe0\n 10095: a1 = u64 [sp + 0xb8]\n 10099: a0 = a1 <u a0\n 10102: a1 = u64 [sp + 0xb0]\n 10106: a0 = 0 if a1 != 0\n 10108: u64 [sp + 0x90] = a2\n 10112: a0 = 0 if a2 != 0\n 10114: jump @195 if a0 == 0\n      : @187 (gas: 13)\n 10118: a0 = u64 [sp + 0x178]\n 10122: u64 [sp + 0x58] = a0\n 10125: a0 = u64 [sp + 0x170]\n 10129: u64 [sp + 0x48] = a0\n 10132: a0 = u64 [sp + 0x168]\n 10136: u64 [sp + 0x60] = a0\n 10139: a0 = u64 [sp + 0x160]\n 10143: u64 [sp + 0x50] = a0\n 10146: a0 = u64 [sp + 0x98]\n 10150: i32 a1 = a0 + 0x20\n 10153: i32 a0 = sp + 0x160\n 10157: ecalli 3 // 'call_data_load'\n 10159: fallthrough\n      : @188 (gas: 9)\n 10160: a0 = u64 [sp + 0x88]\n 10164: a0 = a0 + 0xffffffffffffffc0\n 10167: a1 = u64 [sp + 0xb8]\n 10171: a0 = a1 <u a0\n 10174: a1 = u64 [sp + 0xb0]\n 10178: a0 = 0 if a1 != 0\n 10180: a1 = u64 [sp + 0x90]\n 10184: a0 = 0 if a1 != 0\n 10186: jump @195 if a0 == 0\n      : @189 (gas: 13)\n 10190: a0 = u64 [sp + 0x178]\n 10194: u64 [sp + 0x40] = a0\n 10197: a0 = u64 [sp + 0x170]\n 10201: u64 [sp + 0x30] = a0\n 10204: a0 = u64 [sp + 0x168]\n 10208: u64 [sp + 0x88] = a0\n 10212: a0 = u64 [sp + 0x160]\n 10216: u64 [sp + 0x38] = a0\n 10219: a0 = u64 [sp + 0x98]\n 10223: i32 a1 = a0 + 0x40\n 10226: i32 a0 = sp + 0x160\n 10230: ecalli 3 // 'call_data_load'\n 10232: fallthrough\n      : @190 (gas: 8)\n 10233: a0 = 0xffffffa0\n 10243: a1 = u64 [sp + 0xb8]\n 10247: a0 = a1 <u a0\n 10250: a1 = u64 [sp + 0xb0]\n 10254: a0 = 0 if a1 != 0\n 10256: a1 = u64 [sp + 0x90]\n 10260: a0 = 0 if a1 != 0\n 10262: jump @195 if a0 == 0\n      : @191 (gas: 13)\n 10266: a0 = u64 [sp + 0x178]\n 10270: u64 [sp + 0x28] = a0\n 10273: a0 = u64 [sp + 0x170]\n 10277: u64 [sp + 0x18] = a0\n 10280: a0 = u64 [sp + 0x168]\n 10284: u64 [sp + 0x90] = a0\n 10288: a0 = u64 [sp + 0x160]\n 10292: u64 [sp + 0x20] = a0\n 10295: a0 = u64 [sp + 0x98]\n 10299: i32 a1 = a0 + 0x60\n 10302: i32 a0 = sp + 0x140\n 10306: ecalli 3 // 'call_data_load'\n 10308: fallthrough\n      : @192 (gas: 7)\n 10309: t0 = u64 [sp + 0x158]\n 10313: a1 = u64 [sp + 0x150]\n 10317: a2 = u64 [sp + 0x148]\n 10321: a3 = a1 | t0\n 10324: a4 = a2 <u 0x1\n 10327: a4 = 0 if a3 != 0\n 10329: jump @196 if a4 == 0\n      : @193 (gas: 35)\n 10333: a3 = u64 [sp + 0x140]\n 10337: a4 = u64 [sp + 0xb8]\n 10341: a4 = a4 + a3\n 10344: a3 = a4 <u a3\n 10347: a5 = u64 [sp + 0xb0]\n 10351: a5 = a5 + a2\n 10354: a5 = a5 + a3\n 10357: a0 = a5 ^ a2\n 10360: a2 = a5 <u a2\n 10363: a2 = a3 if a0 == 0\n 10366: a0 = u64 [sp + 0xa8]\n 10370: a0 = a0 + a1\n 10373: a2 = a2 + a0\n 10376: a3 = a2 <u a0\n 10379: a0 = a0 <u a1\n 10382: a1 = u64 [sp + 0xa0]\n 10386: t0 = t0 + a1\n 10389: a0 = a0 + t0\n 10392: a3 = a3 + a0\n 10395: a0 = u64 [sp + 0x70]\n 10398: u64 [sp + 0xc0] = a0\n 10402: a0 = u64 [sp + 0x80]\n 10406: u64 [sp + 0xc8] = a0\n 10410: u64 [sp + 0xe0] = a4\n 10414: a0 = u64 [sp + 0x78]\n 10417: u64 [sp + 0xd0] = a0\n 10421: a0 = u64 [sp + 0x68]\n 10424: u64 [sp + 0xd8] = a0\n 10428: u64 [sp + 0xe8] = a5\n 10432: u64 [sp + 0xf0] = a2\n 10436: a0 = sp + 0x100\n 10440: a1 = sp + 0xe0\n 10444: a2 = sp + 0xc0\n 10448: u64 [sp + 0xf8] = a3\n 10452: ra = 148, jump @174\n      : @194 [@dyn 74] (gas: 46)\n 10458: t0 = u64 [sp + 0x108]\n 10462: t1 = u64 [sp + 0x100]\n 10466: a2 = u64 [sp + 0x118]\n 10470: a3 = u64 [sp + 0x110]\n 10474: a4 = u64 [sp + 0x130]\n 10478: a5 = u64 [sp + 0x138]\n 10482: a0 = u64 [sp + 0x120]\n 10486: a1 = u64 [sp + 0x128]\n 10490: u64 [s1 + 0x90] = a4\n 10494: u64 [s1 + 0x98] = a5\n 10498: u64 [s1 + 0x80] = a0\n 10502: u64 [s1 + 0x88] = a1\n 10506: u64 [s1 + 0x70] = a3\n 10509: u64 [s1 + 0x78] = a2\n 10512: u64 [s1 + 0x60] = t1\n 10515: u64 [s1 + 0x68] = t0\n 10518: a0 = u64 [sp + 0x18]\n 10521: u64 [s1 + 0x50] = a0\n 10524: a0 = u64 [sp + 0x28]\n 10527: u64 [s1 + 0x58] = a0\n 10530: a0 = u64 [sp + 0x20]\n 10533: u64 [s1 + 0x40] = a0\n 10536: a0 = u64 [sp + 0x90]\n 10540: u64 [s1 + 0x48] = a0\n 10543: a0 = u64 [sp + 0x30]\n 10546: u64 [s1 + 0x30] = a0\n 10549: a0 = u64 [sp + 0x40]\n 10552: u64 [s1 + 0x38] = a0\n 10555: a0 = u64 [sp + 0x38]\n 10558: u64 [s1 + 0x20] = a0\n 10561: a0 = u64 [sp + 0x88]\n 10565: u64 [s1 + 0x28] = a0\n 10568: a0 = u64 [sp + 0x48]\n 10571: u64 [s1 + 0x10] = a0\n 10574: a0 = u64 [sp + 0x58]\n 10577: u64 [s1 + 0x18] = a0\n 10580: a0 = u64 [sp + 0x50]\n 10583: u64 [s1] = a0\n 10585: a0 = u64 [sp + 0x60]\n 10588: u64 [s1 + 0x8] = a0\n 10591: sp = s0 + 0xfffffffffffffe60\n 10595: ra = u64 [sp + 0x198]\n 10599: s0 = u64 [sp + 0x190]\n 10603: s1 = u64 [sp + 0x188]\n 10607: sp = sp + 0x1a0\n 10611: ret\n      : @195 (gas: 1)\n 10613: trap\n      : @196 (gas: 3)\n 10614: a0 = 0\n 10616: a1 = 0\n 10618: ra = 150, jump @0\n      : @197 [@dyn 75] (gas: 6)\n 10624: i32 a1 = a0 + 0\n 10626: a0 = 0x1\n 10629: a2 = 0\n 10631: ra = 0x98\n 10635: ecalli 12 // 'seal_return'\n 10637: fallthrough\n      : @198 [@dyn 76] (gas: 9)\n 10638: a2 = u64 [a1 + 0x18]\n 10641: a3 = u64 [a1 + 0x10]\n 10644: a4 = u64 [a1 + 0x8]\n 10647: a1 = u64 [a1]\n 10649: u64 [a0 + 0x18] = a2\n 10652: u64 [a0 + 0x10] = a3\n 10655: u64 [a0 + 0x8] = a4\n 10658: u64 [a0] = a1\n 10660: ret\n      : @199 (gas: 8)\n 10662: a0 = u64 [sp + 0x1f0]\n 10666: a1 = u64 [sp + 0x1f8]\n 10670: a2 = u64 [sp + 0x1e8]\n 10674: a3 = u64 [sp + 0x1e0]\n 10678: a1 = a1 | a2\n 10681: a0 = a0 | a3\n 10684: a0 = a0 | a1\n 10687: jump @205 if a0 != 0\n      : @200 (gas: 13)\n 10691: a0 = u32 [0x20114]\n 10696: u64 [sp + 280] = 0\n 10700: u64 [sp + 272] = 0\n 10704: u64 [sp + 264] = 0\n 10708: u64 [sp + 0x100] = a0\n 10712: u64 [sp + 312] = 0\n 10716: u64 [sp + 304] = 0\n 10720: u64 [sp + 288] = 0x4\n 10725: a0 = sp + 0x140\n 10729: a1 = sp + 0x120\n 10733: a2 = sp + 0x100\n 10737: u64 [sp + 296] = 0\n 10741: ra = 154, jump @183\n      : @201 [@dyn 77] (gas: 64)\n 10747: a0 = u64 [sp + 0x140]\n 10751: u64 [sp + 0x58] = a0\n 10754: a0 = u64 [sp + 0x148]\n 10758: u64 [sp + 0x50] = a0\n 10761: a0 = u64 [sp + 0x150]\n 10765: u64 [sp + 0x48] = a0\n 10768: a0 = u64 [sp + 0x158]\n 10772: u64 [sp + 0x40] = a0\n 10775: a0 = u64 [sp + 0x160]\n 10779: u64 [sp + 0x38] = a0\n 10782: a0 = u64 [sp + 0x168]\n 10786: u64 [sp + 0x30] = a0\n 10789: a0 = u64 [sp + 0x170]\n 10793: u64 [sp + 0x28] = a0\n 10796: a0 = u64 [sp + 0x178]\n 10800: u64 [sp + 0x20] = a0\n 10803: a0 = u64 [sp + 0x180]\n 10807: u64 [sp + 0x18] = a0\n 10810: ra = u64 [sp + 0x188]\n 10814: s1 = u64 [sp + 0x190]\n 10818: t2 = u64 [sp + 0x198]\n 10822: t1 = u64 [sp + 0x1a0]\n 10826: t0 = u64 [sp + 0x1a8]\n 10830: a5 = u64 [sp + 0x1b0]\n 10834: a4 = u64 [sp + 0x1b8]\n 10838: a3 = u64 [sp + 0x1c0]\n 10842: a2 = u64 [sp + 0x1c8]\n 10846: a1 = u64 [sp + 0x1d0]\n 10850: a0 = u64 [sp + 0x1d8]\n 10854: u64 [sp + 0x78] = a0\n 10857: u64 [sp + 0x70] = a1\n 10860: u64 [sp + 0x68] = a2\n 10863: u64 [sp + 0x60] = a3\n 10866: u64 [sp + 0x98] = a4\n 10870: u64 [sp + 0x90] = a5\n 10874: u64 [sp + 0x88] = t0\n 10878: u64 [sp + 0x80] = t1\n 10882: u64 [sp + 0xb8] = t2\n 10886: u64 [sp + 0xb0] = s1\n 10890: u64 [sp + 0xa8] = ra\n 10894: a0 = u64 [sp + 0x18]\n 10897: u64 [sp + 0xa0] = a0\n 10901: a0 = u64 [sp + 0x20]\n 10904: u64 [sp + 0xd8] = a0\n 10908: a0 = u64 [sp + 0x28]\n 10911: u64 [sp + 0xd0] = a0\n 10915: a0 = u64 [sp + 0x30]\n 10918: u64 [sp + 0xc8] = a0\n 10922: a0 = u64 [sp + 0x38]\n 10925: u64 [sp + 0xc0] = a0\n 10929: a0 = u64 [sp + 0x40]\n 10932: u64 [sp + 0xf8] = a0\n 10936: a0 = u64 [sp + 0x48]\n 10939: u64 [sp + 0xf0] = a0\n 10943: a0 = u64 [sp + 0x50]\n 10946: u64 [sp + 0xe8] = a0\n 10950: a0 = sp + 0xe0\n 10954: a1 = sp + 0xc0\n 10958: a2 = sp + 0xa0\n 10962: a3 = sp + 0x80\n 10966: a4 = sp + 0x60\n 10969: a5 = u64 [sp + 0x58]\n 10972: u64 [sp + 0xe0] = a5\n 10976: ra = 156, jump @512\n      : @202 [@dyn 78] (gas: 3)\n 10982: a0 = 0x40\n 10985: a1 = 0x20\n 10988: ra = 158, jump @0\n      : @203 [@dyn 79] (gas: 100)\n 10994: a1 = u8 [a0 + 0x11]\n 10997: a2 = u8 [a0 + 0x10]\n 11000: a3 = u8 [a0 + 0x12]\n 11003: a4 = u8 [a0 + 0x13]\n 11006: a1 = a1 << 0x8\n 11009: a1 = a1 | a2\n 11012: a3 = a3 << 0x10\n 11015: a4 = a4 << 0x18\n 11018: a3 = a3 | a4\n 11021: a1 = a1 | a3\n 11024: a2 = u8 [a0 + 0x15]\n 11027: a3 = u8 [a0 + 0x14]\n 11030: a4 = u8 [a0 + 0x16]\n 11033: a5 = u8 [a0 + 0x17]\n 11036: a2 = a2 << 0x8\n 11039: a2 = a2 | a3\n 11042: a4 = a4 << 0x10\n 11045: a5 = a5 << 0x18\n 11048: a4 = a4 | a5\n 11051: a2 = a2 | a4\n 11054: a2 = a2 << 0x20\n 11057: t0 = a2 | a1\n 11060: a2 = u8 [a0 + 0x1]\n 11063: a3 = u8 [a0]\n 11065: a4 = u8 [a0 + 0x2]\n 11068: a5 = u8 [a0 + 0x3]\n 11071: a2 = a2 << 0x8\n 11074: a2 = a2 | a3\n 11077: a4 = a4 << 0x10\n 11080: a5 = a5 << 0x18\n 11083: a4 = a4 | a5\n 11086: a2 = a2 | a4\n 11089: a3 = u8 [a0 + 0x5]\n 11092: a4 = u8 [a0 + 0x4]\n 11095: a5 = u8 [a0 + 0x6]\n 11098: s1 = u8 [a0 + 0x7]\n 11101: a3 = a3 << 0x8\n 11104: a3 = a3 | a4\n 11107: a5 = a5 << 0x10\n 11110: s1 = s1 << 0x18\n 11113: a5 = a5 | s1\n 11116: a3 = a3 | a5\n 11119: a3 = a3 << 0x20\n 11122: a2 = a2 | a3\n 11125: a3 = u8 [a0 + 0x19]\n 11128: a4 = u8 [a0 + 0x18]\n 11131: a5 = u8 [a0 + 0x1a]\n 11134: s1 = u8 [a0 + 0x1b]\n 11137: a3 = a3 << 0x8\n 11140: a3 = a3 | a4\n 11143: a5 = a5 << 0x10\n 11146: s1 = s1 << 0x18\n 11149: a5 = a5 | s1\n 11152: a3 = a3 | a5\n 11155: a4 = u8 [a0 + 0x1d]\n 11158: a5 = u8 [a0 + 0x1c]\n 11161: s1 = u8 [a0 + 0x1e]\n 11164: a1 = u8 [a0 + 0x1f]\n 11167: a4 = a4 << 0x8\n 11170: a4 = a4 | a5\n 11173: s1 = s1 << 0x10\n 11176: a1 = a1 << 0x18\n 11179: a1 = a1 | s1\n 11182: a1 = a1 | a4\n 11185: a1 = a1 << 0x20\n 11188: a3 = a3 | a1\n 11191: a1 = u8 [a0 + 0x9]\n 11194: a4 = u8 [a0 + 0x8]\n 11197: a5 = u8 [a0 + 0xa]\n 11200: s1 = u8 [a0 + 0xb]\n 11203: a1 = a1 << 0x8\n 11206: a1 = a1 | a4\n 11209: a5 = a5 << 0x10\n 11212: s1 = s1 << 0x18\n 11215: a5 = a5 | s1\n 11218: a1 = a1 | a5\n 11221: a4 = u8 [a0 + 0xd]\n 11224: a5 = u8 [a0 + 0xc]\n 11227: s1 = u8 [a0 + 0xe]\n 11230: a0 = u8 [a0 + 0xf]\n 11233: a4 = a4 << 0x8\n 11236: a4 = a4 | a5\n 11239: s1 = s1 << 0x10\n 11242: a0 = a0 << 0x18\n 11245: a0 = a0 | s1\n 11248: a0 = a0 | a4\n 11251: a0 = a0 << 0x20\n 11254: a0 = a0 | a1\n 11257: a1 = reverse a0\n 11259: a0 = reverse a3\n 11261: a2 = reverse a2\n 11263: a3 = reverse t0\n 11265: a2 = a2 | a3\n 11268: a3 = a0 | a1\n 11271: a3 = a3 | a2\n 11274: a3 = a3 >> 0x20\n 11277: a1 = a1 | a2\n 11280: a1 = a1 << 0x20\n 11283: a1 = a1 | a3\n 11286: jump @207 if a1 == 0\n      : @204 (gas: 1)\n 11289: trap\n      : @205 (gas: 3)\n 11290: a0 = 0\n 11292: a1 = 0\n 11294: ra = 160, jump @0\n      : @206 [@dyn 80] (gas: 7)\n 11300: i32 a1 = a0 + 0\n 11302: a0 = 0x1\n 11305: a2 = 0\n 11307: ecalli 12 // 'seal_return'\n 11309: i32 a0 = a0 + 0\n 11311: ra = 0xa2\n 11315: jump @0\n      : @207 (gas: 2)\n 11318: i32 a0 = a0 + 0\n 11320: ra = 162, jump @0\n      : @208 [@dyn 81] (gas: 6)\n 11326: i32 a1 = a0 + 0\n 11328: a0 = 0\n 11330: a2 = 0\n 11332: ra = 0xa4\n 11336: ecalli 12 // 'seal_return'\n 11338: fallthrough\n      : @209 [@dyn 82] (gas: 47)\n 11339: sp = sp + 0xffffffffffffff80\n 11342: u64 [sp + 0x78] = ra\n 11345: u64 [sp + 0x70] = s0\n 11348: u64 [sp + 0x68] = s1\n 11351: s0 = sp + 0x80\n 11355: sp = sp & 0xffffffffffffffe0\n 11358: ra = u64 [a1 + 0x10]\n 11361: a5 = u64 [a1 + 0x8]\n 11364: a3 = u64 [a2 + 0x8]\n 11367: t1 = u64 [a1]\n 11369: a4 = u64 [a2]\n 11371: u64 [sp + 0x28] = a4\n 11374: t2 = u64 [a2 + 0x10]\n 11377: t0 = a3 ^ a5\n 11380: s1 = a3 <u a5\n 11383: a4 = a4 <u t1\n 11386: u64 [sp + 0x20] = a4\n 11389: s1 = a4 if t0 == 0\n 11392: t0 = u64 [a1 + 0x18]\n 11395: a1 = u64 [a2 + 0x18]\n 11398: u64 [sp + 0x18] = a1\n 11401: a2 = t2 - ra\n 11404: a1 = a2 - s1\n 11407: u64 [sp + 0x30] = a1\n 11410: a1 = a2 <u s1\n 11413: a4 = t2 <u ra\n 11416: u64 [sp + 0x38] = t0\n 11419: a2 = u64 [sp + 0x18]\n 11422: a2 = a2 - t0\n 11425: a2 = a2 - a4\n 11428: a2 = a2 - a1\n 11431: a1 = a3 - a5\n 11434: a3 = u64 [sp + 0x20]\n 11437: a1 = a1 - a3\n 11440: a3 = u64 [sp + 0x28]\n 11443: a3 = a3 - t1\n 11446: a4 = a1 >u 0\n 11448: a3 = a3 <u 0x40\n 11451: a3 = a3 ^ 0x1\n 11454: a3 = a4 if a1 != 0\n 11457: s1 = a2 >s 0\n 11459: a1 = u64 [sp + 0x30]\n 11462: a4 = a1 >u 0\n 11464: a4 = s1 if a2 != 0\n 11467: a1 = a1 | a2\n 11470: a3 = a4 if a1 != 0\n 11473: jump @215 if a3 == 0\n      : @210 (gas: 12)\n 11477: s1 = a0\n 11479: a0 = t1 | ra\n 11482: u64 [sp + 0x30] = a5\n 11485: a1 = u64 [sp + 0x38]\n 11488: a1 = a1 | a5\n 11491: a0 = a0 | a1\n 11494: a0 = a0 >> 0x20\n 11497: u64 [sp + 0x28] = ra\n 11500: a1 = a1 | ra\n 11503: a1 = a1 << 0x20\n 11506: a0 = a0 | a1\n 11509: jump @214 if a0 != 0\n      : @211 (gas: 6)\n 11513: i32 a1 = t1 + 0\n 11515: i32 a0 = sp + 0x40\n 11518: u64 [sp + 0x18] = a1\n 11521: u64 [sp + 0x20] = t1\n 11524: ecalli 3 // 'call_data_load'\n 11526: fallthrough\n      : @212 (gas: 10)\n 11527: a0 = u64 [sp + 0x28]\n 11530: a1 = u64 [sp + 0x38]\n 11533: a0 = a0 | a1\n 11536: a1 = 0xffffffe0\n 11546: a2 = u64 [sp + 0x20]\n 11549: a1 = a2 <u a1\n 11552: a2 = u64 [sp + 0x30]\n 11555: a1 = 0 if a2 != 0\n 11557: a1 = 0 if a0 != 0\n 11559: jump @214 if a1 == 0\n      : @213 (gas: 34)\n 11562: a0 = u64 [sp + 0x58]\n 11565: u64 [sp + 0x20] = a0\n 11568: a0 = u64 [sp + 0x50]\n 11571: u64 [sp + 0x28] = a0\n 11574: a0 = u64 [sp + 0x48]\n 11577: u64 [sp + 0x30] = a0\n 11580: a0 = u64 [sp + 0x40]\n 11583: u64 [sp + 0x38] = a0\n 11586: a0 = u64 [sp + 0x18]\n 11589: i32 a1 = a0 + 0x20\n 11592: i32 a0 = sp + 0x40\n 11595: ecalli 3 // 'call_data_load'\n 11597: a0 = u64 [sp + 0x58]\n 11600: a1 = u64 [sp + 0x50]\n 11603: a2 = u64 [sp + 0x48]\n 11606: a3 = u64 [sp + 0x40]\n 11609: u64 [s1 + 0x38] = a0\n 11612: u64 [s1 + 0x30] = a1\n 11615: u64 [s1 + 0x28] = a2\n 11618: u64 [s1 + 0x20] = a3\n 11621: a0 = u64 [sp + 0x20]\n 11624: u64 [s1 + 0x18] = a0\n 11627: a0 = u64 [sp + 0x28]\n 11630: u64 [s1 + 0x10] = a0\n 11633: a0 = u64 [sp + 0x30]\n 11636: u64 [s1 + 0x8] = a0\n 11639: a0 = u64 [sp + 0x38]\n 11642: u64 [s1] = a0\n 11644: sp = s0 + 0xffffffffffffff80\n 11647: ra = u64 [sp + 0x78]\n 11650: s0 = u64 [sp + 0x70]\n 11653: s1 = u64 [sp + 0x68]\n 11656: sp = sp + 0x80\n 11660: ret\n      : @214 (gas: 1)\n 11662: trap\n      : @215 (gas: 3)\n 11663: a0 = 0\n 11665: a1 = 0\n 11667: ra = 166, jump @0\n      : @216 [@dyn 83] (gas: 6)\n 11673: i32 a1 = a0 + 0\n 11675: a0 = 0x1\n 11678: a2 = 0\n 11680: ra = 0xa8\n 11684: ecalli 12 // 'seal_return'\n 11686: fallthrough\n      : @217 [@dyn 84] (gas: 13)\n 11687: sp = sp + 0xffffffffffffff40\n 11691: u64 [sp + 0xb8] = ra\n 11695: u64 [sp + 0xb0] = s0\n 11699: u64 [sp + 0xa8] = s1\n 11703: s0 = sp + 0xc0\n 11707: sp = sp & 0xffffffffffffffe0\n 11710: u64 [sp + 120] = 0\n 11713: u64 [sp + 112] = 0\n 11716: u64 [sp + 104] = 0\n 11719: u64 [sp + 96] = 0\n 11722: i32 a0 = sp + 0x60\n 11725: ecalli 15 // 'value_transferred'\n 11727: fallthrough\n      : @218 (gas: 8)\n 11728: a0 = u64 [sp + 0x70]\n 11731: a1 = u64 [sp + 0x78]\n 11734: a2 = u64 [sp + 0x68]\n 11737: a3 = u64 [sp + 0x60]\n 11740: a1 = a1 | a2\n 11743: a0 = a0 | a3\n 11746: a0 = a0 | a1\n 11749: jump @224 if a0 != 0\n      : @219 (gas: 2)\n 11753: a0 = i32 [0x20114]\n 11758: jump @224 if a0 <=u 67\n      : @220 (gas: 31)\n 11763: i32 a0 = sp + 0x80\n 11767: a1 = 0x4\n 11770: ecalli 3 // 'call_data_load'\n 11772: a0 = u64 [sp + 0x80]\n 11776: u64 [sp + 0x18] = a0\n 11779: a0 = u64 [sp + 0x88]\n 11783: u64 [sp + 0x10] = a0\n 11786: a0 = u64 [sp + 0x90]\n 11790: u64 [sp + 0x8] = a0\n 11793: s1 = u64 [sp + 0x98]\n 11797: i32 a0 = sp + 0x80\n 11801: a1 = 0x24\n 11804: ecalli 3 // 'call_data_load'\n 11806: a0 = u64 [sp + 0x80]\n 11810: a1 = u64 [sp + 0x88]\n 11814: a2 = u64 [sp + 0x90]\n 11818: a3 = u64 [sp + 0x98]\n 11822: u64 [sp + 0x38] = a3\n 11825: u64 [sp + 0x30] = a2\n 11828: u64 [sp + 0x28] = a1\n 11831: u64 [sp + 0x20] = a0\n 11834: u64 [sp + 0x58] = s1\n 11837: a0 = u64 [sp + 0x8]\n 11840: u64 [sp + 0x50] = a0\n 11843: a0 = u64 [sp + 0x10]\n 11846: u64 [sp + 0x48] = a0\n 11849: a0 = sp + 0x40\n 11852: a1 = sp + 0x20\n 11855: a2 = u64 [sp + 0x18]\n 11858: u64 [sp + 0x40] = a2\n 11861: ra = 170, jump @671\n      : @221 [@dyn 85] (gas: 3)\n 11868: a0 = 0x40\n 11871: a1 = 0x20\n 11874: ra = 172, jump @0\n      : @222 [@dyn 86] (gas: 100)\n 11880: a1 = u8 [a0 + 0x11]\n 11883: a2 = u8 [a0 + 0x10]\n 11886: a3 = u8 [a0 + 0x12]\n 11889: a4 = u8 [a0 + 0x13]\n 11892: a1 = a1 << 0x8\n 11895: a1 = a1 | a2\n 11898: a3 = a3 << 0x10\n 11901: a4 = a4 << 0x18\n 11904: a3 = a3 | a4\n 11907: a1 = a1 | a3\n 11910: a2 = u8 [a0 + 0x15]\n 11913: a3 = u8 [a0 + 0x14]\n 11916: a4 = u8 [a0 + 0x16]\n 11919: a5 = u8 [a0 + 0x17]\n 11922: a2 = a2 << 0x8\n 11925: a2 = a2 | a3\n 11928: a4 = a4 << 0x10\n 11931: a5 = a5 << 0x18\n 11934: a4 = a4 | a5\n 11937: a2 = a2 | a4\n 11940: a2 = a2 << 0x20\n 11943: t0 = a2 | a1\n 11946: a2 = u8 [a0 + 0x1]\n 11949: a3 = u8 [a0]\n 11951: a4 = u8 [a0 + 0x2]\n 11954: a5 = u8 [a0 + 0x3]\n 11957: a2 = a2 << 0x8\n 11960: a2 = a2 | a3\n 11963: a4 = a4 << 0x10\n 11966: a5 = a5 << 0x18\n 11969: a4 = a4 | a5\n 11972: a2 = a2 | a4\n 11975: a3 = u8 [a0 + 0x5]\n 11978: a4 = u8 [a0 + 0x4]\n 11981: a5 = u8 [a0 + 0x6]\n 11984: s1 = u8 [a0 + 0x7]\n 11987: a3 = a3 << 0x8\n 11990: a3 = a3 | a4\n 11993: a5 = a5 << 0x10\n 11996: s1 = s1 << 0x18\n 11999: a5 = a5 | s1\n 12002: a3 = a3 | a5\n 12005: a3 = a3 << 0x20\n 12008: a2 = a2 | a3\n 12011: a3 = u8 [a0 + 0x19]\n 12014: a4 = u8 [a0 + 0x18]\n 12017: a5 = u8 [a0 + 0x1a]\n 12020: s1 = u8 [a0 + 0x1b]\n 12023: a3 = a3 << 0x8\n 12026: a3 = a3 | a4\n 12029: a5 = a5 << 0x10\n 12032: s1 = s1 << 0x18\n 12035: a5 = a5 | s1\n 12038: a3 = a3 | a5\n 12041: a4 = u8 [a0 + 0x1d]\n 12044: a5 = u8 [a0 + 0x1c]\n 12047: s1 = u8 [a0 + 0x1e]\n 12050: a1 = u8 [a0 + 0x1f]\n 12053: a4 = a4 << 0x8\n 12056: a4 = a4 | a5\n 12059: s1 = s1 << 0x10\n 12062: a1 = a1 << 0x18\n 12065: a1 = a1 | s1\n 12068: a1 = a1 | a4\n 12071: a1 = a1 << 0x20\n 12074: a3 = a3 | a1\n 12077: a1 = u8 [a0 + 0x9]\n 12080: a4 = u8 [a0 + 0x8]\n 12083: a5 = u8 [a0 + 0xa]\n 12086: s1 = u8 [a0 + 0xb]\n 12089: a1 = a1 << 0x8\n 12092: a1 = a1 | a4\n 12095: a5 = a5 << 0x10\n 12098: s1 = s1 << 0x18\n 12101: a5 = a5 | s1\n 12104: a1 = a1 | a5\n 12107: a4 = u8 [a0 + 0xd]\n 12110: a5 = u8 [a0 + 0xc]\n 12113: s1 = u8 [a0 + 0xe]\n 12116: a0 = u8 [a0 + 0xf]\n 12119: a4 = a4 << 0x8\n 12122: a4 = a4 | a5\n 12125: s1 = s1 << 0x10\n 12128: a0 = a0 << 0x18\n 12131: a0 = a0 | s1\n 12134: a0 = a0 | a4\n 12137: a0 = a0 << 0x20\n 12140: a0 = a0 | a1\n 12143: a1 = reverse a0\n 12145: a0 = reverse a3\n 12147: a2 = reverse a2\n 12149: a3 = reverse t0\n 12151: a2 = a2 | a3\n 12154: a3 = a0 | a1\n 12157: a3 = a3 | a2\n 12160: a3 = a3 >> 0x20\n 12163: a1 = a1 | a2\n 12166: a1 = a1 << 0x20\n 12169: a1 = a1 | a3\n 12172: jump @226 if a1 == 0\n      : @223 (gas: 1)\n 12175: trap\n      : @224 (gas: 3)\n 12176: a0 = 0\n 12178: a1 = 0\n 12180: ra = 174, jump @0\n      : @225 [@dyn 87] (gas: 7)\n 12186: i32 a1 = a0 + 0\n 12188: a0 = 0x1\n 12191: a2 = 0\n 12193: ecalli 12 // 'seal_return'\n 12195: i32 a0 = a0 + 0\n 12197: ra = 0xb0\n 12201: jump @0\n      : @226 (gas: 2)\n 12204: i32 a0 = a0 + 0\n 12206: ra = 176, jump @0\n      : @227 [@dyn 88] (gas: 6)\n 12212: i32 a1 = a0 + 0\n 12214: a0 = 0\n 12216: a2 = 0\n 12218: ra = 0xb2\n 12222: ecalli 12 // 'seal_return'\n 12224: fallthrough\n      : @228 [@dyn 89] (gas: 25)\n 12225: sp = sp + 0xffffffffffffff80\n 12228: u64 [sp + 0x78] = ra\n 12231: u64 [sp + 0x70] = s0\n 12234: u64 [sp + 0x68] = s1\n 12237: s0 = sp + 0x80\n 12241: sp = sp & 0xffffffffffffffe0\n 12244: a3 = u64 [a1]\n 12246: u64 [sp + 0x30] = a3\n 12249: a3 = u64 [a1 + 0x8]\n 12252: u64 [sp + 0x28] = a3\n 12255: a3 = u64 [a1 + 0x10]\n 12258: u64 [sp + 0x20] = a3\n 12261: a1 = u64 [a1 + 0x18]\n 12264: u64 [sp + 0x18] = a1\n 12267: a1 = u64 [a2]\n 12269: u64 [sp + 0x10] = a1\n 12272: a1 = u64 [a2 + 0x8]\n 12275: u64 [sp + 0x8] = a1\n 12278: a1 = u64 [a2 + 0x10]\n 12281: u64 [sp] = a1\n 12283: s1 = u64 [a2 + 0x18]\n 12286: u64 [sp + 0x38] = a0\n 12289: a1 = 0x20\n 12292: a0 = 0\n 12294: ra = 180, jump @0\n      : @229 [@dyn 90] (gas: 70)\n 12300: a1 = reverse s1\n 12302: a2 = u64 [sp]\n 12304: a2 = reverse a2\n 12306: a3 = u64 [sp + 0x8]\n 12309: a3 = reverse a3\n 12311: a4 = u64 [sp + 0x10]\n 12314: a4 = reverse a4\n 12316: a5 = a4 >> 0x38\n 12319: u8 [a0 + 0x1f] = a5\n 12322: a5 = a4 >> 0x30\n 12325: u8 [a0 + 0x1e] = a5\n 12328: a5 = a4 >> 0x28\n 12331: u8 [a0 + 0x1d] = a5\n 12334: a5 = a4 >> 0x20\n 12337: u8 [a0 + 0x1c] = a5\n 12340: a5 = a4 >> 0x18\n 12343: u8 [a0 + 0x1b] = a5\n 12346: a5 = a4 >> 0x10\n 12349: u8 [a0 + 0x1a] = a5\n 12352: a5 = a4 >> 0x8\n 12355: u8 [a0 + 0x19] = a5\n 12358: u8 [a0 + 0x18] = a4\n 12361: a4 = a3 >> 0x38\n 12364: u8 [a0 + 0x17] = a4\n 12367: a4 = a3 >> 0x30\n 12370: u8 [a0 + 0x16] = a4\n 12373: a4 = a3 >> 0x28\n 12376: u8 [a0 + 0x15] = a4\n 12379: a4 = a3 >> 0x20\n 12382: u8 [a0 + 0x14] = a4\n 12385: a4 = a3 >> 0x18\n 12388: u8 [a0 + 0x13] = a4\n 12391: a4 = a3 >> 0x10\n 12394: u8 [a0 + 0x12] = a4\n 12397: a4 = a3 >> 0x8\n 12400: u8 [a0 + 0x11] = a4\n 12403: u8 [a0 + 0x10] = a3\n 12406: a3 = a2 >> 0x38\n 12409: u8 [a0 + 0xf] = a3\n 12412: a3 = a2 >> 0x30\n 12415: u8 [a0 + 0xe] = a3\n 12418: a3 = a2 >> 0x28\n 12421: u8 [a0 + 0xd] = a3\n 12424: a3 = a2 >> 0x20\n 12427: u8 [a0 + 0xc] = a3\n 12430: a3 = a2 >> 0x18\n 12433: u8 [a0 + 0xb] = a3\n 12436: a3 = a2 >> 0x10\n 12439: u8 [a0 + 0xa] = a3\n 12442: a3 = a2 >> 0x8\n 12445: u8 [a0 + 0x9] = a3\n 12448: u8 [a0 + 0x8] = a2\n 12451: a2 = a1 >> 0x38\n 12454: u8 [a0 + 0x7] = a2\n 12457: a2 = a1 >> 0x30\n 12460: u8 [a0 + 0x6] = a2\n 12463: a2 = a1 >> 0x28\n 12466: u8 [a0 + 0x5] = a2\n 12469: a2 = a1 >> 0x20\n 12472: u8 [a0 + 0x4] = a2\n 12475: a2 = a1 >> 0x18\n 12478: u8 [a0 + 0x3] = a2\n 12481: a2 = a1 >> 0x10\n 12484: u8 [a0 + 0x2] = a2\n 12487: a2 = a1 >> 0x8\n 12490: u8 [a0 + 0x1] = a2\n 12493: u8 [a0] = a1\n 12495: a0 = 0x20\n 12498: a1 = 0x20\n 12501: ra = 182, jump @0\n      : @230 [@dyn 91] (gas: 71)\n 12507: a1 = u64 [sp + 0x18]\n 12510: a1 = reverse a1\n 12512: a2 = u64 [sp + 0x20]\n 12515: a2 = reverse a2\n 12517: a3 = u64 [sp + 0x28]\n 12520: a3 = reverse a3\n 12522: a4 = u64 [sp + 0x30]\n 12525: a4 = reverse a4\n 12527: a5 = a4 >> 0x38\n 12530: u8 [a0 + 0x1f] = a5\n 12533: a5 = a4 >> 0x30\n 12536: u8 [a0 + 0x1e] = a5\n 12539: a5 = a4 >> 0x28\n 12542: u8 [a0 + 0x1d] = a5\n 12545: a5 = a4 >> 0x20\n 12548: u8 [a0 + 0x1c] = a5\n 12551: a5 = a4 >> 0x18\n 12554: u8 [a0 + 0x1b] = a5\n 12557: a5 = a4 >> 0x10\n 12560: u8 [a0 + 0x1a] = a5\n 12563: a5 = a4 >> 0x8\n 12566: u8 [a0 + 0x19] = a5\n 12569: u8 [a0 + 0x18] = a4\n 12572: a4 = a3 >> 0x38\n 12575: u8 [a0 + 0x17] = a4\n 12578: a4 = a3 >> 0x30\n 12581: u8 [a0 + 0x16] = a4\n 12584: a4 = a3 >> 0x28\n 12587: u8 [a0 + 0x15] = a4\n 12590: a4 = a3 >> 0x20\n 12593: u8 [a0 + 0x14] = a4\n 12596: a4 = a3 >> 0x18\n 12599: u8 [a0 + 0x13] = a4\n 12602: a4 = a3 >> 0x10\n 12605: u8 [a0 + 0x12] = a4\n 12608: a4 = a3 >> 0x8\n 12611: u8 [a0 + 0x11] = a4\n 12614: u8 [a0 + 0x10] = a3\n 12617: a3 = a2 >> 0x38\n 12620: u8 [a0 + 0xf] = a3\n 12623: a3 = a2 >> 0x30\n 12626: u8 [a0 + 0xe] = a3\n 12629: a3 = a2 >> 0x28\n 12632: u8 [a0 + 0xd] = a3\n 12635: a3 = a2 >> 0x20\n 12638: u8 [a0 + 0xc] = a3\n 12641: a3 = a2 >> 0x18\n 12644: u8 [a0 + 0xb] = a3\n 12647: a3 = a2 >> 0x10\n 12650: u8 [a0 + 0xa] = a3\n 12653: a3 = a2 >> 0x8\n 12656: u8 [a0 + 0x9] = a3\n 12659: u8 [a0 + 0x8] = a2\n 12662: a2 = a1 >> 0x38\n 12665: u8 [a0 + 0x7] = a2\n 12668: a2 = a1 >> 0x30\n 12671: u8 [a0 + 0x6] = a2\n 12674: a2 = a1 >> 0x28\n 12677: u8 [a0 + 0x5] = a2\n 12680: a2 = a1 >> 0x20\n 12683: u8 [a0 + 0x4] = a2\n 12686: a2 = a1 >> 0x18\n 12689: u8 [a0 + 0x3] = a2\n 12692: a2 = a1 >> 0x10\n 12695: u8 [a0 + 0x2] = a2\n 12698: a2 = a1 >> 0x8\n 12701: u8 [a0 + 0x1] = a2\n 12704: u8 [a0] = a1\n 12706: a1 = 0x40\n 12709: a0 = 0\n 12711: ra = 184, jump @0\n      : @231 [@dyn 92] (gas: 23)\n 12717: i32 a0 = a0 + 0\n 12719: i32 a2 = sp + 0x40\n 12722: a1 = 0x40\n 12725: ecalli 8 // 'hash_keccak_256'\n 12727: a0 = u64 [sp + 0x58]\n 12730: a1 = u64 [sp + 0x50]\n 12733: a2 = u64 [sp + 0x48]\n 12736: a3 = u64 [sp + 0x40]\n 12739: a0 = reverse a0\n 12741: a1 = reverse a1\n 12743: a2 = reverse a2\n 12745: a3 = reverse a3\n 12747: a4 = u64 [sp + 0x38]\n 12750: u64 [a4 + 0x18] = a3\n 12753: u64 [a4 + 0x10] = a2\n 12756: u64 [a4 + 0x8] = a1\n 12759: u64 [a4] = a0\n 12761: sp = s0 + 0xffffffffffffff80\n 12764: ra = u64 [sp + 0x78]\n 12767: s0 = u64 [sp + 0x70]\n 12770: s1 = u64 [sp + 0x68]\n 12773: sp = sp + 0x80\n 12777: ret\n      : @232 [@dyn 93] (gas: 70)\n 12779: a1 = reverse s1\n 12781: a2 = u64 [sp + 0x40]\n 12784: a2 = reverse a2\n 12786: a3 = u64 [sp + 0x48]\n 12789: a3 = reverse a3\n 12791: a4 = u64 [sp + 0x58]\n 12794: a4 = reverse a4\n 12796: a5 = a4 >> 0x38\n 12799: u8 [a0 + 0x1f] = a5\n 12802: a5 = a4 >> 0x30\n 12805: u8 [a0 + 0x1e] = a5\n 12808: a5 = a4 >> 0x28\n 12811: u8 [a0 + 0x1d] = a5\n 12814: a5 = a4 >> 0x20\n 12817: u8 [a0 + 0x1c] = a5\n 12820: a5 = a4 >> 0x18\n 12823: u8 [a0 + 0x1b] = a5\n 12826: a5 = a4 >> 0x10\n 12829: u8 [a0 + 0x1a] = a5\n 12832: a5 = a4 >> 0x8\n 12835: u8 [a0 + 0x19] = a5\n 12838: u8 [a0 + 0x18] = a4\n 12841: a4 = a3 >> 0x38\n 12844: u8 [a0 + 0x17] = a4\n 12847: a4 = a3 >> 0x30\n 12850: u8 [a0 + 0x16] = a4\n 12853: a4 = a3 >> 0x28\n 12856: u8 [a0 + 0x15] = a4\n 12859: a4 = a3 >> 0x20\n 12862: u8 [a0 + 0x14] = a4\n 12865: a4 = a3 >> 0x18\n 12868: u8 [a0 + 0x13] = a4\n 12871: a4 = a3 >> 0x10\n 12874: u8 [a0 + 0x12] = a4\n 12877: a4 = a3 >> 0x8\n 12880: u8 [a0 + 0x11] = a4\n 12883: u8 [a0 + 0x10] = a3\n 12886: a3 = a2 >> 0x38\n 12889: u8 [a0 + 0xf] = a3\n 12892: a3 = a2 >> 0x30\n 12895: u8 [a0 + 0xe] = a3\n 12898: a3 = a2 >> 0x28\n 12901: u8 [a0 + 0xd] = a3\n 12904: a3 = a2 >> 0x20\n 12907: u8 [a0 + 0xc] = a3\n 12910: a3 = a2 >> 0x18\n 12913: u8 [a0 + 0xb] = a3\n 12916: a3 = a2 >> 0x10\n 12919: u8 [a0 + 0xa] = a3\n 12922: a3 = a2 >> 0x8\n 12925: u8 [a0 + 0x9] = a3\n 12928: u8 [a0 + 0x8] = a2\n 12931: a2 = a1 >> 0x38\n 12934: u8 [a0 + 0x7] = a2\n 12937: a2 = a1 >> 0x30\n 12940: u8 [a0 + 0x6] = a2\n 12943: a2 = a1 >> 0x28\n 12946: u8 [a0 + 0x5] = a2\n 12949: a2 = a1 >> 0x20\n 12952: u8 [a0 + 0x4] = a2\n 12955: a2 = a1 >> 0x18\n 12958: u8 [a0 + 0x3] = a2\n 12961: a2 = a1 >> 0x10\n 12964: u8 [a0 + 0x2] = a2\n 12967: a2 = a1 >> 0x8\n 12970: u8 [a0 + 0x1] = a2\n 12973: u8 [a0] = a1\n 12975: a0 = 0x20\n 12978: a1 = 0x20\n 12981: ra = 188, jump @0\n      : @233 [@dyn 94] (gas: 35)\n 12987: u8 [a0 + 31] = 0x3\n 12991: u8 [a0 + 30] = 0\n 12994: u8 [a0 + 29] = 0\n 12997: u8 [a0 + 28] = 0\n 13000: u8 [a0 + 27] = 0\n 13003: u8 [a0 + 26] = 0\n 13006: u8 [a0 + 25] = 0\n 13009: u8 [a0 + 24] = 0\n 13012: u8 [a0 + 23] = 0\n 13015: u8 [a0 + 22] = 0\n 13018: u8 [a0 + 21] = 0\n 13021: u8 [a0 + 20] = 0\n 13024: u8 [a0 + 19] = 0\n 13027: u8 [a0 + 18] = 0\n 13030: u8 [a0 + 17] = 0\n 13033: u8 [a0 + 16] = 0\n 13036: u8 [a0 + 15] = 0\n 13039: u8 [a0 + 14] = 0\n 13042: u8 [a0 + 13] = 0\n 13045: u8 [a0 + 12] = 0\n 13048: u8 [a0 + 11] = 0\n 13051: u8 [a0 + 10] = 0\n 13054: u8 [a0 + 9] = 0\n 13057: u8 [a0 + 8] = 0\n 13060: u8 [a0 + 7] = 0\n 13063: u8 [a0 + 6] = 0\n 13066: u8 [a0 + 5] = 0\n 13069: u8 [a0 + 4] = 0\n 13072: u8 [a0 + 3] = 0\n 13075: u8 [a0 + 2] = 0\n 13078: u8 [a0 + 1] = 0\n 13081: u8 [a0 + 0] = 0\n 13083: a1 = 0x40\n 13086: a0 = 0\n 13088: ra = 190, jump @0\n      : @234 [@dyn 95] (gas: 14)\n 13094: i32 a0 = a0 + 0\n 13096: i32 a2 = sp + 0xa0\n 13100: a1 = 0x40\n 13103: ecalli 8 // 'hash_keccak_256'\n 13105: a0 = u64 [sp + 0xa0]\n 13109: u64 [sp + 0x58] = a0\n 13112: a0 = u64 [sp + 0xa8]\n 13116: u64 [sp + 0x48] = a0\n 13119: a0 = u64 [sp + 0xb0]\n 13123: u64 [sp + 0x40] = a0\n 13126: s1 = u64 [sp + 0xb8]\n 13130: a1 = 0x20\n 13133: a0 = 0\n 13135: ra = 192, jump @0\n      : @235 [@dyn 96] (gas: 71)\n 13141: a1 = u64 [sp + 0x60]\n 13144: a1 = reverse a1\n 13146: a2 = u64 [sp + 0x68]\n 13149: a2 = reverse a2\n 13151: a3 = u64 [sp + 0x70]\n 13154: a3 = reverse a3\n 13156: a4 = u64 [sp + 0x78]\n 13159: a4 = reverse a4\n 13161: a5 = a4 >> 0x38\n 13164: u8 [a0 + 0x1f] = a5\n 13167: a5 = a4 >> 0x30\n 13170: u8 [a0 + 0x1e] = a5\n 13173: a5 = a4 >> 0x28\n 13176: u8 [a0 + 0x1d] = a5\n 13179: a5 = a4 >> 0x20\n 13182: u8 [a0 + 0x1c] = a5\n 13185: a5 = a4 >> 0x18\n 13188: u8 [a0 + 0x1b] = a5\n 13191: a5 = a4 >> 0x10\n 13194: u8 [a0 + 0x1a] = a5\n 13197: a5 = a4 >> 0x8\n 13200: u8 [a0 + 0x19] = a5\n 13203: u8 [a0 + 0x18] = a4\n 13206: a4 = a3 >> 0x38\n 13209: u8 [a0 + 0x17] = a4\n 13212: a4 = a3 >> 0x30\n 13215: u8 [a0 + 0x16] = a4\n 13218: a4 = a3 >> 0x28\n 13221: u8 [a0 + 0x15] = a4\n 13224: a4 = a3 >> 0x20\n 13227: u8 [a0 + 0x14] = a4\n 13230: a4 = a3 >> 0x18\n 13233: u8 [a0 + 0x13] = a4\n 13236: a4 = a3 >> 0x10\n 13239: u8 [a0 + 0x12] = a4\n 13242: a4 = a3 >> 0x8\n 13245: u8 [a0 + 0x11] = a4\n 13248: u8 [a0 + 0x10] = a3\n 13251: a3 = a2 >> 0x38\n 13254: u8 [a0 + 0xf] = a3\n 13257: a3 = a2 >> 0x30\n 13260: u8 [a0 + 0xe] = a3\n 13263: a3 = a2 >> 0x28\n 13266: u8 [a0 + 0xd] = a3\n 13269: a3 = a2 >> 0x20\n 13272: u8 [a0 + 0xc] = a3\n 13275: a3 = a2 >> 0x18\n 13278: u8 [a0 + 0xb] = a3\n 13281: a3 = a2 >> 0x10\n 13284: u8 [a0 + 0xa] = a3\n 13287: a3 = a2 >> 0x8\n 13290: u8 [a0 + 0x9] = a3\n 13293: u8 [a0 + 0x8] = a2\n 13296: a2 = a1 >> 0x38\n 13299: u8 [a0 + 0x7] = a2\n 13302: a2 = a1 >> 0x30\n 13305: u8 [a0 + 0x6] = a2\n 13308: a2 = a1 >> 0x28\n 13311: u8 [a0 + 0x5] = a2\n 13314: a2 = a1 >> 0x20\n 13317: u8 [a0 + 0x4] = a2\n 13320: a2 = a1 >> 0x18\n 13323: u8 [a0 + 0x3] = a2\n 13326: a2 = a1 >> 0x10\n 13329: u8 [a0 + 0x2] = a2\n 13332: a2 = a1 >> 0x8\n 13335: u8 [a0 + 0x1] = a2\n 13338: u8 [a0] = a1\n 13340: a0 = 0x20\n 13343: a1 = 0x20\n 13346: ra = 194, jump @0\n      : @236 [@dyn 97] (gas: 66)\n 13352: a1 = s1 >> 0x38\n 13355: u8 [a0 + 0x1f] = a1\n 13358: a1 = s1 >> 0x30\n 13361: u8 [a0 + 0x1e] = a1\n 13364: a1 = s1 >> 0x28\n 13367: u8 [a0 + 0x1d] = a1\n 13370: a1 = s1 >> 0x20\n 13373: u8 [a0 + 0x1c] = a1\n 13376: a1 = s1 >> 0x18\n 13379: u8 [a0 + 0x1b] = a1\n 13382: a1 = s1 >> 0x10\n 13385: u8 [a0 + 0x1a] = a1\n 13388: a1 = s1 >> 0x8\n 13391: u8 [a0 + 0x19] = a1\n 13394: u8 [a0 + 0x18] = s1\n 13397: a2 = u64 [sp + 0x40]\n 13400: a1 = a2 >> 0x38\n 13403: u8 [a0 + 0x17] = a1\n 13406: a1 = a2 >> 0x30\n 13409: u8 [a0 + 0x16] = a1\n 13412: a1 = a2 >> 0x28\n 13415: u8 [a0 + 0x15] = a1\n 13418: a1 = a2 >> 0x20\n 13421: u8 [a0 + 0x14] = a1\n 13424: a1 = a2 >> 0x18\n 13427: u8 [a0 + 0x13] = a1\n 13430: a1 = a2 >> 0x10\n 13433: u8 [a0 + 0x12] = a1\n 13436: a1 = a2 >> 0x8\n 13439: u8 [a0 + 0x11] = a1\n 13442: u8 [a0 + 0x10] = a2\n 13445: a2 = u64 [sp + 0x48]\n 13448: a1 = a2 >> 0x38\n 13451: u8 [a0 + 0xf] = a1\n 13454: a1 = a2 >> 0x30\n 13457: u8 [a0 + 0xe] = a1\n 13460: a1 = a2 >> 0x28\n 13463: u8 [a0 + 0xd] = a1\n 13466: a1 = a2 >> 0x20\n 13469: u8 [a0 + 0xc] = a1\n 13472: a1 = a2 >> 0x18\n 13475: u8 [a0 + 0xb] = a1\n 13478: a1 = a2 >> 0x10\n 13481: u8 [a0 + 0xa] = a1\n 13484: a1 = a2 >> 0x8\n 13487: u8 [a0 + 0x9] = a1\n 13490: u8 [a0 + 0x8] = a2\n 13493: a2 = u64 [sp + 0x58]\n 13496: a1 = a2 >> 0x38\n 13499: u8 [a0 + 0x7] = a1\n 13502: a1 = a2 >> 0x30\n 13505: u8 [a0 + 0x6] = a1\n 13508: a1 = a2 >> 0x28\n 13511: u8 [a0 + 0x5] = a1\n 13514: a1 = a2 >> 0x20\n 13517: u8 [a0 + 0x4] = a1\n 13520: a1 = a2 >> 0x18\n 13523: u8 [a0 + 0x3] = a1\n 13526: a1 = a2 >> 0x10\n 13529: u8 [a0 + 0x2] = a1\n 13532: a1 = a2 >> 0x8\n 13535: u8 [a0 + 0x1] = a1\n 13538: u8 [a0] = a2\n 13540: a1 = 0x40\n 13543: a0 = 0\n 13545: ra = 196, jump @0\n      : @237 [@dyn 98] (gas: 179)\n 13551: i32 a0 = a0 + 0\n 13553: i32 a2 = sp + 0xa0\n 13557: a1 = 0x40\n 13560: ecalli 8 // 'hash_keccak_256'\n 13562: a0 = u64 [sp + 0xb8]\n 13566: a1 = u64 [sp + 0xb0]\n 13570: a2 = u64 [sp + 0xa8]\n 13574: a3 = u64 [sp + 0xa0]\n 13578: s1 = reverse a0\n 13580: a1 = reverse a1\n 13582: u64 [sp + 0x70] = a1\n 13585: a2 = reverse a2\n 13587: u64 [sp + 0x58] = a2\n 13590: a0 = reverse a3\n 13592: u64 [sp + 0x78] = a0\n 13595: u64 [sp + 0x98] = a0\n 13599: u64 [sp + 0x90] = a2\n 13603: u64 [sp + 0x88] = a1\n 13607: u64 [sp + 0x80] = s1\n 13611: u64 [sp + 0x60] = s1\n 13614: u64 [sp + 184] = 0\n 13618: u64 [sp + 176] = 0\n 13622: u64 [sp + 168] = 0\n 13626: u64 [sp + 160] = 0\n 13630: u32 [sp + 192] = 0x20\n 13635: i32 a1 = sp + 0x80\n 13639: i32 a3 = sp + 0xa0\n 13643: i32 a4 = sp + 0xc0\n 13647: a2 = 0xffffffffffffffff\n 13650: a0 = 0\n 13652: ecalli 7 // 'get_storage'\n 13654: a0 = s1 + 0x1\n 13657: a1 = a0 <u 0x1\n 13660: a2 = u64 [sp + 0x70]\n 13663: a1 = a1 + a2\n 13666: a2 = a0 | a1\n 13669: a2 = a2 <u 0x1\n 13672: a3 = u64 [sp + 0x58]\n 13675: a2 = a2 + a3\n 13678: a3 = a2 <u a3\n 13681: a4 = u64 [sp + 0x78]\n 13684: a3 = a3 + a4\n 13687: u64 [sp + 0x98] = a3\n 13691: u64 [sp + 0x90] = a2\n 13695: a2 = u64 [sp + 0xa0]\n 13699: u64 [sp + 0x48] = a2\n 13702: u64 [sp + 0x88] = a1\n 13706: a1 = u64 [sp + 0xa8]\n 13710: u64 [sp + 0x40] = a1\n 13713: u64 [sp + 0x80] = a0\n 13717: a0 = u32 [sp + 0xb0]\n 13721: u64 [sp + 0x38] = a0\n 13724: u64 [sp + 184] = 0\n 13728: u64 [sp + 176] = 0\n 13732: u64 [sp + 168] = 0\n 13736: u64 [sp + 160] = 0\n 13740: u32 [sp + 192] = 0x20\n 13745: i32 a1 = sp + 0x80\n 13749: i32 a3 = sp + 0xa0\n 13753: i32 a4 = sp + 0xc0\n 13757: a2 = 0xffffffffffffffff\n 13760: a0 = 0\n 13762: ecalli 7 // 'get_storage'\n 13764: a0 = u64 [sp + 0xa0]\n 13768: u64 [sp + 0x30] = a0\n 13771: a0 = u64 [sp + 0xa8]\n 13775: u64 [sp + 0x28] = a0\n 13778: a0 = u64 [sp + 0xb0]\n 13782: u64 [sp + 0x20] = a0\n 13785: a0 = u64 [sp + 0xb8]\n 13789: u64 [sp + 0x18] = a0\n 13792: a0 = u64 [sp + 0x60]\n 13795: a1 = a0 + 0x2\n 13798: a0 = a1 <u a0\n 13801: a2 = a1\n 13803: u64 [sp + 0x68] = a1\n 13806: a1 = u64 [sp + 0x70]\n 13809: a3 = a1 + a0\n 13812: u64 [sp + 0x60] = a3\n 13815: s1 = a3 <u a1\n 13818: s1 = a0 if a0 == 0\n 13821: a0 = u64 [sp + 0x58]\n 13824: s1 = s1 + a0\n 13827: a0 = s1 <u a0\n 13830: a1 = u64 [sp + 0x78]\n 13833: a0 = a0 + a1\n 13836: u64 [sp + 0x78] = a0\n 13839: u64 [sp + 0x98] = a0\n 13843: u64 [sp + 0x90] = s1\n 13847: u64 [sp + 0x88] = a3\n 13851: u64 [sp + 0x80] = a2\n 13855: u64 [sp + 184] = 0\n 13859: u64 [sp + 176] = 0\n 13863: u64 [sp + 168] = 0\n 13867: u64 [sp + 160] = 0\n 13871: u32 [sp + 192] = 0x20\n 13876: i32 a1 = sp + 0x80\n 13880: i32 a3 = sp + 0xa0\n 13884: i32 a4 = sp + 0xc0\n 13888: a2 = 0xffffffffffffffff\n 13891: a0 = 0\n 13893: ecalli 7 // 'get_storage'\n 13895: a0 = u8 [sp + 0xa0]\n 13899: u64 [sp + 0x70] = a0\n 13902: a0 = u64 [sp + 0x78]\n 13905: u64 [sp + 0x98] = a0\n 13909: u64 [sp + 0x90] = s1\n 13913: a0 = u64 [sp + 0x60]\n 13916: u64 [sp + 0x88] = a0\n 13920: a0 = u64 [sp + 0x68]\n 13923: u64 [sp + 0x80] = a0\n 13927: u64 [sp + 184] = 0\n 13931: u64 [sp + 176] = 0\n 13935: u64 [sp + 168] = 0\n 13939: u64 [sp + 160] = 0\n 13943: u32 [sp + 192] = 0x20\n 13948: i32 a1 = sp + 0x80\n 13952: i32 a3 = sp + 0xa0\n 13956: i32 a4 = sp + 0xc0\n 13960: a2 = 0xffffffffffffffff\n 13963: a0 = 0\n 13965: ecalli 7 // 'get_storage'\n 13967: a0 = u8 [sp + 0xa1]\n 13971: u64 [sp + 0x58] = a0\n 13974: a0 = u64 [sp + 0x78]\n 13977: u64 [sp + 0x98] = a0\n 13981: u64 [sp + 0x90] = s1\n 13985: a0 = u64 [sp + 0x60]\n 13988: u64 [sp + 0x88] = a0\n 13992: a0 = u64 [sp + 0x68]\n 13995: u64 [sp + 0x80] = a0\n 13999: u64 [sp + 184] = 0\n 14003: u64 [sp + 176] = 0\n 14007: u64 [sp + 168] = 0\n 14011: u64 [sp + 160] = 0\n 14015: u32 [sp + 192] = 0x20\n 14020: i32 a1 = sp + 0x80\n 14024: i32 a3 = sp + 0xa0\n 14028: i32 a4 = sp + 0xc0\n 14032: a2 = 0xffffffffffffffff\n 14035: a0 = 0\n 14037: ecalli 7 // 'get_storage'\n 14039: a0 = u8 [sp + 0xa2]\n 14043: a1 = u64 [sp + 0x50]\n 14046: u64 [a1 + 152] = 0\n 14050: u64 [a1 + 144] = 0\n 14054: u64 [a1 + 136] = 0\n 14058: u64 [a1 + 0x80] = a0\n 14062: u64 [a1 + 120] = 0\n 14065: u64 [a1 + 112] = 0\n 14068: u64 [a1 + 104] = 0\n 14071: a0 = u64 [sp + 0x58]\n 14074: u64 [a1 + 0x60] = a0\n 14077: u64 [a1 + 88] = 0\n 14080: u64 [a1 + 80] = 0\n 14083: u64 [a1 + 72] = 0\n 14086: a0 = u64 [sp + 0x70]\n 14089: u64 [a1 + 0x40] = a0\n 14092: a0 = u64 [sp + 0x18]\n 14095: u64 [a1 + 0x38] = a0\n 14098: a0 = u64 [sp + 0x20]\n 14101: u64 [a1 + 0x30] = a0\n 14104: a0 = u64 [sp + 0x28]\n 14107: u64 [a1 + 0x28] = a0\n 14110: a0 = u64 [sp + 0x30]\n 14113: u64 [a1 + 0x20] = a0\n 14116: u64 [a1 + 24] = 0\n 14119: a0 = u64 [sp + 0x38]\n 14122: u64 [a1 + 0x10] = a0\n 14125: a0 = u64 [sp + 0x40]\n 14128: u64 [a1 + 0x8] = a0\n 14131: a0 = u64 [sp + 0x48]\n 14134: u64 [a1] = a0\n 14136: sp = s0 + 0xffffffffffffff20\n 14140: ra = u64 [sp + 0xd8]\n 14144: s0 = u64 [sp + 0xd0]\n 14148: s1 = u64 [sp + 0xc8]\n 14152: sp = sp + 0xe0\n 14156: ret\n      : @238 (gas: 21)\n 14158: sp = sp + 0xffffffffffffff30\n 14162: u64 [sp + 0xc8] = ra\n 14166: u64 [sp + 0xc0] = s0\n 14170: u64 [sp + 0xb8] = s1\n 14174: s0 = u64 [a1 + 0x10]\n 14177: t0 = u64 [a1 + 0x18]\n 14180: s1 = u64 [a1 + 0x8]\n 14183: a1 = u64 [a1]\n 14185: u64 [sp + 0xa8] = s1\n 14189: u64 [sp + 0x88] = t0\n 14193: t0 = s1 | t0\n 14196: u64 [sp + 0xb0] = a1\n 14200: s1 = a1 | s0\n 14203: s1 = s1 | t0\n 14206: s1 = s1 >> 0x20\n 14209: u64 [sp + 0x90] = s0\n 14213: a1 = t0 | s0\n 14216: a1 = a1 << 0x20\n 14219: a1 = a1 | s1\n 14222: u64 [sp + 0x40] = a0\n 14225: jump @249 if a1 != 0\n      : @239 (gas: 43)\n 14229: a0 = u64 [sp + 0xd0]\n 14233: a1 = u64 [a0 + 0x18]\n 14236: u64 [sp + 0x18] = a1\n 14239: a1 = u64 [a0 + 0x10]\n 14242: u64 [sp + 0x8] = a1\n 14245: a1 = u64 [a0 + 0x8]\n 14248: u64 [sp + 0x10] = a1\n 14251: a0 = u64 [a0]\n 14253: u64 [sp] = a0\n 14255: a0 = u64 [a5 + 0x18]\n 14258: u64 [sp + 0x38] = a0\n 14261: a0 = u64 [a5 + 0x10]\n 14264: u64 [sp + 0x28] = a0\n 14267: a0 = u64 [a5 + 0x8]\n 14270: u64 [sp + 0x30] = a0\n 14273: a0 = u64 [a5]\n 14275: u64 [sp + 0x20] = a0\n 14278: a0 = u64 [a4 + 0x18]\n 14281: u64 [sp + 0x60] = a0\n 14284: a0 = u64 [a4 + 0x10]\n 14287: u64 [sp + 0x50] = a0\n 14290: a0 = u64 [a4 + 0x8]\n 14293: u64 [sp + 0x58] = a0\n 14296: a0 = u64 [a4]\n 14298: u64 [sp + 0x48] = a0\n 14301: a0 = u64 [a3 + 0x18]\n 14304: u64 [sp + 0x70] = a0\n 14307: a0 = u64 [a3 + 0x10]\n 14310: u64 [sp + 0x78] = a0\n 14313: a0 = u64 [a3 + 0x8]\n 14316: u64 [sp + 0x80] = a0\n 14320: a0 = u64 [a2 + 0x10]\n 14323: a1 = u64 [a3]\n 14325: u64 [sp + 0x68] = a1\n 14328: a1 = u64 [a2 + 0x8]\n 14331: u64 [sp + 0x98] = a1\n 14335: s1 = u64 [a2]\n 14337: a0 = a0 << 0x20\n 14340: s0 = a0 >> 0x20\n 14343: a0 = i32 [sp + 0xb0]\n 14347: a1 = 0x20\n 14350: u64 [sp + 0xa0] = a0\n 14354: ra = 198, jump @0\n      : @240 [@dyn 99] (gas: 66)\n 14360: a1 = reverse s0\n 14362: a2 = u64 [sp + 0x98]\n 14366: a2 = reverse a2\n 14368: a3 = reverse s1\n 14370: a4 = a3 >> 0x38\n 14373: u8 [a0 + 0x1f] = a4\n 14376: a4 = a3 >> 0x30\n 14379: u8 [a0 + 0x1e] = a4\n 14382: a4 = a3 >> 0x28\n 14385: u8 [a0 + 0x1d] = a4\n 14388: a4 = a3 >> 0x20\n 14391: u8 [a0 + 0x1c] = a4\n 14394: a4 = a3 >> 0x18\n 14397: u8 [a0 + 0x1b] = a4\n 14400: a4 = a3 >> 0x10\n 14403: u8 [a0 + 0x1a] = a4\n 14406: a4 = a3 >> 0x8\n 14409: u8 [a0 + 0x19] = a4\n 14412: u8 [a0 + 0x18] = a3\n 14415: u8 [a0 + 0x10] = a2\n 14418: u8 [a0 + 11] = 0\n 14421: u8 [a0 + 10] = 0\n 14424: u8 [a0 + 9] = 0\n 14427: u8 [a0 + 7] = 0\n 14430: u8 [a0 + 6] = 0\n 14433: u8 [a0 + 5] = 0\n 14436: u8 [a0 + 4] = 0\n 14439: u8 [a0 + 3] = 0\n 14442: u8 [a0 + 2] = 0\n 14445: u8 [a0 + 1] = 0\n 14448: u8 [a0 + 0] = 0\n 14450: a3 = a2 >> 0x38\n 14453: u8 [a0 + 0x17] = a3\n 14456: a3 = a2 >> 0x30\n 14459: u8 [a0 + 0x16] = a3\n 14462: a3 = a2 >> 0x28\n 14465: u8 [a0 + 0x15] = a3\n 14468: a3 = a2 >> 0x20\n 14471: u8 [a0 + 0x14] = a3\n 14474: a3 = a2 >> 0x18\n 14477: u8 [a0 + 0x13] = a3\n 14480: a3 = a2 >> 0x10\n 14483: u8 [a0 + 0x12] = a3\n 14486: a2 = a2 >> 0x8\n 14489: u8 [a0 + 0x11] = a2\n 14492: u8 [a0 + 0x8] = a1\n 14495: a2 = a1 >> 0x38\n 14498: u8 [a0 + 0xf] = a2\n 14501: a2 = a1 >> 0x30\n 14504: u8 [a0 + 0xe] = a2\n 14507: a2 = a1 >> 0x28\n 14510: u8 [a0 + 0xd] = a2\n 14513: a1 = a1 >> 0x20\n 14516: a2 = u64 [sp + 0x90]\n 14520: a4 = u64 [sp + 0x88]\n 14524: a4 = a4 | a2\n 14527: s0 = 0x100000000\n 14537: a2 = 0xffffffe0\n 14547: a3 = u64 [sp + 0xb0]\n 14551: a2 = a3 <u a2\n 14554: a3 = u64 [sp + 0xa8]\n 14558: a2 = 0 if a3 != 0\n 14560: u64 [sp + 0x98] = a4\n 14564: a2 = 0 if a4 != 0\n 14566: u8 [a0 + 0xc] = a1\n 14569: jump @249 if a2 == 0\n      : @241 (gas: 4)\n 14573: a0 = u64 [sp + 0xa0]\n 14577: i32 a0 = a0 + 0x20\n 14580: a1 = 0x20\n 14583: ra = 200, jump @0\n      : @242 [@dyn 100] (gas: 76)\n 14589: a1 = u64 [sp + 0x70]\n 14592: a1 = reverse a1\n 14594: a2 = u64 [sp + 0x78]\n 14597: a2 = reverse a2\n 14599: a3 = u64 [sp + 0x80]\n 14603: a3 = reverse a3\n 14605: a4 = u64 [sp + 0x68]\n 14608: a4 = reverse a4\n 14610: a5 = a4 >> 0x38\n 14613: u8 [a0 + 0x1f] = a5\n 14616: a5 = a4 >> 0x30\n 14619: u8 [a0 + 0x1e] = a5\n 14622: a5 = a4 >> 0x28\n 14625: u8 [a0 + 0x1d] = a5\n 14628: a5 = a4 >> 0x20\n 14631: u8 [a0 + 0x1c] = a5\n 14634: a5 = a4 >> 0x18\n 14637: u8 [a0 + 0x1b] = a5\n 14640: a5 = a4 >> 0x10\n 14643: u8 [a0 + 0x1a] = a5\n 14646: a5 = a4 >> 0x8\n 14649: u8 [a0 + 0x19] = a5\n 14652: u8 [a0 + 0x18] = a4\n 14655: u8 [a0 + 0x10] = a3\n 14658: a4 = a3 >> 0x38\n 14661: u8 [a0 + 0x17] = a4\n 14664: a4 = a3 >> 0x30\n 14667: u8 [a0 + 0x16] = a4\n 14670: a4 = a3 >> 0x28\n 14673: u8 [a0 + 0x15] = a4\n 14676: a4 = a3 >> 0x20\n 14679: u8 [a0 + 0x14] = a4\n 14682: a4 = a3 >> 0x18\n 14685: u8 [a0 + 0x13] = a4\n 14688: a4 = a3 >> 0x10\n 14691: u8 [a0 + 0x12] = a4\n 14694: a3 = a3 >> 0x8\n 14697: u8 [a0 + 0x11] = a3\n 14700: u8 [a0 + 0x8] = a2\n 14703: a3 = a2 >> 0x38\n 14706: u8 [a0 + 0xf] = a3\n 14709: a3 = a2 >> 0x30\n 14712: u8 [a0 + 0xe] = a3\n 14715: a3 = a2 >> 0x28\n 14718: u8 [a0 + 0xd] = a3\n 14721: a3 = a2 >> 0x20\n 14724: u8 [a0 + 0xc] = a3\n 14727: a3 = a2 >> 0x18\n 14730: u8 [a0 + 0xb] = a3\n 14733: a3 = a2 >> 0x10\n 14736: u8 [a0 + 0xa] = a3\n 14739: a2 = a2 >> 0x8\n 14742: u8 [a0 + 0x9] = a2\n 14745: u8 [a0] = a1\n 14747: a2 = a1 >> 0x38\n 14750: u8 [a0 + 0x7] = a2\n 14753: a2 = a1 >> 0x30\n 14756: u8 [a0 + 0x6] = a2\n 14759: a2 = a1 >> 0x28\n 14762: u8 [a0 + 0x5] = a2\n 14765: a2 = a1 >> 0x20\n 14768: u8 [a0 + 0x4] = a2\n 14771: a2 = a1 >> 0x18\n 14774: u8 [a0 + 0x3] = a2\n 14777: a2 = a1 >> 0x10\n 14780: u8 [a0 + 0x2] = a2\n 14783: a1 = a1 >> 0x8\n 14786: a2 = s0 + 0xffffffffffffffc0\n 14789: a3 = u64 [sp + 0xb0]\n 14793: a2 = a3 <u a2\n 14796: a3 = u64 [sp + 0xa8]\n 14800: a2 = 0 if a3 != 0\n 14802: a3 = u64 [sp + 0x98]\n 14806: a2 = 0 if a3 != 0\n 14808: u8 [a0 + 0x1] = a1\n 14811: jump @249 if a2 == 0\n      : @243 (gas: 12)\n 14815: a0 = u64 [sp + 0x50]\n 14818: a1 = u64 [sp + 0x48]\n 14821: a0 = a0 | a1\n 14824: a1 = u64 [sp + 0x60]\n 14827: a2 = u64 [sp + 0x58]\n 14830: a1 = a1 | a2\n 14833: a0 = a0 | a1\n 14836: s0 = a0 >u 0\n 14838: a0 = u64 [sp + 0xa0]\n 14842: i32 a0 = a0 + 0x40\n 14845: a1 = 0x20\n 14848: ra = 202, jump @0\n      : @244 [@dyn 101] (gas: 41)\n 14854: u8 [a0 + 30] = 0\n 14857: u8 [a0 + 29] = 0\n 14860: u8 [a0 + 28] = 0\n 14863: u8 [a0 + 27] = 0\n 14866: u8 [a0 + 26] = 0\n 14869: u8 [a0 + 25] = 0\n 14872: u8 [a0 + 24] = 0\n 14875: u8 [a0 + 23] = 0\n 14878: u8 [a0 + 22] = 0\n 14881: u8 [a0 + 21] = 0\n 14884: u8 [a0 + 20] = 0\n 14887: u8 [a0 + 19] = 0\n 14890: u8 [a0 + 18] = 0\n 14893: u8 [a0 + 17] = 0\n 14896: u8 [a0 + 16] = 0\n 14899: u8 [a0 + 15] = 0\n 14902: u8 [a0 + 14] = 0\n 14905: u8 [a0 + 13] = 0\n 14908: u8 [a0 + 12] = 0\n 14911: u8 [a0 + 11] = 0\n 14914: u8 [a0 + 10] = 0\n 14917: u8 [a0 + 9] = 0\n 14920: u8 [a0 + 8] = 0\n 14923: u8 [a0 + 7] = 0\n 14926: u8 [a0 + 6] = 0\n 14929: u8 [a0 + 5] = 0\n 14932: u8 [a0 + 4] = 0\n 14935: u8 [a0 + 3] = 0\n 14938: u8 [a0 + 2] = 0\n 14941: u8 [a0 + 1] = 0\n 14944: u8 [a0 + 0x1f] = s0\n 14947: s0 = 0x100000000\n 14957: a1 = 0xffffffa0\n 14967: a2 = u64 [sp + 0xb0]\n 14971: a1 = a2 <u a1\n 14974: a2 = u64 [sp + 0xa8]\n 14978: a1 = 0 if a2 != 0\n 14980: a2 = u64 [sp + 0x98]\n 14984: a1 = 0 if a2 != 0\n 14986: u8 [a0 + 0] = 0\n 14988: jump @249 if a1 == 0\n      : @245 (gas: 12)\n 14992: a0 = u64 [sp + 0x28]\n 14995: a1 = u64 [sp + 0x20]\n 14998: a0 = a0 | a1\n 15001: a1 = u64 [sp + 0x38]\n 15004: a2 = u64 [sp + 0x30]\n 15007: a1 = a1 | a2\n 15010: a0 = a0 | a1\n 15013: s1 = a0 >u 0\n 15015: a0 = u64 [sp + 0xa0]\n 15019: i32 a0 = a0 + 0x60\n 15022: a1 = 0x20\n 15025: ra = 204, jump @0\n      : @246 [@dyn 102] (gas: 40)\n 15031: u8 [a0 + 30] = 0\n 15034: u8 [a0 + 29] = 0\n 15037: u8 [a0 + 28] = 0\n 15040: u8 [a0 + 27] = 0\n 15043: u8 [a0 + 26] = 0\n 15046: u8 [a0 + 25] = 0\n 15049: u8 [a0 + 24] = 0\n 15052: u8 [a0 + 23] = 0\n 15055: u8 [a0 + 22] = 0\n 15058: u8 [a0 + 21] = 0\n 15061: u8 [a0 + 20] = 0\n 15064: u8 [a0 + 19] = 0\n 15067: u8 [a0 + 18] = 0\n 15070: u8 [a0 + 17] = 0\n 15073: u8 [a0 + 16] = 0\n 15076: u8 [a0 + 15] = 0\n 15079: u8 [a0 + 14] = 0\n 15082: u8 [a0 + 13] = 0\n 15085: u8 [a0 + 12] = 0\n 15088: u8 [a0 + 11] = 0\n 15091: u8 [a0 + 10] = 0\n 15094: u8 [a0 + 9] = 0\n 15097: u8 [a0 + 8] = 0\n 15100: u8 [a0 + 7] = 0\n 15103: u8 [a0 + 6] = 0\n 15106: u8 [a0 + 5] = 0\n 15109: u8 [a0 + 4] = 0\n 15112: u8 [a0 + 3] = 0\n 15115: u8 [a0 + 2] = 0\n 15118: u8 [a0 + 1] = 0\n 15121: u8 [a0 + 0] = 0\n 15123: a1 = s0 + 0xffffffffffffff80\n 15126: a2 = u64 [sp + 0xb0]\n 15130: a1 = a2 <u a1\n 15133: a2 = u64 [sp + 0xa8]\n 15137: a1 = 0 if a2 != 0\n 15139: a2 = u64 [sp + 0x98]\n 15143: a1 = 0 if a2 != 0\n 15145: u8 [a0 + 0x1f] = s1\n 15148: jump @249 if a1 == 0\n      : @247 (gas: 27)\n 15152: a0 = u64 [sp + 0xb0]\n 15156: a1 = a0 + 0xa0\n 15160: u64 [sp + 0x98] = a1\n 15164: a0 = a1 <u a0\n 15167: a1 = u64 [sp + 0xa8]\n 15171: s1 = a1 + a0\n 15174: s0 = s1 <u a1\n 15177: s0 = a0 if a0 == 0\n 15180: a0 = u64 [sp + 0x90]\n 15184: s0 = s0 + a0\n 15187: a0 = s0 <u a0\n 15190: a1 = u64 [sp + 0x88]\n 15194: a0 = a0 + a1\n 15197: u64 [sp + 0xb0] = a0\n 15201: a0 = u64 [sp + 0x8]\n 15204: a1 = u64 [sp]\n 15206: a0 = a0 | a1\n 15209: a1 = u64 [sp + 0x18]\n 15212: a2 = u64 [sp + 0x10]\n 15215: a1 = a1 | a2\n 15218: a0 = a0 | a1\n 15221: a0 = a0 >u 0\n 15223: u64 [sp + 0xa8] = a0\n 15227: a0 = u64 [sp + 0xa0]\n 15231: i32 a0 = a0 + 0x80\n 15235: a1 = 0x20\n 15238: ra = 206, jump @0\n      : @248 [@dyn 103] (gas: 45)\n 15244: u8 [a0 + 30] = 0\n 15247: u8 [a0 + 29] = 0\n 15250: u8 [a0 + 28] = 0\n 15253: u8 [a0 + 27] = 0\n 15256: u8 [a0 + 26] = 0\n 15259: u8 [a0 + 25] = 0\n 15262: u8 [a0 + 24] = 0\n 15265: u8 [a0 + 23] = 0\n 15268: u8 [a0 + 22] = 0\n 15271: u8 [a0 + 21] = 0\n 15274: u8 [a0 + 20] = 0\n 15277: u8 [a0 + 19] = 0\n 15280: u8 [a0 + 18] = 0\n 15283: u8 [a0 + 17] = 0\n 15286: u8 [a0 + 16] = 0\n 15289: u8 [a0 + 15] = 0\n 15292: u8 [a0 + 14] = 0\n 15295: u8 [a0 + 13] = 0\n 15298: u8 [a0 + 12] = 0\n 15301: u8 [a0 + 11] = 0\n 15304: u8 [a0 + 10] = 0\n 15307: u8 [a0 + 9] = 0\n 15310: u8 [a0 + 8] = 0\n 15313: u8 [a0 + 7] = 0\n 15316: u8 [a0 + 6] = 0\n 15319: u8 [a0 + 5] = 0\n 15322: u8 [a0 + 4] = 0\n 15325: u8 [a0 + 3] = 0\n 15328: u8 [a0 + 2] = 0\n 15331: u8 [a0 + 1] = 0\n 15334: u8 [a0 + 0] = 0\n 15336: a1 = u64 [sp + 0xa8]\n 15340: u8 [a0 + 0x1f] = a1\n 15343: a0 = u64 [sp + 0x40]\n 15346: a1 = u64 [sp + 0x98]\n 15350: u64 [a0] = a1\n 15352: a1 = u64 [sp + 0xb0]\n 15356: u64 [a0 + 0x18] = a1\n 15359: u64 [a0 + 0x8] = s1\n 15362: u64 [a0 + 0x10] = s0\n 15365: ra = u64 [sp + 0xc8]\n 15369: s0 = u64 [sp + 0xc0]\n 15373: s1 = u64 [sp + 0xb8]\n 15377: sp = sp + 0xd0\n 15381: ret\n      : @249 (gas: 1)\n 15383: trap\n      : @250 (gas: 8)\n 15384: a0 = u64 [sp + 0x290]\n 15388: a1 = u64 [sp + 0x298]\n 15392: a2 = u64 [sp + 0x288]\n 15396: a3 = u64 [sp + 0x280]\n 15400: a1 = a1 | a2\n 15403: a0 = a0 | a3\n 15406: a0 = a0 | a1\n 15409: jump @258 if a0 != 0\n      : @251 (gas: 2)\n 15413: a0 = i32 [0x20114]\n 15418: jump @258 if a0 <=u 67\n      : @252 (gas: 58)\n 15423: i32 a0 = sp + 0x2a0\n 15427: a1 = 0x4\n 15430: ecalli 3 // 'call_data_load'\n 15432: a0 = u64 [sp + 0x2a0]\n 15436: u64 [sp + 0xb8] = a0\n 15440: a0 = u64 [sp + 0x2a8]\n 15444: u64 [sp + 0xb0] = a0\n 15448: a0 = u64 [sp + 0x2b0]\n 15452: u64 [sp + 0xa8] = a0\n 15456: s1 = u64 [sp + 0x2b8]\n 15460: i32 a0 = sp + 0x2a0\n 15464: a1 = 0x24\n 15467: ecalli 3 // 'call_data_load'\n 15469: a0 = u64 [sp + 0x2a0]\n 15473: a1 = u64 [sp + 0x2a8]\n 15477: a2 = u64 [sp + 0x2b0]\n 15481: a3 = u64 [sp + 0x2b8]\n 15485: u64 [sp + 0x1b8] = a3\n 15489: u64 [sp + 0x1b0] = a2\n 15493: u64 [sp + 0x1a8] = a1\n 15497: u64 [sp + 0x1a0] = a0\n 15501: u64 [sp + 0x1d8] = s1\n 15505: a0 = u64 [sp + 0xa8]\n 15509: u64 [sp + 0x1d0] = a0\n 15513: a0 = u64 [sp + 0xb0]\n 15517: u64 [sp + 0x1c8] = a0\n 15521: a0 = sp + 0x1e0\n 15525: a1 = sp + 0x1c0\n 15529: a2 = sp + 0x1a0\n 15533: a3 = u64 [sp + 0xb8]\n 15537: u64 [sp + 0x1c0] = a3\n 15541: ra = 0xd0\n 15545: sp = sp + 0xffffffffffffff20\n 15549: u64 [sp + 0xd8] = ra\n 15553: u64 [sp + 0xd0] = s0\n 15557: u64 [sp + 0xc8] = s1\n 15561: s0 = sp + 0xe0\n 15565: sp = sp & 0xffffffffffffffe0\n 15568: a3 = u64 [a2]\n 15570: u64 [sp + 0x78] = a3\n 15573: a3 = u64 [a2 + 0x8]\n 15576: u64 [sp + 0x70] = a3\n 15579: a3 = u64 [a2 + 0x10]\n 15582: u64 [sp + 0x68] = a3\n 15585: a2 = u64 [a2 + 0x18]\n 15588: u64 [sp + 0x60] = a2\n 15591: a2 = u64 [a1]\n 15593: u64 [sp + 0x58] = a2\n 15596: a2 = u64 [a1 + 0x8]\n 15599: u64 [sp + 0x48] = a2\n 15602: a2 = u64 [a1 + 0x10]\n 15605: u64 [sp + 0x40] = a2\n 15608: s1 = u64 [a1 + 0x18]\n 15611: u64 [sp + 0x50] = a0\n 15614: a1 = 0x20\n 15617: a0 = 0\n 15619: ra = 0xba\n 15623: jump @0\n      : @253 [@dyn 104] (gas: 43)\n 15626: a0 = u64 [sp + 0x1e0]\n 15630: u64 [sp + 0xb0] = a0\n 15634: a0 = u64 [sp + 0x1e8]\n 15638: u64 [sp + 0xa8] = a0\n 15642: a0 = u64 [sp + 0x1f0]\n 15646: u64 [sp + 0xa0] = a0\n 15650: a0 = u64 [sp + 0x1f8]\n 15654: u64 [sp + 0x98] = a0\n 15658: a0 = u64 [sp + 0x200]\n 15662: u64 [sp + 0x90] = a0\n 15666: a0 = u64 [sp + 0x208]\n 15670: u64 [sp + 0x88] = a0\n 15674: a0 = u64 [sp + 0x210]\n 15678: u64 [sp + 0x80] = a0\n 15682: a0 = u64 [sp + 0x218]\n 15686: u64 [sp + 0x78] = a0\n 15689: a0 = u64 [sp + 0x220]\n 15693: u64 [sp + 0x70] = a0\n 15696: a0 = u64 [sp + 0x228]\n 15700: u64 [sp + 0x68] = a0\n 15703: a0 = u64 [sp + 0x230]\n 15707: u64 [sp + 0x60] = a0\n 15710: a0 = u64 [sp + 0x238]\n 15714: u64 [sp + 0x58] = a0\n 15717: a0 = u64 [sp + 0x240]\n 15721: u64 [sp + 0x50] = a0\n 15724: a0 = u64 [sp + 0x248]\n 15728: u64 [sp + 0x48] = a0\n 15731: a0 = u64 [sp + 0x250]\n 15735: u64 [sp + 0x40] = a0\n 15738: a0 = u64 [sp + 0x258]\n 15742: u64 [sp + 0x38] = a0\n 15745: a0 = u64 [sp + 0x260]\n 15749: u64 [sp + 0x30] = a0\n 15752: a0 = u64 [sp + 0x268]\n 15756: u64 [sp + 0x28] = a0\n 15759: a0 = u64 [sp + 0x270]\n 15763: u64 [sp + 0x20] = a0\n 15766: a0 = u64 [sp + 0x278]\n 15770: u64 [sp + 0x18] = a0\n 15773: a0 = 0x40\n 15776: a1 = 0x20\n 15779: ra = 210, jump @0\n      : @254 [@dyn 105] (gas: 148)\n 15785: a1 = u8 [a0 + 0x1]\n 15788: a2 = u8 [a0]\n 15790: a3 = u8 [a0 + 0x2]\n 15793: a4 = u8 [a0 + 0x3]\n 15796: a1 = a1 << 0x8\n 15799: a1 = a1 | a2\n 15802: a3 = a3 << 0x10\n 15805: a4 = a4 << 0x18\n 15808: a3 = a3 | a4\n 15811: a1 = a1 | a3\n 15814: a2 = u8 [a0 + 0x5]\n 15817: a3 = u8 [a0 + 0x4]\n 15820: a4 = u8 [a0 + 0x6]\n 15823: a5 = u8 [a0 + 0x7]\n 15826: a2 = a2 << 0x8\n 15829: a2 = a2 | a3\n 15832: a4 = a4 << 0x10\n 15835: a5 = a5 << 0x18\n 15838: a4 = a4 | a5\n 15841: a2 = a2 | a4\n 15844: a2 = a2 << 0x20\n 15847: t0 = a2 | a1\n 15850: a2 = u8 [a0 + 0x9]\n 15853: a3 = u8 [a0 + 0x8]\n 15856: a4 = u8 [a0 + 0xa]\n 15859: a5 = u8 [a0 + 0xb]\n 15862: a2 = a2 << 0x8\n 15865: a2 = a2 | a3\n 15868: a4 = a4 << 0x10\n 15871: a5 = a5 << 0x18\n 15874: a4 = a4 | a5\n 15877: a2 = a2 | a4\n 15880: a3 = u8 [a0 + 0xd]\n 15883: a4 = u8 [a0 + 0xc]\n 15886: a5 = u8 [a0 + 0xe]\n 15889: s1 = u8 [a0 + 0xf]\n 15892: a3 = a3 << 0x8\n 15895: a3 = a3 | a4\n 15898: a5 = a5 << 0x10\n 15901: s1 = s1 << 0x18\n 15904: a5 = a5 | s1\n 15907: a3 = a3 | a5\n 15910: a3 = a3 << 0x20\n 15913: a2 = a2 | a3\n 15916: a3 = u8 [a0 + 0x11]\n 15919: a4 = u8 [a0 + 0x10]\n 15922: a5 = u8 [a0 + 0x12]\n 15925: s1 = u8 [a0 + 0x13]\n 15928: a3 = a3 << 0x8\n 15931: a3 = a3 | a4\n 15934: a5 = a5 << 0x10\n 15937: s1 = s1 << 0x18\n 15940: a5 = a5 | s1\n 15943: a3 = a3 | a5\n 15946: a4 = u8 [a0 + 0x15]\n 15949: a5 = u8 [a0 + 0x14]\n 15952: s1 = u8 [a0 + 0x16]\n 15955: a1 = u8 [a0 + 0x17]\n 15958: a4 = a4 << 0x8\n 15961: a4 = a4 | a5\n 15964: s1 = s1 << 0x10\n 15967: a1 = a1 << 0x18\n 15970: a1 = a1 | s1\n 15973: a1 = a1 | a4\n 15976: a1 = a1 << 0x20\n 15979: a3 = a3 | a1\n 15982: a1 = u8 [a0 + 0x19]\n 15985: a4 = u8 [a0 + 0x18]\n 15988: a5 = u8 [a0 + 0x1a]\n 15991: s1 = u8 [a0 + 0x1b]\n 15994: a1 = a1 << 0x8\n 15997: a1 = a1 | a4\n 16000: a5 = a5 << 0x10\n 16003: s1 = s1 << 0x18\n 16006: a5 = a5 | s1\n 16009: a1 = a1 | a5\n 16012: a4 = u8 [a0 + 0x1d]\n 16015: a5 = u8 [a0 + 0x1c]\n 16018: s1 = u8 [a0 + 0x1e]\n 16021: a0 = u8 [a0 + 0x1f]\n 16024: a4 = a4 << 0x8\n 16027: a4 = a4 | a5\n 16030: s1 = s1 << 0x10\n 16033: a0 = a0 << 0x18\n 16036: a0 = a0 | s1\n 16039: a0 = a0 | a4\n 16042: a0 = a0 << 0x20\n 16045: a0 = a0 | a1\n 16048: s1 = reverse a0\n 16050: a3 = reverse a3\n 16052: u64 [sp + 0x8] = a3\n 16055: a1 = reverse a2\n 16057: u64 [sp + 0x10] = a1\n 16060: a2 = reverse t0\n 16062: u64 [sp + 0xb8] = a2\n 16066: a0 = sp + 0xc0\n 16070: u64 [sp] = a0\n 16072: a0 = u64 [sp + 0x18]\n 16075: u64 [sp + 0xd8] = a0\n 16079: a0 = u64 [sp + 0x20]\n 16082: u64 [sp + 0xd0] = a0\n 16086: a0 = u64 [sp + 0x28]\n 16089: u64 [sp + 0xc8] = a0\n 16093: a0 = u64 [sp + 0x30]\n 16096: u64 [sp + 0xc0] = a0\n 16100: a0 = u64 [sp + 0x38]\n 16103: u64 [sp + 0xf8] = a0\n 16107: a0 = u64 [sp + 0x40]\n 16110: u64 [sp + 0xf0] = a0\n 16114: a0 = u64 [sp + 0x48]\n 16117: u64 [sp + 0xe8] = a0\n 16121: a0 = u64 [sp + 0x50]\n 16124: u64 [sp + 0xe0] = a0\n 16128: a0 = u64 [sp + 0x58]\n 16131: u64 [sp + 0x118] = a0\n 16135: a0 = u64 [sp + 0x60]\n 16138: u64 [sp + 0x110] = a0\n 16142: a0 = u64 [sp + 0x68]\n 16145: u64 [sp + 0x108] = a0\n 16149: a0 = u64 [sp + 0x70]\n 16152: u64 [sp + 0x100] = a0\n 16156: a0 = u64 [sp + 0x78]\n 16159: u64 [sp + 0x138] = a0\n 16163: a0 = u64 [sp + 0x80]\n 16167: u64 [sp + 0x130] = a0\n 16171: a0 = u64 [sp + 0x88]\n 16175: u64 [sp + 0x128] = a0\n 16179: a0 = u64 [sp + 0x90]\n 16183: u64 [sp + 0x120] = a0\n 16187: a0 = u64 [sp + 0x98]\n 16191: u64 [sp + 0x158] = a0\n 16195: a0 = u64 [sp + 0xa0]\n 16199: u64 [sp + 0x150] = a0\n 16203: a0 = u64 [sp + 0xa8]\n 16207: u64 [sp + 0x148] = a0\n 16211: a0 = u64 [sp + 0xb0]\n 16215: u64 [sp + 0x140] = a0\n 16219: u64 [sp + 0x178] = a2\n 16223: u64 [sp + 0x170] = a1\n 16227: u64 [sp + 0x168] = a3\n 16231: a0 = sp + 0x180\n 16235: a1 = sp + 0x160\n 16239: a2 = sp + 0x140\n 16243: a3 = sp + 0x120\n 16247: a4 = sp + 0x100\n 16251: a5 = sp + 0xe0\n 16255: u64 [sp + 0x160] = s1\n 16259: ra = 212, jump @238\n      : @255 [@dyn 106] (gas: 12)\n 16265: a4 = u64 [sp + 0x8]\n 16268: a2 = s1\n 16270: a0 = u64 [sp + 0xb8]\n 16274: a0 = a0 | a4\n 16277: s1 = u64 [sp + 0x10]\n 16280: a1 = a2 | s1\n 16283: a1 = a1 | a0\n 16286: a1 = a1 >> 0x20\n 16289: a0 = a0 | s1\n 16292: a0 = a0 << 0x20\n 16295: a0 = a0 | a1\n 16298: jump @257 if a0 != 0\n      : @256 (gas: 29)\n 16301: a0 = u64 [sp + 0x188]\n 16305: a1 = u64 [sp + 0x198]\n 16309: u64 [sp + 0xb0] = a1\n 16313: t1 = u64 [sp + 0x180]\n 16317: a1 = u64 [sp + 0x190]\n 16321: t2 = a0 ^ a4\n 16324: a5 = a0 <u a4\n 16327: ra = t1 <u a2\n 16330: a5 = ra if t2 == 0\n 16333: a3 = a1 - s1\n 16336: t2 = a3 - a5\n 16339: t0 = a3 <u a5\n 16342: a3 = a1 <u s1\n 16345: a1 = u64 [sp + 0xb8]\n 16349: a5 = u64 [sp + 0xb0]\n 16353: a5 = a5 - a1\n 16356: a5 = a5 - a3\n 16359: a5 = a5 - t0\n 16362: a0 = a0 - a4\n 16365: a0 = a0 - ra\n 16368: s1 = t1 - a2\n 16371: a0 = a0 | a5\n 16374: a1 = s1 | t2\n 16377: a1 = a1 | a0\n 16380: a0 = a0 | t2\n 16383: a1 = a1 >> 0x20\n 16386: a0 = a0 << 0x20\n 16389: a0 = a0 | a1\n 16392: jump @260 if a0 == 0\n      : @257 (gas: 1)\n 16395: trap\n      : @258 (gas: 3)\n 16396: a0 = 0\n 16398: a1 = 0\n 16400: ra = 214, jump @0\n      : @259 [@dyn 107] (gas: 5)\n 16406: i32 a1 = a0 + 0\n 16408: a0 = 0x1\n 16411: a2 = 0\n 16413: ecalli 12 // 'seal_return'\n 16415: fallthrough\n      : @260 (gas: 4)\n 16416: i32 a0 = a2 + 0\n 16418: i32 s1 = s1 + 0\n 16420: a1 = s1\n 16422: ra = 216, jump @0\n      : @261 [@dyn 108] (gas: 6)\n 16428: i32 a1 = a0 + 0\n 16430: a0 = 0\n 16432: a2 = s1\n 16434: ra = 0xda\n 16438: ecalli 12 // 'seal_return'\n 16440: fallthrough\n      : @262 [@dyn 109] (gas: 13)\n 16441: sp = sp + 0xffffffffffffffb0\n 16444: u64 [sp + 0x48] = ra\n 16447: u64 [sp + 0x40] = s0\n 16450: s0 = sp + 0x50\n 16453: sp = sp & 0xfffffffffffffff0\n 16456: u64 [sp + 48] = 0\n 16459: u64 [sp + 40] = 0\n 16462: u64 [sp + 32] = 0\n 16465: a0 = 0x4e487b7100000000\n 16475: a1 = sp + 0x20\n 16478: u64 [sp + 0x38] = a0\n 16481: a0 = 0\n 16483: ra = 220, jump @23\n      : @263 [@dyn 110] (gas: 7)\n 16489: u64 [sp + 24] = 0\n 16492: u64 [sp + 16] = 0\n 16495: u64 [sp + 0] = 0x32\n 16498: a0 = 0x4\n 16501: a1 = sp\n 16503: u64 [sp + 8] = 0\n 16506: ra = 222, jump @23\n      : @264 [@dyn 111] (gas: 3)\n 16512: a1 = 0x24\n 16515: a0 = 0\n 16517: ra = 224, jump @0\n      : @265 [@dyn 112] (gas: 6)\n 16523: i32 a1 = a0 + 0\n 16525: a0 = 0x1\n 16528: a2 = 0x24\n 16531: ra = 0xe2\n 16535: ecalli 12 // 'seal_return'\n 16537: fallthrough\n      : @266 [@dyn 113] (gas: 40)\n 16538: sp = sp + 0xffffffffffffffa0\n 16541: u64 [sp + 0x58] = ra\n 16544: u64 [sp + 0x50] = s0\n 16547: u64 [sp + 0x48] = s1\n 16550: s0 = sp + 0x60\n 16553: sp = sp & 0xffffffffffffffe0\n 16556: s1 = a0\n 16558: a0 = u64 [a1 + 0x18]\n 16561: a2 = u64 [a1 + 0x10]\n 16564: a3 = u64 [a1 + 0x8]\n 16567: a1 = u64 [a1]\n 16569: u64 [sp + 0x18] = a0\n 16572: u64 [sp + 0x10] = a2\n 16575: u64 [sp + 0x8] = a3\n 16578: u64 [sp] = a1\n 16580: u64 [sp + 56] = 0\n 16583: u64 [sp + 48] = 0\n 16586: u64 [sp + 40] = 0\n 16589: u64 [sp + 32] = 0\n 16592: u32 [sp + 64] = 0x20\n 16596: i32 a1 = sp + 0\n 16598: i32 a3 = sp + 0x20\n 16601: i32 a4 = sp + 0x40\n 16604: a2 = 0xffffffffffffffff\n 16607: a0 = 0\n 16609: ecalli 7 // 'get_storage'\n 16611: a0 = u64 [sp + 0x38]\n 16614: a1 = u64 [sp + 0x30]\n 16617: a2 = u64 [sp + 0x28]\n 16620: a3 = u64 [sp + 0x20]\n 16623: u64 [s1 + 0x18] = a0\n 16626: u64 [s1 + 0x10] = a1\n 16629: u64 [s1 + 0x8] = a2\n 16632: u64 [s1] = a3\n 16634: sp = s0 + 0xffffffffffffffa0\n 16637: ra = u64 [sp + 0x58]\n 16640: s0 = u64 [sp + 0x50]\n 16643: s1 = u64 [sp + 0x48]\n 16646: sp = sp + 0x60\n 16649: ret\n      : @267 (gas: 38)\n 16651: sp = sp + 0xfffffffffffffee0\n 16655: u64 [sp + 0x118] = ra\n 16659: u64 [sp + 0x110] = s0\n 16663: u64 [sp + 0x108] = s1\n 16667: s0 = sp + 0x120\n 16671: sp = sp & 0xffffffffffffffe0\n 16674: u64 [sp + 0x40] = a0\n 16677: a0 = u64 [a2]\n 16679: u64 [sp + 0x48] = a0\n 16682: a0 = u64 [a2 + 0x8]\n 16685: u64 [sp + 0x50] = a0\n 16688: a0 = u64 [a2 + 0x10]\n 16691: u64 [sp + 0x58] = a0\n 16694: s1 = u64 [a2 + 0x18]\n 16697: a4 = u64 [a1 + 0x18]\n 16700: a3 = u64 [a1 + 0x10]\n 16703: a2 = u64 [a1 + 0x8]\n 16706: a0 = u64 [a1]\n 16708: u64 [sp + 0x18] = a4\n 16711: u64 [sp + 0xb8] = a4\n 16715: u64 [sp + 0x20] = a3\n 16718: u64 [sp + 0xb0] = a3\n 16722: u64 [sp + 0x28] = a2\n 16725: u64 [sp + 0xa8] = a2\n 16729: u64 [sp + 0x30] = a0\n 16732: u64 [sp + 0xa0] = a0\n 16736: u64 [sp + 248] = 0\n 16740: u64 [sp + 240] = 0\n 16744: u64 [sp + 232] = 0\n 16748: u64 [sp + 224] = 0\n 16752: u32 [sp + 192] = 0x20\n 16757: i32 a1 = sp + 0xa0\n 16761: i32 a3 = sp + 0xe0\n 16765: i32 a4 = sp + 0xc0\n 16769: a2 = 0xffffffffffffffff\n 16772: a0 = 0\n 16774: ecalli 7 // 'get_storage'\n 16776: fallthrough\n      : @268 (gas: 20)\n 16777: a0 = u64 [sp + 0xf8]\n 16781: t0 = u64 [sp + 0xe0]\n 16785: a2 = u64 [sp + 0xf0]\n 16789: a3 = u64 [sp + 0xe8]\n 16793: a4 = a0 ^ s1\n 16796: u64 [sp + 0x38] = s1\n 16799: a1 = s1 <u a0\n 16802: a0 = u64 [sp + 0x58]\n 16805: a5 = a0 <u a2\n 16808: a5 = a1 if a4 != 0\n 16811: a1 = u64 [sp + 0x50]\n 16814: t1 = a3 ^ a1\n 16817: a3 = a1 <u a3\n 16820: a1 = u64 [sp + 0x48]\n 16823: a1 = a1 <u t0\n 16826: a1 = a3 if t1 != 0\n 16829: a0 = a0 ^ a2\n 16832: a0 = a0 | a4\n 16835: a1 = a5 if a0 != 0\n 16838: jump @272 if a1 == 0\n      : @269 (gas: 3)\n 16842: a1 = 0x20\n 16845: a0 = 0\n 16847: ra = 228, jump @0\n      : @270 [@dyn 114] (gas: 71)\n 16853: a1 = u64 [sp + 0x18]\n 16856: a1 = reverse a1\n 16858: a2 = u64 [sp + 0x20]\n 16861: a2 = reverse a2\n 16863: a3 = u64 [sp + 0x28]\n 16866: a3 = reverse a3\n 16868: a4 = u64 [sp + 0x30]\n 16871: a4 = reverse a4\n 16873: a5 = a4 >> 0x38\n 16876: u8 [a0 + 0x1f] = a5\n 16879: a5 = a4 >> 0x30\n 16882: u8 [a0 + 0x1e] = a5\n 16885: a5 = a4 >> 0x28\n 16888: u8 [a0 + 0x1d] = a5\n 16891: a5 = a4 >> 0x20\n 16894: u8 [a0 + 0x1c] = a5\n 16897: a5 = a4 >> 0x18\n 16900: u8 [a0 + 0x1b] = a5\n 16903: a5 = a4 >> 0x10\n 16906: u8 [a0 + 0x1a] = a5\n 16909: a5 = a4 >> 0x8\n 16912: u8 [a0 + 0x19] = a5\n 16915: u8 [a0 + 0x18] = a4\n 16918: u8 [a0 + 0x10] = a3\n 16921: a4 = a3 >> 0x38\n 16924: u8 [a0 + 0x17] = a4\n 16927: a4 = a3 >> 0x30\n 16930: u8 [a0 + 0x16] = a4\n 16933: a4 = a3 >> 0x28\n 16936: u8 [a0 + 0x15] = a4\n 16939: a4 = a3 >> 0x20\n 16942: u8 [a0 + 0x14] = a4\n 16945: a4 = a3 >> 0x18\n 16948: u8 [a0 + 0x13] = a4\n 16951: a4 = a3 >> 0x10\n 16954: u8 [a0 + 0x12] = a4\n 16957: a3 = a3 >> 0x8\n 16960: u8 [a0 + 0x11] = a3\n 16963: u8 [a0 + 0x8] = a2\n 16966: a3 = a2 >> 0x38\n 16969: u8 [a0 + 0xf] = a3\n 16972: a3 = a2 >> 0x30\n 16975: u8 [a0 + 0xe] = a3\n 16978: a3 = a2 >> 0x28\n 16981: u8 [a0 + 0xd] = a3\n 16984: a3 = a2 >> 0x20\n 16987: u8 [a0 + 0xc] = a3\n 16990: a3 = a2 >> 0x18\n 16993: u8 [a0 + 0xb] = a3\n 16996: a3 = a2 >> 0x10\n 16999: u8 [a0 + 0xa] = a3\n 17002: a2 = a2 >> 0x8\n 17005: u8 [a0 + 0x9] = a2\n 17008: u8 [a0] = a1\n 17010: a2 = a1 >> 0x38\n 17013: u8 [a0 + 0x7] = a2\n 17016: a2 = a1 >> 0x30\n 17019: u8 [a0 + 0x6] = a2\n 17022: a2 = a1 >> 0x28\n 17025: u8 [a0 + 0x5] = a2\n 17028: a2 = a1 >> 0x20\n 17031: u8 [a0 + 0x4] = a2\n 17034: a2 = a1 >> 0x18\n 17037: u8 [a0 + 0x3] = a2\n 17040: a2 = a1 >> 0x10\n 17043: u8 [a0 + 0x2] = a2\n 17046: a1 = a1 >> 0x8\n 17049: u8 [a0 + 0x1] = a1\n 17052: a1 = 0x20\n 17055: a0 = 0\n 17057: ra = 230, jump @0\n      : @271 [@dyn 115] (gas: 45)\n 17063: i32 a0 = a0 + 0\n 17065: i32 a2 = sp + 0xe0\n 17069: a1 = 0x20\n 17072: ecalli 8 // 'hash_keccak_256'\n 17074: a0 = u64 [sp + 0xe0]\n 17078: a1 = u64 [sp + 0xe8]\n 17082: a2 = u64 [sp + 0xf8]\n 17086: a3 = u64 [sp + 0xf0]\n 17090: t0 = reverse a0\n 17092: a1 = reverse a1\n 17094: a2 = reverse a2\n 17096: a3 = reverse a3\n 17098: a4 = u64 [sp + 0x50]\n 17101: a4 = a4 + a3\n 17104: a5 = u64 [sp + 0x48]\n 17107: a5 = a5 + a2\n 17110: a2 = a5 <u a2\n 17113: a4 = a4 + a2\n 17116: s1 = a4 ^ a3\n 17119: a3 = a4 <u a3\n 17122: a3 = a2 if s1 == 0\n 17125: a2 = u64 [sp + 0x58]\n 17128: a2 = a2 + a1\n 17131: a3 = a3 + a2\n 17134: s1 = a3 <u a2\n 17137: a0 = u64 [sp + 0x38]\n 17140: a0 = a0 + t0\n 17143: a1 = a2 <u a1\n 17146: a0 = a0 + a1\n 17149: a0 = a0 + s1\n 17152: a1 = u64 [sp + 0x40]\n 17155: u64 [a1 + 56] = 0\n 17158: u64 [a1 + 48] = 0\n 17161: u64 [a1 + 40] = 0\n 17164: u64 [a1 + 32] = 0\n 17167: u64 [a1] = a5\n 17169: u64 [a1 + 0x8] = a4\n 17172: u64 [a1 + 0x10] = a3\n 17175: u64 [a1 + 0x18] = a0\n 17178: sp = s0 + 0xfffffffffffffee0\n 17182: ra = u64 [sp + 0x118]\n 17186: s0 = u64 [sp + 0x110]\n 17190: s1 = u64 [sp + 0x108]\n 17194: sp = sp + 0x120\n 17198: ret\n      : @272 (gas: 8)\n 17200: u64 [sp + 144] = 0\n 17204: u64 [sp + 136] = 0\n 17208: u64 [sp + 128] = 0\n 17212: a0 = 0x4e487b7100000000\n 17222: a1 = sp + 0x80\n 17226: u64 [sp + 0x98] = a0\n 17230: a0 = 0\n 17232: ra = 232, jump @23\n      : @273 [@dyn 116] (gas: 7)\n 17238: u64 [sp + 120] = 0\n 17241: u64 [sp + 112] = 0\n 17244: u64 [sp + 96] = 0x32\n 17248: a0 = 0x4\n 17251: a1 = sp + 0x60\n 17254: u64 [sp + 104] = 0\n 17257: ra = 234, jump @23\n      : @274 [@dyn 117] (gas: 3)\n 17263: a1 = 0x24\n 17266: a0 = 0\n 17268: ra = 236, jump @0\n      : @275 [@dyn 118] (gas: 6)\n 17274: i32 a1 = a0 + 0\n 17276: a0 = 0x1\n 17279: a2 = 0x24\n 17282: ra = 0xee\n 17286: ecalli 12 // 'seal_return'\n 17288: fallthrough\n      : @276 [@dyn 119] (gas: 236)\n 17289: sp = sp + 0xffffffffffffffa0\n 17292: u64 [sp + 0x58] = ra\n 17295: u64 [sp + 0x50] = s0\n 17298: u64 [sp + 0x48] = s1\n 17301: u64 [sp] = a0\n 17303: t0 = u64 [a1]\n 17305: t1 = u64 [a2]\n 17307: a0 = u64 [a2 + 0x8]\n 17310: a3 = u64 [a2 + 0x10]\n 17313: a4 = u64 [a1 + 0x18]\n 17316: s0 = u64 [a1 + 0x10]\n 17319: a2 = u64 [a2 + 0x18]\n 17322: a1 = u64 [a1 + 0x8]\n 17325: t2 = a4 >u 0\n 17327: s1 = s0 >u 0\n 17329: s1 = t2 if a4 != 0\n 17332: ra = a1 >u 0\n 17334: a5 = t0 <u 0x100\n 17338: t2 = a5 ^ 0x1\n 17341: t2 = ra if a1 != 0\n 17344: a4 = a4 | s0\n 17347: t2 = s1 if a4 != 0\n 17350: u8 [sp + 71] = 0\n 17353: u8 [sp + 70] = 0\n 17356: u8 [sp + 69] = 0\n 17359: u8 [sp + 68] = 0\n 17362: u8 [sp + 67] = 0\n 17365: u8 [sp + 66] = 0\n 17368: u8 [sp + 65] = 0\n 17371: u8 [sp + 64] = 0\n 17374: u8 [sp + 63] = 0\n 17377: u8 [sp + 62] = 0\n 17380: u8 [sp + 61] = 0\n 17383: u8 [sp + 60] = 0\n 17386: u8 [sp + 59] = 0\n 17389: u8 [sp + 58] = 0\n 17392: u8 [sp + 57] = 0\n 17395: u8 [sp + 56] = 0\n 17398: u8 [sp + 55] = 0\n 17401: u8 [sp + 54] = 0\n 17404: u8 [sp + 53] = 0\n 17407: u8 [sp + 52] = 0\n 17410: u8 [sp + 51] = 0\n 17413: u8 [sp + 50] = 0\n 17416: u8 [sp + 49] = 0\n 17419: u8 [sp + 48] = 0\n 17422: u8 [sp + 47] = 0\n 17425: u8 [sp + 46] = 0\n 17428: u8 [sp + 45] = 0\n 17431: u8 [sp + 44] = 0\n 17434: u8 [sp + 43] = 0\n 17437: u8 [sp + 42] = 0\n 17440: u8 [sp + 41] = 0\n 17443: u8 [sp + 40] = 0\n 17446: u8 [sp + 0x20] = a2\n 17449: u8 [sp + 0x18] = a3\n 17452: u8 [sp + 0x10] = a0\n 17455: u8 [sp + 0x8] = t1\n 17458: a1 = a2 >> 0x38\n 17461: u8 [sp + 0x27] = a1\n 17464: a1 = a2 >> 0x30\n 17467: u8 [sp + 0x26] = a1\n 17470: a1 = a2 >> 0x28\n 17473: u8 [sp + 0x25] = a1\n 17476: a1 = a2 >> 0x20\n 17479: u8 [sp + 0x24] = a1\n 17482: a1 = a2 >> 0x18\n 17485: u8 [sp + 0x23] = a1\n 17488: a1 = a2 >> 0x10\n 17491: u8 [sp + 0x22] = a1\n 17494: a2 = a2 >> 0x8\n 17497: u8 [sp + 0x21] = a2\n 17500: a1 = a3 >> 0x38\n 17503: u8 [sp + 0x1f] = a1\n 17506: a1 = a3 >> 0x30\n 17509: u8 [sp + 0x1e] = a1\n 17512: a1 = a3 >> 0x28\n 17515: u8 [sp + 0x1d] = a1\n 17518: a1 = a3 >> 0x20\n 17521: u8 [sp + 0x1c] = a1\n 17524: a1 = a3 >> 0x18\n 17527: u8 [sp + 0x1b] = a1\n 17530: a1 = a3 >> 0x10\n 17533: u8 [sp + 0x1a] = a1\n 17536: a3 = a3 >> 0x8\n 17539: u8 [sp + 0x19] = a3\n 17542: a1 = a0 >> 0x38\n 17545: u8 [sp + 0x17] = a1\n 17548: a1 = a0 >> 0x30\n 17551: u8 [sp + 0x16] = a1\n 17554: a1 = a0 >> 0x28\n 17557: u8 [sp + 0x15] = a1\n 17560: a1 = a0 >> 0x20\n 17563: u8 [sp + 0x14] = a1\n 17566: a1 = a0 >> 0x18\n 17569: u8 [sp + 0x13] = a1\n 17572: a1 = a0 >> 0x10\n 17575: u8 [sp + 0x12] = a1\n 17578: a0 = a0 >> 0x8\n 17581: u8 [sp + 0x11] = a0\n 17584: a0 = t1 >> 0x38\n 17587: u8 [sp + 0xf] = a0\n 17590: a0 = t1 >> 0x30\n 17593: u8 [sp + 0xe] = a0\n 17596: a0 = t1 >> 0x28\n 17599: u8 [sp + 0xd] = a0\n 17602: a0 = t1 >> 0x20\n 17605: u8 [sp + 0xc] = a0\n 17608: a0 = t1 >> 0x18\n 17611: u8 [sp + 0xb] = a0\n 17614: a0 = t1 >> 0x10\n 17617: u8 [sp + 0xa] = a0\n 17620: a0 = t1 >> 0x8\n 17623: u8 [sp + 0x9] = a0\n 17626: a0 = t0 << 0x38\n 17629: a0 = a0 >> 0x3b\n 17632: a2 = sp + 0x8\n 17635: a2 = a2 + a0\n 17638: a0 = u8 [a2 + 0x11]\n 17641: a1 = u8 [a2 + 0x10]\n 17644: a3 = u8 [a2 + 0x12]\n 17647: a4 = u8 [a2 + 0x13]\n 17650: a0 = a0 << 0x8\n 17653: a0 = a0 | a1\n 17656: a3 = a3 << 0x10\n 17659: a4 = a4 << 0x18\n 17662: a3 = a3 | a4\n 17665: a0 = a0 | a3\n 17668: a1 = u8 [a2 + 0x15]\n 17671: a3 = u8 [a2 + 0x14]\n 17674: a4 = u8 [a2 + 0x16]\n 17677: a5 = u8 [a2 + 0x17]\n 17680: a1 = a1 << 0x8\n 17683: a1 = a1 | a3\n 17686: a4 = a4 << 0x10\n 17689: a5 = a5 << 0x18\n 17692: a4 = a4 | a5\n 17695: a1 = a1 | a4\n 17698: a1 = a1 << 0x20\n 17701: ra = a1 | a0\n 17704: a3 = t0 & 0x7\n 17707: a1 = ra >> a3\n 17710: a0 = u8 [a2 + 0x19]\n 17713: a4 = u8 [a2 + 0x18]\n 17716: s1 = u8 [a2 + 0x1a]\n 17719: s0 = u8 [a2 + 0x1b]\n 17722: a0 = a0 << 0x8\n 17725: a0 = a0 | a4\n 17728: s1 = s1 << 0x10\n 17731: s0 = s0 << 0x18\n 17734: s0 = s0 | s1\n 17737: a0 = a0 | s0\n 17740: a4 = u8 [a2 + 0x1d]\n 17743: s1 = u8 [a2 + 0x1c]\n 17746: s0 = u8 [a2 + 0x1e]\n 17749: a5 = u8 [a2 + 0x1f]\n 17752: a4 = a4 << 0x8\n 17755: a4 = a4 | s1\n 17758: s0 = s0 << 0x10\n 17761: a5 = a5 << 0x18\n 17764: a5 = a5 | s0\n 17767: a4 = a4 | a5\n 17770: a4 = a4 << 0x20\n 17773: t0 = a4 | a0\n 17776: a0 = t0 << 0x1\n 17779: t1 = a3 ^ 0x3f\n 17782: a4 = a0 << t1\n 17785: a4 = a4 | a1\n 17788: a0 = u8 [a2 + 0x9]\n 17791: a1 = u8 [a2 + 0x8]\n 17794: a5 = u8 [a2 + 0xa]\n 17797: s0 = u8 [a2 + 0xb]\n 17800: a0 = a0 << 0x8\n 17803: a0 = a0 | a1\n 17806: a5 = a5 << 0x10\n 17809: s0 = s0 << 0x18\n 17812: a5 = a5 | s0\n 17815: a0 = a0 | a5\n 17818: a1 = u8 [a2 + 0xd]\n 17821: a5 = u8 [a2 + 0xc]\n 17824: s0 = u8 [a2 + 0xe]\n 17827: s1 = u8 [a2 + 0xf]\n 17830: a1 = a1 << 0x8\n 17833: a1 = a1 | a5\n 17836: s0 = s0 << 0x10\n 17839: s1 = s1 << 0x18\n 17842: s0 = s0 | s1\n 17845: a1 = a1 | s0\n 17848: a1 = a1 << 0x20\n 17851: a1 = a1 | a0\n 17854: a0 = a1 >> a3\n 17857: ra = ra << 0x1\n 17860: a5 = a3 ^ 0xffffffffffffffff\n 17863: a5 = ra << a5\n 17866: ra = a0 | a5\n 17869: a0 = u8 [a2 + 0x1]\n 17872: s0 = u8 [a2]\n 17874: s1 = u8 [a2 + 0x2]\n 17877: a5 = u8 [a2 + 0x3]\n 17880: a0 = a0 << 0x8\n 17883: a0 = a0 | s0\n 17886: s1 = s1 << 0x10\n 17889: a5 = a5 << 0x18\n 17892: a5 = a5 | s1\n 17895: a0 = a0 | a5\n 17898: a5 = u8 [a2 + 0x5]\n 17901: s0 = u8 [a2 + 0x4]\n 17904: s1 = u8 [a2 + 0x6]\n 17907: a2 = u8 [a2 + 0x7]\n 17910: a5 = a5 << 0x8\n 17913: a5 = a5 | s0\n 17916: s1 = s1 << 0x10\n 17919: a2 = a2 << 0x18\n 17922: a2 = a2 | s1\n 17925: a2 = a2 | a5\n 17928: a2 = a2 << 0x20\n 17931: a0 = a0 | a2\n 17934: a0 = a0 >> a3\n 17937: a1 = a1 << 0x1\n 17940: a1 = a1 << t1\n 17943: a0 = a0 | a1\n 17946: a1 = t0 >> a3\n 17949: a0 = 0 if t2 != 0\n 17951: ra = 0 if t2 != 0\n 17953: a4 = 0 if t2 != 0\n 17955: a1 = 0 if t2 != 0\n 17957: a2 = u64 [sp]\n 17959: u64 [a2 + 0x18] = a1\n 17962: u64 [a2 + 0x10] = a4\n 17965: u64 [a2 + 0x8] = ra\n 17968: u64 [a2] = a0\n 17970: ra = u64 [sp + 0x58]\n 17973: s0 = u64 [sp + 0x50]\n 17976: s1 = u64 [sp + 0x48]\n 17979: sp = sp + 0x60\n 17982: ret\n      : @277 (gas: 19)\n 17984: t1 = u64 [sp + 0x8]\n 17987: t0 = u64 [sp]\n 17989: a0 = u64 [sp + 0x118]\n 17993: a1 = u64 [sp + 0x100]\n 17997: t2 = u64 [sp + 0x110]\n 18001: a3 = u64 [sp + 0x108]\n 18005: a4 = a0 ^ s1\n 18008: a0 = s1 <u a0\n 18011: a2 = u64 [sp + 0x10]\n 18014: a5 = a2 <u t2\n 18017: a5 = a0 if a4 != 0\n 18020: a0 = a3 ^ t0\n 18023: a3 = t0 <u a3\n 18026: a1 = t1 <u a1\n 18029: a1 = a3 if a0 != 0\n 18032: a0 = t2 ^ a2\n 18035: a0 = a0 | a4\n 18038: a1 = a5 if a0 != 0\n 18041: jump @280 if a1 == 0\n      : @278 (gas: 12)\n 18045: u64 [sp + 0x60] = t1\n 18048: u64 [sp + 152] = 0\n 18052: u64 [sp + 144] = 0\n 18056: u64 [sp + 136] = 0\n 18060: u64 [sp + 128] = 0x1\n 18065: u64 [sp + 0x68] = t0\n 18068: u64 [sp + 0x70] = a2\n 18071: a0 = sp + 0xa0\n 18075: a1 = sp + 0x80\n 18079: a2 = sp + 0x60\n 18082: u64 [sp + 0x78] = s1\n 18085: ra = 240, jump @267\n      : @279 [@dyn 120] (gas: 250)\n 18091: a0 = u64 [sp + 0xd8]\n 18095: u64 [sp + 0x10] = a0\n 18098: a0 = u64 [sp + 0xd0]\n 18102: u64 [sp + 0x8] = a0\n 18105: s1 = u64 [sp + 0xc8]\n 18109: a0 = u64 [sp + 0xc0]\n 18113: u64 [sp] = a0\n 18115: a0 = u64 [sp + 0xb8]\n 18119: a1 = u64 [sp + 0xb0]\n 18123: a2 = u64 [sp + 0xa8]\n 18127: a3 = u64 [sp + 0xa0]\n 18131: u64 [sp + 0xf8] = a0\n 18135: u64 [sp + 0xf0] = a1\n 18139: u64 [sp + 0xe8] = a2\n 18143: u64 [sp + 0xe0] = a3\n 18147: u64 [sp + 280] = 0\n 18151: u64 [sp + 272] = 0\n 18155: u64 [sp + 264] = 0\n 18159: u64 [sp + 256] = 0\n 18163: u32 [sp + 288] = 0x20\n 18168: i32 a1 = sp + 0xe0\n 18172: i32 a3 = sp + 0x100\n 18176: i32 a4 = sp + 0x120\n 18180: a2 = 0xffffffffffffffff\n 18183: a0 = 0\n 18185: ecalli 7 // 'get_storage'\n 18187: t0 = u64 [sp + 0x100]\n 18191: a2 = u64 [sp + 0x108]\n 18195: a3 = u64 [sp + 0x110]\n 18199: t2 = u64 [sp]\n 18201: a0 = t2 >> 0x3d\n 18204: a4 = s1 << 0x3\n 18207: a4 = a4 | a0\n 18210: s1 = s1 >> 0x3d\n 18213: a1 = u64 [sp + 0x8]\n 18216: a0 = a1 << 0x3\n 18219: s1 = s1 | a0\n 18222: a0 = a1 >> 0x3d\n 18225: a5 = u64 [sp + 0x10]\n 18228: a5 = a5 << 0x3\n 18231: a5 = a5 | a0\n 18234: a0 = t2 << 0x3\n 18237: a1 = a4 >u 0\n 18239: a0 = a0 <u 0x100\n 18243: t1 = a0 ^ 0x1\n 18246: t1 = a1 if a4 != 0\n 18249: a1 = a5 >u 0\n 18251: a0 = s1 >u 0\n 18253: a0 = a1 if a5 != 0\n 18256: a4 = u64 [sp + 0x118]\n 18260: a5 = a5 | s1\n 18263: t1 = a0 if a5 != 0\n 18266: u8 [sp + 95] = 0\n 18269: u8 [sp + 94] = 0\n 18272: u8 [sp + 93] = 0\n 18275: u8 [sp + 92] = 0\n 18278: u8 [sp + 91] = 0\n 18281: u8 [sp + 90] = 0\n 18284: u8 [sp + 89] = 0\n 18287: u8 [sp + 88] = 0\n 18290: u8 [sp + 87] = 0\n 18293: u8 [sp + 86] = 0\n 18296: u8 [sp + 85] = 0\n 18299: u8 [sp + 84] = 0\n 18302: u8 [sp + 83] = 0\n 18305: u8 [sp + 82] = 0\n 18308: u8 [sp + 81] = 0\n 18311: u8 [sp + 80] = 0\n 18314: u8 [sp + 79] = 0\n 18317: u8 [sp + 78] = 0\n 18320: u8 [sp + 77] = 0\n 18323: u8 [sp + 76] = 0\n 18326: u8 [sp + 75] = 0\n 18329: u8 [sp + 74] = 0\n 18332: u8 [sp + 73] = 0\n 18335: u8 [sp + 72] = 0\n 18338: u8 [sp + 71] = 0\n 18341: u8 [sp + 70] = 0\n 18344: u8 [sp + 69] = 0\n 18347: u8 [sp + 68] = 0\n 18350: u8 [sp + 67] = 0\n 18353: u8 [sp + 66] = 0\n 18356: u8 [sp + 65] = 0\n 18359: u8 [sp + 64] = 0\n 18362: u8 [sp + 0x38] = a4\n 18365: u8 [sp + 0x30] = a3\n 18368: u8 [sp + 0x28] = a2\n 18371: u8 [sp + 0x20] = t0\n 18374: a0 = a4 >> 0x38\n 18377: u8 [sp + 0x3f] = a0\n 18380: a0 = a4 >> 0x30\n 18383: u8 [sp + 0x3e] = a0\n 18386: a0 = a4 >> 0x28\n 18389: u8 [sp + 0x3d] = a0\n 18392: a0 = a4 >> 0x20\n 18395: u8 [sp + 0x3c] = a0\n 18398: a0 = a4 >> 0x18\n 18401: u8 [sp + 0x3b] = a0\n 18404: a0 = a4 >> 0x10\n 18407: u8 [sp + 0x3a] = a0\n 18410: a4 = a4 >> 0x8\n 18413: u8 [sp + 0x39] = a4\n 18416: a0 = a3 >> 0x38\n 18419: u8 [sp + 0x37] = a0\n 18422: a0 = a3 >> 0x30\n 18425: u8 [sp + 0x36] = a0\n 18428: a0 = a3 >> 0x28\n 18431: u8 [sp + 0x35] = a0\n 18434: a0 = a3 >> 0x20\n 18437: u8 [sp + 0x34] = a0\n 18440: a0 = a3 >> 0x18\n 18443: u8 [sp + 0x33] = a0\n 18446: a0 = a3 >> 0x10\n 18449: u8 [sp + 0x32] = a0\n 18452: a3 = a3 >> 0x8\n 18455: u8 [sp + 0x31] = a3\n 18458: a0 = a2 >> 0x38\n 18461: u8 [sp + 0x2f] = a0\n 18464: a0 = a2 >> 0x30\n 18467: u8 [sp + 0x2e] = a0\n 18470: a0 = a2 >> 0x28\n 18473: u8 [sp + 0x2d] = a0\n 18476: a0 = a2 >> 0x20\n 18479: u8 [sp + 0x2c] = a0\n 18482: a0 = a2 >> 0x18\n 18485: u8 [sp + 0x2b] = a0\n 18488: a0 = a2 >> 0x10\n 18491: u8 [sp + 0x2a] = a0\n 18494: a2 = a2 >> 0x8\n 18497: u8 [sp + 0x29] = a2\n 18500: a0 = t0 >> 0x38\n 18503: u8 [sp + 0x27] = a0\n 18506: a0 = t0 >> 0x30\n 18509: u8 [sp + 0x26] = a0\n 18512: a0 = t0 >> 0x28\n 18515: u8 [sp + 0x25] = a0\n 18518: a0 = t0 >> 0x20\n 18521: u8 [sp + 0x24] = a0\n 18524: a0 = t0 >> 0x18\n 18527: u8 [sp + 0x23] = a0\n 18530: a0 = t0 >> 0x10\n 18533: u8 [sp + 0x22] = a0\n 18536: a0 = t0 >> 0x8\n 18539: u8 [sp + 0x21] = a0\n 18542: a1 = t2 & 0x1f\n 18545: a0 = sp + 0x20\n 18548: a1 = a1 + a0\n 18551: a0 = u8 [a1 + 0x19]\n 18554: a2 = u8 [a1 + 0x18]\n 18557: a3 = u8 [a1 + 0x1a]\n 18560: a4 = u8 [a1 + 0x1b]\n 18563: a0 = a0 << 0x8\n 18566: a0 = a0 | a2\n 18569: a3 = a3 << 0x10\n 18572: a4 = a4 << 0x18\n 18575: a3 = a3 | a4\n 18578: a0 = a0 | a3\n 18581: a2 = u8 [a1 + 0x1d]\n 18584: a3 = u8 [a1 + 0x1c]\n 18587: a4 = u8 [a1 + 0x1e]\n 18590: a5 = u8 [a1 + 0x1f]\n 18593: a2 = a2 << 0x8\n 18596: a2 = a2 | a3\n 18599: a4 = a4 << 0x10\n 18602: a5 = a5 << 0x18\n 18605: a4 = a4 | a5\n 18608: a2 = a2 | a4\n 18611: a2 = a2 << 0x20\n 18614: t0 = a2 | a0\n 18617: a0 = u8 [a1 + 0x11]\n 18620: a3 = u8 [a1 + 0x10]\n 18623: a4 = u8 [a1 + 0x12]\n 18626: a5 = u8 [a1 + 0x13]\n 18629: a0 = a0 << 0x8\n 18632: a0 = a0 | a3\n 18635: a4 = a4 << 0x10\n 18638: a5 = a5 << 0x18\n 18641: a4 = a4 | a5\n 18644: a0 = a0 | a4\n 18647: a3 = u8 [a1 + 0x15]\n 18650: a4 = u8 [a1 + 0x14]\n 18653: a5 = u8 [a1 + 0x16]\n 18656: s1 = u8 [a1 + 0x17]\n 18659: a3 = a3 << 0x8\n 18662: a3 = a3 | a4\n 18665: a5 = a5 << 0x10\n 18668: s1 = s1 << 0x18\n 18671: a5 = a5 | s1\n 18674: a3 = a3 | a5\n 18677: a3 = a3 << 0x20\n 18680: a3 = a3 | a0\n 18683: a0 = u8 [a1 + 0x9]\n 18686: a4 = u8 [a1 + 0x8]\n 18689: a5 = u8 [a1 + 0xa]\n 18692: s1 = u8 [a1 + 0xb]\n 18695: a0 = a0 << 0x8\n 18698: a0 = a0 | a4\n 18701: a5 = a5 << 0x10\n 18704: s1 = s1 << 0x18\n 18707: a5 = a5 | s1\n 18710: a0 = a0 | a5\n 18713: a4 = u8 [a1 + 0xd]\n 18716: a5 = u8 [a1 + 0xc]\n 18719: s1 = u8 [a1 + 0xe]\n 18722: a2 = u8 [a1 + 0xf]\n 18725: a4 = a4 << 0x8\n 18728: a4 = a4 | a5\n 18731: s1 = s1 << 0x10\n 18734: a2 = a2 << 0x18\n 18737: a2 = a2 | s1\n 18740: a2 = a2 | a4\n 18743: a2 = a2 << 0x20\n 18746: a4 = a2 | a0\n 18749: a0 = u8 [a1 + 0x1]\n 18752: a2 = u8 [a1]\n 18754: a5 = u8 [a1 + 0x2]\n 18757: s1 = u8 [a1 + 0x3]\n 18760: a0 = a0 << 0x8\n 18763: a0 = a0 | a2\n 18766: a5 = a5 << 0x10\n 18769: s1 = s1 << 0x18\n 18772: a5 = a5 | s1\n 18775: a0 = a0 | a5\n 18778: a2 = u8 [a1 + 0x5]\n 18781: a5 = u8 [a1 + 0x4]\n 18784: s1 = u8 [a1 + 0x6]\n 18787: a1 = u8 [a1 + 0x7]\n 18790: a2 = a2 << 0x8\n 18793: a2 = a2 | a5\n 18796: s1 = s1 << 0x10\n 18799: a1 = a1 << 0x18\n 18802: a1 = a1 | s1\n 18805: a1 = a1 | a2\n 18808: a1 = a1 << 0x20\n 18811: a0 = a0 | a1\n 18814: a0 = 0 if t1 != 0\n 18816: a4 = 0 if t1 != 0\n 18818: a3 = 0 if t1 != 0\n 18820: t0 = 0 if t1 != 0\n 18822: a1 = u64 [sp + 0x18]\n 18825: u64 [a1 + 0x18] = t0\n 18828: u64 [a1 + 0x10] = a3\n 18831: u64 [a1 + 0x8] = a4\n 18834: u64 [a1] = a0\n 18836: sp = s0 + 0xfffffffffffffec0\n 18840: ra = u64 [sp + 0x138]\n 18844: s0 = u64 [sp + 0x130]\n 18848: s1 = u64 [sp + 0x128]\n 18852: sp = sp + 0x140\n 18856: ret\n      : @280 (gas: 2)\n 18858: a0 = 0\n 18860: ra = 242, jump @0\n      : @281 [@dyn 121] (gas: 6)\n 18866: i32 a1 = a0 + 0\n 18868: a0 = 0x1\n 18871: a2 = 0\n 18873: ra = 0xf4\n 18877: ecalli 12 // 'seal_return'\n 18879: fallthrough\n      : @282 [@dyn 122] (gas: 17)\n 18880: sp = sp + 0xffffffffffffffa8\n 18883: u64 [sp + 0x50] = ra\n 18886: u64 [sp + 0x48] = s0\n 18889: u64 [sp + 0x40] = s1\n 18892: a3 = u64 [a1 + 0x10]\n 18895: s1 = u64 [a1 + 0x18]\n 18898: a5 = u64 [a1 + 0x8]\n 18901: s0 = u64 [a1]\n 18903: a4 = a5 | s1\n 18906: a1 = s0 | a3\n 18909: a1 = a1 | a4\n 18912: a1 = a1 >> 0x20\n 18915: a4 = a4 | a3\n 18918: a4 = a4 << 0x20\n 18921: a1 = a1 | a4\n 18924: u64 [sp + 0x38] = a0\n 18927: jump @285 if a1 != 0\n      : @283 (gas: 22)\n 18931: a0 = u64 [a2 + 0x18]\n 18934: u64 [sp] = a0\n 18936: a0 = u64 [a2 + 0x10]\n 18939: u64 [sp + 0x8] = a0\n 18942: a0 = u64 [a2 + 0x8]\n 18945: u64 [sp + 0x10] = a0\n 18948: a0 = u64 [a2]\n 18950: u64 [sp + 0x18] = a0\n 18953: a0 = s0 + 0x20\n 18956: u64 [sp + 0x30] = a0\n 18959: a0 = a0 <u s0\n 18962: a1 = a5 + a0\n 18965: u64 [sp + 0x28] = a1\n 18968: a1 = a1 <u a5\n 18971: a1 = a0 if a0 == 0\n 18974: a1 = a1 + a3\n 18977: u64 [sp + 0x20] = a1\n 18980: a0 = a1 <u a3\n 18983: s1 = s1 + a0\n 18986: i32 a0 = s0 + 0\n 18988: a1 = 0x20\n 18991: ra = 246, jump @0\n      : @284 [@dyn 123] (gas: 81)\n 18997: a1 = u64 [sp]\n 18999: a1 = reverse a1\n 19001: a2 = u64 [sp + 0x8]\n 19004: a2 = reverse a2\n 19006: a3 = u64 [sp + 0x10]\n 19009: a3 = reverse a3\n 19011: a4 = u64 [sp + 0x18]\n 19014: a4 = reverse a4\n 19016: a5 = a4 >> 0x38\n 19019: u8 [a0 + 0x1f] = a5\n 19022: a5 = a4 >> 0x30\n 19025: u8 [a0 + 0x1e] = a5\n 19028: a5 = a4 >> 0x28\n 19031: u8 [a0 + 0x1d] = a5\n 19034: a5 = a4 >> 0x20\n 19037: u8 [a0 + 0x1c] = a5\n 19040: a5 = a4 >> 0x18\n 19043: u8 [a0 + 0x1b] = a5\n 19046: a5 = a4 >> 0x10\n 19049: u8 [a0 + 0x1a] = a5\n 19052: a5 = a4 >> 0x8\n 19055: u8 [a0 + 0x19] = a5\n 19058: u8 [a0 + 0x18] = a4\n 19061: u8 [a0 + 0x10] = a3\n 19064: a4 = a3 >> 0x38\n 19067: u8 [a0 + 0x17] = a4\n 19070: a4 = a3 >> 0x30\n 19073: u8 [a0 + 0x16] = a4\n 19076: a4 = a3 >> 0x28\n 19079: u8 [a0 + 0x15] = a4\n 19082: a4 = a3 >> 0x20\n 19085: u8 [a0 + 0x14] = a4\n 19088: a4 = a3 >> 0x18\n 19091: u8 [a0 + 0x13] = a4\n 19094: a4 = a3 >> 0x10\n 19097: u8 [a0 + 0x12] = a4\n 19100: a3 = a3 >> 0x8\n 19103: u8 [a0 + 0x11] = a3\n 19106: u8 [a0 + 0x8] = a2\n 19109: a3 = a2 >> 0x38\n 19112: u8 [a0 + 0xf] = a3\n 19115: a3 = a2 >> 0x30\n 19118: u8 [a0 + 0xe] = a3\n 19121: a3 = a2 >> 0x28\n 19124: u8 [a0 + 0xd] = a3\n 19127: a3 = a2 >> 0x20\n 19130: u8 [a0 + 0xc] = a3\n 19133: a3 = a2 >> 0x18\n 19136: u8 [a0 + 0xb] = a3\n 19139: a3 = a2 >> 0x10\n 19142: u8 [a0 + 0xa] = a3\n 19145: a2 = a2 >> 0x8\n 19148: u8 [a0 + 0x9] = a2\n 19151: u8 [a0] = a1\n 19153: a2 = a1 >> 0x38\n 19156: u8 [a0 + 0x7] = a2\n 19159: a2 = a1 >> 0x30\n 19162: u8 [a0 + 0x6] = a2\n 19165: a2 = a1 >> 0x28\n 19168: u8 [a0 + 0x5] = a2\n 19171: a2 = a1 >> 0x20\n 19174: u8 [a0 + 0x4] = a2\n 19177: a2 = a1 >> 0x18\n 19180: u8 [a0 + 0x3] = a2\n 19183: a2 = a1 >> 0x10\n 19186: u8 [a0 + 0x2] = a2\n 19189: a1 = a1 >> 0x8\n 19192: u8 [a0 + 0x1] = a1\n 19195: a0 = u64 [sp + 0x38]\n 19198: a1 = u64 [sp + 0x30]\n 19201: u64 [a0] = a1\n 19203: a1 = u64 [sp + 0x28]\n 19206: u64 [a0 + 0x8] = a1\n 19209: a1 = u64 [sp + 0x20]\n 19212: u64 [a0 + 0x10] = a1\n 19215: u64 [a0 + 0x18] = s1\n 19218: ra = u64 [sp + 0x50]\n 19221: s0 = u64 [sp + 0x48]\n 19224: s1 = u64 [sp + 0x40]\n 19227: sp = sp + 0x58\n 19230: ret\n      : @285 (gas: 1)\n 19232: trap\n      : @286 (gas: 8)\n 19233: a0 = u64 [sp + 0x70]\n 19236: a1 = u64 [sp + 0x78]\n 19239: a2 = u64 [sp + 0x68]\n 19242: a3 = u64 [sp + 0x60]\n 19245: a1 = a1 | a2\n 19248: a0 = a0 | a3\n 19251: a0 = a0 | a1\n 19254: jump @292 if a0 != 0\n      : @287 (gas: 2)\n 19258: a0 = i32 [0x20114]\n 19263: jump @292 if a0 <=u 35\n      : @288 (gas: 44)\n 19268: i32 a0 = sp + 0x80\n 19272: a1 = 0x4\n 19275: ecalli 3 // 'call_data_load'\n 19277: a2 = u64 [sp + 0x80]\n 19281: a0 = u64 [sp + 0x88]\n 19285: a1 = u64 [sp + 0x90]\n 19289: a3 = u64 [sp + 0x98]\n 19293: u64 [sp + 0x38] = a3\n 19296: u64 [sp + 0x30] = a1\n 19299: u64 [sp + 0x28] = a0\n 19302: a0 = sp + 0x40\n 19305: a1 = sp + 0x20\n 19308: u64 [sp + 0x20] = a2\n 19311: ra = 0xf8\n 19315: sp = sp + 0xfffffffffffffec0\n 19319: u64 [sp + 0x138] = ra\n 19323: u64 [sp + 0x130] = s0\n 19327: u64 [sp + 0x128] = s1\n 19331: s0 = sp + 0x140\n 19335: sp = sp & 0xffffffffffffffe0\n 19338: u64 [sp + 0x18] = a0\n 19341: a0 = u64 [a1]\n 19343: u64 [sp + 0x8] = a0\n 19346: a0 = u64 [a1 + 0x8]\n 19349: u64 [sp] = a0\n 19351: a0 = u64 [a1 + 0x10]\n 19354: u64 [sp + 0x10] = a0\n 19357: s1 = u64 [a1 + 0x18]\n 19360: u64 [sp + 248] = 0\n 19364: u64 [sp + 240] = 0\n 19368: u64 [sp + 232] = 0\n 19372: u64 [sp + 224] = 0x1\n 19377: u64 [sp + 280] = 0\n 19381: u64 [sp + 272] = 0\n 19385: u64 [sp + 264] = 0\n 19389: u64 [sp + 256] = 0\n 19393: u32 [sp + 288] = 0x20\n 19398: i32 a1 = sp + 0xe0\n 19402: i32 a3 = sp + 0x100\n 19406: i32 a4 = sp + 0x120\n 19410: a2 = 0xffffffffffffffff\n 19413: a0 = 0\n 19415: ecalli 7 // 'get_storage'\n 19417: jump @277\n      : @289 [@dyn 124] (gas: 11)\n 19420: a0 = u64 [sp + 0x58]\n 19423: u64 [sp] = a0\n 19425: a0 = u64 [sp + 0x50]\n 19428: u64 [sp + 0x8] = a0\n 19431: a0 = u64 [sp + 0x48]\n 19434: u64 [sp + 0x10] = a0\n 19437: a0 = u64 [sp + 0x40]\n 19440: u64 [sp + 0x18] = a0\n 19443: a0 = 0x40\n 19446: a1 = 0x20\n 19449: ra = 250, jump @0\n      : @290 [@dyn 125] (gas: 100)\n 19455: a1 = u8 [a0 + 0x11]\n 19458: a2 = u8 [a0 + 0x10]\n 19461: a3 = u8 [a0 + 0x12]\n 19464: a4 = u8 [a0 + 0x13]\n 19467: a1 = a1 << 0x8\n 19470: a1 = a1 | a2\n 19473: a3 = a3 << 0x10\n 19476: a4 = a4 << 0x18\n 19479: a3 = a3 | a4\n 19482: a1 = a1 | a3\n 19485: a2 = u8 [a0 + 0x15]\n 19488: a3 = u8 [a0 + 0x14]\n 19491: a4 = u8 [a0 + 0x16]\n 19494: a5 = u8 [a0 + 0x17]\n 19497: a2 = a2 << 0x8\n 19500: a2 = a2 | a3\n 19503: a4 = a4 << 0x10\n 19506: a5 = a5 << 0x18\n 19509: a4 = a4 | a5\n 19512: a2 = a2 | a4\n 19515: a2 = a2 << 0x20\n 19518: t0 = a2 | a1\n 19521: a2 = u8 [a0 + 0x1]\n 19524: a3 = u8 [a0]\n 19526: a4 = u8 [a0 + 0x2]\n 19529: a5 = u8 [a0 + 0x3]\n 19532: a2 = a2 << 0x8\n 19535: a2 = a2 | a3\n 19538: a4 = a4 << 0x10\n 19541: a5 = a5 << 0x18\n 19544: a4 = a4 | a5\n 19547: a2 = a2 | a4\n 19550: a3 = u8 [a0 + 0x5]\n 19553: a4 = u8 [a0 + 0x4]\n 19556: a5 = u8 [a0 + 0x6]\n 19559: s1 = u8 [a0 + 0x7]\n 19562: a3 = a3 << 0x8\n 19565: a3 = a3 | a4\n 19568: a5 = a5 << 0x10\n 19571: s1 = s1 << 0x18\n 19574: a5 = a5 | s1\n 19577: a3 = a3 | a5\n 19580: a3 = a3 << 0x20\n 19583: a2 = a2 | a3\n 19586: a3 = u8 [a0 + 0x19]\n 19589: a4 = u8 [a0 + 0x18]\n 19592: a5 = u8 [a0 + 0x1a]\n 19595: s1 = u8 [a0 + 0x1b]\n 19598: a3 = a3 << 0x8\n 19601: a3 = a3 | a4\n 19604: a5 = a5 << 0x10\n 19607: s1 = s1 << 0x18\n 19610: a5 = a5 | s1\n 19613: a3 = a3 | a5\n 19616: a4 = u8 [a0 + 0x1d]\n 19619: a5 = u8 [a0 + 0x1c]\n 19622: s1 = u8 [a0 + 0x1e]\n 19625: a1 = u8 [a0 + 0x1f]\n 19628: a4 = a4 << 0x8\n 19631: a4 = a4 | a5\n 19634: s1 = s1 << 0x10\n 19637: a1 = a1 << 0x18\n 19640: a1 = a1 | s1\n 19643: a1 = a1 | a4\n 19646: a1 = a1 << 0x20\n 19649: a3 = a3 | a1\n 19652: a1 = u8 [a0 + 0x9]\n 19655: a4 = u8 [a0 + 0x8]\n 19658: a5 = u8 [a0 + 0xa]\n 19661: s1 = u8 [a0 + 0xb]\n 19664: a1 = a1 << 0x8\n 19667: a1 = a1 | a4\n 19670: a5 = a5 << 0x10\n 19673: s1 = s1 << 0x18\n 19676: a5 = a5 | s1\n 19679: a1 = a1 | a5\n 19682: a4 = u8 [a0 + 0xd]\n 19685: a5 = u8 [a0 + 0xc]\n 19688: s1 = u8 [a0 + 0xe]\n 19691: a0 = u8 [a0 + 0xf]\n 19694: a4 = a4 << 0x8\n 19697: a4 = a4 | a5\n 19700: s1 = s1 << 0x10\n 19703: a0 = a0 << 0x18\n 19706: a0 = a0 | s1\n 19709: a0 = a0 | a4\n 19712: a0 = a0 << 0x20\n 19715: a0 = a0 | a1\n 19718: a1 = reverse a0\n 19720: a0 = reverse a3\n 19722: a2 = reverse a2\n 19724: a3 = reverse t0\n 19726: a2 = a2 | a3\n 19729: a3 = a0 | a1\n 19732: a3 = a3 | a2\n 19735: a3 = a3 >> 0x20\n 19738: a1 = a1 | a2\n 19741: a1 = a1 << 0x20\n 19744: a1 = a1 | a3\n 19747: jump @294 if a1 == 0\n      : @291 (gas: 1)\n 19750: trap\n      : @292 (gas: 3)\n 19751: a0 = 0\n 19753: a1 = 0\n 19755: ra = 252, jump @0\n      : @293 [@dyn 126] (gas: 5)\n 19761: i32 a1 = a0 + 0\n 19763: a0 = 0x1\n 19766: a2 = 0\n 19768: ecalli 12 // 'seal_return'\n 19770: fallthrough\n      : @294 (gas: 4)\n 19771: i32 s1 = a0 + 0\n 19773: a1 = 0x20\n 19776: a0 = s1\n 19778: ra = 254, jump @0\n      : @295 [@dyn 127] (gas: 71)\n 19784: a1 = u64 [sp]\n 19786: a1 = reverse a1\n 19788: a2 = u64 [sp + 0x8]\n 19791: a2 = reverse a2\n 19793: a3 = u64 [sp + 0x10]\n 19796: a3 = reverse a3\n 19798: a4 = u64 [sp + 0x18]\n 19801: a4 = reverse a4\n 19803: a5 = a4 >> 0x38\n 19806: u8 [a0 + 0x1f] = a5\n 19809: a5 = a4 >> 0x30\n 19812: u8 [a0 + 0x1e] = a5\n 19815: a5 = a4 >> 0x28\n 19818: u8 [a0 + 0x1d] = a5\n 19821: a5 = a4 >> 0x20\n 19824: u8 [a0 + 0x1c] = a5\n 19827: a5 = a4 >> 0x18\n 19830: u8 [a0 + 0x1b] = a5\n 19833: a5 = a4 >> 0x10\n 19836: u8 [a0 + 0x1a] = a5\n 19839: a5 = a4 >> 0x8\n 19842: u8 [a0 + 0x19] = a5\n 19845: u8 [a0 + 0x18] = a4\n 19848: u8 [a0 + 0x10] = a3\n 19851: a4 = a3 >> 0x38\n 19854: u8 [a0 + 0x17] = a4\n 19857: a4 = a3 >> 0x30\n 19860: u8 [a0 + 0x16] = a4\n 19863: a4 = a3 >> 0x28\n 19866: u8 [a0 + 0x15] = a4\n 19869: a4 = a3 >> 0x20\n 19872: u8 [a0 + 0x14] = a4\n 19875: a4 = a3 >> 0x18\n 19878: u8 [a0 + 0x13] = a4\n 19881: a4 = a3 >> 0x10\n 19884: u8 [a0 + 0x12] = a4\n 19887: a3 = a3 >> 0x8\n 19890: u8 [a0 + 0x11] = a3\n 19893: u8 [a0 + 0x8] = a2\n 19896: a3 = a2 >> 0x38\n 19899: u8 [a0 + 0xf] = a3\n 19902: a3 = a2 >> 0x30\n 19905: u8 [a0 + 0xe] = a3\n 19908: a3 = a2 >> 0x28\n 19911: u8 [a0 + 0xd] = a3\n 19914: a3 = a2 >> 0x20\n 19917: u8 [a0 + 0xc] = a3\n 19920: a3 = a2 >> 0x18\n 19923: u8 [a0 + 0xb] = a3\n 19926: a3 = a2 >> 0x10\n 19929: u8 [a0 + 0xa] = a3\n 19932: a2 = a2 >> 0x8\n 19935: u8 [a0 + 0x9] = a2\n 19938: u8 [a0] = a1\n 19940: a2 = a1 >> 0x38\n 19943: u8 [a0 + 0x7] = a2\n 19946: a2 = a1 >> 0x30\n 19949: u8 [a0 + 0x6] = a2\n 19952: a2 = a1 >> 0x28\n 19955: u8 [a0 + 0x5] = a2\n 19958: a2 = a1 >> 0x20\n 19961: u8 [a0 + 0x4] = a2\n 19964: a2 = a1 >> 0x18\n 19967: u8 [a0 + 0x3] = a2\n 19970: a2 = a1 >> 0x10\n 19973: u8 [a0 + 0x2] = a2\n 19976: a1 = a1 >> 0x8\n 19979: u8 [a0 + 0x1] = a1\n 19982: a1 = 0x20\n 19985: a0 = s1\n 19987: ra = 256, jump @0\n      : @296 [@dyn 128] (gas: 6)\n 19993: i32 a1 = a0 + 0\n 19995: a2 = 0x20\n 19998: a0 = 0\n 20000: ra = 0x102\n 20004: ecalli 12 // 'seal_return'\n 20006: fallthrough\n      : @297 [@dyn 129] (gas: 42)\n 20007: sp = sp + 0xfffffffffffffdc0\n 20011: u64 [sp + 0x238] = ra\n 20015: u64 [sp + 0x230] = s0\n 20019: u64 [sp + 0x228] = s1\n 20023: s0 = sp + 0x240\n 20027: sp = sp & 0xffffffffffffffe0\n 20030: s1 = u64 [a2 + 0x8]\n 20033: t2 = u64 [a1 + 0x8]\n 20036: a5 = u64 [a2]\n 20038: ra = u64 [a1]\n 20040: t0 = u64 [a2 + 0x10]\n 20043: a4 = s1 ^ t2\n 20046: a3 = s1 <u t2\n 20049: t1 = a5 <u ra\n 20052: a3 = t1 if a4 == 0\n 20055: u64 [sp + 0x98] = s1\n 20059: a4 = s1 - t2\n 20062: a4 = a4 - t1\n 20065: u64 [sp + 0x88] = a5\n 20069: a5 = a5 - ra\n 20072: a5 = a5 <u 0x60\n 20075: a5 = a5 ^ 0x1\n 20078: t1 = u64 [a1 + 0x10]\n 20081: s1 = a4 >u 0\n 20083: a5 = s1 if a4 != 0\n 20086: a4 = u64 [a2 + 0x18]\n 20089: s1 = u64 [a1 + 0x18]\n 20092: a1 = t0 - t1\n 20095: a2 = a1 - a3\n 20098: a1 = a1 <u a3\n 20101: u64 [sp + 0x90] = t0\n 20105: a3 = t0 <u t1\n 20108: u64 [sp + 0x80] = a4\n 20112: a4 = a4 - s1\n 20115: a4 = a4 - a3\n 20118: a4 = a4 - a1\n 20121: a1 = a4 >s 0\n 20123: a3 = a2 >u 0\n 20125: a3 = a1 if a4 != 0\n 20128: a2 = a2 | a4\n 20131: a5 = a3 if a2 != 0\n 20134: jump @310 if a5 == 0\n      : @298 (gas: 13)\n 20138: t0 = s1\n 20140: s1 = a0\n 20142: a0 = ra | t1\n 20145: a1 = t2 | t0\n 20148: a0 = a0 | a1\n 20151: a0 = a0 >> 0x20\n 20154: a1 = a1 | t1\n 20157: a1 = a1 << 0x20\n 20160: a0 = a0 | a1\n 20163: u64 [sp + 0xb8] = t2\n 20167: u64 [sp + 0xa8] = t1\n 20171: u64 [sp + 0xa0] = t0\n 20175: jump @309 if a0 != 0\n      : @299 (gas: 6)\n 20179: i32 a1 = ra + 0\n 20181: i32 a0 = sp + 0x200\n 20185: u64 [sp + 0x78] = a1\n 20188: u64 [sp + 0xb0] = ra\n 20192: ecalli 3 // 'call_data_load'\n 20194: fallthrough\n      : @300 (gas: 11)\n 20195: a0 = u64 [sp + 0xa8]\n 20199: a1 = u64 [sp + 0xa0]\n 20203: a1 = a1 | a0\n 20206: a0 = 0xffffffe0\n 20216: a2 = u64 [sp + 0xb0]\n 20220: a0 = a2 <u a0\n 20223: a2 = u64 [sp + 0xb8]\n 20227: a0 = 0 if a2 != 0\n 20229: u64 [sp + 0x70] = a1\n 20232: a0 = 0 if a1 != 0\n 20234: jump @309 if a0 == 0\n      : @301 (gas: 13)\n 20238: a0 = u64 [sp + 0x218]\n 20242: u64 [sp + 0x60] = a0\n 20245: a0 = u64 [sp + 0x210]\n 20249: u64 [sp + 0x50] = a0\n 20252: a0 = u64 [sp + 0x208]\n 20256: u64 [sp + 0x68] = a0\n 20259: a0 = u64 [sp + 0x200]\n 20263: u64 [sp + 0x58] = a0\n 20266: a0 = u64 [sp + 0x78]\n 20269: i32 a1 = a0 + 0x20\n 20272: i32 a0 = sp + 0x1c0\n 20276: ecalli 3 // 'call_data_load'\n 20278: fallthrough\n      : @302 (gas: 7)\n 20279: t0 = u64 [sp + 0x1d8]\n 20283: a1 = u64 [sp + 0x1d0]\n 20287: a2 = u64 [sp + 0x1c8]\n 20291: a3 = a1 | t0\n 20294: a4 = a2 <u 0x1\n 20297: a4 = 0 if a3 != 0\n 20299: jump @310 if a4 == 0\n      : @303 (gas: 35)\n 20303: a3 = u64 [sp + 0x1c0]\n 20307: a4 = u64 [sp + 0xb0]\n 20311: a4 = a4 + a3\n 20314: a3 = a4 <u a3\n 20317: a5 = u64 [sp + 0xb8]\n 20321: a5 = a5 + a2\n 20324: a5 = a5 + a3\n 20327: a0 = a5 ^ a2\n 20330: a2 = a5 <u a2\n 20333: a2 = a3 if a0 == 0\n 20336: a0 = u64 [sp + 0xa8]\n 20340: a0 = a0 + a1\n 20343: a2 = a2 + a0\n 20346: a3 = a2 <u a0\n 20349: a0 = a0 <u a1\n 20352: a1 = u64 [sp + 0xa0]\n 20356: t0 = t0 + a1\n 20359: a0 = a0 + t0\n 20362: a3 = a3 + a0\n 20365: a0 = u64 [sp + 0x88]\n 20369: u64 [sp + 0x140] = a0\n 20373: a0 = u64 [sp + 0x98]\n 20377: u64 [sp + 0x148] = a0\n 20381: u64 [sp + 0x160] = a4\n 20385: a0 = u64 [sp + 0x90]\n 20389: u64 [sp + 0x150] = a0\n 20393: a0 = u64 [sp + 0x80]\n 20397: u64 [sp + 0x158] = a0\n 20401: u64 [sp + 0x168] = a5\n 20405: u64 [sp + 0x170] = a2\n 20409: a0 = sp + 0x180\n 20413: a1 = sp + 0x160\n 20417: a2 = sp + 0x140\n 20421: u64 [sp + 0x178] = a3\n 20425: ra = 260, jump @174\n      : @304 [@dyn 130] (gas: 8)\n 20431: a0 = 0xffffffc0\n 20441: a1 = u64 [sp + 0xb0]\n 20445: a0 = a1 <u a0\n 20448: a1 = u64 [sp + 0xb8]\n 20452: a0 = 0 if a1 != 0\n 20454: a1 = u64 [sp + 0x70]\n 20457: a0 = 0 if a1 != 0\n 20459: jump @309 if a0 == 0\n      : @305 (gas: 21)\n 20463: a0 = u64 [sp + 0x1b8]\n 20467: u64 [sp + 0x38] = a0\n 20470: a0 = u64 [sp + 0x1b0]\n 20474: u64 [sp + 0x18] = a0\n 20477: a0 = u64 [sp + 0x1a8]\n 20481: u64 [sp + 0x40] = a0\n 20484: a0 = u64 [sp + 0x1a0]\n 20488: u64 [sp + 0x20] = a0\n 20491: a0 = u64 [sp + 0x198]\n 20495: u64 [sp + 0x48] = a0\n 20498: a0 = u64 [sp + 0x190]\n 20502: u64 [sp + 0x28] = a0\n 20505: a0 = u64 [sp + 0x188]\n 20509: u64 [sp + 0x70] = a0\n 20512: a0 = u64 [sp + 0x180]\n 20516: u64 [sp + 0x30] = a0\n 20519: a0 = u64 [sp + 0x78]\n 20522: i32 a1 = a0 + 0x40\n 20525: i32 a0 = sp + 0x1e0\n 20529: ecalli 3 // 'call_data_load'\n 20531: fallthrough\n      : @306 (gas: 7)\n 20532: t0 = u64 [sp + 0x1f8]\n 20536: a1 = u64 [sp + 0x1f0]\n 20540: a2 = u64 [sp + 0x1e8]\n 20544: a3 = a1 | t0\n 20547: a4 = a2 <u 0x1\n 20550: a4 = 0 if a3 != 0\n 20552: jump @310 if a4 == 0\n      : @307 (gas: 35)\n 20556: a3 = u64 [sp + 0x1e0]\n 20560: a4 = u64 [sp + 0xb0]\n 20564: a4 = a4 + a3\n 20567: a3 = a4 <u a3\n 20570: a5 = u64 [sp + 0xb8]\n 20574: a5 = a5 + a2\n 20577: a5 = a5 + a3\n 20580: a0 = a5 ^ a2\n 20583: a2 = a5 <u a2\n 20586: a2 = a3 if a0 == 0\n 20589: a0 = u64 [sp + 0xa8]\n 20593: a0 = a0 + a1\n 20596: a2 = a2 + a0\n 20599: a3 = a2 <u a0\n 20602: a0 = a0 <u a1\n 20605: a1 = u64 [sp + 0xa0]\n 20609: t0 = t0 + a1\n 20612: a0 = a0 + t0\n 20615: a3 = a3 + a0\n 20618: a0 = u64 [sp + 0x88]\n 20622: u64 [sp + 0xc0] = a0\n 20626: a0 = u64 [sp + 0x98]\n 20630: u64 [sp + 0xc8] = a0\n 20634: u64 [sp + 0xe0] = a4\n 20638: a0 = u64 [sp + 0x90]\n 20642: u64 [sp + 0xd0] = a0\n 20646: a0 = u64 [sp + 0x80]\n 20650: u64 [sp + 0xd8] = a0\n 20654: u64 [sp + 0xe8] = a5\n 20658: u64 [sp + 0xf0] = a2\n 20662: a0 = sp + 0x100\n 20666: a1 = sp + 0xe0\n 20670: a2 = sp + 0xc0\n 20674: u64 [sp + 0xf8] = a3\n 20678: ra = 262, jump @174\n      : @308 [@dyn 131] (gas: 46)\n 20684: t0 = u64 [sp + 0x108]\n 20688: t1 = u64 [sp + 0x100]\n 20692: a2 = u64 [sp + 0x118]\n 20696: a3 = u64 [sp + 0x110]\n 20700: a4 = u64 [sp + 0x130]\n 20704: a5 = u64 [sp + 0x138]\n 20708: a0 = u64 [sp + 0x120]\n 20712: a1 = u64 [sp + 0x128]\n 20716: u64 [s1 + 0x90] = a4\n 20720: u64 [s1 + 0x98] = a5\n 20724: u64 [s1 + 0x80] = a0\n 20728: u64 [s1 + 0x88] = a1\n 20732: u64 [s1 + 0x70] = a3\n 20735: u64 [s1 + 0x78] = a2\n 20738: u64 [s1 + 0x60] = t1\n 20741: u64 [s1 + 0x68] = t0\n 20744: a0 = u64 [sp + 0x18]\n 20747: u64 [s1 + 0x50] = a0\n 20750: a0 = u64 [sp + 0x38]\n 20753: u64 [s1 + 0x58] = a0\n 20756: a0 = u64 [sp + 0x20]\n 20759: u64 [s1 + 0x40] = a0\n 20762: a0 = u64 [sp + 0x40]\n 20765: u64 [s1 + 0x48] = a0\n 20768: a0 = u64 [sp + 0x28]\n 20771: u64 [s1 + 0x30] = a0\n 20774: a0 = u64 [sp + 0x48]\n 20777: u64 [s1 + 0x38] = a0\n 20780: a0 = u64 [sp + 0x30]\n 20783: u64 [s1 + 0x20] = a0\n 20786: a0 = u64 [sp + 0x70]\n 20789: u64 [s1 + 0x28] = a0\n 20792: a0 = u64 [sp + 0x50]\n 20795: u64 [s1 + 0x10] = a0\n 20798: a0 = u64 [sp + 0x60]\n 20801: u64 [s1 + 0x18] = a0\n 20804: a0 = u64 [sp + 0x58]\n 20807: u64 [s1] = a0\n 20809: a0 = u64 [sp + 0x68]\n 20812: u64 [s1 + 0x8] = a0\n 20815: sp = s0 + 0xfffffffffffffdc0\n 20819: ra = u64 [sp + 0x238]\n 20823: s0 = u64 [sp + 0x230]\n 20827: s1 = u64 [sp + 0x228]\n 20831: sp = sp + 0x240\n 20835: ret\n      : @309 (gas: 1)\n 20837: trap\n      : @310 (gas: 3)\n 20838: a0 = 0\n 20840: a1 = 0\n 20842: ra = 264, jump @0\n      : @311 [@dyn 132] (gas: 6)\n 20848: i32 a1 = a0 + 0\n 20850: a0 = 0x1\n 20853: a2 = 0\n 20855: ra = 0x10a\n 20859: ecalli 12 // 'seal_return'\n 20861: fallthrough\n      : @312 [@dyn 133] (gas: 13)\n 20862: sp = sp + 0xfffffffffffffde0\n 20866: u64 [sp + 0x218] = ra\n 20870: u64 [sp + 0x210] = s0\n 20874: u64 [sp + 0x208] = s1\n 20878: s0 = sp + 0x220\n 20882: sp = sp & 0xffffffffffffffe0\n 20885: u64 [sp + 504] = 0\n 20889: u64 [sp + 496] = 0\n 20893: u64 [sp + 488] = 0\n 20897: u64 [sp + 480] = 0\n 20901: i32 a0 = sp + 0x1e0\n 20905: ecalli 15 // 'value_transferred'\n 20907: fallthrough\n      : @313 (gas: 8)\n 20908: a0 = u64 [sp + 0x1f0]\n 20912: a1 = u64 [sp + 0x1f8]\n 20916: a2 = u64 [sp + 0x1e8]\n 20920: a3 = u64 [sp + 0x1e0]\n 20924: a1 = a1 | a2\n 20927: a0 = a0 | a3\n 20930: a0 = a0 | a1\n 20933: jump @319 if a0 != 0\n      : @314 (gas: 13)\n 20937: a0 = u32 [0x20114]\n 20942: u64 [sp + 280] = 0\n 20946: u64 [sp + 272] = 0\n 20950: u64 [sp + 264] = 0\n 20954: u64 [sp + 0x100] = a0\n 20958: u64 [sp + 312] = 0\n 20962: u64 [sp + 304] = 0\n 20966: u64 [sp + 288] = 0x4\n 20971: a0 = sp + 0x140\n 20975: a1 = sp + 0x120\n 20979: a2 = sp + 0x100\n 20983: u64 [sp + 296] = 0\n 20987: ra = 268, jump @297\n      : @315 [@dyn 134] (gas: 64)\n 20993: a0 = u64 [sp + 0x140]\n 20997: u64 [sp + 0x58] = a0\n 21000: a0 = u64 [sp + 0x148]\n 21004: u64 [sp + 0x50] = a0\n 21007: a0 = u64 [sp + 0x150]\n 21011: u64 [sp + 0x48] = a0\n 21014: a0 = u64 [sp + 0x158]\n 21018: u64 [sp + 0x40] = a0\n 21021: a0 = u64 [sp + 0x160]\n 21025: u64 [sp + 0x38] = a0\n 21028: a0 = u64 [sp + 0x168]\n 21032: u64 [sp + 0x30] = a0\n 21035: a0 = u64 [sp + 0x170]\n 21039: u64 [sp + 0x28] = a0\n 21042: a0 = u64 [sp + 0x178]\n 21046: u64 [sp + 0x20] = a0\n 21049: a0 = u64 [sp + 0x180]\n 21053: u64 [sp + 0x18] = a0\n 21056: ra = u64 [sp + 0x188]\n 21060: s1 = u64 [sp + 0x190]\n 21064: t2 = u64 [sp + 0x198]\n 21068: t1 = u64 [sp + 0x1a0]\n 21072: t0 = u64 [sp + 0x1a8]\n 21076: a5 = u64 [sp + 0x1b0]\n 21080: a4 = u64 [sp + 0x1b8]\n 21084: a3 = u64 [sp + 0x1c0]\n 21088: a2 = u64 [sp + 0x1c8]\n 21092: a1 = u64 [sp + 0x1d0]\n 21096: a0 = u64 [sp + 0x1d8]\n 21100: u64 [sp + 0x78] = a0\n 21103: u64 [sp + 0x70] = a1\n 21106: u64 [sp + 0x68] = a2\n 21109: u64 [sp + 0x60] = a3\n 21112: u64 [sp + 0x98] = a4\n 21116: u64 [sp + 0x90] = a5\n 21120: u64 [sp + 0x88] = t0\n 21124: u64 [sp + 0x80] = t1\n 21128: u64 [sp + 0xb8] = t2\n 21132: u64 [sp + 0xb0] = s1\n 21136: u64 [sp + 0xa8] = ra\n 21140: a0 = u64 [sp + 0x18]\n 21143: u64 [sp + 0xa0] = a0\n 21147: a0 = u64 [sp + 0x20]\n 21150: u64 [sp + 0xd8] = a0\n 21154: a0 = u64 [sp + 0x28]\n 21157: u64 [sp + 0xd0] = a0\n 21161: a0 = u64 [sp + 0x30]\n 21164: u64 [sp + 0xc8] = a0\n 21168: a0 = u64 [sp + 0x38]\n 21171: u64 [sp + 0xc0] = a0\n 21175: a0 = u64 [sp + 0x40]\n 21178: u64 [sp + 0xf8] = a0\n 21182: a0 = u64 [sp + 0x48]\n 21185: u64 [sp + 0xf0] = a0\n 21189: a0 = u64 [sp + 0x50]\n 21192: u64 [sp + 0xe8] = a0\n 21196: a0 = sp + 0xe0\n 21200: a1 = sp + 0xc0\n 21204: a2 = sp + 0xa0\n 21208: a3 = sp + 0x80\n 21212: a4 = sp + 0x60\n 21215: a5 = u64 [sp + 0x58]\n 21218: u64 [sp + 0xe0] = a5\n 21222: ra = 270, jump @736\n      : @316 [@dyn 135] (gas: 3)\n 21229: a0 = 0x40\n 21232: a1 = 0x20\n 21235: ra = 272, jump @0\n      : @317 [@dyn 136] (gas: 100)\n 21241: a1 = u8 [a0 + 0x11]\n 21244: a2 = u8 [a0 + 0x10]\n 21247: a3 = u8 [a0 + 0x12]\n 21250: a4 = u8 [a0 + 0x13]\n 21253: a1 = a1 << 0x8\n 21256: a1 = a1 | a2\n 21259: a3 = a3 << 0x10\n 21262: a4 = a4 << 0x18\n 21265: a3 = a3 | a4\n 21268: a1 = a1 | a3\n 21271: a2 = u8 [a0 + 0x15]\n 21274: a3 = u8 [a0 + 0x14]\n 21277: a4 = u8 [a0 + 0x16]\n 21280: a5 = u8 [a0 + 0x17]\n 21283: a2 = a2 << 0x8\n 21286: a2 = a2 | a3\n 21289: a4 = a4 << 0x10\n 21292: a5 = a5 << 0x18\n 21295: a4 = a4 | a5\n 21298: a2 = a2 | a4\n 21301: a2 = a2 << 0x20\n 21304: t0 = a2 | a1\n 21307: a2 = u8 [a0 + 0x1]\n 21310: a3 = u8 [a0]\n 21312: a4 = u8 [a0 + 0x2]\n 21315: a5 = u8 [a0 + 0x3]\n 21318: a2 = a2 << 0x8\n 21321: a2 = a2 | a3\n 21324: a4 = a4 << 0x10\n 21327: a5 = a5 << 0x18\n 21330: a4 = a4 | a5\n 21333: a2 = a2 | a4\n 21336: a3 = u8 [a0 + 0x5]\n 21339: a4 = u8 [a0 + 0x4]\n 21342: a5 = u8 [a0 + 0x6]\n 21345: s1 = u8 [a0 + 0x7]\n 21348: a3 = a3 << 0x8\n 21351: a3 = a3 | a4\n 21354: a5 = a5 << 0x10\n 21357: s1 = s1 << 0x18\n 21360: a5 = a5 | s1\n 21363: a3 = a3 | a5\n 21366: a3 = a3 << 0x20\n 21369: a2 = a2 | a3\n 21372: a3 = u8 [a0 + 0x19]\n 21375: a4 = u8 [a0 + 0x18]\n 21378: a5 = u8 [a0 + 0x1a]\n 21381: s1 = u8 [a0 + 0x1b]\n 21384: a3 = a3 << 0x8\n 21387: a3 = a3 | a4\n 21390: a5 = a5 << 0x10\n 21393: s1 = s1 << 0x18\n 21396: a5 = a5 | s1\n 21399: a3 = a3 | a5\n 21402: a4 = u8 [a0 + 0x1d]\n 21405: a5 = u8 [a0 + 0x1c]\n 21408: s1 = u8 [a0 + 0x1e]\n 21411: a1 = u8 [a0 + 0x1f]\n 21414: a4 = a4 << 0x8\n 21417: a4 = a4 | a5\n 21420: s1 = s1 << 0x10\n 21423: a1 = a1 << 0x18\n 21426: a1 = a1 | s1\n 21429: a1 = a1 | a4\n 21432: a1 = a1 << 0x20\n 21435: a3 = a3 | a1\n 21438: a1 = u8 [a0 + 0x9]\n 21441: a4 = u8 [a0 + 0x8]\n 21444: a5 = u8 [a0 + 0xa]\n 21447: s1 = u8 [a0 + 0xb]\n 21450: a1 = a1 << 0x8\n 21453: a1 = a1 | a4\n 21456: a5 = a5 << 0x10\n 21459: s1 = s1 << 0x18\n 21462: a5 = a5 | s1\n 21465: a1 = a1 | a5\n 21468: a4 = u8 [a0 + 0xd]\n 21471: a5 = u8 [a0 + 0xc]\n 21474: s1 = u8 [a0 + 0xe]\n 21477: a0 = u8 [a0 + 0xf]\n 21480: a4 = a4 << 0x8\n 21483: a4 = a4 | a5\n 21486: s1 = s1 << 0x10\n 21489: a0 = a0 << 0x18\n 21492: a0 = a0 | s1\n 21495: a0 = a0 | a4\n 21498: a0 = a0 << 0x20\n 21501: a0 = a0 | a1\n 21504: a1 = reverse a0\n 21506: a0 = reverse a3\n 21508: a2 = reverse a2\n 21510: a3 = reverse t0\n 21512: a2 = a2 | a3\n 21515: a3 = a0 | a1\n 21518: a3 = a3 | a2\n 21521: a3 = a3 >> 0x20\n 21524: a1 = a1 | a2\n 21527: a1 = a1 << 0x20\n 21530: a1 = a1 | a3\n 21533: jump @321 if a1 == 0\n      : @318 (gas: 1)\n 21536: trap\n      : @319 (gas: 3)\n 21537: a0 = 0\n 21539: a1 = 0\n 21541: ra = 274, jump @0\n      : @320 [@dyn 137] (gas: 7)\n 21547: i32 a1 = a0 + 0\n 21549: a0 = 0x1\n 21552: a2 = 0\n 21554: ecalli 12 // 'seal_return'\n 21556: i32 a0 = a0 + 0\n 21558: ra = 0x114\n 21562: jump @0\n      : @321 (gas: 2)\n 21565: i32 a0 = a0 + 0\n 21567: ra = 276, jump @0\n      : @322 [@dyn 138] (gas: 6)\n 21573: i32 a1 = a0 + 0\n 21575: a0 = 0\n 21577: a2 = 0\n 21579: ra = 0x116\n 21583: ecalli 12 // 'seal_return'\n 21585: fallthrough\n      : @323 [@dyn 139] (gas: 17)\n 21586: sp = sp + 0xffffffffffffff80\n 21589: u64 [sp + 0x78] = ra\n 21592: u64 [sp + 0x70] = s0\n 21595: u64 [sp + 0x68] = s1\n 21598: s0 = sp + 0x80\n 21602: sp = sp & 0xffffffffffffffe0\n 21605: a2 = u64 [a1]\n 21607: u64 [sp + 0x10] = a2\n 21610: a2 = u64 [a1 + 0x8]\n 21613: u64 [sp + 0x8] = a2\n 21616: a2 = u64 [a1 + 0x10]\n 21619: u64 [sp] = a2\n 21621: s1 = u64 [a1 + 0x18]\n 21624: u64 [sp + 0x18] = a0\n 21627: a1 = 0x20\n 21630: a0 = 0\n 21632: ra = 280, jump @0\n      : @324 [@dyn 140] (gas: 70)\n 21638: a1 = reverse s1\n 21640: a2 = u64 [sp]\n 21642: a2 = reverse a2\n 21644: a3 = u64 [sp + 0x8]\n 21647: a3 = reverse a3\n 21649: a4 = u64 [sp + 0x10]\n 21652: a4 = reverse a4\n 21654: a5 = a4 >> 0x38\n 21657: u8 [a0 + 0x1f] = a5\n 21660: a5 = a4 >> 0x30\n 21663: u8 [a0 + 0x1e] = a5\n 21666: a5 = a4 >> 0x28\n 21669: u8 [a0 + 0x1d] = a5\n 21672: a5 = a4 >> 0x20\n 21675: u8 [a0 + 0x1c] = a5\n 21678: a5 = a4 >> 0x18\n 21681: u8 [a0 + 0x1b] = a5\n 21684: a5 = a4 >> 0x10\n 21687: u8 [a0 + 0x1a] = a5\n 21690: a5 = a4 >> 0x8\n 21693: u8 [a0 + 0x19] = a5\n 21696: u8 [a0 + 0x18] = a4\n 21699: a4 = a3 >> 0x38\n 21702: u8 [a0 + 0x17] = a4\n 21705: a4 = a3 >> 0x30\n 21708: u8 [a0 + 0x16] = a4\n 21711: a4 = a3 >> 0x28\n 21714: u8 [a0 + 0x15] = a4\n 21717: a4 = a3 >> 0x20\n 21720: u8 [a0 + 0x14] = a4\n 21723: a4 = a3 >> 0x18\n 21726: u8 [a0 + 0x13] = a4\n 21729: a4 = a3 >> 0x10\n 21732: u8 [a0 + 0x12] = a4\n 21735: a4 = a3 >> 0x8\n 21738: u8 [a0 + 0x11] = a4\n 21741: u8 [a0 + 0x10] = a3\n 21744: a3 = a2 >> 0x38\n 21747: u8 [a0 + 0xf] = a3\n 21750: a3 = a2 >> 0x30\n 21753: u8 [a0 + 0xe] = a3\n 21756: a3 = a2 >> 0x28\n 21759: u8 [a0 + 0xd] = a3\n 21762: a3 = a2 >> 0x20\n 21765: u8 [a0 + 0xc] = a3\n 21768: a3 = a2 >> 0x18\n 21771: u8 [a0 + 0xb] = a3\n 21774: a3 = a2 >> 0x10\n 21777: u8 [a0 + 0xa] = a3\n 21780: a3 = a2 >> 0x8\n 21783: u8 [a0 + 0x9] = a3\n 21786: u8 [a0 + 0x8] = a2\n 21789: a2 = a1 >> 0x38\n 21792: u8 [a0 + 0x7] = a2\n 21795: a2 = a1 >> 0x30\n 21798: u8 [a0 + 0x6] = a2\n 21801: a2 = a1 >> 0x28\n 21804: u8 [a0 + 0x5] = a2\n 21807: a2 = a1 >> 0x20\n 21810: u8 [a0 + 0x4] = a2\n 21813: a2 = a1 >> 0x18\n 21816: u8 [a0 + 0x3] = a2\n 21819: a2 = a1 >> 0x10\n 21822: u8 [a0 + 0x2] = a2\n 21825: a2 = a1 >> 0x8\n 21828: u8 [a0 + 0x1] = a2\n 21831: u8 [a0] = a1\n 21833: a0 = 0x20\n 21836: a1 = 0x20\n 21839: ra = 282, jump @0\n      : @325 [@dyn 141] (gas: 35)\n 21845: u8 [a0 + 31] = 0x2\n 21849: u8 [a0 + 30] = 0\n 21852: u8 [a0 + 29] = 0\n 21855: u8 [a0 + 28] = 0\n 21858: u8 [a0 + 27] = 0\n 21861: u8 [a0 + 26] = 0\n 21864: u8 [a0 + 25] = 0\n 21867: u8 [a0 + 24] = 0\n 21870: u8 [a0 + 23] = 0\n 21873: u8 [a0 + 22] = 0\n 21876: u8 [a0 + 21] = 0\n 21879: u8 [a0 + 20] = 0\n 21882: u8 [a0 + 19] = 0\n 21885: u8 [a0 + 18] = 0\n 21888: u8 [a0 + 17] = 0\n 21891: u8 [a0 + 16] = 0\n 21894: u8 [a0 + 15] = 0\n 21897: u8 [a0 + 14] = 0\n 21900: u8 [a0 + 13] = 0\n 21903: u8 [a0 + 12] = 0\n 21906: u8 [a0 + 11] = 0\n 21909: u8 [a0 + 10] = 0\n 21912: u8 [a0 + 9] = 0\n 21915: u8 [a0 + 8] = 0\n 21918: u8 [a0 + 7] = 0\n 21921: u8 [a0 + 6] = 0\n 21924: u8 [a0 + 5] = 0\n 21927: u8 [a0 + 4] = 0\n 21930: u8 [a0 + 3] = 0\n 21933: u8 [a0 + 2] = 0\n 21936: u8 [a0 + 1] = 0\n 21939: u8 [a0 + 0] = 0\n 21941: a1 = 0x40\n 21944: a0 = 0\n 21946: ra = 284, jump @0\n      : @326 [@dyn 142] (gas: 42)\n 21952: i32 a0 = a0 + 0\n 21954: i32 a2 = sp + 0x40\n 21957: a1 = 0x40\n 21960: ecalli 8 // 'hash_keccak_256'\n 21962: a0 = u64 [sp + 0x58]\n 21965: a1 = u64 [sp + 0x50]\n 21968: a2 = u64 [sp + 0x48]\n 21971: a3 = u64 [sp + 0x40]\n 21974: a0 = reverse a0\n 21976: a1 = reverse a1\n 21978: a2 = reverse a2\n 21980: a3 = reverse a3\n 21982: u64 [sp + 0x38] = a3\n 21985: u64 [sp + 0x30] = a2\n 21988: u64 [sp + 0x28] = a1\n 21991: u64 [sp + 0x20] = a0\n 21994: u64 [sp + 88] = 0\n 21997: u64 [sp + 80] = 0\n 22000: u64 [sp + 72] = 0\n 22003: u64 [sp + 64] = 0\n 22006: u32 [sp + 96] = 0x20\n 22010: i32 a1 = sp + 0x20\n 22013: i32 a3 = sp + 0x40\n 22016: i32 a4 = sp + 0x60\n 22019: a2 = 0xffffffffffffffff\n 22022: a0 = 0\n 22024: ecalli 7 // 'get_storage'\n 22026: a0 = u64 [sp + 0x58]\n 22029: a1 = u64 [sp + 0x50]\n 22032: a2 = u64 [sp + 0x48]\n 22035: a3 = u64 [sp + 0x40]\n 22038: a4 = u64 [sp + 0x18]\n 22041: u64 [a4 + 0x18] = a0\n 22044: u64 [a4 + 0x10] = a1\n 22047: u64 [a4 + 0x8] = a2\n 22050: u64 [a4] = a3\n 22052: sp = s0 + 0xffffffffffffff80\n 22055: ra = u64 [sp + 0x78]\n 22058: s0 = u64 [sp + 0x70]\n 22061: s1 = u64 [sp + 0x68]\n 22064: sp = sp + 0x80\n 22068: ret\n      : @327 (gas: 8)\n 22070: a0 = u64 [sp + 0x30]\n 22073: a1 = u64 [sp + 0x38]\n 22076: a2 = u64 [sp + 0x28]\n 22079: a3 = u64 [sp + 0x20]\n 22082: a1 = a1 | a2\n 22085: a0 = a0 | a3\n 22088: a0 = a0 | a1\n 22091: jump @335 if a0 != 0\n      : @328 (gas: 2)\n 22095: a0 = i32 [0x20114]\n 22100: jump @335 if a0 <=u 35\n      : @329 (gas: 13)\n 22105: i32 a0 = sp + 0x60\n 22108: a1 = 0x4\n 22111: ecalli 3 // 'call_data_load'\n 22113: a0 = u64 [sp + 0x60]\n 22116: u64 [sp + 0x18] = a0\n 22119: a0 = u64 [sp + 0x68]\n 22122: u64 [sp + 0x10] = a0\n 22125: a0 = u64 [sp + 0x70]\n 22128: u64 [sp + 0x8] = a0\n 22131: s1 = u64 [sp + 0x78]\n 22134: a1 = 0x20\n 22137: a0 = 0\n 22139: ra = 286, jump @0\n      : @330 [@dyn 143] (gas: 70)\n 22145: a1 = reverse s1\n 22147: a2 = u64 [sp + 0x8]\n 22150: a2 = reverse a2\n 22152: a3 = u64 [sp + 0x10]\n 22155: a3 = reverse a3\n 22157: a4 = u64 [sp + 0x18]\n 22160: a4 = reverse a4\n 22162: a5 = a4 >> 0x38\n 22165: u8 [a0 + 0x1f] = a5\n 22168: a5 = a4 >> 0x30\n 22171: u8 [a0 + 0x1e] = a5\n 22174: a5 = a4 >> 0x28\n 22177: u8 [a0 + 0x1d] = a5\n 22180: a5 = a4 >> 0x20\n 22183: u8 [a0 + 0x1c] = a5\n 22186: a5 = a4 >> 0x18\n 22189: u8 [a0 + 0x1b] = a5\n 22192: a5 = a4 >> 0x10\n 22195: u8 [a0 + 0x1a] = a5\n 22198: a5 = a4 >> 0x8\n 22201: u8 [a0 + 0x19] = a5\n 22204: u8 [a0 + 0x18] = a4\n 22207: a4 = a3 >> 0x38\n 22210: u8 [a0 + 0x17] = a4\n 22213: a4 = a3 >> 0x30\n 22216: u8 [a0 + 0x16] = a4\n 22219: a4 = a3 >> 0x28\n 22222: u8 [a0 + 0x15] = a4\n 22225: a4 = a3 >> 0x20\n 22228: u8 [a0 + 0x14] = a4\n 22231: a4 = a3 >> 0x18\n 22234: u8 [a0 + 0x13] = a4\n 22237: a4 = a3 >> 0x10\n 22240: u8 [a0 + 0x12] = a4\n 22243: a4 = a3 >> 0x8\n 22246: u8 [a0 + 0x11] = a4\n 22249: u8 [a0 + 0x10] = a3\n 22252: a3 = a2 >> 0x38\n 22255: u8 [a0 + 0xf] = a3\n 22258: a3 = a2 >> 0x30\n 22261: u8 [a0 + 0xe] = a3\n 22264: a3 = a2 >> 0x28\n 22267: u8 [a0 + 0xd] = a3\n 22270: a3 = a2 >> 0x20\n 22273: u8 [a0 + 0xc] = a3\n 22276: a3 = a2 >> 0x18\n 22279: u8 [a0 + 0xb] = a3\n 22282: a3 = a2 >> 0x10\n 22285: u8 [a0 + 0xa] = a3\n 22288: a3 = a2 >> 0x8\n 22291: u8 [a0 + 0x9] = a3\n 22294: u8 [a0 + 0x8] = a2\n 22297: a2 = a1 >> 0x38\n 22300: u8 [a0 + 0x7] = a2\n 22303: a2 = a1 >> 0x30\n 22306: u8 [a0 + 0x6] = a2\n 22309: a2 = a1 >> 0x28\n 22312: u8 [a0 + 0x5] = a2\n 22315: a2 = a1 >> 0x20\n 22318: u8 [a0 + 0x4] = a2\n 22321: a2 = a1 >> 0x18\n 22324: u8 [a0 + 0x3] = a2\n 22327: a2 = a1 >> 0x10\n 22330: u8 [a0 + 0x2] = a2\n 22333: a2 = a1 >> 0x8\n 22336: u8 [a0 + 0x1] = a2\n 22339: u8 [a0] = a1\n 22341: a0 = 0x20\n 22344: a1 = 0x20\n 22347: ra = 288, jump @0\n      : @331 [@dyn 144] (gas: 35)\n 22353: u8 [a0 + 31] = 0x2\n 22357: u8 [a0 + 30] = 0\n 22360: u8 [a0 + 29] = 0\n 22363: u8 [a0 + 28] = 0\n 22366: u8 [a0 + 27] = 0\n 22369: u8 [a0 + 26] = 0\n 22372: u8 [a0 + 25] = 0\n 22375: u8 [a0 + 24] = 0\n 22378: u8 [a0 + 23] = 0\n 22381: u8 [a0 + 22] = 0\n 22384: u8 [a0 + 21] = 0\n 22387: u8 [a0 + 20] = 0\n 22390: u8 [a0 + 19] = 0\n 22393: u8 [a0 + 18] = 0\n 22396: u8 [a0 + 17] = 0\n 22399: u8 [a0 + 16] = 0\n 22402: u8 [a0 + 15] = 0\n 22405: u8 [a0 + 14] = 0\n 22408: u8 [a0 + 13] = 0\n 22411: u8 [a0 + 12] = 0\n 22414: u8 [a0 + 11] = 0\n 22417: u8 [a0 + 10] = 0\n 22420: u8 [a0 + 9] = 0\n 22423: u8 [a0 + 8] = 0\n 22426: u8 [a0 + 7] = 0\n 22429: u8 [a0 + 6] = 0\n 22432: u8 [a0 + 5] = 0\n 22435: u8 [a0 + 4] = 0\n 22438: u8 [a0 + 3] = 0\n 22441: u8 [a0 + 2] = 0\n 22444: u8 [a0 + 1] = 0\n 22447: u8 [a0 + 0] = 0\n 22449: a1 = 0x40\n 22452: a0 = 0\n 22454: ra = 290, jump @0\n      : @332 [@dyn 145] (gas: 38)\n 22460: i32 a0 = a0 + 0\n 22462: i32 a2 = sp + 0x60\n 22465: a1 = 0x40\n 22468: ecalli 8 // 'hash_keccak_256'\n 22470: a0 = u64 [sp + 0x78]\n 22473: a1 = u64 [sp + 0x70]\n 22476: a2 = u64 [sp + 0x68]\n 22479: a3 = u64 [sp + 0x60]\n 22482: a0 = reverse a0\n 22484: a1 = reverse a1\n 22486: a2 = reverse a2\n 22488: a3 = reverse a3\n 22490: u64 [sp + 0x58] = a3\n 22493: u64 [sp + 0x50] = a2\n 22496: u64 [sp + 0x48] = a1\n 22499: u64 [sp + 0x40] = a0\n 22502: u64 [sp + 120] = 0\n 22505: u64 [sp + 112] = 0\n 22508: u64 [sp + 104] = 0\n 22511: u64 [sp + 96] = 0\n 22514: u32 [sp + 128] = 0x20\n 22519: i32 a1 = sp + 0x40\n 22522: i32 a3 = sp + 0x60\n 22525: i32 a4 = sp + 0x80\n 22529: a2 = 0xffffffffffffffff\n 22532: a0 = 0\n 22534: ecalli 7 // 'get_storage'\n 22536: a0 = u64 [sp + 0x78]\n 22539: u64 [sp] = a0\n 22541: a0 = u64 [sp + 0x70]\n 22544: u64 [sp + 0x8] = a0\n 22547: a0 = u64 [sp + 0x68]\n 22550: u64 [sp + 0x10] = a0\n 22553: a0 = u64 [sp + 0x60]\n 22556: u64 [sp + 0x18] = a0\n 22559: a0 = 0x40\n 22562: a1 = 0x20\n 22565: ra = 292, jump @0\n      : @333 [@dyn 146] (gas: 100)\n 22571: a1 = u8 [a0 + 0x11]\n 22574: a2 = u8 [a0 + 0x10]\n 22577: a3 = u8 [a0 + 0x12]\n 22580: a4 = u8 [a0 + 0x13]\n 22583: a1 = a1 << 0x8\n 22586: a1 = a1 | a2\n 22589: a3 = a3 << 0x10\n 22592: a4 = a4 << 0x18\n 22595: a3 = a3 | a4\n 22598: a1 = a1 | a3\n 22601: a2 = u8 [a0 + 0x15]\n 22604: a3 = u8 [a0 + 0x14]\n 22607: a4 = u8 [a0 + 0x16]\n 22610: a5 = u8 [a0 + 0x17]\n 22613: a2 = a2 << 0x8\n 22616: a2 = a2 | a3\n 22619: a4 = a4 << 0x10\n 22622: a5 = a5 << 0x18\n 22625: a4 = a4 | a5\n 22628: a2 = a2 | a4\n 22631: a2 = a2 << 0x20\n 22634: t0 = a2 | a1\n 22637: a2 = u8 [a0 + 0x1]\n 22640: a3 = u8 [a0]\n 22642: a4 = u8 [a0 + 0x2]\n 22645: a5 = u8 [a0 + 0x3]\n 22648: a2 = a2 << 0x8\n 22651: a2 = a2 | a3\n 22654: a4 = a4 << 0x10\n 22657: a5 = a5 << 0x18\n 22660: a4 = a4 | a5\n 22663: a2 = a2 | a4\n 22666: a3 = u8 [a0 + 0x5]\n 22669: a4 = u8 [a0 + 0x4]\n 22672: a5 = u8 [a0 + 0x6]\n 22675: s1 = u8 [a0 + 0x7]\n 22678: a3 = a3 << 0x8\n 22681: a3 = a3 | a4\n 22684: a5 = a5 << 0x10\n 22687: s1 = s1 << 0x18\n 22690: a5 = a5 | s1\n 22693: a3 = a3 | a5\n 22696: a3 = a3 << 0x20\n 22699: a2 = a2 | a3\n 22702: a3 = u8 [a0 + 0x19]\n 22705: a4 = u8 [a0 + 0x18]\n 22708: a5 = u8 [a0 + 0x1a]\n 22711: s1 = u8 [a0 + 0x1b]\n 22714: a3 = a3 << 0x8\n 22717: a3 = a3 | a4\n 22720: a5 = a5 << 0x10\n 22723: s1 = s1 << 0x18\n 22726: a5 = a5 | s1\n 22729: a3 = a3 | a5\n 22732: a4 = u8 [a0 + 0x1d]\n 22735: a5 = u8 [a0 + 0x1c]\n 22738: s1 = u8 [a0 + 0x1e]\n 22741: a1 = u8 [a0 + 0x1f]\n 22744: a4 = a4 << 0x8\n 22747: a4 = a4 | a5\n 22750: s1 = s1 << 0x10\n 22753: a1 = a1 << 0x18\n 22756: a1 = a1 | s1\n 22759: a1 = a1 | a4\n 22762: a1 = a1 << 0x20\n 22765: a3 = a3 | a1\n 22768: a1 = u8 [a0 + 0x9]\n 22771: a4 = u8 [a0 + 0x8]\n 22774: a5 = u8 [a0 + 0xa]\n 22777: s1 = u8 [a0 + 0xb]\n 22780: a1 = a1 << 0x8\n 22783: a1 = a1 | a4\n 22786: a5 = a5 << 0x10\n 22789: s1 = s1 << 0x18\n 22792: a5 = a5 | s1\n 22795: a1 = a1 | a5\n 22798: a4 = u8 [a0 + 0xd]\n 22801: a5 = u8 [a0 + 0xc]\n 22804: s1 = u8 [a0 + 0xe]\n 22807: a0 = u8 [a0 + 0xf]\n 22810: a4 = a4 << 0x8\n 22813: a4 = a4 | a5\n 22816: s1 = s1 << 0x10\n 22819: a0 = a0 << 0x18\n 22822: a0 = a0 | s1\n 22825: a0 = a0 | a4\n 22828: a0 = a0 << 0x20\n 22831: a0 = a0 | a1\n 22834: a1 = reverse a0\n 22836: a0 = reverse a3\n 22838: a2 = reverse a2\n 22840: a3 = reverse t0\n 22842: a2 = a2 | a3\n 22845: a3 = a0 | a1\n 22848: a3 = a3 | a2\n 22851: a3 = a3 >> 0x20\n 22854: a1 = a1 | a2\n 22857: a1 = a1 << 0x20\n 22860: a1 = a1 | a3\n 22863: jump @337 if a1 == 0\n      : @334 (gas: 1)\n 22866: trap\n      : @335 (gas: 3)\n 22867: a0 = 0\n 22869: a1 = 0\n 22871: ra = 294, jump @0\n      : @336 [@dyn 147] (gas: 5)\n 22877: i32 a1 = a0 + 0\n 22879: a0 = 0x1\n 22882: a2 = 0\n 22884: ecalli 12 // 'seal_return'\n 22886: fallthrough\n      : @337 (gas: 4)\n 22887: i32 s1 = a0 + 0\n 22889: a1 = 0x20\n 22892: a0 = s1\n 22894: ra = 296, jump @0\n      : @338 [@dyn 148] (gas: 71)\n 22900: a1 = u64 [sp]\n 22902: a1 = reverse a1\n 22904: a2 = u64 [sp + 0x8]\n 22907: a2 = reverse a2\n 22909: a3 = u64 [sp + 0x10]\n 22912: a3 = reverse a3\n 22914: a4 = u64 [sp + 0x18]\n 22917: a4 = reverse a4\n 22919: a5 = a4 >> 0x38\n 22922: u8 [a0 + 0x1f] = a5\n 22925: a5 = a4 >> 0x30\n 22928: u8 [a0 + 0x1e] = a5\n 22931: a5 = a4 >> 0x28\n 22934: u8 [a0 + 0x1d] = a5\n 22937: a5 = a4 >> 0x20\n 22940: u8 [a0 + 0x1c] = a5\n 22943: a5 = a4 >> 0x18\n 22946: u8 [a0 + 0x1b] = a5\n 22949: a5 = a4 >> 0x10\n 22952: u8 [a0 + 0x1a] = a5\n 22955: a5 = a4 >> 0x8\n 22958: u8 [a0 + 0x19] = a5\n 22961: u8 [a0 + 0x18] = a4\n 22964: u8 [a0 + 0x10] = a3\n 22967: a4 = a3 >> 0x38\n 22970: u8 [a0 + 0x17] = a4\n 22973: a4 = a3 >> 0x30\n 22976: u8 [a0 + 0x16] = a4\n 22979: a4 = a3 >> 0x28\n 22982: u8 [a0 + 0x15] = a4\n 22985: a4 = a3 >> 0x20\n 22988: u8 [a0 + 0x14] = a4\n 22991: a4 = a3 >> 0x18\n 22994: u8 [a0 + 0x13] = a4\n 22997: a4 = a3 >> 0x10\n 23000: u8 [a0 + 0x12] = a4\n 23003: a3 = a3 >> 0x8\n 23006: u8 [a0 + 0x11] = a3\n 23009: u8 [a0 + 0x8] = a2\n 23012: a3 = a2 >> 0x38\n 23015: u8 [a0 + 0xf] = a3\n 23018: a3 = a2 >> 0x30\n 23021: u8 [a0 + 0xe] = a3\n 23024: a3 = a2 >> 0x28\n 23027: u8 [a0 + 0xd] = a3\n 23030: a3 = a2 >> 0x20\n 23033: u8 [a0 + 0xc] = a3\n 23036: a3 = a2 >> 0x18\n 23039: u8 [a0 + 0xb] = a3\n 23042: a3 = a2 >> 0x10\n 23045: u8 [a0 + 0xa] = a3\n 23048: a2 = a2 >> 0x8\n 23051: u8 [a0 + 0x9] = a2\n 23054: u8 [a0] = a1\n 23056: a2 = a1 >> 0x38\n 23059: u8 [a0 + 0x7] = a2\n 23062: a2 = a1 >> 0x30\n 23065: u8 [a0 + 0x6] = a2\n 23068: a2 = a1 >> 0x28\n 23071: u8 [a0 + 0x5] = a2\n 23074: a2 = a1 >> 0x20\n 23077: u8 [a0 + 0x4] = a2\n 23080: a2 = a1 >> 0x18\n 23083: u8 [a0 + 0x3] = a2\n 23086: a2 = a1 >> 0x10\n 23089: u8 [a0 + 0x2] = a2\n 23092: a1 = a1 >> 0x8\n 23095: u8 [a0 + 0x1] = a1\n 23098: a1 = 0x20\n 23101: a0 = s1\n 23103: ra = 298, jump @0\n      : @339 [@dyn 149] (gas: 6)\n 23109: i32 a1 = a0 + 0\n 23111: a2 = 0x20\n 23114: a0 = 0\n 23116: ra = 0x12c\n 23120: ecalli 12 // 'seal_return'\n 23122: fallthrough\n      : @340 [@dyn 150] (gas: 44)\n 23123: sp = sp + 0xfffffffffffffce0\n 23127: u64 [sp + 0x318] = ra\n 23131: u64 [sp + 0x310] = s0\n 23135: u64 [sp + 0x308] = s1\n 23139: s0 = sp + 0x320\n 23143: sp = sp & 0xffffffffffffffe0\n 23146: s1 = u64 [a2 + 0x8]\n 23149: t2 = u64 [a1 + 0x8]\n 23152: a5 = u64 [a2]\n 23154: a3 = u64 [a1]\n 23156: t0 = u64 [a2 + 0x10]\n 23159: a4 = s1 ^ t2\n 23162: ra = s1 <u t2\n 23165: t1 = a5 <u a3\n 23168: ra = t1 if a4 == 0\n 23171: u64 [sp + 0xd8] = s1\n 23175: a4 = s1 - t2\n 23178: a4 = a4 - t1\n 23181: u64 [sp + 0xc8] = a5\n 23185: u64 [sp + 0xf8] = a3\n 23189: a5 = a5 - a3\n 23192: a5 = a5 <u 0x80\n 23196: a5 = a5 ^ 0x1\n 23199: t1 = u64 [a1 + 0x10]\n 23202: s1 = a4 >u 0\n 23204: a5 = s1 if a4 != 0\n 23207: a4 = u64 [a2 + 0x18]\n 23210: s1 = u64 [a1 + 0x18]\n 23213: a1 = t0 - t1\n 23216: a2 = a1 - ra\n 23219: ra = a1 <u ra\n 23222: u64 [sp + 0xd0] = t0\n 23226: a3 = t0 <u t1\n 23229: a1 = s1\n 23231: u64 [sp + 0xc0] = a4\n 23235: a4 = a4 - s1\n 23238: a4 = a4 - a3\n 23241: a4 = a4 - ra\n 23244: s1 = a4 >s 0\n 23246: a3 = a2 >u 0\n 23248: a3 = s1 if a4 != 0\n 23251: a2 = a2 | a4\n 23254: a5 = a3 if a2 != 0\n 23257: jump @357 if a5 == 0\n      : @341 (gas: 13)\n 23261: s1 = a0\n 23263: a2 = u64 [sp + 0xf8]\n 23267: a0 = a2 | t1\n 23270: u64 [sp + 0xf0] = t2\n 23274: u64 [sp + 0xe0] = a1\n 23278: a1 = t2 | a1\n 23281: a0 = a0 | a1\n 23284: a0 = a0 >> 0x20\n 23287: u64 [sp + 0xe8] = t1\n 23291: a1 = a1 | t1\n 23294: a1 = a1 << 0x20\n 23297: a0 = a0 | a1\n 23300: jump @356 if a0 != 0\n      : @342 (gas: 5)\n 23304: i32 a1 = a2 + 0\n 23306: i32 a0 = sp + 0x280\n 23310: u64 [sp + 0xb8] = a1\n 23314: ecalli 3 // 'call_data_load'\n 23316: fallthrough\n      : @343 (gas: 7)\n 23317: t0 = u64 [sp + 0x298]\n 23321: a1 = u64 [sp + 0x290]\n 23325: a2 = u64 [sp + 0x288]\n 23329: a3 = a1 | t0\n 23332: a4 = a2 <u 0x1\n 23335: a4 = 0 if a3 != 0\n 23337: jump @357 if a4 == 0\n      : @344 (gas: 35)\n 23341: a3 = u64 [sp + 0x280]\n 23345: a4 = u64 [sp + 0xf8]\n 23349: a4 = a4 + a3\n 23352: a3 = a4 <u a3\n 23355: a5 = u64 [sp + 0xf0]\n 23359: a5 = a5 + a2\n 23362: a5 = a5 + a3\n 23365: a0 = a5 ^ a2\n 23368: a2 = a5 <u a2\n 23371: a2 = a3 if a0 == 0\n 23374: a0 = u64 [sp + 0xe8]\n 23378: a0 = a0 + a1\n 23381: a2 = a2 + a0\n 23384: a3 = a2 <u a0\n 23387: a0 = a0 <u a1\n 23390: a1 = u64 [sp + 0xe0]\n 23394: t0 = t0 + a1\n 23397: a0 = a0 + t0\n 23400: a3 = a3 + a0\n 23403: a0 = u64 [sp + 0xc8]\n 23407: u64 [sp + 0x200] = a0\n 23411: a0 = u64 [sp + 0xd8]\n 23415: u64 [sp + 0x208] = a0\n 23419: u64 [sp + 0x220] = a4\n 23423: a0 = u64 [sp + 0xd0]\n 23427: u64 [sp + 0x210] = a0\n 23431: a0 = u64 [sp + 0xc0]\n 23435: u64 [sp + 0x218] = a0\n 23439: u64 [sp + 0x228] = a5\n 23443: u64 [sp + 0x230] = a2\n 23447: a0 = sp + 0x240\n 23451: a1 = sp + 0x220\n 23455: a2 = sp + 0x200\n 23459: u64 [sp + 0x238] = a3\n 23463: ra = 302, jump @174\n      : @345 [@dyn 151] (gas: 13)\n 23469: a0 = u64 [sp + 0xe8]\n 23473: a2 = u64 [sp + 0xe0]\n 23477: a2 = a2 | a0\n 23480: a0 = 0x100000000\n 23490: u64 [sp + 0xa8] = a0\n 23494: a0 = 0xffffffe0\n 23504: a1 = u64 [sp + 0xf8]\n 23508: a0 = a1 <u a0\n 23511: a1 = u64 [sp + 0xf0]\n 23515: a0 = 0 if a1 != 0\n 23517: u64 [sp + 0xb0] = a2\n 23521: a0 = 0 if a2 != 0\n 23523: jump @356 if a0 == 0\n      : @346 (gas: 21)\n 23527: a0 = u64 [sp + 0x278]\n 23531: u64 [sp + 0x88] = a0\n 23535: a0 = u64 [sp + 0x270]\n 23539: u64 [sp + 0x68] = a0\n 23542: a0 = u64 [sp + 0x268]\n 23546: u64 [sp + 0x90] = a0\n 23550: a0 = u64 [sp + 0x260]\n 23554: u64 [sp + 0x70] = a0\n 23557: a0 = u64 [sp + 0x258]\n 23561: u64 [sp + 0x98] = a0\n 23565: a0 = u64 [sp + 0x250]\n 23569: u64 [sp + 0x78] = a0\n 23572: a0 = u64 [sp + 0x248]\n 23576: u64 [sp + 0xa0] = a0\n 23580: a0 = u64 [sp + 0x240]\n 23584: u64 [sp + 0x80] = a0\n 23588: a0 = u64 [sp + 0xb8]\n 23592: i32 a1 = a0 + 0x20\n 23595: i32 a0 = sp + 0x2e0\n 23599: ecalli 3 // 'call_data_load'\n 23601: fallthrough\n      : @347 (gas: 9)\n 23602: a0 = u64 [sp + 0xa8]\n 23606: a0 = a0 + 0xffffffffffffffc0\n 23609: a1 = u64 [sp + 0xf8]\n 23613: a0 = a1 <u a0\n 23616: a1 = u64 [sp + 0xf0]\n 23620: a0 = 0 if a1 != 0\n 23622: a1 = u64 [sp + 0xb0]\n 23626: a0 = 0 if a1 != 0\n 23628: jump @356 if a0 == 0\n      : @348 (gas: 13)\n 23632: a0 = u64 [sp + 0x2f8]\n 23636: u64 [sp + 0x60] = a0\n 23639: a0 = u64 [sp + 0x2f0]\n 23643: u64 [sp + 0x50] = a0\n 23646: a0 = u64 [sp + 0x2e8]\n 23650: u64 [sp + 0xa8] = a0\n 23654: a0 = u64 [sp + 0x2e0]\n 23658: u64 [sp + 0x58] = a0\n 23661: a0 = u64 [sp + 0xb8]\n 23665: i32 a1 = a0 + 0x40\n 23668: i32 a0 = sp + 0x2a0\n 23672: ecalli 3 // 'call_data_load'\n 23674: fallthrough\n      : @349 (gas: 7)\n 23675: t0 = u64 [sp + 0x2b8]\n 23679: a1 = u64 [sp + 0x2b0]\n 23683: a2 = u64 [sp + 0x2a8]\n 23687: a3 = a1 | t0\n 23690: a4 = a2 <u 0x1\n 23693: a4 = 0 if a3 != 0\n 23695: jump @357 if a4 == 0\n      : @350 (gas: 35)\n 23699: a3 = u64 [sp + 0x2a0]\n 23703: a4 = u64 [sp + 0xf8]\n 23707: a4 = a4 + a3\n 23710: a3 = a4 <u a3\n 23713: a5 = u64 [sp + 0xf0]\n 23717: a5 = a5 + a2\n 23720: a5 = a5 + a3\n 23723: a0 = a5 ^ a2\n 23726: a2 = a5 <u a2\n 23729: a2 = a3 if a0 == 0\n 23732: a0 = u64 [sp + 0xe8]\n 23736: a0 = a0 + a1\n 23739: a2 = a2 + a0\n 23742: a3 = a2 <u a0\n 23745: a0 = a0 <u a1\n 23748: a1 = u64 [sp + 0xe0]\n 23752: t0 = t0 + a1\n 23755: a0 = a0 + t0\n 23758: a3 = a3 + a0\n 23761: a0 = u64 [sp + 0xc8]\n 23765: u64 [sp + 0x180] = a0\n 23769: a0 = u64 [sp + 0xd8]\n 23773: u64 [sp + 0x188] = a0\n 23777: u64 [sp + 0x1a0] = a4\n 23781: a0 = u64 [sp + 0xd0]\n 23785: u64 [sp + 0x190] = a0\n 23789: a0 = u64 [sp + 0xc0]\n 23793: u64 [sp + 0x198] = a0\n 23797: u64 [sp + 0x1a8] = a5\n 23801: u64 [sp + 0x1b0] = a2\n 23805: a0 = sp + 0x1c0\n 23809: a1 = sp + 0x1a0\n 23813: a2 = sp + 0x180\n 23817: u64 [sp + 0x1b8] = a3\n 23821: ra = 304, jump @174\n      : @351 [@dyn 152] (gas: 8)\n 23827: a0 = 0xffffffa0\n 23837: a1 = u64 [sp + 0xf8]\n 23841: a0 = a1 <u a0\n 23844: a1 = u64 [sp + 0xf0]\n 23848: a0 = 0 if a1 != 0\n 23850: a1 = u64 [sp + 0xb0]\n 23854: a0 = 0 if a1 != 0\n 23856: jump @356 if a0 == 0\n      : @352 (gas: 21)\n 23860: a0 = u64 [sp + 0x1f8]\n 23864: u64 [sp + 0x38] = a0\n 23867: a0 = u64 [sp + 0x1f0]\n 23871: u64 [sp + 0x18] = a0\n 23874: a0 = u64 [sp + 0x1e8]\n 23878: u64 [sp + 0x40] = a0\n 23881: a0 = u64 [sp + 0x1e0]\n 23885: u64 [sp + 0x20] = a0\n 23888: a0 = u64 [sp + 0x1d8]\n 23892: u64 [sp + 0x48] = a0\n 23895: a0 = u64 [sp + 0x1d0]\n 23899: u64 [sp + 0x28] = a0\n 23902: a0 = u64 [sp + 0x1c8]\n 23906: u64 [sp + 0xb0] = a0\n 23910: a0 = u64 [sp + 0x1c0]\n 23914: u64 [sp + 0x30] = a0\n 23917: a0 = u64 [sp + 0xb8]\n 23921: i32 a1 = a0 + 0x60\n 23924: i32 a0 = sp + 0x2c0\n 23928: ecalli 3 // 'call_data_load'\n 23930: fallthrough\n      : @353 (gas: 7)\n 23931: t0 = u64 [sp + 0x2d8]\n 23935: a1 = u64 [sp + 0x2d0]\n 23939: a2 = u64 [sp + 0x2c8]\n 23943: a3 = a1 | t0\n 23946: a4 = a2 <u 0x1\n 23949: a4 = 0 if a3 != 0\n 23951: jump @357 if a4 == 0\n      : @354 (gas: 35)\n 23955: a3 = u64 [sp + 0x2c0]\n 23959: a4 = u64 [sp + 0xf8]\n 23963: a4 = a4 + a3\n 23966: a3 = a4 <u a3\n 23969: a5 = u64 [sp + 0xf0]\n 23973: a5 = a5 + a2\n 23976: a5 = a5 + a3\n 23979: a0 = a5 ^ a2\n 23982: a2 = a5 <u a2\n 23985: a2 = a3 if a0 == 0\n 23988: a0 = u64 [sp + 0xe8]\n 23992: a0 = a0 + a1\n 23995: a2 = a2 + a0\n 23998: a3 = a2 <u a0\n 24001: a0 = a0 <u a1\n 24004: a1 = u64 [sp + 0xe0]\n 24008: t0 = t0 + a1\n 24011: a0 = a0 + t0\n 24014: a3 = a3 + a0\n 24017: a0 = u64 [sp + 0xc8]\n 24021: u64 [sp + 0x100] = a0\n 24025: a0 = u64 [sp + 0xd8]\n 24029: u64 [sp + 0x108] = a0\n 24033: u64 [sp + 0x120] = a4\n 24037: a0 = u64 [sp + 0xd0]\n 24041: u64 [sp + 0x110] = a0\n 24045: a0 = u64 [sp + 0xc0]\n 24049: u64 [sp + 0x118] = a0\n 24053: u64 [sp + 0x128] = a5\n 24057: u64 [sp + 0x130] = a2\n 24061: a0 = sp + 0x140\n 24065: a1 = sp + 0x120\n 24069: a2 = sp + 0x100\n 24073: u64 [sp + 0x138] = a3\n 24077: ra = 306, jump @174\n      : @355 [@dyn 153] (gas: 62)\n 24083: t0 = u64 [sp + 0x148]\n 24087: t1 = u64 [sp + 0x140]\n 24091: a2 = u64 [sp + 0x158]\n 24095: a3 = u64 [sp + 0x150]\n 24099: a4 = u64 [sp + 0x170]\n 24103: a5 = u64 [sp + 0x178]\n 24107: a0 = u64 [sp + 0x160]\n 24111: a1 = u64 [sp + 0x168]\n 24115: u64 [s1 + 0xd0] = a4\n 24119: u64 [s1 + 0xd8] = a5\n 24123: u64 [s1 + 0xc0] = a0\n 24127: u64 [s1 + 0xc8] = a1\n 24131: u64 [s1 + 0xb0] = a3\n 24135: u64 [s1 + 0xb8] = a2\n 24139: u64 [s1 + 0xa0] = t1\n 24143: u64 [s1 + 0xa8] = t0\n 24147: a0 = u64 [sp + 0x18]\n 24150: u64 [s1 + 0x90] = a0\n 24154: a0 = u64 [sp + 0x38]\n 24157: u64 [s1 + 0x98] = a0\n 24161: a0 = u64 [sp + 0x20]\n 24164: u64 [s1 + 0x80] = a0\n 24168: a0 = u64 [sp + 0x40]\n 24171: u64 [s1 + 0x88] = a0\n 24175: a0 = u64 [sp + 0x28]\n 24178: u64 [s1 + 0x70] = a0\n 24181: a0 = u64 [sp + 0x48]\n 24184: u64 [s1 + 0x78] = a0\n 24187: a0 = u64 [sp + 0x30]\n 24190: u64 [s1 + 0x60] = a0\n 24193: a0 = u64 [sp + 0xb0]\n 24197: u64 [s1 + 0x68] = a0\n 24200: a0 = u64 [sp + 0x50]\n 24203: u64 [s1 + 0x50] = a0\n 24206: a0 = u64 [sp + 0x60]\n 24209: u64 [s1 + 0x58] = a0\n 24212: a0 = u64 [sp + 0x58]\n 24215: u64 [s1 + 0x40] = a0\n 24218: a0 = u64 [sp + 0xa8]\n 24222: u64 [s1 + 0x48] = a0\n 24225: a0 = u64 [sp + 0x68]\n 24228: u64 [s1 + 0x30] = a0\n 24231: a0 = u64 [sp + 0x88]\n 24235: u64 [s1 + 0x38] = a0\n 24238: a0 = u64 [sp + 0x70]\n 24241: u64 [s1 + 0x20] = a0\n 24244: a0 = u64 [sp + 0x90]\n 24248: u64 [s1 + 0x28] = a0\n 24251: a0 = u64 [sp + 0x78]\n 24254: u64 [s1 + 0x10] = a0\n 24257: a0 = u64 [sp + 0x98]\n 24261: u64 [s1 + 0x18] = a0\n 24264: a0 = u64 [sp + 0x80]\n 24268: u64 [s1] = a0\n 24270: a0 = u64 [sp + 0xa0]\n 24274: u64 [s1 + 0x8] = a0\n 24277: sp = s0 + 0xfffffffffffffce0\n 24281: ra = u64 [sp + 0x318]\n 24285: s0 = u64 [sp + 0x310]\n 24289: s1 = u64 [sp + 0x308]\n 24293: sp = sp + 0x320\n 24297: ret\n      : @356 (gas: 1)\n 24299: trap\n      : @357 (gas: 3)\n 24300: a0 = 0\n 24302: a1 = 0\n 24304: ra = 308, jump @0\n      : @358 [@dyn 154] (gas: 6)\n 24310: i32 a1 = a0 + 0\n 24312: a0 = 0x1\n 24315: a2 = 0\n 24317: ra = 0x136\n 24321: ecalli 12 // 'seal_return'\n 24323: fallthrough\n      : @359 [@dyn 155] (gas: 19)\n 24324: sp = sp + 0xfffffffffffffd10\n 24328: u64 [sp + 0x2e8] = ra\n 24332: u64 [sp + 0x2e0] = s0\n 24336: u64 [sp + 0x2d8] = s1\n 24340: s0 = sp + 0x2f0\n 24344: sp = sp & 0xfffffffffffffff0\n 24347: a0 = u32 [0x20114]\n 24352: u64 [sp + 456] = 0\n 24356: u64 [sp + 448] = 0\n 24360: u64 [sp + 440] = 0\n 24364: u64 [sp + 0x1b0] = a0\n 24368: u64 [sp + 488] = 0\n 24372: u64 [sp + 480] = 0\n 24376: u64 [sp + 464] = 0x4\n 24381: a0 = sp + 0x1f0\n 24385: a1 = sp + 0x1d0\n 24389: a2 = sp + 0x1b0\n 24393: u64 [sp + 472] = 0\n 24397: ra = 312, jump @340\n      : @360 [@dyn 156] (gas: 105)\n 24403: a0 = u64 [sp + 0x1f0]\n 24407: u64 [sp + 0xa8] = a0\n 24411: a0 = u64 [sp + 0x1f8]\n 24415: u64 [sp + 0xa0] = a0\n 24419: a0 = u64 [sp + 0x200]\n 24423: u64 [sp + 0x98] = a0\n 24427: a0 = u64 [sp + 0x208]\n 24431: u64 [sp + 0x90] = a0\n 24435: a0 = u64 [sp + 0x210]\n 24439: u64 [sp + 0x88] = a0\n 24443: a0 = u64 [sp + 0x218]\n 24447: u64 [sp + 0x80] = a0\n 24451: a0 = u64 [sp + 0x220]\n 24455: u64 [sp + 0x78] = a0\n 24458: a0 = u64 [sp + 0x228]\n 24462: u64 [sp + 0x70] = a0\n 24465: a0 = u64 [sp + 0x230]\n 24469: u64 [sp + 0x68] = a0\n 24472: a0 = u64 [sp + 0x238]\n 24476: u64 [sp + 0x60] = a0\n 24479: a0 = u64 [sp + 0x240]\n 24483: u64 [sp + 0x58] = a0\n 24486: a0 = u64 [sp + 0x248]\n 24490: u64 [sp + 0x50] = a0\n 24493: a0 = u64 [sp + 0x250]\n 24497: u64 [sp + 0x48] = a0\n 24500: a0 = u64 [sp + 0x258]\n 24504: u64 [sp + 0x40] = a0\n 24507: a0 = u64 [sp + 0x260]\n 24511: u64 [sp + 0x38] = a0\n 24514: a0 = u64 [sp + 0x268]\n 24518: u64 [sp + 0x30] = a0\n 24521: a0 = u64 [sp + 0x270]\n 24525: u64 [sp + 0x28] = a0\n 24528: a0 = u64 [sp + 0x278]\n 24532: u64 [sp + 0x20] = a0\n 24535: a0 = u64 [sp + 0x280]\n 24539: u64 [sp + 0x18] = a0\n 24542: t2 = u64 [sp + 0x288]\n 24546: t1 = u64 [sp + 0x290]\n 24550: t0 = u64 [sp + 0x298]\n 24554: a5 = u64 [sp + 0x2a0]\n 24558: a4 = u64 [sp + 0x2a8]\n 24562: a3 = u64 [sp + 0x2b0]\n 24566: a2 = u64 [sp + 0x2b8]\n 24570: a1 = u64 [sp + 0x2c0]\n 24574: a0 = u64 [sp + 0x2c8]\n 24578: ra = sp + 0xb0\n 24582: u64 [sp + 0x8] = ra\n 24585: s1 = sp + 0xd0\n 24589: u64 [sp] = s1\n 24591: u64 [sp + 0xc8] = a0\n 24595: u64 [sp + 0xc0] = a1\n 24599: u64 [sp + 0xb8] = a2\n 24603: u64 [sp + 0xb0] = a3\n 24607: u64 [sp + 0xe8] = a4\n 24611: u64 [sp + 0xe0] = a5\n 24615: u64 [sp + 0xd8] = t0\n 24619: u64 [sp + 0xd0] = t1\n 24623: u64 [sp + 0x108] = t2\n 24627: a0 = u64 [sp + 0x18]\n 24630: u64 [sp + 0x100] = a0\n 24634: a0 = u64 [sp + 0x20]\n 24637: u64 [sp + 0xf8] = a0\n 24641: a0 = u64 [sp + 0x28]\n 24644: u64 [sp + 0xf0] = a0\n 24648: a0 = u64 [sp + 0x30]\n 24651: u64 [sp + 0x128] = a0\n 24655: a0 = u64 [sp + 0x38]\n 24658: u64 [sp + 0x120] = a0\n 24662: a0 = u64 [sp + 0x40]\n 24665: u64 [sp + 0x118] = a0\n 24669: a0 = u64 [sp + 0x48]\n 24672: u64 [sp + 0x110] = a0\n 24676: a0 = u64 [sp + 0x50]\n 24679: u64 [sp + 0x148] = a0\n 24683: a0 = u64 [sp + 0x58]\n 24686: u64 [sp + 0x140] = a0\n 24690: a0 = u64 [sp + 0x60]\n 24693: u64 [sp + 0x138] = a0\n 24697: a0 = u64 [sp + 0x68]\n 24700: u64 [sp + 0x130] = a0\n 24704: a0 = u64 [sp + 0x70]\n 24707: u64 [sp + 0x168] = a0\n 24711: a0 = u64 [sp + 0x78]\n 24714: u64 [sp + 0x160] = a0\n 24718: a0 = u64 [sp + 0x80]\n 24722: u64 [sp + 0x158] = a0\n 24726: a0 = u64 [sp + 0x88]\n 24730: u64 [sp + 0x150] = a0\n 24734: a0 = u64 [sp + 0x90]\n 24738: u64 [sp + 0x188] = a0\n 24742: a0 = u64 [sp + 0x98]\n 24746: u64 [sp + 0x180] = a0\n 24750: a0 = u64 [sp + 0xa0]\n 24754: u64 [sp + 0x178] = a0\n 24758: a0 = sp + 0x190\n 24762: a1 = sp + 0x170\n 24766: a2 = sp + 0x150\n 24770: a3 = sp + 0x130\n 24774: a4 = sp + 0x110\n 24778: a5 = sp + 0xf0\n 24782: s1 = u64 [sp + 0xa8]\n 24786: u64 [sp + 0x170] = s1\n 24790: ra = 314, jump @950\n      : @361 [@dyn 157] (gas: 11)\n 24797: a0 = u64 [sp + 0x1a8]\n 24801: u64 [sp + 0x90] = a0\n 24805: a0 = u64 [sp + 0x1a0]\n 24809: u64 [sp + 0x98] = a0\n 24813: a0 = u64 [sp + 0x198]\n 24817: u64 [sp + 0xa0] = a0\n 24821: a0 = u64 [sp + 0x190]\n 24825: u64 [sp + 0xa8] = a0\n 24829: a0 = 0x40\n 24832: a1 = 0x20\n 24835: ra = 316, jump @0\n      : @362 [@dyn 158] (gas: 100)\n 24841: a1 = u8 [a0 + 0x11]\n 24844: a2 = u8 [a0 + 0x10]\n 24847: a3 = u8 [a0 + 0x12]\n 24850: a4 = u8 [a0 + 0x13]\n 24853: a1 = a1 << 0x8\n 24856: a1 = a1 | a2\n 24859: a3 = a3 << 0x10\n 24862: a4 = a4 << 0x18\n 24865: a3 = a3 | a4\n 24868: a1 = a1 | a3\n 24871: a2 = u8 [a0 + 0x15]\n 24874: a3 = u8 [a0 + 0x14]\n 24877: a4 = u8 [a0 + 0x16]\n 24880: a5 = u8 [a0 + 0x17]\n 24883: a2 = a2 << 0x8\n 24886: a2 = a2 | a3\n 24889: a4 = a4 << 0x10\n 24892: a5 = a5 << 0x18\n 24895: a4 = a4 | a5\n 24898: a2 = a2 | a4\n 24901: a2 = a2 << 0x20\n 24904: t0 = a2 | a1\n 24907: a2 = u8 [a0 + 0x1]\n 24910: a3 = u8 [a0]\n 24912: a4 = u8 [a0 + 0x2]\n 24915: a5 = u8 [a0 + 0x3]\n 24918: a2 = a2 << 0x8\n 24921: a2 = a2 | a3\n 24924: a4 = a4 << 0x10\n 24927: a5 = a5 << 0x18\n 24930: a4 = a4 | a5\n 24933: a2 = a2 | a4\n 24936: a3 = u8 [a0 + 0x5]\n 24939: a4 = u8 [a0 + 0x4]\n 24942: a5 = u8 [a0 + 0x6]\n 24945: s1 = u8 [a0 + 0x7]\n 24948: a3 = a3 << 0x8\n 24951: a3 = a3 | a4\n 24954: a5 = a5 << 0x10\n 24957: s1 = s1 << 0x18\n 24960: a5 = a5 | s1\n 24963: a3 = a3 | a5\n 24966: a3 = a3 << 0x20\n 24969: a2 = a2 | a3\n 24972: a3 = u8 [a0 + 0x19]\n 24975: a4 = u8 [a0 + 0x18]\n 24978: a5 = u8 [a0 + 0x1a]\n 24981: s1 = u8 [a0 + 0x1b]\n 24984: a3 = a3 << 0x8\n 24987: a3 = a3 | a4\n 24990: a5 = a5 << 0x10\n 24993: s1 = s1 << 0x18\n 24996: a5 = a5 | s1\n 24999: a3 = a3 | a5\n 25002: a4 = u8 [a0 + 0x1d]\n 25005: a5 = u8 [a0 + 0x1c]\n 25008: s1 = u8 [a0 + 0x1e]\n 25011: a1 = u8 [a0 + 0x1f]\n 25014: a4 = a4 << 0x8\n 25017: a4 = a4 | a5\n 25020: s1 = s1 << 0x10\n 25023: a1 = a1 << 0x18\n 25026: a1 = a1 | s1\n 25029: a1 = a1 | a4\n 25032: a1 = a1 << 0x20\n 25035: a3 = a3 | a1\n 25038: a1 = u8 [a0 + 0x9]\n 25041: a4 = u8 [a0 + 0x8]\n 25044: a5 = u8 [a0 + 0xa]\n 25047: s1 = u8 [a0 + 0xb]\n 25050: a1 = a1 << 0x8\n 25053: a1 = a1 | a4\n 25056: a5 = a5 << 0x10\n 25059: s1 = s1 << 0x18\n 25062: a5 = a5 | s1\n 25065: a1 = a1 | a5\n 25068: a4 = u8 [a0 + 0xd]\n 25071: a5 = u8 [a0 + 0xc]\n 25074: s1 = u8 [a0 + 0xe]\n 25077: a0 = u8 [a0 + 0xf]\n 25080: a4 = a4 << 0x8\n 25083: a4 = a4 | a5\n 25086: s1 = s1 << 0x10\n 25089: a0 = a0 << 0x18\n 25092: a0 = a0 | s1\n 25095: a0 = a0 | a4\n 25098: a0 = a0 << 0x20\n 25101: a0 = a0 | a1\n 25104: a1 = reverse a0\n 25106: a0 = reverse a3\n 25108: a2 = reverse a2\n 25110: a3 = reverse t0\n 25112: a2 = a2 | a3\n 25115: a3 = a0 | a1\n 25118: a3 = a3 | a2\n 25121: a3 = a3 >> 0x20\n 25124: a1 = a1 | a2\n 25127: a1 = a1 << 0x20\n 25130: a1 = a1 | a3\n 25133: jump @364 if a1 == 0\n      : @363 (gas: 1)\n 25136: trap\n      : @364 (gas: 4)\n 25137: i32 s1 = a0 + 0\n 25139: a1 = 0x20\n 25142: a0 = s1\n 25144: ra = 318, jump @0\n      : @365 [@dyn 159] (gas: 71)\n 25150: a1 = u64 [sp + 0x90]\n 25154: a1 = reverse a1\n 25156: a2 = u64 [sp + 0x98]\n 25160: a2 = reverse a2\n 25162: a3 = u64 [sp + 0xa0]\n 25166: a3 = reverse a3\n 25168: a4 = u64 [sp + 0xa8]\n 25172: a4 = reverse a4\n 25174: a5 = a4 >> 0x38\n 25177: u8 [a0 + 0x1f] = a5\n 25180: a5 = a4 >> 0x30\n 25183: u8 [a0 + 0x1e] = a5\n 25186: a5 = a4 >> 0x28\n 25189: u8 [a0 + 0x1d] = a5\n 25192: a5 = a4 >> 0x20\n 25195: u8 [a0 + 0x1c] = a5\n 25198: a5 = a4 >> 0x18\n 25201: u8 [a0 + 0x1b] = a5\n 25204: a5 = a4 >> 0x10\n 25207: u8 [a0 + 0x1a] = a5\n 25210: a5 = a4 >> 0x8\n 25213: u8 [a0 + 0x19] = a5\n 25216: u8 [a0 + 0x18] = a4\n 25219: u8 [a0 + 0x10] = a3\n 25222: a4 = a3 >> 0x38\n 25225: u8 [a0 + 0x17] = a4\n 25228: a4 = a3 >> 0x30\n 25231: u8 [a0 + 0x16] = a4\n 25234: a4 = a3 >> 0x28\n 25237: u8 [a0 + 0x15] = a4\n 25240: a4 = a3 >> 0x20\n 25243: u8 [a0 + 0x14] = a4\n 25246: a4 = a3 >> 0x18\n 25249: u8 [a0 + 0x13] = a4\n 25252: a4 = a3 >> 0x10\n 25255: u8 [a0 + 0x12] = a4\n 25258: a3 = a3 >> 0x8\n 25261: u8 [a0 + 0x11] = a3\n 25264: u8 [a0 + 0x8] = a2\n 25267: a3 = a2 >> 0x38\n 25270: u8 [a0 + 0xf] = a3\n 25273: a3 = a2 >> 0x30\n 25276: u8 [a0 + 0xe] = a3\n 25279: a3 = a2 >> 0x28\n 25282: u8 [a0 + 0xd] = a3\n 25285: a3 = a2 >> 0x20\n 25288: u8 [a0 + 0xc] = a3\n 25291: a3 = a2 >> 0x18\n 25294: u8 [a0 + 0xb] = a3\n 25297: a3 = a2 >> 0x10\n 25300: u8 [a0 + 0xa] = a3\n 25303: a2 = a2 >> 0x8\n 25306: u8 [a0 + 0x9] = a2\n 25309: u8 [a0] = a1\n 25311: a2 = a1 >> 0x38\n 25314: u8 [a0 + 0x7] = a2\n 25317: a2 = a1 >> 0x30\n 25320: u8 [a0 + 0x6] = a2\n 25323: a2 = a1 >> 0x28\n 25326: u8 [a0 + 0x5] = a2\n 25329: a2 = a1 >> 0x20\n 25332: u8 [a0 + 0x4] = a2\n 25335: a2 = a1 >> 0x18\n 25338: u8 [a0 + 0x3] = a2\n 25341: a2 = a1 >> 0x10\n 25344: u8 [a0 + 0x2] = a2\n 25347: a1 = a1 >> 0x8\n 25350: u8 [a0 + 0x1] = a1\n 25353: a1 = 0x20\n 25356: a0 = s1\n 25358: ra = 320, jump @0\n      : @366 [@dyn 160] (gas: 6)\n 25364: i32 a1 = a0 + 0\n 25366: a2 = 0x20\n 25369: a0 = 0\n 25371: ra = 0x142\n 25375: ecalli 12 // 'seal_return'\n 25377: fallthrough\n      : @367 [@dyn 161] (gas: 48)\n 25378: sp = sp + 0xffffffffffffff60\n 25382: u64 [sp + 0x98] = ra\n 25386: u64 [sp + 0x90] = s0\n 25390: u64 [sp + 0x88] = s1\n 25394: s0 = sp + 0xa0\n 25398: sp = sp & 0xffffffffffffffe0\n 25401: t0 = u64 [a1 + 0x10]\n 25404: a5 = u64 [a1 + 0x8]\n 25407: a3 = u64 [a2 + 0x8]\n 25410: t2 = u64 [a1]\n 25412: a4 = u64 [a2]\n 25414: u64 [sp + 0x40] = a4\n 25417: ra = u64 [a2 + 0x10]\n 25420: t1 = a3 ^ a5\n 25423: s1 = a3 <u a5\n 25426: a4 = a4 <u t2\n 25429: u64 [sp + 0x38] = a4\n 25432: s1 = a4 if t1 == 0\n 25435: t1 = u64 [a1 + 0x18]\n 25438: a1 = u64 [a2 + 0x18]\n 25441: u64 [sp + 0x30] = a1\n 25444: a2 = ra - t0\n 25447: a1 = a2 - s1\n 25450: u64 [sp + 0x48] = a1\n 25453: a1 = a2 <u s1\n 25456: u64 [sp + 0x58] = t0\n 25459: a4 = ra <u t0\n 25462: u64 [sp + 0x50] = t1\n 25465: a2 = u64 [sp + 0x30]\n 25468: a2 = a2 - t1\n 25471: a2 = a2 - a4\n 25474: a2 = a2 - a1\n 25477: a1 = a3 - a5\n 25480: a3 = u64 [sp + 0x38]\n 25483: a1 = a1 - a3\n 25486: a3 = u64 [sp + 0x40]\n 25489: a3 = a3 - t2\n 25492: a4 = a1 >u 0\n 25494: a3 = a3 <u 0x60\n 25497: a3 = a3 ^ 0x1\n 25500: a3 = a4 if a1 != 0\n 25503: s1 = a2 >s 0\n 25505: a1 = u64 [sp + 0x48]\n 25508: a4 = a1 >u 0\n 25510: a4 = s1 if a2 != 0\n 25513: a1 = a1 | a2\n 25516: a3 = a4 if a1 != 0\n 25519: jump @375 if a3 == 0\n      : @368 (gas: 12)\n 25523: s1 = a0\n 25525: a2 = u64 [sp + 0x58]\n 25528: a0 = t2 | a2\n 25531: u64 [sp + 0x48] = a5\n 25534: a1 = u64 [sp + 0x50]\n 25537: a1 = a1 | a5\n 25540: a0 = a0 | a1\n 25543: a0 = a0 >> 0x20\n 25546: a1 = a1 | a2\n 25549: a1 = a1 << 0x20\n 25552: a0 = a0 | a1\n 25555: jump @374 if a0 != 0\n      : @369 (gas: 6)\n 25559: i32 a1 = t2 + 0\n 25561: i32 a0 = sp + 0x60\n 25564: u64 [sp + 0x38] = a1\n 25567: u64 [sp + 0x40] = t2\n 25570: ecalli 3 // 'call_data_load'\n 25572: fallthrough\n      : @370 (gas: 13)\n 25573: a0 = u64 [sp + 0x58]\n 25576: a1 = u64 [sp + 0x50]\n 25579: a2 = a0 | a1\n 25582: a0 = 0x100000000\n 25592: u64 [sp + 0x50] = a0\n 25595: a0 = 0xffffffe0\n 25605: a1 = u64 [sp + 0x40]\n 25608: a0 = a1 <u a0\n 25611: a1 = u64 [sp + 0x48]\n 25614: a0 = 0 if a1 != 0\n 25616: u64 [sp + 0x58] = a2\n 25619: a0 = 0 if a2 != 0\n 25621: jump @374 if a0 == 0\n      : @371 (gas: 13)\n 25625: a0 = u64 [sp + 0x78]\n 25628: u64 [sp + 0x18] = a0\n 25631: a0 = u64 [sp + 0x70]\n 25634: u64 [sp + 0x20] = a0\n 25637: a0 = u64 [sp + 0x68]\n 25640: u64 [sp + 0x28] = a0\n 25643: a0 = u64 [sp + 0x60]\n 25646: u64 [sp + 0x30] = a0\n 25649: a0 = u64 [sp + 0x38]\n 25652: i32 a1 = a0 + 0x20\n 25655: i32 a0 = sp + 0x60\n 25658: ecalli 3 // 'call_data_load'\n 25660: fallthrough\n      : @372 (gas: 9)\n 25661: a0 = u64 [sp + 0x50]\n 25664: a0 = a0 + 0xffffffffffffffc0\n 25667: a1 = u64 [sp + 0x40]\n 25670: a0 = a1 <u a0\n 25673: a1 = u64 [sp + 0x48]\n 25676: a0 = 0 if a1 != 0\n 25678: a1 = u64 [sp + 0x58]\n 25681: a0 = 0 if a1 != 0\n 25683: jump @374 if a0 == 0\n      : @373 (gas: 42)\n 25687: a0 = u64 [sp + 0x78]\n 25690: u64 [sp + 0x40] = a0\n 25693: a0 = u64 [sp + 0x70]\n 25696: u64 [sp + 0x48] = a0\n 25699: a0 = u64 [sp + 0x68]\n 25702: u64 [sp + 0x50] = a0\n 25705: a0 = u64 [sp + 0x60]\n 25708: u64 [sp + 0x58] = a0\n 25711: a0 = u64 [sp + 0x38]\n 25714: i32 a1 = a0 + 0x40\n 25717: i32 a0 = sp + 0x60\n 25720: ecalli 3 // 'call_data_load'\n 25722: a0 = u64 [sp + 0x78]\n 25725: a1 = u64 [sp + 0x70]\n 25728: a2 = u64 [sp + 0x68]\n 25731: a3 = u64 [sp + 0x60]\n 25734: u64 [s1 + 0x58] = a0\n 25737: u64 [s1 + 0x50] = a1\n 25740: u64 [s1 + 0x48] = a2\n 25743: u64 [s1 + 0x40] = a3\n 25746: a0 = u64 [sp + 0x40]\n 25749: u64 [s1 + 0x38] = a0\n 25752: a0 = u64 [sp + 0x48]\n 25755: u64 [s1 + 0x30] = a0\n 25758: a0 = u64 [sp + 0x50]\n 25761: u64 [s1 + 0x28] = a0\n 25764: a0 = u64 [sp + 0x58]\n 25767: u64 [s1 + 0x20] = a0\n 25770: a0 = u64 [sp + 0x18]\n 25773: u64 [s1 + 0x18] = a0\n 25776: a0 = u64 [sp + 0x20]\n 25779: u64 [s1 + 0x10] = a0\n 25782: a0 = u64 [sp + 0x28]\n 25785: u64 [s1 + 0x8] = a0\n 25788: a0 = u64 [sp + 0x30]\n 25791: u64 [s1] = a0\n 25793: sp = s0 + 0xffffffffffffff60\n 25797: ra = u64 [sp + 0x98]\n 25801: s0 = u64 [sp + 0x90]\n 25805: s1 = u64 [sp + 0x88]\n 25809: sp = sp + 0xa0\n 25813: ret\n      : @374 (gas: 1)\n 25815: trap\n      : @375 (gas: 3)\n 25816: a0 = 0\n 25818: a1 = 0\n 25820: ra = 324, jump @0\n      : @376 [@dyn 162] (gas: 6)\n 25826: i32 a1 = a0 + 0\n 25828: a0 = 0x1\n 25831: a2 = 0\n 25833: ra = 0x146\n 25837: ecalli 12 // 'seal_return'\n 25839: fallthrough\n      : @377 [@dyn 163] (gas: 13)\n 25840: sp = sp + 0xfffffffffffffee0\n 25844: u64 [sp + 0x118] = ra\n 25848: u64 [sp + 0x110] = s0\n 25852: u64 [sp + 0x108] = s1\n 25856: s0 = sp + 0x120\n 25860: sp = sp & 0xffffffffffffffe0\n 25863: u64 [sp + 216] = 0\n 25867: u64 [sp + 208] = 0\n 25871: u64 [sp + 200] = 0\n 25875: u64 [sp + 192] = 0\n 25879: i32 a0 = sp + 0xc0\n 25883: ecalli 15 // 'value_transferred'\n 25885: fallthrough\n      : @378 (gas: 8)\n 25886: a0 = u64 [sp + 0xd0]\n 25890: a1 = u64 [sp + 0xd8]\n 25894: a2 = u64 [sp + 0xc8]\n 25898: a3 = u64 [sp + 0xc0]\n 25902: a1 = a1 | a2\n 25905: a0 = a0 | a3\n 25908: a0 = a0 | a1\n 25911: jump @384 if a0 != 0\n      : @379 (gas: 2)\n 25915: a0 = i32 [0x20114]\n 25920: jump @384 if a0 <=u 99\n      : @380 (gas: 52)\n 25925: i32 a0 = sp + 0xe0\n 25929: a1 = 0x4\n 25932: ecalli 3 // 'call_data_load'\n 25934: a0 = u64 [sp + 0xe0]\n 25938: u64 [sp + 0x38] = a0\n 25941: a0 = u64 [sp + 0xe8]\n 25945: u64 [sp + 0x30] = a0\n 25948: a0 = u64 [sp + 0xf0]\n 25952: u64 [sp + 0x28] = a0\n 25955: a0 = u64 [sp + 0xf8]\n 25959: u64 [sp + 0x20] = a0\n 25962: i32 a0 = sp + 0xe0\n 25966: a1 = 0x24\n 25969: ecalli 3 // 'call_data_load'\n 25971: a0 = u64 [sp + 0xe0]\n 25975: u64 [sp + 0x18] = a0\n 25978: a0 = u64 [sp + 0xe8]\n 25982: u64 [sp + 0x10] = a0\n 25985: a0 = u64 [sp + 0xf0]\n 25989: u64 [sp + 0x8] = a0\n 25992: s1 = u64 [sp + 0xf8]\n 25996: i32 a0 = sp + 0xe0\n 26000: a1 = 0x44\n 26003: ecalli 3 // 'call_data_load'\n 26005: a0 = u64 [sp + 0xe0]\n 26009: a1 = u64 [sp + 0xe8]\n 26013: a2 = u64 [sp + 0xf0]\n 26017: a3 = u64 [sp + 0xf8]\n 26021: u64 [sp + 0x58] = a3\n 26024: u64 [sp + 0x50] = a2\n 26027: u64 [sp + 0x48] = a1\n 26030: u64 [sp + 0x40] = a0\n 26033: u64 [sp + 0x78] = s1\n 26036: a0 = u64 [sp + 0x8]\n 26039: u64 [sp + 0x70] = a0\n 26042: a0 = u64 [sp + 0x10]\n 26045: u64 [sp + 0x68] = a0\n 26048: a0 = u64 [sp + 0x18]\n 26051: u64 [sp + 0x60] = a0\n 26054: a0 = u64 [sp + 0x20]\n 26057: u64 [sp + 0x98] = a0\n 26061: a0 = u64 [sp + 0x28]\n 26064: u64 [sp + 0x90] = a0\n 26068: a0 = u64 [sp + 0x30]\n 26071: u64 [sp + 0x88] = a0\n 26075: a0 = sp + 0xa0\n 26079: a1 = sp + 0x80\n 26083: a2 = sp + 0x60\n 26086: a3 = sp + 0x40\n 26089: a4 = u64 [sp + 0x38]\n 26092: u64 [sp + 0x80] = a4\n 26096: ra = 328, jump @1365\n      : @381 [@dyn 164] (gas: 11)\n 26103: a0 = u64 [sp + 0xb8]\n 26107: u64 [sp + 0x20] = a0\n 26110: a0 = u64 [sp + 0xb0]\n 26114: u64 [sp + 0x28] = a0\n 26117: a0 = u64 [sp + 0xa8]\n 26121: u64 [sp + 0x30] = a0\n 26124: a0 = u64 [sp + 0xa0]\n 26128: u64 [sp + 0x38] = a0\n 26131: a0 = 0x40\n 26134: a1 = 0x20\n 26137: ra = 330, jump @0\n      : @382 [@dyn 165] (gas: 100)\n 26143: a1 = u8 [a0 + 0x11]\n 26146: a2 = u8 [a0 + 0x10]\n 26149: a3 = u8 [a0 + 0x12]\n 26152: a4 = u8 [a0 + 0x13]\n 26155: a1 = a1 << 0x8\n 26158: a1 = a1 | a2\n 26161: a3 = a3 << 0x10\n 26164: a4 = a4 << 0x18\n 26167: a3 = a3 | a4\n 26170: a1 = a1 | a3\n 26173: a2 = u8 [a0 + 0x15]\n 26176: a3 = u8 [a0 + 0x14]\n 26179: a4 = u8 [a0 + 0x16]\n 26182: a5 = u8 [a0 + 0x17]\n 26185: a2 = a2 << 0x8\n 26188: a2 = a2 | a3\n 26191: a4 = a4 << 0x10\n 26194: a5 = a5 << 0x18\n 26197: a4 = a4 | a5\n 26200: a2 = a2 | a4\n 26203: a2 = a2 << 0x20\n 26206: t0 = a2 | a1\n 26209: a2 = u8 [a0 + 0x1]\n 26212: a3 = u8 [a0]\n 26214: a4 = u8 [a0 + 0x2]\n 26217: a5 = u8 [a0 + 0x3]\n 26220: a2 = a2 << 0x8\n 26223: a2 = a2 | a3\n 26226: a4 = a4 << 0x10\n 26229: a5 = a5 << 0x18\n 26232: a4 = a4 | a5\n 26235: a2 = a2 | a4\n 26238: a3 = u8 [a0 + 0x5]\n 26241: a4 = u8 [a0 + 0x4]\n 26244: a5 = u8 [a0 + 0x6]\n 26247: s1 = u8 [a0 + 0x7]\n 26250: a3 = a3 << 0x8\n 26253: a3 = a3 | a4\n 26256: a5 = a5 << 0x10\n 26259: s1 = s1 << 0x18\n 26262: a5 = a5 | s1\n 26265: a3 = a3 | a5\n 26268: a3 = a3 << 0x20\n 26271: a2 = a2 | a3\n 26274: a3 = u8 [a0 + 0x19]\n 26277: a4 = u8 [a0 + 0x18]\n 26280: a5 = u8 [a0 + 0x1a]\n 26283: s1 = u8 [a0 + 0x1b]\n 26286: a3 = a3 << 0x8\n 26289: a3 = a3 | a4\n 26292: a5 = a5 << 0x10\n 26295: s1 = s1 << 0x18\n 26298: a5 = a5 | s1\n 26301: a3 = a3 | a5\n 26304: a4 = u8 [a0 + 0x1d]\n 26307: a5 = u8 [a0 + 0x1c]\n 26310: s1 = u8 [a0 + 0x1e]\n 26313: a1 = u8 [a0 + 0x1f]\n 26316: a4 = a4 << 0x8\n 26319: a4 = a4 | a5\n 26322: s1 = s1 << 0x10\n 26325: a1 = a1 << 0x18\n 26328: a1 = a1 | s1\n 26331: a1 = a1 | a4\n 26334: a1 = a1 << 0x20\n 26337: a3 = a3 | a1\n 26340: a1 = u8 [a0 + 0x9]\n 26343: a4 = u8 [a0 + 0x8]\n 26346: a5 = u8 [a0 + 0xa]\n 26349: s1 = u8 [a0 + 0xb]\n 26352: a1 = a1 << 0x8\n 26355: a1 = a1 | a4\n 26358: a5 = a5 << 0x10\n 26361: s1 = s1 << 0x18\n 26364: a5 = a5 | s1\n 26367: a1 = a1 | a5\n 26370: a4 = u8 [a0 + 0xd]\n 26373: a5 = u8 [a0 + 0xc]\n 26376: s1 = u8 [a0 + 0xe]\n 26379: a0 = u8 [a0 + 0xf]\n 26382: a4 = a4 << 0x8\n 26385: a4 = a4 | a5\n 26388: s1 = s1 << 0x10\n 26391: a0 = a0 << 0x18\n 26394: a0 = a0 | s1\n 26397: a0 = a0 | a4\n 26400: a0 = a0 << 0x20\n 26403: a0 = a0 | a1\n 26406: a1 = reverse a0\n 26408: a0 = reverse a3\n 26410: a2 = reverse a2\n 26412: a3 = reverse t0\n 26414: a2 = a2 | a3\n 26417: a3 = a0 | a1\n 26420: a3 = a3 | a2\n 26423: a3 = a3 >> 0x20\n 26426: a1 = a1 | a2\n 26429: a1 = a1 << 0x20\n 26432: a1 = a1 | a3\n 26435: jump @386 if a1 == 0\n      : @383 (gas: 1)\n 26438: trap\n      : @384 (gas: 3)\n 26439: a0 = 0\n 26441: a1 = 0\n 26443: ra = 332, jump @0\n      : @385 [@dyn 166] (gas: 5)\n 26449: i32 a1 = a0 + 0\n 26451: a0 = 0x1\n 26454: a2 = 0\n 26456: ecalli 12 // 'seal_return'\n 26458: fallthrough\n      : @386 (gas: 4)\n 26459: i32 s1 = a0 + 0\n 26461: a1 = 0x20\n 26464: a0 = s1\n 26466: ra = 334, jump @0\n      : @387 [@dyn 167] (gas: 71)\n 26472: a1 = u64 [sp + 0x20]\n 26475: a1 = reverse a1\n 26477: a2 = u64 [sp + 0x28]\n 26480: a2 = reverse a2\n 26482: a3 = u64 [sp + 0x30]\n 26485: a3 = reverse a3\n 26487: a4 = u64 [sp + 0x38]\n 26490: a4 = reverse a4\n 26492: a5 = a4 >> 0x38\n 26495: u8 [a0 + 0x1f] = a5\n 26498: a5 = a4 >> 0x30\n 26501: u8 [a0 + 0x1e] = a5\n 26504: a5 = a4 >> 0x28\n 26507: u8 [a0 + 0x1d] = a5\n 26510: a5 = a4 >> 0x20\n 26513: u8 [a0 + 0x1c] = a5\n 26516: a5 = a4 >> 0x18\n 26519: u8 [a0 + 0x1b] = a5\n 26522: a5 = a4 >> 0x10\n 26525: u8 [a0 + 0x1a] = a5\n 26528: a5 = a4 >> 0x8\n 26531: u8 [a0 + 0x19] = a5\n 26534: u8 [a0 + 0x18] = a4\n 26537: u8 [a0 + 0x10] = a3\n 26540: a4 = a3 >> 0x38\n 26543: u8 [a0 + 0x17] = a4\n 26546: a4 = a3 >> 0x30\n 26549: u8 [a0 + 0x16] = a4\n 26552: a4 = a3 >> 0x28\n 26555: u8 [a0 + 0x15] = a4\n 26558: a4 = a3 >> 0x20\n 26561: u8 [a0 + 0x14] = a4\n 26564: a4 = a3 >> 0x18\n 26567: u8 [a0 + 0x13] = a4\n 26570: a4 = a3 >> 0x10\n 26573: u8 [a0 + 0x12] = a4\n 26576: a3 = a3 >> 0x8\n 26579: u8 [a0 + 0x11] = a3\n 26582: u8 [a0 + 0x8] = a2\n 26585: a3 = a2 >> 0x38\n 26588: u8 [a0 + 0xf] = a3\n 26591: a3 = a2 >> 0x30\n 26594: u8 [a0 + 0xe] = a3\n 26597: a3 = a2 >> 0x28\n 26600: u8 [a0 + 0xd] = a3\n 26603: a3 = a2 >> 0x20\n 26606: u8 [a0 + 0xc] = a3\n 26609: a3 = a2 >> 0x18\n 26612: u8 [a0 + 0xb] = a3\n 26615: a3 = a2 >> 0x10\n 26618: u8 [a0 + 0xa] = a3\n 26621: a2 = a2 >> 0x8\n 26624: u8 [a0 + 0x9] = a2\n 26627: u8 [a0] = a1\n 26629: a2 = a1 >> 0x38\n 26632: u8 [a0 + 0x7] = a2\n 26635: a2 = a1 >> 0x30\n 26638: u8 [a0 + 0x6] = a2\n 26641: a2 = a1 >> 0x28\n 26644: u8 [a0 + 0x5] = a2\n 26647: a2 = a1 >> 0x20\n 26650: u8 [a0 + 0x4] = a2\n 26653: a2 = a1 >> 0x18\n 26656: u8 [a0 + 0x3] = a2\n 26659: a2 = a1 >> 0x10\n 26662: u8 [a0 + 0x2] = a2\n 26665: a1 = a1 >> 0x8\n 26668: u8 [a0 + 0x1] = a1\n 26671: a1 = 0x20\n 26674: a0 = s1\n 26676: ra = 336, jump @0\n      : @388 [@dyn 168] (gas: 6)\n 26682: i32 a1 = a0 + 0\n 26684: a2 = 0x20\n 26687: a0 = 0\n 26689: ra = 0x152\n 26693: ecalli 12 // 'seal_return'\n 26695: fallthrough\n      : @389 [@dyn 169] (gas: 13)\n 26696: sp = sp + 0xffffffffffffff40\n 26700: u64 [sp + 0xb8] = ra\n 26704: u64 [sp + 0xb0] = s0\n 26708: u64 [sp + 0xa8] = s1\n 26712: s0 = sp + 0xc0\n 26716: sp = sp & 0xffffffffffffffe0\n 26719: u64 [sp + 120] = 0\n 26722: u64 [sp + 112] = 0\n 26725: u64 [sp + 104] = 0\n 26728: u64 [sp + 96] = 0\n 26731: i32 a0 = sp + 0x60\n 26734: ecalli 15 // 'value_transferred'\n 26736: fallthrough\n      : @390 (gas: 8)\n 26737: a0 = u64 [sp + 0x70]\n 26740: a1 = u64 [sp + 0x78]\n 26743: a2 = u64 [sp + 0x68]\n 26746: a3 = u64 [sp + 0x60]\n 26749: a1 = a1 | a2\n 26752: a0 = a0 | a3\n 26755: a0 = a0 | a1\n 26758: jump @396 if a0 != 0\n      : @391 (gas: 2)\n 26762: a0 = i32 [0x20114]\n 26767: jump @396 if a0 <=u 67\n      : @392 (gas: 56)\n 26772: i32 a0 = sp + 0x80\n 26776: a1 = 0x4\n 26779: ecalli 3 // 'call_data_load'\n 26781: a0 = u64 [sp + 0x80]\n 26785: u64 [sp + 0x18] = a0\n 26788: a0 = u64 [sp + 0x88]\n 26792: u64 [sp + 0x10] = a0\n 26795: a0 = u64 [sp + 0x90]\n 26799: u64 [sp + 0x8] = a0\n 26802: s1 = u64 [sp + 0x98]\n 26806: i32 a0 = sp + 0x80\n 26810: a1 = 0x24\n 26813: ecalli 3 // 'call_data_load'\n 26815: a0 = u64 [sp + 0x80]\n 26819: a1 = u64 [sp + 0x88]\n 26823: a2 = u64 [sp + 0x90]\n 26827: a3 = u64 [sp + 0x98]\n 26831: u64 [sp + 0x38] = a3\n 26834: u64 [sp + 0x30] = a2\n 26837: u64 [sp + 0x28] = a1\n 26840: u64 [sp + 0x20] = a0\n 26843: u64 [sp + 0x58] = s1\n 26846: a0 = u64 [sp + 0x8]\n 26849: u64 [sp + 0x50] = a0\n 26852: a0 = u64 [sp + 0x10]\n 26855: u64 [sp + 0x48] = a0\n 26858: a0 = sp + 0x40\n 26861: a1 = sp + 0x20\n 26864: a2 = u64 [sp + 0x18]\n 26867: u64 [sp + 0x40] = a2\n 26870: ra = 0x154\n 26874: sp = sp + 0xfffffffffffffde0\n 26878: u64 [sp + 0x218] = ra\n 26882: u64 [sp + 0x210] = s0\n 26886: u64 [sp + 0x208] = s1\n 26890: s0 = sp + 0x220\n 26894: sp = sp & 0xffffffffffffffe0\n 26897: a2 = u64 [a1]\n 26899: u64 [sp + 0x78] = a2\n 26902: a2 = u64 [a1 + 0x8]\n 26905: u64 [sp + 0x70] = a2\n 26908: a2 = u64 [a1 + 0x10]\n 26911: u64 [sp + 0x68] = a2\n 26914: a1 = u64 [a1 + 0x18]\n 26917: u64 [sp + 0x60] = a1\n 26920: a1 = u64 [a0]\n 26922: u64 [sp + 0x58] = a1\n 26925: a1 = u64 [a0 + 0x8]\n 26928: u64 [sp + 0x50] = a1\n 26931: a1 = u64 [a0 + 0x10]\n 26934: u64 [sp + 0x48] = a1\n 26937: s1 = u64 [a0 + 0x18]\n 26940: a1 = 0x20\n 26943: a0 = 0\n 26945: ra = 0x3b4\n 26949: jump @0\n      : @393 [@dyn 170] (gas: 3)\n 26952: a0 = 0x40\n 26955: a1 = 0x20\n 26958: ra = 342, jump @0\n      : @394 [@dyn 171] (gas: 100)\n 26964: a1 = u8 [a0 + 0x11]\n 26967: a2 = u8 [a0 + 0x10]\n 26970: a3 = u8 [a0 + 0x12]\n 26973: a4 = u8 [a0 + 0x13]\n 26976: a1 = a1 << 0x8\n 26979: a1 = a1 | a2\n 26982: a3 = a3 << 0x10\n 26985: a4 = a4 << 0x18\n 26988: a3 = a3 | a4\n 26991: a1 = a1 | a3\n 26994: a2 = u8 [a0 + 0x15]\n 26997: a3 = u8 [a0 + 0x14]\n 27000: a4 = u8 [a0 + 0x16]\n 27003: a5 = u8 [a0 + 0x17]\n 27006: a2 = a2 << 0x8\n 27009: a2 = a2 | a3\n 27012: a4 = a4 << 0x10\n 27015: a5 = a5 << 0x18\n 27018: a4 = a4 | a5\n 27021: a2 = a2 | a4\n 27024: a2 = a2 << 0x20\n 27027: t0 = a2 | a1\n 27030: a2 = u8 [a0 + 0x1]\n 27033: a3 = u8 [a0]\n 27035: a4 = u8 [a0 + 0x2]\n 27038: a5 = u8 [a0 + 0x3]\n 27041: a2 = a2 << 0x8\n 27044: a2 = a2 | a3\n 27047: a4 = a4 << 0x10\n 27050: a5 = a5 << 0x18\n 27053: a4 = a4 | a5\n 27056: a2 = a2 | a4\n 27059: a3 = u8 [a0 + 0x5]\n 27062: a4 = u8 [a0 + 0x4]\n 27065: a5 = u8 [a0 + 0x6]\n 27068: s1 = u8 [a0 + 0x7]\n 27071: a3 = a3 << 0x8\n 27074: a3 = a3 | a4\n 27077: a5 = a5 << 0x10\n 27080: s1 = s1 << 0x18\n 27083: a5 = a5 | s1\n 27086: a3 = a3 | a5\n 27089: a3 = a3 << 0x20\n 27092: a2 = a2 | a3\n 27095: a3 = u8 [a0 + 0x19]\n 27098: a4 = u8 [a0 + 0x18]\n 27101: a5 = u8 [a0 + 0x1a]\n 27104: s1 = u8 [a0 + 0x1b]\n 27107: a3 = a3 << 0x8\n 27110: a3 = a3 | a4\n 27113: a5 = a5 << 0x10\n 27116: s1 = s1 << 0x18\n 27119: a5 = a5 | s1\n 27122: a3 = a3 | a5\n 27125: a4 = u8 [a0 + 0x1d]\n 27128: a5 = u8 [a0 + 0x1c]\n 27131: s1 = u8 [a0 + 0x1e]\n 27134: a1 = u8 [a0 + 0x1f]\n 27137: a4 = a4 << 0x8\n 27140: a4 = a4 | a5\n 27143: s1 = s1 << 0x10\n 27146: a1 = a1 << 0x18\n 27149: a1 = a1 | s1\n 27152: a1 = a1 | a4\n 27155: a1 = a1 << 0x20\n 27158: a3 = a3 | a1\n 27161: a1 = u8 [a0 + 0x9]\n 27164: a4 = u8 [a0 + 0x8]\n 27167: a5 = u8 [a0 + 0xa]\n 27170: s1 = u8 [a0 + 0xb]\n 27173: a1 = a1 << 0x8\n 27176: a1 = a1 | a4\n 27179: a5 = a5 << 0x10\n 27182: s1 = s1 << 0x18\n 27185: a5 = a5 | s1\n 27188: a1 = a1 | a5\n 27191: a4 = u8 [a0 + 0xd]\n 27194: a5 = u8 [a0 + 0xc]\n 27197: s1 = u8 [a0 + 0xe]\n 27200: a0 = u8 [a0 + 0xf]\n 27203: a4 = a4 << 0x8\n 27206: a4 = a4 | a5\n 27209: s1 = s1 << 0x10\n 27212: a0 = a0 << 0x18\n 27215: a0 = a0 | s1\n 27218: a0 = a0 | a4\n 27221: a0 = a0 << 0x20\n 27224: a0 = a0 | a1\n 27227: a1 = reverse a0\n 27229: a0 = reverse a3\n 27231: a2 = reverse a2\n 27233: a3 = reverse t0\n 27235: a2 = a2 | a3\n 27238: a3 = a0 | a1\n 27241: a3 = a3 | a2\n 27244: a3 = a3 >> 0x20\n 27247: a1 = a1 | a2\n 27250: a1 = a1 << 0x20\n 27253: a1 = a1 | a3\n 27256: jump @398 if a1 == 0\n      : @395 (gas: 1)\n 27259: trap\n      : @396 (gas: 3)\n 27260: a0 = 0\n 27262: a1 = 0\n 27264: ra = 344, jump @0\n      : @397 [@dyn 172] (gas: 7)\n 27270: i32 a1 = a0 + 0\n 27272: a0 = 0x1\n 27275: a2 = 0\n 27277: ecalli 12 // 'seal_return'\n 27279: i32 a0 = a0 + 0\n 27281: ra = 0x15a\n 27285: jump @0\n      : @398 (gas: 2)\n 27288: i32 a0 = a0 + 0\n 27290: ra = 346, jump @0\n      : @399 [@dyn 173] (gas: 6)\n 27296: i32 a1 = a0 + 0\n 27298: a0 = 0\n 27300: a2 = 0\n 27302: ra = 0x15c\n 27306: ecalli 12 // 'seal_return'\n 27308: fallthrough\n      : @400 [@dyn 174] (gas: 8)\n 27309: sp = sp + 0xffffffffffffff40\n 27313: u64 [sp + 0xb8] = ra\n 27317: u64 [sp + 0xb0] = s0\n 27321: u64 [sp + 0xa8] = s1\n 27325: s0 = sp + 0xc0\n 27329: sp = sp & 0xffffffffffffffe0\n 27332: a0 = i32 [0x20114]\n 27337: jump @405 if a0 <=u 35\n      : @401 (gas: 18)\n 27342: i32 a0 = sp + 0x80\n 27346: a1 = 0x4\n 27349: ecalli 3 // 'call_data_load'\n 27351: a0 = u64 [sp + 0x80]\n 27355: a1 = u64 [sp + 0x88]\n 27359: a2 = u64 [sp + 0x90]\n 27363: a3 = u64 [sp + 0x98]\n 27367: u64 [sp + 0x38] = a3\n 27370: u64 [sp + 0x30] = a2\n 27373: u64 [sp + 0x28] = a1\n 27376: u64 [sp + 0x20] = a0\n 27379: u64 [sp + 88] = 0\n 27382: u64 [sp + 80] = 0\n 27385: u64 [sp + 72] = 0\n 27388: a0 = sp + 0x60\n 27391: a2 = sp + 0x20\n 27394: u64 [sp + 64] = 0\n 27397: ra = 350, jump @1077\n      : @402 [@dyn 175] (gas: 11)\n 27404: a0 = u64 [sp + 0x78]\n 27407: u64 [sp] = a0\n 27409: a0 = u64 [sp + 0x70]\n 27412: u64 [sp + 0x8] = a0\n 27415: a0 = u64 [sp + 0x68]\n 27418: u64 [sp + 0x10] = a0\n 27421: a0 = u64 [sp + 0x60]\n 27424: u64 [sp + 0x18] = a0\n 27427: a0 = 0x40\n 27430: a1 = 0x20\n 27433: ra = 352, jump @0\n      : @403 [@dyn 176] (gas: 100)\n 27439: a1 = u8 [a0 + 0x11]\n 27442: a2 = u8 [a0 + 0x10]\n 27445: a3 = u8 [a0 + 0x12]\n 27448: a4 = u8 [a0 + 0x13]\n 27451: a1 = a1 << 0x8\n 27454: a1 = a1 | a2\n 27457: a3 = a3 << 0x10\n 27460: a4 = a4 << 0x18\n 27463: a3 = a3 | a4\n 27466: a1 = a1 | a3\n 27469: a2 = u8 [a0 + 0x15]\n 27472: a3 = u8 [a0 + 0x14]\n 27475: a4 = u8 [a0 + 0x16]\n 27478: a5 = u8 [a0 + 0x17]\n 27481: a2 = a2 << 0x8\n 27484: a2 = a2 | a3\n 27487: a4 = a4 << 0x10\n 27490: a5 = a5 << 0x18\n 27493: a4 = a4 | a5\n 27496: a2 = a2 | a4\n 27499: a2 = a2 << 0x20\n 27502: t0 = a2 | a1\n 27505: a2 = u8 [a0 + 0x1]\n 27508: a3 = u8 [a0]\n 27510: a4 = u8 [a0 + 0x2]\n 27513: a5 = u8 [a0 + 0x3]\n 27516: a2 = a2 << 0x8\n 27519: a2 = a2 | a3\n 27522: a4 = a4 << 0x10\n 27525: a5 = a5 << 0x18\n 27528: a4 = a4 | a5\n 27531: a2 = a2 | a4\n 27534: a3 = u8 [a0 + 0x5]\n 27537: a4 = u8 [a0 + 0x4]\n 27540: a5 = u8 [a0 + 0x6]\n 27543: s1 = u8 [a0 + 0x7]\n 27546: a3 = a3 << 0x8\n 27549: a3 = a3 | a4\n 27552: a5 = a5 << 0x10\n 27555: s1 = s1 << 0x18\n 27558: a5 = a5 | s1\n 27561: a3 = a3 | a5\n 27564: a3 = a3 << 0x20\n 27567: a2 = a2 | a3\n 27570: a3 = u8 [a0 + 0x19]\n 27573: a4 = u8 [a0 + 0x18]\n 27576: a5 = u8 [a0 + 0x1a]\n 27579: s1 = u8 [a0 + 0x1b]\n 27582: a3 = a3 << 0x8\n 27585: a3 = a3 | a4\n 27588: a5 = a5 << 0x10\n 27591: s1 = s1 << 0x18\n 27594: a5 = a5 | s1\n 27597: a3 = a3 | a5\n 27600: a4 = u8 [a0 + 0x1d]\n 27603: a5 = u8 [a0 + 0x1c]\n 27606: s1 = u8 [a0 + 0x1e]\n 27609: a1 = u8 [a0 + 0x1f]\n 27612: a4 = a4 << 0x8\n 27615: a4 = a4 | a5\n 27618: s1 = s1 << 0x10\n 27621: a1 = a1 << 0x18\n 27624: a1 = a1 | s1\n 27627: a1 = a1 | a4\n 27630: a1 = a1 << 0x20\n 27633: a3 = a3 | a1\n 27636: a1 = u8 [a0 + 0x9]\n 27639: a4 = u8 [a0 + 0x8]\n 27642: a5 = u8 [a0 + 0xa]\n 27645: s1 = u8 [a0 + 0xb]\n 27648: a1 = a1 << 0x8\n 27651: a1 = a1 | a4\n 27654: a5 = a5 << 0x10\n 27657: s1 = s1 << 0x18\n 27660: a5 = a5 | s1\n 27663: a1 = a1 | a5\n 27666: a4 = u8 [a0 + 0xd]\n 27669: a5 = u8 [a0 + 0xc]\n 27672: s1 = u8 [a0 + 0xe]\n 27675: a0 = u8 [a0 + 0xf]\n 27678: a4 = a4 << 0x8\n 27681: a4 = a4 | a5\n 27684: s1 = s1 << 0x10\n 27687: a0 = a0 << 0x18\n 27690: a0 = a0 | s1\n 27693: a0 = a0 | a4\n 27696: a0 = a0 << 0x20\n 27699: a0 = a0 | a1\n 27702: a1 = reverse a0\n 27704: a0 = reverse a3\n 27706: a2 = reverse a2\n 27708: a3 = reverse t0\n 27710: a2 = a2 | a3\n 27713: a3 = a0 | a1\n 27716: a3 = a3 | a2\n 27719: a3 = a3 >> 0x20\n 27722: a1 = a1 | a2\n 27725: a1 = a1 << 0x20\n 27728: a1 = a1 | a3\n 27731: jump @407 if a1 == 0\n      : @404 (gas: 1)\n 27734: trap\n      : @405 (gas: 3)\n 27735: a0 = 0\n 27737: a1 = 0\n 27739: ra = 354, jump @0\n      : @406 [@dyn 177] (gas: 5)\n 27745: i32 a1 = a0 + 0\n 27747: a0 = 0x1\n 27750: a2 = 0\n 27752: ecalli 12 // 'seal_return'\n 27754: fallthrough\n      : @407 (gas: 4)\n 27755: i32 s1 = a0 + 0\n 27757: a1 = 0x20\n 27760: a0 = s1\n 27762: ra = 356, jump @0\n      : @408 [@dyn 178] (gas: 71)\n 27768: a1 = u64 [sp]\n 27770: a1 = reverse a1\n 27772: a2 = u64 [sp + 0x8]\n 27775: a2 = reverse a2\n 27777: a3 = u64 [sp + 0x10]\n 27780: a3 = reverse a3\n 27782: a4 = u64 [sp + 0x18]\n 27785: a4 = reverse a4\n 27787: a5 = a4 >> 0x38\n 27790: u8 [a0 + 0x1f] = a5\n 27793: a5 = a4 >> 0x30\n 27796: u8 [a0 + 0x1e] = a5\n 27799: a5 = a4 >> 0x28\n 27802: u8 [a0 + 0x1d] = a5\n 27805: a5 = a4 >> 0x20\n 27808: u8 [a0 + 0x1c] = a5\n 27811: a5 = a4 >> 0x18\n 27814: u8 [a0 + 0x1b] = a5\n 27817: a5 = a4 >> 0x10\n 27820: u8 [a0 + 0x1a] = a5\n 27823: a5 = a4 >> 0x8\n 27826: u8 [a0 + 0x19] = a5\n 27829: u8 [a0 + 0x18] = a4\n 27832: u8 [a0 + 0x10] = a3\n 27835: a4 = a3 >> 0x38\n 27838: u8 [a0 + 0x17] = a4\n 27841: a4 = a3 >> 0x30\n 27844: u8 [a0 + 0x16] = a4\n 27847: a4 = a3 >> 0x28\n 27850: u8 [a0 + 0x15] = a4\n 27853: a4 = a3 >> 0x20\n 27856: u8 [a0 + 0x14] = a4\n 27859: a4 = a3 >> 0x18\n 27862: u8 [a0 + 0x13] = a4\n 27865: a4 = a3 >> 0x10\n 27868: u8 [a0 + 0x12] = a4\n 27871: a3 = a3 >> 0x8\n 27874: u8 [a0 + 0x11] = a3\n 27877: u8 [a0 + 0x8] = a2\n 27880: a3 = a2 >> 0x38\n 27883: u8 [a0 + 0xf] = a3\n 27886: a3 = a2 >> 0x30\n 27889: u8 [a0 + 0xe] = a3\n 27892: a3 = a2 >> 0x28\n 27895: u8 [a0 + 0xd] = a3\n 27898: a3 = a2 >> 0x20\n 27901: u8 [a0 + 0xc] = a3\n 27904: a3 = a2 >> 0x18\n 27907: u8 [a0 + 0xb] = a3\n 27910: a3 = a2 >> 0x10\n 27913: u8 [a0 + 0xa] = a3\n 27916: a2 = a2 >> 0x8\n 27919: u8 [a0 + 0x9] = a2\n 27922: u8 [a0] = a1\n 27924: a2 = a1 >> 0x38\n 27927: u8 [a0 + 0x7] = a2\n 27930: a2 = a1 >> 0x30\n 27933: u8 [a0 + 0x6] = a2\n 27936: a2 = a1 >> 0x28\n 27939: u8 [a0 + 0x5] = a2\n 27942: a2 = a1 >> 0x20\n 27945: u8 [a0 + 0x4] = a2\n 27948: a2 = a1 >> 0x18\n 27951: u8 [a0 + 0x3] = a2\n 27954: a2 = a1 >> 0x10\n 27957: u8 [a0 + 0x2] = a2\n 27960: a1 = a1 >> 0x8\n 27963: u8 [a0 + 0x1] = a1\n 27966: a1 = 0x20\n 27969: a0 = s1\n 27971: ra = 358, jump @0\n      : @409 [@dyn 179] (gas: 6)\n 27977: i32 a1 = a0 + 0\n 27979: a2 = 0x20\n 27982: a0 = 0\n 27984: ra = 0x168\n 27988: ecalli 12 // 'seal_return'\n 27990: fallthrough\n      : @410 [@dyn 180] (gas: 19)\n 27991: t0 = u64 [a0 + 0x18]\n 27994: t1 = u64 [a1 + 0x18]\n 27997: a4 = u64 [a0 + 0x10]\n 28000: a5 = u64 [a0 + 0x8]\n 28003: a2 = u64 [a1 + 0x8]\n 28006: t2 = u64 [a0]\n 28008: a3 = u64 [a1]\n 28010: a1 = u64 [a1 + 0x10]\n 28013: a0 = a2 ^ a5\n 28016: a2 = a2 <u a5\n 28019: a3 = a3 <u t2\n 28022: a3 = a2 if a0 != 0\n 28025: a0 = a1 - a4\n 28028: a0 = a0 <u a3\n 28031: a1 = a1 <u a4\n 28034: a2 = t1 - t0\n 28037: a2 = a2 - a1\n 28040: a2 = a2 - a0\n 28043: jump @412 if a2 <s 0\n      : @411 (gas: 1)\n 28046: ret\n      : @412 (gas: 5)\n 28048: sp = sp + 0xfffffffffffffff8\n 28051: u64 [sp] = ra\n 28053: a0 = 0\n 28055: a1 = 0\n 28057: ra = 362, jump @0\n      : @413 [@dyn 181] (gas: 6)\n 28063: i32 a1 = a0 + 0\n 28065: a0 = 0x1\n 28068: a2 = 0\n 28070: ra = 0x16c\n 28074: ecalli 12 // 'seal_return'\n 28076: fallthrough\n      : @414 [@dyn 182] (gas: 12)\n 28077: a2 = u64 [a1 + 0x10]\n 28080: a3 = u64 [a1 + 0x18]\n 28083: a4 = u64 [a1 + 0x8]\n 28086: a1 = u64 [a1]\n 28088: a3 = a3 | a4\n 28091: a4 = a1 | a2\n 28094: a4 = a4 | a3\n 28097: a4 = a4 >> 0x20\n 28100: a2 = a2 | a3\n 28103: a2 = a2 << 0x20\n 28106: a2 = a2 | a4\n 28109: jump @417 if a2 != 0\n      : @415 (gas: 7)\n 28113: sp = sp + 0xfffffffffffffff0\n 28116: u64 [sp + 0x8] = ra\n 28119: u64 [sp] = s0\n 28121: s0 = a0\n 28123: i32 a0 = a1 + 0\n 28125: a1 = 0x20\n 28128: ra = 366, jump @0\n      : @416 [@dyn 183] (gas: 100)\n 28134: a1 = u8 [a0 + 0x1]\n 28137: a2 = u8 [a0]\n 28139: a3 = u8 [a0 + 0x2]\n 28142: a4 = u8 [a0 + 0x3]\n 28145: a1 = a1 << 0x8\n 28148: a1 = a1 | a2\n 28151: a3 = a3 << 0x10\n 28154: a4 = a4 << 0x18\n 28157: a3 = a3 | a4\n 28160: a1 = a1 | a3\n 28163: a2 = u8 [a0 + 0x5]\n 28166: a3 = u8 [a0 + 0x4]\n 28169: a4 = u8 [a0 + 0x6]\n 28172: a5 = u8 [a0 + 0x7]\n 28175: a2 = a2 << 0x8\n 28178: a2 = a2 | a3\n 28181: a4 = a4 << 0x10\n 28184: a5 = a5 << 0x18\n 28187: a4 = a4 | a5\n 28190: a2 = a2 | a4\n 28193: a2 = a2 << 0x20\n 28196: t0 = a2 | a1\n 28199: a2 = u8 [a0 + 0x9]\n 28202: a3 = u8 [a0 + 0x8]\n 28205: a4 = u8 [a0 + 0xa]\n 28208: a5 = u8 [a0 + 0xb]\n 28211: a2 = a2 << 0x8\n 28214: a2 = a2 | a3\n 28217: a4 = a4 << 0x10\n 28220: a5 = a5 << 0x18\n 28223: a4 = a4 | a5\n 28226: a2 = a2 | a4\n 28229: a3 = u8 [a0 + 0xd]\n 28232: a4 = u8 [a0 + 0xc]\n 28235: a5 = u8 [a0 + 0xe]\n 28238: a1 = u8 [a0 + 0xf]\n 28241: a3 = a3 << 0x8\n 28244: a3 = a3 | a4\n 28247: a5 = a5 << 0x10\n 28250: a1 = a1 << 0x18\n 28253: a1 = a1 | a5\n 28256: a1 = a1 | a3\n 28259: a1 = a1 << 0x20\n 28262: t1 = a1 | a2\n 28265: a1 = u8 [a0 + 0x11]\n 28268: a3 = u8 [a0 + 0x10]\n 28271: a4 = u8 [a0 + 0x12]\n 28274: a5 = u8 [a0 + 0x13]\n 28277: a1 = a1 << 0x8\n 28280: a1 = a1 | a3\n 28283: a4 = a4 << 0x10\n 28286: a5 = a5 << 0x18\n 28289: a4 = a4 | a5\n 28292: a1 = a1 | a4\n 28295: a3 = u8 [a0 + 0x15]\n 28298: a4 = u8 [a0 + 0x14]\n 28301: a5 = u8 [a0 + 0x16]\n 28304: a2 = u8 [a0 + 0x17]\n 28307: a3 = a3 << 0x8\n 28310: a3 = a3 | a4\n 28313: a5 = a5 << 0x10\n 28316: a2 = a2 << 0x18\n 28319: a2 = a2 | a5\n 28322: a2 = a2 | a3\n 28325: a2 = a2 << 0x20\n 28328: a3 = a2 | a1\n 28331: a1 = u8 [a0 + 0x19]\n 28334: a2 = u8 [a0 + 0x18]\n 28337: a4 = u8 [a0 + 0x1a]\n 28340: a5 = u8 [a0 + 0x1b]\n 28343: a1 = a1 << 0x8\n 28346: a1 = a1 | a2\n 28349: a4 = a4 << 0x10\n 28352: a5 = a5 << 0x18\n 28355: a4 = a4 | a5\n 28358: a1 = a1 | a4\n 28361: a2 = u8 [a0 + 0x1d]\n 28364: a4 = u8 [a0 + 0x1c]\n 28367: a5 = u8 [a0 + 0x1e]\n 28370: a0 = u8 [a0 + 0x1f]\n 28373: a2 = a2 << 0x8\n 28376: a2 = a2 | a4\n 28379: a5 = a5 << 0x10\n 28382: a0 = a0 << 0x18\n 28385: a0 = a0 | a5\n 28388: a0 = a0 | a2\n 28391: a0 = a0 << 0x20\n 28394: a0 = a0 | a1\n 28397: a0 = reverse a0\n 28399: a1 = reverse a3\n 28401: a2 = reverse t1\n 28403: a3 = reverse t0\n 28405: u64 [s0 + 0x18] = a3\n 28408: u64 [s0 + 0x10] = a2\n 28411: u64 [s0 + 0x8] = a1\n 28414: u64 [s0] = a0\n 28416: ra = u64 [sp + 0x8]\n 28419: s0 = u64 [sp]\n 28421: sp = sp + 0x10\n 28424: ret\n      : @417 (gas: 1)\n 28426: trap\n      : @418 (gas: 20)\n 28427: sp = sp + 0xfffffffffffffe58\n 28431: u64 [sp + 0x1a0] = ra\n 28435: u64 [sp + 0x198] = s0\n 28439: u64 [sp + 0x190] = s1\n 28443: a3 = u64 [a1 + 0x18]\n 28446: a4 = u64 [a1 + 0x10]\n 28449: a5 = u64 [a1 + 0x8]\n 28452: s0 = u64 [a1]\n 28454: u64 [sp + 0x180] = a3\n 28458: u64 [sp + 0x150] = a5\n 28462: a1 = a5 | a3\n 28465: a3 = s0 | a4\n 28468: a3 = a3 | a1\n 28471: a3 = a3 >> 0x20\n 28474: u64 [sp + 0x178] = a4\n 28478: a1 = a1 | a4\n 28481: a1 = a1 << 0x20\n 28484: a1 = a1 | a3\n 28487: u64 [sp] = a0\n 28489: jump @434 if a1 != 0\n      : @419 (gas: 12)\n 28493: a0 = u64 [a2 + 0x18]\n 28496: u64 [sp + 0x188] = a0\n 28500: a0 = u64 [a2 + 0x10]\n 28503: u64 [sp + 0x168] = a0\n 28507: a0 = u64 [a2 + 0x8]\n 28510: u64 [sp + 0x170] = a0\n 28514: s1 = u64 [a2]\n 28516: u64 [sp + 0x138] = s0\n 28520: i32 a0 = s0 + 0\n 28522: a1 = 0x20\n 28525: s0 = 0x20\n 28528: ra = 368, jump @0\n      : @420 [@dyn 184] (gas: 43)\n 28534: u8 [a0 + 0x1f] = s0\n 28537: a3 = u64 [sp + 0x168]\n 28541: a1 = s1 | a3\n 28544: a2 = u64 [sp + 0x188]\n 28548: a5 = u64 [sp + 0x170]\n 28552: a2 = a2 | a5\n 28555: a1 = a1 | a2\n 28558: a1 = a1 >> 0x20\n 28561: a2 = a2 | a3\n 28564: a2 = a2 << 0x20\n 28567: a1 = a1 | a2\n 28570: u8 [a0 + 30] = 0\n 28573: u8 [a0 + 29] = 0\n 28576: u8 [a0 + 28] = 0\n 28579: u8 [a0 + 27] = 0\n 28582: u8 [a0 + 26] = 0\n 28585: u8 [a0 + 25] = 0\n 28588: u8 [a0 + 24] = 0\n 28591: u8 [a0 + 23] = 0\n 28594: u8 [a0 + 22] = 0\n 28597: u8 [a0 + 21] = 0\n 28600: u8 [a0 + 20] = 0\n 28603: u8 [a0 + 19] = 0\n 28606: u8 [a0 + 18] = 0\n 28609: u8 [a0 + 17] = 0\n 28612: u8 [a0 + 16] = 0\n 28615: u8 [a0 + 15] = 0\n 28618: u8 [a0 + 14] = 0\n 28621: u8 [a0 + 13] = 0\n 28624: u8 [a0 + 12] = 0\n 28627: u8 [a0 + 11] = 0\n 28630: u8 [a0 + 10] = 0\n 28633: u8 [a0 + 9] = 0\n 28636: u8 [a0 + 8] = 0\n 28639: u8 [a0 + 7] = 0\n 28642: u8 [a0 + 6] = 0\n 28645: u8 [a0 + 5] = 0\n 28648: u8 [a0 + 4] = 0\n 28651: u8 [a0 + 3] = 0\n 28654: u8 [a0 + 2] = 0\n 28657: u8 [a0 + 1] = 0\n 28660: u8 [a0 + 0] = 0\n 28662: jump @434 if a1 != 0\n      : @421 (gas: 19)\n 28666: a4 = s1\n 28668: a0 = u64 [sp + 0x138]\n 28672: a1 = a0 + 0x20\n 28675: u64 [sp + 0x160] = a1\n 28679: a0 = a1 <u a0\n 28682: a1 = u64 [sp + 0x150]\n 28686: s1 = a1 + a0\n 28689: a1 = s1 <u a1\n 28692: a1 = a0 if a0 == 0\n 28695: a0 = u64 [sp + 0x178]\n 28699: s0 = a0 + a1\n 28702: a0 = s0 <u a0\n 28705: a1 = u64 [sp + 0x180]\n 28709: a0 = a0 + a1\n 28712: u64 [sp + 0x158] = a0\n 28716: u64 [sp + 0x118] = a4\n 28720: i32 a0 = a4 + 0\n 28722: a1 = 0x20\n 28725: ra = 370, jump @0\n      : @422 [@dyn 185] (gas: 12)\n 28731: t0 = u64 [sp + 0x160]\n 28735: a1 = t0 | s0\n 28738: u64 [sp + 0x148] = s1\n 28742: a2 = u64 [sp + 0x158]\n 28746: a2 = a2 | s1\n 28749: a1 = a1 | a2\n 28752: a1 = a1 >> 0x20\n 28755: u64 [sp + 0x140] = s0\n 28759: a2 = a2 | s0\n 28762: a2 = a2 << 0x20\n 28765: a1 = a1 | a2\n 28768: jump @434 if a1 != 0\n      : @423 (gas: 93)\n 28772: a1 = u8 [a0 + 0x19]\n 28775: a2 = u8 [a0 + 0x18]\n 28778: a3 = u8 [a0 + 0x1a]\n 28781: a4 = u8 [a0 + 0x1b]\n 28784: a1 = a1 << 0x8\n 28787: a1 = a1 | a2\n 28790: a3 = a3 << 0x10\n 28793: a4 = a4 << 0x18\n 28796: a3 = a3 | a4\n 28799: a1 = a1 | a3\n 28802: a2 = u8 [a0 + 0x1d]\n 28805: a3 = u8 [a0 + 0x1c]\n 28808: a4 = u8 [a0 + 0x1e]\n 28811: a5 = u8 [a0 + 0x1f]\n 28814: a2 = a2 << 0x8\n 28817: a2 = a2 | a3\n 28820: a4 = a4 << 0x10\n 28823: a5 = a5 << 0x18\n 28826: a4 = a4 | a5\n 28829: a2 = a2 | a4\n 28832: a2 = a2 << 0x20\n 28835: a1 = a1 | a2\n 28838: u64 [sp + 0x128] = a1\n 28842: a1 = u8 [a0 + 0x11]\n 28845: a2 = u8 [a0 + 0x10]\n 28848: a3 = u8 [a0 + 0x12]\n 28851: a4 = u8 [a0 + 0x13]\n 28854: a1 = a1 << 0x8\n 28857: a1 = a1 | a2\n 28860: a3 = a3 << 0x10\n 28863: a4 = a4 << 0x18\n 28866: a3 = a3 | a4\n 28869: a1 = a1 | a3\n 28872: a2 = u8 [a0 + 0x15]\n 28875: a3 = u8 [a0 + 0x14]\n 28878: a4 = u8 [a0 + 0x16]\n 28881: a5 = u8 [a0 + 0x17]\n 28884: a2 = a2 << 0x8\n 28887: a2 = a2 | a3\n 28890: a4 = a4 << 0x10\n 28893: a5 = a5 << 0x18\n 28896: a4 = a4 | a5\n 28899: a2 = a2 | a4\n 28902: a2 = a2 << 0x20\n 28905: a1 = a1 | a2\n 28908: u64 [sp + 0x130] = a1\n 28912: a1 = u8 [a0 + 0x9]\n 28915: a2 = u8 [a0 + 0x8]\n 28918: a3 = u8 [a0 + 0xa]\n 28921: a4 = u8 [a0 + 0xb]\n 28924: a1 = a1 << 0x8\n 28927: a1 = a1 | a2\n 28930: a3 = a3 << 0x10\n 28933: a4 = a4 << 0x18\n 28936: a3 = a3 | a4\n 28939: a1 = a1 | a3\n 28942: a2 = u8 [a0 + 0xd]\n 28945: a3 = u8 [a0 + 0xc]\n 28948: a4 = u8 [a0 + 0xe]\n 28951: a5 = u8 [a0 + 0xf]\n 28954: a2 = a2 << 0x8\n 28957: a2 = a2 | a3\n 28960: a4 = a4 << 0x10\n 28963: a5 = a5 << 0x18\n 28966: a4 = a4 | a5\n 28969: a2 = a2 | a4\n 28972: a2 = a2 << 0x20\n 28975: s1 = a2 | a1\n 28978: a1 = u8 [a0 + 0x1]\n 28981: a2 = u8 [a0]\n 28983: a3 = u8 [a0 + 0x2]\n 28986: a4 = u8 [a0 + 0x3]\n 28989: a1 = a1 << 0x8\n 28992: a1 = a1 | a2\n 28995: a3 = a3 << 0x10\n 28998: a4 = a4 << 0x18\n 29001: a3 = a3 | a4\n 29004: a1 = a1 | a3\n 29007: a2 = u8 [a0 + 0x5]\n 29010: a3 = u8 [a0 + 0x4]\n 29013: a4 = u8 [a0 + 0x6]\n 29016: a0 = u8 [a0 + 0x7]\n 29019: a2 = a2 << 0x8\n 29022: a2 = a2 | a3\n 29025: a4 = a4 << 0x10\n 29028: a0 = a0 << 0x18\n 29031: a0 = a0 | a4\n 29034: a0 = a0 | a2\n 29037: a0 = a0 << 0x20\n 29040: s0 = a0 | a1\n 29043: i32 a0 = t0 + 0\n 29045: a1 = 0x20\n 29048: ra = 372, jump @0\n      : @424 [@dyn 186] (gas: 82)\n 29054: a2 = u64 [sp + 0x130]\n 29058: u8 [a0 + 0x10] = a2\n 29061: a1 = s1 >> 0x38\n 29064: u8 [a0 + 0xf] = a1\n 29067: a1 = s1 >> 0x30\n 29070: u8 [a0 + 0xe] = a1\n 29073: a1 = s1 >> 0x28\n 29076: u8 [a0 + 0xd] = a1\n 29079: a1 = s1 >> 0x20\n 29082: u8 [a0 + 0xc] = a1\n 29085: a1 = s1 >> 0x18\n 29088: u8 [a0 + 0xb] = a1\n 29091: a1 = s1 >> 0x10\n 29094: u8 [a0 + 0xa] = a1\n 29097: a1 = s1 >> 0x8\n 29100: u8 [a0 + 0x9] = a1\n 29103: u8 [a0 + 0x8] = s1\n 29106: a1 = s0 >> 0x38\n 29109: u8 [a0 + 0x7] = a1\n 29112: a1 = s0 >> 0x30\n 29115: u8 [a0 + 0x6] = a1\n 29118: a1 = s0 >> 0x28\n 29121: u8 [a0 + 0x5] = a1\n 29124: a1 = s0 >> 0x20\n 29127: u8 [a0 + 0x4] = a1\n 29130: a1 = s0 >> 0x18\n 29133: u8 [a0 + 0x3] = a1\n 29136: a1 = s0 >> 0x10\n 29139: u8 [a0 + 0x2] = a1\n 29142: a1 = s0 >> 0x8\n 29145: u8 [a0 + 0x1] = a1\n 29148: u8 [a0] = s0\n 29150: a4 = u64 [sp + 0x128]\n 29154: u8 [a0 + 0x18] = a4\n 29157: a1 = a2 >> 0x38\n 29160: u8 [a0 + 0x17] = a1\n 29163: a1 = a2 >> 0x30\n 29166: u8 [a0 + 0x16] = a1\n 29169: a1 = a2 >> 0x28\n 29172: u8 [a0 + 0x15] = a1\n 29175: a1 = a2 >> 0x20\n 29178: u8 [a0 + 0x14] = a1\n 29181: a1 = a2 >> 0x18\n 29184: u8 [a0 + 0x13] = a1\n 29187: a1 = a2 >> 0x10\n 29190: u8 [a0 + 0x12] = a1\n 29193: a1 = a2 >> 0x8\n 29196: a5 = a2\n 29198: u8 [a0 + 0x11] = a1\n 29201: a1 = a4 >> 0x38\n 29204: u8 [a0 + 0x1f] = a1\n 29207: a1 = a4 >> 0x30\n 29210: u8 [a0 + 0x1e] = a1\n 29213: a1 = a4 >> 0x28\n 29216: u8 [a0 + 0x1d] = a1\n 29219: a1 = a4 >> 0x20\n 29222: u8 [a0 + 0x1c] = a1\n 29225: a1 = a4 >> 0x18\n 29228: u8 [a0 + 0x1b] = a1\n 29231: a1 = a4 >> 0x10\n 29234: u8 [a0 + 0x1a] = a1\n 29237: a1 = a4 >> 0x8\n 29240: u8 [a0 + 0x19] = a1\n 29243: a1 = u64 [sp + 0x138]\n 29247: t2 = a1 + 0x40\n 29250: a2 = t2 <u a1\n 29253: a3 = u64 [sp + 0x150]\n 29257: ra = a3 + a2\n 29260: a3 = ra <u a3\n 29263: a3 = a2 if a2 == 0\n 29266: a2 = s0 | a5\n 29269: t1 = a4\n 29271: a4 = a4 | s1\n 29274: a4 = a4 | a2\n 29277: a5 = u64 [sp + 0x178]\n 29281: a3 = a3 + a5\n 29284: u64 [sp + 0x120] = a3\n 29288: a3 = a3 <u a5\n 29291: t0 = u64 [sp + 0x180]\n 29295: a5 = t0 + a3\n 29298: u64 [sp + 0x150] = a5\n 29302: jump @432 if a4 == 0\n      : @425 (gas: 20)\n 29306: a0 = 0\n 29308: a1 = 0\n 29310: u64 [sp + 312] = 0\n 29314: a2 = 0\n 29316: a3 = reverse s0\n 29318: u64 [sp + 0x20] = a3\n 29321: a3 = reverse s1\n 29323: u64 [sp + 0x18] = a3\n 29326: a3 = u64 [sp + 0x130]\n 29330: a3 = reverse a3\n 29332: u64 [sp + 0x10] = a3\n 29335: a3 = reverse t1\n 29337: u64 [sp + 0x8] = a3\n 29340: a4 = 0xffffffe0\n 29350: u64 [sp + 0x28] = a4\n 29353: s0 = u64 [sp + 0x168]\n 29357: t0 = u64 [sp + 0x170]\n 29361: a3 = u64 [sp + 0x118]\n 29365: t1 = u64 [sp + 0x120]\n 29369: fallthrough\n      : @426 (gas: 16)\n 29370: u64 [sp + 0x120] = a2\n 29374: u64 [sp + 0x128] = a1\n 29378: u64 [sp + 0x130] = a0\n 29382: a4 = u64 [sp + 0x188]\n 29386: a4 = a4 | s0\n 29389: s1 = u64 [sp + 0x28]\n 29392: a5 = a3 <u s1\n 29395: u64 [sp + 0x170] = t0\n 29399: a5 = 0 if t0 != 0\n 29401: a5 = 0 if a4 != 0\n 29403: a0 = u64 [sp + 0x150]\n 29407: u64 [sp + 0x118] = a0\n 29411: u64 [sp + 0x110] = t1\n 29415: u64 [sp + 0x108] = ra\n 29419: u64 [sp + 0x180] = t2\n 29423: jump @434 if a5 == 0\n      : @427 (gas: 7)\n 29427: u64 [sp + 0x168] = s0\n 29431: a0 = a3 + 0x20\n 29434: u64 [sp + 0x178] = a0\n 29438: i32 a0 = a0 + 0\n 29440: a1 = 0x20\n 29443: s0 = a3\n 29445: ra = 374, jump @0\n      : @428 [@dyn 187] (gas: 9)\n 29451: a1 = u64 [sp + 0x140]\n 29455: a2 = u64 [sp + 0x158]\n 29459: a1 = a1 | a2\n 29462: a2 = u64 [sp + 0x160]\n 29466: a2 = a2 <u s1\n 29469: a3 = u64 [sp + 0x148]\n 29473: a2 = 0 if a3 != 0\n 29475: a2 = 0 if a1 != 0\n 29477: jump @434 if a2 == 0\n      : @429 (gas: 81)\n 29481: a1 = u64 [sp + 0x178]\n 29485: a2 = a1 <u s0\n 29488: a1 = u64 [sp + 0x170]\n 29492: a3 = a1 + a2\n 29495: u64 [sp + 0x160] = a3\n 29499: a1 = a3 <u a1\n 29502: a1 = a2 if a2 == 0\n 29505: a2 = u8 [a0]\n 29507: u64 [sp + 0x158] = a2\n 29511: a2 = u8 [a0 + 0x1]\n 29514: u64 [sp + 0x150] = a2\n 29518: a2 = u8 [a0 + 0x2]\n 29521: u64 [sp + 0x148] = a2\n 29525: a2 = u8 [a0 + 0x3]\n 29528: u64 [sp + 0x140] = a2\n 29532: a2 = u8 [a0 + 0x4]\n 29535: u64 [sp + 0x100] = a2\n 29539: a2 = u8 [a0 + 0x5]\n 29542: u64 [sp + 0xf8] = a2\n 29546: a2 = u8 [a0 + 0x6]\n 29549: u64 [sp + 0xf0] = a2\n 29553: a2 = u8 [a0 + 0x7]\n 29556: u64 [sp + 0xe8] = a2\n 29560: a2 = u8 [a0 + 0x8]\n 29563: u64 [sp + 0xe0] = a2\n 29567: a2 = u8 [a0 + 0x9]\n 29570: u64 [sp + 0xd8] = a2\n 29574: a2 = u8 [a0 + 0xa]\n 29577: u64 [sp + 0xd0] = a2\n 29581: a2 = u8 [a0 + 0xb]\n 29584: u64 [sp + 0xc8] = a2\n 29588: a2 = u8 [a0 + 0xc]\n 29591: u64 [sp + 0xc0] = a2\n 29595: a2 = u8 [a0 + 0xd]\n 29598: u64 [sp + 0xb8] = a2\n 29602: a2 = u8 [a0 + 0xe]\n 29605: u64 [sp + 0xb0] = a2\n 29609: a2 = u8 [a0 + 0xf]\n 29612: u64 [sp + 0xa8] = a2\n 29616: a2 = u8 [a0 + 0x10]\n 29619: u64 [sp + 0xa0] = a2\n 29623: a2 = u8 [a0 + 0x11]\n 29626: u64 [sp + 0x98] = a2\n 29630: a2 = u8 [a0 + 0x12]\n 29633: u64 [sp + 0x90] = a2\n 29637: a2 = u8 [a0 + 0x13]\n 29640: u64 [sp + 0x88] = a2\n 29644: a2 = u8 [a0 + 0x14]\n 29647: u64 [sp + 0x80] = a2\n 29651: a2 = u8 [a0 + 0x15]\n 29654: u64 [sp + 0x78] = a2\n 29657: a2 = u8 [a0 + 0x16]\n 29660: u64 [sp + 0x70] = a2\n 29663: a2 = u8 [a0 + 0x17]\n 29666: u64 [sp + 0x68] = a2\n 29669: a2 = u8 [a0 + 0x18]\n 29672: u64 [sp + 0x60] = a2\n 29675: a2 = u8 [a0 + 0x19]\n 29678: u64 [sp + 0x58] = a2\n 29681: a2 = u8 [a0 + 0x1a]\n 29684: u64 [sp + 0x50] = a2\n 29687: a2 = u8 [a0 + 0x1b]\n 29690: u64 [sp + 0x48] = a2\n 29693: a2 = u8 [a0 + 0x1c]\n 29696: u64 [sp + 0x40] = a2\n 29699: a2 = u8 [a0 + 0x1d]\n 29702: u64 [sp + 0x38] = a2\n 29705: a2 = u8 [a0 + 0x1e]\n 29708: u64 [sp + 0x30] = a2\n 29711: s1 = u8 [a0 + 0x1f]\n 29714: s0 = u64 [sp + 0x168]\n 29718: a1 = a1 + s0\n 29721: u64 [sp + 0x170] = a1\n 29725: a0 = a1 <u s0\n 29728: a1 = u64 [sp + 0x188]\n 29732: a1 = a1 + a0\n 29735: u64 [sp + 0x188] = a1\n 29739: s0 = u64 [sp + 0x180]\n 29743: i32 a0 = s0 + 0\n 29745: a1 = 0x20\n 29748: ra = 376, jump @0\n      : @430 [@dyn 188] (gas: 120)\n 29754: u8 [a0 + 0x1f] = s1\n 29757: a1 = u64 [sp + 0x30]\n 29760: u8 [a0 + 0x1e] = a1\n 29763: a1 = u64 [sp + 0x38]\n 29766: u8 [a0 + 0x1d] = a1\n 29769: a1 = u64 [sp + 0x40]\n 29772: u8 [a0 + 0x1c] = a1\n 29775: a1 = u64 [sp + 0x48]\n 29778: u8 [a0 + 0x1b] = a1\n 29781: a1 = u64 [sp + 0x50]\n 29784: u8 [a0 + 0x1a] = a1\n 29787: a1 = u64 [sp + 0x58]\n 29790: u8 [a0 + 0x19] = a1\n 29793: a1 = u64 [sp + 0x60]\n 29796: u8 [a0 + 0x18] = a1\n 29799: a1 = u64 [sp + 0x68]\n 29802: u8 [a0 + 0x17] = a1\n 29805: a1 = u64 [sp + 0x70]\n 29808: u8 [a0 + 0x16] = a1\n 29811: a1 = u64 [sp + 0x78]\n 29814: u8 [a0 + 0x15] = a1\n 29817: a1 = u64 [sp + 0x80]\n 29821: u8 [a0 + 0x14] = a1\n 29824: a1 = u64 [sp + 0x88]\n 29828: u8 [a0 + 0x13] = a1\n 29831: a1 = u64 [sp + 0x90]\n 29835: u8 [a0 + 0x12] = a1\n 29838: a1 = u64 [sp + 0x98]\n 29842: u8 [a0 + 0x11] = a1\n 29845: a1 = u64 [sp + 0xa0]\n 29849: u8 [a0 + 0x10] = a1\n 29852: a1 = u64 [sp + 0xa8]\n 29856: u8 [a0 + 0xf] = a1\n 29859: a1 = u64 [sp + 0xb0]\n 29863: u8 [a0 + 0xe] = a1\n 29866: a1 = u64 [sp + 0xb8]\n 29870: u8 [a0 + 0xd] = a1\n 29873: a1 = u64 [sp + 0xc0]\n 29877: u8 [a0 + 0xc] = a1\n 29880: a1 = u64 [sp + 0xc8]\n 29884: u8 [a0 + 0xb] = a1\n 29887: a1 = u64 [sp + 0xd0]\n 29891: u8 [a0 + 0xa] = a1\n 29894: a1 = u64 [sp + 0xd8]\n 29898: u8 [a0 + 0x9] = a1\n 29901: a1 = u64 [sp + 0xe0]\n 29905: u8 [a0 + 0x8] = a1\n 29908: a1 = u64 [sp + 0xe8]\n 29912: u8 [a0 + 0x7] = a1\n 29915: a1 = u64 [sp + 0xf0]\n 29919: u8 [a0 + 0x6] = a1\n 29922: a1 = u64 [sp + 0xf8]\n 29926: u8 [a0 + 0x5] = a1\n 29929: a1 = u64 [sp + 0x100]\n 29933: u8 [a0 + 0x4] = a1\n 29936: a1 = u64 [sp + 0x140]\n 29940: u8 [a0 + 0x3] = a1\n 29943: a1 = u64 [sp + 0x148]\n 29947: u8 [a0 + 0x2] = a1\n 29950: a1 = u64 [sp + 0x150]\n 29954: u8 [a0 + 0x1] = a1\n 29957: a1 = u64 [sp + 0x158]\n 29961: u8 [a0] = a1\n 29963: t1 = u64 [sp + 0x130]\n 29967: t1 = t1 + 0x1\n 29970: a0 = t1 <u 0x1\n 29973: t2 = u64 [sp + 0x128]\n 29977: t2 = t2 + a0\n 29980: a0 = t1 | t2\n 29983: a4 = a0 <u 0x1\n 29986: a0 = u64 [sp + 0x138]\n 29990: a4 = a4 + a0\n 29993: a0 = a4 <u a0\n 29996: ra = u64 [sp + 0x120]\n 30000: ra = ra + a0\n 30003: a0 = u64 [sp + 0x8]\n 30006: a0 = t1 <u a0\n 30009: a2 = u64 [sp + 0x10]\n 30012: a1 = t2 ^ a2\n 30015: a2 = t2 <u a2\n 30018: a2 = a0 if a1 == 0\n 30021: a0 = u64 [sp + 0x18]\n 30024: s1 = a4 <u a0\n 30027: a3 = u64 [sp + 0x20]\n 30030: a1 = ra ^ a3\n 30033: a5 = ra <u a3\n 30036: a5 = s1 if a1 == 0\n 30039: a0 = a0 ^ a4\n 30042: a1 = a1 | a0\n 30045: a0 = s0 + 0x20\n 30048: u64 [sp + 0x168] = a0\n 30052: a5 = a2 if a1 == 0\n 30055: a2 = a0 <u s0\n 30058: s1 = u64 [sp + 0x108]\n 30062: a0 = s1 + a2\n 30065: u64 [sp + 0x130] = a0\n 30069: a3 = a0 <u s1\n 30072: a3 = a2 if a2 == 0\n 30075: a1 = u64 [sp + 0x110]\n 30079: a2 = a1 + a3\n 30082: a3 = a2 <u a1\n 30085: a0 = u64 [sp + 0x118]\n 30089: a3 = a3 + a0\n 30092: u64 [sp + 0x150] = a3\n 30096: u64 [sp + 0x138] = a4\n 30100: a3 = u64 [sp + 0x178]\n 30104: t0 = u64 [sp + 0x160]\n 30108: s0 = u64 [sp + 0x170]\n 30112: a4 = u64 [sp + 0x180]\n 30116: u64 [sp + 0x160] = a4\n 30120: u64 [sp + 0x148] = s1\n 30124: u64 [sp + 0x140] = a1\n 30128: u64 [sp + 0x158] = a0\n 30132: a0 = t1\n 30134: t1 = a2\n 30136: a1 = t2\n 30138: t2 = u64 [sp + 0x168]\n 30142: a2 = ra\n 30144: ra = u64 [sp + 0x130]\n 30148: jump @426 if a5 != 0\n      : @431 (gas: 1)\n 30152: jump @433\n      : @432 (gas: 2)\n 30154: t1 = u64 [sp + 0x120]\n 30158: fallthrough\n      : @433 (gas: 11)\n 30159: a4 = u64 [sp]\n 30161: u64 [a4] = t2\n 30163: u64 [a4 + 0x8] = ra\n 30166: u64 [a4 + 0x10] = t1\n 30169: a0 = u64 [sp + 0x150]\n 30173: u64 [a4 + 0x18] = a0\n 30176: ra = u64 [sp + 0x1a0]\n 30180: s0 = u64 [sp + 0x198]\n 30184: s1 = u64 [sp + 0x190]\n 30188: sp = sp + 0x1a8\n 30192: ret\n      : @434 (gas: 1)\n 30194: trap\n      : @435 (gas: 8)\n 30195: a0 = u64 [sp + 0xf0]\n 30199: a1 = u64 [sp + 0xf8]\n 30203: a2 = u64 [sp + 0xe8]\n 30207: a3 = u64 [sp + 0xe0]\n 30211: a1 = a1 | a2\n 30214: a0 = a0 | a3\n 30217: a0 = a0 | a1\n 30220: jump @443 if a0 != 0\n      : @436 (gas: 2)\n 30224: a0 = i32 [0x20114]\n 30229: jump @443 if a0 <=u 3\n      : @437 (gas: 7)\n 30234: u64 [sp + 184] = 0\n 30238: u64 [sp + 176] = 0\n 30242: u64 [sp + 160] = 0x1\n 30247: a0 = sp + 0xc0\n 30251: a1 = sp + 0xa0\n 30255: u64 [sp + 168] = 0\n 30259: ra = 378, jump @1199\n      : @438 [@dyn 189] (gas: 11)\n 30266: a0 = u64 [sp + 0xc0]\n 30270: u64 [sp + 0x38] = a0\n 30273: a0 = u64 [sp + 0xc8]\n 30277: u64 [sp + 0x30] = a0\n 30280: a0 = u64 [sp + 0xd0]\n 30284: u64 [sp + 0x28] = a0\n 30287: a0 = u64 [sp + 0xd8]\n 30291: u64 [sp + 0x20] = a0\n 30294: a0 = 0x40\n 30297: a1 = 0x20\n 30300: ra = 380, jump @0\n      : @439 [@dyn 190] (gas: 111)\n 30306: a1 = u8 [a0 + 0x1]\n 30309: a2 = u8 [a0]\n 30311: a3 = u8 [a0 + 0x2]\n 30314: a4 = u8 [a0 + 0x3]\n 30317: a1 = a1 << 0x8\n 30320: a1 = a1 | a2\n 30323: a3 = a3 << 0x10\n 30326: a4 = a4 << 0x18\n 30329: a3 = a3 | a4\n 30332: a1 = a1 | a3\n 30335: a2 = u8 [a0 + 0x5]\n 30338: a3 = u8 [a0 + 0x4]\n 30341: a4 = u8 [a0 + 0x6]\n 30344: a5 = u8 [a0 + 0x7]\n 30347: a2 = a2 << 0x8\n 30350: a2 = a2 | a3\n 30353: a4 = a4 << 0x10\n 30356: a5 = a5 << 0x18\n 30359: a4 = a4 | a5\n 30362: a2 = a2 | a4\n 30365: a2 = a2 << 0x20\n 30368: t0 = a2 | a1\n 30371: a2 = u8 [a0 + 0x9]\n 30374: a3 = u8 [a0 + 0x8]\n 30377: a4 = u8 [a0 + 0xa]\n 30380: a5 = u8 [a0 + 0xb]\n 30383: a2 = a2 << 0x8\n 30386: a2 = a2 | a3\n 30389: a4 = a4 << 0x10\n 30392: a5 = a5 << 0x18\n 30395: a4 = a4 | a5\n 30398: a2 = a2 | a4\n 30401: a3 = u8 [a0 + 0xd]\n 30404: a4 = u8 [a0 + 0xc]\n 30407: a5 = u8 [a0 + 0xe]\n 30410: s1 = u8 [a0 + 0xf]\n 30413: a3 = a3 << 0x8\n 30416: a3 = a3 | a4\n 30419: a5 = a5 << 0x10\n 30422: s1 = s1 << 0x18\n 30425: a5 = a5 | s1\n 30428: a3 = a3 | a5\n 30431: a3 = a3 << 0x20\n 30434: a2 = a2 | a3\n 30437: a3 = u8 [a0 + 0x11]\n 30440: a4 = u8 [a0 + 0x10]\n 30443: a5 = u8 [a0 + 0x12]\n 30446: s1 = u8 [a0 + 0x13]\n 30449: a3 = a3 << 0x8\n 30452: a3 = a3 | a4\n 30455: a5 = a5 << 0x10\n 30458: s1 = s1 << 0x18\n 30461: a5 = a5 | s1\n 30464: a3 = a3 | a5\n 30467: a4 = u8 [a0 + 0x15]\n 30470: a5 = u8 [a0 + 0x14]\n 30473: s1 = u8 [a0 + 0x16]\n 30476: a1 = u8 [a0 + 0x17]\n 30479: a4 = a4 << 0x8\n 30482: a4 = a4 | a5\n 30485: s1 = s1 << 0x10\n 30488: a1 = a1 << 0x18\n 30491: a1 = a1 | s1\n 30494: a1 = a1 | a4\n 30497: a1 = a1 << 0x20\n 30500: a3 = a3 | a1\n 30503: a1 = u8 [a0 + 0x19]\n 30506: a4 = u8 [a0 + 0x18]\n 30509: a5 = u8 [a0 + 0x1a]\n 30512: s1 = u8 [a0 + 0x1b]\n 30515: a1 = a1 << 0x8\n 30518: a1 = a1 | a4\n 30521: a5 = a5 << 0x10\n 30524: s1 = s1 << 0x18\n 30527: a5 = a5 | s1\n 30530: a1 = a1 | a5\n 30533: a4 = u8 [a0 + 0x1d]\n 30536: a5 = u8 [a0 + 0x1c]\n 30539: s1 = u8 [a0 + 0x1e]\n 30542: a0 = u8 [a0 + 0x1f]\n 30545: a4 = a4 << 0x8\n 30548: a4 = a4 | a5\n 30551: s1 = s1 << 0x10\n 30554: a0 = a0 << 0x18\n 30557: a0 = a0 | s1\n 30560: a0 = a0 | a4\n 30563: a0 = a0 << 0x20\n 30566: a0 = a0 | a1\n 30569: a4 = reverse a0\n 30571: u64 [sp + 0x8] = a4\n 30574: a3 = reverse a3\n 30576: u64 [sp + 0x10] = a3\n 30579: a1 = reverse a2\n 30581: u64 [sp + 0x18] = a1\n 30584: s1 = reverse t0\n 30586: a0 = u64 [sp + 0x20]\n 30589: u64 [sp + 0x58] = a0\n 30592: a0 = u64 [sp + 0x28]\n 30595: u64 [sp + 0x50] = a0\n 30598: a0 = u64 [sp + 0x30]\n 30601: u64 [sp + 0x48] = a0\n 30604: a0 = u64 [sp + 0x38]\n 30607: u64 [sp + 0x40] = a0\n 30610: u64 [sp + 0x78] = s1\n 30613: u64 [sp + 0x70] = a1\n 30616: u64 [sp + 0x68] = a3\n 30619: a0 = sp + 0x80\n 30623: a1 = sp + 0x60\n 30626: a2 = sp + 0x40\n 30629: u64 [sp + 0x60] = a4\n 30632: ra = 382, jump @418\n      : @440 [@dyn 191] (gas: 12)\n 30638: a4 = u64 [sp + 0x10]\n 30641: a2 = u64 [sp + 0x8]\n 30644: u64 [sp + 0x38] = s1\n 30647: a0 = a4 | s1\n 30650: s1 = u64 [sp + 0x18]\n 30653: a1 = a2 | s1\n 30656: a1 = a1 | a0\n 30659: a1 = a1 >> 0x20\n 30662: a0 = a0 | s1\n 30665: a0 = a0 << 0x20\n 30668: a0 = a0 | a1\n 30671: jump @442 if a0 != 0\n      : @441 (gas: 29)\n 30674: a0 = u64 [sp + 0x88]\n 30678: a1 = u64 [sp + 0x98]\n 30682: u64 [sp + 0x30] = a1\n 30685: t1 = u64 [sp + 0x80]\n 30689: a1 = u64 [sp + 0x90]\n 30693: t2 = a0 ^ a4\n 30696: a5 = a0 <u a4\n 30699: ra = t1 <u a2\n 30702: a5 = ra if t2 == 0\n 30705: a3 = a1 - s1\n 30708: t2 = a3 - a5\n 30711: t0 = a3 <u a5\n 30714: a3 = a1 <u s1\n 30717: a1 = u64 [sp + 0x38]\n 30720: a5 = u64 [sp + 0x30]\n 30723: a5 = a5 - a1\n 30726: a5 = a5 - a3\n 30729: a5 = a5 - t0\n 30732: a0 = a0 - a4\n 30735: a0 = a0 - ra\n 30738: s1 = t1 - a2\n 30741: a0 = a0 | a5\n 30744: a1 = s1 | t2\n 30747: a1 = a1 | a0\n 30750: a0 = a0 | t2\n 30753: a1 = a1 >> 0x20\n 30756: a0 = a0 << 0x20\n 30759: a0 = a0 | a1\n 30762: jump @445 if a0 == 0\n      : @442 (gas: 1)\n 30765: trap\n      : @443 (gas: 3)\n 30766: a0 = 0\n 30768: a1 = 0\n 30770: ra = 384, jump @0\n      : @444 [@dyn 192] (gas: 5)\n 30776: i32 a1 = a0 + 0\n 30778: a0 = 0x1\n 30781: a2 = 0\n 30783: ecalli 12 // 'seal_return'\n 30785: fallthrough\n      : @445 (gas: 4)\n 30786: i32 a0 = a2 + 0\n 30788: i32 s1 = s1 + 0\n 30790: a1 = s1\n 30792: ra = 386, jump @0\n      : @446 [@dyn 193] (gas: 6)\n 30798: i32 a1 = a0 + 0\n 30800: a0 = 0\n 30802: a2 = s1\n 30804: ra = 0x184\n 30808: ecalli 12 // 'seal_return'\n 30810: fallthrough\n      : @447 [@dyn 194] (gas: 17)\n 30811: sp = sp + 0xffffffffffffff80\n 30814: u64 [sp + 0x78] = ra\n 30817: u64 [sp + 0x70] = s0\n 30820: u64 [sp + 0x68] = s1\n 30823: s0 = sp + 0x80\n 30827: sp = sp & 0xffffffffffffffe0\n 30830: a2 = u64 [a1]\n 30832: u64 [sp + 0x10] = a2\n 30835: a2 = u64 [a1 + 0x8]\n 30838: u64 [sp + 0x8] = a2\n 30841: a2 = u64 [a1 + 0x10]\n 30844: u64 [sp] = a2\n 30846: s1 = u64 [a1 + 0x18]\n 30849: u64 [sp + 0x18] = a0\n 30852: a1 = 0x20\n 30855: a0 = 0\n 30857: ra = 390, jump @0\n      : @448 [@dyn 195] (gas: 70)\n 30863: a1 = reverse s1\n 30865: a2 = u64 [sp]\n 30867: a2 = reverse a2\n 30869: a3 = u64 [sp + 0x8]\n 30872: a3 = reverse a3\n 30874: a4 = u64 [sp + 0x10]\n 30877: a4 = reverse a4\n 30879: a5 = a4 >> 0x38\n 30882: u8 [a0 + 0x1f] = a5\n 30885: a5 = a4 >> 0x30\n 30888: u8 [a0 + 0x1e] = a5\n 30891: a5 = a4 >> 0x28\n 30894: u8 [a0 + 0x1d] = a5\n 30897: a5 = a4 >> 0x20\n 30900: u8 [a0 + 0x1c] = a5\n 30903: a5 = a4 >> 0x18\n 30906: u8 [a0 + 0x1b] = a5\n 30909: a5 = a4 >> 0x10\n 30912: u8 [a0 + 0x1a] = a5\n 30915: a5 = a4 >> 0x8\n 30918: u8 [a0 + 0x19] = a5\n 30921: u8 [a0 + 0x18] = a4\n 30924: a4 = a3 >> 0x38\n 30927: u8 [a0 + 0x17] = a4\n 30930: a4 = a3 >> 0x30\n 30933: u8 [a0 + 0x16] = a4\n 30936: a4 = a3 >> 0x28\n 30939: u8 [a0 + 0x15] = a4\n 30942: a4 = a3 >> 0x20\n 30945: u8 [a0 + 0x14] = a4\n 30948: a4 = a3 >> 0x18\n 30951: u8 [a0 + 0x13] = a4\n 30954: a4 = a3 >> 0x10\n 30957: u8 [a0 + 0x12] = a4\n 30960: a4 = a3 >> 0x8\n 30963: u8 [a0 + 0x11] = a4\n 30966: u8 [a0 + 0x10] = a3\n 30969: a3 = a2 >> 0x38\n 30972: u8 [a0 + 0xf] = a3\n 30975: a3 = a2 >> 0x30\n 30978: u8 [a0 + 0xe] = a3\n 30981: a3 = a2 >> 0x28\n 30984: u8 [a0 + 0xd] = a3\n 30987: a3 = a2 >> 0x20\n 30990: u8 [a0 + 0xc] = a3\n 30993: a3 = a2 >> 0x18\n 30996: u8 [a0 + 0xb] = a3\n 30999: a3 = a2 >> 0x10\n 31002: u8 [a0 + 0xa] = a3\n 31005: a3 = a2 >> 0x8\n 31008: u8 [a0 + 0x9] = a3\n 31011: u8 [a0 + 0x8] = a2\n 31014: a2 = a1 >> 0x38\n 31017: u8 [a0 + 0x7] = a2\n 31020: a2 = a1 >> 0x30\n 31023: u8 [a0 + 0x6] = a2\n 31026: a2 = a1 >> 0x28\n 31029: u8 [a0 + 0x5] = a2\n 31032: a2 = a1 >> 0x20\n 31035: u8 [a0 + 0x4] = a2\n 31038: a2 = a1 >> 0x18\n 31041: u8 [a0 + 0x3] = a2\n 31044: a2 = a1 >> 0x10\n 31047: u8 [a0 + 0x2] = a2\n 31050: a2 = a1 >> 0x8\n 31053: u8 [a0 + 0x1] = a2\n 31056: u8 [a0] = a1\n 31058: a0 = 0x20\n 31061: a1 = 0x20\n 31064: ra = 392, jump @0\n      : @449 [@dyn 196] (gas: 35)\n 31070: u8 [a0 + 31] = 0x4\n 31074: u8 [a0 + 30] = 0\n 31077: u8 [a0 + 29] = 0\n 31080: u8 [a0 + 28] = 0\n 31083: u8 [a0 + 27] = 0\n 31086: u8 [a0 + 26] = 0\n 31089: u8 [a0 + 25] = 0\n 31092: u8 [a0 + 24] = 0\n 31095: u8 [a0 + 23] = 0\n 31098: u8 [a0 + 22] = 0\n 31101: u8 [a0 + 21] = 0\n 31104: u8 [a0 + 20] = 0\n 31107: u8 [a0 + 19] = 0\n 31110: u8 [a0 + 18] = 0\n 31113: u8 [a0 + 17] = 0\n 31116: u8 [a0 + 16] = 0\n 31119: u8 [a0 + 15] = 0\n 31122: u8 [a0 + 14] = 0\n 31125: u8 [a0 + 13] = 0\n 31128: u8 [a0 + 12] = 0\n 31131: u8 [a0 + 11] = 0\n 31134: u8 [a0 + 10] = 0\n 31137: u8 [a0 + 9] = 0\n 31140: u8 [a0 + 8] = 0\n 31143: u8 [a0 + 7] = 0\n 31146: u8 [a0 + 6] = 0\n 31149: u8 [a0 + 5] = 0\n 31152: u8 [a0 + 4] = 0\n 31155: u8 [a0 + 3] = 0\n 31158: u8 [a0 + 2] = 0\n 31161: u8 [a0 + 1] = 0\n 31164: u8 [a0 + 0] = 0\n 31166: a1 = 0x40\n 31169: a0 = 0\n 31171: ra = 394, jump @0\n      : @450 [@dyn 197] (gas: 42)\n 31177: i32 a0 = a0 + 0\n 31179: i32 a2 = sp + 0x40\n 31182: a1 = 0x40\n 31185: ecalli 8 // 'hash_keccak_256'\n 31187: a0 = u64 [sp + 0x58]\n 31190: a1 = u64 [sp + 0x50]\n 31193: a2 = u64 [sp + 0x48]\n 31196: a3 = u64 [sp + 0x40]\n 31199: a0 = reverse a0\n 31201: a1 = reverse a1\n 31203: a2 = reverse a2\n 31205: a3 = reverse a3\n 31207: u64 [sp + 0x38] = a3\n 31210: u64 [sp + 0x30] = a2\n 31213: u64 [sp + 0x28] = a1\n 31216: u64 [sp + 0x20] = a0\n 31219: u64 [sp + 88] = 0\n 31222: u64 [sp + 80] = 0\n 31225: u64 [sp + 72] = 0\n 31228: u64 [sp + 64] = 0\n 31231: u32 [sp + 96] = 0x20\n 31235: i32 a1 = sp + 0x20\n 31238: i32 a3 = sp + 0x40\n 31241: i32 a4 = sp + 0x60\n 31244: a2 = 0xffffffffffffffff\n 31247: a0 = 0\n 31249: ecalli 7 // 'get_storage'\n 31251: a0 = u64 [sp + 0x58]\n 31254: a1 = u64 [sp + 0x50]\n 31257: a2 = u64 [sp + 0x48]\n 31260: a3 = u64 [sp + 0x40]\n 31263: a4 = u64 [sp + 0x18]\n 31266: u64 [a4 + 0x18] = a0\n 31269: u64 [a4 + 0x10] = a1\n 31272: u64 [a4 + 0x8] = a2\n 31275: u64 [a4] = a3\n 31277: sp = s0 + 0xffffffffffffff80\n 31280: ra = u64 [sp + 0x78]\n 31283: s0 = u64 [sp + 0x70]\n 31286: s1 = u64 [sp + 0x68]\n 31289: sp = sp + 0x80\n 31293: ret\n      : @451 (gas: 8)\n 31295: a0 = u64 [sp + 0x30]\n 31298: a1 = u64 [sp + 0x38]\n 31301: a2 = u64 [sp + 0x28]\n 31304: a3 = u64 [sp + 0x20]\n 31307: a1 = a1 | a2\n 31310: a0 = a0 | a3\n 31313: a0 = a0 | a1\n 31316: jump @459 if a0 != 0\n      : @452 (gas: 2)\n 31320: a0 = i32 [0x20114]\n 31325: jump @459 if a0 <=u 35\n      : @453 (gas: 13)\n 31330: i32 a0 = sp + 0x60\n 31333: a1 = 0x4\n 31336: ecalli 3 // 'call_data_load'\n 31338: a0 = u64 [sp + 0x60]\n 31341: u64 [sp + 0x18] = a0\n 31344: a0 = u64 [sp + 0x68]\n 31347: u64 [sp + 0x10] = a0\n 31350: a0 = u64 [sp + 0x70]\n 31353: u64 [sp + 0x8] = a0\n 31356: s1 = u64 [sp + 0x78]\n 31359: a1 = 0x20\n 31362: a0 = 0\n 31364: ra = 396, jump @0\n      : @454 [@dyn 198] (gas: 70)\n 31370: a1 = reverse s1\n 31372: a2 = u64 [sp + 0x8]\n 31375: a2 = reverse a2\n 31377: a3 = u64 [sp + 0x10]\n 31380: a3 = reverse a3\n 31382: a4 = u64 [sp + 0x18]\n 31385: a4 = reverse a4\n 31387: a5 = a4 >> 0x38\n 31390: u8 [a0 + 0x1f] = a5\n 31393: a5 = a4 >> 0x30\n 31396: u8 [a0 + 0x1e] = a5\n 31399: a5 = a4 >> 0x28\n 31402: u8 [a0 + 0x1d] = a5\n 31405: a5 = a4 >> 0x20\n 31408: u8 [a0 + 0x1c] = a5\n 31411: a5 = a4 >> 0x18\n 31414: u8 [a0 + 0x1b] = a5\n 31417: a5 = a4 >> 0x10\n 31420: u8 [a0 + 0x1a] = a5\n 31423: a5 = a4 >> 0x8\n 31426: u8 [a0 + 0x19] = a5\n 31429: u8 [a0 + 0x18] = a4\n 31432: a4 = a3 >> 0x38\n 31435: u8 [a0 + 0x17] = a4\n 31438: a4 = a3 >> 0x30\n 31441: u8 [a0 + 0x16] = a4\n 31444: a4 = a3 >> 0x28\n 31447: u8 [a0 + 0x15] = a4\n 31450: a4 = a3 >> 0x20\n 31453: u8 [a0 + 0x14] = a4\n 31456: a4 = a3 >> 0x18\n 31459: u8 [a0 + 0x13] = a4\n 31462: a4 = a3 >> 0x10\n 31465: u8 [a0 + 0x12] = a4\n 31468: a4 = a3 >> 0x8\n 31471: u8 [a0 + 0x11] = a4\n 31474: u8 [a0 + 0x10] = a3\n 31477: a3 = a2 >> 0x38\n 31480: u8 [a0 + 0xf] = a3\n 31483: a3 = a2 >> 0x30\n 31486: u8 [a0 + 0xe] = a3\n 31489: a3 = a2 >> 0x28\n 31492: u8 [a0 + 0xd] = a3\n 31495: a3 = a2 >> 0x20\n 31498: u8 [a0 + 0xc] = a3\n 31501: a3 = a2 >> 0x18\n 31504: u8 [a0 + 0xb] = a3\n 31507: a3 = a2 >> 0x10\n 31510: u8 [a0 + 0xa] = a3\n 31513: a3 = a2 >> 0x8\n 31516: u8 [a0 + 0x9] = a3\n 31519: u8 [a0 + 0x8] = a2\n 31522: a2 = a1 >> 0x38\n 31525: u8 [a0 + 0x7] = a2\n 31528: a2 = a1 >> 0x30\n 31531: u8 [a0 + 0x6] = a2\n 31534: a2 = a1 >> 0x28\n 31537: u8 [a0 + 0x5] = a2\n 31540: a2 = a1 >> 0x20\n 31543: u8 [a0 + 0x4] = a2\n 31546: a2 = a1 >> 0x18\n 31549: u8 [a0 + 0x3] = a2\n 31552: a2 = a1 >> 0x10\n 31555: u8 [a0 + 0x2] = a2\n 31558: a2 = a1 >> 0x8\n 31561: u8 [a0 + 0x1] = a2\n 31564: u8 [a0] = a1\n 31566: a0 = 0x20\n 31569: a1 = 0x20\n 31572: ra = 398, jump @0\n      : @455 [@dyn 199] (gas: 35)\n 31578: u8 [a0 + 31] = 0x4\n 31582: u8 [a0 + 30] = 0\n 31585: u8 [a0 + 29] = 0\n 31588: u8 [a0 + 28] = 0\n 31591: u8 [a0 + 27] = 0\n 31594: u8 [a0 + 26] = 0\n 31597: u8 [a0 + 25] = 0\n 31600: u8 [a0 + 24] = 0\n 31603: u8 [a0 + 23] = 0\n 31606: u8 [a0 + 22] = 0\n 31609: u8 [a0 + 21] = 0\n 31612: u8 [a0 + 20] = 0\n 31615: u8 [a0 + 19] = 0\n 31618: u8 [a0 + 18] = 0\n 31621: u8 [a0 + 17] = 0\n 31624: u8 [a0 + 16] = 0\n 31627: u8 [a0 + 15] = 0\n 31630: u8 [a0 + 14] = 0\n 31633: u8 [a0 + 13] = 0\n 31636: u8 [a0 + 12] = 0\n 31639: u8 [a0 + 11] = 0\n 31642: u8 [a0 + 10] = 0\n 31645: u8 [a0 + 9] = 0\n 31648: u8 [a0 + 8] = 0\n 31651: u8 [a0 + 7] = 0\n 31654: u8 [a0 + 6] = 0\n 31657: u8 [a0 + 5] = 0\n 31660: u8 [a0 + 4] = 0\n 31663: u8 [a0 + 3] = 0\n 31666: u8 [a0 + 2] = 0\n 31669: u8 [a0 + 1] = 0\n 31672: u8 [a0 + 0] = 0\n 31674: a1 = 0x40\n 31677: a0 = 0\n 31679: ra = 400, jump @0\n      : @456 [@dyn 200] (gas: 38)\n 31685: i32 a0 = a0 + 0\n 31687: i32 a2 = sp + 0x60\n 31690: a1 = 0x40\n 31693: ecalli 8 // 'hash_keccak_256'\n 31695: a0 = u64 [sp + 0x78]\n 31698: a1 = u64 [sp + 0x70]\n 31701: a2 = u64 [sp + 0x68]\n 31704: a3 = u64 [sp + 0x60]\n 31707: a0 = reverse a0\n 31709: a1 = reverse a1\n 31711: a2 = reverse a2\n 31713: a3 = reverse a3\n 31715: u64 [sp + 0x58] = a3\n 31718: u64 [sp + 0x50] = a2\n 31721: u64 [sp + 0x48] = a1\n 31724: u64 [sp + 0x40] = a0\n 31727: u64 [sp + 120] = 0\n 31730: u64 [sp + 112] = 0\n 31733: u64 [sp + 104] = 0\n 31736: u64 [sp + 96] = 0\n 31739: u32 [sp + 128] = 0x20\n 31744: i32 a1 = sp + 0x40\n 31747: i32 a3 = sp + 0x60\n 31750: i32 a4 = sp + 0x80\n 31754: a2 = 0xffffffffffffffff\n 31757: a0 = 0\n 31759: ecalli 7 // 'get_storage'\n 31761: a0 = u64 [sp + 0x78]\n 31764: u64 [sp] = a0\n 31766: a0 = u64 [sp + 0x70]\n 31769: u64 [sp + 0x8] = a0\n 31772: a0 = u64 [sp + 0x68]\n 31775: u64 [sp + 0x10] = a0\n 31778: a0 = u64 [sp + 0x60]\n 31781: u64 [sp + 0x18] = a0\n 31784: a0 = 0x40\n 31787: a1 = 0x20\n 31790: ra = 402, jump @0\n      : @457 [@dyn 201] (gas: 100)\n 31796: a1 = u8 [a0 + 0x11]\n 31799: a2 = u8 [a0 + 0x10]\n 31802: a3 = u8 [a0 + 0x12]\n 31805: a4 = u8 [a0 + 0x13]\n 31808: a1 = a1 << 0x8\n 31811: a1 = a1 | a2\n 31814: a3 = a3 << 0x10\n 31817: a4 = a4 << 0x18\n 31820: a3 = a3 | a4\n 31823: a1 = a1 | a3\n 31826: a2 = u8 [a0 + 0x15]\n 31829: a3 = u8 [a0 + 0x14]\n 31832: a4 = u8 [a0 + 0x16]\n 31835: a5 = u8 [a0 + 0x17]\n 31838: a2 = a2 << 0x8\n 31841: a2 = a2 | a3\n 31844: a4 = a4 << 0x10\n 31847: a5 = a5 << 0x18\n 31850: a4 = a4 | a5\n 31853: a2 = a2 | a4\n 31856: a2 = a2 << 0x20\n 31859: t0 = a2 | a1\n 31862: a2 = u8 [a0 + 0x1]\n 31865: a3 = u8 [a0]\n 31867: a4 = u8 [a0 + 0x2]\n 31870: a5 = u8 [a0 + 0x3]\n 31873: a2 = a2 << 0x8\n 31876: a2 = a2 | a3\n 31879: a4 = a4 << 0x10\n 31882: a5 = a5 << 0x18\n 31885: a4 = a4 | a5\n 31888: a2 = a2 | a4\n 31891: a3 = u8 [a0 + 0x5]\n 31894: a4 = u8 [a0 + 0x4]\n 31897: a5 = u8 [a0 + 0x6]\n 31900: s1 = u8 [a0 + 0x7]\n 31903: a3 = a3 << 0x8\n 31906: a3 = a3 | a4\n 31909: a5 = a5 << 0x10\n 31912: s1 = s1 << 0x18\n 31915: a5 = a5 | s1\n 31918: a3 = a3 | a5\n 31921: a3 = a3 << 0x20\n 31924: a2 = a2 | a3\n 31927: a3 = u8 [a0 + 0x19]\n 31930: a4 = u8 [a0 + 0x18]\n 31933: a5 = u8 [a0 + 0x1a]\n 31936: s1 = u8 [a0 + 0x1b]\n 31939: a3 = a3 << 0x8\n 31942: a3 = a3 | a4\n 31945: a5 = a5 << 0x10\n 31948: s1 = s1 << 0x18\n 31951: a5 = a5 | s1\n 31954: a3 = a3 | a5\n 31957: a4 = u8 [a0 + 0x1d]\n 31960: a5 = u8 [a0 + 0x1c]\n 31963: s1 = u8 [a0 + 0x1e]\n 31966: a1 = u8 [a0 + 0x1f]\n 31969: a4 = a4 << 0x8\n 31972: a4 = a4 | a5\n 31975: s1 = s1 << 0x10\n 31978: a1 = a1 << 0x18\n 31981: a1 = a1 | s1\n 31984: a1 = a1 | a4\n 31987: a1 = a1 << 0x20\n 31990: a3 = a3 | a1\n 31993: a1 = u8 [a0 + 0x9]\n 31996: a4 = u8 [a0 + 0x8]\n 31999: a5 = u8 [a0 + 0xa]\n 32002: s1 = u8 [a0 + 0xb]\n 32005: a1 = a1 << 0x8\n 32008: a1 = a1 | a4\n 32011: a5 = a5 << 0x10\n 32014: s1 = s1 << 0x18\n 32017: a5 = a5 | s1\n 32020: a1 = a1 | a5\n 32023: a4 = u8 [a0 + 0xd]\n 32026: a5 = u8 [a0 + 0xc]\n 32029: s1 = u8 [a0 + 0xe]\n 32032: a0 = u8 [a0 + 0xf]\n 32035: a4 = a4 << 0x8\n 32038: a4 = a4 | a5\n 32041: s1 = s1 << 0x10\n 32044: a0 = a0 << 0x18\n 32047: a0 = a0 | s1\n 32050: a0 = a0 | a4\n 32053: a0 = a0 << 0x20\n 32056: a0 = a0 | a1\n 32059: a1 = reverse a0\n 32061: a0 = reverse a3\n 32063: a2 = reverse a2\n 32065: a3 = reverse t0\n 32067: a2 = a2 | a3\n 32070: a3 = a0 | a1\n 32073: a3 = a3 | a2\n 32076: a3 = a3 >> 0x20\n 32079: a1 = a1 | a2\n 32082: a1 = a1 << 0x20\n 32085: a1 = a1 | a3\n 32088: jump @461 if a1 == 0\n      : @458 (gas: 1)\n 32091: trap\n      : @459 (gas: 3)\n 32092: a0 = 0\n 32094: a1 = 0\n 32096: ra = 404, jump @0\n      : @460 [@dyn 202] (gas: 5)\n 32102: i32 a1 = a0 + 0\n 32104: a0 = 0x1\n 32107: a2 = 0\n 32109: ecalli 12 // 'seal_return'\n 32111: fallthrough\n      : @461 (gas: 4)\n 32112: i32 s1 = a0 + 0\n 32114: a1 = 0x20\n 32117: a0 = s1\n 32119: ra = 406, jump @0\n      : @462 [@dyn 203] (gas: 71)\n 32125: a1 = u64 [sp]\n 32127: a1 = reverse a1\n 32129: a2 = u64 [sp + 0x8]\n 32132: a2 = reverse a2\n 32134: a3 = u64 [sp + 0x10]\n 32137: a3 = reverse a3\n 32139: a4 = u64 [sp + 0x18]\n 32142: a4 = reverse a4\n 32144: a5 = a4 >> 0x38\n 32147: u8 [a0 + 0x1f] = a5\n 32150: a5 = a4 >> 0x30\n 32153: u8 [a0 + 0x1e] = a5\n 32156: a5 = a4 >> 0x28\n 32159: u8 [a0 + 0x1d] = a5\n 32162: a5 = a4 >> 0x20\n 32165: u8 [a0 + 0x1c] = a5\n 32168: a5 = a4 >> 0x18\n 32171: u8 [a0 + 0x1b] = a5\n 32174: a5 = a4 >> 0x10\n 32177: u8 [a0 + 0x1a] = a5\n 32180: a5 = a4 >> 0x8\n 32183: u8 [a0 + 0x19] = a5\n 32186: u8 [a0 + 0x18] = a4\n 32189: u8 [a0 + 0x10] = a3\n 32192: a4 = a3 >> 0x38\n 32195: u8 [a0 + 0x17] = a4\n 32198: a4 = a3 >> 0x30\n 32201: u8 [a0 + 0x16] = a4\n 32204: a4 = a3 >> 0x28\n 32207: u8 [a0 + 0x15] = a4\n 32210: a4 = a3 >> 0x20\n 32213: u8 [a0 + 0x14] = a4\n 32216: a4 = a3 >> 0x18\n 32219: u8 [a0 + 0x13] = a4\n 32222: a4 = a3 >> 0x10\n 32225: u8 [a0 + 0x12] = a4\n 32228: a3 = a3 >> 0x8\n 32231: u8 [a0 + 0x11] = a3\n 32234: u8 [a0 + 0x8] = a2\n 32237: a3 = a2 >> 0x38\n 32240: u8 [a0 + 0xf] = a3\n 32243: a3 = a2 >> 0x30\n 32246: u8 [a0 + 0xe] = a3\n 32249: a3 = a2 >> 0x28\n 32252: u8 [a0 + 0xd] = a3\n 32255: a3 = a2 >> 0x20\n 32258: u8 [a0 + 0xc] = a3\n 32261: a3 = a2 >> 0x18\n 32264: u8 [a0 + 0xb] = a3\n 32267: a3 = a2 >> 0x10\n 32270: u8 [a0 + 0xa] = a3\n 32273: a2 = a2 >> 0x8\n 32276: u8 [a0 + 0x9] = a2\n 32279: u8 [a0] = a1\n 32281: a2 = a1 >> 0x38\n 32284: u8 [a0 + 0x7] = a2\n 32287: a2 = a1 >> 0x30\n 32290: u8 [a0 + 0x6] = a2\n 32293: a2 = a1 >> 0x28\n 32296: u8 [a0 + 0x5] = a2\n 32299: a2 = a1 >> 0x20\n 32302: u8 [a0 + 0x4] = a2\n 32305: a2 = a1 >> 0x18\n 32308: u8 [a0 + 0x3] = a2\n 32311: a2 = a1 >> 0x10\n 32314: u8 [a0 + 0x2] = a2\n 32317: a1 = a1 >> 0x8\n 32320: u8 [a0 + 0x1] = a1\n 32323: a1 = 0x20\n 32326: a0 = s1\n 32328: ra = 408, jump @0\n      : @463 [@dyn 204] (gas: 6)\n 32334: i32 a1 = a0 + 0\n 32336: a2 = 0x20\n 32339: a0 = 0\n 32341: ra = 0x19a\n 32345: ecalli 12 // 'seal_return'\n 32347: fallthrough\n      : @464 [@dyn 205] (gas: 7)\n 32348: sp = sp + 0xffffffffffffffa0\n 32351: u64 [sp + 0x58] = ra\n 32354: u64 [sp + 0x50] = s0\n 32357: s0 = sp + 0x60\n 32360: sp = sp & 0xffffffffffffffe0\n 32363: a0 = i32 [0x20114]\n 32368: jump @469 if a0 <=u 35\n      : @465 (gas: 13)\n 32373: i32 a0 = sp + 0x20\n 32376: a1 = 0x4\n 32379: ecalli 3 // 'call_data_load'\n 32381: a1 = u64 [sp + 0x20]\n 32384: a0 = u64 [sp + 0x28]\n 32387: a2 = u64 [sp + 0x30]\n 32390: a3 = u64 [sp + 0x38]\n 32393: u64 [sp + 0x18] = a3\n 32396: u64 [sp + 0x10] = a2\n 32399: u64 [sp + 0x8] = a0\n 32402: a0 = sp\n 32404: u64 [sp] = a1\n 32406: ra = 412, jump @1211\n      : @466 [@dyn 206] (gas: 3)\n 32413: a0 = 0x40\n 32416: a1 = 0x20\n 32419: ra = 414, jump @0\n      : @467 [@dyn 207] (gas: 100)\n 32425: a1 = u8 [a0 + 0x11]\n 32428: a2 = u8 [a0 + 0x10]\n 32431: a3 = u8 [a0 + 0x12]\n 32434: a4 = u8 [a0 + 0x13]\n 32437: a1 = a1 << 0x8\n 32440: a1 = a1 | a2\n 32443: a3 = a3 << 0x10\n 32446: a4 = a4 << 0x18\n 32449: a3 = a3 | a4\n 32452: a1 = a1 | a3\n 32455: a2 = u8 [a0 + 0x15]\n 32458: a3 = u8 [a0 + 0x14]\n 32461: a4 = u8 [a0 + 0x16]\n 32464: a5 = u8 [a0 + 0x17]\n 32467: a2 = a2 << 0x8\n 32470: a2 = a2 | a3\n 32473: a4 = a4 << 0x10\n 32476: a5 = a5 << 0x18\n 32479: a4 = a4 | a5\n 32482: a2 = a2 | a4\n 32485: a2 = a2 << 0x20\n 32488: t0 = a2 | a1\n 32491: a2 = u8 [a0 + 0x1]\n 32494: a3 = u8 [a0]\n 32496: a4 = u8 [a0 + 0x2]\n 32499: a5 = u8 [a0 + 0x3]\n 32502: a2 = a2 << 0x8\n 32505: a2 = a2 | a3\n 32508: a4 = a4 << 0x10\n 32511: a5 = a5 << 0x18\n 32514: a4 = a4 | a5\n 32517: a2 = a2 | a4\n 32520: a3 = u8 [a0 + 0x5]\n 32523: a4 = u8 [a0 + 0x4]\n 32526: a5 = u8 [a0 + 0x6]\n 32529: a1 = u8 [a0 + 0x7]\n 32532: a3 = a3 << 0x8\n 32535: a3 = a3 | a4\n 32538: a5 = a5 << 0x10\n 32541: a1 = a1 << 0x18\n 32544: a1 = a1 | a5\n 32547: a1 = a1 | a3\n 32550: a1 = a1 << 0x20\n 32553: t1 = a1 | a2\n 32556: a1 = u8 [a0 + 0x19]\n 32559: a3 = u8 [a0 + 0x18]\n 32562: a4 = u8 [a0 + 0x1a]\n 32565: a5 = u8 [a0 + 0x1b]\n 32568: a1 = a1 << 0x8\n 32571: a1 = a1 | a3\n 32574: a4 = a4 << 0x10\n 32577: a5 = a5 << 0x18\n 32580: a4 = a4 | a5\n 32583: a1 = a1 | a4\n 32586: a3 = u8 [a0 + 0x1d]\n 32589: a4 = u8 [a0 + 0x1c]\n 32592: a5 = u8 [a0 + 0x1e]\n 32595: a2 = u8 [a0 + 0x1f]\n 32598: a3 = a3 << 0x8\n 32601: a3 = a3 | a4\n 32604: a5 = a5 << 0x10\n 32607: a2 = a2 << 0x18\n 32610: a2 = a2 | a5\n 32613: a2 = a2 | a3\n 32616: a2 = a2 << 0x20\n 32619: a3 = a2 | a1\n 32622: a1 = u8 [a0 + 0x9]\n 32625: a2 = u8 [a0 + 0x8]\n 32628: a4 = u8 [a0 + 0xa]\n 32631: a5 = u8 [a0 + 0xb]\n 32634: a1 = a1 << 0x8\n 32637: a1 = a1 | a2\n 32640: a4 = a4 << 0x10\n 32643: a5 = a5 << 0x18\n 32646: a4 = a4 | a5\n 32649: a1 = a1 | a4\n 32652: a2 = u8 [a0 + 0xd]\n 32655: a4 = u8 [a0 + 0xc]\n 32658: a5 = u8 [a0 + 0xe]\n 32661: a0 = u8 [a0 + 0xf]\n 32664: a2 = a2 << 0x8\n 32667: a2 = a2 | a4\n 32670: a5 = a5 << 0x10\n 32673: a0 = a0 << 0x18\n 32676: a0 = a0 | a5\n 32679: a0 = a0 | a2\n 32682: a0 = a0 << 0x20\n 32685: a0 = a0 | a1\n 32688: a1 = reverse a0\n 32690: a0 = reverse a3\n 32692: a2 = reverse t1\n 32694: a3 = reverse t0\n 32696: a2 = a2 | a3\n 32699: a3 = a0 | a1\n 32702: a3 = a3 | a2\n 32705: a3 = a3 >> 0x20\n 32708: a1 = a1 | a2\n 32711: a1 = a1 << 0x20\n 32714: a1 = a1 | a3\n 32717: jump @471 if a1 == 0\n      : @468 (gas: 1)\n 32720: trap\n      : @469 (gas: 3)\n 32721: a0 = 0\n 32723: a1 = 0\n 32725: ra = 416, jump @0\n      : @470 [@dyn 208] (gas: 7)\n 32731: i32 a1 = a0 + 0\n 32733: a0 = 0x1\n 32736: a2 = 0\n 32738: ecalli 12 // 'seal_return'\n 32740: i32 a0 = a0 + 0\n 32742: ra = 0x1a2\n 32746: jump @0\n      : @471 (gas: 2)\n 32749: i32 a0 = a0 + 0\n 32751: ra = 418, jump @0\n      : @472 [@dyn 209] (gas: 6)\n 32757: i32 a1 = a0 + 0\n 32759: a0 = 0\n 32761: a2 = 0\n 32763: ra = 0x1a4\n 32767: ecalli 12 // 'seal_return'\n 32769: fallthrough\n      : @473 [@dyn 210] (gas: 9)\n 32770: a1 = u64 [a0 + 0x18]\n 32773: a2 = u64 [a0 + 0x10]\n 32776: a3 = u64 [a0]\n 32778: a0 = u64 [a0 + 0x8]\n 32781: a1 = a1 | a2\n 32784: a2 = a3 <u 0x2\n 32787: a2 = 0 if a0 != 0\n 32789: a2 = 0 if a1 != 0\n 32791: jump @475 if a2 == 0\n      : @474 (gas: 1)\n 32794: ret\n      : @475 (gas: 5)\n 32796: sp = sp + 0xfffffffffffffff8\n 32799: u64 [sp] = ra\n 32801: a0 = 0\n 32803: a1 = 0\n 32805: ra = 422, jump @0\n      : @476 [@dyn 211] (gas: 6)\n 32812: i32 a1 = a0 + 0\n 32814: a0 = 0x1\n 32817: a2 = 0\n 32819: ra = 0x1a8\n 32823: ecalli 12 // 'seal_return'\n 32825: fallthrough\n      : @477 [@dyn 212] (gas: 18)\n 32826: sp = sp + 0xffffffffffffffc0\n 32829: u64 [sp + 0x38] = ra\n 32832: u64 [sp + 0x30] = s0\n 32835: u64 [sp + 0x28] = s1\n 32838: s0 = sp + 0x40\n 32841: sp = sp & 0xffffffffffffffe0\n 32844: a2 = u64 [a1 + 0x10]\n 32847: a3 = u64 [a1 + 0x18]\n 32850: a4 = u64 [a1 + 0x8]\n 32853: a1 = u64 [a1]\n 32855: a3 = a3 | a4\n 32858: a4 = a1 | a2\n 32861: a4 = a4 | a3\n 32864: a4 = a4 >> 0x20\n 32867: a2 = a2 | a3\n 32870: a2 = a2 << 0x20\n 32873: a2 = a2 | a4\n 32876: jump @481 if a2 != 0\n      : @478 (gas: 5)\n 32879: s1 = a0\n 32881: i32 a1 = a1 + 0\n 32883: i32 a0 = sp + 0\n 32885: ecalli 3 // 'call_data_load'\n 32887: fallthrough\n      : @479 (gas: 9)\n 32888: a0 = u64 [sp + 0x18]\n 32891: a1 = u64 [sp + 0x10]\n 32894: a2 = u64 [sp]\n 32896: a3 = u64 [sp + 0x8]\n 32899: a4 = a1 | a0\n 32902: a5 = a2 <u 0x2\n 32905: a5 = 0 if a3 != 0\n 32907: a5 = 0 if a4 != 0\n 32909: jump @482 if a5 == 0\n      : @480 (gas: 10)\n 32912: u64 [s1] = a2\n 32914: u64 [s1 + 0x8] = a3\n 32917: u64 [s1 + 0x10] = a1\n 32920: u64 [s1 + 0x18] = a0\n 32923: sp = s0 + 0xffffffffffffffc0\n 32926: ra = u64 [sp + 0x38]\n 32929: s0 = u64 [sp + 0x30]\n 32932: s1 = u64 [sp + 0x28]\n 32935: sp = sp + 0x40\n 32938: ret\n      : @481 (gas: 1)\n 32940: trap\n      : @482 (gas: 3)\n 32941: a0 = 0\n 32943: a1 = 0\n 32945: ra = 426, jump @0\n      : @483 [@dyn 213] (gas: 6)\n 32952: i32 a1 = a0 + 0\n 32954: a0 = 0x1\n 32957: a2 = 0\n 32959: ra = 0x1ac\n 32963: ecalli 12 // 'seal_return'\n 32965: fallthrough\n      : @484 [@dyn 214] (gas: 48)\n 32966: sp = sp + 0xffffffffffffff60\n 32970: u64 [sp + 0x98] = ra\n 32974: u64 [sp + 0x90] = s0\n 32978: u64 [sp + 0x88] = s1\n 32982: s0 = sp + 0xa0\n 32986: sp = sp & 0xffffffffffffffe0\n 32989: t0 = u64 [a1 + 0x10]\n 32992: a5 = u64 [a1 + 0x8]\n 32995: a3 = u64 [a2 + 0x8]\n 32998: t2 = u64 [a1]\n 33000: a4 = u64 [a2]\n 33002: u64 [sp + 0x40] = a4\n 33005: ra = u64 [a2 + 0x10]\n 33008: t1 = a3 ^ a5\n 33011: s1 = a3 <u a5\n 33014: a4 = a4 <u t2\n 33017: u64 [sp + 0x38] = a4\n 33020: s1 = a4 if t1 == 0\n 33023: t1 = u64 [a1 + 0x18]\n 33026: a1 = u64 [a2 + 0x18]\n 33029: u64 [sp + 0x30] = a1\n 33032: a2 = ra - t0\n 33035: a1 = a2 - s1\n 33038: u64 [sp + 0x48] = a1\n 33041: a1 = a2 <u s1\n 33044: u64 [sp + 0x58] = t0\n 33047: a4 = ra <u t0\n 33050: u64 [sp + 0x50] = t1\n 33053: a2 = u64 [sp + 0x30]\n 33056: a2 = a2 - t1\n 33059: a2 = a2 - a4\n 33062: a2 = a2 - a1\n 33065: a1 = a3 - a5\n 33068: a3 = u64 [sp + 0x38]\n 33071: a1 = a1 - a3\n 33074: a3 = u64 [sp + 0x40]\n 33077: a3 = a3 - t2\n 33080: a4 = a1 >u 0\n 33082: a3 = a3 <u 0x60\n 33085: a3 = a3 ^ 0x1\n 33088: a3 = a4 if a1 != 0\n 33091: s1 = a2 >s 0\n 33093: a1 = u64 [sp + 0x48]\n 33096: a4 = a1 >u 0\n 33098: a4 = s1 if a2 != 0\n 33101: a1 = a1 | a2\n 33104: a3 = a4 if a1 != 0\n 33107: jump @494 if a3 == 0\n      : @485 (gas: 12)\n 33111: s1 = a0\n 33113: a2 = u64 [sp + 0x58]\n 33116: a0 = t2 | a2\n 33119: u64 [sp + 0x48] = a5\n 33122: a1 = u64 [sp + 0x50]\n 33125: a1 = a1 | a5\n 33128: a0 = a0 | a1\n 33131: a0 = a0 >> 0x20\n 33134: a1 = a1 | a2\n 33137: a1 = a1 << 0x20\n 33140: a0 = a0 | a1\n 33143: jump @493 if a0 != 0\n      : @486 (gas: 6)\n 33147: i32 a1 = t2 + 0\n 33149: i32 a0 = sp + 0x60\n 33152: u64 [sp + 0x38] = a1\n 33155: u64 [sp + 0x40] = t2\n 33158: ecalli 3 // 'call_data_load'\n 33160: fallthrough\n      : @487 (gas: 13)\n 33161: a0 = u64 [sp + 0x58]\n 33164: a1 = u64 [sp + 0x50]\n 33167: a2 = a0 | a1\n 33170: a0 = 0x100000000\n 33180: u64 [sp + 0x50] = a0\n 33183: a0 = 0xffffffe0\n 33193: a1 = u64 [sp + 0x40]\n 33196: a0 = a1 <u a0\n 33199: a1 = u64 [sp + 0x48]\n 33202: a0 = 0 if a1 != 0\n 33204: u64 [sp + 0x58] = a2\n 33207: a0 = 0 if a2 != 0\n 33209: jump @493 if a0 == 0\n      : @488 (gas: 13)\n 33213: a0 = u64 [sp + 0x78]\n 33216: u64 [sp + 0x30] = a0\n 33219: a0 = u64 [sp + 0x70]\n 33222: u64 [sp + 0x28] = a0\n 33225: a0 = u64 [sp + 0x68]\n 33228: u64 [sp + 0x18] = a0\n 33231: a0 = u64 [sp + 0x60]\n 33234: u64 [sp + 0x20] = a0\n 33237: a0 = u64 [sp + 0x38]\n 33240: i32 a1 = a0 + 0x20\n 33243: i32 a0 = sp + 0x60\n 33246: ecalli 3 // 'call_data_load'\n 33248: fallthrough\n      : @489 (gas: 9)\n 33249: a0 = u64 [sp + 0x50]\n 33252: a0 = a0 + 0xffffffffffffffc0\n 33255: a1 = u64 [sp + 0x40]\n 33258: a0 = a1 <u a0\n 33261: a1 = u64 [sp + 0x48]\n 33264: a0 = 0 if a1 != 0\n 33266: a1 = u64 [sp + 0x58]\n 33269: a0 = 0 if a1 != 0\n 33271: jump @493 if a0 == 0\n      : @490 (gas: 13)\n 33275: a0 = u64 [sp + 0x78]\n 33278: u64 [sp + 0x58] = a0\n 33281: a0 = u64 [sp + 0x70]\n 33284: u64 [sp + 0x50] = a0\n 33287: a0 = u64 [sp + 0x68]\n 33290: u64 [sp + 0x40] = a0\n 33293: a0 = u64 [sp + 0x60]\n 33296: u64 [sp + 0x48] = a0\n 33299: a0 = u64 [sp + 0x38]\n 33302: i32 a1 = a0 + 0x40\n 33305: i32 a0 = sp + 0x60\n 33308: ecalli 3 // 'call_data_load'\n 33310: fallthrough\n      : @491 (gas: 9)\n 33311: a0 = u64 [sp + 0x78]\n 33314: a1 = u64 [sp + 0x70]\n 33317: a2 = u64 [sp + 0x60]\n 33320: a3 = u64 [sp + 0x68]\n 33323: a4 = a1 | a0\n 33326: a5 = a2 <u 0x2\n 33329: a5 = 0 if a3 != 0\n 33331: a5 = 0 if a4 != 0\n 33333: jump @494 if a5 == 0\n      : @492 (gas: 26)\n 33336: u64 [s1 + 0x48] = a3\n 33339: u64 [s1 + 0x40] = a2\n 33342: a2 = u64 [sp + 0x40]\n 33345: u64 [s1 + 0x28] = a2\n 33348: a2 = u64 [sp + 0x48]\n 33351: u64 [s1 + 0x20] = a2\n 33354: a2 = u64 [sp + 0x18]\n 33357: u64 [s1 + 0x8] = a2\n 33360: a2 = u64 [sp + 0x20]\n 33363: u64 [s1] = a2\n 33365: u64 [s1 + 0x50] = a1\n 33368: a1 = u64 [sp + 0x50]\n 33371: u64 [s1 + 0x30] = a1\n 33374: a1 = u64 [sp + 0x28]\n 33377: u64 [s1 + 0x10] = a1\n 33380: u64 [s1 + 0x58] = a0\n 33383: a0 = u64 [sp + 0x58]\n 33386: u64 [s1 + 0x38] = a0\n 33389: a0 = u64 [sp + 0x30]\n 33392: u64 [s1 + 0x18] = a0\n 33395: sp = s0 + 0xffffffffffffff60\n 33399: ra = u64 [sp + 0x98]\n 33403: s0 = u64 [sp + 0x90]\n 33407: s1 = u64 [sp + 0x88]\n 33411: sp = sp + 0xa0\n 33415: ret\n      : @493 (gas: 1)\n 33417: trap\n      : @494 (gas: 3)\n 33418: a0 = 0\n 33420: a1 = 0\n 33422: ra = 430, jump @0\n      : @495 [@dyn 215] (gas: 6)\n 33429: i32 a1 = a0 + 0\n 33431: a0 = 0x1\n 33434: a2 = 0\n 33436: ra = 0x1b0\n 33440: ecalli 12 // 'seal_return'\n 33442: fallthrough\n      : @496 [@dyn 216] (gas: 19)\n 33443: sp = sp + 0xfffffffffffffed0\n 33447: u64 [sp + 0x128] = ra\n 33451: u64 [sp + 0x120] = s0\n 33455: u64 [sp + 0x118] = s1\n 33459: s0 = sp + 0x130\n 33463: sp = sp & 0xfffffffffffffff0\n 33466: a0 = u32 [0x20114]\n 33471: u64 [sp + 136] = 0\n 33475: u64 [sp + 128] = 0\n 33479: u64 [sp + 120] = 0\n 33482: u64 [sp + 0x70] = a0\n 33485: u64 [sp + 168] = 0\n 33489: u64 [sp + 160] = 0\n 33493: u64 [sp + 144] = 0x4\n 33498: a0 = sp + 0xb0\n 33502: a1 = sp + 0x90\n 33506: a2 = sp + 0x70\n 33509: u64 [sp + 152] = 0\n 33513: ra = 434, jump @484\n      : @497 [@dyn 217] (gas: 30)\n 33519: a0 = u64 [sp + 0xb0]\n 33523: u64 [sp + 0x8] = a0\n 33526: t1 = u64 [sp + 0xb8]\n 33530: t2 = u64 [sp + 0xc0]\n 33534: ra = u64 [sp + 0xc8]\n 33538: t0 = u64 [sp + 0xd0]\n 33542: a5 = u64 [sp + 0xd8]\n 33546: a4 = u64 [sp + 0xe0]\n 33550: a3 = u64 [sp + 0xe8]\n 33554: a1 = u64 [sp + 0xf0]\n 33558: s1 = u64 [sp + 0xf8]\n 33562: a2 = u64 [sp + 0x100]\n 33566: a0 = u64 [sp + 0x108]\n 33570: u64 [sp + 0x28] = a0\n 33573: u64 [sp + 0x20] = a2\n 33576: u64 [sp + 0x18] = s1\n 33579: u64 [sp + 0x10] = a1\n 33582: u64 [sp + 0x48] = a3\n 33585: u64 [sp + 0x40] = a4\n 33588: u64 [sp + 0x38] = a5\n 33591: u64 [sp + 0x30] = t0\n 33594: u64 [sp + 0x68] = ra\n 33597: u64 [sp + 0x60] = t2\n 33600: u64 [sp + 0x58] = t1\n 33603: a0 = sp + 0x50\n 33606: a1 = sp + 0x30\n 33609: a2 = sp + 0x10\n 33612: a3 = u64 [sp + 0x8]\n 33615: u64 [sp + 0x50] = a3\n 33618: ra = 436, jump @1254\n      : @498 [@dyn 218] (gas: 3)\n 33625: a0 = 0x40\n 33628: a1 = 0x20\n 33631: ra = 438, jump @0\n      : @499 [@dyn 219] (gas: 100)\n 33638: a1 = u8 [a0 + 0x11]\n 33641: a2 = u8 [a0 + 0x10]\n 33644: a3 = u8 [a0 + 0x12]\n 33647: a4 = u8 [a0 + 0x13]\n 33650: a1 = a1 << 0x8\n 33653: a1 = a1 | a2\n 33656: a3 = a3 << 0x10\n 33659: a4 = a4 << 0x18\n 33662: a3 = a3 | a4\n 33665: a1 = a1 | a3\n 33668: a2 = u8 [a0 + 0x15]\n 33671: a3 = u8 [a0 + 0x14]\n 33674: a4 = u8 [a0 + 0x16]\n 33677: a5 = u8 [a0 + 0x17]\n 33680: a2 = a2 << 0x8\n 33683: a2 = a2 | a3\n 33686: a4 = a4 << 0x10\n 33689: a5 = a5 << 0x18\n 33692: a4 = a4 | a5\n 33695: a2 = a2 | a4\n 33698: a2 = a2 << 0x20\n 33701: t0 = a2 | a1\n 33704: a2 = u8 [a0 + 0x1]\n 33707: a3 = u8 [a0]\n 33709: a4 = u8 [a0 + 0x2]\n 33712: a5 = u8 [a0 + 0x3]\n 33715: a2 = a2 << 0x8\n 33718: a2 = a2 | a3\n 33721: a4 = a4 << 0x10\n 33724: a5 = a5 << 0x18\n 33727: a4 = a4 | a5\n 33730: a2 = a2 | a4\n 33733: a3 = u8 [a0 + 0x5]\n 33736: a4 = u8 [a0 + 0x4]\n 33739: a5 = u8 [a0 + 0x6]\n 33742: s1 = u8 [a0 + 0x7]\n 33745: a3 = a3 << 0x8\n 33748: a3 = a3 | a4\n 33751: a5 = a5 << 0x10\n 33754: s1 = s1 << 0x18\n 33757: a5 = a5 | s1\n 33760: a3 = a3 | a5\n 33763: a3 = a3 << 0x20\n 33766: a2 = a2 | a3\n 33769: a3 = u8 [a0 + 0x19]\n 33772: a4 = u8 [a0 + 0x18]\n 33775: a5 = u8 [a0 + 0x1a]\n 33778: s1 = u8 [a0 + 0x1b]\n 33781: a3 = a3 << 0x8\n 33784: a3 = a3 | a4\n 33787: a5 = a5 << 0x10\n 33790: s1 = s1 << 0x18\n 33793: a5 = a5 | s1\n 33796: a3 = a3 | a5\n 33799: a4 = u8 [a0 + 0x1d]\n 33802: a5 = u8 [a0 + 0x1c]\n 33805: s1 = u8 [a0 + 0x1e]\n 33808: a1 = u8 [a0 + 0x1f]\n 33811: a4 = a4 << 0x8\n 33814: a4 = a4 | a5\n 33817: s1 = s1 << 0x10\n 33820: a1 = a1 << 0x18\n 33823: a1 = a1 | s1\n 33826: a1 = a1 | a4\n 33829: a1 = a1 << 0x20\n 33832: a3 = a3 | a1\n 33835: a1 = u8 [a0 + 0x9]\n 33838: a4 = u8 [a0 + 0x8]\n 33841: a5 = u8 [a0 + 0xa]\n 33844: s1 = u8 [a0 + 0xb]\n 33847: a1 = a1 << 0x8\n 33850: a1 = a1 | a4\n 33853: a5 = a5 << 0x10\n 33856: s1 = s1 << 0x18\n 33859: a5 = a5 | s1\n 33862: a1 = a1 | a5\n 33865: a4 = u8 [a0 + 0xd]\n 33868: a5 = u8 [a0 + 0xc]\n 33871: s1 = u8 [a0 + 0xe]\n 33874: a0 = u8 [a0 + 0xf]\n 33877: a4 = a4 << 0x8\n 33880: a4 = a4 | a5\n 33883: s1 = s1 << 0x10\n 33886: a0 = a0 << 0x18\n 33889: a0 = a0 | s1\n 33892: a0 = a0 | a4\n 33895: a0 = a0 << 0x20\n 33898: a0 = a0 | a1\n 33901: a1 = reverse a0\n 33903: a0 = reverse a3\n 33905: a2 = reverse a2\n 33907: a3 = reverse t0\n 33909: a2 = a2 | a3\n 33912: a3 = a0 | a1\n 33915: a3 = a3 | a2\n 33918: a3 = a3 >> 0x20\n 33921: a1 = a1 | a2\n 33924: a1 = a1 << 0x20\n 33927: a1 = a1 | a3\n 33930: jump @501 if a1 == 0\n      : @500 (gas: 1)\n 33933: trap\n      : @501 (gas: 2)\n 33934: i32 a0 = a0 + 0\n 33936: ra = 440, jump @0\n      : @502 [@dyn 220] (gas: 6)\n 33943: i32 a1 = a0 + 0\n 33945: a0 = 0\n 33947: a2 = 0\n 33949: ra = 0x1ba\n 33953: ecalli 12 // 'seal_return'\n 33955: fallthrough\n      : @503 [@dyn 221] (gas: 9)\n 33956: a2 = u64 [a1 + 0x18]\n 33959: a3 = u64 [a1 + 0x10]\n 33962: a4 = u64 [a1 + 0x8]\n 33965: a1 = u64 [a1]\n 33967: u64 [a0 + 0x18] = a2\n 33970: u64 [a0 + 0x10] = a3\n 33973: u64 [a0 + 0x8] = a4\n 33976: u64 [a0] = a1\n 33978: ret\n      : @504 (gas: 17)\n 33980: sp = sp + 0xffffffffffffffa0\n 33983: u64 [sp + 0x58] = ra\n 33986: u64 [sp + 0x50] = s0\n 33989: u64 [sp + 0x48] = s1\n 33992: a3 = u64 [a1 + 0x18]\n 33995: a4 = u64 [a1 + 0x10]\n 33998: a5 = u64 [a1 + 0x8]\n 34001: s1 = u64 [a1]\n 34003: a1 = a5 | a3\n 34006: a2 = s1 | a4\n 34009: a2 = a2 | a1\n 34012: a2 = a2 >> 0x20\n 34015: a1 = a1 | a4\n 34018: a1 = a1 << 0x20\n 34021: a1 = a1 | a2\n 34024: u64 [sp + 0x28] = a0\n 34027: jump @511 if a1 != 0\n      : @505 (gas: 19)\n 34031: a0 = s1 + 0x20\n 34034: u64 [sp + 0x30] = a0\n 34037: a0 = a0 <u s1\n 34040: a1 = a5 + a0\n 34043: u64 [sp + 0x40] = a1\n 34046: u64 [sp + 0x8] = a5\n 34049: s0 = a1 <u a5\n 34052: s0 = a0 if a0 == 0\n 34055: s0 = s0 + a4\n 34058: u64 [sp + 0x10] = a4\n 34061: a0 = s0 <u a4\n 34064: u64 [sp + 0x18] = a3\n 34067: a0 = a0 + a3\n 34070: u64 [sp + 0x38] = a0\n 34073: u64 [sp] = s1\n 34075: i32 a0 = s1 + 0\n 34077: a1 = 0x20\n 34080: s1 = 0x20\n 34083: ra = 444, jump @0\n      : @506 [@dyn 222] (gas: 45)\n 34090: u8 [a0 + 0x1f] = s1\n 34093: a1 = u64 [sp + 0x30]\n 34096: s1 = a1\n 34098: a1 = a1 | s0\n 34101: a2 = u64 [sp + 0x40]\n 34104: a4 = u64 [sp + 0x38]\n 34107: a2 = a2 | a4\n 34110: a1 = a1 | a2\n 34113: a1 = a1 >> 0x20\n 34116: u64 [sp + 0x20] = s0\n 34119: a2 = a2 | s0\n 34122: a2 = a2 << 0x20\n 34125: a1 = a1 | a2\n 34128: u8 [a0 + 30] = 0\n 34131: u8 [a0 + 29] = 0\n 34134: u8 [a0 + 28] = 0\n 34137: u8 [a0 + 27] = 0\n 34140: u8 [a0 + 26] = 0\n 34143: u8 [a0 + 25] = 0\n 34146: u8 [a0 + 24] = 0\n 34149: u8 [a0 + 23] = 0\n 34152: u8 [a0 + 22] = 0\n 34155: u8 [a0 + 21] = 0\n 34158: u8 [a0 + 20] = 0\n 34161: u8 [a0 + 19] = 0\n 34164: u8 [a0 + 18] = 0\n 34167: u8 [a0 + 17] = 0\n 34170: u8 [a0 + 16] = 0\n 34173: u8 [a0 + 15] = 0\n 34176: u8 [a0 + 14] = 0\n 34179: u8 [a0 + 13] = 0\n 34182: u8 [a0 + 12] = 0\n 34185: u8 [a0 + 11] = 0\n 34188: u8 [a0 + 10] = 0\n 34191: u8 [a0 + 9] = 0\n 34194: u8 [a0 + 8] = 0\n 34197: u8 [a0 + 7] = 0\n 34200: u8 [a0 + 6] = 0\n 34203: u8 [a0 + 5] = 0\n 34206: u8 [a0 + 4] = 0\n 34209: u8 [a0 + 3] = 0\n 34212: u8 [a0 + 2] = 0\n 34215: u8 [a0 + 1] = 0\n 34218: u8 [a0 + 0] = 0\n 34220: jump @511 if a1 != 0\n      : @507 (gas: 4)\n 34224: i32 s0 = s1 + 0\n 34226: a1 = 0x20\n 34229: a0 = s0\n 34231: ra = 446, jump @0\n      : @508 [@dyn 223] (gas: 41)\n 34238: u8 [a0 + 31] = 0x16\n 34242: u8 [a0 + 30] = 0\n 34245: u8 [a0 + 29] = 0\n 34248: u8 [a0 + 28] = 0\n 34251: u8 [a0 + 27] = 0\n 34254: u8 [a0 + 26] = 0\n 34257: u8 [a0 + 25] = 0\n 34260: u8 [a0 + 24] = 0\n 34263: u8 [a0 + 23] = 0\n 34266: u8 [a0 + 22] = 0\n 34269: u8 [a0 + 21] = 0\n 34272: u8 [a0 + 20] = 0\n 34275: u8 [a0 + 19] = 0\n 34278: u8 [a0 + 18] = 0\n 34281: u8 [a0 + 17] = 0\n 34284: u8 [a0 + 16] = 0\n 34287: u8 [a0 + 15] = 0\n 34290: u8 [a0 + 14] = 0\n 34293: u8 [a0 + 13] = 0\n 34296: u8 [a0 + 12] = 0\n 34299: u8 [a0 + 11] = 0\n 34302: u8 [a0 + 10] = 0\n 34305: u8 [a0 + 9] = 0\n 34308: u8 [a0 + 8] = 0\n 34311: u8 [a0 + 7] = 0\n 34314: u8 [a0 + 6] = 0\n 34317: u8 [a0 + 5] = 0\n 34320: u8 [a0 + 4] = 0\n 34323: u8 [a0 + 3] = 0\n 34326: u8 [a0 + 2] = 0\n 34329: u8 [a0 + 1] = 0\n 34332: a1 = u64 [sp + 0x20]\n 34335: a2 = u64 [sp + 0x38]\n 34338: a1 = a1 | a2\n 34341: a2 = 0xffffffe0\n 34351: a2 = s1 <u a2\n 34354: a3 = u64 [sp + 0x40]\n 34357: a2 = 0 if a3 != 0\n 34359: a2 = 0 if a1 != 0\n 34361: u8 [a0 + 0] = 0\n 34363: jump @511 if a2 == 0\n      : @509 (gas: 3)\n 34367: i32 a0 = s0 + 0x20\n 34370: a1 = 0x20\n 34373: ra = 448, jump @0\n      : @510 [@dyn 224] (gas: 55)\n 34380: u8 [a0 + 31] = 0\n 34383: u8 [a0 + 30] = 0\n 34386: u8 [a0 + 29] = 0\n 34389: u8 [a0 + 28] = 0\n 34392: u8 [a0 + 27] = 0\n 34395: u8 [a0 + 26] = 0\n 34398: u8 [a0 + 25] = 0\n 34401: u8 [a0 + 24] = 0\n 34404: u8 [a0 + 23] = 0\n 34407: u8 [a0 + 22] = 0\n 34410: u8 [a0 + 21] = 0x6c\n 34414: u8 [a0 + 20] = 0x6c\n 34418: u8 [a0 + 19] = 0x61\n 34422: u8 [a0 + 18] = 0x63\n 34426: a5 = 0x20\n 34429: u8 [a0 + 0x11] = a5\n 34432: u8 [a0 + 16] = 0x74\n 34436: u8 [a0 + 15] = 0x6e\n 34440: u8 [a0 + 14] = 0x61\n 34444: u8 [a0 + 13] = 0x72\n 34448: u8 [a0 + 12] = 0x74\n 34452: u8 [a0 + 11] = 0x6e\n 34456: u8 [a0 + 10] = 0x65\n 34460: u8 [a0 + 9] = 0x65\n 34464: u8 [a0 + 8] = 0x72\n 34468: u8 [a0 + 0x7] = a5\n 34471: u8 [a0 + 6] = 0x3a\n 34475: u8 [a0 + 5] = 0x77\n 34479: u8 [a0 + 4] = 0x6f\n 34483: u8 [a0 + 3] = 0x72\n 34487: u8 [a0 + 2] = 0x63\n 34491: u8 [a0 + 1] = 0x73\n 34495: u8 [a0 + 0] = 0x45\n 34498: a1 = u64 [sp]\n 34500: a0 = a1 + 0x60\n 34503: a1 = a0 <u a1\n 34506: a3 = u64 [sp + 0x8]\n 34509: a2 = a3 + a1\n 34512: a3 = a2 <u a3\n 34515: a3 = a1 if a1 == 0\n 34518: a1 = u64 [sp + 0x10]\n 34521: a3 = a3 + a1\n 34524: a1 = a3 <u a1\n 34527: a4 = u64 [sp + 0x18]\n 34530: a1 = a1 + a4\n 34533: a4 = u64 [sp + 0x28]\n 34536: u64 [a4] = a0\n 34538: u64 [a4 + 0x8] = a2\n 34541: u64 [a4 + 0x10] = a3\n 34544: u64 [a4 + 0x18] = a1\n 34547: ra = u64 [sp + 0x58]\n 34550: s0 = u64 [sp + 0x50]\n 34553: s1 = u64 [sp + 0x48]\n 34556: sp = sp + 0x60\n 34559: ret\n      : @511 (gas: 1)\n 34561: trap\n      : @512 (gas: 63)\n 34562: sp = sp + 0xfffffffffffffe00\n 34566: u64 [sp + 0x1f8] = ra\n 34570: u64 [sp + 0x1f0] = s0\n 34574: u64 [sp + 0x1e8] = s1\n 34578: s0 = sp + 0x200\n 34582: sp = sp & 0xffffffffffffffe0\n 34585: a5 = u64 [a4 + 0x18]\n 34588: u64 [sp] = a5\n 34590: a5 = u64 [a4 + 0x10]\n 34593: u64 [sp + 0x8] = a5\n 34596: a5 = u64 [a4 + 0x8]\n 34599: u64 [sp + 0x10] = a5\n 34602: a4 = u64 [a4]\n 34604: u64 [sp + 0x18] = a4\n 34607: a4 = u64 [a3 + 0x18]\n 34610: u64 [sp + 0x20] = a4\n 34613: a4 = u64 [a3 + 0x10]\n 34616: u64 [sp + 0x28] = a4\n 34619: a4 = u64 [a3 + 0x8]\n 34622: u64 [sp + 0x30] = a4\n 34625: a3 = u64 [a3]\n 34627: u64 [sp + 0x38] = a3\n 34630: a3 = u64 [a2 + 0x18]\n 34633: u64 [sp + 0x40] = a3\n 34636: a3 = u64 [a2 + 0x10]\n 34639: u64 [sp + 0x48] = a3\n 34642: a3 = u64 [a2 + 0x8]\n 34645: u64 [sp + 0x50] = a3\n 34648: a2 = u64 [a2]\n 34650: u64 [sp + 0x58] = a2\n 34653: a2 = u64 [a1 + 0x18]\n 34656: u64 [sp + 0x60] = a2\n 34659: a2 = u64 [a1 + 0x10]\n 34662: u64 [sp + 0x68] = a2\n 34665: a2 = u64 [a1 + 0x8]\n 34668: u64 [sp + 0x70] = a2\n 34671: a1 = u64 [a1]\n 34673: u64 [sp + 0x78] = a1\n 34676: a1 = u64 [a0 + 0x18]\n 34679: u64 [sp + 0x80] = a1\n 34683: a1 = u64 [a0 + 0x10]\n 34686: u64 [sp + 0x88] = a1\n 34690: a1 = u64 [a0 + 0x8]\n 34693: u64 [sp + 0x90] = a1\n 34697: a0 = u64 [a0]\n 34699: u64 [sp + 0x98] = a0\n 34703: u64 [sp + 440] = 0\n 34707: u64 [sp + 432] = 0\n 34711: u64 [sp + 424] = 0\n 34715: s1 = 0x5\n 34718: u64 [sp + 0x1a0] = s1\n 34722: u64 [sp + 472] = 0\n 34726: u64 [sp + 464] = 0\n 34730: u64 [sp + 456] = 0\n 34734: u64 [sp + 448] = 0\n 34738: u32 [sp + 384] = 0x20\n 34743: i32 a1 = sp + 0x1a0\n 34747: i32 a3 = sp + 0x1c0\n 34751: i32 a4 = sp + 0x180\n 34755: a2 = 0xffffffffffffffff\n 34758: a0 = 0\n 34760: ecalli 7 // 'get_storage'\n 34762: fallthrough\n      : @513 (gas: 9)\n 34763: a0 = u64 [sp + 0x1d8]\n 34767: a1 = u64 [sp + 0x1c8]\n 34771: a2 = u64 [sp + 0x1c0]\n 34775: a3 = u64 [sp + 0x1d0]\n 34779: a0 = a0 | a1\n 34782: a1 = a2 ^ 0x1\n 34785: a1 = a1 | a3\n 34788: a0 = a0 | a1\n 34791: jump @516 if a0 != 0\n      : @514 (gas: 142)\n 34795: u64 [sp + 440] = 0\n 34799: u64 [sp + 432] = 0\n 34803: u64 [sp + 424] = 0\n 34807: u64 [sp + 416] = 0x5\n 34812: u64 [sp + 472] = 0\n 34816: u64 [sp + 464] = 0\n 34820: u64 [sp + 456] = 0\n 34824: u64 [sp + 448] = 0\n 34828: u32 [sp + 384] = 0x20\n 34833: i32 a1 = sp + 0x1a0\n 34837: i32 a3 = sp + 0x1c0\n 34841: i32 a4 = sp + 0x180\n 34845: a2 = 0xffffffffffffffff\n 34848: a0 = 0\n 34850: ecalli 7 // 'get_storage'\n 34852: u64 [sp + 440] = 0\n 34856: u64 [sp + 432] = 0\n 34860: u64 [sp + 424] = 0\n 34864: u64 [sp + 416] = 0x5\n 34869: u64 [sp + 472] = 0\n 34873: u64 [sp + 464] = 0\n 34877: u64 [sp + 456] = 0\n 34881: u64 [sp + 448] = 0x2\n 34886: i32 a1 = sp + 0x1a0\n 34890: i32 a3 = sp + 0x1c0\n 34894: a2 = 0xffffffffffffffff\n 34897: a4 = 0x20\n 34900: a0 = 0\n 34902: ecalli 14 // 'set_storage'\n 34904: a0 = u64 [sp]\n 34906: u64 [sp + 0xb8] = a0\n 34910: a0 = u64 [sp + 0x8]\n 34913: u64 [sp + 0xb0] = a0\n 34917: a0 = u64 [sp + 0x10]\n 34920: u64 [sp + 0xa8] = a0\n 34924: a0 = u64 [sp + 0x18]\n 34927: u64 [sp + 0xa0] = a0\n 34931: a0 = u64 [sp + 0x20]\n 34934: u64 [sp + 0xd8] = a0\n 34938: a0 = u64 [sp + 0x28]\n 34941: u64 [sp + 0xd0] = a0\n 34945: a0 = u64 [sp + 0x30]\n 34948: u64 [sp + 0xc8] = a0\n 34952: a0 = u64 [sp + 0x38]\n 34955: u64 [sp + 0xc0] = a0\n 34959: a0 = u64 [sp + 0x40]\n 34962: u64 [sp + 0xf8] = a0\n 34966: a0 = u64 [sp + 0x48]\n 34969: u64 [sp + 0xf0] = a0\n 34973: a0 = u64 [sp + 0x50]\n 34976: u64 [sp + 0xe8] = a0\n 34980: a0 = u64 [sp + 0x58]\n 34983: u64 [sp + 0xe0] = a0\n 34987: a0 = u64 [sp + 0x60]\n 34990: u64 [sp + 0x118] = a0\n 34994: a0 = u64 [sp + 0x68]\n 34997: u64 [sp + 0x110] = a0\n 35001: a0 = u64 [sp + 0x70]\n 35004: u64 [sp + 0x108] = a0\n 35008: a0 = u64 [sp + 0x78]\n 35011: u64 [sp + 0x100] = a0\n 35015: a0 = u64 [sp + 0x80]\n 35019: u64 [sp + 0x138] = a0\n 35023: a0 = u64 [sp + 0x88]\n 35027: u64 [sp + 0x130] = a0\n 35031: a0 = u64 [sp + 0x90]\n 35035: u64 [sp + 0x128] = a0\n 35039: a0 = sp + 0x120\n 35043: a1 = sp + 0x100\n 35047: a2 = sp + 0xe0\n 35051: a3 = sp + 0xc0\n 35055: a4 = sp + 0xa0\n 35059: a5 = u64 [sp + 0x98]\n 35063: u64 [sp + 0x120] = a5\n 35067: ra = 0x1c2\n 35071: sp = sp + 0xfffffffffffffde0\n 35075: u64 [sp + 0x218] = ra\n 35079: u64 [sp + 0x210] = s0\n 35083: u64 [sp + 520] = 0x5\n 35088: s0 = sp + 0x220\n 35092: sp = sp & 0xffffffffffffffe0\n 35095: a5 = u64 [a4 + 0x18]\n 35098: u64 [sp + 0x88] = a5\n 35102: a5 = u64 [a4 + 0x10]\n 35105: u64 [sp + 0x68] = a5\n 35108: a5 = u64 [a4 + 0x8]\n 35111: u64 [sp + 0x48] = a5\n 35114: a4 = u64 [a4]\n 35116: u64 [sp + 0x28] = a4\n 35119: a4 = u64 [a3 + 0x18]\n 35122: u64 [sp + 0x80] = a4\n 35126: a4 = u64 [a3 + 0x10]\n 35129: u64 [sp + 0x58] = a4\n 35132: a4 = u64 [a3 + 0x8]\n 35135: u64 [sp + 0x38] = a4\n 35138: a3 = u64 [a3]\n 35140: u64 [sp + 0x18] = a3\n 35143: a3 = u64 [a2 + 0x18]\n 35146: u64 [sp + 0x70] = a3\n 35149: a3 = u64 [a2 + 0x10]\n 35152: u64 [sp + 0x50] = a3\n 35155: a3 = u64 [a2 + 0x8]\n 35158: u64 [sp + 0x30] = a3\n 35161: a2 = u64 [a2]\n 35163: u64 [sp + 0x10] = a2\n 35166: a2 = u64 [a1 + 0x18]\n 35169: u64 [sp + 0x60] = a2\n 35172: a2 = u64 [a1 + 0x10]\n 35175: u64 [sp + 0x40] = a2\n 35178: a2 = u64 [a1 + 0x8]\n 35181: u64 [sp + 0x20] = a2\n 35184: a1 = u64 [a1]\n 35186: u64 [sp + 0x8] = a1\n 35189: a1 = u64 [a0]\n 35191: u64 [sp + 0xb0] = a1\n 35195: a1 = u64 [a0 + 0x8]\n 35198: u64 [sp + 0xb8] = a1\n 35202: a1 = u64 [a0 + 0x10]\n 35205: u64 [sp + 0x90] = a1\n 35209: s1 = u64 [a0 + 0x18]\n 35212: i32 a0 = sp + 0x1a0\n 35216: ecalli 5 // 'caller'\n 35218: a0 = u64 [sp + 0x1a8]\n 35222: a1 = u64 [sp + 0x1a0]\n 35226: a2 = i32 [sp + 0x1b0]\n 35230: a0 = reverse a0\n 35232: a3 = a0 >> 0x20\n 35235: a1 = reverse a1\n 35237: a4 = a1 << 0x20\n 35240: a3 = a3 | a4\n 35243: u64 [sp + 0xa8] = a3\n 35247: a0 = a0 << 0x20\n 35250: a2 = reverse a2\n 35252: a2 = a2 >> 0x20\n 35255: a0 = a0 | a2\n 35258: u64 [sp + 0xa0] = a0\n 35262: a1 = a1 >> 0x20\n 35265: u64 [sp + 0x98] = a1\n 35269: a1 = 0x20\n 35272: a0 = 0\n 35274: ra = 0x1da\n 35278: jump @0\n      : @515 [@dyn 225] (gas: 35)\n 35282: u64 [sp + 440] = 0\n 35286: u64 [sp + 432] = 0\n 35290: u64 [sp + 424] = 0\n 35294: u64 [sp + 0x1a0] = s1\n 35298: u64 [sp + 472] = 0\n 35302: u64 [sp + 464] = 0\n 35306: u64 [sp + 456] = 0\n 35310: u64 [sp + 448] = 0\n 35314: u32 [sp + 384] = 0x20\n 35319: i32 a1 = sp + 0x1a0\n 35323: i32 a3 = sp + 0x1c0\n 35327: i32 a4 = sp + 0x180\n 35331: a2 = 0xffffffffffffffff\n 35334: a0 = 0\n 35336: ecalli 7 // 'get_storage'\n 35338: u64 [sp + 440] = 0\n 35342: u64 [sp + 432] = 0\n 35346: u64 [sp + 424] = 0\n 35350: u64 [sp + 0x1a0] = s1\n 35354: u64 [sp + 472] = 0\n 35358: u64 [sp + 464] = 0\n 35362: u64 [sp + 456] = 0\n 35366: u64 [sp + 448] = 0x1\n 35371: i32 a1 = sp + 0x1a0\n 35375: i32 a3 = sp + 0x1c0\n 35379: a2 = 0xffffffffffffffff\n 35382: a4 = 0x20\n 35385: a0 = 0\n 35387: ecalli 14 // 'set_storage'\n 35389: sp = s0 + 0xfffffffffffffe00\n 35393: ra = u64 [sp + 0x1f8]\n 35397: s0 = u64 [sp + 0x1f0]\n 35401: s1 = u64 [sp + 0x1e8]\n 35405: sp = sp + 0x200\n 35409: ret\n      : @516 (gas: 3)\n 35411: a0 = 0x40\n 35414: a1 = 0x20\n 35417: ra = 452, jump @0\n      : @517 [@dyn 226] (gas: 103)\n 35424: a1 = u8 [a0 + 0x11]\n 35427: a2 = u8 [a0 + 0x10]\n 35430: a3 = u8 [a0 + 0x12]\n 35433: a4 = u8 [a0 + 0x13]\n 35436: a1 = a1 << 0x8\n 35439: a1 = a1 | a2\n 35442: a3 = a3 << 0x10\n 35445: a4 = a4 << 0x18\n 35448: a3 = a3 | a4\n 35451: a1 = a1 | a3\n 35454: a2 = u8 [a0 + 0x15]\n 35457: a3 = u8 [a0 + 0x14]\n 35460: a4 = u8 [a0 + 0x16]\n 35463: a5 = u8 [a0 + 0x17]\n 35466: a2 = a2 << 0x8\n 35469: a2 = a2 | a3\n 35472: a4 = a4 << 0x10\n 35475: a5 = a5 << 0x18\n 35478: a4 = a4 | a5\n 35481: a2 = a2 | a4\n 35484: a2 = a2 << 0x20\n 35487: t0 = a2 | a1\n 35490: a2 = u8 [a0 + 0x1]\n 35493: a3 = u8 [a0]\n 35495: a4 = u8 [a0 + 0x2]\n 35498: a5 = u8 [a0 + 0x3]\n 35501: a2 = a2 << 0x8\n 35504: a2 = a2 | a3\n 35507: a4 = a4 << 0x10\n 35510: a5 = a5 << 0x18\n 35513: a4 = a4 | a5\n 35516: a2 = a2 | a4\n 35519: a3 = u8 [a0 + 0x5]\n 35522: a4 = u8 [a0 + 0x4]\n 35525: a5 = u8 [a0 + 0x6]\n 35528: s1 = u8 [a0 + 0x7]\n 35531: a3 = a3 << 0x8\n 35534: a3 = a3 | a4\n 35537: a5 = a5 << 0x10\n 35540: s1 = s1 << 0x18\n 35543: a5 = a5 | s1\n 35546: a3 = a3 | a5\n 35549: a3 = a3 << 0x20\n 35552: a2 = a2 | a3\n 35555: a3 = u8 [a0 + 0x19]\n 35558: a4 = u8 [a0 + 0x18]\n 35561: a5 = u8 [a0 + 0x1a]\n 35564: s1 = u8 [a0 + 0x1b]\n 35567: a3 = a3 << 0x8\n 35570: a3 = a3 | a4\n 35573: a5 = a5 << 0x10\n 35576: s1 = s1 << 0x18\n 35579: a5 = a5 | s1\n 35582: a3 = a3 | a5\n 35585: a4 = u8 [a0 + 0x1d]\n 35588: a5 = u8 [a0 + 0x1c]\n 35591: s1 = u8 [a0 + 0x1e]\n 35594: a1 = u8 [a0 + 0x1f]\n 35597: a4 = a4 << 0x8\n 35600: a4 = a4 | a5\n 35603: s1 = s1 << 0x10\n 35606: a1 = a1 << 0x18\n 35609: a1 = a1 | s1\n 35612: a1 = a1 | a4\n 35615: a1 = a1 << 0x20\n 35618: a3 = a3 | a1\n 35621: a1 = u8 [a0 + 0x9]\n 35624: a4 = u8 [a0 + 0x8]\n 35627: a5 = u8 [a0 + 0xa]\n 35630: s1 = u8 [a0 + 0xb]\n 35633: a1 = a1 << 0x8\n 35636: a1 = a1 | a4\n 35639: a5 = a5 << 0x10\n 35642: s1 = s1 << 0x18\n 35645: a5 = a5 | s1\n 35648: a1 = a1 | a5\n 35651: a4 = u8 [a0 + 0xd]\n 35654: a5 = u8 [a0 + 0xc]\n 35657: s1 = u8 [a0 + 0xe]\n 35660: a0 = u8 [a0 + 0xf]\n 35663: a4 = a4 << 0x8\n 35666: a4 = a4 | a5\n 35669: s1 = s1 << 0x10\n 35672: a0 = a0 << 0x18\n 35675: a0 = a0 | s1\n 35678: a0 = a0 | a4\n 35681: a0 = a0 << 0x20\n 35684: a0 = a0 | a1\n 35687: s1 = reverse a0\n 35689: a1 = reverse a3\n 35691: a2 = reverse a2\n 35693: a0 = reverse t0\n 35695: u64 [sp + 0x98] = a0\n 35699: u64 [sp + 0x90] = a2\n 35703: a0 = a0 | a2\n 35706: a2 = a1\n 35708: a1 = a1 | s1\n 35711: a1 = a1 | a0\n 35714: a1 = a1 >> 0x20\n 35717: a0 = a0 | s1\n 35720: a0 = a0 << 0x20\n 35723: a0 = a0 | a1\n 35726: jump @521 if a0 != 0\n      : @518 (gas: 5)\n 35730: u64 [sp + 0x88] = a2\n 35734: i32 a0 = a2 + 0\n 35736: a1 = 0x20\n 35739: u64 [sp + 0x80] = a0\n 35743: ra = 454, jump @0\n      : @519 [@dyn 227] (gas: 50)\n 35750: u8 [a0 + 31] = 0\n 35753: u8 [a0 + 30] = 0\n 35756: u8 [a0 + 29] = 0\n 35759: u8 [a0 + 28] = 0\n 35762: u8 [a0 + 27] = 0\n 35765: u8 [a0 + 26] = 0\n 35768: u8 [a0 + 25] = 0\n 35771: u8 [a0 + 24] = 0\n 35774: u8 [a0 + 23] = 0\n 35777: u8 [a0 + 22] = 0\n 35780: u8 [a0 + 21] = 0\n 35783: u8 [a0 + 20] = 0\n 35786: u8 [a0 + 19] = 0\n 35789: u8 [a0 + 18] = 0\n 35792: u8 [a0 + 17] = 0\n 35795: u8 [a0 + 16] = 0\n 35798: u8 [a0 + 15] = 0\n 35801: u8 [a0 + 14] = 0\n 35804: u8 [a0 + 13] = 0\n 35807: u8 [a0 + 12] = 0\n 35810: u8 [a0 + 11] = 0\n 35813: u8 [a0 + 10] = 0\n 35816: u8 [a0 + 9] = 0\n 35819: u8 [a0 + 8] = 0\n 35822: u8 [a0 + 7] = 0\n 35825: u8 [a0 + 6] = 0\n 35828: u8 [a0 + 5] = 0\n 35831: u8 [a0 + 4] = 0\n 35834: u8 [a0 + 3] = 0xa0\n 35839: u8 [a0 + 2] = 0x79\n 35843: u8 [a0 + 1] = 0xc3\n 35848: u8 [a0 + 0] = 0x8\n 35851: a1 = u64 [sp + 0x88]\n 35855: a0 = a1 + 0x4\n 35858: a1 = a0 <u a1\n 35861: a3 = u64 [sp + 0x98]\n 35865: a2 = a3 + a1\n 35868: a3 = a2 <u a3\n 35871: a3 = a1 if a1 == 0\n 35874: a3 = a3 + s1\n 35877: a1 = a3 <u s1\n 35880: a4 = u64 [sp + 0x90]\n 35884: a4 = a4 + a1\n 35887: u64 [sp + 0x148] = a2\n 35891: u64 [sp + 0x140] = a0\n 35895: u64 [sp + 0x150] = a3\n 35899: a0 = sp + 0x160\n 35903: a1 = sp + 0x140\n 35907: u64 [sp + 0x158] = a4\n 35911: ra = 456, jump @504\n      : @520 [@dyn 228] (gas: 30)\n 35917: a0 = u64 [sp + 0x168]\n 35921: t0 = u64 [sp + 0x178]\n 35925: t1 = u64 [sp + 0x160]\n 35929: a3 = u64 [sp + 0x170]\n 35933: a1 = u64 [sp + 0x98]\n 35937: a4 = a0 ^ a1\n 35940: a5 = a0 <u a1\n 35943: t2 = a1\n 35945: a2 = u64 [sp + 0x88]\n 35949: a1 = t1 <u a2\n 35952: a5 = a1 if a4 == 0\n 35955: a4 = a3 - s1\n 35958: a3 = a3 <u s1\n 35961: s1 = u64 [sp + 0x90]\n 35965: s1 = t0 - s1\n 35968: s1 = s1 - a3\n 35971: a3 = a4 <u a5\n 35974: s1 = s1 - a3\n 35977: a4 = a4 - a5\n 35980: a0 = a0 - t2\n 35983: a1 = a0 - a1\n 35986: a0 = t1 - a2\n 35989: a1 = a1 | s1\n 35992: a2 = a0 | a4\n 35995: a2 = a2 | a1\n 35998: a1 = a1 | a4\n 36001: a2 = a2 >> 0x20\n 36004: a1 = a1 << 0x20\n 36007: a1 = a1 | a2\n 36010: jump @522 if a1 == 0\n      : @521 (gas: 1)\n 36013: trap\n      : @522 (gas: 4)\n 36014: i32 s1 = a0 + 0\n 36016: a0 = u64 [sp + 0x80]\n 36020: a1 = s1\n 36022: ra = 458, jump @0\n      : @523 [@dyn 229] (gas: 6)\n 36029: i32 a1 = a0 + 0\n 36031: a0 = 0x1\n 36034: a2 = s1\n 36036: ra = 0x1cc\n 36040: ecalli 12 // 'seal_return'\n 36042: fallthrough\n      : @524 [@dyn 230] (gas: 18)\n 36043: sp = sp + 0xffffffffffffffc8\n 36046: u64 [sp + 0x30] = ra\n 36049: u64 [sp + 0x28] = s0\n 36052: u64 [sp + 0x20] = s1\n 36055: s1 = u64 [a0 + 0x10]\n 36058: a3 = u64 [a0 + 0x18]\n 36061: a1 = u64 [a0 + 0x8]\n 36064: a2 = u64 [a0]\n 36066: u64 [sp + 0x18] = a1\n 36069: u64 [sp + 0x10] = a3\n 36072: a0 = a1 | a3\n 36075: a1 = a2 | s1\n 36078: a1 = a1 | a0\n 36081: a1 = a1 >> 0x20\n 36084: a0 = a0 | s1\n 36087: a0 = a0 << 0x20\n 36090: a0 = a0 | a1\n 36093: jump @529 if a0 != 0\n      : @525 (gas: 6)\n 36097: i32 a0 = a2 + 0\n 36099: a1 = 0x20\n 36102: s0 = 0x20\n 36105: u64 [sp] = a0\n 36107: u64 [sp + 0x8] = a2\n 36110: ra = 462, jump @0\n      : @526 [@dyn 231] (gas: 43)\n 36117: u8 [a0 + 31] = 0x64\n 36121: u8 [a0 + 30] = 0x69\n 36125: u8 [a0 + 29] = 0x76\n 36129: u8 [a0 + 28] = 0x6f\n 36133: u8 [a0 + 27] = 0x72\n 36137: u8 [a0 + 26] = 0x70\n 36141: u8 [a0 + 0x19] = s0\n 36144: a5 = 0x65\n 36147: u8 [a0 + 0x18] = a5\n 36150: u8 [a0 + 23] = 0x68\n 36154: u8 [a0 + 22] = 0x74\n 36158: u8 [a0 + 0x15] = s0\n 36161: u8 [a0 + 20] = 0x74\n 36165: u8 [a0 + 19] = 0x6f\n 36169: u8 [a0 + 18] = 0x6e\n 36173: u8 [a0 + 0x11] = s0\n 36176: u8 [a0 + 16] = 0x73\n 36180: u8 [a0 + 15] = 0x69\n 36184: u8 [a0 + 0xe] = s0\n 36187: u8 [a0 + 13] = 0x72\n 36191: u8 [a0 + 0xc] = a5\n 36194: u8 [a0 + 11] = 0x6c\n 36198: u8 [a0 + 10] = 0x6c\n 36202: u8 [a0 + 9] = 0x61\n 36206: u8 [a0 + 8] = 0x63\n 36210: u8 [a0 + 0x7] = s0\n 36213: s0 = 0x72\n 36216: u8 [a0 + 6] = 0x3a\n 36220: u8 [a0 + 5] = 0x77\n 36224: u8 [a0 + 4] = 0x6f\n 36228: u8 [a0 + 0x3] = s0\n 36231: u8 [a0 + 2] = 0x63\n 36235: u8 [a0 + 1] = 0x73\n 36239: a2 = u64 [sp + 0x10]\n 36242: a2 = a2 | s1\n 36245: a3 = 0xffffffe0\n 36255: a4 = u64 [sp + 0x8]\n 36258: a3 = a4 <u a3\n 36261: a4 = u64 [sp + 0x18]\n 36264: a3 = 0 if a4 != 0\n 36266: a3 = 0 if a2 != 0\n 36268: u8 [a0 + 0] = 0x45\n 36271: jump @529 if a3 == 0\n      : @527 (gas: 4)\n 36275: a0 = u64 [sp]\n 36277: i32 a0 = a0 + 0x20\n 36280: a1 = 0x20\n 36283: ra = 464, jump @0\n      : @528 [@dyn 232] (gas: 38)\n 36290: u8 [a0 + 31] = 0\n 36293: u8 [a0 + 30] = 0\n 36296: u8 [a0 + 29] = 0\n 36299: u8 [a0 + 28] = 0\n 36302: u8 [a0 + 27] = 0\n 36305: u8 [a0 + 26] = 0\n 36308: u8 [a0 + 25] = 0\n 36311: u8 [a0 + 24] = 0\n 36314: u8 [a0 + 23] = 0\n 36317: u8 [a0 + 22] = 0\n 36320: u8 [a0 + 21] = 0\n 36323: u8 [a0 + 20] = 0\n 36326: u8 [a0 + 19] = 0\n 36329: u8 [a0 + 18] = 0\n 36332: u8 [a0 + 17] = 0\n 36335: u8 [a0 + 16] = 0\n 36338: u8 [a0 + 15] = 0\n 36341: u8 [a0 + 14] = 0\n 36344: u8 [a0 + 13] = 0\n 36347: u8 [a0 + 12] = 0\n 36350: u8 [a0 + 11] = 0\n 36353: u8 [a0 + 10] = 0\n 36356: u8 [a0 + 9] = 0\n 36359: u8 [a0 + 8] = 0\n 36362: u8 [a0 + 7] = 0\n 36365: u8 [a0 + 6] = 0\n 36368: u8 [a0 + 5] = 0\n 36371: u8 [a0 + 4] = 0\n 36374: u8 [a0 + 3] = 0\n 36377: u8 [a0 + 2] = 0\n 36380: u8 [a0 + 0x1] = s0\n 36383: a1 = 0x65\n 36386: u8 [a0] = a1\n 36388: ra = u64 [sp + 0x30]\n 36391: s0 = u64 [sp + 0x28]\n 36394: s1 = u64 [sp + 0x20]\n 36397: sp = sp + 0x38\n 36400: ret\n      : @529 (gas: 1)\n 36402: trap\n      : @530 (gas: 17)\n 36403: sp = sp + 0xffffffffffffffa0\n 36406: u64 [sp + 0x58] = ra\n 36409: u64 [sp + 0x50] = s0\n 36412: u64 [sp + 0x48] = s1\n 36415: a3 = u64 [a1 + 0x18]\n 36418: a4 = u64 [a1 + 0x10]\n 36421: a5 = u64 [a1 + 0x8]\n 36424: s1 = u64 [a1]\n 36426: a1 = a5 | a3\n 36429: a2 = s1 | a4\n 36432: a2 = a2 | a1\n 36435: a2 = a2 >> 0x20\n 36438: a1 = a1 | a4\n 36441: a1 = a1 << 0x20\n 36444: a1 = a1 | a2\n 36447: u64 [sp + 0x28] = a0\n 36450: jump @539 if a1 != 0\n      : @531 (gas: 19)\n 36454: a0 = s1 + 0x20\n 36457: u64 [sp + 0x40] = a0\n 36460: a0 = a0 <u s1\n 36463: a1 = a5 + a0\n 36466: u64 [sp + 0x38] = a1\n 36469: u64 [sp + 0x10] = a5\n 36472: s0 = a1 <u a5\n 36475: s0 = a0 if a0 == 0\n 36478: s0 = s0 + a4\n 36481: u64 [sp + 0x18] = a4\n 36484: a0 = s0 <u a4\n 36487: u64 [sp + 0x20] = a3\n 36490: a0 = a0 + a3\n 36493: u64 [sp + 0x30] = a0\n 36496: u64 [sp + 0x8] = s1\n 36499: i32 a0 = s1 + 0\n 36501: a1 = 0x20\n 36504: s1 = 0x20\n 36507: ra = 466, jump @0\n      : @532 [@dyn 233] (gas: 43)\n 36514: u8 [a0 + 0x1f] = s1\n 36517: a1 = u64 [sp + 0x40]\n 36520: a1 = a1 | s0\n 36523: a2 = u64 [sp + 0x38]\n 36526: a3 = u64 [sp + 0x30]\n 36529: a2 = a2 | a3\n 36532: a1 = a1 | a2\n 36535: a1 = a1 >> 0x20\n 36538: a2 = a2 | s0\n 36541: a2 = a2 << 0x20\n 36544: a1 = a1 | a2\n 36547: u8 [a0 + 30] = 0\n 36550: u8 [a0 + 29] = 0\n 36553: u8 [a0 + 28] = 0\n 36556: u8 [a0 + 27] = 0\n 36559: u8 [a0 + 26] = 0\n 36562: u8 [a0 + 25] = 0\n 36565: u8 [a0 + 24] = 0\n 36568: u8 [a0 + 23] = 0\n 36571: u8 [a0 + 22] = 0\n 36574: u8 [a0 + 21] = 0\n 36577: u8 [a0 + 20] = 0\n 36580: u8 [a0 + 19] = 0\n 36583: u8 [a0 + 18] = 0\n 36586: u8 [a0 + 17] = 0\n 36589: u8 [a0 + 16] = 0\n 36592: u8 [a0 + 15] = 0\n 36595: u8 [a0 + 14] = 0\n 36598: u8 [a0 + 13] = 0\n 36601: u8 [a0 + 12] = 0\n 36604: u8 [a0 + 11] = 0\n 36607: u8 [a0 + 10] = 0\n 36610: u8 [a0 + 9] = 0\n 36613: u8 [a0 + 8] = 0\n 36616: u8 [a0 + 7] = 0\n 36619: u8 [a0 + 6] = 0\n 36622: u8 [a0 + 5] = 0\n 36625: u8 [a0 + 4] = 0\n 36628: u8 [a0 + 3] = 0\n 36631: u8 [a0 + 2] = 0\n 36634: u8 [a0 + 1] = 0\n 36637: u8 [a0 + 0] = 0\n 36639: jump @539 if a1 != 0\n      : @533 (gas: 6)\n 36643: s1 = s0\n 36645: s0 = u64 [sp + 0x40]\n 36648: i32 a0 = s0 + 0\n 36650: a1 = 0x20\n 36653: u64 [sp] = a0\n 36655: ra = 468, jump @0\n      : @534 [@dyn 234] (gas: 42)\n 36662: u8 [a0 + 31] = 0x22\n 36666: u8 [a0 + 30] = 0\n 36669: u8 [a0 + 29] = 0\n 36672: u8 [a0 + 28] = 0\n 36675: u8 [a0 + 27] = 0\n 36678: u8 [a0 + 26] = 0\n 36681: u8 [a0 + 25] = 0\n 36684: u8 [a0 + 24] = 0\n 36687: u8 [a0 + 23] = 0\n 36690: u8 [a0 + 22] = 0\n 36693: u8 [a0 + 21] = 0\n 36696: u8 [a0 + 20] = 0\n 36699: u8 [a0 + 19] = 0\n 36702: u8 [a0 + 18] = 0\n 36705: u8 [a0 + 17] = 0\n 36708: u8 [a0 + 16] = 0\n 36711: u8 [a0 + 15] = 0\n 36714: u8 [a0 + 14] = 0\n 36717: u8 [a0 + 13] = 0\n 36720: u8 [a0 + 12] = 0\n 36723: u8 [a0 + 11] = 0\n 36726: u8 [a0 + 10] = 0\n 36729: u8 [a0 + 9] = 0\n 36732: u8 [a0 + 8] = 0\n 36735: u8 [a0 + 7] = 0\n 36738: u8 [a0 + 6] = 0\n 36741: u8 [a0 + 5] = 0\n 36744: u8 [a0 + 4] = 0\n 36747: u8 [a0 + 3] = 0\n 36750: u8 [a0 + 2] = 0\n 36753: u8 [a0 + 1] = 0\n 36756: a1 = u64 [sp + 0x30]\n 36759: a3 = s1 | a1\n 36762: s1 = 0x100000000\n 36772: a1 = 0xffffffe0\n 36782: a1 = s0 <u a1\n 36785: a2 = u64 [sp + 0x38]\n 36788: a1 = 0 if a2 != 0\n 36790: u64 [sp + 0x30] = a3\n 36793: a1 = 0 if a3 != 0\n 36795: u8 [a0 + 0] = 0\n 36797: jump @539 if a1 == 0\n      : @535 (gas: 4)\n 36801: s0 = u64 [sp]\n 36803: i32 a0 = s0 + 0x20\n 36806: a1 = 0x20\n 36809: ra = 470, jump @0\n      : @536 [@dyn 235] (gas: 43)\n 36816: u8 [a0 + 31] = 0x64\n 36820: t0 = 0x69\n 36823: u8 [a0 + 0x1e] = t0\n 36826: u8 [a0 + 29] = 0x76\n 36830: u8 [a0 + 28] = 0x6f\n 36834: a5 = 0x72\n 36837: u8 [a0 + 0x1b] = a5\n 36840: u8 [a0 + 26] = 0x70\n 36844: u8 [a0 + 25] = 0x20\n 36848: u8 [a0 + 24] = 0x65\n 36852: u8 [a0 + 23] = 0x68\n 36856: u8 [a0 + 22] = 0x74\n 36860: u8 [a0 + 21] = 0x20\n 36864: u8 [a0 + 20] = 0x74\n 36868: u8 [a0 + 19] = 0x6f\n 36872: u8 [a0 + 18] = 0x6e\n 36876: u8 [a0 + 17] = 0x20\n 36880: u8 [a0 + 16] = 0x73\n 36884: u8 [a0 + 0xf] = t0\n 36887: u8 [a0 + 14] = 0x20\n 36891: u8 [a0 + 0xd] = a5\n 36894: u8 [a0 + 12] = 0x65\n 36898: u8 [a0 + 11] = 0x6c\n 36902: u8 [a0 + 10] = 0x6c\n 36906: u8 [a0 + 9] = 0x61\n 36910: u8 [a0 + 8] = 0x63\n 36914: u8 [a0 + 7] = 0x20\n 36918: u8 [a0 + 6] = 0x3a\n 36922: a4 = 0x77\n 36925: u8 [a0 + 0x5] = a4\n 36928: u8 [a0 + 4] = 0x6f\n 36932: u8 [a0 + 0x3] = a5\n 36935: u8 [a0 + 2] = 0x63\n 36939: u8 [a0 + 1] = 0x73\n 36943: a2 = s1 + 0xffffffffffffffc0\n 36946: a3 = u64 [sp + 0x40]\n 36949: a2 = a3 <u a2\n 36952: a3 = u64 [sp + 0x38]\n 36955: a2 = 0 if a3 != 0\n 36957: a3 = u64 [sp + 0x30]\n 36960: a2 = 0 if a3 != 0\n 36962: u8 [a0 + 0] = 0x45\n 36965: jump @539 if a2 == 0\n      : @537 (gas: 3)\n 36969: i32 a0 = s0 + 0x40\n 36972: a1 = 0x20\n 36975: ra = 472, jump @0\n      : @538 [@dyn 236] (gas: 54)\n 36982: u8 [a0 + 31] = 0\n 36985: u8 [a0 + 30] = 0\n 36988: u8 [a0 + 29] = 0\n 36991: u8 [a0 + 28] = 0\n 36994: u8 [a0 + 27] = 0\n 36997: u8 [a0 + 26] = 0\n 37000: u8 [a0 + 25] = 0\n 37003: u8 [a0 + 24] = 0\n 37006: u8 [a0 + 23] = 0\n 37009: u8 [a0 + 22] = 0\n 37012: u8 [a0 + 21] = 0\n 37015: u8 [a0 + 20] = 0\n 37018: u8 [a0 + 19] = 0\n 37021: u8 [a0 + 18] = 0\n 37024: u8 [a0 + 17] = 0\n 37027: u8 [a0 + 16] = 0\n 37030: u8 [a0 + 15] = 0\n 37033: u8 [a0 + 14] = 0\n 37036: u8 [a0 + 13] = 0\n 37039: u8 [a0 + 12] = 0\n 37042: u8 [a0 + 11] = 0\n 37045: u8 [a0 + 10] = 0\n 37048: u8 [a0 + 9] = 0\n 37051: u8 [a0 + 8] = 0\n 37054: u8 [a0 + 7] = 0\n 37057: u8 [a0 + 6] = 0\n 37060: u8 [a0 + 5] = 0\n 37063: u8 [a0 + 4] = 0\n 37066: u8 [a0 + 3] = 0\n 37069: u8 [a0 + 2] = 0\n 37072: u8 [a0 + 1] = 0x72\n 37076: u8 [a0 + 0] = 0x65\n 37079: a1 = u64 [sp + 0x8]\n 37082: a0 = a1 + 0x80\n 37086: a1 = a0 <u a1\n 37089: a3 = u64 [sp + 0x10]\n 37092: a2 = a3 + a1\n 37095: a3 = a2 <u a3\n 37098: a3 = a1 if a1 == 0\n 37101: a1 = u64 [sp + 0x18]\n 37104: a3 = a3 + a1\n 37107: a1 = a3 <u a1\n 37110: a4 = u64 [sp + 0x20]\n 37113: a1 = a1 + a4\n 37116: a4 = u64 [sp + 0x28]\n 37119: u64 [a4] = a0\n 37121: u64 [a4 + 0x8] = a2\n 37124: u64 [a4 + 0x10] = a3\n 37127: u64 [a4 + 0x18] = a1\n 37130: ra = u64 [sp + 0x58]\n 37133: s0 = u64 [sp + 0x50]\n 37136: s1 = u64 [sp + 0x48]\n 37139: sp = sp + 0x60\n 37142: ret\n      : @539 (gas: 1)\n 37144: trap\n      : @540 [@dyn 237] (gas: 71)\n 37145: u64 [sp + 0x78] = s1\n 37148: a1 = reverse s1\n 37150: s1 = u64 [sp + 0x90]\n 37154: a2 = reverse s1\n 37156: a3 = u64 [sp + 0xb8]\n 37160: a3 = reverse a3\n 37162: a4 = u64 [sp + 0xb0]\n 37166: a4 = reverse a4\n 37168: a5 = a4 >> 0x38\n 37171: u8 [a0 + 0x1f] = a5\n 37174: a5 = a4 >> 0x30\n 37177: u8 [a0 + 0x1e] = a5\n 37180: a5 = a4 >> 0x28\n 37183: u8 [a0 + 0x1d] = a5\n 37186: a5 = a4 >> 0x20\n 37189: u8 [a0 + 0x1c] = a5\n 37192: a5 = a4 >> 0x18\n 37195: u8 [a0 + 0x1b] = a5\n 37198: a5 = a4 >> 0x10\n 37201: u8 [a0 + 0x1a] = a5\n 37204: a5 = a4 >> 0x8\n 37207: u8 [a0 + 0x19] = a5\n 37210: u8 [a0 + 0x18] = a4\n 37213: a4 = a3 >> 0x38\n 37216: u8 [a0 + 0x17] = a4\n 37219: a4 = a3 >> 0x30\n 37222: u8 [a0 + 0x16] = a4\n 37225: a4 = a3 >> 0x28\n 37228: u8 [a0 + 0x15] = a4\n 37231: a4 = a3 >> 0x20\n 37234: u8 [a0 + 0x14] = a4\n 37237: a4 = a3 >> 0x18\n 37240: u8 [a0 + 0x13] = a4\n 37243: a4 = a3 >> 0x10\n 37246: u8 [a0 + 0x12] = a4\n 37249: a4 = a3 >> 0x8\n 37252: u8 [a0 + 0x11] = a4\n 37255: u8 [a0 + 0x10] = a3\n 37258: a3 = a2 >> 0x38\n 37261: u8 [a0 + 0xf] = a3\n 37264: a3 = a2 >> 0x30\n 37267: u8 [a0 + 0xe] = a3\n 37270: a3 = a2 >> 0x28\n 37273: u8 [a0 + 0xd] = a3\n 37276: a3 = a2 >> 0x20\n 37279: u8 [a0 + 0xc] = a3\n 37282: a3 = a2 >> 0x18\n 37285: u8 [a0 + 0xb] = a3\n 37288: a3 = a2 >> 0x10\n 37291: u8 [a0 + 0xa] = a3\n 37294: a3 = a2 >> 0x8\n 37297: u8 [a0 + 0x9] = a3\n 37300: u8 [a0 + 0x8] = a2\n 37303: a2 = a1 >> 0x38\n 37306: u8 [a0 + 0x7] = a2\n 37309: a2 = a1 >> 0x30\n 37312: u8 [a0 + 0x6] = a2\n 37315: a2 = a1 >> 0x28\n 37318: u8 [a0 + 0x5] = a2\n 37321: a2 = a1 >> 0x20\n 37324: u8 [a0 + 0x4] = a2\n 37327: a2 = a1 >> 0x18\n 37330: u8 [a0 + 0x3] = a2\n 37333: a2 = a1 >> 0x10\n 37336: u8 [a0 + 0x2] = a2\n 37339: a2 = a1 >> 0x8\n 37342: u8 [a0 + 0x1] = a2\n 37345: u8 [a0] = a1\n 37347: a0 = 0x20\n 37350: a1 = 0x20\n 37353: ra = 476, jump @0\n      : @541 [@dyn 238] (gas: 35)\n 37360: u8 [a0 + 31] = 0\n 37363: u8 [a0 + 30] = 0\n 37366: u8 [a0 + 29] = 0\n 37369: u8 [a0 + 28] = 0\n 37372: u8 [a0 + 27] = 0\n 37375: u8 [a0 + 26] = 0\n 37378: u8 [a0 + 25] = 0\n 37381: u8 [a0 + 24] = 0\n 37384: u8 [a0 + 23] = 0\n 37387: u8 [a0 + 22] = 0\n 37390: u8 [a0 + 21] = 0\n 37393: u8 [a0 + 20] = 0\n 37396: u8 [a0 + 19] = 0\n 37399: u8 [a0 + 18] = 0\n 37402: u8 [a0 + 17] = 0\n 37405: u8 [a0 + 16] = 0\n 37408: u8 [a0 + 15] = 0\n 37411: u8 [a0 + 14] = 0\n 37414: u8 [a0 + 13] = 0\n 37417: u8 [a0 + 12] = 0\n 37420: u8 [a0 + 11] = 0\n 37423: u8 [a0 + 10] = 0\n 37426: u8 [a0 + 9] = 0\n 37429: u8 [a0 + 8] = 0\n 37432: u8 [a0 + 7] = 0\n 37435: u8 [a0 + 6] = 0\n 37438: u8 [a0 + 5] = 0\n 37441: u8 [a0 + 4] = 0\n 37444: u8 [a0 + 3] = 0\n 37447: u8 [a0 + 2] = 0\n 37450: u8 [a0 + 1] = 0\n 37453: u8 [a0 + 0] = 0\n 37455: a1 = 0x40\n 37458: a0 = 0\n 37460: ra = 478, jump @0\n      : @542 [@dyn 239] (gas: 28)\n 37467: i32 a0 = a0 + 0\n 37469: i32 a2 = sp + 0x1e0\n 37473: a1 = 0x40\n 37476: ecalli 8 // 'hash_keccak_256'\n 37478: a0 = u64 [sp + 0x1f8]\n 37482: a1 = u64 [sp + 0x1f0]\n 37486: a2 = u64 [sp + 0x1e8]\n 37490: a3 = u64 [sp + 0x1e0]\n 37494: a0 = reverse a0\n 37496: a1 = reverse a1\n 37498: a2 = reverse a2\n 37500: a3 = reverse a3\n 37502: u64 [sp + 0x1d8] = a3\n 37506: u64 [sp + 0x1d0] = a2\n 37510: u64 [sp + 0x1c8] = a1\n 37514: u64 [sp + 0x1c0] = a0\n 37518: u64 [sp + 504] = 0\n 37522: u64 [sp + 496] = 0\n 37526: u64 [sp + 488] = 0\n 37530: u64 [sp + 480] = 0\n 37534: u32 [sp + 512] = 0x20\n 37539: i32 a1 = sp + 0x1c0\n 37543: i32 a3 = sp + 0x1e0\n 37547: i32 a4 = sp + 0x200\n 37551: a2 = 0xffffffffffffffff\n 37554: a0 = 0\n 37556: ecalli 7 // 'get_storage'\n 37558: fallthrough\n      : @543 (gas: 12)\n 37559: a0 = u32 [sp + 0x1f0]\n 37563: a1 = u64 [sp + 0x1e0]\n 37567: a2 = u64 [sp + 0x1e8]\n 37571: a3 = u64 [sp + 0x98]\n 37575: a0 = a0 ^ a3\n 37578: a3 = u64 [sp + 0xa0]\n 37582: a1 = a1 ^ a3\n 37585: a0 = a0 | a1\n 37588: a1 = u64 [sp + 0xa8]\n 37592: a1 = a1 ^ a2\n 37595: a0 = a0 | a1\n 37598: jump @546 if a0 != 0\n      : @544 (gas: 94)\n 37602: a0 = u64 [sp + 0x28]\n 37605: u64 [sp + 0xc0] = a0\n 37609: a0 = u64 [sp + 0x18]\n 37612: u64 [sp + 0xe0] = a0\n 37616: a0 = u64 [sp + 0x10]\n 37619: u64 [sp + 0x100] = a0\n 37623: a0 = u64 [sp + 0x8]\n 37626: u64 [sp + 0x120] = a0\n 37630: a0 = u64 [sp + 0xb0]\n 37634: u64 [sp + 0x140] = a0\n 37638: a0 = u64 [sp + 0x48]\n 37641: u64 [sp + 0xc8] = a0\n 37645: a0 = u64 [sp + 0x38]\n 37648: u64 [sp + 0xe8] = a0\n 37652: a0 = u64 [sp + 0x30]\n 37655: u64 [sp + 0x108] = a0\n 37659: a0 = u64 [sp + 0x20]\n 37662: u64 [sp + 0x128] = a0\n 37666: a0 = u64 [sp + 0xb8]\n 37670: u64 [sp + 0x148] = a0\n 37674: a0 = u64 [sp + 0x68]\n 37677: u64 [sp + 0xd0] = a0\n 37681: a0 = u64 [sp + 0x58]\n 37684: u64 [sp + 0xf0] = a0\n 37688: a0 = u64 [sp + 0x50]\n 37691: u64 [sp + 0x110] = a0\n 37695: a0 = u64 [sp + 0x40]\n 37698: u64 [sp + 0x130] = a0\n 37702: u64 [sp + 0x150] = s1\n 37706: a0 = u64 [sp + 0x88]\n 37710: u64 [sp + 0xd8] = a0\n 37714: a0 = u64 [sp + 0x80]\n 37718: u64 [sp + 0xf8] = a0\n 37722: a0 = u64 [sp + 0x70]\n 37725: u64 [sp + 0x118] = a0\n 37729: a0 = u64 [sp + 0x60]\n 37732: u64 [sp + 0x138] = a0\n 37736: a0 = sp + 0x140\n 37740: a1 = sp + 0x120\n 37744: a2 = sp + 0x100\n 37748: a3 = sp + 0xe0\n 37752: a4 = sp + 0xc0\n 37756: a5 = u64 [sp + 0x78]\n 37759: u64 [sp + 0x158] = a5\n 37763: ra = 0x1e0\n 37767: sp = sp + 0xfffffffffffffa40\n 37771: u64 [sp + 0x5b8] = ra\n 37775: u64 [sp + 0x5b0] = s0\n 37779: u64 [sp + 0x5a8] = s1\n 37783: s0 = sp + 0x5c0\n 37787: sp = sp & 0xffffffffffffffe0\n 37790: a5 = u64 [a4 + 0x18]\n 37793: u64 [sp + 0x148] = a5\n 37797: a5 = u64 [a4 + 0x10]\n 37800: u64 [sp + 0x150] = a5\n 37804: a5 = u64 [a4 + 0x8]\n 37807: u64 [sp + 0x158] = a5\n 37811: a4 = u64 [a4]\n 37813: u64 [sp + 0x160] = a4\n 37817: a4 = u64 [a3 + 0x18]\n 37820: u64 [sp + 0x168] = a4\n 37824: a4 = u64 [a3 + 0x10]\n 37827: u64 [sp + 0x170] = a4\n 37831: a4 = u64 [a3 + 0x8]\n 37834: u64 [sp + 0x178] = a4\n 37838: a3 = u64 [a3]\n 37840: u64 [sp + 0x180] = a3\n 37844: a3 = u64 [a2 + 0x18]\n 37847: u64 [sp + 0x138] = a3\n 37851: a3 = u64 [a2 + 0x10]\n 37854: u64 [sp + 0x130] = a3\n 37858: a3 = u64 [a2 + 0x8]\n 37861: u64 [sp + 0x128] = a3\n 37865: a2 = u64 [a2]\n 37867: u64 [sp + 0x120] = a2\n 37871: a2 = u64 [a1]\n 37873: u64 [sp + 0x1e8] = a2\n 37877: a2 = u64 [a1 + 0x8]\n 37880: u64 [sp + 0x1f8] = a2\n 37884: a2 = u64 [a1 + 0x10]\n 37887: u64 [sp + 0x200] = a2\n 37891: a1 = u64 [a1 + 0x18]\n 37894: u64 [sp + 0x208] = a1\n 37898: a1 = u64 [a0]\n 37900: u64 [sp + 0x1d8] = a1\n 37904: a1 = u64 [a0 + 0x8]\n 37907: u64 [sp + 0x1e0] = a1\n 37911: a1 = u64 [a0 + 0x10]\n 37914: u64 [sp + 0x1f0] = a1\n 37918: s1 = u64 [a0 + 0x18]\n 37921: a1 = 0x20\n 37924: a0 = 0\n 37926: ra = 0x22c\n 37930: jump @0\n      : @545 [@dyn 240] (gas: 6)\n 37934: sp = s0 + 0xfffffffffffffde0\n 37938: ra = u64 [sp + 0x218]\n 37942: s0 = u64 [sp + 0x210]\n 37946: s1 = u64 [sp + 0x208]\n 37950: sp = sp + 0x220\n 37954: ret\n      : @546 (gas: 3)\n 37956: a0 = 0x40\n 37959: a1 = 0x20\n 37962: ra = 482, jump @0\n      : @547 [@dyn 241] (gas: 103)\n 37969: a1 = u8 [a0 + 0x11]\n 37972: a2 = u8 [a0 + 0x10]\n 37975: a3 = u8 [a0 + 0x12]\n 37978: a4 = u8 [a0 + 0x13]\n 37981: a1 = a1 << 0x8\n 37984: a1 = a1 | a2\n 37987: a3 = a3 << 0x10\n 37990: a4 = a4 << 0x18\n 37993: a3 = a3 | a4\n 37996: a1 = a1 | a3\n 37999: a2 = u8 [a0 + 0x15]\n 38002: a3 = u8 [a0 + 0x14]\n 38005: a4 = u8 [a0 + 0x16]\n 38008: a5 = u8 [a0 + 0x17]\n 38011: a2 = a2 << 0x8\n 38014: a2 = a2 | a3\n 38017: a4 = a4 << 0x10\n 38020: a5 = a5 << 0x18\n 38023: a4 = a4 | a5\n 38026: a2 = a2 | a4\n 38029: a2 = a2 << 0x20\n 38032: t0 = a2 | a1\n 38035: a2 = u8 [a0 + 0x1]\n 38038: a3 = u8 [a0]\n 38040: a4 = u8 [a0 + 0x2]\n 38043: a5 = u8 [a0 + 0x3]\n 38046: a2 = a2 << 0x8\n 38049: a2 = a2 | a3\n 38052: a4 = a4 << 0x10\n 38055: a5 = a5 << 0x18\n 38058: a4 = a4 | a5\n 38061: a2 = a2 | a4\n 38064: a3 = u8 [a0 + 0x5]\n 38067: a4 = u8 [a0 + 0x4]\n 38070: a5 = u8 [a0 + 0x6]\n 38073: s1 = u8 [a0 + 0x7]\n 38076: a3 = a3 << 0x8\n 38079: a3 = a3 | a4\n 38082: a5 = a5 << 0x10\n 38085: s1 = s1 << 0x18\n 38088: a5 = a5 | s1\n 38091: a3 = a3 | a5\n 38094: a3 = a3 << 0x20\n 38097: a2 = a2 | a3\n 38100: a3 = u8 [a0 + 0x19]\n 38103: a4 = u8 [a0 + 0x18]\n 38106: a5 = u8 [a0 + 0x1a]\n 38109: s1 = u8 [a0 + 0x1b]\n 38112: a3 = a3 << 0x8\n 38115: a3 = a3 | a4\n 38118: a5 = a5 << 0x10\n 38121: s1 = s1 << 0x18\n 38124: a5 = a5 | s1\n 38127: a3 = a3 | a5\n 38130: a4 = u8 [a0 + 0x1d]\n 38133: a5 = u8 [a0 + 0x1c]\n 38136: s1 = u8 [a0 + 0x1e]\n 38139: a1 = u8 [a0 + 0x1f]\n 38142: a4 = a4 << 0x8\n 38145: a4 = a4 | a5\n 38148: s1 = s1 << 0x10\n 38151: a1 = a1 << 0x18\n 38154: a1 = a1 | s1\n 38157: a1 = a1 | a4\n 38160: a1 = a1 << 0x20\n 38163: a3 = a3 | a1\n 38166: a1 = u8 [a0 + 0x9]\n 38169: a4 = u8 [a0 + 0x8]\n 38172: a5 = u8 [a0 + 0xa]\n 38175: s1 = u8 [a0 + 0xb]\n 38178: a1 = a1 << 0x8\n 38181: a1 = a1 | a4\n 38184: a5 = a5 << 0x10\n 38187: s1 = s1 << 0x18\n 38190: a5 = a5 | s1\n 38193: a1 = a1 | a5\n 38196: a4 = u8 [a0 + 0xd]\n 38199: a5 = u8 [a0 + 0xc]\n 38202: s1 = u8 [a0 + 0xe]\n 38205: a0 = u8 [a0 + 0xf]\n 38208: a4 = a4 << 0x8\n 38211: a4 = a4 | a5\n 38214: s1 = s1 << 0x10\n 38217: a0 = a0 << 0x18\n 38220: a0 = a0 | s1\n 38223: a0 = a0 | a4\n 38226: a0 = a0 << 0x20\n 38229: a0 = a0 | a1\n 38232: s1 = reverse a0\n 38234: a1 = reverse a3\n 38236: a2 = reverse a2\n 38238: a0 = reverse t0\n 38240: u64 [sp + 0xb8] = a0\n 38244: u64 [sp + 0xb0] = a2\n 38248: a0 = a0 | a2\n 38251: a2 = a1\n 38253: a1 = a1 | s1\n 38256: a1 = a1 | a0\n 38259: a1 = a1 >> 0x20\n 38262: a0 = a0 | s1\n 38265: a0 = a0 << 0x20\n 38268: a0 = a0 | a1\n 38271: jump @551 if a0 != 0\n      : @548 (gas: 5)\n 38275: u64 [sp + 0xa8] = a2\n 38279: i32 a0 = a2 + 0\n 38281: a1 = 0x20\n 38284: u64 [sp + 0xa0] = a0\n 38288: ra = 484, jump @0\n      : @549 [@dyn 242] (gas: 50)\n 38295: u8 [a0 + 31] = 0\n 38298: u8 [a0 + 30] = 0\n 38301: u8 [a0 + 29] = 0\n 38304: u8 [a0 + 28] = 0\n 38307: u8 [a0 + 27] = 0\n 38310: u8 [a0 + 26] = 0\n 38313: u8 [a0 + 25] = 0\n 38316: u8 [a0 + 24] = 0\n 38319: u8 [a0 + 23] = 0\n 38322: u8 [a0 + 22] = 0\n 38325: u8 [a0 + 21] = 0\n 38328: u8 [a0 + 20] = 0\n 38331: u8 [a0 + 19] = 0\n 38334: u8 [a0 + 18] = 0\n 38337: u8 [a0 + 17] = 0\n 38340: u8 [a0 + 16] = 0\n 38343: u8 [a0 + 15] = 0\n 38346: u8 [a0 + 14] = 0\n 38349: u8 [a0 + 13] = 0\n 38352: u8 [a0 + 12] = 0\n 38355: u8 [a0 + 11] = 0\n 38358: u8 [a0 + 10] = 0\n 38361: u8 [a0 + 9] = 0\n 38364: u8 [a0 + 8] = 0\n 38367: u8 [a0 + 7] = 0\n 38370: u8 [a0 + 6] = 0\n 38373: u8 [a0 + 5] = 0\n 38376: u8 [a0 + 4] = 0\n 38379: u8 [a0 + 3] = 0xa0\n 38384: u8 [a0 + 2] = 0x79\n 38388: u8 [a0 + 1] = 0xc3\n 38393: u8 [a0 + 0] = 0x8\n 38396: a1 = u64 [sp + 0xa8]\n 38400: a0 = a1 + 0x4\n 38403: a1 = a0 <u a1\n 38406: a3 = u64 [sp + 0xb8]\n 38410: a2 = a3 + a1\n 38413: a3 = a2 <u a3\n 38416: a3 = a1 if a1 == 0\n 38419: a3 = a3 + s1\n 38422: a1 = a3 <u s1\n 38425: a4 = u64 [sp + 0xb0]\n 38429: a4 = a4 + a1\n 38432: u64 [sp + 0x168] = a2\n 38436: u64 [sp + 0x160] = a0\n 38440: u64 [sp + 0x170] = a3\n 38444: a0 = sp + 0x180\n 38448: a1 = sp + 0x160\n 38452: u64 [sp + 0x178] = a4\n 38456: ra = 486, jump @530\n      : @550 [@dyn 243] (gas: 30)\n 38462: a0 = u64 [sp + 0x188]\n 38466: t0 = u64 [sp + 0x198]\n 38470: t1 = u64 [sp + 0x180]\n 38474: a3 = u64 [sp + 0x190]\n 38478: a1 = u64 [sp + 0xb8]\n 38482: a4 = a0 ^ a1\n 38485: a5 = a0 <u a1\n 38488: t2 = a1\n 38490: a2 = u64 [sp + 0xa8]\n 38494: a1 = t1 <u a2\n 38497: a5 = a1 if a4 == 0\n 38500: a4 = a3 - s1\n 38503: a3 = a3 <u s1\n 38506: s1 = u64 [sp + 0xb0]\n 38510: s1 = t0 - s1\n 38513: s1 = s1 - a3\n 38516: a3 = a4 <u a5\n 38519: s1 = s1 - a3\n 38522: a4 = a4 - a5\n 38525: a0 = a0 - t2\n 38528: a1 = a0 - a1\n 38531: a0 = t1 - a2\n 38534: a1 = a1 | s1\n 38537: a2 = a0 | a4\n 38540: a2 = a2 | a1\n 38543: a1 = a1 | a4\n 38546: a2 = a2 >> 0x20\n 38549: a1 = a1 << 0x20\n 38552: a1 = a1 | a2\n 38555: jump @552 if a1 == 0\n      : @551 (gas: 1)\n 38558: trap\n      : @552 (gas: 4)\n 38559: i32 s1 = a0 + 0\n 38561: a0 = u64 [sp + 0xa0]\n 38565: a1 = s1\n 38567: ra = 488, jump @0\n      : @553 [@dyn 244] (gas: 6)\n 38574: i32 a1 = a0 + 0\n 38576: a0 = 0x1\n 38579: a2 = s1\n 38581: ra = 0x1ea\n 38585: ecalli 12 // 'seal_return'\n 38587: fallthrough\n      : @554 [@dyn 245] (gas: 9)\n 38588: a2 = u64 [a1 + 0x18]\n 38591: a3 = u64 [a1 + 0x10]\n 38594: a4 = u64 [a1 + 0x8]\n 38597: a1 = u64 [a1]\n 38599: u64 [a0 + 0x18] = a2\n 38602: u64 [a0 + 0x10] = a3\n 38605: u64 [a0 + 0x8] = a4\n 38608: u64 [a0] = a1\n 38610: ret\n      : @555 (gas: 17)\n 38612: sp = sp + 0xffffffffffffffa0\n 38615: u64 [sp + 0x58] = ra\n 38618: u64 [sp + 0x50] = s0\n 38621: u64 [sp + 0x48] = s1\n 38624: a3 = u64 [a1 + 0x18]\n 38627: a4 = u64 [a1 + 0x10]\n 38630: a5 = u64 [a1 + 0x8]\n 38633: s1 = u64 [a1]\n 38635: a1 = a5 | a3\n 38638: a2 = s1 | a4\n 38641: a2 = a2 | a1\n 38644: a2 = a2 >> 0x20\n 38647: a1 = a1 | a4\n 38650: a1 = a1 << 0x20\n 38653: a1 = a1 | a2\n 38656: u64 [sp + 0x28] = a0\n 38659: jump @562 if a1 != 0\n      : @556 (gas: 19)\n 38663: a0 = s1 + 0x20\n 38666: u64 [sp + 0x30] = a0\n 38669: a0 = a0 <u s1\n 38672: a1 = a5 + a0\n 38675: u64 [sp + 0x40] = a1\n 38678: u64 [sp + 0x8] = a5\n 38681: s0 = a1 <u a5\n 38684: s0 = a0 if a0 == 0\n 38687: s0 = s0 + a4\n 38690: u64 [sp + 0x10] = a4\n 38693: a0 = s0 <u a4\n 38696: u64 [sp + 0x18] = a3\n 38699: a0 = a0 + a3\n 38702: u64 [sp + 0x38] = a0\n 38705: u64 [sp] = s1\n 38707: i32 a0 = s1 + 0\n 38709: a1 = 0x20\n 38712: s1 = 0x20\n 38715: ra = 492, jump @0\n      : @557 [@dyn 246] (gas: 45)\n 38722: u8 [a0 + 0x1f] = s1\n 38725: a1 = u64 [sp + 0x30]\n 38728: s1 = a1\n 38730: a1 = a1 | s0\n 38733: a2 = u64 [sp + 0x40]\n 38736: a4 = u64 [sp + 0x38]\n 38739: a2 = a2 | a4\n 38742: a1 = a1 | a2\n 38745: a1 = a1 >> 0x20\n 38748: u64 [sp + 0x20] = s0\n 38751: a2 = a2 | s0\n 38754: a2 = a2 << 0x20\n 38757: a1 = a1 | a2\n 38760: u8 [a0 + 30] = 0\n 38763: u8 [a0 + 29] = 0\n 38766: u8 [a0 + 28] = 0\n 38769: u8 [a0 + 27] = 0\n 38772: u8 [a0 + 26] = 0\n 38775: u8 [a0 + 25] = 0\n 38778: u8 [a0 + 24] = 0\n 38781: u8 [a0 + 23] = 0\n 38784: u8 [a0 + 22] = 0\n 38787: u8 [a0 + 21] = 0\n 38790: u8 [a0 + 20] = 0\n 38793: u8 [a0 + 19] = 0\n 38796: u8 [a0 + 18] = 0\n 38799: u8 [a0 + 17] = 0\n 38802: u8 [a0 + 16] = 0\n 38805: u8 [a0 + 15] = 0\n 38808: u8 [a0 + 14] = 0\n 38811: u8 [a0 + 13] = 0\n 38814: u8 [a0 + 12] = 0\n 38817: u8 [a0 + 11] = 0\n 38820: u8 [a0 + 10] = 0\n 38823: u8 [a0 + 9] = 0\n 38826: u8 [a0 + 8] = 0\n 38829: u8 [a0 + 7] = 0\n 38832: u8 [a0 + 6] = 0\n 38835: u8 [a0 + 5] = 0\n 38838: u8 [a0 + 4] = 0\n 38841: u8 [a0 + 3] = 0\n 38844: u8 [a0 + 2] = 0\n 38847: u8 [a0 + 1] = 0\n 38850: u8 [a0 + 0] = 0\n 38852: jump @562 if a1 != 0\n      : @558 (gas: 4)\n 38856: i32 s0 = s1 + 0\n 38858: a1 = 0x20\n 38861: a0 = s0\n 38863: ra = 494, jump @0\n      : @559 [@dyn 247] (gas: 41)\n 38870: u8 [a0 + 31] = 0x1f\n 38874: u8 [a0 + 30] = 0\n 38877: u8 [a0 + 29] = 0\n 38880: u8 [a0 + 28] = 0\n 38883: u8 [a0 + 27] = 0\n 38886: u8 [a0 + 26] = 0\n 38889: u8 [a0 + 25] = 0\n 38892: u8 [a0 + 24] = 0\n 38895: u8 [a0 + 23] = 0\n 38898: u8 [a0 + 22] = 0\n 38901: u8 [a0 + 21] = 0\n 38904: u8 [a0 + 20] = 0\n 38907: u8 [a0 + 19] = 0\n 38910: u8 [a0 + 18] = 0\n 38913: u8 [a0 + 17] = 0\n 38916: u8 [a0 + 16] = 0\n 38919: u8 [a0 + 15] = 0\n 38922: u8 [a0 + 14] = 0\n 38925: u8 [a0 + 13] = 0\n 38928: u8 [a0 + 12] = 0\n 38931: u8 [a0 + 11] = 0\n 38934: u8 [a0 + 10] = 0\n 38937: u8 [a0 + 9] = 0\n 38940: u8 [a0 + 8] = 0\n 38943: u8 [a0 + 7] = 0\n 38946: u8 [a0 + 6] = 0\n 38949: u8 [a0 + 5] = 0\n 38952: u8 [a0 + 4] = 0\n 38955: u8 [a0 + 3] = 0\n 38958: u8 [a0 + 2] = 0\n 38961: u8 [a0 + 1] = 0\n 38964: a1 = u64 [sp + 0x20]\n 38967: a2 = u64 [sp + 0x38]\n 38970: a1 = a1 | a2\n 38973: a2 = 0xffffffe0\n 38983: a2 = s1 <u a2\n 38986: a3 = u64 [sp + 0x40]\n 38989: a2 = 0 if a3 != 0\n 38991: a2 = 0 if a1 != 0\n 38993: u8 [a0 + 0] = 0\n 38995: jump @562 if a2 == 0\n      : @560 (gas: 3)\n 38999: i32 a0 = s0 + 0x20\n 39002: a1 = 0x20\n 39005: ra = 496, jump @0\n      : @561 [@dyn 248] (gas: 54)\n 39012: u8 [a0 + 27] = 0x69\n 39016: u8 [a0 + 30] = 0x64\n 39020: u8 [a0 + 21] = 0x64\n 39024: u8 [a0 + 25] = 0x6c\n 39028: u8 [a0 + 17] = 0x6c\n 39032: u8 [a0 + 14] = 0x74\n 39036: u8 [a0 + 13] = 0x6e\n 39040: u8 [a0 + 29] = 0x65\n 39044: u8 [a0 + 19] = 0x65\n 39048: u8 [a0 + 12] = 0x65\n 39052: u8 [a0 + 28] = 0x6d\n 39056: u8 [a0 + 11] = 0x6d\n 39060: u8 [a0 + 22] = 0x79\n 39064: u8 [a0 + 10] = 0x79\n 39068: u8 [a0 + 26] = 0x61\n 39072: u8 [a0 + 20] = 0x61\n 39076: u8 [a0 + 16] = 0x61\n 39080: u8 [a0 + 9] = 0x61\n 39084: u8 [a0 + 8] = 0x70\n 39088: u8 [a0 + 31] = 0\n 39091: u8 [a0 + 23] = 0x20\n 39095: u8 [a0 + 15] = 0x20\n 39099: u8 [a0 + 7] = 0x20\n 39103: u8 [a0 + 6] = 0x3a\n 39107: u8 [a0 + 5] = 0x77\n 39111: u8 [a0 + 4] = 0x6f\n 39115: u8 [a0 + 18] = 0x72\n 39119: u8 [a0 + 3] = 0x72\n 39123: u8 [a0 + 24] = 0x63\n 39127: u8 [a0 + 2] = 0x63\n 39131: u8 [a0 + 1] = 0x73\n 39135: u8 [a0 + 0] = 0x45\n 39138: a1 = u64 [sp]\n 39140: a0 = a1 + 0x60\n 39143: a1 = a0 <u a1\n 39146: a3 = u64 [sp + 0x8]\n 39149: a2 = a3 + a1\n 39152: a3 = a2 <u a3\n 39155: a3 = a1 if a1 == 0\n 39158: a1 = u64 [sp + 0x10]\n 39161: a3 = a3 + a1\n 39164: a1 = a3 <u a1\n 39167: a4 = u64 [sp + 0x18]\n 39170: a1 = a1 + a4\n 39173: a4 = u64 [sp + 0x28]\n 39176: u64 [a4] = a0\n 39178: u64 [a4 + 0x8] = a2\n 39181: u64 [a4 + 0x10] = a3\n 39184: u64 [a4 + 0x18] = a1\n 39187: ra = u64 [sp + 0x58]\n 39190: s0 = u64 [sp + 0x50]\n 39193: s1 = u64 [sp + 0x48]\n 39196: sp = sp + 0x60\n 39199: ret\n      : @562 (gas: 1)\n 39201: trap\n      : @563 (gas: 17)\n 39202: sp = sp + 0xffffffffffffffa0\n 39205: u64 [sp + 0x58] = ra\n 39208: u64 [sp + 0x50] = s0\n 39211: u64 [sp + 0x48] = s1\n 39214: a3 = u64 [a1 + 0x18]\n 39217: a4 = u64 [a1 + 0x10]\n 39220: a5 = u64 [a1 + 0x8]\n 39223: s1 = u64 [a1]\n 39225: a1 = a5 | a3\n 39228: a2 = s1 | a4\n 39231: a2 = a2 | a1\n 39234: a2 = a2 >> 0x20\n 39237: a1 = a1 | a4\n 39240: a1 = a1 << 0x20\n 39243: a1 = a1 | a2\n 39246: u64 [sp + 0x28] = a0\n 39249: jump @570 if a1 != 0\n      : @564 (gas: 19)\n 39253: a0 = s1 + 0x20\n 39256: u64 [sp + 0x30] = a0\n 39259: a0 = a0 <u s1\n 39262: a1 = a5 + a0\n 39265: u64 [sp + 0x40] = a1\n 39268: u64 [sp + 0x8] = a5\n 39271: s0 = a1 <u a5\n 39274: s0 = a0 if a0 == 0\n 39277: s0 = s0 + a4\n 39280: u64 [sp + 0x10] = a4\n 39283: a0 = s0 <u a4\n 39286: u64 [sp + 0x18] = a3\n 39289: a0 = a0 + a3\n 39292: u64 [sp + 0x38] = a0\n 39295: u64 [sp] = s1\n 39297: i32 a0 = s1 + 0\n 39299: a1 = 0x20\n 39302: s1 = 0x20\n 39305: ra = 498, jump @0\n      : @565 [@dyn 249] (gas: 45)\n 39312: u8 [a0 + 0x1f] = s1\n 39315: a1 = u64 [sp + 0x30]\n 39318: s1 = a1\n 39320: a1 = a1 | s0\n 39323: a2 = u64 [sp + 0x40]\n 39326: a4 = u64 [sp + 0x38]\n 39329: a2 = a2 | a4\n 39332: a1 = a1 | a2\n 39335: a1 = a1 >> 0x20\n 39338: u64 [sp + 0x20] = s0\n 39341: a2 = a2 | s0\n 39344: a2 = a2 << 0x20\n 39347: a1 = a1 | a2\n 39350: u8 [a0 + 30] = 0\n 39353: u8 [a0 + 29] = 0\n 39356: u8 [a0 + 28] = 0\n 39359: u8 [a0 + 27] = 0\n 39362: u8 [a0 + 26] = 0\n 39365: u8 [a0 + 25] = 0\n 39368: u8 [a0 + 24] = 0\n 39371: u8 [a0 + 23] = 0\n 39374: u8 [a0 + 22] = 0\n 39377: u8 [a0 + 21] = 0\n 39380: u8 [a0 + 20] = 0\n 39383: u8 [a0 + 19] = 0\n 39386: u8 [a0 + 18] = 0\n 39389: u8 [a0 + 17] = 0\n 39392: u8 [a0 + 16] = 0\n 39395: u8 [a0 + 15] = 0\n 39398: u8 [a0 + 14] = 0\n 39401: u8 [a0 + 13] = 0\n 39404: u8 [a0 + 12] = 0\n 39407: u8 [a0 + 11] = 0\n 39410: u8 [a0 + 10] = 0\n 39413: u8 [a0 + 9] = 0\n 39416: u8 [a0 + 8] = 0\n 39419: u8 [a0 + 7] = 0\n 39422: u8 [a0 + 6] = 0\n 39425: u8 [a0 + 5] = 0\n 39428: u8 [a0 + 4] = 0\n 39431: u8 [a0 + 3] = 0\n 39434: u8 [a0 + 2] = 0\n 39437: u8 [a0 + 1] = 0\n 39440: u8 [a0 + 0] = 0\n 39442: jump @570 if a1 != 0\n      : @566 (gas: 4)\n 39446: i32 s0 = s1 + 0\n 39448: a1 = 0x20\n 39451: a0 = s0\n 39453: ra = 500, jump @0\n      : @567 [@dyn 250] (gas: 41)\n 39460: u8 [a0 + 31] = 0x1e\n 39464: u8 [a0 + 30] = 0\n 39467: u8 [a0 + 29] = 0\n 39470: u8 [a0 + 28] = 0\n 39473: u8 [a0 + 27] = 0\n 39476: u8 [a0 + 26] = 0\n 39479: u8 [a0 + 25] = 0\n 39482: u8 [a0 + 24] = 0\n 39485: u8 [a0 + 23] = 0\n 39488: u8 [a0 + 22] = 0\n 39491: u8 [a0 + 21] = 0\n 39494: u8 [a0 + 20] = 0\n 39497: u8 [a0 + 19] = 0\n 39500: u8 [a0 + 18] = 0\n 39503: u8 [a0 + 17] = 0\n 39506: u8 [a0 + 16] = 0\n 39509: u8 [a0 + 15] = 0\n 39512: u8 [a0 + 14] = 0\n 39515: u8 [a0 + 13] = 0\n 39518: u8 [a0 + 12] = 0\n 39521: u8 [a0 + 11] = 0\n 39524: u8 [a0 + 10] = 0\n 39527: u8 [a0 + 9] = 0\n 39530: u8 [a0 + 8] = 0\n 39533: u8 [a0 + 7] = 0\n 39536: u8 [a0 + 6] = 0\n 39539: u8 [a0 + 5] = 0\n 39542: u8 [a0 + 4] = 0\n 39545: u8 [a0 + 3] = 0\n 39548: u8 [a0 + 2] = 0\n 39551: u8 [a0 + 1] = 0\n 39554: a1 = u64 [sp + 0x20]\n 39557: a2 = u64 [sp + 0x38]\n 39560: a1 = a1 | a2\n 39563: a2 = 0xffffffe0\n 39573: a2 = s1 <u a2\n 39576: a3 = u64 [sp + 0x40]\n 39579: a2 = 0 if a3 != 0\n 39581: a2 = 0 if a1 != 0\n 39583: u8 [a0 + 0] = 0\n 39585: jump @570 if a2 == 0\n      : @568 (gas: 3)\n 39589: i32 a0 = s0 + 0x20\n 39592: a1 = 0x20\n 39595: ra = 502, jump @0\n      : @569 [@dyn 251] (gas: 54)\n 39602: u8 [a0 + 28] = 0x74\n 39606: u8 [a0 + 23] = 0x64\n 39610: u8 [a0 + 21] = 0x6e\n 39614: u8 [a0 + 24] = 0x69\n 39618: u8 [a0 + 20] = 0x69\n 39622: u8 [a0 + 17] = 0x69\n 39626: u8 [a0 + 29] = 0x65\n 39630: u8 [a0 + 15] = 0x65\n 39634: u8 [a0 + 13] = 0x61\n 39638: u8 [a0 + 12] = 0x68\n 39642: u8 [a0 + 27] = 0x75\n 39646: u8 [a0 + 9] = 0x75\n 39650: u8 [a0 + 26] = 0x70\n 39654: u8 [a0 + 8] = 0x70\n 39658: u8 [a0 + 31] = 0\n 39661: u8 [a0 + 30] = 0\n 39664: u8 [a0 + 22] = 0x20\n 39668: u8 [a0 + 19] = 0x20\n 39672: u8 [a0 + 16] = 0x20\n 39676: u8 [a0 + 7] = 0x20\n 39680: u8 [a0 + 6] = 0x3a\n 39684: u8 [a0 + 5] = 0x77\n 39688: u8 [a0 + 4] = 0x6f\n 39692: u8 [a0 + 10] = 0x72\n 39696: u8 [a0 + 3] = 0x72\n 39700: u8 [a0 + 11] = 0x63\n 39704: u8 [a0 + 2] = 0x63\n 39708: u8 [a0 + 25] = 0x73\n 39712: u8 [a0 + 18] = 0x73\n 39716: u8 [a0 + 14] = 0x73\n 39720: u8 [a0 + 1] = 0x73\n 39724: u8 [a0 + 0] = 0x45\n 39727: a1 = u64 [sp]\n 39729: a0 = a1 + 0x60\n 39732: a1 = a0 <u a1\n 39735: a3 = u64 [sp + 0x8]\n 39738: a2 = a3 + a1\n 39741: a3 = a2 <u a3\n 39744: a3 = a1 if a1 == 0\n 39747: a1 = u64 [sp + 0x10]\n 39750: a3 = a3 + a1\n 39753: a1 = a3 <u a1\n 39756: a4 = u64 [sp + 0x18]\n 39759: a1 = a1 + a4\n 39762: a4 = u64 [sp + 0x28]\n 39765: u64 [a4] = a0\n 39767: u64 [a4 + 0x8] = a2\n 39770: u64 [a4 + 0x10] = a3\n 39773: u64 [a4 + 0x18] = a1\n 39776: ra = u64 [sp + 0x58]\n 39779: s0 = u64 [sp + 0x50]\n 39782: s1 = u64 [sp + 0x48]\n 39785: sp = sp + 0x60\n 39788: ret\n      : @570 (gas: 1)\n 39790: trap\n      : @571 (gas: 18)\n 39791: sp = sp + 0xffffffffffffff60\n 39795: u64 [sp + 0x98] = ra\n 39799: u64 [sp + 0x90] = s0\n 39803: u64 [sp + 0x88] = s1\n 39807: s0 = sp + 0xa0\n 39811: sp = sp & 0xfffffffffffffff0\n 39814: a2 = u64 [a1 + 0x18]\n 39817: u64 [sp + 0x30] = a2\n 39820: a2 = u64 [a1 + 0x10]\n 39823: u64 [sp + 0x28] = a2\n 39826: a2 = u64 [a1 + 0x8]\n 39829: u64 [sp + 0x20] = a2\n 39832: a1 = u64 [a1]\n 39834: u64 [sp + 0x18] = a1\n 39837: u64 [sp + 0x38] = a0\n 39840: a0 = 0x40\n 39843: a1 = 0x20\n 39846: ra = 504, jump @0\n      : @572 [@dyn 252] (gas: 130)\n 39853: a1 = u8 [a0 + 0x19]\n 39856: a2 = u8 [a0 + 0x18]\n 39859: a3 = u8 [a0 + 0x1a]\n 39862: a4 = u8 [a0 + 0x1b]\n 39865: a1 = a1 << 0x8\n 39868: a1 = a1 | a2\n 39871: a3 = a3 << 0x10\n 39874: a4 = a4 << 0x18\n 39877: a3 = a3 | a4\n 39880: a1 = a1 | a3\n 39883: a2 = u8 [a0 + 0x1d]\n 39886: a3 = u8 [a0 + 0x1c]\n 39889: a4 = u8 [a0 + 0x1e]\n 39892: a5 = u8 [a0 + 0x1f]\n 39895: a2 = a2 << 0x8\n 39898: a2 = a2 | a3\n 39901: a4 = a4 << 0x10\n 39904: a5 = a5 << 0x18\n 39907: a4 = a4 | a5\n 39910: a2 = a2 | a4\n 39913: a2 = a2 << 0x20\n 39916: t0 = a2 | a1\n 39919: a2 = u8 [a0 + 0x11]\n 39922: a3 = u8 [a0 + 0x10]\n 39925: a4 = u8 [a0 + 0x12]\n 39928: a5 = u8 [a0 + 0x13]\n 39931: a2 = a2 << 0x8\n 39934: a2 = a2 | a3\n 39937: a4 = a4 << 0x10\n 39940: a5 = a5 << 0x18\n 39943: a4 = a4 | a5\n 39946: a2 = a2 | a4\n 39949: a3 = u8 [a0 + 0x15]\n 39952: a4 = u8 [a0 + 0x14]\n 39955: a5 = u8 [a0 + 0x16]\n 39958: s1 = u8 [a0 + 0x17]\n 39961: a3 = a3 << 0x8\n 39964: a3 = a3 | a4\n 39967: a5 = a5 << 0x10\n 39970: s1 = s1 << 0x18\n 39973: a5 = a5 | s1\n 39976: a3 = a3 | a5\n 39979: a3 = a3 << 0x20\n 39982: a2 = a2 | a3\n 39985: a3 = u8 [a0 + 0x9]\n 39988: a4 = u8 [a0 + 0x8]\n 39991: a5 = u8 [a0 + 0xa]\n 39994: s1 = u8 [a0 + 0xb]\n 39997: a3 = a3 << 0x8\n 40000: a3 = a3 | a4\n 40003: a5 = a5 << 0x10\n 40006: s1 = s1 << 0x18\n 40009: a5 = a5 | s1\n 40012: a3 = a3 | a5\n 40015: a4 = u8 [a0 + 0xd]\n 40018: a5 = u8 [a0 + 0xc]\n 40021: s1 = u8 [a0 + 0xe]\n 40024: a1 = u8 [a0 + 0xf]\n 40027: a4 = a4 << 0x8\n 40030: a4 = a4 | a5\n 40033: s1 = s1 << 0x10\n 40036: a1 = a1 << 0x18\n 40039: a1 = a1 | s1\n 40042: a1 = a1 | a4\n 40045: a1 = a1 << 0x20\n 40048: a3 = a3 | a1\n 40051: a1 = u8 [a0 + 0x1]\n 40054: a4 = u8 [a0]\n 40056: a5 = u8 [a0 + 0x2]\n 40059: s1 = u8 [a0 + 0x3]\n 40062: a1 = a1 << 0x8\n 40065: a1 = a1 | a4\n 40068: a5 = a5 << 0x10\n 40071: s1 = s1 << 0x18\n 40074: a5 = a5 | s1\n 40077: a1 = a1 | a5\n 40080: a4 = u8 [a0 + 0x5]\n 40083: a5 = u8 [a0 + 0x4]\n 40086: s1 = u8 [a0 + 0x6]\n 40089: a0 = u8 [a0 + 0x7]\n 40092: a4 = a4 << 0x8\n 40095: a4 = a4 | a5\n 40098: s1 = s1 << 0x10\n 40101: a0 = a0 << 0x18\n 40104: a0 = a0 | s1\n 40107: a0 = a0 | a4\n 40110: a0 = a0 << 0x20\n 40113: a0 = a0 | a1\n 40116: t1 = reverse a0\n 40118: t2 = reverse a3\n 40120: s1 = reverse a2\n 40122: a5 = reverse t0\n 40124: a1 = u64 [sp + 0x18]\n 40127: a0 = a1 + 0x1f\n 40130: a1 = a0 <u a1\n 40133: a3 = u64 [sp + 0x20]\n 40136: a2 = a3 + a1\n 40139: a3 = a2 <u a3\n 40142: a3 = a1 if a1 == 0\n 40145: a1 = u64 [sp + 0x28]\n 40148: a3 = a3 + a1\n 40151: a1 = a3 <u a1\n 40154: a4 = u64 [sp + 0x30]\n 40157: a1 = a1 + a4\n 40160: a0 = a0 & 0xffffffffffffffe0\n 40163: a0 = a0 + a5\n 40166: u64 [sp + 0x28] = a5\n 40169: u64 [sp + 0x10] = a0\n 40172: a4 = a0 <u a5\n 40175: a2 = a2 + s1\n 40178: a5 = a2 + a4\n 40181: a2 = a5 ^ s1\n 40184: u64 [sp + 0x30] = s1\n 40187: a0 = a5 <u s1\n 40190: a0 = a4 if a2 == 0\n 40193: a3 = a3 + t2\n 40196: a4 = a3 + a0\n 40199: s1 = a4 <u a3\n 40202: a2 = a3 <u t2\n 40205: a1 = a1 + t1\n 40208: a1 = a1 + a2\n 40211: s1 = s1 + a1\n 40214: a1 = a4 >u 0\n 40216: a2 = s1 >u 0\n 40218: a2 = a1 if s1 == 0\n 40221: a1 = a4 | s1\n 40224: u64 [sp + 0x8] = a5\n 40227: a3 = a5 >u 0\n 40229: a3 = a2 if a1 != 0\n 40232: jump @576 if a3 != 0\n      : @573 (gas: 8)\n 40236: a1 = a4 <u t2\n 40239: a2 = s1 ^ t1\n 40242: a3 = s1 <u t1\n 40245: a3 = a1 if a2 == 0\n 40248: a1 = a4 ^ t2\n 40251: a1 = a1 | a2\n 40254: a0 = a3 if a1 != 0\n 40257: jump @576 if a0 != 0\n      : @574 (gas: 6)\n 40261: a0 = 0x40\n 40264: a1 = 0x20\n 40267: u64 [sp + 0x20] = t2\n 40270: u64 [sp + 0x18] = t1\n 40273: u64 [sp] = a4\n 40275: ra = 506, jump @0\n      : @575 [@dyn 253] (gas: 82)\n 40282: a1 = reverse s1\n 40284: a2 = u64 [sp]\n 40286: a2 = reverse a2\n 40288: a3 = u64 [sp + 0x8]\n 40291: a3 = reverse a3\n 40293: a4 = u64 [sp + 0x10]\n 40296: a4 = reverse a4\n 40298: u8 [a0 + 0x18] = a4\n 40301: a5 = a4 >> 0x38\n 40304: u8 [a0 + 0x1f] = a5\n 40307: a5 = a4 >> 0x30\n 40310: u8 [a0 + 0x1e] = a5\n 40313: a5 = a4 >> 0x28\n 40316: u8 [a0 + 0x1d] = a5\n 40319: a5 = a4 >> 0x20\n 40322: u8 [a0 + 0x1c] = a5\n 40325: a5 = a4 >> 0x18\n 40328: u8 [a0 + 0x1b] = a5\n 40331: a5 = a4 >> 0x10\n 40334: u8 [a0 + 0x1a] = a5\n 40337: a4 = a4 >> 0x8\n 40340: u8 [a0 + 0x19] = a4\n 40343: u8 [a0 + 0x10] = a3\n 40346: a4 = a3 >> 0x38\n 40349: u8 [a0 + 0x17] = a4\n 40352: a4 = a3 >> 0x30\n 40355: u8 [a0 + 0x16] = a4\n 40358: a4 = a3 >> 0x28\n 40361: u8 [a0 + 0x15] = a4\n 40364: a4 = a3 >> 0x20\n 40367: u8 [a0 + 0x14] = a4\n 40370: a4 = a3 >> 0x18\n 40373: u8 [a0 + 0x13] = a4\n 40376: a4 = a3 >> 0x10\n 40379: u8 [a0 + 0x12] = a4\n 40382: a3 = a3 >> 0x8\n 40385: u8 [a0 + 0x11] = a3\n 40388: u8 [a0 + 0x8] = a2\n 40391: a3 = a2 >> 0x38\n 40394: u8 [a0 + 0xf] = a3\n 40397: a3 = a2 >> 0x30\n 40400: u8 [a0 + 0xe] = a3\n 40403: a3 = a2 >> 0x28\n 40406: u8 [a0 + 0xd] = a3\n 40409: a3 = a2 >> 0x20\n 40412: u8 [a0 + 0xc] = a3\n 40415: a3 = a2 >> 0x18\n 40418: u8 [a0 + 0xb] = a3\n 40421: a3 = a2 >> 0x10\n 40424: u8 [a0 + 0xa] = a3\n 40427: a2 = a2 >> 0x8\n 40430: u8 [a0 + 0x9] = a2\n 40433: u8 [a0] = a1\n 40435: a2 = a1 >> 0x38\n 40438: u8 [a0 + 0x7] = a2\n 40441: a2 = a1 >> 0x30\n 40444: u8 [a0 + 0x6] = a2\n 40447: a2 = a1 >> 0x28\n 40450: u8 [a0 + 0x5] = a2\n 40453: a2 = a1 >> 0x20\n 40456: u8 [a0 + 0x4] = a2\n 40459: a2 = a1 >> 0x18\n 40462: u8 [a0 + 0x3] = a2\n 40465: a2 = a1 >> 0x10\n 40468: u8 [a0 + 0x2] = a2\n 40471: a1 = a1 >> 0x8\n 40474: u8 [a0 + 0x1] = a1\n 40477: a0 = u64 [sp + 0x38]\n 40480: a1 = u64 [sp + 0x28]\n 40483: u64 [a0] = a1\n 40485: a1 = u64 [sp + 0x18]\n 40488: u64 [a0 + 0x18] = a1\n 40491: a1 = u64 [sp + 0x30]\n 40494: u64 [a0 + 0x8] = a1\n 40497: a1 = u64 [sp + 0x20]\n 40500: u64 [a0 + 0x10] = a1\n 40503: sp = s0 + 0xffffffffffffff60\n 40507: ra = u64 [sp + 0x98]\n 40511: s0 = u64 [sp + 0x90]\n 40515: s1 = u64 [sp + 0x88]\n 40519: sp = sp + 0xa0\n 40523: ret\n      : @576 (gas: 8)\n 40525: u64 [sp + 112] = 0\n 40528: u64 [sp + 104] = 0\n 40531: u64 [sp + 96] = 0\n 40534: a0 = 0x4e487b7100000000\n 40544: a1 = sp + 0x60\n 40547: u64 [sp + 0x78] = a0\n 40550: a0 = 0\n 40552: ra = 508, jump @23\n      : @577 [@dyn 254] (gas: 7)\n 40559: u64 [sp + 88] = 0\n 40562: u64 [sp + 80] = 0\n 40565: u64 [sp + 64] = 0x41\n 40569: a0 = 0x4\n 40572: a1 = sp + 0x40\n 40575: u64 [sp + 72] = 0\n 40578: ra = 510, jump @23\n      : @578 [@dyn 255] (gas: 3)\n 40585: a1 = 0x24\n 40588: a0 = 0\n 40590: ra = 512, jump @0\n      : @579 [@dyn 256] (gas: 6)\n 40597: i32 a1 = a0 + 0\n 40599: a0 = 0x1\n 40602: a2 = 0x24\n 40605: ra = 0x202\n 40609: ecalli 12 // 'seal_return'\n 40611: fallthrough\n      : @580 [@dyn 257] (gas: 7)\n 40612: a3 = u64 [a1 + 0x18]\n 40615: a4 = u64 [a1 + 0x10]\n 40618: a2 = u64 [a1 + 0x8]\n 40621: a3 = a3 | a4\n 40624: a4 = a2 <u 0x1\n 40627: a4 = 0 if a3 != 0\n 40629: jump @582 if a4 == 0\n      : @581 (gas: 16)\n 40632: a1 = u64 [a1]\n 40634: a3 = a1 + 0x1f\n 40637: a1 = a3 <u a1\n 40640: a1 = a1 + a2\n 40643: a1 = a1 & 0x1\n 40646: a3 = a3 & 0xffffffffffffffe0\n 40649: a2 = a3 + 0x20\n 40652: a3 = a2 <u a3\n 40655: a4 = a1 + a3\n 40658: a1 = a4 <u a1\n 40661: a1 = a3 if a3 == 0\n 40664: u64 [a0 + 24] = 0\n 40667: u64 [a0] = a2\n 40669: u64 [a0 + 0x8] = a4\n 40672: u64 [a0 + 0x10] = a1\n 40675: ret\n      : @582 (gas: 13)\n 40677: sp = sp + 0xffffffffffffffb0\n 40680: u64 [sp + 0x48] = ra\n 40683: u64 [sp + 0x40] = s0\n 40686: s0 = sp + 0x50\n 40689: sp = sp & 0xfffffffffffffff0\n 40692: u64 [sp + 48] = 0\n 40695: u64 [sp + 40] = 0\n 40698: u64 [sp + 32] = 0\n 40701: a0 = 0x4e487b7100000000\n 40711: a1 = sp + 0x20\n 40714: u64 [sp + 0x38] = a0\n 40717: a0 = 0\n 40719: ra = 516, jump @23\n      : @583 [@dyn 258] (gas: 7)\n 40726: u64 [sp + 24] = 0\n 40729: u64 [sp + 16] = 0\n 40732: u64 [sp + 0] = 0x41\n 40735: a0 = 0x4\n 40738: a1 = sp\n 40740: u64 [sp + 8] = 0\n 40743: ra = 518, jump @23\n      : @584 [@dyn 259] (gas: 3)\n 40750: a1 = 0x24\n 40753: a0 = 0\n 40755: ra = 520, jump @0\n      : @585 [@dyn 260] (gas: 6)\n 40762: i32 a1 = a0 + 0\n 40764: a0 = 0x1\n 40767: a2 = 0x24\n 40770: ra = 0x20a\n 40774: ecalli 12 // 'seal_return'\n 40776: fallthrough\n      : @586 [@dyn 261] (gas: 16)\n 40777: sp = sp + 0xffffffffffffffa8\n 40780: u64 [sp + 0x50] = ra\n 40783: u64 [sp + 0x48] = s0\n 40786: u64 [sp + 0x40] = s1\n 40789: a3 = u64 [a0 + 0x10]\n 40792: a4 = u64 [a0 + 0x18]\n 40795: a5 = u64 [a0 + 0x8]\n 40798: a0 = u64 [a0]\n 40800: a4 = a4 | a5\n 40803: a5 = a0 | a3\n 40806: a5 = a5 | a4\n 40809: a5 = a5 >> 0x20\n 40812: a3 = a3 | a4\n 40815: a3 = a3 << 0x20\n 40818: a3 = a3 | a5\n 40821: jump @594 if a3 != 0\n      : @587 (gas: 12)\n 40825: a4 = u64 [a2 + 0x18]\n 40828: a5 = u64 [a2 + 0x10]\n 40831: s0 = u64 [a2]\n 40833: s1 = u64 [a2 + 0x8]\n 40836: a2 = s0 | a5\n 40839: a3 = s1 | a4\n 40842: a2 = a2 | a3\n 40845: a2 = a2 >> 0x20\n 40848: a3 = a3 | a5\n 40851: a3 = a3 << 0x20\n 40854: a2 = a2 | a3\n 40857: jump @594 if a2 != 0\n      : @588 (gas: 18)\n 40861: u64 [sp + 0x28] = s1\n 40864: u64 [sp + 0x30] = a5\n 40867: u64 [sp + 0x38] = a4\n 40870: a2 = u64 [a1 + 0x18]\n 40873: a3 = u64 [a1 + 0x10]\n 40876: a5 = u64 [a1]\n 40878: a4 = u64 [a1 + 0x8]\n 40881: a1 = a5 | a3\n 40884: u64 [sp + 0x20] = a2\n 40887: u64 [sp + 0x10] = a4\n 40890: a2 = a2 | a4\n 40893: a1 = a1 | a2\n 40896: a1 = a1 >> 0x20\n 40899: u64 [sp + 0x18] = a3\n 40902: a2 = a2 | a3\n 40905: a2 = a2 << 0x20\n 40908: a1 = a1 | a2\n 40911: jump @594 if a1 != 0\n      : @589 (gas: 7)\n 40915: i32 a0 = a0 + 0\n 40917: u64 [sp + 0x8] = a0\n 40920: i32 a0 = a5 + 0\n 40922: i32 s1 = s0 + 0\n 40924: a1 = s1\n 40926: u64 [sp] = a5\n 40928: ra = 524, jump @0\n      : @590 [@dyn 262] (gas: 5)\n 40935: i32 a0 = a0 + 0\n 40937: a1 = s1\n 40939: a2 = u64 [sp + 0x8]\n 40942: ecalli 2 // 'call_data_copy'\n 40944: fallthrough\n      : @591 (gas: 29)\n 40945: a0 = u64 [sp]\n 40947: a0 = a0 + s0\n 40950: a1 = a0 <u s0\n 40953: a4 = u64 [sp + 0x28]\n 40956: a2 = u64 [sp + 0x10]\n 40959: a2 = a2 + a4\n 40962: a2 = a2 + a1\n 40965: a3 = a2 ^ a4\n 40968: a4 = a2 <u a4\n 40971: a4 = a1 if a3 == 0\n 40974: a5 = u64 [sp + 0x30]\n 40977: a1 = u64 [sp + 0x18]\n 40980: a1 = a1 + a5\n 40983: a4 = a4 + a1\n 40986: a3 = a4 <u a1\n 40989: a1 = a1 <u a5\n 40992: a5 = u64 [sp + 0x38]\n 40995: s1 = u64 [sp + 0x20]\n 40998: a5 = a5 + s1\n 41001: a1 = a1 + a5\n 41004: a1 = a1 + a3\n 41007: a3 = a0 | a4\n 41010: a1 = a1 | a2\n 41013: a3 = a3 | a1\n 41016: a3 = a3 >> 0x20\n 41019: a1 = a1 | a4\n 41022: a1 = a1 << 0x20\n 41025: a1 = a1 | a3\n 41028: jump @594 if a1 != 0\n      : @592 (gas: 3)\n 41031: i32 a0 = a0 + 0\n 41033: a1 = 0x20\n 41036: ra = 526, jump @0\n      : @593 [@dyn 263] (gas: 37)\n 41043: u8 [a0 + 31] = 0\n 41046: u8 [a0 + 30] = 0\n 41049: u8 [a0 + 29] = 0\n 41052: u8 [a0 + 28] = 0\n 41055: u8 [a0 + 27] = 0\n 41058: u8 [a0 + 26] = 0\n 41061: u8 [a0 + 25] = 0\n 41064: u8 [a0 + 24] = 0\n 41067: u8 [a0 + 23] = 0\n 41070: u8 [a0 + 22] = 0\n 41073: u8 [a0 + 21] = 0\n 41076: u8 [a0 + 20] = 0\n 41079: u8 [a0 + 19] = 0\n 41082: u8 [a0 + 18] = 0\n 41085: u8 [a0 + 17] = 0\n 41088: u8 [a0 + 16] = 0\n 41091: u8 [a0 + 15] = 0\n 41094: u8 [a0 + 14] = 0\n 41097: u8 [a0 + 13] = 0\n 41100: u8 [a0 + 12] = 0\n 41103: u8 [a0 + 11] = 0\n 41106: u8 [a0 + 10] = 0\n 41109: u8 [a0 + 9] = 0\n 41112: u8 [a0 + 8] = 0\n 41115: u8 [a0 + 7] = 0\n 41118: u8 [a0 + 6] = 0\n 41121: u8 [a0 + 5] = 0\n 41124: u8 [a0 + 4] = 0\n 41127: u8 [a0 + 3] = 0\n 41130: u8 [a0 + 2] = 0\n 41133: u8 [a0 + 1] = 0\n 41136: u8 [a0 + 0] = 0\n 41138: ra = u64 [sp + 0x50]\n 41141: s0 = u64 [sp + 0x48]\n 41144: s1 = u64 [sp + 0x40]\n 41147: sp = sp + 0x58\n 41150: ret\n      : @594 (gas: 1)\n 41152: trap\n      : @595 (gas: 16)\n 41153: sp = sp + 0xfffffffffffffee0\n 41157: u64 [sp + 0x118] = ra\n 41161: u64 [sp + 0x110] = s0\n 41165: u64 [sp + 0x108] = s1\n 41169: s0 = sp + 0x120\n 41173: sp = sp & 0xfffffffffffffff0\n 41176: a4 = u64 [a2 + 0x18]\n 41179: a5 = u64 [a2 + 0x10]\n 41182: s1 = u64 [a2 + 0x8]\n 41185: u64 [sp + 0x50] = a4\n 41188: u64 [sp + 0x48] = a5\n 41191: a4 = a4 | a5\n 41194: a5 = s1 <u 0x1\n 41197: a5 = 0 if a4 != 0\n 41199: u64 [sp] = a0\n 41201: jump @609 if a5 == 0\n      : @596 (gas: 35)\n 41205: a0 = u64 [a3 + 0x18]\n 41208: u64 [sp + 0x18] = a0\n 41211: a0 = u64 [a3 + 0x10]\n 41214: u64 [sp + 0x20] = a0\n 41217: a0 = u64 [a3 + 0x8]\n 41220: u64 [sp + 0x8] = a0\n 41223: a0 = u64 [a3]\n 41225: u64 [sp + 0x10] = a0\n 41228: a2 = u64 [a2]\n 41230: a0 = u64 [a1 + 0x18]\n 41233: u64 [sp + 0x70] = a0\n 41236: a0 = u64 [a1 + 0x10]\n 41239: u64 [sp + 0x78] = a0\n 41242: a0 = u64 [a1 + 0x8]\n 41245: u64 [sp + 0x68] = a0\n 41248: a0 = u64 [a1]\n 41250: u64 [sp + 0x60] = a0\n 41253: a0 = a2 + 0x1f\n 41256: u64 [sp + 0x40] = a2\n 41259: a1 = a0 <u a2\n 41262: a1 = a1 + s1\n 41265: a1 = a1 & 0x1\n 41268: a0 = a0 & 0xffffffffffffffe0\n 41271: a2 = a0 + 0x20\n 41274: a0 = a2 <u a0\n 41277: a3 = a1 + a0\n 41280: a4 = a3 <u a1\n 41283: a4 = a0 if a0 == 0\n 41286: u64 [sp + 216] = 0\n 41290: u64 [sp + 0xc0] = a2\n 41294: u64 [sp + 0xc8] = a3\n 41298: a0 = sp + 0xe0\n 41302: a1 = sp + 0xc0\n 41306: u64 [sp + 0xd0] = a4\n 41310: ra = 528, jump @571\n      : @597 [@dyn 264] (gas: 15)\n 41316: a0 = u64 [sp + 0xf8]\n 41320: a2 = u64 [sp + 0xf0]\n 41324: a1 = u64 [sp + 0xe8]\n 41328: a3 = u64 [sp + 0xe0]\n 41332: u64 [sp + 0x58] = a0\n 41335: u64 [sp + 0x30] = a1\n 41338: a0 = a0 | a1\n 41341: a1 = a3 | a2\n 41344: a1 = a1 | a0\n 41347: a1 = a1 >> 0x20\n 41350: u64 [sp + 0x38] = a2\n 41353: a0 = a0 | a2\n 41356: a0 = a0 << 0x20\n 41359: a0 = a0 | a1\n 41362: jump @608 if a0 != 0\n      : @598 (gas: 4)\n 41366: u64 [sp + 0x28] = a3\n 41369: i32 a0 = a3 + 0\n 41371: a1 = 0x20\n 41374: ra = 530, jump @0\n      : @599 [@dyn 265] (gas: 102)\n 41381: t2 = u64 [sp + 0x40]\n 41384: a1 = u64 [sp + 0x60]\n 41387: a1 = a1 + t2\n 41390: a3 = a1 <u t2\n 41393: a2 = u64 [sp + 0x68]\n 41396: a2 = a2 + s1\n 41399: a4 = a2 + a3\n 41402: a5 = a4 ^ s1\n 41405: a2 = a4 <u s1\n 41408: a2 = a3 if a5 == 0\n 41411: a5 = u64 [sp + 0x8]\n 41414: a3 = a4 ^ a5\n 41417: a4 = a5 <u a4\n 41420: a5 = u64 [sp + 0x10]\n 41423: a1 = a5 <u a1\n 41426: ra = u64 [sp + 0x48]\n 41429: a5 = u64 [sp + 0x78]\n 41432: a5 = a5 + ra\n 41435: a1 = a4 if a3 != 0\n 41438: a3 = a5 <u ra\n 41441: t1 = u64 [sp + 0x50]\n 41444: a4 = u64 [sp + 0x70]\n 41447: a4 = a4 + t1\n 41450: a3 = a3 + a4\n 41453: a2 = a2 + a5\n 41456: a4 = a2 <u a5\n 41459: a3 = a3 + a4\n 41462: a5 = u64 [sp + 0x18]\n 41465: a4 = a3 ^ a5\n 41468: a3 = a5 <u a3\n 41471: t0 = u64 [sp + 0x20]\n 41474: a5 = t0 <u a2\n 41477: a3 = a5 if a4 == 0\n 41480: a2 = a2 ^ t0\n 41483: a2 = a2 | a4\n 41486: a1 = a3 if a2 != 0\n 41489: a2 = reverse t2\n 41491: a3 = a2 >> 0x38\n 41494: u8 [a0 + 0x1f] = a3\n 41497: a3 = a2 >> 0x30\n 41500: u8 [a0 + 0x1e] = a3\n 41503: a3 = a2 >> 0x28\n 41506: u8 [a0 + 0x1d] = a3\n 41509: a3 = a2 >> 0x20\n 41512: u8 [a0 + 0x1c] = a3\n 41515: a3 = a2 >> 0x18\n 41518: u8 [a0 + 0x1b] = a3\n 41521: a3 = a2 >> 0x10\n 41524: u8 [a0 + 0x1a] = a3\n 41527: a3 = a2 >> 0x8\n 41530: u8 [a0 + 0x19] = a3\n 41533: a3 = reverse s1\n 41535: u8 [a0 + 0x18] = a2\n 41538: a2 = a3 >> 0x38\n 41541: u8 [a0 + 0x17] = a2\n 41544: a2 = a3 >> 0x30\n 41547: u8 [a0 + 0x16] = a2\n 41550: a2 = a3 >> 0x28\n 41553: u8 [a0 + 0x15] = a2\n 41556: a2 = a3 >> 0x20\n 41559: u8 [a0 + 0x14] = a2\n 41562: a2 = a3 >> 0x18\n 41565: u8 [a0 + 0x13] = a2\n 41568: a2 = a3 >> 0x10\n 41571: u8 [a0 + 0x12] = a2\n 41574: a2 = reverse ra\n 41576: u8 [a0 + 0x10] = a3\n 41579: a3 = a3 >> 0x8\n 41582: u8 [a0 + 0x11] = a3\n 41585: a3 = a2 >> 0x38\n 41588: u8 [a0 + 0xf] = a3\n 41591: a3 = a2 >> 0x30\n 41594: u8 [a0 + 0xe] = a3\n 41597: a3 = a2 >> 0x28\n 41600: u8 [a0 + 0xd] = a3\n 41603: a3 = a2 >> 0x20\n 41606: u8 [a0 + 0xc] = a3\n 41609: a3 = a2 >> 0x18\n 41612: u8 [a0 + 0xb] = a3\n 41615: a3 = a2 >> 0x10\n 41618: u8 [a0 + 0xa] = a3\n 41621: a3 = reverse t1\n 41623: u8 [a0 + 0x8] = a2\n 41626: a2 = a2 >> 0x8\n 41629: u8 [a0 + 0x9] = a2\n 41632: a2 = a3 >> 0x38\n 41635: u8 [a0 + 0x7] = a2\n 41638: a2 = a3 >> 0x30\n 41641: u8 [a0 + 0x6] = a2\n 41644: a2 = a3 >> 0x28\n 41647: u8 [a0 + 0x5] = a2\n 41650: a2 = a3 >> 0x20\n 41653: u8 [a0 + 0x4] = a2\n 41656: a2 = a3 >> 0x18\n 41659: u8 [a0 + 0x3] = a2\n 41662: a2 = a3 >> 0x10\n 41665: u8 [a0 + 0x2] = a2\n 41668: u8 [a0] = a3\n 41670: a3 = a3 >> 0x8\n 41673: u8 [a0 + 0x1] = a3\n 41676: t0 = u64 [sp + 0x60]\n 41679: jump @613 if a1 != 0\n      : @600 (gas: 12)\n 41683: a2 = u64 [sp + 0x78]\n 41686: a0 = t0 | a2\n 41689: a1 = u64 [sp + 0x70]\n 41692: a3 = u64 [sp + 0x68]\n 41695: a1 = a1 | a3\n 41698: a0 = a0 | a1\n 41701: a0 = a0 >> 0x20\n 41704: a1 = a1 | a2\n 41707: a1 = a1 << 0x20\n 41710: a0 = a0 | a1\n 41713: a3 = u64 [sp + 0x58]\n 41716: jump @608 if a0 != 0\n      : @601 (gas: 11)\n 41720: a0 = t2 | ra\n 41723: a1 = s1 | t1\n 41726: a0 = a0 | a1\n 41729: a0 = a0 >> 0x20\n 41732: a1 = a1 | ra\n 41735: a1 = a1 << 0x20\n 41738: a0 = a0 | a1\n 41741: a2 = u64 [sp + 0x38]\n 41744: a4 = u64 [sp + 0x30]\n 41747: a5 = u64 [sp + 0x28]\n 41750: jump @608 if a0 != 0\n      : @602 (gas: 7)\n 41754: u64 [sp + 0x78] = s1\n 41757: a0 = a2 | a3\n 41760: a1 = 0xffffffe0\n 41770: a1 = a5 <u a1\n 41773: a1 = 0 if a4 != 0\n 41775: a1 = 0 if a0 != 0\n 41777: jump @608 if a1 == 0\n      : @603 (gas: 16)\n 41781: s1 = a5 + 0x20\n 41784: a0 = s1 <u a5\n 41787: a1 = a4 + a0\n 41790: u64 [sp + 0x20] = a1\n 41793: a1 = a1 <u a4\n 41796: a1 = a0 if a0 == 0\n 41799: a1 = a1 + a2\n 41802: u64 [sp + 0x68] = a1\n 41805: a0 = a1 <u a2\n 41808: u64 [sp + 0x70] = a0\n 41811: i32 t0 = t0 + 0\n 41813: u64 [sp + 0x60] = t0\n 41816: i32 a0 = s1 + 0\n 41818: i32 a1 = t2 + 0\n 41820: u64 [sp + 0x18] = a1\n 41823: ra = 532, jump @0\n      : @604 [@dyn 266] (gas: 5)\n 41830: i32 a0 = a0 + 0\n 41832: a1 = u64 [sp + 0x18]\n 41835: a2 = u64 [sp + 0x60]\n 41838: ecalli 2 // 'call_data_copy'\n 41840: fallthrough\n      : @605 (gas: 31)\n 41841: a0 = u64 [sp + 0x40]\n 41844: a0 = a0 + s1\n 41847: a1 = a0 <u s1\n 41850: a2 = u64 [sp + 0x78]\n 41853: a4 = u64 [sp + 0x20]\n 41856: a2 = a2 + a4\n 41859: a2 = a2 + a1\n 41862: a3 = a2 ^ a4\n 41865: a4 = a2 <u a4\n 41868: a4 = a1 if a3 == 0\n 41871: a1 = u64 [sp + 0x48]\n 41874: a3 = u64 [sp + 0x68]\n 41877: a1 = a1 + a3\n 41880: a4 = a4 + a1\n 41883: t0 = a4 <u a1\n 41886: a1 = a1 <u a3\n 41889: a5 = u64 [sp + 0x50]\n 41892: s1 = u64 [sp + 0x58]\n 41895: a5 = a5 + s1\n 41898: a3 = u64 [sp + 0x70]\n 41901: a5 = a5 + a3\n 41904: a1 = a1 + a5\n 41907: a1 = a1 + t0\n 41910: a3 = a0 | a4\n 41913: a1 = a1 | a2\n 41916: a3 = a3 | a1\n 41919: a3 = a3 >> 0x20\n 41922: a1 = a1 | a4\n 41925: a1 = a1 << 0x20\n 41928: a1 = a1 | a3\n 41931: jump @608 if a1 != 0\n      : @606 (gas: 3)\n 41935: i32 a0 = a0 + 0\n 41937: a1 = 0x20\n 41940: ra = 534, jump @0\n      : @607 [@dyn 267] (gas: 46)\n 41947: u8 [a0 + 31] = 0\n 41950: u8 [a0 + 30] = 0\n 41953: u8 [a0 + 29] = 0\n 41956: u8 [a0 + 28] = 0\n 41959: u8 [a0 + 27] = 0\n 41962: u8 [a0 + 26] = 0\n 41965: u8 [a0 + 25] = 0\n 41968: u8 [a0 + 24] = 0\n 41971: u8 [a0 + 23] = 0\n 41974: u8 [a0 + 22] = 0\n 41977: u8 [a0 + 21] = 0\n 41980: u8 [a0 + 20] = 0\n 41983: u8 [a0 + 19] = 0\n 41986: u8 [a0 + 18] = 0\n 41989: u8 [a0 + 17] = 0\n 41992: u8 [a0 + 16] = 0\n 41995: u8 [a0 + 15] = 0\n 41998: u8 [a0 + 14] = 0\n 42001: u8 [a0 + 13] = 0\n 42004: u8 [a0 + 12] = 0\n 42007: u8 [a0 + 11] = 0\n 42010: u8 [a0 + 10] = 0\n 42013: u8 [a0 + 9] = 0\n 42016: u8 [a0 + 8] = 0\n 42019: u8 [a0 + 7] = 0\n 42022: u8 [a0 + 6] = 0\n 42025: u8 [a0 + 5] = 0\n 42028: u8 [a0 + 4] = 0\n 42031: u8 [a0 + 3] = 0\n 42034: u8 [a0 + 2] = 0\n 42037: u8 [a0 + 1] = 0\n 42040: u8 [a0 + 0] = 0\n 42042: a0 = u64 [sp]\n 42044: a1 = u64 [sp + 0x28]\n 42047: u64 [a0] = a1\n 42049: u64 [a0 + 0x18] = s1\n 42052: a1 = u64 [sp + 0x30]\n 42055: u64 [a0 + 0x8] = a1\n 42058: a1 = u64 [sp + 0x38]\n 42061: u64 [a0 + 0x10] = a1\n 42064: sp = s0 + 0xfffffffffffffee0\n 42068: ra = u64 [sp + 0x118]\n 42072: s0 = u64 [sp + 0x110]\n 42076: s1 = u64 [sp + 0x108]\n 42080: sp = sp + 0x120\n 42084: ret\n      : @608 (gas: 1)\n 42086: trap\n      : @609 (gas: 8)\n 42087: u64 [sp + 176] = 0\n 42091: u64 [sp + 168] = 0\n 42095: u64 [sp + 160] = 0\n 42099: a0 = 0x4e487b7100000000\n 42109: a1 = sp + 0xa0\n 42113: u64 [sp + 0xb8] = a0\n 42117: a0 = 0\n 42119: ra = 536, jump @23\n      : @610 [@dyn 268] (gas: 7)\n 42126: u64 [sp + 152] = 0\n 42130: u64 [sp + 144] = 0\n 42134: u64 [sp + 128] = 0x41\n 42139: a0 = 0x4\n 42142: a1 = sp + 0x80\n 42146: u64 [sp + 136] = 0\n 42150: ra = 538, jump @23\n      : @611 [@dyn 269] (gas: 3)\n 42157: a1 = 0x24\n 42160: a0 = 0\n 42162: ra = 540, jump @0\n      : @612 [@dyn 270] (gas: 5)\n 42169: i32 a1 = a0 + 0\n 42171: a0 = 0x1\n 42174: a2 = 0x24\n 42177: ecalli 12 // 'seal_return'\n 42179: fallthrough\n      : @613 (gas: 3)\n 42180: a0 = 0\n 42182: a1 = 0\n 42184: ra = 542, jump @0\n      : @614 [@dyn 271] (gas: 6)\n 42191: i32 a1 = a0 + 0\n 42193: a0 = 0x1\n 42196: a2 = 0\n 42198: ra = 0x220\n 42202: ecalli 12 // 'seal_return'\n 42204: fallthrough\n      : @615 [@dyn 272] (gas: 33)\n 42205: sp = sp + 0xffffffffffffff60\n 42209: u64 [sp + 0x98] = ra\n 42213: u64 [sp + 0x90] = s0\n 42217: u64 [sp + 0x88] = s1\n 42221: s0 = sp + 0xa0\n 42225: sp = sp & 0xfffffffffffffff0\n 42228: t0 = u64 [a1]\n 42230: t1 = u64 [a1 + 0x8]\n 42233: t2 = u64 [a1 + 0x10]\n 42236: ra = u64 [a1 + 0x18]\n 42239: a4 = u64 [a2]\n 42241: a3 = u64 [a2 + 0x8]\n 42244: a5 = u64 [a2 + 0x10]\n 42247: a2 = u64 [a2 + 0x18]\n 42250: a1 = u32 [0x20114]\n 42255: s1 = a0\n 42257: u64 [sp + 24] = 0\n 42260: u64 [sp + 16] = 0\n 42263: u64 [sp + 8] = 0\n 42266: u64 [sp] = a1\n 42268: u64 [sp + 0x38] = a2\n 42271: u64 [sp + 0x30] = a5\n 42274: u64 [sp + 0x28] = a3\n 42277: u64 [sp + 0x20] = a4\n 42280: u64 [sp + 0x58] = ra\n 42283: u64 [sp + 0x50] = t2\n 42286: u64 [sp + 0x48] = t1\n 42289: a0 = sp + 0x60\n 42292: a1 = sp + 0x40\n 42295: a2 = sp + 0x20\n 42298: a3 = sp\n 42300: u64 [sp + 0x40] = t0\n 42303: ra = 546, jump @595\n      : @616 [@dyn 273] (gas: 14)\n 42309: a0 = u64 [sp + 0x70]\n 42312: a1 = u64 [sp + 0x78]\n 42315: a2 = u64 [sp + 0x60]\n 42318: a3 = u64 [sp + 0x68]\n 42321: u64 [s1 + 0x10] = a0\n 42324: u64 [s1 + 0x18] = a1\n 42327: u64 [s1] = a2\n 42329: u64 [s1 + 0x8] = a3\n 42332: sp = s0 + 0xffffffffffffff60\n 42336: ra = u64 [sp + 0x98]\n 42340: s0 = u64 [sp + 0x90]\n 42344: s1 = u64 [sp + 0x88]\n 42348: sp = sp + 0xa0\n 42352: ret\n      : @617 (gas: 17)\n 42354: sp = sp + 0xffffffffffffffa0\n 42357: u64 [sp + 0x58] = ra\n 42360: u64 [sp + 0x50] = s0\n 42363: u64 [sp + 0x48] = s1\n 42366: a3 = u64 [a1 + 0x18]\n 42369: a4 = u64 [a1 + 0x10]\n 42372: a5 = u64 [a1 + 0x8]\n 42375: s1 = u64 [a1]\n 42377: a1 = a5 | a3\n 42380: a2 = s1 | a4\n 42383: a2 = a2 | a1\n 42386: a2 = a2 >> 0x20\n 42389: a1 = a1 | a4\n 42392: a1 = a1 << 0x20\n 42395: a1 = a1 | a2\n 42398: u64 [sp + 0x20] = a0\n 42401: jump @626 if a1 != 0\n      : @618 (gas: 19)\n 42405: a0 = s1 + 0x20\n 42408: u64 [sp + 0x38] = a0\n 42411: a0 = a0 <u s1\n 42414: a1 = a5 + a0\n 42417: u64 [sp + 0x40] = a1\n 42420: u64 [sp + 0x8] = a5\n 42423: s0 = a1 <u a5\n 42426: s0 = a0 if a0 == 0\n 42429: s0 = s0 + a4\n 42432: u64 [sp + 0x10] = a4\n 42435: a0 = s0 <u a4\n 42438: u64 [sp + 0x18] = a3\n 42441: a0 = a0 + a3\n 42444: u64 [sp + 0x30] = a0\n 42447: u64 [sp] = s1\n 42449: i32 a0 = s1 + 0\n 42451: a1 = 0x20\n 42454: s1 = 0x20\n 42457: ra = 548, jump @0\n      : @619 [@dyn 274] (gas: 43)\n 42464: u8 [a0 + 0x1f] = s1\n 42467: a1 = u64 [sp + 0x38]\n 42470: a1 = a1 | s0\n 42473: a2 = u64 [sp + 0x40]\n 42476: a3 = u64 [sp + 0x30]\n 42479: a2 = a2 | a3\n 42482: a1 = a1 | a2\n 42485: a1 = a1 >> 0x20\n 42488: a2 = a2 | s0\n 42491: a2 = a2 << 0x20\n 42494: a1 = a1 | a2\n 42497: u8 [a0 + 30] = 0\n 42500: u8 [a0 + 29] = 0\n 42503: u8 [a0 + 28] = 0\n 42506: u8 [a0 + 27] = 0\n 42509: u8 [a0 + 26] = 0\n 42512: u8 [a0 + 25] = 0\n 42515: u8 [a0 + 24] = 0\n 42518: u8 [a0 + 23] = 0\n 42521: u8 [a0 + 22] = 0\n 42524: u8 [a0 + 21] = 0\n 42527: u8 [a0 + 20] = 0\n 42530: u8 [a0 + 19] = 0\n 42533: u8 [a0 + 18] = 0\n 42536: u8 [a0 + 17] = 0\n 42539: u8 [a0 + 16] = 0\n 42542: u8 [a0 + 15] = 0\n 42545: u8 [a0 + 14] = 0\n 42548: u8 [a0 + 13] = 0\n 42551: u8 [a0 + 12] = 0\n 42554: u8 [a0 + 11] = 0\n 42557: u8 [a0 + 10] = 0\n 42560: u8 [a0 + 9] = 0\n 42563: u8 [a0 + 8] = 0\n 42566: u8 [a0 + 7] = 0\n 42569: u8 [a0 + 6] = 0\n 42572: u8 [a0 + 5] = 0\n 42575: u8 [a0 + 4] = 0\n 42578: u8 [a0 + 3] = 0\n 42581: u8 [a0 + 2] = 0\n 42584: u8 [a0 + 1] = 0\n 42587: u8 [a0 + 0] = 0\n 42589: jump @626 if a1 != 0\n      : @620 (gas: 6)\n 42593: s1 = s0\n 42595: s0 = u64 [sp + 0x38]\n 42598: i32 a0 = s0 + 0\n 42600: a1 = 0x20\n 42603: u64 [sp + 0x28] = a0\n 42606: ra = 550, jump @0\n      : @621 [@dyn 275] (gas: 42)\n 42613: u8 [a0 + 31] = 0x24\n 42617: u8 [a0 + 30] = 0\n 42620: u8 [a0 + 29] = 0\n 42623: u8 [a0 + 28] = 0\n 42626: u8 [a0 + 27] = 0\n 42629: u8 [a0 + 26] = 0\n 42632: u8 [a0 + 25] = 0\n 42635: u8 [a0 + 24] = 0\n 42638: u8 [a0 + 23] = 0\n 42641: u8 [a0 + 22] = 0\n 42644: u8 [a0 + 21] = 0\n 42647: u8 [a0 + 20] = 0\n 42650: u8 [a0 + 19] = 0\n 42653: u8 [a0 + 18] = 0\n 42656: u8 [a0 + 17] = 0\n 42659: u8 [a0 + 16] = 0\n 42662: u8 [a0 + 15] = 0\n 42665: u8 [a0 + 14] = 0\n 42668: u8 [a0 + 13] = 0\n 42671: u8 [a0 + 12] = 0\n 42674: u8 [a0 + 11] = 0\n 42677: u8 [a0 + 10] = 0\n 42680: u8 [a0 + 9] = 0\n 42683: u8 [a0 + 8] = 0\n 42686: u8 [a0 + 7] = 0\n 42689: u8 [a0 + 6] = 0\n 42692: u8 [a0 + 5] = 0\n 42695: u8 [a0 + 4] = 0\n 42698: u8 [a0 + 3] = 0\n 42701: u8 [a0 + 2] = 0\n 42704: u8 [a0 + 1] = 0\n 42707: a1 = u64 [sp + 0x30]\n 42710: a3 = s1 | a1\n 42713: s1 = 0x100000000\n 42723: a1 = 0xffffffe0\n 42733: a1 = s0 <u a1\n 42736: a2 = u64 [sp + 0x40]\n 42739: a1 = 0 if a2 != 0\n 42741: u64 [sp + 0x30] = a3\n 42744: a1 = 0 if a3 != 0\n 42746: u8 [a0 + 0] = 0\n 42748: jump @626 if a1 == 0\n      : @622 (gas: 4)\n 42752: a0 = u64 [sp + 0x28]\n 42755: i32 a0 = a0 + 0x20\n 42758: a1 = 0x20\n 42761: ra = 552, jump @0\n      : @623 [@dyn 276] (gas: 42)\n 42768: u8 [a0 + 27] = 0x73\n 42772: u8 [a0 + 25] = 0x64\n 42776: u8 [a0 + 23] = 0x6c\n 42780: u8 [a0 + 21] = 0x76\n 42784: u8 [a0 + 19] = 0x49\n 42788: u8 [a0 + 26] = 0x20\n 42792: u8 [a0 + 18] = 0x20\n 42796: u8 [a0 + 17] = 0x3a\n 42800: u8 [a0 + 13] = 0x66\n 42804: u8 [a0 + 9] = 0x56\n 42808: u8 [a0 + 31] = 0x61\n 42812: u8 [a0 + 22] = 0x61\n 42816: u8 [a0 + 4] = 0x61\n 42820: u8 [a0 + 30] = 0x6e\n 42824: u8 [a0 + 20] = 0x6e\n 42828: u8 [a0 + 3] = 0x6e\n 42832: u8 [a0 + 29] = 0x67\n 42836: u8 [a0 + 2] = 0x67\n 42840: u8 [a0 + 28] = 0x69\n 42844: u8 [a0 + 24] = 0x69\n 42848: u8 [a0 + 14] = 0x69\n 42852: u8 [a0 + 12] = 0x69\n 42856: u8 [a0 + 1] = 0x69\n 42860: u8 [a0 + 0] = 0x53\n 42863: s0 = 0x72\n 42866: u8 [a0 + 0x10] = s0\n 42869: a1 = s1 + 0xffffffffffffffc0\n 42872: a2 = u64 [sp + 0x38]\n 42875: a1 = a2 <u a1\n 42878: s1 = 0x65\n 42881: u8 [a0 + 0xf] = s1\n 42884: u8 [a0 + 0xb] = s0\n 42887: u8 [a0 + 0xa] = s1\n 42890: u8 [a0 + 0x8] = s1\n 42893: u8 [a0 + 0x7] = s0\n 42896: a2 = u64 [sp + 0x40]\n 42899: a1 = 0 if a2 != 0\n 42901: u8 [a0 + 6] = 0x75\n 42905: a2 = u64 [sp + 0x30]\n 42908: a1 = 0 if a2 != 0\n 42910: u8 [a0 + 5] = 0x74\n 42914: jump @626 if a1 == 0\n      : @624 (gas: 4)\n 42918: a0 = u64 [sp + 0x28]\n 42921: i32 a0 = a0 + 0x40\n 42924: a1 = 0x20\n 42927: ra = 554, jump @0\n      : @625 [@dyn 277] (gas: 54)\n 42934: u8 [a0 + 31] = 0\n 42937: u8 [a0 + 30] = 0\n 42940: u8 [a0 + 29] = 0\n 42943: u8 [a0 + 28] = 0\n 42946: u8 [a0 + 27] = 0\n 42949: u8 [a0 + 26] = 0\n 42952: u8 [a0 + 25] = 0\n 42955: u8 [a0 + 24] = 0\n 42958: u8 [a0 + 23] = 0\n 42961: u8 [a0 + 22] = 0\n 42964: u8 [a0 + 21] = 0\n 42967: u8 [a0 + 20] = 0\n 42970: u8 [a0 + 19] = 0\n 42973: u8 [a0 + 18] = 0\n 42976: u8 [a0 + 17] = 0\n 42979: u8 [a0 + 16] = 0\n 42982: u8 [a0 + 15] = 0\n 42985: u8 [a0 + 14] = 0\n 42988: u8 [a0 + 13] = 0\n 42991: u8 [a0 + 12] = 0\n 42994: u8 [a0 + 11] = 0\n 42997: u8 [a0 + 10] = 0\n 43000: u8 [a0 + 9] = 0\n 43003: u8 [a0 + 8] = 0\n 43006: u8 [a0 + 7] = 0\n 43009: u8 [a0 + 6] = 0\n 43012: u8 [a0 + 5] = 0\n 43015: u8 [a0 + 4] = 0\n 43018: u8 [a0 + 0x3] = s1\n 43021: u8 [a0 + 0x2] = s0\n 43024: u8 [a0 + 1] = 0x75\n 43028: u8 [a0 + 0] = 0x74\n 43031: a1 = u64 [sp]\n 43033: a0 = a1 + 0x80\n 43037: a1 = a0 <u a1\n 43040: a3 = u64 [sp + 0x8]\n 43043: a2 = a3 + a1\n 43046: a3 = a2 <u a3\n 43049: a3 = a1 if a1 == 0\n 43052: a1 = u64 [sp + 0x10]\n 43055: a3 = a3 + a1\n 43058: a1 = a3 <u a1\n 43061: a4 = u64 [sp + 0x18]\n 43064: a1 = a1 + a4\n 43067: a4 = u64 [sp + 0x20]\n 43070: u64 [a4] = a0\n 43072: u64 [a4 + 0x8] = a2\n 43075: u64 [a4 + 0x10] = a3\n 43078: u64 [a4 + 0x18] = a1\n 43081: ra = u64 [sp + 0x58]\n 43084: s0 = u64 [sp + 0x50]\n 43087: s1 = u64 [sp + 0x48]\n 43090: sp = sp + 0x60\n 43093: ret\n      : @626 (gas: 1)\n 43095: trap\n      : @627 [@dyn 278] (gas: 103)\n 43096: u64 [sp + 0x140] = s1\n 43100: a1 = reverse s1\n 43102: a2 = u64 [sp + 0x1f0]\n 43106: a2 = reverse a2\n 43108: a3 = u64 [sp + 0x1e0]\n 43112: a4 = reverse a3\n 43114: a3 = u64 [sp + 0x1d8]\n 43118: a3 = reverse a3\n 43120: u8 [a0 + 0x18] = a3\n 43123: u8 [a0 + 0x10] = a4\n 43126: u8 [a0 + 0x8] = a2\n 43129: u8 [a0] = a1\n 43131: a5 = a3 >> 0x38\n 43134: u64 [sp + 0x118] = a5\n 43138: u8 [a0 + 0x1f] = a5\n 43141: a5 = a3 >> 0x30\n 43144: u64 [sp + 0x110] = a5\n 43148: u8 [a0 + 0x1e] = a5\n 43151: a5 = a3 >> 0x28\n 43154: u64 [sp + 0x108] = a5\n 43158: u8 [a0 + 0x1d] = a5\n 43161: a5 = a3 >> 0x20\n 43164: u64 [sp + 0x100] = a5\n 43168: u8 [a0 + 0x1c] = a5\n 43171: a5 = a3 >> 0x18\n 43174: u64 [sp + 0xf8] = a5\n 43178: u8 [a0 + 0x1b] = a5\n 43181: a5 = a3 >> 0x10\n 43184: u64 [sp + 0xf0] = a5\n 43188: u8 [a0 + 0x1a] = a5\n 43191: u64 [sp + 0x198] = a3\n 43195: a3 = a3 >> 0x8\n 43198: u64 [sp + 0xe8] = a3\n 43202: u8 [a0 + 0x19] = a3\n 43205: a3 = a4 >> 0x38\n 43208: u64 [sp + 0xe0] = a3\n 43212: u8 [a0 + 0x17] = a3\n 43215: a3 = a4 >> 0x30\n 43218: u64 [sp + 0xd8] = a3\n 43222: u8 [a0 + 0x16] = a3\n 43225: a3 = a4 >> 0x28\n 43228: u64 [sp + 0xd0] = a3\n 43232: u8 [a0 + 0x15] = a3\n 43235: a3 = a4 >> 0x20\n 43238: u64 [sp + 0xc8] = a3\n 43242: u8 [a0 + 0x14] = a3\n 43245: a3 = a4 >> 0x18\n 43248: u64 [sp + 0xc0] = a3\n 43252: u8 [a0 + 0x13] = a3\n 43255: a3 = a4 >> 0x10\n 43258: u64 [sp + 0xb8] = a3\n 43262: u8 [a0 + 0x12] = a3\n 43265: u64 [sp + 0x190] = a4\n 43269: a4 = a4 >> 0x8\n 43272: u64 [sp + 0xb0] = a4\n 43276: u8 [a0 + 0x11] = a4\n 43279: a3 = a2 >> 0x38\n 43282: u64 [sp + 0xa8] = a3\n 43286: u8 [a0 + 0xf] = a3\n 43289: a3 = a2 >> 0x30\n 43292: u64 [sp + 0xa0] = a3\n 43296: u8 [a0 + 0xe] = a3\n 43299: a3 = a2 >> 0x28\n 43302: u64 [sp + 0x98] = a3\n 43306: u8 [a0 + 0xd] = a3\n 43309: a3 = a2 >> 0x20\n 43312: u64 [sp + 0x90] = a3\n 43316: u8 [a0 + 0xc] = a3\n 43319: a3 = a2 >> 0x18\n 43322: u64 [sp + 0x88] = a3\n 43326: u8 [a0 + 0xb] = a3\n 43329: a3 = a2 >> 0x10\n 43332: u64 [sp + 0x80] = a3\n 43336: u8 [a0 + 0xa] = a3\n 43339: u64 [sp + 0x1a0] = a2\n 43343: a2 = a2 >> 0x8\n 43346: u64 [sp + 0x78] = a2\n 43349: u8 [a0 + 0x9] = a2\n 43352: a2 = a1 >> 0x38\n 43355: u64 [sp + 0x70] = a2\n 43358: u8 [a0 + 0x7] = a2\n 43361: a2 = a1 >> 0x30\n 43364: u64 [sp + 0x68] = a2\n 43367: u8 [a0 + 0x6] = a2\n 43370: a2 = a1 >> 0x28\n 43373: u64 [sp + 0x60] = a2\n 43376: u8 [a0 + 0x5] = a2\n 43379: a2 = a1 >> 0x20\n 43382: u64 [sp + 0x58] = a2\n 43385: u8 [a0 + 0x4] = a2\n 43388: a2 = a1 >> 0x18\n 43391: u64 [sp + 0x50] = a2\n 43394: u8 [a0 + 0x3] = a2\n 43397: a2 = a1 >> 0x10\n 43400: u64 [sp + 0x48] = a2\n 43403: u8 [a0 + 0x2] = a2\n 43406: u64 [sp + 0x1a8] = a1\n 43410: a1 = a1 >> 0x8\n 43413: u64 [sp + 0x40] = a1\n 43416: u8 [a0 + 0x1] = a1\n 43419: a0 = 0x20\n 43422: a1 = 0x20\n 43425: ra = 558, jump @0\n      : @628 [@dyn 279] (gas: 35)\n 43432: u8 [a0 + 31] = 0x3\n 43436: u8 [a0 + 30] = 0\n 43439: u8 [a0 + 29] = 0\n 43442: u8 [a0 + 28] = 0\n 43445: u8 [a0 + 27] = 0\n 43448: u8 [a0 + 26] = 0\n 43451: u8 [a0 + 25] = 0\n 43454: u8 [a0 + 24] = 0\n 43457: u8 [a0 + 23] = 0\n 43460: u8 [a0 + 22] = 0\n 43463: u8 [a0 + 21] = 0\n 43466: u8 [a0 + 20] = 0\n 43469: u8 [a0 + 19] = 0\n 43472: u8 [a0 + 18] = 0\n 43475: u8 [a0 + 17] = 0\n 43478: u8 [a0 + 16] = 0\n 43481: u8 [a0 + 15] = 0\n 43484: u8 [a0 + 14] = 0\n 43487: u8 [a0 + 13] = 0\n 43490: u8 [a0 + 12] = 0\n 43493: u8 [a0 + 11] = 0\n 43496: u8 [a0 + 10] = 0\n 43499: u8 [a0 + 9] = 0\n 43502: u8 [a0 + 8] = 0\n 43505: u8 [a0 + 7] = 0\n 43508: u8 [a0 + 6] = 0\n 43511: u8 [a0 + 5] = 0\n 43514: u8 [a0 + 4] = 0\n 43517: u8 [a0 + 3] = 0\n 43520: u8 [a0 + 2] = 0\n 43523: u8 [a0 + 1] = 0\n 43526: u8 [a0 + 0] = 0\n 43528: a1 = 0x40\n 43531: a0 = 0\n 43533: ra = 560, jump @0\n      : @629 [@dyn 280] (gas: 14)\n 43540: i32 a0 = a0 + 0\n 43542: i32 a2 = sp + 0x540\n 43546: a1 = 0x40\n 43549: ecalli 8 // 'hash_keccak_256'\n 43551: a0 = u64 [sp + 0x540]\n 43555: u64 [sp + 0x218] = a0\n 43559: a0 = u64 [sp + 0x548]\n 43563: u64 [sp + 0x210] = a0\n 43567: a0 = u64 [sp + 0x550]\n 43571: u64 [sp + 0x1d0] = a0\n 43575: s1 = u64 [sp + 0x558]\n 43579: a1 = 0x20\n 43582: a0 = 0\n 43584: ra = 562, jump @0\n      : @630 [@dyn 281] (gas: 75)\n 43591: a1 = u64 [sp + 0x208]\n 43595: a2 = reverse a1\n 43597: a1 = u64 [sp + 0x200]\n 43601: a3 = reverse a1\n 43603: a1 = u64 [sp + 0x1f8]\n 43607: a5 = reverse a1\n 43609: a1 = u64 [sp + 0x1e8]\n 43613: a4 = reverse a1\n 43615: a1 = a4 >> 0x38\n 43618: u8 [a0 + 0x1f] = a1\n 43621: a1 = a4 >> 0x30\n 43624: u8 [a0 + 0x1e] = a1\n 43627: a1 = a4 >> 0x28\n 43630: u8 [a0 + 0x1d] = a1\n 43633: a1 = a4 >> 0x20\n 43636: u8 [a0 + 0x1c] = a1\n 43639: a1 = a4 >> 0x18\n 43642: u8 [a0 + 0x1b] = a1\n 43645: a1 = a4 >> 0x10\n 43648: u8 [a0 + 0x1a] = a1\n 43651: a1 = a4 >> 0x8\n 43654: u8 [a0 + 0x19] = a1\n 43657: u64 [sp + 0x28] = a4\n 43660: u8 [a0 + 0x18] = a4\n 43663: a1 = a5 >> 0x38\n 43666: u8 [a0 + 0x17] = a1\n 43669: a1 = a5 >> 0x30\n 43672: u8 [a0 + 0x16] = a1\n 43675: a1 = a5 >> 0x28\n 43678: u8 [a0 + 0x15] = a1\n 43681: a1 = a5 >> 0x20\n 43684: u8 [a0 + 0x14] = a1\n 43687: a1 = a5 >> 0x18\n 43690: u8 [a0 + 0x13] = a1\n 43693: a1 = a5 >> 0x10\n 43696: u8 [a0 + 0x12] = a1\n 43699: a1 = a5 >> 0x8\n 43702: u8 [a0 + 0x11] = a1\n 43705: u64 [sp + 0x20] = a5\n 43708: u8 [a0 + 0x10] = a5\n 43711: a1 = a3 >> 0x38\n 43714: u8 [a0 + 0xf] = a1\n 43717: a1 = a3 >> 0x30\n 43720: u8 [a0 + 0xe] = a1\n 43723: a1 = a3 >> 0x28\n 43726: u8 [a0 + 0xd] = a1\n 43729: a1 = a3 >> 0x20\n 43732: u8 [a0 + 0xc] = a1\n 43735: a1 = a3 >> 0x18\n 43738: u8 [a0 + 0xb] = a1\n 43741: a1 = a3 >> 0x10\n 43744: u8 [a0 + 0xa] = a1\n 43747: a1 = a3 >> 0x8\n 43750: u8 [a0 + 0x9] = a1\n 43753: u64 [sp + 0x30] = a3\n 43756: u8 [a0 + 0x8] = a3\n 43759: a1 = a2 >> 0x38\n 43762: u8 [a0 + 0x7] = a1\n 43765: a1 = a2 >> 0x30\n 43768: u8 [a0 + 0x6] = a1\n 43771: a1 = a2 >> 0x28\n 43774: u8 [a0 + 0x5] = a1\n 43777: a1 = a2 >> 0x20\n 43780: u8 [a0 + 0x4] = a1\n 43783: a1 = a2 >> 0x18\n 43786: u8 [a0 + 0x3] = a1\n 43789: a1 = a2 >> 0x10\n 43792: u8 [a0 + 0x2] = a1\n 43795: a1 = a2 >> 0x8\n 43798: u8 [a0 + 0x1] = a1\n 43801: u64 [sp + 0x38] = a2\n 43804: u8 [a0] = a2\n 43806: a0 = 0x20\n 43809: a1 = 0x20\n 43812: ra = 564, jump @0\n      : @631 [@dyn 282] (gas: 66)\n 43819: a1 = s1 >> 0x38\n 43822: u8 [a0 + 0x1f] = a1\n 43825: a1 = s1 >> 0x30\n 43828: u8 [a0 + 0x1e] = a1\n 43831: a1 = s1 >> 0x28\n 43834: u8 [a0 + 0x1d] = a1\n 43837: a1 = s1 >> 0x20\n 43840: u8 [a0 + 0x1c] = a1\n 43843: a1 = s1 >> 0x18\n 43846: u8 [a0 + 0x1b] = a1\n 43849: a1 = s1 >> 0x10\n 43852: u8 [a0 + 0x1a] = a1\n 43855: a1 = s1 >> 0x8\n 43858: u8 [a0 + 0x19] = a1\n 43861: u8 [a0 + 0x18] = s1\n 43864: a2 = u64 [sp + 0x1d0]\n 43868: a1 = a2 >> 0x38\n 43871: u8 [a0 + 0x17] = a1\n 43874: a1 = a2 >> 0x30\n 43877: u8 [a0 + 0x16] = a1\n 43880: a1 = a2 >> 0x28\n 43883: u8 [a0 + 0x15] = a1\n 43886: a1 = a2 >> 0x20\n 43889: u8 [a0 + 0x14] = a1\n 43892: a1 = a2 >> 0x18\n 43895: u8 [a0 + 0x13] = a1\n 43898: a1 = a2 >> 0x10\n 43901: u8 [a0 + 0x12] = a1\n 43904: a1 = a2 >> 0x8\n 43907: u8 [a0 + 0x11] = a1\n 43910: u8 [a0 + 0x10] = a2\n 43913: a2 = u64 [sp + 0x210]\n 43917: a1 = a2 >> 0x38\n 43920: u8 [a0 + 0xf] = a1\n 43923: a1 = a2 >> 0x30\n 43926: u8 [a0 + 0xe] = a1\n 43929: a1 = a2 >> 0x28\n 43932: u8 [a0 + 0xd] = a1\n 43935: a1 = a2 >> 0x20\n 43938: u8 [a0 + 0xc] = a1\n 43941: a1 = a2 >> 0x18\n 43944: u8 [a0 + 0xb] = a1\n 43947: a1 = a2 >> 0x10\n 43950: u8 [a0 + 0xa] = a1\n 43953: a1 = a2 >> 0x8\n 43956: u8 [a0 + 0x9] = a1\n 43959: u8 [a0 + 0x8] = a2\n 43962: a2 = u64 [sp + 0x218]\n 43966: a1 = a2 >> 0x38\n 43969: u8 [a0 + 0x7] = a1\n 43972: a1 = a2 >> 0x30\n 43975: u8 [a0 + 0x6] = a1\n 43978: a1 = a2 >> 0x28\n 43981: u8 [a0 + 0x5] = a1\n 43984: a1 = a2 >> 0x20\n 43987: u8 [a0 + 0x4] = a1\n 43990: a1 = a2 >> 0x18\n 43993: u8 [a0 + 0x3] = a1\n 43996: a1 = a2 >> 0x10\n 43999: u8 [a0 + 0x2] = a1\n 44002: a1 = a2 >> 0x8\n 44005: u8 [a0 + 0x1] = a1\n 44008: u8 [a0] = a2\n 44010: a1 = 0x40\n 44013: a0 = 0\n 44015: ra = 566, jump @0\n      : @632 [@dyn 283] (gas: 43)\n 44022: i32 a0 = a0 + 0\n 44024: i32 a2 = sp + 0x540\n 44028: a1 = 0x40\n 44031: ecalli 8 // 'hash_keccak_256'\n 44033: a0 = u64 [sp + 0x540]\n 44037: a1 = u64 [sp + 0x548]\n 44041: a2 = u64 [sp + 0x550]\n 44045: a3 = u64 [sp + 0x558]\n 44049: a5 = reverse a0\n 44051: a4 = reverse a1\n 44053: a1 = reverse a2\n 44055: a0 = reverse a3\n 44057: a2 = a0 + 0x2\n 44060: u64 [sp + 0x1b0] = a0\n 44064: a0 = a2 <u a0\n 44067: a3 = a1 + a0\n 44070: u64 [sp + 0x1b8] = a1\n 44074: a1 = a3 <u a1\n 44077: a1 = a0 if a0 == 0\n 44080: s1 = a4 + a1\n 44083: u64 [sp + 0x1c0] = a4\n 44087: a0 = s1 <u a4\n 44090: u64 [sp + 0x1c8] = a5\n 44094: a0 = a0 + a5\n 44097: u64 [sp + 0x210] = a3\n 44101: u64 [sp + 0x508] = a3\n 44105: u64 [sp + 0x218] = a2\n 44109: u64 [sp + 0x500] = a2\n 44113: u64 [sp + 0x510] = s1\n 44117: u64 [sp + 0x1d0] = a0\n 44121: u64 [sp + 0x518] = a0\n 44125: u64 [sp + 1368] = 0\n 44129: u64 [sp + 1360] = 0\n 44133: u64 [sp + 1352] = 0\n 44137: u64 [sp + 1344] = 0\n 44141: u32 [sp + 1312] = 0x20\n 44146: i32 a1 = sp + 0x500\n 44150: i32 a3 = sp + 0x540\n 44154: i32 a4 = sp + 0x520\n 44158: a2 = 0xffffffffffffffff\n 44161: a0 = 0\n 44163: ecalli 7 // 'get_storage'\n 44165: fallthrough\n      : @633 (gas: 2)\n 44166: a0 = u8 [sp + 0x540]\n 44170: jump @650 if a0 != 0\n      : @634 (gas: 20)\n 44174: u64 [sp + 0x188] = s1\n 44178: u64 [sp + 0x510] = s1\n 44182: a0 = u64 [sp + 0x210]\n 44186: u64 [sp + 0x508] = a0\n 44190: a0 = u64 [sp + 0x218]\n 44194: u64 [sp + 0x500] = a0\n 44198: a0 = u64 [sp + 0x1d0]\n 44202: u64 [sp + 0x518] = a0\n 44206: u64 [sp + 1368] = 0\n 44210: u64 [sp + 1360] = 0\n 44214: u64 [sp + 1352] = 0\n 44218: u64 [sp + 1344] = 0\n 44222: u32 [sp + 1312] = 0x20\n 44227: i32 a1 = sp + 0x500\n 44231: i32 a3 = sp + 0x540\n 44235: i32 a4 = sp + 0x520\n 44239: a2 = 0xffffffffffffffff\n 44242: a0 = 0\n 44244: ecalli 7 // 'get_storage'\n 44246: fallthrough\n      : @635 (gas: 2)\n 44247: a0 = u8 [sp + 0x541]\n 44251: jump @655 if a0 != 0\n      : @636 (gas: 29)\n 44255: a0 = u64 [sp + 0x120]\n 44259: u64 [sp + 0x400] = a0\n 44263: a0 = u64 [sp + 0x1e8]\n 44267: u64 [sp + 0x420] = a0\n 44271: a0 = u64 [sp + 0x1d8]\n 44275: u64 [sp + 0x440] = a0\n 44279: a0 = u64 [sp + 0x128]\n 44283: u64 [sp + 0x408] = a0\n 44287: a0 = u64 [sp + 0x1f8]\n 44291: u64 [sp + 0x428] = a0\n 44295: a0 = u64 [sp + 0x1e0]\n 44299: u64 [sp + 0x448] = a0\n 44303: a0 = u64 [sp + 0x130]\n 44307: u64 [sp + 0x410] = a0\n 44311: a0 = u64 [sp + 0x200]\n 44315: u64 [sp + 0x430] = a0\n 44319: a0 = u64 [sp + 0x1f0]\n 44323: u64 [sp + 0x450] = a0\n 44327: a0 = u64 [sp + 0x138]\n 44331: u64 [sp + 0x418] = a0\n 44335: a0 = u64 [sp + 0x208]\n 44339: u64 [sp + 0x438] = a0\n 44343: a0 = sp + 0x460\n 44347: a1 = sp + 0x440\n 44351: a2 = sp + 0x420\n 44355: a3 = sp + 0x400\n 44359: a4 = u64 [sp + 0x140]\n 44363: u64 [sp + 0x458] = a4\n 44367: ra = 568, jump @1365\n      : @637 [@dyn 284] (gas: 33)\n 44374: a0 = u64 [sp + 0x460]\n 44378: u64 [sp + 0x208] = a0\n 44382: a1 = u64 [sp + 0x468]\n 44386: u64 [sp + 0x200] = a1\n 44390: a1 = u64 [sp + 0x470]\n 44394: u64 [sp + 0x1f8] = a1\n 44398: s1 = u64 [sp + 0x478]\n 44402: a0 = u32 [0x20114]\n 44407: u64 [sp + 920] = 0\n 44411: u64 [sp + 912] = 0\n 44415: u64 [sp + 904] = 0\n 44419: u64 [sp + 0x380] = a0\n 44423: a0 = u64 [sp + 0x148]\n 44427: u64 [sp + 0x3b8] = a0\n 44431: a0 = u64 [sp + 0x150]\n 44435: u64 [sp + 0x3b0] = a0\n 44439: a0 = u64 [sp + 0x158]\n 44443: u64 [sp + 0x3a8] = a0\n 44447: a0 = u64 [sp + 0x160]\n 44451: u64 [sp + 0x3a0] = a0\n 44455: a0 = u64 [sp + 0x168]\n 44459: u64 [sp + 0x3d8] = a0\n 44463: a0 = u64 [sp + 0x170]\n 44467: u64 [sp + 0x3d0] = a0\n 44471: a0 = u64 [sp + 0x178]\n 44475: u64 [sp + 0x3c8] = a0\n 44479: a0 = sp + 0x3e0\n 44483: a1 = sp + 0x3c0\n 44487: a2 = sp + 0x3a0\n 44491: a3 = sp + 0x380\n 44495: a4 = u64 [sp + 0x180]\n 44499: u64 [sp + 0x3c0] = a4\n 44503: ra = 570, jump @595\n      : @638 [@dyn 285] (gas: 19)\n 44509: a0 = u64 [sp + 0x3e0]\n 44513: a1 = u64 [sp + 0x3e8]\n 44517: a2 = u64 [sp + 0x3f0]\n 44521: a3 = u64 [sp + 0x3f8]\n 44525: u64 [sp + 0x2f8] = a3\n 44529: u64 [sp + 0x2f0] = a2\n 44533: u64 [sp + 0x2e8] = a1\n 44537: u64 [sp + 0x2e0] = a0\n 44541: u64 [sp + 0x318] = s1\n 44545: a0 = u64 [sp + 0x1f8]\n 44549: u64 [sp + 0x310] = a0\n 44553: a0 = u64 [sp + 0x200]\n 44557: u64 [sp + 0x308] = a0\n 44561: a0 = sp + 0x320\n 44565: a1 = sp + 0x300\n 44569: a2 = sp + 0x2e0\n 44573: a3 = u64 [sp + 0x208]\n 44577: u64 [sp + 0x300] = a3\n 44581: ra = 572, jump @1429\n      : @639 [@dyn 286] (gas: 25)\n 44588: a0 = u64 [sp + 0x320]\n 44592: u64 [sp + 0x208] = a0\n 44596: a0 = u32 [sp + 0x330]\n 44600: u64 [sp + 0x200] = a0\n 44604: a0 = u64 [sp + 0x328]\n 44608: u64 [sp + 0x1f8] = a0\n 44612: t0 = u64 [sp + 0x340]\n 44616: a0 = u64 [sp + 0x348]\n 44620: a1 = u64 [sp + 0x350]\n 44624: a3 = u64 [sp + 0x358]\n 44628: a4 = u64 [sp + 0x360]\n 44632: a5 = u64 [sp + 0x368]\n 44636: s1 = u64 [sp + 0x370]\n 44640: a2 = u64 [sp + 0x378]\n 44644: u64 [sp + 0x2b8] = a2\n 44648: u64 [sp + 0x2b0] = s1\n 44652: u64 [sp + 0x2a8] = a5\n 44656: u64 [sp + 0x2a0] = a4\n 44660: u64 [sp + 0x2d8] = a3\n 44664: u64 [sp + 0x2d0] = a1\n 44668: u64 [sp + 0x2c8] = a0\n 44672: a0 = sp + 0x2c0\n 44676: a1 = sp + 0x2a0\n 44680: u64 [sp + 0x2c0] = t0\n 44684: ra = 574, jump @1444\n      : @640 [@dyn 287] (gas: 20)\n 44691: a0 = u64 [sp + 0x1c8]\n 44695: u64 [sp + 0x518] = a0\n 44699: a0 = u64 [sp + 0x1c0]\n 44703: u64 [sp + 0x510] = a0\n 44707: a0 = u64 [sp + 0x1b8]\n 44711: u64 [sp + 0x508] = a0\n 44715: a0 = u64 [sp + 0x1b0]\n 44719: u64 [sp + 0x500] = a0\n 44723: u64 [sp + 1368] = 0\n 44727: u64 [sp + 1360] = 0\n 44731: u64 [sp + 1352] = 0\n 44735: u64 [sp + 1344] = 0\n 44739: u32 [sp + 1312] = 0x20\n 44744: i32 a1 = sp + 0x500\n 44748: i32 a3 = sp + 0x540\n 44752: i32 a4 = sp + 0x520\n 44756: a2 = 0xffffffffffffffff\n 44759: a0 = 0\n 44761: ecalli 7 // 'get_storage'\n 44763: fallthrough\n      : @641 (gas: 12)\n 44764: a0 = u64 [sp + 0x548]\n 44768: a1 = u32 [sp + 0x550]\n 44772: a2 = u64 [sp + 0x540]\n 44776: a3 = u64 [sp + 0x1f8]\n 44780: a0 = a0 ^ a3\n 44783: a3 = u64 [sp + 0x200]\n 44787: a1 = a1 ^ a3\n 44790: a3 = u64 [sp + 0x208]\n 44794: a2 = a2 ^ a3\n 44797: a1 = a1 | a2\n 44800: a0 = a0 | a1\n 44803: jump @660 if a0 != 0\n      : @642 (gas: 47)\n 44807: a0 = 0xffffffff\n 44817: u64 [sp + 0x208] = a0\n 44821: a0 = u64 [sp + 0x188]\n 44825: u64 [sp + 0x510] = a0\n 44829: a0 = u64 [sp + 0x210]\n 44833: u64 [sp + 0x508] = a0\n 44837: a0 = u64 [sp + 0x218]\n 44841: u64 [sp + 0x500] = a0\n 44845: s1 = u64 [sp + 0x1d0]\n 44849: u64 [sp + 0x518] = s1\n 44853: u64 [sp + 1368] = 0\n 44857: u64 [sp + 1360] = 0\n 44861: u64 [sp + 1352] = 0\n 44865: u64 [sp + 1344] = 0\n 44869: u32 [sp + 1312] = 0x20\n 44874: i32 a1 = sp + 0x500\n 44878: i32 a3 = sp + 0x540\n 44882: i32 a4 = sp + 0x520\n 44886: a2 = 0xffffffffffffffff\n 44889: a0 = 0\n 44891: ecalli 7 // 'get_storage'\n 44893: a0 = u64 [sp + 0x540]\n 44897: a1 = u64 [sp + 0x548]\n 44901: a2 = u64 [sp + 0x550]\n 44905: a3 = u64 [sp + 0x558]\n 44909: a0 = a0 & 0xffffffffffffff00\n 44913: a0 = a0 | 0x1\n 44916: u64 [sp + 0x518] = s1\n 44920: a4 = u64 [sp + 0x188]\n 44924: u64 [sp + 0x510] = a4\n 44928: a4 = u64 [sp + 0x210]\n 44932: u64 [sp + 0x508] = a4\n 44936: a4 = u64 [sp + 0x218]\n 44940: u64 [sp + 0x500] = a4\n 44944: u64 [sp + 0x558] = a3\n 44948: u64 [sp + 0x550] = a2\n 44952: u64 [sp + 0x548] = a1\n 44956: u64 [sp + 0x540] = a0\n 44960: i32 a1 = sp + 0x500\n 44964: i32 a3 = sp + 0x540\n 44968: a2 = 0xffffffffffffffff\n 44971: a4 = 0x20\n 44974: a0 = 0\n 44976: ecalli 14 // 'set_storage'\n 44978: a1 = 0x20\n 44981: a0 = 0\n 44983: ra = 576, jump @0\n      : @643 [@dyn 288] (gas: 67)\n 44990: a1 = u64 [sp + 0x118]\n 44994: u8 [a0 + 0x1f] = a1\n 44997: a1 = u64 [sp + 0x110]\n 45001: u8 [a0 + 0x1e] = a1\n 45004: a1 = u64 [sp + 0x108]\n 45008: u8 [a0 + 0x1d] = a1\n 45011: a1 = u64 [sp + 0x100]\n 45015: u8 [a0 + 0x1c] = a1\n 45018: a1 = u64 [sp + 0xf8]\n 45022: u8 [a0 + 0x1b] = a1\n 45025: a1 = u64 [sp + 0xf0]\n 45029: u8 [a0 + 0x1a] = a1\n 45032: a1 = u64 [sp + 0xe8]\n 45036: u8 [a0 + 0x19] = a1\n 45039: a1 = u64 [sp + 0xe0]\n 45043: u8 [a0 + 0x17] = a1\n 45046: a1 = u64 [sp + 0xd8]\n 45050: u8 [a0 + 0x16] = a1\n 45053: a1 = u64 [sp + 0xd0]\n 45057: u8 [a0 + 0x15] = a1\n 45060: a1 = u64 [sp + 0xc8]\n 45064: u8 [a0 + 0x14] = a1\n 45067: a1 = u64 [sp + 0xc0]\n 45071: u8 [a0 + 0x13] = a1\n 45074: a1 = u64 [sp + 0xb8]\n 45078: u8 [a0 + 0x12] = a1\n 45081: a1 = u64 [sp + 0xb0]\n 45085: u8 [a0 + 0x11] = a1\n 45088: a1 = u64 [sp + 0xa8]\n 45092: u8 [a0 + 0xf] = a1\n 45095: a1 = u64 [sp + 0xa0]\n 45099: u8 [a0 + 0xe] = a1\n 45102: a1 = u64 [sp + 0x98]\n 45106: u8 [a0 + 0xd] = a1\n 45109: a1 = u64 [sp + 0x90]\n 45113: u8 [a0 + 0xc] = a1\n 45116: a1 = u64 [sp + 0x88]\n 45120: u8 [a0 + 0xb] = a1\n 45123: a1 = u64 [sp + 0x80]\n 45127: u8 [a0 + 0xa] = a1\n 45130: a1 = u64 [sp + 0x78]\n 45133: u8 [a0 + 0x9] = a1\n 45136: a1 = u64 [sp + 0x70]\n 45139: u8 [a0 + 0x7] = a1\n 45142: a1 = u64 [sp + 0x68]\n 45145: u8 [a0 + 0x6] = a1\n 45148: a1 = u64 [sp + 0x60]\n 45151: u8 [a0 + 0x5] = a1\n 45154: a1 = u64 [sp + 0x58]\n 45157: u8 [a0 + 0x4] = a1\n 45160: a1 = u64 [sp + 0x50]\n 45163: u8 [a0 + 0x3] = a1\n 45166: a1 = u64 [sp + 0x48]\n 45169: u8 [a0 + 0x2] = a1\n 45172: a1 = u64 [sp + 0x40]\n 45175: u8 [a0 + 0x1] = a1\n 45178: a1 = u64 [sp + 0x198]\n 45182: u8 [a0 + 0x18] = a1\n 45185: a1 = u64 [sp + 0x190]\n 45189: u8 [a0 + 0x10] = a1\n 45192: a1 = u64 [sp + 0x1a0]\n 45196: u8 [a0 + 0x8] = a1\n 45199: a1 = u64 [sp + 0x1a8]\n 45203: u8 [a0] = a1\n 45205: a0 = 0x20\n 45208: a1 = 0x20\n 45211: ra = 578, jump @0\n      : @644 [@dyn 289] (gas: 35)\n 45218: u8 [a0 + 31] = 0\n 45221: u8 [a0 + 30] = 0\n 45224: u8 [a0 + 29] = 0\n 45227: u8 [a0 + 28] = 0\n 45230: u8 [a0 + 27] = 0\n 45233: u8 [a0 + 26] = 0\n 45236: u8 [a0 + 25] = 0\n 45239: u8 [a0 + 24] = 0\n 45242: u8 [a0 + 23] = 0\n 45245: u8 [a0 + 22] = 0\n 45248: u8 [a0 + 21] = 0\n 45251: u8 [a0 + 20] = 0\n 45254: u8 [a0 + 19] = 0\n 45257: u8 [a0 + 18] = 0\n 45260: u8 [a0 + 17] = 0\n 45263: u8 [a0 + 16] = 0\n 45266: u8 [a0 + 15] = 0\n 45269: u8 [a0 + 14] = 0\n 45272: u8 [a0 + 13] = 0\n 45275: u8 [a0 + 12] = 0\n 45278: u8 [a0 + 11] = 0\n 45281: u8 [a0 + 10] = 0\n 45284: u8 [a0 + 9] = 0\n 45287: u8 [a0 + 8] = 0\n 45290: u8 [a0 + 7] = 0\n 45293: u8 [a0 + 6] = 0\n 45296: u8 [a0 + 5] = 0\n 45299: u8 [a0 + 4] = 0\n 45302: u8 [a0 + 3] = 0\n 45305: u8 [a0 + 2] = 0\n 45308: u8 [a0 + 1] = 0\n 45311: u8 [a0 + 0] = 0\n 45313: a1 = 0x40\n 45316: a0 = 0\n 45318: ra = 580, jump @0\n      : @645 [@dyn 290] (gas: 80)\n 45325: i32 a0 = a0 + 0\n 45327: i32 a2 = sp + 0x540\n 45331: a1 = 0x40\n 45334: ecalli 8 // 'hash_keccak_256'\n 45336: a0 = u64 [sp + 0x558]\n 45340: a1 = u64 [sp + 0x550]\n 45344: a2 = u64 [sp + 0x548]\n 45348: a3 = u64 [sp + 0x540]\n 45352: a0 = reverse a0\n 45354: a1 = reverse a1\n 45356: a2 = reverse a2\n 45358: a3 = reverse a3\n 45360: u64 [sp + 0x518] = a3\n 45364: u64 [sp + 0x510] = a2\n 45368: u64 [sp + 0x508] = a1\n 45372: u64 [sp + 0x500] = a0\n 45376: u64 [sp + 1368] = 0\n 45380: u64 [sp + 1360] = 0\n 45384: u64 [sp + 1352] = 0\n 45388: u64 [sp + 1344] = 0\n 45392: u32 [sp + 1312] = 0x20\n 45397: i32 a1 = sp + 0x500\n 45401: i32 a3 = sp + 0x540\n 45405: i32 a4 = sp + 0x520\n 45409: a2 = 0xffffffffffffffff\n 45412: a0 = 0\n 45414: ecalli 7 // 'get_storage'\n 45416: a0 = u64 [sp + 0x540]\n 45420: a1 = u64 [sp + 0x548]\n 45424: a2 = u64 [sp + 0x550]\n 45428: a0 = a0 & 0xffffffffffffffff\n 45431: u64 [sp + 0x218] = a0\n 45435: a1 = a1 & 0xffffffffffffffff\n 45438: u64 [sp + 0x210] = a1\n 45442: s1 = u64 [sp + 0x208]\n 45446: s1 = s1 & a2\n 45449: a0 = u64 [sp + 0x1b0]\n 45453: a0 = a0 + 0x1\n 45456: a1 = a0 <u 0x1\n 45459: a2 = u64 [sp + 0x1b8]\n 45463: a1 = a1 + a2\n 45466: a2 = a0 | a1\n 45469: a2 = a2 <u 0x1\n 45472: a3 = u64 [sp + 0x1c0]\n 45476: a2 = a2 + a3\n 45479: a3 = a2 <u a3\n 45482: a4 = u64 [sp + 0x1c8]\n 45486: a3 = a3 + a4\n 45489: u64 [sp + 0x518] = a3\n 45493: u64 [sp + 0x510] = a2\n 45497: u64 [sp + 0x508] = a1\n 45501: u64 [sp + 0x500] = a0\n 45505: u64 [sp + 1368] = 0\n 45509: u64 [sp + 1360] = 0\n 45513: u64 [sp + 1352] = 0\n 45517: u64 [sp + 1344] = 0\n 45521: u32 [sp + 1312] = 0x20\n 45526: i32 a1 = sp + 0x500\n 45530: i32 a3 = sp + 0x540\n 45534: i32 a4 = sp + 0x520\n 45538: a2 = 0xffffffffffffffff\n 45541: a0 = 0\n 45543: ecalli 7 // 'get_storage'\n 45545: a0 = u64 [sp + 0x540]\n 45549: a1 = u64 [sp + 0x548]\n 45553: a2 = u64 [sp + 0x550]\n 45557: a3 = u64 [sp + 0x558]\n 45561: u64 [sp + 0x238] = a3\n 45565: u64 [sp + 0x230] = a2\n 45569: u64 [sp + 0x228] = a1\n 45573: u64 [sp + 0x220] = a0\n 45577: u64 [sp + 600] = 0\n 45581: u64 [sp + 0x250] = s1\n 45585: a0 = u64 [sp + 0x210]\n 45589: u64 [sp + 0x248] = a0\n 45593: a0 = sp + 0x240\n 45597: a1 = sp + 0x220\n 45601: a2 = u64 [sp + 0x218]\n 45605: u64 [sp + 0x240] = a2\n 45609: ra = 582, jump @1412\n      : @646 [@dyn 291] (gas: 3)\n 45616: a0 = 0x40\n 45619: a1 = 0x20\n 45622: ra = 584, jump @0\n      : @647 [@dyn 292] (gas: 100)\n 45629: a1 = u8 [a0 + 0x11]\n 45632: a2 = u8 [a0 + 0x10]\n 45635: a3 = u8 [a0 + 0x12]\n 45638: a4 = u8 [a0 + 0x13]\n 45641: a1 = a1 << 0x8\n 45644: a1 = a1 | a2\n 45647: a3 = a3 << 0x10\n 45650: a4 = a4 << 0x18\n 45653: a3 = a3 | a4\n 45656: a1 = a1 | a3\n 45659: a2 = u8 [a0 + 0x15]\n 45662: a3 = u8 [a0 + 0x14]\n 45665: a4 = u8 [a0 + 0x16]\n 45668: a5 = u8 [a0 + 0x17]\n 45671: a2 = a2 << 0x8\n 45674: a2 = a2 | a3\n 45677: a4 = a4 << 0x10\n 45680: a5 = a5 << 0x18\n 45683: a4 = a4 | a5\n 45686: a2 = a2 | a4\n 45689: a2 = a2 << 0x20\n 45692: t0 = a2 | a1\n 45695: a2 = u8 [a0 + 0x1]\n 45698: a3 = u8 [a0]\n 45700: a4 = u8 [a0 + 0x2]\n 45703: a5 = u8 [a0 + 0x3]\n 45706: a2 = a2 << 0x8\n 45709: a2 = a2 | a3\n 45712: a4 = a4 << 0x10\n 45715: a5 = a5 << 0x18\n 45718: a4 = a4 | a5\n 45721: a2 = a2 | a4\n 45724: a3 = u8 [a0 + 0x5]\n 45727: a4 = u8 [a0 + 0x4]\n 45730: a5 = u8 [a0 + 0x6]\n 45733: s1 = u8 [a0 + 0x7]\n 45736: a3 = a3 << 0x8\n 45739: a3 = a3 | a4\n 45742: a5 = a5 << 0x10\n 45745: s1 = s1 << 0x18\n 45748: a5 = a5 | s1\n 45751: a3 = a3 | a5\n 45754: a3 = a3 << 0x20\n 45757: a2 = a2 | a3\n 45760: a3 = u8 [a0 + 0x19]\n 45763: a4 = u8 [a0 + 0x18]\n 45766: a5 = u8 [a0 + 0x1a]\n 45769: s1 = u8 [a0 + 0x1b]\n 45772: a3 = a3 << 0x8\n 45775: a3 = a3 | a4\n 45778: a5 = a5 << 0x10\n 45781: s1 = s1 << 0x18\n 45784: a5 = a5 | s1\n 45787: a3 = a3 | a5\n 45790: a4 = u8 [a0 + 0x1d]\n 45793: a5 = u8 [a0 + 0x1c]\n 45796: s1 = u8 [a0 + 0x1e]\n 45799: a1 = u8 [a0 + 0x1f]\n 45802: a4 = a4 << 0x8\n 45805: a4 = a4 | a5\n 45808: s1 = s1 << 0x10\n 45811: a1 = a1 << 0x18\n 45814: a1 = a1 | s1\n 45817: a1 = a1 | a4\n 45820: a1 = a1 << 0x20\n 45823: a3 = a3 | a1\n 45826: a1 = u8 [a0 + 0x9]\n 45829: a4 = u8 [a0 + 0x8]\n 45832: a5 = u8 [a0 + 0xa]\n 45835: s1 = u8 [a0 + 0xb]\n 45838: a1 = a1 << 0x8\n 45841: a1 = a1 | a4\n 45844: a5 = a5 << 0x10\n 45847: s1 = s1 << 0x18\n 45850: a5 = a5 | s1\n 45853: a1 = a1 | a5\n 45856: a4 = u8 [a0 + 0xd]\n 45859: a5 = u8 [a0 + 0xc]\n 45862: s1 = u8 [a0 + 0xe]\n 45865: a0 = u8 [a0 + 0xf]\n 45868: a4 = a4 << 0x8\n 45871: a4 = a4 | a5\n 45874: s1 = s1 << 0x10\n 45877: a0 = a0 << 0x18\n 45880: a0 = a0 | s1\n 45883: a0 = a0 | a4\n 45886: a0 = a0 << 0x20\n 45889: a0 = a0 | a1\n 45892: a1 = reverse a0\n 45894: a0 = reverse a3\n 45896: a2 = reverse a2\n 45898: a3 = reverse t0\n 45900: a2 = a2 | a3\n 45903: a3 = a0 | a1\n 45906: a3 = a3 | a2\n 45909: a3 = a3 >> 0x20\n 45912: a1 = a1 | a2\n 45915: a1 = a1 << 0x20\n 45918: a1 = a1 | a3\n 45921: jump @666 if a1 != 0\n      : @648 (gas: 2)\n 45925: i32 a0 = a0 + 0\n 45927: ra = 586, jump @0\n      : @649 [@dyn 293] (gas: 35)\n 45934: a1 = u64 [0x20000]\n 45939: a2 = u64 [0x20008]\n 45944: a3 = u64 [0x20010]\n 45949: a4 = u64 [0x20018]\n 45954: u64 [sp + 0x558] = a1\n 45958: u64 [sp + 0x550] = a2\n 45962: u64 [sp + 0x548] = a3\n 45966: u64 [sp + 0x540] = a4\n 45970: a1 = u64 [sp + 0x190]\n 45974: u64 [sp + 0x570] = a1\n 45978: a1 = u64 [sp + 0x1a0]\n 45982: u64 [sp + 0x568] = a1\n 45986: a1 = u64 [sp + 0x1a8]\n 45990: u64 [sp + 0x560] = a1\n 45994: a1 = u64 [sp + 0x198]\n 45998: u64 [sp + 0x578] = a1\n 46002: a1 = u64 [sp + 0x20]\n 46005: u64 [sp + 0x590] = a1\n 46009: a1 = u64 [sp + 0x30]\n 46012: u64 [sp + 0x588] = a1\n 46016: a1 = u64 [sp + 0x38]\n 46019: u64 [sp + 0x580] = a1\n 46023: a1 = u64 [sp + 0x28]\n 46026: u64 [sp + 0x598] = a1\n 46030: i32 a2 = a0 + 0\n 46032: i32 a0 = sp + 0x540\n 46036: a1 = 0x3\n 46039: a3 = 0\n 46041: ecalli 6 // 'deposit_event'\n 46043: sp = s0 + 0xfffffffffffffa40\n 46047: ra = u64 [sp + 0x5b8]\n 46051: s0 = u64 [sp + 0x5b0]\n 46055: s1 = u64 [sp + 0x5a8]\n 46059: sp = sp + 0x5c0\n 46063: ret\n      : @650 (gas: 3)\n 46065: a0 = 0x40\n 46068: a1 = 0x20\n 46071: ra = 588, jump @0\n      : @651 [@dyn 294] (gas: 103)\n 46078: a1 = u8 [a0 + 0x11]\n 46081: a2 = u8 [a0 + 0x10]\n 46084: a3 = u8 [a0 + 0x12]\n 46087: a4 = u8 [a0 + 0x13]\n 46090: a1 = a1 << 0x8\n 46093: a1 = a1 | a2\n 46096: a3 = a3 << 0x10\n 46099: a4 = a4 << 0x18\n 46102: a3 = a3 | a4\n 46105: a1 = a1 | a3\n 46108: a2 = u8 [a0 + 0x15]\n 46111: a3 = u8 [a0 + 0x14]\n 46114: a4 = u8 [a0 + 0x16]\n 46117: a5 = u8 [a0 + 0x17]\n 46120: a2 = a2 << 0x8\n 46123: a2 = a2 | a3\n 46126: a4 = a4 << 0x10\n 46129: a5 = a5 << 0x18\n 46132: a4 = a4 | a5\n 46135: a2 = a2 | a4\n 46138: a2 = a2 << 0x20\n 46141: t0 = a2 | a1\n 46144: a2 = u8 [a0 + 0x1]\n 46147: a3 = u8 [a0]\n 46149: a4 = u8 [a0 + 0x2]\n 46152: a5 = u8 [a0 + 0x3]\n 46155: a2 = a2 << 0x8\n 46158: a2 = a2 | a3\n 46161: a4 = a4 << 0x10\n 46164: a5 = a5 << 0x18\n 46167: a4 = a4 | a5\n 46170: a2 = a2 | a4\n 46173: a3 = u8 [a0 + 0x5]\n 46176: a4 = u8 [a0 + 0x4]\n 46179: a5 = u8 [a0 + 0x6]\n 46182: s1 = u8 [a0 + 0x7]\n 46185: a3 = a3 << 0x8\n 46188: a3 = a3 | a4\n 46191: a5 = a5 << 0x10\n 46194: s1 = s1 << 0x18\n 46197: a5 = a5 | s1\n 46200: a3 = a3 | a5\n 46203: a3 = a3 << 0x20\n 46206: a2 = a2 | a3\n 46209: a3 = u8 [a0 + 0x19]\n 46212: a4 = u8 [a0 + 0x18]\n 46215: a5 = u8 [a0 + 0x1a]\n 46218: s1 = u8 [a0 + 0x1b]\n 46221: a3 = a3 << 0x8\n 46224: a3 = a3 | a4\n 46227: a5 = a5 << 0x10\n 46230: s1 = s1 << 0x18\n 46233: a5 = a5 | s1\n 46236: a3 = a3 | a5\n 46239: a4 = u8 [a0 + 0x1d]\n 46242: a5 = u8 [a0 + 0x1c]\n 46245: s1 = u8 [a0 + 0x1e]\n 46248: a1 = u8 [a0 + 0x1f]\n 46251: a4 = a4 << 0x8\n 46254: a4 = a4 | a5\n 46257: s1 = s1 << 0x10\n 46260: a1 = a1 << 0x18\n 46263: a1 = a1 | s1\n 46266: a1 = a1 | a4\n 46269: a1 = a1 << 0x20\n 46272: a3 = a3 | a1\n 46275: a1 = u8 [a0 + 0x9]\n 46278: a4 = u8 [a0 + 0x8]\n 46281: a5 = u8 [a0 + 0xa]\n 46284: s1 = u8 [a0 + 0xb]\n 46287: a1 = a1 << 0x8\n 46290: a1 = a1 | a4\n 46293: a5 = a5 << 0x10\n 46296: s1 = s1 << 0x18\n 46299: a5 = a5 | s1\n 46302: a1 = a1 | a5\n 46305: a4 = u8 [a0 + 0xd]\n 46308: a5 = u8 [a0 + 0xc]\n 46311: s1 = u8 [a0 + 0xe]\n 46314: a0 = u8 [a0 + 0xf]\n 46317: a4 = a4 << 0x8\n 46320: a4 = a4 | a5\n 46323: s1 = s1 << 0x10\n 46326: a0 = a0 << 0x18\n 46329: a0 = a0 | s1\n 46332: a0 = a0 | a4\n 46335: a0 = a0 << 0x20\n 46338: a0 = a0 | a1\n 46341: s1 = reverse a0\n 46343: a1 = reverse a3\n 46345: a2 = reverse a2\n 46347: a0 = reverse t0\n 46349: u64 [sp + 0x218] = a0\n 46353: u64 [sp + 0x210] = a2\n 46357: a0 = a0 | a2\n 46360: a2 = a1\n 46362: a1 = a1 | s1\n 46365: a1 = a1 | a0\n 46368: a1 = a1 >> 0x20\n 46371: a0 = a0 | s1\n 46374: a0 = a0 << 0x20\n 46377: a0 = a0 | a1\n 46380: jump @666 if a0 != 0\n      : @652 (gas: 5)\n 46384: u64 [sp + 0x208] = a2\n 46388: i32 a0 = a2 + 0\n 46390: a1 = 0x20\n 46393: u64 [sp + 0x200] = a0\n 46397: ra = 590, jump @0\n      : @653 [@dyn 295] (gas: 50)\n 46404: u8 [a0 + 31] = 0\n 46407: u8 [a0 + 30] = 0\n 46410: u8 [a0 + 29] = 0\n 46413: u8 [a0 + 28] = 0\n 46416: u8 [a0 + 27] = 0\n 46419: u8 [a0 + 26] = 0\n 46422: u8 [a0 + 25] = 0\n 46425: u8 [a0 + 24] = 0\n 46428: u8 [a0 + 23] = 0\n 46431: u8 [a0 + 22] = 0\n 46434: u8 [a0 + 21] = 0\n 46437: u8 [a0 + 20] = 0\n 46440: u8 [a0 + 19] = 0\n 46443: u8 [a0 + 18] = 0\n 46446: u8 [a0 + 17] = 0\n 46449: u8 [a0 + 16] = 0\n 46452: u8 [a0 + 15] = 0\n 46455: u8 [a0 + 14] = 0\n 46458: u8 [a0 + 13] = 0\n 46461: u8 [a0 + 12] = 0\n 46464: u8 [a0 + 11] = 0\n 46467: u8 [a0 + 10] = 0\n 46470: u8 [a0 + 9] = 0\n 46473: u8 [a0 + 8] = 0\n 46476: u8 [a0 + 7] = 0\n 46479: u8 [a0 + 6] = 0\n 46482: u8 [a0 + 5] = 0\n 46485: u8 [a0 + 4] = 0\n 46488: u8 [a0 + 3] = 0xa0\n 46493: u8 [a0 + 2] = 0x79\n 46497: u8 [a0 + 1] = 0xc3\n 46502: u8 [a0 + 0] = 0x8\n 46505: a1 = u64 [sp + 0x208]\n 46509: a0 = a1 + 0x4\n 46512: a1 = a0 <u a1\n 46515: a3 = u64 [sp + 0x218]\n 46519: a2 = a3 + a1\n 46522: a3 = a2 <u a3\n 46525: a3 = a1 if a1 == 0\n 46528: a3 = a3 + s1\n 46531: a1 = a3 <u s1\n 46534: a4 = u64 [sp + 0x210]\n 46538: a4 = a4 + a1\n 46541: u64 [sp + 0x4c8] = a2\n 46545: u64 [sp + 0x4c0] = a0\n 46549: u64 [sp + 0x4d0] = a3\n 46553: a0 = sp + 0x4e0\n 46557: a1 = sp + 0x4c0\n 46561: u64 [sp + 0x4d8] = a4\n 46565: ra = 592, jump @555\n      : @654 [@dyn 296] (gas: 5)\n 46571: a0 = u64 [sp + 0x4e8]\n 46575: t0 = u64 [sp + 0x4f8]\n 46579: t1 = u64 [sp + 0x4e0]\n 46583: a3 = u64 [sp + 0x4f0]\n 46587: jump @665\n      : @655 (gas: 3)\n 46590: a0 = 0x40\n 46593: a1 = 0x20\n 46596: ra = 594, jump @0\n      : @656 [@dyn 297] (gas: 103)\n 46603: a1 = u8 [a0 + 0x11]\n 46606: a2 = u8 [a0 + 0x10]\n 46609: a3 = u8 [a0 + 0x12]\n 46612: a4 = u8 [a0 + 0x13]\n 46615: a1 = a1 << 0x8\n 46618: a1 = a1 | a2\n 46621: a3 = a3 << 0x10\n 46624: a4 = a4 << 0x18\n 46627: a3 = a3 | a4\n 46630: a1 = a1 | a3\n 46633: a2 = u8 [a0 + 0x15]\n 46636: a3 = u8 [a0 + 0x14]\n 46639: a4 = u8 [a0 + 0x16]\n 46642: a5 = u8 [a0 + 0x17]\n 46645: a2 = a2 << 0x8\n 46648: a2 = a2 | a3\n 46651: a4 = a4 << 0x10\n 46654: a5 = a5 << 0x18\n 46657: a4 = a4 | a5\n 46660: a2 = a2 | a4\n 46663: a2 = a2 << 0x20\n 46666: t0 = a2 | a1\n 46669: a2 = u8 [a0 + 0x1]\n 46672: a3 = u8 [a0]\n 46674: a4 = u8 [a0 + 0x2]\n 46677: a5 = u8 [a0 + 0x3]\n 46680: a2 = a2 << 0x8\n 46683: a2 = a2 | a3\n 46686: a4 = a4 << 0x10\n 46689: a5 = a5 << 0x18\n 46692: a4 = a4 | a5\n 46695: a2 = a2 | a4\n 46698: a3 = u8 [a0 + 0x5]\n 46701: a4 = u8 [a0 + 0x4]\n 46704: a5 = u8 [a0 + 0x6]\n 46707: s1 = u8 [a0 + 0x7]\n 46710: a3 = a3 << 0x8\n 46713: a3 = a3 | a4\n 46716: a5 = a5 << 0x10\n 46719: s1 = s1 << 0x18\n 46722: a5 = a5 | s1\n 46725: a3 = a3 | a5\n 46728: a3 = a3 << 0x20\n 46731: a2 = a2 | a3\n 46734: a3 = u8 [a0 + 0x19]\n 46737: a4 = u8 [a0 + 0x18]\n 46740: a5 = u8 [a0 + 0x1a]\n 46743: s1 = u8 [a0 + 0x1b]\n 46746: a3 = a3 << 0x8\n 46749: a3 = a3 | a4\n 46752: a5 = a5 << 0x10\n 46755: s1 = s1 << 0x18\n 46758: a5 = a5 | s1\n 46761: a3 = a3 | a5\n 46764: a4 = u8 [a0 + 0x1d]\n 46767: a5 = u8 [a0 + 0x1c]\n 46770: s1 = u8 [a0 + 0x1e]\n 46773: a1 = u8 [a0 + 0x1f]\n 46776: a4 = a4 << 0x8\n 46779: a4 = a4 | a5\n 46782: s1 = s1 << 0x10\n 46785: a1 = a1 << 0x18\n 46788: a1 = a1 | s1\n 46791: a1 = a1 | a4\n 46794: a1 = a1 << 0x20\n 46797: a3 = a3 | a1\n 46800: a1 = u8 [a0 + 0x9]\n 46803: a4 = u8 [a0 + 0x8]\n 46806: a5 = u8 [a0 + 0xa]\n 46809: s1 = u8 [a0 + 0xb]\n 46812: a1 = a1 << 0x8\n 46815: a1 = a1 | a4\n 46818: a5 = a5 << 0x10\n 46821: s1 = s1 << 0x18\n 46824: a5 = a5 | s1\n 46827: a1 = a1 | a5\n 46830: a4 = u8 [a0 + 0xd]\n 46833: a5 = u8 [a0 + 0xc]\n 46836: s1 = u8 [a0 + 0xe]\n 46839: a0 = u8 [a0 + 0xf]\n 46842: a4 = a4 << 0x8\n 46845: a4 = a4 | a5\n 46848: s1 = s1 << 0x10\n 46851: a0 = a0 << 0x18\n 46854: a0 = a0 | s1\n 46857: a0 = a0 | a4\n 46860: a0 = a0 << 0x20\n 46863: a0 = a0 | a1\n 46866: s1 = reverse a0\n 46868: a1 = reverse a3\n 46870: a2 = reverse a2\n 46872: a0 = reverse t0\n 46874: u64 [sp + 0x218] = a0\n 46878: u64 [sp + 0x210] = a2\n 46882: a0 = a0 | a2\n 46885: a2 = a1\n 46887: a1 = a1 | s1\n 46890: a1 = a1 | a0\n 46893: a1 = a1 >> 0x20\n 46896: a0 = a0 | s1\n 46899: a0 = a0 << 0x20\n 46902: a0 = a0 | a1\n 46905: jump @666 if a0 != 0\n      : @657 (gas: 5)\n 46909: u64 [sp + 0x208] = a2\n 46913: i32 a0 = a2 + 0\n 46915: a1 = 0x20\n 46918: u64 [sp + 0x200] = a0\n 46922: ra = 596, jump @0\n      : @658 [@dyn 298] (gas: 50)\n 46929: u8 [a0 + 31] = 0\n 46932: u8 [a0 + 30] = 0\n 46935: u8 [a0 + 29] = 0\n 46938: u8 [a0 + 28] = 0\n 46941: u8 [a0 + 27] = 0\n 46944: u8 [a0 + 26] = 0\n 46947: u8 [a0 + 25] = 0\n 46950: u8 [a0 + 24] = 0\n 46953: u8 [a0 + 23] = 0\n 46956: u8 [a0 + 22] = 0\n 46959: u8 [a0 + 21] = 0\n 46962: u8 [a0 + 20] = 0\n 46965: u8 [a0 + 19] = 0\n 46968: u8 [a0 + 18] = 0\n 46971: u8 [a0 + 17] = 0\n 46974: u8 [a0 + 16] = 0\n 46977: u8 [a0 + 15] = 0\n 46980: u8 [a0 + 14] = 0\n 46983: u8 [a0 + 13] = 0\n 46986: u8 [a0 + 12] = 0\n 46989: u8 [a0 + 11] = 0\n 46992: u8 [a0 + 10] = 0\n 46995: u8 [a0 + 9] = 0\n 46998: u8 [a0 + 8] = 0\n 47001: u8 [a0 + 7] = 0\n 47004: u8 [a0 + 6] = 0\n 47007: u8 [a0 + 5] = 0\n 47010: u8 [a0 + 4] = 0\n 47013: u8 [a0 + 3] = 0xa0\n 47018: u8 [a0 + 2] = 0x79\n 47022: u8 [a0 + 1] = 0xc3\n 47027: u8 [a0 + 0] = 0x8\n 47030: a1 = u64 [sp + 0x208]\n 47034: a0 = a1 + 0x4\n 47037: a1 = a0 <u a1\n 47040: a3 = u64 [sp + 0x218]\n 47044: a2 = a3 + a1\n 47047: a3 = a2 <u a3\n 47050: a3 = a1 if a1 == 0\n 47053: a3 = a3 + s1\n 47056: a1 = a3 <u s1\n 47059: a4 = u64 [sp + 0x210]\n 47063: a4 = a4 + a1\n 47066: u64 [sp + 0x488] = a2\n 47070: u64 [sp + 0x480] = a0\n 47074: u64 [sp + 0x490] = a3\n 47078: a0 = sp + 0x4a0\n 47082: a1 = sp + 0x480\n 47086: u64 [sp + 0x498] = a4\n 47090: ra = 598, jump @563\n      : @659 [@dyn 299] (gas: 5)\n 47096: a0 = u64 [sp + 0x4a8]\n 47100: t0 = u64 [sp + 0x4b8]\n 47104: t1 = u64 [sp + 0x4a0]\n 47108: a3 = u64 [sp + 0x4b0]\n 47112: jump @665\n      : @660 (gas: 3)\n 47115: a0 = 0x40\n 47118: a1 = 0x20\n 47121: ra = 600, jump @0\n      : @661 [@dyn 300] (gas: 103)\n 47128: a1 = u8 [a0 + 0x11]\n 47131: a2 = u8 [a0 + 0x10]\n 47134: a3 = u8 [a0 + 0x12]\n 47137: a4 = u8 [a0 + 0x13]\n 47140: a1 = a1 << 0x8\n 47143: a1 = a1 | a2\n 47146: a3 = a3 << 0x10\n 47149: a4 = a4 << 0x18\n 47152: a3 = a3 | a4\n 47155: a1 = a1 | a3\n 47158: a2 = u8 [a0 + 0x15]\n 47161: a3 = u8 [a0 + 0x14]\n 47164: a4 = u8 [a0 + 0x16]\n 47167: a5 = u8 [a0 + 0x17]\n 47170: a2 = a2 << 0x8\n 47173: a2 = a2 | a3\n 47176: a4 = a4 << 0x10\n 47179: a5 = a5 << 0x18\n 47182: a4 = a4 | a5\n 47185: a2 = a2 | a4\n 47188: a2 = a2 << 0x20\n 47191: t0 = a2 | a1\n 47194: a2 = u8 [a0 + 0x1]\n 47197: a3 = u8 [a0]\n 47199: a4 = u8 [a0 + 0x2]\n 47202: a5 = u8 [a0 + 0x3]\n 47205: a2 = a2 << 0x8\n 47208: a2 = a2 | a3\n 47211: a4 = a4 << 0x10\n 47214: a5 = a5 << 0x18\n 47217: a4 = a4 | a5\n 47220: a2 = a2 | a4\n 47223: a3 = u8 [a0 + 0x5]\n 47226: a4 = u8 [a0 + 0x4]\n 47229: a5 = u8 [a0 + 0x6]\n 47232: s1 = u8 [a0 + 0x7]\n 47235: a3 = a3 << 0x8\n 47238: a3 = a3 | a4\n 47241: a5 = a5 << 0x10\n 47244: s1 = s1 << 0x18\n 47247: a5 = a5 | s1\n 47250: a3 = a3 | a5\n 47253: a3 = a3 << 0x20\n 47256: a2 = a2 | a3\n 47259: a3 = u8 [a0 + 0x19]\n 47262: a4 = u8 [a0 + 0x18]\n 47265: a5 = u8 [a0 + 0x1a]\n 47268: s1 = u8 [a0 + 0x1b]\n 47271: a3 = a3 << 0x8\n 47274: a3 = a3 | a4\n 47277: a5 = a5 << 0x10\n 47280: s1 = s1 << 0x18\n 47283: a5 = a5 | s1\n 47286: a3 = a3 | a5\n 47289: a4 = u8 [a0 + 0x1d]\n 47292: a5 = u8 [a0 + 0x1c]\n 47295: s1 = u8 [a0 + 0x1e]\n 47298: a1 = u8 [a0 + 0x1f]\n 47301: a4 = a4 << 0x8\n 47304: a4 = a4 | a5\n 47307: s1 = s1 << 0x10\n 47310: a1 = a1 << 0x18\n 47313: a1 = a1 | s1\n 47316: a1 = a1 | a4\n 47319: a1 = a1 << 0x20\n 47322: a3 = a3 | a1\n 47325: a1 = u8 [a0 + 0x9]\n 47328: a4 = u8 [a0 + 0x8]\n 47331: a5 = u8 [a0 + 0xa]\n 47334: s1 = u8 [a0 + 0xb]\n 47337: a1 = a1 << 0x8\n 47340: a1 = a1 | a4\n 47343: a5 = a5 << 0x10\n 47346: s1 = s1 << 0x18\n 47349: a5 = a5 | s1\n 47352: a1 = a1 | a5\n 47355: a4 = u8 [a0 + 0xd]\n 47358: a5 = u8 [a0 + 0xc]\n 47361: s1 = u8 [a0 + 0xe]\n 47364: a0 = u8 [a0 + 0xf]\n 47367: a4 = a4 << 0x8\n 47370: a4 = a4 | a5\n 47373: s1 = s1 << 0x10\n 47376: a0 = a0 << 0x18\n 47379: a0 = a0 | s1\n 47382: a0 = a0 | a4\n 47385: a0 = a0 << 0x20\n 47388: a0 = a0 | a1\n 47391: s1 = reverse a0\n 47393: a1 = reverse a3\n 47395: a2 = reverse a2\n 47397: a0 = reverse t0\n 47399: u64 [sp + 0x218] = a0\n 47403: u64 [sp + 0x210] = a2\n 47407: a0 = a0 | a2\n 47410: a2 = a1\n 47412: a1 = a1 | s1\n 47415: a1 = a1 | a0\n 47418: a1 = a1 >> 0x20\n 47421: a0 = a0 | s1\n 47424: a0 = a0 << 0x20\n 47427: a0 = a0 | a1\n 47430: jump @666 if a0 != 0\n      : @662 (gas: 5)\n 47434: u64 [sp + 0x208] = a2\n 47438: i32 a0 = a2 + 0\n 47440: a1 = 0x20\n 47443: u64 [sp + 0x200] = a0\n 47447: ra = 602, jump @0\n      : @663 [@dyn 301] (gas: 50)\n 47454: u8 [a0 + 31] = 0\n 47457: u8 [a0 + 30] = 0\n 47460: u8 [a0 + 29] = 0\n 47463: u8 [a0 + 28] = 0\n 47466: u8 [a0 + 27] = 0\n 47469: u8 [a0 + 26] = 0\n 47472: u8 [a0 + 25] = 0\n 47475: u8 [a0 + 24] = 0\n 47478: u8 [a0 + 23] = 0\n 47481: u8 [a0 + 22] = 0\n 47484: u8 [a0 + 21] = 0\n 47487: u8 [a0 + 20] = 0\n 47490: u8 [a0 + 19] = 0\n 47493: u8 [a0 + 18] = 0\n 47496: u8 [a0 + 17] = 0\n 47499: u8 [a0 + 16] = 0\n 47502: u8 [a0 + 15] = 0\n 47505: u8 [a0 + 14] = 0\n 47508: u8 [a0 + 13] = 0\n 47511: u8 [a0 + 12] = 0\n 47514: u8 [a0 + 11] = 0\n 47517: u8 [a0 + 10] = 0\n 47520: u8 [a0 + 9] = 0\n 47523: u8 [a0 + 8] = 0\n 47526: u8 [a0 + 7] = 0\n 47529: u8 [a0 + 6] = 0\n 47532: u8 [a0 + 5] = 0\n 47535: u8 [a0 + 4] = 0\n 47538: u8 [a0 + 3] = 0xa0\n 47543: u8 [a0 + 2] = 0x79\n 47547: u8 [a0 + 1] = 0xc3\n 47552: u8 [a0 + 0] = 0x8\n 47555: a1 = u64 [sp + 0x208]\n 47559: a0 = a1 + 0x4\n 47562: a1 = a0 <u a1\n 47565: a3 = u64 [sp + 0x218]\n 47569: a2 = a3 + a1\n 47572: a3 = a2 <u a3\n 47575: a3 = a1 if a1 == 0\n 47578: a3 = a3 + s1\n 47581: a1 = a3 <u s1\n 47584: a4 = u64 [sp + 0x210]\n 47588: a4 = a4 + a1\n 47591: u64 [sp + 0x268] = a2\n 47595: u64 [sp + 0x260] = a0\n 47599: u64 [sp + 0x270] = a3\n 47603: a0 = sp + 0x280\n 47607: a1 = sp + 0x260\n 47611: u64 [sp + 0x278] = a4\n 47615: ra = 604, jump @617\n      : @664 [@dyn 302] (gas: 5)\n 47621: a0 = u64 [sp + 0x288]\n 47625: t0 = u64 [sp + 0x298]\n 47629: t1 = u64 [sp + 0x280]\n 47633: a3 = u64 [sp + 0x290]\n 47637: fallthrough\n      : @665 (gas: 26)\n 47638: a1 = u64 [sp + 0x218]\n 47642: a4 = a0 ^ a1\n 47645: a5 = a0 <u a1\n 47648: t2 = a1\n 47650: a2 = u64 [sp + 0x208]\n 47654: a1 = t1 <u a2\n 47657: a5 = a1 if a4 == 0\n 47660: a4 = a3 - s1\n 47663: a3 = a3 <u s1\n 47666: s1 = u64 [sp + 0x210]\n 47670: s1 = t0 - s1\n 47673: s1 = s1 - a3\n 47676: a3 = a4 <u a5\n 47679: s1 = s1 - a3\n 47682: a4 = a4 - a5\n 47685: a0 = a0 - t2\n 47688: a1 = a0 - a1\n 47691: a0 = t1 - a2\n 47694: a1 = a1 | s1\n 47697: a2 = a0 | a4\n 47700: a2 = a2 | a1\n 47703: a1 = a1 | a4\n 47706: a2 = a2 >> 0x20\n 47709: a1 = a1 << 0x20\n 47712: a1 = a1 | a2\n 47715: jump @667 if a1 == 0\n      : @666 (gas: 1)\n 47718: trap\n      : @667 (gas: 4)\n 47719: i32 s1 = a0 + 0\n 47721: a0 = u64 [sp + 0x200]\n 47725: a1 = s1\n 47727: ra = 606, jump @0\n      : @668 [@dyn 303] (gas: 6)\n 47734: i32 a1 = a0 + 0\n 47736: a0 = 0x1\n 47739: a2 = s1\n 47741: ra = 0x260\n 47745: ecalli 12 // 'seal_return'\n 47747: fallthrough\n      : @669 [@dyn 304] (gas: 70)\n 47748: sp = sp + 0xfffffffffffffef0\n 47752: u64 [sp + 0x108] = ra\n 47756: u64 [sp + 0x100] = s0\n 47760: u64 [sp + 0xf8] = s1\n 47764: s0 = sp + 0x110\n 47768: sp = sp & 0xfffffffffffffff0\n 47771: a5 = u64 [a0]\n 47773: u64 [sp + 0x48] = a5\n 47776: a5 = u64 [a0 + 0x8]\n 47779: u64 [sp + 0x40] = a5\n 47782: a5 = u64 [a0 + 0x10]\n 47785: u64 [sp + 0x38] = a5\n 47788: a0 = u64 [a0 + 0x18]\n 47791: u64 [sp + 0x30] = a0\n 47794: a0 = u64 [a1]\n 47796: u64 [sp + 0x28] = a0\n 47799: a0 = u64 [a1 + 0x8]\n 47802: u64 [sp + 0x20] = a0\n 47805: a0 = u64 [a1 + 0x10]\n 47808: u64 [sp + 0x18] = a0\n 47811: a0 = u64 [a1 + 0x18]\n 47814: u64 [sp + 0x10] = a0\n 47817: a0 = u64 [a2]\n 47819: u64 [sp + 0x8] = a0\n 47822: ra = u64 [a2 + 0x8]\n 47825: s1 = u64 [a2 + 0x10]\n 47828: t2 = u64 [a2 + 0x18]\n 47831: t1 = u64 [a3]\n 47833: t0 = u64 [a3 + 0x8]\n 47836: a5 = u64 [a3 + 0x10]\n 47839: a3 = u64 [a3 + 0x18]\n 47842: a2 = u64 [a4]\n 47844: a1 = u64 [a4 + 0x8]\n 47847: a0 = u64 [a4 + 0x10]\n 47850: a4 = u64 [a4 + 0x18]\n 47853: u64 [sp + 0x68] = a4\n 47856: u64 [sp + 0x60] = a0\n 47859: u64 [sp + 0x58] = a1\n 47862: u64 [sp + 0x50] = a2\n 47865: u64 [sp + 0x88] = a3\n 47869: u64 [sp + 0x80] = a5\n 47873: u64 [sp + 0x78] = t0\n 47876: u64 [sp + 0x70] = t1\n 47879: u64 [sp + 0xa8] = t2\n 47883: u64 [sp + 0xa0] = s1\n 47887: u64 [sp + 0x98] = ra\n 47891: a0 = u64 [sp + 0x8]\n 47894: u64 [sp + 0x90] = a0\n 47898: a0 = u64 [sp + 0x10]\n 47901: u64 [sp + 0xc8] = a0\n 47905: a0 = u64 [sp + 0x18]\n 47908: u64 [sp + 0xc0] = a0\n 47912: a0 = u64 [sp + 0x20]\n 47915: u64 [sp + 0xb8] = a0\n 47919: a0 = u64 [sp + 0x28]\n 47922: u64 [sp + 0xb0] = a0\n 47926: a0 = u64 [sp + 0x30]\n 47929: u64 [sp + 0xe8] = a0\n 47933: a0 = u64 [sp + 0x38]\n 47936: u64 [sp + 0xe0] = a0\n 47940: a0 = u64 [sp + 0x40]\n 47943: u64 [sp + 0xd8] = a0\n 47947: a0 = sp + 0xd0\n 47951: a1 = sp + 0xb0\n 47955: a2 = sp + 0x90\n 47959: a3 = sp + 0x70\n 47962: a4 = sp + 0x50\n 47965: a5 = u64 [sp + 0x48]\n 47968: u64 [sp + 0xd0] = a5\n 47972: ra = 610, jump @512\n      : @670 [@dyn 305] (gas: 6)\n 47978: sp = s0 + 0xfffffffffffffef0\n 47982: ra = u64 [sp + 0x108]\n 47986: s0 = u64 [sp + 0x100]\n 47990: s1 = u64 [sp + 0xf8]\n 47994: sp = sp + 0x110\n 47998: ret\n      : @671 (gas: 42)\n 48000: sp = sp + 0xfffffffffffffea0\n 48004: u64 [sp + 0x158] = ra\n 48008: u64 [sp + 0x150] = s0\n 48012: u64 [sp + 0x148] = s1\n 48016: s0 = sp + 0x160\n 48020: sp = sp & 0xffffffffffffffe0\n 48023: a2 = u64 [a1 + 0x18]\n 48026: u64 [sp + 0x28] = a2\n 48029: a2 = u64 [a1 + 0x10]\n 48032: u64 [sp + 0x18] = a2\n 48035: a2 = u64 [a1 + 0x8]\n 48038: u64 [sp + 0x10] = a2\n 48041: a1 = u64 [a1]\n 48043: u64 [sp + 0x8] = a1\n 48046: a1 = u64 [a0]\n 48048: u64 [sp + 0x50] = a1\n 48051: a1 = u64 [a0 + 0x8]\n 48054: u64 [sp + 0x58] = a1\n 48057: a1 = u64 [a0 + 0x10]\n 48060: u64 [sp + 0x30] = a1\n 48063: s1 = u64 [a0 + 0x18]\n 48066: i32 a0 = sp + 0xe0\n 48070: ecalli 5 // 'caller'\n 48072: a0 = u64 [sp + 0xe8]\n 48076: a1 = u64 [sp + 0xe0]\n 48080: a2 = i32 [sp + 0xf0]\n 48084: a0 = reverse a0\n 48086: a3 = a0 >> 0x20\n 48089: a1 = reverse a1\n 48091: a4 = a1 << 0x20\n 48094: a3 = a3 | a4\n 48097: u64 [sp + 0x48] = a3\n 48100: a0 = a0 << 0x20\n 48103: a2 = reverse a2\n 48105: a2 = a2 >> 0x20\n 48108: a0 = a0 | a2\n 48111: u64 [sp + 0x40] = a0\n 48114: a1 = a1 >> 0x20\n 48117: u64 [sp + 0x38] = a1\n 48120: a1 = 0x20\n 48123: a0 = 0\n 48125: ra = 612, jump @0\n      : @672 [@dyn 306] (gas: 71)\n 48132: u64 [sp + 0x20] = s1\n 48135: a1 = reverse s1\n 48137: s1 = u64 [sp + 0x30]\n 48140: a2 = reverse s1\n 48142: a3 = u64 [sp + 0x58]\n 48145: a3 = reverse a3\n 48147: a4 = u64 [sp + 0x50]\n 48150: a4 = reverse a4\n 48152: a5 = a4 >> 0x38\n 48155: u8 [a0 + 0x1f] = a5\n 48158: a5 = a4 >> 0x30\n 48161: u8 [a0 + 0x1e] = a5\n 48164: a5 = a4 >> 0x28\n 48167: u8 [a0 + 0x1d] = a5\n 48170: a5 = a4 >> 0x20\n 48173: u8 [a0 + 0x1c] = a5\n 48176: a5 = a4 >> 0x18\n 48179: u8 [a0 + 0x1b] = a5\n 48182: a5 = a4 >> 0x10\n 48185: u8 [a0 + 0x1a] = a5\n 48188: a5 = a4 >> 0x8\n 48191: u8 [a0 + 0x19] = a5\n 48194: u8 [a0 + 0x18] = a4\n 48197: a4 = a3 >> 0x38\n 48200: u8 [a0 + 0x17] = a4\n 48203: a4 = a3 >> 0x30\n 48206: u8 [a0 + 0x16] = a4\n 48209: a4 = a3 >> 0x28\n 48212: u8 [a0 + 0x15] = a4\n 48215: a4 = a3 >> 0x20\n 48218: u8 [a0 + 0x14] = a4\n 48221: a4 = a3 >> 0x18\n 48224: u8 [a0 + 0x13] = a4\n 48227: a4 = a3 >> 0x10\n 48230: u8 [a0 + 0x12] = a4\n 48233: a4 = a3 >> 0x8\n 48236: u8 [a0 + 0x11] = a4\n 48239: u8 [a0 + 0x10] = a3\n 48242: a3 = a2 >> 0x38\n 48245: u8 [a0 + 0xf] = a3\n 48248: a3 = a2 >> 0x30\n 48251: u8 [a0 + 0xe] = a3\n 48254: a3 = a2 >> 0x28\n 48257: u8 [a0 + 0xd] = a3\n 48260: a3 = a2 >> 0x20\n 48263: u8 [a0 + 0xc] = a3\n 48266: a3 = a2 >> 0x18\n 48269: u8 [a0 + 0xb] = a3\n 48272: a3 = a2 >> 0x10\n 48275: u8 [a0 + 0xa] = a3\n 48278: a3 = a2 >> 0x8\n 48281: u8 [a0 + 0x9] = a3\n 48284: u8 [a0 + 0x8] = a2\n 48287: a2 = a1 >> 0x38\n 48290: u8 [a0 + 0x7] = a2\n 48293: a2 = a1 >> 0x30\n 48296: u8 [a0 + 0x6] = a2\n 48299: a2 = a1 >> 0x28\n 48302: u8 [a0 + 0x5] = a2\n 48305: a2 = a1 >> 0x20\n 48308: u8 [a0 + 0x4] = a2\n 48311: a2 = a1 >> 0x18\n 48314: u8 [a0 + 0x3] = a2\n 48317: a2 = a1 >> 0x10\n 48320: u8 [a0 + 0x2] = a2\n 48323: a2 = a1 >> 0x8\n 48326: u8 [a0 + 0x1] = a2\n 48329: u8 [a0] = a1\n 48331: a0 = 0x20\n 48334: a1 = 0x20\n 48337: ra = 614, jump @0\n      : @673 [@dyn 307] (gas: 35)\n 48344: u8 [a0 + 31] = 0\n 48347: u8 [a0 + 30] = 0\n 48350: u8 [a0 + 29] = 0\n 48353: u8 [a0 + 28] = 0\n 48356: u8 [a0 + 27] = 0\n 48359: u8 [a0 + 26] = 0\n 48362: u8 [a0 + 25] = 0\n 48365: u8 [a0 + 24] = 0\n 48368: u8 [a0 + 23] = 0\n 48371: u8 [a0 + 22] = 0\n 48374: u8 [a0 + 21] = 0\n 48377: u8 [a0 + 20] = 0\n 48380: u8 [a0 + 19] = 0\n 48383: u8 [a0 + 18] = 0\n 48386: u8 [a0 + 17] = 0\n 48389: u8 [a0 + 16] = 0\n 48392: u8 [a0 + 15] = 0\n 48395: u8 [a0 + 14] = 0\n 48398: u8 [a0 + 13] = 0\n 48401: u8 [a0 + 12] = 0\n 48404: u8 [a0 + 11] = 0\n 48407: u8 [a0 + 10] = 0\n 48410: u8 [a0 + 9] = 0\n 48413: u8 [a0 + 8] = 0\n 48416: u8 [a0 + 7] = 0\n 48419: u8 [a0 + 6] = 0\n 48422: u8 [a0 + 5] = 0\n 48425: u8 [a0 + 4] = 0\n 48428: u8 [a0 + 3] = 0\n 48431: u8 [a0 + 2] = 0\n 48434: u8 [a0 + 1] = 0\n 48437: u8 [a0 + 0] = 0\n 48439: a1 = 0x40\n 48442: a0 = 0\n 48444: ra = 616, jump @0\n      : @674 [@dyn 308] (gas: 28)\n 48451: i32 a0 = a0 + 0\n 48453: i32 a2 = sp + 0x120\n 48457: a1 = 0x40\n 48460: ecalli 8 // 'hash_keccak_256'\n 48462: a0 = u64 [sp + 0x138]\n 48466: a1 = u64 [sp + 0x130]\n 48470: a2 = u64 [sp + 0x128]\n 48474: a3 = u64 [sp + 0x120]\n 48478: a0 = reverse a0\n 48480: a1 = reverse a1\n 48482: a2 = reverse a2\n 48484: a3 = reverse a3\n 48486: u64 [sp + 0x118] = a3\n 48490: u64 [sp + 0x110] = a2\n 48494: u64 [sp + 0x108] = a1\n 48498: u64 [sp + 0x100] = a0\n 48502: u64 [sp + 312] = 0\n 48506: u64 [sp + 304] = 0\n 48510: u64 [sp + 296] = 0\n 48514: u64 [sp + 288] = 0\n 48518: u32 [sp + 320] = 0x20\n 48523: i32 a1 = sp + 0x100\n 48527: i32 a3 = sp + 0x120\n 48531: i32 a4 = sp + 0x140\n 48535: a2 = 0xffffffffffffffff\n 48538: a0 = 0\n 48540: ecalli 7 // 'get_storage'\n 48542: fallthrough\n      : @675 (gas: 12)\n 48543: a0 = u32 [sp + 0x130]\n 48547: a1 = u64 [sp + 0x120]\n 48551: a2 = u64 [sp + 0x128]\n 48555: a3 = u64 [sp + 0x38]\n 48558: a0 = a0 ^ a3\n 48561: a3 = u64 [sp + 0x40]\n 48564: a1 = a1 ^ a3\n 48567: a0 = a0 | a1\n 48570: a1 = u64 [sp + 0x48]\n 48573: a1 = a1 ^ a2\n 48576: a0 = a0 | a1\n 48579: jump @678 if a0 != 0\n      : @676 (gas: 43)\n 48583: a0 = u64 [sp + 0x8]\n 48586: u64 [sp + 0x60] = a0\n 48589: a0 = u64 [sp + 0x50]\n 48592: u64 [sp + 0x80] = a0\n 48596: a0 = u64 [sp + 0x10]\n 48599: u64 [sp + 0x68] = a0\n 48602: a0 = u64 [sp + 0x58]\n 48605: u64 [sp + 0x88] = a0\n 48609: a0 = u64 [sp + 0x18]\n 48612: u64 [sp + 0x70] = a0\n 48615: u64 [sp + 0x90] = s1\n 48619: a0 = u64 [sp + 0x28]\n 48622: u64 [sp + 0x78] = a0\n 48625: a0 = sp + 0x80\n 48629: a1 = sp + 0x60\n 48632: a2 = u64 [sp + 0x20]\n 48635: u64 [sp + 0x98] = a2\n 48639: ra = 0x26a\n 48643: sp = sp + 0xfffffffffffffd20\n 48647: u64 [sp + 0x2d8] = ra\n 48651: u64 [sp + 0x2d0] = s0\n 48655: u64 [sp + 0x2c8] = s1\n 48659: s0 = sp + 0x2e0\n 48663: sp = sp & 0xffffffffffffffe0\n 48666: a2 = u64 [a1]\n 48668: u64 [sp + 0x158] = a2\n 48672: a2 = u64 [a1 + 0x8]\n 48675: u64 [sp + 0x150] = a2\n 48679: a2 = u64 [a1 + 0x10]\n 48682: u64 [sp + 0x148] = a2\n 48686: a1 = u64 [a1 + 0x18]\n 48689: u64 [sp + 0x140] = a1\n 48693: a1 = u64 [a0]\n 48695: u64 [sp + 0x138] = a1\n 48699: a1 = u64 [a0 + 0x8]\n 48702: u64 [sp + 0x130] = a1\n 48706: a1 = u64 [a0 + 0x10]\n 48709: u64 [sp + 0x128] = a1\n 48713: s1 = u64 [a0 + 0x18]\n 48716: a1 = 0x20\n 48719: a0 = 0\n 48721: ra = 0x282\n 48725: jump @0\n      : @677 [@dyn 309] (gas: 6)\n 48729: sp = s0 + 0xfffffffffffffea0\n 48733: ra = u64 [sp + 0x158]\n 48737: s0 = u64 [sp + 0x150]\n 48741: s1 = u64 [sp + 0x148]\n 48745: sp = sp + 0x160\n 48749: ret\n      : @678 (gas: 3)\n 48751: a0 = 0x40\n 48754: a1 = 0x20\n 48757: ra = 620, jump @0\n      : @679 [@dyn 310] (gas: 103)\n 48764: a1 = u8 [a0 + 0x11]\n 48767: a2 = u8 [a0 + 0x10]\n 48770: a3 = u8 [a0 + 0x12]\n 48773: a4 = u8 [a0 + 0x13]\n 48776: a1 = a1 << 0x8\n 48779: a1 = a1 | a2\n 48782: a3 = a3 << 0x10\n 48785: a4 = a4 << 0x18\n 48788: a3 = a3 | a4\n 48791: a1 = a1 | a3\n 48794: a2 = u8 [a0 + 0x15]\n 48797: a3 = u8 [a0 + 0x14]\n 48800: a4 = u8 [a0 + 0x16]\n 48803: a5 = u8 [a0 + 0x17]\n 48806: a2 = a2 << 0x8\n 48809: a2 = a2 | a3\n 48812: a4 = a4 << 0x10\n 48815: a5 = a5 << 0x18\n 48818: a4 = a4 | a5\n 48821: a2 = a2 | a4\n 48824: a2 = a2 << 0x20\n 48827: t0 = a2 | a1\n 48830: a2 = u8 [a0 + 0x1]\n 48833: a3 = u8 [a0]\n 48835: a4 = u8 [a0 + 0x2]\n 48838: a5 = u8 [a0 + 0x3]\n 48841: a2 = a2 << 0x8\n 48844: a2 = a2 | a3\n 48847: a4 = a4 << 0x10\n 48850: a5 = a5 << 0x18\n 48853: a4 = a4 | a5\n 48856: a2 = a2 | a4\n 48859: a3 = u8 [a0 + 0x5]\n 48862: a4 = u8 [a0 + 0x4]\n 48865: a5 = u8 [a0 + 0x6]\n 48868: s1 = u8 [a0 + 0x7]\n 48871: a3 = a3 << 0x8\n 48874: a3 = a3 | a4\n 48877: a5 = a5 << 0x10\n 48880: s1 = s1 << 0x18\n 48883: a5 = a5 | s1\n 48886: a3 = a3 | a5\n 48889: a3 = a3 << 0x20\n 48892: a2 = a2 | a3\n 48895: a3 = u8 [a0 + 0x19]\n 48898: a4 = u8 [a0 + 0x18]\n 48901: a5 = u8 [a0 + 0x1a]\n 48904: s1 = u8 [a0 + 0x1b]\n 48907: a3 = a3 << 0x8\n 48910: a3 = a3 | a4\n 48913: a5 = a5 << 0x10\n 48916: s1 = s1 << 0x18\n 48919: a5 = a5 | s1\n 48922: a3 = a3 | a5\n 48925: a4 = u8 [a0 + 0x1d]\n 48928: a5 = u8 [a0 + 0x1c]\n 48931: s1 = u8 [a0 + 0x1e]\n 48934: a1 = u8 [a0 + 0x1f]\n 48937: a4 = a4 << 0x8\n 48940: a4 = a4 | a5\n 48943: s1 = s1 << 0x10\n 48946: a1 = a1 << 0x18\n 48949: a1 = a1 | s1\n 48952: a1 = a1 | a4\n 48955: a1 = a1 << 0x20\n 48958: a3 = a3 | a1\n 48961: a1 = u8 [a0 + 0x9]\n 48964: a4 = u8 [a0 + 0x8]\n 48967: a5 = u8 [a0 + 0xa]\n 48970: s1 = u8 [a0 + 0xb]\n 48973: a1 = a1 << 0x8\n 48976: a1 = a1 | a4\n 48979: a5 = a5 << 0x10\n 48982: s1 = s1 << 0x18\n 48985: a5 = a5 | s1\n 48988: a1 = a1 | a5\n 48991: a4 = u8 [a0 + 0xd]\n 48994: a5 = u8 [a0 + 0xc]\n 48997: s1 = u8 [a0 + 0xe]\n 49000: a0 = u8 [a0 + 0xf]\n 49003: a4 = a4 << 0x8\n 49006: a4 = a4 | a5\n 49009: s1 = s1 << 0x10\n 49012: a0 = a0 << 0x18\n 49015: a0 = a0 | s1\n 49018: a0 = a0 | a4\n 49021: a0 = a0 << 0x20\n 49024: a0 = a0 | a1\n 49027: s1 = reverse a0\n 49029: a1 = reverse a3\n 49031: a2 = reverse a2\n 49033: a0 = reverse t0\n 49035: u64 [sp + 0x58] = a0\n 49038: u64 [sp + 0x50] = a2\n 49041: a0 = a0 | a2\n 49044: a2 = a1\n 49046: a1 = a1 | s1\n 49049: a1 = a1 | a0\n 49052: a1 = a1 >> 0x20\n 49055: a0 = a0 | s1\n 49058: a0 = a0 << 0x20\n 49061: a0 = a0 | a1\n 49064: jump @683 if a0 != 0\n      : @680 (gas: 5)\n 49068: u64 [sp + 0x48] = a2\n 49071: i32 a0 = a2 + 0\n 49073: a1 = 0x20\n 49076: u64 [sp + 0x40] = a0\n 49079: ra = 622, jump @0\n      : @681 [@dyn 311] (gas: 50)\n 49086: u8 [a0 + 31] = 0\n 49089: u8 [a0 + 30] = 0\n 49092: u8 [a0 + 29] = 0\n 49095: u8 [a0 + 28] = 0\n 49098: u8 [a0 + 27] = 0\n 49101: u8 [a0 + 26] = 0\n 49104: u8 [a0 + 25] = 0\n 49107: u8 [a0 + 24] = 0\n 49110: u8 [a0 + 23] = 0\n 49113: u8 [a0 + 22] = 0\n 49116: u8 [a0 + 21] = 0\n 49119: u8 [a0 + 20] = 0\n 49122: u8 [a0 + 19] = 0\n 49125: u8 [a0 + 18] = 0\n 49128: u8 [a0 + 17] = 0\n 49131: u8 [a0 + 16] = 0\n 49134: u8 [a0 + 15] = 0\n 49137: u8 [a0 + 14] = 0\n 49140: u8 [a0 + 13] = 0\n 49143: u8 [a0 + 12] = 0\n 49146: u8 [a0 + 11] = 0\n 49149: u8 [a0 + 10] = 0\n 49152: u8 [a0 + 9] = 0\n 49155: u8 [a0 + 8] = 0\n 49158: u8 [a0 + 7] = 0\n 49161: u8 [a0 + 6] = 0\n 49164: u8 [a0 + 5] = 0\n 49167: u8 [a0 + 4] = 0\n 49170: u8 [a0 + 3] = 0xa0\n 49175: u8 [a0 + 2] = 0x79\n 49179: u8 [a0 + 1] = 0xc3\n 49184: u8 [a0 + 0] = 0x8\n 49187: a1 = u64 [sp + 0x48]\n 49190: a0 = a1 + 0x4\n 49193: a1 = a0 <u a1\n 49196: a3 = u64 [sp + 0x58]\n 49199: a2 = a3 + a1\n 49202: a3 = a2 <u a3\n 49205: a3 = a1 if a1 == 0\n 49208: a3 = a3 + s1\n 49211: a1 = a3 <u s1\n 49214: a4 = u64 [sp + 0x50]\n 49217: a4 = a4 + a1\n 49220: u64 [sp + 0xa8] = a2\n 49224: u64 [sp + 0xa0] = a0\n 49228: u64 [sp + 0xb0] = a3\n 49232: a0 = sp + 0xc0\n 49236: a1 = sp + 0xa0\n 49240: u64 [sp + 0xb8] = a4\n 49244: ra = 624, jump @530\n      : @682 [@dyn 312] (gas: 30)\n 49250: a0 = u64 [sp + 0xc8]\n 49254: t0 = u64 [sp + 0xd8]\n 49258: t1 = u64 [sp + 0xc0]\n 49262: a3 = u64 [sp + 0xd0]\n 49266: a1 = u64 [sp + 0x58]\n 49269: a4 = a0 ^ a1\n 49272: a5 = a0 <u a1\n 49275: t2 = a1\n 49277: a2 = u64 [sp + 0x48]\n 49280: a1 = t1 <u a2\n 49283: a5 = a1 if a4 == 0\n 49286: a4 = a3 - s1\n 49289: a3 = a3 <u s1\n 49292: s1 = u64 [sp + 0x50]\n 49295: s1 = t0 - s1\n 49298: s1 = s1 - a3\n 49301: a3 = a4 <u a5\n 49304: s1 = s1 - a3\n 49307: a4 = a4 - a5\n 49310: a0 = a0 - t2\n 49313: a1 = a0 - a1\n 49316: a0 = t1 - a2\n 49319: a1 = a1 | s1\n 49322: a2 = a0 | a4\n 49325: a2 = a2 | a1\n 49328: a1 = a1 | a4\n 49331: a2 = a2 >> 0x20\n 49334: a1 = a1 << 0x20\n 49337: a1 = a1 | a2\n 49340: jump @684 if a1 == 0\n      : @683 (gas: 1)\n 49343: trap\n      : @684 (gas: 4)\n 49344: i32 s1 = a0 + 0\n 49346: a0 = u64 [sp + 0x40]\n 49349: a1 = s1\n 49351: ra = 626, jump @0\n      : @685 [@dyn 313] (gas: 6)\n 49358: i32 a1 = a0 + 0\n 49360: a0 = 0x1\n 49363: a2 = s1\n 49365: ra = 0x274\n 49369: ecalli 12 // 'seal_return'\n 49371: fallthrough\n      : @686 [@dyn 314] (gas: 18)\n 49372: sp = sp + 0xffffffffffffffd0\n 49375: u64 [sp + 0x28] = ra\n 49378: u64 [sp + 0x20] = s0\n 49381: u64 [sp + 0x18] = s1\n 49384: s1 = u64 [a0 + 0x10]\n 49387: a2 = u64 [a0 + 0x18]\n 49390: a1 = u64 [a0 + 0x8]\n 49393: s0 = u64 [a0]\n 49395: u64 [sp + 0x10] = a1\n 49398: u64 [sp + 0x8] = a2\n 49401: a0 = a1 | a2\n 49404: a1 = s0 | s1\n 49407: a1 = a1 | a0\n 49410: a1 = a1 >> 0x20\n 49413: a0 = a0 | s1\n 49416: a0 = a0 << 0x20\n 49419: a0 = a0 | a1\n 49422: jump @691 if a0 != 0\n      : @687 (gas: 4)\n 49426: i32 a0 = s0 + 0\n 49428: a1 = 0x20\n 49431: u64 [sp] = a0\n 49433: ra = 630, jump @0\n      : @688 [@dyn 315] (gas: 42)\n 49440: u8 [a0 + 31] = 0x6e\n 49444: u8 [a0 + 30] = 0x61\n 49448: u8 [a0 + 29] = 0x6c\n 49452: u8 [a0 + 28] = 0x61\n 49456: u8 [a0 + 27] = 0x62\n 49460: u8 [a0 + 26] = 0x20\n 49464: u8 [a0 + 25] = 0x65\n 49468: u8 [a0 + 24] = 0x6b\n 49472: u8 [a0 + 23] = 0x61\n 49476: u8 [a0 + 22] = 0x74\n 49480: u8 [a0 + 21] = 0x73\n 49484: u8 [a0 + 20] = 0x20\n 49488: t0 = 0x20\n 49491: u8 [a0 + 19] = 0x74\n 49495: u8 [a0 + 18] = 0x6e\n 49499: u8 [a0 + 17] = 0x65\n 49503: u8 [a0 + 16] = 0x69\n 49507: a5 = 0x63\n 49510: u8 [a0 + 0xf] = a5\n 49513: u8 [a0 + 14] = 0x69\n 49517: u8 [a0 + 13] = 0x66\n 49521: u8 [a0 + 12] = 0x66\n 49525: u8 [a0 + 11] = 0x75\n 49529: u8 [a0 + 10] = 0x73\n 49533: u8 [a0 + 9] = 0x6e\n 49537: u8 [a0 + 8] = 0x69\n 49541: u8 [a0 + 0x7] = t0\n 49544: u8 [a0 + 6] = 0x3a\n 49548: u8 [a0 + 5] = 0x77\n 49552: u8 [a0 + 4] = 0x6f\n 49556: u8 [a0 + 3] = 0x72\n 49560: u8 [a0 + 0x2] = a5\n 49563: u8 [a0 + 1] = 0x73\n 49567: a2 = u64 [sp + 0x8]\n 49570: a2 = a2 | s1\n 49573: a3 = 0xffffffe0\n 49583: a3 = s0 <u a3\n 49586: a4 = u64 [sp + 0x10]\n 49589: a3 = 0 if a4 != 0\n 49591: a3 = 0 if a2 != 0\n 49593: u8 [a0 + 0] = 0x45\n 49596: jump @691 if a3 == 0\n      : @689 (gas: 4)\n 49600: a0 = u64 [sp]\n 49602: i32 a0 = a0 + 0x20\n 49605: a1 = 0x20\n 49608: ra = 632, jump @0\n      : @690 [@dyn 316] (gas: 38)\n 49615: u8 [a0 + 31] = 0\n 49618: u8 [a0 + 30] = 0\n 49621: u8 [a0 + 29] = 0\n 49624: u8 [a0 + 28] = 0\n 49627: u8 [a0 + 27] = 0\n 49630: u8 [a0 + 26] = 0\n 49633: u8 [a0 + 25] = 0\n 49636: u8 [a0 + 24] = 0\n 49639: u8 [a0 + 23] = 0\n 49642: u8 [a0 + 22] = 0\n 49645: u8 [a0 + 21] = 0\n 49648: u8 [a0 + 20] = 0\n 49651: u8 [a0 + 19] = 0\n 49654: u8 [a0 + 18] = 0\n 49657: u8 [a0 + 17] = 0\n 49660: u8 [a0 + 16] = 0\n 49663: u8 [a0 + 15] = 0\n 49666: u8 [a0 + 14] = 0\n 49669: u8 [a0 + 13] = 0\n 49672: u8 [a0 + 12] = 0\n 49675: u8 [a0 + 11] = 0\n 49678: u8 [a0 + 10] = 0\n 49681: u8 [a0 + 9] = 0\n 49684: u8 [a0 + 8] = 0\n 49687: u8 [a0 + 7] = 0\n 49690: u8 [a0 + 6] = 0\n 49693: u8 [a0 + 5] = 0\n 49696: u8 [a0 + 4] = 0\n 49699: u8 [a0 + 3] = 0\n 49702: u8 [a0 + 2] = 0\n 49705: u8 [a0 + 1] = 0x65\n 49709: a1 = 0x63\n 49712: u8 [a0] = a1\n 49714: ra = u64 [sp + 0x28]\n 49717: s0 = u64 [sp + 0x20]\n 49720: s1 = u64 [sp + 0x18]\n 49723: sp = sp + 0x30\n 49726: ret\n      : @691 (gas: 1)\n 49728: trap\n      : @692 (gas: 17)\n 49729: sp = sp + 0xffffffffffffff98\n 49732: u64 [sp + 0x60] = ra\n 49735: u64 [sp + 0x58] = s0\n 49738: u64 [sp + 0x50] = s1\n 49741: a3 = u64 [a1 + 0x18]\n 49744: a4 = u64 [a1 + 0x10]\n 49747: a5 = u64 [a1 + 0x8]\n 49750: s1 = u64 [a1]\n 49752: a1 = a5 | a3\n 49755: a2 = s1 | a4\n 49758: a2 = a2 | a1\n 49761: a2 = a2 >> 0x20\n 49764: a1 = a1 | a4\n 49767: a1 = a1 << 0x20\n 49770: a1 = a1 | a2\n 49773: u64 [sp + 0x30] = a0\n 49776: jump @701 if a1 != 0\n      : @693 (gas: 19)\n 49780: a0 = s1 + 0x20\n 49783: u64 [sp + 0x48] = a0\n 49786: a0 = a0 <u s1\n 49789: a1 = a5 + a0\n 49792: u64 [sp + 0x40] = a1\n 49795: u64 [sp + 0x18] = a5\n 49798: s0 = a1 <u a5\n 49801: s0 = a0 if a0 == 0\n 49804: s0 = s0 + a4\n 49807: u64 [sp + 0x20] = a4\n 49810: a0 = s0 <u a4\n 49813: u64 [sp + 0x28] = a3\n 49816: a0 = a0 + a3\n 49819: u64 [sp + 0x38] = a0\n 49822: u64 [sp + 0x10] = s1\n 49825: i32 a0 = s1 + 0\n 49827: a1 = 0x20\n 49830: s1 = 0x20\n 49833: ra = 634, jump @0\n      : @694 [@dyn 317] (gas: 43)\n 49840: u8 [a0 + 0x1f] = s1\n 49843: a1 = u64 [sp + 0x48]\n 49846: a1 = a1 | s0\n 49849: a2 = u64 [sp + 0x40]\n 49852: a3 = u64 [sp + 0x38]\n 49855: a2 = a2 | a3\n 49858: a1 = a1 | a2\n 49861: a1 = a1 >> 0x20\n 49864: a2 = a2 | s0\n 49867: a2 = a2 << 0x20\n 49870: a1 = a1 | a2\n 49873: u8 [a0 + 30] = 0\n 49876: u8 [a0 + 29] = 0\n 49879: u8 [a0 + 28] = 0\n 49882: u8 [a0 + 27] = 0\n 49885: u8 [a0 + 26] = 0\n 49888: u8 [a0 + 25] = 0\n 49891: u8 [a0 + 24] = 0\n 49894: u8 [a0 + 23] = 0\n 49897: u8 [a0 + 22] = 0\n 49900: u8 [a0 + 21] = 0\n 49903: u8 [a0 + 20] = 0\n 49906: u8 [a0 + 19] = 0\n 49909: u8 [a0 + 18] = 0\n 49912: u8 [a0 + 17] = 0\n 49915: u8 [a0 + 16] = 0\n 49918: u8 [a0 + 15] = 0\n 49921: u8 [a0 + 14] = 0\n 49924: u8 [a0 + 13] = 0\n 49927: u8 [a0 + 12] = 0\n 49930: u8 [a0 + 11] = 0\n 49933: u8 [a0 + 10] = 0\n 49936: u8 [a0 + 9] = 0\n 49939: u8 [a0 + 8] = 0\n 49942: u8 [a0 + 7] = 0\n 49945: u8 [a0 + 6] = 0\n 49948: u8 [a0 + 5] = 0\n 49951: u8 [a0 + 4] = 0\n 49954: u8 [a0 + 3] = 0\n 49957: u8 [a0 + 2] = 0\n 49960: u8 [a0 + 1] = 0\n 49963: u8 [a0 + 0] = 0\n 49965: jump @701 if a1 != 0\n      : @695 (gas: 6)\n 49969: s1 = s0\n 49971: s0 = u64 [sp + 0x48]\n 49974: i32 a0 = s0 + 0\n 49976: a1 = 0x20\n 49979: u64 [sp + 0x8] = a0\n 49982: ra = 636, jump @0\n      : @696 [@dyn 318] (gas: 44)\n 49989: u8 [a0 + 31] = 0x22\n 49993: u8 [a0 + 30] = 0\n 49996: u8 [a0 + 29] = 0\n 49999: u8 [a0 + 28] = 0\n 50002: u8 [a0 + 27] = 0\n 50005: u8 [a0 + 26] = 0\n 50008: u8 [a0 + 25] = 0\n 50011: u8 [a0 + 24] = 0\n 50014: u8 [a0 + 23] = 0\n 50017: u8 [a0 + 22] = 0\n 50020: u8 [a0 + 21] = 0\n 50023: u8 [a0 + 20] = 0\n 50026: u8 [a0 + 19] = 0\n 50029: u8 [a0 + 18] = 0\n 50032: u8 [a0 + 17] = 0\n 50035: u8 [a0 + 16] = 0\n 50038: u8 [a0 + 15] = 0\n 50041: u8 [a0 + 14] = 0\n 50044: u8 [a0 + 13] = 0\n 50047: u8 [a0 + 12] = 0\n 50050: u8 [a0 + 11] = 0\n 50053: u8 [a0 + 10] = 0\n 50056: u8 [a0 + 9] = 0\n 50059: u8 [a0 + 8] = 0\n 50062: u8 [a0 + 7] = 0\n 50065: u8 [a0 + 6] = 0\n 50068: u8 [a0 + 5] = 0\n 50071: u8 [a0 + 4] = 0\n 50074: u8 [a0 + 3] = 0\n 50077: u8 [a0 + 2] = 0\n 50080: u8 [a0 + 1] = 0\n 50083: a1 = u64 [sp + 0x38]\n 50086: a3 = s1 | a1\n 50089: s1 = 0x1\n 50092: a1 = 0x100000000\n 50102: u64 [sp] = a1\n 50104: a1 = 0xffffffe0\n 50114: a1 = s0 <u a1\n 50117: a2 = u64 [sp + 0x40]\n 50120: a1 = 0 if a2 != 0\n 50122: u64 [sp + 0x38] = a3\n 50125: a1 = 0 if a3 != 0\n 50127: u8 [a0 + 0] = 0\n 50129: jump @701 if a1 == 0\n      : @697 (gas: 4)\n 50133: s0 = u64 [sp + 0x8]\n 50136: i32 a0 = s0 + 0x20\n 50139: a1 = 0x20\n 50142: ra = 638, jump @0\n      : @698 [@dyn 319] (gas: 44)\n 50149: u8 [a0 + 31] = 0x6e\n 50153: u8 [a0 + 30] = 0x61\n 50157: u8 [a0 + 29] = 0x6c\n 50161: u8 [a0 + 28] = 0x61\n 50165: u8 [a0 + 27] = 0x62\n 50169: a5 = 0x20\n 50172: u8 [a0 + 0x1a] = a5\n 50175: u8 [a0 + 25] = 0x65\n 50179: u8 [a0 + 24] = 0x6b\n 50183: u8 [a0 + 23] = 0x61\n 50187: u8 [a0 + 22] = 0x74\n 50191: u8 [a0 + 21] = 0x73\n 50195: u8 [a0 + 0x14] = a5\n 50198: u8 [a0 + 19] = 0x74\n 50202: u8 [a0 + 18] = 0x6e\n 50206: u8 [a0 + 17] = 0x65\n 50210: u8 [a0 + 16] = 0x69\n 50214: s1 = 0x63\n 50217: u8 [a0 + 0xf] = s1\n 50220: u8 [a0 + 14] = 0x69\n 50224: u8 [a0 + 13] = 0x66\n 50228: u8 [a0 + 12] = 0x66\n 50232: a4 = 0x75\n 50235: u8 [a0 + 0xb] = a4\n 50238: u8 [a0 + 10] = 0x73\n 50242: u8 [a0 + 9] = 0x6e\n 50246: u8 [a0 + 8] = 0x69\n 50250: u8 [a0 + 0x7] = a5\n 50253: u8 [a0 + 6] = 0x3a\n 50257: u8 [a0 + 5] = 0x77\n 50261: u8 [a0 + 4] = 0x6f\n 50265: u8 [a0 + 3] = 0x72\n 50269: u8 [a0 + 0x2] = s1\n 50272: u8 [a0 + 1] = 0x73\n 50276: a2 = u64 [sp]\n 50278: a2 = a2 + 0xffffffffffffffc0\n 50281: a3 = u64 [sp + 0x48]\n 50284: a2 = a3 <u a2\n 50287: a3 = u64 [sp + 0x40]\n 50290: a2 = 0 if a3 != 0\n 50292: a3 = u64 [sp + 0x38]\n 50295: a2 = 0 if a3 != 0\n 50297: u8 [a0 + 0] = 0x45\n 50300: jump @701 if a2 == 0\n      : @699 (gas: 3)\n 50304: i32 a0 = s0 + 0x40\n 50307: a1 = 0x20\n 50310: ra = 640, jump @0\n      : @700 [@dyn 320] (gas: 54)\n 50317: u8 [a0 + 31] = 0\n 50320: u8 [a0 + 30] = 0\n 50323: u8 [a0 + 29] = 0\n 50326: u8 [a0 + 28] = 0\n 50329: u8 [a0 + 27] = 0\n 50332: u8 [a0 + 26] = 0\n 50335: u8 [a0 + 25] = 0\n 50338: u8 [a0 + 24] = 0\n 50341: u8 [a0 + 23] = 0\n 50344: u8 [a0 + 22] = 0\n 50347: u8 [a0 + 21] = 0\n 50350: u8 [a0 + 20] = 0\n 50353: u8 [a0 + 19] = 0\n 50356: u8 [a0 + 18] = 0\n 50359: u8 [a0 + 17] = 0\n 50362: u8 [a0 + 16] = 0\n 50365: u8 [a0 + 15] = 0\n 50368: u8 [a0 + 14] = 0\n 50371: u8 [a0 + 13] = 0\n 50374: u8 [a0 + 12] = 0\n 50377: u8 [a0 + 11] = 0\n 50380: u8 [a0 + 10] = 0\n 50383: u8 [a0 + 9] = 0\n 50386: u8 [a0 + 8] = 0\n 50389: u8 [a0 + 7] = 0\n 50392: u8 [a0 + 6] = 0\n 50395: u8 [a0 + 5] = 0\n 50398: u8 [a0 + 4] = 0\n 50401: u8 [a0 + 3] = 0\n 50404: u8 [a0 + 2] = 0\n 50407: u8 [a0 + 1] = 0x65\n 50411: u8 [a0 + 0] = 0x63\n 50414: a1 = u64 [sp + 0x10]\n 50417: a0 = a1 + 0x80\n 50421: a1 = a0 <u a1\n 50424: a3 = u64 [sp + 0x18]\n 50427: a2 = a3 + a1\n 50430: a3 = a2 <u a3\n 50433: a3 = a1 if a1 == 0\n 50436: a1 = u64 [sp + 0x20]\n 50439: a3 = a3 + a1\n 50442: a1 = a3 <u a1\n 50445: a4 = u64 [sp + 0x28]\n 50448: a1 = a1 + a4\n 50451: a4 = u64 [sp + 0x30]\n 50454: u64 [a4] = a0\n 50456: u64 [a4 + 0x8] = a2\n 50459: u64 [a4 + 0x10] = a3\n 50462: u64 [a4 + 0x18] = a1\n 50465: ra = u64 [sp + 0x60]\n 50468: s0 = u64 [sp + 0x58]\n 50471: s1 = u64 [sp + 0x50]\n 50474: sp = sp + 0x68\n 50477: ret\n      : @701 (gas: 1)\n 50479: trap\n      : @702 [@dyn 321] (gas: 102)\n 50480: a5 = reverse s1\n 50482: a1 = u64 [sp + 0x128]\n 50486: a1 = reverse a1\n 50488: a2 = u64 [sp + 0x130]\n 50492: a2 = reverse a2\n 50494: a3 = u64 [sp + 0x138]\n 50498: a3 = reverse a3\n 50500: u8 [a0 + 0x18] = a3\n 50503: u8 [a0 + 0x10] = a2\n 50506: u8 [a0 + 0x8] = a1\n 50509: u8 [a0] = a5\n 50511: a4 = a3 >> 0x38\n 50514: u64 [sp + 0x118] = a4\n 50518: u8 [a0 + 0x1f] = a4\n 50521: a4 = a3 >> 0x30\n 50524: u64 [sp + 0x110] = a4\n 50528: u8 [a0 + 0x1e] = a4\n 50531: a4 = a3 >> 0x28\n 50534: u64 [sp + 0x108] = a4\n 50538: u8 [a0 + 0x1d] = a4\n 50541: a4 = a3 >> 0x20\n 50544: u64 [sp + 0x100] = a4\n 50548: u8 [a0 + 0x1c] = a4\n 50551: a4 = a3 >> 0x18\n 50554: u64 [sp + 0xf8] = a4\n 50558: u8 [a0 + 0x1b] = a4\n 50561: a4 = a3 >> 0x10\n 50564: u64 [sp + 0xf0] = a4\n 50568: u8 [a0 + 0x1a] = a4\n 50571: u64 [sp + 0x120] = a3\n 50575: a3 = a3 >> 0x8\n 50578: u64 [sp + 0xe8] = a3\n 50582: u8 [a0 + 0x19] = a3\n 50585: a3 = a2 >> 0x38\n 50588: u64 [sp + 0xe0] = a3\n 50592: u8 [a0 + 0x17] = a3\n 50595: a3 = a2 >> 0x30\n 50598: u64 [sp + 0xd8] = a3\n 50602: u8 [a0 + 0x16] = a3\n 50605: a3 = a2 >> 0x28\n 50608: u64 [sp + 0xd0] = a3\n 50612: u8 [a0 + 0x15] = a3\n 50615: a3 = a2 >> 0x20\n 50618: u64 [sp + 0xc8] = a3\n 50622: u8 [a0 + 0x14] = a3\n 50625: a3 = a2 >> 0x18\n 50628: u64 [sp + 0xc0] = a3\n 50632: u8 [a0 + 0x13] = a3\n 50635: a3 = a2 >> 0x10\n 50638: u64 [sp + 0xb8] = a3\n 50642: u8 [a0 + 0x12] = a3\n 50645: u64 [sp + 0x128] = a2\n 50649: a2 = a2 >> 0x8\n 50652: u64 [sp + 0xb0] = a2\n 50656: u8 [a0 + 0x11] = a2\n 50659: a2 = a1 >> 0x38\n 50662: u64 [sp + 0xa8] = a2\n 50666: u8 [a0 + 0xf] = a2\n 50669: a2 = a1 >> 0x30\n 50672: u64 [sp + 0xa0] = a2\n 50676: u8 [a0 + 0xe] = a2\n 50679: a2 = a1 >> 0x28\n 50682: u64 [sp + 0x98] = a2\n 50686: u8 [a0 + 0xd] = a2\n 50689: a2 = a1 >> 0x20\n 50692: u64 [sp + 0x90] = a2\n 50696: u8 [a0 + 0xc] = a2\n 50699: a2 = a1 >> 0x18\n 50702: u64 [sp + 0x88] = a2\n 50706: u8 [a0 + 0xb] = a2\n 50709: a2 = a1 >> 0x10\n 50712: u64 [sp + 0x80] = a2\n 50716: u8 [a0 + 0xa] = a2\n 50719: u64 [sp + 0x130] = a1\n 50723: a1 = a1 >> 0x8\n 50726: u64 [sp + 0x78] = a1\n 50729: u8 [a0 + 0x9] = a1\n 50732: a1 = a5 >> 0x38\n 50735: u64 [sp + 0x70] = a1\n 50738: u8 [a0 + 0x7] = a1\n 50741: a1 = a5 >> 0x30\n 50744: u64 [sp + 0x68] = a1\n 50747: u8 [a0 + 0x6] = a1\n 50750: a1 = a5 >> 0x28\n 50753: u64 [sp + 0x60] = a1\n 50756: u8 [a0 + 0x5] = a1\n 50759: a1 = a5 >> 0x20\n 50762: u64 [sp + 0x58] = a1\n 50765: u8 [a0 + 0x4] = a1\n 50768: a1 = a5 >> 0x18\n 50771: u64 [sp + 0x50] = a1\n 50774: u8 [a0 + 0x3] = a1\n 50777: a1 = a5 >> 0x10\n 50780: u64 [sp + 0x48] = a1\n 50783: u8 [a0 + 0x2] = a1\n 50786: u64 [sp + 0x138] = a5\n 50790: a1 = a5 >> 0x8\n 50793: u64 [sp + 0x40] = a1\n 50796: u8 [a0 + 0x1] = a1\n 50799: a0 = 0x20\n 50802: a1 = 0x20\n 50805: ra = 644, jump @0\n      : @703 [@dyn 322] (gas: 35)\n 50812: u8 [a0 + 31] = 0x2\n 50816: u8 [a0 + 30] = 0\n 50819: u8 [a0 + 29] = 0\n 50822: u8 [a0 + 28] = 0\n 50825: u8 [a0 + 27] = 0\n 50828: u8 [a0 + 26] = 0\n 50831: u8 [a0 + 25] = 0\n 50834: u8 [a0 + 24] = 0\n 50837: u8 [a0 + 23] = 0\n 50840: u8 [a0 + 22] = 0\n 50843: u8 [a0 + 21] = 0\n 50846: u8 [a0 + 20] = 0\n 50849: u8 [a0 + 19] = 0\n 50852: u8 [a0 + 18] = 0\n 50855: u8 [a0 + 17] = 0\n 50858: u8 [a0 + 16] = 0\n 50861: u8 [a0 + 15] = 0\n 50864: u8 [a0 + 14] = 0\n 50867: u8 [a0 + 13] = 0\n 50870: u8 [a0 + 12] = 0\n 50873: u8 [a0 + 11] = 0\n 50876: u8 [a0 + 10] = 0\n 50879: u8 [a0 + 9] = 0\n 50882: u8 [a0 + 8] = 0\n 50885: u8 [a0 + 7] = 0\n 50888: u8 [a0 + 6] = 0\n 50891: u8 [a0 + 5] = 0\n 50894: u8 [a0 + 4] = 0\n 50897: u8 [a0 + 3] = 0\n 50900: u8 [a0 + 2] = 0\n 50903: u8 [a0 + 1] = 0\n 50906: u8 [a0 + 0] = 0\n 50908: a1 = 0x40\n 50911: a0 = 0\n 50913: ra = 646, jump @0\n      : @704 [@dyn 323] (gas: 28)\n 50920: i32 a0 = a0 + 0\n 50922: i32 a2 = sp + 0x280\n 50926: a1 = 0x40\n 50929: ecalli 8 // 'hash_keccak_256'\n 50931: a0 = u64 [sp + 0x298]\n 50935: a1 = u64 [sp + 0x290]\n 50939: a2 = u64 [sp + 0x288]\n 50943: a3 = u64 [sp + 0x280]\n 50947: a0 = reverse a0\n 50949: a1 = reverse a1\n 50951: a2 = reverse a2\n 50953: a3 = reverse a3\n 50955: u64 [sp + 0x258] = a3\n 50959: u64 [sp + 0x250] = a2\n 50963: u64 [sp + 0x248] = a1\n 50967: u64 [sp + 0x240] = a0\n 50971: u64 [sp + 664] = 0\n 50975: u64 [sp + 656] = 0\n 50979: u64 [sp + 648] = 0\n 50983: u64 [sp + 640] = 0\n 50987: u32 [sp + 608] = 0x20\n 50992: i32 a1 = sp + 0x240\n 50996: i32 a3 = sp + 0x280\n 51000: i32 a4 = sp + 0x260\n 51004: a2 = 0xffffffffffffffff\n 51007: a0 = 0\n 51009: ecalli 7 // 'get_storage'\n 51011: fallthrough\n      : @705 (gas: 20)\n 51012: a0 = u64 [sp + 0x298]\n 51016: t0 = u64 [sp + 0x280]\n 51020: a2 = u64 [sp + 0x290]\n 51024: a3 = u64 [sp + 0x288]\n 51028: a1 = u64 [sp + 0x140]\n 51032: a4 = a0 ^ a1\n 51035: s1 = a0 <u a1\n 51038: a0 = u64 [sp + 0x148]\n 51042: a5 = a2 <u a0\n 51045: a5 = s1 if a4 != 0\n 51048: a1 = u64 [sp + 0x150]\n 51052: s1 = a3 ^ a1\n 51055: a3 = a3 <u a1\n 51058: a1 = u64 [sp + 0x158]\n 51062: a1 = t0 <u a1\n 51065: a1 = a3 if s1 != 0\n 51068: a0 = a0 ^ a2\n 51071: a0 = a0 | a4\n 51074: a1 = a5 if a0 != 0\n 51077: jump @722 if a1 != 0\n      : @706 (gas: 3)\n 51081: a1 = 0x20\n 51084: a0 = 0\n 51086: ra = 648, jump @0\n      : @707 [@dyn 324] (gas: 67)\n 51093: a1 = u64 [sp + 0x128]\n 51097: u8 [a0 + 0x10] = a1\n 51100: a1 = u64 [sp + 0xa8]\n 51104: u8 [a0 + 0xf] = a1\n 51107: a1 = u64 [sp + 0xa0]\n 51111: u8 [a0 + 0xe] = a1\n 51114: a1 = u64 [sp + 0x98]\n 51118: u8 [a0 + 0xd] = a1\n 51121: a1 = u64 [sp + 0x90]\n 51125: u8 [a0 + 0xc] = a1\n 51128: a1 = u64 [sp + 0x88]\n 51132: u8 [a0 + 0xb] = a1\n 51135: a1 = u64 [sp + 0x80]\n 51139: u8 [a0 + 0xa] = a1\n 51142: a1 = u64 [sp + 0x78]\n 51145: u8 [a0 + 0x9] = a1\n 51148: a1 = u64 [sp + 0x130]\n 51152: u8 [a0 + 0x8] = a1\n 51155: a1 = u64 [sp + 0x70]\n 51158: u8 [a0 + 0x7] = a1\n 51161: a1 = u64 [sp + 0x68]\n 51164: u8 [a0 + 0x6] = a1\n 51167: a1 = u64 [sp + 0x60]\n 51170: u8 [a0 + 0x5] = a1\n 51173: a1 = u64 [sp + 0x58]\n 51176: u8 [a0 + 0x4] = a1\n 51179: a1 = u64 [sp + 0x50]\n 51182: u8 [a0 + 0x3] = a1\n 51185: a1 = u64 [sp + 0x48]\n 51188: u8 [a0 + 0x2] = a1\n 51191: a1 = u64 [sp + 0x40]\n 51194: u8 [a0 + 0x1] = a1\n 51197: a1 = u64 [sp + 0x138]\n 51201: u8 [a0] = a1\n 51203: a1 = u64 [sp + 0x120]\n 51207: u8 [a0 + 0x18] = a1\n 51210: a1 = u64 [sp + 0xe0]\n 51214: u8 [a0 + 0x17] = a1\n 51217: a1 = u64 [sp + 0xd8]\n 51221: u8 [a0 + 0x16] = a1\n 51224: a1 = u64 [sp + 0xd0]\n 51228: u8 [a0 + 0x15] = a1\n 51231: a1 = u64 [sp + 0xc8]\n 51235: u8 [a0 + 0x14] = a1\n 51238: a1 = u64 [sp + 0xc0]\n 51242: u8 [a0 + 0x13] = a1\n 51245: a1 = u64 [sp + 0xb8]\n 51249: u8 [a0 + 0x12] = a1\n 51252: a1 = u64 [sp + 0xb0]\n 51256: u8 [a0 + 0x11] = a1\n 51259: a1 = u64 [sp + 0x118]\n 51263: u8 [a0 + 0x1f] = a1\n 51266: a1 = u64 [sp + 0x110]\n 51270: u8 [a0 + 0x1e] = a1\n 51273: a1 = u64 [sp + 0x108]\n 51277: u8 [a0 + 0x1d] = a1\n 51280: a1 = u64 [sp + 0x100]\n 51284: u8 [a0 + 0x1c] = a1\n 51287: a1 = u64 [sp + 0xf8]\n 51291: u8 [a0 + 0x1b] = a1\n 51294: a1 = u64 [sp + 0xf0]\n 51298: u8 [a0 + 0x1a] = a1\n 51301: a1 = u64 [sp + 0xe8]\n 51305: u8 [a0 + 0x19] = a1\n 51308: a0 = 0x20\n 51311: a1 = 0x20\n 51314: ra = 650, jump @0\n      : @708 [@dyn 325] (gas: 35)\n 51321: u8 [a0 + 31] = 0x2\n 51325: u8 [a0 + 30] = 0\n 51328: u8 [a0 + 29] = 0\n 51331: u8 [a0 + 28] = 0\n 51334: u8 [a0 + 27] = 0\n 51337: u8 [a0 + 26] = 0\n 51340: u8 [a0 + 25] = 0\n 51343: u8 [a0 + 24] = 0\n 51346: u8 [a0 + 23] = 0\n 51349: u8 [a0 + 22] = 0\n 51352: u8 [a0 + 21] = 0\n 51355: u8 [a0 + 20] = 0\n 51358: u8 [a0 + 19] = 0\n 51361: u8 [a0 + 18] = 0\n 51364: u8 [a0 + 17] = 0\n 51367: u8 [a0 + 16] = 0\n 51370: u8 [a0 + 15] = 0\n 51373: u8 [a0 + 14] = 0\n 51376: u8 [a0 + 13] = 0\n 51379: u8 [a0 + 12] = 0\n 51382: u8 [a0 + 11] = 0\n 51385: u8 [a0 + 10] = 0\n 51388: u8 [a0 + 9] = 0\n 51391: u8 [a0 + 8] = 0\n 51394: u8 [a0 + 7] = 0\n 51397: u8 [a0 + 6] = 0\n 51400: u8 [a0 + 5] = 0\n 51403: u8 [a0 + 4] = 0\n 51406: u8 [a0 + 3] = 0\n 51409: u8 [a0 + 2] = 0\n 51412: u8 [a0 + 1] = 0\n 51415: u8 [a0 + 0] = 0\n 51417: a1 = 0x40\n 51420: a0 = 0\n 51422: ra = 652, jump @0\n      : @709 [@dyn 326] (gas: 32)\n 51429: i32 a0 = a0 + 0\n 51431: i32 a2 = sp + 0x280\n 51435: a1 = 0x40\n 51438: ecalli 8 // 'hash_keccak_256'\n 51440: a0 = u64 [sp + 0x298]\n 51444: a1 = u64 [sp + 0x290]\n 51448: a2 = u64 [sp + 0x288]\n 51452: a3 = u64 [sp + 0x280]\n 51456: a0 = reverse a0\n 51458: a1 = reverse a1\n 51460: a2 = reverse a2\n 51462: a3 = reverse a3\n 51464: u64 [sp + 0x20] = a3\n 51467: u64 [sp + 0x258] = a3\n 51471: u64 [sp + 0x28] = a2\n 51474: u64 [sp + 0x250] = a2\n 51478: u64 [sp + 0x30] = a1\n 51481: u64 [sp + 0x248] = a1\n 51485: u64 [sp + 0x38] = a0\n 51488: u64 [sp + 0x240] = a0\n 51492: u64 [sp + 664] = 0\n 51496: u64 [sp + 656] = 0\n 51500: u64 [sp + 648] = 0\n 51504: u64 [sp + 640] = 0\n 51508: u32 [sp + 608] = 0x20\n 51513: i32 a1 = sp + 0x240\n 51517: i32 a3 = sp + 0x280\n 51521: i32 a4 = sp + 0x260\n 51525: a2 = 0xffffffffffffffff\n 51528: a0 = 0\n 51530: ecalli 7 // 'get_storage'\n 51532: fallthrough\n      : @710 (gas: 22)\n 51533: a2 = u64 [sp + 0x298]\n 51537: a3 = u64 [sp + 0x290]\n 51541: t1 = u64 [sp + 0x288]\n 51545: a1 = u64 [sp + 0x280]\n 51549: a4 = u64 [sp + 0x140]\n 51553: a0 = a2 ^ a4\n 51556: a4 = a2 <u a4\n 51559: t0 = u64 [sp + 0x148]\n 51563: a5 = a3 <u t0\n 51566: u64 [sp + 0x10] = a5\n 51569: a4 = a5 if a0 == 0\n 51572: a5 = u64 [sp + 0x150]\n 51576: t2 = t1 ^ a5\n 51579: s1 = t1 <u a5\n 51582: a5 = u64 [sp + 0x158]\n 51586: u64 [sp] = a1\n 51588: ra = a1 <u a5\n 51591: s1 = ra if t2 == 0\n 51594: a5 = a3 ^ t0\n 51597: a0 = a0 | a5\n 51600: a4 = s1 if a0 == 0\n 51603: jump @728 if a4 != 0\n      : @711 (gas: 89)\n 51607: a0 = u64 [sp + 0x148]\n 51611: a0 = a3 - a0\n 51614: a3 = a0 - s1\n 51617: u64 [sp + 0x18] = a3\n 51620: a0 = a0 <u s1\n 51623: a3 = u64 [sp + 0x140]\n 51627: a2 = a2 - a3\n 51630: a1 = u64 [sp + 0x10]\n 51633: a2 = a2 - a1\n 51636: a2 = a2 - a0\n 51639: u64 [sp + 0x10] = a2\n 51642: a0 = u64 [sp + 0x150]\n 51646: a0 = t1 - a0\n 51649: a0 = a0 - ra\n 51652: u64 [sp + 0x8] = a0\n 51655: a0 = u64 [sp + 0x158]\n 51659: a1 = u64 [sp]\n 51661: a0 = a1 - a0\n 51664: u64 [sp] = a0\n 51666: a0 = u64 [sp + 0x28]\n 51669: u64 [sp + 0x250] = a0\n 51673: a0 = u64 [sp + 0x30]\n 51676: u64 [sp + 0x248] = a0\n 51680: a0 = u64 [sp + 0x38]\n 51683: u64 [sp + 0x240] = a0\n 51687: s1 = u64 [sp + 0x20]\n 51690: u64 [sp + 0x258] = s1\n 51694: u64 [sp + 664] = 0\n 51698: u64 [sp + 656] = 0\n 51702: u64 [sp + 648] = 0\n 51706: u64 [sp + 640] = 0\n 51710: u32 [sp + 608] = 0x20\n 51715: i32 a1 = sp + 0x240\n 51719: i32 a3 = sp + 0x280\n 51723: i32 a4 = sp + 0x260\n 51727: a2 = 0xffffffffffffffff\n 51730: a0 = 0\n 51732: ecalli 7 // 'get_storage'\n 51734: u64 [sp + 0x258] = s1\n 51738: a0 = u64 [sp + 0x28]\n 51741: u64 [sp + 0x250] = a0\n 51745: a0 = u64 [sp + 0x30]\n 51748: u64 [sp + 0x248] = a0\n 51752: a0 = u64 [sp + 0x38]\n 51755: u64 [sp + 0x240] = a0\n 51759: a0 = u64 [sp + 0x10]\n 51762: u64 [sp + 0x298] = a0\n 51766: a0 = u64 [sp + 0x18]\n 51769: u64 [sp + 0x290] = a0\n 51773: a0 = u64 [sp + 0x8]\n 51776: u64 [sp + 0x288] = a0\n 51780: a0 = u64 [sp]\n 51782: u64 [sp + 0x280] = a0\n 51786: i32 a1 = sp + 0x240\n 51790: i32 a3 = sp + 0x280\n 51794: a2 = 0xffffffffffffffff\n 51797: a4 = 0x20\n 51800: a0 = 0\n 51802: ecalli 14 // 'set_storage'\n 51804: i32 a0 = sp + 0x220\n 51808: ecalli 5 // 'caller'\n 51810: a0 = u64 [sp + 0x228]\n 51814: a1 = i32 [sp + 0x230]\n 51818: a2 = u64 [sp + 0x220]\n 51822: a0 = reverse a0\n 51824: a3 = a0 << 0x20\n 51827: a1 = reverse a1\n 51829: a1 = a1 >> 0x20\n 51832: a3 = a3 | a1\n 51835: a0 = a0 >> 0x20\n 51838: a1 = reverse a2\n 51840: a2 = a1 << 0x20\n 51843: a0 = a0 | a2\n 51846: a1 = a1 >> 0x20\n 51849: a2 = u64 [sp + 0x140]\n 51853: u64 [sp + 0x1f8] = a2\n 51857: a2 = u64 [sp + 0x148]\n 51861: u64 [sp + 0x1f0] = a2\n 51865: a2 = u64 [sp + 0x150]\n 51869: u64 [sp + 0x1e8] = a2\n 51873: a2 = u64 [sp + 0x158]\n 51877: u64 [sp + 0x1e0] = a2\n 51881: u64 [sp + 536] = 0\n 51885: u64 [sp + 0x210] = a1\n 51889: u64 [sp + 0x208] = a0\n 51893: a0 = sp + 0x200\n 51897: a1 = sp + 0x1e0\n 51901: u64 [sp + 0x200] = a3\n 51905: ra = 654, jump @1412\n      : @712 [@dyn 327] (gas: 3)\n 51912: a1 = 0x20\n 51915: a0 = 0\n 51917: ra = 656, jump @0\n      : @713 [@dyn 328] (gas: 67)\n 51924: a1 = u64 [sp + 0x118]\n 51928: u8 [a0 + 0x1f] = a1\n 51931: a1 = u64 [sp + 0x110]\n 51935: u8 [a0 + 0x1e] = a1\n 51938: a1 = u64 [sp + 0x108]\n 51942: u8 [a0 + 0x1d] = a1\n 51945: a1 = u64 [sp + 0x100]\n 51949: u8 [a0 + 0x1c] = a1\n 51952: a1 = u64 [sp + 0xf8]\n 51956: u8 [a0 + 0x1b] = a1\n 51959: a1 = u64 [sp + 0xf0]\n 51963: u8 [a0 + 0x1a] = a1\n 51966: a1 = u64 [sp + 0xe8]\n 51970: u8 [a0 + 0x19] = a1\n 51973: a1 = u64 [sp + 0xe0]\n 51977: u8 [a0 + 0x17] = a1\n 51980: a1 = u64 [sp + 0xd8]\n 51984: u8 [a0 + 0x16] = a1\n 51987: a1 = u64 [sp + 0xd0]\n 51991: u8 [a0 + 0x15] = a1\n 51994: a1 = u64 [sp + 0xc8]\n 51998: u8 [a0 + 0x14] = a1\n 52001: a1 = u64 [sp + 0xc0]\n 52005: u8 [a0 + 0x13] = a1\n 52008: a1 = u64 [sp + 0xb8]\n 52012: u8 [a0 + 0x12] = a1\n 52015: a1 = u64 [sp + 0xb0]\n 52019: u8 [a0 + 0x11] = a1\n 52022: a1 = u64 [sp + 0xa8]\n 52026: u8 [a0 + 0xf] = a1\n 52029: a1 = u64 [sp + 0xa0]\n 52033: u8 [a0 + 0xe] = a1\n 52036: a1 = u64 [sp + 0x98]\n 52040: u8 [a0 + 0xd] = a1\n 52043: a1 = u64 [sp + 0x90]\n 52047: u8 [a0 + 0xc] = a1\n 52050: a1 = u64 [sp + 0x88]\n 52054: u8 [a0 + 0xb] = a1\n 52057: a1 = u64 [sp + 0x80]\n 52061: u8 [a0 + 0xa] = a1\n 52064: a1 = u64 [sp + 0x78]\n 52067: u8 [a0 + 0x9] = a1\n 52070: a1 = u64 [sp + 0x70]\n 52073: u8 [a0 + 0x7] = a1\n 52076: a1 = u64 [sp + 0x68]\n 52079: u8 [a0 + 0x6] = a1\n 52082: a1 = u64 [sp + 0x60]\n 52085: u8 [a0 + 0x5] = a1\n 52088: a1 = u64 [sp + 0x58]\n 52091: u8 [a0 + 0x4] = a1\n 52094: a1 = u64 [sp + 0x50]\n 52097: u8 [a0 + 0x3] = a1\n 52100: a1 = u64 [sp + 0x48]\n 52103: u8 [a0 + 0x2] = a1\n 52106: a1 = u64 [sp + 0x40]\n 52109: u8 [a0 + 0x1] = a1\n 52112: a1 = u64 [sp + 0x120]\n 52116: u8 [a0 + 0x18] = a1\n 52119: a1 = u64 [sp + 0x128]\n 52123: u8 [a0 + 0x10] = a1\n 52126: a1 = u64 [sp + 0x130]\n 52130: u8 [a0 + 0x8] = a1\n 52133: a1 = u64 [sp + 0x138]\n 52137: u8 [a0] = a1\n 52139: a0 = 0x20\n 52142: a1 = 0x20\n 52145: ra = 658, jump @0\n      : @714 [@dyn 329] (gas: 35)\n 52152: u8 [a0 + 31] = 0x2\n 52156: u8 [a0 + 30] = 0\n 52159: u8 [a0 + 29] = 0\n 52162: u8 [a0 + 28] = 0\n 52165: u8 [a0 + 27] = 0\n 52168: u8 [a0 + 26] = 0\n 52171: u8 [a0 + 25] = 0\n 52174: u8 [a0 + 24] = 0\n 52177: u8 [a0 + 23] = 0\n 52180: u8 [a0 + 22] = 0\n 52183: u8 [a0 + 21] = 0\n 52186: u8 [a0 + 20] = 0\n 52189: u8 [a0 + 19] = 0\n 52192: u8 [a0 + 18] = 0\n 52195: u8 [a0 + 17] = 0\n 52198: u8 [a0 + 16] = 0\n 52201: u8 [a0 + 15] = 0\n 52204: u8 [a0 + 14] = 0\n 52207: u8 [a0 + 13] = 0\n 52210: u8 [a0 + 12] = 0\n 52213: u8 [a0 + 11] = 0\n 52216: u8 [a0 + 10] = 0\n 52219: u8 [a0 + 9] = 0\n 52222: u8 [a0 + 8] = 0\n 52225: u8 [a0 + 7] = 0\n 52228: u8 [a0 + 6] = 0\n 52231: u8 [a0 + 5] = 0\n 52234: u8 [a0 + 4] = 0\n 52237: u8 [a0 + 3] = 0\n 52240: u8 [a0 + 2] = 0\n 52243: u8 [a0 + 1] = 0\n 52246: u8 [a0 + 0] = 0\n 52248: a1 = 0x40\n 52251: a0 = 0\n 52253: ra = 660, jump @0\n      : @715 [@dyn 330] (gas: 38)\n 52260: i32 a0 = a0 + 0\n 52262: i32 a2 = sp + 0x280\n 52266: a1 = 0x40\n 52269: ecalli 8 // 'hash_keccak_256'\n 52271: a0 = u64 [sp + 0x298]\n 52275: a1 = u64 [sp + 0x290]\n 52279: a2 = u64 [sp + 0x288]\n 52283: a3 = u64 [sp + 0x280]\n 52287: a0 = reverse a0\n 52289: a1 = reverse a1\n 52291: a2 = reverse a2\n 52293: a3 = reverse a3\n 52295: u64 [sp + 0x258] = a3\n 52299: u64 [sp + 0x250] = a2\n 52303: u64 [sp + 0x248] = a1\n 52307: u64 [sp + 0x240] = a0\n 52311: u64 [sp + 664] = 0\n 52315: u64 [sp + 656] = 0\n 52319: u64 [sp + 648] = 0\n 52323: u64 [sp + 640] = 0\n 52327: u32 [sp + 608] = 0x20\n 52332: i32 a1 = sp + 0x240\n 52336: i32 a3 = sp + 0x280\n 52340: i32 a4 = sp + 0x260\n 52344: a2 = 0xffffffffffffffff\n 52347: a0 = 0\n 52349: ecalli 7 // 'get_storage'\n 52351: a0 = u64 [sp + 0x298]\n 52355: u64 [sp + 0xf0] = a0\n 52359: a0 = u64 [sp + 0x290]\n 52363: u64 [sp + 0xf8] = a0\n 52367: a0 = u64 [sp + 0x288]\n 52371: u64 [sp + 0x100] = a0\n 52375: a0 = u64 [sp + 0x280]\n 52379: u64 [sp + 0x108] = a0\n 52383: a0 = 0x40\n 52386: a1 = 0x20\n 52389: ra = 662, jump @0\n      : @716 [@dyn 331] (gas: 102)\n 52396: a1 = u8 [a0 + 0x11]\n 52399: a2 = u8 [a0 + 0x10]\n 52402: a3 = u8 [a0 + 0x12]\n 52405: a4 = u8 [a0 + 0x13]\n 52408: a1 = a1 << 0x8\n 52411: a1 = a1 | a2\n 52414: a3 = a3 << 0x10\n 52417: a4 = a4 << 0x18\n 52420: a3 = a3 | a4\n 52423: a1 = a1 | a3\n 52426: a2 = u8 [a0 + 0x15]\n 52429: a3 = u8 [a0 + 0x14]\n 52432: a4 = u8 [a0 + 0x16]\n 52435: a5 = u8 [a0 + 0x17]\n 52438: a2 = a2 << 0x8\n 52441: a2 = a2 | a3\n 52444: a4 = a4 << 0x10\n 52447: a5 = a5 << 0x18\n 52450: a4 = a4 | a5\n 52453: a2 = a2 | a4\n 52456: a2 = a2 << 0x20\n 52459: t0 = a2 | a1\n 52462: a2 = u8 [a0 + 0x1]\n 52465: a3 = u8 [a0]\n 52467: a4 = u8 [a0 + 0x2]\n 52470: a5 = u8 [a0 + 0x3]\n 52473: a2 = a2 << 0x8\n 52476: a2 = a2 | a3\n 52479: a4 = a4 << 0x10\n 52482: a5 = a5 << 0x18\n 52485: a4 = a4 | a5\n 52488: a2 = a2 | a4\n 52491: a3 = u8 [a0 + 0x5]\n 52494: a4 = u8 [a0 + 0x4]\n 52497: a5 = u8 [a0 + 0x6]\n 52500: s1 = u8 [a0 + 0x7]\n 52503: a3 = a3 << 0x8\n 52506: a3 = a3 | a4\n 52509: a5 = a5 << 0x10\n 52512: s1 = s1 << 0x18\n 52515: a5 = a5 | s1\n 52518: a3 = a3 | a5\n 52521: a3 = a3 << 0x20\n 52524: a2 = a2 | a3\n 52527: a3 = u8 [a0 + 0x19]\n 52530: a4 = u8 [a0 + 0x18]\n 52533: a5 = u8 [a0 + 0x1a]\n 52536: s1 = u8 [a0 + 0x1b]\n 52539: a3 = a3 << 0x8\n 52542: a3 = a3 | a4\n 52545: a5 = a5 << 0x10\n 52548: s1 = s1 << 0x18\n 52551: a5 = a5 | s1\n 52554: a3 = a3 | a5\n 52557: a4 = u8 [a0 + 0x1d]\n 52560: a5 = u8 [a0 + 0x1c]\n 52563: s1 = u8 [a0 + 0x1e]\n 52566: a1 = u8 [a0 + 0x1f]\n 52569: a4 = a4 << 0x8\n 52572: a4 = a4 | a5\n 52575: s1 = s1 << 0x10\n 52578: a1 = a1 << 0x18\n 52581: a1 = a1 | s1\n 52584: a1 = a1 | a4\n 52587: a1 = a1 << 0x20\n 52590: a3 = a3 | a1\n 52593: a1 = u8 [a0 + 0x9]\n 52596: a4 = u8 [a0 + 0x8]\n 52599: a5 = u8 [a0 + 0xa]\n 52602: s1 = u8 [a0 + 0xb]\n 52605: a1 = a1 << 0x8\n 52608: a1 = a1 | a4\n 52611: a5 = a5 << 0x10\n 52614: s1 = s1 << 0x18\n 52617: a5 = a5 | s1\n 52620: a1 = a1 | a5\n 52623: a4 = u8 [a0 + 0xd]\n 52626: a5 = u8 [a0 + 0xc]\n 52629: s1 = u8 [a0 + 0xe]\n 52632: a0 = u8 [a0 + 0xf]\n 52635: a4 = a4 << 0x8\n 52638: a4 = a4 | a5\n 52641: s1 = s1 << 0x10\n 52644: a0 = a0 << 0x18\n 52647: a0 = a0 | s1\n 52650: a0 = a0 | a4\n 52653: a0 = a0 << 0x20\n 52656: a0 = a0 | a1\n 52659: s1 = reverse a0\n 52661: a3 = reverse a3\n 52663: a1 = reverse a2\n 52665: a0 = reverse t0\n 52667: u64 [sp + 0x118] = a0\n 52671: u64 [sp + 0x110] = a1\n 52675: a0 = a0 | a1\n 52678: a1 = a3 | s1\n 52681: a1 = a1 | a0\n 52684: a1 = a1 >> 0x20\n 52687: a0 = a0 | s1\n 52690: a0 = a0 << 0x20\n 52693: a0 = a0 | a1\n 52696: jump @727 if a0 != 0\n      : @717 (gas: 5)\n 52700: i32 a0 = a3 + 0\n 52702: a1 = 0x20\n 52705: u64 [sp + 0xe0] = a0\n 52709: u64 [sp + 0xe8] = a3\n 52713: ra = 664, jump @0\n      : @718 [@dyn 332] (gas: 77)\n 52720: a1 = u64 [sp + 0x140]\n 52724: a1 = reverse a1\n 52726: a2 = u64 [sp + 0x148]\n 52730: a2 = reverse a2\n 52732: a3 = u64 [sp + 0x150]\n 52736: a3 = reverse a3\n 52738: a4 = u64 [sp + 0x158]\n 52742: a4 = reverse a4\n 52744: a5 = a4 >> 0x38\n 52747: u8 [a0 + 0x1f] = a5\n 52750: a5 = a4 >> 0x30\n 52753: u8 [a0 + 0x1e] = a5\n 52756: a5 = a4 >> 0x28\n 52759: u8 [a0 + 0x1d] = a5\n 52762: a5 = a4 >> 0x20\n 52765: u8 [a0 + 0x1c] = a5\n 52768: a5 = a4 >> 0x18\n 52771: u8 [a0 + 0x1b] = a5\n 52774: a5 = a4 >> 0x10\n 52777: u8 [a0 + 0x1a] = a5\n 52780: a5 = a4 >> 0x8\n 52783: u8 [a0 + 0x19] = a5\n 52786: u8 [a0 + 0x18] = a4\n 52789: u8 [a0 + 0x10] = a3\n 52792: a4 = a3 >> 0x38\n 52795: u8 [a0 + 0x17] = a4\n 52798: a4 = a3 >> 0x30\n 52801: u8 [a0 + 0x16] = a4\n 52804: a4 = a3 >> 0x28\n 52807: u8 [a0 + 0x15] = a4\n 52810: a4 = a3 >> 0x20\n 52813: u8 [a0 + 0x14] = a4\n 52816: a4 = a3 >> 0x18\n 52819: u8 [a0 + 0x13] = a4\n 52822: a4 = a3 >> 0x10\n 52825: u8 [a0 + 0x12] = a4\n 52828: a3 = a3 >> 0x8\n 52831: u8 [a0 + 0x11] = a3\n 52834: u8 [a0 + 0x8] = a2\n 52837: a3 = a2 >> 0x38\n 52840: u8 [a0 + 0xf] = a3\n 52843: a3 = a2 >> 0x30\n 52846: u8 [a0 + 0xe] = a3\n 52849: a3 = a2 >> 0x28\n 52852: u8 [a0 + 0xd] = a3\n 52855: a3 = a2 >> 0x20\n 52858: u8 [a0 + 0xc] = a3\n 52861: a3 = a2 >> 0x18\n 52864: u8 [a0 + 0xb] = a3\n 52867: a3 = a2 >> 0x10\n 52870: u8 [a0 + 0xa] = a3\n 52873: a2 = a2 >> 0x8\n 52876: u8 [a0 + 0x9] = a2\n 52879: u8 [a0] = a1\n 52881: a2 = a1 >> 0x38\n 52884: u8 [a0 + 0x7] = a2\n 52887: a2 = a1 >> 0x30\n 52890: u8 [a0 + 0x6] = a2\n 52893: a2 = a1 >> 0x28\n 52896: u8 [a0 + 0x5] = a2\n 52899: a2 = a1 >> 0x20\n 52902: u8 [a0 + 0x4] = a2\n 52905: a2 = a1 >> 0x18\n 52908: u8 [a0 + 0x3] = a2\n 52911: a2 = a1 >> 0x10\n 52914: u8 [a0 + 0x2] = a2\n 52917: a1 = a1 >> 0x8\n 52920: a2 = u64 [sp + 0x110]\n 52924: a2 = a2 | s1\n 52927: a3 = 0xffffffe0\n 52937: a4 = u64 [sp + 0xe8]\n 52941: a3 = a4 <u a3\n 52944: a4 = u64 [sp + 0x118]\n 52948: a3 = 0 if a4 != 0\n 52950: a3 = 0 if a2 != 0\n 52952: u8 [a0 + 0x1] = a1\n 52955: jump @727 if a3 == 0\n      : @719 (gas: 4)\n 52959: s1 = u64 [sp + 0xe0]\n 52963: i32 a0 = s1 + 0x20\n 52966: a1 = 0x20\n 52969: ra = 666, jump @0\n      : @720 [@dyn 333] (gas: 71)\n 52976: a1 = u64 [sp + 0xf0]\n 52980: a1 = reverse a1\n 52982: a2 = u64 [sp + 0xf8]\n 52986: a2 = reverse a2\n 52988: a3 = u64 [sp + 0x100]\n 52992: a3 = reverse a3\n 52994: a4 = u64 [sp + 0x108]\n 52998: a4 = reverse a4\n 53000: a5 = a4 >> 0x38\n 53003: u8 [a0 + 0x1f] = a5\n 53006: a5 = a4 >> 0x30\n 53009: u8 [a0 + 0x1e] = a5\n 53012: a5 = a4 >> 0x28\n 53015: u8 [a0 + 0x1d] = a5\n 53018: a5 = a4 >> 0x20\n 53021: u8 [a0 + 0x1c] = a5\n 53024: a5 = a4 >> 0x18\n 53027: u8 [a0 + 0x1b] = a5\n 53030: a5 = a4 >> 0x10\n 53033: u8 [a0 + 0x1a] = a5\n 53036: a5 = a4 >> 0x8\n 53039: u8 [a0 + 0x19] = a5\n 53042: u8 [a0 + 0x18] = a4\n 53045: u8 [a0 + 0x10] = a3\n 53048: a4 = a3 >> 0x38\n 53051: u8 [a0 + 0x17] = a4\n 53054: a4 = a3 >> 0x30\n 53057: u8 [a0 + 0x16] = a4\n 53060: a4 = a3 >> 0x28\n 53063: u8 [a0 + 0x15] = a4\n 53066: a4 = a3 >> 0x20\n 53069: u8 [a0 + 0x14] = a4\n 53072: a4 = a3 >> 0x18\n 53075: u8 [a0 + 0x13] = a4\n 53078: a4 = a3 >> 0x10\n 53081: u8 [a0 + 0x12] = a4\n 53084: a3 = a3 >> 0x8\n 53087: u8 [a0 + 0x11] = a3\n 53090: u8 [a0 + 0x8] = a2\n 53093: a3 = a2 >> 0x38\n 53096: u8 [a0 + 0xf] = a3\n 53099: a3 = a2 >> 0x30\n 53102: u8 [a0 + 0xe] = a3\n 53105: a3 = a2 >> 0x28\n 53108: u8 [a0 + 0xd] = a3\n 53111: a3 = a2 >> 0x20\n 53114: u8 [a0 + 0xc] = a3\n 53117: a3 = a2 >> 0x18\n 53120: u8 [a0 + 0xb] = a3\n 53123: a3 = a2 >> 0x10\n 53126: u8 [a0 + 0xa] = a3\n 53129: a2 = a2 >> 0x8\n 53132: u8 [a0 + 0x9] = a2\n 53135: u8 [a0] = a1\n 53137: a2 = a1 >> 0x38\n 53140: u8 [a0 + 0x7] = a2\n 53143: a2 = a1 >> 0x30\n 53146: u8 [a0 + 0x6] = a2\n 53149: a2 = a1 >> 0x28\n 53152: u8 [a0 + 0x5] = a2\n 53155: a2 = a1 >> 0x20\n 53158: u8 [a0 + 0x4] = a2\n 53161: a2 = a1 >> 0x18\n 53164: u8 [a0 + 0x3] = a2\n 53167: a2 = a1 >> 0x10\n 53170: u8 [a0 + 0x2] = a2\n 53173: a1 = a1 >> 0x8\n 53176: u8 [a0 + 0x1] = a1\n 53179: a1 = 0x40\n 53182: a0 = s1\n 53184: ra = 668, jump @0\n      : @721 [@dyn 334] (gas: 27)\n 53191: a1 = u64 [0x20020]\n 53196: a2 = u64 [0x20028]\n 53201: a3 = u64 [0x20030]\n 53206: a4 = u64 [0x20038]\n 53211: u64 [sp + 0x298] = a1\n 53215: u64 [sp + 0x290] = a2\n 53219: u64 [sp + 0x288] = a3\n 53223: u64 [sp + 0x280] = a4\n 53227: a1 = u64 [sp + 0x120]\n 53231: u64 [sp + 0x2b8] = a1\n 53235: a1 = u64 [sp + 0x128]\n 53239: u64 [sp + 0x2b0] = a1\n 53243: a1 = u64 [sp + 0x130]\n 53247: u64 [sp + 0x2a8] = a1\n 53251: a1 = u64 [sp + 0x138]\n 53255: u64 [sp + 0x2a0] = a1\n 53259: i32 a2 = a0 + 0\n 53261: i32 a0 = sp + 0x280\n 53265: a1 = 0x2\n 53268: a3 = 0x40\n 53271: ecalli 6 // 'deposit_event'\n 53273: sp = s0 + 0xfffffffffffffd20\n 53277: ra = u64 [sp + 0x2d8]\n 53281: s0 = u64 [sp + 0x2d0]\n 53285: s1 = u64 [sp + 0x2c8]\n 53289: sp = sp + 0x2e0\n 53293: ret\n      : @722 (gas: 3)\n 53295: a0 = 0x40\n 53298: a1 = 0x20\n 53301: ra = 670, jump @0\n      : @723 [@dyn 335] (gas: 103)\n 53308: a1 = u8 [a0 + 0x11]\n 53311: a2 = u8 [a0 + 0x10]\n 53314: a3 = u8 [a0 + 0x12]\n 53317: a4 = u8 [a0 + 0x13]\n 53320: a1 = a1 << 0x8\n 53323: a1 = a1 | a2\n 53326: a3 = a3 << 0x10\n 53329: a4 = a4 << 0x18\n 53332: a3 = a3 | a4\n 53335: a1 = a1 | a3\n 53338: a2 = u8 [a0 + 0x15]\n 53341: a3 = u8 [a0 + 0x14]\n 53344: a4 = u8 [a0 + 0x16]\n 53347: a5 = u8 [a0 + 0x17]\n 53350: a2 = a2 << 0x8\n 53353: a2 = a2 | a3\n 53356: a4 = a4 << 0x10\n 53359: a5 = a5 << 0x18\n 53362: a4 = a4 | a5\n 53365: a2 = a2 | a4\n 53368: a2 = a2 << 0x20\n 53371: t0 = a2 | a1\n 53374: a2 = u8 [a0 + 0x1]\n 53377: a3 = u8 [a0]\n 53379: a4 = u8 [a0 + 0x2]\n 53382: a5 = u8 [a0 + 0x3]\n 53385: a2 = a2 << 0x8\n 53388: a2 = a2 | a3\n 53391: a4 = a4 << 0x10\n 53394: a5 = a5 << 0x18\n 53397: a4 = a4 | a5\n 53400: a2 = a2 | a4\n 53403: a3 = u8 [a0 + 0x5]\n 53406: a4 = u8 [a0 + 0x4]\n 53409: a5 = u8 [a0 + 0x6]\n 53412: s1 = u8 [a0 + 0x7]\n 53415: a3 = a3 << 0x8\n 53418: a3 = a3 | a4\n 53421: a5 = a5 << 0x10\n 53424: s1 = s1 << 0x18\n 53427: a5 = a5 | s1\n 53430: a3 = a3 | a5\n 53433: a3 = a3 << 0x20\n 53436: a2 = a2 | a3\n 53439: a3 = u8 [a0 + 0x19]\n 53442: a4 = u8 [a0 + 0x18]\n 53445: a5 = u8 [a0 + 0x1a]\n 53448: s1 = u8 [a0 + 0x1b]\n 53451: a3 = a3 << 0x8\n 53454: a3 = a3 | a4\n 53457: a5 = a5 << 0x10\n 53460: s1 = s1 << 0x18\n 53463: a5 = a5 | s1\n 53466: a3 = a3 | a5\n 53469: a4 = u8 [a0 + 0x1d]\n 53472: a5 = u8 [a0 + 0x1c]\n 53475: s1 = u8 [a0 + 0x1e]\n 53478: a1 = u8 [a0 + 0x1f]\n 53481: a4 = a4 << 0x8\n 53484: a4 = a4 | a5\n 53487: s1 = s1 << 0x10\n 53490: a1 = a1 << 0x18\n 53493: a1 = a1 | s1\n 53496: a1 = a1 | a4\n 53499: a1 = a1 << 0x20\n 53502: a3 = a3 | a1\n 53505: a1 = u8 [a0 + 0x9]\n 53508: a4 = u8 [a0 + 0x8]\n 53511: a5 = u8 [a0 + 0xa]\n 53514: s1 = u8 [a0 + 0xb]\n 53517: a1 = a1 << 0x8\n 53520: a1 = a1 | a4\n 53523: a5 = a5 << 0x10\n 53526: s1 = s1 << 0x18\n 53529: a5 = a5 | s1\n 53532: a1 = a1 | a5\n 53535: a4 = u8 [a0 + 0xd]\n 53538: a5 = u8 [a0 + 0xc]\n 53541: s1 = u8 [a0 + 0xe]\n 53544: a0 = u8 [a0 + 0xf]\n 53547: a4 = a4 << 0x8\n 53550: a4 = a4 | a5\n 53553: s1 = s1 << 0x10\n 53556: a0 = a0 << 0x18\n 53559: a0 = a0 | s1\n 53562: a0 = a0 | a4\n 53565: a0 = a0 << 0x20\n 53568: a0 = a0 | a1\n 53571: s1 = reverse a0\n 53573: a1 = reverse a3\n 53575: a2 = reverse a2\n 53577: a0 = reverse t0\n 53579: u64 [sp + 0x158] = a0\n 53583: u64 [sp + 0x150] = a2\n 53587: a0 = a0 | a2\n 53590: a2 = a1\n 53592: a1 = a1 | s1\n 53595: a1 = a1 | a0\n 53598: a1 = a1 >> 0x20\n 53601: a0 = a0 | s1\n 53604: a0 = a0 << 0x20\n 53607: a0 = a0 | a1\n 53610: jump @727 if a0 != 0\n      : @724 (gas: 5)\n 53614: u64 [sp + 0x148] = a2\n 53618: i32 a0 = a2 + 0\n 53620: a1 = 0x20\n 53623: u64 [sp + 0x140] = a0\n 53627: ra = 672, jump @0\n      : @725 [@dyn 336] (gas: 50)\n 53634: u8 [a0 + 31] = 0\n 53637: u8 [a0 + 30] = 0\n 53640: u8 [a0 + 29] = 0\n 53643: u8 [a0 + 28] = 0\n 53646: u8 [a0 + 27] = 0\n 53649: u8 [a0 + 26] = 0\n 53652: u8 [a0 + 25] = 0\n 53655: u8 [a0 + 24] = 0\n 53658: u8 [a0 + 23] = 0\n 53661: u8 [a0 + 22] = 0\n 53664: u8 [a0 + 21] = 0\n 53667: u8 [a0 + 20] = 0\n 53670: u8 [a0 + 19] = 0\n 53673: u8 [a0 + 18] = 0\n 53676: u8 [a0 + 17] = 0\n 53679: u8 [a0 + 16] = 0\n 53682: u8 [a0 + 15] = 0\n 53685: u8 [a0 + 14] = 0\n 53688: u8 [a0 + 13] = 0\n 53691: u8 [a0 + 12] = 0\n 53694: u8 [a0 + 11] = 0\n 53697: u8 [a0 + 10] = 0\n 53700: u8 [a0 + 9] = 0\n 53703: u8 [a0 + 8] = 0\n 53706: u8 [a0 + 7] = 0\n 53709: u8 [a0 + 6] = 0\n 53712: u8 [a0 + 5] = 0\n 53715: u8 [a0 + 4] = 0\n 53718: u8 [a0 + 3] = 0xa0\n 53723: u8 [a0 + 2] = 0x79\n 53727: u8 [a0 + 1] = 0xc3\n 53732: u8 [a0 + 0] = 0x8\n 53735: a1 = u64 [sp + 0x148]\n 53739: a0 = a1 + 0x4\n 53742: a1 = a0 <u a1\n 53745: a3 = u64 [sp + 0x158]\n 53749: a2 = a3 + a1\n 53752: a3 = a2 <u a3\n 53755: a3 = a1 if a1 == 0\n 53758: a3 = a3 + s1\n 53761: a1 = a3 <u s1\n 53764: a4 = u64 [sp + 0x150]\n 53768: a4 = a4 + a1\n 53771: u64 [sp + 0x168] = a2\n 53775: u64 [sp + 0x160] = a0\n 53779: u64 [sp + 0x170] = a3\n 53783: a0 = sp + 0x180\n 53787: a1 = sp + 0x160\n 53791: u64 [sp + 0x178] = a4\n 53795: ra = 674, jump @692\n      : @726 [@dyn 337] (gas: 30)\n 53801: a0 = u64 [sp + 0x188]\n 53805: t0 = u64 [sp + 0x198]\n 53809: t1 = u64 [sp + 0x180]\n 53813: a3 = u64 [sp + 0x190]\n 53817: a1 = u64 [sp + 0x158]\n 53821: a4 = a0 ^ a1\n 53824: a5 = a0 <u a1\n 53827: t2 = a1\n 53829: a2 = u64 [sp + 0x148]\n 53833: a1 = t1 <u a2\n 53836: a5 = a1 if a4 == 0\n 53839: a4 = a3 - s1\n 53842: a3 = a3 <u s1\n 53845: s1 = u64 [sp + 0x150]\n 53849: s1 = t0 - s1\n 53852: s1 = s1 - a3\n 53855: a3 = a4 <u a5\n 53858: s1 = s1 - a3\n 53861: a4 = a4 - a5\n 53864: a0 = a0 - t2\n 53867: a1 = a0 - a1\n 53870: a0 = t1 - a2\n 53873: a1 = a1 | s1\n 53876: a2 = a0 | a4\n 53879: a2 = a2 | a1\n 53882: a1 = a1 | a4\n 53885: a2 = a2 >> 0x20\n 53888: a1 = a1 << 0x20\n 53891: a1 = a1 | a2\n 53894: jump @732 if a1 == 0\n      : @727 (gas: 1)\n 53897: trap\n      : @728 (gas: 8)\n 53898: u64 [sp + 464] = 0\n 53902: u64 [sp + 456] = 0\n 53906: u64 [sp + 448] = 0\n 53910: a0 = 0x4e487b7100000000\n 53920: a1 = sp + 0x1c0\n 53924: u64 [sp + 0x1d8] = a0\n 53928: a0 = 0\n 53930: ra = 676, jump @23\n      : @729 [@dyn 338] (gas: 7)\n 53937: u64 [sp + 440] = 0\n 53941: u64 [sp + 432] = 0\n 53945: u64 [sp + 416] = 0x11\n 53950: a0 = 0x4\n 53953: a1 = sp + 0x1a0\n 53957: u64 [sp + 424] = 0\n 53961: ra = 678, jump @23\n      : @730 [@dyn 339] (gas: 3)\n 53968: a1 = 0x24\n 53971: a0 = 0\n 53973: ra = 680, jump @0\n      : @731 [@dyn 340] (gas: 5)\n 53980: i32 a1 = a0 + 0\n 53982: a0 = 0x1\n 53985: a2 = 0x24\n 53988: ecalli 12 // 'seal_return'\n 53990: fallthrough\n      : @732 (gas: 4)\n 53991: i32 s1 = a0 + 0\n 53993: a0 = u64 [sp + 0x140]\n 53997: a1 = s1\n 53999: ra = 682, jump @0\n      : @733 [@dyn 341] (gas: 6)\n 54006: i32 a1 = a0 + 0\n 54008: a0 = 0x1\n 54011: a2 = s1\n 54013: ra = 0x2ac\n 54017: ecalli 12 // 'seal_return'\n 54019: fallthrough\n      : @734 [@dyn 342] (gas: 24)\n 54020: sp = sp + 0xffffffffffffffb0\n 54023: u64 [sp + 0x48] = ra\n 54026: u64 [sp + 0x40] = s0\n 54029: s0 = sp + 0x50\n 54032: sp = sp & 0xfffffffffffffff0\n 54035: t0 = u64 [a0]\n 54037: t1 = u64 [a0 + 0x8]\n 54040: a4 = u64 [a0 + 0x10]\n 54043: a0 = u64 [a0 + 0x18]\n 54046: a5 = u64 [a1]\n 54048: a2 = u64 [a1 + 0x8]\n 54051: a3 = u64 [a1 + 0x10]\n 54054: a1 = u64 [a1 + 0x18]\n 54057: u64 [sp + 0x18] = a1\n 54060: u64 [sp + 0x10] = a3\n 54063: u64 [sp + 0x8] = a2\n 54066: u64 [sp] = a5\n 54068: u64 [sp + 0x38] = a0\n 54071: u64 [sp + 0x30] = a4\n 54074: u64 [sp + 0x28] = t1\n 54077: a0 = sp + 0x20\n 54080: a1 = sp\n 54082: u64 [sp + 0x20] = t0\n 54085: ra = 686, jump @671\n      : @735 [@dyn 343] (gas: 5)\n 54091: sp = s0 + 0xffffffffffffffb0\n 54094: ra = u64 [sp + 0x48]\n 54097: s0 = u64 [sp + 0x40]\n 54100: sp = sp + 0x50\n 54103: ret\n      : @736 (gas: 66)\n 54105: sp = sp + 0xfffffffffffffde0\n 54109: u64 [sp + 0x218] = ra\n 54113: u64 [sp + 0x210] = s0\n 54117: u64 [sp + 0x208] = s1\n 54121: s0 = sp + 0x220\n 54125: sp = sp & 0xffffffffffffffe0\n 54128: a5 = u64 [a4 + 0x18]\n 54131: u64 [sp + 0x88] = a5\n 54135: a5 = u64 [a4 + 0x10]\n 54138: u64 [sp + 0x68] = a5\n 54141: a5 = u64 [a4 + 0x8]\n 54144: u64 [sp + 0x48] = a5\n 54147: a4 = u64 [a4]\n 54149: u64 [sp + 0x28] = a4\n 54152: a4 = u64 [a3 + 0x18]\n 54155: u64 [sp + 0x80] = a4\n 54159: a4 = u64 [a3 + 0x10]\n 54162: u64 [sp + 0x58] = a4\n 54165: a4 = u64 [a3 + 0x8]\n 54168: u64 [sp + 0x38] = a4\n 54171: a3 = u64 [a3]\n 54173: u64 [sp + 0x18] = a3\n 54176: a3 = u64 [a2 + 0x18]\n 54179: u64 [sp + 0x70] = a3\n 54182: a3 = u64 [a2 + 0x10]\n 54185: u64 [sp + 0x50] = a3\n 54188: a3 = u64 [a2 + 0x8]\n 54191: u64 [sp + 0x30] = a3\n 54194: a2 = u64 [a2]\n 54196: u64 [sp + 0x10] = a2\n 54199: a2 = u64 [a1 + 0x18]\n 54202: u64 [sp + 0x60] = a2\n 54205: a2 = u64 [a1 + 0x10]\n 54208: u64 [sp + 0x40] = a2\n 54211: a2 = u64 [a1 + 0x8]\n 54214: u64 [sp + 0x20] = a2\n 54217: a1 = u64 [a1]\n 54219: u64 [sp + 0x8] = a1\n 54222: a1 = u64 [a0]\n 54224: u64 [sp + 0xb0] = a1\n 54228: a1 = u64 [a0 + 0x8]\n 54231: u64 [sp + 0xb8] = a1\n 54235: a1 = u64 [a0 + 0x10]\n 54238: u64 [sp + 0x90] = a1\n 54242: s1 = u64 [a0 + 0x18]\n 54245: i32 a0 = sp + 0x1a0\n 54249: ecalli 5 // 'caller'\n 54251: a0 = u64 [sp + 0x1a8]\n 54255: a1 = u64 [sp + 0x1a0]\n 54259: a2 = i32 [sp + 0x1b0]\n 54263: a0 = reverse a0\n 54265: a3 = a0 >> 0x20\n 54268: a1 = reverse a1\n 54270: a4 = a1 << 0x20\n 54273: a3 = a3 | a4\n 54276: u64 [sp + 0xa8] = a3\n 54280: a0 = a0 << 0x20\n 54283: a2 = reverse a2\n 54285: a2 = a2 >> 0x20\n 54288: a0 = a0 | a2\n 54291: u64 [sp + 0xa0] = a0\n 54295: a1 = a1 >> 0x20\n 54298: u64 [sp + 0x98] = a1\n 54302: a1 = 0x20\n 54305: a0 = 0\n 54307: ra = 688, jump @0\n      : @737 [@dyn 344] (gas: 71)\n 54314: u64 [sp + 0x78] = s1\n 54317: a1 = reverse s1\n 54319: s1 = u64 [sp + 0x90]\n 54323: a2 = reverse s1\n 54325: a3 = u64 [sp + 0xb8]\n 54329: a3 = reverse a3\n 54331: a4 = u64 [sp + 0xb0]\n 54335: a4 = reverse a4\n 54337: a5 = a4 >> 0x38\n 54340: u8 [a0 + 0x1f] = a5\n 54343: a5 = a4 >> 0x30\n 54346: u8 [a0 + 0x1e] = a5\n 54349: a5 = a4 >> 0x28\n 54352: u8 [a0 + 0x1d] = a5\n 54355: a5 = a4 >> 0x20\n 54358: u8 [a0 + 0x1c] = a5\n 54361: a5 = a4 >> 0x18\n 54364: u8 [a0 + 0x1b] = a5\n 54367: a5 = a4 >> 0x10\n 54370: u8 [a0 + 0x1a] = a5\n 54373: a5 = a4 >> 0x8\n 54376: u8 [a0 + 0x19] = a5\n 54379: u8 [a0 + 0x18] = a4\n 54382: a4 = a3 >> 0x38\n 54385: u8 [a0 + 0x17] = a4\n 54388: a4 = a3 >> 0x30\n 54391: u8 [a0 + 0x16] = a4\n 54394: a4 = a3 >> 0x28\n 54397: u8 [a0 + 0x15] = a4\n 54400: a4 = a3 >> 0x20\n 54403: u8 [a0 + 0x14] = a4\n 54406: a4 = a3 >> 0x18\n 54409: u8 [a0 + 0x13] = a4\n 54412: a4 = a3 >> 0x10\n 54415: u8 [a0 + 0x12] = a4\n 54418: a4 = a3 >> 0x8\n 54421: u8 [a0 + 0x11] = a4\n 54424: u8 [a0 + 0x10] = a3\n 54427: a3 = a2 >> 0x38\n 54430: u8 [a0 + 0xf] = a3\n 54433: a3 = a2 >> 0x30\n 54436: u8 [a0 + 0xe] = a3\n 54439: a3 = a2 >> 0x28\n 54442: u8 [a0 + 0xd] = a3\n 54445: a3 = a2 >> 0x20\n 54448: u8 [a0 + 0xc] = a3\n 54451: a3 = a2 >> 0x18\n 54454: u8 [a0 + 0xb] = a3\n 54457: a3 = a2 >> 0x10\n 54460: u8 [a0 + 0xa] = a3\n 54463: a3 = a2 >> 0x8\n 54466: u8 [a0 + 0x9] = a3\n 54469: u8 [a0 + 0x8] = a2\n 54472: a2 = a1 >> 0x38\n 54475: u8 [a0 + 0x7] = a2\n 54478: a2 = a1 >> 0x30\n 54481: u8 [a0 + 0x6] = a2\n 54484: a2 = a1 >> 0x28\n 54487: u8 [a0 + 0x5] = a2\n 54490: a2 = a1 >> 0x20\n 54493: u8 [a0 + 0x4] = a2\n 54496: a2 = a1 >> 0x18\n 54499: u8 [a0 + 0x3] = a2\n 54502: a2 = a1 >> 0x10\n 54505: u8 [a0 + 0x2] = a2\n 54508: a2 = a1 >> 0x8\n 54511: u8 [a0 + 0x1] = a2\n 54514: u8 [a0] = a1\n 54516: a0 = 0x20\n 54519: a1 = 0x20\n 54522: ra = 690, jump @0\n      : @738 [@dyn 345] (gas: 35)\n 54529: u8 [a0 + 31] = 0\n 54532: u8 [a0 + 30] = 0\n 54535: u8 [a0 + 29] = 0\n 54538: u8 [a0 + 28] = 0\n 54541: u8 [a0 + 27] = 0\n 54544: u8 [a0 + 26] = 0\n 54547: u8 [a0 + 25] = 0\n 54550: u8 [a0 + 24] = 0\n 54553: u8 [a0 + 23] = 0\n 54556: u8 [a0 + 22] = 0\n 54559: u8 [a0 + 21] = 0\n 54562: u8 [a0 + 20] = 0\n 54565: u8 [a0 + 19] = 0\n 54568: u8 [a0 + 18] = 0\n 54571: u8 [a0 + 17] = 0\n 54574: u8 [a0 + 16] = 0\n 54577: u8 [a0 + 15] = 0\n 54580: u8 [a0 + 14] = 0\n 54583: u8 [a0 + 13] = 0\n 54586: u8 [a0 + 12] = 0\n 54589: u8 [a0 + 11] = 0\n 54592: u8 [a0 + 10] = 0\n 54595: u8 [a0 + 9] = 0\n 54598: u8 [a0 + 8] = 0\n 54601: u8 [a0 + 7] = 0\n 54604: u8 [a0 + 6] = 0\n 54607: u8 [a0 + 5] = 0\n 54610: u8 [a0 + 4] = 0\n 54613: u8 [a0 + 3] = 0\n 54616: u8 [a0 + 2] = 0\n 54619: u8 [a0 + 1] = 0\n 54622: u8 [a0 + 0] = 0\n 54624: a1 = 0x40\n 54627: a0 = 0\n 54629: ra = 692, jump @0\n      : @739 [@dyn 346] (gas: 28)\n 54636: i32 a0 = a0 + 0\n 54638: i32 a2 = sp + 0x1e0\n 54642: a1 = 0x40\n 54645: ecalli 8 // 'hash_keccak_256'\n 54647: a0 = u64 [sp + 0x1f8]\n 54651: a1 = u64 [sp + 0x1f0]\n 54655: a2 = u64 [sp + 0x1e8]\n 54659: a3 = u64 [sp + 0x1e0]\n 54663: a0 = reverse a0\n 54665: a1 = reverse a1\n 54667: a2 = reverse a2\n 54669: a3 = reverse a3\n 54671: u64 [sp + 0x1d8] = a3\n 54675: u64 [sp + 0x1d0] = a2\n 54679: u64 [sp + 0x1c8] = a1\n 54683: u64 [sp + 0x1c0] = a0\n 54687: u64 [sp + 504] = 0\n 54691: u64 [sp + 496] = 0\n 54695: u64 [sp + 488] = 0\n 54699: u64 [sp + 480] = 0\n 54703: u32 [sp + 512] = 0x20\n 54708: i32 a1 = sp + 0x1c0\n 54712: i32 a3 = sp + 0x1e0\n 54716: i32 a4 = sp + 0x200\n 54720: a2 = 0xffffffffffffffff\n 54723: a0 = 0\n 54725: ecalli 7 // 'get_storage'\n 54727: fallthrough\n      : @740 (gas: 12)\n 54728: a0 = u32 [sp + 0x1f0]\n 54732: a1 = u64 [sp + 0x1e0]\n 54736: a2 = u64 [sp + 0x1e8]\n 54740: a3 = u64 [sp + 0x98]\n 54744: a0 = a0 ^ a3\n 54747: a3 = u64 [sp + 0xa0]\n 54751: a1 = a1 ^ a3\n 54754: a0 = a0 | a1\n 54757: a1 = u64 [sp + 0xa8]\n 54761: a1 = a1 ^ a2\n 54764: a0 = a0 | a1\n 54767: jump @743 if a0 != 0\n      : @741 (gas: 45)\n 54771: a0 = u64 [sp + 0x28]\n 54774: u64 [sp + 0xc0] = a0\n 54778: a0 = u64 [sp + 0x18]\n 54781: u64 [sp + 0xe0] = a0\n 54785: a0 = u64 [sp + 0x10]\n 54788: u64 [sp + 0x100] = a0\n 54792: a0 = u64 [sp + 0x8]\n 54795: u64 [sp + 0x120] = a0\n 54799: a0 = u64 [sp + 0xb0]\n 54803: u64 [sp + 0x140] = a0\n 54807: a0 = u64 [sp + 0x48]\n 54810: u64 [sp + 0xc8] = a0\n 54814: a0 = u64 [sp + 0x38]\n 54817: u64 [sp + 0xe8] = a0\n 54821: a0 = u64 [sp + 0x30]\n 54824: u64 [sp + 0x108] = a0\n 54828: a0 = u64 [sp + 0x20]\n 54831: u64 [sp + 0x128] = a0\n 54835: a0 = u64 [sp + 0xb8]\n 54839: u64 [sp + 0x148] = a0\n 54843: a0 = u64 [sp + 0x68]\n 54846: u64 [sp + 0xd0] = a0\n 54850: a0 = u64 [sp + 0x58]\n 54853: u64 [sp + 0xf0] = a0\n 54857: a0 = u64 [sp + 0x50]\n 54860: u64 [sp + 0x110] = a0\n 54864: a0 = u64 [sp + 0x40]\n 54867: u64 [sp + 0x130] = a0\n 54871: u64 [sp + 0x150] = s1\n 54875: a0 = u64 [sp + 0x88]\n 54879: u64 [sp + 0xd8] = a0\n 54883: a0 = u64 [sp + 0x80]\n 54887: u64 [sp + 0xf8] = a0\n 54891: a0 = u64 [sp + 0x70]\n 54894: u64 [sp + 0x118] = a0\n 54898: a0 = u64 [sp + 0x60]\n 54901: u64 [sp + 0x138] = a0\n 54905: a0 = sp + 0x140\n 54909: a1 = sp + 0x120\n 54913: a2 = sp + 0x100\n 54917: a3 = sp + 0xe0\n 54921: a4 = sp + 0xc0\n 54925: a5 = u64 [sp + 0x78]\n 54928: u64 [sp + 0x158] = a5\n 54932: ra = 694, jump @826\n      : @742 [@dyn 347] (gas: 6)\n 54938: sp = s0 + 0xfffffffffffffde0\n 54942: ra = u64 [sp + 0x218]\n 54946: s0 = u64 [sp + 0x210]\n 54950: s1 = u64 [sp + 0x208]\n 54954: sp = sp + 0x220\n 54958: ret\n      : @743 (gas: 3)\n 54960: a0 = 0x40\n 54963: a1 = 0x20\n 54966: ra = 696, jump @0\n      : @744 [@dyn 348] (gas: 103)\n 54973: a1 = u8 [a0 + 0x11]\n 54976: a2 = u8 [a0 + 0x10]\n 54979: a3 = u8 [a0 + 0x12]\n 54982: a4 = u8 [a0 + 0x13]\n 54985: a1 = a1 << 0x8\n 54988: a1 = a1 | a2\n 54991: a3 = a3 << 0x10\n 54994: a4 = a4 << 0x18\n 54997: a3 = a3 | a4\n 55000: a1 = a1 | a3\n 55003: a2 = u8 [a0 + 0x15]\n 55006: a3 = u8 [a0 + 0x14]\n 55009: a4 = u8 [a0 + 0x16]\n 55012: a5 = u8 [a0 + 0x17]\n 55015: a2 = a2 << 0x8\n 55018: a2 = a2 | a3\n 55021: a4 = a4 << 0x10\n 55024: a5 = a5 << 0x18\n 55027: a4 = a4 | a5\n 55030: a2 = a2 | a4\n 55033: a2 = a2 << 0x20\n 55036: t0 = a2 | a1\n 55039: a2 = u8 [a0 + 0x1]\n 55042: a3 = u8 [a0]\n 55044: a4 = u8 [a0 + 0x2]\n 55047: a5 = u8 [a0 + 0x3]\n 55050: a2 = a2 << 0x8\n 55053: a2 = a2 | a3\n 55056: a4 = a4 << 0x10\n 55059: a5 = a5 << 0x18\n 55062: a4 = a4 | a5\n 55065: a2 = a2 | a4\n 55068: a3 = u8 [a0 + 0x5]\n 55071: a4 = u8 [a0 + 0x4]\n 55074: a5 = u8 [a0 + 0x6]\n 55077: s1 = u8 [a0 + 0x7]\n 55080: a3 = a3 << 0x8\n 55083: a3 = a3 | a4\n 55086: a5 = a5 << 0x10\n 55089: s1 = s1 << 0x18\n 55092: a5 = a5 | s1\n 55095: a3 = a3 | a5\n 55098: a3 = a3 << 0x20\n 55101: a2 = a2 | a3\n 55104: a3 = u8 [a0 + 0x19]\n 55107: a4 = u8 [a0 + 0x18]\n 55110: a5 = u8 [a0 + 0x1a]\n 55113: s1 = u8 [a0 + 0x1b]\n 55116: a3 = a3 << 0x8\n 55119: a3 = a3 | a4\n 55122: a5 = a5 << 0x10\n 55125: s1 = s1 << 0x18\n 55128: a5 = a5 | s1\n 55131: a3 = a3 | a5\n 55134: a4 = u8 [a0 + 0x1d]\n 55137: a5 = u8 [a0 + 0x1c]\n 55140: s1 = u8 [a0 + 0x1e]\n 55143: a1 = u8 [a0 + 0x1f]\n 55146: a4 = a4 << 0x8\n 55149: a4 = a4 | a5\n 55152: s1 = s1 << 0x10\n 55155: a1 = a1 << 0x18\n 55158: a1 = a1 | s1\n 55161: a1 = a1 | a4\n 55164: a1 = a1 << 0x20\n 55167: a3 = a3 | a1\n 55170: a1 = u8 [a0 + 0x9]\n 55173: a4 = u8 [a0 + 0x8]\n 55176: a5 = u8 [a0 + 0xa]\n 55179: s1 = u8 [a0 + 0xb]\n 55182: a1 = a1 << 0x8\n 55185: a1 = a1 | a4\n 55188: a5 = a5 << 0x10\n 55191: s1 = s1 << 0x18\n 55194: a5 = a5 | s1\n 55197: a1 = a1 | a5\n 55200: a4 = u8 [a0 + 0xd]\n 55203: a5 = u8 [a0 + 0xc]\n 55206: s1 = u8 [a0 + 0xe]\n 55209: a0 = u8 [a0 + 0xf]\n 55212: a4 = a4 << 0x8\n 55215: a4 = a4 | a5\n 55218: s1 = s1 << 0x10\n 55221: a0 = a0 << 0x18\n 55224: a0 = a0 | s1\n 55227: a0 = a0 | a4\n 55230: a0 = a0 << 0x20\n 55233: a0 = a0 | a1\n 55236: s1 = reverse a0\n 55238: a1 = reverse a3\n 55240: a2 = reverse a2\n 55242: a0 = reverse t0\n 55244: u64 [sp + 0xb8] = a0\n 55248: u64 [sp + 0xb0] = a2\n 55252: a0 = a0 | a2\n 55255: a2 = a1\n 55257: a1 = a1 | s1\n 55260: a1 = a1 | a0\n 55263: a1 = a1 >> 0x20\n 55266: a0 = a0 | s1\n 55269: a0 = a0 << 0x20\n 55272: a0 = a0 | a1\n 55275: jump @748 if a0 != 0\n      : @745 (gas: 5)\n 55279: u64 [sp + 0xa8] = a2\n 55283: i32 a0 = a2 + 0\n 55285: a1 = 0x20\n 55288: u64 [sp + 0xa0] = a0\n 55292: ra = 698, jump @0\n      : @746 [@dyn 349] (gas: 50)\n 55299: u8 [a0 + 31] = 0\n 55302: u8 [a0 + 30] = 0\n 55305: u8 [a0 + 29] = 0\n 55308: u8 [a0 + 28] = 0\n 55311: u8 [a0 + 27] = 0\n 55314: u8 [a0 + 26] = 0\n 55317: u8 [a0 + 25] = 0\n 55320: u8 [a0 + 24] = 0\n 55323: u8 [a0 + 23] = 0\n 55326: u8 [a0 + 22] = 0\n 55329: u8 [a0 + 21] = 0\n 55332: u8 [a0 + 20] = 0\n 55335: u8 [a0 + 19] = 0\n 55338: u8 [a0 + 18] = 0\n 55341: u8 [a0 + 17] = 0\n 55344: u8 [a0 + 16] = 0\n 55347: u8 [a0 + 15] = 0\n 55350: u8 [a0 + 14] = 0\n 55353: u8 [a0 + 13] = 0\n 55356: u8 [a0 + 12] = 0\n 55359: u8 [a0 + 11] = 0\n 55362: u8 [a0 + 10] = 0\n 55365: u8 [a0 + 9] = 0\n 55368: u8 [a0 + 8] = 0\n 55371: u8 [a0 + 7] = 0\n 55374: u8 [a0 + 6] = 0\n 55377: u8 [a0 + 5] = 0\n 55380: u8 [a0 + 4] = 0\n 55383: u8 [a0 + 3] = 0xa0\n 55388: u8 [a0 + 2] = 0x79\n 55392: u8 [a0 + 1] = 0xc3\n 55397: u8 [a0 + 0] = 0x8\n 55400: a1 = u64 [sp + 0xa8]\n 55404: a0 = a1 + 0x4\n 55407: a1 = a0 <u a1\n 55410: a3 = u64 [sp + 0xb8]\n 55414: a2 = a3 + a1\n 55417: a3 = a2 <u a3\n 55420: a3 = a1 if a1 == 0\n 55423: a3 = a3 + s1\n 55426: a1 = a3 <u s1\n 55429: a4 = u64 [sp + 0xb0]\n 55433: a4 = a4 + a1\n 55436: u64 [sp + 0x168] = a2\n 55440: u64 [sp + 0x160] = a0\n 55444: u64 [sp + 0x170] = a3\n 55448: a0 = sp + 0x180\n 55452: a1 = sp + 0x160\n 55456: u64 [sp + 0x178] = a4\n 55460: ra = 700, jump @530\n      : @747 [@dyn 350] (gas: 30)\n 55466: a0 = u64 [sp + 0x188]\n 55470: t0 = u64 [sp + 0x198]\n 55474: t1 = u64 [sp + 0x180]\n 55478: a3 = u64 [sp + 0x190]\n 55482: a1 = u64 [sp + 0xb8]\n 55486: a4 = a0 ^ a1\n 55489: a5 = a0 <u a1\n 55492: t2 = a1\n 55494: a2 = u64 [sp + 0xa8]\n 55498: a1 = t1 <u a2\n 55501: a5 = a1 if a4 == 0\n 55504: a4 = a3 - s1\n 55507: a3 = a3 <u s1\n 55510: s1 = u64 [sp + 0xb0]\n 55514: s1 = t0 - s1\n 55517: s1 = s1 - a3\n 55520: a3 = a4 <u a5\n 55523: s1 = s1 - a3\n 55526: a4 = a4 - a5\n 55529: a0 = a0 - t2\n 55532: a1 = a0 - a1\n 55535: a0 = t1 - a2\n 55538: a1 = a1 | s1\n 55541: a2 = a0 | a4\n 55544: a2 = a2 | a1\n 55547: a1 = a1 | a4\n 55550: a2 = a2 >> 0x20\n 55553: a1 = a1 << 0x20\n 55556: a1 = a1 | a2\n 55559: jump @749 if a1 == 0\n      : @748 (gas: 1)\n 55562: trap\n      : @749 (gas: 4)\n 55563: i32 s1 = a0 + 0\n 55565: a0 = u64 [sp + 0xa0]\n 55569: a1 = s1\n 55571: ra = 702, jump @0\n      : @750 [@dyn 351] (gas: 6)\n 55578: i32 a1 = a0 + 0\n 55580: a0 = 0x1\n 55583: a2 = s1\n 55585: ra = 0x2c0\n 55589: ecalli 12 // 'seal_return'\n 55591: fallthrough\n      : @751 [@dyn 352] (gas: 17)\n 55592: t0 = u64 [a1]\n 55594: t1 = u64 [a1 + 0x8]\n 55597: t2 = u64 [a1 + 0x10]\n 55600: a1 = u64 [a1 + 0x18]\n 55603: a3 = u64 [a2 + 0x18]\n 55606: a4 = u64 [a2 + 0x10]\n 55609: a5 = u64 [a2 + 0x8]\n 55612: a2 = u64 [a2]\n 55614: u64 [a0 + 0x38] = a3\n 55617: u64 [a0 + 0x30] = a4\n 55620: u64 [a0 + 0x28] = a5\n 55623: u64 [a0 + 0x20] = a2\n 55626: u64 [a0 + 0x18] = a1\n 55629: u64 [a0 + 0x10] = t2\n 55632: u64 [a0 + 0x8] = t1\n 55635: u64 [a0] = t0\n 55637: ret\n      : @752 (gas: 17)\n 55639: sp = sp + 0xffffffffffffffa0\n 55642: u64 [sp + 0x58] = ra\n 55645: u64 [sp + 0x50] = s0\n 55648: u64 [sp + 0x48] = s1\n 55651: a3 = u64 [a1 + 0x18]\n 55654: a4 = u64 [a1 + 0x10]\n 55657: a5 = u64 [a1 + 0x8]\n 55660: s1 = u64 [a1]\n 55662: a1 = a5 | a3\n 55665: a2 = s1 | a4\n 55668: a2 = a2 | a1\n 55671: a2 = a2 >> 0x20\n 55674: a1 = a1 | a4\n 55677: a1 = a1 << 0x20\n 55680: a1 = a1 | a2\n 55683: u64 [sp + 0x28] = a0\n 55686: jump @759 if a1 != 0\n      : @753 (gas: 19)\n 55690: a0 = s1 + 0x20\n 55693: u64 [sp + 0x30] = a0\n 55696: a0 = a0 <u s1\n 55699: a1 = a5 + a0\n 55702: u64 [sp + 0x40] = a1\n 55705: u64 [sp + 0x8] = a5\n 55708: s0 = a1 <u a5\n 55711: s0 = a0 if a0 == 0\n 55714: s0 = s0 + a4\n 55717: u64 [sp + 0x10] = a4\n 55720: a0 = s0 <u a4\n 55723: u64 [sp + 0x18] = a3\n 55726: a0 = a0 + a3\n 55729: u64 [sp + 0x38] = a0\n 55732: u64 [sp] = s1\n 55734: i32 a0 = s1 + 0\n 55736: a1 = 0x20\n 55739: s1 = 0x20\n 55742: ra = 706, jump @0\n      : @754 [@dyn 353] (gas: 45)\n 55749: u8 [a0 + 0x1f] = s1\n 55752: a1 = u64 [sp + 0x30]\n 55755: s1 = a1\n 55757: a1 = a1 | s0\n 55760: a2 = u64 [sp + 0x40]\n 55763: a4 = u64 [sp + 0x38]\n 55766: a2 = a2 | a4\n 55769: a1 = a1 | a2\n 55772: a1 = a1 >> 0x20\n 55775: u64 [sp + 0x20] = s0\n 55778: a2 = a2 | s0\n 55781: a2 = a2 << 0x20\n 55784: a1 = a1 | a2\n 55787: u8 [a0 + 30] = 0\n 55790: u8 [a0 + 29] = 0\n 55793: u8 [a0 + 28] = 0\n 55796: u8 [a0 + 27] = 0\n 55799: u8 [a0 + 26] = 0\n 55802: u8 [a0 + 25] = 0\n 55805: u8 [a0 + 24] = 0\n 55808: u8 [a0 + 23] = 0\n 55811: u8 [a0 + 22] = 0\n 55814: u8 [a0 + 21] = 0\n 55817: u8 [a0 + 20] = 0\n 55820: u8 [a0 + 19] = 0\n 55823: u8 [a0 + 18] = 0\n 55826: u8 [a0 + 17] = 0\n 55829: u8 [a0 + 16] = 0\n 55832: u8 [a0 + 15] = 0\n 55835: u8 [a0 + 14] = 0\n 55838: u8 [a0 + 13] = 0\n 55841: u8 [a0 + 12] = 0\n 55844: u8 [a0 + 11] = 0\n 55847: u8 [a0 + 10] = 0\n 55850: u8 [a0 + 9] = 0\n 55853: u8 [a0 + 8] = 0\n 55856: u8 [a0 + 7] = 0\n 55859: u8 [a0 + 6] = 0\n 55862: u8 [a0 + 5] = 0\n 55865: u8 [a0 + 4] = 0\n 55868: u8 [a0 + 3] = 0\n 55871: u8 [a0 + 2] = 0\n 55874: u8 [a0 + 1] = 0\n 55877: u8 [a0 + 0] = 0\n 55879: jump @759 if a1 != 0\n      : @755 (gas: 4)\n 55883: i32 s0 = s1 + 0\n 55885: a1 = 0x20\n 55888: a0 = s0\n 55890: ra = 708, jump @0\n      : @756 [@dyn 354] (gas: 41)\n 55897: u8 [a0 + 31] = 0x1f\n 55901: u8 [a0 + 30] = 0\n 55904: u8 [a0 + 29] = 0\n 55907: u8 [a0 + 28] = 0\n 55910: u8 [a0 + 27] = 0\n 55913: u8 [a0 + 26] = 0\n 55916: u8 [a0 + 25] = 0\n 55919: u8 [a0 + 24] = 0\n 55922: u8 [a0 + 23] = 0\n 55925: u8 [a0 + 22] = 0\n 55928: u8 [a0 + 21] = 0\n 55931: u8 [a0 + 20] = 0\n 55934: u8 [a0 + 19] = 0\n 55937: u8 [a0 + 18] = 0\n 55940: u8 [a0 + 17] = 0\n 55943: u8 [a0 + 16] = 0\n 55946: u8 [a0 + 15] = 0\n 55949: u8 [a0 + 14] = 0\n 55952: u8 [a0 + 13] = 0\n 55955: u8 [a0 + 12] = 0\n 55958: u8 [a0 + 11] = 0\n 55961: u8 [a0 + 10] = 0\n 55964: u8 [a0 + 9] = 0\n 55967: u8 [a0 + 8] = 0\n 55970: u8 [a0 + 7] = 0\n 55973: u8 [a0 + 6] = 0\n 55976: u8 [a0 + 5] = 0\n 55979: u8 [a0 + 4] = 0\n 55982: u8 [a0 + 3] = 0\n 55985: u8 [a0 + 2] = 0\n 55988: u8 [a0 + 1] = 0\n 55991: a1 = u64 [sp + 0x20]\n 55994: a2 = u64 [sp + 0x38]\n 55997: a1 = a1 | a2\n 56000: a2 = 0xffffffe0\n 56010: a2 = s1 <u a2\n 56013: a3 = u64 [sp + 0x40]\n 56016: a2 = 0 if a3 != 0\n 56018: a2 = 0 if a1 != 0\n 56020: u8 [a0 + 0] = 0\n 56022: jump @759 if a2 == 0\n      : @757 (gas: 3)\n 56026: i32 a0 = s0 + 0x20\n 56029: a1 = 0x20\n 56032: ra = 710, jump @0\n      : @758 [@dyn 355] (gas: 54)\n 56039: u8 [a0 + 28] = 0x70\n 56043: u8 [a0 + 27] = 0x6d\n 56047: u8 [a0 + 23] = 0x62\n 56051: u8 [a0 + 19] = 0x6e\n 56055: u8 [a0 + 18] = 0x6e\n 56059: u8 [a0 + 30] = 0x79\n 56063: u8 [a0 + 14] = 0x79\n 56067: u8 [a0 + 26] = 0x65\n 56071: u8 [a0 + 24] = 0x65\n 56075: u8 [a0 + 11] = 0x65\n 56079: u8 [a0 + 29] = 0x74\n 56083: u8 [a0 + 21] = 0x74\n 56087: u8 [a0 + 10] = 0x74\n 56091: u8 [a0 + 17] = 0x61\n 56095: u8 [a0 + 13] = 0x61\n 56099: u8 [a0 + 9] = 0x61\n 56103: u8 [a0 + 8] = 0x67\n 56107: u8 [a0 + 31] = 0\n 56110: u8 [a0 + 25] = 0x20\n 56114: u8 [a0 + 22] = 0x20\n 56118: u8 [a0 + 15] = 0x20\n 56122: u8 [a0 + 7] = 0x20\n 56126: u8 [a0 + 6] = 0x3a\n 56130: u8 [a0 + 12] = 0x77\n 56134: u8 [a0 + 5] = 0x77\n 56138: u8 [a0 + 20] = 0x6f\n 56142: u8 [a0 + 4] = 0x6f\n 56146: u8 [a0 + 3] = 0x72\n 56150: u8 [a0 + 16] = 0x63\n 56154: u8 [a0 + 2] = 0x63\n 56158: u8 [a0 + 1] = 0x73\n 56162: u8 [a0 + 0] = 0x45\n 56165: a1 = u64 [sp]\n 56167: a0 = a1 + 0x60\n 56170: a1 = a0 <u a1\n 56173: a3 = u64 [sp + 0x8]\n 56176: a2 = a3 + a1\n 56179: a3 = a2 <u a3\n 56182: a3 = a1 if a1 == 0\n 56185: a1 = u64 [sp + 0x10]\n 56188: a3 = a3 + a1\n 56191: a1 = a3 <u a1\n 56194: a4 = u64 [sp + 0x18]\n 56197: a1 = a1 + a4\n 56200: a4 = u64 [sp + 0x28]\n 56203: u64 [a4] = a0\n 56205: u64 [a4 + 0x8] = a2\n 56208: u64 [a4 + 0x10] = a3\n 56211: u64 [a4 + 0x18] = a1\n 56214: ra = u64 [sp + 0x58]\n 56217: s0 = u64 [sp + 0x50]\n 56220: s1 = u64 [sp + 0x48]\n 56223: sp = sp + 0x60\n 56226: ret\n      : @759 (gas: 1)\n 56228: trap\n      : @760 (gas: 15)\n 56229: sp = sp + 0xffffffffffffff20\n 56233: u64 [sp + 0xd8] = ra\n 56237: u64 [sp + 0xd0] = s0\n 56241: u64 [sp + 0xc8] = s1\n 56245: s0 = sp + 0xe0\n 56249: sp = sp & 0xffffffffffffffe0\n 56252: t0 = u64 [a1 + 0x18]\n 56255: a5 = u64 [a1 + 0x10]\n 56258: a4 = u64 [a1]\n 56260: s1 = u64 [a1 + 0x8]\n 56263: a1 = a5 | t0\n 56266: a3 = a4 <u 0x20\n 56269: a3 = 0 if s1 != 0\n 56271: a3 = 0 if a1 != 0\n 56273: jump @768 if a3 != 0\n      : @761 (gas: 23)\n 56277: a1 = u64 [a2 + 0x18]\n 56280: u64 [sp + 0x50] = a1\n 56283: a1 = u64 [a2 + 0x10]\n 56286: u64 [sp + 0x40] = a1\n 56289: a1 = u64 [a2 + 0x8]\n 56292: u64 [sp + 0x58] = a1\n 56295: a1 = u64 [a2]\n 56297: u64 [sp + 0x20] = a1\n 56300: a1 = u64 [a0 + 0x18]\n 56303: u64 [sp] = a1\n 56305: a1 = u64 [a0 + 0x10]\n 56308: u64 [sp + 0x8] = a1\n 56311: a1 = u64 [a0 + 0x8]\n 56314: u64 [sp + 0x10] = a1\n 56317: a0 = u64 [a0]\n 56319: u64 [sp + 0x18] = a0\n 56322: a1 = 0x20\n 56325: a0 = 0\n 56327: u64 [sp + 0x28] = t0\n 56330: u64 [sp + 0x48] = a5\n 56333: u64 [sp + 0x38] = s1\n 56336: u64 [sp + 0x30] = a4\n 56339: ra = 712, jump @0\n      : @762 [@dyn 356] (gas: 71)\n 56346: a1 = u64 [sp]\n 56348: a1 = reverse a1\n 56350: a2 = u64 [sp + 0x8]\n 56353: a2 = reverse a2\n 56355: a3 = u64 [sp + 0x10]\n 56358: a3 = reverse a3\n 56360: a4 = u64 [sp + 0x18]\n 56363: a4 = reverse a4\n 56365: a5 = a4 >> 0x38\n 56368: u8 [a0 + 0x1f] = a5\n 56371: a5 = a4 >> 0x30\n 56374: u8 [a0 + 0x1e] = a5\n 56377: a5 = a4 >> 0x28\n 56380: u8 [a0 + 0x1d] = a5\n 56383: a5 = a4 >> 0x20\n 56386: u8 [a0 + 0x1c] = a5\n 56389: a5 = a4 >> 0x18\n 56392: u8 [a0 + 0x1b] = a5\n 56395: a5 = a4 >> 0x10\n 56398: u8 [a0 + 0x1a] = a5\n 56401: a5 = a4 >> 0x8\n 56404: u8 [a0 + 0x19] = a5\n 56407: u8 [a0 + 0x18] = a4\n 56410: u8 [a0 + 0x10] = a3\n 56413: a4 = a3 >> 0x38\n 56416: u8 [a0 + 0x17] = a4\n 56419: a4 = a3 >> 0x30\n 56422: u8 [a0 + 0x16] = a4\n 56425: a4 = a3 >> 0x28\n 56428: u8 [a0 + 0x15] = a4\n 56431: a4 = a3 >> 0x20\n 56434: u8 [a0 + 0x14] = a4\n 56437: a4 = a3 >> 0x18\n 56440: u8 [a0 + 0x13] = a4\n 56443: a4 = a3 >> 0x10\n 56446: u8 [a0 + 0x12] = a4\n 56449: a3 = a3 >> 0x8\n 56452: u8 [a0 + 0x11] = a3\n 56455: u8 [a0 + 0x8] = a2\n 56458: a3 = a2 >> 0x38\n 56461: u8 [a0 + 0xf] = a3\n 56464: a3 = a2 >> 0x30\n 56467: u8 [a0 + 0xe] = a3\n 56470: a3 = a2 >> 0x28\n 56473: u8 [a0 + 0xd] = a3\n 56476: a3 = a2 >> 0x20\n 56479: u8 [a0 + 0xc] = a3\n 56482: a3 = a2 >> 0x18\n 56485: u8 [a0 + 0xb] = a3\n 56488: a3 = a2 >> 0x10\n 56491: u8 [a0 + 0xa] = a3\n 56494: a2 = a2 >> 0x8\n 56497: u8 [a0 + 0x9] = a2\n 56500: u8 [a0] = a1\n 56502: a2 = a1 >> 0x38\n 56505: u8 [a0 + 0x7] = a2\n 56508: a2 = a1 >> 0x30\n 56511: u8 [a0 + 0x6] = a2\n 56514: a2 = a1 >> 0x28\n 56517: u8 [a0 + 0x5] = a2\n 56520: a2 = a1 >> 0x20\n 56523: u8 [a0 + 0x4] = a2\n 56526: a2 = a1 >> 0x18\n 56529: u8 [a0 + 0x3] = a2\n 56532: a2 = a1 >> 0x10\n 56535: u8 [a0 + 0x2] = a2\n 56538: a1 = a1 >> 0x8\n 56541: u8 [a0 + 0x1] = a1\n 56544: a1 = 0x20\n 56547: a0 = 0\n 56549: ra = 714, jump @0\n      : @763 [@dyn 357] (gas: 5)\n 56556: i32 a0 = a0 + 0\n 56558: i32 a2 = sp + 0xa0\n 56562: a1 = 0x20\n 56565: ecalli 8 // 'hash_keccak_256'\n 56567: fallthrough\n      : @764 (gas: 112)\n 56568: a2 = u64 [sp + 0x20]\n 56571: a1 = a2 + 0x1f\n 56574: a0 = a1 <u a2\n 56577: t1 = a2\n 56579: a4 = u64 [sp + 0x58]\n 56582: a3 = a4 + a0\n 56585: a2 = a3 <u a4\n 56588: t0 = a4\n 56590: a2 = a0 if a0 == 0\n 56593: s1 = u64 [sp + 0x40]\n 56596: a2 = a2 + s1\n 56599: u64 [sp + 0x18] = a2\n 56602: a2 = a2 << 0x3b\n 56605: a4 = a3 >> 0x5\n 56608: a2 = a2 | a4\n 56611: a3 = a3 << 0x3b\n 56614: a1 = a1 >> 0x5\n 56617: a5 = a1 | a3\n 56620: a1 = t1 <u 0x20\n 56623: a1 = 0 if t0 != 0\n 56625: a3 = u64 [sp + 0xb8]\n 56629: t1 = u64 [sp + 0xb0]\n 56633: a0 = u64 [sp + 0x50]\n 56636: a4 = s1 | a0\n 56639: a1 = 0 if a4 != 0\n 56641: a4 = reverse a3\n 56643: s1 = reverse t1\n 56645: a2 = 0 if a1 != 0\n 56647: a5 = 0 if a1 != 0\n 56649: a5 = a5 + a4\n 56652: u64 [sp + 0x58] = a5\n 56655: a5 = a5 <u a4\n 56658: a3 = s1 + a5\n 56661: t0 = a3 + a2\n 56664: a3 = t0 ^ s1\n 56667: ra = t0 <u s1\n 56670: ra = a5 if a3 == 0\n 56673: a0 = u64 [sp + 0x30]\n 56676: t2 = a0 + 0x1f\n 56679: a0 = t2 <u a0\n 56682: a2 = u64 [sp + 0x38]\n 56685: a3 = a2 + a0\n 56688: a5 = a3 <u a2\n 56691: a5 = a0 if a0 == 0\n 56694: a0 = u64 [sp + 0x48]\n 56697: a5 = a5 + a0\n 56700: a0 = a5 << 0x3b\n 56703: a2 = a3 >> 0x5\n 56706: a0 = a0 | a2\n 56709: a3 = a3 << 0x3b\n 56712: a2 = t2 >> 0x5\n 56715: a2 = a2 | a3\n 56718: t2 = a4 + a2\n 56721: a2 = t2 <u a4\n 56724: a3 = s1 + a2\n 56727: t1 = a3 + a0\n 56730: a0 = t1 ^ s1\n 56733: a3 = t1 <u s1\n 56736: a3 = a2 if a0 == 0\n 56739: a4 = u64 [sp + 0x18]\n 56742: a0 = u64 [sp + 0x40]\n 56745: a0 = a4 <u a0\n 56748: a2 = u64 [sp + 0x50]\n 56751: a0 = a0 + a2\n 56754: a2 = a4 >> 0x5\n 56757: a4 = a0 << 0x3b\n 56760: a2 = a2 | a4\n 56763: a0 = a0 >> 0x5\n 56766: a4 = u64 [sp + 0xa8]\n 56770: s1 = u64 [sp + 0xa0]\n 56774: a2 = 0 if a1 != 0\n 56776: a0 = 0 if a1 != 0\n 56778: a1 = reverse a4\n 56780: a4 = reverse s1\n 56782: u64 [sp + 0x50] = a4\n 56785: a0 = a0 + a4\n 56788: a2 = a2 + a1\n 56791: s1 = a2 <u a1\n 56794: a0 = a0 + s1\n 56797: a4 = a2 + ra\n 56800: s1 = a4 <u a2\n 56803: s1 = s1 + a0\n 56806: a0 = u64 [sp + 0x48]\n 56809: a0 = a5 <u a0\n 56812: a2 = u64 [sp + 0x28]\n 56815: a0 = a0 + a2\n 56818: a5 = a5 >> 0x5\n 56821: a2 = a0 << 0x3b\n 56824: a2 = a2 | a5\n 56827: a5 = u64 [sp + 0x58]\n 56830: a0 = a0 >> 0x5\n 56833: a2 = a2 + a1\n 56836: ra = a2 + a3\n 56839: a1 = a2 <u a1\n 56842: a2 = ra <u a2\n 56845: a3 = u64 [sp + 0x50]\n 56848: a0 = a0 + a3\n 56851: a0 = a0 + a1\n 56854: a3 = a0 + a2\n 56857: a0 = t0 ^ t1\n 56860: a1 = t0 <u t1\n 56863: a2 = a5 <u t2\n 56866: a2 = a1 if a0 != 0\n 56869: a0 = a4 <u ra\n 56872: a1 = s1 ^ a3\n 56875: u64 [sp + 0x40] = a3\n 56878: a3 = s1 <u a3\n 56881: a3 = a0 if a1 == 0\n 56884: a0 = a4 ^ ra\n 56887: a0 = a0 | a1\n 56890: a2 = a3 if a0 != 0\n 56893: jump @768 if a2 == 0\n      : @765 (gas: 5)\n 56897: a0 = a4\n 56899: u64 [sp + 0x38] = t2\n 56902: u64 [sp + 0x30] = t1\n 56905: u64 [sp + 0x28] = ra\n 56908: fallthrough\n      : @766 (gas: 36)\n 56909: u64 [sp + 0x48] = a0\n 56912: u64 [sp + 0x50] = t0\n 56915: u64 [sp + 0x58] = a5\n 56918: u64 [sp + 0x90] = a0\n 56922: u64 [sp + 0x88] = t0\n 56926: u64 [sp + 0x80] = a5\n 56930: u64 [sp + 0x98] = s1\n 56934: u64 [sp + 184] = 0\n 56938: u64 [sp + 176] = 0\n 56942: u64 [sp + 168] = 0\n 56946: u64 [sp + 160] = 0\n 56950: u32 [sp + 96] = 0x20\n 56954: i32 a1 = sp + 0x80\n 56958: i32 a3 = sp + 0xa0\n 56962: i32 a4 = sp + 0x60\n 56965: a2 = 0xffffffffffffffff\n 56968: a0 = 0\n 56970: ecalli 7 // 'get_storage'\n 56972: u64 [sp + 0x98] = s1\n 56976: a0 = u64 [sp + 0x48]\n 56979: u64 [sp + 0x90] = a0\n 56983: a0 = u64 [sp + 0x50]\n 56986: u64 [sp + 0x88] = a0\n 56990: a0 = u64 [sp + 0x58]\n 56993: u64 [sp + 0x80] = a0\n 56997: u64 [sp + 184] = 0\n 57001: u64 [sp + 176] = 0\n 57005: u64 [sp + 168] = 0\n 57009: u64 [sp + 160] = 0\n 57013: i32 a1 = sp + 0x80\n 57017: i32 a3 = sp + 0xa0\n 57021: a2 = 0xffffffffffffffff\n 57024: a4 = 0x20\n 57027: a0 = 0\n 57029: ecalli 14 // 'set_storage'\n 57031: fallthrough\n      : @767 (gas: 27)\n 57032: ra = u64 [sp + 0x28]\n 57035: t1 = u64 [sp + 0x30]\n 57038: t2 = u64 [sp + 0x38]\n 57041: t0 = u64 [sp + 0x50]\n 57044: a5 = u64 [sp + 0x58]\n 57047: a5 = a5 + 0x1\n 57050: a0 = a5 <u 0x1\n 57053: t0 = t0 + a0\n 57056: a0 = a5 | t0\n 57059: a0 = a0 <u 0x1\n 57062: a1 = u64 [sp + 0x48]\n 57065: a0 = a0 + a1\n 57068: a1 = a0 <u a1\n 57071: s1 = s1 + a1\n 57074: a1 = a5 <u t2\n 57077: a2 = t0 ^ t1\n 57080: a3 = t0 <u t1\n 57083: a3 = a1 if a2 == 0\n 57086: a1 = a0 <u ra\n 57089: a4 = u64 [sp + 0x40]\n 57092: a2 = s1 ^ a4\n 57095: a4 = s1 <u a4\n 57098: a4 = a1 if a2 == 0\n 57101: a1 = a0 ^ ra\n 57104: a1 = a1 | a2\n 57107: a4 = a3 if a1 == 0\n 57110: jump @766 if a4 != 0\n      : @768 (gas: 6)\n 57114: sp = s0 + 0xffffffffffffff20\n 57118: ra = u64 [sp + 0xd8]\n 57122: s0 = u64 [sp + 0xd0]\n 57126: s1 = u64 [sp + 0xc8]\n 57130: sp = sp + 0xe0\n 57134: ret\n      : @769 (gas: 17)\n 57136: sp = sp + 0xfffffffffffffd00\n 57140: u64 [sp + 0x2f8] = ra\n 57144: u64 [sp + 0x2f0] = s0\n 57148: u64 [sp + 0x2e8] = s1\n 57152: s0 = sp + 0x300\n 57156: sp = sp & 0xffffffffffffffe0\n 57159: a5 = u64 [a2 + 0x18]\n 57162: a3 = u64 [a2 + 0x10]\n 57165: a4 = u64 [a2 + 0x8]\n 57168: u64 [sp + 0x48] = a3\n 57171: u64 [sp + 0x18] = a5\n 57174: a5 = a5 | a3\n 57177: u64 [sp + 0x40] = a4\n 57180: a3 = a4 <u 0x1\n 57183: u64 [sp + 0xb8] = a5\n 57187: a3 = 0 if a5 != 0\n 57189: jump @795 if a3 == 0\n      : @770 (gas: 34)\n 57193: a2 = u64 [a2]\n 57195: u64 [sp + 0x50] = a2\n 57198: a2 = u64 [a1 + 0x18]\n 57201: u64 [sp + 0x78] = a2\n 57204: a2 = u64 [a1 + 0x10]\n 57207: u64 [sp + 0x70] = a2\n 57210: a2 = u64 [a1 + 0x8]\n 57213: u64 [sp + 0x60] = a2\n 57216: a1 = u64 [a1]\n 57218: u64 [sp + 0x68] = a1\n 57221: a3 = u64 [a0 + 0x10]\n 57224: a1 = u64 [a0 + 0x8]\n 57227: a2 = u64 [a0]\n 57229: a0 = u64 [a0 + 0x18]\n 57232: u64 [sp + 0x38] = a3\n 57235: u64 [sp + 0x2b0] = a3\n 57239: u64 [sp + 0x20] = a1\n 57242: u64 [sp + 0x2a8] = a1\n 57246: u64 [sp + 0x28] = a2\n 57249: u64 [sp + 0x2a0] = a2\n 57253: u64 [sp + 0x30] = a0\n 57256: u64 [sp + 0x2b8] = a0\n 57260: u64 [sp + 728] = 0\n 57264: u64 [sp + 720] = 0\n 57268: u64 [sp + 712] = 0\n 57272: u64 [sp + 704] = 0\n 57276: u32 [sp + 640] = 0x20\n 57281: i32 a1 = sp + 0x2a0\n 57285: i32 a3 = sp + 0x2c0\n 57289: i32 a4 = sp + 0x280\n 57293: a2 = 0xffffffffffffffff\n 57296: a0 = 0\n 57298: ecalli 7 // 'get_storage'\n 57300: fallthrough\n      : @771 (gas: 27)\n 57301: a0 = u64 [sp + 0x2d0]\n 57305: a1 = u64 [sp + 0x2c8]\n 57309: a2 = u64 [sp + 0x2c0]\n 57313: a3 = u64 [sp + 0x2d8]\n 57317: a4 = a0 << 0x3f\n 57320: a5 = a1 >> 0x1\n 57323: a4 = a4 | a5\n 57326: a5 = a3 << 0x3f\n 57329: a0 = a0 >> 0x1\n 57332: s1 = a0 | a5\n 57335: a1 = a1 << 0x3f\n 57338: a5 = a2 >> 0x1\n 57341: a1 = a1 | a5\n 57344: t1 = a3 >> 0x1\n 57347: a2 = a2 & 0x1\n 57350: a0 = -a2\n 57352: t0 = a2 <u 0x1\n 57355: a3 = a1 & 0x7f\n 57358: a5 = a0 & s1\n 57361: a4 = a4 & a0\n 57364: a3 = a1 if a2 != 0\n 57367: a1 = a0 & t1\n 57370: a0 = a3 <u 0x20\n 57373: a0 = 0 if a4 != 0\n 57375: a2 = a5 | a1\n 57378: a0 = 0 if a2 != 0\n 57380: jump @797 if t0 != a0\n      : @772 (gas: 24)\n 57384: a0 = u64 [sp + 0x50]\n 57387: u64 [sp + 0x1c0] = a0\n 57391: u64 [sp + 0x1e0] = a3\n 57395: a0 = u64 [sp + 0x28]\n 57398: u64 [sp + 0x200] = a0\n 57402: a0 = u64 [sp + 0x40]\n 57405: u64 [sp + 0x1c8] = a0\n 57409: u64 [sp + 0x1e8] = a4\n 57413: a0 = u64 [sp + 0x20]\n 57416: u64 [sp + 0x208] = a0\n 57420: a0 = u64 [sp + 0x48]\n 57423: u64 [sp + 0x1d0] = a0\n 57427: u64 [sp + 0x1f0] = a5\n 57431: a0 = u64 [sp + 0x38]\n 57434: u64 [sp + 0x210] = a0\n 57438: s1 = u64 [sp + 0x18]\n 57441: u64 [sp + 0x1d8] = s1\n 57445: u64 [sp + 0x1f8] = a1\n 57449: a0 = sp + 0x200\n 57453: a1 = sp + 0x1e0\n 57457: a2 = sp + 0x1c0\n 57461: a3 = u64 [sp + 0x30]\n 57464: u64 [sp + 0x218] = a3\n 57468: ra = 716, jump @760\n      : @773 [@dyn 358] (gas: 16)\n 57474: a5 = u64 [sp + 0x48]\n 57477: a3 = u64 [sp + 0x40]\n 57480: a4 = s1\n 57482: a0 = a3 >u 0\n 57484: s1 = u64 [sp + 0x50]\n 57487: a1 = s1 <u 0x20\n 57490: a1 = a1 ^ 0x1\n 57493: a1 = a0 if a3 != 0\n 57496: a0 = a5 >u 0\n 57498: a2 = a4 >u 0\n 57500: a2 = a0 if a4 == 0\n 57503: a0 = u64 [sp + 0xb8]\n 57507: a2 = a1 if a0 == 0\n 57510: t0 = u64 [sp + 0x38]\n 57513: a0 = s1\n 57515: jump @783 if a2 == 0\n      : @774 (gas: 6)\n 57519: a0 = a0 & 0xffffffffffffffe0\n 57522: u64 [sp + 0x58] = a0\n 57525: a1 = 0x20\n 57528: a0 = 0\n 57530: s1 = t0\n 57532: ra = 718, jump @0\n      : @775 [@dyn 359] (gas: 70)\n 57539: a1 = u64 [sp + 0x30]\n 57542: a1 = reverse a1\n 57544: a2 = reverse s1\n 57546: a3 = u64 [sp + 0x20]\n 57549: a3 = reverse a3\n 57551: a4 = u64 [sp + 0x28]\n 57554: a4 = reverse a4\n 57556: a5 = a4 >> 0x38\n 57559: u8 [a0 + 0x1f] = a5\n 57562: a5 = a4 >> 0x30\n 57565: u8 [a0 + 0x1e] = a5\n 57568: a5 = a4 >> 0x28\n 57571: u8 [a0 + 0x1d] = a5\n 57574: a5 = a4 >> 0x20\n 57577: u8 [a0 + 0x1c] = a5\n 57580: a5 = a4 >> 0x18\n 57583: u8 [a0 + 0x1b] = a5\n 57586: a5 = a4 >> 0x10\n 57589: u8 [a0 + 0x1a] = a5\n 57592: a5 = a4 >> 0x8\n 57595: u8 [a0 + 0x19] = a5\n 57598: u8 [a0 + 0x18] = a4\n 57601: u8 [a0 + 0x10] = a3\n 57604: a4 = a3 >> 0x38\n 57607: u8 [a0 + 0x17] = a4\n 57610: a4 = a3 >> 0x30\n 57613: u8 [a0 + 0x16] = a4\n 57616: a4 = a3 >> 0x28\n 57619: u8 [a0 + 0x15] = a4\n 57622: a4 = a3 >> 0x20\n 57625: u8 [a0 + 0x14] = a4\n 57628: a4 = a3 >> 0x18\n 57631: u8 [a0 + 0x13] = a4\n 57634: a4 = a3 >> 0x10\n 57637: u8 [a0 + 0x12] = a4\n 57640: a3 = a3 >> 0x8\n 57643: u8 [a0 + 0x11] = a3\n 57646: u8 [a0 + 0x8] = a2\n 57649: a3 = a2 >> 0x38\n 57652: u8 [a0 + 0xf] = a3\n 57655: a3 = a2 >> 0x30\n 57658: u8 [a0 + 0xe] = a3\n 57661: a3 = a2 >> 0x28\n 57664: u8 [a0 + 0xd] = a3\n 57667: a3 = a2 >> 0x20\n 57670: u8 [a0 + 0xc] = a3\n 57673: a3 = a2 >> 0x18\n 57676: u8 [a0 + 0xb] = a3\n 57679: a3 = a2 >> 0x10\n 57682: u8 [a0 + 0xa] = a3\n 57685: a2 = a2 >> 0x8\n 57688: u8 [a0 + 0x9] = a2\n 57691: u8 [a0] = a1\n 57693: a2 = a1 >> 0x38\n 57696: u8 [a0 + 0x7] = a2\n 57699: a2 = a1 >> 0x30\n 57702: u8 [a0 + 0x6] = a2\n 57705: a2 = a1 >> 0x28\n 57708: u8 [a0 + 0x5] = a2\n 57711: a2 = a1 >> 0x20\n 57714: u8 [a0 + 0x4] = a2\n 57717: a2 = a1 >> 0x18\n 57720: u8 [a0 + 0x3] = a2\n 57723: a2 = a1 >> 0x10\n 57726: u8 [a0 + 0x2] = a2\n 57729: a1 = a1 >> 0x8\n 57732: u8 [a0 + 0x1] = a1\n 57735: a1 = 0x20\n 57738: a0 = 0\n 57740: ra = 720, jump @0\n      : @776 [@dyn 360] (gas: 5)\n 57747: i32 a0 = a0 + 0\n 57749: i32 a2 = sp + 0x2c0\n 57753: a1 = 0x20\n 57756: ecalli 8 // 'hash_keccak_256'\n 57758: fallthrough\n      : @777 (gas: 13)\n 57759: a0 = u64 [sp + 0x2c0]\n 57763: a1 = u64 [sp + 0x2c8]\n 57767: a2 = u64 [sp + 0x2d0]\n 57771: a3 = u64 [sp + 0x2d8]\n 57775: a0 = reverse a0\n 57777: u64 [sp + 0xb0] = a0\n 57781: t2 = reverse a1\n 57783: a0 = reverse a2\n 57785: u64 [sp + 0xb8] = a0\n 57789: a0 = reverse a3\n 57791: u64 [sp + 0xa0] = a0\n 57795: a0 = u64 [sp + 0x58]\n 57798: jump @786 if a0 == 0\n      : @778 (gas: 6)\n 57802: a3 = 0\n 57804: a4 = 0\n 57806: s1 = 0\n 57808: ra = 0\n 57810: a0 = t2\n 57812: fallthrough\n      : @779 (gas: 31)\n 57813: u64 [sp + 0x80] = ra\n 57817: u64 [sp + 0xa8] = a0\n 57821: a1 = u64 [sp + 0x68]\n 57824: a1 = a1 + a3\n 57827: u64 [sp + 0x90] = a3\n 57831: a0 = a1 <u a3\n 57834: a2 = u64 [sp + 0x60]\n 57837: a2 = a2 + a4\n 57840: a2 = a2 + a0\n 57843: a3 = a2 ^ a4\n 57846: u64 [sp + 0x88] = a4\n 57850: a4 = a2 <u a4\n 57853: a4 = a0 if a3 == 0\n 57856: a0 = u64 [sp + 0x70]\n 57859: a0 = a0 + s1\n 57862: u64 [sp + 0x98] = s1\n 57866: a3 = a0 <u s1\n 57869: a5 = u64 [sp + 0x78]\n 57872: a5 = a5 + ra\n 57875: a3 = a3 + a5\n 57878: a4 = a4 + a0\n 57881: a0 = a4 <u a0\n 57884: a0 = a0 + a3\n 57887: a0 = a0 | a2\n 57890: a2 = a1 | a4\n 57893: a2 = a2 | a0\n 57896: a0 = a0 | a4\n 57899: a2 = a2 >> 0x20\n 57902: a0 = a0 << 0x20\n 57905: a0 = a0 | a2\n 57908: jump @794 if a0 != 0\n      : @780 (gas: 26)\n 57912: i32 a1 = a1 + 0\n 57914: i32 a0 = sp + 0x220\n 57918: ecalli 3 // 'call_data_load'\n 57920: a0 = u64 [sp + 0x220]\n 57924: a1 = u64 [sp + 0x228]\n 57928: a2 = u64 [sp + 0x230]\n 57932: a3 = u64 [sp + 0x238]\n 57936: a4 = u64 [sp + 0xb0]\n 57940: u64 [sp + 0x2b8] = a4\n 57944: a4 = u64 [sp + 0xa8]\n 57948: u64 [sp + 0x2b0] = a4\n 57952: a4 = u64 [sp + 0xb8]\n 57956: u64 [sp + 0x2a8] = a4\n 57960: s1 = u64 [sp + 0xa0]\n 57964: u64 [sp + 0x2a0] = s1\n 57968: u64 [sp + 0x2d8] = a3\n 57972: u64 [sp + 0x2d0] = a2\n 57976: u64 [sp + 0x2c8] = a1\n 57980: u64 [sp + 0x2c0] = a0\n 57984: i32 a1 = sp + 0x2a0\n 57988: i32 a3 = sp + 0x2c0\n 57992: a2 = 0xffffffffffffffff\n 57995: a4 = 0x20\n 57998: a0 = 0\n 58000: ecalli 14 // 'set_storage'\n 58002: fallthrough\n      : @781 (gas: 38)\n 58003: s1 = s1 + 0x1\n 58006: a0 = s1 <u 0x1\n 58009: a1 = u64 [sp + 0xb8]\n 58013: a1 = a1 + a0\n 58016: u64 [sp + 0xb8] = a1\n 58020: u64 [sp + 0xa0] = s1\n 58024: a0 = u64 [sp + 0xb8]\n 58028: a0 = a0 | s1\n 58031: a0 = a0 <u 0x1\n 58034: a1 = u64 [sp + 0xa8]\n 58038: t2 = a1 + a0\n 58041: a3 = t2 <u a1\n 58044: a0 = u64 [sp + 0x90]\n 58048: a2 = a0 + 0x20\n 58051: a0 = a2 <u a0\n 58054: a4 = u64 [sp + 0x88]\n 58058: t0 = a4 + a0\n 58061: a4 = t0 <u a4\n 58064: a4 = a0 if a0 == 0\n 58067: a5 = u64 [sp + 0x98]\n 58071: t1 = a5 + a4\n 58074: a4 = t1 <u a5\n 58077: a1 = u64 [sp + 0x80]\n 58081: a1 = a1 + a4\n 58084: a4 = t1 | a1\n 58087: a5 = u64 [sp + 0x58]\n 58090: a5 = a2 <u a5\n 58093: a5 = 0 if t0 != 0\n 58095: a5 = 0 if a4 != 0\n 58097: a0 = u64 [sp + 0xb0]\n 58101: a0 = a0 + a3\n 58104: u64 [sp + 0xb0] = a0\n 58108: a3 = a2\n 58110: a4 = t0\n 58112: s1 = t1\n 58114: a0 = t2\n 58116: ra = a1\n 58118: jump @779 if a5 != 0\n      : @782 (gas: 1)\n 58122: jump @787\n      : @783 (gas: 4)\n 58125: a0 = a0 | a5\n 58128: a1 = a3 | a4\n 58131: a0 = a0 | a1\n 58134: jump @791 if a0 == 0\n      : @784 (gas: 12)\n 58138: a2 = u64 [sp + 0x70]\n 58141: a3 = u64 [sp + 0x68]\n 58144: a0 = a3 | a2\n 58147: a1 = u64 [sp + 0x78]\n 58150: a4 = u64 [sp + 0x60]\n 58153: a1 = a1 | a4\n 58156: a0 = a0 | a1\n 58159: a0 = a0 >> 0x20\n 58162: a1 = a1 | a2\n 58165: a1 = a1 << 0x20\n 58168: a0 = a0 | a1\n 58171: jump @794 if a0 != 0\n      : @785 (gas: 193)\n 58175: i32 a1 = a3 + 0\n 58177: i32 a0 = sp + 0x260\n 58181: ecalli 3 // 'call_data_load'\n 58183: a0 = u64 [sp + 0x278]\n 58187: u64 [sp + 0xb8] = a0\n 58191: a0 = u64 [sp + 0x270]\n 58195: u64 [sp + 0xb0] = a0\n 58199: t2 = u64 [sp + 0x268]\n 58203: ra = u64 [sp + 0x260]\n 58207: u8 [sp + 447] = 0\n 58211: u8 [sp + 446] = 0\n 58215: u8 [sp + 445] = 0\n 58219: u8 [sp + 444] = 0\n 58223: u8 [sp + 443] = 0\n 58227: u8 [sp + 442] = 0\n 58231: u8 [sp + 441] = 0\n 58235: u8 [sp + 440] = 0\n 58239: u8 [sp + 439] = 0\n 58243: u8 [sp + 438] = 0\n 58247: u8 [sp + 437] = 0\n 58251: u8 [sp + 436] = 0\n 58255: u8 [sp + 435] = 0\n 58259: u8 [sp + 434] = 0\n 58263: u8 [sp + 433] = 0\n 58267: u8 [sp + 432] = 0\n 58271: u8 [sp + 431] = 0\n 58275: u8 [sp + 430] = 0\n 58279: u8 [sp + 429] = 0\n 58283: u8 [sp + 428] = 0\n 58287: u8 [sp + 427] = 0\n 58291: u8 [sp + 426] = 0\n 58295: u8 [sp + 425] = 0\n 58299: u8 [sp + 424] = 0\n 58303: u8 [sp + 423] = 0\n 58307: u8 [sp + 422] = 0\n 58311: u8 [sp + 421] = 0\n 58315: u8 [sp + 420] = 0\n 58319: u8 [sp + 419] = 0\n 58323: u8 [sp + 418] = 0\n 58327: u8 [sp + 417] = 0\n 58331: u8 [sp + 416] = 0\n 58335: u8 [sp + 415] = 0xff\n 58341: u8 [sp + 414] = 0xff\n 58347: u8 [sp + 413] = 0xff\n 58353: u8 [sp + 411] = 0xff\n 58359: u8 [sp + 408] = 0xffffffffffffffff\n 58364: u8 [sp + 407] = 0xff\n 58370: u8 [sp + 406] = 0xff\n 58376: u8 [sp + 405] = 0xff\n 58382: u8 [sp + 403] = 0xff\n 58388: u8 [sp + 400] = 0xffffffffffffffff\n 58393: u8 [sp + 399] = 0xff\n 58399: u8 [sp + 398] = 0xff\n 58405: u8 [sp + 397] = 0xff\n 58411: u8 [sp + 395] = 0xff\n 58417: u8 [sp + 392] = 0xffffffffffffffff\n 58422: u8 [sp + 391] = 0xff\n 58428: u8 [sp + 390] = 0xff\n 58434: u8 [sp + 389] = 0xff\n 58440: u8 [sp + 387] = 0xff\n 58446: u8 [sp + 384] = 0xffffffffffffffff\n 58451: a0 = 0xffffffff\n 58461: u8 [sp + 0x19c] = a0\n 58465: a5 = 0xffffffffffff\n 58475: u8 [sp + 0x19a] = a5\n 58479: a4 = 0xffffffffffffff\n 58489: u8 [sp + 0x199] = a4\n 58493: u8 [sp + 0x194] = a0\n 58497: u8 [sp + 0x192] = a5\n 58501: u8 [sp + 0x191] = a4\n 58505: u8 [sp + 0x18c] = a0\n 58509: u8 [sp + 0x18a] = a5\n 58513: u8 [sp + 0x189] = a4\n 58517: u8 [sp + 0x184] = a0\n 58521: u8 [sp + 0x182] = a5\n 58525: u8 [sp + 0x181] = a4\n 58529: t0 = u64 [sp + 0x50]\n 58532: a4 = t0 & 0x1f\n 58535: a0 = sp + 0x180\n 58539: a4 = a4 + a0\n 58542: a0 = u8 [a4 + 0x19]\n 58545: a5 = u8 [a4 + 0x18]\n 58548: s1 = u8 [a4 + 0x1a]\n 58551: a1 = u8 [a4 + 0x1b]\n 58554: a0 = a0 << 0x8\n 58557: a0 = a0 | a5\n 58560: s1 = s1 << 0x10\n 58563: a1 = a1 << 0x18\n 58566: a1 = a1 | s1\n 58569: a0 = a0 | a1\n 58572: a1 = u8 [a4 + 0x1d]\n 58575: a5 = u8 [a4 + 0x1c]\n 58578: s1 = u8 [a4 + 0x1e]\n 58581: a2 = u8 [a4 + 0x1f]\n 58584: a1 = a1 << 0x8\n 58587: a1 = a1 | a5\n 58590: s1 = s1 << 0x10\n 58593: a2 = a2 << 0x18\n 58596: a2 = a2 | s1\n 58599: a1 = a1 | a2\n 58602: a1 = a1 << 0x20\n 58605: t1 = a1 | a0\n 58608: a0 = u8 [a4 + 0x11]\n 58611: a1 = u8 [a4 + 0x10]\n 58614: a2 = u8 [a4 + 0x12]\n 58617: s1 = u8 [a4 + 0x13]\n 58620: a0 = a0 << 0x8\n 58623: a0 = a0 | a1\n 58626: a2 = a2 << 0x10\n 58629: s1 = s1 << 0x18\n 58632: a2 = a2 | s1\n 58635: a0 = a0 | a2\n 58638: a1 = u8 [a4 + 0x15]\n 58641: a2 = u8 [a4 + 0x14]\n 58644: s1 = u8 [a4 + 0x16]\n 58647: a3 = u8 [a4 + 0x17]\n 58650: a1 = a1 << 0x8\n 58653: a1 = a1 | a2\n 58656: s1 = s1 << 0x10\n 58659: a3 = a3 << 0x18\n 58662: a3 = a3 | s1\n 58665: a1 = a1 | a3\n 58668: a1 = a1 << 0x20\n 58671: s1 = a1 | a0\n 58674: a0 = u8 [a4 + 0x9]\n 58677: a1 = u8 [a4 + 0x8]\n 58680: a2 = u8 [a4 + 0xa]\n 58683: a3 = u8 [a4 + 0xb]\n 58686: a0 = a0 << 0x8\n 58689: a0 = a0 | a1\n 58692: a2 = a2 << 0x10\n 58695: a3 = a3 << 0x18\n 58698: a2 = a2 | a3\n 58701: a5 = a2 | a0\n 58704: a1 = u8 [a4 + 0xd]\n 58707: a2 = u8 [a4 + 0xc]\n 58710: a3 = u8 [a4 + 0xe]\n 58713: a0 = u8 [a4 + 0xf]\n 58716: a1 = a1 << 0x8\n 58719: a1 = a1 | a2\n 58722: a3 = a3 << 0x10\n 58725: a0 = a0 << 0x18\n 58728: a0 = a0 | a3\n 58731: a0 = a0 | a1\n 58734: a0 = a0 << 0x20\n 58737: a0 = a0 | a5\n 58740: a1 = u8 [a4 + 0x1]\n 58743: a2 = u8 [a4]\n 58745: a3 = u8 [a4 + 0x2]\n 58748: a5 = u8 [a4 + 0x3]\n 58751: a1 = a1 << 0x8\n 58754: a1 = a1 | a2\n 58757: a3 = a3 << 0x10\n 58760: a5 = a5 << 0x18\n 58763: a3 = a3 | a5\n 58766: a1 = a1 | a3\n 58769: a2 = u8 [a4 + 0x5]\n 58772: a3 = u8 [a4 + 0x4]\n 58775: a5 = u8 [a4 + 0x6]\n 58778: a4 = u8 [a4 + 0x7]\n 58781: a2 = a2 << 0x8\n 58784: a2 = a2 | a3\n 58787: a5 = a5 << 0x10\n 58790: a4 = a4 << 0x18\n 58793: a4 = a4 | a5\n 58796: a2 = a2 | a4\n 58799: a2 = a2 << 0x20\n 58802: a1 = a1 | a2\n 58805: ra = ra & ~a1\n 58808: a2 = t2 & ~a0\n 58811: a0 = u64 [sp + 0xb0]\n 58815: a1 = a0 & ~s1\n 58818: a0 = u64 [sp + 0xb8]\n 58822: a0 = a0 & ~t1\n 58825: a4 = t0 >> 0x3f\n 58828: a3 = u64 [sp + 0x40]\n 58831: a5 = a3 << 0x1\n 58834: a4 = a4 | a5\n 58837: a5 = a3 >> 0x3f\n 58840: a3 = u64 [sp + 0x48]\n 58843: s1 = a3 << 0x1\n 58846: a5 = a5 | s1\n 58849: s1 = a3 >> 0x3f\n 58852: a3 = u64 [sp + 0x18]\n 58855: a3 = a3 << 0x1\n 58858: a3 = a3 | s1\n 58861: a0 = a0 | a3\n 58864: a1 = a1 | a5\n 58867: a2 = a2 | a4\n 58870: a3 = t0 << 0x1\n 58873: a3 = ra | a3\n 58876: t0 = u64 [sp + 0x38]\n 58879: jump @792\n      : @786 (gas: 5)\n 58882: a2 = 0\n 58884: t0 = 0\n 58886: t1 = 0\n 58888: ra = 0\n 58890: fallthrough\n      : @787 (gas: 10)\n 58891: s1 = u64 [sp + 0x50]\n 58894: a3 = u64 [sp + 0x58]\n 58897: a3 = a3 ^ s1\n 58900: a5 = u64 [sp + 0x48]\n 58903: a3 = a3 | a5\n 58906: a0 = u64 [sp + 0x40]\n 58909: a4 = u64 [sp + 0x18]\n 58912: a4 = a4 | a0\n 58915: a3 = a3 | a4\n 58918: jump @790 if a3 == 0\n      : @788 (gas: 27)\n 58922: u64 [sp + 0xa8] = t2\n 58926: a3 = u64 [sp + 0x68]\n 58929: a3 = a3 + a2\n 58932: a2 = a3 <u a2\n 58935: a4 = u64 [sp + 0x60]\n 58938: a4 = a4 + t0\n 58941: a4 = a4 + a2\n 58944: a5 = a4 ^ t0\n 58947: a1 = a4 <u t0\n 58950: a1 = a2 if a5 == 0\n 58953: a2 = u64 [sp + 0x70]\n 58956: a2 = a2 + t1\n 58959: a1 = a1 + a2\n 58962: a5 = a1 <u a2\n 58965: a0 = a2 <u t1\n 58968: a2 = u64 [sp + 0x78]\n 58971: a2 = a2 + ra\n 58974: a0 = a0 + a2\n 58977: a0 = a0 + a5\n 58980: a2 = a3 | a1\n 58983: a0 = a0 | a4\n 58986: a2 = a2 | a0\n 58989: a2 = a2 >> 0x20\n 58992: a0 = a0 | a1\n 58995: a0 = a0 << 0x20\n 58998: a0 = a0 | a2\n 59001: jump @794 if a0 != 0\n      : @789 (gas: 194)\n 59005: i32 a1 = a3 + 0\n 59007: i32 a0 = sp + 0x240\n 59011: ecalli 3 // 'call_data_load'\n 59013: a0 = u64 [sp + 0x258]\n 59017: u64 [sp + 0x98] = a0\n 59021: t1 = u64 [sp + 0x250]\n 59025: t2 = u64 [sp + 0x248]\n 59029: ra = u64 [sp + 0x240]\n 59033: u8 [sp + 383] = 0\n 59037: u8 [sp + 382] = 0\n 59041: u8 [sp + 381] = 0\n 59045: u8 [sp + 380] = 0\n 59049: u8 [sp + 379] = 0\n 59053: u8 [sp + 378] = 0\n 59057: u8 [sp + 377] = 0\n 59061: u8 [sp + 376] = 0\n 59065: u8 [sp + 375] = 0\n 59069: u8 [sp + 374] = 0\n 59073: u8 [sp + 373] = 0\n 59077: u8 [sp + 372] = 0\n 59081: u8 [sp + 371] = 0\n 59085: u8 [sp + 370] = 0\n 59089: u8 [sp + 369] = 0\n 59093: u8 [sp + 368] = 0\n 59097: u8 [sp + 367] = 0\n 59101: u8 [sp + 366] = 0\n 59105: u8 [sp + 365] = 0\n 59109: u8 [sp + 364] = 0\n 59113: u8 [sp + 363] = 0\n 59117: u8 [sp + 362] = 0\n 59121: u8 [sp + 361] = 0\n 59125: u8 [sp + 360] = 0\n 59129: u8 [sp + 359] = 0\n 59133: u8 [sp + 358] = 0\n 59137: u8 [sp + 357] = 0\n 59141: u8 [sp + 356] = 0\n 59145: u8 [sp + 355] = 0\n 59149: u8 [sp + 354] = 0\n 59153: u8 [sp + 353] = 0\n 59157: u8 [sp + 352] = 0\n 59161: u8 [sp + 351] = 0xff\n 59167: u8 [sp + 350] = 0xff\n 59173: u8 [sp + 349] = 0xff\n 59179: u8 [sp + 347] = 0xff\n 59185: u8 [sp + 344] = 0xffffffffffffffff\n 59190: u8 [sp + 343] = 0xff\n 59196: u8 [sp + 342] = 0xff\n 59202: u8 [sp + 341] = 0xff\n 59208: u8 [sp + 339] = 0xff\n 59214: u8 [sp + 336] = 0xffffffffffffffff\n 59219: u8 [sp + 335] = 0xff\n 59225: u8 [sp + 334] = 0xff\n 59231: u8 [sp + 333] = 0xff\n 59237: u8 [sp + 331] = 0xff\n 59243: u8 [sp + 328] = 0xffffffffffffffff\n 59248: u8 [sp + 327] = 0xff\n 59254: u8 [sp + 326] = 0xff\n 59260: u8 [sp + 325] = 0xff\n 59266: u8 [sp + 323] = 0xff\n 59272: u8 [sp + 320] = 0xffffffffffffffff\n 59277: a0 = 0xffffffff\n 59287: u8 [sp + 0x15c] = a0\n 59291: a5 = 0xffffffffffff\n 59301: u8 [sp + 0x15a] = a5\n 59305: a4 = 0xffffffffffffff\n 59315: u8 [sp + 0x159] = a4\n 59319: u8 [sp + 0x154] = a0\n 59323: u8 [sp + 0x152] = a5\n 59327: u8 [sp + 0x151] = a4\n 59331: u8 [sp + 0x14c] = a0\n 59335: u8 [sp + 0x14a] = a5\n 59339: u8 [sp + 0x149] = a4\n 59343: u8 [sp + 0x144] = a0\n 59347: u8 [sp + 0x142] = a5\n 59351: u8 [sp + 0x141] = a4\n 59355: a4 = u64 [sp + 0x50]\n 59358: a4 = a4 & 0x1f\n 59361: a0 = sp + 0x140\n 59365: a4 = a4 + a0\n 59368: a0 = u8 [a4 + 0x19]\n 59371: a5 = u8 [a4 + 0x18]\n 59374: s1 = u8 [a4 + 0x1a]\n 59377: a1 = u8 [a4 + 0x1b]\n 59380: a0 = a0 << 0x8\n 59383: a0 = a0 | a5\n 59386: s1 = s1 << 0x10\n 59389: a1 = a1 << 0x18\n 59392: a1 = a1 | s1\n 59395: a0 = a0 | a1\n 59398: a1 = u8 [a4 + 0x1d]\n 59401: a5 = u8 [a4 + 0x1c]\n 59404: s1 = u8 [a4 + 0x1e]\n 59407: a2 = u8 [a4 + 0x1f]\n 59410: a1 = a1 << 0x8\n 59413: a1 = a1 | a5\n 59416: s1 = s1 << 0x10\n 59419: a2 = a2 << 0x18\n 59422: a2 = a2 | s1\n 59425: a1 = a1 | a2\n 59428: a1 = a1 << 0x20\n 59431: t0 = a1 | a0\n 59434: a0 = u8 [a4 + 0x11]\n 59437: a1 = u8 [a4 + 0x10]\n 59440: a2 = u8 [a4 + 0x12]\n 59443: s1 = u8 [a4 + 0x13]\n 59446: a0 = a0 << 0x8\n 59449: a0 = a0 | a1\n 59452: a2 = a2 << 0x10\n 59455: s1 = s1 << 0x18\n 59458: a2 = a2 | s1\n 59461: a0 = a0 | a2\n 59464: a1 = u8 [a4 + 0x15]\n 59467: a2 = u8 [a4 + 0x14]\n 59470: s1 = u8 [a4 + 0x16]\n 59473: a3 = u8 [a4 + 0x17]\n 59476: a1 = a1 << 0x8\n 59479: a1 = a1 | a2\n 59482: s1 = s1 << 0x10\n 59485: a3 = a3 << 0x18\n 59488: a3 = a3 | s1\n 59491: a1 = a1 | a3\n 59494: a1 = a1 << 0x20\n 59497: s1 = a1 | a0\n 59500: a0 = u8 [a4 + 0x9]\n 59503: a1 = u8 [a4 + 0x8]\n 59506: a2 = u8 [a4 + 0xa]\n 59509: a3 = u8 [a4 + 0xb]\n 59512: a0 = a0 << 0x8\n 59515: a0 = a0 | a1\n 59518: a2 = a2 << 0x10\n 59521: a3 = a3 << 0x18\n 59524: a2 = a2 | a3\n 59527: a5 = a2 | a0\n 59530: a1 = u8 [a4 + 0xd]\n 59533: a2 = u8 [a4 + 0xc]\n 59536: a3 = u8 [a4 + 0xe]\n 59539: a0 = u8 [a4 + 0xf]\n 59542: a1 = a1 << 0x8\n 59545: a1 = a1 | a2\n 59548: a3 = a3 << 0x10\n 59551: a0 = a0 << 0x18\n 59554: a0 = a0 | a3\n 59557: a0 = a0 | a1\n 59560: a0 = a0 << 0x20\n 59563: a0 = a0 | a5\n 59566: a1 = u8 [a4 + 0x1]\n 59569: a2 = u8 [a4]\n 59571: a3 = u8 [a4 + 0x2]\n 59574: a5 = u8 [a4 + 0x3]\n 59577: a1 = a1 << 0x8\n 59580: a1 = a1 | a2\n 59583: a3 = a3 << 0x10\n 59586: a5 = a5 << 0x18\n 59589: a3 = a3 | a5\n 59592: a1 = a1 | a3\n 59595: a2 = u8 [a4 + 0x5]\n 59598: a3 = u8 [a4 + 0x4]\n 59601: a5 = u8 [a4 + 0x6]\n 59604: a4 = u8 [a4 + 0x7]\n 59607: a2 = a2 << 0x8\n 59610: a2 = a2 | a3\n 59613: a5 = a5 << 0x10\n 59616: a4 = a4 << 0x18\n 59619: a4 = a4 | a5\n 59622: a2 = a2 | a4\n 59625: a2 = a2 << 0x20\n 59628: a1 = a1 | a2\n 59631: a1 = ra & ~a1\n 59634: a0 = t2 & ~a0\n 59637: a2 = t1 & ~s1\n 59640: a3 = u64 [sp + 0x98]\n 59644: a3 = a3 & ~t0\n 59647: a4 = u64 [sp + 0xb0]\n 59651: u64 [sp + 0x2b8] = a4\n 59655: a4 = u64 [sp + 0xa8]\n 59659: u64 [sp + 0x2b0] = a4\n 59663: a4 = u64 [sp + 0xb8]\n 59667: u64 [sp + 0x2a8] = a4\n 59671: a4 = u64 [sp + 0xa0]\n 59675: u64 [sp + 0x2a0] = a4\n 59679: u64 [sp + 0x2d8] = a3\n 59683: u64 [sp + 0x2d0] = a2\n 59687: u64 [sp + 0x2c8] = a0\n 59691: u64 [sp + 0x2c0] = a1\n 59695: i32 a1 = sp + 0x2a0\n 59699: i32 a3 = sp + 0x2c0\n 59703: a2 = 0xffffffffffffffff\n 59706: a4 = 0x20\n 59709: a0 = 0\n 59711: ecalli 14 // 'set_storage'\n 59713: s1 = u64 [sp + 0x50]\n 59716: a5 = u64 [sp + 0x48]\n 59719: a0 = u64 [sp + 0x40]\n 59722: fallthrough\n      : @790 (gas: 25)\n 59723: a2 = a5 >> 0x3f\n 59726: a1 = u64 [sp + 0x18]\n 59729: a1 = a1 << 0x1\n 59732: t0 = a1 | a2\n 59735: a1 = a0 >> 0x3f\n 59738: a2 = a5 << 0x1\n 59741: a1 = a1 | a2\n 59744: a2 = s1 >> 0x3f\n 59747: a3 = a0 << 0x1\n 59750: a2 = a2 | a3\n 59753: a3 = s1 << 0x1\n 59756: a3 = a3 + 0x1\n 59759: a4 = u64 [sp + 0x20]\n 59762: u64 [sp + 0x2a8] = a4\n 59766: a4 = u64 [sp + 0x28]\n 59769: u64 [sp + 0x2a0] = a4\n 59773: a4 = u64 [sp + 0x38]\n 59776: u64 [sp + 0x2b0] = a4\n 59780: a4 = u64 [sp + 0x30]\n 59783: u64 [sp + 0x2b8] = a4\n 59787: u64 [sp + 0x2c0] = a3\n 59791: u64 [sp + 0x2c8] = a2\n 59795: u64 [sp + 0x2d0] = a1\n 59799: u64 [sp + 0x2d8] = t0\n 59803: jump @793\n      : @791 (gas: 4)\n 59805: a3 = 0\n 59807: a2 = 0\n 59809: a1 = 0\n 59811: fallthrough\n      : @792 (gas: 12)\n 59812: a4 = u64 [sp + 0x20]\n 59815: u64 [sp + 0x2a8] = a4\n 59819: a4 = u64 [sp + 0x28]\n 59822: u64 [sp + 0x2a0] = a4\n 59826: u64 [sp + 0x2b0] = t0\n 59830: a4 = u64 [sp + 0x30]\n 59833: u64 [sp + 0x2b8] = a4\n 59837: u64 [sp + 0x2c0] = a3\n 59841: u64 [sp + 0x2c8] = a2\n 59845: u64 [sp + 0x2d0] = a1\n 59849: u64 [sp + 0x2d8] = a0\n 59853: fallthrough\n      : @793 (gas: 12)\n 59854: i32 a1 = sp + 0x2a0\n 59858: i32 a3 = sp + 0x2c0\n 59862: a2 = 0xffffffffffffffff\n 59865: a4 = 0x20\n 59868: a0 = 0\n 59870: ecalli 14 // 'set_storage'\n 59872: sp = s0 + 0xfffffffffffffd00\n 59876: ra = u64 [sp + 0x2f8]\n 59880: s0 = u64 [sp + 0x2f0]\n 59884: s1 = u64 [sp + 0x2e8]\n 59888: sp = sp + 0x300\n 59892: ret\n      : @794 (gas: 1)\n 59894: trap\n      : @795 (gas: 8)\n 59895: u64 [sp + 240] = 0\n 59899: u64 [sp + 232] = 0\n 59903: u64 [sp + 224] = 0\n 59907: a0 = 0x4e487b7100000000\n 59917: a1 = sp + 0xe0\n 59921: u64 [sp + 0xf8] = a0\n 59925: a0 = 0\n 59927: ra = 722, jump @23\n      : @796 [@dyn 361] (gas: 8)\n 59934: u64 [sp + 216] = 0\n 59938: u64 [sp + 208] = 0\n 59942: u64 [sp + 192] = 0x41\n 59947: a0 = 0x4\n 59950: a1 = sp + 0xc0\n 59954: u64 [sp + 200] = 0\n 59958: ra = 0x2d6\n 59962: jump @23\n      : @797 (gas: 8)\n 59966: u64 [sp + 304] = 0\n 59970: u64 [sp + 296] = 0\n 59974: u64 [sp + 288] = 0\n 59978: a0 = 0x4e487b7100000000\n 59988: a1 = sp + 0x120\n 59992: u64 [sp + 0x138] = a0\n 59996: a0 = 0\n 59998: ra = 724, jump @23\n      : @798 [@dyn 362] (gas: 7)\n 60005: u64 [sp + 280] = 0\n 60009: u64 [sp + 272] = 0\n 60013: u64 [sp + 256] = 0x22\n 60018: a0 = 0x4\n 60021: a1 = sp + 0x100\n 60025: u64 [sp + 264] = 0\n 60029: ra = 726, jump @23\n      : @799 [@dyn 363] (gas: 3)\n 60036: a1 = 0x24\n 60039: a0 = 0\n 60041: ra = 728, jump @0\n      : @800 [@dyn 364] (gas: 6)\n 60048: i32 a1 = a0 + 0\n 60050: a0 = 0x1\n 60053: a2 = 0x24\n 60056: ra = 0x2da\n 60060: ecalli 12 // 'seal_return'\n 60062: fallthrough\n      : @801 [@dyn 365] (gas: 36)\n 60063: sp = sp + 0xffffffffffffff70\n 60067: u64 [sp + 0x88] = ra\n 60071: u64 [sp + 0x80] = s0\n 60075: u64 [sp + 0x78] = s1\n 60078: s0 = sp + 0x90\n 60082: sp = sp & 0xfffffffffffffff0\n 60085: a3 = u64 [a0]\n 60087: u64 [sp + 0x8] = a3\n 60090: t1 = u64 [a0 + 0x8]\n 60093: t2 = u64 [a0 + 0x10]\n 60096: ra = u64 [a0 + 0x18]\n 60099: t0 = u64 [a1]\n 60101: a4 = u64 [a1 + 0x8]\n 60104: a5 = u64 [a1 + 0x10]\n 60107: a3 = u64 [a1 + 0x18]\n 60110: s1 = u64 [a2]\n 60112: a1 = u64 [a2 + 0x8]\n 60115: a0 = u64 [a2 + 0x10]\n 60118: a2 = u64 [a2 + 0x18]\n 60121: u64 [sp + 0x28] = a2\n 60124: u64 [sp + 0x20] = a0\n 60127: u64 [sp + 0x18] = a1\n 60130: u64 [sp + 0x10] = s1\n 60133: u64 [sp + 0x48] = a3\n 60136: u64 [sp + 0x40] = a5\n 60139: u64 [sp + 0x38] = a4\n 60142: u64 [sp + 0x30] = t0\n 60145: u64 [sp + 0x68] = ra\n 60148: u64 [sp + 0x60] = t2\n 60151: u64 [sp + 0x58] = t1\n 60154: a0 = sp + 0x50\n 60157: a1 = sp + 0x30\n 60160: a2 = sp + 0x10\n 60163: a3 = u64 [sp + 0x8]\n 60166: u64 [sp + 0x50] = a3\n 60169: ra = 732, jump @769\n      : @802 [@dyn 366] (gas: 6)\n 60175: sp = s0 + 0xffffffffffffff70\n 60179: ra = u64 [sp + 0x88]\n 60183: s0 = u64 [sp + 0x80]\n 60187: s1 = u64 [sp + 0x78]\n 60190: sp = sp + 0x90\n 60194: ret\n      : @803 (gas: 17)\n 60196: sp = sp + 0xffffffffffffff18\n 60200: u64 [sp + 0xe0] = ra\n 60204: u64 [sp + 0xd8] = s0\n 60208: u64 [sp + 0xd0] = s1\n 60212: t1 = u64 [a1 + 0x18]\n 60215: t2 = u64 [a1 + 0x10]\n 60218: s0 = u64 [a1 + 0x8]\n 60221: t0 = u64 [a1]\n 60223: a1 = s0 | t1\n 60226: s1 = t0 | t2\n 60229: s1 = s1 | a1\n 60232: s1 = s1 >> 0x20\n 60235: a1 = a1 | t2\n 60238: a1 = a1 << 0x20\n 60241: a1 = a1 | s1\n 60244: u64 [sp] = a0\n 60246: jump @825 if a1 != 0\n      : @804 (gas: 50)\n 60250: a0 = u64 [a5 + 0x18]\n 60253: u64 [sp + 0x70] = a0\n 60256: a0 = u64 [a5 + 0x10]\n 60259: u64 [sp + 0x68] = a0\n 60262: a0 = u64 [a5 + 0x8]\n 60265: u64 [sp + 0x60] = a0\n 60268: a0 = u64 [a5]\n 60270: u64 [sp + 0xc8] = a0\n 60274: a0 = u64 [a4 + 0x18]\n 60277: u64 [sp + 0x18] = a0\n 60280: s1 = t0 + 0x40\n 60283: a0 = s1 <u t0\n 60286: a1 = s0 + a0\n 60289: u64 [sp + 0xb8] = a1\n 60293: u64 [sp + 0x78] = s0\n 60296: s0 = a1 <u s0\n 60299: s0 = a0 if a0 == 0\n 60302: a0 = u64 [a4 + 0x10]\n 60305: u64 [sp + 0x10] = a0\n 60308: a0 = u64 [a4 + 0x8]\n 60311: u64 [sp + 0x8] = a0\n 60314: a0 = u64 [a4]\n 60316: u64 [sp + 0x20] = a0\n 60319: a0 = u64 [a3 + 0x18]\n 60322: u64 [sp + 0xa8] = a0\n 60326: a0 = u64 [a3 + 0x10]\n 60329: u64 [sp + 0xa0] = a0\n 60333: a0 = u64 [a3 + 0x8]\n 60336: u64 [sp + 0x98] = a0\n 60340: a0 = u64 [a3]\n 60342: u64 [sp + 0xc0] = a0\n 60346: a0 = u64 [a2 + 0x18]\n 60349: u64 [sp + 0x48] = a0\n 60352: a0 = u64 [a2 + 0x10]\n 60355: u64 [sp + 0x50] = a0\n 60358: a0 = u64 [a2 + 0x8]\n 60361: u64 [sp + 0x40] = a0\n 60364: a0 = u64 [a2]\n 60366: u64 [sp + 0x58] = a0\n 60369: s0 = s0 + t2\n 60372: u64 [sp + 0x80] = t2\n 60376: a0 = s0 <u t2\n 60379: u64 [sp + 0x88] = t1\n 60383: a0 = a0 + t1\n 60386: u64 [sp + 0xb0] = a0\n 60390: u64 [sp + 0x90] = t0\n 60394: i32 a0 = t0 + 0\n 60396: a1 = 0x20\n 60399: u64 [sp + 0x28] = a0\n 60402: ra = 734, jump @0\n      : @805 [@dyn 367] (gas: 43)\n 60409: u8 [a0 + 31] = 0x40\n 60413: a1 = s1 | s0\n 60416: a2 = u64 [sp + 0xb8]\n 60420: a4 = u64 [sp + 0xb0]\n 60424: a2 = a2 | a4\n 60427: a1 = a1 | a2\n 60430: a1 = a1 >> 0x20\n 60433: u64 [sp + 0x38] = s0\n 60436: a2 = a2 | s0\n 60439: a2 = a2 << 0x20\n 60442: a1 = a1 | a2\n 60445: u8 [a0 + 30] = 0\n 60448: u8 [a0 + 29] = 0\n 60451: u8 [a0 + 28] = 0\n 60454: u8 [a0 + 27] = 0\n 60457: u8 [a0 + 26] = 0\n 60460: u8 [a0 + 25] = 0\n 60463: u8 [a0 + 24] = 0\n 60466: u8 [a0 + 23] = 0\n 60469: u8 [a0 + 22] = 0\n 60472: u8 [a0 + 21] = 0\n 60475: u8 [a0 + 20] = 0\n 60478: u8 [a0 + 19] = 0\n 60481: u8 [a0 + 18] = 0\n 60484: u8 [a0 + 17] = 0\n 60487: u8 [a0 + 16] = 0\n 60490: u8 [a0 + 15] = 0\n 60493: u8 [a0 + 14] = 0\n 60496: u8 [a0 + 13] = 0\n 60499: u8 [a0 + 12] = 0\n 60502: u8 [a0 + 11] = 0\n 60505: u8 [a0 + 10] = 0\n 60508: u8 [a0 + 9] = 0\n 60511: u8 [a0 + 8] = 0\n 60514: u8 [a0 + 7] = 0\n 60517: u8 [a0 + 6] = 0\n 60520: u8 [a0 + 5] = 0\n 60523: u8 [a0 + 4] = 0\n 60526: u8 [a0 + 3] = 0\n 60529: u8 [a0 + 2] = 0\n 60532: u8 [a0 + 1] = 0\n 60535: u8 [a0 + 0] = 0\n 60537: jump @825 if a1 != 0\n      : @806 (gas: 4)\n 60541: u64 [sp + 0x30] = s1\n 60544: i32 a0 = s1 + 0\n 60546: a1 = 0x20\n 60549: ra = 736, jump @0\n      : @807 [@dyn 368] (gas: 80)\n 60556: a5 = u64 [sp + 0xc0]\n 60560: a1 = reverse a5\n 60562: a2 = a1 >> 0x38\n 60565: u8 [a0 + 0x1f] = a2\n 60568: a2 = a1 >> 0x30\n 60571: u8 [a0 + 0x1e] = a2\n 60574: a2 = a1 >> 0x28\n 60577: u8 [a0 + 0x1d] = a2\n 60580: a2 = a1 >> 0x20\n 60583: u8 [a0 + 0x1c] = a2\n 60586: a2 = a1 >> 0x18\n 60589: u8 [a0 + 0x1b] = a2\n 60592: a2 = a1 >> 0x10\n 60595: u8 [a0 + 0x1a] = a2\n 60598: a2 = a1 >> 0x8\n 60601: u8 [a0 + 0x19] = a2\n 60604: t1 = u64 [sp + 0x98]\n 60608: a2 = reverse t1\n 60610: u8 [a0 + 0x18] = a1\n 60613: a1 = a2 >> 0x38\n 60616: u8 [a0 + 0x17] = a1\n 60619: a1 = a2 >> 0x30\n 60622: u8 [a0 + 0x16] = a1\n 60625: a1 = a2 >> 0x28\n 60628: u8 [a0 + 0x15] = a1\n 60631: a1 = a2 >> 0x20\n 60634: u8 [a0 + 0x14] = a1\n 60637: a1 = a2 >> 0x18\n 60640: u8 [a0 + 0x13] = a1\n 60643: a1 = a2 >> 0x10\n 60646: u8 [a0 + 0x12] = a1\n 60649: a4 = u64 [sp + 0xa0]\n 60653: a3 = reverse a4\n 60655: u8 [a0 + 0x10] = a2\n 60658: a2 = a2 >> 0x8\n 60661: u8 [a0 + 0x11] = a2\n 60664: a1 = a3 >> 0x38\n 60667: u8 [a0 + 0xf] = a1\n 60670: a1 = a3 >> 0x30\n 60673: u8 [a0 + 0xe] = a1\n 60676: a1 = a3 >> 0x28\n 60679: u8 [a0 + 0xd] = a1\n 60682: a1 = a3 >> 0x20\n 60685: u8 [a0 + 0xc] = a1\n 60688: a1 = a3 >> 0x18\n 60691: u8 [a0 + 0xb] = a1\n 60694: a1 = a3 >> 0x10\n 60697: u8 [a0 + 0xa] = a1\n 60700: s1 = u64 [sp + 0xa8]\n 60704: a1 = reverse s1\n 60706: u8 [a0 + 0x8] = a3\n 60709: a3 = a3 >> 0x8\n 60712: u8 [a0 + 0x9] = a3\n 60715: a2 = a1 >> 0x38\n 60718: u8 [a0 + 0x7] = a2\n 60721: a2 = a1 >> 0x30\n 60724: u8 [a0 + 0x6] = a2\n 60727: a2 = a1 >> 0x28\n 60730: u8 [a0 + 0x5] = a2\n 60733: a2 = a1 >> 0x20\n 60736: u8 [a0 + 0x4] = a2\n 60739: a2 = a1 >> 0x18\n 60742: u8 [a0 + 0x3] = a2\n 60745: a2 = a1 >> 0x10\n 60748: u8 [a0 + 0x2] = a2\n 60751: a2 = u64 [sp + 0x48]\n 60754: s0 = u64 [sp + 0x40]\n 60757: s0 = s0 | a2\n 60760: t0 = u64 [sp + 0x58]\n 60763: a2 = u64 [sp + 0x50]\n 60766: a3 = t0 | a2\n 60769: a3 = a3 | s0\n 60772: a2 = a2 | s0\n 60775: a3 = a3 >> 0x20\n 60778: a2 = a2 << 0x20\n 60781: a2 = a2 | a3\n 60784: u8 [a0] = a1\n 60786: a1 = a1 >> 0x8\n 60789: u8 [a0 + 0x1] = a1\n 60792: jump @825 if a2 != 0\n      : @808 (gas: 12)\n 60796: a3 = a4\n 60798: a0 = a5 | a3\n 60801: a1 = t1 | s1\n 60804: a0 = a0 | a1\n 60807: a0 = a0 >> 0x20\n 60810: a1 = a1 | a3\n 60813: a1 = a1 << 0x20\n 60816: a0 = a0 | a1\n 60819: a2 = u64 [sp + 0x90]\n 60823: a3 = u64 [sp + 0x88]\n 60827: a4 = u64 [sp + 0x80]\n 60831: jump @825 if a0 != 0\n      : @809 (gas: 10)\n 60835: a0 = u64 [sp + 0x38]\n 60838: a1 = u64 [sp + 0xb0]\n 60842: a0 = a0 | a1\n 60845: a1 = 0xffffffe0\n 60855: s1 = u64 [sp + 0x30]\n 60858: a1 = s1 <u a1\n 60861: s1 = u64 [sp + 0xb8]\n 60865: a1 = 0 if s1 != 0\n 60867: a1 = 0 if a0 != 0\n 60869: jump @825 if a1 == 0\n      : @810 (gas: 17)\n 60873: s1 = a2 + 0x60\n 60876: a0 = s1 <u a2\n 60879: a1 = u64 [sp + 0x78]\n 60882: s0 = a1 + a0\n 60885: a1 = s0 <u a1\n 60888: a1 = a0 if a0 == 0\n 60891: a1 = a1 + a4\n 60894: u64 [sp + 0xb8] = a1\n 60898: a0 = a1 <u a4\n 60901: a0 = a0 + a3\n 60904: u64 [sp + 0xb0] = a0\n 60908: i32 t0 = t0 + 0\n 60910: u64 [sp + 0x58] = t0\n 60913: i32 a0 = s1 + 0\n 60915: i32 a1 = a5 + 0\n 60917: u64 [sp + 0x50] = a1\n 60920: ra = 738, jump @0\n      : @811 [@dyn 369] (gas: 5)\n 60927: i32 a0 = a0 + 0\n 60929: a1 = u64 [sp + 0x50]\n 60932: a2 = u64 [sp + 0x58]\n 60935: ecalli 2 // 'call_data_copy'\n 60937: fallthrough\n      : @812 (gas: 30)\n 60938: a0 = u64 [sp + 0xc0]\n 60942: a0 = a0 + s1\n 60945: u64 [sp + 0x58] = s1\n 60948: a1 = a0 <u s1\n 60951: a2 = u64 [sp + 0x98]\n 60955: a2 = a2 + s0\n 60958: a2 = a2 + a1\n 60961: a3 = a2 ^ s0\n 60964: u64 [sp + 0x98] = s0\n 60968: a4 = a2 <u s0\n 60971: a4 = a1 if a3 == 0\n 60974: a1 = u64 [sp + 0xa0]\n 60978: a5 = u64 [sp + 0xb8]\n 60982: a1 = a1 + a5\n 60985: a4 = a4 + a1\n 60988: a3 = a4 <u a1\n 60991: a1 = a1 <u a5\n 60994: a5 = u64 [sp + 0xa8]\n 60998: s1 = u64 [sp + 0xb0]\n 61002: a5 = a5 + s1\n 61005: a1 = a1 + a5\n 61008: a1 = a1 + a3\n 61011: a3 = a0 | a4\n 61014: a1 = a1 | a2\n 61017: a3 = a3 | a1\n 61020: a3 = a3 >> 0x20\n 61023: a1 = a1 | a4\n 61026: a1 = a1 << 0x20\n 61029: a1 = a1 | a3\n 61032: jump @825 if a1 != 0\n      : @813 (gas: 4)\n 61036: s0 = 0x1ffffffe0\n 61046: i32 a0 = a0 + 0\n 61048: a1 = 0x20\n 61051: ra = 740, jump @0\n      : @814 [@dyn 370] (gas: 78)\n 61058: u8 [a0 + 31] = 0\n 61061: u8 [a0 + 30] = 0\n 61064: u8 [a0 + 29] = 0\n 61067: u8 [a0 + 28] = 0\n 61070: u8 [a0 + 27] = 0\n 61073: u8 [a0 + 26] = 0\n 61076: u8 [a0 + 25] = 0\n 61079: u8 [a0 + 24] = 0\n 61082: u8 [a0 + 23] = 0\n 61085: u8 [a0 + 22] = 0\n 61088: u8 [a0 + 21] = 0\n 61091: u8 [a0 + 20] = 0\n 61094: u8 [a0 + 19] = 0\n 61097: u8 [a0 + 18] = 0\n 61100: u8 [a0 + 17] = 0\n 61103: u8 [a0 + 16] = 0\n 61106: u8 [a0 + 15] = 0\n 61109: u8 [a0 + 14] = 0\n 61112: u8 [a0 + 13] = 0\n 61115: u8 [a0 + 12] = 0\n 61118: u8 [a0 + 11] = 0\n 61121: u8 [a0 + 10] = 0\n 61124: u8 [a0 + 9] = 0\n 61127: u8 [a0 + 8] = 0\n 61130: u8 [a0 + 7] = 0\n 61133: u8 [a0 + 6] = 0\n 61136: u8 [a0 + 5] = 0\n 61139: u8 [a0 + 4] = 0\n 61142: u8 [a0 + 3] = 0\n 61145: u8 [a0 + 2] = 0\n 61148: u8 [a0 + 1] = 0\n 61151: u8 [a0 + 0] = 0\n 61153: a0 = u64 [sp + 0xc0]\n 61157: a0 = a0 + 0x1f\n 61160: u64 [sp + 0x50] = s0\n 61163: a0 = a0 & s0\n 61166: s1 = u64 [sp + 0x58]\n 61169: a3 = a0 + s1\n 61172: a0 = a3 <u a0\n 61175: a1 = u64 [sp + 0x98]\n 61179: a2 = a1 + a0\n 61182: a0 = 0 if a2 != 0\n 61184: a1 = u64 [sp + 0xb8]\n 61188: a4 = a1 + a0\n 61191: u64 [sp + 0xc0] = a4\n 61195: a0 = a4 <u a1\n 61198: a1 = u64 [sp + 0xb0]\n 61202: s1 = a1 + a0\n 61205: u64 [sp + 0xb8] = s1\n 61209: a5 = u64 [sp + 0x78]\n 61212: a0 = a2 ^ a5\n 61215: a1 = a2 <u a5\n 61218: t1 = a2\n 61220: t0 = u64 [sp + 0x90]\n 61224: a2 = a3 <u t0\n 61227: s0 = a3\n 61229: a1 = a2 if a0 == 0\n 61232: a3 = u64 [sp + 0x80]\n 61236: a0 = a4 - a3\n 61239: a3 = a4 <u a3\n 61242: a4 = u64 [sp + 0x88]\n 61246: a3 = a3 + a4\n 61249: a4 = a0 <u a1\n 61252: a3 = s1 - a3\n 61255: a3 = a3 - a4\n 61258: u64 [sp + 0xb0] = a3\n 61262: a0 = a0 - a1\n 61265: u64 [sp + 0xa8] = a0\n 61269: a2 = a2 + a5\n 61272: a0 = t1 - a2\n 61275: u64 [sp + 0xa0] = a0\n 61279: s1 = t1\n 61281: a0 = s0 - t0\n 61284: u64 [sp + 0x98] = a0\n 61288: a0 = u64 [sp + 0x28]\n 61291: i32 a0 = a0 + 0x20\n 61294: a1 = 0x20\n 61297: ra = 742, jump @0\n      : @815 [@dyn 371] (gas: 79)\n 61304: a1 = u64 [sp + 0xb0]\n 61308: a1 = reverse a1\n 61310: a2 = u64 [sp + 0xa8]\n 61314: a2 = reverse a2\n 61316: a3 = u64 [sp + 0xa0]\n 61320: a3 = reverse a3\n 61322: a4 = u64 [sp + 0x98]\n 61326: a4 = reverse a4\n 61328: u8 [a0 + 0x18] = a4\n 61331: a5 = a4 >> 0x38\n 61334: u8 [a0 + 0x1f] = a5\n 61337: a5 = a4 >> 0x30\n 61340: u8 [a0 + 0x1e] = a5\n 61343: a5 = a4 >> 0x28\n 61346: u8 [a0 + 0x1d] = a5\n 61349: a5 = a4 >> 0x20\n 61352: u8 [a0 + 0x1c] = a5\n 61355: a5 = a4 >> 0x18\n 61358: u8 [a0 + 0x1b] = a5\n 61361: a5 = a4 >> 0x10\n 61364: u8 [a0 + 0x1a] = a5\n 61367: a4 = a4 >> 0x8\n 61370: u8 [a0 + 0x19] = a4\n 61373: u8 [a0 + 0x10] = a3\n 61376: a4 = a3 >> 0x38\n 61379: u8 [a0 + 0x17] = a4\n 61382: a4 = a3 >> 0x30\n 61385: u8 [a0 + 0x16] = a4\n 61388: a4 = a3 >> 0x28\n 61391: u8 [a0 + 0x15] = a4\n 61394: a4 = a3 >> 0x20\n 61397: u8 [a0 + 0x14] = a4\n 61400: a4 = a3 >> 0x18\n 61403: u8 [a0 + 0x13] = a4\n 61406: a4 = a3 >> 0x10\n 61409: u8 [a0 + 0x12] = a4\n 61412: a3 = a3 >> 0x8\n 61415: u8 [a0 + 0x11] = a3\n 61418: u8 [a0 + 0x8] = a2\n 61421: a3 = a2 >> 0x38\n 61424: u8 [a0 + 0xf] = a3\n 61427: a3 = a2 >> 0x30\n 61430: u8 [a0 + 0xe] = a3\n 61433: a3 = a2 >> 0x28\n 61436: u8 [a0 + 0xd] = a3\n 61439: a3 = a2 >> 0x20\n 61442: u8 [a0 + 0xc] = a3\n 61445: a3 = a2 >> 0x18\n 61448: u8 [a0 + 0xb] = a3\n 61451: a3 = a2 >> 0x10\n 61454: u8 [a0 + 0xa] = a3\n 61457: a2 = a2 >> 0x8\n 61460: u8 [a0 + 0x9] = a2\n 61463: u8 [a0] = a1\n 61465: a2 = a1 >> 0x38\n 61468: u8 [a0 + 0x7] = a2\n 61471: a2 = a1 >> 0x30\n 61474: u8 [a0 + 0x6] = a2\n 61477: a2 = a1 >> 0x28\n 61480: u8 [a0 + 0x5] = a2\n 61483: a2 = a1 >> 0x20\n 61486: u8 [a0 + 0x4] = a2\n 61489: a2 = a1 >> 0x18\n 61492: u8 [a0 + 0x3] = a2\n 61495: a2 = a1 >> 0x10\n 61498: u8 [a0 + 0x2] = a2\n 61501: a1 = a1 >> 0x8\n 61504: a3 = u64 [sp + 0xc0]\n 61508: a2 = s0 | a3\n 61511: u64 [sp + 0xb0] = s1\n 61515: a4 = u64 [sp + 0xb8]\n 61519: a4 = a4 | s1\n 61522: a2 = a2 | a4\n 61525: a2 = a2 >> 0x20\n 61528: a3 = a3 | a4\n 61531: a3 = a3 << 0x20\n 61534: a2 = a2 | a3\n 61537: u8 [a0 + 0x1] = a1\n 61540: jump @825 if a2 != 0\n      : @816 (gas: 4)\n 61544: u64 [sp + 0xa8] = s0\n 61548: i32 a0 = s0 + 0\n 61550: a1 = 0x20\n 61553: ra = 744, jump @0\n      : @817 [@dyn 372] (gas: 80)\n 61560: t0 = u64 [sp + 0xc8]\n 61564: a1 = reverse t0\n 61566: a2 = a1 >> 0x38\n 61569: u8 [a0 + 0x1f] = a2\n 61572: a2 = a1 >> 0x30\n 61575: u8 [a0 + 0x1e] = a2\n 61578: a2 = a1 >> 0x28\n 61581: u8 [a0 + 0x1d] = a2\n 61584: a2 = a1 >> 0x20\n 61587: u8 [a0 + 0x1c] = a2\n 61590: a2 = a1 >> 0x18\n 61593: u8 [a0 + 0x1b] = a2\n 61596: a2 = a1 >> 0x10\n 61599: u8 [a0 + 0x1a] = a2\n 61602: a2 = a1 >> 0x8\n 61605: u8 [a0 + 0x19] = a2\n 61608: t1 = u64 [sp + 0x60]\n 61611: a2 = reverse t1\n 61613: u8 [a0 + 0x18] = a1\n 61616: a1 = a2 >> 0x38\n 61619: u8 [a0 + 0x17] = a1\n 61622: a1 = a2 >> 0x30\n 61625: u8 [a0 + 0x16] = a1\n 61628: a1 = a2 >> 0x28\n 61631: u8 [a0 + 0x15] = a1\n 61634: a1 = a2 >> 0x20\n 61637: u8 [a0 + 0x14] = a1\n 61640: a1 = a2 >> 0x18\n 61643: u8 [a0 + 0x13] = a1\n 61646: a1 = a2 >> 0x10\n 61649: u8 [a0 + 0x12] = a1\n 61652: s1 = u64 [sp + 0x68]\n 61655: a3 = reverse s1\n 61657: u8 [a0 + 0x10] = a2\n 61660: a2 = a2 >> 0x8\n 61663: u8 [a0 + 0x11] = a2\n 61666: a1 = a3 >> 0x38\n 61669: u8 [a0 + 0xf] = a1\n 61672: a1 = a3 >> 0x30\n 61675: u8 [a0 + 0xe] = a1\n 61678: a1 = a3 >> 0x28\n 61681: u8 [a0 + 0xd] = a1\n 61684: a1 = a3 >> 0x20\n 61687: u8 [a0 + 0xc] = a1\n 61690: a1 = a3 >> 0x18\n 61693: u8 [a0 + 0xb] = a1\n 61696: a1 = a3 >> 0x10\n 61699: u8 [a0 + 0xa] = a1\n 61702: a5 = u64 [sp + 0x70]\n 61705: a1 = reverse a5\n 61707: u8 [a0 + 0x8] = a3\n 61710: a3 = a3 >> 0x8\n 61713: u8 [a0 + 0x9] = a3\n 61716: a2 = a1 >> 0x38\n 61719: u8 [a0 + 0x7] = a2\n 61722: a2 = a1 >> 0x30\n 61725: u8 [a0 + 0x6] = a2\n 61728: a2 = a1 >> 0x28\n 61731: u8 [a0 + 0x5] = a2\n 61734: a2 = a1 >> 0x20\n 61737: u8 [a0 + 0x4] = a2\n 61740: a2 = a1 >> 0x18\n 61743: u8 [a0 + 0x3] = a2\n 61746: a2 = a1 >> 0x10\n 61749: u8 [a0 + 0x2] = a2\n 61752: a2 = u64 [sp + 0x18]\n 61755: s0 = u64 [sp + 0x8]\n 61758: s0 = s0 | a2\n 61761: t2 = u64 [sp + 0x20]\n 61764: a2 = u64 [sp + 0x10]\n 61767: a3 = t2 | a2\n 61770: a3 = a3 | s0\n 61773: a2 = a2 | s0\n 61776: a3 = a3 >> 0x20\n 61779: a2 = a2 << 0x20\n 61782: a2 = a2 | a3\n 61785: u8 [a0] = a1\n 61787: a1 = a1 >> 0x8\n 61790: u8 [a0 + 0x1] = a1\n 61793: jump @825 if a2 != 0\n      : @818 (gas: 8)\n 61797: a0 = t0 | s1\n 61800: a1 = t1 | a5\n 61803: a0 = a0 | a1\n 61806: a0 = a0 >> 0x20\n 61809: a1 = a1 | s1\n 61812: a1 = a1 << 0x20\n 61815: a0 = a0 | a1\n 61818: jump @825 if a0 != 0\n      : @819 (gas: 10)\n 61822: a2 = u64 [sp + 0xc0]\n 61826: a4 = u64 [sp + 0xb8]\n 61830: a0 = a2 | a4\n 61833: a1 = 0xffffffe0\n 61843: a3 = u64 [sp + 0xa8]\n 61847: a1 = a3 <u a1\n 61850: a5 = u64 [sp + 0xb0]\n 61854: a1 = 0 if a5 != 0\n 61856: a1 = 0 if a0 != 0\n 61858: jump @825 if a1 == 0\n      : @820 (gas: 16)\n 61862: s1 = a3 + 0x20\n 61865: a0 = s1 <u a3\n 61868: s0 = a5 + a0\n 61871: a1 = s0 <u a5\n 61874: a1 = a0 if a0 == 0\n 61877: a1 = a1 + a2\n 61880: u64 [sp + 0xb0] = a1\n 61884: a0 = a1 <u a2\n 61887: a0 = a0 + a4\n 61890: u64 [sp + 0xc0] = a0\n 61894: i32 t2 = t2 + 0\n 61896: u64 [sp + 0xb8] = t2\n 61900: i32 a0 = s1 + 0\n 61902: a1 = i32 [sp + 0xc8]\n 61906: u64 [sp + 0xa8] = a1\n 61910: ra = 746, jump @0\n      : @821 [@dyn 373] (gas: 5)\n 61917: i32 a0 = a0 + 0\n 61919: a1 = u64 [sp + 0xa8]\n 61923: a2 = u64 [sp + 0xb8]\n 61927: ecalli 2 // 'call_data_copy'\n 61929: fallthrough\n      : @822 (gas: 30)\n 61930: a0 = u64 [sp + 0xc8]\n 61934: a0 = a0 + s1\n 61937: u64 [sp + 0xa8] = s1\n 61941: a1 = a0 <u s1\n 61944: s1 = u64 [sp + 0xc0]\n 61948: a2 = u64 [sp + 0x60]\n 61951: a2 = a2 + s0\n 61954: a2 = a2 + a1\n 61957: a3 = a2 ^ s0\n 61960: u64 [sp + 0xb8] = s0\n 61964: a4 = a2 <u s0\n 61967: s0 = u64 [sp + 0xb0]\n 61971: a4 = a1 if a3 == 0\n 61974: a1 = u64 [sp + 0x68]\n 61977: a1 = a1 + s0\n 61980: a4 = a4 + a1\n 61983: a3 = a4 <u a1\n 61986: a1 = a1 <u s0\n 61989: a5 = u64 [sp + 0x70]\n 61992: a5 = a5 + s1\n 61995: a1 = a1 + a5\n 61998: a1 = a1 + a3\n 62001: a3 = a0 | a4\n 62004: a1 = a1 | a2\n 62007: a3 = a3 | a1\n 62010: a3 = a3 >> 0x20\n 62013: a1 = a1 | a4\n 62016: a1 = a1 << 0x20\n 62019: a1 = a1 | a3\n 62022: jump @825 if a1 != 0\n      : @823 (gas: 3)\n 62026: i32 a0 = a0 + 0\n 62028: a1 = 0x20\n 62031: ra = 748, jump @0\n      : @824 [@dyn 374] (gas: 56)\n 62038: u8 [a0 + 31] = 0\n 62041: u8 [a0 + 30] = 0\n 62044: u8 [a0 + 29] = 0\n 62047: u8 [a0 + 28] = 0\n 62050: u8 [a0 + 27] = 0\n 62053: u8 [a0 + 26] = 0\n 62056: u8 [a0 + 25] = 0\n 62059: u8 [a0 + 24] = 0\n 62062: u8 [a0 + 23] = 0\n 62065: u8 [a0 + 22] = 0\n 62068: u8 [a0 + 21] = 0\n 62071: u8 [a0 + 20] = 0\n 62074: u8 [a0 + 19] = 0\n 62077: u8 [a0 + 18] = 0\n 62080: u8 [a0 + 17] = 0\n 62083: u8 [a0 + 16] = 0\n 62086: u8 [a0 + 15] = 0\n 62089: u8 [a0 + 14] = 0\n 62092: u8 [a0 + 13] = 0\n 62095: u8 [a0 + 12] = 0\n 62098: u8 [a0 + 11] = 0\n 62101: u8 [a0 + 10] = 0\n 62104: u8 [a0 + 9] = 0\n 62107: u8 [a0 + 8] = 0\n 62110: u8 [a0 + 7] = 0\n 62113: u8 [a0 + 6] = 0\n 62116: u8 [a0 + 5] = 0\n 62119: u8 [a0 + 4] = 0\n 62122: u8 [a0 + 3] = 0\n 62125: u8 [a0 + 2] = 0\n 62128: u8 [a0 + 1] = 0\n 62131: u8 [a0 + 0] = 0\n 62133: a0 = u64 [sp + 0xc8]\n 62137: a0 = a0 + 0x1f\n 62140: a1 = u64 [sp + 0x50]\n 62143: a0 = a0 & a1\n 62146: a1 = u64 [sp + 0xa8]\n 62150: a0 = a0 + a1\n 62153: a1 = a0 <u a1\n 62156: a3 = u64 [sp + 0xb8]\n 62160: a2 = a3 + a1\n 62163: a3 = a2 <u a3\n 62166: a3 = a1 if a1 == 0\n 62169: a3 = a3 + s0\n 62172: a1 = a3 <u s0\n 62175: a1 = a1 + s1\n 62178: a4 = u64 [sp]\n 62180: u64 [a4] = a0\n 62182: u64 [a4 + 0x8] = a2\n 62185: u64 [a4 + 0x10] = a3\n 62188: u64 [a4 + 0x18] = a1\n 62191: ra = u64 [sp + 0xe0]\n 62195: s0 = u64 [sp + 0xd8]\n 62199: s1 = u64 [sp + 0xd0]\n 62203: sp = sp + 0xe8\n 62207: ret\n      : @825 (gas: 1)\n 62209: trap\n      : @826 (gas: 18)\n 62210: sp = sp + 0xfffffffffffffd20\n 62214: u64 [sp + 0x2d8] = ra\n 62218: u64 [sp + 0x2d0] = s0\n 62222: u64 [sp + 0x2c8] = s1\n 62226: s0 = sp + 0x2e0\n 62230: sp = sp & 0xffffffffffffffe0\n 62233: t0 = u64 [a4 + 0x10]\n 62236: t1 = u64 [a4 + 0x18]\n 62239: s1 = u64 [a4 + 0x8]\n 62242: a5 = u64 [a4]\n 62244: u64 [sp + 0xa8] = s1\n 62248: u64 [sp + 0xa0] = t1\n 62252: a4 = s1 | t1\n 62255: u64 [sp + 0xb8] = t0\n 62259: u64 [sp + 0xb0] = a5\n 62263: a5 = a5 | t0\n 62266: a4 = a4 | a5\n 62269: jump @838 if a4 == 0\n      : @827 (gas: 34)\n 62273: a4 = u64 [a3 + 0x18]\n 62276: u64 [sp + 0x40] = a4\n 62279: a4 = u64 [a3 + 0x10]\n 62282: u64 [sp + 0x48] = a4\n 62285: a4 = u64 [a3 + 0x8]\n 62288: u64 [sp + 0x50] = a4\n 62291: a3 = u64 [a3]\n 62293: u64 [sp + 0x58] = a3\n 62296: a3 = u64 [a2 + 0x18]\n 62299: u64 [sp + 0x60] = a3\n 62302: a3 = u64 [a2 + 0x10]\n 62305: u64 [sp + 0x68] = a3\n 62308: a3 = u64 [a2 + 0x8]\n 62311: u64 [sp + 0x70] = a3\n 62314: a2 = u64 [a2]\n 62316: u64 [sp + 0x78] = a2\n 62319: a2 = u64 [a1 + 0x18]\n 62322: u64 [sp + 0x80] = a2\n 62326: a2 = u64 [a1 + 0x10]\n 62329: u64 [sp + 0x88] = a2\n 62333: a2 = u64 [a1 + 0x8]\n 62336: u64 [sp + 0x90] = a2\n 62340: a1 = u64 [a1]\n 62342: u64 [sp + 0x98] = a1\n 62346: s1 = u64 [a0 + 0x18]\n 62349: a1 = u64 [a0 + 0x10]\n 62352: u64 [sp + 0x28] = a1\n 62355: a1 = u64 [a0 + 0x8]\n 62358: u64 [sp + 0x30] = a1\n 62361: a0 = u64 [a0]\n 62363: u64 [sp + 0x38] = a0\n 62366: a1 = 0x20\n 62369: a0 = 0\n 62371: ra = 750, jump @0\n      : @828 [@dyn 375] (gas: 74)\n 62378: a2 = reverse s1\n 62380: a1 = u64 [sp + 0x28]\n 62383: a3 = reverse a1\n 62385: a1 = u64 [sp + 0x30]\n 62388: a5 = reverse a1\n 62390: a1 = u64 [sp + 0x38]\n 62393: a4 = reverse a1\n 62395: a1 = a4 >> 0x38\n 62398: u8 [a0 + 0x1f] = a1\n 62401: a1 = a4 >> 0x30\n 62404: u8 [a0 + 0x1e] = a1\n 62407: a1 = a4 >> 0x28\n 62410: u8 [a0 + 0x1d] = a1\n 62413: a1 = a4 >> 0x20\n 62416: u8 [a0 + 0x1c] = a1\n 62419: a1 = a4 >> 0x18\n 62422: u8 [a0 + 0x1b] = a1\n 62425: a1 = a4 >> 0x10\n 62428: u8 [a0 + 0x1a] = a1\n 62431: a1 = a4 >> 0x8\n 62434: u8 [a0 + 0x19] = a1\n 62437: u64 [sp + 0x10] = a4\n 62440: u8 [a0 + 0x18] = a4\n 62443: u8 [a0 + 0x10] = a5\n 62446: a1 = a5 >> 0x38\n 62449: u8 [a0 + 0x17] = a1\n 62452: a1 = a5 >> 0x30\n 62455: u8 [a0 + 0x16] = a1\n 62458: a1 = a5 >> 0x28\n 62461: u8 [a0 + 0x15] = a1\n 62464: a1 = a5 >> 0x20\n 62467: u8 [a0 + 0x14] = a1\n 62470: a1 = a5 >> 0x18\n 62473: u8 [a0 + 0x13] = a1\n 62476: a1 = a5 >> 0x10\n 62479: u8 [a0 + 0x12] = a1\n 62482: u64 [sp + 0x8] = a5\n 62485: a1 = a5 >> 0x8\n 62488: u8 [a0 + 0x11] = a1\n 62491: u8 [a0 + 0x8] = a3\n 62494: a1 = a3 >> 0x38\n 62497: u8 [a0 + 0xf] = a1\n 62500: a1 = a3 >> 0x30\n 62503: u8 [a0 + 0xe] = a1\n 62506: a1 = a3 >> 0x28\n 62509: u8 [a0 + 0xd] = a1\n 62512: a1 = a3 >> 0x20\n 62515: u8 [a0 + 0xc] = a1\n 62518: a1 = a3 >> 0x18\n 62521: u8 [a0 + 0xb] = a1\n 62524: a1 = a3 >> 0x10\n 62527: u8 [a0 + 0xa] = a1\n 62530: u64 [sp + 0x18] = a3\n 62533: a1 = a3 >> 0x8\n 62536: u8 [a0 + 0x9] = a1\n 62539: u8 [a0] = a2\n 62541: a1 = a2 >> 0x38\n 62544: u8 [a0 + 0x7] = a1\n 62547: a1 = a2 >> 0x30\n 62550: u8 [a0 + 0x6] = a1\n 62553: a1 = a2 >> 0x28\n 62556: u8 [a0 + 0x5] = a1\n 62559: a1 = a2 >> 0x20\n 62562: u8 [a0 + 0x4] = a1\n 62565: a1 = a2 >> 0x18\n 62568: u8 [a0 + 0x3] = a1\n 62571: a1 = a2 >> 0x10\n 62574: u8 [a0 + 0x2] = a1\n 62577: u64 [sp + 0x20] = a2\n 62580: a1 = a2 >> 0x8\n 62583: u8 [a0 + 0x1] = a1\n 62586: a0 = 0x20\n 62589: a1 = 0x20\n 62592: ra = 752, jump @0\n      : @829 [@dyn 376] (gas: 35)\n 62599: u8 [a0 + 31] = 0\n 62602: u8 [a0 + 30] = 0\n 62605: u8 [a0 + 29] = 0\n 62608: u8 [a0 + 28] = 0\n 62611: u8 [a0 + 27] = 0\n 62614: u8 [a0 + 26] = 0\n 62617: u8 [a0 + 25] = 0\n 62620: u8 [a0 + 24] = 0\n 62623: u8 [a0 + 23] = 0\n 62626: u8 [a0 + 22] = 0\n 62629: u8 [a0 + 21] = 0\n 62632: u8 [a0 + 20] = 0\n 62635: u8 [a0 + 19] = 0\n 62638: u8 [a0 + 18] = 0\n 62641: u8 [a0 + 17] = 0\n 62644: u8 [a0 + 16] = 0\n 62647: u8 [a0 + 15] = 0\n 62650: u8 [a0 + 14] = 0\n 62653: u8 [a0 + 13] = 0\n 62656: u8 [a0 + 12] = 0\n 62659: u8 [a0 + 11] = 0\n 62662: u8 [a0 + 10] = 0\n 62665: u8 [a0 + 9] = 0\n 62668: u8 [a0 + 8] = 0\n 62671: u8 [a0 + 7] = 0\n 62674: u8 [a0 + 6] = 0\n 62677: u8 [a0 + 5] = 0\n 62680: u8 [a0 + 4] = 0\n 62683: u8 [a0 + 3] = 0\n 62686: u8 [a0 + 2] = 0\n 62689: u8 [a0 + 1] = 0\n 62692: u8 [a0 + 0] = 0\n 62694: a1 = 0x40\n 62697: a0 = 0\n 62699: ra = 754, jump @0\n      : @830 [@dyn 377] (gas: 47)\n 62706: i32 a0 = a0 + 0\n 62708: i32 a2 = sp + 0x280\n 62712: a1 = 0x40\n 62715: ecalli 8 // 'hash_keccak_256'\n 62717: a0 = u64 [sp + 0x280]\n 62721: a1 = u64 [sp + 0x288]\n 62725: a2 = u64 [sp + 0x290]\n 62729: a3 = u64 [sp + 0x298]\n 62733: a5 = reverse a0\n 62735: u64 [sp + 0x38] = a5\n 62738: a4 = reverse a1\n 62740: u64 [sp + 0x30] = a4\n 62743: a2 = reverse a2\n 62745: u64 [sp + 0x28] = a2\n 62748: s1 = reverse a3\n 62750: t0 = s1 + 0x2\n 62753: a1 = t0 <u s1\n 62756: a0 = a2 + a1\n 62759: a3 = a0 <u a2\n 62762: a3 = a1 if a1 == 0\n 62765: a3 = a3 + a4\n 62768: a1 = a3 <u a4\n 62771: a4 = a5 + a1\n 62774: a1 = u64 [sp + 0x60]\n 62777: u64 [sp + 0x238] = a1\n 62781: a1 = u64 [sp + 0x68]\n 62784: u64 [sp + 0x230] = a1\n 62788: a1 = u64 [sp + 0x70]\n 62791: u64 [sp + 0x228] = a1\n 62795: a1 = u64 [sp + 0x78]\n 62798: u64 [sp + 0x220] = a1\n 62802: a1 = u64 [sp + 0x80]\n 62806: u64 [sp + 0x258] = a1\n 62810: a1 = u64 [sp + 0x88]\n 62814: u64 [sp + 0x250] = a1\n 62818: a1 = u64 [sp + 0x90]\n 62822: u64 [sp + 0x248] = a1\n 62826: a1 = u64 [sp + 0x98]\n 62830: u64 [sp + 0x240] = a1\n 62834: u64 [sp + 0x260] = t0\n 62838: u64 [sp + 0x268] = a0\n 62842: u64 [sp + 0x270] = a3\n 62846: a0 = sp + 0x260\n 62850: a1 = sp + 0x240\n 62854: a2 = sp + 0x220\n 62858: u64 [sp + 0x278] = a4\n 62862: ra = 756, jump @769\n      : @831 [@dyn 378] (gas: 35)\n 62868: a3 = s1 + 0x3\n 62871: a0 = a3 <u s1\n 62874: a2 = u64 [sp + 0x28]\n 62877: a1 = a2 + a0\n 62880: a2 = a1 <u a2\n 62883: a2 = a0 if a0 == 0\n 62886: a0 = u64 [sp + 0x30]\n 62889: a2 = a2 + a0\n 62892: a0 = a2 <u a0\n 62895: a4 = u64 [sp + 0x38]\n 62898: a0 = a0 + a4\n 62901: a4 = u64 [sp + 0xa0]\n 62905: u64 [sp + 0x1d8] = a4\n 62909: a4 = u64 [sp + 0xb8]\n 62913: u64 [sp + 0x1d0] = a4\n 62917: a4 = u64 [sp + 0xa8]\n 62921: u64 [sp + 0x1c8] = a4\n 62925: a4 = u64 [sp + 0xb0]\n 62929: u64 [sp + 0x1c0] = a4\n 62933: a4 = u64 [sp + 0x40]\n 62936: u64 [sp + 0x1f8] = a4\n 62940: a4 = u64 [sp + 0x48]\n 62943: u64 [sp + 0x1f0] = a4\n 62947: a4 = u64 [sp + 0x50]\n 62950: u64 [sp + 0x1e8] = a4\n 62954: a4 = u64 [sp + 0x58]\n 62957: u64 [sp + 0x1e0] = a4\n 62961: u64 [sp + 0x218] = a0\n 62965: u64 [sp + 0x210] = a2\n 62969: u64 [sp + 0x208] = a1\n 62973: a0 = sp + 0x200\n 62977: a1 = sp + 0x1e0\n 62981: a2 = sp + 0x1c0\n 62985: u64 [sp + 0x200] = a3\n 62989: ra = 758, jump @769\n      : @832 [@dyn 379] (gas: 3)\n 62995: a0 = 0x40\n 62998: a1 = 0x20\n 63001: ra = 760, jump @0\n      : @833 [@dyn 380] (gas: 138)\n 63008: a1 = u8 [a0 + 0x1]\n 63011: a2 = u8 [a0]\n 63013: a3 = u8 [a0 + 0x2]\n 63016: a4 = u8 [a0 + 0x3]\n 63019: a1 = a1 << 0x8\n 63022: a1 = a1 | a2\n 63025: a3 = a3 << 0x10\n 63028: a4 = a4 << 0x18\n 63031: a3 = a3 | a4\n 63034: a1 = a1 | a3\n 63037: a2 = u8 [a0 + 0x5]\n 63040: a3 = u8 [a0 + 0x4]\n 63043: a4 = u8 [a0 + 0x6]\n 63046: a5 = u8 [a0 + 0x7]\n 63049: a2 = a2 << 0x8\n 63052: a2 = a2 | a3\n 63055: a4 = a4 << 0x10\n 63058: a5 = a5 << 0x18\n 63061: a4 = a4 | a5\n 63064: a2 = a2 | a4\n 63067: a2 = a2 << 0x20\n 63070: t0 = a2 | a1\n 63073: a2 = u8 [a0 + 0x9]\n 63076: a3 = u8 [a0 + 0x8]\n 63079: a4 = u8 [a0 + 0xa]\n 63082: a5 = u8 [a0 + 0xb]\n 63085: a2 = a2 << 0x8\n 63088: a2 = a2 | a3\n 63091: a4 = a4 << 0x10\n 63094: a5 = a5 << 0x18\n 63097: a4 = a4 | a5\n 63100: a2 = a2 | a4\n 63103: a3 = u8 [a0 + 0xd]\n 63106: a4 = u8 [a0 + 0xc]\n 63109: a5 = u8 [a0 + 0xe]\n 63112: s1 = u8 [a0 + 0xf]\n 63115: a3 = a3 << 0x8\n 63118: a3 = a3 | a4\n 63121: a5 = a5 << 0x10\n 63124: s1 = s1 << 0x18\n 63127: a5 = a5 | s1\n 63130: a3 = a3 | a5\n 63133: a3 = a3 << 0x20\n 63136: a2 = a2 | a3\n 63139: a3 = u8 [a0 + 0x11]\n 63142: a4 = u8 [a0 + 0x10]\n 63145: a5 = u8 [a0 + 0x12]\n 63148: s1 = u8 [a0 + 0x13]\n 63151: a3 = a3 << 0x8\n 63154: a3 = a3 | a4\n 63157: a5 = a5 << 0x10\n 63160: s1 = s1 << 0x18\n 63163: a5 = a5 | s1\n 63166: a3 = a3 | a5\n 63169: a4 = u8 [a0 + 0x15]\n 63172: a5 = u8 [a0 + 0x14]\n 63175: s1 = u8 [a0 + 0x16]\n 63178: a1 = u8 [a0 + 0x17]\n 63181: a4 = a4 << 0x8\n 63184: a4 = a4 | a5\n 63187: s1 = s1 << 0x10\n 63190: a1 = a1 << 0x18\n 63193: a1 = a1 | s1\n 63196: a1 = a1 | a4\n 63199: a1 = a1 << 0x20\n 63202: a3 = a3 | a1\n 63205: a1 = u8 [a0 + 0x19]\n 63208: a4 = u8 [a0 + 0x18]\n 63211: a5 = u8 [a0 + 0x1a]\n 63214: s1 = u8 [a0 + 0x1b]\n 63217: a1 = a1 << 0x8\n 63220: a1 = a1 | a4\n 63223: a5 = a5 << 0x10\n 63226: s1 = s1 << 0x18\n 63229: a5 = a5 | s1\n 63232: a1 = a1 | a5\n 63235: a4 = u8 [a0 + 0x1d]\n 63238: a5 = u8 [a0 + 0x1c]\n 63241: s1 = u8 [a0 + 0x1e]\n 63244: a0 = u8 [a0 + 0x1f]\n 63247: a4 = a4 << 0x8\n 63250: a4 = a4 | a5\n 63253: s1 = s1 << 0x10\n 63256: a0 = a0 << 0x18\n 63259: a0 = a0 | s1\n 63262: a0 = a0 | a4\n 63265: a0 = a0 << 0x20\n 63268: a0 = a0 | a1\n 63271: t1 = reverse a0\n 63273: u64 [sp + 0x28] = t1\n 63276: a1 = reverse a3\n 63278: u64 [sp + 0x30] = a1\n 63281: s1 = reverse a2\n 63283: a2 = reverse t0\n 63285: u64 [sp + 0x38] = a2\n 63288: a0 = u64 [sp + 0xa0]\n 63292: u64 [sp + 0x118] = a0\n 63296: a0 = u64 [sp + 0xb8]\n 63300: u64 [sp + 0x110] = a0\n 63304: a0 = u64 [sp + 0xa8]\n 63308: u64 [sp + 0x108] = a0\n 63312: a0 = u64 [sp + 0xb0]\n 63316: u64 [sp + 0x100] = a0\n 63320: a0 = u64 [sp + 0x40]\n 63323: u64 [sp + 0x138] = a0\n 63327: a0 = u64 [sp + 0x48]\n 63330: u64 [sp + 0x130] = a0\n 63334: a0 = u64 [sp + 0x50]\n 63337: u64 [sp + 0x128] = a0\n 63341: a0 = u64 [sp + 0x58]\n 63344: u64 [sp + 0x120] = a0\n 63348: a0 = u64 [sp + 0x60]\n 63351: u64 [sp + 0x158] = a0\n 63355: a0 = u64 [sp + 0x68]\n 63358: u64 [sp + 0x150] = a0\n 63362: a0 = u64 [sp + 0x70]\n 63365: u64 [sp + 0x148] = a0\n 63369: a0 = u64 [sp + 0x78]\n 63372: u64 [sp + 0x140] = a0\n 63376: a0 = u64 [sp + 0x80]\n 63380: u64 [sp + 0x178] = a0\n 63384: a0 = u64 [sp + 0x88]\n 63388: u64 [sp + 0x170] = a0\n 63392: a0 = u64 [sp + 0x90]\n 63396: u64 [sp + 0x168] = a0\n 63400: a0 = u64 [sp + 0x98]\n 63404: u64 [sp + 0x160] = a0\n 63408: u64 [sp + 0x198] = a2\n 63412: u64 [sp + 0x190] = s1\n 63416: u64 [sp + 0x188] = a1\n 63420: a0 = sp + 0x1a0\n 63424: a1 = sp + 0x180\n 63428: a2 = sp + 0x160\n 63432: a3 = sp + 0x140\n 63436: a4 = sp + 0x120\n 63440: a5 = sp + 0x100\n 63444: u64 [sp + 0x180] = t1\n 63448: ra = 762, jump @803\n      : @834 [@dyn 381] (gas: 11)\n 63454: a2 = u64 [sp + 0x30]\n 63457: t1 = u64 [sp + 0x28]\n 63460: a0 = u64 [sp + 0x38]\n 63463: a0 = a0 | a2\n 63466: a1 = t1 | s1\n 63469: a1 = a1 | a0\n 63472: a1 = a1 >> 0x20\n 63475: a0 = a0 | s1\n 63478: a0 = a0 << 0x20\n 63481: a0 = a0 | a1\n 63484: jump @843 if a0 != 0\n      : @835 (gas: 27)\n 63488: a0 = u64 [sp + 0x1a8]\n 63492: t0 = u64 [sp + 0x1b8]\n 63496: t2 = u64 [sp + 0x1a0]\n 63500: a3 = u64 [sp + 0x1b0]\n 63504: a4 = a0 ^ a2\n 63507: a5 = a0 <u a2\n 63510: a1 = t2 <u t1\n 63513: a5 = a1 if a4 == 0\n 63516: a4 = a3 - s1\n 63519: ra = a4 - a5\n 63522: a4 = a4 <u a5\n 63525: a3 = a3 <u s1\n 63528: a5 = u64 [sp + 0x38]\n 63531: a5 = t0 - a5\n 63534: a5 = a5 - a3\n 63537: a5 = a5 - a4\n 63540: a0 = a0 - a2\n 63543: a0 = a0 - a1\n 63546: s1 = t2 - t1\n 63549: a0 = a0 | a5\n 63552: a1 = s1 | ra\n 63555: a1 = a1 | a0\n 63558: a0 = a0 | ra\n 63561: a1 = a1 >> 0x20\n 63564: a0 = a0 << 0x20\n 63567: a0 = a0 | a1\n 63570: jump @843 if a0 != 0\n      : @836 (gas: 4)\n 63574: i32 a0 = t1 + 0\n 63576: i32 s1 = s1 + 0\n 63578: a1 = s1\n 63580: ra = 764, jump @0\n      : @837 [@dyn 382] (gas: 27)\n 63587: a1 = u64 [0x20040]\n 63592: a2 = u64 [0x20048]\n 63597: a3 = u64 [0x20050]\n 63602: a4 = u64 [0x20058]\n 63607: u64 [sp + 0x298] = a1\n 63611: u64 [sp + 0x290] = a2\n 63615: u64 [sp + 0x288] = a3\n 63619: u64 [sp + 0x280] = a4\n 63623: a1 = u64 [sp + 0x8]\n 63626: u64 [sp + 0x2b0] = a1\n 63630: a1 = u64 [sp + 0x18]\n 63633: u64 [sp + 0x2a8] = a1\n 63637: a1 = u64 [sp + 0x20]\n 63640: u64 [sp + 0x2a0] = a1\n 63644: a1 = u64 [sp + 0x10]\n 63647: u64 [sp + 0x2b8] = a1\n 63651: i32 a2 = a0 + 0\n 63653: i32 a0 = sp + 0x280\n 63657: a1 = 0x2\n 63660: a3 = s1\n 63662: ecalli 6 // 'deposit_event'\n 63664: sp = s0 + 0xfffffffffffffd20\n 63668: ra = u64 [sp + 0x2d8]\n 63672: s0 = u64 [sp + 0x2d0]\n 63676: s1 = u64 [sp + 0x2c8]\n 63680: sp = sp + 0x2e0\n 63684: ret\n      : @838 (gas: 3)\n 63686: a0 = 0x40\n 63689: a1 = 0x20\n 63692: ra = 766, jump @0\n      : @839 [@dyn 383] (gas: 103)\n 63699: a1 = u8 [a0 + 0x11]\n 63702: a2 = u8 [a0 + 0x10]\n 63705: a3 = u8 [a0 + 0x12]\n 63708: a4 = u8 [a0 + 0x13]\n 63711: a1 = a1 << 0x8\n 63714: a1 = a1 | a2\n 63717: a3 = a3 << 0x10\n 63720: a4 = a4 << 0x18\n 63723: a3 = a3 | a4\n 63726: a1 = a1 | a3\n 63729: a2 = u8 [a0 + 0x15]\n 63732: a3 = u8 [a0 + 0x14]\n 63735: a4 = u8 [a0 + 0x16]\n 63738: a5 = u8 [a0 + 0x17]\n 63741: a2 = a2 << 0x8\n 63744: a2 = a2 | a3\n 63747: a4 = a4 << 0x10\n 63750: a5 = a5 << 0x18\n 63753: a4 = a4 | a5\n 63756: a2 = a2 | a4\n 63759: a2 = a2 << 0x20\n 63762: t0 = a2 | a1\n 63765: a2 = u8 [a0 + 0x1]\n 63768: a3 = u8 [a0]\n 63770: a4 = u8 [a0 + 0x2]\n 63773: a5 = u8 [a0 + 0x3]\n 63776: a2 = a2 << 0x8\n 63779: a2 = a2 | a3\n 63782: a4 = a4 << 0x10\n 63785: a5 = a5 << 0x18\n 63788: a4 = a4 | a5\n 63791: a2 = a2 | a4\n 63794: a3 = u8 [a0 + 0x5]\n 63797: a4 = u8 [a0 + 0x4]\n 63800: a5 = u8 [a0 + 0x6]\n 63803: s1 = u8 [a0 + 0x7]\n 63806: a3 = a3 << 0x8\n 63809: a3 = a3 | a4\n 63812: a5 = a5 << 0x10\n 63815: s1 = s1 << 0x18\n 63818: a5 = a5 | s1\n 63821: a3 = a3 | a5\n 63824: a3 = a3 << 0x20\n 63827: a2 = a2 | a3\n 63830: a3 = u8 [a0 + 0x19]\n 63833: a4 = u8 [a0 + 0x18]\n 63836: a5 = u8 [a0 + 0x1a]\n 63839: s1 = u8 [a0 + 0x1b]\n 63842: a3 = a3 << 0x8\n 63845: a3 = a3 | a4\n 63848: a5 = a5 << 0x10\n 63851: s1 = s1 << 0x18\n 63854: a5 = a5 | s1\n 63857: a3 = a3 | a5\n 63860: a4 = u8 [a0 + 0x1d]\n 63863: a5 = u8 [a0 + 0x1c]\n 63866: s1 = u8 [a0 + 0x1e]\n 63869: a1 = u8 [a0 + 0x1f]\n 63872: a4 = a4 << 0x8\n 63875: a4 = a4 | a5\n 63878: s1 = s1 << 0x10\n 63881: a1 = a1 << 0x18\n 63884: a1 = a1 | s1\n 63887: a1 = a1 | a4\n 63890: a1 = a1 << 0x20\n 63893: a3 = a3 | a1\n 63896: a1 = u8 [a0 + 0x9]\n 63899: a4 = u8 [a0 + 0x8]\n 63902: a5 = u8 [a0 + 0xa]\n 63905: s1 = u8 [a0 + 0xb]\n 63908: a1 = a1 << 0x8\n 63911: a1 = a1 | a4\n 63914: a5 = a5 << 0x10\n 63917: s1 = s1 << 0x18\n 63920: a5 = a5 | s1\n 63923: a1 = a1 | a5\n 63926: a4 = u8 [a0 + 0xd]\n 63929: a5 = u8 [a0 + 0xc]\n 63932: s1 = u8 [a0 + 0xe]\n 63935: a0 = u8 [a0 + 0xf]\n 63938: a4 = a4 << 0x8\n 63941: a4 = a4 | a5\n 63944: s1 = s1 << 0x10\n 63947: a0 = a0 << 0x18\n 63950: a0 = a0 | s1\n 63953: a0 = a0 | a4\n 63956: a0 = a0 << 0x20\n 63959: a0 = a0 | a1\n 63962: s1 = reverse a0\n 63964: a1 = reverse a3\n 63966: a2 = reverse a2\n 63968: a0 = reverse t0\n 63970: u64 [sp + 0xb8] = a0\n 63974: u64 [sp + 0xb0] = a2\n 63978: a0 = a0 | a2\n 63981: a2 = a1\n 63983: a1 = a1 | s1\n 63986: a1 = a1 | a0\n 63989: a1 = a1 >> 0x20\n 63992: a0 = a0 | s1\n 63995: a0 = a0 << 0x20\n 63998: a0 = a0 | a1\n 64001: jump @843 if a0 != 0\n      : @840 (gas: 5)\n 64005: u64 [sp + 0xa8] = a2\n 64009: i32 a0 = a2 + 0\n 64011: a1 = 0x20\n 64014: u64 [sp + 0xa0] = a0\n 64018: ra = 768, jump @0\n      : @841 [@dyn 384] (gas: 50)\n 64025: u8 [a0 + 31] = 0\n 64028: u8 [a0 + 30] = 0\n 64031: u8 [a0 + 29] = 0\n 64034: u8 [a0 + 28] = 0\n 64037: u8 [a0 + 27] = 0\n 64040: u8 [a0 + 26] = 0\n 64043: u8 [a0 + 25] = 0\n 64046: u8 [a0 + 24] = 0\n 64049: u8 [a0 + 23] = 0\n 64052: u8 [a0 + 22] = 0\n 64055: u8 [a0 + 21] = 0\n 64058: u8 [a0 + 20] = 0\n 64061: u8 [a0 + 19] = 0\n 64064: u8 [a0 + 18] = 0\n 64067: u8 [a0 + 17] = 0\n 64070: u8 [a0 + 16] = 0\n 64073: u8 [a0 + 15] = 0\n 64076: u8 [a0 + 14] = 0\n 64079: u8 [a0 + 13] = 0\n 64082: u8 [a0 + 12] = 0\n 64085: u8 [a0 + 11] = 0\n 64088: u8 [a0 + 10] = 0\n 64091: u8 [a0 + 9] = 0\n 64094: u8 [a0 + 8] = 0\n 64097: u8 [a0 + 7] = 0\n 64100: u8 [a0 + 6] = 0\n 64103: u8 [a0 + 5] = 0\n 64106: u8 [a0 + 4] = 0\n 64109: u8 [a0 + 3] = 0xa0\n 64114: u8 [a0 + 2] = 0x79\n 64118: u8 [a0 + 1] = 0xc3\n 64123: u8 [a0 + 0] = 0x8\n 64126: a1 = u64 [sp + 0xa8]\n 64130: a0 = a1 + 0x4\n 64133: a1 = a0 <u a1\n 64136: a3 = u64 [sp + 0xb8]\n 64140: a2 = a3 + a1\n 64143: a3 = a2 <u a3\n 64146: a3 = a1 if a1 == 0\n 64149: a3 = a3 + s1\n 64152: a1 = a3 <u s1\n 64155: a4 = u64 [sp + 0xb0]\n 64159: a4 = a4 + a1\n 64162: u64 [sp + 0xc8] = a2\n 64166: u64 [sp + 0xc0] = a0\n 64170: u64 [sp + 0xd0] = a3\n 64174: a0 = sp + 0xe0\n 64178: a1 = sp + 0xc0\n 64182: u64 [sp + 0xd8] = a4\n 64186: ra = 770, jump @752\n      : @842 [@dyn 385] (gas: 30)\n 64192: a0 = u64 [sp + 0xe8]\n 64196: t0 = u64 [sp + 0xf8]\n 64200: t1 = u64 [sp + 0xe0]\n 64204: a3 = u64 [sp + 0xf0]\n 64208: a1 = u64 [sp + 0xb8]\n 64212: a4 = a0 ^ a1\n 64215: a5 = a0 <u a1\n 64218: t2 = a1\n 64220: a2 = u64 [sp + 0xa8]\n 64224: a1 = t1 <u a2\n 64227: a5 = a1 if a4 == 0\n 64230: a4 = a3 - s1\n 64233: a3 = a3 <u s1\n 64236: s1 = u64 [sp + 0xb0]\n 64240: s1 = t0 - s1\n 64243: s1 = s1 - a3\n 64246: a3 = a4 <u a5\n 64249: s1 = s1 - a3\n 64252: a4 = a4 - a5\n 64255: a0 = a0 - t2\n 64258: a1 = a0 - a1\n 64261: a0 = t1 - a2\n 64264: a1 = a1 | s1\n 64267: a2 = a0 | a4\n 64270: a2 = a2 | a1\n 64273: a1 = a1 | a4\n 64276: a2 = a2 >> 0x20\n 64279: a1 = a1 << 0x20\n 64282: a1 = a1 | a2\n 64285: jump @844 if a1 == 0\n      : @843 (gas: 1)\n 64288: trap\n      : @844 (gas: 4)\n 64289: i32 s1 = a0 + 0\n 64291: a0 = u64 [sp + 0xa0]\n 64295: a1 = s1\n 64297: ra = 772, jump @0\n      : @845 [@dyn 386] (gas: 6)\n 64304: i32 a1 = a0 + 0\n 64306: a0 = 0x1\n 64309: a2 = s1\n 64311: ra = 0x306\n 64315: ecalli 12 // 'seal_return'\n 64317: fallthrough\n      : @846 [@dyn 387] (gas: 70)\n 64318: sp = sp + 0xfffffffffffffef0\n 64322: u64 [sp + 0x108] = ra\n 64326: u64 [sp + 0x100] = s0\n 64330: u64 [sp + 0xf8] = s1\n 64334: s0 = sp + 0x110\n 64338: sp = sp & 0xfffffffffffffff0\n 64341: a5 = u64 [a0]\n 64343: u64 [sp + 0x48] = a5\n 64346: a5 = u64 [a0 + 0x8]\n 64349: u64 [sp + 0x40] = a5\n 64352: a5 = u64 [a0 + 0x10]\n 64355: u64 [sp + 0x38] = a5\n 64358: a0 = u64 [a0 + 0x18]\n 64361: u64 [sp + 0x30] = a0\n 64364: a0 = u64 [a1]\n 64366: u64 [sp + 0x28] = a0\n 64369: a0 = u64 [a1 + 0x8]\n 64372: u64 [sp + 0x20] = a0\n 64375: a0 = u64 [a1 + 0x10]\n 64378: u64 [sp + 0x18] = a0\n 64381: a0 = u64 [a1 + 0x18]\n 64384: u64 [sp + 0x10] = a0\n 64387: a0 = u64 [a2]\n 64389: u64 [sp + 0x8] = a0\n 64392: ra = u64 [a2 + 0x8]\n 64395: s1 = u64 [a2 + 0x10]\n 64398: t2 = u64 [a2 + 0x18]\n 64401: t1 = u64 [a3]\n 64403: t0 = u64 [a3 + 0x8]\n 64406: a5 = u64 [a3 + 0x10]\n 64409: a3 = u64 [a3 + 0x18]\n 64412: a2 = u64 [a4]\n 64414: a1 = u64 [a4 + 0x8]\n 64417: a0 = u64 [a4 + 0x10]\n 64420: a4 = u64 [a4 + 0x18]\n 64423: u64 [sp + 0x68] = a4\n 64426: u64 [sp + 0x60] = a0\n 64429: u64 [sp + 0x58] = a1\n 64432: u64 [sp + 0x50] = a2\n 64435: u64 [sp + 0x88] = a3\n 64439: u64 [sp + 0x80] = a5\n 64443: u64 [sp + 0x78] = t0\n 64446: u64 [sp + 0x70] = t1\n 64449: u64 [sp + 0xa8] = t2\n 64453: u64 [sp + 0xa0] = s1\n 64457: u64 [sp + 0x98] = ra\n 64461: a0 = u64 [sp + 0x8]\n 64464: u64 [sp + 0x90] = a0\n 64468: a0 = u64 [sp + 0x10]\n 64471: u64 [sp + 0xc8] = a0\n 64475: a0 = u64 [sp + 0x18]\n 64478: u64 [sp + 0xc0] = a0\n 64482: a0 = u64 [sp + 0x20]\n 64485: u64 [sp + 0xb8] = a0\n 64489: a0 = u64 [sp + 0x28]\n 64492: u64 [sp + 0xb0] = a0\n 64496: a0 = u64 [sp + 0x30]\n 64499: u64 [sp + 0xe8] = a0\n 64503: a0 = u64 [sp + 0x38]\n 64506: u64 [sp + 0xe0] = a0\n 64510: a0 = u64 [sp + 0x40]\n 64513: u64 [sp + 0xd8] = a0\n 64517: a0 = sp + 0xd0\n 64521: a1 = sp + 0xb0\n 64525: a2 = sp + 0x90\n 64529: a3 = sp + 0x70\n 64532: a4 = sp + 0x50\n 64535: a5 = u64 [sp + 0x48]\n 64538: u64 [sp + 0xd0] = a5\n 64542: ra = 776, jump @736\n      : @847 [@dyn 388] (gas: 6)\n 64548: sp = s0 + 0xfffffffffffffef0\n 64552: ra = u64 [sp + 0x108]\n 64556: s0 = u64 [sp + 0x100]\n 64560: s1 = u64 [sp + 0xf8]\n 64564: sp = sp + 0x110\n 64568: ret\n      : @848 (gas: 17)\n 64570: sp = sp + 0xffffffffffffffa0\n 64573: u64 [sp + 0x58] = ra\n 64576: u64 [sp + 0x50] = s0\n 64579: u64 [sp + 0x48] = s1\n 64582: a3 = u64 [a1 + 0x18]\n 64585: a4 = u64 [a1 + 0x10]\n 64588: a5 = u64 [a1 + 0x8]\n 64591: s1 = u64 [a1]\n 64593: a1 = a5 | a3\n 64596: a2 = s1 | a4\n 64599: a2 = a2 | a1\n 64602: a2 = a2 >> 0x20\n 64605: a1 = a1 | a4\n 64608: a1 = a1 << 0x20\n 64611: a1 = a1 | a2\n 64614: u64 [sp + 0x28] = a0\n 64617: jump @855 if a1 != 0\n      : @849 (gas: 19)\n 64621: a0 = s1 + 0x20\n 64624: u64 [sp + 0x30] = a0\n 64627: a0 = a0 <u s1\n 64630: a1 = a5 + a0\n 64633: u64 [sp + 0x40] = a1\n 64636: u64 [sp + 0x8] = a5\n 64639: s0 = a1 <u a5\n 64642: s0 = a0 if a0 == 0\n 64645: s0 = s0 + a4\n 64648: u64 [sp + 0x10] = a4\n 64651: a0 = s0 <u a4\n 64654: u64 [sp + 0x18] = a3\n 64657: a0 = a0 + a3\n 64660: u64 [sp + 0x38] = a0\n 64663: u64 [sp] = s1\n 64665: i32 a0 = s1 + 0\n 64667: a1 = 0x20\n 64670: s1 = 0x20\n 64673: ra = 778, jump @0\n      : @850 [@dyn 389] (gas: 45)\n 64680: u8 [a0 + 0x1f] = s1\n 64683: a1 = u64 [sp + 0x30]\n 64686: s1 = a1\n 64688: a1 = a1 | s0\n 64691: a2 = u64 [sp + 0x40]\n 64694: a4 = u64 [sp + 0x38]\n 64697: a2 = a2 | a4\n 64700: a1 = a1 | a2\n 64703: a1 = a1 >> 0x20\n 64706: u64 [sp + 0x20] = s0\n 64709: a2 = a2 | s0\n 64712: a2 = a2 << 0x20\n 64715: a1 = a1 | a2\n 64718: u8 [a0 + 30] = 0\n 64721: u8 [a0 + 29] = 0\n 64724: u8 [a0 + 28] = 0\n 64727: u8 [a0 + 27] = 0\n 64730: u8 [a0 + 26] = 0\n 64733: u8 [a0 + 25] = 0\n 64736: u8 [a0 + 24] = 0\n 64739: u8 [a0 + 23] = 0\n 64742: u8 [a0 + 22] = 0\n 64745: u8 [a0 + 21] = 0\n 64748: u8 [a0 + 20] = 0\n 64751: u8 [a0 + 19] = 0\n 64754: u8 [a0 + 18] = 0\n 64757: u8 [a0 + 17] = 0\n 64760: u8 [a0 + 16] = 0\n 64763: u8 [a0 + 15] = 0\n 64766: u8 [a0 + 14] = 0\n 64769: u8 [a0 + 13] = 0\n 64772: u8 [a0 + 12] = 0\n 64775: u8 [a0 + 11] = 0\n 64778: u8 [a0 + 10] = 0\n 64781: u8 [a0 + 9] = 0\n 64784: u8 [a0 + 8] = 0\n 64787: u8 [a0 + 7] = 0\n 64790: u8 [a0 + 6] = 0\n 64793: u8 [a0 + 5] = 0\n 64796: u8 [a0 + 4] = 0\n 64799: u8 [a0 + 3] = 0\n 64802: u8 [a0 + 2] = 0\n 64805: u8 [a0 + 1] = 0\n 64808: u8 [a0 + 0] = 0\n 64810: jump @855 if a1 != 0\n      : @851 (gas: 4)\n 64814: i32 s0 = s1 + 0\n 64816: a1 = 0x20\n 64819: a0 = s0\n 64821: ra = 780, jump @0\n      : @852 [@dyn 390] (gas: 41)\n 64828: u8 [a0 + 31] = 0x1c\n 64832: u8 [a0 + 30] = 0\n 64835: u8 [a0 + 29] = 0\n 64838: u8 [a0 + 28] = 0\n 64841: u8 [a0 + 27] = 0\n 64844: u8 [a0 + 26] = 0\n 64847: u8 [a0 + 25] = 0\n 64850: u8 [a0 + 24] = 0\n 64853: u8 [a0 + 23] = 0\n 64856: u8 [a0 + 22] = 0\n 64859: u8 [a0 + 21] = 0\n 64862: u8 [a0 + 20] = 0\n 64865: u8 [a0 + 19] = 0\n 64868: u8 [a0 + 18] = 0\n 64871: u8 [a0 + 17] = 0\n 64874: u8 [a0 + 16] = 0\n 64877: u8 [a0 + 15] = 0\n 64880: u8 [a0 + 14] = 0\n 64883: u8 [a0 + 13] = 0\n 64886: u8 [a0 + 12] = 0\n 64889: u8 [a0 + 11] = 0\n 64892: u8 [a0 + 10] = 0\n 64895: u8 [a0 + 9] = 0\n 64898: u8 [a0 + 8] = 0\n 64901: u8 [a0 + 7] = 0\n 64904: u8 [a0 + 6] = 0\n 64907: u8 [a0 + 5] = 0\n 64910: u8 [a0 + 4] = 0\n 64913: u8 [a0 + 3] = 0\n 64916: u8 [a0 + 2] = 0\n 64919: u8 [a0 + 1] = 0\n 64922: a1 = u64 [sp + 0x20]\n 64925: a2 = u64 [sp + 0x38]\n 64928: a1 = a1 | a2\n 64931: a2 = 0xffffffe0\n 64941: a2 = s1 <u a2\n 64944: a3 = u64 [sp + 0x40]\n 64947: a2 = 0 if a3 != 0\n 64949: a2 = 0 if a1 != 0\n 64951: u8 [a0 + 0] = 0\n 64953: jump @855 if a2 == 0\n      : @853 (gas: 3)\n 64957: i32 a0 = s0 + 0x20\n 64960: a1 = 0x20\n 64963: ra = 782, jump @0\n      : @854 [@dyn 391] (gas: 54)\n 64970: u8 [a0 + 27] = 0x79\n 64974: u8 [a0 + 25] = 0x70\n 64978: u8 [a0 + 20] = 0x62\n 64982: u8 [a0 + 26] = 0x74\n 64986: u8 [a0 + 18] = 0x74\n 64990: u8 [a0 + 23] = 0x65\n 64994: u8 [a0 + 21] = 0x65\n 64998: u8 [a0 + 11] = 0x65\n 65002: u8 [a0 + 24] = 0x6d\n 65006: u8 [a0 + 10] = 0x6d\n 65010: u8 [a0 + 14] = 0x61\n 65014: u8 [a0 + 9] = 0x61\n 65018: u8 [a0 + 16] = 0x6e\n 65022: u8 [a0 + 15] = 0x6e\n 65026: u8 [a0 + 8] = 0x6e\n 65030: u8 [a0 + 31] = 0\n 65033: u8 [a0 + 30] = 0\n 65036: u8 [a0 + 29] = 0\n 65039: u8 [a0 + 28] = 0\n 65042: u8 [a0 + 22] = 0x20\n 65046: u8 [a0 + 19] = 0x20\n 65050: u8 [a0 + 12] = 0x20\n 65054: u8 [a0 + 7] = 0x20\n 65058: u8 [a0 + 6] = 0x3a\n 65062: u8 [a0 + 5] = 0x77\n 65066: u8 [a0 + 17] = 0x6f\n 65070: u8 [a0 + 4] = 0x6f\n 65074: u8 [a0 + 3] = 0x72\n 65078: u8 [a0 + 13] = 0x63\n 65082: u8 [a0 + 2] = 0x63\n 65086: u8 [a0 + 1] = 0x73\n 65090: u8 [a0 + 0] = 0x45\n 65093: a1 = u64 [sp]\n 65095: a0 = a1 + 0x60\n 65098: a1 = a0 <u a1\n 65101: a3 = u64 [sp + 0x8]\n 65104: a2 = a3 + a1\n 65107: a3 = a2 <u a3\n 65110: a3 = a1 if a1 == 0\n 65113: a1 = u64 [sp + 0x10]\n 65116: a3 = a3 + a1\n 65119: a1 = a3 <u a1\n 65122: a4 = u64 [sp + 0x18]\n 65125: a1 = a1 + a4\n 65128: a4 = u64 [sp + 0x28]\n 65131: u64 [a4] = a0\n 65133: u64 [a4 + 0x8] = a2\n 65136: u64 [a4 + 0x10] = a3\n 65139: u64 [a4 + 0x18] = a1\n 65142: ra = u64 [sp + 0x58]\n 65145: s0 = u64 [sp + 0x50]\n 65148: s1 = u64 [sp + 0x48]\n 65151: sp = sp + 0x60\n 65154: ret\n      : @855 (gas: 1)\n 65156: trap\n      : @856 (gas: 17)\n 65157: sp = sp + 0xffffffffffffffa0\n 65160: u64 [sp + 0x58] = ra\n 65163: u64 [sp + 0x50] = s0\n 65166: u64 [sp + 0x48] = s1\n 65169: a3 = u64 [a1 + 0x18]\n 65172: a4 = u64 [a1 + 0x10]\n 65175: a5 = u64 [a1 + 0x8]\n 65178: s1 = u64 [a1]\n 65180: a1 = a5 | a3\n 65183: a2 = s1 | a4\n 65186: a2 = a2 | a1\n 65189: a2 = a2 >> 0x20\n 65192: a1 = a1 | a4\n 65195: a1 = a1 << 0x20\n 65198: a1 = a1 | a2\n 65201: u64 [sp + 0x20] = a0\n 65204: jump @865 if a1 != 0\n      : @857 (gas: 19)\n 65208: a0 = s1 + 0x20\n 65211: u64 [sp + 0x38] = a0\n 65214: a0 = a0 <u s1\n 65217: a1 = a5 + a0\n 65220: u64 [sp + 0x40] = a1\n 65223: u64 [sp + 0x8] = a5\n 65226: s0 = a1 <u a5\n 65229: s0 = a0 if a0 == 0\n 65232: s0 = s0 + a4\n 65235: u64 [sp + 0x10] = a4\n 65238: a0 = s0 <u a4\n 65241: u64 [sp + 0x18] = a3\n 65244: a0 = a0 + a3\n 65247: u64 [sp + 0x30] = a0\n 65250: u64 [sp] = s1\n 65252: i32 a0 = s1 + 0\n 65254: a1 = 0x20\n 65257: s1 = 0x20\n 65260: ra = 784, jump @0\n      : @858 [@dyn 392] (gas: 43)\n 65267: u8 [a0 + 0x1f] = s1\n 65270: a1 = u64 [sp + 0x38]\n 65273: a1 = a1 | s0\n 65276: a2 = u64 [sp + 0x40]\n 65279: a3 = u64 [sp + 0x30]\n 65282: a2 = a2 | a3\n 65285: a1 = a1 | a2\n 65288: a1 = a1 >> 0x20\n 65291: a2 = a2 | s0\n 65294: a2 = a2 << 0x20\n 65297: a1 = a1 | a2\n 65300: u8 [a0 + 30] = 0\n 65303: u8 [a0 + 29] = 0\n 65306: u8 [a0 + 28] = 0\n 65309: u8 [a0 + 27] = 0\n 65312: u8 [a0 + 26] = 0\n 65315: u8 [a0 + 25] = 0\n 65318: u8 [a0 + 24] = 0\n 65321: u8 [a0 + 23] = 0\n 65324: u8 [a0 + 22] = 0\n 65327: u8 [a0 + 21] = 0\n 65330: u8 [a0 + 20] = 0\n 65333: u8 [a0 + 19] = 0\n 65336: u8 [a0 + 18] = 0\n 65339: u8 [a0 + 17] = 0\n 65342: u8 [a0 + 16] = 0\n 65345: u8 [a0 + 15] = 0\n 65348: u8 [a0 + 14] = 0\n 65351: u8 [a0 + 13] = 0\n 65354: u8 [a0 + 12] = 0\n 65357: u8 [a0 + 11] = 0\n 65360: u8 [a0 + 10] = 0\n 65363: u8 [a0 + 9] = 0\n 65366: u8 [a0 + 8] = 0\n 65369: u8 [a0 + 7] = 0\n 65372: u8 [a0 + 6] = 0\n 65375: u8 [a0 + 5] = 0\n 65378: u8 [a0 + 4] = 0\n 65381: u8 [a0 + 3] = 0\n 65384: u8 [a0 + 2] = 0\n 65387: u8 [a0 + 1] = 0\n 65390: u8 [a0 + 0] = 0\n 65392: jump @865 if a1 != 0\n      : @859 (gas: 6)\n 65396: s1 = s0\n 65398: s0 = u64 [sp + 0x38]\n 65401: i32 a0 = s0 + 0\n 65403: a1 = 0x20\n 65406: u64 [sp + 0x28] = a0\n 65409: ra = 786, jump @0\n      : @860 [@dyn 393] (gas: 42)\n 65416: u8 [a0 + 31] = 0x2c\n 65420: u8 [a0 + 30] = 0\n 65423: u8 [a0 + 29] = 0\n 65426: u8 [a0 + 28] = 0\n 65429: u8 [a0 + 27] = 0\n 65432: u8 [a0 + 26] = 0\n 65435: u8 [a0 + 25] = 0\n 65438: u8 [a0 + 24] = 0\n 65441: u8 [a0 + 23] = 0\n 65444: u8 [a0 + 22] = 0\n 65447: u8 [a0 + 21] = 0\n 65450: u8 [a0 + 20] = 0\n 65453: u8 [a0 + 19] = 0\n 65456: u8 [a0 + 18] = 0\n 65459: u8 [a0 + 17] = 0\n 65462: u8 [a0 + 16] = 0\n 65465: u8 [a0 + 15] = 0\n 65468: u8 [a0 + 14] = 0\n 65471: u8 [a0 + 13] = 0\n 65474: u8 [a0 + 12] = 0\n 65477: u8 [a0 + 11] = 0\n 65480: u8 [a0 + 10] = 0\n 65483: u8 [a0 + 9] = 0\n 65486: u8 [a0 + 8] = 0\n 65489: u8 [a0 + 7] = 0\n 65492: u8 [a0 + 6] = 0\n 65495: u8 [a0 + 5] = 0\n 65498: u8 [a0 + 4] = 0\n 65501: u8 [a0 + 3] = 0\n 65504: u8 [a0 + 2] = 0\n 65507: u8 [a0 + 1] = 0\n 65510: a1 = u64 [sp + 0x30]\n 65513: a3 = s1 | a1\n 65516: s1 = 0x100000000\n 65526: a1 = 0xffffffe0\n 65536: a1 = s0 <u a1\n 65539: a2 = u64 [sp + 0x40]\n 65542: a1 = 0 if a2 != 0\n 65544: u64 [sp + 0x30] = a3\n 65547: a1 = 0 if a3 != 0\n 65549: u8 [a0 + 0] = 0\n 65551: jump @865 if a1 == 0\n      : @861 (gas: 4)\n 65555: a0 = u64 [sp + 0x28]\n 65558: i32 a0 = a0 + 0x20\n 65561: a1 = 0x20\n 65564: ra = 788, jump @0\n      : @862 [@dyn 394] (gas: 43)\n 65571: u8 [a0 + 28] = 0x6c\n 65575: u8 [a0 + 21] = 0x76\n 65579: u8 [a0 + 14] = 0x6d\n 65583: u8 [a0 + 11] = 0x6b\n 65587: u8 [a0 + 30] = 0x61\n 65591: u8 [a0 + 25] = 0x61\n 65595: u8 [a0 + 10] = 0x61\n 65599: u8 [a0 + 31] = 0x73\n 65603: u8 [a0 + 27] = 0x20\n 65607: u8 [a0 + 24] = 0x20\n 65611: u8 [a0 + 18] = 0x20\n 65615: u8 [a0 + 13] = 0x20\n 65619: u8 [a0 + 7] = 0x20\n 65623: u8 [a0 + 6] = 0x3a\n 65627: u8 [a0 + 5] = 0x77\n 65631: u8 [a0 + 19] = 0x63\n 65635: u8 [a0 + 2] = 0x63\n 65639: s0 = 0x65\n 65642: u8 [a0 + 0x1d] = s0\n 65645: u8 [a0 + 16] = 0x73\n 65649: u8 [a0 + 8] = 0x73\n 65653: u8 [a0 + 1] = 0x73\n 65657: u8 [a0 + 0] = 0x45\n 65660: u8 [a0 + 26] = 0x74\n 65664: a1 = s1 + 0xffffffffffffffc0\n 65667: a2 = u64 [sp + 0x38]\n 65670: a1 = a2 <u a1\n 65673: s1 = 0x72\n 65676: u8 [a0 + 0x17] = s1\n 65679: u8 [a0 + 0x16] = s0\n 65682: a2 = u64 [sp + 0x40]\n 65685: a1 = 0 if a2 != 0\n 65687: a4 = 0x6f\n 65690: u8 [a0 + 0x14] = a4\n 65693: u8 [a0 + 17] = 0x74\n 65697: a2 = u64 [sp + 0x30]\n 65700: a1 = 0 if a2 != 0\n 65702: u8 [a0 + 15] = 0x75\n 65706: u8 [a0 + 0xc] = s0\n 65709: u8 [a0 + 9] = 0x74\n 65713: u8 [a0 + 0x4] = a4\n 65716: u8 [a0 + 0x3] = s1\n 65719: jump @865 if a1 == 0\n      : @863 (gas: 4)\n 65723: a0 = u64 [sp + 0x28]\n 65726: i32 a0 = a0 + 0x40\n 65729: a1 = 0x20\n 65732: ra = 790, jump @0\n      : @864 [@dyn 395] (gas: 54)\n 65739: u8 [a0 + 11] = 0x64\n 65743: u8 [a0 + 9] = 0x75\n 65747: u8 [a0 + 8] = 0x66\n 65751: u8 [a0 + 0x6] = s1\n 65754: u8 [a0 + 0x7] = s0\n 65757: u8 [a0 + 0x4] = s0\n 65760: u8 [a0 + 10] = 0x6e\n 65764: u8 [a0 + 3] = 0x6e\n 65768: u8 [a0 + 2] = 0x6f\n 65772: u8 [a0 + 5] = 0x20\n 65776: u8 [a0 + 1] = 0x20\n 65780: u8 [a0 + 31] = 0\n 65783: u8 [a0 + 30] = 0\n 65786: u8 [a0 + 29] = 0\n 65789: u8 [a0 + 28] = 0\n 65792: u8 [a0 + 27] = 0\n 65795: u8 [a0 + 26] = 0\n 65798: u8 [a0 + 25] = 0\n 65801: u8 [a0 + 24] = 0\n 65804: u8 [a0 + 23] = 0\n 65807: u8 [a0 + 22] = 0\n 65810: u8 [a0 + 21] = 0\n 65813: u8 [a0 + 20] = 0\n 65816: u8 [a0 + 19] = 0\n 65819: u8 [a0 + 18] = 0\n 65822: u8 [a0 + 17] = 0\n 65825: u8 [a0 + 16] = 0\n 65828: u8 [a0 + 15] = 0\n 65831: u8 [a0 + 14] = 0\n 65834: u8 [a0 + 13] = 0\n 65837: u8 [a0 + 12] = 0\n 65840: u8 [a0 + 0] = 0x74\n 65843: a1 = u64 [sp]\n 65845: a0 = a1 + 0x80\n 65849: a1 = a0 <u a1\n 65852: a3 = u64 [sp + 0x8]\n 65855: a2 = a3 + a1\n 65858: a3 = a2 <u a3\n 65861: a3 = a1 if a1 == 0\n 65864: a1 = u64 [sp + 0x10]\n 65867: a3 = a3 + a1\n 65870: a1 = a3 <u a1\n 65873: a4 = u64 [sp + 0x18]\n 65876: a1 = a1 + a4\n 65879: a4 = u64 [sp + 0x20]\n 65882: u64 [a4] = a0\n 65884: u64 [a4 + 0x8] = a2\n 65887: u64 [a4 + 0x10] = a3\n 65890: u64 [a4 + 0x18] = a1\n 65893: ra = u64 [sp + 0x58]\n 65896: s0 = u64 [sp + 0x50]\n 65899: s1 = u64 [sp + 0x48]\n 65902: sp = sp + 0x60\n 65905: ret\n      : @865 (gas: 1)\n 65907: trap\n      : @866 (gas: 17)\n 65908: sp = sp + 0xffffffffffffffa0\n 65911: u64 [sp + 0x58] = ra\n 65914: u64 [sp + 0x50] = s0\n 65917: u64 [sp + 0x48] = s1\n 65920: a3 = u64 [a1 + 0x18]\n 65923: a4 = u64 [a1 + 0x10]\n 65926: a5 = u64 [a1 + 0x8]\n 65929: s1 = u64 [a1]\n 65931: a1 = a5 | a3\n 65934: a2 = s1 | a4\n 65937: a2 = a2 | a1\n 65940: a2 = a2 >> 0x20\n 65943: a1 = a1 | a4\n 65946: a1 = a1 << 0x20\n 65949: a1 = a1 | a2\n 65952: u64 [sp + 0x28] = a0\n 65955: jump @875 if a1 != 0\n      : @867 (gas: 19)\n 65959: a0 = s1 + 0x20\n 65962: u64 [sp + 0x40] = a0\n 65965: a0 = a0 <u s1\n 65968: a1 = a5 + a0\n 65971: u64 [sp + 0x38] = a1\n 65974: u64 [sp + 0x10] = a5\n 65977: s0 = a1 <u a5\n 65980: s0 = a0 if a0 == 0\n 65983: s0 = s0 + a4\n 65986: u64 [sp + 0x18] = a4\n 65989: a0 = s0 <u a4\n 65992: u64 [sp + 0x20] = a3\n 65995: a0 = a0 + a3\n 65998: u64 [sp + 0x30] = a0\n 66001: u64 [sp + 0x8] = s1\n 66004: i32 a0 = s1 + 0\n 66006: a1 = 0x20\n 66009: s1 = 0x20\n 66012: ra = 792, jump @0\n      : @868 [@dyn 396] (gas: 43)\n 66019: u8 [a0 + 0x1f] = s1\n 66022: a1 = u64 [sp + 0x40]\n 66025: a1 = a1 | s0\n 66028: a2 = u64 [sp + 0x38]\n 66031: a3 = u64 [sp + 0x30]\n 66034: a2 = a2 | a3\n 66037: a1 = a1 | a2\n 66040: a1 = a1 >> 0x20\n 66043: a2 = a2 | s0\n 66046: a2 = a2 << 0x20\n 66049: a1 = a1 | a2\n 66052: u8 [a0 + 30] = 0\n 66055: u8 [a0 + 29] = 0\n 66058: u8 [a0 + 28] = 0\n 66061: u8 [a0 + 27] = 0\n 66064: u8 [a0 + 26] = 0\n 66067: u8 [a0 + 25] = 0\n 66070: u8 [a0 + 24] = 0\n 66073: u8 [a0 + 23] = 0\n 66076: u8 [a0 + 22] = 0\n 66079: u8 [a0 + 21] = 0\n 66082: u8 [a0 + 20] = 0\n 66085: u8 [a0 + 19] = 0\n 66088: u8 [a0 + 18] = 0\n 66091: u8 [a0 + 17] = 0\n 66094: u8 [a0 + 16] = 0\n 66097: u8 [a0 + 15] = 0\n 66100: u8 [a0 + 14] = 0\n 66103: u8 [a0 + 13] = 0\n 66106: u8 [a0 + 12] = 0\n 66109: u8 [a0 + 11] = 0\n 66112: u8 [a0 + 10] = 0\n 66115: u8 [a0 + 9] = 0\n 66118: u8 [a0 + 8] = 0\n 66121: u8 [a0 + 7] = 0\n 66124: u8 [a0 + 6] = 0\n 66127: u8 [a0 + 5] = 0\n 66130: u8 [a0 + 4] = 0\n 66133: u8 [a0 + 3] = 0\n 66136: u8 [a0 + 2] = 0\n 66139: u8 [a0 + 1] = 0\n 66142: u8 [a0 + 0] = 0\n 66144: jump @875 if a1 != 0\n      : @869 (gas: 6)\n 66148: s1 = s0\n 66150: s0 = u64 [sp + 0x40]\n 66153: i32 a0 = s0 + 0\n 66155: a1 = 0x20\n 66158: u64 [sp] = a0\n 66160: ra = 794, jump @0\n      : @870 [@dyn 397] (gas: 42)\n 66167: u8 [a0 + 31] = 0x22\n 66171: u8 [a0 + 30] = 0\n 66174: u8 [a0 + 29] = 0\n 66177: u8 [a0 + 28] = 0\n 66180: u8 [a0 + 27] = 0\n 66183: u8 [a0 + 26] = 0\n 66186: u8 [a0 + 25] = 0\n 66189: u8 [a0 + 24] = 0\n 66192: u8 [a0 + 23] = 0\n 66195: u8 [a0 + 22] = 0\n 66198: u8 [a0 + 21] = 0\n 66201: u8 [a0 + 20] = 0\n 66204: u8 [a0 + 19] = 0\n 66207: u8 [a0 + 18] = 0\n 66210: u8 [a0 + 17] = 0\n 66213: u8 [a0 + 16] = 0\n 66216: u8 [a0 + 15] = 0\n 66219: u8 [a0 + 14] = 0\n 66222: u8 [a0 + 13] = 0\n 66225: u8 [a0 + 12] = 0\n 66228: u8 [a0 + 11] = 0\n 66231: u8 [a0 + 10] = 0\n 66234: u8 [a0 + 9] = 0\n 66237: u8 [a0 + 8] = 0\n 66240: u8 [a0 + 7] = 0\n 66243: u8 [a0 + 6] = 0\n 66246: u8 [a0 + 5] = 0\n 66249: u8 [a0 + 4] = 0\n 66252: u8 [a0 + 3] = 0\n 66255: u8 [a0 + 2] = 0\n 66258: u8 [a0 + 1] = 0\n 66261: a1 = u64 [sp + 0x30]\n 66264: a3 = s1 | a1\n 66267: s1 = 0x100000000\n 66277: a1 = 0xffffffe0\n 66287: a1 = s0 <u a1\n 66290: a2 = u64 [sp + 0x38]\n 66293: a1 = 0 if a2 != 0\n 66295: u64 [sp + 0x30] = a3\n 66298: a1 = 0 if a3 != 0\n 66300: u8 [a0 + 0] = 0\n 66302: jump @875 if a1 == 0\n      : @871 (gas: 4)\n 66306: s0 = u64 [sp]\n 66308: i32 a0 = s0 + 0x20\n 66311: a1 = 0x20\n 66314: ra = 796, jump @0\n      : @872 [@dyn 398] (gas: 42)\n 66321: u8 [a0 + 31] = 0x6b\n 66325: u8 [a0 + 30] = 0x61\n 66329: u8 [a0 + 29] = 0x74\n 66333: u8 [a0 + 28] = 0x20\n 66337: u8 [a0 + 27] = 0x79\n 66341: u8 [a0 + 26] = 0x64\n 66345: u8 [a0 + 25] = 0x61\n 66349: a5 = 0x65\n 66352: u8 [a0 + 0x18] = a5\n 66355: u8 [a0 + 23] = 0x72\n 66359: u8 [a0 + 22] = 0x6c\n 66363: u8 [a0 + 21] = 0x61\n 66367: u8 [a0 + 20] = 0x20\n 66371: u8 [a0 + 0x13] = a5\n 66374: u8 [a0 + 18] = 0x6d\n 66378: u8 [a0 + 17] = 0x61\n 66382: u8 [a0 + 16] = 0x6e\n 66386: u8 [a0 + 15] = 0x20\n 66390: u8 [a0 + 0xe] = a5\n 66393: u8 [a0 + 13] = 0x63\n 66397: u8 [a0 + 12] = 0x69\n 66401: u8 [a0 + 11] = 0x76\n 66405: u8 [a0 + 10] = 0x72\n 66409: u8 [a0 + 0x9] = a5\n 66412: u8 [a0 + 8] = 0x73\n 66416: u8 [a0 + 7] = 0x20\n 66420: u8 [a0 + 6] = 0x3a\n 66424: u8 [a0 + 5] = 0x77\n 66428: a4 = 0x6f\n 66431: u8 [a0 + 0x4] = a4\n 66434: u8 [a0 + 3] = 0x72\n 66438: u8 [a0 + 2] = 0x63\n 66442: u8 [a0 + 1] = 0x73\n 66446: a2 = s1 + 0xffffffffffffffc0\n 66449: a3 = u64 [sp + 0x40]\n 66452: a2 = a3 <u a2\n 66455: a3 = u64 [sp + 0x38]\n 66458: a2 = 0 if a3 != 0\n 66460: a3 = u64 [sp + 0x30]\n 66463: a2 = 0 if a3 != 0\n 66465: u8 [a0 + 0] = 0x45\n 66468: jump @875 if a2 == 0\n      : @873 (gas: 3)\n 66472: i32 a0 = s0 + 0x40\n 66475: a1 = 0x20\n 66478: ra = 798, jump @0\n      : @874 [@dyn 399] (gas: 54)\n 66485: u8 [a0 + 31] = 0\n 66488: u8 [a0 + 30] = 0\n 66491: u8 [a0 + 29] = 0\n 66494: u8 [a0 + 28] = 0\n 66497: u8 [a0 + 27] = 0\n 66500: u8 [a0 + 26] = 0\n 66503: u8 [a0 + 25] = 0\n 66506: u8 [a0 + 24] = 0\n 66509: u8 [a0 + 23] = 0\n 66512: u8 [a0 + 22] = 0\n 66515: u8 [a0 + 21] = 0\n 66518: u8 [a0 + 20] = 0\n 66521: u8 [a0 + 19] = 0\n 66524: u8 [a0 + 18] = 0\n 66527: u8 [a0 + 17] = 0\n 66530: u8 [a0 + 16] = 0\n 66533: u8 [a0 + 15] = 0\n 66536: u8 [a0 + 14] = 0\n 66539: u8 [a0 + 13] = 0\n 66542: u8 [a0 + 12] = 0\n 66545: u8 [a0 + 11] = 0\n 66548: u8 [a0 + 10] = 0\n 66551: u8 [a0 + 9] = 0\n 66554: u8 [a0 + 8] = 0\n 66557: u8 [a0 + 7] = 0\n 66560: u8 [a0 + 6] = 0\n 66563: u8 [a0 + 5] = 0\n 66566: u8 [a0 + 4] = 0\n 66569: u8 [a0 + 3] = 0\n 66572: u8 [a0 + 2] = 0\n 66575: u8 [a0 + 1] = 0x6e\n 66579: u8 [a0 + 0] = 0x65\n 66582: a1 = u64 [sp + 0x8]\n 66585: a0 = a1 + 0x80\n 66589: a1 = a0 <u a1\n 66592: a3 = u64 [sp + 0x10]\n 66595: a2 = a3 + a1\n 66598: a3 = a2 <u a3\n 66601: a3 = a1 if a1 == 0\n 66604: a1 = u64 [sp + 0x18]\n 66607: a3 = a3 + a1\n 66610: a1 = a3 <u a1\n 66613: a4 = u64 [sp + 0x20]\n 66616: a1 = a1 + a4\n 66619: a4 = u64 [sp + 0x28]\n 66622: u64 [a4] = a0\n 66624: u64 [a4 + 0x8] = a2\n 66627: u64 [a4 + 0x10] = a3\n 66630: u64 [a4 + 0x18] = a1\n 66633: ra = u64 [sp + 0x58]\n 66636: s0 = u64 [sp + 0x50]\n 66639: s1 = u64 [sp + 0x48]\n 66642: sp = sp + 0x60\n 66645: ret\n      : @875 (gas: 1)\n 66647: trap\n      : @876 (gas: 21)\n 66648: sp = sp + 0xfffffffffffffd40\n 66652: u64 [sp + 0x2b8] = ra\n 66656: u64 [sp + 0x2b0] = s0\n 66660: u64 [sp + 0x2a8] = s1\n 66664: s0 = sp + 0x2c0\n 66668: sp = sp & 0xffffffffffffffe0\n 66671: a3 = u64 [a1 + 0x10]\n 66674: a2 = u64 [a1 + 0x18]\n 66677: a4 = u64 [a1 + 0x8]\n 66680: a5 = u64 [a1]\n 66682: u64 [sp + 0x98] = a2\n 66686: u64 [sp + 0x88] = a4\n 66690: a1 = a4 | a2\n 66693: a2 = a5 | a3\n 66696: a2 = a2 | a1\n 66699: a2 = a2 >> 0x20\n 66702: u64 [sp + 0x90] = a3\n 66706: a1 = a1 | a3\n 66709: a1 = a1 << 0x20\n 66712: a1 = a1 | a2\n 66715: jump @906 if a1 != 0\n      : @877 (gas: 13)\n 66719: a1 = u64 [a0 + 0x18]\n 66722: u64 [sp + 0x40] = a1\n 66725: a1 = u64 [a0 + 0x10]\n 66728: u64 [sp + 0x58] = a1\n 66731: a1 = u64 [a0 + 0x8]\n 66734: u64 [sp + 0x48] = a1\n 66737: a0 = u64 [a0]\n 66739: u64 [sp + 0x50] = a0\n 66742: u64 [sp + 0x80] = a5\n 66746: i32 a0 = a5 + 0\n 66748: a1 = 0x20\n 66751: u64 [sp + 0x18] = a0\n 66754: ra = 800, jump @0\n      : @878 [@dyn 400] (gas: 80)\n 66761: a1 = u8 [a0 + 0x9]\n 66764: a2 = u8 [a0 + 0x8]\n 66767: a3 = u8 [a0 + 0xa]\n 66770: a4 = u8 [a0 + 0xb]\n 66773: a1 = a1 << 0x8\n 66776: a1 = a1 | a2\n 66779: a3 = a3 << 0x10\n 66782: a4 = a4 << 0x18\n 66785: a3 = a3 | a4\n 66788: a1 = a1 | a3\n 66791: a2 = u8 [a0 + 0xd]\n 66794: a3 = u8 [a0 + 0xc]\n 66797: a4 = u8 [a0 + 0xe]\n 66800: a5 = u8 [a0 + 0xf]\n 66803: a2 = a2 << 0x8\n 66806: a2 = a2 | a3\n 66809: a4 = a4 << 0x10\n 66812: a5 = a5 << 0x18\n 66815: a4 = a4 | a5\n 66818: a2 = a2 | a4\n 66821: a2 = a2 << 0x20\n 66824: t0 = a2 | a1\n 66827: a1 = u8 [a0 + 0x1]\n 66830: a2 = u8 [a0]\n 66832: a3 = u8 [a0 + 0x2]\n 66835: a4 = u8 [a0 + 0x3]\n 66838: a1 = a1 << 0x8\n 66841: a1 = a1 | a2\n 66844: a3 = a3 << 0x10\n 66847: a4 = a4 << 0x18\n 66850: a3 = a3 | a4\n 66853: a1 = a1 | a3\n 66856: a2 = u8 [a0 + 0x5]\n 66859: a3 = u8 [a0 + 0x4]\n 66862: a4 = u8 [a0 + 0x6]\n 66865: a5 = u8 [a0 + 0x7]\n 66868: a2 = a2 << 0x8\n 66871: a2 = a2 | a3\n 66874: a4 = a4 << 0x10\n 66877: a5 = a5 << 0x18\n 66880: a4 = a4 | a5\n 66883: a2 = a2 | a4\n 66886: a2 = a2 << 0x20\n 66889: s1 = a2 | a1\n 66892: a1 = u8 [a0 + 0x11]\n 66895: a2 = u8 [a0 + 0x10]\n 66898: a3 = u8 [a0 + 0x12]\n 66901: a4 = u8 [a0 + 0x13]\n 66904: a1 = a1 << 0x8\n 66907: a1 = a1 | a2\n 66910: a3 = a3 << 0x10\n 66913: a4 = a4 << 0x18\n 66916: a3 = a3 | a4\n 66919: a1 = a1 | a3\n 66922: a2 = u8 [a0 + 0x15]\n 66925: a3 = u8 [a0 + 0x14]\n 66928: a4 = u8 [a0 + 0x16]\n 66931: a5 = u8 [a0 + 0x17]\n 66934: a2 = a2 << 0x8\n 66937: a2 = a2 | a3\n 66940: a4 = a4 << 0x10\n 66943: a5 = a5 << 0x18\n 66946: a4 = a4 | a5\n 66949: a2 = a2 | a4\n 66952: a2 = a2 << 0x20\n 66955: a1 = a1 | a2\n 66958: u64 [sp + 0x60] = a1\n 66961: a1 = reverse a1\n 66963: u64 [sp + 0x68] = s1\n 66966: a3 = reverse s1\n 66968: u64 [sp + 0x70] = t0\n 66971: a2 = reverse t0\n 66973: u64 [sp + 0x30] = a2\n 66976: u64 [sp + 0x28] = a3\n 66979: a2 = a2 | a3\n 66982: u64 [sp + 0x38] = a1\n 66985: a1 = a1 <u 0x1\n 66988: u64 [sp + 0xd8] = a2\n 66992: a1 = 0 if a2 != 0\n 66994: jump @907 if a1 == 0\n      : @879 (gas: 36)\n 66998: a1 = u8 [a0 + 0x18]\n 67001: u64 [sp + 0xb8] = a1\n 67005: a1 = u8 [a0 + 0x19]\n 67008: u64 [sp + 0x78] = a1\n 67011: a1 = u8 [a0 + 0x1a]\n 67014: u64 [sp + 0xa8] = a1\n 67018: a1 = u8 [a0 + 0x1b]\n 67021: u64 [sp + 0xa0] = a1\n 67025: a1 = u8 [a0 + 0x1c]\n 67028: u64 [sp + 0xd0] = a1\n 67032: a1 = u8 [a0 + 0x1d]\n 67035: u64 [sp + 0xb0] = a1\n 67039: a1 = u8 [a0 + 0x1e]\n 67042: u64 [sp + 0xc8] = a1\n 67046: a0 = u8 [a0 + 0x1f]\n 67049: u64 [sp + 0xc0] = a0\n 67053: u32 [sp + 576] = 0x20\n 67058: a0 = u64 [sp + 0x58]\n 67061: u64 [sp + 0x270] = a0\n 67065: a0 = u64 [sp + 0x48]\n 67068: u64 [sp + 0x268] = a0\n 67072: a0 = u64 [sp + 0x50]\n 67075: u64 [sp + 0x260] = a0\n 67079: s1 = u64 [sp + 0x40]\n 67082: u64 [sp + 0x278] = s1\n 67086: u64 [sp + 664] = 0\n 67090: u64 [sp + 656] = 0\n 67094: u64 [sp + 648] = 0\n 67098: u64 [sp + 640] = 0\n 67102: i32 a1 = sp + 0x260\n 67106: i32 a3 = sp + 0x280\n 67110: i32 a4 = sp + 0x240\n 67114: a2 = 0xffffffffffffffff\n 67117: a0 = 0\n 67119: ecalli 7 // 'get_storage'\n 67121: fallthrough\n      : @880 (gas: 28)\n 67122: a0 = u64 [sp + 0x290]\n 67126: a1 = u64 [sp + 0x288]\n 67130: a2 = u64 [sp + 0x280]\n 67134: a3 = u64 [sp + 0x298]\n 67138: a4 = a0 << 0x3f\n 67141: a5 = a1 >> 0x1\n 67144: a4 = a4 | a5\n 67147: a5 = a3 << 0x3f\n 67150: a0 = a0 >> 0x1\n 67153: t2 = s1\n 67155: s1 = a0 | a5\n 67158: a1 = a1 << 0x3f\n 67161: a5 = a2 >> 0x1\n 67164: a1 = a1 | a5\n 67167: a5 = a3 >> 0x1\n 67170: a2 = a2 & 0x1\n 67173: a0 = -a2\n 67175: t0 = a2 <u 0x1\n 67178: a3 = a1 & 0x7f\n 67181: t1 = a0 & s1\n 67184: a4 = a4 & a0\n 67187: a3 = a1 if a2 != 0\n 67190: a1 = a0 & a5\n 67193: a0 = a3 <u 0x20\n 67196: a0 = 0 if a4 != 0\n 67198: a2 = t1 | a1\n 67201: a0 = 0 if a2 != 0\n 67203: jump @909 if t0 != a0\n      : @881 (gas: 47)\n 67207: a0 = u64 [sp + 0x78]\n 67210: a0 = a0 << 0x8\n 67213: a2 = u64 [sp + 0xb8]\n 67217: a0 = a0 | a2\n 67220: a2 = u64 [sp + 0xa8]\n 67224: a2 = a2 << 0x10\n 67227: a5 = u64 [sp + 0xa0]\n 67231: a5 = a5 << 0x18\n 67234: a2 = a2 | a5\n 67237: a0 = a0 | a2\n 67240: a2 = u64 [sp + 0xb0]\n 67244: a2 = a2 << 0x8\n 67247: a5 = u64 [sp + 0xd0]\n 67251: a2 = a2 | a5\n 67254: a5 = u64 [sp + 0xc8]\n 67258: a5 = a5 << 0x10\n 67261: s1 = u64 [sp + 0xc0]\n 67265: s1 = s1 << 0x18\n 67268: a5 = a5 | s1\n 67271: a2 = a2 | a5\n 67274: a2 = a2 << 0x20\n 67277: a0 = a0 | a2\n 67280: u64 [sp + 0xd0] = a0\n 67284: a0 = reverse a0\n 67286: u64 [sp + 0x20] = a0\n 67289: u64 [sp + 0x1e0] = a0\n 67293: u64 [sp + 0x200] = a3\n 67297: a0 = u64 [sp + 0x50]\n 67300: u64 [sp + 0x220] = a0\n 67304: a0 = u64 [sp + 0x38]\n 67307: u64 [sp + 0x1e8] = a0\n 67311: u64 [sp + 0x208] = a4\n 67315: a0 = u64 [sp + 0x48]\n 67318: u64 [sp + 0x228] = a0\n 67322: a0 = u64 [sp + 0x30]\n 67325: u64 [sp + 0x1f0] = a0\n 67329: u64 [sp + 0x210] = t1\n 67333: a0 = u64 [sp + 0x58]\n 67336: u64 [sp + 0x230] = a0\n 67340: s1 = u64 [sp + 0x28]\n 67343: u64 [sp + 0x1f8] = s1\n 67347: u64 [sp + 0x218] = a1\n 67351: a0 = sp + 0x220\n 67355: a1 = sp + 0x200\n 67359: a2 = sp + 0x1e0\n 67363: u64 [sp + 0x238] = t2\n 67367: ra = 802, jump @760\n      : @882 [@dyn 401] (gas: 16)\n 67373: a3 = u64 [sp + 0x20]\n 67376: a2 = u64 [sp + 0x38]\n 67379: a0 = a2 >u 0\n 67381: a1 = a3 <u 0x20\n 67384: a1 = a1 ^ 0x1\n 67387: a1 = a0 if a2 != 0\n 67390: a0 = u64 [sp + 0x30]\n 67393: a0 = a0 >u 0\n 67395: a2 = s1 >u 0\n 67397: a2 = a0 if s1 == 0\n 67400: a0 = u64 [sp + 0xd8]\n 67404: a2 = a1 if a0 == 0\n 67407: a4 = u64 [sp + 0x40]\n 67410: a5 = u64 [sp + 0x58]\n 67413: s1 = u64 [sp + 0x50]\n 67416: jump @893 if a2 == 0\n      : @883 (gas: 5)\n 67420: a3 = a3 & 0xffffffffffffffe0\n 67423: u64 [sp + 0x18] = a3\n 67426: a1 = 0x20\n 67429: a0 = 0\n 67431: ra = 804, jump @0\n      : @884 [@dyn 402] (gas: 70)\n 67438: a1 = u64 [sp + 0x40]\n 67441: a1 = reverse a1\n 67443: a2 = u64 [sp + 0x58]\n 67446: a2 = reverse a2\n 67448: a3 = u64 [sp + 0x48]\n 67451: a3 = reverse a3\n 67453: a4 = reverse s1\n 67455: a5 = a4 >> 0x38\n 67458: u8 [a0 + 0x1f] = a5\n 67461: a5 = a4 >> 0x30\n 67464: u8 [a0 + 0x1e] = a5\n 67467: a5 = a4 >> 0x28\n 67470: u8 [a0 + 0x1d] = a5\n 67473: a5 = a4 >> 0x20\n 67476: u8 [a0 + 0x1c] = a5\n 67479: a5 = a4 >> 0x18\n 67482: u8 [a0 + 0x1b] = a5\n 67485: a5 = a4 >> 0x10\n 67488: u8 [a0 + 0x1a] = a5\n 67491: a5 = a4 >> 0x8\n 67494: u8 [a0 + 0x19] = a5\n 67497: u8 [a0 + 0x18] = a4\n 67500: u8 [a0 + 0x10] = a3\n 67503: a4 = a3 >> 0x38\n 67506: u8 [a0 + 0x17] = a4\n 67509: a4 = a3 >> 0x30\n 67512: u8 [a0 + 0x16] = a4\n 67515: a4 = a3 >> 0x28\n 67518: u8 [a0 + 0x15] = a4\n 67521: a4 = a3 >> 0x20\n 67524: u8 [a0 + 0x14] = a4\n 67527: a4 = a3 >> 0x18\n 67530: u8 [a0 + 0x13] = a4\n 67533: a4 = a3 >> 0x10\n 67536: u8 [a0 + 0x12] = a4\n 67539: a3 = a3 >> 0x8\n 67542: u8 [a0 + 0x11] = a3\n 67545: u8 [a0 + 0x8] = a2\n 67548: a3 = a2 >> 0x38\n 67551: u8 [a0 + 0xf] = a3\n 67554: a3 = a2 >> 0x30\n 67557: u8 [a0 + 0xe] = a3\n 67560: a3 = a2 >> 0x28\n 67563: u8 [a0 + 0xd] = a3\n 67566: a3 = a2 >> 0x20\n 67569: u8 [a0 + 0xc] = a3\n 67572: a3 = a2 >> 0x18\n 67575: u8 [a0 + 0xb] = a3\n 67578: a3 = a2 >> 0x10\n 67581: u8 [a0 + 0xa] = a3\n 67584: a2 = a2 >> 0x8\n 67587: u8 [a0 + 0x9] = a2\n 67590: u8 [a0] = a1\n 67592: a2 = a1 >> 0x38\n 67595: u8 [a0 + 0x7] = a2\n 67598: a2 = a1 >> 0x30\n 67601: u8 [a0 + 0x6] = a2\n 67604: a2 = a1 >> 0x28\n 67607: u8 [a0 + 0x5] = a2\n 67610: a2 = a1 >> 0x20\n 67613: u8 [a0 + 0x4] = a2\n 67616: a2 = a1 >> 0x18\n 67619: u8 [a0 + 0x3] = a2\n 67622: a2 = a1 >> 0x10\n 67625: u8 [a0 + 0x2] = a2\n 67628: a1 = a1 >> 0x8\n 67631: u8 [a0 + 0x1] = a1\n 67634: a1 = 0x20\n 67637: a0 = 0\n 67639: ra = 806, jump @0\n      : @885 [@dyn 403] (gas: 5)\n 67646: i32 a0 = a0 + 0\n 67648: i32 a2 = sp + 0x280\n 67652: a1 = 0x20\n 67655: ecalli 8 // 'hash_keccak_256'\n 67657: fallthrough\n      : @886 (gas: 13)\n 67658: a0 = u64 [sp + 0x280]\n 67662: a1 = u64 [sp + 0x288]\n 67666: a2 = u64 [sp + 0x290]\n 67670: a3 = u64 [sp + 0x298]\n 67674: a0 = reverse a0\n 67676: u64 [sp + 0xd0] = a0\n 67680: t0 = reverse a1\n 67682: a0 = reverse a2\n 67684: u64 [sp + 0xd8] = a0\n 67688: a0 = reverse a3\n 67690: u64 [sp + 0xc0] = a0\n 67694: a0 = u64 [sp + 0x18]\n 67697: jump @897 if a0 == 0\n      : @887 (gas: 118)\n 67701: u64 [sp + 176] = 0\n 67705: u64 [sp + 184] = 0\n 67709: u64 [sp + 168] = 0\n 67713: ra = u64 [sp + 0x80]\n 67717: s1 = ra + 0x20\n 67720: a0 = s1 <u ra\n 67723: t2 = u64 [sp + 0x88]\n 67727: a2 = t2 + a0\n 67730: a3 = a2 <u t2\n 67733: a3 = a0 if a0 == 0\n 67736: t1 = u64 [sp + 0x90]\n 67740: a3 = a3 + t1\n 67743: a0 = a3 <u t1\n 67746: u64 [sp + 0xc8] = t0\n 67750: t0 = u64 [sp + 0x98]\n 67754: t0 = t0 + a0\n 67757: a4 = a3 >u 0\n 67759: a5 = t0 >u 0\n 67761: a5 = a4 if t0 == 0\n 67764: a4 = 0x100000000\n 67774: a1 = s1\n 67776: a0 = maxu(s1, a4)\n 67779: s1 = a4 if a5 == 0\n 67782: a1 = a4 if a2 == 0\n 67785: a0 = a1 if a2 != 0\n 67788: a1 = a3 | t0\n 67791: a0 = s1 if a1 != 0\n 67794: a4 = a2\n 67796: a4 = 0 if a5 == 0\n 67798: a4 = a2 if a1 == 0\n 67801: a1 = a3\n 67803: a1 = 0 if t0 == 0\n 67805: a1 = a3 if t0 == 0\n 67808: a2 = t2 ^ 0xffffffffffffffff\n 67811: a4 = a4 + a2\n 67814: a3 = ra ^ 0xffffffffffffffff\n 67817: a0 = a0 + a3\n 67820: a3 = a0 <u a3\n 67823: a4 = a4 + a3\n 67826: a5 = a4 ^ a2\n 67829: a2 = a4 <u a2\n 67832: a2 = a3 if a5 == 0\n 67835: a5 = t1 ^ 0xffffffffffffffff\n 67838: u64 [sp + 0x78] = a5\n 67841: a5 = a5 + a1\n 67844: s1 = a5 + a2\n 67847: a1 = s1 << 0x3b\n 67850: a2 = a4 >> 0x5\n 67853: a1 = a1 | a2\n 67856: a4 = a4 << 0x3b\n 67859: a0 = a0 >> 0x5\n 67862: a2 = a0 | a4\n 67865: u64 [sp + 0xa0] = a2\n 67869: a4 = u64 [sp + 0x18]\n 67872: a0 = a4 <u 0x1\n 67875: a3 = -a0\n 67877: ra = a0 << 0x3b\n 67880: a4 = a4 + 0xffffffffffffffff\n 67883: a4 = a4 >> 0x5\n 67886: a0 = a4 - ra\n 67889: t2 = a1 ^ a3\n 67892: a4 = a1 <u a3\n 67895: t1 = a2 <u a0\n 67898: t1 = a4 if t2 != 0\n 67901: a2 = u64 [sp + 0x98]\n 67905: a4 = a2 ^ 0xffffffffffffffff\n 67908: t0 = t0 + a4\n 67911: a2 = u64 [sp + 0x78]\n 67914: a4 = a5 <u a2\n 67917: a4 = a4 + t0\n 67920: a5 = s1 <u a5\n 67923: a4 = a4 + a5\n 67926: s1 = s1 >> 0x5\n 67929: a5 = a4 << 0x3b\n 67932: a5 = a5 | s1\n 67935: a4 = a4 >> 0x5\n 67938: s1 = a3 >> 0x5\n 67941: t0 = s1 - ra\n 67944: a2 = a5 <u t0\n 67947: t2 = a4 ^ s1\n 67950: ra = a4 <u s1\n 67953: ra = a2 if t2 == 0\n 67956: a2 = a5 ^ t0\n 67959: a2 = a2 | t2\n 67962: ra = t1 if a2 == 0\n 67965: a2 = u64 [sp + 0xa0]\n 67969: a2 = a0 if ra == 0\n 67972: a1 = a3 if ra == 0\n 67975: a4 = s1 if ra == 0\n 67978: a5 = t0 if ra == 0\n 67981: a0 = a5 >> 0x3b\n 67984: a4 = a4 << 0x5\n 67987: t0 = a4 | a0\n 67990: a4 = u64 [sp + 0xb0]\n 67994: a0 = a1 >> 0x3b\n 67997: a5 = a5 << 0x5\n 68000: t2 = a5 | a0\n 68003: a5 = u64 [sp + 0xb8]\n 68007: a3 = a2 >> 0x3b\n 68010: a1 = a1 << 0x5\n 68013: a0 = a1 | a3\n 68016: t1 = a2 << 0x5\n 68019: a3 = t1 + 0x40\n 68022: u64 [sp + 0x78] = a3\n 68025: a3 = a3 <u t1\n 68028: s1 = u64 [sp + 0xa8]\n 68032: a1 = a0 + a3\n 68035: u64 [sp + 0x70] = a1\n 68038: a1 = a1 <u a0\n 68041: a1 = a3 if a3 == 0\n 68044: a1 = a1 + t2\n 68047: u64 [sp + 0x68] = a1\n 68050: a1 = a1 <u t2\n 68053: a1 = a1 + t0\n 68056: u64 [sp + 0x60] = a1\n 68059: a2 = 0x20\n 68062: a3 = u64 [sp + 0xc8]\n 68066: fallthrough\n      : @888 (gas: 31)\n 68067: u64 [sp + 0xa8] = s1\n 68071: u64 [sp + 0xc8] = a3\n 68075: a0 = u64 [sp + 0x80]\n 68079: a0 = a0 + a2\n 68082: u64 [sp + 0xa0] = a2\n 68086: a1 = a0 <u a2\n 68089: a2 = u64 [sp + 0x88]\n 68093: a2 = a2 + a4\n 68096: a2 = a2 + a1\n 68099: a3 = a2 ^ a4\n 68102: u64 [sp + 0xb0] = a4\n 68106: a4 = a2 <u a4\n 68109: a4 = a1 if a3 == 0\n 68112: a1 = u64 [sp + 0x90]\n 68116: a1 = a1 + a5\n 68119: u64 [sp + 0xb8] = a5\n 68123: a3 = a1 <u a5\n 68126: a5 = u64 [sp + 0x98]\n 68130: a5 = a5 + s1\n 68133: a3 = a3 + a5\n 68136: a4 = a4 + a1\n 68139: a1 = a4 <u a1\n 68142: a1 = a1 + a3\n 68145: a1 = a1 | a2\n 68148: a2 = a0 | a4\n 68151: a2 = a2 | a1\n 68154: a1 = a1 | a4\n 68157: a2 = a2 >> 0x20\n 68160: a1 = a1 << 0x20\n 68163: a1 = a1 | a2\n 68166: jump @906 if a1 != 0\n      : @889 (gas: 3)\n 68170: i32 a0 = a0 + 0\n 68172: a1 = 0x20\n 68175: ra = 808, jump @0\n      : @890 [@dyn 404] (gas: 111)\n 68182: a1 = u8 [a0 + 0x1]\n 68185: a2 = u8 [a0]\n 68187: a3 = u8 [a0 + 0x2]\n 68190: a4 = u8 [a0 + 0x3]\n 68193: a1 = a1 << 0x8\n 68196: a1 = a1 | a2\n 68199: a3 = a3 << 0x10\n 68202: a4 = a4 << 0x18\n 68205: a3 = a3 | a4\n 68208: a1 = a1 | a3\n 68211: a2 = u8 [a0 + 0x5]\n 68214: a3 = u8 [a0 + 0x4]\n 68217: a4 = u8 [a0 + 0x6]\n 68220: a5 = u8 [a0 + 0x7]\n 68223: a2 = a2 << 0x8\n 68226: a2 = a2 | a3\n 68229: a4 = a4 << 0x10\n 68232: a5 = a5 << 0x18\n 68235: a4 = a4 | a5\n 68238: a2 = a2 | a4\n 68241: a2 = a2 << 0x20\n 68244: t0 = a2 | a1\n 68247: a2 = u8 [a0 + 0x9]\n 68250: a3 = u8 [a0 + 0x8]\n 68253: a4 = u8 [a0 + 0xa]\n 68256: a5 = u8 [a0 + 0xb]\n 68259: a2 = a2 << 0x8\n 68262: a2 = a2 | a3\n 68265: a4 = a4 << 0x10\n 68268: a5 = a5 << 0x18\n 68271: a4 = a4 | a5\n 68274: a2 = a2 | a4\n 68277: a3 = u8 [a0 + 0xd]\n 68280: a4 = u8 [a0 + 0xc]\n 68283: a5 = u8 [a0 + 0xe]\n 68286: s1 = u8 [a0 + 0xf]\n 68289: a3 = a3 << 0x8\n 68292: a3 = a3 | a4\n 68295: a5 = a5 << 0x10\n 68298: s1 = s1 << 0x18\n 68301: a5 = a5 | s1\n 68304: a3 = a3 | a5\n 68307: a3 = a3 << 0x20\n 68310: a2 = a2 | a3\n 68313: a3 = u8 [a0 + 0x11]\n 68316: a4 = u8 [a0 + 0x10]\n 68319: a5 = u8 [a0 + 0x12]\n 68322: s1 = u8 [a0 + 0x13]\n 68325: a3 = a3 << 0x8\n 68328: a3 = a3 | a4\n 68331: a5 = a5 << 0x10\n 68334: s1 = s1 << 0x18\n 68337: a5 = a5 | s1\n 68340: a3 = a3 | a5\n 68343: a4 = u8 [a0 + 0x15]\n 68346: a5 = u8 [a0 + 0x14]\n 68349: s1 = u8 [a0 + 0x16]\n 68352: a1 = u8 [a0 + 0x17]\n 68355: a4 = a4 << 0x8\n 68358: a4 = a4 | a5\n 68361: s1 = s1 << 0x10\n 68364: a1 = a1 << 0x18\n 68367: a1 = a1 | s1\n 68370: a1 = a1 | a4\n 68373: a1 = a1 << 0x20\n 68376: a3 = a3 | a1\n 68379: a1 = u8 [a0 + 0x19]\n 68382: a4 = u8 [a0 + 0x18]\n 68385: a5 = u8 [a0 + 0x1a]\n 68388: s1 = u8 [a0 + 0x1b]\n 68391: a1 = a1 << 0x8\n 68394: a1 = a1 | a4\n 68397: a5 = a5 << 0x10\n 68400: s1 = s1 << 0x18\n 68403: a5 = a5 | s1\n 68406: a1 = a1 | a5\n 68409: a4 = u8 [a0 + 0x1d]\n 68412: a5 = u8 [a0 + 0x1c]\n 68415: s1 = u8 [a0 + 0x1e]\n 68418: a0 = u8 [a0 + 0x1f]\n 68421: a4 = a4 << 0x8\n 68424: a4 = a4 | a5\n 68427: s1 = s1 << 0x10\n 68430: a0 = a0 << 0x18\n 68433: a0 = a0 | s1\n 68436: a0 = a0 | a4\n 68439: a0 = a0 << 0x20\n 68442: a0 = a0 | a1\n 68445: a0 = reverse a0\n 68447: a1 = reverse a3\n 68449: a2 = reverse a2\n 68451: a3 = reverse t0\n 68453: a4 = u64 [sp + 0xd0]\n 68457: u64 [sp + 0x278] = a4\n 68461: a4 = u64 [sp + 0xc8]\n 68465: u64 [sp + 0x270] = a4\n 68469: a4 = u64 [sp + 0xd8]\n 68473: u64 [sp + 0x268] = a4\n 68477: s1 = u64 [sp + 0xc0]\n 68481: u64 [sp + 0x260] = s1\n 68485: u64 [sp + 0x298] = a3\n 68489: u64 [sp + 0x290] = a2\n 68493: u64 [sp + 0x288] = a1\n 68497: u64 [sp + 0x280] = a0\n 68501: i32 a1 = sp + 0x260\n 68505: i32 a3 = sp + 0x280\n 68509: a2 = 0xffffffffffffffff\n 68512: a4 = 0x20\n 68515: a0 = 0\n 68517: ecalli 14 // 'set_storage'\n 68519: fallthrough\n      : @891 (gas: 42)\n 68520: s1 = s1 + 0x1\n 68523: a0 = s1 <u 0x1\n 68526: a1 = u64 [sp + 0xd8]\n 68530: a1 = a1 + a0\n 68533: u64 [sp + 0xc0] = s1\n 68537: u64 [sp + 0xd8] = a1\n 68541: a0 = s1 | a1\n 68544: a0 = a0 <u 0x1\n 68547: a1 = u64 [sp + 0xc8]\n 68551: t0 = a1 + a0\n 68554: a2 = t0 <u a1\n 68557: a0 = u64 [sp + 0xa0]\n 68561: a1 = a0 + 0x20\n 68564: a0 = a1 <u a0\n 68567: a3 = u64 [sp + 0xb0]\n 68571: t2 = a3 + a0\n 68574: a3 = t2 <u a3\n 68577: a3 = a0 if a0 == 0\n 68580: a4 = u64 [sp + 0xb8]\n 68584: a0 = a4 + a3\n 68587: a3 = a0 <u a4\n 68590: s1 = u64 [sp + 0xa8]\n 68594: s1 = s1 + a3\n 68597: a3 = u64 [sp + 0x68]\n 68600: a3 = a3 ^ a0\n 68603: a4 = u64 [sp + 0x78]\n 68606: a4 = a4 ^ a1\n 68609: a3 = a3 | a4\n 68612: a4 = u64 [sp + 0x60]\n 68615: a4 = a4 ^ s1\n 68618: a5 = u64 [sp + 0x70]\n 68621: a5 = t2 ^ a5\n 68624: a4 = a4 | a5\n 68627: t1 = a3 | a4\n 68630: a3 = u64 [sp + 0xd0]\n 68634: a3 = a3 + a2\n 68637: u64 [sp + 0xd0] = a3\n 68641: a2 = a1\n 68643: a4 = t2\n 68645: a5 = a0\n 68647: a3 = t0\n 68649: jump @888 if t1 != 0\n      : @892 (gas: 1)\n 68653: jump @898\n      : @893 (gas: 8)\n 68656: a0 = u64 [sp + 0x68]\n 68659: a1 = u64 [sp + 0x60]\n 68662: a0 = a0 | a1\n 68665: a1 = u64 [sp + 0x70]\n 68668: a2 = u64 [sp + 0xd0]\n 68672: a1 = a1 | a2\n 68675: a0 = a0 | a1\n 68678: jump @903 if a0 == 0\n      : @894 (gas: 10)\n 68682: a0 = u64 [sp + 0x98]\n 68686: a1 = u64 [sp + 0x90]\n 68690: a0 = a0 | a1\n 68693: a1 = 0xffffffe0\n 68703: a2 = u64 [sp + 0x80]\n 68707: a1 = a2 <u a1\n 68710: a2 = u64 [sp + 0x88]\n 68714: a1 = 0 if a2 != 0\n 68716: a1 = 0 if a0 != 0\n 68718: jump @906 if a1 == 0\n      : @895 (gas: 4)\n 68722: a0 = u64 [sp + 0x18]\n 68725: i32 a0 = a0 + 0x20\n 68728: a1 = 0x20\n 68731: ra = 810, jump @0\n      : @896 [@dyn 405] (gas: 280)\n 68738: a1 = u8 [a0 + 0x19]\n 68741: a2 = u8 [a0 + 0x18]\n 68744: a3 = u8 [a0 + 0x1a]\n 68747: a4 = u8 [a0 + 0x1b]\n 68750: a1 = a1 << 0x8\n 68753: a1 = a1 | a2\n 68756: a3 = a3 << 0x10\n 68759: a4 = a4 << 0x18\n 68762: a3 = a3 | a4\n 68765: a1 = a1 | a3\n 68768: a2 = u8 [a0 + 0x1d]\n 68771: a3 = u8 [a0 + 0x1c]\n 68774: a4 = u8 [a0 + 0x1e]\n 68777: a5 = u8 [a0 + 0x1f]\n 68780: a2 = a2 << 0x8\n 68783: a2 = a2 | a3\n 68786: a4 = a4 << 0x10\n 68789: a5 = a5 << 0x18\n 68792: a4 = a4 | a5\n 68795: a2 = a2 | a4\n 68798: a2 = a2 << 0x20\n 68801: t0 = a2 | a1\n 68804: a1 = u8 [a0 + 0x11]\n 68807: a2 = u8 [a0 + 0x10]\n 68810: a3 = u8 [a0 + 0x12]\n 68813: a4 = u8 [a0 + 0x13]\n 68816: a1 = a1 << 0x8\n 68819: a1 = a1 | a2\n 68822: a3 = a3 << 0x10\n 68825: a4 = a4 << 0x18\n 68828: a3 = a3 | a4\n 68831: a1 = a1 | a3\n 68834: a2 = u8 [a0 + 0x15]\n 68837: a3 = u8 [a0 + 0x14]\n 68840: a4 = u8 [a0 + 0x16]\n 68843: a5 = u8 [a0 + 0x17]\n 68846: a2 = a2 << 0x8\n 68849: a2 = a2 | a3\n 68852: a4 = a4 << 0x10\n 68855: a5 = a5 << 0x18\n 68858: a4 = a4 | a5\n 68861: a2 = a2 | a4\n 68864: a2 = a2 << 0x20\n 68867: a1 = a1 | a2\n 68870: u64 [sp + 0xd8] = a1\n 68874: a1 = u8 [a0 + 0x9]\n 68877: a3 = u8 [a0 + 0x8]\n 68880: a4 = u8 [a0 + 0xa]\n 68883: a5 = u8 [a0 + 0xb]\n 68886: a1 = a1 << 0x8\n 68889: a1 = a1 | a3\n 68892: a4 = a4 << 0x10\n 68895: a5 = a5 << 0x18\n 68898: a4 = a4 | a5\n 68901: a1 = a1 | a4\n 68904: a3 = u8 [a0 + 0xd]\n 68907: a4 = u8 [a0 + 0xc]\n 68910: a5 = u8 [a0 + 0xe]\n 68913: s1 = u8 [a0 + 0xf]\n 68916: a3 = a3 << 0x8\n 68919: a3 = a3 | a4\n 68922: a5 = a5 << 0x10\n 68925: s1 = s1 << 0x18\n 68928: a5 = a5 | s1\n 68931: a3 = a3 | a5\n 68934: a3 = a3 << 0x20\n 68937: a1 = a1 | a3\n 68940: u64 [sp + 0xd0] = a1\n 68944: a1 = u8 [a0 + 0x1]\n 68947: a4 = u8 [a0]\n 68949: a5 = u8 [a0 + 0x2]\n 68952: s1 = u8 [a0 + 0x3]\n 68955: a1 = a1 << 0x8\n 68958: a1 = a1 | a4\n 68961: a5 = a5 << 0x10\n 68964: s1 = s1 << 0x18\n 68967: a5 = a5 | s1\n 68970: a1 = a1 | a5\n 68973: a4 = u8 [a0 + 0x5]\n 68976: a5 = u8 [a0 + 0x4]\n 68979: s1 = u8 [a0 + 0x6]\n 68982: a0 = u8 [a0 + 0x7]\n 68985: a4 = a4 << 0x8\n 68988: a4 = a4 | a5\n 68991: s1 = s1 << 0x10\n 68994: a0 = a0 << 0x18\n 68997: a0 = a0 | s1\n 69000: a0 = a0 | a4\n 69003: a0 = a0 << 0x20\n 69006: ra = a0 | a1\n 69009: u8 [sp + 479] = 0\n 69013: u8 [sp + 478] = 0\n 69017: u8 [sp + 477] = 0\n 69021: u8 [sp + 476] = 0\n 69025: u8 [sp + 475] = 0\n 69029: u8 [sp + 474] = 0\n 69033: u8 [sp + 473] = 0\n 69037: u8 [sp + 472] = 0\n 69041: u8 [sp + 471] = 0\n 69045: u8 [sp + 470] = 0\n 69049: u8 [sp + 469] = 0\n 69053: u8 [sp + 468] = 0\n 69057: u8 [sp + 467] = 0\n 69061: u8 [sp + 466] = 0\n 69065: u8 [sp + 465] = 0\n 69069: u8 [sp + 464] = 0\n 69073: u8 [sp + 463] = 0\n 69077: u8 [sp + 462] = 0\n 69081: u8 [sp + 461] = 0\n 69085: u8 [sp + 460] = 0\n 69089: u8 [sp + 459] = 0\n 69093: u8 [sp + 458] = 0\n 69097: u8 [sp + 457] = 0\n 69101: u8 [sp + 456] = 0\n 69105: u8 [sp + 455] = 0\n 69109: u8 [sp + 454] = 0\n 69113: u8 [sp + 453] = 0\n 69117: u8 [sp + 452] = 0\n 69121: u8 [sp + 451] = 0\n 69125: u8 [sp + 450] = 0\n 69129: u8 [sp + 449] = 0\n 69133: u8 [sp + 448] = 0\n 69137: u8 [sp + 447] = 0xff\n 69143: u8 [sp + 446] = 0xff\n 69149: u8 [sp + 445] = 0xff\n 69155: u8 [sp + 443] = 0xff\n 69161: u8 [sp + 440] = 0xffffffffffffffff\n 69166: u8 [sp + 439] = 0xff\n 69172: u8 [sp + 438] = 0xff\n 69178: u8 [sp + 437] = 0xff\n 69184: u8 [sp + 435] = 0xff\n 69190: u8 [sp + 432] = 0xffffffffffffffff\n 69195: u8 [sp + 431] = 0xff\n 69201: u8 [sp + 430] = 0xff\n 69207: u8 [sp + 429] = 0xff\n 69213: u8 [sp + 427] = 0xff\n 69219: u8 [sp + 424] = 0xffffffffffffffff\n 69224: u8 [sp + 423] = 0xff\n 69230: u8 [sp + 422] = 0xff\n 69236: u8 [sp + 421] = 0xff\n 69242: u8 [sp + 419] = 0xff\n 69248: u8 [sp + 416] = 0xffffffffffffffff\n 69253: a1 = 0xffffffff\n 69263: u8 [sp + 0x1bc] = a1\n 69267: a5 = 0xffffffffffff\n 69277: u8 [sp + 0x1ba] = a5\n 69281: a4 = 0xffffffffffffff\n 69291: u8 [sp + 0x1b9] = a4\n 69295: u8 [sp + 0x1b4] = a1\n 69299: u8 [sp + 0x1b2] = a5\n 69303: u8 [sp + 0x1b1] = a4\n 69307: u8 [sp + 0x1ac] = a1\n 69311: u8 [sp + 0x1aa] = a5\n 69315: u8 [sp + 0x1a9] = a4\n 69319: u8 [sp + 0x1a4] = a1\n 69323: u8 [sp + 0x1a2] = a5\n 69327: u8 [sp + 0x1a1] = a4\n 69331: t2 = u64 [sp + 0x20]\n 69334: a4 = t2 & 0x1f\n 69337: a1 = sp + 0x1a0\n 69341: a4 = a4 + a1\n 69344: a1 = u8 [a4 + 0x19]\n 69347: a5 = u8 [a4 + 0x18]\n 69350: s1 = u8 [a4 + 0x1a]\n 69353: a2 = u8 [a4 + 0x1b]\n 69356: a1 = a1 << 0x8\n 69359: a1 = a1 | a5\n 69362: s1 = s1 << 0x10\n 69365: a2 = a2 << 0x18\n 69368: a2 = a2 | s1\n 69371: a1 = a1 | a2\n 69374: a2 = u8 [a4 + 0x1d]\n 69377: a5 = u8 [a4 + 0x1c]\n 69380: s1 = u8 [a4 + 0x1e]\n 69383: a3 = u8 [a4 + 0x1f]\n 69386: a2 = a2 << 0x8\n 69389: a2 = a2 | a5\n 69392: s1 = s1 << 0x10\n 69395: a3 = a3 << 0x18\n 69398: a3 = a3 | s1\n 69401: a2 = a2 | a3\n 69404: a2 = a2 << 0x20\n 69407: t1 = a2 | a1\n 69410: a1 = u8 [a4 + 0x11]\n 69413: a2 = u8 [a4 + 0x10]\n 69416: a3 = u8 [a4 + 0x12]\n 69419: s1 = u8 [a4 + 0x13]\n 69422: a1 = a1 << 0x8\n 69425: a1 = a1 | a2\n 69428: a3 = a3 << 0x10\n 69431: s1 = s1 << 0x18\n 69434: a3 = a3 | s1\n 69437: a1 = a1 | a3\n 69440: a2 = u8 [a4 + 0x15]\n 69443: a3 = u8 [a4 + 0x14]\n 69446: s1 = u8 [a4 + 0x16]\n 69449: a0 = u8 [a4 + 0x17]\n 69452: a2 = a2 << 0x8\n 69455: a2 = a2 | a3\n 69458: s1 = s1 << 0x10\n 69461: a0 = a0 << 0x18\n 69464: a0 = a0 | s1\n 69467: a0 = a0 | a2\n 69470: a0 = a0 << 0x20\n 69473: s1 = a0 | a1\n 69476: a0 = u8 [a4 + 0x9]\n 69479: a1 = u8 [a4 + 0x8]\n 69482: a2 = u8 [a4 + 0xa]\n 69485: a3 = u8 [a4 + 0xb]\n 69488: a0 = a0 << 0x8\n 69491: a0 = a0 | a1\n 69494: a2 = a2 << 0x10\n 69497: a3 = a3 << 0x18\n 69500: a2 = a2 | a3\n 69503: a5 = a2 | a0\n 69506: a1 = u8 [a4 + 0xd]\n 69509: a2 = u8 [a4 + 0xc]\n 69512: a3 = u8 [a4 + 0xe]\n 69515: a0 = u8 [a4 + 0xf]\n 69518: a1 = a1 << 0x8\n 69521: a1 = a1 | a2\n 69524: a3 = a3 << 0x10\n 69527: a0 = a0 << 0x18\n 69530: a0 = a0 | a3\n 69533: a0 = a0 | a1\n 69536: a0 = a0 << 0x20\n 69539: a1 = a0 | a5\n 69542: a0 = u8 [a4 + 0x1]\n 69545: a2 = u8 [a4]\n 69547: a3 = u8 [a4 + 0x2]\n 69550: a5 = u8 [a4 + 0x3]\n 69553: a0 = a0 << 0x8\n 69556: a0 = a0 | a2\n 69559: a3 = a3 << 0x10\n 69562: a5 = a5 << 0x18\n 69565: a3 = a3 | a5\n 69568: a0 = a0 | a3\n 69571: a2 = u8 [a4 + 0x5]\n 69574: a3 = u8 [a4 + 0x4]\n 69577: a5 = u8 [a4 + 0x6]\n 69580: a4 = u8 [a4 + 0x7]\n 69583: a2 = a2 << 0x8\n 69586: a2 = a2 | a3\n 69589: a5 = a5 << 0x10\n 69592: a4 = a4 << 0x18\n 69595: a4 = a4 | a5\n 69598: a2 = a2 | a4\n 69601: a2 = a2 << 0x20\n 69604: a0 = a0 | a2\n 69607: a2 = reverse t0\n 69609: t0 = a2 & ~a0\n 69612: a0 = u64 [sp + 0xd8]\n 69616: a0 = reverse a0\n 69618: a2 = a0 & ~a1\n 69621: a0 = reverse ra\n 69623: a1 = u64 [sp + 0xd0]\n 69627: a1 = reverse a1\n 69629: a1 = a1 & ~s1\n 69632: a0 = a0 & ~t1\n 69635: a4 = t2 >> 0x3f\n 69638: a3 = u64 [sp + 0x38]\n 69641: a5 = a3 << 0x1\n 69644: a4 = a4 | a5\n 69647: a5 = a3 >> 0x3f\n 69650: a3 = u64 [sp + 0x30]\n 69653: s1 = a3 << 0x1\n 69656: a5 = a5 | s1\n 69659: s1 = a3 >> 0x3f\n 69662: a3 = u64 [sp + 0x28]\n 69665: a3 = a3 << 0x1\n 69668: a3 = a3 | s1\n 69671: t1 = a0 | a3\n 69674: a1 = a1 | a5\n 69677: a2 = a2 | a4\n 69680: a3 = t2 << 0x1\n 69683: a3 = t0 | a3\n 69686: a4 = u64 [sp + 0x40]\n 69689: a5 = u64 [sp + 0x58]\n 69692: s1 = u64 [sp + 0x50]\n 69695: jump @904\n      : @897 (gas: 4)\n 69698: t2 = 0\n 69700: s1 = 0\n 69702: a1 = 0x20\n 69705: fallthrough\n      : @898 (gas: 10)\n 69706: a5 = u64 [sp + 0x20]\n 69709: a2 = u64 [sp + 0x18]\n 69712: a2 = a2 ^ a5\n 69715: a3 = u64 [sp + 0x30]\n 69718: a2 = a2 | a3\n 69721: a3 = u64 [sp + 0x38]\n 69724: a4 = u64 [sp + 0x28]\n 69727: a3 = a3 | a4\n 69730: a2 = a2 | a3\n 69733: jump @902 if a2 == 0\n      : @899 (gas: 27)\n 69737: u64 [sp + 0xc8] = t0\n 69741: a2 = u64 [sp + 0x80]\n 69745: a2 = a2 + a1\n 69748: a3 = a2 <u a1\n 69751: a4 = u64 [sp + 0x88]\n 69755: a4 = a4 + t2\n 69758: a4 = a4 + a3\n 69761: a5 = a4 ^ t2\n 69764: a1 = a4 <u t2\n 69767: a1 = a3 if a5 == 0\n 69770: a3 = u64 [sp + 0x90]\n 69774: a3 = a3 + a0\n 69777: a1 = a1 + a3\n 69780: a5 = a1 <u a3\n 69783: a0 = a3 <u a0\n 69786: a3 = u64 [sp + 0x98]\n 69790: a3 = a3 + s1\n 69793: a0 = a0 + a3\n 69796: a0 = a0 + a5\n 69799: a3 = a2 | a1\n 69802: a0 = a0 | a4\n 69805: a3 = a3 | a0\n 69808: a3 = a3 >> 0x20\n 69811: a0 = a0 | a1\n 69814: a0 = a0 << 0x20\n 69817: a0 = a0 | a3\n 69820: jump @906 if a0 != 0\n      : @900 (gas: 3)\n 69824: i32 a0 = a2 + 0\n 69826: a1 = 0x20\n 69829: ra = 812, jump @0\n      : @901 [@dyn 406] (gas: 277)\n 69836: a1 = u8 [a0 + 0x19]\n 69839: a2 = u8 [a0 + 0x18]\n 69842: a3 = u8 [a0 + 0x1a]\n 69845: a4 = u8 [a0 + 0x1b]\n 69848: a1 = a1 << 0x8\n 69851: a1 = a1 | a2\n 69854: a3 = a3 << 0x10\n 69857: a4 = a4 << 0x18\n 69860: a3 = a3 | a4\n 69863: a1 = a1 | a3\n 69866: a2 = u8 [a0 + 0x1d]\n 69869: a3 = u8 [a0 + 0x1c]\n 69872: a4 = u8 [a0 + 0x1e]\n 69875: a5 = u8 [a0 + 0x1f]\n 69878: a2 = a2 << 0x8\n 69881: a2 = a2 | a3\n 69884: a4 = a4 << 0x10\n 69887: a5 = a5 << 0x18\n 69890: a4 = a4 | a5\n 69893: a2 = a2 | a4\n 69896: a2 = a2 << 0x20\n 69899: a1 = a1 | a2\n 69902: u64 [sp + 0xb8] = a1\n 69906: a1 = u8 [a0 + 0x11]\n 69909: a2 = u8 [a0 + 0x10]\n 69912: a3 = u8 [a0 + 0x12]\n 69915: a4 = u8 [a0 + 0x13]\n 69918: a1 = a1 << 0x8\n 69921: a1 = a1 | a2\n 69924: a3 = a3 << 0x10\n 69927: a4 = a4 << 0x18\n 69930: a3 = a3 | a4\n 69933: a1 = a1 | a3\n 69936: a2 = u8 [a0 + 0x15]\n 69939: a3 = u8 [a0 + 0x14]\n 69942: a4 = u8 [a0 + 0x16]\n 69945: a5 = u8 [a0 + 0x17]\n 69948: a2 = a2 << 0x8\n 69951: a2 = a2 | a3\n 69954: a4 = a4 << 0x10\n 69957: a5 = a5 << 0x18\n 69960: a4 = a4 | a5\n 69963: a2 = a2 | a4\n 69966: a2 = a2 << 0x20\n 69969: t1 = a2 | a1\n 69972: a1 = u8 [a0 + 0x9]\n 69975: a3 = u8 [a0 + 0x8]\n 69978: a4 = u8 [a0 + 0xa]\n 69981: a5 = u8 [a0 + 0xb]\n 69984: a1 = a1 << 0x8\n 69987: a1 = a1 | a3\n 69990: a4 = a4 << 0x10\n 69993: a5 = a5 << 0x18\n 69996: a4 = a4 | a5\n 69999: a1 = a1 | a4\n 70002: a3 = u8 [a0 + 0xd]\n 70005: a4 = u8 [a0 + 0xc]\n 70008: a5 = u8 [a0 + 0xe]\n 70011: s1 = u8 [a0 + 0xf]\n 70014: a3 = a3 << 0x8\n 70017: a3 = a3 | a4\n 70020: a5 = a5 << 0x10\n 70023: s1 = s1 << 0x18\n 70026: a5 = a5 | s1\n 70029: a3 = a3 | a5\n 70032: a3 = a3 << 0x20\n 70035: t2 = a3 | a1\n 70038: a1 = u8 [a0 + 0x1]\n 70041: a4 = u8 [a0]\n 70043: a5 = u8 [a0 + 0x2]\n 70046: s1 = u8 [a0 + 0x3]\n 70049: a1 = a1 << 0x8\n 70052: a1 = a1 | a4\n 70055: a5 = a5 << 0x10\n 70058: s1 = s1 << 0x18\n 70061: a5 = a5 | s1\n 70064: a1 = a1 | a5\n 70067: a4 = u8 [a0 + 0x5]\n 70070: a5 = u8 [a0 + 0x4]\n 70073: s1 = u8 [a0 + 0x6]\n 70076: a0 = u8 [a0 + 0x7]\n 70079: a4 = a4 << 0x8\n 70082: a4 = a4 | a5\n 70085: s1 = s1 << 0x10\n 70088: a0 = a0 << 0x18\n 70091: a0 = a0 | s1\n 70094: a0 = a0 | a4\n 70097: a0 = a0 << 0x20\n 70100: ra = a0 | a1\n 70103: u8 [sp + 415] = 0\n 70107: u8 [sp + 414] = 0\n 70111: u8 [sp + 413] = 0\n 70115: u8 [sp + 412] = 0\n 70119: u8 [sp + 411] = 0\n 70123: u8 [sp + 410] = 0\n 70127: u8 [sp + 409] = 0\n 70131: u8 [sp + 408] = 0\n 70135: u8 [sp + 407] = 0\n 70139: u8 [sp + 406] = 0\n 70143: u8 [sp + 405] = 0\n 70147: u8 [sp + 404] = 0\n 70151: u8 [sp + 403] = 0\n 70155: u8 [sp + 402] = 0\n 70159: u8 [sp + 401] = 0\n 70163: u8 [sp + 400] = 0\n 70167: u8 [sp + 399] = 0\n 70171: u8 [sp + 398] = 0\n 70175: u8 [sp + 397] = 0\n 70179: u8 [sp + 396] = 0\n 70183: u8 [sp + 395] = 0\n 70187: u8 [sp + 394] = 0\n 70191: u8 [sp + 393] = 0\n 70195: u8 [sp + 392] = 0\n 70199: u8 [sp + 391] = 0\n 70203: u8 [sp + 390] = 0\n 70207: u8 [sp + 389] = 0\n 70211: u8 [sp + 388] = 0\n 70215: u8 [sp + 387] = 0\n 70219: u8 [sp + 386] = 0\n 70223: u8 [sp + 385] = 0\n 70227: u8 [sp + 384] = 0\n 70231: u8 [sp + 383] = 0xff\n 70237: u8 [sp + 382] = 0xff\n 70243: u8 [sp + 381] = 0xff\n 70249: u8 [sp + 379] = 0xff\n 70255: u8 [sp + 376] = 0xffffffffffffffff\n 70260: u8 [sp + 375] = 0xff\n 70266: u8 [sp + 374] = 0xff\n 70272: u8 [sp + 373] = 0xff\n 70278: u8 [sp + 371] = 0xff\n 70284: u8 [sp + 368] = 0xffffffffffffffff\n 70289: u8 [sp + 367] = 0xff\n 70295: u8 [sp + 366] = 0xff\n 70301: u8 [sp + 365] = 0xff\n 70307: u8 [sp + 363] = 0xff\n 70313: u8 [sp + 360] = 0xffffffffffffffff\n 70318: u8 [sp + 359] = 0xff\n 70324: u8 [sp + 358] = 0xff\n 70330: u8 [sp + 357] = 0xff\n 70336: u8 [sp + 355] = 0xff\n 70342: u8 [sp + 352] = 0xffffffffffffffff\n 70347: a1 = 0xffffffff\n 70357: u8 [sp + 0x17c] = a1\n 70361: a5 = 0xffffffffffff\n 70371: u8 [sp + 0x17a] = a5\n 70375: a4 = 0xffffffffffffff\n 70385: u8 [sp + 0x179] = a4\n 70389: u8 [sp + 0x174] = a1\n 70393: u8 [sp + 0x172] = a5\n 70397: u8 [sp + 0x171] = a4\n 70401: u8 [sp + 0x16c] = a1\n 70405: u8 [sp + 0x16a] = a5\n 70409: u8 [sp + 0x169] = a4\n 70413: u8 [sp + 0x164] = a1\n 70417: u8 [sp + 0x162] = a5\n 70421: u8 [sp + 0x161] = a4\n 70425: a4 = u64 [sp + 0x20]\n 70428: a4 = a4 & 0x1f\n 70431: a1 = sp + 0x160\n 70435: a4 = a4 + a1\n 70438: a1 = u8 [a4 + 0x19]\n 70441: a5 = u8 [a4 + 0x18]\n 70444: s1 = u8 [a4 + 0x1a]\n 70447: a2 = u8 [a4 + 0x1b]\n 70450: a1 = a1 << 0x8\n 70453: a1 = a1 | a5\n 70456: s1 = s1 << 0x10\n 70459: a2 = a2 << 0x18\n 70462: a2 = a2 | s1\n 70465: a1 = a1 | a2\n 70468: a2 = u8 [a4 + 0x1d]\n 70471: a5 = u8 [a4 + 0x1c]\n 70474: s1 = u8 [a4 + 0x1e]\n 70477: a3 = u8 [a4 + 0x1f]\n 70480: a2 = a2 << 0x8\n 70483: a2 = a2 | a5\n 70486: s1 = s1 << 0x10\n 70489: a3 = a3 << 0x18\n 70492: a3 = a3 | s1\n 70495: a2 = a2 | a3\n 70498: a2 = a2 << 0x20\n 70501: t0 = a2 | a1\n 70504: a1 = u8 [a4 + 0x11]\n 70507: a2 = u8 [a4 + 0x10]\n 70510: a3 = u8 [a4 + 0x12]\n 70513: s1 = u8 [a4 + 0x13]\n 70516: a1 = a1 << 0x8\n 70519: a1 = a1 | a2\n 70522: a3 = a3 << 0x10\n 70525: s1 = s1 << 0x18\n 70528: a3 = a3 | s1\n 70531: a1 = a1 | a3\n 70534: a2 = u8 [a4 + 0x15]\n 70537: a3 = u8 [a4 + 0x14]\n 70540: s1 = u8 [a4 + 0x16]\n 70543: a0 = u8 [a4 + 0x17]\n 70546: a2 = a2 << 0x8\n 70549: a2 = a2 | a3\n 70552: s1 = s1 << 0x10\n 70555: a0 = a0 << 0x18\n 70558: a0 = a0 | s1\n 70561: a0 = a0 | a2\n 70564: a0 = a0 << 0x20\n 70567: s1 = a0 | a1\n 70570: a0 = u8 [a4 + 0x9]\n 70573: a1 = u8 [a4 + 0x8]\n 70576: a2 = u8 [a4 + 0xa]\n 70579: a3 = u8 [a4 + 0xb]\n 70582: a0 = a0 << 0x8\n 70585: a0 = a0 | a1\n 70588: a2 = a2 << 0x10\n 70591: a3 = a3 << 0x18\n 70594: a2 = a2 | a3\n 70597: a5 = a2 | a0\n 70600: a1 = u8 [a4 + 0xd]\n 70603: a2 = u8 [a4 + 0xc]\n 70606: a3 = u8 [a4 + 0xe]\n 70609: a0 = u8 [a4 + 0xf]\n 70612: a1 = a1 << 0x8\n 70615: a1 = a1 | a2\n 70618: a3 = a3 << 0x10\n 70621: a0 = a0 << 0x18\n 70624: a0 = a0 | a3\n 70627: a0 = a0 | a1\n 70630: a0 = a0 << 0x20\n 70633: a1 = a0 | a5\n 70636: a0 = u8 [a4 + 0x1]\n 70639: a2 = u8 [a4]\n 70641: a3 = u8 [a4 + 0x2]\n 70644: a5 = u8 [a4 + 0x3]\n 70647: a0 = a0 << 0x8\n 70650: a0 = a0 | a2\n 70653: a3 = a3 << 0x10\n 70656: a5 = a5 << 0x18\n 70659: a3 = a3 | a5\n 70662: a0 = a0 | a3\n 70665: a2 = u8 [a4 + 0x5]\n 70668: a3 = u8 [a4 + 0x4]\n 70671: a5 = u8 [a4 + 0x6]\n 70674: a4 = u8 [a4 + 0x7]\n 70677: a2 = a2 << 0x8\n 70680: a2 = a2 | a3\n 70683: a5 = a5 << 0x10\n 70686: a4 = a4 << 0x18\n 70689: a4 = a4 | a5\n 70692: a2 = a2 | a4\n 70695: a2 = a2 << 0x20\n 70698: a0 = a0 | a2\n 70701: a2 = u64 [sp + 0xb8]\n 70705: a2 = reverse a2\n 70707: a0 = a2 & ~a0\n 70710: a2 = reverse t1\n 70712: a1 = a2 & ~a1\n 70715: a2 = reverse t2\n 70717: a2 = a2 & ~s1\n 70720: a3 = reverse ra\n 70722: a3 = a3 & ~t0\n 70725: a4 = u64 [sp + 0xd0]\n 70729: u64 [sp + 0x278] = a4\n 70733: a4 = u64 [sp + 0xc8]\n 70737: u64 [sp + 0x270] = a4\n 70741: a4 = u64 [sp + 0xd8]\n 70745: u64 [sp + 0x268] = a4\n 70749: a4 = u64 [sp + 0xc0]\n 70753: u64 [sp + 0x260] = a4\n 70757: u64 [sp + 0x298] = a3\n 70761: u64 [sp + 0x290] = a2\n 70765: u64 [sp + 0x288] = a1\n 70769: u64 [sp + 0x280] = a0\n 70773: i32 a1 = sp + 0x260\n 70777: i32 a3 = sp + 0x280\n 70781: a2 = 0xffffffffffffffff\n 70784: a4 = 0x20\n 70787: a0 = 0\n 70789: ecalli 14 // 'set_storage'\n 70791: a5 = u64 [sp + 0x20]\n 70794: fallthrough\n      : @902 (gas: 27)\n 70795: a2 = u64 [sp + 0x30]\n 70798: a0 = a2 >> 0x3f\n 70801: a1 = u64 [sp + 0x28]\n 70804: a1 = a1 << 0x1\n 70807: a0 = a0 | a1\n 70810: a3 = u64 [sp + 0x38]\n 70813: a1 = a3 >> 0x3f\n 70816: a2 = a2 << 0x1\n 70819: a1 = a1 | a2\n 70822: a2 = a5 >> 0x3f\n 70825: a3 = a3 << 0x1\n 70828: a2 = a2 | a3\n 70831: a3 = a5 << 0x1\n 70834: a3 = a3 + 0x1\n 70837: a4 = u64 [sp + 0x48]\n 70840: u64 [sp + 0x268] = a4\n 70844: a4 = u64 [sp + 0x50]\n 70847: u64 [sp + 0x260] = a4\n 70851: a4 = u64 [sp + 0x58]\n 70854: u64 [sp + 0x270] = a4\n 70858: a4 = u64 [sp + 0x40]\n 70861: u64 [sp + 0x278] = a4\n 70865: u64 [sp + 0x280] = a3\n 70869: u64 [sp + 0x288] = a2\n 70873: u64 [sp + 0x290] = a1\n 70877: u64 [sp + 0x298] = a0\n 70881: jump @905\n      : @903 (gas: 5)\n 70883: a3 = 0\n 70885: a2 = 0\n 70887: a1 = 0\n 70889: t1 = 0\n 70891: fallthrough\n      : @904 (gas: 10)\n 70892: a0 = u64 [sp + 0x48]\n 70895: u64 [sp + 0x268] = a0\n 70899: u64 [sp + 0x260] = s1\n 70903: u64 [sp + 0x270] = a5\n 70907: u64 [sp + 0x278] = a4\n 70911: u64 [sp + 0x280] = a3\n 70915: u64 [sp + 0x288] = a2\n 70919: u64 [sp + 0x290] = a1\n 70923: u64 [sp + 0x298] = t1\n 70927: fallthrough\n      : @905 (gas: 12)\n 70928: i32 a1 = sp + 0x260\n 70932: i32 a3 = sp + 0x280\n 70936: a2 = 0xffffffffffffffff\n 70939: a4 = 0x20\n 70942: a0 = 0\n 70944: ecalli 14 // 'set_storage'\n 70946: sp = s0 + 0xfffffffffffffd40\n 70950: ra = u64 [sp + 0x2b8]\n 70954: s0 = u64 [sp + 0x2b0]\n 70958: s1 = u64 [sp + 0x2a8]\n 70962: sp = sp + 0x2c0\n 70966: ret\n      : @906 (gas: 1)\n 70968: trap\n      : @907 (gas: 8)\n 70969: u64 [sp + 272] = 0\n 70973: u64 [sp + 264] = 0\n 70977: u64 [sp + 256] = 0\n 70981: a0 = 0x4e487b7100000000\n 70991: a1 = sp + 0x100\n 70995: u64 [sp + 0x118] = a0\n 70999: a0 = 0\n 71001: ra = 814, jump @23\n      : @908 [@dyn 407] (gas: 8)\n 71008: u64 [sp + 248] = 0\n 71012: u64 [sp + 240] = 0\n 71016: u64 [sp + 224] = 0x41\n 71021: a0 = 0x4\n 71024: a1 = sp + 0xe0\n 71028: u64 [sp + 232] = 0\n 71032: ra = 0x332\n 71036: jump @23\n      : @909 (gas: 8)\n 71040: u64 [sp + 336] = 0\n 71044: u64 [sp + 328] = 0\n 71048: u64 [sp + 320] = 0\n 71052: a0 = 0x4e487b7100000000\n 71062: a1 = sp + 0x140\n 71066: u64 [sp + 0x158] = a0\n 71070: a0 = 0\n 71072: ra = 816, jump @23\n      : @910 [@dyn 408] (gas: 7)\n 71079: u64 [sp + 312] = 0\n 71083: u64 [sp + 304] = 0\n 71087: u64 [sp + 288] = 0x22\n 71092: a0 = 0x4\n 71095: a1 = sp + 0x120\n 71099: u64 [sp + 296] = 0\n 71103: ra = 818, jump @23\n      : @911 [@dyn 409] (gas: 3)\n 71110: a1 = 0x24\n 71113: a0 = 0\n 71115: ra = 820, jump @0\n      : @912 [@dyn 410] (gas: 6)\n 71122: i32 a1 = a0 + 0\n 71124: a0 = 0x1\n 71127: a2 = 0x24\n 71130: ra = 0x336\n 71134: ecalli 12 // 'seal_return'\n 71136: fallthrough\n      : @913 [@dyn 411] (gas: 24)\n 71137: sp = sp + 0xffffffffffffffb0\n 71140: u64 [sp + 0x48] = ra\n 71143: u64 [sp + 0x40] = s0\n 71146: s0 = sp + 0x50\n 71149: sp = sp & 0xfffffffffffffff0\n 71152: t0 = u64 [a0]\n 71154: t1 = u64 [a0 + 0x8]\n 71157: a4 = u64 [a0 + 0x10]\n 71160: a0 = u64 [a0 + 0x18]\n 71163: a5 = u64 [a1]\n 71165: a2 = u64 [a1 + 0x8]\n 71168: a3 = u64 [a1 + 0x10]\n 71171: a1 = u64 [a1 + 0x18]\n 71174: u64 [sp + 0x18] = a1\n 71177: u64 [sp + 0x10] = a3\n 71180: u64 [sp + 0x8] = a2\n 71183: u64 [sp] = a5\n 71185: u64 [sp + 0x38] = a0\n 71188: u64 [sp + 0x30] = a4\n 71191: u64 [sp + 0x28] = t1\n 71194: a0 = sp + 0x20\n 71197: a1 = sp\n 71199: u64 [sp + 0x20] = t0\n 71202: ra = 824, jump @876\n      : @914 [@dyn 412] (gas: 5)\n 71208: sp = s0 + 0xffffffffffffffb0\n 71211: ra = u64 [sp + 0x48]\n 71214: s0 = u64 [sp + 0x40]\n 71217: sp = sp + 0x50\n 71220: ret\n      : @915 (gas: 22)\n 71222: sp = sp + 0xfffffffffffffe60\n 71226: u64 [sp + 0x198] = ra\n 71230: u64 [sp + 0x190] = s0\n 71234: u64 [sp + 0x188] = s1\n 71238: s0 = sp + 0x1a0\n 71242: sp = sp & 0xffffffffffffffe0\n 71245: a4 = u64 [a1 + 0x10]\n 71248: a5 = u64 [a1 + 0x18]\n 71251: a2 = u64 [a1 + 0x8]\n 71254: a3 = u64 [a1]\n 71256: u64 [sp + 0x70] = a2\n 71259: u64 [sp + 0x58] = a5\n 71262: a1 = a2 | a5\n 71265: u64 [sp + 0x80] = a3\n 71269: a2 = a3 | a4\n 71272: a2 = a2 | a1\n 71275: a2 = a2 >> 0x20\n 71278: u64 [sp + 0x60] = a4\n 71281: a1 = a1 | a4\n 71284: a1 = a1 << 0x20\n 71287: a1 = a1 | a2\n 71290: jump @928 if a1 != 0\n      : @916 (gas: 12)\n 71294: a1 = u64 [a0 + 0x18]\n 71297: u64 [sp + 0x78] = a1\n 71300: a1 = u64 [a0 + 0x10]\n 71303: u64 [sp + 0x98] = a1\n 71307: a1 = u64 [a0 + 0x8]\n 71310: u64 [sp + 0x90] = a1\n 71314: a0 = u64 [a0]\n 71316: u64 [sp + 0x88] = a0\n 71320: a0 = i32 [sp + 0x80]\n 71324: a1 = 0x20\n 71327: u64 [sp + 0x68] = a0\n 71330: ra = 826, jump @0\n      : @917 [@dyn 413] (gas: 105)\n 71337: a1 = u8 [a0 + 0x11]\n 71340: a2 = u8 [a0 + 0x10]\n 71343: a3 = u8 [a0 + 0x12]\n 71346: a4 = u8 [a0 + 0x13]\n 71349: a1 = a1 << 0x8\n 71352: a1 = a1 | a2\n 71355: a3 = a3 << 0x10\n 71358: a4 = a4 << 0x18\n 71361: a3 = a3 | a4\n 71364: a1 = a1 | a3\n 71367: a2 = u8 [a0 + 0x15]\n 71370: a3 = u8 [a0 + 0x14]\n 71373: a4 = u8 [a0 + 0x16]\n 71376: a5 = u8 [a0 + 0x17]\n 71379: a2 = a2 << 0x8\n 71382: a2 = a2 | a3\n 71385: a4 = a4 << 0x10\n 71388: a5 = a5 << 0x18\n 71391: a4 = a4 | a5\n 71394: a2 = a2 | a4\n 71397: a2 = a2 << 0x20\n 71400: a1 = a1 | a2\n 71403: a2 = u8 [a0 + 0x19]\n 71406: a3 = u8 [a0 + 0x18]\n 71409: a4 = u8 [a0 + 0x1a]\n 71412: a5 = u8 [a0 + 0x1b]\n 71415: a2 = a2 << 0x8\n 71418: a2 = a2 | a3\n 71421: a4 = a4 << 0x10\n 71424: a5 = a5 << 0x18\n 71427: a4 = a4 | a5\n 71430: a2 = a2 | a4\n 71433: a3 = u8 [a0 + 0x1d]\n 71436: a4 = u8 [a0 + 0x1c]\n 71439: a5 = u8 [a0 + 0x1e]\n 71442: s1 = u8 [a0 + 0x1f]\n 71445: a3 = a3 << 0x8\n 71448: a3 = a3 | a4\n 71451: a5 = a5 << 0x10\n 71454: s1 = s1 << 0x18\n 71457: a5 = a5 | s1\n 71460: a3 = a3 | a5\n 71463: a3 = a3 << 0x20\n 71466: a2 = a2 | a3\n 71469: a3 = u8 [a0 + 0xd]\n 71472: a4 = u8 [a0 + 0xc]\n 71475: a5 = u8 [a0 + 0xe]\n 71478: a0 = u8 [a0 + 0xf]\n 71481: a3 = a3 << 0x8\n 71484: a3 = a3 | a4\n 71487: a5 = a5 << 0x10\n 71490: a0 = a0 << 0x18\n 71493: a0 = a0 | a5\n 71496: a0 = a0 | a3\n 71499: a2 = reverse a2\n 71501: u64 [sp + 0x50] = a2\n 71504: a1 = reverse a1\n 71506: u64 [sp + 0x48] = a1\n 71509: s1 = reverse a0\n 71511: s1 = s1 >> 0x20\n 71514: u64 [sp + 0x40] = s1\n 71517: s1 = u64 [sp + 0x78]\n 71520: u64 [sp + 0x158] = s1\n 71524: a0 = u64 [sp + 0x98]\n 71528: u64 [sp + 0x150] = a0\n 71532: a0 = u64 [sp + 0x90]\n 71536: u64 [sp + 0x148] = a0\n 71540: a0 = u64 [sp + 0x88]\n 71544: u64 [sp + 0x140] = a0\n 71548: u64 [sp + 376] = 0\n 71552: u64 [sp + 368] = 0\n 71556: u64 [sp + 360] = 0\n 71560: u64 [sp + 352] = 0\n 71564: u32 [sp + 288] = 0x20\n 71569: i32 a1 = sp + 0x140\n 71573: i32 a3 = sp + 0x160\n 71577: i32 a4 = sp + 0x120\n 71581: a2 = 0xffffffffffffffff\n 71584: a0 = 0\n 71586: ecalli 7 // 'get_storage'\n 71588: a0 = u32 [sp + 0x174]\n 71592: a0 = a0 << 0x20\n 71595: a1 = u64 [sp + 0x178]\n 71599: a2 = u64 [sp + 0x40]\n 71602: a0 = a0 | a2\n 71605: u64 [sp + 0x158] = s1\n 71609: a2 = u64 [sp + 0x98]\n 71613: u64 [sp + 0x150] = a2\n 71617: a2 = u64 [sp + 0x90]\n 71621: u64 [sp + 0x148] = a2\n 71625: a2 = u64 [sp + 0x88]\n 71629: u64 [sp + 0x140] = a2\n 71633: u64 [sp + 0x178] = a1\n 71637: u64 [sp + 0x170] = a0\n 71641: a0 = u64 [sp + 0x48]\n 71644: u64 [sp + 0x168] = a0\n 71648: a0 = u64 [sp + 0x50]\n 71651: u64 [sp + 0x160] = a0\n 71655: i32 a1 = sp + 0x140\n 71659: i32 a3 = sp + 0x160\n 71663: a2 = 0xffffffffffffffff\n 71666: a4 = 0x20\n 71669: a0 = 0\n 71671: ecalli 14 // 'set_storage'\n 71673: fallthrough\n      : @918 (gas: 13)\n 71674: a0 = u64 [sp + 0x60]\n 71677: a2 = u64 [sp + 0x58]\n 71680: a2 = a2 | a0\n 71683: a0 = 0x100000000\n 71693: u64 [sp + 0x40] = a0\n 71696: a0 = 0xffffffe0\n 71706: a1 = u64 [sp + 0x80]\n 71710: a0 = a1 <u a0\n 71713: a1 = u64 [sp + 0x70]\n 71716: a0 = 0 if a1 != 0\n 71718: u64 [sp + 0x60] = a2\n 71721: a0 = 0 if a2 != 0\n 71723: jump @928 if a0 == 0\n      : @919 (gas: 20)\n 71727: a0 = u64 [sp + 0x88]\n 71731: a2 = a0 + 0x1\n 71734: u64 [sp + 0x48] = a2\n 71737: a0 = a2 <u 0x1\n 71740: a1 = u64 [sp + 0x90]\n 71744: a0 = a0 + a1\n 71747: u64 [sp + 0x58] = a0\n 71750: a0 = a0 | a2\n 71753: a0 = a0 <u 0x1\n 71756: a1 = u64 [sp + 0x98]\n 71760: a0 = a0 + a1\n 71763: u64 [sp + 0x50] = a0\n 71766: a0 = a0 <u a1\n 71769: a1 = u64 [sp + 0x78]\n 71772: a0 = a0 + a1\n 71775: u64 [sp + 0x38] = a0\n 71778: a0 = u64 [sp + 0x68]\n 71781: i32 a0 = a0 + 0x20\n 71784: a1 = 0x20\n 71787: ra = 828, jump @0\n      : @920 [@dyn 414] (gas: 137)\n 71794: a1 = u8 [a0 + 0x1]\n 71797: a2 = u8 [a0]\n 71799: a3 = u8 [a0 + 0x2]\n 71802: a4 = u8 [a0 + 0x3]\n 71805: a1 = a1 << 0x8\n 71808: a1 = a1 | a2\n 71811: a3 = a3 << 0x10\n 71814: a4 = a4 << 0x18\n 71817: a3 = a3 | a4\n 71820: a1 = a1 | a3\n 71823: a2 = u8 [a0 + 0x5]\n 71826: a3 = u8 [a0 + 0x4]\n 71829: a4 = u8 [a0 + 0x6]\n 71832: a5 = u8 [a0 + 0x7]\n 71835: a2 = a2 << 0x8\n 71838: a2 = a2 | a3\n 71841: a4 = a4 << 0x10\n 71844: a5 = a5 << 0x18\n 71847: a4 = a4 | a5\n 71850: a2 = a2 | a4\n 71853: a2 = a2 << 0x20\n 71856: t0 = a2 | a1\n 71859: a2 = u8 [a0 + 0x9]\n 71862: a3 = u8 [a0 + 0x8]\n 71865: a4 = u8 [a0 + 0xa]\n 71868: a5 = u8 [a0 + 0xb]\n 71871: a2 = a2 << 0x8\n 71874: a2 = a2 | a3\n 71877: a4 = a4 << 0x10\n 71880: a5 = a5 << 0x18\n 71883: a4 = a4 | a5\n 71886: a2 = a2 | a4\n 71889: a3 = u8 [a0 + 0xd]\n 71892: a4 = u8 [a0 + 0xc]\n 71895: a5 = u8 [a0 + 0xe]\n 71898: s1 = u8 [a0 + 0xf]\n 71901: a3 = a3 << 0x8\n 71904: a3 = a3 | a4\n 71907: a5 = a5 << 0x10\n 71910: s1 = s1 << 0x18\n 71913: a5 = a5 | s1\n 71916: a3 = a3 | a5\n 71919: a3 = a3 << 0x20\n 71922: a2 = a2 | a3\n 71925: a3 = u8 [a0 + 0x11]\n 71928: a4 = u8 [a0 + 0x10]\n 71931: a5 = u8 [a0 + 0x12]\n 71934: s1 = u8 [a0 + 0x13]\n 71937: a3 = a3 << 0x8\n 71940: a3 = a3 | a4\n 71943: a5 = a5 << 0x10\n 71946: s1 = s1 << 0x18\n 71949: a5 = a5 | s1\n 71952: a3 = a3 | a5\n 71955: a4 = u8 [a0 + 0x15]\n 71958: a5 = u8 [a0 + 0x14]\n 71961: s1 = u8 [a0 + 0x16]\n 71964: a1 = u8 [a0 + 0x17]\n 71967: a4 = a4 << 0x8\n 71970: a4 = a4 | a5\n 71973: s1 = s1 << 0x10\n 71976: a1 = a1 << 0x18\n 71979: a1 = a1 | s1\n 71982: a1 = a1 | a4\n 71985: a1 = a1 << 0x20\n 71988: a3 = a3 | a1\n 71991: a1 = u8 [a0 + 0x19]\n 71994: a4 = u8 [a0 + 0x18]\n 71997: a5 = u8 [a0 + 0x1a]\n 72000: s1 = u8 [a0 + 0x1b]\n 72003: a1 = a1 << 0x8\n 72006: a1 = a1 | a4\n 72009: a5 = a5 << 0x10\n 72012: s1 = s1 << 0x18\n 72015: a5 = a5 | s1\n 72018: a1 = a1 | a5\n 72021: a4 = u8 [a0 + 0x1d]\n 72024: a5 = u8 [a0 + 0x1c]\n 72027: s1 = u8 [a0 + 0x1e]\n 72030: a0 = u8 [a0 + 0x1f]\n 72033: a4 = a4 << 0x8\n 72036: a4 = a4 | a5\n 72039: s1 = s1 << 0x10\n 72042: a0 = a0 << 0x18\n 72045: a0 = a0 | s1\n 72048: a0 = a0 | a4\n 72051: a0 = a0 << 0x20\n 72054: a0 = a0 | a1\n 72057: u32 [sp + 288] = 0x20\n 72062: a0 = reverse a0\n 72064: u64 [sp + 0x30] = a0\n 72067: a0 = reverse a3\n 72069: u64 [sp + 0x28] = a0\n 72072: a0 = reverse a2\n 72074: u64 [sp + 0x20] = a0\n 72077: a0 = reverse t0\n 72079: u64 [sp + 0x18] = a0\n 72082: a0 = u64 [sp + 0x50]\n 72085: u64 [sp + 0x150] = a0\n 72089: a0 = u64 [sp + 0x58]\n 72092: u64 [sp + 0x148] = a0\n 72096: a0 = u64 [sp + 0x48]\n 72099: u64 [sp + 0x140] = a0\n 72103: s1 = u64 [sp + 0x38]\n 72106: u64 [sp + 0x158] = s1\n 72110: u64 [sp + 376] = 0\n 72114: u64 [sp + 368] = 0\n 72118: u64 [sp + 360] = 0\n 72122: u64 [sp + 352] = 0\n 72126: i32 a1 = sp + 0x140\n 72130: i32 a3 = sp + 0x160\n 72134: i32 a4 = sp + 0x120\n 72138: a2 = 0xffffffffffffffff\n 72141: a0 = 0\n 72143: ecalli 7 // 'get_storage'\n 72145: u64 [sp + 0x158] = s1\n 72149: a0 = u64 [sp + 0x50]\n 72152: u64 [sp + 0x150] = a0\n 72156: a0 = u64 [sp + 0x58]\n 72159: u64 [sp + 0x148] = a0\n 72163: a0 = u64 [sp + 0x48]\n 72166: u64 [sp + 0x140] = a0\n 72170: a0 = u64 [sp + 0x18]\n 72173: u64 [sp + 0x178] = a0\n 72177: a0 = u64 [sp + 0x20]\n 72180: u64 [sp + 0x170] = a0\n 72184: a0 = u64 [sp + 0x28]\n 72187: u64 [sp + 0x168] = a0\n 72191: a0 = u64 [sp + 0x30]\n 72194: u64 [sp + 0x160] = a0\n 72198: i32 a1 = sp + 0x140\n 72202: i32 a3 = sp + 0x160\n 72206: a2 = 0xffffffffffffffff\n 72209: a4 = 0x20\n 72212: a0 = 0\n 72214: ecalli 14 // 'set_storage'\n 72216: fallthrough\n      : @921 (gas: 9)\n 72217: a0 = u64 [sp + 0x40]\n 72220: a0 = a0 + 0xffffffffffffffc0\n 72223: a1 = u64 [sp + 0x80]\n 72227: a0 = a1 <u a0\n 72230: a1 = u64 [sp + 0x70]\n 72233: a0 = 0 if a1 != 0\n 72235: a1 = u64 [sp + 0x60]\n 72238: a0 = 0 if a1 != 0\n 72240: jump @928 if a0 == 0\n      : @922 (gas: 20)\n 72244: a0 = u64 [sp + 0x88]\n 72248: a1 = a0 + 0x2\n 72251: u64 [sp + 0x58] = a1\n 72254: a0 = a1 <u a0\n 72257: a1 = u64 [sp + 0x90]\n 72261: a2 = a1 + a0\n 72264: u64 [sp + 0x50] = a2\n 72267: s1 = a2 <u a1\n 72270: s1 = a0 if a0 == 0\n 72273: a0 = u64 [sp + 0x98]\n 72277: s1 = s1 + a0\n 72280: u64 [sp + 0x40] = s1\n 72283: a0 = s1 <u a0\n 72286: a1 = u64 [sp + 0x78]\n 72289: a0 = a0 + a1\n 72292: u64 [sp + 0x48] = a0\n 72295: a0 = u64 [sp + 0x68]\n 72298: i32 a0 = a0 + 0x40\n 72301: a1 = 0x20\n 72304: ra = 830, jump @0\n      : @923 [@dyn 415] (gas: 107)\n 72311: a1 = u8 [a0 + 0x1]\n 72314: a2 = u8 [a0]\n 72316: a3 = u8 [a0 + 0x2]\n 72319: a4 = u8 [a0 + 0x3]\n 72322: a1 = a1 << 0x8\n 72325: a1 = a1 | a2\n 72328: a3 = a3 << 0x10\n 72331: a4 = a4 << 0x18\n 72334: a3 = a3 | a4\n 72337: a1 = a1 | a3\n 72340: a2 = u8 [a0 + 0x5]\n 72343: a3 = u8 [a0 + 0x4]\n 72346: a4 = u8 [a0 + 0x6]\n 72349: a5 = u8 [a0 + 0x7]\n 72352: a2 = a2 << 0x8\n 72355: a2 = a2 | a3\n 72358: a4 = a4 << 0x10\n 72361: a5 = a5 << 0x18\n 72364: a4 = a4 | a5\n 72367: a2 = a2 | a4\n 72370: a2 = a2 << 0x20\n 72373: t0 = a2 | a1\n 72376: a2 = u8 [a0 + 0x9]\n 72379: a3 = u8 [a0 + 0x8]\n 72382: a4 = u8 [a0 + 0xa]\n 72385: a5 = u8 [a0 + 0xb]\n 72388: a2 = a2 << 0x8\n 72391: a2 = a2 | a3\n 72394: a4 = a4 << 0x10\n 72397: a5 = a5 << 0x18\n 72400: a4 = a4 | a5\n 72403: a2 = a2 | a4\n 72406: a3 = u8 [a0 + 0xd]\n 72409: a4 = u8 [a0 + 0xc]\n 72412: a5 = u8 [a0 + 0xe]\n 72415: a1 = u8 [a0 + 0xf]\n 72418: a3 = a3 << 0x8\n 72421: a3 = a3 | a4\n 72424: a5 = a5 << 0x10\n 72427: a1 = a1 << 0x18\n 72430: a1 = a1 | a5\n 72433: a1 = a1 | a3\n 72436: a1 = a1 << 0x20\n 72439: a2 = a2 | a1\n 72442: a1 = u8 [a0 + 0x11]\n 72445: a3 = u8 [a0 + 0x10]\n 72448: a4 = u8 [a0 + 0x12]\n 72451: a5 = u8 [a0 + 0x13]\n 72454: a1 = a1 << 0x8\n 72457: a1 = a1 | a3\n 72460: a4 = a4 << 0x10\n 72463: a5 = a5 << 0x18\n 72466: a4 = a4 | a5\n 72469: a1 = a1 | a4\n 72472: a3 = u8 [a0 + 0x15]\n 72475: a4 = u8 [a0 + 0x14]\n 72478: a5 = u8 [a0 + 0x16]\n 72481: s1 = u8 [a0 + 0x17]\n 72484: a3 = a3 << 0x8\n 72487: a3 = a3 | a4\n 72490: a5 = a5 << 0x10\n 72493: s1 = s1 << 0x18\n 72496: a5 = a5 | s1\n 72499: a3 = a3 | a5\n 72502: a3 = a3 << 0x20\n 72505: a3 = a3 | a1\n 72508: a1 = u8 [a0 + 0x19]\n 72511: a4 = u8 [a0 + 0x18]\n 72514: a5 = u8 [a0 + 0x1a]\n 72517: s1 = u8 [a0 + 0x1b]\n 72520: a1 = a1 << 0x8\n 72523: a1 = a1 | a4\n 72526: a5 = a5 << 0x10\n 72529: s1 = s1 << 0x18\n 72532: a5 = a5 | s1\n 72535: a1 = a1 | a5\n 72538: a4 = u8 [a0 + 0x1d]\n 72541: a5 = u8 [a0 + 0x1c]\n 72544: s1 = u8 [a0 + 0x1e]\n 72547: a0 = u8 [a0 + 0x1f]\n 72550: a4 = a4 << 0x8\n 72553: a4 = a4 | a5\n 72556: s1 = s1 << 0x10\n 72559: a0 = a0 << 0x18\n 72562: a0 = a0 | s1\n 72565: a0 = a0 | a4\n 72568: a0 = a0 << 0x20\n 72571: a0 = a0 | a1\n 72574: a4 = reverse a0\n 72576: a0 = reverse a3\n 72578: a1 = reverse a2\n 72580: a2 = reverse t0\n 72582: a3 = u64 [sp + 0x50]\n 72585: u64 [sp + 0x108] = a3\n 72589: a3 = u64 [sp + 0x58]\n 72592: u64 [sp + 0x100] = a3\n 72596: a3 = u64 [sp + 0x40]\n 72599: u64 [sp + 0x110] = a3\n 72603: a3 = u64 [sp + 0x48]\n 72606: u64 [sp + 0x118] = a3\n 72610: u64 [sp + 0xf8] = a2\n 72614: u64 [sp + 0xf0] = a1\n 72618: u64 [sp + 0xe8] = a0\n 72622: a0 = sp + 0x100\n 72626: a1 = sp + 0xe0\n 72630: u64 [sp + 0xe0] = a4\n 72634: ra = 832, jump @876\n      : @924 [@dyn 416] (gas: 8)\n 72640: a0 = 0xffffffa0\n 72650: a1 = u64 [sp + 0x80]\n 72654: a0 = a1 <u a0\n 72657: a1 = u64 [sp + 0x70]\n 72660: a0 = 0 if a1 != 0\n 72662: a1 = u64 [sp + 0x60]\n 72665: a0 = 0 if a1 != 0\n 72667: jump @928 if a0 == 0\n      : @925 (gas: 20)\n 72671: a0 = u64 [sp + 0x88]\n 72675: a1 = a0 + 0x3\n 72678: u64 [sp + 0x80] = a1\n 72682: a0 = a1 <u a0\n 72685: a1 = u64 [sp + 0x90]\n 72689: a2 = a1 + a0\n 72692: u64 [sp + 0x88] = a2\n 72696: s1 = a2 <u a1\n 72699: s1 = a0 if a0 == 0\n 72702: a0 = u64 [sp + 0x98]\n 72706: s1 = s1 + a0\n 72709: u64 [sp + 0x90] = s1\n 72713: a0 = s1 <u a0\n 72716: a1 = u64 [sp + 0x78]\n 72719: a0 = a0 + a1\n 72722: u64 [sp + 0x98] = a0\n 72726: a0 = u64 [sp + 0x68]\n 72729: i32 a0 = a0 + 0x60\n 72732: a1 = 0x20\n 72735: ra = 834, jump @0\n      : @926 [@dyn 417] (gas: 107)\n 72742: a1 = u8 [a0 + 0x1]\n 72745: a2 = u8 [a0]\n 72747: a3 = u8 [a0 + 0x2]\n 72750: a4 = u8 [a0 + 0x3]\n 72753: a1 = a1 << 0x8\n 72756: a1 = a1 | a2\n 72759: a3 = a3 << 0x10\n 72762: a4 = a4 << 0x18\n 72765: a3 = a3 | a4\n 72768: a1 = a1 | a3\n 72771: a2 = u8 [a0 + 0x5]\n 72774: a3 = u8 [a0 + 0x4]\n 72777: a4 = u8 [a0 + 0x6]\n 72780: a5 = u8 [a0 + 0x7]\n 72783: a2 = a2 << 0x8\n 72786: a2 = a2 | a3\n 72789: a4 = a4 << 0x10\n 72792: a5 = a5 << 0x18\n 72795: a4 = a4 | a5\n 72798: a2 = a2 | a4\n 72801: a2 = a2 << 0x20\n 72804: t0 = a2 | a1\n 72807: a2 = u8 [a0 + 0x9]\n 72810: a3 = u8 [a0 + 0x8]\n 72813: a4 = u8 [a0 + 0xa]\n 72816: a5 = u8 [a0 + 0xb]\n 72819: a2 = a2 << 0x8\n 72822: a2 = a2 | a3\n 72825: a4 = a4 << 0x10\n 72828: a5 = a5 << 0x18\n 72831: a4 = a4 | a5\n 72834: a2 = a2 | a4\n 72837: a3 = u8 [a0 + 0xd]\n 72840: a4 = u8 [a0 + 0xc]\n 72843: a5 = u8 [a0 + 0xe]\n 72846: a1 = u8 [a0 + 0xf]\n 72849: a3 = a3 << 0x8\n 72852: a3 = a3 | a4\n 72855: a5 = a5 << 0x10\n 72858: a1 = a1 << 0x18\n 72861: a1 = a1 | a5\n 72864: a1 = a1 | a3\n 72867: a1 = a1 << 0x20\n 72870: a2 = a2 | a1\n 72873: a1 = u8 [a0 + 0x11]\n 72876: a3 = u8 [a0 + 0x10]\n 72879: a4 = u8 [a0 + 0x12]\n 72882: a5 = u8 [a0 + 0x13]\n 72885: a1 = a1 << 0x8\n 72888: a1 = a1 | a3\n 72891: a4 = a4 << 0x10\n 72894: a5 = a5 << 0x18\n 72897: a4 = a4 | a5\n 72900: a1 = a1 | a4\n 72903: a3 = u8 [a0 + 0x15]\n 72906: a4 = u8 [a0 + 0x14]\n 72909: a5 = u8 [a0 + 0x16]\n 72912: s1 = u8 [a0 + 0x17]\n 72915: a3 = a3 << 0x8\n 72918: a3 = a3 | a4\n 72921: a5 = a5 << 0x10\n 72924: s1 = s1 << 0x18\n 72927: a5 = a5 | s1\n 72930: a3 = a3 | a5\n 72933: a3 = a3 << 0x20\n 72936: a3 = a3 | a1\n 72939: a1 = u8 [a0 + 0x19]\n 72942: a4 = u8 [a0 + 0x18]\n 72945: a5 = u8 [a0 + 0x1a]\n 72948: s1 = u8 [a0 + 0x1b]\n 72951: a1 = a1 << 0x8\n 72954: a1 = a1 | a4\n 72957: a5 = a5 << 0x10\n 72960: s1 = s1 << 0x18\n 72963: a5 = a5 | s1\n 72966: a1 = a1 | a5\n 72969: a4 = u8 [a0 + 0x1d]\n 72972: a5 = u8 [a0 + 0x1c]\n 72975: s1 = u8 [a0 + 0x1e]\n 72978: a0 = u8 [a0 + 0x1f]\n 72981: a4 = a4 << 0x8\n 72984: a4 = a4 | a5\n 72987: s1 = s1 << 0x10\n 72990: a0 = a0 << 0x18\n 72993: a0 = a0 | s1\n 72996: a0 = a0 | a4\n 72999: a0 = a0 << 0x20\n 73002: a0 = a0 | a1\n 73005: a4 = reverse a0\n 73007: a0 = reverse a3\n 73009: a1 = reverse a2\n 73011: a2 = reverse t0\n 73013: a3 = u64 [sp + 0x88]\n 73017: u64 [sp + 0xc8] = a3\n 73021: a3 = u64 [sp + 0x80]\n 73025: u64 [sp + 0xc0] = a3\n 73029: a3 = u64 [sp + 0x90]\n 73033: u64 [sp + 0xd0] = a3\n 73037: a3 = u64 [sp + 0x98]\n 73041: u64 [sp + 0xd8] = a3\n 73045: u64 [sp + 0xb8] = a2\n 73049: u64 [sp + 0xb0] = a1\n 73053: u64 [sp + 0xa8] = a0\n 73057: a0 = sp + 0xc0\n 73061: a1 = sp + 0xa0\n 73065: u64 [sp + 0xa0] = a4\n 73069: ra = 836, jump @876\n      : @927 [@dyn 418] (gas: 6)\n 73075: sp = s0 + 0xfffffffffffffe60\n 73079: ra = u64 [sp + 0x198]\n 73083: s0 = u64 [sp + 0x190]\n 73087: s1 = u64 [sp + 0x188]\n 73091: sp = sp + 0x1a0\n 73095: ret\n      : @928 (gas: 1)\n 73097: trap\n      : @929 (gas: 7)\n 73098: a4 = u64 [sp + 0x218]\n 73102: a3 = u64 [sp + 0x210]\n 73106: a2 = u64 [sp + 0x208]\n 73110: a0 = a3 | a4\n 73113: a1 = a2 <u 0x1\n 73116: a1 = 0 if a0 != 0\n 73118: jump @932 if a1 == 0\n      : @930 (gas: 50)\n 73122: a0 = u64 [sp + 0x200]\n 73126: u64 [sp + 0x58] = a0\n 73129: a0 = a0 + 0x1\n 73132: a1 = a0 <u 0x1\n 73135: a1 = a1 + a2\n 73138: u64 [sp + 0x200] = a0\n 73142: a0 = a0 | a1\n 73145: u64 [sp + 0x208] = a1\n 73149: a0 = a0 <u 0x1\n 73152: a0 = a0 + a3\n 73155: u64 [sp + 0x210] = a0\n 73159: a0 = a0 <u a3\n 73162: a0 = a0 + a4\n 73165: u64 [sp + 0x218] = a0\n 73169: a0 = u64 [sp + 0x70]\n 73172: u64 [sp + 0x1e8] = a0\n 73176: a0 = u64 [sp + 0x78]\n 73179: u64 [sp + 0x1e0] = a0\n 73183: a0 = u64 [sp + 0x68]\n 73186: u64 [sp + 0x1f0] = a0\n 73190: s1 = u64 [sp + 0x60]\n 73193: u64 [sp + 0x1f8] = s1\n 73197: i32 a1 = sp + 0x1e0\n 73201: u64 [sp + 0x48] = a3\n 73204: i32 a3 = sp + 0x200\n 73208: u64 [sp + 0x40] = a2\n 73211: a2 = 0xffffffffffffffff\n 73214: u64 [sp + 0x38] = a4\n 73217: a4 = 0x20\n 73220: a0 = 0\n 73222: ecalli 14 // 'set_storage'\n 73224: a0 = u64 [sp + 0x38]\n 73227: u64 [sp + 0x158] = a0\n 73231: a0 = u64 [sp + 0x48]\n 73234: u64 [sp + 0x150] = a0\n 73238: a0 = u64 [sp + 0x40]\n 73241: u64 [sp + 0x148] = a0\n 73245: a0 = u64 [sp + 0x58]\n 73248: u64 [sp + 0x140] = a0\n 73252: u64 [sp + 0x178] = s1\n 73256: a0 = u64 [sp + 0x68]\n 73259: u64 [sp + 0x170] = a0\n 73263: a0 = u64 [sp + 0x70]\n 73266: u64 [sp + 0x168] = a0\n 73270: a0 = sp + 0x180\n 73274: a1 = sp + 0x160\n 73278: a2 = sp + 0x140\n 73282: a3 = u64 [sp + 0x78]\n 73285: u64 [sp + 0x160] = a3\n 73289: ra = 838, jump @267\n      : @931 [@dyn 419] (gas: 453)\n 73296: a0 = u64 [sp + 0x1b8]\n 73300: u64 [sp + 0x58] = a0\n 73303: a0 = u64 [sp + 0x1b0]\n 73307: u64 [sp + 0x48] = a0\n 73310: s1 = u64 [sp + 0x1a8]\n 73314: a0 = u64 [sp + 0x1a0]\n 73318: u64 [sp + 0x18] = a0\n 73321: a3 = u64 [sp + 0x198]\n 73325: u64 [sp + 0x60] = a3\n 73328: a2 = u64 [sp + 0x190]\n 73332: u64 [sp + 0x68] = a2\n 73335: a1 = u64 [sp + 0x188]\n 73339: u64 [sp + 0x70] = a1\n 73342: a0 = u64 [sp + 0x180]\n 73346: u64 [sp + 0x78] = a0\n 73349: u64 [sp + 0x1f8] = a3\n 73353: u64 [sp + 0x1f0] = a2\n 73357: u64 [sp + 0x1e8] = a1\n 73361: u64 [sp + 0x1e0] = a0\n 73365: u64 [sp + 536] = 0\n 73369: u64 [sp + 528] = 0\n 73373: u64 [sp + 520] = 0\n 73377: u64 [sp + 512] = 0\n 73381: u32 [sp + 448] = 0x20\n 73386: i32 a1 = sp + 0x1e0\n 73390: i32 a3 = sp + 0x200\n 73394: i32 a4 = sp + 0x1c0\n 73398: a2 = 0xffffffffffffffff\n 73401: a0 = 0\n 73403: ecalli 7 // 'get_storage'\n 73405: a2 = u64 [sp + 0x18]\n 73408: a0 = a2 >> 0x3d\n 73411: a1 = s1 << 0x3\n 73414: a0 = a0 | a1\n 73417: a1 = a2 << 0x3\n 73420: a1 = a1 <u 0x100\n 73424: t1 = a1 ^ 0x1\n 73427: a1 = a0 >u 0\n 73429: t1 = a1 if a0 != 0\n 73432: s1 = s1 >> 0x3d\n 73435: a1 = u64 [sp + 0x48]\n 73438: a0 = a1 << 0x3\n 73441: a0 = a0 | s1\n 73444: a1 = a1 >> 0x3d\n 73447: a3 = u64 [sp + 0x58]\n 73450: a3 = a3 << 0x3\n 73453: a1 = a1 | a3\n 73456: a3 = a1 >u 0\n 73458: a4 = a0 >u 0\n 73460: a4 = a3 if a1 != 0\n 73463: a0 = a0 | a1\n 73466: t1 = a4 if a0 != 0\n 73469: a0 = u64 [sp + 0x200]\n 73473: u64 [sp + 0x58] = a0\n 73476: a0 = u64 [sp + 0x208]\n 73480: u64 [sp + 0x48] = a0\n 73483: a0 = u64 [sp + 0x210]\n 73487: u64 [sp + 0x40] = a0\n 73490: a0 = u64 [sp + 0x218]\n 73494: u64 [sp + 0x38] = a0\n 73497: u8 [sp + 319] = 0xff\n 73503: u8 [sp + 318] = 0xff\n 73509: u8 [sp + 317] = 0xff\n 73515: u8 [sp + 316] = 0xff\n 73521: u8 [sp + 315] = 0xff\n 73527: u8 [sp + 314] = 0xff\n 73533: u8 [sp + 313] = 0xff\n 73539: u8 [sp + 312] = 0xff\n 73545: u8 [sp + 311] = 0xff\n 73551: u8 [sp + 310] = 0xff\n 73557: u8 [sp + 309] = 0xff\n 73563: u8 [sp + 308] = 0xff\n 73569: u8 [sp + 307] = 0xff\n 73575: u8 [sp + 306] = 0xff\n 73581: u8 [sp + 305] = 0xff\n 73587: u8 [sp + 304] = 0xff\n 73593: u8 [sp + 303] = 0xff\n 73599: u8 [sp + 302] = 0xff\n 73605: u8 [sp + 301] = 0xff\n 73611: u8 [sp + 300] = 0xff\n 73617: u8 [sp + 299] = 0xff\n 73623: u8 [sp + 298] = 0xff\n 73629: u8 [sp + 297] = 0xff\n 73635: u8 [sp + 296] = 0xff\n 73641: u8 [sp + 295] = 0xff\n 73647: u8 [sp + 294] = 0xff\n 73653: u8 [sp + 293] = 0xff\n 73659: u8 [sp + 292] = 0xff\n 73665: u8 [sp + 291] = 0xff\n 73671: u8 [sp + 290] = 0xff\n 73677: u8 [sp + 289] = 0xff\n 73683: u8 [sp + 288] = 0xff\n 73689: u8 [sp + 287] = 0\n 73693: u8 [sp + 286] = 0\n 73697: u8 [sp + 285] = 0\n 73701: u8 [sp + 284] = 0\n 73705: u8 [sp + 283] = 0\n 73709: u8 [sp + 282] = 0\n 73713: u8 [sp + 281] = 0\n 73717: u8 [sp + 280] = 0\n 73721: u8 [sp + 279] = 0\n 73725: u8 [sp + 278] = 0\n 73729: u8 [sp + 277] = 0\n 73733: u8 [sp + 276] = 0\n 73737: u8 [sp + 275] = 0\n 73741: u8 [sp + 274] = 0\n 73745: u8 [sp + 273] = 0\n 73749: u8 [sp + 272] = 0\n 73753: u8 [sp + 271] = 0\n 73757: u8 [sp + 270] = 0\n 73761: u8 [sp + 269] = 0\n 73765: u8 [sp + 268] = 0\n 73769: u8 [sp + 267] = 0\n 73773: u8 [sp + 266] = 0\n 73777: u8 [sp + 265] = 0\n 73781: u8 [sp + 264] = 0\n 73785: u8 [sp + 263] = 0\n 73789: u8 [sp + 262] = 0\n 73793: u8 [sp + 261] = 0\n 73797: u8 [sp + 260] = 0\n 73801: u8 [sp + 259] = 0\n 73805: u8 [sp + 258] = 0\n 73809: u8 [sp + 257] = 0\n 73813: u8 [sp + 256] = 0\n 73817: a4 = a2 & 0x1f\n 73820: a3 = sp + 0x120\n 73824: a3 = a3 - a4\n 73827: a0 = u8 [a3 + 0x19]\n 73830: a1 = u8 [a3 + 0x18]\n 73833: a5 = u8 [a3 + 0x1a]\n 73836: s1 = u8 [a3 + 0x1b]\n 73839: a0 = a0 << 0x8\n 73842: a0 = a0 | a1\n 73845: a5 = a5 << 0x10\n 73848: s1 = s1 << 0x18\n 73851: a5 = a5 | s1\n 73854: t0 = a5 | a0\n 73857: a1 = u8 [a3 + 0x1d]\n 73860: a5 = u8 [a3 + 0x1c]\n 73863: s1 = u8 [a3 + 0x1e]\n 73866: a0 = u8 [a3 + 0x1f]\n 73869: a1 = a1 << 0x8\n 73872: a1 = a1 | a5\n 73875: s1 = s1 << 0x10\n 73878: a0 = a0 << 0x18\n 73881: a0 = a0 | s1\n 73884: a0 = a0 | a1\n 73887: a0 = a0 << 0x20\n 73890: a0 = a0 | t0\n 73893: u64 [sp + 0x18] = a0\n 73896: a0 = u8 [a3 + 0x11]\n 73899: a1 = u8 [a3 + 0x10]\n 73902: a5 = u8 [a3 + 0x12]\n 73905: s1 = u8 [a3 + 0x13]\n 73908: a0 = a0 << 0x8\n 73911: a0 = a0 | a1\n 73914: a5 = a5 << 0x10\n 73917: s1 = s1 << 0x18\n 73920: a5 = a5 | s1\n 73923: t0 = a5 | a0\n 73926: a1 = u8 [a3 + 0x15]\n 73929: a5 = u8 [a3 + 0x14]\n 73932: s1 = u8 [a3 + 0x16]\n 73935: a0 = u8 [a3 + 0x17]\n 73938: a1 = a1 << 0x8\n 73941: a1 = a1 | a5\n 73944: s1 = s1 << 0x10\n 73947: a0 = a0 << 0x18\n 73950: a0 = a0 | s1\n 73953: a0 = a0 | a1\n 73956: a0 = a0 << 0x20\n 73959: a0 = a0 | t0\n 73962: u64 [sp + 0x10] = a0\n 73965: a0 = u8 [a3 + 0x9]\n 73968: a1 = u8 [a3 + 0x8]\n 73971: a5 = u8 [a3 + 0xa]\n 73974: s1 = u8 [a3 + 0xb]\n 73977: a0 = a0 << 0x8\n 73980: a0 = a0 | a1\n 73983: a5 = a5 << 0x10\n 73986: s1 = s1 << 0x18\n 73989: a5 = a5 | s1\n 73992: a2 = a5 | a0\n 73995: a1 = u8 [a3 + 0xd]\n 73998: a5 = u8 [a3 + 0xc]\n 74001: s1 = u8 [a3 + 0xe]\n 74004: a0 = u8 [a3 + 0xf]\n 74007: a1 = a1 << 0x8\n 74010: a1 = a1 | a5\n 74013: s1 = s1 << 0x10\n 74016: a0 = a0 << 0x18\n 74019: a0 = a0 | s1\n 74022: a0 = a0 | a1\n 74025: a0 = a0 << 0x20\n 74028: ra = a0 | a2\n 74031: a0 = u8 [a3 + 0x1]\n 74034: a1 = u8 [a3]\n 74036: a2 = u8 [a3 + 0x2]\n 74039: s1 = u8 [a3 + 0x3]\n 74042: a0 = a0 << 0x8\n 74045: a0 = a0 | a1\n 74048: a2 = a2 << 0x10\n 74051: s1 = s1 << 0x18\n 74054: a2 = a2 | s1\n 74057: a0 = a0 | a2\n 74060: a1 = u8 [a3 + 0x5]\n 74063: a2 = u8 [a3 + 0x4]\n 74066: s1 = u8 [a3 + 0x6]\n 74069: a3 = u8 [a3 + 0x7]\n 74072: a1 = a1 << 0x8\n 74075: a1 = a1 | a2\n 74078: s1 = s1 << 0x10\n 74081: a3 = a3 << 0x18\n 74084: a3 = a3 | s1\n 74087: a1 = a1 | a3\n 74090: a1 = a1 << 0x20\n 74093: t2 = a1 | a0\n 74096: a1 = u64 [sp + 0x20]\n 74099: a0 = a1 >> 0x38\n 74102: u8 [sp + 0xe7] = a0\n 74106: a0 = a1 >> 0x30\n 74109: u8 [sp + 0xe6] = a0\n 74113: a0 = a1 >> 0x28\n 74116: u8 [sp + 0xe5] = a0\n 74120: a0 = a1 >> 0x20\n 74123: u8 [sp + 0xe4] = a0\n 74127: a0 = a1 >> 0x18\n 74130: u8 [sp + 0xe3] = a0\n 74134: a0 = a1 >> 0x10\n 74137: u8 [sp + 0xe2] = a0\n 74141: u8 [sp + 0xe0] = a1\n 74145: a0 = a1 >> 0x8\n 74148: u8 [sp + 0xe1] = a0\n 74152: a1 = u64 [sp + 0x28]\n 74155: a0 = a1 >> 0x38\n 74158: u8 [sp + 0xef] = a0\n 74162: a0 = a1 >> 0x30\n 74165: u8 [sp + 0xee] = a0\n 74169: a0 = a1 >> 0x28\n 74172: u8 [sp + 0xed] = a0\n 74176: a0 = a1 >> 0x20\n 74179: u8 [sp + 0xec] = a0\n 74183: a0 = a1 >> 0x18\n 74186: u8 [sp + 0xeb] = a0\n 74190: a0 = a1 >> 0x10\n 74193: u8 [sp + 0xea] = a0\n 74197: u8 [sp + 0xe8] = a1\n 74201: a0 = a1 >> 0x8\n 74204: u8 [sp + 0xe9] = a0\n 74208: a1 = u64 [sp + 0x30]\n 74211: a0 = a1 >> 0x38\n 74214: u8 [sp + 0xf7] = a0\n 74218: a0 = a1 >> 0x30\n 74221: u8 [sp + 0xf6] = a0\n 74225: a0 = a1 >> 0x28\n 74228: u8 [sp + 0xf5] = a0\n 74232: a0 = a1 >> 0x20\n 74235: u8 [sp + 0xf4] = a0\n 74239: a0 = a1 >> 0x18\n 74242: u8 [sp + 0xf3] = a0\n 74246: a0 = a1 >> 0x10\n 74249: u8 [sp + 0xf2] = a0\n 74253: u8 [sp + 0xf0] = a1\n 74257: a0 = a1 >> 0x8\n 74260: u8 [sp + 0xf1] = a0\n 74264: a1 = u64 [sp + 0x50]\n 74267: a0 = a1 >> 0x38\n 74270: u8 [sp + 0xff] = a0\n 74274: a0 = a1 >> 0x30\n 74277: u8 [sp + 0xfe] = a0\n 74281: a0 = a1 >> 0x28\n 74284: u8 [sp + 0xfd] = a0\n 74288: a0 = a1 >> 0x20\n 74291: u8 [sp + 0xfc] = a0\n 74295: a0 = a1 >> 0x18\n 74298: u8 [sp + 0xfb] = a0\n 74302: a0 = a1 >> 0x10\n 74305: u8 [sp + 0xfa] = a0\n 74309: u8 [sp + 0xf8] = a1\n 74313: a0 = a1 >> 0x8\n 74316: u8 [sp + 0xf9] = a0\n 74320: a0 = sp + 0xe0\n 74324: a4 = a0 - a4\n 74327: u8 [sp + 223] = 0\n 74331: u8 [sp + 222] = 0\n 74335: u8 [sp + 221] = 0\n 74339: u8 [sp + 220] = 0\n 74343: u8 [sp + 219] = 0\n 74347: u8 [sp + 218] = 0\n 74351: u8 [sp + 217] = 0\n 74355: u8 [sp + 216] = 0\n 74359: u8 [sp + 215] = 0\n 74363: u8 [sp + 214] = 0\n 74367: u8 [sp + 213] = 0\n 74371: u8 [sp + 212] = 0\n 74375: u8 [sp + 211] = 0\n 74379: u8 [sp + 210] = 0\n 74383: u8 [sp + 209] = 0\n 74387: u8 [sp + 208] = 0\n 74391: u8 [sp + 207] = 0\n 74395: u8 [sp + 206] = 0\n 74399: u8 [sp + 205] = 0\n 74403: u8 [sp + 204] = 0\n 74407: u8 [sp + 203] = 0\n 74411: u8 [sp + 202] = 0\n 74415: u8 [sp + 201] = 0\n 74419: u8 [sp + 200] = 0\n 74423: u8 [sp + 199] = 0\n 74427: u8 [sp + 198] = 0\n 74431: u8 [sp + 197] = 0\n 74435: u8 [sp + 196] = 0\n 74439: u8 [sp + 195] = 0\n 74443: u8 [sp + 194] = 0\n 74447: u8 [sp + 193] = 0\n 74451: u8 [sp + 192] = 0\n 74455: a0 = u8 [a4 + 0x19]\n 74458: a1 = u8 [a4 + 0x18]\n 74461: a2 = u8 [a4 + 0x1a]\n 74464: s1 = u8 [a4 + 0x1b]\n 74467: a0 = a0 << 0x8\n 74470: a0 = a0 | a1\n 74473: a2 = a2 << 0x10\n 74476: s1 = s1 << 0x18\n 74479: a2 = a2 | s1\n 74482: a3 = a2 | a0\n 74485: a1 = u8 [a4 + 0x1d]\n 74488: a2 = u8 [a4 + 0x1c]\n 74491: s1 = u8 [a4 + 0x1e]\n 74494: a0 = u8 [a4 + 0x1f]\n 74497: a1 = a1 << 0x8\n 74500: a1 = a1 | a2\n 74503: s1 = s1 << 0x10\n 74506: a0 = a0 << 0x18\n 74509: a0 = a0 | s1\n 74512: a0 = a0 | a1\n 74515: a0 = a0 << 0x20\n 74518: s1 = a0 | a3\n 74521: a0 = u8 [a4 + 0x11]\n 74524: a1 = u8 [a4 + 0x10]\n 74527: a2 = u8 [a4 + 0x12]\n 74530: a3 = u8 [a4 + 0x13]\n 74533: a0 = a0 << 0x8\n 74536: a0 = a0 | a1\n 74539: a2 = a2 << 0x10\n 74542: a3 = a3 << 0x18\n 74545: a2 = a2 | a3\n 74548: a5 = a2 | a0\n 74551: a1 = u8 [a4 + 0x15]\n 74554: a2 = u8 [a4 + 0x14]\n 74557: a3 = u8 [a4 + 0x16]\n 74560: a0 = u8 [a4 + 0x17]\n 74563: a1 = a1 << 0x8\n 74566: a1 = a1 | a2\n 74569: a3 = a3 << 0x10\n 74572: a0 = a0 << 0x18\n 74575: a0 = a0 | a3\n 74578: a0 = a0 | a1\n 74581: a0 = a0 << 0x20\n 74584: t0 = a0 | a5\n 74587: a0 = u8 [a4 + 0x9]\n 74590: a2 = u8 [a4 + 0x8]\n 74593: a3 = u8 [a4 + 0xa]\n 74596: a5 = u8 [a4 + 0xb]\n 74599: a0 = a0 << 0x8\n 74602: a0 = a0 | a2\n 74605: a3 = a3 << 0x10\n 74608: a5 = a5 << 0x18\n 74611: a3 = a3 | a5\n 74614: a1 = a3 | a0\n 74617: a2 = u8 [a4 + 0xd]\n 74620: a3 = u8 [a4 + 0xc]\n 74623: a5 = u8 [a4 + 0xe]\n 74626: a0 = u8 [a4 + 0xf]\n 74629: a2 = a2 << 0x8\n 74632: a2 = a2 | a3\n 74635: a5 = a5 << 0x10\n 74638: a0 = a0 << 0x18\n 74641: a0 = a0 | a5\n 74644: a0 = a0 | a2\n 74647: a0 = a0 << 0x20\n 74650: a0 = a0 | a1\n 74653: a1 = u8 [a4 + 0x1]\n 74656: a2 = u8 [a4]\n 74658: a3 = u8 [a4 + 0x2]\n 74661: a5 = u8 [a4 + 0x3]\n 74664: a1 = a1 << 0x8\n 74667: a1 = a1 | a2\n 74670: a3 = a3 << 0x10\n 74673: a5 = a5 << 0x18\n 74676: a3 = a3 | a5\n 74679: a1 = a1 | a3\n 74682: a2 = u8 [a4 + 0x5]\n 74685: a3 = u8 [a4 + 0x4]\n 74688: a5 = u8 [a4 + 0x6]\n 74691: a4 = u8 [a4 + 0x7]\n 74694: a2 = a2 << 0x8\n 74697: a2 = a2 | a3\n 74700: a5 = a5 << 0x10\n 74703: a4 = a4 << 0x18\n 74706: a4 = a4 | a5\n 74709: a2 = a2 | a4\n 74712: a2 = a2 << 0x20\n 74715: a4 = a2 | a1\n 74718: t2 = 0 if t1 != 0\n 74720: ra = 0 if t1 != 0\n 74722: a5 = u64 [sp + 0x10]\n 74725: a5 = 0 if t1 != 0\n 74727: a2 = u64 [sp + 0x18]\n 74730: a2 = 0 if t1 != 0\n 74732: a4 = 0 if t1 != 0\n 74734: a0 = 0 if t1 != 0\n 74736: t0 = 0 if t1 != 0\n 74738: s1 = 0 if t1 != 0\n 74740: a1 = u64 [sp + 0x38]\n 74743: t1 = a1 & ~a2\n 74746: a2 = a2 & s1\n 74749: a1 = u64 [sp + 0x40]\n 74752: a3 = a1 & ~a5\n 74755: a5 = t0 & a5\n 74758: a1 = u64 [sp + 0x48]\n 74761: s1 = a1 & ~ra\n 74764: a0 = a0 & ra\n 74767: a1 = u64 [sp + 0x58]\n 74770: a1 = a1 & ~t2\n 74773: a4 = a4 & t2\n 74776: a1 = a1 | a4\n 74779: a0 = a0 | s1\n 74782: a3 = a3 | a5\n 74785: a2 = t1 | a2\n 74788: a4 = u64 [sp + 0x60]\n 74791: u64 [sp + 0x1f8] = a4\n 74795: a4 = u64 [sp + 0x68]\n 74798: u64 [sp + 0x1f0] = a4\n 74802: a4 = u64 [sp + 0x70]\n 74805: u64 [sp + 0x1e8] = a4\n 74809: a4 = u64 [sp + 0x78]\n 74812: u64 [sp + 0x1e0] = a4\n 74816: u64 [sp + 0x218] = a2\n 74820: u64 [sp + 0x210] = a3\n 74824: u64 [sp + 0x208] = a0\n 74828: u64 [sp + 0x200] = a1\n 74832: i32 a1 = sp + 0x1e0\n 74836: i32 a3 = sp + 0x200\n 74840: a2 = 0xffffffffffffffff\n 74843: a4 = 0x20\n 74846: a0 = 0\n 74848: ecalli 14 // 'set_storage'\n 74850: sp = s0 + 0xfffffffffffffdc0\n 74854: ra = u64 [sp + 0x238]\n 74858: s0 = u64 [sp + 0x230]\n 74862: s1 = u64 [sp + 0x228]\n 74866: sp = sp + 0x240\n 74870: ret\n      : @932 (gas: 8)\n 74872: u64 [sp + 176] = 0\n 74876: u64 [sp + 168] = 0\n 74880: u64 [sp + 160] = 0\n 74884: a0 = 0x4e487b7100000000\n 74894: a1 = sp + 0xa0\n 74898: u64 [sp + 0xb8] = a0\n 74902: a0 = 0\n 74904: ra = 840, jump @23\n      : @933 [@dyn 420] (gas: 7)\n 74911: u64 [sp + 152] = 0\n 74915: u64 [sp + 144] = 0\n 74919: u64 [sp + 128] = 0x41\n 74924: a0 = 0x4\n 74927: a1 = sp + 0x80\n 74931: u64 [sp + 136] = 0\n 74935: ra = 842, jump @23\n      : @934 [@dyn 421] (gas: 3)\n 74942: a1 = 0x24\n 74945: a0 = 0\n 74947: ra = 844, jump @0\n      : @935 [@dyn 422] (gas: 6)\n 74954: i32 a1 = a0 + 0\n 74956: a0 = 0x1\n 74959: a2 = 0x24\n 74962: ra = 0x34e\n 74966: ecalli 12 // 'seal_return'\n 74968: fallthrough\n      : @936 [@dyn 423] (gas: 17)\n 74969: sp = sp + 0xffffffffffffff38\n 74973: u64 [sp + 0xc0] = ra\n 74977: u64 [sp + 0xb8] = s0\n 74981: u64 [sp + 0xb0] = s1\n 74985: t0 = u64 [a1 + 0x18]\n 74988: s0 = u64 [a1 + 0x10]\n 74991: t1 = u64 [a1 + 0x8]\n 74994: s1 = u64 [a1]\n 74996: a1 = t1 | t0\n 74999: a5 = s1 | s0\n 75002: a5 = a5 | a1\n 75005: a5 = a5 >> 0x20\n 75008: a1 = a1 | s0\n 75011: a1 = a1 << 0x20\n 75014: a1 = a1 | a5\n 75017: u64 [sp + 0x30] = a0\n 75020: jump @949 if a1 != 0\n      : @937 (gas: 43)\n 75024: a0 = u64 [a4 + 0x18]\n 75027: u64 [sp + 0x8] = a0\n 75030: a0 = u64 [a4 + 0x10]\n 75033: u64 [sp + 0x10] = a0\n 75036: a0 = u64 [a4 + 0x8]\n 75039: u64 [sp + 0x18] = a0\n 75042: a0 = u64 [a4]\n 75044: u64 [sp + 0x20] = a0\n 75047: a0 = u64 [a3 + 0x18]\n 75050: u64 [sp + 0x88] = a0\n 75054: a0 = u64 [a3 + 0x10]\n 75057: u64 [sp + 0x80] = a0\n 75061: a0 = s1 + 0x40\n 75064: u64 [sp + 0xa0] = a0\n 75068: a0 = a0 <u s1\n 75071: a1 = t1 + a0\n 75074: u64 [sp + 0x98] = a1\n 75078: u64 [sp + 0x40] = t1\n 75081: a1 = a1 <u t1\n 75084: a1 = a0 if a0 == 0\n 75087: a0 = u64 [a3 + 0x8]\n 75090: u64 [sp + 0x78] = a0\n 75093: a0 = u64 [a3]\n 75095: u64 [sp + 0xa8] = a0\n 75099: a0 = u64 [a2 + 0x18]\n 75102: u64 [sp + 0x60] = a0\n 75105: a0 = u64 [a2 + 0x10]\n 75108: u64 [sp + 0x68] = a0\n 75111: a0 = u64 [a2 + 0x8]\n 75114: u64 [sp + 0x58] = a0\n 75117: a0 = u64 [a2]\n 75119: u64 [sp + 0x70] = a0\n 75122: a1 = a1 + s0\n 75125: u64 [sp + 0x90] = a1\n 75129: u64 [sp + 0x48] = s0\n 75132: a0 = a1 <u s0\n 75135: u64 [sp + 0x50] = t0\n 75138: s0 = t0 + a0\n 75141: u64 [sp + 0x38] = s1\n 75144: i32 a0 = s1 + 0\n 75146: a1 = 0x20\n 75149: u64 [sp] = a0\n 75151: ra = 848, jump @0\n      : @938 [@dyn 424] (gas: 43)\n 75158: a3 = u64 [sp + 0xa0]\n 75162: u8 [a0 + 31] = 0x40\n 75166: a4 = u64 [sp + 0x90]\n 75170: a1 = a3 | a4\n 75173: a2 = u64 [sp + 0x98]\n 75177: a2 = a2 | s0\n 75180: a1 = a1 | a2\n 75183: a1 = a1 >> 0x20\n 75186: a2 = a2 | a4\n 75189: a2 = a2 << 0x20\n 75192: a1 = a1 | a2\n 75195: u8 [a0 + 30] = 0\n 75198: u8 [a0 + 29] = 0\n 75201: u8 [a0 + 28] = 0\n 75204: u8 [a0 + 27] = 0\n 75207: u8 [a0 + 26] = 0\n 75210: u8 [a0 + 25] = 0\n 75213: u8 [a0 + 24] = 0\n 75216: u8 [a0 + 23] = 0\n 75219: u8 [a0 + 22] = 0\n 75222: u8 [a0 + 21] = 0\n 75225: u8 [a0 + 20] = 0\n 75228: u8 [a0 + 19] = 0\n 75231: u8 [a0 + 18] = 0\n 75234: u8 [a0 + 17] = 0\n 75237: u8 [a0 + 16] = 0\n 75240: u8 [a0 + 15] = 0\n 75243: u8 [a0 + 14] = 0\n 75246: u8 [a0 + 13] = 0\n 75249: u8 [a0 + 12] = 0\n 75252: u8 [a0 + 11] = 0\n 75255: u8 [a0 + 10] = 0\n 75258: u8 [a0 + 9] = 0\n 75261: u8 [a0 + 8] = 0\n 75264: u8 [a0 + 7] = 0\n 75267: u8 [a0 + 6] = 0\n 75270: u8 [a0 + 5] = 0\n 75273: u8 [a0 + 4] = 0\n 75276: u8 [a0 + 3] = 0\n 75279: u8 [a0 + 2] = 0\n 75282: u8 [a0 + 1] = 0\n 75285: u8 [a0 + 0] = 0\n 75287: jump @949 if a1 != 0\n      : @939 (gas: 4)\n 75291: u64 [sp + 0x28] = s0\n 75294: i32 a0 = a3 + 0\n 75296: a1 = 0x20\n 75299: ra = 850, jump @0\n      : @940 [@dyn 425] (gas: 80)\n 75306: t1 = u64 [sp + 0xa8]\n 75310: a1 = reverse t1\n 75312: a2 = a1 >> 0x38\n 75315: u8 [a0 + 0x1f] = a2\n 75318: a2 = a1 >> 0x30\n 75321: u8 [a0 + 0x1e] = a2\n 75324: a2 = a1 >> 0x28\n 75327: u8 [a0 + 0x1d] = a2\n 75330: a2 = a1 >> 0x20\n 75333: u8 [a0 + 0x1c] = a2\n 75336: a2 = a1 >> 0x18\n 75339: u8 [a0 + 0x1b] = a2\n 75342: a2 = a1 >> 0x10\n 75345: u8 [a0 + 0x1a] = a2\n 75348: a2 = a1 >> 0x8\n 75351: u8 [a0 + 0x19] = a2\n 75354: s1 = u64 [sp + 0x78]\n 75357: a2 = reverse s1\n 75359: u8 [a0 + 0x18] = a1\n 75362: a1 = a2 >> 0x38\n 75365: u8 [a0 + 0x17] = a1\n 75368: a1 = a2 >> 0x30\n 75371: u8 [a0 + 0x16] = a1\n 75374: a1 = a2 >> 0x28\n 75377: u8 [a0 + 0x15] = a1\n 75380: a1 = a2 >> 0x20\n 75383: u8 [a0 + 0x14] = a1\n 75386: a1 = a2 >> 0x18\n 75389: u8 [a0 + 0x13] = a1\n 75392: a1 = a2 >> 0x10\n 75395: u8 [a0 + 0x12] = a1\n 75398: a5 = u64 [sp + 0x80]\n 75402: a3 = reverse a5\n 75404: u8 [a0 + 0x10] = a2\n 75407: a2 = a2 >> 0x8\n 75410: u8 [a0 + 0x11] = a2\n 75413: a1 = a3 >> 0x38\n 75416: u8 [a0 + 0xf] = a1\n 75419: a1 = a3 >> 0x30\n 75422: u8 [a0 + 0xe] = a1\n 75425: a1 = a3 >> 0x28\n 75428: u8 [a0 + 0xd] = a1\n 75431: a1 = a3 >> 0x20\n 75434: u8 [a0 + 0xc] = a1\n 75437: a1 = a3 >> 0x18\n 75440: u8 [a0 + 0xb] = a1\n 75443: a1 = a3 >> 0x10\n 75446: u8 [a0 + 0xa] = a1\n 75449: a4 = u64 [sp + 0x88]\n 75453: a1 = reverse a4\n 75455: u8 [a0 + 0x8] = a3\n 75458: a3 = a3 >> 0x8\n 75461: u8 [a0 + 0x9] = a3\n 75464: a2 = a1 >> 0x38\n 75467: u8 [a0 + 0x7] = a2\n 75470: a2 = a1 >> 0x30\n 75473: u8 [a0 + 0x6] = a2\n 75476: a2 = a1 >> 0x28\n 75479: u8 [a0 + 0x5] = a2\n 75482: a2 = a1 >> 0x20\n 75485: u8 [a0 + 0x4] = a2\n 75488: a2 = a1 >> 0x18\n 75491: u8 [a0 + 0x3] = a2\n 75494: a2 = a1 >> 0x10\n 75497: u8 [a0 + 0x2] = a2\n 75500: a2 = u64 [sp + 0x60]\n 75503: s0 = u64 [sp + 0x58]\n 75506: s0 = s0 | a2\n 75509: t2 = u64 [sp + 0x70]\n 75512: a2 = u64 [sp + 0x68]\n 75515: a3 = t2 | a2\n 75518: a3 = a3 | s0\n 75521: a2 = a2 | s0\n 75524: a3 = a3 >> 0x20\n 75527: a2 = a2 << 0x20\n 75530: a2 = a2 | a3\n 75533: u8 [a0] = a1\n 75535: a1 = a1 >> 0x8\n 75538: u8 [a0 + 0x1] = a1\n 75541: jump @949 if a2 != 0\n      : @941 (gas: 13)\n 75545: a1 = a4\n 75547: a0 = t1 | a5\n 75550: a1 = a1 | s1\n 75553: a0 = a0 | a1\n 75556: a0 = a0 >> 0x20\n 75559: a1 = a1 | a5\n 75562: a1 = a1 << 0x20\n 75565: a0 = a0 | a1\n 75568: t0 = u64 [sp + 0x50]\n 75571: a4 = u64 [sp + 0x48]\n 75574: s0 = u64 [sp + 0x40]\n 75577: a2 = u64 [sp + 0x38]\n 75580: jump @949 if a0 != 0\n      : @942 (gas: 10)\n 75584: a0 = u64 [sp + 0x90]\n 75588: a1 = u64 [sp + 0x28]\n 75591: a0 = a0 | a1\n 75594: a1 = 0xffffffe0\n 75604: a3 = u64 [sp + 0xa0]\n 75608: a1 = a3 <u a1\n 75611: a3 = u64 [sp + 0x98]\n 75615: a1 = 0 if a3 != 0\n 75617: a1 = 0 if a0 != 0\n 75619: jump @949 if a1 == 0\n      : @943 (gas: 17)\n 75623: s1 = a2 + 0x60\n 75626: a0 = s1 <u a2\n 75629: a1 = s0 + a0\n 75632: u64 [sp + 0x98] = a1\n 75636: a1 = a1 <u s0\n 75639: a1 = a0 if a0 == 0\n 75642: a1 = a1 + a4\n 75645: u64 [sp + 0xa0] = a1\n 75649: a0 = a1 <u a4\n 75652: a0 = a0 + t0\n 75655: u64 [sp + 0x90] = a0\n 75659: i32 t2 = t2 + 0\n 75661: u64 [sp + 0x70] = t2\n 75664: i32 a0 = s1 + 0\n 75666: i32 s0 = t1 + 0\n 75668: a1 = s0\n 75670: ra = 852, jump @0\n      : @944 [@dyn 426] (gas: 6)\n 75677: i32 a0 = a0 + 0\n 75679: a1 = s0\n 75681: s0 = u64 [sp + 0x98]\n 75685: a2 = u64 [sp + 0x70]\n 75688: ecalli 2 // 'call_data_copy'\n 75690: fallthrough\n      : @945 (gas: 29)\n 75691: a0 = u64 [sp + 0xa8]\n 75695: a0 = a0 + s1\n 75698: u64 [sp + 0x70] = s1\n 75701: a1 = a0 <u s1\n 75704: a2 = u64 [sp + 0x78]\n 75707: a2 = a2 + s0\n 75710: a2 = a2 + a1\n 75713: a3 = a2 ^ s0\n 75716: a4 = a2 <u s0\n 75719: a4 = a1 if a3 == 0\n 75722: a1 = u64 [sp + 0x80]\n 75726: a5 = u64 [sp + 0xa0]\n 75730: a1 = a1 + a5\n 75733: a4 = a4 + a1\n 75736: a3 = a4 <u a1\n 75739: a1 = a1 <u a5\n 75742: a5 = u64 [sp + 0x88]\n 75746: s1 = u64 [sp + 0x90]\n 75750: a5 = a5 + s1\n 75753: a1 = a1 + a5\n 75756: a1 = a1 + a3\n 75759: a3 = a0 | a4\n 75762: a1 = a1 | a2\n 75765: a3 = a3 | a1\n 75768: a3 = a3 >> 0x20\n 75771: a1 = a1 | a4\n 75774: a1 = a1 << 0x20\n 75777: a1 = a1 | a3\n 75780: jump @949 if a1 != 0\n      : @946 (gas: 3)\n 75784: i32 a0 = a0 + 0\n 75786: a1 = 0x20\n 75789: ra = 854, jump @0\n      : @947 [@dyn 427] (gas: 53)\n 75796: u8 [a0 + 31] = 0\n 75799: u8 [a0 + 30] = 0\n 75802: u8 [a0 + 29] = 0\n 75805: u8 [a0 + 28] = 0\n 75808: u8 [a0 + 27] = 0\n 75811: u8 [a0 + 26] = 0\n 75814: u8 [a0 + 25] = 0\n 75817: u8 [a0 + 24] = 0\n 75820: u8 [a0 + 23] = 0\n 75823: u8 [a0 + 22] = 0\n 75826: u8 [a0 + 21] = 0\n 75829: u8 [a0 + 20] = 0\n 75832: u8 [a0 + 19] = 0\n 75835: u8 [a0 + 18] = 0\n 75838: u8 [a0 + 17] = 0\n 75841: u8 [a0 + 16] = 0\n 75844: u8 [a0 + 15] = 0\n 75847: u8 [a0 + 14] = 0\n 75850: u8 [a0 + 13] = 0\n 75853: u8 [a0 + 12] = 0\n 75856: u8 [a0 + 11] = 0\n 75859: u8 [a0 + 10] = 0\n 75862: u8 [a0 + 9] = 0\n 75865: u8 [a0 + 8] = 0\n 75868: u8 [a0 + 7] = 0\n 75871: u8 [a0 + 6] = 0\n 75874: u8 [a0 + 5] = 0\n 75877: u8 [a0 + 4] = 0\n 75880: u8 [a0 + 3] = 0\n 75883: u8 [a0 + 2] = 0\n 75886: u8 [a0 + 1] = 0\n 75889: u8 [a0 + 0] = 0\n 75891: a0 = u64 [sp + 0xa8]\n 75895: a0 = a0 + 0x1f\n 75898: a1 = 0x1ffffffe0\n 75908: a0 = a0 & a1\n 75911: a1 = u64 [sp + 0x70]\n 75914: a1 = a1 + a0\n 75917: u64 [sp + 0xa8] = a1\n 75921: s0 = a1 <u a0\n 75924: s1 = u64 [sp + 0x98]\n 75928: s1 = s1 + s0\n 75931: s0 = 0 if s1 != 0\n 75933: a0 = u64 [sp + 0xa0]\n 75937: s0 = s0 + a0\n 75940: a0 = s0 <u a0\n 75943: a1 = u64 [sp + 0x90]\n 75947: a0 = a0 + a1\n 75950: u64 [sp + 0xa0] = a0\n 75954: a0 = u64 [sp]\n 75956: i32 a0 = a0 + 0x20\n 75959: a1 = 0x20\n 75962: ra = 856, jump @0\n      : @948 [@dyn 428] (gas: 80)\n 75969: a1 = u64 [sp + 0x8]\n 75972: a1 = reverse a1\n 75974: a2 = u64 [sp + 0x10]\n 75977: a2 = reverse a2\n 75979: a3 = u64 [sp + 0x18]\n 75982: a3 = reverse a3\n 75984: a4 = u64 [sp + 0x20]\n 75987: a4 = reverse a4\n 75989: a5 = a4 >> 0x38\n 75992: u8 [a0 + 0x1f] = a5\n 75995: a5 = a4 >> 0x30\n 75998: u8 [a0 + 0x1e] = a5\n 76001: a5 = a4 >> 0x28\n 76004: u8 [a0 + 0x1d] = a5\n 76007: a5 = a4 >> 0x20\n 76010: u8 [a0 + 0x1c] = a5\n 76013: a5 = a4 >> 0x18\n 76016: u8 [a0 + 0x1b] = a5\n 76019: a5 = a4 >> 0x10\n 76022: u8 [a0 + 0x1a] = a5\n 76025: a5 = a4 >> 0x8\n 76028: u8 [a0 + 0x19] = a5\n 76031: u8 [a0 + 0x18] = a4\n 76034: a4 = a3 >> 0x38\n 76037: u8 [a0 + 0x17] = a4\n 76040: a4 = a3 >> 0x30\n 76043: u8 [a0 + 0x16] = a4\n 76046: a4 = a3 >> 0x28\n 76049: u8 [a0 + 0x15] = a4\n 76052: a4 = a3 >> 0x20\n 76055: u8 [a0 + 0x14] = a4\n 76058: a4 = a3 >> 0x18\n 76061: u8 [a0 + 0x13] = a4\n 76064: a4 = a3 >> 0x10\n 76067: u8 [a0 + 0x12] = a4\n 76070: a4 = a3 >> 0x8\n 76073: u8 [a0 + 0x11] = a4\n 76076: u8 [a0 + 0x10] = a3\n 76079: a3 = a2 >> 0x38\n 76082: u8 [a0 + 0xf] = a3\n 76085: a3 = a2 >> 0x30\n 76088: u8 [a0 + 0xe] = a3\n 76091: a3 = a2 >> 0x28\n 76094: u8 [a0 + 0xd] = a3\n 76097: a3 = a2 >> 0x20\n 76100: u8 [a0 + 0xc] = a3\n 76103: a3 = a2 >> 0x18\n 76106: u8 [a0 + 0xb] = a3\n 76109: a3 = a2 >> 0x10\n 76112: u8 [a0 + 0xa] = a3\n 76115: a3 = a2 >> 0x8\n 76118: u8 [a0 + 0x9] = a3\n 76121: u8 [a0 + 0x8] = a2\n 76124: a2 = a1 >> 0x38\n 76127: u8 [a0 + 0x7] = a2\n 76130: a2 = a1 >> 0x30\n 76133: u8 [a0 + 0x6] = a2\n 76136: a2 = a1 >> 0x28\n 76139: u8 [a0 + 0x5] = a2\n 76142: a2 = a1 >> 0x20\n 76145: u8 [a0 + 0x4] = a2\n 76148: a2 = a1 >> 0x18\n 76151: u8 [a0 + 0x3] = a2\n 76154: a2 = a1 >> 0x10\n 76157: u8 [a0 + 0x2] = a2\n 76160: a2 = a1 >> 0x8\n 76163: u8 [a0 + 0x1] = a2\n 76166: u8 [a0] = a1\n 76168: a0 = u64 [sp + 0x30]\n 76171: a1 = u64 [sp + 0xa8]\n 76175: u64 [a0] = a1\n 76177: u64 [a0 + 0x8] = s1\n 76180: u64 [a0 + 0x10] = s0\n 76183: a1 = u64 [sp + 0xa0]\n 76187: u64 [a0 + 0x18] = a1\n 76190: ra = u64 [sp + 0xc0]\n 76194: s0 = u64 [sp + 0xb8]\n 76198: s1 = u64 [sp + 0xb0]\n 76202: sp = sp + 0xc8\n 76206: ret\n      : @949 (gas: 1)\n 76208: trap\n      : @950 (gas: 20)\n 76209: sp = sp + 0xfffffffffffff8e0\n 76213: u64 [sp + 0x718] = ra\n 76217: u64 [sp + 0x710] = s0\n 76221: u64 [sp + 0x708] = s1\n 76225: s0 = sp + 0x720\n 76229: sp = sp & 0xffffffffffffffe0\n 76232: s1 = sp\n 76234: t1 = u64 [a2 + 0x10]\n 76237: t2 = u64 [a2 + 0x18]\n 76240: t0 = u64 [a2 + 0x8]\n 76243: a2 = u64 [a2]\n 76245: u64 [s1 + 0x1b0] = t0\n 76249: u64 [s1 + 0x1a8] = t2\n 76253: t0 = t0 | t2\n 76256: u64 [s1 + 0x1c0] = t1\n 76260: u64 [s1 + 0x1b8] = a2\n 76264: a2 = a2 | t1\n 76267: a2 = a2 | t0\n 76270: u64 [s1 + 0x20] = a0\n 76273: jump @952 if a2 != 0\n      : @951 (gas: 1)\n 76276: jump @1001\n      : @952 (gas: 61)\n 76279: t0 = u64 [s0 + 0x8]\n 76282: a2 = u64 [t0 + 0x18]\n 76285: u64 [s1 + 0x78] = a2\n 76288: a2 = u64 [s0]\n 76290: a0 = u64 [t0 + 0x10]\n 76293: u64 [s1 + 0x48] = a0\n 76296: a0 = u64 [t0 + 0x8]\n 76299: u64 [s1 + 0x50] = a0\n 76302: a0 = u64 [t0]\n 76304: u64 [s1 + 0x58] = a0\n 76307: a0 = u64 [a2 + 0x18]\n 76310: u64 [s1 + 0x60] = a0\n 76313: a0 = u64 [a2 + 0x10]\n 76316: u64 [s1 + 0x68] = a0\n 76319: a0 = u64 [a2 + 0x8]\n 76322: u64 [s1 + 0x70] = a0\n 76325: a0 = u64 [a2]\n 76327: u64 [s1 + 0x80] = a0\n 76331: a0 = u64 [a5 + 0x18]\n 76334: u64 [s1 + 0x1c8] = a0\n 76338: a0 = u64 [a5 + 0x10]\n 76341: u64 [s1 + 0x1d0] = a0\n 76345: a0 = u64 [a5 + 0x8]\n 76348: u64 [s1 + 0x1d8] = a0\n 76352: a0 = u64 [a5]\n 76354: u64 [s1 + 0x1e0] = a0\n 76358: a0 = u64 [a4 + 0x18]\n 76361: u64 [s1 + 0x28] = a0\n 76364: a0 = u64 [a4 + 0x10]\n 76367: u64 [s1 + 0x30] = a0\n 76370: a0 = u64 [a4 + 0x8]\n 76373: u64 [s1 + 0x38] = a0\n 76376: a0 = u64 [a4]\n 76378: u64 [s1 + 0x40] = a0\n 76381: a0 = u64 [a3 + 0x18]\n 76384: u64 [s1 + 0x1e8] = a0\n 76388: a0 = u64 [a3 + 0x10]\n 76391: u64 [s1 + 0x1f0] = a0\n 76395: a0 = u64 [a3 + 0x8]\n 76398: u64 [s1 + 0x1f8] = a0\n 76402: a0 = u64 [a3]\n 76404: u64 [s1 + 0x200] = a0\n 76408: a0 = u64 [a1 + 0x18]\n 76411: u64 [s1 + 0x188] = a0\n 76415: a0 = u64 [a1 + 0x10]\n 76418: u64 [s1 + 0x190] = a0\n 76422: a0 = u64 [a1 + 0x8]\n 76425: u64 [s1 + 0x198] = a0\n 76429: a0 = u64 [a1]\n 76431: u64 [s1 + 0x1a0] = a0\n 76435: a0 = sp + 0xffffffffffffffe0\n 76438: a0 = a0 & 0xffffffffffffffe0\n 76441: u64 [s1 + 0x238] = a0\n 76445: sp = a0\n 76447: u64 [a0 + 24] = 0\n 76450: u64 [a0 + 16] = 0\n 76453: u64 [a0 + 8] = 0\n 76456: u64 [a0 + 0] = 0\n 76458: i32 a0 = a0 + 0\n 76460: ecalli 15 // 'value_transferred'\n 76462: fallthrough\n      : @953 (gas: 21)\n 76463: a1 = u64 [s1 + 0x238]\n 76467: a0 = u64 [a1 + 0x18]\n 76470: t0 = u64 [a1]\n 76472: a2 = u64 [a1 + 0x10]\n 76475: a3 = u64 [a1 + 0x8]\n 76478: a1 = u64 [s1 + 0x1e8]\n 76482: a4 = a0 ^ a1\n 76485: a1 = a0 <u a1\n 76488: a0 = u64 [s1 + 0x1f0]\n 76492: a5 = a2 <u a0\n 76495: a5 = a1 if a4 != 0\n 76498: a1 = u64 [s1 + 0x1f8]\n 76502: t1 = a3 ^ a1\n 76505: a3 = a3 <u a1\n 76508: a1 = u64 [s1 + 0x200]\n 76512: a1 = t0 <u a1\n 76515: a1 = a3 if t1 != 0\n 76518: a0 = a0 ^ a2\n 76521: a0 = a0 | a4\n 76524: a1 = a5 if a0 != 0\n 76527: jump @955 if a1 == 0\n      : @954 (gas: 1)\n 76530: jump @1006\n      : @955 (gas: 8)\n 76533: a0 = u64 [s1 + 0x1d0]\n 76537: a1 = u64 [s1 + 0x1e0]\n 76541: a0 = a0 | a1\n 76544: a1 = u64 [s1 + 0x1c8]\n 76548: a2 = u64 [s1 + 0x1d8]\n 76552: a1 = a1 | a2\n 76555: a0 = a0 | a1\n 76558: jump @957 if a0 != 0\n      : @956 (gas: 1)\n 76561: jump @1011\n      : @957 (gas: 28)\n 76564: a0 = 0x20114\n 76569: u64 [s1 + 0x180] = a0\n 76573: a0 = u32 [0x20114]\n 76578: u64 [s1 + 1464] = 0\n 76582: u64 [s1 + 1456] = 0\n 76586: u64 [s1 + 1448] = 0\n 76590: u64 [s1 + 0x5a0] = a0\n 76594: a0 = u64 [s1 + 0x1c0]\n 76598: u64 [s1 + 0x5d0] = a0\n 76602: a0 = u64 [s1 + 0x1b0]\n 76606: u64 [s1 + 0x5c8] = a0\n 76610: a0 = u64 [s1 + 0x1b8]\n 76614: u64 [s1 + 0x5c0] = a0\n 76618: a0 = u64 [s1 + 0x190]\n 76622: u64 [s1 + 0x5f0] = a0\n 76626: a0 = u64 [s1 + 0x198]\n 76630: u64 [s1 + 0x5e8] = a0\n 76634: a0 = u64 [s1 + 0x1a0]\n 76638: u64 [s1 + 0x5e0] = a0\n 76642: a0 = u64 [s1 + 0x1a8]\n 76646: u64 [s1 + 0x5d8] = a0\n 76650: a0 = s1 + 0x600\n 76654: a1 = s1 + 0x5e0\n 76658: a2 = s1 + 0x5c0\n 76662: a3 = s1 + 0x5a0\n 76666: a4 = u64 [s1 + 0x188]\n 76670: u64 [s1 + 0x5f8] = a4\n 76674: ra = 858, jump @595\n      : @958 [@dyn 429] (gas: 15)\n 76681: a1 = u64 [s1 + 0x618]\n 76685: a3 = u64 [s1 + 0x610]\n 76689: a0 = u64 [s1 + 0x608]\n 76693: a2 = u64 [s1 + 0x600]\n 76697: u64 [s1 + 0x238] = a0\n 76701: u64 [s1 + 0x230] = a1\n 76705: a0 = a0 | a1\n 76708: a1 = a2 | a3\n 76711: a1 = a1 | a0\n 76714: a1 = a1 >> 0x20\n 76717: u64 [s1 + 0x228] = a3\n 76721: a0 = a0 | a3\n 76724: a0 = a0 << 0x20\n 76727: a0 = a0 | a1\n 76730: jump @960 if a0 == 0\n      : @959 (gas: 1)\n 76733: jump @1022\n      : @960 (gas: 5)\n 76736: i32 a0 = a2 + 0\n 76738: a1 = 0x20\n 76741: u64 [s1 + 0x218] = a0\n 76745: u64 [s1 + 0x220] = a2\n 76749: ra = 860, jump @0\n      : @961 [@dyn 430] (gas: 10)\n 76756: a1 = u64 [s1 + 0x230]\n 76760: a2 = u64 [s1 + 0x228]\n 76764: a1 = a1 | a2\n 76767: a2 = 0xffffffe0\n 76777: a3 = u64 [s1 + 0x220]\n 76781: a2 = a3 <u a2\n 76784: a3 = u64 [s1 + 0x238]\n 76788: a2 = 0 if a3 != 0\n 76790: a2 = 0 if a1 != 0\n 76792: jump @963 if a2 != 0\n      : @962 (gas: 1)\n 76795: jump @1022\n      : @963 (gas: 100)\n 76798: a1 = u8 [a0 + 0x19]\n 76801: a2 = u8 [a0 + 0x18]\n 76804: a3 = u8 [a0 + 0x1a]\n 76807: a4 = u8 [a0 + 0x1b]\n 76810: a1 = a1 << 0x8\n 76813: a1 = a1 | a2\n 76816: a3 = a3 << 0x10\n 76819: a4 = a4 << 0x18\n 76822: a3 = a3 | a4\n 76825: a1 = a1 | a3\n 76828: a2 = u8 [a0 + 0x1d]\n 76831: a3 = u8 [a0 + 0x1c]\n 76834: a4 = u8 [a0 + 0x1e]\n 76837: a5 = u8 [a0 + 0x1f]\n 76840: a2 = a2 << 0x8\n 76843: a2 = a2 | a3\n 76846: a4 = a4 << 0x10\n 76849: a5 = a5 << 0x18\n 76852: a4 = a4 | a5\n 76855: a2 = a2 | a4\n 76858: a2 = a2 << 0x20\n 76861: t0 = a2 | a1\n 76864: a2 = u8 [a0 + 0x11]\n 76867: a3 = u8 [a0 + 0x10]\n 76870: a4 = u8 [a0 + 0x12]\n 76873: a5 = u8 [a0 + 0x13]\n 76876: a2 = a2 << 0x8\n 76879: a2 = a2 | a3\n 76882: a4 = a4 << 0x10\n 76885: a5 = a5 << 0x18\n 76888: a4 = a4 | a5\n 76891: a2 = a2 | a4\n 76894: a3 = u8 [a0 + 0x15]\n 76897: a4 = u8 [a0 + 0x14]\n 76900: a5 = u8 [a0 + 0x16]\n 76903: a1 = u8 [a0 + 0x17]\n 76906: a3 = a3 << 0x8\n 76909: a3 = a3 | a4\n 76912: a5 = a5 << 0x10\n 76915: a1 = a1 << 0x18\n 76918: a1 = a1 | a5\n 76921: a1 = a1 | a3\n 76924: a1 = a1 << 0x20\n 76927: t1 = a1 | a2\n 76930: a1 = u8 [a0 + 0x9]\n 76933: a3 = u8 [a0 + 0x8]\n 76936: a4 = u8 [a0 + 0xa]\n 76939: a5 = u8 [a0 + 0xb]\n 76942: a1 = a1 << 0x8\n 76945: a1 = a1 | a3\n 76948: a4 = a4 << 0x10\n 76951: a5 = a5 << 0x18\n 76954: a4 = a4 | a5\n 76957: a1 = a1 | a4\n 76960: a3 = u8 [a0 + 0xd]\n 76963: a4 = u8 [a0 + 0xc]\n 76966: a5 = u8 [a0 + 0xe]\n 76969: a2 = u8 [a0 + 0xf]\n 76972: a3 = a3 << 0x8\n 76975: a3 = a3 | a4\n 76978: a5 = a5 << 0x10\n 76981: a2 = a2 << 0x18\n 76984: a2 = a2 | a5\n 76987: a2 = a2 | a3\n 76990: a2 = a2 << 0x20\n 76993: a3 = a2 | a1\n 76996: a1 = u8 [a0 + 0x1]\n 76999: a2 = u8 [a0]\n 77001: a4 = u8 [a0 + 0x2]\n 77004: a5 = u8 [a0 + 0x3]\n 77007: a1 = a1 << 0x8\n 77010: a1 = a1 | a2\n 77013: a4 = a4 << 0x10\n 77016: a5 = a5 << 0x18\n 77019: a4 = a4 | a5\n 77022: a1 = a1 | a4\n 77025: a2 = u8 [a0 + 0x5]\n 77028: a4 = u8 [a0 + 0x4]\n 77031: a5 = u8 [a0 + 0x6]\n 77034: a0 = u8 [a0 + 0x7]\n 77037: a2 = a2 << 0x8\n 77040: a2 = a2 | a4\n 77043: a5 = a5 << 0x10\n 77046: a0 = a0 << 0x18\n 77049: a0 = a0 | a5\n 77052: a0 = a0 | a2\n 77055: a0 = a0 << 0x20\n 77058: a0 = a0 | a1\n 77061: a0 = reverse a0\n 77063: a2 = reverse a3\n 77065: a3 = reverse t1\n 77067: a1 = reverse t0\n 77069: a4 = a1 | a2\n 77072: a0 = a0 | a3\n 77075: a4 = a4 | a0\n 77078: a4 = a4 >> 0x20\n 77081: a0 = a0 | a2\n 77084: a0 = a0 << 0x20\n 77087: a0 = a0 | a4\n 77090: jump @965 if a0 == 0\n      : @964 (gas: 1)\n 77093: jump @1022\n      : @965 (gas: 5)\n 77096: a0 = u64 [s1 + 0x218]\n 77100: i32 a0 = a0 + 0x20\n 77103: i32 a1 = a1 + 0\n 77105: u64 [s1 + 0x238] = a1\n 77109: ra = 862, jump @0\n      : @966 [@dyn 431] (gas: 20)\n 77116: a1 = sp + 0xffffffffffffffe0\n 77119: a1 = a1 & 0xffffffffffffffe0\n 77122: u64 [s1 + 0x228] = a1\n 77126: sp = a1\n 77128: i32 a0 = a0 + 0\n 77130: i32 a2 = a1 + 0\n 77132: a1 = u64 [s1 + 0x238]\n 77136: ecalli 8 // 'hash_keccak_256'\n 77138: a1 = u64 [s1 + 0x228]\n 77142: a0 = u64 [a1 + 0x18]\n 77145: u64 [s1 + 0x230] = a0\n 77149: a0 = u64 [a1 + 0x10]\n 77152: u64 [s1 + 0x218] = a0\n 77156: a0 = u64 [a1 + 0x8]\n 77159: u64 [s1 + 0x220] = a0\n 77163: a0 = u64 [a1]\n 77165: u64 [s1 + 0x228] = a0\n 77169: a1 = 0x20\n 77172: a0 = 0\n 77174: ra = 864, jump @0\n      : @967 [@dyn 432] (gas: 95)\n 77181: a2 = u64 [s1 + 0x230]\n 77185: a1 = a2 >> 0x38\n 77188: u64 [s1 + 0x160] = a1\n 77192: u8 [a0 + 0x1f] = a1\n 77195: a1 = a2 >> 0x30\n 77198: u64 [s1 + 0x158] = a1\n 77202: u8 [a0 + 0x1e] = a1\n 77205: a1 = a2 >> 0x28\n 77208: u64 [s1 + 0x150] = a1\n 77212: u8 [a0 + 0x1d] = a1\n 77215: a1 = a2 >> 0x20\n 77218: u64 [s1 + 0x148] = a1\n 77222: u8 [a0 + 0x1c] = a1\n 77225: a1 = a2 >> 0x18\n 77228: u64 [s1 + 0x140] = a1\n 77232: u8 [a0 + 0x1b] = a1\n 77235: a1 = a2 >> 0x10\n 77238: u64 [s1 + 0x138] = a1\n 77242: u8 [a0 + 0x1a] = a1\n 77245: a1 = a2 >> 0x8\n 77248: u64 [s1 + 0x130] = a1\n 77252: u8 [a0 + 0x19] = a1\n 77255: u8 [a0 + 0x18] = a2\n 77258: a2 = u64 [s1 + 0x218]\n 77262: a1 = a2 >> 0x38\n 77265: u64 [s1 + 0x128] = a1\n 77269: u8 [a0 + 0x17] = a1\n 77272: a1 = a2 >> 0x30\n 77275: u64 [s1 + 0x120] = a1\n 77279: u8 [a0 + 0x16] = a1\n 77282: a1 = a2 >> 0x28\n 77285: u64 [s1 + 0x118] = a1\n 77289: u8 [a0 + 0x15] = a1\n 77292: a1 = a2 >> 0x20\n 77295: u64 [s1 + 0x110] = a1\n 77299: u8 [a0 + 0x14] = a1\n 77302: a1 = a2 >> 0x18\n 77305: u64 [s1 + 0x108] = a1\n 77309: u8 [a0 + 0x13] = a1\n 77312: a1 = a2 >> 0x10\n 77315: u64 [s1 + 0x100] = a1\n 77319: u8 [a0 + 0x12] = a1\n 77322: a1 = a2 >> 0x8\n 77325: u64 [s1 + 0xf8] = a1\n 77329: u8 [a0 + 0x11] = a1\n 77332: u8 [a0 + 0x10] = a2\n 77335: a2 = u64 [s1 + 0x220]\n 77339: a1 = a2 >> 0x38\n 77342: u64 [s1 + 0xf0] = a1\n 77346: u8 [a0 + 0xf] = a1\n 77349: a1 = a2 >> 0x30\n 77352: u64 [s1 + 0xe8] = a1\n 77356: u8 [a0 + 0xe] = a1\n 77359: a1 = a2 >> 0x28\n 77362: u64 [s1 + 0xe0] = a1\n 77366: u8 [a0 + 0xd] = a1\n 77369: a1 = a2 >> 0x20\n 77372: u64 [s1 + 0xd8] = a1\n 77376: u8 [a0 + 0xc] = a1\n 77379: a1 = a2 >> 0x18\n 77382: u64 [s1 + 0xd0] = a1\n 77386: u8 [a0 + 0xb] = a1\n 77389: a1 = a2 >> 0x10\n 77392: u64 [s1 + 0xc8] = a1\n 77396: u8 [a0 + 0xa] = a1\n 77399: a1 = a2 >> 0x8\n 77402: u64 [s1 + 0xc0] = a1\n 77406: u8 [a0 + 0x9] = a1\n 77409: u8 [a0 + 0x8] = a2\n 77412: a2 = u64 [s1 + 0x228]\n 77416: a1 = a2 >> 0x38\n 77419: u64 [s1 + 0xb8] = a1\n 77423: u8 [a0 + 0x7] = a1\n 77426: a1 = a2 >> 0x30\n 77429: u64 [s1 + 0xb0] = a1\n 77433: u8 [a0 + 0x6] = a1\n 77436: a1 = a2 >> 0x28\n 77439: u64 [s1 + 0xa8] = a1\n 77443: u8 [a0 + 0x5] = a1\n 77446: a1 = a2 >> 0x20\n 77449: u64 [s1 + 0xa0] = a1\n 77453: u8 [a0 + 0x4] = a1\n 77456: a1 = a2 >> 0x18\n 77459: u64 [s1 + 0x98] = a1\n 77463: u8 [a0 + 0x3] = a1\n 77466: a1 = a2 >> 0x10\n 77469: u64 [s1 + 0x90] = a1\n 77473: u8 [a0 + 0x2] = a1\n 77476: a1 = a2 >> 0x8\n 77479: u64 [s1 + 0x88] = a1\n 77483: u8 [a0 + 0x1] = a1\n 77486: u8 [a0] = a2\n 77488: a0 = 0x20\n 77491: a1 = 0x20\n 77494: ra = 866, jump @0\n      : @968 [@dyn 433] (gas: 35)\n 77501: u8 [a0 + 31] = 0\n 77504: u8 [a0 + 30] = 0\n 77507: u8 [a0 + 29] = 0\n 77510: u8 [a0 + 28] = 0\n 77513: u8 [a0 + 27] = 0\n 77516: u8 [a0 + 26] = 0\n 77519: u8 [a0 + 25] = 0\n 77522: u8 [a0 + 24] = 0\n 77525: u8 [a0 + 23] = 0\n 77528: u8 [a0 + 22] = 0\n 77531: u8 [a0 + 21] = 0\n 77534: u8 [a0 + 20] = 0\n 77537: u8 [a0 + 19] = 0\n 77540: u8 [a0 + 18] = 0\n 77543: u8 [a0 + 17] = 0\n 77546: u8 [a0 + 16] = 0\n 77549: u8 [a0 + 15] = 0\n 77552: u8 [a0 + 14] = 0\n 77555: u8 [a0 + 13] = 0\n 77558: u8 [a0 + 12] = 0\n 77561: u8 [a0 + 11] = 0\n 77564: u8 [a0 + 10] = 0\n 77567: u8 [a0 + 9] = 0\n 77570: u8 [a0 + 8] = 0\n 77573: u8 [a0 + 7] = 0\n 77576: u8 [a0 + 6] = 0\n 77579: u8 [a0 + 5] = 0\n 77582: u8 [a0 + 4] = 0\n 77585: u8 [a0 + 3] = 0\n 77588: u8 [a0 + 2] = 0\n 77591: u8 [a0 + 1] = 0\n 77594: u8 [a0 + 0] = 0\n 77596: a1 = 0x40\n 77599: a0 = 0\n 77601: ra = 868, jump @0\n      : @969 [@dyn 434] (gas: 28)\n 77608: i32 a0 = a0 + 0\n 77610: i32 a2 = s1 + 0x6a0\n 77614: a1 = 0x40\n 77617: ecalli 8 // 'hash_keccak_256'\n 77619: a0 = u64 [s1 + 0x6b8]\n 77623: a1 = u64 [s1 + 0x6b0]\n 77627: a2 = u64 [s1 + 0x6a8]\n 77631: a3 = u64 [s1 + 0x6a0]\n 77635: a0 = reverse a0\n 77637: a1 = reverse a1\n 77639: a2 = reverse a2\n 77641: a3 = reverse a3\n 77643: u64 [s1 + 0x698] = a3\n 77647: u64 [s1 + 0x690] = a2\n 77651: u64 [s1 + 0x688] = a1\n 77655: u64 [s1 + 0x680] = a0\n 77659: u64 [s1 + 1720] = 0\n 77663: u64 [s1 + 1712] = 0\n 77667: u64 [s1 + 1704] = 0\n 77671: u64 [s1 + 1696] = 0\n 77675: u32 [s1 + 1632] = 0x20\n 77680: i32 a1 = s1 + 0x680\n 77684: i32 a3 = s1 + 0x6a0\n 77688: i32 a4 = s1 + 0x660\n 77692: a2 = 0xffffffffffffffff\n 77695: a0 = 0\n 77697: ecalli 7 // 'get_storage'\n 77699: fallthrough\n      : @970 (gas: 6)\n 77700: a0 = u64 [s1 + 0x6a0]\n 77704: a1 = u32 [s1 + 0x6b0]\n 77708: a2 = u64 [s1 + 0x6a8]\n 77712: a0 = a0 | a1\n 77715: a0 = a0 | a2\n 77718: jump @972 if a0 == 0\n      : @971 (gas: 1)\n 77721: jump @1016\n      : @972 (gas: 15)\n 77724: i32 a0 = s1 + 0x620\n 77728: ecalli 5 // 'caller'\n 77730: a0 = u32 [s1 + 0x630]\n 77734: u64 [s1 + 0x208] = a0\n 77738: a0 = u64 [s1 + 0x628]\n 77742: u64 [s1 + 0x18] = a0\n 77745: a0 = u64 [s1 + 0x620]\n 77749: u64 [s1 + 0x178] = a0\n 77753: u64 [s1 + 1336] = 0\n 77757: u64 [s1 + 1328] = 0\n 77761: u64 [s1 + 1312] = 0x80\n 77767: a0 = s1 + 0x540\n 77771: a1 = s1 + 0x520\n 77775: u64 [s1 + 1320] = 0\n 77779: ra = 870, jump @571\n      : @973 [@dyn 435] (gas: 16)\n 77786: a2 = u64 [s1 + 0x558]\n 77790: a3 = u64 [s1 + 0x550]\n 77794: a0 = u64 [s1 + 0x548]\n 77798: a1 = u64 [s1 + 0x540]\n 77802: u64 [s1 + 0x210] = a0\n 77806: u64 [s1 + 0x168] = a2\n 77810: a0 = a0 | a2\n 77813: u64 [s1 + 0x238] = a1\n 77817: a1 = a1 | a3\n 77820: a1 = a1 | a0\n 77823: a1 = a1 >> 0x20\n 77826: u64 [s1 + 0x170] = a3\n 77830: a0 = a0 | a3\n 77833: a0 = a0 << 0x20\n 77836: a0 = a0 | a1\n 77839: jump @975 if a0 == 0\n      : @974 (gas: 1)\n 77842: jump @1022\n      : @975 (gas: 18)\n 77845: a0 = u64 [s1 + 0x178]\n 77849: a0 = reverse a0\n 77851: a0 = a0 << 0x20\n 77854: a1 = u64 [s1 + 0x18]\n 77857: a1 = reverse a1\n 77859: a2 = a1 >> 0x20\n 77862: a0 = a0 | a2\n 77865: u64 [s1 + 0x18] = a0\n 77868: a1 = a1 << 0x20\n 77871: a0 = u64 [s1 + 0x208]\n 77875: a0 = reverse a0\n 77877: a0 = a0 >> 0x20\n 77880: a0 = a0 | a1\n 77883: u64 [s1 + 0x10] = a0\n 77886: a0 = i32 [s1 + 0x238]\n 77890: a1 = 0x20\n 77893: u64 [s1 + 0x208] = a0\n 77897: ra = 872, jump @0\n      : @976 [@dyn 436] (gas: 67)\n 77904: a1 = u64 [s1 + 0x10]\n 77907: a1 = reverse a1\n 77909: a2 = u64 [s1 + 0x18]\n 77912: a2 = reverse a2\n 77914: a4 = u64 [s1 + 0x178]\n 77918: a3 = a4 >> 0x18\n 77921: u8 [a0 + 0xf] = a3\n 77924: a3 = a4 >> 0x10\n 77927: u8 [a0 + 0xe] = a3\n 77930: a3 = a4 >> 0x8\n 77933: u8 [a0 + 0xd] = a3\n 77936: u8 [a0 + 0xc] = a4\n 77939: u8 [a0 + 11] = 0\n 77942: u8 [a0 + 10] = 0\n 77945: u8 [a0 + 9] = 0\n 77948: u8 [a0 + 8] = 0\n 77951: u8 [a0 + 7] = 0\n 77954: u8 [a0 + 6] = 0\n 77957: u8 [a0 + 5] = 0\n 77960: u8 [a0 + 4] = 0\n 77963: u8 [a0 + 3] = 0\n 77966: u8 [a0 + 2] = 0\n 77969: u8 [a0 + 1] = 0\n 77972: u8 [a0 + 0] = 0\n 77974: u8 [a0 + 0x10] = a2\n 77977: u8 [a0 + 0x18] = a1\n 77980: a3 = a2 >> 0x38\n 77983: u8 [a0 + 0x17] = a3\n 77986: a3 = a2 >> 0x30\n 77989: u8 [a0 + 0x16] = a3\n 77992: a3 = a2 >> 0x28\n 77995: u8 [a0 + 0x15] = a3\n 77998: a3 = a2 >> 0x20\n 78001: u8 [a0 + 0x14] = a3\n 78004: a3 = a2 >> 0x18\n 78007: u8 [a0 + 0x13] = a3\n 78010: a3 = a2 >> 0x10\n 78013: u8 [a0 + 0x12] = a3\n 78016: a2 = a2 >> 0x8\n 78019: u8 [a0 + 0x11] = a2\n 78022: a2 = a1 >> 0x38\n 78025: u8 [a0 + 0x1f] = a2\n 78028: a2 = a1 >> 0x30\n 78031: u8 [a0 + 0x1e] = a2\n 78034: a2 = a1 >> 0x28\n 78037: u8 [a0 + 0x1d] = a2\n 78040: a2 = a1 >> 0x20\n 78043: u8 [a0 + 0x1c] = a2\n 78046: a2 = a1 >> 0x18\n 78049: u8 [a0 + 0x1b] = a2\n 78052: a2 = a1 >> 0x10\n 78055: u8 [a0 + 0x1a] = a2\n 78058: a1 = a1 >> 0x8\n 78061: a2 = u64 [s1 + 0x168]\n 78065: a4 = u64 [s1 + 0x170]\n 78069: a4 = a4 | a2\n 78072: a2 = 0x100000000\n 78082: u64 [s1 + 0x18] = a2\n 78085: a2 = 0xffffffe0\n 78095: a3 = u64 [s1 + 0x238]\n 78099: a2 = a3 <u a2\n 78102: a3 = u64 [s1 + 0x210]\n 78106: a2 = 0 if a3 != 0\n 78108: u64 [s1 + 0x178] = a4\n 78112: a2 = 0 if a4 != 0\n 78114: u8 [a0 + 0x19] = a1\n 78117: jump @978 if a2 != 0\n      : @977 (gas: 1)\n 78120: jump @1022\n      : @978 (gas: 4)\n 78123: a0 = u64 [s1 + 0x208]\n 78127: i32 a0 = a0 + 0x20\n 78130: a1 = 0x20\n 78133: ra = 874, jump @0\n      : @979 [@dyn 437] (gas: 95)\n 78140: a1 = u64 [s1 + 0x1e8]\n 78144: a1 = reverse a1\n 78146: a2 = u64 [s1 + 0x1f0]\n 78150: a2 = reverse a2\n 78152: a3 = u64 [s1 + 0x1f8]\n 78156: a3 = reverse a3\n 78158: a4 = u64 [s1 + 0x200]\n 78162: a4 = reverse a4\n 78164: a5 = a4 >> 0x38\n 78167: u8 [a0 + 0x1f] = a5\n 78170: a5 = a4 >> 0x30\n 78173: u8 [a0 + 0x1e] = a5\n 78176: a5 = a4 >> 0x28\n 78179: u8 [a0 + 0x1d] = a5\n 78182: a5 = a4 >> 0x20\n 78185: u8 [a0 + 0x1c] = a5\n 78188: a5 = a4 >> 0x18\n 78191: u8 [a0 + 0x1b] = a5\n 78194: a5 = a4 >> 0x10\n 78197: u8 [a0 + 0x1a] = a5\n 78200: a5 = a4 >> 0x8\n 78203: u8 [a0 + 0x19] = a5\n 78206: u8 [a0 + 0x18] = a4\n 78209: u8 [a0 + 0x10] = a3\n 78212: a4 = a3 >> 0x38\n 78215: u8 [a0 + 0x17] = a4\n 78218: a4 = a3 >> 0x30\n 78221: u8 [a0 + 0x16] = a4\n 78224: a4 = a3 >> 0x28\n 78227: u8 [a0 + 0x15] = a4\n 78230: a4 = a3 >> 0x20\n 78233: u8 [a0 + 0x14] = a4\n 78236: a4 = a3 >> 0x18\n 78239: u8 [a0 + 0x13] = a4\n 78242: a4 = a3 >> 0x10\n 78245: u8 [a0 + 0x12] = a4\n 78248: a3 = a3 >> 0x8\n 78251: u8 [a0 + 0x11] = a3\n 78254: u8 [a0 + 0x8] = a2\n 78257: a3 = a2 >> 0x38\n 78260: u8 [a0 + 0xf] = a3\n 78263: a3 = a2 >> 0x30\n 78266: u8 [a0 + 0xe] = a3\n 78269: a3 = a2 >> 0x28\n 78272: u8 [a0 + 0xd] = a3\n 78275: a3 = a2 >> 0x20\n 78278: u8 [a0 + 0xc] = a3\n 78281: a3 = a2 >> 0x18\n 78284: u8 [a0 + 0xb] = a3\n 78287: a3 = a2 >> 0x10\n 78290: u8 [a0 + 0xa] = a3\n 78293: a2 = a2 >> 0x8\n 78296: u8 [a0 + 0x9] = a2\n 78299: u8 [a0] = a1\n 78301: a2 = a1 >> 0x38\n 78304: u8 [a0 + 0x7] = a2\n 78307: a2 = a1 >> 0x30\n 78310: u8 [a0 + 0x6] = a2\n 78313: a2 = a1 >> 0x28\n 78316: a3 = a1 >> 0x18\n 78319: u8 [a0 + 0x3] = a3\n 78322: a3 = a1 >> 0x10\n 78325: u8 [a0 + 0x2] = a3\n 78328: a3 = a1 >> 0x8\n 78331: u8 [a0 + 0x1] = a3\n 78334: a3 = u64 [s1 + 0x180]\n 78338: a3 = u32 [a3]\n 78340: u8 [a0 + 0x5] = a2\n 78343: a1 = a1 >> 0x20\n 78346: u8 [a0 + 0x4] = a1\n 78349: u64 [s1 + 1208] = 0\n 78353: u64 [s1 + 1200] = 0\n 78357: u64 [s1 + 1192] = 0\n 78361: u64 [s1 + 0x4a0] = a3\n 78365: a0 = u64 [s1 + 0x78]\n 78368: u64 [s1 + 0x4d8] = a0\n 78372: a0 = u64 [s1 + 0x48]\n 78375: u64 [s1 + 0x4d0] = a0\n 78379: a0 = u64 [s1 + 0x50]\n 78382: u64 [s1 + 0x4c8] = a0\n 78386: a0 = u64 [s1 + 0x58]\n 78389: u64 [s1 + 0x4c0] = a0\n 78393: a0 = u64 [s1 + 0x60]\n 78396: u64 [s1 + 0x4f8] = a0\n 78400: a0 = u64 [s1 + 0x68]\n 78403: u64 [s1 + 0x4f0] = a0\n 78407: a0 = u64 [s1 + 0x70]\n 78410: u64 [s1 + 0x4e8] = a0\n 78414: a0 = s1 + 0x500\n 78418: a1 = s1 + 0x4e0\n 78422: a2 = s1 + 0x4c0\n 78426: a3 = s1 + 0x4a0\n 78430: a4 = u64 [s1 + 0x80]\n 78434: u64 [s1 + 0x4e0] = a4\n 78438: ra = 876, jump @595\n      : @980 [@dyn 438] (gas: 9)\n 78445: a0 = u64 [s1 + 0x18]\n 78448: a0 = a0 + 0xffffffffffffffc0\n 78451: a1 = u64 [s1 + 0x238]\n 78455: a0 = a1 <u a0\n 78458: a1 = u64 [s1 + 0x210]\n 78462: a0 = 0 if a1 != 0\n 78464: a1 = u64 [s1 + 0x178]\n 78468: a0 = 0 if a1 != 0\n 78470: jump @982 if a0 != 0\n      : @981 (gas: 1)\n 78473: jump @1022\n      : @982 (gas: 12)\n 78476: a0 = u64 [s1 + 0x518]\n 78480: u64 [s1 + 0x1e8] = a0\n 78484: a0 = u64 [s1 + 0x510]\n 78488: u64 [s1 + 0x1f0] = a0\n 78492: a0 = u64 [s1 + 0x508]\n 78496: u64 [s1 + 0x1f8] = a0\n 78500: a0 = u64 [s1 + 0x500]\n 78504: u64 [s1 + 0x200] = a0\n 78508: a0 = u64 [s1 + 0x208]\n 78512: i32 a0 = a0 + 0x40\n 78515: a1 = 0x20\n 78518: ra = 878, jump @0\n      : @983 [@dyn 439] (gas: 95)\n 78525: a1 = u64 [s1 + 0x1e8]\n 78529: a1 = reverse a1\n 78531: a2 = u64 [s1 + 0x1f0]\n 78535: a2 = reverse a2\n 78537: a3 = u64 [s1 + 0x1f8]\n 78541: a3 = reverse a3\n 78543: a4 = u64 [s1 + 0x200]\n 78547: a4 = reverse a4\n 78549: a5 = a4 >> 0x38\n 78552: u8 [a0 + 0x1f] = a5\n 78555: a5 = a4 >> 0x30\n 78558: u8 [a0 + 0x1e] = a5\n 78561: a5 = a4 >> 0x28\n 78564: u8 [a0 + 0x1d] = a5\n 78567: a5 = a4 >> 0x20\n 78570: u8 [a0 + 0x1c] = a5\n 78573: a5 = a4 >> 0x18\n 78576: u8 [a0 + 0x1b] = a5\n 78579: a5 = a4 >> 0x10\n 78582: u8 [a0 + 0x1a] = a5\n 78585: a5 = a4 >> 0x8\n 78588: u8 [a0 + 0x19] = a5\n 78591: u8 [a0 + 0x18] = a4\n 78594: u8 [a0 + 0x10] = a3\n 78597: a4 = a3 >> 0x38\n 78600: u8 [a0 + 0x17] = a4\n 78603: a4 = a3 >> 0x30\n 78606: u8 [a0 + 0x16] = a4\n 78609: a4 = a3 >> 0x28\n 78612: u8 [a0 + 0x15] = a4\n 78615: a4 = a3 >> 0x20\n 78618: u8 [a0 + 0x14] = a4\n 78621: a4 = a3 >> 0x18\n 78624: u8 [a0 + 0x13] = a4\n 78627: a4 = a3 >> 0x10\n 78630: u8 [a0 + 0x12] = a4\n 78633: a3 = a3 >> 0x8\n 78636: u8 [a0 + 0x11] = a3\n 78639: u8 [a0 + 0x8] = a2\n 78642: a3 = a2 >> 0x38\n 78645: u8 [a0 + 0xf] = a3\n 78648: a3 = a2 >> 0x30\n 78651: u8 [a0 + 0xe] = a3\n 78654: a3 = a2 >> 0x28\n 78657: u8 [a0 + 0xd] = a3\n 78660: a3 = a2 >> 0x20\n 78663: u8 [a0 + 0xc] = a3\n 78666: a3 = a2 >> 0x18\n 78669: u8 [a0 + 0xb] = a3\n 78672: a3 = a2 >> 0x10\n 78675: u8 [a0 + 0xa] = a3\n 78678: a2 = a2 >> 0x8\n 78681: u8 [a0 + 0x9] = a2\n 78684: u8 [a0] = a1\n 78686: a2 = a1 >> 0x38\n 78689: u8 [a0 + 0x7] = a2\n 78692: a2 = a1 >> 0x30\n 78695: u8 [a0 + 0x6] = a2\n 78698: a2 = a1 >> 0x28\n 78701: a3 = a1 >> 0x18\n 78704: u8 [a0 + 0x3] = a3\n 78707: a3 = a1 >> 0x10\n 78710: u8 [a0 + 0x2] = a3\n 78713: a3 = a1 >> 0x8\n 78716: u8 [a0 + 0x1] = a3\n 78719: a3 = u64 [s1 + 0x180]\n 78723: a3 = u32 [a3]\n 78725: u8 [a0 + 0x5] = a2\n 78728: a1 = a1 >> 0x20\n 78731: u8 [a0 + 0x4] = a1\n 78734: u64 [s1 + 1080] = 0\n 78738: u64 [s1 + 1072] = 0\n 78742: u64 [s1 + 1064] = 0\n 78746: u64 [s1 + 0x420] = a3\n 78750: a0 = u64 [s1 + 0x1c8]\n 78754: u64 [s1 + 0x458] = a0\n 78758: a0 = u64 [s1 + 0x1d0]\n 78762: u64 [s1 + 0x450] = a0\n 78766: a0 = u64 [s1 + 0x1d8]\n 78770: u64 [s1 + 0x448] = a0\n 78774: a0 = u64 [s1 + 0x1e0]\n 78778: u64 [s1 + 0x440] = a0\n 78782: a0 = u64 [s1 + 0x28]\n 78785: u64 [s1 + 0x478] = a0\n 78789: a0 = u64 [s1 + 0x30]\n 78792: u64 [s1 + 0x470] = a0\n 78796: a0 = u64 [s1 + 0x38]\n 78799: u64 [s1 + 0x468] = a0\n 78803: a0 = s1 + 0x480\n 78807: a1 = s1 + 0x460\n 78811: a2 = s1 + 0x440\n 78815: a3 = s1 + 0x420\n 78819: a4 = u64 [s1 + 0x40]\n 78822: u64 [s1 + 0x460] = a4\n 78826: ra = 880, jump @595\n      : @984 [@dyn 440] (gas: 8)\n 78833: a0 = 0xffffffa0\n 78843: a1 = u64 [s1 + 0x238]\n 78847: a0 = a1 <u a0\n 78850: a1 = u64 [s1 + 0x210]\n 78854: a0 = 0 if a1 != 0\n 78856: a1 = u64 [s1 + 0x178]\n 78860: a0 = 0 if a1 != 0\n 78862: jump @986 if a0 != 0\n      : @985 (gas: 1)\n 78865: jump @1022\n      : @986 (gas: 24)\n 78868: a0 = u64 [s1 + 0x228]\n 78872: a0 = reverse a0\n 78874: u64 [s1 + 0x1f8] = a0\n 78878: a0 = u64 [s1 + 0x220]\n 78882: a0 = reverse a0\n 78884: u64 [s1 + 0x200] = a0\n 78888: a0 = u64 [s1 + 0x498]\n 78892: u64 [s1 + 0x1c8] = a0\n 78896: a0 = u64 [s1 + 0x490]\n 78900: u64 [s1 + 0x1d0] = a0\n 78904: a0 = u64 [s1 + 0x488]\n 78908: u64 [s1 + 0x1d8] = a0\n 78912: a0 = u64 [s1 + 0x480]\n 78916: u64 [s1 + 0x1e0] = a0\n 78920: a0 = u64 [s1 + 0x218]\n 78924: a0 = reverse a0\n 78926: u64 [s1 + 0x1e8] = a0\n 78930: a0 = u64 [s1 + 0x230]\n 78934: a0 = reverse a0\n 78936: u64 [s1 + 0x1f0] = a0\n 78940: a0 = u64 [s1 + 0x208]\n 78944: i32 a0 = a0 + 0x60\n 78947: a1 = 0x20\n 78950: ra = 882, jump @0\n      : @987 [@dyn 441] (gas: 71)\n 78957: a1 = u64 [s1 + 0x1c8]\n 78961: a1 = reverse a1\n 78963: a2 = u64 [s1 + 0x1d0]\n 78967: a2 = reverse a2\n 78969: a3 = u64 [s1 + 0x1d8]\n 78973: a3 = reverse a3\n 78975: a4 = u64 [s1 + 0x1e0]\n 78979: a4 = reverse a4\n 78981: a5 = a4 >> 0x38\n 78984: u8 [a0 + 0x1f] = a5\n 78987: a5 = a4 >> 0x30\n 78990: u8 [a0 + 0x1e] = a5\n 78993: a5 = a4 >> 0x28\n 78996: u8 [a0 + 0x1d] = a5\n 78999: a5 = a4 >> 0x20\n 79002: u8 [a0 + 0x1c] = a5\n 79005: a5 = a4 >> 0x18\n 79008: u8 [a0 + 0x1b] = a5\n 79011: a5 = a4 >> 0x10\n 79014: u8 [a0 + 0x1a] = a5\n 79017: a5 = a4 >> 0x8\n 79020: u8 [a0 + 0x19] = a5\n 79023: u8 [a0 + 0x18] = a4\n 79026: u8 [a0 + 0x10] = a3\n 79029: a4 = a3 >> 0x38\n 79032: u8 [a0 + 0x17] = a4\n 79035: a4 = a3 >> 0x30\n 79038: u8 [a0 + 0x16] = a4\n 79041: a4 = a3 >> 0x28\n 79044: u8 [a0 + 0x15] = a4\n 79047: a4 = a3 >> 0x20\n 79050: u8 [a0 + 0x14] = a4\n 79053: a4 = a3 >> 0x18\n 79056: u8 [a0 + 0x13] = a4\n 79059: a4 = a3 >> 0x10\n 79062: u8 [a0 + 0x12] = a4\n 79065: a3 = a3 >> 0x8\n 79068: u8 [a0 + 0x11] = a3\n 79071: u8 [a0 + 0x8] = a2\n 79074: a3 = a2 >> 0x38\n 79077: u8 [a0 + 0xf] = a3\n 79080: a3 = a2 >> 0x30\n 79083: u8 [a0 + 0xe] = a3\n 79086: a3 = a2 >> 0x28\n 79089: u8 [a0 + 0xd] = a3\n 79092: a3 = a2 >> 0x20\n 79095: u8 [a0 + 0xc] = a3\n 79098: a3 = a2 >> 0x18\n 79101: u8 [a0 + 0xb] = a3\n 79104: a3 = a2 >> 0x10\n 79107: u8 [a0 + 0xa] = a3\n 79110: a2 = a2 >> 0x8\n 79113: u8 [a0 + 0x9] = a2\n 79116: u8 [a0] = a1\n 79118: a2 = a1 >> 0x38\n 79121: u8 [a0 + 0x7] = a2\n 79124: a2 = a1 >> 0x30\n 79127: u8 [a0 + 0x6] = a2\n 79130: a2 = a1 >> 0x28\n 79133: u8 [a0 + 0x5] = a2\n 79136: a2 = a1 >> 0x20\n 79139: u8 [a0 + 0x4] = a2\n 79142: a2 = a1 >> 0x18\n 79145: u8 [a0 + 0x3] = a2\n 79148: a2 = a1 >> 0x10\n 79151: u8 [a0 + 0x2] = a2\n 79154: a1 = a1 >> 0x8\n 79157: u8 [a0 + 0x1] = a1\n 79160: a1 = 0x20\n 79163: a0 = 0\n 79165: ra = 884, jump @0\n      : @988 [@dyn 442] (gas: 67)\n 79172: a1 = u64 [s1 + 0x160]\n 79176: u8 [a0 + 0x1f] = a1\n 79179: a1 = u64 [s1 + 0x158]\n 79183: u8 [a0 + 0x1e] = a1\n 79186: a1 = u64 [s1 + 0x150]\n 79190: u8 [a0 + 0x1d] = a1\n 79193: a1 = u64 [s1 + 0x148]\n 79197: u8 [a0 + 0x1c] = a1\n 79200: a1 = u64 [s1 + 0x140]\n 79204: u8 [a0 + 0x1b] = a1\n 79207: a1 = u64 [s1 + 0x138]\n 79211: u8 [a0 + 0x1a] = a1\n 79214: a1 = u64 [s1 + 0x130]\n 79218: u8 [a0 + 0x19] = a1\n 79221: a1 = u64 [s1 + 0x230]\n 79225: u8 [a0 + 0x18] = a1\n 79228: a1 = u64 [s1 + 0x128]\n 79232: u8 [a0 + 0x17] = a1\n 79235: a1 = u64 [s1 + 0x120]\n 79239: u8 [a0 + 0x16] = a1\n 79242: a1 = u64 [s1 + 0x118]\n 79246: u8 [a0 + 0x15] = a1\n 79249: a1 = u64 [s1 + 0x110]\n 79253: u8 [a0 + 0x14] = a1\n 79256: a1 = u64 [s1 + 0x108]\n 79260: u8 [a0 + 0x13] = a1\n 79263: a1 = u64 [s1 + 0x100]\n 79267: u8 [a0 + 0x12] = a1\n 79270: a1 = u64 [s1 + 0xf8]\n 79274: u8 [a0 + 0x11] = a1\n 79277: a1 = u64 [s1 + 0x218]\n 79281: u8 [a0 + 0x10] = a1\n 79284: a1 = u64 [s1 + 0xf0]\n 79288: u8 [a0 + 0xf] = a1\n 79291: a1 = u64 [s1 + 0xe8]\n 79295: u8 [a0 + 0xe] = a1\n 79298: a1 = u64 [s1 + 0xe0]\n 79302: u8 [a0 + 0xd] = a1\n 79305: a1 = u64 [s1 + 0xd8]\n 79309: u8 [a0 + 0xc] = a1\n 79312: a1 = u64 [s1 + 0xd0]\n 79316: u8 [a0 + 0xb] = a1\n 79319: a1 = u64 [s1 + 0xc8]\n 79323: u8 [a0 + 0xa] = a1\n 79326: a1 = u64 [s1 + 0xc0]\n 79330: u8 [a0 + 0x9] = a1\n 79333: a1 = u64 [s1 + 0x220]\n 79337: u8 [a0 + 0x8] = a1\n 79340: a1 = u64 [s1 + 0xb8]\n 79344: u8 [a0 + 0x7] = a1\n 79347: a1 = u64 [s1 + 0xb0]\n 79351: u8 [a0 + 0x6] = a1\n 79354: a1 = u64 [s1 + 0xa8]\n 79358: u8 [a0 + 0x5] = a1\n 79361: a1 = u64 [s1 + 0xa0]\n 79365: u8 [a0 + 0x4] = a1\n 79368: a1 = u64 [s1 + 0x98]\n 79372: u8 [a0 + 0x3] = a1\n 79375: a1 = u64 [s1 + 0x90]\n 79379: u8 [a0 + 0x2] = a1\n 79382: a1 = u64 [s1 + 0x88]\n 79386: u8 [a0 + 0x1] = a1\n 79389: a1 = u64 [s1 + 0x228]\n 79393: u8 [a0] = a1\n 79395: a0 = 0x20\n 79398: a1 = 0x20\n 79401: ra = 886, jump @0\n      : @989 [@dyn 443] (gas: 35)\n 79408: u8 [a0 + 31] = 0\n 79411: u8 [a0 + 30] = 0\n 79414: u8 [a0 + 29] = 0\n 79417: u8 [a0 + 28] = 0\n 79420: u8 [a0 + 27] = 0\n 79423: u8 [a0 + 26] = 0\n 79426: u8 [a0 + 25] = 0\n 79429: u8 [a0 + 24] = 0\n 79432: u8 [a0 + 23] = 0\n 79435: u8 [a0 + 22] = 0\n 79438: u8 [a0 + 21] = 0\n 79441: u8 [a0 + 20] = 0\n 79444: u8 [a0 + 19] = 0\n 79447: u8 [a0 + 18] = 0\n 79450: u8 [a0 + 17] = 0\n 79453: u8 [a0 + 16] = 0\n 79456: u8 [a0 + 15] = 0\n 79459: u8 [a0 + 14] = 0\n 79462: u8 [a0 + 13] = 0\n 79465: u8 [a0 + 12] = 0\n 79468: u8 [a0 + 11] = 0\n 79471: u8 [a0 + 10] = 0\n 79474: u8 [a0 + 9] = 0\n 79477: u8 [a0 + 8] = 0\n 79480: u8 [a0 + 7] = 0\n 79483: u8 [a0 + 6] = 0\n 79486: u8 [a0 + 5] = 0\n 79489: u8 [a0 + 4] = 0\n 79492: u8 [a0 + 3] = 0\n 79495: u8 [a0 + 2] = 0\n 79498: u8 [a0 + 1] = 0\n 79501: u8 [a0 + 0] = 0\n 79503: a1 = 0x40\n 79506: a0 = 0\n 79508: ra = 888, jump @0\n      : @990 [@dyn 444] (gas: 27)\n 79515: i32 a0 = a0 + 0\n 79517: i32 a2 = s1 + 0x6a0\n 79521: a1 = 0x40\n 79524: ecalli 8 // 'hash_keccak_256'\n 79526: a0 = u64 [s1 + 0x6b8]\n 79530: a1 = u64 [s1 + 0x6b0]\n 79534: a2 = u64 [s1 + 0x6a8]\n 79538: a3 = u64 [s1 + 0x6a0]\n 79542: a4 = reverse a0\n 79544: a0 = reverse a1\n 79546: a1 = reverse a2\n 79548: a2 = reverse a3\n 79550: a3 = u64 [s1 + 0x168]\n 79554: u64 [s1 + 0x3f8] = a3\n 79558: a3 = u64 [s1 + 0x170]\n 79562: u64 [s1 + 0x3f0] = a3\n 79566: a3 = u64 [s1 + 0x210]\n 79570: u64 [s1 + 0x3e8] = a3\n 79574: a3 = u64 [s1 + 0x238]\n 79578: u64 [s1 + 0x3e0] = a3\n 79582: u64 [s1 + 0x418] = a2\n 79586: u64 [s1 + 0x410] = a1\n 79590: u64 [s1 + 0x408] = a0\n 79594: a0 = s1 + 0x400\n 79598: a1 = s1 + 0x3e0\n 79602: u64 [s1 + 0x400] = a4\n 79606: ra = 890, jump @915\n      : @991 [@dyn 445] (gas: 53)\n 79612: a0 = u64 [s1 + 0x1f8]\n 79616: u64 [s1 + 0x3b8] = a0\n 79620: a0 = u64 [s1 + 0x200]\n 79624: u64 [s1 + 0x3b0] = a0\n 79628: a0 = u64 [s1 + 0x1e8]\n 79632: u64 [s1 + 0x3a8] = a0\n 79636: a0 = u64 [s1 + 0x1f0]\n 79640: u64 [s1 + 0x3a0] = a0\n 79644: u64 [s1 + 984] = 0\n 79648: u64 [s1 + 976] = 0\n 79652: u64 [s1 + 960] = 0x1\n 79657: a0 = s1 + 0x3c0\n 79661: a1 = s1 + 0x3a0\n 79665: u64 [s1 + 968] = 0\n 79669: ra = 0x37c\n 79673: sp = sp + 0xfffffffffffffdc0\n 79677: u64 [sp + 0x238] = ra\n 79681: u64 [sp + 0x230] = s0\n 79685: u64 [sp + 0x228] = s1\n 79689: s0 = sp + 0x240\n 79693: sp = sp & 0xffffffffffffffe0\n 79696: a2 = u64 [a1 + 0x18]\n 79699: u64 [sp + 0x50] = a2\n 79702: a2 = u64 [a1 + 0x10]\n 79705: u64 [sp + 0x30] = a2\n 79708: a2 = u64 [a1 + 0x8]\n 79711: u64 [sp + 0x28] = a2\n 79714: a1 = u64 [a1]\n 79716: u64 [sp + 0x20] = a1\n 79719: a3 = u64 [a0 + 0x18]\n 79722: a2 = u64 [a0 + 0x10]\n 79725: a1 = u64 [a0 + 0x8]\n 79728: a0 = u64 [a0]\n 79730: u64 [sp + 0x60] = a3\n 79733: u64 [sp + 0x1f8] = a3\n 79737: u64 [sp + 0x68] = a2\n 79740: u64 [sp + 0x1f0] = a2\n 79744: u64 [sp + 0x70] = a1\n 79747: u64 [sp + 0x1e8] = a1\n 79751: u64 [sp + 0x78] = a0\n 79754: u64 [sp + 0x1e0] = a0\n 79758: u64 [sp + 536] = 0\n 79762: u64 [sp + 528] = 0\n 79766: u64 [sp + 520] = 0\n 79770: u64 [sp + 512] = 0\n 79774: u32 [sp + 448] = 0x20\n 79779: i32 a1 = sp + 0x1e0\n 79783: i32 a3 = sp + 0x200\n 79787: i32 a4 = sp + 0x1c0\n 79791: a2 = 0xffffffffffffffff\n 79794: a0 = 0\n 79796: ecalli 7 // 'get_storage'\n 79798: jump @929\n      : @992 [@dyn 446] (gas: 22)\n 79801: a0 = sp + 0xffffffffffffffe0\n 79804: a0 = a0 & 0xffffffffffffffe0\n 79807: u64 [s1 + 0x1e0] = a0\n 79811: sp = a0\n 79813: u64 [a0 + 24] = 0\n 79816: u64 [a0 + 16] = 0\n 79819: u64 [a0 + 8] = 0\n 79822: u64 [a0 + 0] = 0\n 79824: i32 a0 = a0 + 0\n 79826: ecalli 15 // 'value_transferred'\n 79828: a1 = u64 [s1 + 0x1e0]\n 79832: a0 = u64 [a1]\n 79834: u64 [s1 + 0x238] = a0\n 79838: a0 = u64 [a1 + 0x8]\n 79841: u64 [s1 + 0x210] = a0\n 79845: a0 = u64 [a1 + 0x10]\n 79848: u64 [s1 + 0x208] = a0\n 79852: a0 = u64 [a1 + 0x18]\n 79855: u64 [s1 + 0x1e0] = a0\n 79859: a1 = 0x20\n 79862: a0 = 0\n 79864: ra = 894, jump @0\n      : @993 [@dyn 447] (gas: 67)\n 79871: a1 = u64 [s1 + 0x160]\n 79875: u8 [a0 + 0x1f] = a1\n 79878: a1 = u64 [s1 + 0x158]\n 79882: u8 [a0 + 0x1e] = a1\n 79885: a1 = u64 [s1 + 0x150]\n 79889: u8 [a0 + 0x1d] = a1\n 79892: a1 = u64 [s1 + 0x148]\n 79896: u8 [a0 + 0x1c] = a1\n 79899: a1 = u64 [s1 + 0x140]\n 79903: u8 [a0 + 0x1b] = a1\n 79906: a1 = u64 [s1 + 0x138]\n 79910: u8 [a0 + 0x1a] = a1\n 79913: a1 = u64 [s1 + 0x130]\n 79917: u8 [a0 + 0x19] = a1\n 79920: a1 = u64 [s1 + 0x128]\n 79924: u8 [a0 + 0x17] = a1\n 79927: a1 = u64 [s1 + 0x120]\n 79931: u8 [a0 + 0x16] = a1\n 79934: a1 = u64 [s1 + 0x118]\n 79938: u8 [a0 + 0x15] = a1\n 79941: a1 = u64 [s1 + 0x110]\n 79945: u8 [a0 + 0x14] = a1\n 79948: a1 = u64 [s1 + 0x108]\n 79952: u8 [a0 + 0x13] = a1\n 79955: a1 = u64 [s1 + 0x100]\n 79959: u8 [a0 + 0x12] = a1\n 79962: a1 = u64 [s1 + 0xf8]\n 79966: u8 [a0 + 0x11] = a1\n 79969: a1 = u64 [s1 + 0xf0]\n 79973: u8 [a0 + 0xf] = a1\n 79976: a1 = u64 [s1 + 0xe8]\n 79980: u8 [a0 + 0xe] = a1\n 79983: a1 = u64 [s1 + 0xe0]\n 79987: u8 [a0 + 0xd] = a1\n 79990: a1 = u64 [s1 + 0xd8]\n 79994: u8 [a0 + 0xc] = a1\n 79997: a1 = u64 [s1 + 0xd0]\n 80001: u8 [a0 + 0xb] = a1\n 80004: a1 = u64 [s1 + 0xc8]\n 80008: u8 [a0 + 0xa] = a1\n 80011: a1 = u64 [s1 + 0xc0]\n 80015: u8 [a0 + 0x9] = a1\n 80018: a1 = u64 [s1 + 0xb8]\n 80022: u8 [a0 + 0x7] = a1\n 80025: a1 = u64 [s1 + 0xb0]\n 80029: u8 [a0 + 0x6] = a1\n 80032: a1 = u64 [s1 + 0xa8]\n 80036: u8 [a0 + 0x5] = a1\n 80039: a1 = u64 [s1 + 0xa0]\n 80043: u8 [a0 + 0x4] = a1\n 80046: a1 = u64 [s1 + 0x98]\n 80050: u8 [a0 + 0x3] = a1\n 80053: a1 = u64 [s1 + 0x90]\n 80057: u8 [a0 + 0x2] = a1\n 80060: a1 = u64 [s1 + 0x88]\n 80064: u8 [a0 + 0x1] = a1\n 80067: a1 = u64 [s1 + 0x230]\n 80071: u8 [a0 + 0x18] = a1\n 80074: a1 = u64 [s1 + 0x218]\n 80078: u8 [a0 + 0x10] = a1\n 80081: a1 = u64 [s1 + 0x220]\n 80085: u8 [a0 + 0x8] = a1\n 80088: a1 = u64 [s1 + 0x228]\n 80092: u8 [a0] = a1\n 80094: a0 = 0x20\n 80097: a1 = 0x20\n 80100: ra = 896, jump @0\n      : @994 [@dyn 448] (gas: 35)\n 80107: u8 [a0 + 31] = 0x2\n 80111: u8 [a0 + 30] = 0\n 80114: u8 [a0 + 29] = 0\n 80117: u8 [a0 + 28] = 0\n 80120: u8 [a0 + 27] = 0\n 80123: u8 [a0 + 26] = 0\n 80126: u8 [a0 + 25] = 0\n 80129: u8 [a0 + 24] = 0\n 80132: u8 [a0 + 23] = 0\n 80135: u8 [a0 + 22] = 0\n 80138: u8 [a0 + 21] = 0\n 80141: u8 [a0 + 20] = 0\n 80144: u8 [a0 + 19] = 0\n 80147: u8 [a0 + 18] = 0\n 80150: u8 [a0 + 17] = 0\n 80153: u8 [a0 + 16] = 0\n 80156: u8 [a0 + 15] = 0\n 80159: u8 [a0 + 14] = 0\n 80162: u8 [a0 + 13] = 0\n 80165: u8 [a0 + 12] = 0\n 80168: u8 [a0 + 11] = 0\n 80171: u8 [a0 + 10] = 0\n 80174: u8 [a0 + 9] = 0\n 80177: u8 [a0 + 8] = 0\n 80180: u8 [a0 + 7] = 0\n 80183: u8 [a0 + 6] = 0\n 80186: u8 [a0 + 5] = 0\n 80189: u8 [a0 + 4] = 0\n 80192: u8 [a0 + 3] = 0\n 80195: u8 [a0 + 2] = 0\n 80198: u8 [a0 + 1] = 0\n 80201: u8 [a0 + 0] = 0\n 80203: a1 = 0x40\n 80206: a0 = 0\n 80208: ra = 898, jump @0\n      : @995 [@dyn 449] (gas: 83)\n 80215: i32 a0 = a0 + 0\n 80217: i32 a2 = s1 + 0x6a0\n 80221: a1 = 0x40\n 80224: ecalli 8 // 'hash_keccak_256'\n 80226: a0 = u64 [s1 + 0x6b8]\n 80230: a1 = u64 [s1 + 0x6b0]\n 80234: a2 = u64 [s1 + 0x6a8]\n 80238: a3 = u64 [s1 + 0x6a0]\n 80242: a0 = reverse a0\n 80244: u64 [s1 + 0x1d8] = a0\n 80248: a1 = reverse a1\n 80250: u64 [s1 + 0x1d0] = a1\n 80254: a2 = reverse a2\n 80256: u64 [s1 + 0x1c8] = a2\n 80260: a3 = reverse a3\n 80262: u64 [s1 + 0x180] = a3\n 80266: u64 [s1 + 0x698] = a3\n 80270: u64 [s1 + 0x690] = a2\n 80274: u64 [s1 + 0x688] = a1\n 80278: u64 [s1 + 0x680] = a0\n 80282: u64 [s1 + 1720] = 0\n 80286: u64 [s1 + 1712] = 0\n 80290: u64 [s1 + 1704] = 0\n 80294: u64 [s1 + 1696] = 0\n 80298: u32 [s1 + 1632] = 0x20\n 80303: i32 a1 = s1 + 0x680\n 80307: i32 a3 = s1 + 0x6a0\n 80311: i32 a4 = s1 + 0x660\n 80315: a2 = 0xffffffffffffffff\n 80318: a0 = 0\n 80320: ecalli 7 // 'get_storage'\n 80322: a0 = u64 [s1 + 0x180]\n 80326: u64 [s1 + 0x698] = a0\n 80330: a0 = u64 [s1 + 0x1c8]\n 80334: u64 [s1 + 0x690] = a0\n 80338: a0 = u64 [s1 + 0x1d0]\n 80342: u64 [s1 + 0x688] = a0\n 80346: a0 = u64 [s1 + 0x1d8]\n 80350: u64 [s1 + 0x680] = a0\n 80354: a0 = u64 [s1 + 0x1e0]\n 80358: u64 [s1 + 0x6b8] = a0\n 80362: a0 = u64 [s1 + 0x208]\n 80366: u64 [s1 + 0x6b0] = a0\n 80370: a0 = u64 [s1 + 0x210]\n 80374: u64 [s1 + 0x6a8] = a0\n 80378: a0 = u64 [s1 + 0x238]\n 80382: u64 [s1 + 0x6a0] = a0\n 80386: i32 a1 = s1 + 0x680\n 80390: i32 a3 = s1 + 0x6a0\n 80394: a2 = 0xffffffffffffffff\n 80397: a4 = 0x20\n 80400: a0 = 0\n 80402: ecalli 14 // 'set_storage'\n 80404: i32 a0 = s1 + 0x640\n 80408: ecalli 5 // 'caller'\n 80410: a0 = u32 [s1 + 0x650]\n 80414: u64 [s1 + 0x170] = a0\n 80418: a0 = u64 [s1 + 0x648]\n 80422: u64 [s1 + 0x168] = a0\n 80426: a0 = u64 [s1 + 0x640]\n 80430: u64 [s1 + 0x208] = a0\n 80434: a0 = sp + 0xffffffffffffffe0\n 80437: a0 = a0 & 0xffffffffffffffe0\n 80440: u64 [s1 + 0x238] = a0\n 80444: sp = a0\n 80446: u64 [a0 + 24] = 0\n 80449: u64 [a0 + 16] = 0\n 80452: u64 [a0 + 8] = 0\n 80455: u64 [a0 + 0] = 0\n 80457: i32 a0 = a0 + 0\n 80459: ecalli 15 // 'value_transferred'\n 80461: a1 = u64 [s1 + 0x238]\n 80465: a0 = u64 [a1]\n 80467: u64 [s1 + 0x1e0] = a0\n 80471: a0 = u64 [a1 + 0x8]\n 80474: u64 [s1 + 0x1d8] = a0\n 80478: a0 = u64 [a1 + 0x10]\n 80481: u64 [s1 + 0x1d0] = a0\n 80485: a0 = u64 [a1 + 0x18]\n 80488: u64 [s1 + 0x1c8] = a0\n 80492: a0 = 0x40\n 80495: a1 = 0x20\n 80498: ra = 900, jump @0\n      : @996 [@dyn 450] (gas: 130)\n 80505: a1 = u8 [a0 + 0x1]\n 80508: a2 = u8 [a0]\n 80510: a3 = u8 [a0 + 0x2]\n 80513: a4 = u8 [a0 + 0x3]\n 80516: a1 = a1 << 0x8\n 80519: a1 = a1 | a2\n 80522: a3 = a3 << 0x10\n 80525: a4 = a4 << 0x18\n 80528: a3 = a3 | a4\n 80531: a1 = a1 | a3\n 80534: a2 = u8 [a0 + 0x5]\n 80537: a3 = u8 [a0 + 0x4]\n 80540: a4 = u8 [a0 + 0x6]\n 80543: a5 = u8 [a0 + 0x7]\n 80546: a2 = a2 << 0x8\n 80549: a2 = a2 | a3\n 80552: a4 = a4 << 0x10\n 80555: a5 = a5 << 0x18\n 80558: a4 = a4 | a5\n 80561: a2 = a2 | a4\n 80564: a2 = a2 << 0x20\n 80567: t0 = a2 | a1\n 80570: a2 = u8 [a0 + 0x9]\n 80573: a3 = u8 [a0 + 0x8]\n 80576: a4 = u8 [a0 + 0xa]\n 80579: a5 = u8 [a0 + 0xb]\n 80582: a2 = a2 << 0x8\n 80585: a2 = a2 | a3\n 80588: a4 = a4 << 0x10\n 80591: a5 = a5 << 0x18\n 80594: a4 = a4 | a5\n 80597: a2 = a2 | a4\n 80600: a3 = u8 [a0 + 0xd]\n 80603: a4 = u8 [a0 + 0xc]\n 80606: a5 = u8 [a0 + 0xe]\n 80609: a1 = u8 [a0 + 0xf]\n 80612: a3 = a3 << 0x8\n 80615: a3 = a3 | a4\n 80618: a5 = a5 << 0x10\n 80621: a1 = a1 << 0x18\n 80624: a1 = a1 | a5\n 80627: a1 = a1 | a3\n 80630: a1 = a1 << 0x20\n 80633: t1 = a1 | a2\n 80636: a1 = u8 [a0 + 0x11]\n 80639: a3 = u8 [a0 + 0x10]\n 80642: a4 = u8 [a0 + 0x12]\n 80645: a5 = u8 [a0 + 0x13]\n 80648: a1 = a1 << 0x8\n 80651: a1 = a1 | a3\n 80654: a4 = a4 << 0x10\n 80657: a5 = a5 << 0x18\n 80660: a4 = a4 | a5\n 80663: a1 = a1 | a4\n 80666: a3 = u8 [a0 + 0x15]\n 80669: a4 = u8 [a0 + 0x14]\n 80672: a5 = u8 [a0 + 0x16]\n 80675: a2 = u8 [a0 + 0x17]\n 80678: a3 = a3 << 0x8\n 80681: a3 = a3 | a4\n 80684: a5 = a5 << 0x10\n 80687: a2 = a2 << 0x18\n 80690: a2 = a2 | a5\n 80693: a2 = a2 | a3\n 80696: a2 = a2 << 0x20\n 80699: a3 = a2 | a1\n 80702: a1 = u8 [a0 + 0x19]\n 80705: a2 = u8 [a0 + 0x18]\n 80708: a4 = u8 [a0 + 0x1a]\n 80711: a5 = u8 [a0 + 0x1b]\n 80714: a1 = a1 << 0x8\n 80717: a1 = a1 | a2\n 80720: a4 = a4 << 0x10\n 80723: a5 = a5 << 0x18\n 80726: a4 = a4 | a5\n 80729: a1 = a1 | a4\n 80732: a2 = u8 [a0 + 0x1d]\n 80735: a4 = u8 [a0 + 0x1c]\n 80738: a5 = u8 [a0 + 0x1e]\n 80741: a0 = u8 [a0 + 0x1f]\n 80744: a2 = a2 << 0x8\n 80747: a2 = a2 | a4\n 80750: a5 = a5 << 0x10\n 80753: a0 = a0 << 0x18\n 80756: a0 = a0 | a5\n 80759: a0 = a0 | a2\n 80762: a0 = a0 << 0x20\n 80765: a0 = a0 | a1\n 80768: a5 = reverse a0\n 80770: u64 [s1 + 0x238] = a5\n 80774: a2 = reverse a3\n 80776: u64 [s1 + 0x178] = a2\n 80780: a1 = reverse t1\n 80782: u64 [s1 + 0x180] = a1\n 80786: a3 = reverse t0\n 80788: u64 [s1 + 0x210] = a3\n 80792: a0 = u64 [s1 + 0x1c8]\n 80796: u64 [s1 + 0x318] = a0\n 80800: a0 = u64 [s1 + 0x1d0]\n 80804: u64 [s1 + 0x310] = a0\n 80808: a0 = u64 [s1 + 0x1d8]\n 80812: u64 [s1 + 0x308] = a0\n 80816: a0 = u64 [s1 + 0x1e0]\n 80820: u64 [s1 + 0x300] = a0\n 80824: a0 = u64 [s1 + 0x1a8]\n 80828: u64 [s1 + 0x338] = a0\n 80832: a0 = u64 [s1 + 0x1c0]\n 80836: u64 [s1 + 0x330] = a0\n 80840: a0 = u64 [s1 + 0x1b0]\n 80844: u64 [s1 + 0x328] = a0\n 80848: a0 = u64 [s1 + 0x1b8]\n 80852: u64 [s1 + 0x320] = a0\n 80856: a0 = u64 [s1 + 0x188]\n 80860: u64 [s1 + 0x358] = a0\n 80864: a0 = u64 [s1 + 0x190]\n 80868: u64 [s1 + 0x350] = a0\n 80872: a0 = u64 [s1 + 0x198]\n 80876: u64 [s1 + 0x348] = a0\n 80880: a0 = u64 [s1 + 0x1a0]\n 80884: u64 [s1 + 0x340] = a0\n 80888: u64 [s1 + 0x378] = a3\n 80892: u64 [s1 + 0x370] = a1\n 80896: u64 [s1 + 0x368] = a2\n 80900: a0 = s1 + 0x380\n 80904: a1 = s1 + 0x360\n 80908: a2 = s1 + 0x340\n 80912: a3 = s1 + 0x320\n 80916: a4 = s1 + 0x300\n 80920: u64 [s1 + 0x360] = a5\n 80924: ra = 902, jump @936\n      : @997 [@dyn 451] (gas: 12)\n 80930: a2 = u64 [s1 + 0x178]\n 80934: a0 = u64 [s1 + 0x210]\n 80938: a0 = a0 | a2\n 80941: a3 = u64 [s1 + 0x180]\n 80945: a1 = u64 [s1 + 0x238]\n 80949: a1 = a1 | a3\n 80952: a1 = a1 | a0\n 80955: a1 = a1 >> 0x20\n 80958: a0 = a0 | a3\n 80961: a0 = a0 << 0x20\n 80964: a0 = a0 | a1\n 80967: jump @1022 if a0 != 0\n      : @998 (gas: 33)\n 80971: ra = a3\n 80973: a0 = u64 [s1 + 0x388]\n 80977: a1 = u64 [s1 + 0x398]\n 80981: u64 [s1 + 0x1e0] = a1\n 80985: t2 = u64 [s1 + 0x380]\n 80989: a3 = u64 [s1 + 0x390]\n 80993: a4 = a0 ^ a2\n 80996: a5 = a0 <u a2\n 80999: t0 = u64 [s1 + 0x238]\n 81003: a1 = t2 <u t0\n 81006: a5 = a1 if a4 == 0\n 81009: a4 = a3 - ra\n 81012: t1 = a4 - a5\n 81015: a4 = a4 <u a5\n 81018: u64 [s1 + 0x1d8] = a4\n 81022: a3 = a3 <u ra\n 81025: a5 = u64 [s1 + 0x210]\n 81029: a4 = u64 [s1 + 0x1e0]\n 81033: a5 = a4 - a5\n 81036: a5 = a5 - a3\n 81039: a3 = u64 [s1 + 0x1d8]\n 81043: a5 = a5 - a3\n 81046: a0 = a0 - a2\n 81049: a0 = a0 - a1\n 81052: a1 = t2 - t0\n 81055: a0 = a0 | a5\n 81058: a3 = a1 | t1\n 81061: a3 = a3 | a0\n 81064: a0 = a0 | t1\n 81067: a3 = a3 >> 0x20\n 81070: a0 = a0 << 0x20\n 81073: a0 = a0 | a3\n 81076: jump @1022 if a0 != 0\n      : @999 (gas: 18)\n 81080: a0 = u64 [s1 + 0x208]\n 81084: a0 = reverse a0\n 81086: a0 = a0 << 0x20\n 81089: a2 = u64 [s1 + 0x168]\n 81093: a2 = reverse a2\n 81095: a3 = a2 >> 0x20\n 81098: a0 = a0 | a3\n 81101: u64 [s1 + 0x210] = a0\n 81105: a2 = a2 << 0x20\n 81108: a0 = u64 [s1 + 0x170]\n 81112: a0 = reverse a0\n 81114: a0 = a0 >> 0x20\n 81117: a0 = a0 | a2\n 81120: u64 [s1 + 0x1e0] = a0\n 81124: a0 = i32 [s1 + 0x238]\n 81128: i32 a1 = a1 + 0\n 81130: u64 [s1 + 0x238] = a1\n 81134: ra = 904, jump @0\n      : @1000 [@dyn 452] (gas: 46)\n 81141: a1 = u64 [0x20060]\n 81146: a2 = u64 [0x20068]\n 81151: a3 = u64 [0x20070]\n 81156: a4 = u64 [0x20078]\n 81161: u64 [s1 + 0x6b8] = a1\n 81165: u64 [s1 + 0x6b0] = a2\n 81169: u64 [s1 + 0x6a8] = a3\n 81173: u64 [s1 + 0x6a0] = a4\n 81177: a1 = u64 [s1 + 0x218]\n 81181: u64 [s1 + 0x6d0] = a1\n 81185: a1 = u64 [s1 + 0x220]\n 81189: u64 [s1 + 0x6c8] = a1\n 81193: a1 = u64 [s1 + 0x228]\n 81197: u64 [s1 + 0x6c0] = a1\n 81201: a1 = u64 [s1 + 0x230]\n 81205: u64 [s1 + 0x6d8] = a1\n 81209: a1 = u64 [s1 + 0x1e0]\n 81213: a1 = reverse a1\n 81215: a2 = u64 [s1 + 0x210]\n 81219: a2 = reverse a2\n 81221: a3 = u64 [s1 + 0x208]\n 81225: a3 = a3 << 0x20\n 81228: u64 [s1 + 0x6e8] = a3\n 81232: u64 [s1 + 1760] = 0\n 81236: u64 [s1 + 0x6f0] = a2\n 81240: u64 [s1 + 0x6f8] = a1\n 81244: i32 a2 = a0 + 0\n 81246: i32 a0 = s1 + 0x6a0\n 81250: a1 = 0x3\n 81253: a3 = u64 [s1 + 0x238]\n 81257: ecalli 6 // 'deposit_event'\n 81259: a0 = u64 [s1 + 0x20]\n 81262: a1 = u64 [s1 + 0x1f8]\n 81266: u64 [a0 + 0x18] = a1\n 81269: a1 = u64 [s1 + 0x200]\n 81273: u64 [a0 + 0x10] = a1\n 81276: a1 = u64 [s1 + 0x1e8]\n 81280: u64 [a0 + 0x8] = a1\n 81283: a1 = u64 [s1 + 0x1f0]\n 81287: u64 [a0] = a1\n 81289: sp = s0 + 0xfffffffffffff8e0\n 81293: ra = u64 [sp + 0x718]\n 81297: s0 = u64 [sp + 0x710]\n 81301: s1 = u64 [sp + 0x708]\n 81305: sp = sp + 0x720\n 81309: ret\n      : @1001 (gas: 3)\n 81311: a0 = 0x40\n 81314: a1 = 0x20\n 81317: ra = 906, jump @0\n      : @1002 [@dyn 453] (gas: 104)\n 81324: a1 = u8 [a0 + 0x11]\n 81327: a2 = u8 [a0 + 0x10]\n 81330: a3 = u8 [a0 + 0x12]\n 81333: a4 = u8 [a0 + 0x13]\n 81336: a1 = a1 << 0x8\n 81339: a1 = a1 | a2\n 81342: a3 = a3 << 0x10\n 81345: a4 = a4 << 0x18\n 81348: a3 = a3 | a4\n 81351: a1 = a1 | a3\n 81354: a2 = u8 [a0 + 0x15]\n 81357: a3 = u8 [a0 + 0x14]\n 81360: a4 = u8 [a0 + 0x16]\n 81363: a5 = u8 [a0 + 0x17]\n 81366: a2 = a2 << 0x8\n 81369: a2 = a2 | a3\n 81372: a4 = a4 << 0x10\n 81375: a5 = a5 << 0x18\n 81378: a4 = a4 | a5\n 81381: a2 = a2 | a4\n 81384: a2 = a2 << 0x20\n 81387: t0 = a2 | a1\n 81390: a2 = u8 [a0 + 0x1]\n 81393: a3 = u8 [a0]\n 81395: a4 = u8 [a0 + 0x2]\n 81398: a5 = u8 [a0 + 0x3]\n 81401: a2 = a2 << 0x8\n 81404: a2 = a2 | a3\n 81407: a4 = a4 << 0x10\n 81410: a5 = a5 << 0x18\n 81413: a4 = a4 | a5\n 81416: a2 = a2 | a4\n 81419: a3 = u8 [a0 + 0x5]\n 81422: a4 = u8 [a0 + 0x4]\n 81425: a5 = u8 [a0 + 0x6]\n 81428: a1 = u8 [a0 + 0x7]\n 81431: a3 = a3 << 0x8\n 81434: a3 = a3 | a4\n 81437: a5 = a5 << 0x10\n 81440: a1 = a1 << 0x18\n 81443: a1 = a1 | a5\n 81446: a1 = a1 | a3\n 81449: a1 = a1 << 0x20\n 81452: t1 = a1 | a2\n 81455: a1 = u8 [a0 + 0x19]\n 81458: a3 = u8 [a0 + 0x18]\n 81461: a4 = u8 [a0 + 0x1a]\n 81464: a5 = u8 [a0 + 0x1b]\n 81467: a1 = a1 << 0x8\n 81470: a1 = a1 | a3\n 81473: a4 = a4 << 0x10\n 81476: a5 = a5 << 0x18\n 81479: a4 = a4 | a5\n 81482: a1 = a1 | a4\n 81485: a3 = u8 [a0 + 0x1d]\n 81488: a4 = u8 [a0 + 0x1c]\n 81491: a5 = u8 [a0 + 0x1e]\n 81494: a2 = u8 [a0 + 0x1f]\n 81497: a3 = a3 << 0x8\n 81500: a3 = a3 | a4\n 81503: a5 = a5 << 0x10\n 81506: a2 = a2 << 0x18\n 81509: a2 = a2 | a5\n 81512: a2 = a2 | a3\n 81515: a2 = a2 << 0x20\n 81518: a3 = a2 | a1\n 81521: a1 = u8 [a0 + 0x9]\n 81524: a2 = u8 [a0 + 0x8]\n 81527: a4 = u8 [a0 + 0xa]\n 81530: a5 = u8 [a0 + 0xb]\n 81533: a1 = a1 << 0x8\n 81536: a1 = a1 | a2\n 81539: a4 = a4 << 0x10\n 81542: a5 = a5 << 0x18\n 81545: a4 = a4 | a5\n 81548: a1 = a1 | a4\n 81551: a2 = u8 [a0 + 0xd]\n 81554: a4 = u8 [a0 + 0xc]\n 81557: a5 = u8 [a0 + 0xe]\n 81560: a0 = u8 [a0 + 0xf]\n 81563: a2 = a2 << 0x8\n 81566: a2 = a2 | a4\n 81569: a5 = a5 << 0x10\n 81572: a0 = a0 << 0x18\n 81575: a0 = a0 | a5\n 81578: a0 = a0 | a2\n 81581: a0 = a0 << 0x20\n 81584: a0 = a0 | a1\n 81587: a4 = reverse a0\n 81589: a1 = reverse a3\n 81591: a2 = reverse t1\n 81593: a0 = reverse t0\n 81595: u64 [s1 + 0x238] = a0\n 81599: u64 [s1 + 0x228] = a2\n 81603: a0 = a0 | a2\n 81606: a2 = a1\n 81608: a1 = a1 | a4\n 81611: a1 = a1 | a0\n 81614: a1 = a1 >> 0x20\n 81617: u64 [s1 + 0x230] = a4\n 81621: a0 = a0 | a4\n 81624: a0 = a0 << 0x20\n 81627: a0 = a0 | a1\n 81630: jump @1022 if a0 != 0\n      : @1003 (gas: 5)\n 81634: u64 [s1 + 0x220] = a2\n 81638: i32 a0 = a2 + 0\n 81640: a1 = 0x20\n 81643: u64 [s1 + 0x218] = a0\n 81647: ra = 908, jump @0\n      : @1004 [@dyn 454] (gas: 51)\n 81654: u8 [a0 + 31] = 0\n 81657: u8 [a0 + 30] = 0\n 81660: u8 [a0 + 29] = 0\n 81663: u8 [a0 + 28] = 0\n 81666: u8 [a0 + 27] = 0\n 81669: u8 [a0 + 26] = 0\n 81672: u8 [a0 + 25] = 0\n 81675: u8 [a0 + 24] = 0\n 81678: u8 [a0 + 23] = 0\n 81681: u8 [a0 + 22] = 0\n 81684: u8 [a0 + 21] = 0\n 81687: u8 [a0 + 20] = 0\n 81690: u8 [a0 + 19] = 0\n 81693: u8 [a0 + 18] = 0\n 81696: u8 [a0 + 17] = 0\n 81699: u8 [a0 + 16] = 0\n 81702: u8 [a0 + 15] = 0\n 81705: u8 [a0 + 14] = 0\n 81708: u8 [a0 + 13] = 0\n 81711: u8 [a0 + 12] = 0\n 81714: u8 [a0 + 11] = 0\n 81717: u8 [a0 + 10] = 0\n 81720: u8 [a0 + 9] = 0\n 81723: u8 [a0 + 8] = 0\n 81726: u8 [a0 + 7] = 0\n 81729: u8 [a0 + 6] = 0\n 81732: u8 [a0 + 5] = 0\n 81735: u8 [a0 + 4] = 0\n 81738: u8 [a0 + 3] = 0xa0\n 81743: u8 [a0 + 2] = 0x79\n 81747: u8 [a0 + 1] = 0xc3\n 81752: u8 [a0 + 0] = 0x8\n 81755: a1 = u64 [s1 + 0x220]\n 81759: a0 = a1 + 0x4\n 81762: a1 = a0 <u a1\n 81765: a3 = u64 [s1 + 0x238]\n 81769: a2 = a3 + a1\n 81772: a3 = a2 <u a3\n 81775: a3 = a1 if a1 == 0\n 81778: a1 = u64 [s1 + 0x230]\n 81782: a3 = a3 + a1\n 81785: a1 = a3 <u a1\n 81788: a4 = u64 [s1 + 0x228]\n 81792: a4 = a4 + a1\n 81795: u64 [s1 + 0x248] = a2\n 81799: u64 [s1 + 0x240] = a0\n 81803: u64 [s1 + 0x250] = a3\n 81807: a0 = s1 + 0x260\n 81811: a1 = s1 + 0x240\n 81815: u64 [s1 + 0x258] = a4\n 81819: ra = 910, jump @848\n      : @1005 [@dyn 455] (gas: 5)\n 81825: a0 = u64 [s1 + 0x268]\n 81829: t0 = u64 [s1 + 0x278]\n 81833: t1 = u64 [s1 + 0x260]\n 81837: a3 = u64 [s1 + 0x270]\n 81841: jump @1021\n      : @1006 (gas: 3)\n 81844: a0 = 0x40\n 81847: a1 = 0x20\n 81850: ra = 912, jump @0\n      : @1007 [@dyn 456] (gas: 104)\n 81857: a1 = u8 [a0 + 0x11]\n 81860: a2 = u8 [a0 + 0x10]\n 81863: a3 = u8 [a0 + 0x12]\n 81866: a4 = u8 [a0 + 0x13]\n 81869: a1 = a1 << 0x8\n 81872: a1 = a1 | a2\n 81875: a3 = a3 << 0x10\n 81878: a4 = a4 << 0x18\n 81881: a3 = a3 | a4\n 81884: a1 = a1 | a3\n 81887: a2 = u8 [a0 + 0x15]\n 81890: a3 = u8 [a0 + 0x14]\n 81893: a4 = u8 [a0 + 0x16]\n 81896: a5 = u8 [a0 + 0x17]\n 81899: a2 = a2 << 0x8\n 81902: a2 = a2 | a3\n 81905: a4 = a4 << 0x10\n 81908: a5 = a5 << 0x18\n 81911: a4 = a4 | a5\n 81914: a2 = a2 | a4\n 81917: a2 = a2 << 0x20\n 81920: t0 = a2 | a1\n 81923: a2 = u8 [a0 + 0x1]\n 81926: a3 = u8 [a0]\n 81928: a4 = u8 [a0 + 0x2]\n 81931: a5 = u8 [a0 + 0x3]\n 81934: a2 = a2 << 0x8\n 81937: a2 = a2 | a3\n 81940: a4 = a4 << 0x10\n 81943: a5 = a5 << 0x18\n 81946: a4 = a4 | a5\n 81949: a2 = a2 | a4\n 81952: a3 = u8 [a0 + 0x5]\n 81955: a4 = u8 [a0 + 0x4]\n 81958: a5 = u8 [a0 + 0x6]\n 81961: a1 = u8 [a0 + 0x7]\n 81964: a3 = a3 << 0x8\n 81967: a3 = a3 | a4\n 81970: a5 = a5 << 0x10\n 81973: a1 = a1 << 0x18\n 81976: a1 = a1 | a5\n 81979: a1 = a1 | a3\n 81982: a1 = a1 << 0x20\n 81985: t1 = a1 | a2\n 81988: a1 = u8 [a0 + 0x19]\n 81991: a3 = u8 [a0 + 0x18]\n 81994: a4 = u8 [a0 + 0x1a]\n 81997: a5 = u8 [a0 + 0x1b]\n 82000: a1 = a1 << 0x8\n 82003: a1 = a1 | a3\n 82006: a4 = a4 << 0x10\n 82009: a5 = a5 << 0x18\n 82012: a4 = a4 | a5\n 82015: a1 = a1 | a4\n 82018: a3 = u8 [a0 + 0x1d]\n 82021: a4 = u8 [a0 + 0x1c]\n 82024: a5 = u8 [a0 + 0x1e]\n 82027: a2 = u8 [a0 + 0x1f]\n 82030: a3 = a3 << 0x8\n 82033: a3 = a3 | a4\n 82036: a5 = a5 << 0x10\n 82039: a2 = a2 << 0x18\n 82042: a2 = a2 | a5\n 82045: a2 = a2 | a3\n 82048: a2 = a2 << 0x20\n 82051: a3 = a2 | a1\n 82054: a1 = u8 [a0 + 0x9]\n 82057: a2 = u8 [a0 + 0x8]\n 82060: a4 = u8 [a0 + 0xa]\n 82063: a5 = u8 [a0 + 0xb]\n 82066: a1 = a1 << 0x8\n 82069: a1 = a1 | a2\n 82072: a4 = a4 << 0x10\n 82075: a5 = a5 << 0x18\n 82078: a4 = a4 | a5\n 82081: a1 = a1 | a4\n 82084: a2 = u8 [a0 + 0xd]\n 82087: a4 = u8 [a0 + 0xc]\n 82090: a5 = u8 [a0 + 0xe]\n 82093: a0 = u8 [a0 + 0xf]\n 82096: a2 = a2 << 0x8\n 82099: a2 = a2 | a4\n 82102: a5 = a5 << 0x10\n 82105: a0 = a0 << 0x18\n 82108: a0 = a0 | a5\n 82111: a0 = a0 | a2\n 82114: a0 = a0 << 0x20\n 82117: a0 = a0 | a1\n 82120: a4 = reverse a0\n 82122: a1 = reverse a3\n 82124: a2 = reverse t1\n 82126: a0 = reverse t0\n 82128: u64 [s1 + 0x238] = a0\n 82132: u64 [s1 + 0x228] = a2\n 82136: a0 = a0 | a2\n 82139: a2 = a1\n 82141: a1 = a1 | a4\n 82144: a1 = a1 | a0\n 82147: a1 = a1 >> 0x20\n 82150: u64 [s1 + 0x230] = a4\n 82154: a0 = a0 | a4\n 82157: a0 = a0 << 0x20\n 82160: a0 = a0 | a1\n 82163: jump @1022 if a0 != 0\n      : @1008 (gas: 5)\n 82167: u64 [s1 + 0x220] = a2\n 82171: i32 a0 = a2 + 0\n 82173: a1 = 0x20\n 82176: u64 [s1 + 0x218] = a0\n 82180: ra = 914, jump @0\n      : @1009 [@dyn 457] (gas: 51)\n 82187: u8 [a0 + 31] = 0\n 82190: u8 [a0 + 30] = 0\n 82193: u8 [a0 + 29] = 0\n 82196: u8 [a0 + 28] = 0\n 82199: u8 [a0 + 27] = 0\n 82202: u8 [a0 + 26] = 0\n 82205: u8 [a0 + 25] = 0\n 82208: u8 [a0 + 24] = 0\n 82211: u8 [a0 + 23] = 0\n 82214: u8 [a0 + 22] = 0\n 82217: u8 [a0 + 21] = 0\n 82220: u8 [a0 + 20] = 0\n 82223: u8 [a0 + 19] = 0\n 82226: u8 [a0 + 18] = 0\n 82229: u8 [a0 + 17] = 0\n 82232: u8 [a0 + 16] = 0\n 82235: u8 [a0 + 15] = 0\n 82238: u8 [a0 + 14] = 0\n 82241: u8 [a0 + 13] = 0\n 82244: u8 [a0 + 12] = 0\n 82247: u8 [a0 + 11] = 0\n 82250: u8 [a0 + 10] = 0\n 82253: u8 [a0 + 9] = 0\n 82256: u8 [a0 + 8] = 0\n 82259: u8 [a0 + 7] = 0\n 82262: u8 [a0 + 6] = 0\n 82265: u8 [a0 + 5] = 0\n 82268: u8 [a0 + 4] = 0\n 82271: u8 [a0 + 3] = 0xa0\n 82276: u8 [a0 + 2] = 0x79\n 82280: u8 [a0 + 1] = 0xc3\n 82285: u8 [a0 + 0] = 0x8\n 82288: a1 = u64 [s1 + 0x220]\n 82292: a0 = a1 + 0x4\n 82295: a1 = a0 <u a1\n 82298: a3 = u64 [s1 + 0x238]\n 82302: a2 = a3 + a1\n 82305: a3 = a2 <u a3\n 82308: a3 = a1 if a1 == 0\n 82311: a1 = u64 [s1 + 0x230]\n 82315: a3 = a3 + a1\n 82318: a1 = a3 <u a1\n 82321: a4 = u64 [s1 + 0x228]\n 82325: a4 = a4 + a1\n 82328: u64 [s1 + 0x288] = a2\n 82332: u64 [s1 + 0x280] = a0\n 82336: u64 [s1 + 0x290] = a3\n 82340: a0 = s1 + 0x2a0\n 82344: a1 = s1 + 0x280\n 82348: u64 [s1 + 0x298] = a4\n 82352: ra = 916, jump @856\n      : @1010 [@dyn 458] (gas: 5)\n 82358: a0 = u64 [s1 + 0x2a8]\n 82362: t0 = u64 [s1 + 0x2b8]\n 82366: t1 = u64 [s1 + 0x2a0]\n 82370: a3 = u64 [s1 + 0x2b0]\n 82374: jump @1021\n      : @1011 (gas: 3)\n 82377: a0 = 0x40\n 82380: a1 = 0x20\n 82383: ra = 918, jump @0\n      : @1012 [@dyn 459] (gas: 104)\n 82390: a1 = u8 [a0 + 0x11]\n 82393: a2 = u8 [a0 + 0x10]\n 82396: a3 = u8 [a0 + 0x12]\n 82399: a4 = u8 [a0 + 0x13]\n 82402: a1 = a1 << 0x8\n 82405: a1 = a1 | a2\n 82408: a3 = a3 << 0x10\n 82411: a4 = a4 << 0x18\n 82414: a3 = a3 | a4\n 82417: a1 = a1 | a3\n 82420: a2 = u8 [a0 + 0x15]\n 82423: a3 = u8 [a0 + 0x14]\n 82426: a4 = u8 [a0 + 0x16]\n 82429: a5 = u8 [a0 + 0x17]\n 82432: a2 = a2 << 0x8\n 82435: a2 = a2 | a3\n 82438: a4 = a4 << 0x10\n 82441: a5 = a5 << 0x18\n 82444: a4 = a4 | a5\n 82447: a2 = a2 | a4\n 82450: a2 = a2 << 0x20\n 82453: t0 = a2 | a1\n 82456: a2 = u8 [a0 + 0x1]\n 82459: a3 = u8 [a0]\n 82461: a4 = u8 [a0 + 0x2]\n 82464: a5 = u8 [a0 + 0x3]\n 82467: a2 = a2 << 0x8\n 82470: a2 = a2 | a3\n 82473: a4 = a4 << 0x10\n 82476: a5 = a5 << 0x18\n 82479: a4 = a4 | a5\n 82482: a2 = a2 | a4\n 82485: a3 = u8 [a0 + 0x5]\n 82488: a4 = u8 [a0 + 0x4]\n 82491: a5 = u8 [a0 + 0x6]\n 82494: a1 = u8 [a0 + 0x7]\n 82497: a3 = a3 << 0x8\n 82500: a3 = a3 | a4\n 82503: a5 = a5 << 0x10\n 82506: a1 = a1 << 0x18\n 82509: a1 = a1 | a5\n 82512: a1 = a1 | a3\n 82515: a1 = a1 << 0x20\n 82518: t1 = a1 | a2\n 82521: a1 = u8 [a0 + 0x19]\n 82524: a3 = u8 [a0 + 0x18]\n 82527: a4 = u8 [a0 + 0x1a]\n 82530: a5 = u8 [a0 + 0x1b]\n 82533: a1 = a1 << 0x8\n 82536: a1 = a1 | a3\n 82539: a4 = a4 << 0x10\n 82542: a5 = a5 << 0x18\n 82545: a4 = a4 | a5\n 82548: a1 = a1 | a4\n 82551: a3 = u8 [a0 + 0x1d]\n 82554: a4 = u8 [a0 + 0x1c]\n 82557: a5 = u8 [a0 + 0x1e]\n 82560: a2 = u8 [a0 + 0x1f]\n 82563: a3 = a3 << 0x8\n 82566: a3 = a3 | a4\n 82569: a5 = a5 << 0x10\n 82572: a2 = a2 << 0x18\n 82575: a2 = a2 | a5\n 82578: a2 = a2 | a3\n 82581: a2 = a2 << 0x20\n 82584: a3 = a2 | a1\n 82587: a1 = u8 [a0 + 0x9]\n 82590: a2 = u8 [a0 + 0x8]\n 82593: a4 = u8 [a0 + 0xa]\n 82596: a5 = u8 [a0 + 0xb]\n 82599: a1 = a1 << 0x8\n 82602: a1 = a1 | a2\n 82605: a4 = a4 << 0x10\n 82608: a5 = a5 << 0x18\n 82611: a4 = a4 | a5\n 82614: a1 = a1 | a4\n 82617: a2 = u8 [a0 + 0xd]\n 82620: a4 = u8 [a0 + 0xc]\n 82623: a5 = u8 [a0 + 0xe]\n 82626: a0 = u8 [a0 + 0xf]\n 82629: a2 = a2 << 0x8\n 82632: a2 = a2 | a4\n 82635: a5 = a5 << 0x10\n 82638: a0 = a0 << 0x18\n 82641: a0 = a0 | a5\n 82644: a0 = a0 | a2\n 82647: a0 = a0 << 0x20\n 82650: a0 = a0 | a1\n 82653: a4 = reverse a0\n 82655: a1 = reverse a3\n 82657: a2 = reverse t1\n 82659: a0 = reverse t0\n 82661: u64 [s1 + 0x238] = a0\n 82665: u64 [s1 + 0x228] = a2\n 82669: a0 = a0 | a2\n 82672: a2 = a1\n 82674: a1 = a1 | a4\n 82677: a1 = a1 | a0\n 82680: a1 = a1 >> 0x20\n 82683: u64 [s1 + 0x230] = a4\n 82687: a0 = a0 | a4\n 82690: a0 = a0 << 0x20\n 82693: a0 = a0 | a1\n 82696: jump @1022 if a0 != 0\n      : @1013 (gas: 5)\n 82700: u64 [s1 + 0x220] = a2\n 82704: i32 a0 = a2 + 0\n 82706: a1 = 0x20\n 82709: u64 [s1 + 0x218] = a0\n 82713: ra = 920, jump @0\n      : @1014 [@dyn 460] (gas: 51)\n 82720: u8 [a0 + 31] = 0\n 82723: u8 [a0 + 30] = 0\n 82726: u8 [a0 + 29] = 0\n 82729: u8 [a0 + 28] = 0\n 82732: u8 [a0 + 27] = 0\n 82735: u8 [a0 + 26] = 0\n 82738: u8 [a0 + 25] = 0\n 82741: u8 [a0 + 24] = 0\n 82744: u8 [a0 + 23] = 0\n 82747: u8 [a0 + 22] = 0\n 82750: u8 [a0 + 21] = 0\n 82753: u8 [a0 + 20] = 0\n 82756: u8 [a0 + 19] = 0\n 82759: u8 [a0 + 18] = 0\n 82762: u8 [a0 + 17] = 0\n 82765: u8 [a0 + 16] = 0\n 82768: u8 [a0 + 15] = 0\n 82771: u8 [a0 + 14] = 0\n 82774: u8 [a0 + 13] = 0\n 82777: u8 [a0 + 12] = 0\n 82780: u8 [a0 + 11] = 0\n 82783: u8 [a0 + 10] = 0\n 82786: u8 [a0 + 9] = 0\n 82789: u8 [a0 + 8] = 0\n 82792: u8 [a0 + 7] = 0\n 82795: u8 [a0 + 6] = 0\n 82798: u8 [a0 + 5] = 0\n 82801: u8 [a0 + 4] = 0\n 82804: u8 [a0 + 3] = 0xa0\n 82809: u8 [a0 + 2] = 0x79\n 82813: u8 [a0 + 1] = 0xc3\n 82818: u8 [a0 + 0] = 0x8\n 82821: a1 = u64 [s1 + 0x220]\n 82825: a0 = a1 + 0x4\n 82828: a1 = a0 <u a1\n 82831: a3 = u64 [s1 + 0x238]\n 82835: a2 = a3 + a1\n 82838: a3 = a2 <u a3\n 82841: a3 = a1 if a1 == 0\n 82844: a1 = u64 [s1 + 0x230]\n 82848: a3 = a3 + a1\n 82851: a1 = a3 <u a1\n 82854: a4 = u64 [s1 + 0x228]\n 82858: a4 = a4 + a1\n 82861: u64 [s1 + 0x2c8] = a2\n 82865: u64 [s1 + 0x2c0] = a0\n 82869: u64 [s1 + 0x2d0] = a3\n 82873: a0 = s1 + 0x2e0\n 82877: a1 = s1 + 0x2c0\n 82881: u64 [s1 + 0x2d8] = a4\n 82885: ra = 922, jump @752\n      : @1015 [@dyn 461] (gas: 5)\n 82891: a0 = u64 [s1 + 0x2e8]\n 82895: t0 = u64 [s1 + 0x2f8]\n 82899: t1 = u64 [s1 + 0x2e0]\n 82903: a3 = u64 [s1 + 0x2f0]\n 82907: jump @1021\n      : @1016 (gas: 3)\n 82910: a0 = 0x40\n 82913: a1 = 0x20\n 82916: ra = 924, jump @0\n      : @1017 [@dyn 462] (gas: 104)\n 82923: a1 = u8 [a0 + 0x11]\n 82926: a2 = u8 [a0 + 0x10]\n 82929: a3 = u8 [a0 + 0x12]\n 82932: a4 = u8 [a0 + 0x13]\n 82935: a1 = a1 << 0x8\n 82938: a1 = a1 | a2\n 82941: a3 = a3 << 0x10\n 82944: a4 = a4 << 0x18\n 82947: a3 = a3 | a4\n 82950: a1 = a1 | a3\n 82953: a2 = u8 [a0 + 0x15]\n 82956: a3 = u8 [a0 + 0x14]\n 82959: a4 = u8 [a0 + 0x16]\n 82962: a5 = u8 [a0 + 0x17]\n 82965: a2 = a2 << 0x8\n 82968: a2 = a2 | a3\n 82971: a4 = a4 << 0x10\n 82974: a5 = a5 << 0x18\n 82977: a4 = a4 | a5\n 82980: a2 = a2 | a4\n 82983: a2 = a2 << 0x20\n 82986: t0 = a2 | a1\n 82989: a2 = u8 [a0 + 0x1]\n 82992: a3 = u8 [a0]\n 82994: a4 = u8 [a0 + 0x2]\n 82997: a5 = u8 [a0 + 0x3]\n 83000: a2 = a2 << 0x8\n 83003: a2 = a2 | a3\n 83006: a4 = a4 << 0x10\n 83009: a5 = a5 << 0x18\n 83012: a4 = a4 | a5\n 83015: a2 = a2 | a4\n 83018: a3 = u8 [a0 + 0x5]\n 83021: a4 = u8 [a0 + 0x4]\n 83024: a5 = u8 [a0 + 0x6]\n 83027: a1 = u8 [a0 + 0x7]\n 83030: a3 = a3 << 0x8\n 83033: a3 = a3 | a4\n 83036: a5 = a5 << 0x10\n 83039: a1 = a1 << 0x18\n 83042: a1 = a1 | a5\n 83045: a1 = a1 | a3\n 83048: a1 = a1 << 0x20\n 83051: t1 = a1 | a2\n 83054: a1 = u8 [a0 + 0x19]\n 83057: a3 = u8 [a0 + 0x18]\n 83060: a4 = u8 [a0 + 0x1a]\n 83063: a5 = u8 [a0 + 0x1b]\n 83066: a1 = a1 << 0x8\n 83069: a1 = a1 | a3\n 83072: a4 = a4 << 0x10\n 83075: a5 = a5 << 0x18\n 83078: a4 = a4 | a5\n 83081: a1 = a1 | a4\n 83084: a3 = u8 [a0 + 0x1d]\n 83087: a4 = u8 [a0 + 0x1c]\n 83090: a5 = u8 [a0 + 0x1e]\n 83093: a2 = u8 [a0 + 0x1f]\n 83096: a3 = a3 << 0x8\n 83099: a3 = a3 | a4\n 83102: a5 = a5 << 0x10\n 83105: a2 = a2 << 0x18\n 83108: a2 = a2 | a5\n 83111: a2 = a2 | a3\n 83114: a2 = a2 << 0x20\n 83117: a3 = a2 | a1\n 83120: a1 = u8 [a0 + 0x9]\n 83123: a2 = u8 [a0 + 0x8]\n 83126: a4 = u8 [a0 + 0xa]\n 83129: a5 = u8 [a0 + 0xb]\n 83132: a1 = a1 << 0x8\n 83135: a1 = a1 | a2\n 83138: a4 = a4 << 0x10\n 83141: a5 = a5 << 0x18\n 83144: a4 = a4 | a5\n 83147: a1 = a1 | a4\n 83150: a2 = u8 [a0 + 0xd]\n 83153: a4 = u8 [a0 + 0xc]\n 83156: a5 = u8 [a0 + 0xe]\n 83159: a0 = u8 [a0 + 0xf]\n 83162: a2 = a2 << 0x8\n 83165: a2 = a2 | a4\n 83168: a5 = a5 << 0x10\n 83171: a0 = a0 << 0x18\n 83174: a0 = a0 | a5\n 83177: a0 = a0 | a2\n 83180: a0 = a0 << 0x20\n 83183: a0 = a0 | a1\n 83186: a4 = reverse a0\n 83188: a1 = reverse a3\n 83190: a2 = reverse t1\n 83192: a0 = reverse t0\n 83194: u64 [s1 + 0x238] = a0\n 83198: u64 [s1 + 0x228] = a2\n 83202: a0 = a0 | a2\n 83205: a2 = a1\n 83207: a1 = a1 | a4\n 83210: a1 = a1 | a0\n 83213: a1 = a1 >> 0x20\n 83216: u64 [s1 + 0x230] = a4\n 83220: a0 = a0 | a4\n 83223: a0 = a0 << 0x20\n 83226: a0 = a0 | a1\n 83229: jump @1022 if a0 != 0\n      : @1018 (gas: 5)\n 83233: u64 [s1 + 0x220] = a2\n 83237: i32 a0 = a2 + 0\n 83239: a1 = 0x20\n 83242: u64 [s1 + 0x218] = a0\n 83246: ra = 926, jump @0\n      : @1019 [@dyn 463] (gas: 51)\n 83253: u8 [a0 + 31] = 0\n 83256: u8 [a0 + 30] = 0\n 83259: u8 [a0 + 29] = 0\n 83262: u8 [a0 + 28] = 0\n 83265: u8 [a0 + 27] = 0\n 83268: u8 [a0 + 26] = 0\n 83271: u8 [a0 + 25] = 0\n 83274: u8 [a0 + 24] = 0\n 83277: u8 [a0 + 23] = 0\n 83280: u8 [a0 + 22] = 0\n 83283: u8 [a0 + 21] = 0\n 83286: u8 [a0 + 20] = 0\n 83289: u8 [a0 + 19] = 0\n 83292: u8 [a0 + 18] = 0\n 83295: u8 [a0 + 17] = 0\n 83298: u8 [a0 + 16] = 0\n 83301: u8 [a0 + 15] = 0\n 83304: u8 [a0 + 14] = 0\n 83307: u8 [a0 + 13] = 0\n 83310: u8 [a0 + 12] = 0\n 83313: u8 [a0 + 11] = 0\n 83316: u8 [a0 + 10] = 0\n 83319: u8 [a0 + 9] = 0\n 83322: u8 [a0 + 8] = 0\n 83325: u8 [a0 + 7] = 0\n 83328: u8 [a0 + 6] = 0\n 83331: u8 [a0 + 5] = 0\n 83334: u8 [a0 + 4] = 0\n 83337: u8 [a0 + 3] = 0xa0\n 83342: u8 [a0 + 2] = 0x79\n 83346: u8 [a0 + 1] = 0xc3\n 83351: u8 [a0 + 0] = 0x8\n 83354: a1 = u64 [s1 + 0x220]\n 83358: a0 = a1 + 0x4\n 83361: a1 = a0 <u a1\n 83364: a3 = u64 [s1 + 0x238]\n 83368: a2 = a3 + a1\n 83371: a3 = a2 <u a3\n 83374: a3 = a1 if a1 == 0\n 83377: a1 = u64 [s1 + 0x230]\n 83381: a3 = a3 + a1\n 83384: a1 = a3 <u a1\n 83387: a4 = u64 [s1 + 0x228]\n 83391: a4 = a4 + a1\n 83394: u64 [s1 + 0x568] = a2\n 83398: u64 [s1 + 0x560] = a0\n 83402: u64 [s1 + 0x570] = a3\n 83406: a0 = s1 + 0x580\n 83410: a1 = s1 + 0x560\n 83414: u64 [s1 + 0x578] = a4\n 83418: ra = 928, jump @866\n      : @1020 [@dyn 464] (gas: 5)\n 83424: a0 = u64 [s1 + 0x588]\n 83428: t0 = u64 [s1 + 0x598]\n 83432: t1 = u64 [s1 + 0x580]\n 83436: a3 = u64 [s1 + 0x590]\n 83440: fallthrough\n      : @1021 (gas: 27)\n 83441: a1 = u64 [s1 + 0x238]\n 83445: a4 = a0 ^ a1\n 83448: a5 = a0 <u a1\n 83451: ra = a1\n 83453: t2 = u64 [s1 + 0x220]\n 83457: a1 = t1 <u t2\n 83460: a5 = a1 if a4 == 0\n 83463: a2 = u64 [s1 + 0x230]\n 83467: a4 = a3 - a2\n 83470: a3 = a3 <u a2\n 83473: a2 = u64 [s1 + 0x228]\n 83477: a2 = t0 - a2\n 83480: a2 = a2 - a3\n 83483: a3 = a4 <u a5\n 83486: a2 = a2 - a3\n 83489: a4 = a4 - a5\n 83492: a0 = a0 - ra\n 83495: a1 = a0 - a1\n 83498: a0 = t1 - t2\n 83501: a1 = a1 | a2\n 83504: a2 = a0 | a4\n 83507: a2 = a2 | a1\n 83510: a1 = a1 | a4\n 83513: a2 = a2 >> 0x20\n 83516: a1 = a1 << 0x20\n 83519: a1 = a1 | a2\n 83522: jump @1023 if a1 == 0\n      : @1022 (gas: 1)\n 83525: trap\n      : @1023 (gas: 4)\n 83526: i32 a1 = a0 + 0\n 83528: u64 [s1 + 0x238] = a1\n 83532: a0 = u64 [s1 + 0x218]\n 83536: ra = 930, jump @0\n      : @1024 [@dyn 465] (gas: 6)\n 83543: i32 a1 = a0 + 0\n 83545: a0 = 0x1\n 83548: a2 = u64 [s1 + 0x238]\n 83552: ra = 0x3a4\n 83556: ecalli 12 // 'seal_return'\n 83558: fallthrough\n      : @1025 [@dyn 466] (gas: 42)\n 83559: sp = sp + 0xffffffffffffff40\n 83563: u64 [sp + 0xb8] = ra\n 83567: u64 [sp + 0xb0] = s0\n 83571: u64 [sp + 0xa8] = s1\n 83575: s0 = sp + 0xc0\n 83579: sp = sp & 0xfffffffffffffff0\n 83582: a4 = u64 [a1]\n 83584: u64 [sp + 0x18] = a4\n 83587: a4 = u64 [a1 + 0x8]\n 83590: u64 [sp + 0x10] = a4\n 83593: a4 = u64 [a1 + 0x10]\n 83596: u64 [sp + 0x8] = a4\n 83599: ra = u64 [a1 + 0x18]\n 83602: a5 = u64 [a2]\n 83604: a4 = u64 [a2 + 0x8]\n 83607: a1 = u64 [a2 + 0x10]\n 83610: a2 = u64 [a2 + 0x18]\n 83613: t0 = u64 [a3]\n 83615: t1 = u64 [a3 + 0x8]\n 83618: t2 = u64 [a3 + 0x10]\n 83621: a3 = u64 [a3 + 0x18]\n 83624: s1 = a0\n 83626: u64 [sp + 0x38] = a3\n 83629: u64 [sp + 0x30] = t2\n 83632: u64 [sp + 0x28] = t1\n 83635: u64 [sp + 0x20] = t0\n 83638: u64 [sp + 0x58] = a2\n 83641: u64 [sp + 0x50] = a1\n 83644: u64 [sp + 0x48] = a4\n 83647: u64 [sp + 0x40] = a5\n 83650: u64 [sp + 0x78] = ra\n 83653: a0 = u64 [sp + 0x8]\n 83656: u64 [sp + 0x70] = a0\n 83659: a0 = u64 [sp + 0x10]\n 83662: u64 [sp + 0x68] = a0\n 83665: a0 = sp + 0x80\n 83669: a1 = sp + 0x60\n 83672: a2 = sp + 0x40\n 83675: a3 = sp + 0x20\n 83678: a4 = u64 [sp + 0x18]\n 83681: u64 [sp + 0x60] = a4\n 83684: ra = 934, jump @1365\n      : @1026 [@dyn 467] (gas: 14)\n 83691: a0 = u64 [sp + 0x90]\n 83695: a1 = u64 [sp + 0x98]\n 83699: a2 = u64 [sp + 0x80]\n 83703: a3 = u64 [sp + 0x88]\n 83707: u64 [s1 + 0x10] = a0\n 83710: u64 [s1 + 0x18] = a1\n 83713: u64 [s1] = a2\n 83715: u64 [s1 + 0x8] = a3\n 83718: sp = s0 + 0xffffffffffffff40\n 83722: ra = u64 [sp + 0xb8]\n 83726: s0 = u64 [sp + 0xb0]\n 83730: s1 = u64 [sp + 0xa8]\n 83734: sp = sp + 0xc0\n 83738: ret\n      : @1027 (gas: 17)\n 83740: sp = sp + 0xffffffffffffffa0\n 83743: u64 [sp + 0x58] = ra\n 83746: u64 [sp + 0x50] = s0\n 83749: u64 [sp + 0x48] = s1\n 83752: a3 = u64 [a1 + 0x18]\n 83755: a4 = u64 [a1 + 0x10]\n 83758: a5 = u64 [a1 + 0x8]\n 83761: s1 = u64 [a1]\n 83763: a1 = a5 | a3\n 83766: a2 = s1 | a4\n 83769: a2 = a2 | a1\n 83772: a2 = a2 >> 0x20\n 83775: a1 = a1 | a4\n 83778: a1 = a1 << 0x20\n 83781: a1 = a1 | a2\n 83784: u64 [sp + 0x28] = a0\n 83787: jump @1034 if a1 != 0\n      : @1028 (gas: 19)\n 83791: a0 = s1 + 0x20\n 83794: u64 [sp + 0x30] = a0\n 83797: a0 = a0 <u s1\n 83800: a1 = a5 + a0\n 83803: u64 [sp + 0x40] = a1\n 83806: u64 [sp + 0x8] = a5\n 83809: s0 = a1 <u a5\n 83812: s0 = a0 if a0 == 0\n 83815: s0 = s0 + a4\n 83818: u64 [sp + 0x10] = a4\n 83821: a0 = s0 <u a4\n 83824: u64 [sp + 0x18] = a3\n 83827: a0 = a0 + a3\n 83830: u64 [sp + 0x38] = a0\n 83833: u64 [sp] = s1\n 83835: i32 a0 = s1 + 0\n 83837: a1 = 0x20\n 83840: s1 = 0x20\n 83843: ra = 936, jump @0\n      : @1029 [@dyn 468] (gas: 45)\n 83850: u8 [a0 + 0x1f] = s1\n 83853: a1 = u64 [sp + 0x30]\n 83856: s1 = a1\n 83858: a1 = a1 | s0\n 83861: a2 = u64 [sp + 0x40]\n 83864: a4 = u64 [sp + 0x38]\n 83867: a2 = a2 | a4\n 83870: a1 = a1 | a2\n 83873: a1 = a1 >> 0x20\n 83876: u64 [sp + 0x20] = s0\n 83879: a2 = a2 | s0\n 83882: a2 = a2 << 0x20\n 83885: a1 = a1 | a2\n 83888: u8 [a0 + 30] = 0\n 83891: u8 [a0 + 29] = 0\n 83894: u8 [a0 + 28] = 0\n 83897: u8 [a0 + 27] = 0\n 83900: u8 [a0 + 26] = 0\n 83903: u8 [a0 + 25] = 0\n 83906: u8 [a0 + 24] = 0\n 83909: u8 [a0 + 23] = 0\n 83912: u8 [a0 + 22] = 0\n 83915: u8 [a0 + 21] = 0\n 83918: u8 [a0 + 20] = 0\n 83921: u8 [a0 + 19] = 0\n 83924: u8 [a0 + 18] = 0\n 83927: u8 [a0 + 17] = 0\n 83930: u8 [a0 + 16] = 0\n 83933: u8 [a0 + 15] = 0\n 83936: u8 [a0 + 14] = 0\n 83939: u8 [a0 + 13] = 0\n 83942: u8 [a0 + 12] = 0\n 83945: u8 [a0 + 11] = 0\n 83948: u8 [a0 + 10] = 0\n 83951: u8 [a0 + 9] = 0\n 83954: u8 [a0 + 8] = 0\n 83957: u8 [a0 + 7] = 0\n 83960: u8 [a0 + 6] = 0\n 83963: u8 [a0 + 5] = 0\n 83966: u8 [a0 + 4] = 0\n 83969: u8 [a0 + 3] = 0\n 83972: u8 [a0 + 2] = 0\n 83975: u8 [a0 + 1] = 0\n 83978: u8 [a0 + 0] = 0\n 83980: jump @1034 if a1 != 0\n      : @1030 (gas: 4)\n 83984: i32 s0 = s1 + 0\n 83986: a1 = 0x20\n 83989: a0 = s0\n 83991: ra = 938, jump @0\n      : @1031 [@dyn 469] (gas: 41)\n 83998: u8 [a0 + 31] = 0x1f\n 84002: u8 [a0 + 30] = 0\n 84005: u8 [a0 + 29] = 0\n 84008: u8 [a0 + 28] = 0\n 84011: u8 [a0 + 27] = 0\n 84014: u8 [a0 + 26] = 0\n 84017: u8 [a0 + 25] = 0\n 84020: u8 [a0 + 24] = 0\n 84023: u8 [a0 + 23] = 0\n 84026: u8 [a0 + 22] = 0\n 84029: u8 [a0 + 21] = 0\n 84032: u8 [a0 + 20] = 0\n 84035: u8 [a0 + 19] = 0\n 84038: u8 [a0 + 18] = 0\n 84041: u8 [a0 + 17] = 0\n 84044: u8 [a0 + 16] = 0\n 84047: u8 [a0 + 15] = 0\n 84050: u8 [a0 + 14] = 0\n 84053: u8 [a0 + 13] = 0\n 84056: u8 [a0 + 12] = 0\n 84059: u8 [a0 + 11] = 0\n 84062: u8 [a0 + 10] = 0\n 84065: u8 [a0 + 9] = 0\n 84068: u8 [a0 + 8] = 0\n 84071: u8 [a0 + 7] = 0\n 84074: u8 [a0 + 6] = 0\n 84077: u8 [a0 + 5] = 0\n 84080: u8 [a0 + 4] = 0\n 84083: u8 [a0 + 3] = 0\n 84086: u8 [a0 + 2] = 0\n 84089: u8 [a0 + 1] = 0\n 84092: a1 = u64 [sp + 0x20]\n 84095: a2 = u64 [sp + 0x38]\n 84098: a1 = a1 | a2\n 84101: a2 = 0xffffffe0\n 84111: a2 = s1 <u a2\n 84114: a3 = u64 [sp + 0x40]\n 84117: a2 = 0 if a3 != 0\n 84119: a2 = 0 if a1 != 0\n 84121: u8 [a0 + 0] = 0\n 84123: jump @1034 if a2 == 0\n      : @1032 (gas: 3)\n 84127: i32 a0 = s0 + 0x20\n 84130: a1 = 0x20\n 84133: ra = 940, jump @0\n      : @1033 [@dyn 470] (gas: 55)\n 84140: u8 [a0 + 31] = 0\n 84143: u8 [a0 + 30] = 0x72\n 84147: u8 [a0 + 29] = 0x65\n 84151: u8 [a0 + 28] = 0x79\n 84155: u8 [a0 + 27] = 0x75\n 84159: u8 [a0 + 26] = 0x62\n 84163: u8 [a0 + 25] = 0x20\n 84167: u8 [a0 + 24] = 0x65\n 84171: u8 [a0 + 23] = 0x68\n 84175: u8 [a0 + 22] = 0x74\n 84179: u8 [a0 + 21] = 0x20\n 84183: u8 [a0 + 20] = 0x74\n 84187: u8 [a0 + 19] = 0x6f\n 84191: u8 [a0 + 18] = 0x6e\n 84195: u8 [a0 + 17] = 0x20\n 84199: u8 [a0 + 16] = 0x73\n 84203: u8 [a0 + 15] = 0x69\n 84207: u8 [a0 + 14] = 0x20\n 84211: u8 [a0 + 13] = 0x72\n 84215: u8 [a0 + 12] = 0x65\n 84219: u8 [a0 + 11] = 0x6c\n 84223: u8 [a0 + 10] = 0x6c\n 84227: u8 [a0 + 9] = 0x61\n 84231: u8 [a0 + 8] = 0x63\n 84235: u8 [a0 + 7] = 0x20\n 84239: u8 [a0 + 6] = 0x3a\n 84243: a5 = 0x77\n 84246: u8 [a0 + 0x5] = a5\n 84249: u8 [a0 + 4] = 0x6f\n 84253: u8 [a0 + 3] = 0x72\n 84257: u8 [a0 + 2] = 0x63\n 84261: u8 [a0 + 1] = 0x73\n 84265: u8 [a0 + 0] = 0x45\n 84268: a1 = u64 [sp]\n 84270: a0 = a1 + 0x60\n 84273: a1 = a0 <u a1\n 84276: a3 = u64 [sp + 0x8]\n 84279: a2 = a3 + a1\n 84282: a3 = a2 <u a3\n 84285: a3 = a1 if a1 == 0\n 84288: a1 = u64 [sp + 0x10]\n 84291: a3 = a3 + a1\n 84294: a1 = a3 <u a1\n 84297: a4 = u64 [sp + 0x18]\n 84300: a1 = a1 + a4\n 84303: a4 = u64 [sp + 0x28]\n 84306: u64 [a4] = a0\n 84308: u64 [a4 + 0x8] = a2\n 84311: u64 [a4 + 0x10] = a3\n 84314: u64 [a4 + 0x18] = a1\n 84317: ra = u64 [sp + 0x58]\n 84320: s0 = u64 [sp + 0x50]\n 84323: s1 = u64 [sp + 0x48]\n 84326: sp = sp + 0x60\n 84329: ret\n      : @1034 (gas: 1)\n 84331: trap\n      : @1035 (gas: 17)\n 84332: sp = sp + 0xffffffffffffffa0\n 84335: u64 [sp + 0x58] = ra\n 84338: u64 [sp + 0x50] = s0\n 84341: u64 [sp + 0x48] = s1\n 84344: a3 = u64 [a1 + 0x18]\n 84347: a4 = u64 [a1 + 0x10]\n 84350: a5 = u64 [a1 + 0x8]\n 84353: s1 = u64 [a1]\n 84355: a1 = a5 | a3\n 84358: a2 = s1 | a4\n 84361: a2 = a2 | a1\n 84364: a2 = a2 >> 0x20\n 84367: a1 = a1 | a4\n 84370: a1 = a1 << 0x20\n 84373: a1 = a1 | a2\n 84376: u64 [sp + 0x28] = a0\n 84379: jump @1042 if a1 != 0\n      : @1036 (gas: 19)\n 84383: a0 = s1 + 0x20\n 84386: u64 [sp + 0x30] = a0\n 84389: a0 = a0 <u s1\n 84392: a1 = a5 + a0\n 84395: u64 [sp + 0x40] = a1\n 84398: u64 [sp + 0x8] = a5\n 84401: s0 = a1 <u a5\n 84404: s0 = a0 if a0 == 0\n 84407: s0 = s0 + a4\n 84410: u64 [sp + 0x10] = a4\n 84413: a0 = s0 <u a4\n 84416: u64 [sp + 0x18] = a3\n 84419: a0 = a0 + a3\n 84422: u64 [sp + 0x38] = a0\n 84425: u64 [sp] = s1\n 84427: i32 a0 = s1 + 0\n 84429: a1 = 0x20\n 84432: s1 = 0x20\n 84435: ra = 942, jump @0\n      : @1037 [@dyn 471] (gas: 45)\n 84442: u8 [a0 + 0x1f] = s1\n 84445: a1 = u64 [sp + 0x30]\n 84448: s1 = a1\n 84450: a1 = a1 | s0\n 84453: a2 = u64 [sp + 0x40]\n 84456: a4 = u64 [sp + 0x38]\n 84459: a2 = a2 | a4\n 84462: a1 = a1 | a2\n 84465: a1 = a1 >> 0x20\n 84468: u64 [sp + 0x20] = s0\n 84471: a2 = a2 | s0\n 84474: a2 = a2 << 0x20\n 84477: a1 = a1 | a2\n 84480: u8 [a0 + 30] = 0\n 84483: u8 [a0 + 29] = 0\n 84486: u8 [a0 + 28] = 0\n 84489: u8 [a0 + 27] = 0\n 84492: u8 [a0 + 26] = 0\n 84495: u8 [a0 + 25] = 0\n 84498: u8 [a0 + 24] = 0\n 84501: u8 [a0 + 23] = 0\n 84504: u8 [a0 + 22] = 0\n 84507: u8 [a0 + 21] = 0\n 84510: u8 [a0 + 20] = 0\n 84513: u8 [a0 + 19] = 0\n 84516: u8 [a0 + 18] = 0\n 84519: u8 [a0 + 17] = 0\n 84522: u8 [a0 + 16] = 0\n 84525: u8 [a0 + 15] = 0\n 84528: u8 [a0 + 14] = 0\n 84531: u8 [a0 + 13] = 0\n 84534: u8 [a0 + 12] = 0\n 84537: u8 [a0 + 11] = 0\n 84540: u8 [a0 + 10] = 0\n 84543: u8 [a0 + 9] = 0\n 84546: u8 [a0 + 8] = 0\n 84549: u8 [a0 + 7] = 0\n 84552: u8 [a0 + 6] = 0\n 84555: u8 [a0 + 5] = 0\n 84558: u8 [a0 + 4] = 0\n 84561: u8 [a0 + 3] = 0\n 84564: u8 [a0 + 2] = 0\n 84567: u8 [a0 + 1] = 0\n 84570: u8 [a0 + 0] = 0\n 84572: jump @1042 if a1 != 0\n      : @1038 (gas: 4)\n 84576: i32 s0 = s1 + 0\n 84578: a1 = 0x20\n 84581: a0 = s0\n 84583: ra = 944, jump @0\n      : @1039 [@dyn 472] (gas: 41)\n 84590: u8 [a0 + 31] = 0x1e\n 84594: u8 [a0 + 30] = 0\n 84597: u8 [a0 + 29] = 0\n 84600: u8 [a0 + 28] = 0\n 84603: u8 [a0 + 27] = 0\n 84606: u8 [a0 + 26] = 0\n 84609: u8 [a0 + 25] = 0\n 84612: u8 [a0 + 24] = 0\n 84615: u8 [a0 + 23] = 0\n 84618: u8 [a0 + 22] = 0\n 84621: u8 [a0 + 21] = 0\n 84624: u8 [a0 + 20] = 0\n 84627: u8 [a0 + 19] = 0\n 84630: u8 [a0 + 18] = 0\n 84633: u8 [a0 + 17] = 0\n 84636: u8 [a0 + 16] = 0\n 84639: u8 [a0 + 15] = 0\n 84642: u8 [a0 + 14] = 0\n 84645: u8 [a0 + 13] = 0\n 84648: u8 [a0 + 12] = 0\n 84651: u8 [a0 + 11] = 0\n 84654: u8 [a0 + 10] = 0\n 84657: u8 [a0 + 9] = 0\n 84660: u8 [a0 + 8] = 0\n 84663: u8 [a0 + 7] = 0\n 84666: u8 [a0 + 6] = 0\n 84669: u8 [a0 + 5] = 0\n 84672: u8 [a0 + 4] = 0\n 84675: u8 [a0 + 3] = 0\n 84678: u8 [a0 + 2] = 0\n 84681: u8 [a0 + 1] = 0\n 84684: a1 = u64 [sp + 0x20]\n 84687: a2 = u64 [sp + 0x38]\n 84690: a1 = a1 | a2\n 84693: a2 = 0xffffffe0\n 84703: a2 = s1 <u a2\n 84706: a3 = u64 [sp + 0x40]\n 84709: a2 = 0 if a3 != 0\n 84711: a2 = 0 if a1 != 0\n 84713: u8 [a0 + 0] = 0\n 84715: jump @1042 if a2 == 0\n      : @1040 (gas: 3)\n 84719: i32 a0 = s0 + 0x20\n 84722: a1 = 0x20\n 84725: ra = 946, jump @0\n      : @1041 [@dyn 473] (gas: 54)\n 84732: u8 [a0 + 22] = 0x79\n 84736: u8 [a0 + 17] = 0x6c\n 84740: u8 [a0 + 25] = 0x61\n 84744: u8 [a0 + 20] = 0x61\n 84748: u8 [a0 + 16] = 0x61\n 84752: u8 [a0 + 28] = 0x65\n 84756: u8 [a0 + 19] = 0x65\n 84760: u8 [a0 + 14] = 0x65\n 84764: u8 [a0 + 13] = 0x74\n 84768: u8 [a0 + 12] = 0x75\n 84772: u8 [a0 + 11] = 0x70\n 84776: u8 [a0 + 26] = 0x69\n 84780: u8 [a0 + 9] = 0x69\n 84784: u8 [a0 + 29] = 0x64\n 84788: u8 [a0 + 21] = 0x64\n 84792: u8 [a0 + 8] = 0x64\n 84796: u8 [a0 + 31] = 0\n 84799: u8 [a0 + 30] = 0\n 84802: u8 [a0 + 23] = 0x20\n 84806: u8 [a0 + 15] = 0x20\n 84810: u8 [a0 + 7] = 0x20\n 84814: u8 [a0 + 6] = 0x3a\n 84818: u8 [a0 + 5] = 0x77\n 84822: u8 [a0 + 4] = 0x6f\n 84826: u8 [a0 + 24] = 0x72\n 84830: u8 [a0 + 18] = 0x72\n 84834: u8 [a0 + 3] = 0x72\n 84838: u8 [a0 + 2] = 0x63\n 84842: u8 [a0 + 27] = 0x73\n 84846: u8 [a0 + 10] = 0x73\n 84850: u8 [a0 + 1] = 0x73\n 84854: u8 [a0 + 0] = 0x45\n 84857: a1 = u64 [sp]\n 84859: a0 = a1 + 0x60\n 84862: a1 = a0 <u a1\n 84865: a3 = u64 [sp + 0x8]\n 84868: a2 = a3 + a1\n 84871: a3 = a2 <u a3\n 84874: a3 = a1 if a1 == 0\n 84877: a1 = u64 [sp + 0x10]\n 84880: a3 = a3 + a1\n 84883: a1 = a3 <u a1\n 84886: a4 = u64 [sp + 0x18]\n 84889: a1 = a1 + a4\n 84892: a4 = u64 [sp + 0x28]\n 84895: u64 [a4] = a0\n 84897: u64 [a4 + 0x8] = a2\n 84900: u64 [a4 + 0x10] = a3\n 84903: u64 [a4 + 0x18] = a1\n 84906: ra = u64 [sp + 0x58]\n 84909: s0 = u64 [sp + 0x50]\n 84912: s1 = u64 [sp + 0x48]\n 84915: sp = sp + 0x60\n 84918: ret\n      : @1042 (gas: 1)\n 84920: trap\n      : @1043 [@dyn 474] (gas: 74)\n 84921: a2 = reverse s1\n 84923: a1 = u64 [sp + 0x48]\n 84926: a3 = reverse a1\n 84928: a1 = u64 [sp + 0x50]\n 84931: a5 = reverse a1\n 84933: a1 = u64 [sp + 0x58]\n 84936: a4 = reverse a1\n 84938: u8 [a0 + 0x18] = a4\n 84941: u8 [a0 + 0x10] = a5\n 84944: u8 [a0 + 0x8] = a3\n 84947: u8 [a0] = a2\n 84949: a1 = a4 >> 0x38\n 84952: u8 [a0 + 0x1f] = a1\n 84955: a1 = a4 >> 0x30\n 84958: u8 [a0 + 0x1e] = a1\n 84961: a1 = a4 >> 0x28\n 84964: u8 [a0 + 0x1d] = a1\n 84967: a1 = a4 >> 0x20\n 84970: u8 [a0 + 0x1c] = a1\n 84973: a1 = a4 >> 0x18\n 84976: u8 [a0 + 0x1b] = a1\n 84979: a1 = a4 >> 0x10\n 84982: u8 [a0 + 0x1a] = a1\n 84985: u64 [sp + 0x30] = a4\n 84988: a1 = a4 >> 0x8\n 84991: u8 [a0 + 0x19] = a1\n 84994: a1 = a5 >> 0x38\n 84997: u8 [a0 + 0x17] = a1\n 85000: a1 = a5 >> 0x30\n 85003: u8 [a0 + 0x16] = a1\n 85006: a1 = a5 >> 0x28\n 85009: u8 [a0 + 0x15] = a1\n 85012: a1 = a5 >> 0x20\n 85015: u8 [a0 + 0x14] = a1\n 85018: a1 = a5 >> 0x18\n 85021: u8 [a0 + 0x13] = a1\n 85024: a1 = a5 >> 0x10\n 85027: u8 [a0 + 0x12] = a1\n 85030: u64 [sp + 0x28] = a5\n 85033: a1 = a5 >> 0x8\n 85036: u8 [a0 + 0x11] = a1\n 85039: a1 = a3 >> 0x38\n 85042: u8 [a0 + 0xf] = a1\n 85045: a1 = a3 >> 0x30\n 85048: u8 [a0 + 0xe] = a1\n 85051: a1 = a3 >> 0x28\n 85054: u8 [a0 + 0xd] = a1\n 85057: a1 = a3 >> 0x20\n 85060: u8 [a0 + 0xc] = a1\n 85063: a1 = a3 >> 0x18\n 85066: u8 [a0 + 0xb] = a1\n 85069: a1 = a3 >> 0x10\n 85072: u8 [a0 + 0xa] = a1\n 85075: u64 [sp + 0x38] = a3\n 85078: a1 = a3 >> 0x8\n 85081: u8 [a0 + 0x9] = a1\n 85084: a1 = a2 >> 0x38\n 85087: u8 [a0 + 0x7] = a1\n 85090: a1 = a2 >> 0x30\n 85093: u8 [a0 + 0x6] = a1\n 85096: a1 = a2 >> 0x28\n 85099: u8 [a0 + 0x5] = a1\n 85102: a1 = a2 >> 0x20\n 85105: u8 [a0 + 0x4] = a1\n 85108: a1 = a2 >> 0x18\n 85111: u8 [a0 + 0x3] = a1\n 85114: a1 = a2 >> 0x10\n 85117: u8 [a0 + 0x2] = a1\n 85120: u64 [sp + 0x40] = a2\n 85123: a1 = a2 >> 0x8\n 85126: u8 [a0 + 0x1] = a1\n 85129: a0 = 0x20\n 85132: a1 = 0x20\n 85135: ra = 950, jump @0\n      : @1044 [@dyn 475] (gas: 35)\n 85142: u8 [a0 + 31] = 0x3\n 85146: u8 [a0 + 30] = 0\n 85149: u8 [a0 + 29] = 0\n 85152: u8 [a0 + 28] = 0\n 85155: u8 [a0 + 27] = 0\n 85158: u8 [a0 + 26] = 0\n 85161: u8 [a0 + 25] = 0\n 85164: u8 [a0 + 24] = 0\n 85167: u8 [a0 + 23] = 0\n 85170: u8 [a0 + 22] = 0\n 85173: u8 [a0 + 21] = 0\n 85176: u8 [a0 + 20] = 0\n 85179: u8 [a0 + 19] = 0\n 85182: u8 [a0 + 18] = 0\n 85185: u8 [a0 + 17] = 0\n 85188: u8 [a0 + 16] = 0\n 85191: u8 [a0 + 15] = 0\n 85194: u8 [a0 + 14] = 0\n 85197: u8 [a0 + 13] = 0\n 85200: u8 [a0 + 12] = 0\n 85203: u8 [a0 + 11] = 0\n 85206: u8 [a0 + 10] = 0\n 85209: u8 [a0 + 9] = 0\n 85212: u8 [a0 + 8] = 0\n 85215: u8 [a0 + 7] = 0\n 85218: u8 [a0 + 6] = 0\n 85221: u8 [a0 + 5] = 0\n 85224: u8 [a0 + 4] = 0\n 85227: u8 [a0 + 3] = 0\n 85230: u8 [a0 + 2] = 0\n 85233: u8 [a0 + 1] = 0\n 85236: u8 [a0 + 0] = 0\n 85238: a1 = 0x40\n 85241: a0 = 0\n 85243: ra = 952, jump @0\n      : @1045 [@dyn 476] (gas: 14)\n 85250: i32 a0 = a0 + 0\n 85252: i32 a2 = sp + 0x1a0\n 85256: a1 = 0x40\n 85259: ecalli 8 // 'hash_keccak_256'\n 85261: a0 = u64 [sp + 0x1a0]\n 85265: u64 [sp + 0x58] = a0\n 85268: a0 = u64 [sp + 0x1a8]\n 85272: u64 [sp + 0x50] = a0\n 85275: a0 = u64 [sp + 0x1b0]\n 85279: u64 [sp + 0x48] = a0\n 85282: s1 = u64 [sp + 0x1b8]\n 85286: a1 = 0x20\n 85289: a0 = 0\n 85291: ra = 954, jump @0\n      : @1046 [@dyn 477] (gas: 75)\n 85298: a1 = u64 [sp + 0x60]\n 85301: a2 = reverse a1\n 85303: a1 = u64 [sp + 0x68]\n 85306: a3 = reverse a1\n 85308: a1 = u64 [sp + 0x70]\n 85311: a5 = reverse a1\n 85313: a1 = u64 [sp + 0x78]\n 85316: a4 = reverse a1\n 85318: a1 = a4 >> 0x38\n 85321: u8 [a0 + 0x1f] = a1\n 85324: a1 = a4 >> 0x30\n 85327: u8 [a0 + 0x1e] = a1\n 85330: a1 = a4 >> 0x28\n 85333: u8 [a0 + 0x1d] = a1\n 85336: a1 = a4 >> 0x20\n 85339: u8 [a0 + 0x1c] = a1\n 85342: a1 = a4 >> 0x18\n 85345: u8 [a0 + 0x1b] = a1\n 85348: a1 = a4 >> 0x10\n 85351: u8 [a0 + 0x1a] = a1\n 85354: a1 = a4 >> 0x8\n 85357: u8 [a0 + 0x19] = a1\n 85360: u64 [sp + 0x10] = a4\n 85363: u8 [a0 + 0x18] = a4\n 85366: a1 = a5 >> 0x38\n 85369: u8 [a0 + 0x17] = a1\n 85372: a1 = a5 >> 0x30\n 85375: u8 [a0 + 0x16] = a1\n 85378: a1 = a5 >> 0x28\n 85381: u8 [a0 + 0x15] = a1\n 85384: a1 = a5 >> 0x20\n 85387: u8 [a0 + 0x14] = a1\n 85390: a1 = a5 >> 0x18\n 85393: u8 [a0 + 0x13] = a1\n 85396: a1 = a5 >> 0x10\n 85399: u8 [a0 + 0x12] = a1\n 85402: a1 = a5 >> 0x8\n 85405: u8 [a0 + 0x11] = a1\n 85408: u64 [sp + 0x8] = a5\n 85411: u8 [a0 + 0x10] = a5\n 85414: a1 = a3 >> 0x38\n 85417: u8 [a0 + 0xf] = a1\n 85420: a1 = a3 >> 0x30\n 85423: u8 [a0 + 0xe] = a1\n 85426: a1 = a3 >> 0x28\n 85429: u8 [a0 + 0xd] = a1\n 85432: a1 = a3 >> 0x20\n 85435: u8 [a0 + 0xc] = a1\n 85438: a1 = a3 >> 0x18\n 85441: u8 [a0 + 0xb] = a1\n 85444: a1 = a3 >> 0x10\n 85447: u8 [a0 + 0xa] = a1\n 85450: a1 = a3 >> 0x8\n 85453: u8 [a0 + 0x9] = a1\n 85456: u64 [sp + 0x18] = a3\n 85459: u8 [a0 + 0x8] = a3\n 85462: a1 = a2 >> 0x38\n 85465: u8 [a0 + 0x7] = a1\n 85468: a1 = a2 >> 0x30\n 85471: u8 [a0 + 0x6] = a1\n 85474: a1 = a2 >> 0x28\n 85477: u8 [a0 + 0x5] = a1\n 85480: a1 = a2 >> 0x20\n 85483: u8 [a0 + 0x4] = a1\n 85486: a1 = a2 >> 0x18\n 85489: u8 [a0 + 0x3] = a1\n 85492: a1 = a2 >> 0x10\n 85495: u8 [a0 + 0x2] = a1\n 85498: a1 = a2 >> 0x8\n 85501: u8 [a0 + 0x1] = a1\n 85504: u64 [sp + 0x20] = a2\n 85507: u8 [a0] = a2\n 85509: a0 = 0x20\n 85512: a1 = 0x20\n 85515: ra = 956, jump @0\n      : @1047 [@dyn 478] (gas: 66)\n 85522: a1 = s1 >> 0x38\n 85525: u8 [a0 + 0x1f] = a1\n 85528: a1 = s1 >> 0x30\n 85531: u8 [a0 + 0x1e] = a1\n 85534: a1 = s1 >> 0x28\n 85537: u8 [a0 + 0x1d] = a1\n 85540: a1 = s1 >> 0x20\n 85543: u8 [a0 + 0x1c] = a1\n 85546: a1 = s1 >> 0x18\n 85549: u8 [a0 + 0x1b] = a1\n 85552: a1 = s1 >> 0x10\n 85555: u8 [a0 + 0x1a] = a1\n 85558: a1 = s1 >> 0x8\n 85561: u8 [a0 + 0x19] = a1\n 85564: u8 [a0 + 0x18] = s1\n 85567: a2 = u64 [sp + 0x48]\n 85570: a1 = a2 >> 0x38\n 85573: u8 [a0 + 0x17] = a1\n 85576: a1 = a2 >> 0x30\n 85579: u8 [a0 + 0x16] = a1\n 85582: a1 = a2 >> 0x28\n 85585: u8 [a0 + 0x15] = a1\n 85588: a1 = a2 >> 0x20\n 85591: u8 [a0 + 0x14] = a1\n 85594: a1 = a2 >> 0x18\n 85597: u8 [a0 + 0x13] = a1\n 85600: a1 = a2 >> 0x10\n 85603: u8 [a0 + 0x12] = a1\n 85606: a1 = a2 >> 0x8\n 85609: u8 [a0 + 0x11] = a1\n 85612: u8 [a0 + 0x10] = a2\n 85615: a2 = u64 [sp + 0x50]\n 85618: a1 = a2 >> 0x38\n 85621: u8 [a0 + 0xf] = a1\n 85624: a1 = a2 >> 0x30\n 85627: u8 [a0 + 0xe] = a1\n 85630: a1 = a2 >> 0x28\n 85633: u8 [a0 + 0xd] = a1\n 85636: a1 = a2 >> 0x20\n 85639: u8 [a0 + 0xc] = a1\n 85642: a1 = a2 >> 0x18\n 85645: u8 [a0 + 0xb] = a1\n 85648: a1 = a2 >> 0x10\n 85651: u8 [a0 + 0xa] = a1\n 85654: a1 = a2 >> 0x8\n 85657: u8 [a0 + 0x9] = a1\n 85660: u8 [a0 + 0x8] = a2\n 85663: a2 = u64 [sp + 0x58]\n 85666: a1 = a2 >> 0x38\n 85669: u8 [a0 + 0x7] = a1\n 85672: a1 = a2 >> 0x30\n 85675: u8 [a0 + 0x6] = a1\n 85678: a1 = a2 >> 0x28\n 85681: u8 [a0 + 0x5] = a1\n 85684: a1 = a2 >> 0x20\n 85687: u8 [a0 + 0x4] = a1\n 85690: a1 = a2 >> 0x18\n 85693: u8 [a0 + 0x3] = a1\n 85696: a1 = a2 >> 0x10\n 85699: u8 [a0 + 0x2] = a1\n 85702: a1 = a2 >> 0x8\n 85705: u8 [a0 + 0x1] = a1\n 85708: u8 [a0] = a2\n 85710: a1 = 0x40\n 85713: a0 = 0\n 85715: ra = 958, jump @0\n      : @1048 [@dyn 479] (gas: 53)\n 85722: i32 a0 = a0 + 0\n 85724: i32 a2 = sp + 0x1a0\n 85728: a1 = 0x40\n 85731: ecalli 8 // 'hash_keccak_256'\n 85733: a0 = u64 [sp + 0x1b8]\n 85737: a1 = u64 [sp + 0x1b0]\n 85741: a2 = u64 [sp + 0x1a8]\n 85745: a3 = u64 [sp + 0x1a0]\n 85749: a0 = reverse a0\n 85751: u64 [sp + 0x70] = a0\n 85754: a0 = reverse a1\n 85756: u64 [sp + 0x50] = a0\n 85759: a0 = reverse a2\n 85761: u64 [sp + 0x78] = a0\n 85764: s1 = reverse a3\n 85766: i32 a0 = sp + 0x140\n 85770: ecalli 5 // 'caller'\n 85772: a0 = u64 [sp + 0x148]\n 85776: a1 = u64 [sp + 0x140]\n 85780: a2 = i32 [sp + 0x150]\n 85784: a0 = reverse a0\n 85786: a3 = a0 >> 0x20\n 85789: a1 = reverse a1\n 85791: a4 = a1 << 0x20\n 85794: a3 = a3 | a4\n 85797: u64 [sp + 0x68] = a3\n 85800: a0 = a0 << 0x20\n 85803: a2 = reverse a2\n 85805: a2 = a2 >> 0x20\n 85808: a0 = a0 | a2\n 85811: u64 [sp + 0x60] = a0\n 85814: a1 = a1 >> 0x20\n 85817: u64 [sp + 0x58] = a1\n 85820: u64 [sp + 0x48] = s1\n 85823: u64 [sp + 0x198] = s1\n 85827: s1 = u64 [sp + 0x50]\n 85830: a0 = u64 [sp + 0x78]\n 85833: u64 [sp + 0x190] = a0\n 85837: u64 [sp + 0x188] = s1\n 85841: a0 = u64 [sp + 0x70]\n 85844: u64 [sp + 0x180] = a0\n 85848: u64 [sp + 440] = 0\n 85852: u64 [sp + 432] = 0\n 85856: u64 [sp + 424] = 0\n 85860: u64 [sp + 416] = 0\n 85864: u32 [sp + 352] = 0x20\n 85869: i32 a1 = sp + 0x180\n 85873: i32 a3 = sp + 0x1a0\n 85877: i32 a4 = sp + 0x160\n 85881: a2 = 0xffffffffffffffff\n 85884: a0 = 0\n 85886: ecalli 7 // 'get_storage'\n 85888: fallthrough\n      : @1049 (gas: 12)\n 85889: a0 = u32 [sp + 0x1b0]\n 85893: a1 = u64 [sp + 0x1a0]\n 85897: a2 = u64 [sp + 0x1a8]\n 85901: a3 = u64 [sp + 0x58]\n 85904: a0 = a0 ^ a3\n 85907: a3 = u64 [sp + 0x60]\n 85910: a1 = a1 ^ a3\n 85913: a0 = a0 | a1\n 85916: a1 = u64 [sp + 0x68]\n 85919: a1 = a1 ^ a2\n 85922: a0 = a0 | a1\n 85925: jump @1058 if a0 != 0\n      : @1050 (gas: 31)\n 85929: a0 = u64 [sp + 0x70]\n 85932: a1 = a0 + 0x2\n 85935: a0 = a1 <u a0\n 85938: a2 = s1 + a0\n 85941: s1 = a2 <u s1\n 85944: s1 = a0 if a0 == 0\n 85947: a0 = u64 [sp + 0x78]\n 85950: a3 = a0 + s1\n 85953: s1 = a2\n 85955: a0 = a3 <u a0\n 85958: a2 = u64 [sp + 0x48]\n 85961: a0 = a0 + a2\n 85964: u64 [sp + 0x78] = a1\n 85967: u64 [sp + 0x180] = a1\n 85971: u64 [sp + 0x188] = s1\n 85975: u64 [sp + 0x70] = a3\n 85978: u64 [sp + 0x190] = a3\n 85982: u64 [sp + 0x68] = a0\n 85985: u64 [sp + 0x198] = a0\n 85989: u64 [sp + 440] = 0\n 85993: u64 [sp + 432] = 0\n 85997: u64 [sp + 424] = 0\n 86001: u64 [sp + 416] = 0\n 86005: u32 [sp + 352] = 0x20\n 86010: i32 a1 = sp + 0x180\n 86014: i32 a3 = sp + 0x1a0\n 86018: i32 a4 = sp + 0x160\n 86022: a2 = 0xffffffffffffffff\n 86025: a0 = 0\n 86027: ecalli 7 // 'get_storage'\n 86029: fallthrough\n      : @1051 (gas: 2)\n 86030: a0 = u8 [sp + 0x1a0]\n 86034: jump @1063 if a0 != 0\n      : @1052 (gas: 19)\n 86038: a0 = u64 [sp + 0x70]\n 86041: u64 [sp + 0x190] = a0\n 86045: u64 [sp + 0x188] = s1\n 86049: a0 = u64 [sp + 0x78]\n 86052: u64 [sp + 0x180] = a0\n 86056: a0 = u64 [sp + 0x68]\n 86059: u64 [sp + 0x198] = a0\n 86063: u64 [sp + 440] = 0\n 86067: u64 [sp + 432] = 0\n 86071: u64 [sp + 424] = 0\n 86075: u64 [sp + 416] = 0\n 86079: u32 [sp + 352] = 0x20\n 86084: i32 a1 = sp + 0x180\n 86088: i32 a3 = sp + 0x1a0\n 86092: i32 a4 = sp + 0x160\n 86096: a2 = 0xffffffffffffffff\n 86099: a0 = 0\n 86101: ecalli 7 // 'get_storage'\n 86103: fallthrough\n      : @1053 (gas: 2)\n 86104: a0 = u8 [sp + 0x1a1]\n 86108: jump @1068 if a0 != 0\n      : @1054 (gas: 45)\n 86112: a0 = u64 [sp + 0x70]\n 86115: u64 [sp + 0x190] = a0\n 86119: u64 [sp + 0x188] = s1\n 86123: u64 [sp + 0x60] = s1\n 86126: a0 = u64 [sp + 0x78]\n 86129: u64 [sp + 0x180] = a0\n 86133: s1 = u64 [sp + 0x68]\n 86136: u64 [sp + 0x198] = s1\n 86140: u64 [sp + 440] = 0\n 86144: u64 [sp + 432] = 0\n 86148: u64 [sp + 424] = 0\n 86152: u64 [sp + 416] = 0\n 86156: u32 [sp + 352] = 0x20\n 86161: i32 a1 = sp + 0x180\n 86165: i32 a3 = sp + 0x1a0\n 86169: i32 a4 = sp + 0x160\n 86173: a2 = 0xffffffffffffffff\n 86176: a0 = 0\n 86178: ecalli 7 // 'get_storage'\n 86180: a0 = u64 [sp + 0x1a8]\n 86184: a1 = u64 [sp + 0x1b0]\n 86188: a2 = u64 [sp + 0x1a0]\n 86192: a3 = u64 [sp + 0x1b8]\n 86196: a2 = a2 & 0xffffffffffff00ff\n 86201: a2 = a2 | 0x100\n 86205: u64 [sp + 0x198] = s1\n 86209: a4 = u64 [sp + 0x70]\n 86212: u64 [sp + 0x190] = a4\n 86216: a4 = u64 [sp + 0x60]\n 86219: u64 [sp + 0x188] = a4\n 86223: a4 = u64 [sp + 0x78]\n 86226: u64 [sp + 0x180] = a4\n 86230: u64 [sp + 0x1b8] = a3\n 86234: u64 [sp + 0x1b0] = a1\n 86238: u64 [sp + 0x1a8] = a0\n 86242: u64 [sp + 0x1a0] = a2\n 86246: i32 a1 = sp + 0x180\n 86250: i32 a3 = sp + 0x1a0\n 86254: a2 = 0xffffffffffffffff\n 86257: a4 = 0x20\n 86260: a0 = 0\n 86262: ecalli 14 // 'set_storage'\n 86264: a0 = 0x40\n 86267: a1 = 0x20\n 86270: ra = 960, jump @0\n      : @1055 [@dyn 480] (gas: 100)\n 86277: a1 = u8 [a0 + 0x11]\n 86280: a2 = u8 [a0 + 0x10]\n 86283: a3 = u8 [a0 + 0x12]\n 86286: a4 = u8 [a0 + 0x13]\n 86289: a1 = a1 << 0x8\n 86292: a1 = a1 | a2\n 86295: a3 = a3 << 0x10\n 86298: a4 = a4 << 0x18\n 86301: a3 = a3 | a4\n 86304: a1 = a1 | a3\n 86307: a2 = u8 [a0 + 0x15]\n 86310: a3 = u8 [a0 + 0x14]\n 86313: a4 = u8 [a0 + 0x16]\n 86316: a5 = u8 [a0 + 0x17]\n 86319: a2 = a2 << 0x8\n 86322: a2 = a2 | a3\n 86325: a4 = a4 << 0x10\n 86328: a5 = a5 << 0x18\n 86331: a4 = a4 | a5\n 86334: a2 = a2 | a4\n 86337: a2 = a2 << 0x20\n 86340: t0 = a2 | a1\n 86343: a2 = u8 [a0 + 0x1]\n 86346: a3 = u8 [a0]\n 86348: a4 = u8 [a0 + 0x2]\n 86351: a5 = u8 [a0 + 0x3]\n 86354: a2 = a2 << 0x8\n 86357: a2 = a2 | a3\n 86360: a4 = a4 << 0x10\n 86363: a5 = a5 << 0x18\n 86366: a4 = a4 | a5\n 86369: a2 = a2 | a4\n 86372: a3 = u8 [a0 + 0x5]\n 86375: a4 = u8 [a0 + 0x4]\n 86378: a5 = u8 [a0 + 0x6]\n 86381: s1 = u8 [a0 + 0x7]\n 86384: a3 = a3 << 0x8\n 86387: a3 = a3 | a4\n 86390: a5 = a5 << 0x10\n 86393: s1 = s1 << 0x18\n 86396: a5 = a5 | s1\n 86399: a3 = a3 | a5\n 86402: a3 = a3 << 0x20\n 86405: a2 = a2 | a3\n 86408: a3 = u8 [a0 + 0x19]\n 86411: a4 = u8 [a0 + 0x18]\n 86414: a5 = u8 [a0 + 0x1a]\n 86417: s1 = u8 [a0 + 0x1b]\n 86420: a3 = a3 << 0x8\n 86423: a3 = a3 | a4\n 86426: a5 = a5 << 0x10\n 86429: s1 = s1 << 0x18\n 86432: a5 = a5 | s1\n 86435: a3 = a3 | a5\n 86438: a4 = u8 [a0 + 0x1d]\n 86441: a5 = u8 [a0 + 0x1c]\n 86444: s1 = u8 [a0 + 0x1e]\n 86447: a1 = u8 [a0 + 0x1f]\n 86450: a4 = a4 << 0x8\n 86453: a4 = a4 | a5\n 86456: s1 = s1 << 0x10\n 86459: a1 = a1 << 0x18\n 86462: a1 = a1 | s1\n 86465: a1 = a1 | a4\n 86468: a1 = a1 << 0x20\n 86471: a3 = a3 | a1\n 86474: a1 = u8 [a0 + 0x9]\n 86477: a4 = u8 [a0 + 0x8]\n 86480: a5 = u8 [a0 + 0xa]\n 86483: s1 = u8 [a0 + 0xb]\n 86486: a1 = a1 << 0x8\n 86489: a1 = a1 | a4\n 86492: a5 = a5 << 0x10\n 86495: s1 = s1 << 0x18\n 86498: a5 = a5 | s1\n 86501: a1 = a1 | a5\n 86504: a4 = u8 [a0 + 0xd]\n 86507: a5 = u8 [a0 + 0xc]\n 86510: s1 = u8 [a0 + 0xe]\n 86513: a0 = u8 [a0 + 0xf]\n 86516: a4 = a4 << 0x8\n 86519: a4 = a4 | a5\n 86522: s1 = s1 << 0x10\n 86525: a0 = a0 << 0x18\n 86528: a0 = a0 | s1\n 86531: a0 = a0 | a4\n 86534: a0 = a0 << 0x20\n 86537: a0 = a0 | a1\n 86540: a1 = reverse a0\n 86542: a0 = reverse a3\n 86544: a2 = reverse a2\n 86546: a3 = reverse t0\n 86548: a2 = a2 | a3\n 86551: a3 = a0 | a1\n 86554: a3 = a3 | a2\n 86557: a3 = a3 >> 0x20\n 86560: a1 = a1 | a2\n 86563: a1 = a1 << 0x20\n 86566: a1 = a1 | a3\n 86569: jump @1074 if a1 != 0\n      : @1056 (gas: 2)\n 86573: i32 a0 = a0 + 0\n 86575: ra = 962, jump @0\n      : @1057 [@dyn 481] (gas: 35)\n 86582: a1 = u64 [0x20080]\n 86587: a2 = u64 [0x20088]\n 86592: a3 = u64 [0x20090]\n 86597: a4 = u64 [0x20098]\n 86602: u64 [sp + 0x1b8] = a1\n 86606: u64 [sp + 0x1b0] = a2\n 86610: u64 [sp + 0x1a8] = a3\n 86614: u64 [sp + 0x1a0] = a4\n 86618: a1 = u64 [sp + 0x28]\n 86621: u64 [sp + 0x1d0] = a1\n 86625: a1 = u64 [sp + 0x38]\n 86628: u64 [sp + 0x1c8] = a1\n 86632: a1 = u64 [sp + 0x40]\n 86635: u64 [sp + 0x1c0] = a1\n 86639: a1 = u64 [sp + 0x30]\n 86642: u64 [sp + 0x1d8] = a1\n 86646: a1 = u64 [sp + 0x8]\n 86649: u64 [sp + 0x1f0] = a1\n 86653: a1 = u64 [sp + 0x18]\n 86656: u64 [sp + 0x1e8] = a1\n 86660: a1 = u64 [sp + 0x20]\n 86663: u64 [sp + 0x1e0] = a1\n 86667: a1 = u64 [sp + 0x10]\n 86670: u64 [sp + 0x1f8] = a1\n 86674: i32 a2 = a0 + 0\n 86676: i32 a0 = sp + 0x1a0\n 86680: a1 = 0x3\n 86683: a3 = 0\n 86685: ecalli 6 // 'deposit_event'\n 86687: sp = s0 + 0xfffffffffffffde0\n 86691: ra = u64 [sp + 0x218]\n 86695: s0 = u64 [sp + 0x210]\n 86699: s1 = u64 [sp + 0x208]\n 86703: sp = sp + 0x220\n 86707: ret\n      : @1058 (gas: 3)\n 86709: a0 = 0x40\n 86712: a1 = 0x20\n 86715: ra = 964, jump @0\n      : @1059 [@dyn 482] (gas: 103)\n 86722: a1 = u8 [a0 + 0x11]\n 86725: a2 = u8 [a0 + 0x10]\n 86728: a3 = u8 [a0 + 0x12]\n 86731: a4 = u8 [a0 + 0x13]\n 86734: a1 = a1 << 0x8\n 86737: a1 = a1 | a2\n 86740: a3 = a3 << 0x10\n 86743: a4 = a4 << 0x18\n 86746: a3 = a3 | a4\n 86749: a1 = a1 | a3\n 86752: a2 = u8 [a0 + 0x15]\n 86755: a3 = u8 [a0 + 0x14]\n 86758: a4 = u8 [a0 + 0x16]\n 86761: a5 = u8 [a0 + 0x17]\n 86764: a2 = a2 << 0x8\n 86767: a2 = a2 | a3\n 86770: a4 = a4 << 0x10\n 86773: a5 = a5 << 0x18\n 86776: a4 = a4 | a5\n 86779: a2 = a2 | a4\n 86782: a2 = a2 << 0x20\n 86785: t0 = a2 | a1\n 86788: a2 = u8 [a0 + 0x1]\n 86791: a3 = u8 [a0]\n 86793: a4 = u8 [a0 + 0x2]\n 86796: a5 = u8 [a0 + 0x3]\n 86799: a2 = a2 << 0x8\n 86802: a2 = a2 | a3\n 86805: a4 = a4 << 0x10\n 86808: a5 = a5 << 0x18\n 86811: a4 = a4 | a5\n 86814: a2 = a2 | a4\n 86817: a3 = u8 [a0 + 0x5]\n 86820: a4 = u8 [a0 + 0x4]\n 86823: a5 = u8 [a0 + 0x6]\n 86826: s1 = u8 [a0 + 0x7]\n 86829: a3 = a3 << 0x8\n 86832: a3 = a3 | a4\n 86835: a5 = a5 << 0x10\n 86838: s1 = s1 << 0x18\n 86841: a5 = a5 | s1\n 86844: a3 = a3 | a5\n 86847: a3 = a3 << 0x20\n 86850: a2 = a2 | a3\n 86853: a3 = u8 [a0 + 0x19]\n 86856: a4 = u8 [a0 + 0x18]\n 86859: a5 = u8 [a0 + 0x1a]\n 86862: s1 = u8 [a0 + 0x1b]\n 86865: a3 = a3 << 0x8\n 86868: a3 = a3 | a4\n 86871: a5 = a5 << 0x10\n 86874: s1 = s1 << 0x18\n 86877: a5 = a5 | s1\n 86880: a3 = a3 | a5\n 86883: a4 = u8 [a0 + 0x1d]\n 86886: a5 = u8 [a0 + 0x1c]\n 86889: s1 = u8 [a0 + 0x1e]\n 86892: a1 = u8 [a0 + 0x1f]\n 86895: a4 = a4 << 0x8\n 86898: a4 = a4 | a5\n 86901: s1 = s1 << 0x10\n 86904: a1 = a1 << 0x18\n 86907: a1 = a1 | s1\n 86910: a1 = a1 | a4\n 86913: a1 = a1 << 0x20\n 86916: a3 = a3 | a1\n 86919: a1 = u8 [a0 + 0x9]\n 86922: a4 = u8 [a0 + 0x8]\n 86925: a5 = u8 [a0 + 0xa]\n 86928: s1 = u8 [a0 + 0xb]\n 86931: a1 = a1 << 0x8\n 86934: a1 = a1 | a4\n 86937: a5 = a5 << 0x10\n 86940: s1 = s1 << 0x18\n 86943: a5 = a5 | s1\n 86946: a1 = a1 | a5\n 86949: a4 = u8 [a0 + 0xd]\n 86952: a5 = u8 [a0 + 0xc]\n 86955: s1 = u8 [a0 + 0xe]\n 86958: a0 = u8 [a0 + 0xf]\n 86961: a4 = a4 << 0x8\n 86964: a4 = a4 | a5\n 86967: s1 = s1 << 0x10\n 86970: a0 = a0 << 0x18\n 86973: a0 = a0 | s1\n 86976: a0 = a0 | a4\n 86979: a0 = a0 << 0x20\n 86982: a0 = a0 | a1\n 86985: s1 = reverse a0\n 86987: a1 = reverse a3\n 86989: a2 = reverse a2\n 86991: a0 = reverse t0\n 86993: u64 [sp + 0x78] = a0\n 86996: u64 [sp + 0x70] = a2\n 86999: a0 = a0 | a2\n 87002: a2 = a1\n 87004: a1 = a1 | s1\n 87007: a1 = a1 | a0\n 87010: a1 = a1 >> 0x20\n 87013: a0 = a0 | s1\n 87016: a0 = a0 << 0x20\n 87019: a0 = a0 | a1\n 87022: jump @1074 if a0 != 0\n      : @1060 (gas: 5)\n 87026: u64 [sp + 0x68] = a2\n 87029: i32 a0 = a2 + 0\n 87031: a1 = 0x20\n 87034: u64 [sp + 0x60] = a0\n 87037: ra = 966, jump @0\n      : @1061 [@dyn 483] (gas: 50)\n 87044: u8 [a0 + 31] = 0\n 87047: u8 [a0 + 30] = 0\n 87050: u8 [a0 + 29] = 0\n 87053: u8 [a0 + 28] = 0\n 87056: u8 [a0 + 27] = 0\n 87059: u8 [a0 + 26] = 0\n 87062: u8 [a0 + 25] = 0\n 87065: u8 [a0 + 24] = 0\n 87068: u8 [a0 + 23] = 0\n 87071: u8 [a0 + 22] = 0\n 87074: u8 [a0 + 21] = 0\n 87077: u8 [a0 + 20] = 0\n 87080: u8 [a0 + 19] = 0\n 87083: u8 [a0 + 18] = 0\n 87086: u8 [a0 + 17] = 0\n 87089: u8 [a0 + 16] = 0\n 87092: u8 [a0 + 15] = 0\n 87095: u8 [a0 + 14] = 0\n 87098: u8 [a0 + 13] = 0\n 87101: u8 [a0 + 12] = 0\n 87104: u8 [a0 + 11] = 0\n 87107: u8 [a0 + 10] = 0\n 87110: u8 [a0 + 9] = 0\n 87113: u8 [a0 + 8] = 0\n 87116: u8 [a0 + 7] = 0\n 87119: u8 [a0 + 6] = 0\n 87122: u8 [a0 + 5] = 0\n 87125: u8 [a0 + 4] = 0\n 87128: u8 [a0 + 3] = 0xa0\n 87133: u8 [a0 + 2] = 0x79\n 87137: u8 [a0 + 1] = 0xc3\n 87142: u8 [a0 + 0] = 0x8\n 87145: a1 = u64 [sp + 0x68]\n 87148: a0 = a1 + 0x4\n 87151: a1 = a0 <u a1\n 87154: a3 = u64 [sp + 0x78]\n 87157: a2 = a3 + a1\n 87160: a3 = a2 <u a3\n 87163: a3 = a1 if a1 == 0\n 87166: a3 = a3 + s1\n 87169: a1 = a3 <u s1\n 87172: a4 = u64 [sp + 0x70]\n 87175: a4 = a4 + a1\n 87178: u64 [sp + 0x108] = a2\n 87182: u64 [sp + 0x100] = a0\n 87186: u64 [sp + 0x110] = a3\n 87190: a0 = sp + 0x120\n 87194: a1 = sp + 0x100\n 87198: u64 [sp + 0x118] = a4\n 87202: ra = 968, jump @1027\n      : @1062 [@dyn 484] (gas: 5)\n 87208: a0 = u64 [sp + 0x128]\n 87212: t0 = u64 [sp + 0x138]\n 87216: t1 = u64 [sp + 0x120]\n 87220: a3 = u64 [sp + 0x130]\n 87224: jump @1073\n      : @1063 (gas: 3)\n 87227: a0 = 0x40\n 87230: a1 = 0x20\n 87233: ra = 970, jump @0\n      : @1064 [@dyn 485] (gas: 103)\n 87240: a1 = u8 [a0 + 0x11]\n 87243: a2 = u8 [a0 + 0x10]\n 87246: a3 = u8 [a0 + 0x12]\n 87249: a4 = u8 [a0 + 0x13]\n 87252: a1 = a1 << 0x8\n 87255: a1 = a1 | a2\n 87258: a3 = a3 << 0x10\n 87261: a4 = a4 << 0x18\n 87264: a3 = a3 | a4\n 87267: a1 = a1 | a3\n 87270: a2 = u8 [a0 + 0x15]\n 87273: a3 = u8 [a0 + 0x14]\n 87276: a4 = u8 [a0 + 0x16]\n 87279: a5 = u8 [a0 + 0x17]\n 87282: a2 = a2 << 0x8\n 87285: a2 = a2 | a3\n 87288: a4 = a4 << 0x10\n 87291: a5 = a5 << 0x18\n 87294: a4 = a4 | a5\n 87297: a2 = a2 | a4\n 87300: a2 = a2 << 0x20\n 87303: t0 = a2 | a1\n 87306: a2 = u8 [a0 + 0x1]\n 87309: a3 = u8 [a0]\n 87311: a4 = u8 [a0 + 0x2]\n 87314: a5 = u8 [a0 + 0x3]\n 87317: a2 = a2 << 0x8\n 87320: a2 = a2 | a3\n 87323: a4 = a4 << 0x10\n 87326: a5 = a5 << 0x18\n 87329: a4 = a4 | a5\n 87332: a2 = a2 | a4\n 87335: a3 = u8 [a0 + 0x5]\n 87338: a4 = u8 [a0 + 0x4]\n 87341: a5 = u8 [a0 + 0x6]\n 87344: s1 = u8 [a0 + 0x7]\n 87347: a3 = a3 << 0x8\n 87350: a3 = a3 | a4\n 87353: a5 = a5 << 0x10\n 87356: s1 = s1 << 0x18\n 87359: a5 = a5 | s1\n 87362: a3 = a3 | a5\n 87365: a3 = a3 << 0x20\n 87368: a2 = a2 | a3\n 87371: a3 = u8 [a0 + 0x19]\n 87374: a4 = u8 [a0 + 0x18]\n 87377: a5 = u8 [a0 + 0x1a]\n 87380: s1 = u8 [a0 + 0x1b]\n 87383: a3 = a3 << 0x8\n 87386: a3 = a3 | a4\n 87389: a5 = a5 << 0x10\n 87392: s1 = s1 << 0x18\n 87395: a5 = a5 | s1\n 87398: a3 = a3 | a5\n 87401: a4 = u8 [a0 + 0x1d]\n 87404: a5 = u8 [a0 + 0x1c]\n 87407: s1 = u8 [a0 + 0x1e]\n 87410: a1 = u8 [a0 + 0x1f]\n 87413: a4 = a4 << 0x8\n 87416: a4 = a4 | a5\n 87419: s1 = s1 << 0x10\n 87422: a1 = a1 << 0x18\n 87425: a1 = a1 | s1\n 87428: a1 = a1 | a4\n 87431: a1 = a1 << 0x20\n 87434: a3 = a3 | a1\n 87437: a1 = u8 [a0 + 0x9]\n 87440: a4 = u8 [a0 + 0x8]\n 87443: a5 = u8 [a0 + 0xa]\n 87446: s1 = u8 [a0 + 0xb]\n 87449: a1 = a1 << 0x8\n 87452: a1 = a1 | a4\n 87455: a5 = a5 << 0x10\n 87458: s1 = s1 << 0x18\n 87461: a5 = a5 | s1\n 87464: a1 = a1 | a5\n 87467: a4 = u8 [a0 + 0xd]\n 87470: a5 = u8 [a0 + 0xc]\n 87473: s1 = u8 [a0 + 0xe]\n 87476: a0 = u8 [a0 + 0xf]\n 87479: a4 = a4 << 0x8\n 87482: a4 = a4 | a5\n 87485: s1 = s1 << 0x10\n 87488: a0 = a0 << 0x18\n 87491: a0 = a0 | s1\n 87494: a0 = a0 | a4\n 87497: a0 = a0 << 0x20\n 87500: a0 = a0 | a1\n 87503: s1 = reverse a0\n 87505: a1 = reverse a3\n 87507: a2 = reverse a2\n 87509: a0 = reverse t0\n 87511: u64 [sp + 0x78] = a0\n 87514: u64 [sp + 0x70] = a2\n 87517: a0 = a0 | a2\n 87520: a2 = a1\n 87522: a1 = a1 | s1\n 87525: a1 = a1 | a0\n 87528: a1 = a1 >> 0x20\n 87531: a0 = a0 | s1\n 87534: a0 = a0 << 0x20\n 87537: a0 = a0 | a1\n 87540: jump @1074 if a0 != 0\n      : @1065 (gas: 5)\n 87544: u64 [sp + 0x68] = a2\n 87547: i32 a0 = a2 + 0\n 87549: a1 = 0x20\n 87552: u64 [sp + 0x60] = a0\n 87555: ra = 972, jump @0\n      : @1066 [@dyn 486] (gas: 50)\n 87562: u8 [a0 + 31] = 0\n 87565: u8 [a0 + 30] = 0\n 87568: u8 [a0 + 29] = 0\n 87571: u8 [a0 + 28] = 0\n 87574: u8 [a0 + 27] = 0\n 87577: u8 [a0 + 26] = 0\n 87580: u8 [a0 + 25] = 0\n 87583: u8 [a0 + 24] = 0\n 87586: u8 [a0 + 23] = 0\n 87589: u8 [a0 + 22] = 0\n 87592: u8 [a0 + 21] = 0\n 87595: u8 [a0 + 20] = 0\n 87598: u8 [a0 + 19] = 0\n 87601: u8 [a0 + 18] = 0\n 87604: u8 [a0 + 17] = 0\n 87607: u8 [a0 + 16] = 0\n 87610: u8 [a0 + 15] = 0\n 87613: u8 [a0 + 14] = 0\n 87616: u8 [a0 + 13] = 0\n 87619: u8 [a0 + 12] = 0\n 87622: u8 [a0 + 11] = 0\n 87625: u8 [a0 + 10] = 0\n 87628: u8 [a0 + 9] = 0\n 87631: u8 [a0 + 8] = 0\n 87634: u8 [a0 + 7] = 0\n 87637: u8 [a0 + 6] = 0\n 87640: u8 [a0 + 5] = 0\n 87643: u8 [a0 + 4] = 0\n 87646: u8 [a0 + 3] = 0xa0\n 87651: u8 [a0 + 2] = 0x79\n 87655: u8 [a0 + 1] = 0xc3\n 87660: u8 [a0 + 0] = 0x8\n 87663: a1 = u64 [sp + 0x68]\n 87666: a0 = a1 + 0x4\n 87669: a1 = a0 <u a1\n 87672: a3 = u64 [sp + 0x78]\n 87675: a2 = a3 + a1\n 87678: a3 = a2 <u a3\n 87681: a3 = a1 if a1 == 0\n 87684: a3 = a3 + s1\n 87687: a1 = a3 <u s1\n 87690: a4 = u64 [sp + 0x70]\n 87693: a4 = a4 + a1\n 87696: u64 [sp + 0xc8] = a2\n 87700: u64 [sp + 0xc0] = a0\n 87704: u64 [sp + 0xd0] = a3\n 87708: a0 = sp + 0xe0\n 87712: a1 = sp + 0xc0\n 87716: u64 [sp + 0xd8] = a4\n 87720: ra = 974, jump @555\n      : @1067 [@dyn 487] (gas: 5)\n 87727: a0 = u64 [sp + 0xe8]\n 87731: t0 = u64 [sp + 0xf8]\n 87735: t1 = u64 [sp + 0xe0]\n 87739: a3 = u64 [sp + 0xf0]\n 87743: jump @1073\n      : @1068 (gas: 3)\n 87746: a0 = 0x40\n 87749: a1 = 0x20\n 87752: ra = 976, jump @0\n      : @1069 [@dyn 488] (gas: 103)\n 87759: a1 = u8 [a0 + 0x11]\n 87762: a2 = u8 [a0 + 0x10]\n 87765: a3 = u8 [a0 + 0x12]\n 87768: a4 = u8 [a0 + 0x13]\n 87771: a1 = a1 << 0x8\n 87774: a1 = a1 | a2\n 87777: a3 = a3 << 0x10\n 87780: a4 = a4 << 0x18\n 87783: a3 = a3 | a4\n 87786: a1 = a1 | a3\n 87789: a2 = u8 [a0 + 0x15]\n 87792: a3 = u8 [a0 + 0x14]\n 87795: a4 = u8 [a0 + 0x16]\n 87798: a5 = u8 [a0 + 0x17]\n 87801: a2 = a2 << 0x8\n 87804: a2 = a2 | a3\n 87807: a4 = a4 << 0x10\n 87810: a5 = a5 << 0x18\n 87813: a4 = a4 | a5\n 87816: a2 = a2 | a4\n 87819: a2 = a2 << 0x20\n 87822: t0 = a2 | a1\n 87825: a2 = u8 [a0 + 0x1]\n 87828: a3 = u8 [a0]\n 87830: a4 = u8 [a0 + 0x2]\n 87833: a5 = u8 [a0 + 0x3]\n 87836: a2 = a2 << 0x8\n 87839: a2 = a2 | a3\n 87842: a4 = a4 << 0x10\n 87845: a5 = a5 << 0x18\n 87848: a4 = a4 | a5\n 87851: a2 = a2 | a4\n 87854: a3 = u8 [a0 + 0x5]\n 87857: a4 = u8 [a0 + 0x4]\n 87860: a5 = u8 [a0 + 0x6]\n 87863: s1 = u8 [a0 + 0x7]\n 87866: a3 = a3 << 0x8\n 87869: a3 = a3 | a4\n 87872: a5 = a5 << 0x10\n 87875: s1 = s1 << 0x18\n 87878: a5 = a5 | s1\n 87881: a3 = a3 | a5\n 87884: a3 = a3 << 0x20\n 87887: a2 = a2 | a3\n 87890: a3 = u8 [a0 + 0x19]\n 87893: a4 = u8 [a0 + 0x18]\n 87896: a5 = u8 [a0 + 0x1a]\n 87899: s1 = u8 [a0 + 0x1b]\n 87902: a3 = a3 << 0x8\n 87905: a3 = a3 | a4\n 87908: a5 = a5 << 0x10\n 87911: s1 = s1 << 0x18\n 87914: a5 = a5 | s1\n 87917: a3 = a3 | a5\n 87920: a4 = u8 [a0 + 0x1d]\n 87923: a5 = u8 [a0 + 0x1c]\n 87926: s1 = u8 [a0 + 0x1e]\n 87929: a1 = u8 [a0 + 0x1f]\n 87932: a4 = a4 << 0x8\n 87935: a4 = a4 | a5\n 87938: s1 = s1 << 0x10\n 87941: a1 = a1 << 0x18\n 87944: a1 = a1 | s1\n 87947: a1 = a1 | a4\n 87950: a1 = a1 << 0x20\n 87953: a3 = a3 | a1\n 87956: a1 = u8 [a0 + 0x9]\n 87959: a4 = u8 [a0 + 0x8]\n 87962: a5 = u8 [a0 + 0xa]\n 87965: s1 = u8 [a0 + 0xb]\n 87968: a1 = a1 << 0x8\n 87971: a1 = a1 | a4\n 87974: a5 = a5 << 0x10\n 87977: s1 = s1 << 0x18\n 87980: a5 = a5 | s1\n 87983: a1 = a1 | a5\n 87986: a4 = u8 [a0 + 0xd]\n 87989: a5 = u8 [a0 + 0xc]\n 87992: s1 = u8 [a0 + 0xe]\n 87995: a0 = u8 [a0 + 0xf]\n 87998: a4 = a4 << 0x8\n 88001: a4 = a4 | a5\n 88004: s1 = s1 << 0x10\n 88007: a0 = a0 << 0x18\n 88010: a0 = a0 | s1\n 88013: a0 = a0 | a4\n 88016: a0 = a0 << 0x20\n 88019: a0 = a0 | a1\n 88022: s1 = reverse a0\n 88024: a1 = reverse a3\n 88026: a2 = reverse a2\n 88028: a0 = reverse t0\n 88030: u64 [sp + 0x78] = a0\n 88033: u64 [sp + 0x70] = a2\n 88036: a0 = a0 | a2\n 88039: a2 = a1\n 88041: a1 = a1 | s1\n 88044: a1 = a1 | a0\n 88047: a1 = a1 >> 0x20\n 88050: a0 = a0 | s1\n 88053: a0 = a0 << 0x20\n 88056: a0 = a0 | a1\n 88059: jump @1074 if a0 != 0\n      : @1070 (gas: 5)\n 88063: u64 [sp + 0x68] = a2\n 88066: i32 a0 = a2 + 0\n 88068: a1 = 0x20\n 88071: u64 [sp + 0x60] = a0\n 88074: ra = 978, jump @0\n      : @1071 [@dyn 489] (gas: 50)\n 88081: u8 [a0 + 31] = 0\n 88084: u8 [a0 + 30] = 0\n 88087: u8 [a0 + 29] = 0\n 88090: u8 [a0 + 28] = 0\n 88093: u8 [a0 + 27] = 0\n 88096: u8 [a0 + 26] = 0\n 88099: u8 [a0 + 25] = 0\n 88102: u8 [a0 + 24] = 0\n 88105: u8 [a0 + 23] = 0\n 88108: u8 [a0 + 22] = 0\n 88111: u8 [a0 + 21] = 0\n 88114: u8 [a0 + 20] = 0\n 88117: u8 [a0 + 19] = 0\n 88120: u8 [a0 + 18] = 0\n 88123: u8 [a0 + 17] = 0\n 88126: u8 [a0 + 16] = 0\n 88129: u8 [a0 + 15] = 0\n 88132: u8 [a0 + 14] = 0\n 88135: u8 [a0 + 13] = 0\n 88138: u8 [a0 + 12] = 0\n 88141: u8 [a0 + 11] = 0\n 88144: u8 [a0 + 10] = 0\n 88147: u8 [a0 + 9] = 0\n 88150: u8 [a0 + 8] = 0\n 88153: u8 [a0 + 7] = 0\n 88156: u8 [a0 + 6] = 0\n 88159: u8 [a0 + 5] = 0\n 88162: u8 [a0 + 4] = 0\n 88165: u8 [a0 + 3] = 0xa0\n 88170: u8 [a0 + 2] = 0x79\n 88174: u8 [a0 + 1] = 0xc3\n 88179: u8 [a0 + 0] = 0x8\n 88182: a1 = u64 [sp + 0x68]\n 88185: a0 = a1 + 0x4\n 88188: a1 = a0 <u a1\n 88191: a3 = u64 [sp + 0x78]\n 88194: a2 = a3 + a1\n 88197: a3 = a2 <u a3\n 88200: a3 = a1 if a1 == 0\n 88203: a3 = a3 + s1\n 88206: a1 = a3 <u s1\n 88209: a4 = u64 [sp + 0x70]\n 88212: a4 = a4 + a1\n 88215: u64 [sp + 0x88] = a2\n 88219: u64 [sp + 0x80] = a0\n 88223: u64 [sp + 0x90] = a3\n 88227: a0 = sp + 0xa0\n 88231: a1 = sp + 0x80\n 88235: u64 [sp + 0x98] = a4\n 88239: ra = 980, jump @1035\n      : @1072 [@dyn 490] (gas: 5)\n 88245: a0 = u64 [sp + 0xa8]\n 88249: t0 = u64 [sp + 0xb8]\n 88253: t1 = u64 [sp + 0xa0]\n 88257: a3 = u64 [sp + 0xb0]\n 88261: fallthrough\n      : @1073 (gas: 26)\n 88262: a1 = u64 [sp + 0x78]\n 88265: a4 = a0 ^ a1\n 88268: a5 = a0 <u a1\n 88271: t2 = a1\n 88273: a2 = u64 [sp + 0x68]\n 88276: a1 = t1 <u a2\n 88279: a5 = a1 if a4 == 0\n 88282: a4 = a3 - s1\n 88285: a3 = a3 <u s1\n 88288: s1 = u64 [sp + 0x70]\n 88291: s1 = t0 - s1\n 88294: s1 = s1 - a3\n 88297: a3 = a4 <u a5\n 88300: s1 = s1 - a3\n 88303: a4 = a4 - a5\n 88306: a0 = a0 - t2\n 88309: a1 = a0 - a1\n 88312: a0 = t1 - a2\n 88315: a1 = a1 | s1\n 88318: a2 = a0 | a4\n 88321: a2 = a2 | a1\n 88324: a1 = a1 | a4\n 88327: a2 = a2 >> 0x20\n 88330: a1 = a1 << 0x20\n 88333: a1 = a1 | a2\n 88336: jump @1075 if a1 == 0\n      : @1074 (gas: 1)\n 88339: trap\n      : @1075 (gas: 4)\n 88340: i32 s1 = a0 + 0\n 88342: a0 = u64 [sp + 0x60]\n 88345: a1 = s1\n 88347: ra = 982, jump @0\n      : @1076 [@dyn 491] (gas: 6)\n 88354: i32 a1 = a0 + 0\n 88356: a0 = 0x1\n 88359: a2 = s1\n 88361: ra = 0x3d8\n 88365: ecalli 12 // 'seal_return'\n 88367: fallthrough\n      : @1077 [@dyn 492] (gas: 32)\n 88368: sp = sp + 0xfffffffffffffea0\n 88372: u64 [sp + 0x158] = ra\n 88376: u64 [sp + 0x150] = s0\n 88380: u64 [sp + 0x148] = s1\n 88384: s0 = sp + 0x160\n 88388: sp = sp & 0xffffffffffffffe0\n 88391: u64 [sp + 0x38] = a0\n 88394: a0 = u64 [a2 + 0x18]\n 88397: u64 [sp + 0x18] = a0\n 88400: a0 = u64 [a2 + 0x10]\n 88403: u64 [sp + 0x20] = a0\n 88406: a0 = u64 [a2 + 0x8]\n 88409: u64 [sp + 0x28] = a0\n 88412: a0 = u64 [a2]\n 88414: u64 [sp + 0x30] = a0\n 88417: u64 [sp + 280] = 0\n 88421: u64 [sp + 272] = 0\n 88425: u64 [sp + 264] = 0\n 88429: s1 = 0x5\n 88432: u64 [sp + 0x100] = s1\n 88436: u64 [sp + 312] = 0\n 88440: u64 [sp + 304] = 0\n 88444: u64 [sp + 296] = 0\n 88448: u64 [sp + 288] = 0\n 88452: u32 [sp + 224] = 0x20\n 88457: i32 a1 = sp + 0x100\n 88461: i32 a3 = sp + 0x120\n 88465: i32 a4 = sp + 0xe0\n 88469: a2 = 0xffffffffffffffff\n 88472: a0 = 0\n 88474: ecalli 7 // 'get_storage'\n 88476: fallthrough\n      : @1078 (gas: 9)\n 88477: a0 = u64 [sp + 0x138]\n 88481: a1 = u64 [sp + 0x128]\n 88485: a2 = u64 [sp + 0x120]\n 88489: a3 = u64 [sp + 0x130]\n 88493: a0 = a0 | a1\n 88496: a1 = a2 ^ 0x1\n 88499: a1 = a1 | a3\n 88502: a0 = a0 | a1\n 88505: jump @1081 if a0 != 0\n      : @1079 (gas: 60)\n 88509: u64 [sp + 280] = 0\n 88513: u64 [sp + 272] = 0\n 88517: u64 [sp + 264] = 0\n 88521: u64 [sp + 256] = 0x5\n 88526: u64 [sp + 312] = 0\n 88530: u64 [sp + 304] = 0\n 88534: u64 [sp + 296] = 0\n 88538: u64 [sp + 288] = 0\n 88542: u32 [sp + 224] = 0x20\n 88547: i32 a1 = sp + 0x100\n 88551: i32 a3 = sp + 0x120\n 88555: i32 a4 = sp + 0xe0\n 88559: a2 = 0xffffffffffffffff\n 88562: a0 = 0\n 88564: ecalli 7 // 'get_storage'\n 88566: u64 [sp + 280] = 0\n 88570: u64 [sp + 272] = 0\n 88574: u64 [sp + 264] = 0\n 88578: u64 [sp + 256] = 0x5\n 88583: u64 [sp + 312] = 0\n 88587: u64 [sp + 304] = 0\n 88591: u64 [sp + 296] = 0\n 88595: u64 [sp + 288] = 0x2\n 88600: i32 a1 = sp + 0x100\n 88604: i32 a3 = sp + 0x120\n 88608: a2 = 0xffffffffffffffff\n 88611: a4 = 0x20\n 88614: a0 = 0\n 88616: ecalli 14 // 'set_storage'\n 88618: a0 = u64 [sp + 0x18]\n 88621: u64 [sp + 0x58] = a0\n 88624: a0 = u64 [sp + 0x20]\n 88627: u64 [sp + 0x50] = a0\n 88630: a0 = u64 [sp + 0x28]\n 88633: u64 [sp + 0x48] = a0\n 88636: a0 = sp + 0x80\n 88640: a2 = sp + 0x40\n 88643: a3 = u64 [sp + 0x30]\n 88646: u64 [sp + 0x40] = a3\n 88649: ra = 0x3da\n 88653: sp = sp + 0xfffffffffffffc00\n 88657: u64 [sp + 0x3f8] = ra\n 88661: u64 [sp + 0x3f0] = s0\n 88665: u64 [sp + 1000] = 0x5\n 88670: s0 = sp + 0x400\n 88674: sp = sp & 0xffffffffffffffe0\n 88677: s1 = sp\n 88679: a1 = u64 [a2]\n 88681: u64 [s1 + 0x198] = a1\n 88685: a1 = u64 [a2 + 0x8]\n 88688: u64 [s1 + 0x190] = a1\n 88692: a1 = u64 [a2 + 0x10]\n 88695: u64 [s1 + 0x188] = a1\n 88699: a1 = u64 [a2 + 0x18]\n 88702: u64 [s1 + 0x180] = a1\n 88706: u64 [s1 + 0x18] = a0\n 88709: a1 = 0x20\n 88712: a0 = 0\n 88714: ra = 0x3fe\n 88718: jump @0\n      : @1080 [@dyn 493] (gas: 52)\n 88722: a0 = u64 [sp + 0x80]\n 88726: u64 [sp + 0x30] = a0\n 88729: a0 = u64 [sp + 0x88]\n 88733: u64 [sp + 0x28] = a0\n 88736: a0 = u64 [sp + 0x90]\n 88740: u64 [sp + 0x20] = a0\n 88743: a0 = u64 [sp + 0x98]\n 88747: u64 [sp + 0x18] = a0\n 88750: u64 [sp + 280] = 0\n 88754: u64 [sp + 272] = 0\n 88758: u64 [sp + 264] = 0\n 88762: u64 [sp + 256] = 0x5\n 88767: u64 [sp + 312] = 0\n 88771: u64 [sp + 304] = 0\n 88775: u64 [sp + 296] = 0\n 88779: u64 [sp + 288] = 0\n 88783: u32 [sp + 224] = 0x20\n 88788: i32 a1 = sp + 0x100\n 88792: i32 a3 = sp + 0x120\n 88796: i32 a4 = sp + 0xe0\n 88800: a2 = 0xffffffffffffffff\n 88803: a0 = 0\n 88805: ecalli 7 // 'get_storage'\n 88807: u64 [sp + 280] = 0\n 88811: u64 [sp + 272] = 0\n 88815: u64 [sp + 264] = 0\n 88819: u64 [sp + 256] = 0x5\n 88824: u64 [sp + 312] = 0\n 88828: u64 [sp + 304] = 0\n 88832: u64 [sp + 296] = 0\n 88836: u64 [sp + 288] = 0x1\n 88841: i32 a1 = sp + 0x100\n 88845: i32 a3 = sp + 0x120\n 88849: a2 = 0xffffffffffffffff\n 88852: a4 = 0x20\n 88855: a0 = 0\n 88857: ecalli 14 // 'set_storage'\n 88859: a0 = u64 [sp + 0x38]\n 88862: a1 = u64 [sp + 0x18]\n 88865: u64 [a0 + 0x18] = a1\n 88868: a1 = u64 [sp + 0x20]\n 88871: u64 [a0 + 0x10] = a1\n 88874: a1 = u64 [sp + 0x28]\n 88877: u64 [a0 + 0x8] = a1\n 88880: a1 = u64 [sp + 0x30]\n 88883: u64 [a0] = a1\n 88885: sp = s0 + 0xfffffffffffffea0\n 88889: ra = u64 [sp + 0x158]\n 88893: s0 = u64 [sp + 0x150]\n 88897: s1 = u64 [sp + 0x148]\n 88901: sp = sp + 0x160\n 88905: ret\n      : @1081 (gas: 3)\n 88907: a0 = 0x40\n 88910: a1 = 0x20\n 88913: ra = 988, jump @0\n      : @1082 [@dyn 494] (gas: 103)\n 88920: a1 = u8 [a0 + 0x11]\n 88923: a2 = u8 [a0 + 0x10]\n 88926: a3 = u8 [a0 + 0x12]\n 88929: a4 = u8 [a0 + 0x13]\n 88932: a1 = a1 << 0x8\n 88935: a1 = a1 | a2\n 88938: a3 = a3 << 0x10\n 88941: a4 = a4 << 0x18\n 88944: a3 = a3 | a4\n 88947: a1 = a1 | a3\n 88950: a2 = u8 [a0 + 0x15]\n 88953: a3 = u8 [a0 + 0x14]\n 88956: a4 = u8 [a0 + 0x16]\n 88959: a5 = u8 [a0 + 0x17]\n 88962: a2 = a2 << 0x8\n 88965: a2 = a2 | a3\n 88968: a4 = a4 << 0x10\n 88971: a5 = a5 << 0x18\n 88974: a4 = a4 | a5\n 88977: a2 = a2 | a4\n 88980: a2 = a2 << 0x20\n 88983: t0 = a2 | a1\n 88986: a2 = u8 [a0 + 0x1]\n 88989: a3 = u8 [a0]\n 88991: a4 = u8 [a0 + 0x2]\n 88994: a5 = u8 [a0 + 0x3]\n 88997: a2 = a2 << 0x8\n 89000: a2 = a2 | a3\n 89003: a4 = a4 << 0x10\n 89006: a5 = a5 << 0x18\n 89009: a4 = a4 | a5\n 89012: a2 = a2 | a4\n 89015: a3 = u8 [a0 + 0x5]\n 89018: a4 = u8 [a0 + 0x4]\n 89021: a5 = u8 [a0 + 0x6]\n 89024: s1 = u8 [a0 + 0x7]\n 89027: a3 = a3 << 0x8\n 89030: a3 = a3 | a4\n 89033: a5 = a5 << 0x10\n 89036: s1 = s1 << 0x18\n 89039: a5 = a5 | s1\n 89042: a3 = a3 | a5\n 89045: a3 = a3 << 0x20\n 89048: a2 = a2 | a3\n 89051: a3 = u8 [a0 + 0x19]\n 89054: a4 = u8 [a0 + 0x18]\n 89057: a5 = u8 [a0 + 0x1a]\n 89060: s1 = u8 [a0 + 0x1b]\n 89063: a3 = a3 << 0x8\n 89066: a3 = a3 | a4\n 89069: a5 = a5 << 0x10\n 89072: s1 = s1 << 0x18\n 89075: a5 = a5 | s1\n 89078: a3 = a3 | a5\n 89081: a4 = u8 [a0 + 0x1d]\n 89084: a5 = u8 [a0 + 0x1c]\n 89087: s1 = u8 [a0 + 0x1e]\n 89090: a1 = u8 [a0 + 0x1f]\n 89093: a4 = a4 << 0x8\n 89096: a4 = a4 | a5\n 89099: s1 = s1 << 0x10\n 89102: a1 = a1 << 0x18\n 89105: a1 = a1 | s1\n 89108: a1 = a1 | a4\n 89111: a1 = a1 << 0x20\n 89114: a3 = a3 | a1\n 89117: a1 = u8 [a0 + 0x9]\n 89120: a4 = u8 [a0 + 0x8]\n 89123: a5 = u8 [a0 + 0xa]\n 89126: s1 = u8 [a0 + 0xb]\n 89129: a1 = a1 << 0x8\n 89132: a1 = a1 | a4\n 89135: a5 = a5 << 0x10\n 89138: s1 = s1 << 0x18\n 89141: a5 = a5 | s1\n 89144: a1 = a1 | a5\n 89147: a4 = u8 [a0 + 0xd]\n 89150: a5 = u8 [a0 + 0xc]\n 89153: s1 = u8 [a0 + 0xe]\n 89156: a0 = u8 [a0 + 0xf]\n 89159: a4 = a4 << 0x8\n 89162: a4 = a4 | a5\n 89165: s1 = s1 << 0x10\n 89168: a0 = a0 << 0x18\n 89171: a0 = a0 | s1\n 89174: a0 = a0 | a4\n 89177: a0 = a0 << 0x20\n 89180: a0 = a0 | a1\n 89183: s1 = reverse a0\n 89185: a1 = reverse a3\n 89187: a2 = reverse a2\n 89189: a0 = reverse t0\n 89191: u64 [sp + 0x38] = a0\n 89194: u64 [sp + 0x30] = a2\n 89197: a0 = a0 | a2\n 89200: a2 = a1\n 89202: a1 = a1 | s1\n 89205: a1 = a1 | a0\n 89208: a1 = a1 >> 0x20\n 89211: a0 = a0 | s1\n 89214: a0 = a0 << 0x20\n 89217: a0 = a0 | a1\n 89220: jump @1086 if a0 != 0\n      : @1083 (gas: 5)\n 89224: u64 [sp + 0x28] = a2\n 89227: i32 a0 = a2 + 0\n 89229: a1 = 0x20\n 89232: u64 [sp + 0x20] = a0\n 89235: ra = 990, jump @0\n      : @1084 [@dyn 495] (gas: 50)\n 89242: u8 [a0 + 31] = 0\n 89245: u8 [a0 + 30] = 0\n 89248: u8 [a0 + 29] = 0\n 89251: u8 [a0 + 28] = 0\n 89254: u8 [a0 + 27] = 0\n 89257: u8 [a0 + 26] = 0\n 89260: u8 [a0 + 25] = 0\n 89263: u8 [a0 + 24] = 0\n 89266: u8 [a0 + 23] = 0\n 89269: u8 [a0 + 22] = 0\n 89272: u8 [a0 + 21] = 0\n 89275: u8 [a0 + 20] = 0\n 89278: u8 [a0 + 19] = 0\n 89281: u8 [a0 + 18] = 0\n 89284: u8 [a0 + 17] = 0\n 89287: u8 [a0 + 16] = 0\n 89290: u8 [a0 + 15] = 0\n 89293: u8 [a0 + 14] = 0\n 89296: u8 [a0 + 13] = 0\n 89299: u8 [a0 + 12] = 0\n 89302: u8 [a0 + 11] = 0\n 89305: u8 [a0 + 10] = 0\n 89308: u8 [a0 + 9] = 0\n 89311: u8 [a0 + 8] = 0\n 89314: u8 [a0 + 7] = 0\n 89317: u8 [a0 + 6] = 0\n 89320: u8 [a0 + 5] = 0\n 89323: u8 [a0 + 4] = 0\n 89326: u8 [a0 + 3] = 0xa0\n 89331: u8 [a0 + 2] = 0x79\n 89335: u8 [a0 + 1] = 0xc3\n 89340: u8 [a0 + 0] = 0x8\n 89343: a1 = u64 [sp + 0x28]\n 89346: a0 = a1 + 0x4\n 89349: a1 = a0 <u a1\n 89352: a3 = u64 [sp + 0x38]\n 89355: a2 = a3 + a1\n 89358: a3 = a2 <u a3\n 89361: a3 = a1 if a1 == 0\n 89364: a3 = a3 + s1\n 89367: a1 = a3 <u s1\n 89370: a4 = u64 [sp + 0x30]\n 89373: a4 = a4 + a1\n 89376: u64 [sp + 0xa8] = a2\n 89380: u64 [sp + 0xa0] = a0\n 89384: u64 [sp + 0xb0] = a3\n 89388: a0 = sp + 0xc0\n 89392: a1 = sp + 0xa0\n 89396: u64 [sp + 0xb8] = a4\n 89400: ra = 992, jump @504\n      : @1085 [@dyn 496] (gas: 30)\n 89407: a0 = u64 [sp + 0xc8]\n 89411: t0 = u64 [sp + 0xd8]\n 89415: t1 = u64 [sp + 0xc0]\n 89419: a3 = u64 [sp + 0xd0]\n 89423: a1 = u64 [sp + 0x38]\n 89426: a4 = a0 ^ a1\n 89429: a5 = a0 <u a1\n 89432: t2 = a1\n 89434: a2 = u64 [sp + 0x28]\n 89437: a1 = t1 <u a2\n 89440: a5 = a1 if a4 == 0\n 89443: a4 = a3 - s1\n 89446: a3 = a3 <u s1\n 89449: s1 = u64 [sp + 0x30]\n 89452: s1 = t0 - s1\n 89455: s1 = s1 - a3\n 89458: a3 = a4 <u a5\n 89461: s1 = s1 - a3\n 89464: a4 = a4 - a5\n 89467: a0 = a0 - t2\n 89470: a1 = a0 - a1\n 89473: a0 = t1 - a2\n 89476: a1 = a1 | s1\n 89479: a2 = a0 | a4\n 89482: a2 = a2 | a1\n 89485: a1 = a1 | a4\n 89488: a2 = a2 >> 0x20\n 89491: a1 = a1 << 0x20\n 89494: a1 = a1 | a2\n 89497: jump @1087 if a1 == 0\n      : @1086 (gas: 1)\n 89500: trap\n      : @1087 (gas: 4)\n 89501: i32 s1 = a0 + 0\n 89503: a0 = u64 [sp + 0x20]\n 89506: a1 = s1\n 89508: ra = 994, jump @0\n      : @1088 [@dyn 497] (gas: 6)\n 89515: i32 a1 = a0 + 0\n 89517: a0 = 0x1\n 89520: a2 = s1\n 89522: ra = 0x3e4\n 89526: ecalli 12 // 'seal_return'\n 89528: fallthrough\n      : @1089 [@dyn 498] (gas: 12)\n 89529: a1 = u64 [a0 + 0x10]\n 89532: a2 = u64 [a0 + 0x18]\n 89535: a3 = u64 [a0 + 0x8]\n 89538: a0 = u64 [a0]\n 89540: a2 = a2 | a3\n 89543: a3 = a0 | a1\n 89546: a3 = a3 | a2\n 89549: a3 = a3 >> 0x20\n 89552: a1 = a1 | a2\n 89555: a1 = a1 << 0x20\n 89558: a1 = a1 | a3\n 89561: jump @1092 if a1 != 0\n      : @1090 (gas: 7)\n 89565: sp = sp + 0xfffffffffffffff0\n 89568: u64 [sp + 0x8] = ra\n 89571: u64 [sp] = s0\n 89573: i32 a0 = a0 + 0\n 89575: a1 = 0x20\n 89578: s0 = 0x20\n 89581: ra = 998, jump @0\n      : @1091 [@dyn 499] (gas: 41)\n 89588: u8 [a0 + 31] = 0\n 89591: u8 [a0 + 30] = 0\n 89594: u8 [a0 + 29] = 0x74\n 89598: u8 [a0 + 28] = 0x73\n 89602: u8 [a0 + 27] = 0x69\n 89606: u8 [a0 + 26] = 0x78\n 89610: u8 [a0 + 25] = 0x65\n 89614: u8 [a0 + 0x18] = s0\n 89617: u8 [a0 + 23] = 0x74\n 89621: a2 = 0x6f\n 89624: u8 [a0 + 0x16] = a2\n 89627: u8 [a0 + 21] = 0x6e\n 89631: u8 [a0 + 0x14] = s0\n 89634: u8 [a0 + 19] = 0x73\n 89638: u8 [a0 + 18] = 0x65\n 89642: u8 [a0 + 0x11] = a2\n 89645: u8 [a0 + 16] = 0x64\n 89649: u8 [a0 + 0xf] = s0\n 89652: u8 [a0 + 14] = 0x65\n 89656: a5 = 0x63\n 89659: u8 [a0 + 0xd] = a5\n 89662: u8 [a0 + 12] = 0x69\n 89666: u8 [a0 + 11] = 0x76\n 89670: a3 = 0x72\n 89673: u8 [a0 + 0xa] = a3\n 89676: u8 [a0 + 9] = 0x65\n 89680: u8 [a0 + 8] = 0x73\n 89684: u8 [a0 + 0x7] = s0\n 89687: u8 [a0 + 6] = 0x3a\n 89691: a4 = 0x77\n 89694: u8 [a0 + 0x5] = a4\n 89697: u8 [a0 + 0x4] = a2\n 89700: u8 [a0 + 0x3] = a3\n 89703: u8 [a0 + 0x2] = a5\n 89706: u8 [a0 + 1] = 0x73\n 89710: a1 = 0x45\n 89713: u8 [a0] = a1\n 89715: ra = u64 [sp + 0x8]\n 89718: s0 = u64 [sp]\n 89720: sp = sp + 0x10\n 89723: ret\n      : @1092 (gas: 1)\n 89725: trap\n      : @1093 (gas: 17)\n 89726: sp = sp + 0xffffffffffffffa0\n 89729: u64 [sp + 0x58] = ra\n 89732: u64 [sp + 0x50] = s0\n 89735: u64 [sp + 0x48] = s1\n 89738: a3 = u64 [a1 + 0x18]\n 89741: a4 = u64 [a1 + 0x10]\n 89744: a5 = u64 [a1 + 0x8]\n 89747: s1 = u64 [a1]\n 89749: a1 = a5 | a3\n 89752: a2 = s1 | a4\n 89755: a2 = a2 | a1\n 89758: a2 = a2 >> 0x20\n 89761: a1 = a1 | a4\n 89764: a1 = a1 << 0x20\n 89767: a1 = a1 | a2\n 89770: u64 [sp + 0x28] = a0\n 89773: jump @1100 if a1 != 0\n      : @1094 (gas: 19)\n 89777: a0 = s1 + 0x20\n 89780: u64 [sp + 0x30] = a0\n 89783: a0 = a0 <u s1\n 89786: a1 = a5 + a0\n 89789: u64 [sp + 0x40] = a1\n 89792: u64 [sp + 0x8] = a5\n 89795: s0 = a1 <u a5\n 89798: s0 = a0 if a0 == 0\n 89801: s0 = s0 + a4\n 89804: u64 [sp + 0x10] = a4\n 89807: a0 = s0 <u a4\n 89810: u64 [sp + 0x18] = a3\n 89813: a0 = a0 + a3\n 89816: u64 [sp + 0x38] = a0\n 89819: u64 [sp] = s1\n 89821: i32 a0 = s1 + 0\n 89823: a1 = 0x20\n 89826: s1 = 0x20\n 89829: ra = 1000, jump @0\n      : @1095 [@dyn 500] (gas: 45)\n 89836: u8 [a0 + 0x1f] = s1\n 89839: a1 = u64 [sp + 0x30]\n 89842: s1 = a1\n 89844: a1 = a1 | s0\n 89847: a2 = u64 [sp + 0x40]\n 89850: a4 = u64 [sp + 0x38]\n 89853: a2 = a2 | a4\n 89856: a1 = a1 | a2\n 89859: a1 = a1 >> 0x20\n 89862: u64 [sp + 0x20] = s0\n 89865: a2 = a2 | s0\n 89868: a2 = a2 << 0x20\n 89871: a1 = a1 | a2\n 89874: u8 [a0 + 30] = 0\n 89877: u8 [a0 + 29] = 0\n 89880: u8 [a0 + 28] = 0\n 89883: u8 [a0 + 27] = 0\n 89886: u8 [a0 + 26] = 0\n 89889: u8 [a0 + 25] = 0\n 89892: u8 [a0 + 24] = 0\n 89895: u8 [a0 + 23] = 0\n 89898: u8 [a0 + 22] = 0\n 89901: u8 [a0 + 21] = 0\n 89904: u8 [a0 + 20] = 0\n 89907: u8 [a0 + 19] = 0\n 89910: u8 [a0 + 18] = 0\n 89913: u8 [a0 + 17] = 0\n 89916: u8 [a0 + 16] = 0\n 89919: u8 [a0 + 15] = 0\n 89922: u8 [a0 + 14] = 0\n 89925: u8 [a0 + 13] = 0\n 89928: u8 [a0 + 12] = 0\n 89931: u8 [a0 + 11] = 0\n 89934: u8 [a0 + 10] = 0\n 89937: u8 [a0 + 9] = 0\n 89940: u8 [a0 + 8] = 0\n 89943: u8 [a0 + 7] = 0\n 89946: u8 [a0 + 6] = 0\n 89949: u8 [a0 + 5] = 0\n 89952: u8 [a0 + 4] = 0\n 89955: u8 [a0 + 3] = 0\n 89958: u8 [a0 + 2] = 0\n 89961: u8 [a0 + 1] = 0\n 89964: u8 [a0 + 0] = 0\n 89966: jump @1100 if a1 != 0\n      : @1096 (gas: 4)\n 89970: i32 s0 = s1 + 0\n 89972: a1 = 0x20\n 89975: a0 = s0\n 89977: ra = 1002, jump @0\n      : @1097 [@dyn 501] (gas: 41)\n 89984: u8 [a0 + 31] = 0x1e\n 89988: u8 [a0 + 30] = 0\n 89991: u8 [a0 + 29] = 0\n 89994: u8 [a0 + 28] = 0\n 89997: u8 [a0 + 27] = 0\n 90000: u8 [a0 + 26] = 0\n 90003: u8 [a0 + 25] = 0\n 90006: u8 [a0 + 24] = 0\n 90009: u8 [a0 + 23] = 0\n 90012: u8 [a0 + 22] = 0\n 90015: u8 [a0 + 21] = 0\n 90018: u8 [a0 + 20] = 0\n 90021: u8 [a0 + 19] = 0\n 90024: u8 [a0 + 18] = 0\n 90027: u8 [a0 + 17] = 0\n 90030: u8 [a0 + 16] = 0\n 90033: u8 [a0 + 15] = 0\n 90036: u8 [a0 + 14] = 0\n 90039: u8 [a0 + 13] = 0\n 90042: u8 [a0 + 12] = 0\n 90045: u8 [a0 + 11] = 0\n 90048: u8 [a0 + 10] = 0\n 90051: u8 [a0 + 9] = 0\n 90054: u8 [a0 + 8] = 0\n 90057: u8 [a0 + 7] = 0\n 90060: u8 [a0 + 6] = 0\n 90063: u8 [a0 + 5] = 0\n 90066: u8 [a0 + 4] = 0\n 90069: u8 [a0 + 3] = 0\n 90072: u8 [a0 + 2] = 0\n 90075: u8 [a0 + 1] = 0\n 90078: a1 = u64 [sp + 0x20]\n 90081: a2 = u64 [sp + 0x38]\n 90084: a1 = a1 | a2\n 90087: a2 = 0xffffffe0\n 90097: a2 = s1 <u a2\n 90100: a3 = u64 [sp + 0x40]\n 90103: a2 = 0 if a3 != 0\n 90105: a2 = 0 if a1 != 0\n 90107: u8 [a0 + 0] = 0\n 90109: jump @1100 if a2 == 0\n      : @1098 (gas: 3)\n 90113: i32 a0 = s0 + 0x20\n 90116: a1 = 0x20\n 90119: ra = 1004, jump @0\n      : @1099 [@dyn 502] (gas: 55)\n 90126: u8 [a0 + 31] = 0\n 90129: u8 [a0 + 30] = 0\n 90132: u8 [a0 + 29] = 0x74\n 90136: u8 [a0 + 28] = 0x73\n 90140: u8 [a0 + 27] = 0x69\n 90144: u8 [a0 + 26] = 0x78\n 90148: u8 [a0 + 25] = 0x65\n 90152: u8 [a0 + 24] = 0x20\n 90156: u8 [a0 + 23] = 0x74\n 90160: u8 [a0 + 22] = 0x6f\n 90164: u8 [a0 + 21] = 0x6e\n 90168: u8 [a0 + 20] = 0x20\n 90172: u8 [a0 + 19] = 0x73\n 90176: u8 [a0 + 18] = 0x65\n 90180: u8 [a0 + 17] = 0x6f\n 90184: u8 [a0 + 16] = 0x64\n 90188: u8 [a0 + 15] = 0x20\n 90192: u8 [a0 + 14] = 0x65\n 90196: a5 = 0x63\n 90199: u8 [a0 + 0xd] = a5\n 90202: u8 [a0 + 12] = 0x69\n 90206: u8 [a0 + 11] = 0x76\n 90210: u8 [a0 + 10] = 0x72\n 90214: u8 [a0 + 9] = 0x65\n 90218: u8 [a0 + 8] = 0x73\n 90222: u8 [a0 + 7] = 0x20\n 90226: u8 [a0 + 6] = 0x3a\n 90230: u8 [a0 + 5] = 0x77\n 90234: u8 [a0 + 4] = 0x6f\n 90238: u8 [a0 + 3] = 0x72\n 90242: u8 [a0 + 0x2] = a5\n 90245: u8 [a0 + 1] = 0x73\n 90249: u8 [a0 + 0] = 0x45\n 90252: a1 = u64 [sp]\n 90254: a0 = a1 + 0x60\n 90257: a1 = a0 <u a1\n 90260: a3 = u64 [sp + 0x8]\n 90263: a2 = a3 + a1\n 90266: a3 = a2 <u a3\n 90269: a3 = a1 if a1 == 0\n 90272: a1 = u64 [sp + 0x10]\n 90275: a3 = a3 + a1\n 90278: a1 = a3 <u a1\n 90281: a4 = u64 [sp + 0x18]\n 90284: a1 = a1 + a4\n 90287: a4 = u64 [sp + 0x28]\n 90290: u64 [a4] = a0\n 90292: u64 [a4 + 0x8] = a2\n 90295: u64 [a4 + 0x10] = a3\n 90298: u64 [a4 + 0x18] = a1\n 90301: ra = u64 [sp + 0x58]\n 90304: s0 = u64 [sp + 0x50]\n 90307: s1 = u64 [sp + 0x48]\n 90310: sp = sp + 0x60\n 90313: ret\n      : @1100 (gas: 1)\n 90315: trap\n      : @1101 (gas: 16)\n 90316: sp = sp + 0xffffffffffffffa0\n 90319: u64 [sp + 0x58] = ra\n 90322: u64 [sp + 0x50] = s0\n 90325: u64 [sp + 0x48] = s1\n 90328: a3 = u64 [a1 + 0x18]\n 90331: a4 = u64 [a1 + 0x10]\n 90334: a5 = u64 [a1 + 0x8]\n 90337: s1 = u64 [a1]\n 90339: a1 = a5 | a3\n 90342: a2 = s1 | a4\n 90345: a2 = a2 | a1\n 90348: a2 = a2 >> 0x20\n 90351: a1 = a1 | a4\n 90354: a1 = a1 << 0x20\n 90357: a1 = a1 | a2\n 90360: jump @1108 if a1 != 0\n      : @1102 (gas: 20)\n 90364: u64 [sp + 0x10] = a0\n 90367: a0 = s1 + 0x20\n 90370: u64 [sp + 0x30] = a0\n 90373: a0 = a0 <u s1\n 90376: a1 = a5 + a0\n 90379: u64 [sp + 0x40] = a1\n 90382: u64 [sp + 0x8] = a5\n 90385: s0 = a1 <u a5\n 90388: s0 = a0 if a0 == 0\n 90391: s0 = s0 + a4\n 90394: u64 [sp + 0x18] = a4\n 90397: a0 = s0 <u a4\n 90400: u64 [sp + 0x20] = a3\n 90403: a0 = a0 + a3\n 90406: u64 [sp + 0x38] = a0\n 90409: u64 [sp] = s1\n 90411: i32 a0 = s1 + 0\n 90413: a1 = 0x20\n 90416: s1 = 0x20\n 90419: ra = 1006, jump @0\n      : @1103 [@dyn 503] (gas: 45)\n 90426: a1 = u64 [sp + 0x30]\n 90429: a3 = a1\n 90431: a1 = a1 | s0\n 90434: a2 = u64 [sp + 0x40]\n 90437: a4 = u64 [sp + 0x38]\n 90440: a2 = a2 | a4\n 90443: a1 = a1 | a2\n 90446: a1 = a1 >> 0x20\n 90449: u64 [sp + 0x28] = s0\n 90452: a2 = a2 | s0\n 90455: a2 = a2 << 0x20\n 90458: a1 = a1 | a2\n 90461: u8 [a0 + 0x1f] = s1\n 90464: u8 [a0 + 30] = 0\n 90467: u8 [a0 + 29] = 0\n 90470: u8 [a0 + 28] = 0\n 90473: u8 [a0 + 27] = 0\n 90476: u8 [a0 + 26] = 0\n 90479: u8 [a0 + 25] = 0\n 90482: u8 [a0 + 24] = 0\n 90485: u8 [a0 + 23] = 0\n 90488: u8 [a0 + 22] = 0\n 90491: u8 [a0 + 21] = 0\n 90494: u8 [a0 + 20] = 0\n 90497: u8 [a0 + 19] = 0\n 90500: u8 [a0 + 18] = 0\n 90503: u8 [a0 + 17] = 0\n 90506: u8 [a0 + 16] = 0\n 90509: u8 [a0 + 15] = 0\n 90512: u8 [a0 + 14] = 0\n 90515: u8 [a0 + 13] = 0\n 90518: u8 [a0 + 12] = 0\n 90521: u8 [a0 + 11] = 0\n 90524: u8 [a0 + 10] = 0\n 90527: u8 [a0 + 9] = 0\n 90530: u8 [a0 + 8] = 0\n 90533: u8 [a0 + 7] = 0\n 90536: u8 [a0 + 6] = 0\n 90539: u8 [a0 + 5] = 0\n 90542: u8 [a0 + 4] = 0\n 90545: u8 [a0 + 3] = 0\n 90548: u8 [a0 + 2] = 0\n 90551: u8 [a0 + 1] = 0\n 90554: u8 [a0 + 0] = 0\n 90556: jump @1108 if a1 != 0\n      : @1104 (gas: 5)\n 90560: s1 = a3\n 90562: i32 s0 = a3 + 0\n 90564: a1 = 0x20\n 90567: a0 = s0\n 90569: ra = 1008, jump @0\n      : @1105 [@dyn 504] (gas: 41)\n 90576: u8 [a0 + 31] = 0x20\n 90580: u8 [a0 + 30] = 0\n 90583: u8 [a0 + 29] = 0\n 90586: u8 [a0 + 28] = 0\n 90589: u8 [a0 + 27] = 0\n 90592: u8 [a0 + 26] = 0\n 90595: u8 [a0 + 25] = 0\n 90598: u8 [a0 + 24] = 0\n 90601: u8 [a0 + 23] = 0\n 90604: u8 [a0 + 22] = 0\n 90607: u8 [a0 + 21] = 0\n 90610: u8 [a0 + 20] = 0\n 90613: u8 [a0 + 19] = 0\n 90616: u8 [a0 + 18] = 0\n 90619: u8 [a0 + 17] = 0\n 90622: u8 [a0 + 16] = 0\n 90625: u8 [a0 + 15] = 0\n 90628: u8 [a0 + 14] = 0\n 90631: u8 [a0 + 13] = 0\n 90634: u8 [a0 + 12] = 0\n 90637: u8 [a0 + 11] = 0\n 90640: u8 [a0 + 10] = 0\n 90643: u8 [a0 + 9] = 0\n 90646: u8 [a0 + 8] = 0\n 90649: u8 [a0 + 7] = 0\n 90652: u8 [a0 + 6] = 0\n 90655: u8 [a0 + 5] = 0\n 90658: u8 [a0 + 4] = 0\n 90661: u8 [a0 + 3] = 0\n 90664: u8 [a0 + 2] = 0\n 90667: u8 [a0 + 1] = 0\n 90670: a1 = u64 [sp + 0x28]\n 90673: a2 = u64 [sp + 0x38]\n 90676: a1 = a1 | a2\n 90679: a2 = 0xffffffe0\n 90689: a2 = s1 <u a2\n 90692: a3 = u64 [sp + 0x40]\n 90695: a2 = 0 if a3 != 0\n 90697: a2 = 0 if a1 != 0\n 90699: u8 [a0 + 0] = 0\n 90701: jump @1108 if a2 == 0\n      : @1106 (gas: 4)\n 90705: i32 a0 = s0 + 0x20\n 90708: a1 = 0x20\n 90711: s0 = 0x20\n 90714: ra = 1010, jump @0\n      : @1107 [@dyn 505] (gas: 54)\n 90721: u8 [a0 + 29] = 0x75\n 90725: u8 [a0 + 27] = 0x6d\n 90729: u8 [a0 + 21] = 0x6d\n 90733: u8 [a0 + 20] = 0x79\n 90737: u8 [a0 + 26] = 0x61\n 90741: u8 [a0 + 19] = 0x61\n 90745: u8 [a0 + 18] = 0x70\n 90749: u8 [a0 + 31] = 0x74\n 90753: u8 [a0 + 24] = 0x74\n 90757: u8 [a0 + 16] = 0x74\n 90761: u8 [a0 + 22] = 0x65\n 90765: u8 [a0 + 14] = 0x65\n 90769: u8 [a0 + 30] = 0x6e\n 90773: u8 [a0 + 23] = 0x6e\n 90777: u8 [a0 + 9] = 0x6e\n 90781: u8 [a0 + 8] = 0x69\n 90785: u8 [a0 + 0x19] = s0\n 90788: u8 [a0 + 0x11] = s0\n 90791: u8 [a0 + 0x7] = s0\n 90794: u8 [a0 + 6] = 0x3a\n 90798: u8 [a0 + 5] = 0x77\n 90802: u8 [a0 + 28] = 0x6f\n 90806: u8 [a0 + 11] = 0x6f\n 90810: u8 [a0 + 4] = 0x6f\n 90814: u8 [a0 + 13] = 0x72\n 90818: u8 [a0 + 12] = 0x72\n 90822: u8 [a0 + 3] = 0x72\n 90826: u8 [a0 + 15] = 0x63\n 90830: u8 [a0 + 10] = 0x63\n 90834: u8 [a0 + 2] = 0x63\n 90838: u8 [a0 + 1] = 0x73\n 90842: u8 [a0 + 0] = 0x45\n 90845: a1 = u64 [sp]\n 90847: a0 = a1 + 0x60\n 90850: a1 = a0 <u a1\n 90853: a3 = u64 [sp + 0x8]\n 90856: a2 = a3 + a1\n 90859: a3 = a2 <u a3\n 90862: a3 = a1 if a1 == 0\n 90865: a1 = u64 [sp + 0x18]\n 90868: a3 = a3 + a1\n 90871: a1 = a3 <u a1\n 90874: a4 = u64 [sp + 0x20]\n 90877: a1 = a1 + a4\n 90880: a4 = u64 [sp + 0x10]\n 90883: u64 [a4] = a0\n 90885: u64 [a4 + 0x8] = a2\n 90888: u64 [a4 + 0x10] = a3\n 90891: u64 [a4 + 0x18] = a1\n 90894: ra = u64 [sp + 0x58]\n 90897: s0 = u64 [sp + 0x50]\n 90900: s1 = u64 [sp + 0x48]\n 90903: sp = sp + 0x60\n 90906: ret\n      : @1108 (gas: 1)\n 90908: trap\n      : @1109 (gas: 22)\n 90909: sp = sp + 0xfffffffffffffee0\n 90913: u64 [sp + 0x118] = ra\n 90917: u64 [sp + 0x110] = s0\n 90921: u64 [sp + 0x108] = s1\n 90925: s0 = sp + 0x120\n 90929: sp = sp & 0xffffffffffffffe0\n 90932: a4 = u64 [a1 + 0x10]\n 90935: a5 = u64 [a1 + 0x18]\n 90938: a2 = u64 [a1 + 0x8]\n 90941: a3 = u64 [a1]\n 90943: u64 [sp + 0x70] = a2\n 90946: u64 [sp + 0x58] = a5\n 90949: a1 = a2 | a5\n 90952: u64 [sp + 0x80] = a3\n 90956: a2 = a3 | a4\n 90959: a2 = a2 | a1\n 90962: a2 = a2 >> 0x20\n 90965: u64 [sp + 0x78] = a4\n 90968: a1 = a1 | a4\n 90971: a1 = a1 << 0x20\n 90974: a1 = a1 | a2\n 90977: jump @1124 if a1 != 0\n      : @1110 (gas: 12)\n 90981: a1 = u64 [a0 + 0x18]\n 90984: u64 [sp + 0x60] = a1\n 90987: a1 = u64 [a0 + 0x10]\n 90990: u64 [sp + 0x88] = a1\n 90994: a1 = u64 [a0 + 0x8]\n 90997: u64 [sp + 0x90] = a1\n 91001: a0 = u64 [a0]\n 91003: u64 [sp + 0x98] = a0\n 91007: a0 = i32 [sp + 0x80]\n 91011: a1 = 0x20\n 91014: u64 [sp + 0x68] = a0\n 91017: ra = 1012, jump @0\n      : @1111 [@dyn 506] (gas: 105)\n 91024: a1 = u8 [a0 + 0x11]\n 91027: a2 = u8 [a0 + 0x10]\n 91030: a3 = u8 [a0 + 0x12]\n 91033: a4 = u8 [a0 + 0x13]\n 91036: a1 = a1 << 0x8\n 91039: a1 = a1 | a2\n 91042: a3 = a3 << 0x10\n 91045: a4 = a4 << 0x18\n 91048: a3 = a3 | a4\n 91051: a1 = a1 | a3\n 91054: a2 = u8 [a0 + 0x15]\n 91057: a3 = u8 [a0 + 0x14]\n 91060: a4 = u8 [a0 + 0x16]\n 91063: a5 = u8 [a0 + 0x17]\n 91066: a2 = a2 << 0x8\n 91069: a2 = a2 | a3\n 91072: a4 = a4 << 0x10\n 91075: a5 = a5 << 0x18\n 91078: a4 = a4 | a5\n 91081: a2 = a2 | a4\n 91084: a2 = a2 << 0x20\n 91087: a1 = a1 | a2\n 91090: a2 = u8 [a0 + 0x19]\n 91093: a3 = u8 [a0 + 0x18]\n 91096: a4 = u8 [a0 + 0x1a]\n 91099: a5 = u8 [a0 + 0x1b]\n 91102: a2 = a2 << 0x8\n 91105: a2 = a2 | a3\n 91108: a4 = a4 << 0x10\n 91111: a5 = a5 << 0x18\n 91114: a4 = a4 | a5\n 91117: a2 = a2 | a4\n 91120: a3 = u8 [a0 + 0x1d]\n 91123: a4 = u8 [a0 + 0x1c]\n 91126: a5 = u8 [a0 + 0x1e]\n 91129: s1 = u8 [a0 + 0x1f]\n 91132: a3 = a3 << 0x8\n 91135: a3 = a3 | a4\n 91138: a5 = a5 << 0x10\n 91141: s1 = s1 << 0x18\n 91144: a5 = a5 | s1\n 91147: a3 = a3 | a5\n 91150: a3 = a3 << 0x20\n 91153: a2 = a2 | a3\n 91156: a3 = u8 [a0 + 0xd]\n 91159: a4 = u8 [a0 + 0xc]\n 91162: a5 = u8 [a0 + 0xe]\n 91165: a0 = u8 [a0 + 0xf]\n 91168: a3 = a3 << 0x8\n 91171: a3 = a3 | a4\n 91174: a5 = a5 << 0x10\n 91177: a0 = a0 << 0x18\n 91180: a0 = a0 | a5\n 91183: a0 = a0 | a3\n 91186: a2 = reverse a2\n 91188: u64 [sp + 0x50] = a2\n 91191: a1 = reverse a1\n 91193: u64 [sp + 0x48] = a1\n 91196: s1 = reverse a0\n 91198: s1 = s1 >> 0x20\n 91201: u64 [sp + 0x40] = s1\n 91204: s1 = u64 [sp + 0x60]\n 91207: u64 [sp + 0xd8] = s1\n 91211: a0 = u64 [sp + 0x88]\n 91215: u64 [sp + 0xd0] = a0\n 91219: a0 = u64 [sp + 0x90]\n 91223: u64 [sp + 0xc8] = a0\n 91227: a0 = u64 [sp + 0x98]\n 91231: u64 [sp + 0xc0] = a0\n 91235: u64 [sp + 248] = 0\n 91239: u64 [sp + 240] = 0\n 91243: u64 [sp + 232] = 0\n 91247: u64 [sp + 224] = 0\n 91251: u32 [sp + 160] = 0x20\n 91256: i32 a1 = sp + 0xc0\n 91260: i32 a3 = sp + 0xe0\n 91264: i32 a4 = sp + 0xa0\n 91268: a2 = 0xffffffffffffffff\n 91271: a0 = 0\n 91273: ecalli 7 // 'get_storage'\n 91275: a0 = u32 [sp + 0xf4]\n 91279: a0 = a0 << 0x20\n 91282: a1 = u64 [sp + 0xf8]\n 91286: a2 = u64 [sp + 0x40]\n 91289: a0 = a0 | a2\n 91292: u64 [sp + 0xd8] = s1\n 91296: a2 = u64 [sp + 0x88]\n 91300: u64 [sp + 0xd0] = a2\n 91304: a2 = u64 [sp + 0x90]\n 91308: u64 [sp + 0xc8] = a2\n 91312: a2 = u64 [sp + 0x98]\n 91316: u64 [sp + 0xc0] = a2\n 91320: u64 [sp + 0xf8] = a1\n 91324: u64 [sp + 0xf0] = a0\n 91328: a0 = u64 [sp + 0x48]\n 91331: u64 [sp + 0xe8] = a0\n 91335: a0 = u64 [sp + 0x50]\n 91338: u64 [sp + 0xe0] = a0\n 91342: i32 a1 = sp + 0xc0\n 91346: i32 a3 = sp + 0xe0\n 91350: a2 = 0xffffffffffffffff\n 91353: a4 = 0x20\n 91356: a0 = 0\n 91358: ecalli 14 // 'set_storage'\n 91360: fallthrough\n      : @1112 (gas: 13)\n 91361: a0 = u64 [sp + 0x78]\n 91364: a2 = u64 [sp + 0x58]\n 91367: a2 = a2 | a0\n 91370: a0 = 0x100000000\n 91380: u64 [sp + 0x40] = a0\n 91383: a0 = 0xffffffe0\n 91393: a1 = u64 [sp + 0x80]\n 91397: a0 = a1 <u a0\n 91400: a1 = u64 [sp + 0x70]\n 91403: a0 = 0 if a1 != 0\n 91405: u64 [sp + 0x58] = a2\n 91408: a0 = 0 if a2 != 0\n 91410: jump @1124 if a0 == 0\n      : @1113 (gas: 20)\n 91414: a0 = u64 [sp + 0x98]\n 91418: a2 = a0 + 0x1\n 91421: u64 [sp + 0x48] = a2\n 91424: a0 = a2 <u 0x1\n 91427: a1 = u64 [sp + 0x90]\n 91431: a0 = a0 + a1\n 91434: u64 [sp + 0x78] = a0\n 91437: a0 = a0 | a2\n 91440: a0 = a0 <u 0x1\n 91443: a1 = u64 [sp + 0x88]\n 91447: a0 = a0 + a1\n 91450: u64 [sp + 0x50] = a0\n 91453: a0 = a0 <u a1\n 91456: a1 = u64 [sp + 0x60]\n 91459: a0 = a0 + a1\n 91462: u64 [sp + 0x38] = a0\n 91465: a0 = u64 [sp + 0x68]\n 91468: i32 a0 = a0 + 0x20\n 91471: a1 = 0x20\n 91474: ra = 1014, jump @0\n      : @1114 [@dyn 507] (gas: 137)\n 91481: a1 = u8 [a0 + 0x1]\n 91484: a2 = u8 [a0]\n 91486: a3 = u8 [a0 + 0x2]\n 91489: a4 = u8 [a0 + 0x3]\n 91492: a1 = a1 << 0x8\n 91495: a1 = a1 | a2\n 91498: a3 = a3 << 0x10\n 91501: a4 = a4 << 0x18\n 91504: a3 = a3 | a4\n 91507: a1 = a1 | a3\n 91510: a2 = u8 [a0 + 0x5]\n 91513: a3 = u8 [a0 + 0x4]\n 91516: a4 = u8 [a0 + 0x6]\n 91519: a5 = u8 [a0 + 0x7]\n 91522: a2 = a2 << 0x8\n 91525: a2 = a2 | a3\n 91528: a4 = a4 << 0x10\n 91531: a5 = a5 << 0x18\n 91534: a4 = a4 | a5\n 91537: a2 = a2 | a4\n 91540: a2 = a2 << 0x20\n 91543: t0 = a2 | a1\n 91546: a2 = u8 [a0 + 0x9]\n 91549: a3 = u8 [a0 + 0x8]\n 91552: a4 = u8 [a0 + 0xa]\n 91555: a5 = u8 [a0 + 0xb]\n 91558: a2 = a2 << 0x8\n 91561: a2 = a2 | a3\n 91564: a4 = a4 << 0x10\n 91567: a5 = a5 << 0x18\n 91570: a4 = a4 | a5\n 91573: a2 = a2 | a4\n 91576: a3 = u8 [a0 + 0xd]\n 91579: a4 = u8 [a0 + 0xc]\n 91582: a5 = u8 [a0 + 0xe]\n 91585: s1 = u8 [a0 + 0xf]\n 91588: a3 = a3 << 0x8\n 91591: a3 = a3 | a4\n 91594: a5 = a5 << 0x10\n 91597: s1 = s1 << 0x18\n 91600: a5 = a5 | s1\n 91603: a3 = a3 | a5\n 91606: a3 = a3 << 0x20\n 91609: a2 = a2 | a3\n 91612: a3 = u8 [a0 + 0x11]\n 91615: a4 = u8 [a0 + 0x10]\n 91618: a5 = u8 [a0 + 0x12]\n 91621: s1 = u8 [a0 + 0x13]\n 91624: a3 = a3 << 0x8\n 91627: a3 = a3 | a4\n 91630: a5 = a5 << 0x10\n 91633: s1 = s1 << 0x18\n 91636: a5 = a5 | s1\n 91639: a3 = a3 | a5\n 91642: a4 = u8 [a0 + 0x15]\n 91645: a5 = u8 [a0 + 0x14]\n 91648: s1 = u8 [a0 + 0x16]\n 91651: a1 = u8 [a0 + 0x17]\n 91654: a4 = a4 << 0x8\n 91657: a4 = a4 | a5\n 91660: s1 = s1 << 0x10\n 91663: a1 = a1 << 0x18\n 91666: a1 = a1 | s1\n 91669: a1 = a1 | a4\n 91672: a1 = a1 << 0x20\n 91675: a3 = a3 | a1\n 91678: a1 = u8 [a0 + 0x19]\n 91681: a4 = u8 [a0 + 0x18]\n 91684: a5 = u8 [a0 + 0x1a]\n 91687: s1 = u8 [a0 + 0x1b]\n 91690: a1 = a1 << 0x8\n 91693: a1 = a1 | a4\n 91696: a5 = a5 << 0x10\n 91699: s1 = s1 << 0x18\n 91702: a5 = a5 | s1\n 91705: a1 = a1 | a5\n 91708: a4 = u8 [a0 + 0x1d]\n 91711: a5 = u8 [a0 + 0x1c]\n 91714: s1 = u8 [a0 + 0x1e]\n 91717: a0 = u8 [a0 + 0x1f]\n 91720: a4 = a4 << 0x8\n 91723: a4 = a4 | a5\n 91726: s1 = s1 << 0x10\n 91729: a0 = a0 << 0x18\n 91732: a0 = a0 | s1\n 91735: a0 = a0 | a4\n 91738: a0 = a0 << 0x20\n 91741: a0 = a0 | a1\n 91744: u32 [sp + 160] = 0x20\n 91749: a0 = reverse a0\n 91751: u64 [sp + 0x30] = a0\n 91754: a0 = reverse a3\n 91756: u64 [sp + 0x28] = a0\n 91759: a0 = reverse a2\n 91761: u64 [sp + 0x20] = a0\n 91764: a0 = reverse t0\n 91766: u64 [sp + 0x18] = a0\n 91769: a0 = u64 [sp + 0x50]\n 91772: u64 [sp + 0xd0] = a0\n 91776: a0 = u64 [sp + 0x78]\n 91779: u64 [sp + 0xc8] = a0\n 91783: a0 = u64 [sp + 0x48]\n 91786: u64 [sp + 0xc0] = a0\n 91790: s1 = u64 [sp + 0x38]\n 91793: u64 [sp + 0xd8] = s1\n 91797: u64 [sp + 248] = 0\n 91801: u64 [sp + 240] = 0\n 91805: u64 [sp + 232] = 0\n 91809: u64 [sp + 224] = 0\n 91813: i32 a1 = sp + 0xc0\n 91817: i32 a3 = sp + 0xe0\n 91821: i32 a4 = sp + 0xa0\n 91825: a2 = 0xffffffffffffffff\n 91828: a0 = 0\n 91830: ecalli 7 // 'get_storage'\n 91832: u64 [sp + 0xd8] = s1\n 91836: a0 = u64 [sp + 0x50]\n 91839: u64 [sp + 0xd0] = a0\n 91843: a0 = u64 [sp + 0x78]\n 91846: u64 [sp + 0xc8] = a0\n 91850: a0 = u64 [sp + 0x48]\n 91853: u64 [sp + 0xc0] = a0\n 91857: a0 = u64 [sp + 0x18]\n 91860: u64 [sp + 0xf8] = a0\n 91864: a0 = u64 [sp + 0x20]\n 91867: u64 [sp + 0xf0] = a0\n 91871: a0 = u64 [sp + 0x28]\n 91874: u64 [sp + 0xe8] = a0\n 91878: a0 = u64 [sp + 0x30]\n 91881: u64 [sp + 0xe0] = a0\n 91885: i32 a1 = sp + 0xc0\n 91889: i32 a3 = sp + 0xe0\n 91893: a2 = 0xffffffffffffffff\n 91896: a4 = 0x20\n 91899: a0 = 0\n 91901: ecalli 14 // 'set_storage'\n 91903: fallthrough\n      : @1115 (gas: 9)\n 91904: a0 = u64 [sp + 0x40]\n 91907: a0 = a0 + 0xffffffffffffffc0\n 91910: a1 = u64 [sp + 0x80]\n 91914: a0 = a1 <u a0\n 91917: a1 = u64 [sp + 0x70]\n 91920: a0 = 0 if a1 != 0\n 91922: a1 = u64 [sp + 0x58]\n 91925: a0 = 0 if a1 != 0\n 91927: jump @1124 if a0 == 0\n      : @1116 (gas: 20)\n 91931: a0 = u64 [sp + 0x98]\n 91935: a1 = a0 + 0x2\n 91938: u64 [sp + 0x78] = a1\n 91941: a0 = a1 <u a0\n 91944: a1 = u64 [sp + 0x90]\n 91948: a2 = a1 + a0\n 91951: u64 [sp + 0x98] = a2\n 91955: a1 = a2 <u a1\n 91958: a1 = a0 if a0 == 0\n 91961: a0 = u64 [sp + 0x88]\n 91965: a1 = a1 + a0\n 91968: u64 [sp + 0x90] = a1\n 91972: a0 = a1 <u a0\n 91975: a1 = u64 [sp + 0x60]\n 91978: a0 = a0 + a1\n 91981: u64 [sp + 0x88] = a0\n 91985: a0 = u64 [sp + 0x68]\n 91988: i32 a0 = a0 + 0x40\n 91991: a1 = 0x20\n 91994: ra = 1016, jump @0\n      : @1117 [@dyn 508] (gas: 135)\n 92001: a1 = u8 [a0 + 0x11]\n 92004: a2 = u8 [a0 + 0x10]\n 92007: a3 = u8 [a0 + 0x12]\n 92010: a4 = u8 [a0 + 0x13]\n 92013: a1 = a1 << 0x8\n 92016: a1 = a1 | a2\n 92019: a3 = a3 << 0x10\n 92022: a4 = a4 << 0x18\n 92025: a3 = a3 | a4\n 92028: t0 = a3 | a1\n 92031: a2 = u8 [a0 + 0x1]\n 92034: a3 = u8 [a0]\n 92036: a4 = u8 [a0 + 0x2]\n 92039: a5 = u8 [a0 + 0x3]\n 92042: a2 = a2 << 0x8\n 92045: a2 = a2 | a3\n 92048: a4 = a4 << 0x10\n 92051: a5 = a5 << 0x18\n 92054: a4 = a4 | a5\n 92057: t1 = a4 | a2\n 92060: a3 = u8 [a0 + 0x15]\n 92063: a4 = u8 [a0 + 0x14]\n 92066: a5 = u8 [a0 + 0x16]\n 92069: s1 = u8 [a0 + 0x17]\n 92072: a3 = a3 << 0x8\n 92075: a3 = a3 | a4\n 92078: a5 = a5 << 0x10\n 92081: s1 = s1 << 0x18\n 92084: a5 = a5 | s1\n 92087: t2 = a5 | a3\n 92090: a4 = u8 [a0 + 0x5]\n 92093: a5 = u8 [a0 + 0x4]\n 92096: s1 = u8 [a0 + 0x6]\n 92099: a1 = u8 [a0 + 0x7]\n 92102: a4 = a4 << 0x8\n 92105: a4 = a4 | a5\n 92108: s1 = s1 << 0x10\n 92111: a1 = a1 << 0x18\n 92114: a1 = a1 | s1\n 92117: ra = a1 | a4\n 92120: a1 = u8 [a0 + 0x19]\n 92123: a5 = u8 [a0 + 0x18]\n 92126: s1 = u8 [a0 + 0x1a]\n 92129: a2 = u8 [a0 + 0x1b]\n 92132: a1 = a1 << 0x8\n 92135: a1 = a1 | a5\n 92138: s1 = s1 << 0x10\n 92141: a2 = a2 << 0x18\n 92144: a2 = a2 | s1\n 92147: a5 = a2 | a1\n 92150: a1 = u8 [a0 + 0x9]\n 92153: a2 = u8 [a0 + 0x8]\n 92156: s1 = u8 [a0 + 0xa]\n 92159: a3 = u8 [a0 + 0xb]\n 92162: a1 = a1 << 0x8\n 92165: a1 = a1 | a2\n 92168: s1 = s1 << 0x10\n 92171: a3 = a3 << 0x18\n 92174: a3 = a3 | s1\n 92177: s1 = a3 | a1\n 92180: a1 = u8 [a0 + 0x1d]\n 92183: a2 = u8 [a0 + 0x1c]\n 92186: a3 = u8 [a0 + 0x1e]\n 92189: a4 = u8 [a0 + 0x1f]\n 92192: a1 = a1 << 0x8\n 92195: a1 = a1 | a2\n 92198: a3 = a3 << 0x10\n 92201: a4 = a4 << 0x18\n 92204: a3 = a3 | a4\n 92207: a1 = a1 | a3\n 92210: a2 = u8 [a0 + 0xd]\n 92213: a3 = u8 [a0 + 0xc]\n 92216: a4 = u8 [a0 + 0xe]\n 92219: a0 = u8 [a0 + 0xf]\n 92222: a2 = a2 << 0x8\n 92225: a2 = a2 | a3\n 92228: a4 = a4 << 0x10\n 92231: a0 = a0 << 0x18\n 92234: a0 = a0 | a4\n 92237: a0 = a0 | a2\n 92240: a0 = a0 | a1\n 92243: a5 = a5 | s1\n 92246: a0 = a0 << 0x20\n 92249: a0 = a0 | a5\n 92252: a1 = ra | t2\n 92255: a2 = t1 | t0\n 92258: a1 = a1 << 0x20\n 92261: a1 = a1 | a2\n 92264: a0 = a0 | a1\n 92267: a0 = a0 >u 0\n 92269: u64 [sp + 0x60] = a0\n 92272: a0 = u64 [sp + 0x88]\n 92276: u64 [sp + 0xd8] = a0\n 92280: a0 = u64 [sp + 0x90]\n 92284: u64 [sp + 0xd0] = a0\n 92288: a0 = u64 [sp + 0x98]\n 92292: u64 [sp + 0xc8] = a0\n 92296: s1 = u64 [sp + 0x78]\n 92299: u64 [sp + 0xc0] = s1\n 92303: u64 [sp + 248] = 0\n 92307: u64 [sp + 240] = 0\n 92311: u64 [sp + 232] = 0\n 92315: u64 [sp + 224] = 0\n 92319: u32 [sp + 160] = 0x20\n 92324: i32 a1 = sp + 0xc0\n 92328: i32 a3 = sp + 0xe0\n 92332: i32 a4 = sp + 0xa0\n 92336: a2 = 0xffffffffffffffff\n 92339: a0 = 0\n 92341: ecalli 7 // 'get_storage'\n 92343: a0 = u64 [sp + 0xe0]\n 92347: a1 = u64 [sp + 0xe8]\n 92351: a2 = u64 [sp + 0xf0]\n 92355: a3 = u64 [sp + 0xf8]\n 92359: a0 = a0 & 0xffffffffffffff00\n 92363: a4 = u64 [sp + 0x60]\n 92366: a0 = a0 | a4\n 92369: a4 = u64 [sp + 0x88]\n 92373: u64 [sp + 0xd8] = a4\n 92377: a4 = u64 [sp + 0x90]\n 92381: u64 [sp + 0xd0] = a4\n 92385: a4 = u64 [sp + 0x98]\n 92389: u64 [sp + 0xc8] = a4\n 92393: u64 [sp + 0xc0] = s1\n 92397: u64 [sp + 0xf8] = a3\n 92401: u64 [sp + 0xf0] = a2\n 92405: u64 [sp + 0xe8] = a1\n 92409: u64 [sp + 0xe0] = a0\n 92413: i32 a1 = sp + 0xc0\n 92417: i32 a3 = sp + 0xe0\n 92421: a2 = 0xffffffffffffffff\n 92424: a4 = 0x20\n 92427: a0 = 0\n 92429: ecalli 14 // 'set_storage'\n 92431: fallthrough\n      : @1118 (gas: 10)\n 92432: a0 = 0x100000000\n 92442: u64 [sp + 0x60] = a0\n 92445: a0 = 0xffffffa0\n 92455: a1 = u64 [sp + 0x80]\n 92459: a0 = a1 <u a0\n 92462: a1 = u64 [sp + 0x70]\n 92465: a0 = 0 if a1 != 0\n 92467: a1 = u64 [sp + 0x58]\n 92470: a0 = 0 if a1 != 0\n 92472: jump @1124 if a0 == 0\n      : @1119 (gas: 4)\n 92476: a0 = u64 [sp + 0x68]\n 92479: i32 a0 = a0 + 0x60\n 92482: a1 = 0x20\n 92485: ra = 1018, jump @0\n      : @1120 [@dyn 509] (gas: 135)\n 92492: a1 = u8 [a0 + 0x1d]\n 92495: a2 = u8 [a0 + 0x1c]\n 92498: a3 = u8 [a0 + 0x1e]\n 92501: a4 = u8 [a0 + 0x1f]\n 92504: a1 = a1 << 0x8\n 92507: a1 = a1 | a2\n 92510: a3 = a3 << 0x10\n 92513: a4 = a4 << 0x18\n 92516: a3 = a3 | a4\n 92519: a1 = a1 | a3\n 92522: a2 = u8 [a0 + 0xd]\n 92525: a3 = u8 [a0 + 0xc]\n 92528: a4 = u8 [a0 + 0xe]\n 92531: a5 = u8 [a0 + 0xf]\n 92534: a2 = a2 << 0x8\n 92537: a2 = a2 | a3\n 92540: a4 = a4 << 0x10\n 92543: a5 = a5 << 0x18\n 92546: a4 = a4 | a5\n 92549: a2 = a2 | a4\n 92552: a1 = a1 | a2\n 92555: a1 = a1 << 0x20\n 92558: a2 = u8 [a0 + 0x9]\n 92561: a3 = u8 [a0 + 0x8]\n 92564: a4 = u8 [a0 + 0xa]\n 92567: a5 = u8 [a0 + 0xb]\n 92570: a2 = a2 << 0x8\n 92573: a2 = a2 | a3\n 92576: a4 = a4 << 0x10\n 92579: a5 = a5 << 0x18\n 92582: a4 = a4 | a5\n 92585: a2 = a2 | a4\n 92588: a3 = u8 [a0 + 0x19]\n 92591: a4 = u8 [a0 + 0x18]\n 92594: a5 = u8 [a0 + 0x1a]\n 92597: s1 = u8 [a0 + 0x1b]\n 92600: a3 = a3 << 0x8\n 92603: a3 = a3 | a4\n 92606: a5 = a5 << 0x10\n 92609: s1 = s1 << 0x18\n 92612: a5 = a5 | s1\n 92615: a3 = a3 | a5\n 92618: a2 = a2 | a3\n 92621: a1 = a1 | a2\n 92624: a2 = u8 [a0 + 0x15]\n 92627: a3 = u8 [a0 + 0x14]\n 92630: a4 = u8 [a0 + 0x16]\n 92633: a5 = u8 [a0 + 0x17]\n 92636: a2 = a2 << 0x8\n 92639: a2 = a2 | a3\n 92642: a4 = a4 << 0x10\n 92645: a5 = a5 << 0x18\n 92648: a4 = a4 | a5\n 92651: a2 = a2 | a4\n 92654: a3 = u8 [a0 + 0x5]\n 92657: a4 = u8 [a0 + 0x4]\n 92660: a5 = u8 [a0 + 0x6]\n 92663: s1 = u8 [a0 + 0x7]\n 92666: a3 = a3 << 0x8\n 92669: a3 = a3 | a4\n 92672: a5 = a5 << 0x10\n 92675: s1 = s1 << 0x18\n 92678: a5 = a5 | s1\n 92681: a3 = a3 | a5\n 92684: a2 = a2 | a3\n 92687: a3 = u8 [a0 + 0x1]\n 92690: a4 = u8 [a0]\n 92692: a5 = u8 [a0 + 0x2]\n 92695: s1 = u8 [a0 + 0x3]\n 92698: a3 = a3 << 0x8\n 92701: a3 = a3 | a4\n 92704: a5 = a5 << 0x10\n 92707: s1 = s1 << 0x18\n 92710: a4 = u8 [a0 + 0x11]\n 92713: a5 = a5 | s1\n 92716: a3 = a3 | a5\n 92719: a5 = u8 [a0 + 0x10]\n 92722: a4 = a4 << 0x8\n 92725: s1 = u8 [a0 + 0x12]\n 92728: a0 = u8 [a0 + 0x13]\n 92731: a4 = a4 | a5\n 92734: a2 = a2 << 0x20\n 92737: s1 = s1 << 0x10\n 92740: a0 = a0 << 0x18\n 92743: a0 = a0 | s1\n 92746: a0 = a0 | a4\n 92749: a0 = a0 | a3\n 92752: a0 = a0 | a2\n 92755: a0 = a0 | a1\n 92758: s1 = a0 >u 0\n 92760: a0 = u64 [sp + 0x88]\n 92764: u64 [sp + 0xd8] = a0\n 92768: a0 = u64 [sp + 0x90]\n 92772: u64 [sp + 0xd0] = a0\n 92776: a0 = u64 [sp + 0x98]\n 92780: u64 [sp + 0xc8] = a0\n 92784: a0 = u64 [sp + 0x78]\n 92787: u64 [sp + 0xc0] = a0\n 92791: u64 [sp + 248] = 0\n 92795: u64 [sp + 240] = 0\n 92799: u64 [sp + 232] = 0\n 92803: u64 [sp + 224] = 0\n 92807: u32 [sp + 160] = 0x20\n 92812: i32 a1 = sp + 0xc0\n 92816: i32 a3 = sp + 0xe0\n 92820: i32 a4 = sp + 0xa0\n 92824: a2 = 0xffffffffffffffff\n 92827: a0 = 0\n 92829: ecalli 7 // 'get_storage'\n 92831: a0 = u64 [sp + 0xe8]\n 92835: a1 = u64 [sp + 0xf0]\n 92839: a2 = u64 [sp + 0xf8]\n 92843: a3 = u64 [sp + 0xe0]\n 92847: s1 = s1 << 0x8\n 92850: a3 = a3 & 0xffffffffffff00ff\n 92855: a3 = a3 | s1\n 92858: a4 = u64 [sp + 0x88]\n 92862: u64 [sp + 0xd8] = a4\n 92866: a4 = u64 [sp + 0x90]\n 92870: u64 [sp + 0xd0] = a4\n 92874: a4 = u64 [sp + 0x98]\n 92878: u64 [sp + 0xc8] = a4\n 92882: a4 = u64 [sp + 0x78]\n 92885: u64 [sp + 0xc0] = a4\n 92889: u64 [sp + 0xf8] = a2\n 92893: u64 [sp + 0xf0] = a1\n 92897: u64 [sp + 0xe8] = a0\n 92901: u64 [sp + 0xe0] = a3\n 92905: i32 a1 = sp + 0xc0\n 92909: i32 a3 = sp + 0xe0\n 92913: a2 = 0xffffffffffffffff\n 92916: a4 = 0x20\n 92919: a0 = 0\n 92921: ecalli 14 // 'set_storage'\n 92923: fallthrough\n      : @1121 (gas: 9)\n 92924: a0 = u64 [sp + 0x60]\n 92927: a0 = a0 + 0xffffffffffffff80\n 92930: a1 = u64 [sp + 0x80]\n 92934: a0 = a1 <u a0\n 92937: a1 = u64 [sp + 0x70]\n 92940: a0 = 0 if a1 != 0\n 92942: a1 = u64 [sp + 0x58]\n 92945: a0 = 0 if a1 != 0\n 92947: jump @1124 if a0 == 0\n      : @1122 (gas: 4)\n 92951: a0 = u64 [sp + 0x68]\n 92954: i32 a0 = a0 + 0x80\n 92958: a1 = 0x20\n 92961: ra = 1020, jump @0\n      : @1123 [@dyn 510] (gas: 140)\n 92968: a1 = u8 [a0 + 0x1d]\n 92971: a2 = u8 [a0 + 0x1c]\n 92974: a3 = u8 [a0 + 0x1e]\n 92977: a4 = u8 [a0 + 0x1f]\n 92980: a1 = a1 << 0x8\n 92983: a1 = a1 | a2\n 92986: a3 = a3 << 0x10\n 92989: a4 = a4 << 0x18\n 92992: a3 = a3 | a4\n 92995: a1 = a1 | a3\n 92998: a2 = u8 [a0 + 0xd]\n 93001: a3 = u8 [a0 + 0xc]\n 93004: a4 = u8 [a0 + 0xe]\n 93007: a5 = u8 [a0 + 0xf]\n 93010: a2 = a2 << 0x8\n 93013: a2 = a2 | a3\n 93016: a4 = a4 << 0x10\n 93019: a5 = a5 << 0x18\n 93022: a4 = a4 | a5\n 93025: a2 = a2 | a4\n 93028: a1 = a1 | a2\n 93031: a1 = a1 << 0x20\n 93034: a2 = u8 [a0 + 0x9]\n 93037: a3 = u8 [a0 + 0x8]\n 93040: a4 = u8 [a0 + 0xa]\n 93043: a5 = u8 [a0 + 0xb]\n 93046: a2 = a2 << 0x8\n 93049: a2 = a2 | a3\n 93052: a4 = a4 << 0x10\n 93055: a5 = a5 << 0x18\n 93058: a4 = a4 | a5\n 93061: a2 = a2 | a4\n 93064: a3 = u8 [a0 + 0x19]\n 93067: a4 = u8 [a0 + 0x18]\n 93070: a5 = u8 [a0 + 0x1a]\n 93073: s1 = u8 [a0 + 0x1b]\n 93076: a3 = a3 << 0x8\n 93079: a3 = a3 | a4\n 93082: a5 = a5 << 0x10\n 93085: s1 = s1 << 0x18\n 93088: a5 = a5 | s1\n 93091: a3 = a3 | a5\n 93094: a2 = a2 | a3\n 93097: a1 = a1 | a2\n 93100: a2 = u8 [a0 + 0x15]\n 93103: a3 = u8 [a0 + 0x14]\n 93106: a4 = u8 [a0 + 0x16]\n 93109: a5 = u8 [a0 + 0x17]\n 93112: a2 = a2 << 0x8\n 93115: a2 = a2 | a3\n 93118: a4 = a4 << 0x10\n 93121: a5 = a5 << 0x18\n 93124: a4 = a4 | a5\n 93127: a2 = a2 | a4\n 93130: a3 = u8 [a0 + 0x5]\n 93133: a4 = u8 [a0 + 0x4]\n 93136: a5 = u8 [a0 + 0x6]\n 93139: s1 = u8 [a0 + 0x7]\n 93142: a3 = a3 << 0x8\n 93145: a3 = a3 | a4\n 93148: a5 = a5 << 0x10\n 93151: s1 = s1 << 0x18\n 93154: a5 = a5 | s1\n 93157: a3 = a3 | a5\n 93160: a2 = a2 | a3\n 93163: a3 = u8 [a0 + 0x1]\n 93166: a4 = u8 [a0]\n 93168: a5 = u8 [a0 + 0x2]\n 93171: s1 = u8 [a0 + 0x3]\n 93174: a3 = a3 << 0x8\n 93177: a3 = a3 | a4\n 93180: a5 = a5 << 0x10\n 93183: s1 = s1 << 0x18\n 93186: a4 = u8 [a0 + 0x11]\n 93189: a5 = a5 | s1\n 93192: a3 = a3 | a5\n 93195: a5 = u8 [a0 + 0x10]\n 93198: a4 = a4 << 0x8\n 93201: s1 = u8 [a0 + 0x12]\n 93204: a0 = u8 [a0 + 0x13]\n 93207: a4 = a4 | a5\n 93210: a2 = a2 << 0x20\n 93213: s1 = s1 << 0x10\n 93216: a0 = a0 << 0x18\n 93219: a0 = a0 | s1\n 93222: a0 = a0 | a4\n 93225: a0 = a0 | a3\n 93228: a0 = a0 | a2\n 93231: a0 = a0 | a1\n 93234: s1 = a0 >u 0\n 93236: a0 = u64 [sp + 0x88]\n 93240: u64 [sp + 0xd8] = a0\n 93244: a0 = u64 [sp + 0x90]\n 93248: u64 [sp + 0xd0] = a0\n 93252: a0 = u64 [sp + 0x98]\n 93256: u64 [sp + 0xc8] = a0\n 93260: a0 = u64 [sp + 0x78]\n 93263: u64 [sp + 0xc0] = a0\n 93267: u64 [sp + 248] = 0\n 93271: u64 [sp + 240] = 0\n 93275: u64 [sp + 232] = 0\n 93279: u64 [sp + 224] = 0\n 93283: u32 [sp + 160] = 0x20\n 93288: i32 a1 = sp + 0xc0\n 93292: i32 a3 = sp + 0xe0\n 93296: i32 a4 = sp + 0xa0\n 93300: a2 = 0xffffffffffffffff\n 93303: a0 = 0\n 93305: ecalli 7 // 'get_storage'\n 93307: a0 = u64 [sp + 0xe8]\n 93311: a1 = u64 [sp + 0xf0]\n 93315: a2 = u64 [sp + 0xf8]\n 93319: a3 = u64 [sp + 0xe0]\n 93323: s1 = s1 << 0x10\n 93326: a3 = a3 & 0xffffffffff00ffff\n 93332: a3 = a3 | s1\n 93335: a4 = u64 [sp + 0x88]\n 93339: u64 [sp + 0xd8] = a4\n 93343: a4 = u64 [sp + 0x90]\n 93347: u64 [sp + 0xd0] = a4\n 93351: a4 = u64 [sp + 0x98]\n 93355: u64 [sp + 0xc8] = a4\n 93359: a4 = u64 [sp + 0x78]\n 93362: u64 [sp + 0xc0] = a4\n 93366: u64 [sp + 0xf8] = a2\n 93370: u64 [sp + 0xf0] = a1\n 93374: u64 [sp + 0xe8] = a0\n 93378: u64 [sp + 0xe0] = a3\n 93382: i32 a1 = sp + 0xc0\n 93386: i32 a3 = sp + 0xe0\n 93390: a2 = 0xffffffffffffffff\n 93393: a4 = 0x20\n 93396: a0 = 0\n 93398: ecalli 14 // 'set_storage'\n 93400: sp = s0 + 0xfffffffffffffee0\n 93404: ra = u64 [sp + 0x118]\n 93408: s0 = u64 [sp + 0x110]\n 93412: s1 = u64 [sp + 0x108]\n 93416: sp = sp + 0x120\n 93420: ret\n      : @1124 (gas: 1)\n 93422: trap\n      : @1125 [@dyn 511] (gas: 103)\n 93423: a1 = u64 [s1 + 0x180]\n 93427: a1 = reverse a1\n 93429: a2 = u64 [s1 + 0x188]\n 93433: a2 = reverse a2\n 93435: a3 = u64 [s1 + 0x190]\n 93439: a3 = reverse a3\n 93441: a4 = u64 [s1 + 0x198]\n 93445: a4 = reverse a4\n 93447: a5 = a4 >> 0x38\n 93450: u64 [s1 + 0x158] = a5\n 93454: u8 [a0 + 0x1f] = a5\n 93457: a5 = a4 >> 0x30\n 93460: u64 [s1 + 0x150] = a5\n 93464: u8 [a0 + 0x1e] = a5\n 93467: a5 = a4 >> 0x28\n 93470: u64 [s1 + 0x148] = a5\n 93474: u8 [a0 + 0x1d] = a5\n 93477: a5 = a4 >> 0x20\n 93480: u64 [s1 + 0x140] = a5\n 93484: u8 [a0 + 0x1c] = a5\n 93487: a5 = a4 >> 0x18\n 93490: u64 [s1 + 0x138] = a5\n 93494: u8 [a0 + 0x1b] = a5\n 93497: a5 = a4 >> 0x10\n 93500: u64 [s1 + 0x130] = a5\n 93504: u8 [a0 + 0x1a] = a5\n 93507: a5 = a4 >> 0x8\n 93510: u64 [s1 + 0x128] = a5\n 93514: u8 [a0 + 0x19] = a5\n 93517: u64 [s1 + 0x168] = a4\n 93521: u8 [a0 + 0x18] = a4\n 93524: a4 = a3 >> 0x38\n 93527: u64 [s1 + 0x120] = a4\n 93531: u8 [a0 + 0x17] = a4\n 93534: a4 = a3 >> 0x30\n 93537: u64 [s1 + 0x118] = a4\n 93541: u8 [a0 + 0x16] = a4\n 93544: a4 = a3 >> 0x28\n 93547: u64 [s1 + 0x110] = a4\n 93551: u8 [a0 + 0x15] = a4\n 93554: a4 = a3 >> 0x20\n 93557: u64 [s1 + 0x108] = a4\n 93561: u8 [a0 + 0x14] = a4\n 93564: a4 = a3 >> 0x18\n 93567: u64 [s1 + 0x100] = a4\n 93571: u8 [a0 + 0x13] = a4\n 93574: a4 = a3 >> 0x10\n 93577: u64 [s1 + 0xf8] = a4\n 93581: u8 [a0 + 0x12] = a4\n 93584: a4 = a3 >> 0x8\n 93587: u64 [s1 + 0xf0] = a4\n 93591: u8 [a0 + 0x11] = a4\n 93594: u64 [s1 + 0x170] = a3\n 93598: u8 [a0 + 0x10] = a3\n 93601: a3 = a2 >> 0x38\n 93604: u64 [s1 + 0xe8] = a3\n 93608: u8 [a0 + 0xf] = a3\n 93611: a3 = a2 >> 0x30\n 93614: u64 [s1 + 0xe0] = a3\n 93618: u8 [a0 + 0xe] = a3\n 93621: a3 = a2 >> 0x28\n 93624: u64 [s1 + 0xd8] = a3\n 93628: u8 [a0 + 0xd] = a3\n 93631: a3 = a2 >> 0x20\n 93634: u64 [s1 + 0xd0] = a3\n 93638: u8 [a0 + 0xc] = a3\n 93641: a3 = a2 >> 0x18\n 93644: u64 [s1 + 0xc8] = a3\n 93648: u8 [a0 + 0xb] = a3\n 93651: a3 = a2 >> 0x10\n 93654: u64 [s1 + 0xc0] = a3\n 93658: u8 [a0 + 0xa] = a3\n 93661: a3 = a2 >> 0x8\n 93664: u64 [s1 + 0xb8] = a3\n 93668: u8 [a0 + 0x9] = a3\n 93671: u64 [s1 + 0x178] = a2\n 93675: u8 [a0 + 0x8] = a2\n 93678: a2 = a1 >> 0x38\n 93681: u64 [s1 + 0xb0] = a2\n 93685: u8 [a0 + 0x7] = a2\n 93688: a2 = a1 >> 0x30\n 93691: u64 [s1 + 0xa8] = a2\n 93695: u8 [a0 + 0x6] = a2\n 93698: a2 = a1 >> 0x28\n 93701: u64 [s1 + 0xa0] = a2\n 93705: u8 [a0 + 0x5] = a2\n 93708: a2 = a1 >> 0x20\n 93711: u64 [s1 + 0x98] = a2\n 93715: u8 [a0 + 0x4] = a2\n 93718: a2 = a1 >> 0x18\n 93721: u64 [s1 + 0x90] = a2\n 93725: u8 [a0 + 0x3] = a2\n 93728: a2 = a1 >> 0x10\n 93731: u64 [s1 + 0x88] = a2\n 93735: u8 [a0 + 0x2] = a2\n 93738: a2 = a1 >> 0x8\n 93741: u64 [s1 + 0x80] = a2\n 93745: u8 [a0 + 0x1] = a2\n 93748: u64 [s1 + 0x180] = a1\n 93752: u8 [a0] = a1\n 93754: a0 = 0x20\n 93757: a1 = 0x20\n 93760: ra = 1024, jump @0\n      : @1126 [@dyn 512] (gas: 35)\n 93767: u8 [a0 + 31] = 0\n 93770: u8 [a0 + 30] = 0\n 93773: u8 [a0 + 29] = 0\n 93776: u8 [a0 + 28] = 0\n 93779: u8 [a0 + 27] = 0\n 93782: u8 [a0 + 26] = 0\n 93785: u8 [a0 + 25] = 0\n 93788: u8 [a0 + 24] = 0\n 93791: u8 [a0 + 23] = 0\n 93794: u8 [a0 + 22] = 0\n 93797: u8 [a0 + 21] = 0\n 93800: u8 [a0 + 20] = 0\n 93803: u8 [a0 + 19] = 0\n 93806: u8 [a0 + 18] = 0\n 93809: u8 [a0 + 17] = 0\n 93812: u8 [a0 + 16] = 0\n 93815: u8 [a0 + 15] = 0\n 93818: u8 [a0 + 14] = 0\n 93821: u8 [a0 + 13] = 0\n 93824: u8 [a0 + 12] = 0\n 93827: u8 [a0 + 11] = 0\n 93830: u8 [a0 + 10] = 0\n 93833: u8 [a0 + 9] = 0\n 93836: u8 [a0 + 8] = 0\n 93839: u8 [a0 + 7] = 0\n 93842: u8 [a0 + 6] = 0\n 93845: u8 [a0 + 5] = 0\n 93848: u8 [a0 + 4] = 0\n 93851: u8 [a0 + 3] = 0\n 93854: u8 [a0 + 2] = 0\n 93857: u8 [a0 + 1] = 0\n 93860: u8 [a0 + 0] = 0\n 93862: a1 = 0x40\n 93865: a0 = 0\n 93867: ra = 1026, jump @0\n      : @1127 [@dyn 513] (gas: 32)\n 93874: i32 a0 = a0 + 0\n 93876: i32 a2 = s1 + 0x360\n 93880: a1 = 0x40\n 93883: ecalli 8 // 'hash_keccak_256'\n 93885: a0 = u64 [s1 + 0x378]\n 93889: a1 = u64 [s1 + 0x370]\n 93893: a2 = u64 [s1 + 0x368]\n 93897: a3 = u64 [s1 + 0x360]\n 93901: a5 = reverse a0\n 93903: a4 = reverse a1\n 93905: a0 = reverse a2\n 93907: a1 = reverse a3\n 93909: u64 [s1 + 0x190] = a1\n 93913: u64 [s1 + 0x358] = a1\n 93917: u64 [s1 + 0x198] = a0\n 93921: u64 [s1 + 0x350] = a0\n 93925: u64 [s1 + 0x188] = a4\n 93929: u64 [s1 + 0x348] = a4\n 93933: u64 [s1 + 0x160] = a5\n 93937: u64 [s1 + 0x340] = a5\n 93941: u64 [s1 + 888] = 0\n 93945: u64 [s1 + 880] = 0\n 93949: u64 [s1 + 872] = 0\n 93953: u64 [s1 + 864] = 0\n 93957: u32 [s1 + 800] = 0x20\n 93962: i32 a1 = s1 + 0x340\n 93966: i32 a3 = s1 + 0x360\n 93970: i32 a4 = s1 + 0x320\n 93974: a2 = 0xffffffffffffffff\n 93977: a0 = 0\n 93979: ecalli 7 // 'get_storage'\n 93981: fallthrough\n      : @1128 (gas: 6)\n 93982: a0 = u64 [s1 + 0x360]\n 93986: a1 = u32 [s1 + 0x370]\n 93990: a2 = u64 [s1 + 0x368]\n 93994: a0 = a0 | a1\n 93997: a0 = a0 | a2\n 94000: jump @1130 if a0 != 0\n      : @1129 (gas: 1)\n 94003: jump @1164\n      : @1130 (gas: 47)\n 94006: a0 = sp + 0xffffffffffffffe0\n 94009: a0 = a0 & 0xffffffffffffffe0\n 94012: u64 [s1 + 0x60] = a0\n 94015: sp = a0\n 94017: u64 [a0 + 24] = 0\n 94020: u64 [a0 + 16] = 0\n 94023: u64 [a0 + 8] = 0\n 94026: u64 [a0 + 0] = 0\n 94028: i32 a0 = a0 + 0\n 94030: ecalli 15 // 'value_transferred'\n 94032: a1 = u64 [s1 + 0x60]\n 94035: a0 = u64 [a1]\n 94037: u64 [s1 + 0x78] = a0\n 94040: a0 = u64 [a1 + 0x10]\n 94043: u64 [s1 + 0x70] = a0\n 94046: a0 = u64 [a1 + 0x8]\n 94049: u64 [s1 + 0x68] = a0\n 94052: a0 = u64 [a1 + 0x18]\n 94055: u64 [s1 + 0x60] = a0\n 94058: a0 = u64 [s1 + 0x160]\n 94062: a0 = a0 + 0x1\n 94065: a1 = a0 <u 0x1\n 94068: a2 = u64 [s1 + 0x188]\n 94072: a1 = a1 + a2\n 94075: a2 = a0 | a1\n 94078: a2 = a2 <u 0x1\n 94081: a3 = u64 [s1 + 0x198]\n 94085: a2 = a2 + a3\n 94088: a3 = a2 <u a3\n 94091: a4 = u64 [s1 + 0x190]\n 94095: a3 = a3 + a4\n 94098: u64 [s1 + 0x358] = a3\n 94102: u64 [s1 + 0x350] = a2\n 94106: u64 [s1 + 0x348] = a1\n 94110: u64 [s1 + 0x340] = a0\n 94114: u64 [s1 + 888] = 0\n 94118: u64 [s1 + 880] = 0\n 94122: u64 [s1 + 872] = 0\n 94126: u64 [s1 + 864] = 0\n 94130: u32 [s1 + 800] = 0x20\n 94135: i32 a1 = s1 + 0x340\n 94139: i32 a3 = s1 + 0x360\n 94143: i32 a4 = s1 + 0x320\n 94147: a2 = 0xffffffffffffffff\n 94150: a0 = 0\n 94152: ecalli 7 // 'get_storage'\n 94154: fallthrough\n      : @1131 (gas: 16)\n 94155: a0 = u64 [s1 + 0x378]\n 94159: a1 = u64 [s1 + 0x368]\n 94163: a2 = u64 [s1 + 0x360]\n 94167: a3 = u64 [s1 + 0x370]\n 94171: a4 = u64 [s1 + 0x60]\n 94174: a0 = a0 ^ a4\n 94177: a4 = u64 [s1 + 0x68]\n 94180: a1 = a1 ^ a4\n 94183: a0 = a0 | a1\n 94186: a1 = u64 [s1 + 0x70]\n 94189: a1 = a1 ^ a3\n 94192: a3 = u64 [s1 + 0x78]\n 94195: a2 = a2 ^ a3\n 94198: a1 = a1 | a2\n 94201: a0 = a0 | a1\n 94204: jump @1133 if a0 == 0\n      : @1132 (gas: 1)\n 94207: jump @1169\n      : @1133 (gas: 2)\n 94210: a1 = 0x20\n 94213: ra = 1028, jump @0\n      : @1134 [@dyn 514] (gas: 67)\n 94220: a1 = u64 [s1 + 0x170]\n 94224: u8 [a0 + 0x10] = a1\n 94227: a1 = u64 [s1 + 0xe8]\n 94231: u8 [a0 + 0xf] = a1\n 94234: a1 = u64 [s1 + 0xe0]\n 94238: u8 [a0 + 0xe] = a1\n 94241: a1 = u64 [s1 + 0xd8]\n 94245: u8 [a0 + 0xd] = a1\n 94248: a1 = u64 [s1 + 0xd0]\n 94252: u8 [a0 + 0xc] = a1\n 94255: a1 = u64 [s1 + 0xc8]\n 94259: u8 [a0 + 0xb] = a1\n 94262: a1 = u64 [s1 + 0xc0]\n 94266: u8 [a0 + 0xa] = a1\n 94269: a1 = u64 [s1 + 0xb8]\n 94273: u8 [a0 + 0x9] = a1\n 94276: a1 = u64 [s1 + 0x178]\n 94280: u8 [a0 + 0x8] = a1\n 94283: a1 = u64 [s1 + 0xb0]\n 94287: u8 [a0 + 0x7] = a1\n 94290: a1 = u64 [s1 + 0xa8]\n 94294: u8 [a0 + 0x6] = a1\n 94297: a1 = u64 [s1 + 0xa0]\n 94301: u8 [a0 + 0x5] = a1\n 94304: a1 = u64 [s1 + 0x98]\n 94308: u8 [a0 + 0x4] = a1\n 94311: a1 = u64 [s1 + 0x90]\n 94315: u8 [a0 + 0x3] = a1\n 94318: a1 = u64 [s1 + 0x88]\n 94322: u8 [a0 + 0x2] = a1\n 94325: a1 = u64 [s1 + 0x80]\n 94329: u8 [a0 + 0x1] = a1\n 94332: a1 = u64 [s1 + 0x180]\n 94336: u8 [a0] = a1\n 94338: a1 = u64 [s1 + 0x168]\n 94342: u8 [a0 + 0x18] = a1\n 94345: a1 = u64 [s1 + 0x120]\n 94349: u8 [a0 + 0x17] = a1\n 94352: a1 = u64 [s1 + 0x118]\n 94356: u8 [a0 + 0x16] = a1\n 94359: a1 = u64 [s1 + 0x110]\n 94363: u8 [a0 + 0x15] = a1\n 94366: a1 = u64 [s1 + 0x108]\n 94370: u8 [a0 + 0x14] = a1\n 94373: a1 = u64 [s1 + 0x100]\n 94377: u8 [a0 + 0x13] = a1\n 94380: a1 = u64 [s1 + 0xf8]\n 94384: u8 [a0 + 0x12] = a1\n 94387: a1 = u64 [s1 + 0xf0]\n 94391: u8 [a0 + 0x11] = a1\n 94394: a1 = u64 [s1 + 0x158]\n 94398: u8 [a0 + 0x1f] = a1\n 94401: a1 = u64 [s1 + 0x150]\n 94405: u8 [a0 + 0x1e] = a1\n 94408: a1 = u64 [s1 + 0x148]\n 94412: u8 [a0 + 0x1d] = a1\n 94415: a1 = u64 [s1 + 0x140]\n 94419: u8 [a0 + 0x1c] = a1\n 94422: a1 = u64 [s1 + 0x138]\n 94426: u8 [a0 + 0x1b] = a1\n 94429: a1 = u64 [s1 + 0x130]\n 94433: u8 [a0 + 0x1a] = a1\n 94436: a1 = u64 [s1 + 0x128]\n 94440: u8 [a0 + 0x19] = a1\n 94443: a0 = 0x20\n 94446: a1 = 0x20\n 94449: ra = 1030, jump @0\n      : @1135 [@dyn 515] (gas: 35)\n 94456: u8 [a0 + 31] = 0x4\n 94460: u8 [a0 + 30] = 0\n 94463: u8 [a0 + 29] = 0\n 94466: u8 [a0 + 28] = 0\n 94469: u8 [a0 + 27] = 0\n 94472: u8 [a0 + 26] = 0\n 94475: u8 [a0 + 25] = 0\n 94478: u8 [a0 + 24] = 0\n 94481: u8 [a0 + 23] = 0\n 94484: u8 [a0 + 22] = 0\n 94487: u8 [a0 + 21] = 0\n 94490: u8 [a0 + 20] = 0\n 94493: u8 [a0 + 19] = 0\n 94496: u8 [a0 + 18] = 0\n 94499: u8 [a0 + 17] = 0\n 94502: u8 [a0 + 16] = 0\n 94505: u8 [a0 + 15] = 0\n 94508: u8 [a0 + 14] = 0\n 94511: u8 [a0 + 13] = 0\n 94514: u8 [a0 + 12] = 0\n 94517: u8 [a0 + 11] = 0\n 94520: u8 [a0 + 10] = 0\n 94523: u8 [a0 + 9] = 0\n 94526: u8 [a0 + 8] = 0\n 94529: u8 [a0 + 7] = 0\n 94532: u8 [a0 + 6] = 0\n 94535: u8 [a0 + 5] = 0\n 94538: u8 [a0 + 4] = 0\n 94541: u8 [a0 + 3] = 0\n 94544: u8 [a0 + 2] = 0\n 94547: u8 [a0 + 1] = 0\n 94550: u8 [a0 + 0] = 0\n 94552: a1 = 0x40\n 94555: a0 = 0\n 94557: ra = 1032, jump @0\n      : @1136 [@dyn 516] (gas: 32)\n 94564: i32 a0 = a0 + 0\n 94566: i32 a2 = s1 + 0x360\n 94570: a1 = 0x40\n 94573: ecalli 8 // 'hash_keccak_256'\n 94575: a0 = u64 [s1 + 0x378]\n 94579: a1 = u64 [s1 + 0x370]\n 94583: a2 = u64 [s1 + 0x368]\n 94587: a3 = u64 [s1 + 0x360]\n 94591: a0 = reverse a0\n 94593: a1 = reverse a1\n 94595: a2 = reverse a2\n 94597: a3 = reverse a3\n 94599: u64 [s1 + 0x160] = a3\n 94603: u64 [s1 + 0x358] = a3\n 94607: u64 [s1 + 0x188] = a2\n 94611: u64 [s1 + 0x350] = a2\n 94615: u64 [s1 + 0x190] = a1\n 94619: u64 [s1 + 0x348] = a1\n 94623: u64 [s1 + 0x198] = a0\n 94627: u64 [s1 + 0x340] = a0\n 94631: u64 [s1 + 888] = 0\n 94635: u64 [s1 + 880] = 0\n 94639: u64 [s1 + 872] = 0\n 94643: u64 [s1 + 864] = 0\n 94647: u32 [s1 + 800] = 0x20\n 94652: i32 a1 = s1 + 0x340\n 94656: i32 a3 = s1 + 0x360\n 94660: i32 a4 = s1 + 0x320\n 94664: a2 = 0xffffffffffffffff\n 94667: a0 = 0\n 94669: ecalli 7 // 'get_storage'\n 94671: fallthrough\n      : @1137 (gas: 24)\n 94672: a0 = u64 [s1 + 0x360]\n 94676: a2 = u64 [s1 + 0x378]\n 94680: a1 = u64 [s1 + 0x368]\n 94684: a3 = u64 [s1 + 0x370]\n 94688: u64 [s1 + 0x68] = a0\n 94691: a4 = a0 + 0x1\n 94694: a0 = a4 <u 0x1\n 94697: u64 [s1 + 0x60] = a1\n 94700: a1 = a1 + a0\n 94703: a0 = a4 | a1\n 94706: a0 = a0 <u 0x1\n 94709: a5 = a3 + a0\n 94712: u64 [s1 + 0x50] = a3\n 94715: a0 = a5 <u a3\n 94718: u64 [s1 + 0x58] = a2\n 94721: a0 = a0 + a2\n 94724: u64 [s1 + 0x70] = a1\n 94727: u64 [s1 + 0x40] = a0\n 94730: a0 = a0 | a1\n 94733: u64 [s1 + 0x78] = a4\n 94736: u64 [s1 + 0x48] = a5\n 94739: a1 = a4 | a5\n 94742: a0 = a0 | a1\n 94745: jump @1139 if a0 != 0\n      : @1138 (gas: 1)\n 94748: jump @1176\n      : @1139 (gas: 75)\n 94751: a0 = u64 [s1 + 0x188]\n 94755: u64 [s1 + 0x350] = a0\n 94759: a0 = u64 [s1 + 0x190]\n 94763: u64 [s1 + 0x348] = a0\n 94767: a0 = u64 [s1 + 0x198]\n 94771: u64 [s1 + 0x340] = a0\n 94775: a0 = u64 [s1 + 0x160]\n 94779: u64 [s1 + 0x358] = a0\n 94783: u64 [s1 + 888] = 0\n 94787: u64 [s1 + 880] = 0\n 94791: u64 [s1 + 872] = 0\n 94795: u64 [s1 + 864] = 0\n 94799: u32 [s1 + 800] = 0x20\n 94804: i32 a1 = s1 + 0x340\n 94808: i32 a3 = s1 + 0x360\n 94812: i32 a4 = s1 + 0x320\n 94816: a2 = 0xffffffffffffffff\n 94819: a0 = 0\n 94821: ecalli 7 // 'get_storage'\n 94823: a0 = u64 [s1 + 0x160]\n 94827: u64 [s1 + 0x358] = a0\n 94831: a0 = u64 [s1 + 0x188]\n 94835: u64 [s1 + 0x350] = a0\n 94839: a0 = u64 [s1 + 0x190]\n 94843: u64 [s1 + 0x348] = a0\n 94847: a0 = u64 [s1 + 0x198]\n 94851: u64 [s1 + 0x340] = a0\n 94855: a0 = u64 [s1 + 0x40]\n 94858: u64 [s1 + 0x378] = a0\n 94862: a0 = u64 [s1 + 0x48]\n 94865: u64 [s1 + 0x370] = a0\n 94869: a0 = u64 [s1 + 0x70]\n 94872: u64 [s1 + 0x368] = a0\n 94876: a0 = u64 [s1 + 0x78]\n 94879: u64 [s1 + 0x360] = a0\n 94883: i32 a1 = s1 + 0x340\n 94887: i32 a3 = s1 + 0x360\n 94891: a2 = 0xffffffffffffffff\n 94894: a4 = 0x20\n 94897: a0 = 0\n 94899: ecalli 14 // 'set_storage'\n 94901: i32 a0 = s1 + 0x2e0\n 94905: ecalli 5 // 'caller'\n 94907: a0 = u32 [s1 + 0x2f0]\n 94911: u64 [s1 + 0x188] = a0\n 94915: a0 = u64 [s1 + 0x2e8]\n 94919: u64 [s1 + 0x48] = a0\n 94922: a0 = u64 [s1 + 0x2e0]\n 94926: u64 [s1 + 0x160] = a0\n 94930: a0 = sp + 0xffffffffffffffe0\n 94933: a0 = a0 & 0xffffffffffffffe0\n 94936: u64 [s1 + 0x198] = a0\n 94940: sp = a0\n 94942: u64 [a0 + 24] = 0\n 94945: u64 [a0 + 16] = 0\n 94948: u64 [a0 + 8] = 0\n 94951: u64 [a0 + 0] = 0\n 94953: i32 a0 = a0 + 0\n 94955: ecalli 15 // 'value_transferred'\n 94957: a1 = u64 [s1 + 0x198]\n 94961: a0 = u64 [a1 + 0x18]\n 94964: u64 [s1 + 0x28] = a0\n 94967: a0 = u64 [a1 + 0x10]\n 94970: u64 [s1 + 0x30] = a0\n 94973: a0 = u64 [a1 + 0x8]\n 94976: u64 [s1 + 0x38] = a0\n 94979: a0 = u64 [a1]\n 94981: u64 [s1 + 0x40] = a0\n 94984: u64 [s1 + 632] = 0\n 94988: u64 [s1 + 624] = 0\n 94992: u64 [s1 + 608] = 0xa0\n 94998: a0 = s1 + 0x280\n 95002: a1 = s1 + 0x260\n 95006: u64 [s1 + 616] = 0\n 95010: ra = 1034, jump @571\n      : @1140 [@dyn 517] (gas: 16)\n 95017: a2 = u64 [s1 + 0x298]\n 95021: a3 = u64 [s1 + 0x290]\n 95025: a0 = u64 [s1 + 0x288]\n 95029: a1 = u64 [s1 + 0x280]\n 95033: u64 [s1 + 0x190] = a0\n 95037: u64 [s1 + 0x70] = a2\n 95040: a0 = a0 | a2\n 95043: u64 [s1 + 0x198] = a1\n 95047: a1 = a1 | a3\n 95050: a1 = a1 | a0\n 95053: a1 = a1 >> 0x20\n 95056: u64 [s1 + 0x78] = a3\n 95059: a0 = a0 | a3\n 95062: a0 = a0 << 0x20\n 95065: a0 = a0 | a1\n 95068: jump @1142 if a0 == 0\n      : @1141 (gas: 1)\n 95071: jump @1175\n      : @1142 (gas: 18)\n 95074: a0 = u64 [s1 + 0x160]\n 95078: a0 = reverse a0\n 95080: a0 = a0 << 0x20\n 95083: a1 = u64 [s1 + 0x48]\n 95086: a1 = reverse a1\n 95088: a2 = a1 >> 0x20\n 95091: a0 = a0 | a2\n 95094: u64 [s1 + 0x48] = a0\n 95097: a1 = a1 << 0x20\n 95100: a0 = u64 [s1 + 0x188]\n 95104: a0 = reverse a0\n 95106: a0 = a0 >> 0x20\n 95109: a0 = a0 | a1\n 95112: u64 [s1 + 0x20] = a0\n 95115: a0 = i32 [s1 + 0x198]\n 95119: a1 = 0x20\n 95122: u64 [s1 + 0x188] = a0\n 95126: ra = 1036, jump @0\n      : @1143 [@dyn 518] (gas: 67)\n 95133: a1 = u64 [s1 + 0x20]\n 95136: a1 = reverse a1\n 95138: a2 = u64 [s1 + 0x48]\n 95141: a2 = reverse a2\n 95143: a4 = u64 [s1 + 0x160]\n 95147: a3 = a4 >> 0x18\n 95150: u8 [a0 + 0xf] = a3\n 95153: a3 = a4 >> 0x10\n 95156: u8 [a0 + 0xe] = a3\n 95159: a3 = a4 >> 0x8\n 95162: u8 [a0 + 0xd] = a3\n 95165: u8 [a0 + 0xc] = a4\n 95168: u8 [a0 + 11] = 0\n 95171: u8 [a0 + 10] = 0\n 95174: u8 [a0 + 9] = 0\n 95177: u8 [a0 + 8] = 0\n 95180: u8 [a0 + 7] = 0\n 95183: u8 [a0 + 6] = 0\n 95186: u8 [a0 + 5] = 0\n 95189: u8 [a0 + 4] = 0\n 95192: u8 [a0 + 3] = 0\n 95195: u8 [a0 + 2] = 0\n 95198: u8 [a0 + 1] = 0\n 95201: u8 [a0 + 0] = 0\n 95203: u8 [a0 + 0x10] = a2\n 95206: u8 [a0 + 0x18] = a1\n 95209: a3 = a2 >> 0x38\n 95212: u8 [a0 + 0x17] = a3\n 95215: a3 = a2 >> 0x30\n 95218: u8 [a0 + 0x16] = a3\n 95221: a3 = a2 >> 0x28\n 95224: u8 [a0 + 0x15] = a3\n 95227: a3 = a2 >> 0x20\n 95230: u8 [a0 + 0x14] = a3\n 95233: a3 = a2 >> 0x18\n 95236: u8 [a0 + 0x13] = a3\n 95239: a3 = a2 >> 0x10\n 95242: u8 [a0 + 0x12] = a3\n 95245: a2 = a2 >> 0x8\n 95248: u8 [a0 + 0x11] = a2\n 95251: a2 = a1 >> 0x38\n 95254: u8 [a0 + 0x1f] = a2\n 95257: a2 = a1 >> 0x30\n 95260: u8 [a0 + 0x1e] = a2\n 95263: a2 = a1 >> 0x28\n 95266: u8 [a0 + 0x1d] = a2\n 95269: a2 = a1 >> 0x20\n 95272: u8 [a0 + 0x1c] = a2\n 95275: a2 = a1 >> 0x18\n 95278: u8 [a0 + 0x1b] = a2\n 95281: a2 = a1 >> 0x10\n 95284: u8 [a0 + 0x1a] = a2\n 95287: a1 = a1 >> 0x8\n 95290: a2 = u64 [s1 + 0x70]\n 95293: a4 = u64 [s1 + 0x78]\n 95296: a4 = a4 | a2\n 95299: a2 = 0x100000000\n 95309: u64 [s1 + 0x48] = a2\n 95312: a2 = 0xffffffe0\n 95322: a3 = u64 [s1 + 0x198]\n 95326: a2 = a3 <u a2\n 95329: a3 = u64 [s1 + 0x190]\n 95333: a2 = 0 if a3 != 0\n 95335: u64 [s1 + 0x160] = a4\n 95339: a2 = 0 if a4 != 0\n 95341: u8 [a0 + 0x19] = a1\n 95344: jump @1145 if a2 != 0\n      : @1144 (gas: 1)\n 95347: jump @1175\n      : @1145 (gas: 4)\n 95350: a0 = u64 [s1 + 0x188]\n 95354: i32 a0 = a0 + 0x20\n 95357: a1 = 0x20\n 95360: ra = 1038, jump @0\n      : @1146 [@dyn 519] (gas: 77)\n 95367: a1 = u64 [s1 + 0x28]\n 95370: a1 = reverse a1\n 95372: a2 = u64 [s1 + 0x30]\n 95375: a2 = reverse a2\n 95377: a3 = u64 [s1 + 0x38]\n 95380: a3 = reverse a3\n 95382: a4 = u64 [s1 + 0x40]\n 95385: a4 = reverse a4\n 95387: a5 = a4 >> 0x38\n 95390: u8 [a0 + 0x1f] = a5\n 95393: a5 = a4 >> 0x30\n 95396: u8 [a0 + 0x1e] = a5\n 95399: a5 = a4 >> 0x28\n 95402: u8 [a0 + 0x1d] = a5\n 95405: a5 = a4 >> 0x20\n 95408: u8 [a0 + 0x1c] = a5\n 95411: a5 = a4 >> 0x18\n 95414: u8 [a0 + 0x1b] = a5\n 95417: a5 = a4 >> 0x10\n 95420: u8 [a0 + 0x1a] = a5\n 95423: a5 = a4 >> 0x8\n 95426: u8 [a0 + 0x19] = a5\n 95429: u8 [a0 + 0x18] = a4\n 95432: u8 [a0 + 0x10] = a3\n 95435: a4 = a3 >> 0x38\n 95438: u8 [a0 + 0x17] = a4\n 95441: a4 = a3 >> 0x30\n 95444: u8 [a0 + 0x16] = a4\n 95447: a4 = a3 >> 0x28\n 95450: u8 [a0 + 0x15] = a4\n 95453: a4 = a3 >> 0x20\n 95456: u8 [a0 + 0x14] = a4\n 95459: a4 = a3 >> 0x18\n 95462: u8 [a0 + 0x13] = a4\n 95465: a4 = a3 >> 0x10\n 95468: u8 [a0 + 0x12] = a4\n 95471: a3 = a3 >> 0x8\n 95474: u8 [a0 + 0x11] = a3\n 95477: u8 [a0 + 0x8] = a2\n 95480: a3 = a2 >> 0x38\n 95483: u8 [a0 + 0xf] = a3\n 95486: a3 = a2 >> 0x30\n 95489: u8 [a0 + 0xe] = a3\n 95492: a3 = a2 >> 0x28\n 95495: u8 [a0 + 0xd] = a3\n 95498: a3 = a2 >> 0x20\n 95501: u8 [a0 + 0xc] = a3\n 95504: a3 = a2 >> 0x18\n 95507: u8 [a0 + 0xb] = a3\n 95510: a3 = a2 >> 0x10\n 95513: u8 [a0 + 0xa] = a3\n 95516: a2 = a2 >> 0x8\n 95519: u8 [a0 + 0x9] = a2\n 95522: u8 [a0] = a1\n 95524: a2 = a1 >> 0x38\n 95527: u8 [a0 + 0x7] = a2\n 95530: a2 = a1 >> 0x30\n 95533: u8 [a0 + 0x6] = a2\n 95536: a2 = a1 >> 0x28\n 95539: u8 [a0 + 0x5] = a2\n 95542: a2 = a1 >> 0x20\n 95545: u8 [a0 + 0x4] = a2\n 95548: a2 = a1 >> 0x18\n 95551: u8 [a0 + 0x3] = a2\n 95554: a2 = a1 >> 0x10\n 95557: u8 [a0 + 0x2] = a2\n 95560: a1 = a1 >> 0x8\n 95563: a2 = u64 [s1 + 0x48]\n 95566: a2 = a2 + 0xffffffffffffffc0\n 95569: a3 = u64 [s1 + 0x198]\n 95573: a2 = a3 <u a2\n 95576: a3 = u64 [s1 + 0x190]\n 95580: a2 = 0 if a3 != 0\n 95582: a3 = u64 [s1 + 0x160]\n 95586: a2 = 0 if a3 != 0\n 95588: u8 [a0 + 0x1] = a1\n 95591: jump @1175 if a2 == 0\n      : @1147 (gas: 4)\n 95595: a0 = u64 [s1 + 0x188]\n 95599: i32 a0 = a0 + 0x40\n 95602: a1 = 0x20\n 95605: ra = 1040, jump @0\n      : @1148 [@dyn 520] (gas: 42)\n 95612: u8 [a0 + 31] = 0\n 95615: u8 [a0 + 30] = 0\n 95618: u8 [a0 + 29] = 0\n 95621: u8 [a0 + 28] = 0\n 95624: u8 [a0 + 27] = 0\n 95627: u8 [a0 + 26] = 0\n 95630: u8 [a0 + 25] = 0\n 95633: u8 [a0 + 24] = 0\n 95636: u8 [a0 + 23] = 0\n 95639: u8 [a0 + 22] = 0\n 95642: u8 [a0 + 21] = 0\n 95645: u8 [a0 + 20] = 0\n 95648: u8 [a0 + 19] = 0\n 95651: u8 [a0 + 18] = 0\n 95654: u8 [a0 + 17] = 0\n 95657: u8 [a0 + 16] = 0\n 95660: u8 [a0 + 15] = 0\n 95663: u8 [a0 + 14] = 0\n 95666: u8 [a0 + 13] = 0\n 95669: u8 [a0 + 12] = 0\n 95672: u8 [a0 + 11] = 0\n 95675: u8 [a0 + 10] = 0\n 95678: u8 [a0 + 9] = 0\n 95681: u8 [a0 + 8] = 0\n 95684: u8 [a0 + 7] = 0\n 95687: u8 [a0 + 6] = 0\n 95690: u8 [a0 + 5] = 0\n 95693: u8 [a0 + 4] = 0\n 95696: u8 [a0 + 3] = 0\n 95699: u8 [a0 + 2] = 0\n 95702: u8 [a0 + 1] = 0\n 95705: a1 = 0x100000000\n 95715: u64 [s1 + 0x48] = a1\n 95718: a1 = 0xffffffa0\n 95728: a2 = u64 [s1 + 0x198]\n 95732: a1 = a2 <u a1\n 95735: a2 = u64 [s1 + 0x190]\n 95739: a1 = 0 if a2 != 0\n 95741: a2 = u64 [s1 + 0x160]\n 95745: a1 = 0 if a2 != 0\n 95747: u8 [a0 + 0] = 0\n 95749: jump @1175 if a1 == 0\n      : @1149 (gas: 4)\n 95753: a0 = u64 [s1 + 0x188]\n 95757: i32 a0 = a0 + 0x60\n 95760: a1 = 0x20\n 95763: ra = 1042, jump @0\n      : @1150 [@dyn 521] (gas: 41)\n 95770: u8 [a0 + 31] = 0\n 95773: u8 [a0 + 30] = 0\n 95776: u8 [a0 + 29] = 0\n 95779: u8 [a0 + 28] = 0\n 95782: u8 [a0 + 27] = 0\n 95785: u8 [a0 + 26] = 0\n 95788: u8 [a0 + 25] = 0\n 95791: u8 [a0 + 24] = 0\n 95794: u8 [a0 + 23] = 0\n 95797: u8 [a0 + 22] = 0\n 95800: u8 [a0 + 21] = 0\n 95803: u8 [a0 + 20] = 0\n 95806: u8 [a0 + 19] = 0\n 95809: u8 [a0 + 18] = 0\n 95812: u8 [a0 + 17] = 0\n 95815: u8 [a0 + 16] = 0\n 95818: u8 [a0 + 15] = 0\n 95821: u8 [a0 + 14] = 0\n 95824: u8 [a0 + 13] = 0\n 95827: u8 [a0 + 12] = 0\n 95830: u8 [a0 + 11] = 0\n 95833: u8 [a0 + 10] = 0\n 95836: u8 [a0 + 9] = 0\n 95839: u8 [a0 + 8] = 0\n 95842: u8 [a0 + 7] = 0\n 95845: u8 [a0 + 6] = 0\n 95848: u8 [a0 + 5] = 0\n 95851: u8 [a0 + 4] = 0\n 95854: u8 [a0 + 3] = 0\n 95857: u8 [a0 + 2] = 0\n 95860: u8 [a0 + 1] = 0\n 95863: a1 = u64 [s1 + 0x48]\n 95866: a1 = a1 + 0xffffffffffffff80\n 95869: a2 = u64 [s1 + 0x198]\n 95873: a1 = a2 <u a1\n 95876: a2 = u64 [s1 + 0x190]\n 95880: a1 = 0 if a2 != 0\n 95882: a2 = u64 [s1 + 0x160]\n 95886: a1 = 0 if a2 != 0\n 95888: u8 [a0 + 0] = 0\n 95890: jump @1175 if a1 == 0\n      : @1151 (gas: 4)\n 95894: a0 = u64 [s1 + 0x188]\n 95898: i32 a0 = a0 + 0x80\n 95902: a1 = 0x20\n 95905: ra = 1044, jump @0\n      : @1152 [@dyn 522] (gas: 35)\n 95912: u8 [a0 + 31] = 0\n 95915: u8 [a0 + 30] = 0\n 95918: u8 [a0 + 29] = 0\n 95921: u8 [a0 + 28] = 0\n 95924: u8 [a0 + 27] = 0\n 95927: u8 [a0 + 26] = 0\n 95930: u8 [a0 + 25] = 0\n 95933: u8 [a0 + 24] = 0\n 95936: u8 [a0 + 23] = 0\n 95939: u8 [a0 + 22] = 0\n 95942: u8 [a0 + 21] = 0\n 95945: u8 [a0 + 20] = 0\n 95948: u8 [a0 + 19] = 0\n 95951: u8 [a0 + 18] = 0\n 95954: u8 [a0 + 17] = 0\n 95957: u8 [a0 + 16] = 0\n 95960: u8 [a0 + 15] = 0\n 95963: u8 [a0 + 14] = 0\n 95966: u8 [a0 + 13] = 0\n 95969: u8 [a0 + 12] = 0\n 95972: u8 [a0 + 11] = 0\n 95975: u8 [a0 + 10] = 0\n 95978: u8 [a0 + 9] = 0\n 95981: u8 [a0 + 8] = 0\n 95984: u8 [a0 + 7] = 0\n 95987: u8 [a0 + 6] = 0\n 95990: u8 [a0 + 5] = 0\n 95993: u8 [a0 + 4] = 0\n 95996: u8 [a0 + 3] = 0\n 95999: u8 [a0 + 2] = 0\n 96002: u8 [a0 + 1] = 0\n 96005: u8 [a0 + 0] = 0\n 96007: a1 = 0x20\n 96010: a0 = 0\n 96012: ra = 1046, jump @0\n      : @1153 [@dyn 523] (gas: 67)\n 96019: a1 = u64 [s1 + 0x158]\n 96023: u8 [a0 + 0x1f] = a1\n 96026: a1 = u64 [s1 + 0x150]\n 96030: u8 [a0 + 0x1e] = a1\n 96033: a1 = u64 [s1 + 0x148]\n 96037: u8 [a0 + 0x1d] = a1\n 96040: a1 = u64 [s1 + 0x140]\n 96044: u8 [a0 + 0x1c] = a1\n 96047: a1 = u64 [s1 + 0x138]\n 96051: u8 [a0 + 0x1b] = a1\n 96054: a1 = u64 [s1 + 0x130]\n 96058: u8 [a0 + 0x1a] = a1\n 96061: a1 = u64 [s1 + 0x128]\n 96065: u8 [a0 + 0x19] = a1\n 96068: a1 = u64 [s1 + 0x120]\n 96072: u8 [a0 + 0x17] = a1\n 96075: a1 = u64 [s1 + 0x118]\n 96079: u8 [a0 + 0x16] = a1\n 96082: a1 = u64 [s1 + 0x110]\n 96086: u8 [a0 + 0x15] = a1\n 96089: a1 = u64 [s1 + 0x108]\n 96093: u8 [a0 + 0x14] = a1\n 96096: a1 = u64 [s1 + 0x100]\n 96100: u8 [a0 + 0x13] = a1\n 96103: a1 = u64 [s1 + 0xf8]\n 96107: u8 [a0 + 0x12] = a1\n 96110: a1 = u64 [s1 + 0xf0]\n 96114: u8 [a0 + 0x11] = a1\n 96117: a1 = u64 [s1 + 0xe8]\n 96121: u8 [a0 + 0xf] = a1\n 96124: a1 = u64 [s1 + 0xe0]\n 96128: u8 [a0 + 0xe] = a1\n 96131: a1 = u64 [s1 + 0xd8]\n 96135: u8 [a0 + 0xd] = a1\n 96138: a1 = u64 [s1 + 0xd0]\n 96142: u8 [a0 + 0xc] = a1\n 96145: a1 = u64 [s1 + 0xc8]\n 96149: u8 [a0 + 0xb] = a1\n 96152: a1 = u64 [s1 + 0xc0]\n 96156: u8 [a0 + 0xa] = a1\n 96159: a1 = u64 [s1 + 0xb8]\n 96163: u8 [a0 + 0x9] = a1\n 96166: a1 = u64 [s1 + 0xb0]\n 96170: u8 [a0 + 0x7] = a1\n 96173: a1 = u64 [s1 + 0xa8]\n 96177: u8 [a0 + 0x6] = a1\n 96180: a1 = u64 [s1 + 0xa0]\n 96184: u8 [a0 + 0x5] = a1\n 96187: a1 = u64 [s1 + 0x98]\n 96191: u8 [a0 + 0x4] = a1\n 96194: a1 = u64 [s1 + 0x90]\n 96198: u8 [a0 + 0x3] = a1\n 96201: a1 = u64 [s1 + 0x88]\n 96205: u8 [a0 + 0x2] = a1\n 96208: a1 = u64 [s1 + 0x80]\n 96212: u8 [a0 + 0x1] = a1\n 96215: a1 = u64 [s1 + 0x168]\n 96219: u8 [a0 + 0x18] = a1\n 96222: a1 = u64 [s1 + 0x170]\n 96226: u8 [a0 + 0x10] = a1\n 96229: a1 = u64 [s1 + 0x178]\n 96233: u8 [a0 + 0x8] = a1\n 96236: a1 = u64 [s1 + 0x180]\n 96240: u8 [a0] = a1\n 96242: a0 = 0x20\n 96245: a1 = 0x20\n 96248: ra = 1048, jump @0\n      : @1154 [@dyn 524] (gas: 35)\n 96255: u8 [a0 + 31] = 0x3\n 96259: u8 [a0 + 30] = 0\n 96262: u8 [a0 + 29] = 0\n 96265: u8 [a0 + 28] = 0\n 96268: u8 [a0 + 27] = 0\n 96271: u8 [a0 + 26] = 0\n 96274: u8 [a0 + 25] = 0\n 96277: u8 [a0 + 24] = 0\n 96280: u8 [a0 + 23] = 0\n 96283: u8 [a0 + 22] = 0\n 96286: u8 [a0 + 21] = 0\n 96289: u8 [a0 + 20] = 0\n 96292: u8 [a0 + 19] = 0\n 96295: u8 [a0 + 18] = 0\n 96298: u8 [a0 + 17] = 0\n 96301: u8 [a0 + 16] = 0\n 96304: u8 [a0 + 15] = 0\n 96307: u8 [a0 + 14] = 0\n 96310: u8 [a0 + 13] = 0\n 96313: u8 [a0 + 12] = 0\n 96316: u8 [a0 + 11] = 0\n 96319: u8 [a0 + 10] = 0\n 96322: u8 [a0 + 9] = 0\n 96325: u8 [a0 + 8] = 0\n 96328: u8 [a0 + 7] = 0\n 96331: u8 [a0 + 6] = 0\n 96334: u8 [a0 + 5] = 0\n 96337: u8 [a0 + 4] = 0\n 96340: u8 [a0 + 3] = 0\n 96343: u8 [a0 + 2] = 0\n 96346: u8 [a0 + 1] = 0\n 96349: u8 [a0 + 0] = 0\n 96351: a1 = 0x40\n 96354: a0 = 0\n 96356: ra = 1050, jump @0\n      : @1155 [@dyn 525] (gas: 15)\n 96363: i32 a0 = a0 + 0\n 96365: i32 a2 = s1 + 0x360\n 96369: a1 = 0x40\n 96372: ecalli 8 // 'hash_keccak_256'\n 96374: a0 = u64 [s1 + 0x360]\n 96378: u64 [s1 + 0x188] = a0\n 96382: a0 = u64 [s1 + 0x368]\n 96386: u64 [s1 + 0x160] = a0\n 96390: a0 = u64 [s1 + 0x370]\n 96394: u64 [s1 + 0x158] = a0\n 96398: a0 = u64 [s1 + 0x378]\n 96402: u64 [s1 + 0x150] = a0\n 96406: a1 = 0x20\n 96409: a0 = 0\n 96411: ra = 1052, jump @0\n      : @1156 [@dyn 526] (gas: 75)\n 96418: a1 = u64 [s1 + 0x58]\n 96421: a2 = reverse a1\n 96423: a1 = u64 [s1 + 0x50]\n 96426: a3 = reverse a1\n 96428: a1 = u64 [s1 + 0x60]\n 96431: a4 = reverse a1\n 96433: a1 = u64 [s1 + 0x68]\n 96436: a5 = reverse a1\n 96438: a1 = a5 >> 0x38\n 96441: u8 [a0 + 0x1f] = a1\n 96444: a1 = a5 >> 0x30\n 96447: u8 [a0 + 0x1e] = a1\n 96450: a1 = a5 >> 0x28\n 96453: u8 [a0 + 0x1d] = a1\n 96456: a1 = a5 >> 0x20\n 96459: u8 [a0 + 0x1c] = a1\n 96462: a1 = a5 >> 0x18\n 96465: u8 [a0 + 0x1b] = a1\n 96468: a1 = a5 >> 0x10\n 96471: u8 [a0 + 0x1a] = a1\n 96474: a1 = a5 >> 0x8\n 96477: u8 [a0 + 0x19] = a1\n 96480: u64 [s1 + 0x130] = a5\n 96484: u8 [a0 + 0x18] = a5\n 96487: a1 = a4 >> 0x38\n 96490: u8 [a0 + 0x17] = a1\n 96493: a1 = a4 >> 0x30\n 96496: u8 [a0 + 0x16] = a1\n 96499: a1 = a4 >> 0x28\n 96502: u8 [a0 + 0x15] = a1\n 96505: a1 = a4 >> 0x20\n 96508: u8 [a0 + 0x14] = a1\n 96511: a1 = a4 >> 0x18\n 96514: u8 [a0 + 0x13] = a1\n 96517: a1 = a4 >> 0x10\n 96520: u8 [a0 + 0x12] = a1\n 96523: a1 = a4 >> 0x8\n 96526: u8 [a0 + 0x11] = a1\n 96529: u64 [s1 + 0x138] = a4\n 96533: u8 [a0 + 0x10] = a4\n 96536: a1 = a3 >> 0x38\n 96539: u8 [a0 + 0xf] = a1\n 96542: a1 = a3 >> 0x30\n 96545: u8 [a0 + 0xe] = a1\n 96548: a1 = a3 >> 0x28\n 96551: u8 [a0 + 0xd] = a1\n 96554: a1 = a3 >> 0x20\n 96557: u8 [a0 + 0xc] = a1\n 96560: a1 = a3 >> 0x18\n 96563: u8 [a0 + 0xb] = a1\n 96566: a1 = a3 >> 0x10\n 96569: u8 [a0 + 0xa] = a1\n 96572: a1 = a3 >> 0x8\n 96575: u8 [a0 + 0x9] = a1\n 96578: u64 [s1 + 0x140] = a3\n 96582: u8 [a0 + 0x8] = a3\n 96585: a1 = a2 >> 0x38\n 96588: u8 [a0 + 0x7] = a1\n 96591: a1 = a2 >> 0x30\n 96594: u8 [a0 + 0x6] = a1\n 96597: a1 = a2 >> 0x28\n 96600: u8 [a0 + 0x5] = a1\n 96603: a1 = a2 >> 0x20\n 96606: u8 [a0 + 0x4] = a1\n 96609: a1 = a2 >> 0x18\n 96612: u8 [a0 + 0x3] = a1\n 96615: a1 = a2 >> 0x10\n 96618: u8 [a0 + 0x2] = a1\n 96621: a1 = a2 >> 0x8\n 96624: u8 [a0 + 0x1] = a1\n 96627: u64 [s1 + 0x148] = a2\n 96631: u8 [a0] = a2\n 96633: a0 = 0x20\n 96636: a1 = 0x20\n 96639: ra = 1054, jump @0\n      : @1157 [@dyn 527] (gas: 67)\n 96646: a2 = u64 [s1 + 0x150]\n 96650: a1 = a2 >> 0x38\n 96653: u8 [a0 + 0x1f] = a1\n 96656: a1 = a2 >> 0x30\n 96659: u8 [a0 + 0x1e] = a1\n 96662: a1 = a2 >> 0x28\n 96665: u8 [a0 + 0x1d] = a1\n 96668: a1 = a2 >> 0x20\n 96671: u8 [a0 + 0x1c] = a1\n 96674: a1 = a2 >> 0x18\n 96677: u8 [a0 + 0x1b] = a1\n 96680: a1 = a2 >> 0x10\n 96683: u8 [a0 + 0x1a] = a1\n 96686: a1 = a2 >> 0x8\n 96689: u8 [a0 + 0x19] = a1\n 96692: u8 [a0 + 0x18] = a2\n 96695: a2 = u64 [s1 + 0x158]\n 96699: a1 = a2 >> 0x38\n 96702: u8 [a0 + 0x17] = a1\n 96705: a1 = a2 >> 0x30\n 96708: u8 [a0 + 0x16] = a1\n 96711: a1 = a2 >> 0x28\n 96714: u8 [a0 + 0x15] = a1\n 96717: a1 = a2 >> 0x20\n 96720: u8 [a0 + 0x14] = a1\n 96723: a1 = a2 >> 0x18\n 96726: u8 [a0 + 0x13] = a1\n 96729: a1 = a2 >> 0x10\n 96732: u8 [a0 + 0x12] = a1\n 96735: a1 = a2 >> 0x8\n 96738: u8 [a0 + 0x11] = a1\n 96741: u8 [a0 + 0x10] = a2\n 96744: a2 = u64 [s1 + 0x160]\n 96748: a1 = a2 >> 0x38\n 96751: u8 [a0 + 0xf] = a1\n 96754: a1 = a2 >> 0x30\n 96757: u8 [a0 + 0xe] = a1\n 96760: a1 = a2 >> 0x28\n 96763: u8 [a0 + 0xd] = a1\n 96766: a1 = a2 >> 0x20\n 96769: u8 [a0 + 0xc] = a1\n 96772: a1 = a2 >> 0x18\n 96775: u8 [a0 + 0xb] = a1\n 96778: a1 = a2 >> 0x10\n 96781: u8 [a0 + 0xa] = a1\n 96784: a1 = a2 >> 0x8\n 96787: u8 [a0 + 0x9] = a1\n 96790: u8 [a0 + 0x8] = a2\n 96793: a2 = u64 [s1 + 0x188]\n 96797: a1 = a2 >> 0x38\n 96800: u8 [a0 + 0x7] = a1\n 96803: a1 = a2 >> 0x30\n 96806: u8 [a0 + 0x6] = a1\n 96809: a1 = a2 >> 0x28\n 96812: u8 [a0 + 0x5] = a1\n 96815: a1 = a2 >> 0x20\n 96818: u8 [a0 + 0x4] = a1\n 96821: a1 = a2 >> 0x18\n 96824: u8 [a0 + 0x3] = a1\n 96827: a1 = a2 >> 0x10\n 96830: u8 [a0 + 0x2] = a1\n 96833: a1 = a2 >> 0x8\n 96836: u8 [a0 + 0x1] = a1\n 96839: u8 [a0] = a2\n 96841: a1 = 0x40\n 96844: a0 = 0\n 96846: ra = 1056, jump @0\n      : @1158 [@dyn 528] (gas: 27)\n 96853: i32 a0 = a0 + 0\n 96855: i32 a2 = s1 + 0x360\n 96859: a1 = 0x40\n 96862: ecalli 8 // 'hash_keccak_256'\n 96864: a0 = u64 [s1 + 0x378]\n 96868: a1 = u64 [s1 + 0x370]\n 96872: a2 = u64 [s1 + 0x368]\n 96876: a3 = u64 [s1 + 0x360]\n 96880: a4 = reverse a0\n 96882: a0 = reverse a1\n 96884: a1 = reverse a2\n 96886: a2 = reverse a3\n 96888: a3 = u64 [s1 + 0x70]\n 96891: u64 [s1 + 0x238] = a3\n 96895: a3 = u64 [s1 + 0x78]\n 96898: u64 [s1 + 0x230] = a3\n 96902: a3 = u64 [s1 + 0x190]\n 96906: u64 [s1 + 0x228] = a3\n 96910: a3 = u64 [s1 + 0x198]\n 96914: u64 [s1 + 0x220] = a3\n 96918: u64 [s1 + 0x258] = a2\n 96922: u64 [s1 + 0x250] = a1\n 96926: u64 [s1 + 0x248] = a0\n 96930: a0 = s1 + 0x240\n 96934: a1 = s1 + 0x220\n 96938: u64 [s1 + 0x240] = a4\n 96942: ra = 1058, jump @1109\n      : @1159 [@dyn 529] (gas: 30)\n 96948: i32 a0 = s1 + 0x300\n 96952: ecalli 5 // 'caller'\n 96954: a0 = u32 [s1 + 0x310]\n 96958: u64 [s1 + 0x188] = a0\n 96962: a0 = u64 [s1 + 0x308]\n 96966: u64 [s1 + 0x128] = a0\n 96970: a0 = u64 [s1 + 0x300]\n 96974: u64 [s1 + 0x198] = a0\n 96978: a0 = sp + 0xffffffffffffffe0\n 96981: a0 = a0 & 0xffffffffffffffe0\n 96984: u64 [s1 + 0x190] = a0\n 96988: sp = a0\n 96990: u64 [a0 + 24] = 0\n 96993: u64 [a0 + 16] = 0\n 96996: u64 [a0 + 8] = 0\n 96999: u64 [a0 + 0] = 0\n 97001: i32 a0 = a0 + 0\n 97003: ecalli 15 // 'value_transferred'\n 97005: a1 = u64 [s1 + 0x190]\n 97009: a0 = u64 [a1 + 0x18]\n 97012: u64 [s1 + 0x150] = a0\n 97016: a0 = u64 [a1 + 0x10]\n 97019: u64 [s1 + 0x158] = a0\n 97023: a0 = u64 [a1 + 0x8]\n 97026: u64 [s1 + 0x160] = a0\n 97030: a0 = u64 [a1]\n 97032: u64 [s1 + 0x190] = a0\n 97036: a0 = 0x40\n 97039: a1 = 0x20\n 97042: ra = 1060, jump @0\n      : @1160 [@dyn 530] (gas: 100)\n 97049: a1 = u8 [a0 + 0x11]\n 97052: a2 = u8 [a0 + 0x10]\n 97055: a3 = u8 [a0 + 0x12]\n 97058: a4 = u8 [a0 + 0x13]\n 97061: a1 = a1 << 0x8\n 97064: a1 = a1 | a2\n 97067: a3 = a3 << 0x10\n 97070: a4 = a4 << 0x18\n 97073: a3 = a3 | a4\n 97076: a1 = a1 | a3\n 97079: a2 = u8 [a0 + 0x15]\n 97082: a3 = u8 [a0 + 0x14]\n 97085: a4 = u8 [a0 + 0x16]\n 97088: a5 = u8 [a0 + 0x17]\n 97091: a2 = a2 << 0x8\n 97094: a2 = a2 | a3\n 97097: a4 = a4 << 0x10\n 97100: a5 = a5 << 0x18\n 97103: a4 = a4 | a5\n 97106: a2 = a2 | a4\n 97109: a2 = a2 << 0x20\n 97112: t0 = a2 | a1\n 97115: a2 = u8 [a0 + 0x1]\n 97118: a3 = u8 [a0]\n 97120: a4 = u8 [a0 + 0x2]\n 97123: a5 = u8 [a0 + 0x3]\n 97126: a2 = a2 << 0x8\n 97129: a2 = a2 | a3\n 97132: a4 = a4 << 0x10\n 97135: a5 = a5 << 0x18\n 97138: a4 = a4 | a5\n 97141: a2 = a2 | a4\n 97144: a3 = u8 [a0 + 0x5]\n 97147: a4 = u8 [a0 + 0x4]\n 97150: a5 = u8 [a0 + 0x6]\n 97153: a1 = u8 [a0 + 0x7]\n 97156: a3 = a3 << 0x8\n 97159: a3 = a3 | a4\n 97162: a5 = a5 << 0x10\n 97165: a1 = a1 << 0x18\n 97168: a1 = a1 | a5\n 97171: a1 = a1 | a3\n 97174: a1 = a1 << 0x20\n 97177: t1 = a1 | a2\n 97180: a1 = u8 [a0 + 0x19]\n 97183: a3 = u8 [a0 + 0x18]\n 97186: a4 = u8 [a0 + 0x1a]\n 97189: a5 = u8 [a0 + 0x1b]\n 97192: a1 = a1 << 0x8\n 97195: a1 = a1 | a3\n 97198: a4 = a4 << 0x10\n 97201: a5 = a5 << 0x18\n 97204: a4 = a4 | a5\n 97207: a1 = a1 | a4\n 97210: a3 = u8 [a0 + 0x1d]\n 97213: a4 = u8 [a0 + 0x1c]\n 97216: a5 = u8 [a0 + 0x1e]\n 97219: a2 = u8 [a0 + 0x1f]\n 97222: a3 = a3 << 0x8\n 97225: a3 = a3 | a4\n 97228: a5 = a5 << 0x10\n 97231: a2 = a2 << 0x18\n 97234: a2 = a2 | a5\n 97237: a2 = a2 | a3\n 97240: a2 = a2 << 0x20\n 97243: a3 = a2 | a1\n 97246: a1 = u8 [a0 + 0x9]\n 97249: a2 = u8 [a0 + 0x8]\n 97252: a4 = u8 [a0 + 0xa]\n 97255: a5 = u8 [a0 + 0xb]\n 97258: a1 = a1 << 0x8\n 97261: a1 = a1 | a2\n 97264: a4 = a4 << 0x10\n 97267: a5 = a5 << 0x18\n 97270: a4 = a4 | a5\n 97273: a1 = a1 | a4\n 97276: a2 = u8 [a0 + 0xd]\n 97279: a4 = u8 [a0 + 0xc]\n 97282: a5 = u8 [a0 + 0xe]\n 97285: a0 = u8 [a0 + 0xf]\n 97288: a2 = a2 << 0x8\n 97291: a2 = a2 | a4\n 97294: a5 = a5 << 0x10\n 97297: a0 = a0 << 0x18\n 97300: a0 = a0 | a5\n 97303: a0 = a0 | a2\n 97306: a0 = a0 << 0x20\n 97309: a0 = a0 | a1\n 97312: a1 = reverse a0\n 97314: a0 = reverse a3\n 97316: a2 = reverse t1\n 97318: a3 = reverse t0\n 97320: a2 = a2 | a3\n 97323: a3 = a0 | a1\n 97326: a3 = a3 | a2\n 97329: a3 = a3 >> 0x20\n 97332: a1 = a1 | a2\n 97335: a1 = a1 << 0x20\n 97338: a1 = a1 | a3\n 97341: jump @1175 if a1 != 0\n      : @1161 (gas: 18)\n 97345: a1 = u64 [s1 + 0x128]\n 97349: a1 = reverse a1\n 97351: a2 = a1 << 0x20\n 97354: a3 = u64 [s1 + 0x188]\n 97358: a3 = reverse a3\n 97360: a3 = a3 >> 0x20\n 97363: a2 = a2 | a3\n 97366: u64 [s1 + 0x188] = a2\n 97370: a2 = u64 [s1 + 0x198]\n 97374: a2 = reverse a2\n 97376: a2 = a2 << 0x20\n 97379: a1 = a1 >> 0x20\n 97382: a1 = a1 | a2\n 97385: u64 [s1 + 0x128] = a1\n 97389: i32 a0 = a0 + 0\n 97391: u64 [s1 + 0x120] = a0\n 97395: a1 = 0x20\n 97398: ra = 1062, jump @0\n      : @1162 [@dyn 531] (gas: 71)\n 97405: a1 = u64 [s1 + 0x150]\n 97409: a1 = reverse a1\n 97411: a2 = u64 [s1 + 0x158]\n 97415: a2 = reverse a2\n 97417: a3 = u64 [s1 + 0x160]\n 97421: a3 = reverse a3\n 97423: a4 = u64 [s1 + 0x190]\n 97427: a4 = reverse a4\n 97429: a5 = a4 >> 0x38\n 97432: u8 [a0 + 0x1f] = a5\n 97435: a5 = a4 >> 0x30\n 97438: u8 [a0 + 0x1e] = a5\n 97441: a5 = a4 >> 0x28\n 97444: u8 [a0 + 0x1d] = a5\n 97447: a5 = a4 >> 0x20\n 97450: u8 [a0 + 0x1c] = a5\n 97453: a5 = a4 >> 0x18\n 97456: u8 [a0 + 0x1b] = a5\n 97459: a5 = a4 >> 0x10\n 97462: u8 [a0 + 0x1a] = a5\n 97465: a5 = a4 >> 0x8\n 97468: u8 [a0 + 0x19] = a5\n 97471: u8 [a0 + 0x18] = a4\n 97474: u8 [a0 + 0x10] = a3\n 97477: a4 = a3 >> 0x38\n 97480: u8 [a0 + 0x17] = a4\n 97483: a4 = a3 >> 0x30\n 97486: u8 [a0 + 0x16] = a4\n 97489: a4 = a3 >> 0x28\n 97492: u8 [a0 + 0x15] = a4\n 97495: a4 = a3 >> 0x20\n 97498: u8 [a0 + 0x14] = a4\n 97501: a4 = a3 >> 0x18\n 97504: u8 [a0 + 0x13] = a4\n 97507: a4 = a3 >> 0x10\n 97510: u8 [a0 + 0x12] = a4\n 97513: a3 = a3 >> 0x8\n 97516: u8 [a0 + 0x11] = a3\n 97519: u8 [a0 + 0x8] = a2\n 97522: a3 = a2 >> 0x38\n 97525: u8 [a0 + 0xf] = a3\n 97528: a3 = a2 >> 0x30\n 97531: u8 [a0 + 0xe] = a3\n 97534: a3 = a2 >> 0x28\n 97537: u8 [a0 + 0xd] = a3\n 97540: a3 = a2 >> 0x20\n 97543: u8 [a0 + 0xc] = a3\n 97546: a3 = a2 >> 0x18\n 97549: u8 [a0 + 0xb] = a3\n 97552: a3 = a2 >> 0x10\n 97555: u8 [a0 + 0xa] = a3\n 97558: a2 = a2 >> 0x8\n 97561: u8 [a0 + 0x9] = a2\n 97564: u8 [a0] = a1\n 97566: a2 = a1 >> 0x38\n 97569: u8 [a0 + 0x7] = a2\n 97572: a2 = a1 >> 0x30\n 97575: u8 [a0 + 0x6] = a2\n 97578: a2 = a1 >> 0x28\n 97581: u8 [a0 + 0x5] = a2\n 97584: a2 = a1 >> 0x20\n 97587: u8 [a0 + 0x4] = a2\n 97590: a2 = a1 >> 0x18\n 97593: u8 [a0 + 0x3] = a2\n 97596: a2 = a1 >> 0x10\n 97599: u8 [a0 + 0x2] = a2\n 97602: a1 = a1 >> 0x8\n 97605: u8 [a0 + 0x1] = a1\n 97608: a1 = 0x20\n 97611: a0 = u64 [s1 + 0x120]\n 97615: ra = 1064, jump @0\n      : @1163 [@dyn 532] (gas: 54)\n 97622: a1 = u64 [0x200a0]\n 97627: a2 = u64 [0x200a8]\n 97632: a3 = u64 [0x200b0]\n 97637: a4 = u64 [0x200b8]\n 97642: u64 [s1 + 0x378] = a1\n 97646: u64 [s1 + 0x370] = a2\n 97650: u64 [s1 + 0x368] = a3\n 97654: u64 [s1 + 0x360] = a4\n 97658: a1 = u64 [s1 + 0x168]\n 97662: u64 [s1 + 0x398] = a1\n 97666: a1 = u64 [s1 + 0x170]\n 97670: u64 [s1 + 0x390] = a1\n 97674: a1 = u64 [s1 + 0x178]\n 97678: u64 [s1 + 0x388] = a1\n 97682: a1 = u64 [s1 + 0x180]\n 97686: u64 [s1 + 0x380] = a1\n 97690: a1 = u64 [s1 + 0x130]\n 97694: u64 [s1 + 0x3b8] = a1\n 97698: a1 = u64 [s1 + 0x138]\n 97702: u64 [s1 + 0x3b0] = a1\n 97706: a1 = u64 [s1 + 0x140]\n 97710: u64 [s1 + 0x3a8] = a1\n 97714: a1 = u64 [s1 + 0x148]\n 97718: u64 [s1 + 0x3a0] = a1\n 97722: a1 = u64 [s1 + 0x188]\n 97726: a1 = reverse a1\n 97728: u64 [s1 + 0x3d8] = a1\n 97732: a1 = u64 [s1 + 0x128]\n 97736: a1 = reverse a1\n 97738: u64 [s1 + 0x3d0] = a1\n 97742: a1 = u64 [s1 + 0x198]\n 97746: a1 = a1 << 0x20\n 97749: u64 [s1 + 0x3c8] = a1\n 97753: u64 [s1 + 960] = 0\n 97757: i32 a2 = a0 + 0\n 97759: i32 a0 = s1 + 0x360\n 97763: a1 = 0x4\n 97766: a3 = 0x20\n 97769: ecalli 6 // 'deposit_event'\n 97771: a0 = u64 [s1 + 0x18]\n 97774: a1 = u64 [s1 + 0x58]\n 97777: u64 [a0 + 0x18] = a1\n 97780: a1 = u64 [s1 + 0x50]\n 97783: u64 [a0 + 0x10] = a1\n 97786: a1 = u64 [s1 + 0x60]\n 97789: u64 [a0 + 0x8] = a1\n 97792: a1 = u64 [s1 + 0x68]\n 97795: u64 [a0] = a1\n 97797: sp = s0 + 0xfffffffffffffc00\n 97801: ra = u64 [sp + 0x3f8]\n 97805: s0 = u64 [sp + 0x3f0]\n 97809: s1 = u64 [sp + 0x3e8]\n 97813: sp = sp + 0x400\n 97817: ret\n      : @1164 (gas: 3)\n 97819: a0 = 0x40\n 97822: a1 = 0x20\n 97825: ra = 1066, jump @0\n      : @1165 [@dyn 533] (gas: 104)\n 97832: a1 = u8 [a0 + 0x11]\n 97835: a2 = u8 [a0 + 0x10]\n 97838: a3 = u8 [a0 + 0x12]\n 97841: a4 = u8 [a0 + 0x13]\n 97844: a1 = a1 << 0x8\n 97847: a1 = a1 | a2\n 97850: a3 = a3 << 0x10\n 97853: a4 = a4 << 0x18\n 97856: a3 = a3 | a4\n 97859: a1 = a1 | a3\n 97862: a2 = u8 [a0 + 0x15]\n 97865: a3 = u8 [a0 + 0x14]\n 97868: a4 = u8 [a0 + 0x16]\n 97871: a5 = u8 [a0 + 0x17]\n 97874: a2 = a2 << 0x8\n 97877: a2 = a2 | a3\n 97880: a4 = a4 << 0x10\n 97883: a5 = a5 << 0x18\n 97886: a4 = a4 | a5\n 97889: a2 = a2 | a4\n 97892: a2 = a2 << 0x20\n 97895: t0 = a2 | a1\n 97898: a2 = u8 [a0 + 0x1]\n 97901: a3 = u8 [a0]\n 97903: a4 = u8 [a0 + 0x2]\n 97906: a5 = u8 [a0 + 0x3]\n 97909: a2 = a2 << 0x8\n 97912: a2 = a2 | a3\n 97915: a4 = a4 << 0x10\n 97918: a5 = a5 << 0x18\n 97921: a4 = a4 | a5\n 97924: a2 = a2 | a4\n 97927: a3 = u8 [a0 + 0x5]\n 97930: a4 = u8 [a0 + 0x4]\n 97933: a5 = u8 [a0 + 0x6]\n 97936: a1 = u8 [a0 + 0x7]\n 97939: a3 = a3 << 0x8\n 97942: a3 = a3 | a4\n 97945: a5 = a5 << 0x10\n 97948: a1 = a1 << 0x18\n 97951: a1 = a1 | a5\n 97954: a1 = a1 | a3\n 97957: a1 = a1 << 0x20\n 97960: t1 = a1 | a2\n 97963: a1 = u8 [a0 + 0x19]\n 97966: a3 = u8 [a0 + 0x18]\n 97969: a4 = u8 [a0 + 0x1a]\n 97972: a5 = u8 [a0 + 0x1b]\n 97975: a1 = a1 << 0x8\n 97978: a1 = a1 | a3\n 97981: a4 = a4 << 0x10\n 97984: a5 = a5 << 0x18\n 97987: a4 = a4 | a5\n 97990: a1 = a1 | a4\n 97993: a3 = u8 [a0 + 0x1d]\n 97996: a4 = u8 [a0 + 0x1c]\n 97999: a5 = u8 [a0 + 0x1e]\n 98002: a2 = u8 [a0 + 0x1f]\n 98005: a3 = a3 << 0x8\n 98008: a3 = a3 | a4\n 98011: a5 = a5 << 0x10\n 98014: a2 = a2 << 0x18\n 98017: a2 = a2 | a5\n 98020: a2 = a2 | a3\n 98023: a2 = a2 << 0x20\n 98026: a3 = a2 | a1\n 98029: a1 = u8 [a0 + 0x9]\n 98032: a2 = u8 [a0 + 0x8]\n 98035: a4 = u8 [a0 + 0xa]\n 98038: a5 = u8 [a0 + 0xb]\n 98041: a1 = a1 << 0x8\n 98044: a1 = a1 | a2\n 98047: a4 = a4 << 0x10\n 98050: a5 = a5 << 0x18\n 98053: a4 = a4 | a5\n 98056: a1 = a1 | a4\n 98059: a2 = u8 [a0 + 0xd]\n 98062: a4 = u8 [a0 + 0xc]\n 98065: a5 = u8 [a0 + 0xe]\n 98068: a0 = u8 [a0 + 0xf]\n 98071: a2 = a2 << 0x8\n 98074: a2 = a2 | a4\n 98077: a5 = a5 << 0x10\n 98080: a0 = a0 << 0x18\n 98083: a0 = a0 | a5\n 98086: a0 = a0 | a2\n 98089: a0 = a0 << 0x20\n 98092: a0 = a0 | a1\n 98095: a4 = reverse a0\n 98097: a1 = reverse a3\n 98099: a2 = reverse t1\n 98101: a0 = reverse t0\n 98103: u64 [s1 + 0x198] = a0\n 98107: u64 [s1 + 0x188] = a2\n 98111: a0 = a0 | a2\n 98114: a2 = a1\n 98116: a1 = a1 | a4\n 98119: a1 = a1 | a0\n 98122: a1 = a1 >> 0x20\n 98125: u64 [s1 + 0x190] = a4\n 98129: a0 = a0 | a4\n 98132: a0 = a0 << 0x20\n 98135: a0 = a0 | a1\n 98138: jump @1175 if a0 != 0\n      : @1166 (gas: 5)\n 98142: u64 [s1 + 0x180] = a2\n 98146: i32 a0 = a2 + 0\n 98148: a1 = 0x20\n 98151: u64 [s1 + 0x178] = a0\n 98155: ra = 1068, jump @0\n      : @1167 [@dyn 534] (gas: 51)\n 98162: u8 [a0 + 31] = 0\n 98165: u8 [a0 + 30] = 0\n 98168: u8 [a0 + 29] = 0\n 98171: u8 [a0 + 28] = 0\n 98174: u8 [a0 + 27] = 0\n 98177: u8 [a0 + 26] = 0\n 98180: u8 [a0 + 25] = 0\n 98183: u8 [a0 + 24] = 0\n 98186: u8 [a0 + 23] = 0\n 98189: u8 [a0 + 22] = 0\n 98192: u8 [a0 + 21] = 0\n 98195: u8 [a0 + 20] = 0\n 98198: u8 [a0 + 19] = 0\n 98201: u8 [a0 + 18] = 0\n 98204: u8 [a0 + 17] = 0\n 98207: u8 [a0 + 16] = 0\n 98210: u8 [a0 + 15] = 0\n 98213: u8 [a0 + 14] = 0\n 98216: u8 [a0 + 13] = 0\n 98219: u8 [a0 + 12] = 0\n 98222: u8 [a0 + 11] = 0\n 98225: u8 [a0 + 10] = 0\n 98228: u8 [a0 + 9] = 0\n 98231: u8 [a0 + 8] = 0\n 98234: u8 [a0 + 7] = 0\n 98237: u8 [a0 + 6] = 0\n 98240: u8 [a0 + 5] = 0\n 98243: u8 [a0 + 4] = 0\n 98246: u8 [a0 + 3] = 0xa0\n 98251: u8 [a0 + 2] = 0x79\n 98255: u8 [a0 + 1] = 0xc3\n 98260: u8 [a0 + 0] = 0x8\n 98263: a1 = u64 [s1 + 0x180]\n 98267: a0 = a1 + 0x4\n 98270: a1 = a0 <u a1\n 98273: a3 = u64 [s1 + 0x198]\n 98277: a2 = a3 + a1\n 98280: a3 = a2 <u a3\n 98283: a3 = a1 if a1 == 0\n 98286: a1 = u64 [s1 + 0x190]\n 98290: a3 = a3 + a1\n 98293: a1 = a3 <u a1\n 98296: a4 = u64 [s1 + 0x188]\n 98300: a4 = a4 + a1\n 98303: u64 [s1 + 0x1a8] = a2\n 98307: u64 [s1 + 0x1a0] = a0\n 98311: u64 [s1 + 0x1b0] = a3\n 98315: a0 = s1 + 0x1c0\n 98319: a1 = s1 + 0x1a0\n 98323: u64 [s1 + 0x1b8] = a4\n 98327: ra = 1070, jump @1093\n      : @1168 [@dyn 535] (gas: 5)\n 98333: a0 = u64 [s1 + 0x1c8]\n 98337: t0 = u64 [s1 + 0x1d8]\n 98341: t1 = u64 [s1 + 0x1c0]\n 98345: a3 = u64 [s1 + 0x1d0]\n 98349: jump @1174\n      : @1169 (gas: 3)\n 98352: a0 = 0x40\n 98355: a1 = 0x20\n 98358: ra = 1072, jump @0\n      : @1170 [@dyn 536] (gas: 104)\n 98365: a1 = u8 [a0 + 0x11]\n 98368: a2 = u8 [a0 + 0x10]\n 98371: a3 = u8 [a0 + 0x12]\n 98374: a4 = u8 [a0 + 0x13]\n 98377: a1 = a1 << 0x8\n 98380: a1 = a1 | a2\n 98383: a3 = a3 << 0x10\n 98386: a4 = a4 << 0x18\n 98389: a3 = a3 | a4\n 98392: a1 = a1 | a3\n 98395: a2 = u8 [a0 + 0x15]\n 98398: a3 = u8 [a0 + 0x14]\n 98401: a4 = u8 [a0 + 0x16]\n 98404: a5 = u8 [a0 + 0x17]\n 98407: a2 = a2 << 0x8\n 98410: a2 = a2 | a3\n 98413: a4 = a4 << 0x10\n 98416: a5 = a5 << 0x18\n 98419: a4 = a4 | a5\n 98422: a2 = a2 | a4\n 98425: a2 = a2 << 0x20\n 98428: t0 = a2 | a1\n 98431: a2 = u8 [a0 + 0x1]\n 98434: a3 = u8 [a0]\n 98436: a4 = u8 [a0 + 0x2]\n 98439: a5 = u8 [a0 + 0x3]\n 98442: a2 = a2 << 0x8\n 98445: a2 = a2 | a3\n 98448: a4 = a4 << 0x10\n 98451: a5 = a5 << 0x18\n 98454: a4 = a4 | a5\n 98457: a2 = a2 | a4\n 98460: a3 = u8 [a0 + 0x5]\n 98463: a4 = u8 [a0 + 0x4]\n 98466: a5 = u8 [a0 + 0x6]\n 98469: a1 = u8 [a0 + 0x7]\n 98472: a3 = a3 << 0x8\n 98475: a3 = a3 | a4\n 98478: a5 = a5 << 0x10\n 98481: a1 = a1 << 0x18\n 98484: a1 = a1 | a5\n 98487: a1 = a1 | a3\n 98490: a1 = a1 << 0x20\n 98493: t1 = a1 | a2\n 98496: a1 = u8 [a0 + 0x19]\n 98499: a3 = u8 [a0 + 0x18]\n 98502: a4 = u8 [a0 + 0x1a]\n 98505: a5 = u8 [a0 + 0x1b]\n 98508: a1 = a1 << 0x8\n 98511: a1 = a1 | a3\n 98514: a4 = a4 << 0x10\n 98517: a5 = a5 << 0x18\n 98520: a4 = a4 | a5\n 98523: a1 = a1 | a4\n 98526: a3 = u8 [a0 + 0x1d]\n 98529: a4 = u8 [a0 + 0x1c]\n 98532: a5 = u8 [a0 + 0x1e]\n 98535: a2 = u8 [a0 + 0x1f]\n 98538: a3 = a3 << 0x8\n 98541: a3 = a3 | a4\n 98544: a5 = a5 << 0x10\n 98547: a2 = a2 << 0x18\n 98550: a2 = a2 | a5\n 98553: a2 = a2 | a3\n 98556: a2 = a2 << 0x20\n 98559: a3 = a2 | a1\n 98562: a1 = u8 [a0 + 0x9]\n 98565: a2 = u8 [a0 + 0x8]\n 98568: a4 = u8 [a0 + 0xa]\n 98571: a5 = u8 [a0 + 0xb]\n 98574: a1 = a1 << 0x8\n 98577: a1 = a1 | a2\n 98580: a4 = a4 << 0x10\n 98583: a5 = a5 << 0x18\n 98586: a4 = a4 | a5\n 98589: a1 = a1 | a4\n 98592: a2 = u8 [a0 + 0xd]\n 98595: a4 = u8 [a0 + 0xc]\n 98598: a5 = u8 [a0 + 0xe]\n 98601: a0 = u8 [a0 + 0xf]\n 98604: a2 = a2 << 0x8\n 98607: a2 = a2 | a4\n 98610: a5 = a5 << 0x10\n 98613: a0 = a0 << 0x18\n 98616: a0 = a0 | a5\n 98619: a0 = a0 | a2\n 98622: a0 = a0 << 0x20\n 98625: a0 = a0 | a1\n 98628: a4 = reverse a0\n 98630: a1 = reverse a3\n 98632: a2 = reverse t1\n 98634: a0 = reverse t0\n 98636: u64 [s1 + 0x198] = a0\n 98640: u64 [s1 + 0x188] = a2\n 98644: a0 = a0 | a2\n 98647: a2 = a1\n 98649: a1 = a1 | a4\n 98652: a1 = a1 | a0\n 98655: a1 = a1 >> 0x20\n 98658: u64 [s1 + 0x190] = a4\n 98662: a0 = a0 | a4\n 98665: a0 = a0 << 0x20\n 98668: a0 = a0 | a1\n 98671: jump @1175 if a0 != 0\n      : @1171 (gas: 5)\n 98675: u64 [s1 + 0x180] = a2\n 98679: i32 a0 = a2 + 0\n 98681: a1 = 0x20\n 98684: u64 [s1 + 0x178] = a0\n 98688: ra = 1074, jump @0\n      : @1172 [@dyn 537] (gas: 51)\n 98695: u8 [a0 + 31] = 0\n 98698: u8 [a0 + 30] = 0\n 98701: u8 [a0 + 29] = 0\n 98704: u8 [a0 + 28] = 0\n 98707: u8 [a0 + 27] = 0\n 98710: u8 [a0 + 26] = 0\n 98713: u8 [a0 + 25] = 0\n 98716: u8 [a0 + 24] = 0\n 98719: u8 [a0 + 23] = 0\n 98722: u8 [a0 + 22] = 0\n 98725: u8 [a0 + 21] = 0\n 98728: u8 [a0 + 20] = 0\n 98731: u8 [a0 + 19] = 0\n 98734: u8 [a0 + 18] = 0\n 98737: u8 [a0 + 17] = 0\n 98740: u8 [a0 + 16] = 0\n 98743: u8 [a0 + 15] = 0\n 98746: u8 [a0 + 14] = 0\n 98749: u8 [a0 + 13] = 0\n 98752: u8 [a0 + 12] = 0\n 98755: u8 [a0 + 11] = 0\n 98758: u8 [a0 + 10] = 0\n 98761: u8 [a0 + 9] = 0\n 98764: u8 [a0 + 8] = 0\n 98767: u8 [a0 + 7] = 0\n 98770: u8 [a0 + 6] = 0\n 98773: u8 [a0 + 5] = 0\n 98776: u8 [a0 + 4] = 0\n 98779: u8 [a0 + 3] = 0xa0\n 98784: u8 [a0 + 2] = 0x79\n 98788: u8 [a0 + 1] = 0xc3\n 98793: u8 [a0 + 0] = 0x8\n 98796: a1 = u64 [s1 + 0x180]\n 98800: a0 = a1 + 0x4\n 98803: a1 = a0 <u a1\n 98806: a3 = u64 [s1 + 0x198]\n 98810: a2 = a3 + a1\n 98813: a3 = a2 <u a3\n 98816: a3 = a1 if a1 == 0\n 98819: a1 = u64 [s1 + 0x190]\n 98823: a3 = a3 + a1\n 98826: a1 = a3 <u a1\n 98829: a4 = u64 [s1 + 0x188]\n 98833: a4 = a4 + a1\n 98836: u64 [s1 + 0x2a8] = a2\n 98840: u64 [s1 + 0x2a0] = a0\n 98844: u64 [s1 + 0x2b0] = a3\n 98848: a0 = s1 + 0x2c0\n 98852: a1 = s1 + 0x2a0\n 98856: u64 [s1 + 0x2b8] = a4\n 98860: ra = 1076, jump @1101\n      : @1173 [@dyn 538] (gas: 5)\n 98866: a0 = u64 [s1 + 0x2c8]\n 98870: t0 = u64 [s1 + 0x2d8]\n 98874: t1 = u64 [s1 + 0x2c0]\n 98878: a3 = u64 [s1 + 0x2d0]\n 98882: fallthrough\n      : @1174 (gas: 27)\n 98883: a1 = u64 [s1 + 0x198]\n 98887: a4 = a0 ^ a1\n 98890: a5 = a0 <u a1\n 98893: ra = a1\n 98895: t2 = u64 [s1 + 0x180]\n 98899: a1 = t1 <u t2\n 98902: a5 = a1 if a4 == 0\n 98905: a2 = u64 [s1 + 0x190]\n 98909: a4 = a3 - a2\n 98912: a3 = a3 <u a2\n 98915: a2 = u64 [s1 + 0x188]\n 98919: a2 = t0 - a2\n 98922: a2 = a2 - a3\n 98925: a3 = a4 <u a5\n 98928: a2 = a2 - a3\n 98931: a4 = a4 - a5\n 98934: a0 = a0 - ra\n 98937: a1 = a0 - a1\n 98940: a0 = t1 - t2\n 98943: a1 = a1 | a2\n 98946: a2 = a0 | a4\n 98949: a2 = a2 | a1\n 98952: a1 = a1 | a4\n 98955: a2 = a2 >> 0x20\n 98958: a1 = a1 << 0x20\n 98961: a1 = a1 | a2\n 98964: jump @1180 if a1 == 0\n      : @1175 (gas: 1)\n 98967: trap\n      : @1176 (gas: 8)\n 98968: u64 [s1 + 528] = 0\n 98972: u64 [s1 + 520] = 0\n 98976: u64 [s1 + 512] = 0\n 98980: a0 = 0x4e487b7100000000\n 98990: a1 = s1 + 0x200\n 98994: u64 [s1 + 0x218] = a0\n 98998: a0 = 0\n 99000: ra = 1078, jump @23\n      : @1177 [@dyn 539] (gas: 7)\n 99007: u64 [s1 + 504] = 0\n 99011: u64 [s1 + 496] = 0\n 99015: u64 [s1 + 480] = 0x11\n 99020: a0 = 0x4\n 99023: a1 = s1 + 0x1e0\n 99027: u64 [s1 + 488] = 0\n 99031: ra = 1080, jump @23\n      : @1178 [@dyn 540] (gas: 3)\n 99038: a1 = 0x24\n 99041: a0 = 0\n 99043: ra = 1082, jump @0\n      : @1179 [@dyn 541] (gas: 5)\n 99050: i32 a1 = a0 + 0\n 99052: a0 = 0x1\n 99055: a2 = 0x24\n 99058: ecalli 12 // 'seal_return'\n 99060: fallthrough\n      : @1180 (gas: 4)\n 99061: i32 a1 = a0 + 0\n 99063: u64 [s1 + 0x198] = a1\n 99067: a0 = u64 [s1 + 0x178]\n 99071: ra = 1084, jump @0\n      : @1181 [@dyn 542] (gas: 6)\n 99078: i32 a1 = a0 + 0\n 99080: a0 = 0x1\n 99083: a2 = u64 [s1 + 0x198]\n 99087: ra = 0x43e\n 99091: ecalli 12 // 'seal_return'\n 99093: fallthrough\n      : @1182 [@dyn 543] (gas: 22)\n 99094: sp = sp + 0xffffffffffffff80\n 99097: u64 [sp + 0x78] = ra\n 99100: u64 [sp + 0x70] = s0\n 99103: u64 [sp + 0x68] = s1\n 99106: s0 = sp + 0x80\n 99110: sp = sp & 0xfffffffffffffff0\n 99113: a2 = u64 [a1]\n 99115: a3 = u64 [a1 + 0x8]\n 99118: a4 = u64 [a1 + 0x10]\n 99121: a1 = u64 [a1 + 0x18]\n 99124: s1 = a0\n 99126: u64 [sp + 0x18] = a1\n 99129: u64 [sp + 0x10] = a4\n 99132: u64 [sp + 0x8] = a3\n 99135: u64 [sp] = a2\n 99137: u64 [sp + 56] = 0\n 99140: u64 [sp + 48] = 0\n 99143: u64 [sp + 40] = 0\n 99146: a0 = sp + 0x40\n 99149: a2 = sp\n 99151: u64 [sp + 32] = 0\n 99154: ra = 1088, jump @1077\n      : @1183 [@dyn 544] (gas: 14)\n 99160: a0 = u64 [sp + 0x50]\n 99163: a1 = u64 [sp + 0x58]\n 99166: a2 = u64 [sp + 0x40]\n 99169: a3 = u64 [sp + 0x48]\n 99172: u64 [s1 + 0x10] = a0\n 99175: u64 [s1 + 0x18] = a1\n 99178: u64 [s1] = a2\n 99180: u64 [s1 + 0x8] = a3\n 99183: sp = s0 + 0xffffffffffffff80\n 99186: ra = u64 [sp + 0x78]\n 99189: s0 = u64 [sp + 0x70]\n 99192: s1 = u64 [sp + 0x68]\n 99195: sp = sp + 0x80\n 99199: ret\n      : @1184 (gas: 12)\n 99201: a0 = u64 [sp + 0x70]\n 99204: a1 = u64 [sp + 0x78]\n 99207: a0 = a0 | a1\n 99210: a1 = u64 [sp + 0x98]\n 99214: a1 = a1 | s1\n 99217: a1 = a1 | a0\n 99220: a1 = a1 >> 0x20\n 99223: u64 [sp + 0x68] = s1\n 99226: a0 = a0 | s1\n 99229: a0 = a0 << 0x20\n 99232: a0 = a0 | a1\n 99235: jump @1198 if a0 != 0\n      : @1185 (gas: 11)\n 99239: s1 = u64 [sp + 0xd8]\n 99243: u64 [sp + 0x80] = s1\n 99247: a0 = u64 [sp + 0xd0]\n 99251: u64 [sp + 0x90] = a0\n 99255: a0 = u64 [sp + 0xc8]\n 99259: u64 [sp + 0x60] = a0\n 99262: a0 = u64 [sp + 0xc0]\n 99266: u64 [sp + 0x88] = a0\n 99270: a0 = i32 [sp + 0x98]\n 99274: a1 = 0x20\n 99277: ra = 1090, jump @0\n      : @1186 [@dyn 545] (gas: 70)\n 99284: a1 = reverse s1\n 99286: a2 = u64 [sp + 0x90]\n 99290: a2 = reverse a2\n 99292: s1 = u64 [sp + 0x60]\n 99295: a3 = reverse s1\n 99297: a4 = u64 [sp + 0x88]\n 99301: a4 = reverse a4\n 99303: a5 = a4 >> 0x38\n 99306: u8 [a0 + 0x1f] = a5\n 99309: a5 = a4 >> 0x30\n 99312: u8 [a0 + 0x1e] = a5\n 99315: a5 = a4 >> 0x28\n 99318: u8 [a0 + 0x1d] = a5\n 99321: a5 = a4 >> 0x20\n 99324: u8 [a0 + 0x1c] = a5\n 99327: a5 = a4 >> 0x18\n 99330: u8 [a0 + 0x1b] = a5\n 99333: a5 = a4 >> 0x10\n 99336: u8 [a0 + 0x1a] = a5\n 99339: a5 = a4 >> 0x8\n 99342: u8 [a0 + 0x19] = a5\n 99345: u8 [a0 + 0x18] = a4\n 99348: u8 [a0 + 0x10] = a3\n 99351: a4 = a3 >> 0x38\n 99354: u8 [a0 + 0x17] = a4\n 99357: a4 = a3 >> 0x30\n 99360: u8 [a0 + 0x16] = a4\n 99363: a4 = a3 >> 0x28\n 99366: u8 [a0 + 0x15] = a4\n 99369: a4 = a3 >> 0x20\n 99372: u8 [a0 + 0x14] = a4\n 99375: a4 = a3 >> 0x18\n 99378: u8 [a0 + 0x13] = a4\n 99381: a4 = a3 >> 0x10\n 99384: u8 [a0 + 0x12] = a4\n 99387: a3 = a3 >> 0x8\n 99390: u8 [a0 + 0x11] = a3\n 99393: u8 [a0 + 0x8] = a2\n 99396: a3 = a2 >> 0x38\n 99399: u8 [a0 + 0xf] = a3\n 99402: a3 = a2 >> 0x30\n 99405: u8 [a0 + 0xe] = a3\n 99408: a3 = a2 >> 0x28\n 99411: u8 [a0 + 0xd] = a3\n 99414: a3 = a2 >> 0x20\n 99417: u8 [a0 + 0xc] = a3\n 99420: a3 = a2 >> 0x18\n 99423: u8 [a0 + 0xb] = a3\n 99426: a3 = a2 >> 0x10\n 99429: u8 [a0 + 0xa] = a3\n 99432: a2 = a2 >> 0x8\n 99435: u8 [a0 + 0x9] = a2\n 99438: u8 [a0] = a1\n 99440: a2 = a1 >> 0x38\n 99443: u8 [a0 + 0x7] = a2\n 99446: a2 = a1 >> 0x30\n 99449: u8 [a0 + 0x6] = a2\n 99452: a2 = a1 >> 0x28\n 99455: u8 [a0 + 0x5] = a2\n 99458: a2 = a1 >> 0x20\n 99461: u8 [a0 + 0x4] = a2\n 99464: a2 = a1 >> 0x18\n 99467: u8 [a0 + 0x3] = a2\n 99470: a2 = a1 >> 0x10\n 99473: u8 [a0 + 0x2] = a2\n 99476: a1 = a1 >> 0x8\n 99479: u8 [a0 + 0x1] = a1\n 99482: a1 = 0x20\n 99485: a0 = 0\n 99487: ra = 1092, jump @0\n      : @1187 [@dyn 546] (gas: 71)\n 99494: a1 = u64 [sp + 0x40]\n 99497: a1 = reverse a1\n 99499: a2 = u64 [sp + 0x48]\n 99502: a2 = reverse a2\n 99504: a3 = u64 [sp + 0x50]\n 99507: a3 = reverse a3\n 99509: a4 = u64 [sp + 0x58]\n 99512: a4 = reverse a4\n 99514: a5 = a4 >> 0x38\n 99517: u8 [a0 + 0x1f] = a5\n 99520: a5 = a4 >> 0x30\n 99523: u8 [a0 + 0x1e] = a5\n 99526: a5 = a4 >> 0x28\n 99529: u8 [a0 + 0x1d] = a5\n 99532: a5 = a4 >> 0x20\n 99535: u8 [a0 + 0x1c] = a5\n 99538: a5 = a4 >> 0x18\n 99541: u8 [a0 + 0x1b] = a5\n 99544: a5 = a4 >> 0x10\n 99547: u8 [a0 + 0x1a] = a5\n 99550: a5 = a4 >> 0x8\n 99553: u8 [a0 + 0x19] = a5\n 99556: u8 [a0 + 0x18] = a4\n 99559: a4 = a3 >> 0x38\n 99562: u8 [a0 + 0x17] = a4\n 99565: a4 = a3 >> 0x30\n 99568: u8 [a0 + 0x16] = a4\n 99571: a4 = a3 >> 0x28\n 99574: u8 [a0 + 0x15] = a4\n 99577: a4 = a3 >> 0x20\n 99580: u8 [a0 + 0x14] = a4\n 99583: a4 = a3 >> 0x18\n 99586: u8 [a0 + 0x13] = a4\n 99589: a4 = a3 >> 0x10\n 99592: u8 [a0 + 0x12] = a4\n 99595: a4 = a3 >> 0x8\n 99598: u8 [a0 + 0x11] = a4\n 99601: u8 [a0 + 0x10] = a3\n 99604: a3 = a2 >> 0x38\n 99607: u8 [a0 + 0xf] = a3\n 99610: a3 = a2 >> 0x30\n 99613: u8 [a0 + 0xe] = a3\n 99616: a3 = a2 >> 0x28\n 99619: u8 [a0 + 0xd] = a3\n 99622: a3 = a2 >> 0x20\n 99625: u8 [a0 + 0xc] = a3\n 99628: a3 = a2 >> 0x18\n 99631: u8 [a0 + 0xb] = a3\n 99634: a3 = a2 >> 0x10\n 99637: u8 [a0 + 0xa] = a3\n 99640: a3 = a2 >> 0x8\n 99643: u8 [a0 + 0x9] = a3\n 99646: u8 [a0 + 0x8] = a2\n 99649: a2 = a1 >> 0x38\n 99652: u8 [a0 + 0x7] = a2\n 99655: a2 = a1 >> 0x30\n 99658: u8 [a0 + 0x6] = a2\n 99661: a2 = a1 >> 0x28\n 99664: u8 [a0 + 0x5] = a2\n 99667: a2 = a1 >> 0x20\n 99670: u8 [a0 + 0x4] = a2\n 99673: a2 = a1 >> 0x18\n 99676: u8 [a0 + 0x3] = a2\n 99679: a2 = a1 >> 0x10\n 99682: u8 [a0 + 0x2] = a2\n 99685: a2 = a1 >> 0x8\n 99688: u8 [a0 + 0x1] = a2\n 99691: u8 [a0] = a1\n 99693: a1 = 0x20\n 99696: a0 = 0\n 99698: ra = 1094, jump @0\n      : @1188 [@dyn 547] (gas: 5)\n 99705: i32 a0 = a0 + 0\n 99707: i32 a2 = sp + 0xc0\n 99711: a1 = 0x20\n 99714: ecalli 8 // 'hash_keccak_256'\n 99716: fallthrough\n      : @1189 (gas: 20)\n 99717: a1 = u64 [sp + 0x98]\n 99721: a0 = a1 + 0x20\n 99724: u64 [sp + 0x50] = a0\n 99727: a2 = a0 <u a1\n 99730: a1 = u64 [sp + 0x78]\n 99733: t2 = a1 + a2\n 99736: a3 = t2 <u a1\n 99739: a3 = a2 if a2 == 0\n 99742: a2 = u64 [sp + 0x68]\n 99745: ra = a2 + a3\n 99748: a0 = u64 [sp + 0x90]\n 99752: a3 = u64 [sp + 0x88]\n 99756: a3 = a3 | a0\n 99759: a0 = u64 [sp + 0x80]\n 99763: a4 = s1 | a0\n 99766: a4 = a4 | a3\n 99769: a3 = ra <u a2\n 99772: t1 = u64 [sp + 0x70]\n 99775: a3 = a3 + t1\n 99778: jump @1196 if a4 == 0\n      : @1190 (gas: 161)\n 99782: a0 = 0xffffffe0\n 99792: a4 = u64 [sp + 0x98]\n 99796: s1 = a0 <u a4\n 99799: u64 [sp + 0x40] = s1\n 99802: a5 = a1 >u 0\n 99804: a5 = s1 if a1 == 0\n 99807: s1 = -a2\n 99809: a1 = s1 - a5\n 99812: u64 [sp + 0x58] = a1\n 99815: t0 = a1 >u 0\n 99817: a5 = s1 <u a5\n 99820: s1 = a2 >u 0\n 99822: s1 = s1 + t1\n 99825: s1 = -s1\n 99827: s1 = s1 - a5\n 99830: t1 = s1 >u 0\n 99832: t1 = t0 if s1 == 0\n 99835: a2 = s1\n 99837: u64 [sp + 0x48] = s1\n 99840: t0 = a0 - a4\n 99843: a1 = u64 [sp + 0x78]\n 99846: a5 = -a1\n 99848: a1 = u64 [sp + 0x40]\n 99851: a4 = a5 - a1\n 99854: u64 [sp + 0x40] = a0\n 99857: s1 = a0 <u t0\n 99860: a5 = a4 >u 0\n 99862: a5 = s1 if a4 == 0\n 99865: a1 = u64 [sp + 0x58]\n 99868: s1 = a1 | a2\n 99871: a5 = t1 if s1 != 0\n 99874: t0 = 0 if a5 != 0\n 99876: a0 = t0 + 0x1f\n 99879: s1 = a0 <u t0\n 99882: a4 = 0 if a5 != 0\n 99884: t0 = a4 + s1\n 99887: a4 = t0 <u a4\n 99890: a4 = s1 if s1 == 0\n 99893: a1 = 0 if a5 != 0\n 99895: u64 [sp + 0x58] = a1\n 99898: a1 = a1 + a4\n 99901: u64 [sp + 0x8] = a1\n 99904: a4 = a1 << 0x3b\n 99907: s1 = t0 >> 0x5\n 99910: t1 = s1 | a4\n 99913: t0 = t0 << 0x3b\n 99916: a4 = a0 >> 0x5\n 99919: s1 = a4 | t0\n 99922: u64 [sp + 0x38] = s1\n 99925: a1 = u64 [sp + 0x88]\n 99929: a4 = a1 <u 0x1\n 99932: t0 = u64 [sp + 0x60]\n 99935: a0 = t0 - a4\n 99938: u64 [sp + 0x20] = a0\n 99941: a2 = a1 + 0xffffffffffffffff\n 99944: u64 [sp + 0x30] = a2\n 99947: u64 [sp + 0x28] = t1\n 99950: a4 = a0 ^ t1\n 99953: t1 = a0 <u t1\n 99956: a0 = a2 <u s1\n 99959: a0 = t1 if a4 != 0\n 99962: u64 [sp + 0x10] = a0\n 99965: a4 = a1 | t0\n 99968: a4 = a4 <u 0x1\n 99971: a0 = u64 [sp + 0x90]\n 99975: t1 = a0 <u a4\n 99978: a1 = u64 [sp + 0x80]\n 99982: a1 = a1 - t1\n 99985: a0 = a0 - a4\n 99988: a2 = u64 [sp + 0x48]\n 99991: a2 = 0 if a5 != 0\n 99993: a4 = u64 [sp + 0x8]\n 99996: a5 = u64 [sp + 0x58]\n 99999: a5 = a4 <u a5\n100002: a2 = a2 + a5\n100005: t1 = a4 >> 0x5\n100008: a5 = a2 << 0x3b\n100011: t1 = t1 | a5\n100014: a5 = a2 >> 0x5\n100017: a2 = a0 <u t1\n100020: t0 = a1 ^ a5\n100023: a4 = a1 <u a5\n100026: a4 = a2 if t0 == 0\n100029: s1 = a0 ^ t1\n100032: s1 = s1 | t0\n100035: a2 = u64 [sp + 0x10]\n100038: a4 = a2 if s1 == 0\n100041: a1 = a5 if a4 == 0\n100044: u64 [sp + 0x90] = a1\n100048: a0 = t1 if a4 == 0\n100051: a1 = u64 [sp + 0x20]\n100054: a2 = u64 [sp + 0x28]\n100057: a1 = a2 if a4 == 0\n100060: a2 = u64 [sp + 0x30]\n100063: a5 = u64 [sp + 0x38]\n100066: a2 = a5 if a4 == 0\n100069: a4 = a2 >> 0x3b\n100072: a5 = a1 << 0x5\n100075: t1 = a1\n100077: a4 = a4 | a5\n100080: a5 = a2 << 0x5\n100083: s1 = u64 [sp + 0x78]\n100086: s1 = s1 + a4\n100089: a1 = u64 [sp + 0x98]\n100093: a5 = a5 + a1\n100096: u64 [sp + 0x60] = a5\n100099: a4 = a5 <u a1\n100102: s1 = s1 + a4\n100105: a1 = u64 [sp + 0x78]\n100108: t0 = s1 ^ a1\n100111: a1 = u64 [sp + 0x78]\n100114: a5 = s1 <u a1\n100117: a5 = a4 if t0 == 0\n100120: a1 = u64 [sp + 0xd0]\n100124: u64 [sp + 0x88] = a1\n100128: t1 = t1 >> 0x3b\n100131: a4 = a0 << 0x5\n100134: t1 = a4 | t1\n100137: a1 = u64 [sp + 0xc8]\n100141: u64 [sp + 0x80] = a1\n100145: a0 = a0 >> 0x3b\n100148: t0 = u64 [sp + 0x90]\n100152: t0 = t0 << 0x5\n100155: a4 = t0 | a0\n100158: a2 = u64 [sp + 0x68]\n100161: t0 = u64 [sp + 0x70]\n100164: t0 = t0 + a4\n100167: t1 = t1 + a2\n100170: a4 = t1 <u a2\n100173: t0 = t0 + a4\n100176: a5 = a5 + t1\n100179: a4 = a5 <u t1\n100182: a1 = u64 [sp + 0x70]\n100185: t0 = t0 + a4\n100188: a4 = u64 [sp + 0x60]\n100191: a0 = a4 + 0x20\n100194: u64 [sp + 0x38] = a0\n100197: a4 = a0 <u a4\n100200: a0 = s1 + a4\n100203: u64 [sp + 0x30] = a0\n100206: s1 = a0 <u s1\n100209: s1 = a4 if a4 == 0\n100212: a0 = u64 [sp + 0xc0]\n100216: s1 = s1 + a5\n100219: u64 [sp + 0x28] = s1\n100222: a5 = s1 <u a5\n100225: a5 = a5 + t0\n100228: u64 [sp + 0x20] = a5\n100231: a4 = u64 [sp + 0x78]\n100234: a5 = u64 [sp + 0xd8]\n100238: a0 = reverse a0\n100240: u64 [sp + 0x90] = a0\n100244: a0 = u64 [sp + 0x80]\n100248: t0 = reverse a0\n100250: a0 = u64 [sp + 0x88]\n100254: a0 = reverse a0\n100256: u64 [sp + 0x88] = a0\n100260: a0 = reverse a5\n100262: u64 [sp + 0x80] = a0\n100266: t1 = u64 [sp + 0x50]\n100269: fallthrough\n      : @1191 (gas: 29)\n100270: u64 [sp + 0x60] = a1\n100273: u64 [sp + 0x58] = a2\n100276: s1 = a4\n100278: a0 = u64 [sp + 0x98]\n100282: u64 [sp + 0x50] = a0\n100285: u64 [sp + 0x70] = a3\n100288: u64 [sp + 0x68] = ra\n100291: u64 [sp + 0x78] = t2\n100294: u64 [sp + 0x98] = t1\n100298: u64 [sp + 0x48] = t0\n100301: u64 [sp + 0xb0] = t0\n100305: a0 = u64 [sp + 0x88]\n100309: u64 [sp + 0xa8] = a0\n100313: a0 = u64 [sp + 0x80]\n100317: u64 [sp + 0xa0] = a0\n100321: a0 = u64 [sp + 0x90]\n100325: u64 [sp + 0xb8] = a0\n100329: u64 [sp + 216] = 0\n100333: u64 [sp + 208] = 0\n100337: u64 [sp + 200] = 0\n100341: u64 [sp + 192] = 0\n100345: u32 [sp + 224] = 0x20\n100350: i32 a1 = sp + 0xa0\n100354: i32 a3 = sp + 0xc0\n100358: i32 a4 = sp + 0xe0\n100362: a2 = 0xffffffffffffffff\n100365: a0 = 0\n100367: ecalli 7 // 'get_storage'\n100369: fallthrough\n      : @1192 (gas: 9)\n100370: a0 = u64 [sp + 0x60]\n100373: a1 = u64 [sp + 0x58]\n100376: a0 = a0 | a1\n100379: a1 = u64 [sp + 0x40]\n100382: a2 = u64 [sp + 0x50]\n100385: a1 = a2 <u a1\n100388: a1 = 0 if s1 != 0\n100390: a1 = 0 if a0 != 0\n100392: jump @1198 if a1 == 0\n      : @1193 (gas: 10)\n100396: s1 = u64 [sp + 0xd8]\n100400: a0 = u64 [sp + 0xd0]\n100404: u64 [sp + 0x50] = a0\n100407: a0 = u64 [sp + 0xc8]\n100411: u64 [sp + 0x58] = a0\n100414: a0 = u64 [sp + 0xc0]\n100418: u64 [sp + 0x60] = a0\n100421: a0 = i32 [sp + 0x98]\n100425: a1 = 0x20\n100428: ra = 1096, jump @0\n      : @1194 [@dyn 548] (gas: 107)\n100435: a1 = reverse s1\n100437: a2 = u64 [sp + 0x50]\n100440: a2 = reverse a2\n100442: a3 = u64 [sp + 0x58]\n100445: a3 = reverse a3\n100447: a4 = u64 [sp + 0x60]\n100450: a4 = reverse a4\n100452: a5 = a4 >> 0x38\n100455: u8 [a0 + 0x1f] = a5\n100458: a5 = a4 >> 0x30\n100461: u8 [a0 + 0x1e] = a5\n100464: a5 = a4 >> 0x28\n100467: u8 [a0 + 0x1d] = a5\n100470: a5 = a4 >> 0x20\n100473: u8 [a0 + 0x1c] = a5\n100476: a5 = a4 >> 0x18\n100479: u8 [a0 + 0x1b] = a5\n100482: a5 = a4 >> 0x10\n100485: u8 [a0 + 0x1a] = a5\n100488: a5 = a4 >> 0x8\n100491: u8 [a0 + 0x19] = a5\n100494: u8 [a0 + 0x18] = a4\n100497: u8 [a0 + 0x10] = a3\n100500: a4 = a3 >> 0x38\n100503: u8 [a0 + 0x17] = a4\n100506: a4 = a3 >> 0x30\n100509: u8 [a0 + 0x16] = a4\n100512: a4 = a3 >> 0x28\n100515: u8 [a0 + 0x15] = a4\n100518: a4 = a3 >> 0x20\n100521: u8 [a0 + 0x14] = a4\n100524: a4 = a3 >> 0x18\n100527: u8 [a0 + 0x13] = a4\n100530: a4 = a3 >> 0x10\n100533: u8 [a0 + 0x12] = a4\n100536: a3 = a3 >> 0x8\n100539: u8 [a0 + 0x11] = a3\n100542: u8 [a0 + 0x8] = a2\n100545: a3 = a2 >> 0x38\n100548: u8 [a0 + 0xf] = a3\n100551: a3 = a2 >> 0x30\n100554: u8 [a0 + 0xe] = a3\n100557: a3 = a2 >> 0x28\n100560: u8 [a0 + 0xd] = a3\n100563: a3 = a2 >> 0x20\n100566: u8 [a0 + 0xc] = a3\n100569: a3 = a2 >> 0x18\n100572: u8 [a0 + 0xb] = a3\n100575: a3 = a2 >> 0x10\n100578: u8 [a0 + 0xa] = a3\n100581: a2 = a2 >> 0x8\n100584: u8 [a0 + 0x9] = a2\n100587: u8 [a0] = a1\n100589: a2 = a1 >> 0x38\n100592: u8 [a0 + 0x7] = a2\n100595: a2 = a1 >> 0x30\n100598: u8 [a0 + 0x6] = a2\n100601: a2 = a1 >> 0x28\n100604: u8 [a0 + 0x5] = a2\n100607: a2 = a1 >> 0x20\n100610: u8 [a0 + 0x4] = a2\n100613: a2 = a1 >> 0x18\n100616: u8 [a0 + 0x3] = a2\n100619: a2 = a1 >> 0x10\n100622: u8 [a0 + 0x2] = a2\n100625: a1 = a1 >> 0x8\n100628: u8 [a0 + 0x1] = a1\n100631: a2 = u64 [sp + 0x80]\n100635: a2 = a2 + 0x1\n100638: a0 = a2 <u 0x1\n100641: a1 = u64 [sp + 0x88]\n100645: a1 = a1 + a0\n100648: u64 [sp + 0x88] = a1\n100652: u64 [sp + 0x80] = a2\n100656: a0 = a2 | a1\n100659: a4 = a0 <u 0x1\n100662: a0 = u64 [sp + 0x48]\n100665: t0 = a0 + a4\n100668: a0 = t0 <u a0\n100671: a1 = u64 [sp + 0x90]\n100675: a1 = a1 + a0\n100678: u64 [sp + 0x90] = a1\n100682: a0 = u64 [sp + 0x98]\n100686: t1 = a0 + 0x20\n100689: a2 = t1 <u a0\n100692: s1 = a0\n100694: a4 = u64 [sp + 0x78]\n100697: t2 = a4 + a2\n100700: a3 = t2 <u a4\n100703: a3 = a2 if a2 == 0\n100706: a0 = u64 [sp + 0x38]\n100709: s1 = s1 ^ a0\n100712: a2 = u64 [sp + 0x68]\n100715: a5 = u64 [sp + 0x28]\n100718: a5 = a5 ^ a2\n100721: a5 = a5 | s1\n100724: a0 = u64 [sp + 0x30]\n100727: a0 = a0 ^ a4\n100730: a1 = u64 [sp + 0x70]\n100733: s1 = u64 [sp + 0x20]\n100736: s1 = s1 ^ a1\n100739: s1 = s1 | a0\n100742: ra = a2 + a3\n100745: a5 = a5 | s1\n100748: a3 = ra <u a2\n100751: a3 = a3 + a1\n100754: jump @1191 if a5 != 0\n      : @1195 (gas: 1)\n100758: jump @1197\n      : @1196 (gas: 2)\n100760: t1 = u64 [sp + 0x50]\n100763: fallthrough\n      : @1197 (gas: 11)\n100764: a4 = u64 [sp + 0x18]\n100767: u64 [a4] = t1\n100769: u64 [a4 + 0x8] = t2\n100772: u64 [a4 + 0x10] = ra\n100775: u64 [a4 + 0x18] = a3\n100778: sp = s0 + 0xffffffffffffff00\n100782: ra = u64 [sp + 0xf8]\n100786: s0 = u64 [sp + 0xf0]\n100790: s1 = u64 [sp + 0xe8]\n100794: sp = sp + 0x100\n100798: ret\n      : @1198 (gas: 1)\n100800: trap\n      : @1199 (gas: 18)\n100801: sp = sp + 0xffffffffffffff00\n100805: u64 [sp + 0xf8] = ra\n100809: u64 [sp + 0xf0] = s0\n100813: u64 [sp + 0xe8] = s1\n100817: s0 = sp + 0x100\n100821: sp = sp & 0xfffffffffffffff0\n100824: a2 = u64 [a1]\n100826: u64 [sp + 0x20] = a2\n100829: a2 = u64 [a1 + 0x8]\n100832: u64 [sp + 0x10] = a2\n100835: a2 = u64 [a1 + 0x10]\n100838: u64 [sp + 0x8] = a2\n100841: a1 = u64 [a1 + 0x18]\n100844: u64 [sp] = a1\n100846: u64 [sp + 0x18] = a0\n100849: a0 = 0x40\n100852: a1 = 0x20\n100855: ra = 1098, jump @0\n      : @1200 [@dyn 549] (gas: 149)\n100862: a1 = u8 [a0 + 0x1]\n100865: a2 = u8 [a0]\n100867: a3 = u8 [a0 + 0x2]\n100870: a4 = u8 [a0 + 0x3]\n100873: a1 = a1 << 0x8\n100876: a1 = a1 | a2\n100879: a3 = a3 << 0x10\n100882: a4 = a4 << 0x18\n100885: a3 = a3 | a4\n100888: a1 = a1 | a3\n100891: a2 = u8 [a0 + 0x5]\n100894: a3 = u8 [a0 + 0x4]\n100897: a4 = u8 [a0 + 0x6]\n100900: a5 = u8 [a0 + 0x7]\n100903: a2 = a2 << 0x8\n100906: a2 = a2 | a3\n100909: a4 = a4 << 0x10\n100912: a5 = a5 << 0x18\n100915: a4 = a4 | a5\n100918: a2 = a2 | a4\n100921: a2 = a2 << 0x20\n100924: t0 = a2 | a1\n100927: a2 = u8 [a0 + 0x9]\n100930: a3 = u8 [a0 + 0x8]\n100933: a4 = u8 [a0 + 0xa]\n100936: a5 = u8 [a0 + 0xb]\n100939: a2 = a2 << 0x8\n100942: a2 = a2 | a3\n100945: a4 = a4 << 0x10\n100948: a5 = a5 << 0x18\n100951: a4 = a4 | a5\n100954: a2 = a2 | a4\n100957: a3 = u8 [a0 + 0xd]\n100960: a4 = u8 [a0 + 0xc]\n100963: a5 = u8 [a0 + 0xe]\n100966: s1 = u8 [a0 + 0xf]\n100969: a3 = a3 << 0x8\n100972: a3 = a3 | a4\n100975: a5 = a5 << 0x10\n100978: s1 = s1 << 0x18\n100981: a5 = a5 | s1\n100984: a3 = a3 | a5\n100987: a3 = a3 << 0x20\n100990: a2 = a2 | a3\n100993: a3 = u8 [a0 + 0x11]\n100996: a4 = u8 [a0 + 0x10]\n100999: a5 = u8 [a0 + 0x12]\n101002: s1 = u8 [a0 + 0x13]\n101005: a3 = a3 << 0x8\n101008: a3 = a3 | a4\n101011: a5 = a5 << 0x10\n101014: s1 = s1 << 0x18\n101017: a5 = a5 | s1\n101020: a3 = a3 | a5\n101023: a4 = u8 [a0 + 0x15]\n101026: a5 = u8 [a0 + 0x14]\n101029: s1 = u8 [a0 + 0x16]\n101032: a1 = u8 [a0 + 0x17]\n101035: a4 = a4 << 0x8\n101038: a4 = a4 | a5\n101041: s1 = s1 << 0x10\n101044: a1 = a1 << 0x18\n101047: a1 = a1 | s1\n101050: a1 = a1 | a4\n101053: a1 = a1 << 0x20\n101056: a3 = a3 | a1\n101059: a1 = u8 [a0 + 0x19]\n101062: a4 = u8 [a0 + 0x18]\n101065: a5 = u8 [a0 + 0x1a]\n101068: s1 = u8 [a0 + 0x1b]\n101071: a1 = a1 << 0x8\n101074: a1 = a1 | a4\n101077: a5 = a5 << 0x10\n101080: s1 = s1 << 0x18\n101083: a5 = a5 | s1\n101086: a1 = a1 | a5\n101089: a4 = u8 [a0 + 0x1d]\n101092: a5 = u8 [a0 + 0x1c]\n101095: s1 = u8 [a0 + 0x1e]\n101098: a0 = u8 [a0 + 0x1f]\n101101: a4 = a4 << 0x8\n101104: a4 = a4 | a5\n101107: s1 = s1 << 0x10\n101110: a0 = a0 << 0x18\n101113: a0 = a0 | s1\n101116: a0 = a0 | a4\n101119: a0 = a0 << 0x20\n101122: a0 = a0 | a1\n101125: a4 = reverse a0\n101127: u64 [sp + 0x38] = a4\n101130: s1 = reverse a3\n101132: a2 = reverse a2\n101134: u64 [sp + 0x30] = a2\n101137: a1 = reverse t0\n101139: u64 [sp + 0x28] = a1\n101142: a0 = u64 [sp]\n101144: u64 [sp + 0xb8] = a0\n101148: a0 = u64 [sp + 0x8]\n101151: u64 [sp + 0xb0] = a0\n101155: a0 = u64 [sp + 0x10]\n101158: u64 [sp + 0xa8] = a0\n101162: a0 = u64 [sp + 0x20]\n101165: u64 [sp + 0xa0] = a0\n101169: u64 [sp + 0x98] = a1\n101173: u64 [sp + 0x90] = a2\n101177: u64 [sp + 0x88] = s1\n101181: a0 = sp + 0xc0\n101185: a1 = sp + 0xa0\n101189: a2 = sp + 0x80\n101193: u64 [sp + 0x80] = a4\n101197: ra = 0x44c\n101201: sp = sp + 0xffffffffffffff00\n101205: u64 [sp + 0xf8] = ra\n101209: u64 [sp + 0xf0] = s0\n101213: u64 [sp + 0xe8] = s1\n101217: s0 = sp + 0x100\n101221: sp = sp & 0xffffffffffffffe0\n101224: u64 [sp + 0x18] = a0\n101227: s1 = u64 [a2 + 0x10]\n101230: a0 = u64 [a2]\n101232: u64 [sp + 0x98] = a0\n101236: a0 = u64 [a2 + 0x18]\n101239: u64 [sp + 0x70] = a0\n101242: a0 = u64 [a2 + 0x8]\n101245: u64 [sp + 0x78] = a0\n101248: a4 = u64 [a1 + 0x18]\n101251: a3 = u64 [a1 + 0x10]\n101254: a2 = u64 [a1 + 0x8]\n101257: a0 = u64 [a1]\n101259: u64 [sp + 0x40] = a4\n101262: u64 [sp + 0xb8] = a4\n101266: u64 [sp + 0x48] = a3\n101269: u64 [sp + 0xb0] = a3\n101273: u64 [sp + 0x50] = a2\n101276: u64 [sp + 0xa8] = a2\n101280: u64 [sp + 0x58] = a0\n101283: u64 [sp + 0xa0] = a0\n101287: u64 [sp + 216] = 0\n101291: u64 [sp + 208] = 0\n101295: u64 [sp + 200] = 0\n101299: u64 [sp + 192] = 0\n101303: u32 [sp + 224] = 0x20\n101308: i32 a1 = sp + 0xa0\n101312: i32 a3 = sp + 0xc0\n101316: i32 a4 = sp + 0xe0\n101320: a2 = 0xffffffffffffffff\n101323: a0 = 0\n101325: ecalli 7 // 'get_storage'\n101327: jump @1184\n      : @1201 [@dyn 550] (gas: 58)\n101330: t2 = s1\n101332: a3 = u64 [sp + 0xc8]\n101336: a0 = u64 [sp + 0xd8]\n101340: u64 [sp + 0x10] = a0\n101343: a4 = u64 [sp + 0xc0]\n101347: t1 = u64 [sp + 0xd0]\n101351: a5 = a3 ^ s1\n101354: a1 = a3 <u s1\n101357: a2 = u64 [sp + 0x38]\n101360: s1 = a4 <u a2\n101363: a1 = s1 if a5 == 0\n101366: a3 = a3 - t2\n101369: a3 = a3 - s1\n101372: u64 [sp + 0x8] = a3\n101375: a4 = a4 - a2\n101378: a5 = a4 + 0x1f\n101381: a4 = a5 <u a4\n101384: a3 = a3 + a4\n101387: a5 = a5 & 0xffffffffffffffe0\n101390: a0 = a3 + t2\n101393: a2 = a2 + a5\n101396: u64 [sp + 0x20] = a2\n101399: a5 = a2 <u a5\n101402: t0 = a0 + a5\n101405: a0 = t0 ^ a3\n101408: a2 = t0 <u a3\n101411: a2 = a5 if a0 == 0\n101414: s1 = u64 [sp + 0x30]\n101417: a0 = t1 - s1\n101420: a5 = t1 <u s1\n101423: t1 = s1\n101425: ra = u64 [sp + 0x28]\n101428: s1 = u64 [sp + 0x10]\n101431: s1 = s1 - ra\n101434: s1 = s1 - a5\n101437: a5 = a0 <u a1\n101440: s1 = s1 - a5\n101443: a0 = a0 - a1\n101446: a1 = u64 [sp + 0x8]\n101449: a1 = a3 <u a1\n101452: a1 = a4 if a4 == 0\n101455: a1 = a1 + a0\n101458: a0 = a1 <u a0\n101461: a3 = a1 + t1\n101464: a5 = a3 + a2\n101467: a1 = a3 <u a1\n101470: a2 = a5 <u a3\n101473: s1 = s1 + ra\n101476: a0 = a0 + s1\n101479: a0 = a0 + a1\n101482: s1 = a0 + a2\n101485: a0 = s1 >u 0\n101487: a1 = a5 >u 0\n101489: a1 = a0 if s1 != 0\n101492: a0 = a5 | s1\n101495: a2 = t0 >u 0\n101497: a2 = a1 if a0 != 0\n101500: jump @1205 if a2 != 0\n      : @1202 (gas: 15)\n101504: a4 = t1\n101506: a0 = u64 [sp + 0x38]\n101509: a1 = u64 [sp + 0x20]\n101512: a0 = a1 <u a0\n101515: a1 = t0 ^ t2\n101518: a2 = t0 <u t2\n101521: a2 = a0 if a1 == 0\n101524: a0 = a5 <u t1\n101527: a1 = s1 ^ ra\n101530: a3 = s1 <u ra\n101533: a3 = a0 if a1 == 0\n101536: a0 = a5 ^ t1\n101539: a0 = a0 | a1\n101542: a3 = a2 if a0 == 0\n101545: jump @1205 if a3 != 0\n      : @1203 (gas: 6)\n101549: a0 = 0x40\n101552: a1 = 0x20\n101555: u64 [sp + 0x10] = t2\n101558: u64 [sp + 0x8] = t0\n101561: u64 [sp] = a5\n101563: ra = 1102, jump @0\n      : @1204 [@dyn 551] (gas: 82)\n101570: a1 = reverse s1\n101572: a2 = u64 [sp]\n101574: a2 = reverse a2\n101576: a3 = u64 [sp + 0x8]\n101579: a3 = reverse a3\n101581: a4 = u64 [sp + 0x20]\n101584: a4 = reverse a4\n101586: u8 [a0 + 0x18] = a4\n101589: a5 = a4 >> 0x38\n101592: u8 [a0 + 0x1f] = a5\n101595: a5 = a4 >> 0x30\n101598: u8 [a0 + 0x1e] = a5\n101601: a5 = a4 >> 0x28\n101604: u8 [a0 + 0x1d] = a5\n101607: a5 = a4 >> 0x20\n101610: u8 [a0 + 0x1c] = a5\n101613: a5 = a4 >> 0x18\n101616: u8 [a0 + 0x1b] = a5\n101619: a5 = a4 >> 0x10\n101622: u8 [a0 + 0x1a] = a5\n101625: a4 = a4 >> 0x8\n101628: u8 [a0 + 0x19] = a4\n101631: u8 [a0 + 0x10] = a3\n101634: a4 = a3 >> 0x38\n101637: u8 [a0 + 0x17] = a4\n101640: a4 = a3 >> 0x30\n101643: u8 [a0 + 0x16] = a4\n101646: a4 = a3 >> 0x28\n101649: u8 [a0 + 0x15] = a4\n101652: a4 = a3 >> 0x20\n101655: u8 [a0 + 0x14] = a4\n101658: a4 = a3 >> 0x18\n101661: u8 [a0 + 0x13] = a4\n101664: a4 = a3 >> 0x10\n101667: u8 [a0 + 0x12] = a4\n101670: a3 = a3 >> 0x8\n101673: u8 [a0 + 0x11] = a3\n101676: u8 [a0 + 0x8] = a2\n101679: a3 = a2 >> 0x38\n101682: u8 [a0 + 0xf] = a3\n101685: a3 = a2 >> 0x30\n101688: u8 [a0 + 0xe] = a3\n101691: a3 = a2 >> 0x28\n101694: u8 [a0 + 0xd] = a3\n101697: a3 = a2 >> 0x20\n101700: u8 [a0 + 0xc] = a3\n101703: a3 = a2 >> 0x18\n101706: u8 [a0 + 0xb] = a3\n101709: a3 = a2 >> 0x10\n101712: u8 [a0 + 0xa] = a3\n101715: a2 = a2 >> 0x8\n101718: u8 [a0 + 0x9] = a2\n101721: u8 [a0] = a1\n101723: a2 = a1 >> 0x38\n101726: u8 [a0 + 0x7] = a2\n101729: a2 = a1 >> 0x30\n101732: u8 [a0 + 0x6] = a2\n101735: a2 = a1 >> 0x28\n101738: u8 [a0 + 0x5] = a2\n101741: a2 = a1 >> 0x20\n101744: u8 [a0 + 0x4] = a2\n101747: a2 = a1 >> 0x18\n101750: u8 [a0 + 0x3] = a2\n101753: a2 = a1 >> 0x10\n101756: u8 [a0 + 0x2] = a2\n101759: a1 = a1 >> 0x8\n101762: u8 [a0 + 0x1] = a1\n101765: a0 = u64 [sp + 0x18]\n101768: a1 = u64 [sp + 0x38]\n101771: u64 [a0] = a1\n101773: a1 = u64 [sp + 0x28]\n101776: u64 [a0 + 0x18] = a1\n101779: a1 = u64 [sp + 0x10]\n101782: u64 [a0 + 0x8] = a1\n101785: a1 = u64 [sp + 0x30]\n101788: u64 [a0 + 0x10] = a1\n101791: sp = s0 + 0xffffffffffffff00\n101795: ra = u64 [sp + 0xf8]\n101799: s0 = u64 [sp + 0xf0]\n101803: s1 = u64 [sp + 0xe8]\n101807: sp = sp + 0x100\n101811: ret\n      : @1205 (gas: 8)\n101813: u64 [sp + 112] = 0\n101816: u64 [sp + 104] = 0\n101819: u64 [sp + 96] = 0\n101822: a0 = 0x4e487b7100000000\n101832: a1 = sp + 0x60\n101835: u64 [sp + 0x78] = a0\n101838: a0 = 0\n101840: ra = 1104, jump @23\n      : @1206 [@dyn 552] (gas: 7)\n101847: u64 [sp + 88] = 0\n101850: u64 [sp + 80] = 0\n101853: u64 [sp + 64] = 0x41\n101857: a0 = 0x4\n101860: a1 = sp + 0x40\n101863: u64 [sp + 72] = 0\n101866: ra = 1106, jump @23\n      : @1207 [@dyn 553] (gas: 3)\n101873: a1 = 0x24\n101876: a0 = 0\n101878: ra = 1108, jump @0\n      : @1208 [@dyn 554] (gas: 6)\n101885: i32 a1 = a0 + 0\n101887: a0 = 0x1\n101890: a2 = 0x24\n101893: ra = 0x456\n101897: ecalli 12 // 'seal_return'\n101899: fallthrough\n      : @1209 [@dyn 555] (gas: 18)\n101900: sp = sp + 0xffffffffffffffa0\n101903: u64 [sp + 0x58] = ra\n101906: u64 [sp + 0x50] = s0\n101909: u64 [sp + 0x48] = s1\n101912: s0 = sp + 0x60\n101915: sp = sp & 0xfffffffffffffff0\n101918: a2 = u64 [a1]\n101920: a3 = u64 [a1 + 0x8]\n101923: a4 = u64 [a1 + 0x10]\n101926: a1 = u64 [a1 + 0x18]\n101929: s1 = a0\n101931: u64 [sp + 0x18] = a1\n101934: u64 [sp + 0x10] = a4\n101937: u64 [sp + 0x8] = a3\n101940: a0 = sp + 0x20\n101943: a1 = sp\n101945: u64 [sp] = a2\n101947: ra = 1112, jump @1199\n      : @1210 [@dyn 556] (gas: 14)\n101953: a0 = u64 [sp + 0x30]\n101956: a1 = u64 [sp + 0x38]\n101959: a2 = u64 [sp + 0x20]\n101962: a3 = u64 [sp + 0x28]\n101965: u64 [s1 + 0x10] = a0\n101968: u64 [s1 + 0x18] = a1\n101971: u64 [s1] = a2\n101973: u64 [s1 + 0x8] = a3\n101976: sp = s0 + 0xffffffffffffffa0\n101979: ra = u64 [sp + 0x58]\n101982: s0 = u64 [sp + 0x50]\n101985: s1 = u64 [sp + 0x48]\n101988: sp = sp + 0x60\n101991: ret\n      : @1211 (gas: 34)\n101993: sp = sp + 0xfffffffffffffee0\n101997: u64 [sp + 0x118] = ra\n102001: u64 [sp + 0x110] = s0\n102005: u64 [sp + 0x108] = s1\n102009: s0 = sp + 0x120\n102013: sp = sp & 0xffffffffffffffe0\n102016: a1 = u64 [a0]\n102018: u64 [sp + 0x10] = a1\n102021: a1 = u64 [a0 + 0x8]\n102024: u64 [sp + 0x38] = a1\n102027: a1 = u64 [a0 + 0x10]\n102030: u64 [sp + 0x30] = a1\n102033: s1 = u64 [a0 + 0x18]\n102036: i32 a0 = sp + 0xa0\n102040: ecalli 5 // 'caller'\n102042: a0 = u64 [sp + 0xa8]\n102046: a1 = u64 [sp + 0xa0]\n102050: a2 = i32 [sp + 0xb0]\n102054: a0 = reverse a0\n102056: a3 = a0 >> 0x20\n102059: a1 = reverse a1\n102061: a4 = a1 << 0x20\n102064: a3 = a3 | a4\n102067: u64 [sp + 0x28] = a3\n102070: a0 = a0 << 0x20\n102073: a2 = reverse a2\n102075: a2 = a2 >> 0x20\n102078: a0 = a0 | a2\n102081: u64 [sp + 0x20] = a0\n102084: a1 = a1 >> 0x20\n102087: u64 [sp + 0x18] = a1\n102090: a1 = 0x20\n102093: a0 = 0\n102095: ra = 1114, jump @0\n      : @1212 [@dyn 557] (gas: 71)\n102102: u64 [sp + 0x8] = s1\n102105: a1 = reverse s1\n102107: s1 = u64 [sp + 0x10]\n102110: a2 = u64 [sp + 0x30]\n102113: a2 = reverse a2\n102115: a3 = u64 [sp + 0x38]\n102118: a3 = reverse a3\n102120: a4 = reverse s1\n102122: a5 = a4 >> 0x38\n102125: u8 [a0 + 0x1f] = a5\n102128: a5 = a4 >> 0x30\n102131: u8 [a0 + 0x1e] = a5\n102134: a5 = a4 >> 0x28\n102137: u8 [a0 + 0x1d] = a5\n102140: a5 = a4 >> 0x20\n102143: u8 [a0 + 0x1c] = a5\n102146: a5 = a4 >> 0x18\n102149: u8 [a0 + 0x1b] = a5\n102152: a5 = a4 >> 0x10\n102155: u8 [a0 + 0x1a] = a5\n102158: a5 = a4 >> 0x8\n102161: u8 [a0 + 0x19] = a5\n102164: u8 [a0 + 0x18] = a4\n102167: a4 = a3 >> 0x38\n102170: u8 [a0 + 0x17] = a4\n102173: a4 = a3 >> 0x30\n102176: u8 [a0 + 0x16] = a4\n102179: a4 = a3 >> 0x28\n102182: u8 [a0 + 0x15] = a4\n102185: a4 = a3 >> 0x20\n102188: u8 [a0 + 0x14] = a4\n102191: a4 = a3 >> 0x18\n102194: u8 [a0 + 0x13] = a4\n102197: a4 = a3 >> 0x10\n102200: u8 [a0 + 0x12] = a4\n102203: a4 = a3 >> 0x8\n102206: u8 [a0 + 0x11] = a4\n102209: u8 [a0 + 0x10] = a3\n102212: a3 = a2 >> 0x38\n102215: u8 [a0 + 0xf] = a3\n102218: a3 = a2 >> 0x30\n102221: u8 [a0 + 0xe] = a3\n102224: a3 = a2 >> 0x28\n102227: u8 [a0 + 0xd] = a3\n102230: a3 = a2 >> 0x20\n102233: u8 [a0 + 0xc] = a3\n102236: a3 = a2 >> 0x18\n102239: u8 [a0 + 0xb] = a3\n102242: a3 = a2 >> 0x10\n102245: u8 [a0 + 0xa] = a3\n102248: a3 = a2 >> 0x8\n102251: u8 [a0 + 0x9] = a3\n102254: u8 [a0 + 0x8] = a2\n102257: a2 = a1 >> 0x38\n102260: u8 [a0 + 0x7] = a2\n102263: a2 = a1 >> 0x30\n102266: u8 [a0 + 0x6] = a2\n102269: a2 = a1 >> 0x28\n102272: u8 [a0 + 0x5] = a2\n102275: a2 = a1 >> 0x20\n102278: u8 [a0 + 0x4] = a2\n102281: a2 = a1 >> 0x18\n102284: u8 [a0 + 0x3] = a2\n102287: a2 = a1 >> 0x10\n102290: u8 [a0 + 0x2] = a2\n102293: a2 = a1 >> 0x8\n102296: u8 [a0 + 0x1] = a2\n102299: u8 [a0] = a1\n102301: a0 = 0x20\n102304: a1 = 0x20\n102307: ra = 1116, jump @0\n      : @1213 [@dyn 558] (gas: 35)\n102314: u8 [a0 + 31] = 0\n102317: u8 [a0 + 30] = 0\n102320: u8 [a0 + 29] = 0\n102323: u8 [a0 + 28] = 0\n102326: u8 [a0 + 27] = 0\n102329: u8 [a0 + 26] = 0\n102332: u8 [a0 + 25] = 0\n102335: u8 [a0 + 24] = 0\n102338: u8 [a0 + 23] = 0\n102341: u8 [a0 + 22] = 0\n102344: u8 [a0 + 21] = 0\n102347: u8 [a0 + 20] = 0\n102350: u8 [a0 + 19] = 0\n102353: u8 [a0 + 18] = 0\n102356: u8 [a0 + 17] = 0\n102359: u8 [a0 + 16] = 0\n102362: u8 [a0 + 15] = 0\n102365: u8 [a0 + 14] = 0\n102368: u8 [a0 + 13] = 0\n102371: u8 [a0 + 12] = 0\n102374: u8 [a0 + 11] = 0\n102377: u8 [a0 + 10] = 0\n102380: u8 [a0 + 9] = 0\n102383: u8 [a0 + 8] = 0\n102386: u8 [a0 + 7] = 0\n102389: u8 [a0 + 6] = 0\n102392: u8 [a0 + 5] = 0\n102395: u8 [a0 + 4] = 0\n102398: u8 [a0 + 3] = 0\n102401: u8 [a0 + 2] = 0\n102404: u8 [a0 + 1] = 0\n102407: u8 [a0 + 0] = 0\n102409: a1 = 0x40\n102412: a0 = 0\n102414: ra = 1118, jump @0\n      : @1214 [@dyn 559] (gas: 28)\n102421: i32 a0 = a0 + 0\n102423: i32 a2 = sp + 0xe0\n102427: a1 = 0x40\n102430: ecalli 8 // 'hash_keccak_256'\n102432: a0 = u64 [sp + 0xf8]\n102436: a1 = u64 [sp + 0xf0]\n102440: a2 = u64 [sp + 0xe8]\n102444: a3 = u64 [sp + 0xe0]\n102448: a0 = reverse a0\n102450: a1 = reverse a1\n102452: a2 = reverse a2\n102454: a3 = reverse a3\n102456: u64 [sp + 0xd8] = a3\n102460: u64 [sp + 0xd0] = a2\n102464: u64 [sp + 0xc8] = a1\n102468: u64 [sp + 0xc0] = a0\n102472: u64 [sp + 248] = 0\n102476: u64 [sp + 240] = 0\n102480: u64 [sp + 232] = 0\n102484: u64 [sp + 224] = 0\n102488: u32 [sp + 256] = 0x20\n102493: i32 a1 = sp + 0xc0\n102497: i32 a3 = sp + 0xe0\n102501: i32 a4 = sp + 0x100\n102505: a2 = 0xffffffffffffffff\n102508: a0 = 0\n102510: ecalli 7 // 'get_storage'\n102512: fallthrough\n      : @1215 (gas: 12)\n102513: a0 = u32 [sp + 0xf0]\n102517: a1 = u64 [sp + 0xe0]\n102521: a2 = u64 [sp + 0xe8]\n102525: a3 = u64 [sp + 0x18]\n102528: a0 = a0 ^ a3\n102531: a3 = u64 [sp + 0x20]\n102534: a1 = a1 ^ a3\n102537: a0 = a0 | a1\n102540: a1 = u64 [sp + 0x28]\n102543: a1 = a1 ^ a2\n102546: a0 = a0 | a1\n102549: jump @1218 if a0 != 0\n      : @1216 (gas: 9)\n102552: u64 [sp + 0x40] = s1\n102555: a0 = u64 [sp + 0x38]\n102558: u64 [sp + 0x48] = a0\n102561: a0 = u64 [sp + 0x30]\n102564: u64 [sp + 0x50] = a0\n102567: a0 = sp + 0x40\n102570: a1 = u64 [sp + 0x8]\n102573: u64 [sp + 0x58] = a1\n102576: ra = 1120, jump @1232\n      : @1217 [@dyn 560] (gas: 6)\n102582: sp = s0 + 0xfffffffffffffee0\n102586: ra = u64 [sp + 0x118]\n102590: s0 = u64 [sp + 0x110]\n102594: s1 = u64 [sp + 0x108]\n102598: sp = sp + 0x120\n102602: ret\n      : @1218 (gas: 3)\n102604: a0 = 0x40\n102607: a1 = 0x20\n102610: ra = 1122, jump @0\n      : @1219 [@dyn 561] (gas: 103)\n102617: a1 = u8 [a0 + 0x11]\n102620: a2 = u8 [a0 + 0x10]\n102623: a3 = u8 [a0 + 0x12]\n102626: a4 = u8 [a0 + 0x13]\n102629: a1 = a1 << 0x8\n102632: a1 = a1 | a2\n102635: a3 = a3 << 0x10\n102638: a4 = a4 << 0x18\n102641: a3 = a3 | a4\n102644: a1 = a1 | a3\n102647: a2 = u8 [a0 + 0x15]\n102650: a3 = u8 [a0 + 0x14]\n102653: a4 = u8 [a0 + 0x16]\n102656: a5 = u8 [a0 + 0x17]\n102659: a2 = a2 << 0x8\n102662: a2 = a2 | a3\n102665: a4 = a4 << 0x10\n102668: a5 = a5 << 0x18\n102671: a4 = a4 | a5\n102674: a2 = a2 | a4\n102677: a2 = a2 << 0x20\n102680: t0 = a2 | a1\n102683: a2 = u8 [a0 + 0x1]\n102686: a3 = u8 [a0]\n102688: a4 = u8 [a0 + 0x2]\n102691: a5 = u8 [a0 + 0x3]\n102694: a2 = a2 << 0x8\n102697: a2 = a2 | a3\n102700: a4 = a4 << 0x10\n102703: a5 = a5 << 0x18\n102706: a4 = a4 | a5\n102709: a2 = a2 | a4\n102712: a3 = u8 [a0 + 0x5]\n102715: a4 = u8 [a0 + 0x4]\n102718: a5 = u8 [a0 + 0x6]\n102721: s1 = u8 [a0 + 0x7]\n102724: a3 = a3 << 0x8\n102727: a3 = a3 | a4\n102730: a5 = a5 << 0x10\n102733: s1 = s1 << 0x18\n102736: a5 = a5 | s1\n102739: a3 = a3 | a5\n102742: a3 = a3 << 0x20\n102745: a2 = a2 | a3\n102748: a3 = u8 [a0 + 0x19]\n102751: a4 = u8 [a0 + 0x18]\n102754: a5 = u8 [a0 + 0x1a]\n102757: s1 = u8 [a0 + 0x1b]\n102760: a3 = a3 << 0x8\n102763: a3 = a3 | a4\n102766: a5 = a5 << 0x10\n102769: s1 = s1 << 0x18\n102772: a5 = a5 | s1\n102775: a3 = a3 | a5\n102778: a4 = u8 [a0 + 0x1d]\n102781: a5 = u8 [a0 + 0x1c]\n102784: s1 = u8 [a0 + 0x1e]\n102787: a1 = u8 [a0 + 0x1f]\n102790: a4 = a4 << 0x8\n102793: a4 = a4 | a5\n102796: s1 = s1 << 0x10\n102799: a1 = a1 << 0x18\n102802: a1 = a1 | s1\n102805: a1 = a1 | a4\n102808: a1 = a1 << 0x20\n102811: a3 = a3 | a1\n102814: a1 = u8 [a0 + 0x9]\n102817: a4 = u8 [a0 + 0x8]\n102820: a5 = u8 [a0 + 0xa]\n102823: s1 = u8 [a0 + 0xb]\n102826: a1 = a1 << 0x8\n102829: a1 = a1 | a4\n102832: a5 = a5 << 0x10\n102835: s1 = s1 << 0x18\n102838: a5 = a5 | s1\n102841: a1 = a1 | a5\n102844: a4 = u8 [a0 + 0xd]\n102847: a5 = u8 [a0 + 0xc]\n102850: s1 = u8 [a0 + 0xe]\n102853: a0 = u8 [a0 + 0xf]\n102856: a4 = a4 << 0x8\n102859: a4 = a4 | a5\n102862: s1 = s1 << 0x10\n102865: a0 = a0 << 0x18\n102868: a0 = a0 | s1\n102871: a0 = a0 | a4\n102874: a0 = a0 << 0x20\n102877: a0 = a0 | a1\n102880: s1 = reverse a0\n102882: a1 = reverse a3\n102884: a2 = reverse a2\n102886: a0 = reverse t0\n102888: u64 [sp + 0x38] = a0\n102891: u64 [sp + 0x30] = a2\n102894: a0 = a0 | a2\n102897: a2 = a1\n102899: a1 = a1 | s1\n102902: a1 = a1 | a0\n102905: a1 = a1 >> 0x20\n102908: a0 = a0 | s1\n102911: a0 = a0 << 0x20\n102914: a0 = a0 | a1\n102917: jump @1223 if a0 != 0\n      : @1220 (gas: 5)\n102921: u64 [sp + 0x28] = a2\n102924: i32 a0 = a2 + 0\n102926: a1 = 0x20\n102929: u64 [sp + 0x20] = a0\n102932: ra = 1124, jump @0\n      : @1221 [@dyn 562] (gas: 50)\n102939: u8 [a0 + 31] = 0\n102942: u8 [a0 + 30] = 0\n102945: u8 [a0 + 29] = 0\n102948: u8 [a0 + 28] = 0\n102951: u8 [a0 + 27] = 0\n102954: u8 [a0 + 26] = 0\n102957: u8 [a0 + 25] = 0\n102960: u8 [a0 + 24] = 0\n102963: u8 [a0 + 23] = 0\n102966: u8 [a0 + 22] = 0\n102969: u8 [a0 + 21] = 0\n102972: u8 [a0 + 20] = 0\n102975: u8 [a0 + 19] = 0\n102978: u8 [a0 + 18] = 0\n102981: u8 [a0 + 17] = 0\n102984: u8 [a0 + 16] = 0\n102987: u8 [a0 + 15] = 0\n102990: u8 [a0 + 14] = 0\n102993: u8 [a0 + 13] = 0\n102996: u8 [a0 + 12] = 0\n102999: u8 [a0 + 11] = 0\n103002: u8 [a0 + 10] = 0\n103005: u8 [a0 + 9] = 0\n103008: u8 [a0 + 8] = 0\n103011: u8 [a0 + 7] = 0\n103014: u8 [a0 + 6] = 0\n103017: u8 [a0 + 5] = 0\n103020: u8 [a0 + 4] = 0\n103023: u8 [a0 + 3] = 0xa0\n103028: u8 [a0 + 2] = 0x79\n103032: u8 [a0 + 1] = 0xc3\n103037: u8 [a0 + 0] = 0x8\n103040: a1 = u64 [sp + 0x28]\n103043: a0 = a1 + 0x4\n103046: a1 = a0 <u a1\n103049: a3 = u64 [sp + 0x38]\n103052: a2 = a3 + a1\n103055: a3 = a2 <u a3\n103058: a3 = a1 if a1 == 0\n103061: a3 = a3 + s1\n103064: a1 = a3 <u s1\n103067: a4 = u64 [sp + 0x30]\n103070: a4 = a4 + a1\n103073: u64 [sp + 0x68] = a2\n103076: u64 [sp + 0x60] = a0\n103079: u64 [sp + 0x70] = a3\n103082: a0 = sp + 0x80\n103086: a1 = sp + 0x60\n103089: u64 [sp + 0x78] = a4\n103092: ra = 1126, jump @530\n      : @1222 [@dyn 563] (gas: 30)\n103099: a0 = u64 [sp + 0x88]\n103103: t0 = u64 [sp + 0x98]\n103107: t1 = u64 [sp + 0x80]\n103111: a3 = u64 [sp + 0x90]\n103115: a1 = u64 [sp + 0x38]\n103118: a4 = a0 ^ a1\n103121: a5 = a0 <u a1\n103124: t2 = a1\n103126: a2 = u64 [sp + 0x28]\n103129: a1 = t1 <u a2\n103132: a5 = a1 if a4 == 0\n103135: a4 = a3 - s1\n103138: a3 = a3 <u s1\n103141: s1 = u64 [sp + 0x30]\n103144: s1 = t0 - s1\n103147: s1 = s1 - a3\n103150: a3 = a4 <u a5\n103153: s1 = s1 - a3\n103156: a4 = a4 - a5\n103159: a0 = a0 - t2\n103162: a1 = a0 - a1\n103165: a0 = t1 - a2\n103168: a1 = a1 | s1\n103171: a2 = a0 | a4\n103174: a2 = a2 | a1\n103177: a1 = a1 | a4\n103180: a2 = a2 >> 0x20\n103183: a1 = a1 << 0x20\n103186: a1 = a1 | a2\n103189: jump @1224 if a1 == 0\n      : @1223 (gas: 1)\n103192: trap\n      : @1224 (gas: 4)\n103193: i32 s1 = a0 + 0\n103195: a0 = u64 [sp + 0x20]\n103198: a1 = s1\n103200: ra = 1128, jump @0\n      : @1225 [@dyn 564] (gas: 6)\n103207: i32 a1 = a0 + 0\n103209: a0 = 0x1\n103212: a2 = s1\n103214: ra = 0x46a\n103218: ecalli 12 // 'seal_return'\n103220: fallthrough\n      : @1226 [@dyn 565] (gas: 45)\n103221: sp = sp + 0xffffffffffffff90\n103224: u64 [sp + 0x68] = ra\n103227: u64 [sp + 0x60] = s0\n103230: u64 [sp + 0x58] = s1\n103233: s0 = sp + 0x70\n103236: sp = sp & 0xfffffffffffffff0\n103239: a3 = u64 [a1 + 0x18]\n103242: u64 [sp + 0x8] = a3\n103245: a4 = u64 [a2 + 0x18]\n103248: t2 = u64 [a1]\n103250: u64 [sp] = t2\n103252: a3 = u64 [a1 + 0x8]\n103255: s1 = u64 [a2 + 0x8]\n103258: a5 = u64 [a2]\n103260: t1 = u64 [a1 + 0x10]\n103263: t0 = u64 [a2 + 0x10]\n103266: a2 = s1 + a3\n103269: t2 = t2 + a5\n103272: a5 = t2 <u a5\n103275: a2 = a2 + a5\n103278: ra = a2 ^ s1\n103281: s1 = a2 <u s1\n103284: s1 = a5 if ra == 0\n103287: a1 = t0 + t1\n103290: a5 = u64 [sp + 0x8]\n103293: a5 = a5 + a4\n103296: a4 = a1 <u t0\n103299: a4 = a4 + a5\n103302: a5 = a1 + s1\n103305: a1 = a5 <u a1\n103308: ra = a4 + a1\n103311: a4 = a2 ^ a3\n103314: a3 = a2 <u a3\n103317: a1 = u64 [sp]\n103319: s1 = t2 <u a1\n103322: s1 = a3 if a4 != 0\n103325: t0 = a5 <u t1\n103328: a1 = u64 [sp + 0x8]\n103331: a4 = ra ^ a1\n103334: a3 = ra <u a1\n103337: a3 = t0 if a4 == 0\n103340: a1 = a5 ^ t1\n103343: a1 = a1 | a4\n103346: s1 = a3 if a1 != 0\n103349: jump @1228 if s1 != 0\n      : @1227 (gas: 10)\n103352: u64 [a0] = t2\n103354: u64 [a0 + 0x8] = a2\n103357: u64 [a0 + 0x10] = a5\n103360: u64 [a0 + 0x18] = ra\n103363: sp = s0 + 0xffffffffffffff90\n103366: ra = u64 [sp + 0x68]\n103369: s0 = u64 [sp + 0x60]\n103372: s1 = u64 [sp + 0x58]\n103375: sp = sp + 0x70\n103378: ret\n      : @1228 (gas: 8)\n103380: u64 [sp + 64] = 0\n103383: u64 [sp + 56] = 0\n103386: u64 [sp + 48] = 0\n103389: a0 = 0x4e487b7100000000\n103399: a1 = sp + 0x30\n103402: u64 [sp + 0x48] = a0\n103405: a0 = 0\n103407: ra = 1132, jump @23\n      : @1229 [@dyn 566] (gas: 7)\n103414: u64 [sp + 40] = 0\n103417: u64 [sp + 32] = 0\n103420: u64 [sp + 16] = 0x11\n103424: a0 = 0x4\n103427: a1 = sp + 0x10\n103430: u64 [sp + 24] = 0\n103433: ra = 1134, jump @23\n      : @1230 [@dyn 567] (gas: 3)\n103440: a1 = 0x24\n103443: a0 = 0\n103445: ra = 1136, jump @0\n      : @1231 [@dyn 568] (gas: 6)\n103452: i32 a1 = a0 + 0\n103454: a0 = 0x1\n103457: a2 = 0x24\n103460: ra = 0x472\n103464: ecalli 12 // 'seal_return'\n103466: fallthrough\n      : @1232 [@dyn 569] (gas: 32)\n103467: sp = sp + 0xfffffffffffffdc0\n103471: u64 [sp + 0x238] = ra\n103475: u64 [sp + 0x230] = s0\n103479: u64 [sp + 0x228] = s1\n103483: s0 = sp + 0x240\n103487: sp = sp & 0xffffffffffffffe0\n103490: s1 = sp\n103492: a1 = u64 [a0]\n103494: u64 [s1 + 0x138] = a1\n103498: a1 = u64 [a0 + 0x8]\n103501: u64 [s1 + 0x130] = a1\n103505: a1 = u64 [a0 + 0x10]\n103508: u64 [s1 + 0x128] = a1\n103512: a0 = u64 [a0 + 0x18]\n103515: u64 [s1 + 0x120] = a0\n103519: u64 [s1 + 408] = 0\n103523: u64 [s1 + 400] = 0\n103527: u64 [s1 + 392] = 0\n103531: u64 [s1 + 384] = 0\n103535: i32 a0 = s1 + 0x180\n103539: ecalli 15 // 'value_transferred'\n103541: a0 = u64 [s1 + 0x198]\n103545: u64 [s1 + 0x18] = a0\n103548: a0 = u64 [s1 + 0x190]\n103552: u64 [s1 + 0x10] = a0\n103555: a0 = u64 [s1 + 0x180]\n103559: u64 [s1 + 0x8] = a0\n103562: a0 = u64 [s1 + 0x188]\n103566: u64 [s1] = a0\n103568: a1 = 0x20\n103571: a0 = 0\n103573: ra = 1140, jump @0\n      : @1233 [@dyn 570] (gas: 103)\n103580: a1 = u64 [s1 + 0x120]\n103584: a1 = reverse a1\n103586: a2 = u64 [s1 + 0x128]\n103590: a2 = reverse a2\n103592: a3 = u64 [s1 + 0x130]\n103596: a3 = reverse a3\n103598: a4 = u64 [s1 + 0x138]\n103602: a4 = reverse a4\n103604: a5 = a4 >> 0x38\n103607: u64 [s1 + 0xf8] = a5\n103611: u8 [a0 + 0x1f] = a5\n103614: a5 = a4 >> 0x30\n103617: u64 [s1 + 0xf0] = a5\n103621: u8 [a0 + 0x1e] = a5\n103624: a5 = a4 >> 0x28\n103627: u64 [s1 + 0xe8] = a5\n103631: u8 [a0 + 0x1d] = a5\n103634: a5 = a4 >> 0x20\n103637: u64 [s1 + 0xe0] = a5\n103641: u8 [a0 + 0x1c] = a5\n103644: a5 = a4 >> 0x18\n103647: u64 [s1 + 0xd8] = a5\n103651: u8 [a0 + 0x1b] = a5\n103654: a5 = a4 >> 0x10\n103657: u64 [s1 + 0xd0] = a5\n103661: u8 [a0 + 0x1a] = a5\n103664: a5 = a4 >> 0x8\n103667: u64 [s1 + 0xc8] = a5\n103671: u8 [a0 + 0x19] = a5\n103674: u64 [s1 + 0x100] = a4\n103678: u8 [a0 + 0x18] = a4\n103681: a4 = a3 >> 0x38\n103684: u64 [s1 + 0xc0] = a4\n103688: u8 [a0 + 0x17] = a4\n103691: a4 = a3 >> 0x30\n103694: u64 [s1 + 0xb8] = a4\n103698: u8 [a0 + 0x16] = a4\n103701: a4 = a3 >> 0x28\n103704: u64 [s1 + 0xb0] = a4\n103708: u8 [a0 + 0x15] = a4\n103711: a4 = a3 >> 0x20\n103714: u64 [s1 + 0xa8] = a4\n103718: u8 [a0 + 0x14] = a4\n103721: a4 = a3 >> 0x18\n103724: u64 [s1 + 0xa0] = a4\n103728: u8 [a0 + 0x13] = a4\n103731: a4 = a3 >> 0x10\n103734: u64 [s1 + 0x98] = a4\n103738: u8 [a0 + 0x12] = a4\n103741: a4 = a3 >> 0x8\n103744: u64 [s1 + 0x90] = a4\n103748: u8 [a0 + 0x11] = a4\n103751: u64 [s1 + 0x108] = a3\n103755: u8 [a0 + 0x10] = a3\n103758: a3 = a2 >> 0x38\n103761: u64 [s1 + 0x88] = a3\n103765: u8 [a0 + 0xf] = a3\n103768: a3 = a2 >> 0x30\n103771: u64 [s1 + 0x80] = a3\n103775: u8 [a0 + 0xe] = a3\n103778: a3 = a2 >> 0x28\n103781: u64 [s1 + 0x78] = a3\n103784: u8 [a0 + 0xd] = a3\n103787: a3 = a2 >> 0x20\n103790: u64 [s1 + 0x70] = a3\n103793: u8 [a0 + 0xc] = a3\n103796: a3 = a2 >> 0x18\n103799: u64 [s1 + 0x68] = a3\n103802: u8 [a0 + 0xb] = a3\n103805: a3 = a2 >> 0x10\n103808: u64 [s1 + 0x60] = a3\n103811: u8 [a0 + 0xa] = a3\n103814: a3 = a2 >> 0x8\n103817: u64 [s1 + 0x58] = a3\n103820: u8 [a0 + 0x9] = a3\n103823: u64 [s1 + 0x110] = a2\n103827: u8 [a0 + 0x8] = a2\n103830: a2 = a1 >> 0x38\n103833: u64 [s1 + 0x50] = a2\n103836: u8 [a0 + 0x7] = a2\n103839: a2 = a1 >> 0x30\n103842: u64 [s1 + 0x48] = a2\n103845: u8 [a0 + 0x6] = a2\n103848: a2 = a1 >> 0x28\n103851: u64 [s1 + 0x40] = a2\n103854: u8 [a0 + 0x5] = a2\n103857: a2 = a1 >> 0x20\n103860: u64 [s1 + 0x38] = a2\n103863: u8 [a0 + 0x4] = a2\n103866: a2 = a1 >> 0x18\n103869: u64 [s1 + 0x30] = a2\n103872: u8 [a0 + 0x3] = a2\n103875: a2 = a1 >> 0x10\n103878: u64 [s1 + 0x28] = a2\n103881: u8 [a0 + 0x2] = a2\n103884: a2 = a1 >> 0x8\n103887: u64 [s1 + 0x20] = a2\n103890: u8 [a0 + 0x1] = a2\n103893: u64 [s1 + 0x118] = a1\n103897: u8 [a0] = a1\n103899: a0 = 0x20\n103902: a1 = 0x20\n103905: ra = 1142, jump @0\n      : @1234 [@dyn 571] (gas: 35)\n103912: u8 [a0 + 31] = 0x2\n103916: u8 [a0 + 30] = 0\n103919: u8 [a0 + 29] = 0\n103922: u8 [a0 + 28] = 0\n103925: u8 [a0 + 27] = 0\n103928: u8 [a0 + 26] = 0\n103931: u8 [a0 + 25] = 0\n103934: u8 [a0 + 24] = 0\n103937: u8 [a0 + 23] = 0\n103940: u8 [a0 + 22] = 0\n103943: u8 [a0 + 21] = 0\n103946: u8 [a0 + 20] = 0\n103949: u8 [a0 + 19] = 0\n103952: u8 [a0 + 18] = 0\n103955: u8 [a0 + 17] = 0\n103958: u8 [a0 + 16] = 0\n103961: u8 [a0 + 15] = 0\n103964: u8 [a0 + 14] = 0\n103967: u8 [a0 + 13] = 0\n103970: u8 [a0 + 12] = 0\n103973: u8 [a0 + 11] = 0\n103976: u8 [a0 + 10] = 0\n103979: u8 [a0 + 9] = 0\n103982: u8 [a0 + 8] = 0\n103985: u8 [a0 + 7] = 0\n103988: u8 [a0 + 6] = 0\n103991: u8 [a0 + 5] = 0\n103994: u8 [a0 + 4] = 0\n103997: u8 [a0 + 3] = 0\n104000: u8 [a0 + 2] = 0\n104003: u8 [a0 + 1] = 0\n104006: u8 [a0 + 0] = 0\n104008: a1 = 0x40\n104011: a0 = 0\n104013: ra = 1144, jump @0\n      : @1235 [@dyn 572] (gas: 32)\n104020: i32 a0 = a0 + 0\n104022: i32 a2 = s1 + 0x1e0\n104026: a1 = 0x40\n104029: ecalli 8 // 'hash_keccak_256'\n104031: a0 = u64 [s1 + 0x1f8]\n104035: a1 = u64 [s1 + 0x1f0]\n104039: a2 = u64 [s1 + 0x1e8]\n104043: a3 = u64 [s1 + 0x1e0]\n104047: a0 = reverse a0\n104049: a1 = reverse a1\n104051: a2 = reverse a2\n104053: a3 = reverse a3\n104055: u64 [s1 + 0x120] = a3\n104059: u64 [s1 + 0x1b8] = a3\n104063: u64 [s1 + 0x128] = a2\n104067: u64 [s1 + 0x1b0] = a2\n104071: u64 [s1 + 0x130] = a1\n104075: u64 [s1 + 0x1a8] = a1\n104079: u64 [s1 + 0x138] = a0\n104083: u64 [s1 + 0x1a0] = a0\n104087: u64 [s1 + 504] = 0\n104091: u64 [s1 + 496] = 0\n104095: u64 [s1 + 488] = 0\n104099: u64 [s1 + 480] = 0\n104103: u32 [s1 + 448] = 0x20\n104108: i32 a1 = s1 + 0x1a0\n104112: i32 a3 = s1 + 0x1e0\n104116: i32 a4 = s1 + 0x1c0\n104120: a2 = 0xffffffffffffffff\n104123: a0 = 0\n104125: ecalli 7 // 'get_storage'\n104127: fallthrough\n      : @1236 (gas: 39)\n104128: a4 = u64 [s1 + 0x1e8]\n104132: a2 = u64 [s1 + 0x1e0]\n104136: t0 = u64 [s1 + 0x1f8]\n104140: t2 = u64 [s1 + 0x1f0]\n104144: a5 = u64 [s1]\n104146: a5 = a5 + a4\n104149: a1 = u64 [s1 + 0x8]\n104152: a1 = a1 + a2\n104155: u64 [s1 + 0x8] = a1\n104158: a3 = a1 <u a2\n104161: a5 = a5 + a3\n104164: t1 = a5 ^ a4\n104167: u64 [s1] = a5\n104169: a4 = a5 <u a4\n104172: a5 = u64 [s1 + 0x10]\n104175: a5 = a5 + t2\n104178: a1 = u64 [s1 + 0x18]\n104181: a1 = a1 + t0\n104184: a2 = a5 <u t2\n104187: a1 = a1 + a2\n104190: a2 = a3\n104192: a2 = a4 if t1 != 0\n104195: a0 = a5 + a2\n104198: a2 = a0 <u a5\n104201: a5 = a1 + a2\n104204: a1 = a3 ^ 0x1\n104207: a2 = a4 ^ 0x1\n104210: a1 = a2 if t1 != 0\n104213: a2 = a0 <u t2\n104216: a3 = a5 ^ t0\n104219: u64 [s1 + 0x10] = a5\n104222: a4 = a5 <u t0\n104225: a4 = a2 if a3 == 0\n104228: u64 [s1 + 0x18] = a0\n104231: a0 = a0 ^ t2\n104234: a0 = a0 | a3\n104237: a2 = a4 ^ 0x1\n104240: a1 = a2 if a0 != 0\n104243: jump @1248 if a1 == 0\n      : @1237 (gas: 63)\n104247: a0 = u64 [s1 + 0x128]\n104251: u64 [s1 + 0x1b0] = a0\n104255: a0 = u64 [s1 + 0x130]\n104259: u64 [s1 + 0x1a8] = a0\n104263: a0 = u64 [s1 + 0x138]\n104267: u64 [s1 + 0x1a0] = a0\n104271: a0 = u64 [s1 + 0x120]\n104275: u64 [s1 + 0x1b8] = a0\n104279: u64 [s1 + 504] = 0\n104283: u64 [s1 + 496] = 0\n104287: u64 [s1 + 488] = 0\n104291: u64 [s1 + 480] = 0\n104295: u32 [s1 + 448] = 0x20\n104300: i32 a1 = s1 + 0x1a0\n104304: i32 a3 = s1 + 0x1e0\n104308: i32 a4 = s1 + 0x1c0\n104312: a2 = 0xffffffffffffffff\n104315: a0 = 0\n104317: ecalli 7 // 'get_storage'\n104319: a0 = u64 [s1 + 0x120]\n104323: u64 [s1 + 0x1b8] = a0\n104327: a0 = u64 [s1 + 0x128]\n104331: u64 [s1 + 0x1b0] = a0\n104335: a0 = u64 [s1 + 0x130]\n104339: u64 [s1 + 0x1a8] = a0\n104343: a0 = u64 [s1 + 0x138]\n104347: u64 [s1 + 0x1a0] = a0\n104351: a0 = u64 [s1 + 0x10]\n104354: u64 [s1 + 0x1f8] = a0\n104358: a0 = u64 [s1 + 0x18]\n104361: u64 [s1 + 0x1f0] = a0\n104365: a0 = u64 [s1]\n104367: u64 [s1 + 0x1e8] = a0\n104371: a0 = u64 [s1 + 0x8]\n104374: u64 [s1 + 0x1e0] = a0\n104378: i32 a1 = s1 + 0x1a0\n104382: i32 a3 = s1 + 0x1e0\n104386: a2 = 0xffffffffffffffff\n104389: a4 = 0x20\n104392: a0 = 0\n104394: ecalli 14 // 'set_storage'\n104396: a0 = sp + 0xffffffffffffffe0\n104399: a0 = a0 & 0xffffffffffffffe0\n104402: u64 [s1 + 0x138] = a0\n104406: sp = a0\n104408: u64 [a0 + 24] = 0\n104411: u64 [a0 + 16] = 0\n104414: u64 [a0 + 8] = 0\n104417: u64 [a0 + 0] = 0\n104419: i32 a0 = a0 + 0\n104421: ecalli 15 // 'value_transferred'\n104423: a1 = u64 [s1 + 0x138]\n104427: a0 = u64 [a1 + 0x18]\n104430: u64 [s1 + 0x18] = a0\n104433: a0 = u64 [a1 + 0x10]\n104436: u64 [s1 + 0x120] = a0\n104440: a0 = u64 [a1 + 0x8]\n104443: u64 [s1 + 0x128] = a0\n104447: a0 = u64 [a1]\n104449: u64 [s1 + 0x130] = a0\n104453: a1 = 0x20\n104456: a0 = 0\n104458: ra = 1146, jump @0\n      : @1238 [@dyn 573] (gas: 67)\n104465: a1 = u64 [s1 + 0xf8]\n104469: u8 [a0 + 0x1f] = a1\n104472: a1 = u64 [s1 + 0xf0]\n104476: u8 [a0 + 0x1e] = a1\n104479: a1 = u64 [s1 + 0xe8]\n104483: u8 [a0 + 0x1d] = a1\n104486: a1 = u64 [s1 + 0xe0]\n104490: u8 [a0 + 0x1c] = a1\n104493: a1 = u64 [s1 + 0xd8]\n104497: u8 [a0 + 0x1b] = a1\n104500: a1 = u64 [s1 + 0xd0]\n104504: u8 [a0 + 0x1a] = a1\n104507: a1 = u64 [s1 + 0xc8]\n104511: u8 [a0 + 0x19] = a1\n104514: a1 = u64 [s1 + 0xc0]\n104518: u8 [a0 + 0x17] = a1\n104521: a1 = u64 [s1 + 0xb8]\n104525: u8 [a0 + 0x16] = a1\n104528: a1 = u64 [s1 + 0xb0]\n104532: u8 [a0 + 0x15] = a1\n104535: a1 = u64 [s1 + 0xa8]\n104539: u8 [a0 + 0x14] = a1\n104542: a1 = u64 [s1 + 0xa0]\n104546: u8 [a0 + 0x13] = a1\n104549: a1 = u64 [s1 + 0x98]\n104553: u8 [a0 + 0x12] = a1\n104556: a1 = u64 [s1 + 0x90]\n104560: u8 [a0 + 0x11] = a1\n104563: a1 = u64 [s1 + 0x88]\n104567: u8 [a0 + 0xf] = a1\n104570: a1 = u64 [s1 + 0x80]\n104574: u8 [a0 + 0xe] = a1\n104577: a1 = u64 [s1 + 0x78]\n104580: u8 [a0 + 0xd] = a1\n104583: a1 = u64 [s1 + 0x70]\n104586: u8 [a0 + 0xc] = a1\n104589: a1 = u64 [s1 + 0x68]\n104592: u8 [a0 + 0xb] = a1\n104595: a1 = u64 [s1 + 0x60]\n104598: u8 [a0 + 0xa] = a1\n104601: a1 = u64 [s1 + 0x58]\n104604: u8 [a0 + 0x9] = a1\n104607: a1 = u64 [s1 + 0x50]\n104610: u8 [a0 + 0x7] = a1\n104613: a1 = u64 [s1 + 0x48]\n104616: u8 [a0 + 0x6] = a1\n104619: a1 = u64 [s1 + 0x40]\n104622: u8 [a0 + 0x5] = a1\n104625: a1 = u64 [s1 + 0x38]\n104628: u8 [a0 + 0x4] = a1\n104631: a1 = u64 [s1 + 0x30]\n104634: u8 [a0 + 0x3] = a1\n104637: a1 = u64 [s1 + 0x28]\n104640: u8 [a0 + 0x2] = a1\n104643: a1 = u64 [s1 + 0x20]\n104646: u8 [a0 + 0x1] = a1\n104649: a1 = u64 [s1 + 0x100]\n104653: u8 [a0 + 0x18] = a1\n104656: a1 = u64 [s1 + 0x108]\n104660: u8 [a0 + 0x10] = a1\n104663: a1 = u64 [s1 + 0x110]\n104667: u8 [a0 + 0x8] = a1\n104670: a1 = u64 [s1 + 0x118]\n104674: u8 [a0] = a1\n104676: a0 = 0x20\n104679: a1 = 0x20\n104682: ra = 1148, jump @0\n      : @1239 [@dyn 574] (gas: 35)\n104689: u8 [a0 + 31] = 0x2\n104693: u8 [a0 + 30] = 0\n104696: u8 [a0 + 29] = 0\n104699: u8 [a0 + 28] = 0\n104702: u8 [a0 + 27] = 0\n104705: u8 [a0 + 26] = 0\n104708: u8 [a0 + 25] = 0\n104711: u8 [a0 + 24] = 0\n104714: u8 [a0 + 23] = 0\n104717: u8 [a0 + 22] = 0\n104720: u8 [a0 + 21] = 0\n104723: u8 [a0 + 20] = 0\n104726: u8 [a0 + 19] = 0\n104729: u8 [a0 + 18] = 0\n104732: u8 [a0 + 17] = 0\n104735: u8 [a0 + 16] = 0\n104738: u8 [a0 + 15] = 0\n104741: u8 [a0 + 14] = 0\n104744: u8 [a0 + 13] = 0\n104747: u8 [a0 + 12] = 0\n104750: u8 [a0 + 11] = 0\n104753: u8 [a0 + 10] = 0\n104756: u8 [a0 + 9] = 0\n104759: u8 [a0 + 8] = 0\n104762: u8 [a0 + 7] = 0\n104765: u8 [a0 + 6] = 0\n104768: u8 [a0 + 5] = 0\n104771: u8 [a0 + 4] = 0\n104774: u8 [a0 + 3] = 0\n104777: u8 [a0 + 2] = 0\n104780: u8 [a0 + 1] = 0\n104783: u8 [a0 + 0] = 0\n104785: a1 = 0x40\n104788: a0 = 0\n104790: ra = 1150, jump @0\n      : @1240 [@dyn 575] (gas: 38)\n104797: i32 a0 = a0 + 0\n104799: i32 a2 = s1 + 0x1e0\n104803: a1 = 0x40\n104806: ecalli 8 // 'hash_keccak_256'\n104808: a0 = u64 [s1 + 0x1f8]\n104812: a1 = u64 [s1 + 0x1f0]\n104816: a2 = u64 [s1 + 0x1e8]\n104820: a3 = u64 [s1 + 0x1e0]\n104824: a0 = reverse a0\n104826: a1 = reverse a1\n104828: a2 = reverse a2\n104830: a3 = reverse a3\n104832: u64 [s1 + 0x1b8] = a3\n104836: u64 [s1 + 0x1b0] = a2\n104840: u64 [s1 + 0x1a8] = a1\n104844: u64 [s1 + 0x1a0] = a0\n104848: u64 [s1 + 504] = 0\n104852: u64 [s1 + 496] = 0\n104856: u64 [s1 + 488] = 0\n104860: u64 [s1 + 480] = 0\n104864: u32 [s1 + 448] = 0x20\n104869: i32 a1 = s1 + 0x1a0\n104873: i32 a3 = s1 + 0x1e0\n104877: i32 a4 = s1 + 0x1c0\n104881: a2 = 0xffffffffffffffff\n104884: a0 = 0\n104886: ecalli 7 // 'get_storage'\n104888: a0 = u64 [s1 + 0x1f8]\n104892: u64 [s1 + 0xc8] = a0\n104896: a0 = u64 [s1 + 0x1f0]\n104900: u64 [s1 + 0xd0] = a0\n104904: a0 = u64 [s1 + 0x1e8]\n104908: u64 [s1 + 0xd8] = a0\n104912: a0 = u64 [s1 + 0x1e0]\n104916: u64 [s1 + 0xe0] = a0\n104920: a0 = 0x40\n104923: a1 = 0x20\n104926: ra = 1152, jump @0\n      : @1241 [@dyn 576] (gas: 103)\n104933: a1 = u8 [a0 + 0x11]\n104936: a2 = u8 [a0 + 0x10]\n104939: a3 = u8 [a0 + 0x12]\n104942: a4 = u8 [a0 + 0x13]\n104945: a1 = a1 << 0x8\n104948: a1 = a1 | a2\n104951: a3 = a3 << 0x10\n104954: a4 = a4 << 0x18\n104957: a3 = a3 | a4\n104960: a1 = a1 | a3\n104963: a2 = u8 [a0 + 0x15]\n104966: a3 = u8 [a0 + 0x14]\n104969: a4 = u8 [a0 + 0x16]\n104972: a5 = u8 [a0 + 0x17]\n104975: a2 = a2 << 0x8\n104978: a2 = a2 | a3\n104981: a4 = a4 << 0x10\n104984: a5 = a5 << 0x18\n104987: a4 = a4 | a5\n104990: a2 = a2 | a4\n104993: a2 = a2 << 0x20\n104996: t0 = a2 | a1\n104999: a2 = u8 [a0 + 0x1]\n105002: a3 = u8 [a0]\n105004: a4 = u8 [a0 + 0x2]\n105007: a5 = u8 [a0 + 0x3]\n105010: a2 = a2 << 0x8\n105013: a2 = a2 | a3\n105016: a4 = a4 << 0x10\n105019: a5 = a5 << 0x18\n105022: a4 = a4 | a5\n105025: a2 = a2 | a4\n105028: a3 = u8 [a0 + 0x5]\n105031: a4 = u8 [a0 + 0x4]\n105034: a5 = u8 [a0 + 0x6]\n105037: a1 = u8 [a0 + 0x7]\n105040: a3 = a3 << 0x8\n105043: a3 = a3 | a4\n105046: a5 = a5 << 0x10\n105049: a1 = a1 << 0x18\n105052: a1 = a1 | a5\n105055: a1 = a1 | a3\n105058: a1 = a1 << 0x20\n105061: t1 = a1 | a2\n105064: a1 = u8 [a0 + 0x19]\n105067: a3 = u8 [a0 + 0x18]\n105070: a4 = u8 [a0 + 0x1a]\n105073: a5 = u8 [a0 + 0x1b]\n105076: a1 = a1 << 0x8\n105079: a1 = a1 | a3\n105082: a4 = a4 << 0x10\n105085: a5 = a5 << 0x18\n105088: a4 = a4 | a5\n105091: a1 = a1 | a4\n105094: a3 = u8 [a0 + 0x1d]\n105097: a4 = u8 [a0 + 0x1c]\n105100: a5 = u8 [a0 + 0x1e]\n105103: a2 = u8 [a0 + 0x1f]\n105106: a3 = a3 << 0x8\n105109: a3 = a3 | a4\n105112: a5 = a5 << 0x10\n105115: a2 = a2 << 0x18\n105118: a2 = a2 | a5\n105121: a2 = a2 | a3\n105124: a2 = a2 << 0x20\n105127: a3 = a2 | a1\n105130: a1 = u8 [a0 + 0x9]\n105133: a2 = u8 [a0 + 0x8]\n105136: a4 = u8 [a0 + 0xa]\n105139: a5 = u8 [a0 + 0xb]\n105142: a1 = a1 << 0x8\n105145: a1 = a1 | a2\n105148: a4 = a4 << 0x10\n105151: a5 = a5 << 0x18\n105154: a4 = a4 | a5\n105157: a1 = a1 | a4\n105160: a2 = u8 [a0 + 0xd]\n105163: a4 = u8 [a0 + 0xc]\n105166: a5 = u8 [a0 + 0xe]\n105169: a0 = u8 [a0 + 0xf]\n105172: a2 = a2 << 0x8\n105175: a2 = a2 | a4\n105178: a5 = a5 << 0x10\n105181: a0 = a0 << 0x18\n105184: a0 = a0 | a5\n105187: a0 = a0 | a2\n105190: a0 = a0 << 0x20\n105193: a0 = a0 | a1\n105196: a4 = reverse a0\n105198: a2 = reverse a3\n105200: a1 = reverse t1\n105202: a0 = reverse t0\n105204: u64 [s1 + 0xf8] = a0\n105208: u64 [s1 + 0xe8] = a1\n105212: a0 = a0 | a1\n105215: a1 = a2 | a4\n105218: a1 = a1 | a0\n105221: a1 = a1 >> 0x20\n105224: u64 [s1 + 0xf0] = a4\n105228: a0 = a0 | a4\n105231: a0 = a0 << 0x20\n105234: a0 = a0 | a1\n105237: jump @1247 if a0 != 0\n      : @1242 (gas: 5)\n105241: i32 a0 = a2 + 0\n105243: a1 = 0x20\n105246: u64 [s1 + 0x138] = a0\n105250: u64 [s1 + 0xc0] = a2\n105254: ra = 1154, jump @0\n      : @1243 [@dyn 577] (gas: 78)\n105261: a1 = u64 [s1 + 0x18]\n105264: a1 = reverse a1\n105266: a2 = u64 [s1 + 0x120]\n105270: a2 = reverse a2\n105272: a3 = u64 [s1 + 0x128]\n105276: a3 = reverse a3\n105278: a4 = u64 [s1 + 0x130]\n105282: a4 = reverse a4\n105284: a5 = a4 >> 0x38\n105287: u8 [a0 + 0x1f] = a5\n105290: a5 = a4 >> 0x30\n105293: u8 [a0 + 0x1e] = a5\n105296: a5 = a4 >> 0x28\n105299: u8 [a0 + 0x1d] = a5\n105302: a5 = a4 >> 0x20\n105305: u8 [a0 + 0x1c] = a5\n105308: a5 = a4 >> 0x18\n105311: u8 [a0 + 0x1b] = a5\n105314: a5 = a4 >> 0x10\n105317: u8 [a0 + 0x1a] = a5\n105320: a5 = a4 >> 0x8\n105323: u8 [a0 + 0x19] = a5\n105326: u8 [a0 + 0x18] = a4\n105329: u8 [a0 + 0x10] = a3\n105332: a4 = a3 >> 0x38\n105335: u8 [a0 + 0x17] = a4\n105338: a4 = a3 >> 0x30\n105341: u8 [a0 + 0x16] = a4\n105344: a4 = a3 >> 0x28\n105347: u8 [a0 + 0x15] = a4\n105350: a4 = a3 >> 0x20\n105353: u8 [a0 + 0x14] = a4\n105356: a4 = a3 >> 0x18\n105359: u8 [a0 + 0x13] = a4\n105362: a4 = a3 >> 0x10\n105365: u8 [a0 + 0x12] = a4\n105368: a3 = a3 >> 0x8\n105371: u8 [a0 + 0x11] = a3\n105374: u8 [a0 + 0x8] = a2\n105377: a3 = a2 >> 0x38\n105380: u8 [a0 + 0xf] = a3\n105383: a3 = a2 >> 0x30\n105386: u8 [a0 + 0xe] = a3\n105389: a3 = a2 >> 0x28\n105392: u8 [a0 + 0xd] = a3\n105395: a3 = a2 >> 0x20\n105398: u8 [a0 + 0xc] = a3\n105401: a3 = a2 >> 0x18\n105404: u8 [a0 + 0xb] = a3\n105407: a3 = a2 >> 0x10\n105410: u8 [a0 + 0xa] = a3\n105413: a2 = a2 >> 0x8\n105416: u8 [a0 + 0x9] = a2\n105419: u8 [a0] = a1\n105421: a2 = a1 >> 0x38\n105424: u8 [a0 + 0x7] = a2\n105427: a2 = a1 >> 0x30\n105430: u8 [a0 + 0x6] = a2\n105433: a2 = a1 >> 0x28\n105436: u8 [a0 + 0x5] = a2\n105439: a2 = a1 >> 0x20\n105442: u8 [a0 + 0x4] = a2\n105445: a2 = a1 >> 0x18\n105448: u8 [a0 + 0x3] = a2\n105451: a2 = a1 >> 0x10\n105454: u8 [a0 + 0x2] = a2\n105457: a1 = a1 >> 0x8\n105460: a2 = u64 [s1 + 0xf0]\n105464: a3 = u64 [s1 + 0xe8]\n105468: a2 = a2 | a3\n105471: a3 = 0xffffffe0\n105481: a4 = u64 [s1 + 0xc0]\n105485: a3 = a4 <u a3\n105488: a4 = u64 [s1 + 0xf8]\n105492: a3 = 0 if a4 != 0\n105494: a3 = 0 if a2 != 0\n105496: u8 [a0 + 0x1] = a1\n105499: jump @1247 if a3 == 0\n      : @1244 (gas: 4)\n105503: a0 = u64 [s1 + 0x138]\n105507: i32 a0 = a0 + 0x20\n105510: a1 = 0x20\n105513: ra = 1156, jump @0\n      : @1245 [@dyn 578] (gas: 71)\n105520: a1 = u64 [s1 + 0xc8]\n105524: a1 = reverse a1\n105526: a2 = u64 [s1 + 0xd0]\n105530: a2 = reverse a2\n105532: a3 = u64 [s1 + 0xd8]\n105536: a3 = reverse a3\n105538: a4 = u64 [s1 + 0xe0]\n105542: a4 = reverse a4\n105544: a5 = a4 >> 0x38\n105547: u8 [a0 + 0x1f] = a5\n105550: a5 = a4 >> 0x30\n105553: u8 [a0 + 0x1e] = a5\n105556: a5 = a4 >> 0x28\n105559: u8 [a0 + 0x1d] = a5\n105562: a5 = a4 >> 0x20\n105565: u8 [a0 + 0x1c] = a5\n105568: a5 = a4 >> 0x18\n105571: u8 [a0 + 0x1b] = a5\n105574: a5 = a4 >> 0x10\n105577: u8 [a0 + 0x1a] = a5\n105580: a5 = a4 >> 0x8\n105583: u8 [a0 + 0x19] = a5\n105586: u8 [a0 + 0x18] = a4\n105589: u8 [a0 + 0x10] = a3\n105592: a4 = a3 >> 0x38\n105595: u8 [a0 + 0x17] = a4\n105598: a4 = a3 >> 0x30\n105601: u8 [a0 + 0x16] = a4\n105604: a4 = a3 >> 0x28\n105607: u8 [a0 + 0x15] = a4\n105610: a4 = a3 >> 0x20\n105613: u8 [a0 + 0x14] = a4\n105616: a4 = a3 >> 0x18\n105619: u8 [a0 + 0x13] = a4\n105622: a4 = a3 >> 0x10\n105625: u8 [a0 + 0x12] = a4\n105628: a3 = a3 >> 0x8\n105631: u8 [a0 + 0x11] = a3\n105634: u8 [a0 + 0x8] = a2\n105637: a3 = a2 >> 0x38\n105640: u8 [a0 + 0xf] = a3\n105643: a3 = a2 >> 0x30\n105646: u8 [a0 + 0xe] = a3\n105649: a3 = a2 >> 0x28\n105652: u8 [a0 + 0xd] = a3\n105655: a3 = a2 >> 0x20\n105658: u8 [a0 + 0xc] = a3\n105661: a3 = a2 >> 0x18\n105664: u8 [a0 + 0xb] = a3\n105667: a3 = a2 >> 0x10\n105670: u8 [a0 + 0xa] = a3\n105673: a2 = a2 >> 0x8\n105676: u8 [a0 + 0x9] = a2\n105679: u8 [a0] = a1\n105681: a2 = a1 >> 0x38\n105684: u8 [a0 + 0x7] = a2\n105687: a2 = a1 >> 0x30\n105690: u8 [a0 + 0x6] = a2\n105693: a2 = a1 >> 0x28\n105696: u8 [a0 + 0x5] = a2\n105699: a2 = a1 >> 0x20\n105702: u8 [a0 + 0x4] = a2\n105705: a2 = a1 >> 0x18\n105708: u8 [a0 + 0x3] = a2\n105711: a2 = a1 >> 0x10\n105714: u8 [a0 + 0x2] = a2\n105717: a1 = a1 >> 0x8\n105720: u8 [a0 + 0x1] = a1\n105723: a1 = 0x40\n105726: a0 = u64 [s1 + 0x138]\n105730: ra = 1158, jump @0\n      : @1246 [@dyn 579] (gas: 27)\n105737: a1 = u64 [0x200c0]\n105742: a2 = u64 [0x200c8]\n105747: a3 = u64 [0x200d0]\n105752: a4 = u64 [0x200d8]\n105757: u64 [s1 + 0x1f8] = a1\n105761: u64 [s1 + 0x1f0] = a2\n105765: u64 [s1 + 0x1e8] = a3\n105769: u64 [s1 + 0x1e0] = a4\n105773: a1 = u64 [s1 + 0x100]\n105777: u64 [s1 + 0x218] = a1\n105781: a1 = u64 [s1 + 0x108]\n105785: u64 [s1 + 0x210] = a1\n105789: a1 = u64 [s1 + 0x110]\n105793: u64 [s1 + 0x208] = a1\n105797: a1 = u64 [s1 + 0x118]\n105801: u64 [s1 + 0x200] = a1\n105805: i32 a2 = a0 + 0\n105807: i32 a0 = s1 + 0x1e0\n105811: a1 = 0x2\n105814: a3 = 0x40\n105817: ecalli 6 // 'deposit_event'\n105819: sp = s0 + 0xfffffffffffffdc0\n105823: ra = u64 [sp + 0x238]\n105827: s0 = u64 [sp + 0x230]\n105831: s1 = u64 [sp + 0x228]\n105835: sp = sp + 0x240\n105839: ret\n      : @1247 (gas: 1)\n105841: trap\n      : @1248 (gas: 8)\n105842: u64 [s1 + 368] = 0\n105846: u64 [s1 + 360] = 0\n105850: u64 [s1 + 352] = 0\n105854: a0 = 0x4e487b7100000000\n105864: a1 = s1 + 0x160\n105868: u64 [s1 + 0x178] = a0\n105872: a0 = 0\n105874: ra = 1160, jump @23\n      : @1249 [@dyn 580] (gas: 7)\n105881: u64 [s1 + 344] = 0\n105885: u64 [s1 + 336] = 0\n105889: u64 [s1 + 320] = 0x11\n105894: a0 = 0x4\n105897: a1 = s1 + 0x140\n105901: u64 [s1 + 328] = 0\n105905: ra = 1162, jump @23\n      : @1250 [@dyn 581] (gas: 3)\n105912: a1 = 0x24\n105915: a0 = 0\n105917: ra = 1164, jump @0\n      : @1251 [@dyn 582] (gas: 6)\n105924: i32 a1 = a0 + 0\n105926: a0 = 0x1\n105929: a2 = 0x24\n105932: ra = 0x48e\n105936: ecalli 12 // 'seal_return'\n105938: fallthrough\n      : @1252 [@dyn 583] (gas: 15)\n105939: sp = sp + 0xffffffffffffffd0\n105942: u64 [sp + 0x28] = ra\n105945: u64 [sp + 0x20] = s0\n105948: s0 = sp + 0x30\n105951: sp = sp & 0xfffffffffffffff0\n105954: a1 = u64 [a0]\n105956: a2 = u64 [a0 + 0x8]\n105959: a3 = u64 [a0 + 0x10]\n105962: a0 = u64 [a0 + 0x18]\n105965: u64 [sp + 0x18] = a0\n105968: u64 [sp + 0x10] = a3\n105971: u64 [sp + 0x8] = a2\n105974: a0 = sp\n105976: u64 [sp] = a1\n105978: ra = 1168, jump @1211\n      : @1253 [@dyn 584] (gas: 5)\n105984: sp = s0 + 0xffffffffffffffd0\n105987: ra = u64 [sp + 0x28]\n105990: s0 = u64 [sp + 0x20]\n105993: sp = sp + 0x30\n105996: ret\n      : @1254 (gas: 47)\n105998: sp = sp + 0xfffffffffffffe80\n106002: u64 [sp + 0x178] = ra\n106006: u64 [sp + 0x170] = s0\n106010: u64 [sp + 0x168] = s1\n106014: s0 = sp + 0x180\n106018: sp = sp & 0xffffffffffffffe0\n106021: a3 = u64 [a2 + 0x18]\n106024: u64 [sp] = a3\n106026: a3 = u64 [a2 + 0x10]\n106029: u64 [sp + 0x8] = a3\n106032: a3 = u64 [a2 + 0x8]\n106035: u64 [sp + 0x10] = a3\n106038: a2 = u64 [a2]\n106040: u64 [sp + 0x18] = a2\n106043: a2 = u64 [a1 + 0x18]\n106046: u64 [sp + 0x20] = a2\n106049: a2 = u64 [a1 + 0x10]\n106052: u64 [sp + 0x28] = a2\n106055: a2 = u64 [a1 + 0x8]\n106058: u64 [sp + 0x30] = a2\n106061: a1 = u64 [a1]\n106063: u64 [sp + 0x38] = a1\n106066: a1 = u64 [a0 + 0x18]\n106069: u64 [sp + 0x40] = a1\n106072: a1 = u64 [a0 + 0x10]\n106075: u64 [sp + 0x48] = a1\n106078: a1 = u64 [a0 + 0x8]\n106081: u64 [sp + 0x50] = a1\n106084: a0 = u64 [a0]\n106086: u64 [sp + 0x58] = a0\n106089: u64 [sp + 312] = 0\n106093: u64 [sp + 304] = 0\n106097: u64 [sp + 296] = 0\n106101: s1 = 0x5\n106104: u64 [sp + 0x120] = s1\n106108: u64 [sp + 344] = 0\n106112: u64 [sp + 336] = 0\n106116: u64 [sp + 328] = 0\n106120: u64 [sp + 320] = 0\n106124: u32 [sp + 256] = 0x20\n106129: i32 a1 = sp + 0x120\n106133: i32 a3 = sp + 0x140\n106137: i32 a4 = sp + 0x100\n106141: a2 = 0xffffffffffffffff\n106144: a0 = 0\n106146: ecalli 7 // 'get_storage'\n106148: fallthrough\n      : @1255 (gas: 9)\n106149: a0 = u64 [sp + 0x158]\n106153: a1 = u64 [sp + 0x148]\n106157: a2 = u64 [sp + 0x140]\n106161: a3 = u64 [sp + 0x150]\n106165: a0 = a0 | a1\n106168: a1 = a2 ^ 0x1\n106171: a1 = a1 | a3\n106174: a0 = a0 | a1\n106177: jump @1258 if a0 != 0\n      : @1256 (gas: 92)\n106181: u64 [sp + 312] = 0\n106185: u64 [sp + 304] = 0\n106189: u64 [sp + 296] = 0\n106193: u64 [sp + 288] = 0x5\n106198: u64 [sp + 344] = 0\n106202: u64 [sp + 336] = 0\n106206: u64 [sp + 328] = 0\n106210: u64 [sp + 320] = 0\n106214: u32 [sp + 256] = 0x20\n106219: i32 a1 = sp + 0x120\n106223: i32 a3 = sp + 0x140\n106227: i32 a4 = sp + 0x100\n106231: a2 = 0xffffffffffffffff\n106234: a0 = 0\n106236: ecalli 7 // 'get_storage'\n106238: u64 [sp + 312] = 0\n106242: u64 [sp + 304] = 0\n106246: u64 [sp + 296] = 0\n106250: u64 [sp + 288] = 0x5\n106255: u64 [sp + 344] = 0\n106259: u64 [sp + 336] = 0\n106263: u64 [sp + 328] = 0\n106267: u64 [sp + 320] = 0x2\n106272: i32 a1 = sp + 0x120\n106276: i32 a3 = sp + 0x140\n106280: a2 = 0xffffffffffffffff\n106283: a4 = 0x20\n106286: a0 = 0\n106288: ecalli 14 // 'set_storage'\n106290: a0 = u64 [sp]\n106292: u64 [sp + 0x78] = a0\n106295: a0 = u64 [sp + 0x8]\n106298: u64 [sp + 0x70] = a0\n106301: a0 = u64 [sp + 0x10]\n106304: u64 [sp + 0x68] = a0\n106307: a0 = u64 [sp + 0x18]\n106310: u64 [sp + 0x60] = a0\n106313: a0 = u64 [sp + 0x20]\n106316: u64 [sp + 0x98] = a0\n106320: a0 = u64 [sp + 0x28]\n106323: u64 [sp + 0x90] = a0\n106327: a0 = u64 [sp + 0x30]\n106330: u64 [sp + 0x88] = a0\n106334: a0 = u64 [sp + 0x38]\n106337: u64 [sp + 0x80] = a0\n106341: a0 = u64 [sp + 0x40]\n106344: u64 [sp + 0xb8] = a0\n106348: a0 = u64 [sp + 0x48]\n106351: u64 [sp + 0xb0] = a0\n106355: a0 = u64 [sp + 0x50]\n106358: u64 [sp + 0xa8] = a0\n106362: a0 = sp + 0xa0\n106366: a1 = sp + 0x80\n106370: a2 = sp + 0x60\n106373: a3 = u64 [sp + 0x58]\n106376: u64 [sp + 0xa0] = a3\n106380: ra = 0x492\n106384: sp = sp + 0xfffffffffffffb00\n106388: u64 [sp + 0x4f8] = ra\n106392: u64 [sp + 0x4f0] = s0\n106396: u64 [sp + 1256] = 0x5\n106401: s0 = sp + 0x500\n106405: sp = sp & 0xffffffffffffffe0\n106408: s1 = sp\n106410: a3 = u64 [a2 + 0x18]\n106413: u64 [s1 + 0x78] = a3\n106416: a3 = u64 [a2 + 0x10]\n106419: u64 [s1 + 0x68] = a3\n106422: a3 = u64 [a2 + 0x8]\n106425: u64 [s1 + 0x70] = a3\n106428: a2 = u64 [a2]\n106430: u64 [s1 + 0x60] = a2\n106433: a2 = u64 [a1]\n106435: u64 [s1 + 0x1d8] = a2\n106439: a2 = u64 [a1 + 0x8]\n106442: u64 [s1 + 0x1d0] = a2\n106446: a2 = u64 [a1 + 0x10]\n106449: u64 [s1 + 0x1c8] = a2\n106453: a1 = u64 [a1 + 0x18]\n106456: u64 [s1 + 0x1c0] = a1\n106460: a1 = u64 [a0]\n106462: u64 [s1 + 0x1e0] = a1\n106466: a1 = u64 [a0 + 0x8]\n106469: u64 [s1 + 0x1e8] = a1\n106473: a1 = u64 [a0 + 0x10]\n106476: u64 [s1 + 0x1f0] = a1\n106480: a0 = u64 [a0 + 0x18]\n106483: u64 [s1 + 0x1f8] = a0\n106487: a1 = 0x20\n106490: a0 = 0\n106492: ra = 0x4b4\n106496: jump @0\n      : @1257 [@dyn 585] (gas: 35)\n106500: u64 [sp + 312] = 0\n106504: u64 [sp + 304] = 0\n106508: u64 [sp + 296] = 0\n106512: u64 [sp + 0x120] = s1\n106516: u64 [sp + 344] = 0\n106520: u64 [sp + 336] = 0\n106524: u64 [sp + 328] = 0\n106528: u64 [sp + 320] = 0\n106532: u32 [sp + 256] = 0x20\n106537: i32 a1 = sp + 0x120\n106541: i32 a3 = sp + 0x140\n106545: i32 a4 = sp + 0x100\n106549: a2 = 0xffffffffffffffff\n106552: a0 = 0\n106554: ecalli 7 // 'get_storage'\n106556: u64 [sp + 312] = 0\n106560: u64 [sp + 304] = 0\n106564: u64 [sp + 296] = 0\n106568: u64 [sp + 0x120] = s1\n106572: u64 [sp + 344] = 0\n106576: u64 [sp + 336] = 0\n106580: u64 [sp + 328] = 0\n106584: u64 [sp + 320] = 0x1\n106589: i32 a1 = sp + 0x120\n106593: i32 a3 = sp + 0x140\n106597: a2 = 0xffffffffffffffff\n106600: a4 = 0x20\n106603: a0 = 0\n106605: ecalli 14 // 'set_storage'\n106607: sp = s0 + 0xfffffffffffffe80\n106611: ra = u64 [sp + 0x178]\n106615: s0 = u64 [sp + 0x170]\n106619: s1 = u64 [sp + 0x168]\n106623: sp = sp + 0x180\n106627: ret\n      : @1258 (gas: 3)\n106629: a0 = 0x40\n106632: a1 = 0x20\n106635: ra = 1172, jump @0\n      : @1259 [@dyn 586] (gas: 103)\n106642: a1 = u8 [a0 + 0x11]\n106645: a2 = u8 [a0 + 0x10]\n106648: a3 = u8 [a0 + 0x12]\n106651: a4 = u8 [a0 + 0x13]\n106654: a1 = a1 << 0x8\n106657: a1 = a1 | a2\n106660: a3 = a3 << 0x10\n106663: a4 = a4 << 0x18\n106666: a3 = a3 | a4\n106669: a1 = a1 | a3\n106672: a2 = u8 [a0 + 0x15]\n106675: a3 = u8 [a0 + 0x14]\n106678: a4 = u8 [a0 + 0x16]\n106681: a5 = u8 [a0 + 0x17]\n106684: a2 = a2 << 0x8\n106687: a2 = a2 | a3\n106690: a4 = a4 << 0x10\n106693: a5 = a5 << 0x18\n106696: a4 = a4 | a5\n106699: a2 = a2 | a4\n106702: a2 = a2 << 0x20\n106705: t0 = a2 | a1\n106708: a2 = u8 [a0 + 0x1]\n106711: a3 = u8 [a0]\n106713: a4 = u8 [a0 + 0x2]\n106716: a5 = u8 [a0 + 0x3]\n106719: a2 = a2 << 0x8\n106722: a2 = a2 | a3\n106725: a4 = a4 << 0x10\n106728: a5 = a5 << 0x18\n106731: a4 = a4 | a5\n106734: a2 = a2 | a4\n106737: a3 = u8 [a0 + 0x5]\n106740: a4 = u8 [a0 + 0x4]\n106743: a5 = u8 [a0 + 0x6]\n106746: s1 = u8 [a0 + 0x7]\n106749: a3 = a3 << 0x8\n106752: a3 = a3 | a4\n106755: a5 = a5 << 0x10\n106758: s1 = s1 << 0x18\n106761: a5 = a5 | s1\n106764: a3 = a3 | a5\n106767: a3 = a3 << 0x20\n106770: a2 = a2 | a3\n106773: a3 = u8 [a0 + 0x19]\n106776: a4 = u8 [a0 + 0x18]\n106779: a5 = u8 [a0 + 0x1a]\n106782: s1 = u8 [a0 + 0x1b]\n106785: a3 = a3 << 0x8\n106788: a3 = a3 | a4\n106791: a5 = a5 << 0x10\n106794: s1 = s1 << 0x18\n106797: a5 = a5 | s1\n106800: a3 = a3 | a5\n106803: a4 = u8 [a0 + 0x1d]\n106806: a5 = u8 [a0 + 0x1c]\n106809: s1 = u8 [a0 + 0x1e]\n106812: a1 = u8 [a0 + 0x1f]\n106815: a4 = a4 << 0x8\n106818: a4 = a4 | a5\n106821: s1 = s1 << 0x10\n106824: a1 = a1 << 0x18\n106827: a1 = a1 | s1\n106830: a1 = a1 | a4\n106833: a1 = a1 << 0x20\n106836: a3 = a3 | a1\n106839: a1 = u8 [a0 + 0x9]\n106842: a4 = u8 [a0 + 0x8]\n106845: a5 = u8 [a0 + 0xa]\n106848: s1 = u8 [a0 + 0xb]\n106851: a1 = a1 << 0x8\n106854: a1 = a1 | a4\n106857: a5 = a5 << 0x10\n106860: s1 = s1 << 0x18\n106863: a5 = a5 | s1\n106866: a1 = a1 | a5\n106869: a4 = u8 [a0 + 0xd]\n106872: a5 = u8 [a0 + 0xc]\n106875: s1 = u8 [a0 + 0xe]\n106878: a0 = u8 [a0 + 0xf]\n106881: a4 = a4 << 0x8\n106884: a4 = a4 | a5\n106887: s1 = s1 << 0x10\n106890: a0 = a0 << 0x18\n106893: a0 = a0 | s1\n106896: a0 = a0 | a4\n106899: a0 = a0 << 0x20\n106902: a0 = a0 | a1\n106905: s1 = reverse a0\n106907: a1 = reverse a3\n106909: a2 = reverse a2\n106911: a0 = reverse t0\n106913: u64 [sp + 0x58] = a0\n106916: u64 [sp + 0x50] = a2\n106919: a0 = a0 | a2\n106922: a2 = a1\n106924: a1 = a1 | s1\n106927: a1 = a1 | a0\n106930: a1 = a1 >> 0x20\n106933: a0 = a0 | s1\n106936: a0 = a0 << 0x20\n106939: a0 = a0 | a1\n106942: jump @1263 if a0 != 0\n      : @1260 (gas: 5)\n106946: u64 [sp + 0x48] = a2\n106949: i32 a0 = a2 + 0\n106951: a1 = 0x20\n106954: u64 [sp + 0x40] = a0\n106957: ra = 1174, jump @0\n      : @1261 [@dyn 587] (gas: 50)\n106964: u8 [a0 + 31] = 0\n106967: u8 [a0 + 30] = 0\n106970: u8 [a0 + 29] = 0\n106973: u8 [a0 + 28] = 0\n106976: u8 [a0 + 27] = 0\n106979: u8 [a0 + 26] = 0\n106982: u8 [a0 + 25] = 0\n106985: u8 [a0 + 24] = 0\n106988: u8 [a0 + 23] = 0\n106991: u8 [a0 + 22] = 0\n106994: u8 [a0 + 21] = 0\n106997: u8 [a0 + 20] = 0\n107000: u8 [a0 + 19] = 0\n107003: u8 [a0 + 18] = 0\n107006: u8 [a0 + 17] = 0\n107009: u8 [a0 + 16] = 0\n107012: u8 [a0 + 15] = 0\n107015: u8 [a0 + 14] = 0\n107018: u8 [a0 + 13] = 0\n107021: u8 [a0 + 12] = 0\n107024: u8 [a0 + 11] = 0\n107027: u8 [a0 + 10] = 0\n107030: u8 [a0 + 9] = 0\n107033: u8 [a0 + 8] = 0\n107036: u8 [a0 + 7] = 0\n107039: u8 [a0 + 6] = 0\n107042: u8 [a0 + 5] = 0\n107045: u8 [a0 + 4] = 0\n107048: u8 [a0 + 3] = 0xa0\n107053: u8 [a0 + 2] = 0x79\n107057: u8 [a0 + 1] = 0xc3\n107062: u8 [a0 + 0] = 0x8\n107065: a1 = u64 [sp + 0x48]\n107068: a0 = a1 + 0x4\n107071: a1 = a0 <u a1\n107074: a3 = u64 [sp + 0x58]\n107077: a2 = a3 + a1\n107080: a3 = a2 <u a3\n107083: a3 = a1 if a1 == 0\n107086: a3 = a3 + s1\n107089: a1 = a3 <u s1\n107092: a4 = u64 [sp + 0x50]\n107095: a4 = a4 + a1\n107098: u64 [sp + 0xc8] = a2\n107102: u64 [sp + 0xc0] = a0\n107106: u64 [sp + 0xd0] = a3\n107110: a0 = sp + 0xe0\n107114: a1 = sp + 0xc0\n107118: u64 [sp + 0xd8] = a4\n107122: ra = 1176, jump @504\n      : @1262 [@dyn 588] (gas: 30)\n107129: a0 = u64 [sp + 0xe8]\n107133: t0 = u64 [sp + 0xf8]\n107137: t1 = u64 [sp + 0xe0]\n107141: a3 = u64 [sp + 0xf0]\n107145: a1 = u64 [sp + 0x58]\n107148: a4 = a0 ^ a1\n107151: a5 = a0 <u a1\n107154: t2 = a1\n107156: a2 = u64 [sp + 0x48]\n107159: a1 = t1 <u a2\n107162: a5 = a1 if a4 == 0\n107165: a4 = a3 - s1\n107168: a3 = a3 <u s1\n107171: s1 = u64 [sp + 0x50]\n107174: s1 = t0 - s1\n107177: s1 = s1 - a3\n107180: a3 = a4 <u a5\n107183: s1 = s1 - a3\n107186: a4 = a4 - a5\n107189: a0 = a0 - t2\n107192: a1 = a0 - a1\n107195: a0 = t1 - a2\n107198: a1 = a1 | s1\n107201: a2 = a0 | a4\n107204: a2 = a2 | a1\n107207: a1 = a1 | a4\n107210: a2 = a2 >> 0x20\n107213: a1 = a1 << 0x20\n107216: a1 = a1 | a2\n107219: jump @1264 if a1 == 0\n      : @1263 (gas: 1)\n107222: trap\n      : @1264 (gas: 4)\n107223: i32 s1 = a0 + 0\n107225: a0 = u64 [sp + 0x40]\n107228: a1 = s1\n107230: ra = 1178, jump @0\n      : @1265 [@dyn 589] (gas: 6)\n107237: i32 a1 = a0 + 0\n107239: a0 = 0x1\n107242: a2 = s1\n107244: ra = 0x49c\n107248: ecalli 12 // 'seal_return'\n107250: fallthrough\n      : @1266 [@dyn 590] (gas: 12)\n107251: a1 = u64 [a0 + 0x10]\n107254: a2 = u64 [a0 + 0x18]\n107257: a3 = u64 [a0 + 0x8]\n107260: a0 = u64 [a0]\n107262: a2 = a2 | a3\n107265: a3 = a0 | a1\n107268: a3 = a3 | a2\n107271: a3 = a3 >> 0x20\n107274: a1 = a1 | a2\n107277: a1 = a1 << 0x20\n107280: a1 = a1 | a3\n107283: jump @1269 if a1 != 0\n      : @1267 (gas: 7)\n107287: sp = sp + 0xfffffffffffffff0\n107290: u64 [sp + 0x8] = ra\n107293: u64 [sp] = s0\n107295: i32 a0 = a0 + 0\n107297: a1 = 0x20\n107300: s0 = 0x20\n107303: ra = 1182, jump @0\n      : @1268 [@dyn 591] (gas: 40)\n107310: u8 [a0 + 31] = 0\n107313: u8 [a0 + 30] = 0\n107316: u8 [a0 + 29] = 0\n107319: u8 [a0 + 28] = 0\n107322: u8 [a0 + 27] = 0\n107325: u8 [a0 + 26] = 0\n107328: u8 [a0 + 25] = 0\n107331: u8 [a0 + 24] = 0\n107334: u8 [a0 + 23] = 0\n107337: u8 [a0 + 22] = 0\n107340: u8 [a0 + 21] = 0\n107343: u8 [a0 + 20] = 0x65\n107347: u8 [a0 + 19] = 0x74\n107351: u8 [a0 + 18] = 0x61\n107355: u8 [a0 + 17] = 0x74\n107359: u8 [a0 + 16] = 0x73\n107363: u8 [a0 + 0xf] = s0\n107366: u8 [a0 + 14] = 0x64\n107370: a3 = 0x69\n107373: u8 [a0 + 0xd] = a3\n107376: a4 = 0x6c\n107379: u8 [a0 + 0xc] = a4\n107382: u8 [a0 + 11] = 0x61\n107386: u8 [a0 + 10] = 0x76\n107390: u8 [a0 + 9] = 0x6e\n107394: u8 [a0 + 0x8] = a3\n107397: u8 [a0 + 0x7] = s0\n107400: u8 [a0 + 6] = 0x3a\n107404: u8 [a0 + 5] = 0x77\n107408: u8 [a0 + 4] = 0x6f\n107412: u8 [a0 + 3] = 0x72\n107416: a2 = 0x63\n107419: u8 [a0 + 0x2] = a2\n107422: u8 [a0 + 1] = 0x73\n107426: a1 = 0x45\n107429: u8 [a0] = a1\n107431: ra = u64 [sp + 0x8]\n107434: s0 = u64 [sp]\n107436: sp = sp + 0x10\n107439: ret\n      : @1269 (gas: 1)\n107441: trap\n      : @1270 (gas: 17)\n107442: sp = sp + 0xffffffffffffffa0\n107445: u64 [sp + 0x58] = ra\n107448: u64 [sp + 0x50] = s0\n107451: u64 [sp + 0x48] = s1\n107454: a3 = u64 [a1 + 0x18]\n107457: a4 = u64 [a1 + 0x10]\n107460: a5 = u64 [a1 + 0x8]\n107463: s1 = u64 [a1]\n107465: a1 = a5 | a3\n107468: a2 = s1 | a4\n107471: a2 = a2 | a1\n107474: a2 = a2 >> 0x20\n107477: a1 = a1 | a4\n107480: a1 = a1 << 0x20\n107483: a1 = a1 | a2\n107486: u64 [sp + 0x28] = a0\n107489: jump @1277 if a1 != 0\n      : @1271 (gas: 19)\n107493: a0 = s1 + 0x20\n107496: u64 [sp + 0x30] = a0\n107499: a0 = a0 <u s1\n107502: a1 = a5 + a0\n107505: u64 [sp + 0x40] = a1\n107508: u64 [sp + 0x8] = a5\n107511: s0 = a1 <u a5\n107514: s0 = a0 if a0 == 0\n107517: s0 = s0 + a4\n107520: u64 [sp + 0x10] = a4\n107523: a0 = s0 <u a4\n107526: u64 [sp + 0x18] = a3\n107529: a0 = a0 + a3\n107532: u64 [sp + 0x38] = a0\n107535: u64 [sp] = s1\n107537: i32 a0 = s1 + 0\n107539: a1 = 0x20\n107542: s1 = 0x20\n107545: ra = 1184, jump @0\n      : @1272 [@dyn 592] (gas: 45)\n107552: u8 [a0 + 0x1f] = s1\n107555: a1 = u64 [sp + 0x30]\n107558: s1 = a1\n107560: a1 = a1 | s0\n107563: a2 = u64 [sp + 0x40]\n107566: a4 = u64 [sp + 0x38]\n107569: a2 = a2 | a4\n107572: a1 = a1 | a2\n107575: a1 = a1 >> 0x20\n107578: u64 [sp + 0x20] = s0\n107581: a2 = a2 | s0\n107584: a2 = a2 << 0x20\n107587: a1 = a1 | a2\n107590: u8 [a0 + 30] = 0\n107593: u8 [a0 + 29] = 0\n107596: u8 [a0 + 28] = 0\n107599: u8 [a0 + 27] = 0\n107602: u8 [a0 + 26] = 0\n107605: u8 [a0 + 25] = 0\n107608: u8 [a0 + 24] = 0\n107611: u8 [a0 + 23] = 0\n107614: u8 [a0 + 22] = 0\n107617: u8 [a0 + 21] = 0\n107620: u8 [a0 + 20] = 0\n107623: u8 [a0 + 19] = 0\n107626: u8 [a0 + 18] = 0\n107629: u8 [a0 + 17] = 0\n107632: u8 [a0 + 16] = 0\n107635: u8 [a0 + 15] = 0\n107638: u8 [a0 + 14] = 0\n107641: u8 [a0 + 13] = 0\n107644: u8 [a0 + 12] = 0\n107647: u8 [a0 + 11] = 0\n107650: u8 [a0 + 10] = 0\n107653: u8 [a0 + 9] = 0\n107656: u8 [a0 + 8] = 0\n107659: u8 [a0 + 7] = 0\n107662: u8 [a0 + 6] = 0\n107665: u8 [a0 + 5] = 0\n107668: u8 [a0 + 4] = 0\n107671: u8 [a0 + 3] = 0\n107674: u8 [a0 + 2] = 0\n107677: u8 [a0 + 1] = 0\n107680: u8 [a0 + 0] = 0\n107682: jump @1277 if a1 != 0\n      : @1273 (gas: 4)\n107686: i32 s0 = s1 + 0\n107688: a1 = 0x20\n107691: a0 = s0\n107693: ra = 1186, jump @0\n      : @1274 [@dyn 593] (gas: 41)\n107700: u8 [a0 + 31] = 0x15\n107704: u8 [a0 + 30] = 0\n107707: u8 [a0 + 29] = 0\n107710: u8 [a0 + 28] = 0\n107713: u8 [a0 + 27] = 0\n107716: u8 [a0 + 26] = 0\n107719: u8 [a0 + 25] = 0\n107722: u8 [a0 + 24] = 0\n107725: u8 [a0 + 23] = 0\n107728: u8 [a0 + 22] = 0\n107731: u8 [a0 + 21] = 0\n107734: u8 [a0 + 20] = 0\n107737: u8 [a0 + 19] = 0\n107740: u8 [a0 + 18] = 0\n107743: u8 [a0 + 17] = 0\n107746: u8 [a0 + 16] = 0\n107749: u8 [a0 + 15] = 0\n107752: u8 [a0 + 14] = 0\n107755: u8 [a0 + 13] = 0\n107758: u8 [a0 + 12] = 0\n107761: u8 [a0 + 11] = 0\n107764: u8 [a0 + 10] = 0\n107767: u8 [a0 + 9] = 0\n107770: u8 [a0 + 8] = 0\n107773: u8 [a0 + 7] = 0\n107776: u8 [a0 + 6] = 0\n107779: u8 [a0 + 5] = 0\n107782: u8 [a0 + 4] = 0\n107785: u8 [a0 + 3] = 0\n107788: u8 [a0 + 2] = 0\n107791: u8 [a0 + 1] = 0\n107794: a1 = u64 [sp + 0x20]\n107797: a2 = u64 [sp + 0x38]\n107800: a1 = a1 | a2\n107803: a2 = 0xffffffe0\n107813: a2 = s1 <u a2\n107816: a3 = u64 [sp + 0x40]\n107819: a2 = 0 if a3 != 0\n107821: a2 = 0 if a1 != 0\n107823: u8 [a0 + 0] = 0\n107825: jump @1277 if a2 == 0\n      : @1275 (gas: 3)\n107829: i32 a0 = s0 + 0x20\n107832: a1 = 0x20\n107835: ra = 1188, jump @0\n      : @1276 [@dyn 594] (gas: 55)\n107842: u8 [a0 + 31] = 0\n107845: u8 [a0 + 30] = 0\n107848: u8 [a0 + 29] = 0\n107851: u8 [a0 + 28] = 0\n107854: u8 [a0 + 27] = 0\n107857: u8 [a0 + 26] = 0\n107860: u8 [a0 + 25] = 0\n107863: u8 [a0 + 24] = 0\n107866: u8 [a0 + 23] = 0\n107869: u8 [a0 + 22] = 0\n107872: u8 [a0 + 21] = 0\n107875: u8 [a0 + 20] = 0x65\n107879: u8 [a0 + 19] = 0x74\n107883: u8 [a0 + 18] = 0x61\n107887: u8 [a0 + 17] = 0x74\n107891: u8 [a0 + 16] = 0x73\n107895: a5 = 0x20\n107898: u8 [a0 + 0xf] = a5\n107901: u8 [a0 + 14] = 0x64\n107905: u8 [a0 + 13] = 0x69\n107909: u8 [a0 + 12] = 0x6c\n107913: u8 [a0 + 11] = 0x61\n107917: u8 [a0 + 10] = 0x76\n107921: u8 [a0 + 9] = 0x6e\n107925: u8 [a0 + 8] = 0x69\n107929: u8 [a0 + 0x7] = a5\n107932: u8 [a0 + 6] = 0x3a\n107936: u8 [a0 + 5] = 0x77\n107940: u8 [a0 + 4] = 0x6f\n107944: u8 [a0 + 3] = 0x72\n107948: u8 [a0 + 2] = 0x63\n107952: u8 [a0 + 1] = 0x73\n107956: u8 [a0 + 0] = 0x45\n107959: a1 = u64 [sp]\n107961: a0 = a1 + 0x60\n107964: a1 = a0 <u a1\n107967: a3 = u64 [sp + 0x8]\n107970: a2 = a3 + a1\n107973: a3 = a2 <u a3\n107976: a3 = a1 if a1 == 0\n107979: a1 = u64 [sp + 0x10]\n107982: a3 = a3 + a1\n107985: a1 = a3 <u a1\n107988: a4 = u64 [sp + 0x18]\n107991: a1 = a1 + a4\n107994: a4 = u64 [sp + 0x28]\n107997: u64 [a4] = a0\n107999: u64 [a4 + 0x8] = a2\n108002: u64 [a4 + 0x10] = a3\n108005: u64 [a4 + 0x18] = a1\n108008: ra = u64 [sp + 0x58]\n108011: s0 = u64 [sp + 0x50]\n108014: s1 = u64 [sp + 0x48]\n108017: sp = sp + 0x60\n108020: ret\n      : @1277 (gas: 1)\n108022: trap\n      : @1278 (gas: 17)\n108023: sp = sp + 0xffffffffffffffa0\n108026: u64 [sp + 0x58] = ra\n108029: u64 [sp + 0x50] = s0\n108032: u64 [sp + 0x48] = s1\n108035: a3 = u64 [a1 + 0x18]\n108038: a4 = u64 [a1 + 0x10]\n108041: a5 = u64 [a1 + 0x8]\n108044: s1 = u64 [a1]\n108046: a1 = a5 | a3\n108049: a2 = s1 | a4\n108052: a2 = a2 | a1\n108055: a2 = a2 >> 0x20\n108058: a1 = a1 | a4\n108061: a1 = a1 << 0x20\n108064: a1 = a1 | a2\n108067: u64 [sp + 0x28] = a0\n108070: jump @1285 if a1 != 0\n      : @1279 (gas: 19)\n108074: a0 = s1 + 0x20\n108077: u64 [sp + 0x30] = a0\n108080: a0 = a0 <u s1\n108083: a1 = a5 + a0\n108086: u64 [sp + 0x40] = a1\n108089: u64 [sp + 0x8] = a5\n108092: s0 = a1 <u a5\n108095: s0 = a0 if a0 == 0\n108098: s0 = s0 + a4\n108101: u64 [sp + 0x10] = a4\n108104: a0 = s0 <u a4\n108107: u64 [sp + 0x18] = a3\n108110: a0 = a0 + a3\n108113: u64 [sp + 0x38] = a0\n108116: u64 [sp] = s1\n108118: i32 a0 = s1 + 0\n108120: a1 = 0x20\n108123: s1 = 0x20\n108126: ra = 1190, jump @0\n      : @1280 [@dyn 595] (gas: 45)\n108133: u8 [a0 + 0x1f] = s1\n108136: a1 = u64 [sp + 0x30]\n108139: s1 = a1\n108141: a1 = a1 | s0\n108144: a2 = u64 [sp + 0x40]\n108147: a4 = u64 [sp + 0x38]\n108150: a2 = a2 | a4\n108153: a1 = a1 | a2\n108156: a1 = a1 >> 0x20\n108159: u64 [sp + 0x20] = s0\n108162: a2 = a2 | s0\n108165: a2 = a2 << 0x20\n108168: a1 = a1 | a2\n108171: u8 [a0 + 30] = 0\n108174: u8 [a0 + 29] = 0\n108177: u8 [a0 + 28] = 0\n108180: u8 [a0 + 27] = 0\n108183: u8 [a0 + 26] = 0\n108186: u8 [a0 + 25] = 0\n108189: u8 [a0 + 24] = 0\n108192: u8 [a0 + 23] = 0\n108195: u8 [a0 + 22] = 0\n108198: u8 [a0 + 21] = 0\n108201: u8 [a0 + 20] = 0\n108204: u8 [a0 + 19] = 0\n108207: u8 [a0 + 18] = 0\n108210: u8 [a0 + 17] = 0\n108213: u8 [a0 + 16] = 0\n108216: u8 [a0 + 15] = 0\n108219: u8 [a0 + 14] = 0\n108222: u8 [a0 + 13] = 0\n108225: u8 [a0 + 12] = 0\n108228: u8 [a0 + 11] = 0\n108231: u8 [a0 + 10] = 0\n108234: u8 [a0 + 9] = 0\n108237: u8 [a0 + 8] = 0\n108240: u8 [a0 + 7] = 0\n108243: u8 [a0 + 6] = 0\n108246: u8 [a0 + 5] = 0\n108249: u8 [a0 + 4] = 0\n108252: u8 [a0 + 3] = 0\n108255: u8 [a0 + 2] = 0\n108258: u8 [a0 + 1] = 0\n108261: u8 [a0 + 0] = 0\n108263: jump @1285 if a1 != 0\n      : @1281 (gas: 4)\n108267: i32 s0 = s1 + 0\n108269: a1 = 0x20\n108272: a0 = s0\n108274: ra = 1192, jump @0\n      : @1282 [@dyn 596] (gas: 41)\n108281: u8 [a0 + 31] = 0x1c\n108285: u8 [a0 + 30] = 0\n108288: u8 [a0 + 29] = 0\n108291: u8 [a0 + 28] = 0\n108294: u8 [a0 + 27] = 0\n108297: u8 [a0 + 26] = 0\n108300: u8 [a0 + 25] = 0\n108303: u8 [a0 + 24] = 0\n108306: u8 [a0 + 23] = 0\n108309: u8 [a0 + 22] = 0\n108312: u8 [a0 + 21] = 0\n108315: u8 [a0 + 20] = 0\n108318: u8 [a0 + 19] = 0\n108321: u8 [a0 + 18] = 0\n108324: u8 [a0 + 17] = 0\n108327: u8 [a0 + 16] = 0\n108330: u8 [a0 + 15] = 0\n108333: u8 [a0 + 14] = 0\n108336: u8 [a0 + 13] = 0\n108339: u8 [a0 + 12] = 0\n108342: u8 [a0 + 11] = 0\n108345: u8 [a0 + 10] = 0\n108348: u8 [a0 + 9] = 0\n108351: u8 [a0 + 8] = 0\n108354: u8 [a0 + 7] = 0\n108357: u8 [a0 + 6] = 0\n108360: u8 [a0 + 5] = 0\n108363: u8 [a0 + 4] = 0\n108366: u8 [a0 + 3] = 0\n108369: u8 [a0 + 2] = 0\n108372: u8 [a0 + 1] = 0\n108375: a1 = u64 [sp + 0x20]\n108378: a2 = u64 [sp + 0x38]\n108381: a1 = a1 | a2\n108384: a2 = 0xffffffe0\n108394: a2 = s1 <u a2\n108397: a3 = u64 [sp + 0x40]\n108400: a2 = 0 if a3 != 0\n108402: a2 = 0 if a1 != 0\n108404: u8 [a0 + 0] = 0\n108406: jump @1285 if a2 == 0\n      : @1283 (gas: 3)\n108410: i32 a0 = s0 + 0x20\n108413: a1 = 0x20\n108416: ra = 1194, jump @0\n      : @1284 [@dyn 597] (gas: 54)\n108423: u8 [a0 + 25] = 0x6c\n108427: u8 [a0 + 19] = 0x64\n108431: u8 [a0 + 18] = 0x6e\n108435: u8 [a0 + 13] = 0x65\n108439: u8 [a0 + 21] = 0x74\n108443: u8 [a0 + 12] = 0x74\n108447: u8 [a0 + 11] = 0x69\n108451: u8 [a0 + 16] = 0x62\n108455: u8 [a0 + 10] = 0x62\n108459: u8 [a0 + 8] = 0x61\n108463: u8 [a0 + 31] = 0\n108466: u8 [a0 + 30] = 0\n108469: u8 [a0 + 29] = 0\n108472: u8 [a0 + 28] = 0\n108475: u8 [a0 + 24] = 0x20\n108479: u8 [a0 + 20] = 0x20\n108483: u8 [a0 + 15] = 0x20\n108487: u8 [a0 + 7] = 0x20\n108491: u8 [a0 + 6] = 0x3a\n108495: u8 [a0 + 27] = 0x77\n108499: u8 [a0 + 5] = 0x77\n108503: u8 [a0 + 26] = 0x6f\n108507: u8 [a0 + 23] = 0x6f\n108511: u8 [a0 + 22] = 0x6f\n108515: u8 [a0 + 17] = 0x6f\n108519: u8 [a0 + 4] = 0x6f\n108523: u8 [a0 + 14] = 0x72\n108527: u8 [a0 + 9] = 0x72\n108531: u8 [a0 + 3] = 0x72\n108535: u8 [a0 + 2] = 0x63\n108539: u8 [a0 + 1] = 0x73\n108543: u8 [a0 + 0] = 0x45\n108546: a1 = u64 [sp]\n108548: a0 = a1 + 0x60\n108551: a1 = a0 <u a1\n108554: a3 = u64 [sp + 0x8]\n108557: a2 = a3 + a1\n108560: a3 = a2 <u a3\n108563: a3 = a1 if a1 == 0\n108566: a1 = u64 [sp + 0x10]\n108569: a3 = a3 + a1\n108572: a1 = a3 <u a1\n108575: a4 = u64 [sp + 0x18]\n108578: a1 = a1 + a4\n108581: a4 = u64 [sp + 0x28]\n108584: u64 [a4] = a0\n108586: u64 [a4 + 0x8] = a2\n108589: u64 [a4 + 0x10] = a3\n108592: u64 [a4 + 0x18] = a1\n108595: ra = u64 [sp + 0x58]\n108598: s0 = u64 [sp + 0x50]\n108601: s1 = u64 [sp + 0x48]\n108604: sp = sp + 0x60\n108607: ret\n      : @1285 (gas: 1)\n108609: trap\n      : @1286 (gas: 17)\n108610: sp = sp + 0xffffffffffffffa0\n108613: u64 [sp + 0x58] = ra\n108616: u64 [sp + 0x50] = s0\n108619: u64 [sp + 0x48] = s1\n108622: a3 = u64 [a1 + 0x18]\n108625: a4 = u64 [a1 + 0x10]\n108628: a5 = u64 [a1 + 0x8]\n108631: s1 = u64 [a1]\n108633: a1 = a5 | a3\n108636: a2 = s1 | a4\n108639: a2 = a2 | a1\n108642: a2 = a2 >> 0x20\n108645: a1 = a1 | a4\n108648: a1 = a1 << 0x20\n108651: a1 = a1 | a2\n108654: u64 [sp + 0x20] = a0\n108657: jump @1295 if a1 != 0\n      : @1287 (gas: 19)\n108661: a0 = s1 + 0x20\n108664: u64 [sp + 0x38] = a0\n108667: a0 = a0 <u s1\n108670: a1 = a5 + a0\n108673: u64 [sp + 0x40] = a1\n108676: u64 [sp + 0x8] = a5\n108679: s0 = a1 <u a5\n108682: s0 = a0 if a0 == 0\n108685: s0 = s0 + a4\n108688: u64 [sp + 0x10] = a4\n108691: a0 = s0 <u a4\n108694: u64 [sp + 0x18] = a3\n108697: a0 = a0 + a3\n108700: u64 [sp + 0x30] = a0\n108703: u64 [sp] = s1\n108705: i32 a0 = s1 + 0\n108707: a1 = 0x20\n108710: s1 = 0x20\n108713: ra = 1196, jump @0\n      : @1288 [@dyn 598] (gas: 43)\n108720: u8 [a0 + 0x1f] = s1\n108723: a1 = u64 [sp + 0x38]\n108726: a1 = a1 | s0\n108729: a2 = u64 [sp + 0x40]\n108732: a3 = u64 [sp + 0x30]\n108735: a2 = a2 | a3\n108738: a1 = a1 | a2\n108741: a1 = a1 >> 0x20\n108744: a2 = a2 | s0\n108747: a2 = a2 << 0x20\n108750: a1 = a1 | a2\n108753: u8 [a0 + 30] = 0\n108756: u8 [a0 + 29] = 0\n108759: u8 [a0 + 28] = 0\n108762: u8 [a0 + 27] = 0\n108765: u8 [a0 + 26] = 0\n108768: u8 [a0 + 25] = 0\n108771: u8 [a0 + 24] = 0\n108774: u8 [a0 + 23] = 0\n108777: u8 [a0 + 22] = 0\n108780: u8 [a0 + 21] = 0\n108783: u8 [a0 + 20] = 0\n108786: u8 [a0 + 19] = 0\n108789: u8 [a0 + 18] = 0\n108792: u8 [a0 + 17] = 0\n108795: u8 [a0 + 16] = 0\n108798: u8 [a0 + 15] = 0\n108801: u8 [a0 + 14] = 0\n108804: u8 [a0 + 13] = 0\n108807: u8 [a0 + 12] = 0\n108810: u8 [a0 + 11] = 0\n108813: u8 [a0 + 10] = 0\n108816: u8 [a0 + 9] = 0\n108819: u8 [a0 + 8] = 0\n108822: u8 [a0 + 7] = 0\n108825: u8 [a0 + 6] = 0\n108828: u8 [a0 + 5] = 0\n108831: u8 [a0 + 4] = 0\n108834: u8 [a0 + 3] = 0\n108837: u8 [a0 + 2] = 0\n108840: u8 [a0 + 1] = 0\n108843: u8 [a0 + 0] = 0\n108845: jump @1295 if a1 != 0\n      : @1289 (gas: 6)\n108849: s1 = s0\n108851: s0 = u64 [sp + 0x38]\n108854: i32 a0 = s0 + 0\n108856: a1 = 0x20\n108859: u64 [sp + 0x28] = a0\n108862: ra = 1198, jump @0\n      : @1290 [@dyn 599] (gas: 42)\n108869: u8 [a0 + 31] = 0x23\n108873: u8 [a0 + 30] = 0\n108876: u8 [a0 + 29] = 0\n108879: u8 [a0 + 28] = 0\n108882: u8 [a0 + 27] = 0\n108885: u8 [a0 + 26] = 0\n108888: u8 [a0 + 25] = 0\n108891: u8 [a0 + 24] = 0\n108894: u8 [a0 + 23] = 0\n108897: u8 [a0 + 22] = 0\n108900: u8 [a0 + 21] = 0\n108903: u8 [a0 + 20] = 0\n108906: u8 [a0 + 19] = 0\n108909: u8 [a0 + 18] = 0\n108912: u8 [a0 + 17] = 0\n108915: u8 [a0 + 16] = 0\n108918: u8 [a0 + 15] = 0\n108921: u8 [a0 + 14] = 0\n108924: u8 [a0 + 13] = 0\n108927: u8 [a0 + 12] = 0\n108930: u8 [a0 + 11] = 0\n108933: u8 [a0 + 10] = 0\n108936: u8 [a0 + 9] = 0\n108939: u8 [a0 + 8] = 0\n108942: u8 [a0 + 7] = 0\n108945: u8 [a0 + 6] = 0\n108948: u8 [a0 + 5] = 0\n108951: u8 [a0 + 4] = 0\n108954: u8 [a0 + 3] = 0\n108957: u8 [a0 + 2] = 0\n108960: u8 [a0 + 1] = 0\n108963: a1 = u64 [sp + 0x30]\n108966: a2 = s1 | a1\n108969: s1 = 0x100000000\n108979: a1 = 0xffffffe0\n108989: a1 = s0 <u a1\n108992: s0 = a2\n108994: a2 = u64 [sp + 0x40]\n108997: a1 = 0 if a2 != 0\n108999: a1 = 0 if s0 != 0\n109001: u8 [a0 + 0] = 0\n109003: jump @1295 if a1 == 0\n      : @1291 (gas: 4)\n109007: a0 = u64 [sp + 0x28]\n109010: i32 a0 = a0 + 0x20\n109013: a1 = 0x20\n109016: ra = 1200, jump @0\n      : @1292 [@dyn 600] (gas: 41)\n109023: u8 [a0 + 28] = 0x66\n109027: u8 [a0 + 27] = 0x66\n109031: u8 [a0 + 26] = 0x75\n109035: u8 [a0 + 20] = 0x6b\n109039: u8 [a0 + 19] = 0x61\n109043: u8 [a0 + 13] = 0x64\n109047: u8 [a0 + 31] = 0x69\n109051: u8 [a0 + 29] = 0x69\n109055: u8 [a0 + 23] = 0x69\n109059: u8 [a0 + 12] = 0x69\n109063: u8 [a0 + 11] = 0x76\n109067: u8 [a0 + 8] = 0x70\n109071: u8 [a0 + 22] = 0x20\n109075: u8 [a0 + 16] = 0x20\n109079: u8 [a0 + 7] = 0x20\n109083: u8 [a0 + 6] = 0x3a\n109087: u8 [a0 + 5] = 0x77\n109091: u8 [a0 + 10] = 0x6f\n109095: u8 [a0 + 4] = 0x6f\n109099: u8 [a0 + 15] = 0x72\n109103: u8 [a0 + 9] = 0x72\n109107: u8 [a0 + 3] = 0x72\n109111: u8 [a0 + 30] = 0x63\n109115: u8 [a0 + 2] = 0x63\n109119: u8 [a0 + 25] = 0x73\n109123: u8 [a0 + 17] = 0x73\n109127: u8 [a0 + 1] = 0x73\n109131: u8 [a0 + 0] = 0x45\n109134: a1 = s1 + 0xffffffffffffffc0\n109137: a2 = u64 [sp + 0x38]\n109140: a1 = a2 <u a1\n109143: u8 [a0 + 24] = 0x6e\n109147: a2 = u64 [sp + 0x40]\n109150: a1 = 0 if a2 != 0\n109152: s1 = 0x65\n109155: u8 [a0 + 0x15] = s1\n109158: a1 = 0 if s0 != 0\n109160: s0 = 0x74\n109163: u8 [a0 + 0x12] = s0\n109166: u8 [a0 + 0xe] = s1\n109169: jump @1295 if a1 == 0\n      : @1293 (gas: 4)\n109173: a0 = u64 [sp + 0x28]\n109176: i32 a0 = a0 + 0x40\n109179: a1 = 0x20\n109182: ra = 1202, jump @0\n      : @1294 [@dyn 601] (gas: 54)\n109189: u8 [a0 + 31] = 0\n109192: u8 [a0 + 30] = 0\n109195: u8 [a0 + 29] = 0\n109198: u8 [a0 + 28] = 0\n109201: u8 [a0 + 27] = 0\n109204: u8 [a0 + 26] = 0\n109207: u8 [a0 + 25] = 0\n109210: u8 [a0 + 24] = 0\n109213: u8 [a0 + 23] = 0\n109216: u8 [a0 + 22] = 0\n109219: u8 [a0 + 21] = 0\n109222: u8 [a0 + 20] = 0\n109225: u8 [a0 + 19] = 0\n109228: u8 [a0 + 18] = 0\n109231: u8 [a0 + 17] = 0\n109234: u8 [a0 + 16] = 0\n109237: u8 [a0 + 15] = 0\n109240: u8 [a0 + 14] = 0\n109243: u8 [a0 + 13] = 0\n109246: u8 [a0 + 12] = 0\n109249: u8 [a0 + 11] = 0\n109252: u8 [a0 + 10] = 0\n109255: u8 [a0 + 9] = 0\n109258: u8 [a0 + 8] = 0\n109261: u8 [a0 + 7] = 0\n109264: u8 [a0 + 6] = 0\n109267: u8 [a0 + 5] = 0\n109270: u8 [a0 + 4] = 0\n109273: u8 [a0 + 3] = 0\n109276: u8 [a0 + 0x2] = s0\n109279: u8 [a0 + 1] = 0x6e\n109283: u8 [a0] = s1\n109285: a1 = u64 [sp]\n109287: a0 = a1 + 0x80\n109291: a1 = a0 <u a1\n109294: a3 = u64 [sp + 0x8]\n109297: a2 = a3 + a1\n109300: a3 = a2 <u a3\n109303: a3 = a1 if a1 == 0\n109306: a1 = u64 [sp + 0x10]\n109309: a3 = a3 + a1\n109312: a1 = a3 <u a1\n109315: a4 = u64 [sp + 0x18]\n109318: a1 = a1 + a4\n109321: a4 = u64 [sp + 0x20]\n109324: u64 [a4] = a0\n109326: u64 [a4 + 0x8] = a2\n109329: u64 [a4 + 0x10] = a3\n109332: u64 [a4 + 0x18] = a1\n109335: ra = u64 [sp + 0x58]\n109338: s0 = u64 [sp + 0x50]\n109341: s1 = u64 [sp + 0x48]\n109344: sp = sp + 0x60\n109347: ret\n      : @1295 (gas: 1)\n109349: trap\n      : @1296 [@dyn 602] (gas: 103)\n109350: a1 = u64 [s1 + 0x1f8]\n109354: a1 = reverse a1\n109356: u64 [s1 + 0x1f8] = a1\n109360: a2 = u64 [s1 + 0x1f0]\n109364: a2 = reverse a2\n109366: u64 [s1 + 0x1f0] = a2\n109370: a3 = u64 [s1 + 0x1e8]\n109374: a3 = reverse a3\n109376: u64 [s1 + 0x1e8] = a3\n109380: a4 = u64 [s1 + 0x1e0]\n109384: a4 = reverse a4\n109386: u64 [s1 + 0x1e0] = a4\n109390: u8 [a0 + 0x18] = a4\n109393: u8 [a0 + 0x10] = a3\n109396: u8 [a0 + 0x8] = a2\n109399: u8 [a0] = a1\n109401: a5 = a4 >> 0x38\n109404: u64 [s1 + 0x198] = a5\n109408: u8 [a0 + 0x1f] = a5\n109411: a5 = a4 >> 0x30\n109414: u64 [s1 + 0x190] = a5\n109418: u8 [a0 + 0x1e] = a5\n109421: a5 = a4 >> 0x28\n109424: u64 [s1 + 0x188] = a5\n109428: u8 [a0 + 0x1d] = a5\n109431: a5 = a4 >> 0x20\n109434: u64 [s1 + 0x180] = a5\n109438: u8 [a0 + 0x1c] = a5\n109441: a5 = a4 >> 0x18\n109444: u64 [s1 + 0x178] = a5\n109448: u8 [a0 + 0x1b] = a5\n109451: a5 = a4 >> 0x10\n109454: u64 [s1 + 0x170] = a5\n109458: u8 [a0 + 0x1a] = a5\n109461: a4 = a4 >> 0x8\n109464: u64 [s1 + 0x168] = a4\n109468: u8 [a0 + 0x19] = a4\n109471: a4 = a3 >> 0x38\n109474: u64 [s1 + 0x160] = a4\n109478: u8 [a0 + 0x17] = a4\n109481: a4 = a3 >> 0x30\n109484: u64 [s1 + 0x158] = a4\n109488: u8 [a0 + 0x16] = a4\n109491: a4 = a3 >> 0x28\n109494: u64 [s1 + 0x150] = a4\n109498: u8 [a0 + 0x15] = a4\n109501: a4 = a3 >> 0x20\n109504: u64 [s1 + 0x148] = a4\n109508: u8 [a0 + 0x14] = a4\n109511: a4 = a3 >> 0x18\n109514: u64 [s1 + 0x140] = a4\n109518: u8 [a0 + 0x13] = a4\n109521: a4 = a3 >> 0x10\n109524: u64 [s1 + 0x138] = a4\n109528: u8 [a0 + 0x12] = a4\n109531: a3 = a3 >> 0x8\n109534: u64 [s1 + 0x130] = a3\n109538: u8 [a0 + 0x11] = a3\n109541: a3 = a2 >> 0x38\n109544: u64 [s1 + 0x128] = a3\n109548: u8 [a0 + 0xf] = a3\n109551: a3 = a2 >> 0x30\n109554: u64 [s1 + 0x120] = a3\n109558: u8 [a0 + 0xe] = a3\n109561: a3 = a2 >> 0x28\n109564: u64 [s1 + 0x118] = a3\n109568: u8 [a0 + 0xd] = a3\n109571: a3 = a2 >> 0x20\n109574: u64 [s1 + 0x110] = a3\n109578: u8 [a0 + 0xc] = a3\n109581: a3 = a2 >> 0x18\n109584: u64 [s1 + 0x108] = a3\n109588: u8 [a0 + 0xb] = a3\n109591: a3 = a2 >> 0x10\n109594: u64 [s1 + 0x100] = a3\n109598: u8 [a0 + 0xa] = a3\n109601: a2 = a2 >> 0x8\n109604: u64 [s1 + 0xf8] = a2\n109608: u8 [a0 + 0x9] = a2\n109611: a2 = a1 >> 0x38\n109614: u64 [s1 + 0xf0] = a2\n109618: u8 [a0 + 0x7] = a2\n109621: a2 = a1 >> 0x30\n109624: u64 [s1 + 0xe8] = a2\n109628: u8 [a0 + 0x6] = a2\n109631: a2 = a1 >> 0x28\n109634: u64 [s1 + 0xe0] = a2\n109638: u8 [a0 + 0x5] = a2\n109641: a2 = a1 >> 0x20\n109644: u64 [s1 + 0xd8] = a2\n109648: u8 [a0 + 0x4] = a2\n109651: a2 = a1 >> 0x18\n109654: u64 [s1 + 0xd0] = a2\n109658: u8 [a0 + 0x3] = a2\n109661: a2 = a1 >> 0x10\n109664: u64 [s1 + 0xc8] = a2\n109668: u8 [a0 + 0x2] = a2\n109671: a1 = a1 >> 0x8\n109674: u64 [s1 + 0xc0] = a1\n109678: u8 [a0 + 0x1] = a1\n109681: a0 = 0x20\n109684: a1 = 0x20\n109687: ra = 1206, jump @0\n      : @1297 [@dyn 603] (gas: 35)\n109694: u8 [a0 + 31] = 0\n109697: u8 [a0 + 30] = 0\n109700: u8 [a0 + 29] = 0\n109703: u8 [a0 + 28] = 0\n109706: u8 [a0 + 27] = 0\n109709: u8 [a0 + 26] = 0\n109712: u8 [a0 + 25] = 0\n109715: u8 [a0 + 24] = 0\n109718: u8 [a0 + 23] = 0\n109721: u8 [a0 + 22] = 0\n109724: u8 [a0 + 21] = 0\n109727: u8 [a0 + 20] = 0\n109730: u8 [a0 + 19] = 0\n109733: u8 [a0 + 18] = 0\n109736: u8 [a0 + 17] = 0\n109739: u8 [a0 + 16] = 0\n109742: u8 [a0 + 15] = 0\n109745: u8 [a0 + 14] = 0\n109748: u8 [a0 + 13] = 0\n109751: u8 [a0 + 12] = 0\n109754: u8 [a0 + 11] = 0\n109757: u8 [a0 + 10] = 0\n109760: u8 [a0 + 9] = 0\n109763: u8 [a0 + 8] = 0\n109766: u8 [a0 + 7] = 0\n109769: u8 [a0 + 6] = 0\n109772: u8 [a0 + 5] = 0\n109775: u8 [a0 + 4] = 0\n109778: u8 [a0 + 3] = 0\n109781: u8 [a0 + 2] = 0\n109784: u8 [a0 + 1] = 0\n109787: u8 [a0 + 0] = 0\n109789: a1 = 0x40\n109792: a0 = 0\n109794: ra = 1208, jump @0\n      : @1298 [@dyn 604] (gas: 19)\n109801: i32 a0 = a0 + 0\n109803: i32 a2 = s1 + 0x440\n109807: a1 = 0x40\n109810: ecalli 8 // 'hash_keccak_256'\n109812: a0 = u64 [s1 + 0x458]\n109816: a1 = u64 [s1 + 0x450]\n109820: a2 = u64 [s1 + 0x448]\n109824: a3 = u64 [s1 + 0x440]\n109828: a0 = reverse a0\n109830: u64 [s1 + 0x1b8] = a0\n109834: a0 = reverse a1\n109836: u64 [s1 + 0x1b0] = a0\n109840: a0 = reverse a2\n109842: u64 [s1 + 0x1a8] = a0\n109846: a0 = reverse a3\n109848: u64 [s1 + 0x1a0] = a0\n109852: a1 = 0x20\n109855: a0 = 0\n109857: ra = 1210, jump @0\n      : @1299 [@dyn 605] (gas: 67)\n109864: a1 = u64 [s1 + 0x198]\n109868: u8 [a0 + 0x1f] = a1\n109871: a1 = u64 [s1 + 0x190]\n109875: u8 [a0 + 0x1e] = a1\n109878: a1 = u64 [s1 + 0x188]\n109882: u8 [a0 + 0x1d] = a1\n109885: a1 = u64 [s1 + 0x180]\n109889: u8 [a0 + 0x1c] = a1\n109892: a1 = u64 [s1 + 0x178]\n109896: u8 [a0 + 0x1b] = a1\n109899: a1 = u64 [s1 + 0x170]\n109903: u8 [a0 + 0x1a] = a1\n109906: a1 = u64 [s1 + 0x168]\n109910: u8 [a0 + 0x19] = a1\n109913: a1 = u64 [s1 + 0x1e0]\n109917: u8 [a0 + 0x18] = a1\n109920: a1 = u64 [s1 + 0x160]\n109924: u8 [a0 + 0x17] = a1\n109927: a1 = u64 [s1 + 0x158]\n109931: u8 [a0 + 0x16] = a1\n109934: a1 = u64 [s1 + 0x150]\n109938: u8 [a0 + 0x15] = a1\n109941: a1 = u64 [s1 + 0x148]\n109945: u8 [a0 + 0x14] = a1\n109948: a1 = u64 [s1 + 0x140]\n109952: u8 [a0 + 0x13] = a1\n109955: a1 = u64 [s1 + 0x138]\n109959: u8 [a0 + 0x12] = a1\n109962: a1 = u64 [s1 + 0x130]\n109966: u8 [a0 + 0x11] = a1\n109969: a1 = u64 [s1 + 0x1e8]\n109973: u8 [a0 + 0x10] = a1\n109976: a1 = u64 [s1 + 0x128]\n109980: u8 [a0 + 0xf] = a1\n109983: a1 = u64 [s1 + 0x120]\n109987: u8 [a0 + 0xe] = a1\n109990: a1 = u64 [s1 + 0x118]\n109994: u8 [a0 + 0xd] = a1\n109997: a1 = u64 [s1 + 0x110]\n110001: u8 [a0 + 0xc] = a1\n110004: a1 = u64 [s1 + 0x108]\n110008: u8 [a0 + 0xb] = a1\n110011: a1 = u64 [s1 + 0x100]\n110015: u8 [a0 + 0xa] = a1\n110018: a1 = u64 [s1 + 0xf8]\n110022: u8 [a0 + 0x9] = a1\n110025: a1 = u64 [s1 + 0x1f0]\n110029: u8 [a0 + 0x8] = a1\n110032: a1 = u64 [s1 + 0xf0]\n110036: u8 [a0 + 0x7] = a1\n110039: a1 = u64 [s1 + 0xe8]\n110043: u8 [a0 + 0x6] = a1\n110046: a1 = u64 [s1 + 0xe0]\n110050: u8 [a0 + 0x5] = a1\n110053: a1 = u64 [s1 + 0xd8]\n110057: u8 [a0 + 0x4] = a1\n110060: a1 = u64 [s1 + 0xd0]\n110064: u8 [a0 + 0x3] = a1\n110067: a1 = u64 [s1 + 0xc8]\n110071: u8 [a0 + 0x2] = a1\n110074: a1 = u64 [s1 + 0xc0]\n110078: u8 [a0 + 0x1] = a1\n110081: a1 = u64 [s1 + 0x1f8]\n110085: u8 [a0] = a1\n110087: a0 = 0x20\n110090: a1 = 0x20\n110093: ra = 1212, jump @0\n      : @1300 [@dyn 606] (gas: 35)\n110100: u8 [a0 + 31] = 0x3\n110104: u8 [a0 + 30] = 0\n110107: u8 [a0 + 29] = 0\n110110: u8 [a0 + 28] = 0\n110113: u8 [a0 + 27] = 0\n110116: u8 [a0 + 26] = 0\n110119: u8 [a0 + 25] = 0\n110122: u8 [a0 + 24] = 0\n110125: u8 [a0 + 23] = 0\n110128: u8 [a0 + 22] = 0\n110131: u8 [a0 + 21] = 0\n110134: u8 [a0 + 20] = 0\n110137: u8 [a0 + 19] = 0\n110140: u8 [a0 + 18] = 0\n110143: u8 [a0 + 17] = 0\n110146: u8 [a0 + 16] = 0\n110149: u8 [a0 + 15] = 0\n110152: u8 [a0 + 14] = 0\n110155: u8 [a0 + 13] = 0\n110158: u8 [a0 + 12] = 0\n110161: u8 [a0 + 11] = 0\n110164: u8 [a0 + 10] = 0\n110167: u8 [a0 + 9] = 0\n110170: u8 [a0 + 8] = 0\n110173: u8 [a0 + 7] = 0\n110176: u8 [a0 + 6] = 0\n110179: u8 [a0 + 5] = 0\n110182: u8 [a0 + 4] = 0\n110185: u8 [a0 + 3] = 0\n110188: u8 [a0 + 2] = 0\n110191: u8 [a0 + 1] = 0\n110194: u8 [a0 + 0] = 0\n110196: a1 = 0x40\n110199: a0 = 0\n110201: ra = 1214, jump @0\n      : @1301 [@dyn 607] (gas: 15)\n110208: i32 a0 = a0 + 0\n110210: i32 a2 = s1 + 0x440\n110214: a1 = 0x40\n110217: ecalli 8 // 'hash_keccak_256'\n110219: a0 = u64 [s1 + 0x440]\n110223: u64 [s1 + 0xb8] = a0\n110227: a0 = u64 [s1 + 0x448]\n110231: u64 [s1 + 0xb0] = a0\n110235: a0 = u64 [s1 + 0x450]\n110239: u64 [s1 + 0xa8] = a0\n110243: a0 = u64 [s1 + 0x458]\n110247: u64 [s1 + 0xa0] = a0\n110251: a1 = 0x20\n110254: a0 = 0\n110256: ra = 1216, jump @0\n      : @1302 [@dyn 608] (gas: 75)\n110263: a1 = u64 [s1 + 0x1c0]\n110267: a2 = reverse a1\n110269: a1 = u64 [s1 + 0x1c8]\n110273: a3 = reverse a1\n110275: a1 = u64 [s1 + 0x1d0]\n110279: a4 = reverse a1\n110281: a1 = u64 [s1 + 0x1d8]\n110285: a5 = reverse a1\n110287: a1 = a5 >> 0x38\n110290: u8 [a0 + 0x1f] = a1\n110293: a1 = a5 >> 0x30\n110296: u8 [a0 + 0x1e] = a1\n110299: a1 = a5 >> 0x28\n110302: u8 [a0 + 0x1d] = a1\n110305: a1 = a5 >> 0x20\n110308: u8 [a0 + 0x1c] = a1\n110311: a1 = a5 >> 0x18\n110314: u8 [a0 + 0x1b] = a1\n110317: a1 = a5 >> 0x10\n110320: u8 [a0 + 0x1a] = a1\n110323: a1 = a5 >> 0x8\n110326: u8 [a0 + 0x19] = a1\n110329: u64 [s1 + 0x40] = a5\n110332: u8 [a0 + 0x18] = a5\n110335: a1 = a4 >> 0x38\n110338: u8 [a0 + 0x17] = a1\n110341: a1 = a4 >> 0x30\n110344: u8 [a0 + 0x16] = a1\n110347: a1 = a4 >> 0x28\n110350: u8 [a0 + 0x15] = a1\n110353: a1 = a4 >> 0x20\n110356: u8 [a0 + 0x14] = a1\n110359: a1 = a4 >> 0x18\n110362: u8 [a0 + 0x13] = a1\n110365: a1 = a4 >> 0x10\n110368: u8 [a0 + 0x12] = a1\n110371: a1 = a4 >> 0x8\n110374: u8 [a0 + 0x11] = a1\n110377: u64 [s1 + 0x48] = a4\n110380: u8 [a0 + 0x10] = a4\n110383: a1 = a3 >> 0x38\n110386: u8 [a0 + 0xf] = a1\n110389: a1 = a3 >> 0x30\n110392: u8 [a0 + 0xe] = a1\n110395: a1 = a3 >> 0x28\n110398: u8 [a0 + 0xd] = a1\n110401: a1 = a3 >> 0x20\n110404: u8 [a0 + 0xc] = a1\n110407: a1 = a3 >> 0x18\n110410: u8 [a0 + 0xb] = a1\n110413: a1 = a3 >> 0x10\n110416: u8 [a0 + 0xa] = a1\n110419: a1 = a3 >> 0x8\n110422: u8 [a0 + 0x9] = a1\n110425: u64 [s1 + 0x50] = a3\n110428: u8 [a0 + 0x8] = a3\n110431: a1 = a2 >> 0x38\n110434: u8 [a0 + 0x7] = a1\n110437: a1 = a2 >> 0x30\n110440: u8 [a0 + 0x6] = a1\n110443: a1 = a2 >> 0x28\n110446: u8 [a0 + 0x5] = a1\n110449: a1 = a2 >> 0x20\n110452: u8 [a0 + 0x4] = a1\n110455: a1 = a2 >> 0x18\n110458: u8 [a0 + 0x3] = a1\n110461: a1 = a2 >> 0x10\n110464: u8 [a0 + 0x2] = a1\n110467: a1 = a2 >> 0x8\n110470: u8 [a0 + 0x1] = a1\n110473: u64 [s1 + 0x58] = a2\n110476: u8 [a0] = a2\n110478: a0 = 0x20\n110481: a1 = 0x20\n110484: ra = 1218, jump @0\n      : @1303 [@dyn 609] (gas: 67)\n110491: a2 = u64 [s1 + 0xa0]\n110495: a1 = a2 >> 0x38\n110498: u8 [a0 + 0x1f] = a1\n110501: a1 = a2 >> 0x30\n110504: u8 [a0 + 0x1e] = a1\n110507: a1 = a2 >> 0x28\n110510: u8 [a0 + 0x1d] = a1\n110513: a1 = a2 >> 0x20\n110516: u8 [a0 + 0x1c] = a1\n110519: a1 = a2 >> 0x18\n110522: u8 [a0 + 0x1b] = a1\n110525: a1 = a2 >> 0x10\n110528: u8 [a0 + 0x1a] = a1\n110531: a1 = a2 >> 0x8\n110534: u8 [a0 + 0x19] = a1\n110537: u8 [a0 + 0x18] = a2\n110540: a2 = u64 [s1 + 0xa8]\n110544: a1 = a2 >> 0x38\n110547: u8 [a0 + 0x17] = a1\n110550: a1 = a2 >> 0x30\n110553: u8 [a0 + 0x16] = a1\n110556: a1 = a2 >> 0x28\n110559: u8 [a0 + 0x15] = a1\n110562: a1 = a2 >> 0x20\n110565: u8 [a0 + 0x14] = a1\n110568: a1 = a2 >> 0x18\n110571: u8 [a0 + 0x13] = a1\n110574: a1 = a2 >> 0x10\n110577: u8 [a0 + 0x12] = a1\n110580: a1 = a2 >> 0x8\n110583: u8 [a0 + 0x11] = a1\n110586: u8 [a0 + 0x10] = a2\n110589: a2 = u64 [s1 + 0xb0]\n110593: a1 = a2 >> 0x38\n110596: u8 [a0 + 0xf] = a1\n110599: a1 = a2 >> 0x30\n110602: u8 [a0 + 0xe] = a1\n110605: a1 = a2 >> 0x28\n110608: u8 [a0 + 0xd] = a1\n110611: a1 = a2 >> 0x20\n110614: u8 [a0 + 0xc] = a1\n110617: a1 = a2 >> 0x18\n110620: u8 [a0 + 0xb] = a1\n110623: a1 = a2 >> 0x10\n110626: u8 [a0 + 0xa] = a1\n110629: a1 = a2 >> 0x8\n110632: u8 [a0 + 0x9] = a1\n110635: u8 [a0 + 0x8] = a2\n110638: a2 = u64 [s1 + 0xb8]\n110642: a1 = a2 >> 0x38\n110645: u8 [a0 + 0x7] = a1\n110648: a1 = a2 >> 0x30\n110651: u8 [a0 + 0x6] = a1\n110654: a1 = a2 >> 0x28\n110657: u8 [a0 + 0x5] = a1\n110660: a1 = a2 >> 0x20\n110663: u8 [a0 + 0x4] = a1\n110666: a1 = a2 >> 0x18\n110669: u8 [a0 + 0x3] = a1\n110672: a1 = a2 >> 0x10\n110675: u8 [a0 + 0x2] = a1\n110678: a1 = a2 >> 0x8\n110681: u8 [a0 + 0x1] = a1\n110684: u8 [a0] = a2\n110686: a1 = 0x40\n110689: a0 = 0\n110691: ra = 1220, jump @0\n      : @1304 [@dyn 610] (gas: 32)\n110698: i32 a0 = a0 + 0\n110700: i32 a2 = s1 + 0x440\n110704: a1 = 0x40\n110707: ecalli 8 // 'hash_keccak_256'\n110709: a0 = u64 [s1 + 0x458]\n110713: u64 [s1 + 0x1d8] = a0\n110717: a0 = u64 [s1 + 0x450]\n110721: u64 [s1 + 0x1d0] = a0\n110725: a0 = u64 [s1 + 0x448]\n110729: u64 [s1 + 0x1c8] = a0\n110733: a0 = u64 [s1 + 0x440]\n110737: u64 [s1 + 0x1c0] = a0\n110741: a0 = u64 [s1 + 0x1a0]\n110745: u64 [s1 + 0x4d8] = a0\n110749: a0 = u64 [s1 + 0x1a8]\n110753: u64 [s1 + 0x4d0] = a0\n110757: a0 = u64 [s1 + 0x1b0]\n110761: u64 [s1 + 0x4c8] = a0\n110765: a0 = u64 [s1 + 0x1b8]\n110769: u64 [s1 + 0x4c0] = a0\n110773: u64 [s1 + 1112] = 0\n110777: u64 [s1 + 1104] = 0\n110781: u64 [s1 + 1096] = 0\n110785: u64 [s1 + 1088] = 0\n110789: u32 [s1 + 1248] = 0x20\n110794: i32 a1 = s1 + 0x4c0\n110798: i32 a3 = s1 + 0x440\n110802: i32 a4 = s1 + 0x4e0\n110806: a2 = 0xffffffffffffffff\n110809: a0 = 0\n110811: ecalli 7 // 'get_storage'\n110813: fallthrough\n      : @1305 (gas: 6)\n110814: a0 = u64 [s1 + 0x440]\n110818: a1 = u32 [s1 + 0x450]\n110822: a2 = u64 [s1 + 0x448]\n110826: a0 = a0 | a1\n110829: a0 = a0 | a2\n110832: jump @1307 if a0 != 0\n      : @1306 (gas: 1)\n110835: jump @1340\n      : @1307 (gas: 40)\n110838: a0 = u64 [s1 + 0x1c0]\n110842: a2 = reverse a0\n110844: a0 = u64 [s1 + 0x1c8]\n110848: a3 = reverse a0\n110850: a0 = u64 [s1 + 0x1d0]\n110854: a1 = reverse a0\n110856: a0 = u64 [s1 + 0x1d8]\n110860: a0 = reverse a0\n110862: a4 = a0 + 0x2\n110865: u64 [s1 + 0xa0] = a0\n110869: a0 = a4 <u a0\n110872: a5 = a1 + a0\n110875: u64 [s1 + 0xa8] = a1\n110879: a1 = a5 <u a1\n110882: a1 = a0 if a0 == 0\n110885: a1 = a1 + a3\n110888: u64 [s1 + 0xb0] = a3\n110892: a0 = a1 <u a3\n110895: u64 [s1 + 0xb8] = a2\n110899: a0 = a0 + a2\n110902: u64 [s1 + 0x1d8] = a4\n110906: u64 [s1 + 0x4c0] = a4\n110910: u64 [s1 + 0x1d0] = a5\n110914: u64 [s1 + 0x4c8] = a5\n110918: u64 [s1 + 0x1c8] = a1\n110922: u64 [s1 + 0x4d0] = a1\n110926: u64 [s1 + 0x1c0] = a0\n110930: u64 [s1 + 0x4d8] = a0\n110934: u64 [s1 + 1112] = 0\n110938: u64 [s1 + 1104] = 0\n110942: u64 [s1 + 1096] = 0\n110946: u64 [s1 + 1088] = 0\n110950: u32 [s1 + 1248] = 0x20\n110955: i32 a1 = s1 + 0x4c0\n110959: i32 a3 = s1 + 0x440\n110963: i32 a4 = s1 + 0x4e0\n110967: a2 = 0xffffffffffffffff\n110970: a0 = 0\n110972: ecalli 7 // 'get_storage'\n110974: fallthrough\n      : @1308 (gas: 2)\n110975: a0 = u8 [s1 + 0x441]\n110979: jump @1335 if a0 == 0\n      : @1309 (gas: 20)\n110983: a0 = u64 [s1 + 0x1c8]\n110987: u64 [s1 + 0x4d0] = a0\n110991: a0 = u64 [s1 + 0x1d0]\n110995: u64 [s1 + 0x4c8] = a0\n110999: a0 = u64 [s1 + 0x1d8]\n111003: u64 [s1 + 0x4c0] = a0\n111007: a0 = u64 [s1 + 0x1c0]\n111011: u64 [s1 + 0x4d8] = a0\n111015: u64 [s1 + 1112] = 0\n111019: u64 [s1 + 1104] = 0\n111023: u64 [s1 + 1096] = 0\n111027: u64 [s1 + 1088] = 0\n111031: u32 [s1 + 1248] = 0x20\n111036: i32 a1 = s1 + 0x4c0\n111040: i32 a3 = s1 + 0x440\n111044: i32 a4 = s1 + 0x4e0\n111048: a2 = 0xffffffffffffffff\n111051: a0 = 0\n111053: ecalli 7 // 'get_storage'\n111055: fallthrough\n      : @1310 (gas: 2)\n111056: a0 = u8 [s1 + 0x442]\n111060: jump @1335 if a0 != 0\n      : @1311 (gas: 51)\n111064: a0 = sp + 0xffffffffffffffe0\n111067: a0 = a0 & 0xffffffffffffffe0\n111070: u64 [s1 + 0x98] = a0\n111074: sp = a0\n111076: u64 [a0 + 24] = 0\n111079: u64 [a0 + 16] = 0\n111082: u64 [a0 + 8] = 0\n111085: u64 [a0 + 0] = 0\n111087: i32 a0 = a0 + 0\n111089: ecalli 15 // 'value_transferred'\n111091: a1 = u64 [s1 + 0x98]\n111095: a0 = u64 [a1]\n111097: u64 [s1 + 0x38] = a0\n111100: a0 = u64 [a1 + 0x8]\n111103: u64 [s1 + 0x30] = a0\n111106: a0 = u64 [a1 + 0x10]\n111109: u64 [s1 + 0x28] = a0\n111112: a0 = u64 [a1 + 0x18]\n111115: u64 [s1 + 0x20] = a0\n111118: a0 = u64 [s1 + 0x1b8]\n111122: a2 = a0 + 0x1\n111125: a0 = a2 <u 0x1\n111128: a1 = u64 [s1 + 0x1b0]\n111132: a3 = a1 + a0\n111135: a0 = a2 | a3\n111138: a0 = a0 <u 0x1\n111141: a1 = u64 [s1 + 0x1a8]\n111145: a4 = a1 + a0\n111148: u32 [s1 + 1248] = 0x20\n111153: a0 = a4 <u a1\n111156: a1 = u64 [s1 + 0x1a0]\n111160: a0 = a0 + a1\n111163: u64 [s1 + 0x80] = a0\n111167: u64 [s1 + 0x4d8] = a0\n111171: u64 [s1 + 0x88] = a4\n111175: u64 [s1 + 0x4d0] = a4\n111179: u64 [s1 + 0x90] = a3\n111183: u64 [s1 + 0x4c8] = a3\n111187: u64 [s1 + 0x98] = a2\n111191: u64 [s1 + 0x4c0] = a2\n111195: u64 [s1 + 1112] = 0\n111199: u64 [s1 + 1104] = 0\n111203: u64 [s1 + 1096] = 0\n111207: u64 [s1 + 1088] = 0\n111211: i32 a1 = s1 + 0x4c0\n111215: i32 a3 = s1 + 0x440\n111219: i32 a4 = s1 + 0x4e0\n111223: a2 = 0xffffffffffffffff\n111226: a0 = 0\n111228: ecalli 7 // 'get_storage'\n111230: fallthrough\n      : @1312 (gas: 20)\n111231: a0 = u64 [s1 + 0x458]\n111235: t0 = u64 [s1 + 0x440]\n111239: a2 = u64 [s1 + 0x450]\n111243: a3 = u64 [s1 + 0x448]\n111247: a1 = u64 [s1 + 0x20]\n111250: a4 = a1 ^ a0\n111253: a1 = a1 <u a0\n111256: a0 = u64 [s1 + 0x28]\n111259: a5 = a0 <u a2\n111262: a5 = a1 if a4 != 0\n111265: a1 = u64 [s1 + 0x30]\n111268: t1 = a1 ^ a3\n111271: a3 = a1 <u a3\n111274: a1 = u64 [s1 + 0x38]\n111277: a1 = a1 <u t0\n111280: a1 = a3 if t1 != 0\n111283: a0 = a0 ^ a2\n111286: a0 = a0 | a4\n111289: a1 = a5 if a0 != 0\n111292: jump @1314 if a1 == 0\n      : @1313 (gas: 1)\n111295: jump @1345\n      : @1314 (gas: 11)\n111298: a0 = u64 [s1 + 0x68]\n111301: a1 = u64 [s1 + 0x60]\n111304: a0 = a0 | a1\n111307: a1 = u64 [s1 + 0x78]\n111310: a2 = u64 [s1 + 0x70]\n111313: a1 = a1 | a2\n111316: a0 = a0 | a1\n111319: a1 = 0xffffffff\n111329: u64 [s1 + 0x70] = a0\n111332: u64 [s1 + 0x78] = a1\n111335: jump @1328 if a0 == 0\n      : @1315 (gas: 3)\n111339: a1 = 0x20\n111342: a0 = 0\n111344: ra = 1222, jump @0\n      : @1316 [@dyn 611] (gas: 67)\n111351: a1 = u64 [s1 + 0x1e8]\n111355: u8 [a0 + 0x10] = a1\n111358: a1 = u64 [s1 + 0x128]\n111362: u8 [a0 + 0xf] = a1\n111365: a1 = u64 [s1 + 0x120]\n111369: u8 [a0 + 0xe] = a1\n111372: a1 = u64 [s1 + 0x118]\n111376: u8 [a0 + 0xd] = a1\n111379: a1 = u64 [s1 + 0x110]\n111383: u8 [a0 + 0xc] = a1\n111386: a1 = u64 [s1 + 0x108]\n111390: u8 [a0 + 0xb] = a1\n111393: a1 = u64 [s1 + 0x100]\n111397: u8 [a0 + 0xa] = a1\n111400: a1 = u64 [s1 + 0xf8]\n111404: u8 [a0 + 0x9] = a1\n111407: a1 = u64 [s1 + 0x1f0]\n111411: u8 [a0 + 0x8] = a1\n111414: a1 = u64 [s1 + 0xf0]\n111418: u8 [a0 + 0x7] = a1\n111421: a1 = u64 [s1 + 0xe8]\n111425: u8 [a0 + 0x6] = a1\n111428: a1 = u64 [s1 + 0xe0]\n111432: u8 [a0 + 0x5] = a1\n111435: a1 = u64 [s1 + 0xd8]\n111439: u8 [a0 + 0x4] = a1\n111442: a1 = u64 [s1 + 0xd0]\n111446: u8 [a0 + 0x3] = a1\n111449: a1 = u64 [s1 + 0xc8]\n111453: u8 [a0 + 0x2] = a1\n111456: a1 = u64 [s1 + 0xc0]\n111460: u8 [a0 + 0x1] = a1\n111463: a1 = u64 [s1 + 0x1f8]\n111467: u8 [a0] = a1\n111469: a1 = u64 [s1 + 0x1e0]\n111473: u8 [a0 + 0x18] = a1\n111476: a1 = u64 [s1 + 0x160]\n111480: u8 [a0 + 0x17] = a1\n111483: a1 = u64 [s1 + 0x158]\n111487: u8 [a0 + 0x16] = a1\n111490: a1 = u64 [s1 + 0x150]\n111494: u8 [a0 + 0x15] = a1\n111497: a1 = u64 [s1 + 0x148]\n111501: u8 [a0 + 0x14] = a1\n111504: a1 = u64 [s1 + 0x140]\n111508: u8 [a0 + 0x13] = a1\n111511: a1 = u64 [s1 + 0x138]\n111515: u8 [a0 + 0x12] = a1\n111518: a1 = u64 [s1 + 0x130]\n111522: u8 [a0 + 0x11] = a1\n111525: a1 = u64 [s1 + 0x198]\n111529: u8 [a0 + 0x1f] = a1\n111532: a1 = u64 [s1 + 0x190]\n111536: u8 [a0 + 0x1e] = a1\n111539: a1 = u64 [s1 + 0x188]\n111543: u8 [a0 + 0x1d] = a1\n111546: a1 = u64 [s1 + 0x180]\n111550: u8 [a0 + 0x1c] = a1\n111553: a1 = u64 [s1 + 0x178]\n111557: u8 [a0 + 0x1b] = a1\n111560: a1 = u64 [s1 + 0x170]\n111564: u8 [a0 + 0x1a] = a1\n111567: a1 = u64 [s1 + 0x168]\n111571: u8 [a0 + 0x19] = a1\n111574: a0 = 0x20\n111577: a1 = 0x20\n111580: ra = 1224, jump @0\n      : @1317 [@dyn 612] (gas: 35)\n111587: u8 [a0 + 31] = 0x2\n111591: u8 [a0 + 30] = 0\n111594: u8 [a0 + 29] = 0\n111597: u8 [a0 + 28] = 0\n111600: u8 [a0 + 27] = 0\n111603: u8 [a0 + 26] = 0\n111606: u8 [a0 + 25] = 0\n111609: u8 [a0 + 24] = 0\n111612: u8 [a0 + 23] = 0\n111615: u8 [a0 + 22] = 0\n111618: u8 [a0 + 21] = 0\n111621: u8 [a0 + 20] = 0\n111624: u8 [a0 + 19] = 0\n111627: u8 [a0 + 18] = 0\n111630: u8 [a0 + 17] = 0\n111633: u8 [a0 + 16] = 0\n111636: u8 [a0 + 15] = 0\n111639: u8 [a0 + 14] = 0\n111642: u8 [a0 + 13] = 0\n111645: u8 [a0 + 12] = 0\n111648: u8 [a0 + 11] = 0\n111651: u8 [a0 + 10] = 0\n111654: u8 [a0 + 9] = 0\n111657: u8 [a0 + 8] = 0\n111660: u8 [a0 + 7] = 0\n111663: u8 [a0 + 6] = 0\n111666: u8 [a0 + 5] = 0\n111669: u8 [a0 + 4] = 0\n111672: u8 [a0 + 3] = 0\n111675: u8 [a0 + 2] = 0\n111678: u8 [a0 + 1] = 0\n111681: u8 [a0 + 0] = 0\n111683: a1 = 0x40\n111686: a0 = 0\n111688: ra = 1226, jump @0\n      : @1318 [@dyn 613] (gas: 55)\n111695: i32 a0 = a0 + 0\n111697: i32 a2 = s1 + 0x440\n111701: a1 = 0x40\n111704: ecalli 8 // 'hash_keccak_256'\n111706: a0 = u64 [s1 + 0x458]\n111710: a1 = u64 [s1 + 0x450]\n111714: a2 = u64 [s1 + 0x448]\n111718: a3 = u64 [s1 + 0x440]\n111722: a0 = reverse a0\n111724: a1 = reverse a1\n111726: a2 = reverse a2\n111728: a3 = reverse a3\n111730: u64 [s1 + 0x4d8] = a3\n111734: u64 [s1 + 0x4d0] = a2\n111738: u64 [s1 + 0x4c8] = a1\n111742: u64 [s1 + 0x4c0] = a0\n111746: u64 [s1 + 1112] = 0\n111750: u64 [s1 + 1104] = 0\n111754: u64 [s1 + 1096] = 0\n111758: u64 [s1 + 1088] = 0\n111762: u32 [s1 + 1248] = 0x20\n111767: i32 a1 = s1 + 0x4c0\n111771: i32 a3 = s1 + 0x440\n111775: i32 a4 = s1 + 0x4e0\n111779: a2 = 0xffffffffffffffff\n111782: a0 = 0\n111784: ecalli 7 // 'get_storage'\n111786: a0 = u64 [s1 + 0x440]\n111790: u64 [s1 + 0x1b8] = a0\n111794: a0 = u64 [s1 + 0x448]\n111798: u64 [s1 + 0x1b0] = a0\n111802: a0 = u64 [s1 + 0x450]\n111806: u64 [s1 + 0x1a8] = a0\n111810: a0 = u64 [s1 + 0x458]\n111814: u64 [s1 + 0x1a0] = a0\n111818: a0 = u64 [s1 + 0x80]\n111822: u64 [s1 + 0x4d8] = a0\n111826: a0 = u64 [s1 + 0x88]\n111830: u64 [s1 + 0x4d0] = a0\n111834: a0 = u64 [s1 + 0x90]\n111838: u64 [s1 + 0x4c8] = a0\n111842: a0 = u64 [s1 + 0x98]\n111846: u64 [s1 + 0x4c0] = a0\n111850: u64 [s1 + 1112] = 0\n111854: u64 [s1 + 1104] = 0\n111858: u64 [s1 + 1096] = 0\n111862: u64 [s1 + 1088] = 0\n111866: u32 [s1 + 1248] = 0x20\n111871: i32 a1 = s1 + 0x4c0\n111875: i32 a3 = s1 + 0x440\n111879: i32 a4 = s1 + 0x4e0\n111883: a2 = 0xffffffffffffffff\n111886: a0 = 0\n111888: ecalli 7 // 'get_storage'\n111890: fallthrough\n      : @1319 (gas: 20)\n111891: a0 = u64 [s1 + 0x458]\n111895: t0 = u64 [s1 + 0x440]\n111899: a2 = u64 [s1 + 0x450]\n111903: a3 = u64 [s1 + 0x448]\n111907: a1 = u64 [s1 + 0x1a0]\n111911: a4 = a1 ^ a0\n111914: a1 = a1 <u a0\n111917: a0 = u64 [s1 + 0x1a8]\n111921: a5 = a0 <u a2\n111924: a5 = a1 if a4 != 0\n111927: a1 = u64 [s1 + 0x1b0]\n111931: t1 = a1 ^ a3\n111934: a3 = a1 <u a3\n111937: a1 = u64 [s1 + 0x1b8]\n111941: a1 = a1 <u t0\n111944: a1 = a3 if t1 != 0\n111947: a0 = a0 ^ a2\n111950: a0 = a0 | a4\n111953: a1 = a5 if a0 != 0\n111956: jump @1321 if a1 == 0\n      : @1320 (gas: 1)\n111959: jump @1350\n      : @1321 (gas: 30)\n111962: a0 = u64 [s1 + 0x88]\n111966: u64 [s1 + 0x4d0] = a0\n111970: a0 = u64 [s1 + 0x90]\n111974: u64 [s1 + 0x4c8] = a0\n111978: a0 = u64 [s1 + 0x98]\n111982: u64 [s1 + 0x4c0] = a0\n111986: a0 = u64 [s1 + 0x80]\n111990: u64 [s1 + 0x4d8] = a0\n111994: u64 [s1 + 1112] = 0\n111998: u64 [s1 + 1104] = 0\n112002: u64 [s1 + 1096] = 0\n112006: u64 [s1 + 1088] = 0\n112010: u32 [s1 + 1248] = 0x20\n112015: i32 a1 = s1 + 0x4c0\n112019: i32 a3 = s1 + 0x440\n112023: i32 a4 = s1 + 0x4e0\n112027: a2 = 0xffffffffffffffff\n112030: a0 = 0\n112032: ecalli 7 // 'get_storage'\n112034: a0 = u64 [s1 + 0x458]\n112038: u64 [s1 + 0x1a8] = a0\n112042: a0 = u64 [s1 + 0x450]\n112046: u64 [s1 + 0x98] = a0\n112050: a0 = u64 [s1 + 0x448]\n112054: u64 [s1 + 0x1b0] = a0\n112058: a0 = u64 [s1 + 0x440]\n112062: u64 [s1 + 0x1b8] = a0\n112066: a1 = 0x20\n112069: a0 = 0\n112071: ra = 1228, jump @0\n      : @1322 [@dyn 614] (gas: 67)\n112078: a1 = u64 [s1 + 0x198]\n112082: u8 [a0 + 0x1f] = a1\n112085: a1 = u64 [s1 + 0x190]\n112089: u8 [a0 + 0x1e] = a1\n112092: a1 = u64 [s1 + 0x188]\n112096: u8 [a0 + 0x1d] = a1\n112099: a1 = u64 [s1 + 0x180]\n112103: u8 [a0 + 0x1c] = a1\n112106: a1 = u64 [s1 + 0x178]\n112110: u8 [a0 + 0x1b] = a1\n112113: a1 = u64 [s1 + 0x170]\n112117: u8 [a0 + 0x1a] = a1\n112120: a1 = u64 [s1 + 0x168]\n112124: u8 [a0 + 0x19] = a1\n112127: a1 = u64 [s1 + 0x160]\n112131: u8 [a0 + 0x17] = a1\n112134: a1 = u64 [s1 + 0x158]\n112138: u8 [a0 + 0x16] = a1\n112141: a1 = u64 [s1 + 0x150]\n112145: u8 [a0 + 0x15] = a1\n112148: a1 = u64 [s1 + 0x148]\n112152: u8 [a0 + 0x14] = a1\n112155: a1 = u64 [s1 + 0x140]\n112159: u8 [a0 + 0x13] = a1\n112162: a1 = u64 [s1 + 0x138]\n112166: u8 [a0 + 0x12] = a1\n112169: a1 = u64 [s1 + 0x130]\n112173: u8 [a0 + 0x11] = a1\n112176: a1 = u64 [s1 + 0x128]\n112180: u8 [a0 + 0xf] = a1\n112183: a1 = u64 [s1 + 0x120]\n112187: u8 [a0 + 0xe] = a1\n112190: a1 = u64 [s1 + 0x118]\n112194: u8 [a0 + 0xd] = a1\n112197: a1 = u64 [s1 + 0x110]\n112201: u8 [a0 + 0xc] = a1\n112204: a1 = u64 [s1 + 0x108]\n112208: u8 [a0 + 0xb] = a1\n112211: a1 = u64 [s1 + 0x100]\n112215: u8 [a0 + 0xa] = a1\n112218: a1 = u64 [s1 + 0xf8]\n112222: u8 [a0 + 0x9] = a1\n112225: a1 = u64 [s1 + 0xf0]\n112229: u8 [a0 + 0x7] = a1\n112232: a1 = u64 [s1 + 0xe8]\n112236: u8 [a0 + 0x6] = a1\n112239: a1 = u64 [s1 + 0xe0]\n112243: u8 [a0 + 0x5] = a1\n112246: a1 = u64 [s1 + 0xd8]\n112250: u8 [a0 + 0x4] = a1\n112253: a1 = u64 [s1 + 0xd0]\n112257: u8 [a0 + 0x3] = a1\n112260: a1 = u64 [s1 + 0xc8]\n112264: u8 [a0 + 0x2] = a1\n112267: a1 = u64 [s1 + 0xc0]\n112271: u8 [a0 + 0x1] = a1\n112274: a1 = u64 [s1 + 0x1e0]\n112278: u8 [a0 + 0x18] = a1\n112281: a1 = u64 [s1 + 0x1e8]\n112285: u8 [a0 + 0x10] = a1\n112288: a1 = u64 [s1 + 0x1f0]\n112292: u8 [a0 + 0x8] = a1\n112295: a1 = u64 [s1 + 0x1f8]\n112299: u8 [a0] = a1\n112301: a0 = 0x20\n112304: a1 = 0x20\n112307: ra = 1230, jump @0\n      : @1323 [@dyn 615] (gas: 35)\n112314: u8 [a0 + 31] = 0x2\n112318: u8 [a0 + 30] = 0\n112321: u8 [a0 + 29] = 0\n112324: u8 [a0 + 28] = 0\n112327: u8 [a0 + 27] = 0\n112330: u8 [a0 + 26] = 0\n112333: u8 [a0 + 25] = 0\n112336: u8 [a0 + 24] = 0\n112339: u8 [a0 + 23] = 0\n112342: u8 [a0 + 22] = 0\n112345: u8 [a0 + 21] = 0\n112348: u8 [a0 + 20] = 0\n112351: u8 [a0 + 19] = 0\n112354: u8 [a0 + 18] = 0\n112357: u8 [a0 + 17] = 0\n112360: u8 [a0 + 16] = 0\n112363: u8 [a0 + 15] = 0\n112366: u8 [a0 + 14] = 0\n112369: u8 [a0 + 13] = 0\n112372: u8 [a0 + 12] = 0\n112375: u8 [a0 + 11] = 0\n112378: u8 [a0 + 10] = 0\n112381: u8 [a0 + 9] = 0\n112384: u8 [a0 + 8] = 0\n112387: u8 [a0 + 7] = 0\n112390: u8 [a0 + 6] = 0\n112393: u8 [a0 + 5] = 0\n112396: u8 [a0 + 4] = 0\n112399: u8 [a0 + 3] = 0\n112402: u8 [a0 + 2] = 0\n112405: u8 [a0 + 1] = 0\n112408: u8 [a0 + 0] = 0\n112410: a1 = 0x40\n112413: a0 = 0\n112415: ra = 1232, jump @0\n      : @1324 [@dyn 616] (gas: 32)\n112422: i32 a0 = a0 + 0\n112424: i32 a2 = s1 + 0x440\n112428: a1 = 0x40\n112431: ecalli 8 // 'hash_keccak_256'\n112433: a0 = u64 [s1 + 0x458]\n112437: a1 = u64 [s1 + 0x450]\n112441: a2 = u64 [s1 + 0x448]\n112445: a3 = u64 [s1 + 0x440]\n112449: a0 = reverse a0\n112451: a1 = reverse a1\n112453: a2 = reverse a2\n112455: a3 = reverse a3\n112457: u64 [s1 + 0x188] = a3\n112461: u64 [s1 + 0x4d8] = a3\n112465: u64 [s1 + 0x190] = a2\n112469: u64 [s1 + 0x4d0] = a2\n112473: u64 [s1 + 0x198] = a1\n112477: u64 [s1 + 0x4c8] = a1\n112481: u64 [s1 + 0x1a0] = a0\n112485: u64 [s1 + 0x4c0] = a0\n112489: u64 [s1 + 1112] = 0\n112493: u64 [s1 + 1104] = 0\n112497: u64 [s1 + 1096] = 0\n112501: u64 [s1 + 1088] = 0\n112505: u32 [s1 + 1248] = 0x20\n112510: i32 a1 = s1 + 0x4c0\n112514: i32 a3 = s1 + 0x440\n112518: i32 a4 = s1 + 0x4e0\n112522: a2 = 0xffffffffffffffff\n112525: a0 = 0\n112527: ecalli 7 // 'get_storage'\n112529: fallthrough\n      : @1325 (gas: 24)\n112530: t1 = u64 [s1 + 0x458]\n112534: ra = u64 [s1 + 0x450]\n112538: t0 = u64 [s1 + 0x448]\n112542: a3 = u64 [s1 + 0x440]\n112546: a0 = u64 [s1 + 0x1a8]\n112550: a4 = t1 ^ a0\n112553: a5 = t1 <u a0\n112556: a2 = u64 [s1 + 0x98]\n112560: a0 = ra <u a2\n112563: u64 [s1 + 0x170] = a0\n112567: a5 = a0 if a4 == 0\n112570: a0 = u64 [s1 + 0x1b0]\n112574: a1 = t0 ^ a0\n112577: u64 [s1 + 0x180] = a1\n112581: a0 = t0 <u a0\n112584: a1 = u64 [s1 + 0x1b8]\n112588: u64 [s1 + 0x178] = a3\n112592: t2 = a3 <u a1\n112595: a1 = u64 [s1 + 0x180]\n112599: a0 = t2 if a1 == 0\n112602: a1 = ra ^ a2\n112605: a1 = a1 | a4\n112608: a5 = a0 if a1 == 0\n112611: jump @1327 if a5 == 0\n      : @1326 (gas: 1)\n112614: jump @1357\n      : @1327 (gas: 177)\n112617: a1 = ra - a2\n112620: a2 = a1 - a0\n112623: u64 [s1 + 0x180] = a2\n112627: a0 = a1 <u a0\n112630: a1 = u64 [s1 + 0x1a8]\n112634: a1 = t1 - a1\n112637: a2 = u64 [s1 + 0x170]\n112641: a1 = a1 - a2\n112644: a1 = a1 - a0\n112647: u64 [s1 + 0x1a8] = a1\n112651: a0 = u64 [s1 + 0x1b0]\n112655: a0 = t0 - a0\n112658: a0 = a0 - t2\n112661: u64 [s1 + 0x1b0] = a0\n112665: a0 = u64 [s1 + 0x1b8]\n112669: a1 = u64 [s1 + 0x178]\n112673: a0 = a1 - a0\n112676: u64 [s1 + 0x1b8] = a0\n112680: a0 = u64 [s1 + 0x190]\n112684: u64 [s1 + 0x4d0] = a0\n112688: a0 = u64 [s1 + 0x198]\n112692: u64 [s1 + 0x4c8] = a0\n112696: a0 = u64 [s1 + 0x1a0]\n112700: u64 [s1 + 0x4c0] = a0\n112704: a0 = u64 [s1 + 0x188]\n112708: u64 [s1 + 0x4d8] = a0\n112712: u64 [s1 + 1112] = 0\n112716: u64 [s1 + 1104] = 0\n112720: u64 [s1 + 1096] = 0\n112724: u64 [s1 + 1088] = 0\n112728: u32 [s1 + 1248] = 0x20\n112733: i32 a1 = s1 + 0x4c0\n112737: i32 a3 = s1 + 0x440\n112741: i32 a4 = s1 + 0x4e0\n112745: a2 = 0xffffffffffffffff\n112748: a0 = 0\n112750: ecalli 7 // 'get_storage'\n112752: a0 = u64 [s1 + 0x188]\n112756: u64 [s1 + 0x4d8] = a0\n112760: a0 = u64 [s1 + 0x190]\n112764: u64 [s1 + 0x4d0] = a0\n112768: a0 = u64 [s1 + 0x198]\n112772: u64 [s1 + 0x4c8] = a0\n112776: a0 = u64 [s1 + 0x1a0]\n112780: u64 [s1 + 0x4c0] = a0\n112784: a0 = u64 [s1 + 0x1a8]\n112788: u64 [s1 + 0x458] = a0\n112792: a0 = u64 [s1 + 0x180]\n112796: u64 [s1 + 0x450] = a0\n112800: a0 = u64 [s1 + 0x1b0]\n112804: u64 [s1 + 0x448] = a0\n112808: a0 = u64 [s1 + 0x1b8]\n112812: u64 [s1 + 0x440] = a0\n112816: i32 a1 = s1 + 0x4c0\n112820: i32 a3 = s1 + 0x440\n112824: a2 = 0xffffffffffffffff\n112827: a4 = 0x20\n112830: a0 = 0\n112832: ecalli 14 // 'set_storage'\n112834: a0 = u64 [s1 + 0x1c0]\n112838: u64 [s1 + 0x4d8] = a0\n112842: a0 = u64 [s1 + 0x1c8]\n112846: u64 [s1 + 0x4d0] = a0\n112850: a0 = u64 [s1 + 0x1d0]\n112854: u64 [s1 + 0x4c8] = a0\n112858: a0 = u64 [s1 + 0x1d8]\n112862: u64 [s1 + 0x4c0] = a0\n112866: u64 [s1 + 1112] = 0\n112870: u64 [s1 + 1104] = 0\n112874: u64 [s1 + 1096] = 0\n112878: u64 [s1 + 1088] = 0\n112882: u32 [s1 + 1248] = 0x20\n112887: i32 a1 = s1 + 0x4c0\n112891: i32 a3 = s1 + 0x440\n112895: i32 a4 = s1 + 0x4e0\n112899: a2 = 0xffffffffffffffff\n112902: a0 = 0\n112904: ecalli 7 // 'get_storage'\n112906: a0 = u64 [s1 + 0x448]\n112910: a1 = u64 [s1 + 0x450]\n112914: a2 = u64 [s1 + 0x440]\n112918: a3 = u64 [s1 + 0x458]\n112922: a2 = a2 & 0xffffffffff00ffff\n112928: a2 = a2 | 0x10000\n112933: a4 = u64 [s1 + 0x1c0]\n112937: u64 [s1 + 0x4d8] = a4\n112941: a4 = u64 [s1 + 0x1c8]\n112945: u64 [s1 + 0x4d0] = a4\n112949: a4 = u64 [s1 + 0x1d0]\n112953: u64 [s1 + 0x4c8] = a4\n112957: a4 = u64 [s1 + 0x1d8]\n112961: u64 [s1 + 0x4c0] = a4\n112965: u64 [s1 + 0x458] = a3\n112969: u64 [s1 + 0x450] = a1\n112973: u64 [s1 + 0x448] = a0\n112977: u64 [s1 + 0x440] = a2\n112981: i32 a1 = s1 + 0x4c0\n112985: i32 a3 = s1 + 0x440\n112989: a2 = 0xffffffffffffffff\n112992: a4 = 0x20\n112995: a0 = 0\n112997: ecalli 14 // 'set_storage'\n112999: a0 = u64 [s1 + 0xb8]\n113003: u64 [s1 + 0x4d8] = a0\n113007: a0 = u64 [s1 + 0xb0]\n113011: u64 [s1 + 0x4d0] = a0\n113015: a0 = u64 [s1 + 0xa8]\n113019: u64 [s1 + 0x4c8] = a0\n113023: a0 = u64 [s1 + 0xa0]\n113027: u64 [s1 + 0x4c0] = a0\n113031: u64 [s1 + 1112] = 0\n113035: u64 [s1 + 1104] = 0\n113039: u64 [s1 + 1096] = 0\n113043: u64 [s1 + 1088] = 0\n113047: u32 [s1 + 1248] = 0x20\n113052: i32 a1 = s1 + 0x4c0\n113056: i32 a3 = s1 + 0x440\n113060: i32 a4 = s1 + 0x4e0\n113064: a2 = 0xffffffffffffffff\n113067: a0 = 0\n113069: ecalli 7 // 'get_storage'\n113071: a0 = u64 [s1 + 0x440]\n113075: a1 = u64 [s1 + 0x448]\n113079: a2 = u64 [s1 + 0x450]\n113083: a0 = a0 & 0xffffffffffffffff\n113086: u64 [s1 + 0x1d8] = a0\n113090: a1 = a1 & 0xffffffffffffffff\n113093: u64 [s1 + 0x1d0] = a1\n113097: a0 = u64 [s1 + 0x78]\n113100: a0 = a0 & a2\n113103: u64 [s1 + 0x1c8] = a0\n113107: a0 = u64 [s1 + 0xa0]\n113111: a0 = a0 + 0x1\n113114: a1 = a0 <u 0x1\n113117: a2 = u64 [s1 + 0xa8]\n113121: a1 = a1 + a2\n113124: a2 = a0 | a1\n113127: a2 = a2 <u 0x1\n113130: a3 = u64 [s1 + 0xb0]\n113134: a2 = a2 + a3\n113137: a3 = a2 <u a3\n113140: a4 = u64 [s1 + 0xb8]\n113144: a3 = a3 + a4\n113147: u64 [s1 + 0x4d8] = a3\n113151: u64 [s1 + 0x4d0] = a2\n113155: u64 [s1 + 0x4c8] = a1\n113159: u64 [s1 + 0x4c0] = a0\n113163: u64 [s1 + 1112] = 0\n113167: u64 [s1 + 1104] = 0\n113171: u64 [s1 + 1096] = 0\n113175: u64 [s1 + 1088] = 0\n113179: u32 [s1 + 1248] = 0x20\n113184: i32 a1 = s1 + 0x4c0\n113188: i32 a3 = s1 + 0x440\n113192: i32 a4 = s1 + 0x4e0\n113196: a2 = 0xffffffffffffffff\n113199: a0 = 0\n113201: ecalli 7 // 'get_storage'\n113203: a0 = u64 [s1 + 0x440]\n113207: a1 = u64 [s1 + 0x448]\n113211: a2 = u64 [s1 + 0x450]\n113215: a3 = u64 [s1 + 0x458]\n113219: u64 [s1 + 0x3d8] = a3\n113223: u64 [s1 + 0x3d0] = a2\n113227: u64 [s1 + 0x3c8] = a1\n113231: u64 [s1 + 0x3c0] = a0\n113235: u64 [s1 + 1016] = 0\n113239: a0 = u64 [s1 + 0x1c8]\n113243: u64 [s1 + 0x3f0] = a0\n113247: a0 = u64 [s1 + 0x1d0]\n113251: u64 [s1 + 0x3e8] = a0\n113255: a0 = s1 + 0x3e0\n113259: a1 = s1 + 0x3c0\n113263: a2 = u64 [s1 + 0x1d8]\n113267: u64 [s1 + 0x3e0] = a2\n113271: ra = 0x4d2\n113275: jump @1412\n      : @1328 (gas: 117)\n113278: a0 = u64 [s1 + 0x1c8]\n113282: u64 [s1 + 0x4d0] = a0\n113286: a0 = u64 [s1 + 0x1d0]\n113290: u64 [s1 + 0x4c8] = a0\n113294: a0 = u64 [s1 + 0x1d8]\n113298: u64 [s1 + 0x4c0] = a0\n113302: a0 = u64 [s1 + 0x1c0]\n113306: u64 [s1 + 0x4d8] = a0\n113310: u64 [s1 + 1112] = 0\n113314: u64 [s1 + 1104] = 0\n113318: u64 [s1 + 1096] = 0\n113322: u64 [s1 + 1088] = 0\n113326: u32 [s1 + 1248] = 0x20\n113331: i32 a1 = s1 + 0x4c0\n113335: i32 a3 = s1 + 0x440\n113339: i32 a4 = s1 + 0x4e0\n113343: a2 = 0xffffffffffffffff\n113346: a0 = 0\n113348: ecalli 7 // 'get_storage'\n113350: a0 = u64 [s1 + 0x448]\n113354: a1 = u64 [s1 + 0x450]\n113358: a2 = u64 [s1 + 0x440]\n113362: a3 = u64 [s1 + 0x458]\n113366: a2 = a2 & 0xffffffffff00ffff\n113372: a2 = a2 | 0x10000\n113377: a4 = u64 [s1 + 0x1c0]\n113381: u64 [s1 + 0x4d8] = a4\n113385: a4 = u64 [s1 + 0x1c8]\n113389: u64 [s1 + 0x4d0] = a4\n113393: a4 = u64 [s1 + 0x1d0]\n113397: u64 [s1 + 0x4c8] = a4\n113401: a4 = u64 [s1 + 0x1d8]\n113405: u64 [s1 + 0x4c0] = a4\n113409: u64 [s1 + 0x458] = a3\n113413: u64 [s1 + 0x450] = a1\n113417: u64 [s1 + 0x448] = a0\n113421: u64 [s1 + 0x440] = a2\n113425: i32 a1 = s1 + 0x4c0\n113429: i32 a3 = s1 + 0x440\n113433: a2 = 0xffffffffffffffff\n113436: a4 = 0x20\n113439: a0 = 0\n113441: ecalli 14 // 'set_storage'\n113443: a0 = u64 [s1 + 0x1a0]\n113447: u64 [s1 + 0x4d8] = a0\n113451: a0 = u64 [s1 + 0x1a8]\n113455: u64 [s1 + 0x4d0] = a0\n113459: a0 = u64 [s1 + 0x1b0]\n113463: u64 [s1 + 0x4c8] = a0\n113467: a0 = u64 [s1 + 0x1b8]\n113471: u64 [s1 + 0x4c0] = a0\n113475: u64 [s1 + 1112] = 0\n113479: u64 [s1 + 1104] = 0\n113483: u64 [s1 + 1096] = 0\n113487: u64 [s1 + 1088] = 0\n113491: u32 [s1 + 1248] = 0x20\n113496: i32 a1 = s1 + 0x4c0\n113500: i32 a3 = s1 + 0x440\n113504: i32 a4 = s1 + 0x4e0\n113508: a2 = 0xffffffffffffffff\n113511: a0 = 0\n113513: ecalli 7 // 'get_storage'\n113515: a0 = u64 [s1 + 0x440]\n113519: a1 = u64 [s1 + 0x448]\n113523: a2 = u64 [s1 + 0x450]\n113527: a0 = a0 & 0xffffffffffffffff\n113530: u64 [s1 + 0x1d8] = a0\n113534: a1 = a1 & 0xffffffffffffffff\n113537: u64 [s1 + 0x1d0] = a1\n113541: a0 = u64 [s1 + 0x78]\n113544: a0 = a0 & a2\n113547: u64 [s1 + 0x1c8] = a0\n113551: a0 = u64 [s1 + 0xa0]\n113555: a0 = a0 + 0x1\n113558: a1 = a0 <u 0x1\n113561: a2 = u64 [s1 + 0xa8]\n113565: a1 = a1 + a2\n113568: a2 = a0 | a1\n113571: a2 = a2 <u 0x1\n113574: a3 = u64 [s1 + 0xb0]\n113578: a2 = a2 + a3\n113581: a3 = a2 <u a3\n113584: a4 = u64 [s1 + 0xb8]\n113588: a3 = a3 + a4\n113591: u64 [s1 + 0x4d8] = a3\n113595: u64 [s1 + 0x4d0] = a2\n113599: u64 [s1 + 0x4c8] = a1\n113603: u64 [s1 + 0x4c0] = a0\n113607: u64 [s1 + 1112] = 0\n113611: u64 [s1 + 1104] = 0\n113615: u64 [s1 + 1096] = 0\n113619: u64 [s1 + 1088] = 0\n113623: u32 [s1 + 1248] = 0x20\n113628: i32 a1 = s1 + 0x4c0\n113632: i32 a3 = s1 + 0x440\n113636: i32 a4 = s1 + 0x4e0\n113640: a2 = 0xffffffffffffffff\n113643: a0 = 0\n113645: ecalli 7 // 'get_storage'\n113647: a0 = u64 [s1 + 0x440]\n113651: a1 = u64 [s1 + 0x448]\n113655: a2 = u64 [s1 + 0x450]\n113659: a3 = u64 [s1 + 0x458]\n113663: u64 [s1 + 0x318] = a3\n113667: u64 [s1 + 0x310] = a2\n113671: u64 [s1 + 0x308] = a1\n113675: u64 [s1 + 0x300] = a0\n113679: u64 [s1 + 824] = 0\n113683: a0 = u64 [s1 + 0x1c8]\n113687: u64 [s1 + 0x330] = a0\n113691: a0 = u64 [s1 + 0x1d0]\n113695: u64 [s1 + 0x328] = a0\n113699: a0 = s1 + 0x320\n113703: a1 = s1 + 0x300\n113707: a2 = u64 [s1 + 0x1d8]\n113711: u64 [s1 + 0x320] = a2\n113715: ra = 1234, jump @1412\n      : @1329 [@dyn 617] (gas: 47)\n113721: i32 a0 = s1 + 0x400\n113725: ecalli 5 // 'caller'\n113727: a0 = u64 [s1 + 0x408]\n113731: a1 = i32 [s1 + 0x410]\n113735: a2 = u64 [s1 + 0x400]\n113739: a0 = reverse a0\n113741: a3 = a0 << 0x20\n113744: a1 = reverse a1\n113746: a1 = a1 >> 0x20\n113749: a1 = a1 | a3\n113752: u64 [s1 + 0x1d8] = a1\n113756: a0 = a0 >> 0x20\n113759: a1 = reverse a2\n113761: a2 = a1 << 0x20\n113764: a0 = a0 | a2\n113767: u64 [s1 + 0x1d0] = a0\n113771: a1 = a1 >> 0x20\n113774: u64 [s1 + 0x1c8] = a1\n113778: a0 = sp + 0xffffffffffffffe0\n113781: a0 = a0 & 0xffffffffffffffe0\n113784: u64 [s1 + 0x1c0] = a0\n113788: sp = a0\n113790: u64 [a0 + 24] = 0\n113793: u64 [a0 + 16] = 0\n113796: u64 [a0 + 8] = 0\n113799: u64 [a0 + 0] = 0\n113801: i32 a0 = a0 + 0\n113803: ecalli 15 // 'value_transferred'\n113805: a3 = u64 [s1 + 0x1c0]\n113809: a0 = u64 [a3]\n113811: a1 = u64 [a3 + 0x8]\n113814: a2 = u64 [a3 + 0x10]\n113817: a3 = u64 [a3 + 0x18]\n113820: u64 [s1 + 0x2d8] = a3\n113824: u64 [s1 + 0x2d0] = a2\n113828: u64 [s1 + 0x2c8] = a1\n113832: u64 [s1 + 0x2c0] = a0\n113836: u64 [s1 + 760] = 0\n113840: a0 = u64 [s1 + 0x1c8]\n113844: u64 [s1 + 0x2f0] = a0\n113848: a0 = u64 [s1 + 0x1d0]\n113852: u64 [s1 + 0x2e8] = a0\n113856: a0 = s1 + 0x2e0\n113860: a1 = s1 + 0x2c0\n113864: a2 = u64 [s1 + 0x1d8]\n113868: u64 [s1 + 0x2e0] = a2\n113872: ra = 1236, jump @1412\n      : @1330 [@dyn 618] (gas: 11)\n113878: i32 a0 = s1 + 0x420\n113882: ecalli 5 // 'caller'\n113884: a0 = u32 [s1 + 0x430]\n113888: u64 [s1 + 0x1d0] = a0\n113892: a0 = u64 [s1 + 0x428]\n113896: u64 [s1 + 0x1c8] = a0\n113900: a0 = u64 [s1 + 0x420]\n113904: u64 [s1 + 0x1d8] = a0\n113908: a0 = 0x40\n113911: a1 = 0x20\n113914: ra = 1238, jump @0\n      : @1331 [@dyn 619] (gas: 100)\n113921: a1 = u8 [a0 + 0x11]\n113924: a2 = u8 [a0 + 0x10]\n113927: a3 = u8 [a0 + 0x12]\n113930: a4 = u8 [a0 + 0x13]\n113933: a1 = a1 << 0x8\n113936: a1 = a1 | a2\n113939: a3 = a3 << 0x10\n113942: a4 = a4 << 0x18\n113945: a3 = a3 | a4\n113948: a1 = a1 | a3\n113951: a2 = u8 [a0 + 0x15]\n113954: a3 = u8 [a0 + 0x14]\n113957: a4 = u8 [a0 + 0x16]\n113960: a5 = u8 [a0 + 0x17]\n113963: a2 = a2 << 0x8\n113966: a2 = a2 | a3\n113969: a4 = a4 << 0x10\n113972: a5 = a5 << 0x18\n113975: a4 = a4 | a5\n113978: a2 = a2 | a4\n113981: a2 = a2 << 0x20\n113984: t0 = a2 | a1\n113987: a2 = u8 [a0 + 0x1]\n113990: a3 = u8 [a0]\n113992: a4 = u8 [a0 + 0x2]\n113995: a5 = u8 [a0 + 0x3]\n113998: a2 = a2 << 0x8\n114001: a2 = a2 | a3\n114004: a4 = a4 << 0x10\n114007: a5 = a5 << 0x18\n114010: a4 = a4 | a5\n114013: a2 = a2 | a4\n114016: a3 = u8 [a0 + 0x5]\n114019: a4 = u8 [a0 + 0x4]\n114022: a5 = u8 [a0 + 0x6]\n114025: a1 = u8 [a0 + 0x7]\n114028: a3 = a3 << 0x8\n114031: a3 = a3 | a4\n114034: a5 = a5 << 0x10\n114037: a1 = a1 << 0x18\n114040: a1 = a1 | a5\n114043: a1 = a1 | a3\n114046: a1 = a1 << 0x20\n114049: t1 = a1 | a2\n114052: a1 = u8 [a0 + 0x19]\n114055: a3 = u8 [a0 + 0x18]\n114058: a4 = u8 [a0 + 0x1a]\n114061: a5 = u8 [a0 + 0x1b]\n114064: a1 = a1 << 0x8\n114067: a1 = a1 | a3\n114070: a4 = a4 << 0x10\n114073: a5 = a5 << 0x18\n114076: a4 = a4 | a5\n114079: a1 = a1 | a4\n114082: a3 = u8 [a0 + 0x1d]\n114085: a4 = u8 [a0 + 0x1c]\n114088: a5 = u8 [a0 + 0x1e]\n114091: a2 = u8 [a0 + 0x1f]\n114094: a3 = a3 << 0x8\n114097: a3 = a3 | a4\n114100: a5 = a5 << 0x10\n114103: a2 = a2 << 0x18\n114106: a2 = a2 | a5\n114109: a2 = a2 | a3\n114112: a2 = a2 << 0x20\n114115: a3 = a2 | a1\n114118: a1 = u8 [a0 + 0x9]\n114121: a2 = u8 [a0 + 0x8]\n114124: a4 = u8 [a0 + 0xa]\n114127: a5 = u8 [a0 + 0xb]\n114130: a1 = a1 << 0x8\n114133: a1 = a1 | a2\n114136: a4 = a4 << 0x10\n114139: a5 = a5 << 0x18\n114142: a4 = a4 | a5\n114145: a1 = a1 | a4\n114148: a2 = u8 [a0 + 0xd]\n114151: a4 = u8 [a0 + 0xc]\n114154: a5 = u8 [a0 + 0xe]\n114157: a0 = u8 [a0 + 0xf]\n114160: a2 = a2 << 0x8\n114163: a2 = a2 | a4\n114166: a5 = a5 << 0x10\n114169: a0 = a0 << 0x18\n114172: a0 = a0 | a5\n114175: a0 = a0 | a2\n114178: a0 = a0 << 0x20\n114181: a0 = a0 | a1\n114184: a1 = reverse a0\n114186: a0 = reverse a3\n114188: a2 = reverse t1\n114190: a3 = reverse t0\n114192: a2 = a2 | a3\n114195: a3 = a0 | a1\n114198: a3 = a3 | a2\n114201: a3 = a3 >> 0x20\n114204: a1 = a1 | a2\n114207: a1 = a1 << 0x20\n114210: a1 = a1 | a3\n114213: jump @1356 if a1 != 0\n      : @1332 (gas: 21)\n114217: a1 = u64 [s1 + 0x70]\n114220: a1 = a1 >u 0\n114222: u64 [s1 + 0x1c0] = a1\n114226: a1 = u64 [s1 + 0x1c8]\n114230: a1 = reverse a1\n114232: a2 = a1 << 0x20\n114235: a3 = u64 [s1 + 0x1d0]\n114239: a3 = reverse a3\n114241: a3 = a3 >> 0x20\n114244: a2 = a2 | a3\n114247: u64 [s1 + 0x1d0] = a2\n114251: a2 = u64 [s1 + 0x1d8]\n114255: a2 = reverse a2\n114257: a2 = a2 << 0x20\n114260: a1 = a1 >> 0x20\n114263: a1 = a1 | a2\n114266: u64 [s1 + 0x1c8] = a1\n114270: i32 a0 = a0 + 0\n114272: u64 [s1 + 0x1b8] = a0\n114276: a1 = 0x20\n114279: ra = 1240, jump @0\n      : @1333 [@dyn 620] (gas: 36)\n114286: u8 [a0 + 30] = 0\n114289: u8 [a0 + 29] = 0\n114292: u8 [a0 + 28] = 0\n114295: u8 [a0 + 27] = 0\n114298: u8 [a0 + 26] = 0\n114301: u8 [a0 + 25] = 0\n114304: u8 [a0 + 24] = 0\n114307: u8 [a0 + 23] = 0\n114310: u8 [a0 + 22] = 0\n114313: u8 [a0 + 21] = 0\n114316: u8 [a0 + 20] = 0\n114319: u8 [a0 + 19] = 0\n114322: u8 [a0 + 18] = 0\n114325: u8 [a0 + 17] = 0\n114328: u8 [a0 + 16] = 0\n114331: u8 [a0 + 15] = 0\n114334: u8 [a0 + 14] = 0\n114337: u8 [a0 + 13] = 0\n114340: u8 [a0 + 12] = 0\n114343: u8 [a0 + 11] = 0\n114346: u8 [a0 + 10] = 0\n114349: u8 [a0 + 9] = 0\n114352: u8 [a0 + 8] = 0\n114355: u8 [a0 + 7] = 0\n114358: u8 [a0 + 6] = 0\n114361: u8 [a0 + 5] = 0\n114364: u8 [a0 + 4] = 0\n114367: u8 [a0 + 3] = 0\n114370: u8 [a0 + 2] = 0\n114373: u8 [a0 + 1] = 0\n114376: u8 [a0 + 0] = 0\n114378: a1 = u64 [s1 + 0x1c0]\n114382: u8 [a0 + 0x1f] = a1\n114385: a1 = 0x20\n114388: a0 = u64 [s1 + 0x1b8]\n114392: ra = 1242, jump @0\n      : @1334 [@dyn 621] (gas: 45)\n114399: a1 = u64 [0x200e0]\n114404: a2 = u64 [0x200e8]\n114409: a3 = u64 [0x200f0]\n114414: a4 = u64 [0x200f8]\n114419: u64 [s1 + 0x458] = a1\n114423: u64 [s1 + 0x450] = a2\n114427: u64 [s1 + 0x448] = a3\n114431: u64 [s1 + 0x440] = a4\n114435: a1 = u64 [s1 + 0x1e0]\n114439: u64 [s1 + 0x478] = a1\n114443: a1 = u64 [s1 + 0x1e8]\n114447: u64 [s1 + 0x470] = a1\n114451: a1 = u64 [s1 + 0x1f0]\n114455: u64 [s1 + 0x468] = a1\n114459: a1 = u64 [s1 + 0x1f8]\n114463: u64 [s1 + 0x460] = a1\n114467: a1 = u64 [s1 + 0x40]\n114470: u64 [s1 + 0x498] = a1\n114474: a1 = u64 [s1 + 0x48]\n114477: u64 [s1 + 0x490] = a1\n114481: a1 = u64 [s1 + 0x50]\n114484: u64 [s1 + 0x488] = a1\n114488: a1 = u64 [s1 + 0x58]\n114491: u64 [s1 + 0x480] = a1\n114495: a1 = u64 [s1 + 0x1d0]\n114499: a1 = reverse a1\n114501: u64 [s1 + 0x4b8] = a1\n114505: a1 = u64 [s1 + 0x1c8]\n114509: a1 = reverse a1\n114511: u64 [s1 + 0x4b0] = a1\n114515: a1 = u64 [s1 + 0x1d8]\n114519: a1 = a1 << 0x20\n114522: u64 [s1 + 0x4a8] = a1\n114526: u64 [s1 + 1184] = 0\n114530: i32 a2 = a0 + 0\n114532: i32 a0 = s1 + 0x440\n114536: a1 = 0x4\n114539: a3 = 0x20\n114542: ecalli 6 // 'deposit_event'\n114544: sp = s0 + 0xfffffffffffffb00\n114548: ra = u64 [sp + 0x4f8]\n114552: s0 = u64 [sp + 0x4f0]\n114556: s1 = u64 [sp + 0x4e8]\n114560: sp = sp + 0x500\n114564: ret\n      : @1335 (gas: 3)\n114566: a0 = 0x40\n114569: a1 = 0x20\n114572: ra = 1244, jump @0\n      : @1336 [@dyn 622] (gas: 104)\n114579: a1 = u8 [a0 + 0x11]\n114582: a2 = u8 [a0 + 0x10]\n114585: a3 = u8 [a0 + 0x12]\n114588: a4 = u8 [a0 + 0x13]\n114591: a1 = a1 << 0x8\n114594: a1 = a1 | a2\n114597: a3 = a3 << 0x10\n114600: a4 = a4 << 0x18\n114603: a3 = a3 | a4\n114606: a1 = a1 | a3\n114609: a2 = u8 [a0 + 0x15]\n114612: a3 = u8 [a0 + 0x14]\n114615: a4 = u8 [a0 + 0x16]\n114618: a5 = u8 [a0 + 0x17]\n114621: a2 = a2 << 0x8\n114624: a2 = a2 | a3\n114627: a4 = a4 << 0x10\n114630: a5 = a5 << 0x18\n114633: a4 = a4 | a5\n114636: a2 = a2 | a4\n114639: a2 = a2 << 0x20\n114642: t0 = a2 | a1\n114645: a2 = u8 [a0 + 0x1]\n114648: a3 = u8 [a0]\n114650: a4 = u8 [a0 + 0x2]\n114653: a5 = u8 [a0 + 0x3]\n114656: a2 = a2 << 0x8\n114659: a2 = a2 | a3\n114662: a4 = a4 << 0x10\n114665: a5 = a5 << 0x18\n114668: a4 = a4 | a5\n114671: a2 = a2 | a4\n114674: a3 = u8 [a0 + 0x5]\n114677: a4 = u8 [a0 + 0x4]\n114680: a5 = u8 [a0 + 0x6]\n114683: a1 = u8 [a0 + 0x7]\n114686: a3 = a3 << 0x8\n114689: a3 = a3 | a4\n114692: a5 = a5 << 0x10\n114695: a1 = a1 << 0x18\n114698: a1 = a1 | a5\n114701: a1 = a1 | a3\n114704: a1 = a1 << 0x20\n114707: t1 = a1 | a2\n114710: a1 = u8 [a0 + 0x19]\n114713: a3 = u8 [a0 + 0x18]\n114716: a4 = u8 [a0 + 0x1a]\n114719: a5 = u8 [a0 + 0x1b]\n114722: a1 = a1 << 0x8\n114725: a1 = a1 | a3\n114728: a4 = a4 << 0x10\n114731: a5 = a5 << 0x18\n114734: a4 = a4 | a5\n114737: a1 = a1 | a4\n114740: a3 = u8 [a0 + 0x1d]\n114743: a4 = u8 [a0 + 0x1c]\n114746: a5 = u8 [a0 + 0x1e]\n114749: a2 = u8 [a0 + 0x1f]\n114752: a3 = a3 << 0x8\n114755: a3 = a3 | a4\n114758: a5 = a5 << 0x10\n114761: a2 = a2 << 0x18\n114764: a2 = a2 | a5\n114767: a2 = a2 | a3\n114770: a2 = a2 << 0x20\n114773: a3 = a2 | a1\n114776: a1 = u8 [a0 + 0x9]\n114779: a2 = u8 [a0 + 0x8]\n114782: a4 = u8 [a0 + 0xa]\n114785: a5 = u8 [a0 + 0xb]\n114788: a1 = a1 << 0x8\n114791: a1 = a1 | a2\n114794: a4 = a4 << 0x10\n114797: a5 = a5 << 0x18\n114800: a4 = a4 | a5\n114803: a1 = a1 | a4\n114806: a2 = u8 [a0 + 0xd]\n114809: a4 = u8 [a0 + 0xc]\n114812: a5 = u8 [a0 + 0xe]\n114815: a0 = u8 [a0 + 0xf]\n114818: a2 = a2 << 0x8\n114821: a2 = a2 | a4\n114824: a5 = a5 << 0x10\n114827: a0 = a0 << 0x18\n114830: a0 = a0 | a5\n114833: a0 = a0 | a2\n114836: a0 = a0 << 0x20\n114839: a0 = a0 | a1\n114842: a4 = reverse a0\n114844: a1 = reverse a3\n114846: a2 = reverse t1\n114848: a0 = reverse t0\n114850: u64 [s1 + 0x1f8] = a0\n114854: u64 [s1 + 0x1e8] = a2\n114858: a0 = a0 | a2\n114861: a2 = a1\n114863: a1 = a1 | a4\n114866: a1 = a1 | a0\n114869: a1 = a1 >> 0x20\n114872: u64 [s1 + 0x1f0] = a4\n114876: a0 = a0 | a4\n114879: a0 = a0 << 0x20\n114882: a0 = a0 | a1\n114885: jump @1356 if a0 != 0\n      : @1337 (gas: 5)\n114889: u64 [s1 + 0x1e0] = a2\n114893: i32 a0 = a2 + 0\n114895: a1 = 0x20\n114898: u64 [s1 + 0x1d8] = a0\n114902: ra = 1246, jump @0\n      : @1338 [@dyn 623] (gas: 51)\n114909: u8 [a0 + 31] = 0\n114912: u8 [a0 + 30] = 0\n114915: u8 [a0 + 29] = 0\n114918: u8 [a0 + 28] = 0\n114921: u8 [a0 + 27] = 0\n114924: u8 [a0 + 26] = 0\n114927: u8 [a0 + 25] = 0\n114930: u8 [a0 + 24] = 0\n114933: u8 [a0 + 23] = 0\n114936: u8 [a0 + 22] = 0\n114939: u8 [a0 + 21] = 0\n114942: u8 [a0 + 20] = 0\n114945: u8 [a0 + 19] = 0\n114948: u8 [a0 + 18] = 0\n114951: u8 [a0 + 17] = 0\n114954: u8 [a0 + 16] = 0\n114957: u8 [a0 + 15] = 0\n114960: u8 [a0 + 14] = 0\n114963: u8 [a0 + 13] = 0\n114966: u8 [a0 + 12] = 0\n114969: u8 [a0 + 11] = 0\n114972: u8 [a0 + 10] = 0\n114975: u8 [a0 + 9] = 0\n114978: u8 [a0 + 8] = 0\n114981: u8 [a0 + 7] = 0\n114984: u8 [a0 + 6] = 0\n114987: u8 [a0 + 5] = 0\n114990: u8 [a0 + 4] = 0\n114993: u8 [a0 + 3] = 0xa0\n114998: u8 [a0 + 2] = 0x79\n115002: u8 [a0 + 1] = 0xc3\n115007: u8 [a0 + 0] = 0x8\n115010: a1 = u64 [s1 + 0x1e0]\n115014: a0 = a1 + 0x4\n115017: a1 = a0 <u a1\n115020: a3 = u64 [s1 + 0x1f8]\n115024: a2 = a3 + a1\n115027: a3 = a2 <u a3\n115030: a3 = a1 if a1 == 0\n115033: a1 = u64 [s1 + 0x1f0]\n115037: a3 = a3 + a1\n115040: a1 = a3 <u a1\n115043: a4 = u64 [s1 + 0x1e8]\n115047: a4 = a4 + a1\n115050: u64 [s1 + 0x248] = a2\n115054: u64 [s1 + 0x240] = a0\n115058: u64 [s1 + 0x250] = a3\n115062: a0 = s1 + 0x260\n115066: a1 = s1 + 0x240\n115070: u64 [s1 + 0x258] = a4\n115074: ra = 1248, jump @1270\n      : @1339 [@dyn 624] (gas: 5)\n115080: a0 = u64 [s1 + 0x268]\n115084: t0 = u64 [s1 + 0x278]\n115088: t1 = u64 [s1 + 0x260]\n115092: a3 = u64 [s1 + 0x270]\n115096: jump @1355\n      : @1340 (gas: 3)\n115099: a0 = 0x40\n115102: a1 = 0x20\n115105: ra = 1250, jump @0\n      : @1341 [@dyn 625] (gas: 104)\n115112: a1 = u8 [a0 + 0x11]\n115115: a2 = u8 [a0 + 0x10]\n115118: a3 = u8 [a0 + 0x12]\n115121: a4 = u8 [a0 + 0x13]\n115124: a1 = a1 << 0x8\n115127: a1 = a1 | a2\n115130: a3 = a3 << 0x10\n115133: a4 = a4 << 0x18\n115136: a3 = a3 | a4\n115139: a1 = a1 | a3\n115142: a2 = u8 [a0 + 0x15]\n115145: a3 = u8 [a0 + 0x14]\n115148: a4 = u8 [a0 + 0x16]\n115151: a5 = u8 [a0 + 0x17]\n115154: a2 = a2 << 0x8\n115157: a2 = a2 | a3\n115160: a4 = a4 << 0x10\n115163: a5 = a5 << 0x18\n115166: a4 = a4 | a5\n115169: a2 = a2 | a4\n115172: a2 = a2 << 0x20\n115175: t0 = a2 | a1\n115178: a2 = u8 [a0 + 0x1]\n115181: a3 = u8 [a0]\n115183: a4 = u8 [a0 + 0x2]\n115186: a5 = u8 [a0 + 0x3]\n115189: a2 = a2 << 0x8\n115192: a2 = a2 | a3\n115195: a4 = a4 << 0x10\n115198: a5 = a5 << 0x18\n115201: a4 = a4 | a5\n115204: a2 = a2 | a4\n115207: a3 = u8 [a0 + 0x5]\n115210: a4 = u8 [a0 + 0x4]\n115213: a5 = u8 [a0 + 0x6]\n115216: a1 = u8 [a0 + 0x7]\n115219: a3 = a3 << 0x8\n115222: a3 = a3 | a4\n115225: a5 = a5 << 0x10\n115228: a1 = a1 << 0x18\n115231: a1 = a1 | a5\n115234: a1 = a1 | a3\n115237: a1 = a1 << 0x20\n115240: t1 = a1 | a2\n115243: a1 = u8 [a0 + 0x19]\n115246: a3 = u8 [a0 + 0x18]\n115249: a4 = u8 [a0 + 0x1a]\n115252: a5 = u8 [a0 + 0x1b]\n115255: a1 = a1 << 0x8\n115258: a1 = a1 | a3\n115261: a4 = a4 << 0x10\n115264: a5 = a5 << 0x18\n115267: a4 = a4 | a5\n115270: a1 = a1 | a4\n115273: a3 = u8 [a0 + 0x1d]\n115276: a4 = u8 [a0 + 0x1c]\n115279: a5 = u8 [a0 + 0x1e]\n115282: a2 = u8 [a0 + 0x1f]\n115285: a3 = a3 << 0x8\n115288: a3 = a3 | a4\n115291: a5 = a5 << 0x10\n115294: a2 = a2 << 0x18\n115297: a2 = a2 | a5\n115300: a2 = a2 | a3\n115303: a2 = a2 << 0x20\n115306: a3 = a2 | a1\n115309: a1 = u8 [a0 + 0x9]\n115312: a2 = u8 [a0 + 0x8]\n115315: a4 = u8 [a0 + 0xa]\n115318: a5 = u8 [a0 + 0xb]\n115321: a1 = a1 << 0x8\n115324: a1 = a1 | a2\n115327: a4 = a4 << 0x10\n115330: a5 = a5 << 0x18\n115333: a4 = a4 | a5\n115336: a1 = a1 | a4\n115339: a2 = u8 [a0 + 0xd]\n115342: a4 = u8 [a0 + 0xc]\n115345: a5 = u8 [a0 + 0xe]\n115348: a0 = u8 [a0 + 0xf]\n115351: a2 = a2 << 0x8\n115354: a2 = a2 | a4\n115357: a5 = a5 << 0x10\n115360: a0 = a0 << 0x18\n115363: a0 = a0 | a5\n115366: a0 = a0 | a2\n115369: a0 = a0 << 0x20\n115372: a0 = a0 | a1\n115375: a4 = reverse a0\n115377: a1 = reverse a3\n115379: a2 = reverse t1\n115381: a0 = reverse t0\n115383: u64 [s1 + 0x1f8] = a0\n115387: u64 [s1 + 0x1e8] = a2\n115391: a0 = a0 | a2\n115394: a2 = a1\n115396: a1 = a1 | a4\n115399: a1 = a1 | a0\n115402: a1 = a1 >> 0x20\n115405: u64 [s1 + 0x1f0] = a4\n115409: a0 = a0 | a4\n115412: a0 = a0 << 0x20\n115415: a0 = a0 | a1\n115418: jump @1356 if a0 != 0\n      : @1342 (gas: 5)\n115422: u64 [s1 + 0x1e0] = a2\n115426: i32 a0 = a2 + 0\n115428: a1 = 0x20\n115431: u64 [s1 + 0x1d8] = a0\n115435: ra = 1252, jump @0\n      : @1343 [@dyn 626] (gas: 51)\n115442: u8 [a0 + 31] = 0\n115445: u8 [a0 + 30] = 0\n115448: u8 [a0 + 29] = 0\n115451: u8 [a0 + 28] = 0\n115454: u8 [a0 + 27] = 0\n115457: u8 [a0 + 26] = 0\n115460: u8 [a0 + 25] = 0\n115463: u8 [a0 + 24] = 0\n115466: u8 [a0 + 23] = 0\n115469: u8 [a0 + 22] = 0\n115472: u8 [a0 + 21] = 0\n115475: u8 [a0 + 20] = 0\n115478: u8 [a0 + 19] = 0\n115481: u8 [a0 + 18] = 0\n115484: u8 [a0 + 17] = 0\n115487: u8 [a0 + 16] = 0\n115490: u8 [a0 + 15] = 0\n115493: u8 [a0 + 14] = 0\n115496: u8 [a0 + 13] = 0\n115499: u8 [a0 + 12] = 0\n115502: u8 [a0 + 11] = 0\n115505: u8 [a0 + 10] = 0\n115508: u8 [a0 + 9] = 0\n115511: u8 [a0 + 8] = 0\n115514: u8 [a0 + 7] = 0\n115517: u8 [a0 + 6] = 0\n115520: u8 [a0 + 5] = 0\n115523: u8 [a0 + 4] = 0\n115526: u8 [a0 + 3] = 0xa0\n115531: u8 [a0 + 2] = 0x79\n115535: u8 [a0 + 1] = 0xc3\n115540: u8 [a0 + 0] = 0x8\n115543: a1 = u64 [s1 + 0x1e0]\n115547: a0 = a1 + 0x4\n115550: a1 = a0 <u a1\n115553: a3 = u64 [s1 + 0x1f8]\n115557: a2 = a3 + a1\n115560: a3 = a2 <u a3\n115563: a3 = a1 if a1 == 0\n115566: a1 = u64 [s1 + 0x1f0]\n115570: a3 = a3 + a1\n115573: a1 = a3 <u a1\n115576: a4 = u64 [s1 + 0x1e8]\n115580: a4 = a4 + a1\n115583: u64 [s1 + 0x208] = a2\n115587: u64 [s1 + 0x200] = a0\n115591: u64 [s1 + 0x210] = a3\n115595: a0 = s1 + 0x220\n115599: a1 = s1 + 0x200\n115603: u64 [s1 + 0x218] = a4\n115607: ra = 1254, jump @1093\n      : @1344 [@dyn 627] (gas: 5)\n115613: a0 = u64 [s1 + 0x228]\n115617: t0 = u64 [s1 + 0x238]\n115621: t1 = u64 [s1 + 0x220]\n115625: a3 = u64 [s1 + 0x230]\n115629: jump @1355\n      : @1345 (gas: 3)\n115632: a0 = 0x40\n115635: a1 = 0x20\n115638: ra = 1256, jump @0\n      : @1346 [@dyn 628] (gas: 104)\n115645: a1 = u8 [a0 + 0x11]\n115648: a2 = u8 [a0 + 0x10]\n115651: a3 = u8 [a0 + 0x12]\n115654: a4 = u8 [a0 + 0x13]\n115657: a1 = a1 << 0x8\n115660: a1 = a1 | a2\n115663: a3 = a3 << 0x10\n115666: a4 = a4 << 0x18\n115669: a3 = a3 | a4\n115672: a1 = a1 | a3\n115675: a2 = u8 [a0 + 0x15]\n115678: a3 = u8 [a0 + 0x14]\n115681: a4 = u8 [a0 + 0x16]\n115684: a5 = u8 [a0 + 0x17]\n115687: a2 = a2 << 0x8\n115690: a2 = a2 | a3\n115693: a4 = a4 << 0x10\n115696: a5 = a5 << 0x18\n115699: a4 = a4 | a5\n115702: a2 = a2 | a4\n115705: a2 = a2 << 0x20\n115708: t0 = a2 | a1\n115711: a2 = u8 [a0 + 0x1]\n115714: a3 = u8 [a0]\n115716: a4 = u8 [a0 + 0x2]\n115719: a5 = u8 [a0 + 0x3]\n115722: a2 = a2 << 0x8\n115725: a2 = a2 | a3\n115728: a4 = a4 << 0x10\n115731: a5 = a5 << 0x18\n115734: a4 = a4 | a5\n115737: a2 = a2 | a4\n115740: a3 = u8 [a0 + 0x5]\n115743: a4 = u8 [a0 + 0x4]\n115746: a5 = u8 [a0 + 0x6]\n115749: a1 = u8 [a0 + 0x7]\n115752: a3 = a3 << 0x8\n115755: a3 = a3 | a4\n115758: a5 = a5 << 0x10\n115761: a1 = a1 << 0x18\n115764: a1 = a1 | a5\n115767: a1 = a1 | a3\n115770: a1 = a1 << 0x20\n115773: t1 = a1 | a2\n115776: a1 = u8 [a0 + 0x19]\n115779: a3 = u8 [a0 + 0x18]\n115782: a4 = u8 [a0 + 0x1a]\n115785: a5 = u8 [a0 + 0x1b]\n115788: a1 = a1 << 0x8\n115791: a1 = a1 | a3\n115794: a4 = a4 << 0x10\n115797: a5 = a5 << 0x18\n115800: a4 = a4 | a5\n115803: a1 = a1 | a4\n115806: a3 = u8 [a0 + 0x1d]\n115809: a4 = u8 [a0 + 0x1c]\n115812: a5 = u8 [a0 + 0x1e]\n115815: a2 = u8 [a0 + 0x1f]\n115818: a3 = a3 << 0x8\n115821: a3 = a3 | a4\n115824: a5 = a5 << 0x10\n115827: a2 = a2 << 0x18\n115830: a2 = a2 | a5\n115833: a2 = a2 | a3\n115836: a2 = a2 << 0x20\n115839: a3 = a2 | a1\n115842: a1 = u8 [a0 + 0x9]\n115845: a2 = u8 [a0 + 0x8]\n115848: a4 = u8 [a0 + 0xa]\n115851: a5 = u8 [a0 + 0xb]\n115854: a1 = a1 << 0x8\n115857: a1 = a1 | a2\n115860: a4 = a4 << 0x10\n115863: a5 = a5 << 0x18\n115866: a4 = a4 | a5\n115869: a1 = a1 | a4\n115872: a2 = u8 [a0 + 0xd]\n115875: a4 = u8 [a0 + 0xc]\n115878: a5 = u8 [a0 + 0xe]\n115881: a0 = u8 [a0 + 0xf]\n115884: a2 = a2 << 0x8\n115887: a2 = a2 | a4\n115890: a5 = a5 << 0x10\n115893: a0 = a0 << 0x18\n115896: a0 = a0 | a5\n115899: a0 = a0 | a2\n115902: a0 = a0 << 0x20\n115905: a0 = a0 | a1\n115908: a4 = reverse a0\n115910: a1 = reverse a3\n115912: a2 = reverse t1\n115914: a0 = reverse t0\n115916: u64 [s1 + 0x1f8] = a0\n115920: u64 [s1 + 0x1e8] = a2\n115924: a0 = a0 | a2\n115927: a2 = a1\n115929: a1 = a1 | a4\n115932: a1 = a1 | a0\n115935: a1 = a1 >> 0x20\n115938: u64 [s1 + 0x1f0] = a4\n115942: a0 = a0 | a4\n115945: a0 = a0 << 0x20\n115948: a0 = a0 | a1\n115951: jump @1356 if a0 != 0\n      : @1347 (gas: 5)\n115955: u64 [s1 + 0x1e0] = a2\n115959: i32 a0 = a2 + 0\n115961: a1 = 0x20\n115964: u64 [s1 + 0x1d8] = a0\n115968: ra = 1258, jump @0\n      : @1348 [@dyn 629] (gas: 51)\n115975: u8 [a0 + 31] = 0\n115978: u8 [a0 + 30] = 0\n115981: u8 [a0 + 29] = 0\n115984: u8 [a0 + 28] = 0\n115987: u8 [a0 + 27] = 0\n115990: u8 [a0 + 26] = 0\n115993: u8 [a0 + 25] = 0\n115996: u8 [a0 + 24] = 0\n115999: u8 [a0 + 23] = 0\n116002: u8 [a0 + 22] = 0\n116005: u8 [a0 + 21] = 0\n116008: u8 [a0 + 20] = 0\n116011: u8 [a0 + 19] = 0\n116014: u8 [a0 + 18] = 0\n116017: u8 [a0 + 17] = 0\n116020: u8 [a0 + 16] = 0\n116023: u8 [a0 + 15] = 0\n116026: u8 [a0 + 14] = 0\n116029: u8 [a0 + 13] = 0\n116032: u8 [a0 + 12] = 0\n116035: u8 [a0 + 11] = 0\n116038: u8 [a0 + 10] = 0\n116041: u8 [a0 + 9] = 0\n116044: u8 [a0 + 8] = 0\n116047: u8 [a0 + 7] = 0\n116050: u8 [a0 + 6] = 0\n116053: u8 [a0 + 5] = 0\n116056: u8 [a0 + 4] = 0\n116059: u8 [a0 + 3] = 0xa0\n116064: u8 [a0 + 2] = 0x79\n116068: u8 [a0 + 1] = 0xc3\n116073: u8 [a0 + 0] = 0x8\n116076: a1 = u64 [s1 + 0x1e0]\n116080: a0 = a1 + 0x4\n116083: a1 = a0 <u a1\n116086: a3 = u64 [s1 + 0x1f8]\n116090: a2 = a3 + a1\n116093: a3 = a2 <u a3\n116096: a3 = a1 if a1 == 0\n116099: a1 = u64 [s1 + 0x1f0]\n116103: a3 = a3 + a1\n116106: a1 = a3 <u a1\n116109: a4 = u64 [s1 + 0x1e8]\n116113: a4 = a4 + a1\n116116: u64 [s1 + 0x288] = a2\n116120: u64 [s1 + 0x280] = a0\n116124: u64 [s1 + 0x290] = a3\n116128: a0 = s1 + 0x2a0\n116132: a1 = s1 + 0x280\n116136: u64 [s1 + 0x298] = a4\n116140: ra = 1260, jump @1278\n      : @1349 [@dyn 630] (gas: 5)\n116146: a0 = u64 [s1 + 0x2a8]\n116150: t0 = u64 [s1 + 0x2b8]\n116154: t1 = u64 [s1 + 0x2a0]\n116158: a3 = u64 [s1 + 0x2b0]\n116162: jump @1355\n      : @1350 (gas: 3)\n116165: a0 = 0x40\n116168: a1 = 0x20\n116171: ra = 1262, jump @0\n      : @1351 [@dyn 631] (gas: 104)\n116178: a1 = u8 [a0 + 0x11]\n116181: a2 = u8 [a0 + 0x10]\n116184: a3 = u8 [a0 + 0x12]\n116187: a4 = u8 [a0 + 0x13]\n116190: a1 = a1 << 0x8\n116193: a1 = a1 | a2\n116196: a3 = a3 << 0x10\n116199: a4 = a4 << 0x18\n116202: a3 = a3 | a4\n116205: a1 = a1 | a3\n116208: a2 = u8 [a0 + 0x15]\n116211: a3 = u8 [a0 + 0x14]\n116214: a4 = u8 [a0 + 0x16]\n116217: a5 = u8 [a0 + 0x17]\n116220: a2 = a2 << 0x8\n116223: a2 = a2 | a3\n116226: a4 = a4 << 0x10\n116229: a5 = a5 << 0x18\n116232: a4 = a4 | a5\n116235: a2 = a2 | a4\n116238: a2 = a2 << 0x20\n116241: t0 = a2 | a1\n116244: a2 = u8 [a0 + 0x1]\n116247: a3 = u8 [a0]\n116249: a4 = u8 [a0 + 0x2]\n116252: a5 = u8 [a0 + 0x3]\n116255: a2 = a2 << 0x8\n116258: a2 = a2 | a3\n116261: a4 = a4 << 0x10\n116264: a5 = a5 << 0x18\n116267: a4 = a4 | a5\n116270: a2 = a2 | a4\n116273: a3 = u8 [a0 + 0x5]\n116276: a4 = u8 [a0 + 0x4]\n116279: a5 = u8 [a0 + 0x6]\n116282: a1 = u8 [a0 + 0x7]\n116285: a3 = a3 << 0x8\n116288: a3 = a3 | a4\n116291: a5 = a5 << 0x10\n116294: a1 = a1 << 0x18\n116297: a1 = a1 | a5\n116300: a1 = a1 | a3\n116303: a1 = a1 << 0x20\n116306: t1 = a1 | a2\n116309: a1 = u8 [a0 + 0x19]\n116312: a3 = u8 [a0 + 0x18]\n116315: a4 = u8 [a0 + 0x1a]\n116318: a5 = u8 [a0 + 0x1b]\n116321: a1 = a1 << 0x8\n116324: a1 = a1 | a3\n116327: a4 = a4 << 0x10\n116330: a5 = a5 << 0x18\n116333: a4 = a4 | a5\n116336: a1 = a1 | a4\n116339: a3 = u8 [a0 + 0x1d]\n116342: a4 = u8 [a0 + 0x1c]\n116345: a5 = u8 [a0 + 0x1e]\n116348: a2 = u8 [a0 + 0x1f]\n116351: a3 = a3 << 0x8\n116354: a3 = a3 | a4\n116357: a5 = a5 << 0x10\n116360: a2 = a2 << 0x18\n116363: a2 = a2 | a5\n116366: a2 = a2 | a3\n116369: a2 = a2 << 0x20\n116372: a3 = a2 | a1\n116375: a1 = u8 [a0 + 0x9]\n116378: a2 = u8 [a0 + 0x8]\n116381: a4 = u8 [a0 + 0xa]\n116384: a5 = u8 [a0 + 0xb]\n116387: a1 = a1 << 0x8\n116390: a1 = a1 | a2\n116393: a4 = a4 << 0x10\n116396: a5 = a5 << 0x18\n116399: a4 = a4 | a5\n116402: a1 = a1 | a4\n116405: a2 = u8 [a0 + 0xd]\n116408: a4 = u8 [a0 + 0xc]\n116411: a5 = u8 [a0 + 0xe]\n116414: a0 = u8 [a0 + 0xf]\n116417: a2 = a2 << 0x8\n116420: a2 = a2 | a4\n116423: a5 = a5 << 0x10\n116426: a0 = a0 << 0x18\n116429: a0 = a0 | a5\n116432: a0 = a0 | a2\n116435: a0 = a0 << 0x20\n116438: a0 = a0 | a1\n116441: a4 = reverse a0\n116443: a1 = reverse a3\n116445: a2 = reverse t1\n116447: a0 = reverse t0\n116449: u64 [s1 + 0x1f8] = a0\n116453: u64 [s1 + 0x1e8] = a2\n116457: a0 = a0 | a2\n116460: a2 = a1\n116462: a1 = a1 | a4\n116465: a1 = a1 | a0\n116468: a1 = a1 >> 0x20\n116471: u64 [s1 + 0x1f0] = a4\n116475: a0 = a0 | a4\n116478: a0 = a0 << 0x20\n116481: a0 = a0 | a1\n116484: jump @1356 if a0 != 0\n      : @1352 (gas: 5)\n116488: u64 [s1 + 0x1e0] = a2\n116492: i32 a0 = a2 + 0\n116494: a1 = 0x20\n116497: u64 [s1 + 0x1d8] = a0\n116501: ra = 1264, jump @0\n      : @1353 [@dyn 632] (gas: 51)\n116508: u8 [a0 + 31] = 0\n116511: u8 [a0 + 30] = 0\n116514: u8 [a0 + 29] = 0\n116517: u8 [a0 + 28] = 0\n116520: u8 [a0 + 27] = 0\n116523: u8 [a0 + 26] = 0\n116526: u8 [a0 + 25] = 0\n116529: u8 [a0 + 24] = 0\n116532: u8 [a0 + 23] = 0\n116535: u8 [a0 + 22] = 0\n116538: u8 [a0 + 21] = 0\n116541: u8 [a0 + 20] = 0\n116544: u8 [a0 + 19] = 0\n116547: u8 [a0 + 18] = 0\n116550: u8 [a0 + 17] = 0\n116553: u8 [a0 + 16] = 0\n116556: u8 [a0 + 15] = 0\n116559: u8 [a0 + 14] = 0\n116562: u8 [a0 + 13] = 0\n116565: u8 [a0 + 12] = 0\n116568: u8 [a0 + 11] = 0\n116571: u8 [a0 + 10] = 0\n116574: u8 [a0 + 9] = 0\n116577: u8 [a0 + 8] = 0\n116580: u8 [a0 + 7] = 0\n116583: u8 [a0 + 6] = 0\n116586: u8 [a0 + 5] = 0\n116589: u8 [a0 + 4] = 0\n116592: u8 [a0 + 3] = 0xa0\n116597: u8 [a0 + 2] = 0x79\n116601: u8 [a0 + 1] = 0xc3\n116606: u8 [a0 + 0] = 0x8\n116609: a1 = u64 [s1 + 0x1e0]\n116613: a0 = a1 + 0x4\n116616: a1 = a0 <u a1\n116619: a3 = u64 [s1 + 0x1f8]\n116623: a2 = a3 + a1\n116626: a3 = a2 <u a3\n116629: a3 = a1 if a1 == 0\n116632: a1 = u64 [s1 + 0x1f0]\n116636: a3 = a3 + a1\n116639: a1 = a3 <u a1\n116642: a4 = u64 [s1 + 0x1e8]\n116646: a4 = a4 + a1\n116649: u64 [s1 + 0x348] = a2\n116653: u64 [s1 + 0x340] = a0\n116657: u64 [s1 + 0x350] = a3\n116661: a0 = s1 + 0x360\n116665: a1 = s1 + 0x340\n116669: u64 [s1 + 0x358] = a4\n116673: ra = 1266, jump @1286\n      : @1354 [@dyn 633] (gas: 5)\n116679: a0 = u64 [s1 + 0x368]\n116683: t0 = u64 [s1 + 0x378]\n116687: t1 = u64 [s1 + 0x360]\n116691: a3 = u64 [s1 + 0x370]\n116695: fallthrough\n      : @1355 (gas: 27)\n116696: a1 = u64 [s1 + 0x1f8]\n116700: a4 = a0 ^ a1\n116703: a5 = a0 <u a1\n116706: ra = a1\n116708: t2 = u64 [s1 + 0x1e0]\n116712: a1 = t1 <u t2\n116715: a5 = a1 if a4 == 0\n116718: a2 = u64 [s1 + 0x1f0]\n116722: a4 = a3 - a2\n116725: a3 = a3 <u a2\n116728: a2 = u64 [s1 + 0x1e8]\n116732: a2 = t0 - a2\n116735: a2 = a2 - a3\n116738: a3 = a4 <u a5\n116741: a2 = a2 - a3\n116744: a4 = a4 - a5\n116747: a0 = a0 - ra\n116750: a1 = a0 - a1\n116753: a0 = t1 - t2\n116756: a1 = a1 | a2\n116759: a2 = a0 | a4\n116762: a2 = a2 | a1\n116765: a1 = a1 | a4\n116768: a2 = a2 >> 0x20\n116771: a1 = a1 << 0x20\n116774: a1 = a1 | a2\n116777: jump @1361 if a1 == 0\n      : @1356 (gas: 1)\n116780: trap\n      : @1357 (gas: 8)\n116781: u64 [s1 + 944] = 0\n116785: u64 [s1 + 936] = 0\n116789: u64 [s1 + 928] = 0\n116793: a0 = 0x4e487b7100000000\n116803: a1 = s1 + 0x3a0\n116807: u64 [s1 + 0x3b8] = a0\n116811: a0 = 0\n116813: ra = 1268, jump @23\n      : @1358 [@dyn 634] (gas: 7)\n116820: u64 [s1 + 920] = 0\n116824: u64 [s1 + 912] = 0\n116828: u64 [s1 + 896] = 0x11\n116833: a0 = 0x4\n116836: a1 = s1 + 0x380\n116840: u64 [s1 + 904] = 0\n116844: ra = 1270, jump @23\n      : @1359 [@dyn 635] (gas: 3)\n116851: a1 = 0x24\n116854: a0 = 0\n116856: ra = 1272, jump @0\n      : @1360 [@dyn 636] (gas: 5)\n116863: i32 a1 = a0 + 0\n116865: a0 = 0x1\n116868: a2 = 0x24\n116871: ecalli 12 // 'seal_return'\n116873: fallthrough\n      : @1361 (gas: 4)\n116874: i32 a1 = a0 + 0\n116876: u64 [s1 + 0x1f8] = a1\n116880: a0 = u64 [s1 + 0x1d8]\n116884: ra = 1274, jump @0\n      : @1362 [@dyn 637] (gas: 6)\n116891: i32 a1 = a0 + 0\n116893: a0 = 0x1\n116896: a2 = u64 [s1 + 0x1f8]\n116900: ra = 0x4fc\n116904: ecalli 12 // 'seal_return'\n116906: fallthrough\n      : @1363 [@dyn 638] (gas: 36)\n116907: sp = sp + 0xffffffffffffff70\n116911: u64 [sp + 0x88] = ra\n116915: u64 [sp + 0x80] = s0\n116919: u64 [sp + 0x78] = s1\n116922: s0 = sp + 0x90\n116926: sp = sp & 0xfffffffffffffff0\n116929: a3 = u64 [a0]\n116931: u64 [sp + 0x8] = a3\n116934: t1 = u64 [a0 + 0x8]\n116937: t2 = u64 [a0 + 0x10]\n116940: ra = u64 [a0 + 0x18]\n116943: t0 = u64 [a1]\n116945: a4 = u64 [a1 + 0x8]\n116948: a5 = u64 [a1 + 0x10]\n116951: a3 = u64 [a1 + 0x18]\n116954: s1 = u64 [a2]\n116956: a1 = u64 [a2 + 0x8]\n116959: a0 = u64 [a2 + 0x10]\n116962: a2 = u64 [a2 + 0x18]\n116965: u64 [sp + 0x28] = a2\n116968: u64 [sp + 0x20] = a0\n116971: u64 [sp + 0x18] = a1\n116974: u64 [sp + 0x10] = s1\n116977: u64 [sp + 0x48] = a3\n116980: u64 [sp + 0x40] = a5\n116983: u64 [sp + 0x38] = a4\n116986: u64 [sp + 0x30] = t0\n116989: u64 [sp + 0x68] = ra\n116992: u64 [sp + 0x60] = t2\n116995: u64 [sp + 0x58] = t1\n116998: a0 = sp + 0x50\n117001: a1 = sp + 0x30\n117004: a2 = sp + 0x10\n117007: a3 = u64 [sp + 0x8]\n117010: u64 [sp + 0x50] = a3\n117013: ra = 1278, jump @1254\n      : @1364 [@dyn 639] (gas: 6)\n117019: sp = s0 + 0xffffffffffffff70\n117023: ra = u64 [sp + 0x88]\n117027: s0 = u64 [sp + 0x80]\n117031: s1 = u64 [sp + 0x78]\n117034: sp = sp + 0x90\n117038: ret\n      : @1365 (gas: 43)\n117040: sp = sp + 0xfffffffffffffee0\n117044: u64 [sp + 0x118] = ra\n117048: u64 [sp + 0x110] = s0\n117052: u64 [sp + 0x108] = s1\n117056: s0 = sp + 0x120\n117060: sp = sp & 0xffffffffffffffe0\n117063: s1 = sp\n117065: a4 = u64 [a3 + 0x18]\n117068: u64 [s1 + 0x20] = a4\n117071: a4 = u64 [a3 + 0x10]\n117074: u64 [s1 + 0x28] = a4\n117077: a4 = u64 [a3 + 0x8]\n117080: u64 [s1 + 0x30] = a4\n117083: a3 = u64 [a3]\n117085: u64 [s1 + 0x38] = a3\n117088: a3 = u64 [a2 + 0x18]\n117091: u64 [s1 + 0x40] = a3\n117094: a3 = u64 [a2 + 0x10]\n117097: u64 [s1 + 0x48] = a3\n117100: a3 = u64 [a2 + 0x8]\n117103: u64 [s1 + 0x50] = a3\n117106: a2 = u64 [a2]\n117108: u64 [s1 + 0x58] = a2\n117111: a2 = u64 [a1 + 0x18]\n117114: u64 [s1 + 0x68] = a2\n117117: a2 = u64 [a1 + 0x10]\n117120: u64 [s1 + 0x70] = a2\n117123: a2 = u64 [a1 + 0x8]\n117126: u64 [s1 + 0x78] = a2\n117129: a1 = u64 [a1]\n117131: u64 [s1 + 0x80] = a1\n117135: u64 [s1 + 0x18] = a0\n117138: i32 a0 = s1 + 0xe0\n117142: ecalli 0 // 'address'\n117143: a0 = u32 [s1 + 0xf0]\n117147: u64 [s1 + 0xd0] = a0\n117151: a0 = u64 [s1 + 0xe8]\n117155: u64 [s1 + 0x98] = a0\n117159: a0 = u64 [s1 + 0xe0]\n117163: u64 [s1 + 0xc0] = a0\n117167: a0 = 0x40\n117170: a1 = 0x20\n117173: ra = 1280, jump @0\n      : @1366 [@dyn 640] (gas: 116)\n117180: a1 = u8 [a0 + 0x19]\n117183: a2 = u8 [a0 + 0x18]\n117186: a3 = u8 [a0 + 0x1a]\n117189: a4 = u8 [a0 + 0x1b]\n117192: a1 = a1 << 0x8\n117195: a1 = a1 | a2\n117198: a3 = a3 << 0x10\n117201: a4 = a4 << 0x18\n117204: a3 = a3 | a4\n117207: a1 = a1 | a3\n117210: a2 = u8 [a0 + 0x1d]\n117213: a3 = u8 [a0 + 0x1c]\n117216: a4 = u8 [a0 + 0x1e]\n117219: a5 = u8 [a0 + 0x1f]\n117222: a2 = a2 << 0x8\n117225: a2 = a2 | a3\n117228: a4 = a4 << 0x10\n117231: a5 = a5 << 0x18\n117234: a4 = a4 | a5\n117237: a2 = a2 | a4\n117240: a2 = a2 << 0x20\n117243: t0 = a2 | a1\n117246: a2 = u8 [a0 + 0x11]\n117249: a3 = u8 [a0 + 0x10]\n117252: a4 = u8 [a0 + 0x12]\n117255: a5 = u8 [a0 + 0x13]\n117258: a2 = a2 << 0x8\n117261: a2 = a2 | a3\n117264: a4 = a4 << 0x10\n117267: a5 = a5 << 0x18\n117270: a4 = a4 | a5\n117273: a2 = a2 | a4\n117276: a3 = u8 [a0 + 0x15]\n117279: a4 = u8 [a0 + 0x14]\n117282: a5 = u8 [a0 + 0x16]\n117285: a1 = u8 [a0 + 0x17]\n117288: a3 = a3 << 0x8\n117291: a3 = a3 | a4\n117294: a5 = a5 << 0x10\n117297: a1 = a1 << 0x18\n117300: a1 = a1 | a5\n117303: a1 = a1 | a3\n117306: a1 = a1 << 0x20\n117309: t1 = a1 | a2\n117312: a1 = u8 [a0 + 0x9]\n117315: a3 = u8 [a0 + 0x8]\n117318: a4 = u8 [a0 + 0xa]\n117321: a5 = u8 [a0 + 0xb]\n117324: a1 = a1 << 0x8\n117327: a1 = a1 | a3\n117330: a4 = a4 << 0x10\n117333: a5 = a5 << 0x18\n117336: a4 = a4 | a5\n117339: a1 = a1 | a4\n117342: a3 = u8 [a0 + 0xd]\n117345: a4 = u8 [a0 + 0xc]\n117348: a5 = u8 [a0 + 0xe]\n117351: a2 = u8 [a0 + 0xf]\n117354: a3 = a3 << 0x8\n117357: a3 = a3 | a4\n117360: a5 = a5 << 0x10\n117363: a2 = a2 << 0x18\n117366: a2 = a2 | a5\n117369: a2 = a2 | a3\n117372: a2 = a2 << 0x20\n117375: a3 = a2 | a1\n117378: a1 = u8 [a0 + 0x1]\n117381: a2 = u8 [a0]\n117383: a4 = u8 [a0 + 0x2]\n117386: a5 = u8 [a0 + 0x3]\n117389: a1 = a1 << 0x8\n117392: a1 = a1 | a2\n117395: a4 = a4 << 0x10\n117398: a5 = a5 << 0x18\n117401: a4 = a4 | a5\n117404: a1 = a1 | a4\n117407: a2 = u8 [a0 + 0x5]\n117410: a4 = u8 [a0 + 0x4]\n117413: a5 = u8 [a0 + 0x6]\n117416: a0 = u8 [a0 + 0x7]\n117419: a2 = a2 << 0x8\n117422: a2 = a2 | a4\n117425: a5 = a5 << 0x10\n117428: a0 = a0 << 0x18\n117431: a0 = a0 | a5\n117434: a0 = a0 | a2\n117437: a0 = a0 << 0x20\n117440: a0 = a0 | a1\n117443: a2 = reverse a0\n117445: a3 = reverse a3\n117447: a1 = reverse t1\n117449: a0 = reverse t0\n117451: a4 = a0 + 0x20\n117454: u64 [s1 + 0xa0] = a0\n117458: a0 = a4 <u a0\n117461: a5 = a1 + a0\n117464: u64 [s1 + 0xa8] = a1\n117468: a1 = a5 <u a1\n117471: a1 = a0 if a0 == 0\n117474: a1 = a1 + a3\n117477: u64 [s1 + 0xb0] = a3\n117481: a0 = a1 <u a3\n117484: u64 [s1 + 0xb8] = a2\n117488: a2 = a2 + a0\n117491: u64 [s1 + 0xd8] = a4\n117495: a0 = a4 | a1\n117498: u64 [s1 + 0xc8] = a5\n117502: u64 [s1 + 0x88] = a2\n117506: a2 = a2 | a5\n117509: a0 = a0 | a2\n117512: a0 = a0 >> 0x20\n117515: u64 [s1 + 0x90] = a1\n117519: a1 = a1 | a2\n117522: a1 = a1 << 0x20\n117525: a0 = a0 | a1\n117528: jump @1381 if a0 != 0\n      : @1367 (gas: 18)\n117532: a0 = u64 [s1 + 0xc0]\n117536: a0 = reverse a0\n117538: a0 = a0 << 0x20\n117541: a1 = u64 [s1 + 0x98]\n117545: a1 = reverse a1\n117547: a2 = a1 >> 0x20\n117550: a0 = a0 | a2\n117553: u64 [s1 + 0x98] = a0\n117557: a1 = a1 << 0x20\n117560: a0 = u64 [s1 + 0xd0]\n117564: a0 = reverse a0\n117566: a0 = a0 >> 0x20\n117569: a0 = a0 | a1\n117572: u64 [s1 + 0x60] = a0\n117575: a0 = i32 [s1 + 0xd8]\n117579: a1 = 0x20\n117582: u64 [s1 + 0xd0] = a0\n117586: ra = 1282, jump @0\n      : @1368 [@dyn 641] (gas: 67)\n117593: a1 = u64 [s1 + 0x60]\n117596: a1 = reverse a1\n117598: a2 = u64 [s1 + 0x98]\n117602: a2 = reverse a2\n117604: a4 = u64 [s1 + 0xc0]\n117608: a3 = a4 >> 0x18\n117611: u8 [a0 + 0xf] = a3\n117614: a3 = a4 >> 0x10\n117617: u8 [a0 + 0xe] = a3\n117620: a3 = a4 >> 0x8\n117623: u8 [a0 + 0xd] = a3\n117626: u8 [a0 + 0xc] = a4\n117629: u8 [a0 + 11] = 0\n117632: u8 [a0 + 10] = 0\n117635: u8 [a0 + 9] = 0\n117638: u8 [a0 + 8] = 0\n117641: u8 [a0 + 7] = 0\n117644: u8 [a0 + 6] = 0\n117647: u8 [a0 + 5] = 0\n117650: u8 [a0 + 4] = 0\n117653: u8 [a0 + 3] = 0\n117656: u8 [a0 + 2] = 0\n117659: u8 [a0 + 1] = 0\n117662: u8 [a0 + 0] = 0\n117664: u8 [a0 + 0x10] = a2\n117667: u8 [a0 + 0x18] = a1\n117670: a3 = a2 >> 0x38\n117673: u8 [a0 + 0x17] = a3\n117676: a3 = a2 >> 0x30\n117679: u8 [a0 + 0x16] = a3\n117682: a3 = a2 >> 0x28\n117685: u8 [a0 + 0x15] = a3\n117688: a3 = a2 >> 0x20\n117691: u8 [a0 + 0x14] = a3\n117694: a3 = a2 >> 0x18\n117697: u8 [a0 + 0x13] = a3\n117700: a3 = a2 >> 0x10\n117703: u8 [a0 + 0x12] = a3\n117706: a2 = a2 >> 0x8\n117709: u8 [a0 + 0x11] = a2\n117712: a2 = a1 >> 0x38\n117715: u8 [a0 + 0x1f] = a2\n117718: a2 = a1 >> 0x30\n117721: u8 [a0 + 0x1e] = a2\n117724: a2 = a1 >> 0x28\n117727: u8 [a0 + 0x1d] = a2\n117730: a2 = a1 >> 0x20\n117733: u8 [a0 + 0x1c] = a2\n117736: a2 = a1 >> 0x18\n117739: u8 [a0 + 0x1b] = a2\n117742: a2 = a1 >> 0x10\n117745: u8 [a0 + 0x1a] = a2\n117748: a1 = a1 >> 0x8\n117751: a2 = u64 [s1 + 0x90]\n117755: a4 = u64 [s1 + 0x88]\n117759: a4 = a4 | a2\n117762: a2 = 0x100000000\n117772: u64 [s1 + 0x98] = a2\n117776: a2 = 0xffffffe0\n117786: a3 = u64 [s1 + 0xd8]\n117790: a2 = a3 <u a2\n117793: a3 = u64 [s1 + 0xc8]\n117797: a2 = 0 if a3 != 0\n117799: u64 [s1 + 0xc0] = a4\n117803: a2 = 0 if a4 != 0\n117805: u8 [a0 + 0x19] = a1\n117808: jump @1381 if a2 == 0\n      : @1369 (gas: 4)\n117812: a0 = u64 [s1 + 0xd0]\n117816: i32 a0 = a0 + 0x20\n117819: a1 = 0x20\n117822: ra = 1284, jump @0\n      : @1370 [@dyn 642] (gas: 77)\n117829: a1 = u64 [s1 + 0x68]\n117832: a1 = reverse a1\n117834: a2 = u64 [s1 + 0x70]\n117837: a2 = reverse a2\n117839: a3 = u64 [s1 + 0x78]\n117842: a3 = reverse a3\n117844: a4 = u64 [s1 + 0x80]\n117848: a4 = reverse a4\n117850: a5 = a4 >> 0x38\n117853: u8 [a0 + 0x1f] = a5\n117856: a5 = a4 >> 0x30\n117859: u8 [a0 + 0x1e] = a5\n117862: a5 = a4 >> 0x28\n117865: u8 [a0 + 0x1d] = a5\n117868: a5 = a4 >> 0x20\n117871: u8 [a0 + 0x1c] = a5\n117874: a5 = a4 >> 0x18\n117877: u8 [a0 + 0x1b] = a5\n117880: a5 = a4 >> 0x10\n117883: u8 [a0 + 0x1a] = a5\n117886: a5 = a4 >> 0x8\n117889: u8 [a0 + 0x19] = a5\n117892: u8 [a0 + 0x18] = a4\n117895: u8 [a0 + 0x10] = a3\n117898: a4 = a3 >> 0x38\n117901: u8 [a0 + 0x17] = a4\n117904: a4 = a3 >> 0x30\n117907: u8 [a0 + 0x16] = a4\n117910: a4 = a3 >> 0x28\n117913: u8 [a0 + 0x15] = a4\n117916: a4 = a3 >> 0x20\n117919: u8 [a0 + 0x14] = a4\n117922: a4 = a3 >> 0x18\n117925: u8 [a0 + 0x13] = a4\n117928: a4 = a3 >> 0x10\n117931: u8 [a0 + 0x12] = a4\n117934: a3 = a3 >> 0x8\n117937: u8 [a0 + 0x11] = a3\n117940: u8 [a0 + 0x8] = a2\n117943: a3 = a2 >> 0x38\n117946: u8 [a0 + 0xf] = a3\n117949: a3 = a2 >> 0x30\n117952: u8 [a0 + 0xe] = a3\n117955: a3 = a2 >> 0x28\n117958: u8 [a0 + 0xd] = a3\n117961: a3 = a2 >> 0x20\n117964: u8 [a0 + 0xc] = a3\n117967: a3 = a2 >> 0x18\n117970: u8 [a0 + 0xb] = a3\n117973: a3 = a2 >> 0x10\n117976: u8 [a0 + 0xa] = a3\n117979: a2 = a2 >> 0x8\n117982: u8 [a0 + 0x9] = a2\n117985: u8 [a0] = a1\n117987: a2 = a1 >> 0x38\n117990: u8 [a0 + 0x7] = a2\n117993: a2 = a1 >> 0x30\n117996: u8 [a0 + 0x6] = a2\n117999: a2 = a1 >> 0x28\n118002: u8 [a0 + 0x5] = a2\n118005: a2 = a1 >> 0x20\n118008: u8 [a0 + 0x4] = a2\n118011: a2 = a1 >> 0x18\n118014: u8 [a0 + 0x3] = a2\n118017: a2 = a1 >> 0x10\n118020: u8 [a0 + 0x2] = a2\n118023: a1 = a1 >> 0x8\n118026: a2 = u64 [s1 + 0x98]\n118030: a2 = a2 + 0xffffffffffffffc0\n118033: a3 = u64 [s1 + 0xd8]\n118037: a2 = a3 <u a2\n118040: a3 = u64 [s1 + 0xc8]\n118044: a2 = 0 if a3 != 0\n118046: a3 = u64 [s1 + 0xc0]\n118050: a2 = 0 if a3 != 0\n118052: u8 [a0 + 0x1] = a1\n118055: jump @1381 if a2 == 0\n      : @1371 (gas: 4)\n118059: a0 = u64 [s1 + 0xd0]\n118063: i32 a0 = a0 + 0x40\n118066: a1 = 0x20\n118069: ra = 1286, jump @0\n      : @1372 [@dyn 643] (gas: 76)\n118076: a1 = u64 [s1 + 0x40]\n118079: a1 = reverse a1\n118081: a2 = u64 [s1 + 0x48]\n118084: a2 = reverse a2\n118086: a3 = u64 [s1 + 0x50]\n118089: a3 = reverse a3\n118091: a4 = u64 [s1 + 0x58]\n118094: a4 = reverse a4\n118096: a5 = a4 >> 0x38\n118099: u8 [a0 + 0x1f] = a5\n118102: a5 = a4 >> 0x30\n118105: u8 [a0 + 0x1e] = a5\n118108: a5 = a4 >> 0x28\n118111: u8 [a0 + 0x1d] = a5\n118114: a5 = a4 >> 0x20\n118117: u8 [a0 + 0x1c] = a5\n118120: a5 = a4 >> 0x18\n118123: u8 [a0 + 0x1b] = a5\n118126: a5 = a4 >> 0x10\n118129: u8 [a0 + 0x1a] = a5\n118132: a5 = a4 >> 0x8\n118135: u8 [a0 + 0x19] = a5\n118138: u8 [a0 + 0x18] = a4\n118141: u8 [a0 + 0x10] = a3\n118144: a4 = a3 >> 0x38\n118147: u8 [a0 + 0x17] = a4\n118150: a4 = a3 >> 0x30\n118153: u8 [a0 + 0x16] = a4\n118156: a4 = a3 >> 0x28\n118159: u8 [a0 + 0x15] = a4\n118162: a4 = a3 >> 0x20\n118165: u8 [a0 + 0x14] = a4\n118168: a4 = a3 >> 0x18\n118171: u8 [a0 + 0x13] = a4\n118174: a4 = a3 >> 0x10\n118177: u8 [a0 + 0x12] = a4\n118180: a3 = a3 >> 0x8\n118183: u8 [a0 + 0x11] = a3\n118186: u8 [a0 + 0x8] = a2\n118189: a3 = a2 >> 0x38\n118192: u8 [a0 + 0xf] = a3\n118195: a3 = a2 >> 0x30\n118198: u8 [a0 + 0xe] = a3\n118201: a3 = a2 >> 0x28\n118204: u8 [a0 + 0xd] = a3\n118207: a3 = a2 >> 0x20\n118210: u8 [a0 + 0xc] = a3\n118213: a3 = a2 >> 0x18\n118216: u8 [a0 + 0xb] = a3\n118219: a3 = a2 >> 0x10\n118222: u8 [a0 + 0xa] = a3\n118225: a2 = a2 >> 0x8\n118228: u8 [a0 + 0x9] = a2\n118231: u8 [a0] = a1\n118233: a2 = a1 >> 0x38\n118236: u8 [a0 + 0x7] = a2\n118239: a2 = a1 >> 0x30\n118242: u8 [a0 + 0x6] = a2\n118245: a2 = a1 >> 0x28\n118248: u8 [a0 + 0x5] = a2\n118251: a2 = a1 >> 0x20\n118254: u8 [a0 + 0x4] = a2\n118257: a2 = a1 >> 0x18\n118260: u8 [a0 + 0x3] = a2\n118263: a2 = a1 >> 0x10\n118266: u8 [a0 + 0x2] = a2\n118269: a1 = a1 >> 0x8\n118272: a2 = 0xffffffa0\n118282: a3 = u64 [s1 + 0xd8]\n118286: a2 = a3 <u a2\n118289: a3 = u64 [s1 + 0xc8]\n118293: a2 = 0 if a3 != 0\n118295: a3 = u64 [s1 + 0xc0]\n118299: a2 = 0 if a3 != 0\n118301: u8 [a0 + 0x1] = a1\n118304: jump @1381 if a2 == 0\n      : @1373 (gas: 4)\n118308: a0 = u64 [s1 + 0xd0]\n118312: i32 a0 = a0 + 0x60\n118315: a1 = 0x20\n118318: ra = 1288, jump @0\n      : @1374 [@dyn 644] (gas: 80)\n118325: a1 = u64 [s1 + 0x20]\n118328: a1 = reverse a1\n118330: a2 = u64 [s1 + 0x28]\n118333: a2 = reverse a2\n118335: a3 = u64 [s1 + 0x30]\n118338: a3 = reverse a3\n118340: a4 = u64 [s1 + 0x38]\n118343: a4 = reverse a4\n118345: a5 = a4 >> 0x38\n118348: u8 [a0 + 0x1f] = a5\n118351: a5 = a4 >> 0x30\n118354: u8 [a0 + 0x1e] = a5\n118357: a5 = a4 >> 0x28\n118360: u8 [a0 + 0x1d] = a5\n118363: a5 = a4 >> 0x20\n118366: u8 [a0 + 0x1c] = a5\n118369: a5 = a4 >> 0x18\n118372: u8 [a0 + 0x1b] = a5\n118375: a5 = a4 >> 0x10\n118378: u8 [a0 + 0x1a] = a5\n118381: a5 = a4 >> 0x8\n118384: u8 [a0 + 0x19] = a5\n118387: u8 [a0 + 0x18] = a4\n118390: u8 [a0 + 0x10] = a3\n118393: a4 = a3 >> 0x38\n118396: u8 [a0 + 0x17] = a4\n118399: a4 = a3 >> 0x30\n118402: u8 [a0 + 0x16] = a4\n118405: a4 = a3 >> 0x28\n118408: u8 [a0 + 0x15] = a4\n118411: a4 = a3 >> 0x20\n118414: u8 [a0 + 0x14] = a4\n118417: a4 = a3 >> 0x18\n118420: u8 [a0 + 0x13] = a4\n118423: a4 = a3 >> 0x10\n118426: u8 [a0 + 0x12] = a4\n118429: a3 = a3 >> 0x8\n118432: u8 [a0 + 0x11] = a3\n118435: u8 [a0 + 0x8] = a2\n118438: a3 = a2 >> 0x38\n118441: u8 [a0 + 0xf] = a3\n118444: a3 = a2 >> 0x30\n118447: u8 [a0 + 0xe] = a3\n118450: a3 = a2 >> 0x28\n118453: u8 [a0 + 0xd] = a3\n118456: a3 = a2 >> 0x20\n118459: u8 [a0 + 0xc] = a3\n118462: a3 = a2 >> 0x18\n118465: u8 [a0 + 0xb] = a3\n118468: a3 = a2 >> 0x10\n118471: u8 [a0 + 0xa] = a3\n118474: a2 = a2 >> 0x8\n118477: u8 [a0 + 0x9] = a2\n118480: u8 [a0] = a1\n118482: a2 = a1 >> 0x38\n118485: u8 [a0 + 0x7] = a2\n118488: a2 = a1 >> 0x30\n118491: u8 [a0 + 0x6] = a2\n118494: a2 = a1 >> 0x28\n118497: u8 [a0 + 0x5] = a2\n118500: a2 = a1 >> 0x20\n118503: u8 [a0 + 0x4] = a2\n118506: a2 = a1 >> 0x18\n118509: u8 [a0 + 0x3] = a2\n118512: a2 = a1 >> 0x10\n118515: u8 [a0 + 0x2] = a2\n118518: t0 = a1 >> 0x8\n118521: a5 = u64 [s1 + 0xb0]\n118525: a4 = u64 [s1 + 0xa0]\n118529: a2 = a4 | a5\n118532: a3 = u64 [s1 + 0xb8]\n118536: a1 = u64 [s1 + 0xa8]\n118540: a3 = a3 | a1\n118543: a2 = a2 | a3\n118546: a2 = a2 >> 0x20\n118549: a3 = a3 | a5\n118552: a3 = a3 << 0x20\n118555: a2 = a2 | a3\n118558: u8 [a0 + 0x1] = t0\n118561: jump @1381 if a2 != 0\n      : @1375 (gas: 4)\n118565: i32 a0 = a4 + 0\n118567: u64 [s1 + 0xd8] = a0\n118571: a1 = 0x20\n118574: ra = 1290, jump @0\n      : @1376 [@dyn 645] (gas: 51)\n118581: u8 [a0 + 31] = 0x80\n118586: u8 [a0 + 30] = 0\n118589: u8 [a0 + 29] = 0\n118592: u8 [a0 + 28] = 0\n118595: u8 [a0 + 27] = 0\n118598: u8 [a0 + 26] = 0\n118601: u8 [a0 + 25] = 0\n118604: u8 [a0 + 24] = 0\n118607: u8 [a0 + 23] = 0\n118610: u8 [a0 + 22] = 0\n118613: u8 [a0 + 21] = 0\n118616: u8 [a0 + 20] = 0\n118619: u8 [a0 + 19] = 0\n118622: u8 [a0 + 18] = 0\n118625: u8 [a0 + 17] = 0\n118628: u8 [a0 + 16] = 0\n118631: u8 [a0 + 15] = 0\n118634: u8 [a0 + 14] = 0\n118637: u8 [a0 + 13] = 0\n118640: u8 [a0 + 12] = 0\n118643: u8 [a0 + 11] = 0\n118646: u8 [a0 + 10] = 0\n118649: u8 [a0 + 9] = 0\n118652: u8 [a0 + 8] = 0\n118655: u8 [a0 + 7] = 0\n118658: u8 [a0 + 6] = 0\n118661: u8 [a0 + 5] = 0\n118664: u8 [a0 + 4] = 0\n118667: u8 [a0 + 3] = 0\n118670: u8 [a0 + 2] = 0\n118673: u8 [a0 + 1] = 0\n118676: u8 [a0 + 0] = 0\n118678: a0 = u64 [s1 + 0xa0]\n118682: a1 = a0 + 0xa0\n118686: u64 [s1 + 0xc8] = a1\n118690: a0 = a1 <u a0\n118693: a1 = u64 [s1 + 0xa8]\n118697: a2 = a1 + a0\n118700: u64 [s1 + 0xc0] = a2\n118704: a1 = a2 <u a1\n118707: a1 = a0 if a0 == 0\n118710: a0 = u64 [s1 + 0xb0]\n118714: a1 = a1 + a0\n118717: u64 [s1 + 0xa8] = a1\n118721: a0 = a1 <u a0\n118724: a1 = u64 [s1 + 0xb8]\n118728: a0 = a0 + a1\n118731: u64 [s1 + 0xb8] = a0\n118735: a0 = 0x40\n118738: a1 = 0x20\n118741: ra = 1292, jump @0\n      : @1377 [@dyn 646] (gas: 71)\n118748: a1 = u64 [s1 + 0xb8]\n118752: a1 = reverse a1\n118754: a2 = u64 [s1 + 0xa8]\n118758: a2 = reverse a2\n118760: a3 = u64 [s1 + 0xc0]\n118764: a3 = reverse a3\n118766: a4 = u64 [s1 + 0xc8]\n118770: a4 = reverse a4\n118772: a5 = a4 >> 0x38\n118775: u8 [a0 + 0x1f] = a5\n118778: a5 = a4 >> 0x30\n118781: u8 [a0 + 0x1e] = a5\n118784: a5 = a4 >> 0x28\n118787: u8 [a0 + 0x1d] = a5\n118790: a5 = a4 >> 0x20\n118793: u8 [a0 + 0x1c] = a5\n118796: a5 = a4 >> 0x18\n118799: u8 [a0 + 0x1b] = a5\n118802: a5 = a4 >> 0x10\n118805: u8 [a0 + 0x1a] = a5\n118808: a5 = a4 >> 0x8\n118811: u8 [a0 + 0x19] = a5\n118814: u8 [a0 + 0x18] = a4\n118817: a4 = a3 >> 0x38\n118820: u8 [a0 + 0x17] = a4\n118823: a4 = a3 >> 0x30\n118826: u8 [a0 + 0x16] = a4\n118829: a4 = a3 >> 0x28\n118832: u8 [a0 + 0x15] = a4\n118835: a4 = a3 >> 0x20\n118838: u8 [a0 + 0x14] = a4\n118841: a4 = a3 >> 0x18\n118844: u8 [a0 + 0x13] = a4\n118847: a4 = a3 >> 0x10\n118850: u8 [a0 + 0x12] = a4\n118853: a4 = a3 >> 0x8\n118856: u8 [a0 + 0x11] = a4\n118859: u8 [a0 + 0x10] = a3\n118862: u8 [a0 + 0x8] = a2\n118865: a3 = a2 >> 0x38\n118868: u8 [a0 + 0xf] = a3\n118871: a3 = a2 >> 0x30\n118874: u8 [a0 + 0xe] = a3\n118877: a3 = a2 >> 0x28\n118880: u8 [a0 + 0xd] = a3\n118883: a3 = a2 >> 0x20\n118886: u8 [a0 + 0xc] = a3\n118889: a3 = a2 >> 0x18\n118892: u8 [a0 + 0xb] = a3\n118895: a3 = a2 >> 0x10\n118898: u8 [a0 + 0xa] = a3\n118901: a2 = a2 >> 0x8\n118904: u8 [a0 + 0x9] = a2\n118907: u8 [a0] = a1\n118909: a2 = a1 >> 0x38\n118912: u8 [a0 + 0x7] = a2\n118915: a2 = a1 >> 0x30\n118918: u8 [a0 + 0x6] = a2\n118921: a2 = a1 >> 0x28\n118924: u8 [a0 + 0x5] = a2\n118927: a2 = a1 >> 0x20\n118930: u8 [a0 + 0x4] = a2\n118933: a2 = a1 >> 0x18\n118936: u8 [a0 + 0x3] = a2\n118939: a2 = a1 >> 0x10\n118942: u8 [a0 + 0x2] = a2\n118945: a1 = a1 >> 0x8\n118948: u8 [a0 + 0x1] = a1\n118951: a1 = 0x20\n118954: a0 = u64 [s1 + 0xd8]\n118958: ra = 1294, jump @0\n      : @1378 [@dyn 647] (gas: 100)\n118965: a1 = u8 [a0 + 0x11]\n118968: a2 = u8 [a0 + 0x10]\n118971: a3 = u8 [a0 + 0x12]\n118974: a4 = u8 [a0 + 0x13]\n118977: a1 = a1 << 0x8\n118980: a1 = a1 | a2\n118983: a3 = a3 << 0x10\n118986: a4 = a4 << 0x18\n118989: a3 = a3 | a4\n118992: a1 = a1 | a3\n118995: a2 = u8 [a0 + 0x15]\n118998: a3 = u8 [a0 + 0x14]\n119001: a4 = u8 [a0 + 0x16]\n119004: a5 = u8 [a0 + 0x17]\n119007: a2 = a2 << 0x8\n119010: a2 = a2 | a3\n119013: a4 = a4 << 0x10\n119016: a5 = a5 << 0x18\n119019: a4 = a4 | a5\n119022: a2 = a2 | a4\n119025: a2 = a2 << 0x20\n119028: t0 = a2 | a1\n119031: a2 = u8 [a0 + 0x1]\n119034: a3 = u8 [a0]\n119036: a4 = u8 [a0 + 0x2]\n119039: a5 = u8 [a0 + 0x3]\n119042: a2 = a2 << 0x8\n119045: a2 = a2 | a3\n119048: a4 = a4 << 0x10\n119051: a5 = a5 << 0x18\n119054: a4 = a4 | a5\n119057: a2 = a2 | a4\n119060: a3 = u8 [a0 + 0x5]\n119063: a4 = u8 [a0 + 0x4]\n119066: a5 = u8 [a0 + 0x6]\n119069: a1 = u8 [a0 + 0x7]\n119072: a3 = a3 << 0x8\n119075: a3 = a3 | a4\n119078: a5 = a5 << 0x10\n119081: a1 = a1 << 0x18\n119084: a1 = a1 | a5\n119087: a1 = a1 | a3\n119090: a1 = a1 << 0x20\n119093: t1 = a1 | a2\n119096: a1 = u8 [a0 + 0x19]\n119099: a3 = u8 [a0 + 0x18]\n119102: a4 = u8 [a0 + 0x1a]\n119105: a5 = u8 [a0 + 0x1b]\n119108: a1 = a1 << 0x8\n119111: a1 = a1 | a3\n119114: a4 = a4 << 0x10\n119117: a5 = a5 << 0x18\n119120: a4 = a4 | a5\n119123: a1 = a1 | a4\n119126: a3 = u8 [a0 + 0x1d]\n119129: a4 = u8 [a0 + 0x1c]\n119132: a5 = u8 [a0 + 0x1e]\n119135: a2 = u8 [a0 + 0x1f]\n119138: a3 = a3 << 0x8\n119141: a3 = a3 | a4\n119144: a5 = a5 << 0x10\n119147: a2 = a2 << 0x18\n119150: a2 = a2 | a5\n119153: a2 = a2 | a3\n119156: a2 = a2 << 0x20\n119159: a3 = a2 | a1\n119162: a1 = u8 [a0 + 0x9]\n119165: a2 = u8 [a0 + 0x8]\n119168: a4 = u8 [a0 + 0xa]\n119171: a5 = u8 [a0 + 0xb]\n119174: a1 = a1 << 0x8\n119177: a1 = a1 | a2\n119180: a4 = a4 << 0x10\n119183: a5 = a5 << 0x18\n119186: a4 = a4 | a5\n119189: a1 = a1 | a4\n119192: a2 = u8 [a0 + 0xd]\n119195: a4 = u8 [a0 + 0xc]\n119198: a5 = u8 [a0 + 0xe]\n119201: a0 = u8 [a0 + 0xf]\n119204: a2 = a2 << 0x8\n119207: a2 = a2 | a4\n119210: a5 = a5 << 0x10\n119213: a0 = a0 << 0x18\n119216: a0 = a0 | a5\n119219: a0 = a0 | a2\n119222: a0 = a0 << 0x20\n119225: a0 = a0 | a1\n119228: a1 = reverse a0\n119230: a0 = reverse a3\n119232: a2 = reverse t1\n119234: a3 = reverse t0\n119236: a2 = a2 | a3\n119239: a3 = a0 | a1\n119242: a3 = a3 | a2\n119245: a3 = a3 >> 0x20\n119248: a1 = a1 | a2\n119251: a1 = a1 << 0x20\n119254: a1 = a1 | a3\n119257: jump @1381 if a1 != 0\n      : @1379 (gas: 4)\n119260: i32 a1 = a0 + 0\n119262: u64 [s1 + 0xd8] = a1\n119266: a0 = u64 [s1 + 0xd0]\n119270: ra = 1296, jump @0\n      : @1380 [@dyn 648] (gas: 28)\n119277: a1 = sp + 0xffffffffffffffe0\n119280: a1 = a1 & 0xffffffffffffffe0\n119283: u64 [s1 + 0xd0] = a1\n119287: sp = a1\n119289: i32 a0 = a0 + 0\n119291: i32 a2 = a1 + 0\n119293: a1 = u64 [s1 + 0xd8]\n119297: ecalli 8 // 'hash_keccak_256'\n119299: a3 = u64 [s1 + 0xd0]\n119303: a0 = u64 [a3 + 0x18]\n119306: a1 = u64 [a3 + 0x10]\n119309: a2 = u64 [a3 + 0x8]\n119312: a3 = u64 [a3]\n119314: a0 = reverse a0\n119316: a1 = reverse a1\n119318: a2 = reverse a2\n119320: a3 = reverse a3\n119322: a4 = u64 [s1 + 0x18]\n119325: u64 [a4 + 0x18] = a3\n119328: u64 [a4 + 0x10] = a2\n119331: u64 [a4 + 0x8] = a1\n119334: u64 [a4] = a0\n119336: sp = s0 + 0xfffffffffffffee0\n119340: ra = u64 [sp + 0x118]\n119344: s0 = u64 [sp + 0x110]\n119348: s1 = u64 [sp + 0x108]\n119352: sp = sp + 0x120\n119356: ret\n      : @1381 (gas: 1)\n119358: trap\n      : @1382 (gas: 16)\n119359: sp = sp + 0xffffffffffffff20\n119363: u64 [sp + 0xd8] = ra\n119367: u64 [sp + 0xd0] = s0\n119371: u64 [sp + 0xc8] = s1\n119375: s0 = sp + 0xe0\n119379: sp = sp & 0xfffffffffffffff0\n119382: a3 = u64 [a1 + 0x18]\n119385: a2 = u64 [a1 + 0x10]\n119388: a4 = u64 [a1 + 0x8]\n119391: u64 [sp + 0x10] = a2\n119394: u64 [sp + 0x8] = a3\n119397: a2 = a2 | a3\n119400: a3 = a4 <u 0x1\n119403: a3 = 0 if a2 != 0\n119405: u64 [sp + 0x38] = a0\n119408: jump @1388 if a3 == 0\n      : @1383 (gas: 19)\n119412: s1 = u64 [a1]\n119414: a0 = s1 + 0x1f\n119417: a1 = a0 <u s1\n119420: u64 [sp + 0x18] = a4\n119423: a1 = a1 + a4\n119426: a1 = a1 & 0x1\n119429: a0 = a0 & 0xffffffffffffffe0\n119432: a2 = a0 + 0x20\n119435: a0 = a2 <u a0\n119438: a3 = a1 + a0\n119441: a4 = a3 <u a1\n119444: a4 = a0 if a0 == 0\n119447: u64 [sp + 152] = 0\n119451: u64 [sp + 0x80] = a2\n119455: u64 [sp + 0x88] = a3\n119459: a0 = sp + 0xa0\n119463: a1 = sp + 0x80\n119467: u64 [sp + 0x90] = a4\n119471: ra = 1298, jump @571\n      : @1384 [@dyn 649] (gas: 15)\n119478: a0 = u64 [sp + 0xb8]\n119482: a2 = u64 [sp + 0xb0]\n119486: a1 = u64 [sp + 0xa8]\n119490: a3 = u64 [sp + 0xa0]\n119494: u64 [sp + 0x28] = a0\n119497: u64 [sp + 0x20] = a1\n119500: a0 = a0 | a1\n119503: a1 = a3 | a2\n119506: a1 = a1 | a0\n119509: a1 = a1 >> 0x20\n119512: u64 [sp + 0x30] = a2\n119515: a0 = a0 | a2\n119518: a0 = a0 << 0x20\n119521: a0 = a0 | a1\n119524: jump @1387 if a0 != 0\n      : @1385 (gas: 4)\n119528: i32 a0 = a3 + 0\n119530: a1 = 0x20\n119533: u64 [sp] = a3\n119535: ra = 1300, jump @0\n      : @1386 [@dyn 650] (gas: 82)\n119542: a1 = u64 [sp + 0x8]\n119545: a1 = reverse a1\n119547: a2 = u64 [sp + 0x10]\n119550: a2 = reverse a2\n119552: a3 = u64 [sp + 0x18]\n119555: a3 = reverse a3\n119557: a4 = reverse s1\n119559: a5 = a4 >> 0x38\n119562: u8 [a0 + 0x1f] = a5\n119565: a5 = a4 >> 0x30\n119568: u8 [a0 + 0x1e] = a5\n119571: a5 = a4 >> 0x28\n119574: u8 [a0 + 0x1d] = a5\n119577: a5 = a4 >> 0x20\n119580: u8 [a0 + 0x1c] = a5\n119583: a5 = a4 >> 0x18\n119586: u8 [a0 + 0x1b] = a5\n119589: a5 = a4 >> 0x10\n119592: u8 [a0 + 0x1a] = a5\n119595: a5 = a4 >> 0x8\n119598: u8 [a0 + 0x19] = a5\n119601: u8 [a0 + 0x18] = a4\n119604: u8 [a0 + 0x10] = a3\n119607: a4 = a3 >> 0x38\n119610: u8 [a0 + 0x17] = a4\n119613: a4 = a3 >> 0x30\n119616: u8 [a0 + 0x16] = a4\n119619: a4 = a3 >> 0x28\n119622: u8 [a0 + 0x15] = a4\n119625: a4 = a3 >> 0x20\n119628: u8 [a0 + 0x14] = a4\n119631: a4 = a3 >> 0x18\n119634: u8 [a0 + 0x13] = a4\n119637: a4 = a3 >> 0x10\n119640: u8 [a0 + 0x12] = a4\n119643: a3 = a3 >> 0x8\n119646: u8 [a0 + 0x11] = a3\n119649: u8 [a0 + 0x8] = a2\n119652: a3 = a2 >> 0x38\n119655: u8 [a0 + 0xf] = a3\n119658: a3 = a2 >> 0x30\n119661: u8 [a0 + 0xe] = a3\n119664: a3 = a2 >> 0x28\n119667: u8 [a0 + 0xd] = a3\n119670: a3 = a2 >> 0x20\n119673: u8 [a0 + 0xc] = a3\n119676: a3 = a2 >> 0x18\n119679: u8 [a0 + 0xb] = a3\n119682: a3 = a2 >> 0x10\n119685: u8 [a0 + 0xa] = a3\n119688: a2 = a2 >> 0x8\n119691: u8 [a0 + 0x9] = a2\n119694: u8 [a0] = a1\n119696: a2 = a1 >> 0x38\n119699: u8 [a0 + 0x7] = a2\n119702: a2 = a1 >> 0x30\n119705: u8 [a0 + 0x6] = a2\n119708: a2 = a1 >> 0x28\n119711: u8 [a0 + 0x5] = a2\n119714: a2 = a1 >> 0x20\n119717: u8 [a0 + 0x4] = a2\n119720: a2 = a1 >> 0x18\n119723: u8 [a0 + 0x3] = a2\n119726: a2 = a1 >> 0x10\n119729: u8 [a0 + 0x2] = a2\n119732: a1 = a1 >> 0x8\n119735: u8 [a0 + 0x1] = a1\n119738: a0 = u64 [sp + 0x38]\n119741: a1 = u64 [sp]\n119743: u64 [a0] = a1\n119745: a1 = u64 [sp + 0x28]\n119748: u64 [a0 + 0x18] = a1\n119751: a1 = u64 [sp + 0x20]\n119754: u64 [a0 + 0x8] = a1\n119757: a1 = u64 [sp + 0x30]\n119760: u64 [a0 + 0x10] = a1\n119763: sp = s0 + 0xffffffffffffff20\n119767: ra = u64 [sp + 0xd8]\n119771: s0 = u64 [sp + 0xd0]\n119775: s1 = u64 [sp + 0xc8]\n119779: sp = sp + 0xe0\n119783: ret\n      : @1387 (gas: 1)\n119785: trap\n      : @1388 (gas: 8)\n119786: u64 [sp + 112] = 0\n119789: u64 [sp + 104] = 0\n119792: u64 [sp + 96] = 0\n119795: a0 = 0x4e487b7100000000\n119805: a1 = sp + 0x60\n119808: u64 [sp + 0x78] = a0\n119811: a0 = 0\n119813: ra = 1302, jump @23\n      : @1389 [@dyn 651] (gas: 7)\n119820: u64 [sp + 88] = 0\n119823: u64 [sp + 80] = 0\n119826: u64 [sp + 64] = 0x41\n119830: a0 = 0x4\n119833: a1 = sp + 0x40\n119836: u64 [sp + 72] = 0\n119839: ra = 1304, jump @23\n      : @1390 [@dyn 652] (gas: 3)\n119846: a1 = 0x24\n119849: a0 = 0\n119851: ra = 1306, jump @0\n      : @1391 [@dyn 653] (gas: 6)\n119858: i32 a1 = a0 + 0\n119860: a0 = 0x1\n119863: a2 = 0x24\n119866: ra = 0x51c\n119870: ecalli 12 // 'seal_return'\n119872: fallthrough\n      : @1392 [@dyn 654] (gas: 6)\n119873: u64 [a0 + 24] = 0\n119876: u64 [a0 + 16] = 0\n119879: u64 [a0 + 8] = 0\n119882: a1 = 0x60\n119885: u64 [a0] = a1\n119887: ret\n      : @1393 (gas: 1)\n119889: jump @1402 if a0 == 0\n      : @1394 (gas: 9)\n119893: u64 [sp + 0x20] = s1\n119896: ecalli 11 // 'return_data_size'\n119898: u64 [sp + 88] = 0\n119901: u64 [sp + 80] = 0\n119904: u64 [sp + 0x40] = a0\n119907: a0 = sp + 0x60\n119910: a1 = sp + 0x40\n119913: u64 [sp + 72] = 0\n119916: ra = 1310, jump @1382\n      : @1395 [@dyn 655] (gas: 9)\n119922: a0 = u64 [sp + 0x78]\n119925: u64 [sp + 0x38] = a0\n119928: a0 = u64 [sp + 0x70]\n119931: u64 [sp + 0x30] = a0\n119934: a0 = u64 [sp + 0x68]\n119937: u64 [sp + 0x28] = a0\n119940: s1 = u64 [sp + 0x60]\n119943: ecalli 11 // 'return_data_size'\n119945: fallthrough\n      : @1396 (gas: 20)\n119946: a1 = s1 + 0x20\n119949: u64 [sp + 0x18] = s1\n119952: a2 = a1 <u s1\n119955: a4 = u64 [sp + 0x28]\n119958: a3 = a4 + a2\n119961: a4 = a3 <u a4\n119964: a4 = a2 if a2 == 0\n119967: a2 = u64 [sp + 0x30]\n119970: a4 = a4 + a2\n119973: a2 = a4 <u a2\n119976: a5 = u64 [sp + 0x38]\n119979: a2 = a2 + a5\n119982: a5 = a1 | a4\n119985: a2 = a2 | a3\n119988: a5 = a5 | a2\n119991: a5 = a5 >> 0x20\n119994: a2 = a2 | a4\n119997: a2 = a2 << 0x20\n120000: a2 = a2 | a5\n120003: jump @1401 if a2 != 0\n      : @1397 (gas: 3)\n120006: s1 = a0\n120008: a0 = a0 >> 0x20\n120011: jump @1401 if a0 != 0\n      : @1398 (gas: 4)\n120014: i32 a0 = a1 + 0\n120016: i32 a1 = s1 + 0\n120018: u64 [sp + 0x10] = a1\n120021: ra = 1312, jump @0\n      : @1399 [@dyn 656] (gas: 6)\n120028: u32 [sp + 0x80] = s1\n120032: i32 a0 = a0 + 0\n120034: i32 a1 = sp + 0x80\n120038: a2 = 0\n120040: ecalli 10 // 'return_data_copy'\n120042: fallthrough\n      : @1400 (gas: 8)\n120043: a0 = i32 [sp + 0x80]\n120047: s1 = u64 [sp + 0x20]\n120050: a1 = u64 [sp + 0x38]\n120053: a2 = u64 [sp + 0x30]\n120056: a3 = u64 [sp + 0x28]\n120059: a4 = u64 [sp + 0x18]\n120062: a5 = u64 [sp + 0x10]\n120065: jump @1403 if a0 >=u a5\n      : @1401 (gas: 1)\n120068: trap\n      : @1402 (gas: 5)\n120069: a3 = 0\n120071: a2 = 0\n120073: a1 = 0\n120075: a4 = 0x60\n120078: fallthrough\n      : @1403 (gas: 10)\n120079: u64 [s1] = a4\n120081: u64 [s1 + 0x8] = a3\n120084: u64 [s1 + 0x10] = a2\n120087: u64 [s1 + 0x18] = a1\n120090: sp = s0 + 0xffffffffffffff60\n120094: ra = u64 [sp + 0x98]\n120098: s0 = u64 [sp + 0x90]\n120102: s1 = u64 [sp + 0x88]\n120106: sp = sp + 0xa0\n120110: ret\n      : @1404 (gas: 17)\n120112: sp = sp + 0xffffffffffffffa0\n120115: u64 [sp + 0x58] = ra\n120118: u64 [sp + 0x50] = s0\n120121: u64 [sp + 0x48] = s1\n120124: a3 = u64 [a1 + 0x18]\n120127: a4 = u64 [a1 + 0x10]\n120130: a5 = u64 [a1 + 0x8]\n120133: s1 = u64 [a1]\n120135: a1 = a5 | a3\n120138: a2 = s1 | a4\n120141: a2 = a2 | a1\n120144: a2 = a2 >> 0x20\n120147: a1 = a1 | a4\n120150: a1 = a1 << 0x20\n120153: a1 = a1 | a2\n120156: u64 [sp + 0x28] = a0\n120159: jump @1411 if a1 != 0\n      : @1405 (gas: 19)\n120163: a0 = s1 + 0x20\n120166: u64 [sp + 0x30] = a0\n120169: a0 = a0 <u s1\n120172: a1 = a5 + a0\n120175: u64 [sp + 0x40] = a1\n120178: u64 [sp + 0x8] = a5\n120181: s0 = a1 <u a5\n120184: s0 = a0 if a0 == 0\n120187: s0 = s0 + a4\n120190: u64 [sp + 0x10] = a4\n120193: a0 = s0 <u a4\n120196: u64 [sp + 0x18] = a3\n120199: a0 = a0 + a3\n120202: u64 [sp + 0x38] = a0\n120205: u64 [sp] = s1\n120207: i32 a0 = s1 + 0\n120209: a1 = 0x20\n120212: s1 = 0x20\n120215: ra = 1314, jump @0\n      : @1406 [@dyn 657] (gas: 45)\n120222: u8 [a0 + 0x1f] = s1\n120225: a1 = u64 [sp + 0x30]\n120228: s1 = a1\n120230: a1 = a1 | s0\n120233: a2 = u64 [sp + 0x40]\n120236: a4 = u64 [sp + 0x38]\n120239: a2 = a2 | a4\n120242: a1 = a1 | a2\n120245: a1 = a1 >> 0x20\n120248: u64 [sp + 0x20] = s0\n120251: a2 = a2 | s0\n120254: a2 = a2 << 0x20\n120257: a1 = a1 | a2\n120260: u8 [a0 + 30] = 0\n120263: u8 [a0 + 29] = 0\n120266: u8 [a0 + 28] = 0\n120269: u8 [a0 + 27] = 0\n120272: u8 [a0 + 26] = 0\n120275: u8 [a0 + 25] = 0\n120278: u8 [a0 + 24] = 0\n120281: u8 [a0 + 23] = 0\n120284: u8 [a0 + 22] = 0\n120287: u8 [a0 + 21] = 0\n120290: u8 [a0 + 20] = 0\n120293: u8 [a0 + 19] = 0\n120296: u8 [a0 + 18] = 0\n120299: u8 [a0 + 17] = 0\n120302: u8 [a0 + 16] = 0\n120305: u8 [a0 + 15] = 0\n120308: u8 [a0 + 14] = 0\n120311: u8 [a0 + 13] = 0\n120314: u8 [a0 + 12] = 0\n120317: u8 [a0 + 11] = 0\n120320: u8 [a0 + 10] = 0\n120323: u8 [a0 + 9] = 0\n120326: u8 [a0 + 8] = 0\n120329: u8 [a0 + 7] = 0\n120332: u8 [a0 + 6] = 0\n120335: u8 [a0 + 5] = 0\n120338: u8 [a0 + 4] = 0\n120341: u8 [a0 + 3] = 0\n120344: u8 [a0 + 2] = 0\n120347: u8 [a0 + 1] = 0\n120350: u8 [a0 + 0] = 0\n120352: jump @1411 if a1 != 0\n      : @1407 (gas: 4)\n120356: i32 s0 = s1 + 0\n120358: a1 = 0x20\n120361: a0 = s0\n120363: ra = 1316, jump @0\n      : @1408 [@dyn 658] (gas: 41)\n120370: u8 [a0 + 31] = 0x1b\n120374: u8 [a0 + 30] = 0\n120377: u8 [a0 + 29] = 0\n120380: u8 [a0 + 28] = 0\n120383: u8 [a0 + 27] = 0\n120386: u8 [a0 + 26] = 0\n120389: u8 [a0 + 25] = 0\n120392: u8 [a0 + 24] = 0\n120395: u8 [a0 + 23] = 0\n120398: u8 [a0 + 22] = 0\n120401: u8 [a0 + 21] = 0\n120404: u8 [a0 + 20] = 0\n120407: u8 [a0 + 19] = 0\n120410: u8 [a0 + 18] = 0\n120413: u8 [a0 + 17] = 0\n120416: u8 [a0 + 16] = 0\n120419: u8 [a0 + 15] = 0\n120422: u8 [a0 + 14] = 0\n120425: u8 [a0 + 13] = 0\n120428: u8 [a0 + 12] = 0\n120431: u8 [a0 + 11] = 0\n120434: u8 [a0 + 10] = 0\n120437: u8 [a0 + 9] = 0\n120440: u8 [a0 + 8] = 0\n120443: u8 [a0 + 7] = 0\n120446: u8 [a0 + 6] = 0\n120449: u8 [a0 + 5] = 0\n120452: u8 [a0 + 4] = 0\n120455: u8 [a0 + 3] = 0\n120458: u8 [a0 + 2] = 0\n120461: u8 [a0 + 1] = 0\n120464: a1 = u64 [sp + 0x20]\n120467: a2 = u64 [sp + 0x38]\n120470: a1 = a1 | a2\n120473: a2 = 0xffffffe0\n120483: a2 = s1 <u a2\n120486: a3 = u64 [sp + 0x40]\n120489: a2 = 0 if a3 != 0\n120491: a2 = 0 if a1 != 0\n120493: u8 [a0 + 0] = 0\n120495: jump @1411 if a2 == 0\n      : @1409 (gas: 3)\n120499: i32 a0 = s0 + 0x20\n120502: a1 = 0x20\n120505: ra = 1318, jump @0\n      : @1410 [@dyn 659] (gas: 55)\n120512: u8 [a0 + 31] = 0\n120515: u8 [a0 + 30] = 0\n120518: u8 [a0 + 29] = 0\n120521: u8 [a0 + 28] = 0\n120524: u8 [a0 + 27] = 0\n120527: u8 [a0 + 26] = 0x64\n120531: u8 [a0 + 25] = 0x65\n120535: u8 [a0 + 24] = 0x6c\n120539: u8 [a0 + 23] = 0x69\n120543: u8 [a0 + 22] = 0x61\n120547: u8 [a0 + 21] = 0x66\n120551: a5 = 0x20\n120554: u8 [a0 + 0x14] = a5\n120557: u8 [a0 + 19] = 0x72\n120561: u8 [a0 + 18] = 0x65\n120565: u8 [a0 + 17] = 0x66\n120569: u8 [a0 + 16] = 0x73\n120573: u8 [a0 + 15] = 0x6e\n120577: u8 [a0 + 14] = 0x61\n120581: u8 [a0 + 13] = 0x72\n120585: u8 [a0 + 12] = 0x74\n120589: u8 [a0 + 0xb] = a5\n120592: u8 [a0 + 10] = 0x48\n120596: u8 [a0 + 9] = 0x54\n120600: u8 [a0 + 8] = 0x45\n120604: u8 [a0 + 0x7] = a5\n120607: u8 [a0 + 6] = 0x3a\n120611: u8 [a0 + 5] = 0x77\n120615: u8 [a0 + 4] = 0x6f\n120619: u8 [a0 + 3] = 0x72\n120623: u8 [a0 + 2] = 0x63\n120627: u8 [a0 + 1] = 0x73\n120631: u8 [a0 + 0] = 0x45\n120634: a1 = u64 [sp]\n120636: a0 = a1 + 0x60\n120639: a1 = a0 <u a1\n120642: a3 = u64 [sp + 0x8]\n120645: a2 = a3 + a1\n120648: a3 = a2 <u a3\n120651: a3 = a1 if a1 == 0\n120654: a1 = u64 [sp + 0x10]\n120657: a3 = a3 + a1\n120660: a1 = a3 <u a1\n120663: a4 = u64 [sp + 0x18]\n120666: a1 = a1 + a4\n120669: a4 = u64 [sp + 0x28]\n120672: u64 [a4] = a0\n120674: u64 [a4 + 0x8] = a2\n120677: u64 [a4 + 0x10] = a3\n120680: u64 [a4 + 0x18] = a1\n120683: ra = u64 [sp + 0x58]\n120686: s0 = u64 [sp + 0x50]\n120689: s1 = u64 [sp + 0x48]\n120692: sp = sp + 0x60\n120695: ret\n      : @1411 (gas: 1)\n120697: trap\n      : @1412 (gas: 23)\n120698: sp = sp + 0xfffffffffffffea0\n120702: u64 [sp + 0x158] = ra\n120706: u64 [sp + 0x150] = s0\n120710: u64 [sp + 0x148] = s1\n120714: s0 = sp + 0x160\n120718: sp = sp & 0xffffffffffffffe0\n120721: a2 = u64 [a1]\n120723: u64 [sp + 0x58] = a2\n120726: a2 = u64 [a1 + 0x8]\n120729: u64 [sp + 0x50] = a2\n120732: a2 = u64 [a1 + 0x10]\n120735: u64 [sp + 0x48] = a2\n120738: a1 = u64 [a1 + 0x18]\n120741: u64 [sp + 0x40] = a1\n120744: a1 = u64 [a0]\n120746: u64 [sp + 0x38] = a1\n120749: a1 = u64 [a0 + 0x10]\n120752: u64 [sp + 0x30] = a1\n120755: a0 = u64 [a0 + 0x8]\n120758: u64 [sp + 0x28] = a0\n120761: a0 = 0x40\n120764: a1 = 0x20\n120767: ra = 1320, jump @0\n      : @1413 [@dyn 660] (gas: 97)\n120774: a1 = u8 [a0 + 0x11]\n120777: a2 = u8 [a0 + 0x10]\n120780: a3 = u8 [a0 + 0x12]\n120783: a4 = u8 [a0 + 0x13]\n120786: a1 = a1 << 0x8\n120789: a1 = a1 | a2\n120792: a3 = a3 << 0x10\n120795: a4 = a4 << 0x18\n120798: a3 = a3 | a4\n120801: a1 = a1 | a3\n120804: a2 = u8 [a0 + 0x15]\n120807: a3 = u8 [a0 + 0x14]\n120810: a4 = u8 [a0 + 0x16]\n120813: a5 = u8 [a0 + 0x17]\n120816: a2 = a2 << 0x8\n120819: a2 = a2 | a3\n120822: a4 = a4 << 0x10\n120825: a5 = a5 << 0x18\n120828: a4 = a4 | a5\n120831: a2 = a2 | a4\n120834: a2 = a2 << 0x20\n120837: t0 = a2 | a1\n120840: a2 = u8 [a0 + 0x1]\n120843: a3 = u8 [a0]\n120845: a4 = u8 [a0 + 0x2]\n120848: a5 = u8 [a0 + 0x3]\n120851: a2 = a2 << 0x8\n120854: a2 = a2 | a3\n120857: a4 = a4 << 0x10\n120860: a5 = a5 << 0x18\n120863: a4 = a4 | a5\n120866: a2 = a2 | a4\n120869: a3 = u8 [a0 + 0x5]\n120872: a4 = u8 [a0 + 0x4]\n120875: a5 = u8 [a0 + 0x6]\n120878: s1 = u8 [a0 + 0x7]\n120881: a3 = a3 << 0x8\n120884: a3 = a3 | a4\n120887: a5 = a5 << 0x10\n120890: s1 = s1 << 0x18\n120893: a5 = a5 | s1\n120896: a3 = a3 | a5\n120899: a3 = a3 << 0x20\n120902: a2 = a2 | a3\n120905: a3 = u8 [a0 + 0x19]\n120908: a4 = u8 [a0 + 0x18]\n120911: a5 = u8 [a0 + 0x1a]\n120914: s1 = u8 [a0 + 0x1b]\n120917: a3 = a3 << 0x8\n120920: a3 = a3 | a4\n120923: a5 = a5 << 0x10\n120926: s1 = s1 << 0x18\n120929: a5 = a5 | s1\n120932: a3 = a3 | a5\n120935: a4 = u8 [a0 + 0x1d]\n120938: a5 = u8 [a0 + 0x1c]\n120941: s1 = u8 [a0 + 0x1e]\n120944: a1 = u8 [a0 + 0x1f]\n120947: a4 = a4 << 0x8\n120950: a4 = a4 | a5\n120953: s1 = s1 << 0x10\n120956: a1 = a1 << 0x18\n120959: a1 = a1 | s1\n120962: a1 = a1 | a4\n120965: a1 = a1 << 0x20\n120968: a3 = a3 | a1\n120971: a1 = u8 [a0 + 0x9]\n120974: a4 = u8 [a0 + 0x8]\n120977: a5 = u8 [a0 + 0xa]\n120980: s1 = u8 [a0 + 0xb]\n120983: a1 = a1 << 0x8\n120986: a1 = a1 | a4\n120989: a5 = a5 << 0x10\n120992: s1 = s1 << 0x18\n120995: a5 = a5 | s1\n120998: a1 = a1 | a5\n121001: a4 = u8 [a0 + 0xd]\n121004: a5 = u8 [a0 + 0xc]\n121007: s1 = u8 [a0 + 0xe]\n121010: a0 = u8 [a0 + 0xf]\n121013: a4 = a4 << 0x8\n121016: a4 = a4 | a5\n121019: s1 = s1 << 0x10\n121022: a0 = a0 << 0x18\n121025: a0 = a0 | s1\n121028: a0 = a0 | a4\n121031: a0 = a0 << 0x20\n121034: a0 = a0 | a1\n121037: s1 = reverse a0\n121039: a0 = reverse a3\n121041: u64 [sp + 0x10] = a0\n121044: a0 = reverse a2\n121046: u64 [sp + 0x20] = a0\n121049: a0 = reverse t0\n121051: u64 [sp + 0x18] = a0\n121054: ecalli 9 // 'ref_time_left'\n121056: fallthrough\n      : @1414 (gas: 36)\n121057: u64 [sp + 0x8] = a0\n121060: a0 = u64 [sp + 0x28]\n121063: a0 = reverse a0\n121065: a1 = u64 [sp + 0x30]\n121068: a1 = reverse a1\n121070: a1 = a1 >> 0x20\n121073: a2 = a0 << 0x20\n121076: a1 = a1 | a2\n121079: a0 = a0 >> 0x20\n121082: a2 = u64 [sp + 0x38]\n121085: a2 = reverse a2\n121087: a3 = a2 << 0x20\n121090: a0 = a0 | a3\n121093: u64 [sp + 0xc8] = a0\n121097: u64 [sp + 0xc0] = a1\n121101: a2 = a2 >> 0x20\n121104: u32 [sp + 0xd0] = a2\n121108: a2 = u64 [sp + 0x10]\n121111: a0 = u64 [sp + 0x40]\n121114: u64 [sp + 0xf8] = a0\n121118: a0 = u64 [sp + 0x48]\n121121: u64 [sp + 0xf0] = a0\n121125: a0 = u64 [sp + 0x50]\n121128: u64 [sp + 0xe8] = a0\n121132: a0 = u64 [sp + 0x20]\n121135: a1 = u64 [sp + 0x18]\n121138: a0 = a0 | a1\n121141: a1 = a2 | s1\n121144: a1 = a1 | a0\n121147: a0 = a0 | s1\n121150: a1 = a1 >> 0x20\n121153: a0 = a0 << 0x20\n121156: a0 = a0 | a1\n121159: a1 = u64 [sp + 0x58]\n121162: u64 [sp + 0xe0] = a1\n121166: jump @1425 if a0 != 0\n      : @1415 (gas: 3)\n121170: i32 a0 = a2 + 0\n121172: a1 = 0\n121174: ra = 1322, jump @0\n      : @1416 [@dyn 661] (gas: 4)\n121181: u64 [sp + 0x58] = a0\n121184: a0 = 0\n121186: a1 = 0\n121188: ra = 1324, jump @0\n      : @1417 [@dyn 662] (gas: 43)\n121195: u32 [sp + 256] = 0\n121199: a2 = u64 [sp + 0x8]\n121202: a1 = a2 >u 0x8fc\n121206: a2 = -a1\n121208: u64 [sp + 0x138] = a2\n121212: u64 [sp + 0x130] = a2\n121216: u64 [sp + 0x128] = a2\n121220: u64 [sp + 0x120] = a2\n121224: a2 = sp + 0xc0\n121228: a2 = a2 << 0x20\n121231: a2 = a2 >> 0x20\n121234: a1 = a1 << 0x23\n121237: s1 = a1 | a2\n121240: a1 = sp + 0xe0\n121244: a1 = a1 << 0x20\n121247: a1 = a1 >> 0x20\n121250: a2 = sp + 0x120\n121254: a2 = a2 << 0x20\n121257: a3 = a2 | a1\n121260: a4 = u64 [sp + 0x58]\n121263: a4 = a4 << 0x20\n121266: a4 = a4 >> 0x20\n121269: a0 = a0 << 0x20\n121272: a0 = a0 >> 0x20\n121275: a1 = sp + 0x100\n121279: a1 = a1 << 0x20\n121282: a5 = a1 | a0\n121285: a1 = 0xffffffffffffffff\n121288: a2 = 0xffffffffffffffff\n121291: a0 = s1\n121293: ecalli 1 // 'call'\n121295: s1 = a0\n121297: a0 = sp + 0xa0\n121301: ra = 0x52e\n121305: sp = sp + 0xffffffffffffff60\n121309: u64 [sp + 0x98] = ra\n121313: u64 [sp + 0x90] = s0\n121317: u64 [sp + 0x88] = s1\n121321: s0 = sp + 0xa0\n121325: sp = sp & 0xffffffffffffffe0\n121328: s1 = a0\n121330: ecalli 11 // 'return_data_size'\n121332: jump @1393\n      : @1418 [@dyn 663] (gas: 1)\n121335: jump @1420 if s1 != 0\n      : @1419 (gas: 6)\n121338: sp = s0 + 0xfffffffffffffea0\n121342: ra = u64 [sp + 0x158]\n121346: s0 = u64 [sp + 0x150]\n121350: s1 = u64 [sp + 0x148]\n121354: sp = sp + 0x160\n121358: ret\n      : @1420 (gas: 3)\n121360: a0 = 0x40\n121363: a1 = 0x20\n121366: ra = 1328, jump @0\n      : @1421 [@dyn 664] (gas: 103)\n121373: a1 = u8 [a0 + 0x11]\n121376: a2 = u8 [a0 + 0x10]\n121379: a3 = u8 [a0 + 0x12]\n121382: a4 = u8 [a0 + 0x13]\n121385: a1 = a1 << 0x8\n121388: a1 = a1 | a2\n121391: a3 = a3 << 0x10\n121394: a4 = a4 << 0x18\n121397: a3 = a3 | a4\n121400: a1 = a1 | a3\n121403: a2 = u8 [a0 + 0x15]\n121406: a3 = u8 [a0 + 0x14]\n121409: a4 = u8 [a0 + 0x16]\n121412: a5 = u8 [a0 + 0x17]\n121415: a2 = a2 << 0x8\n121418: a2 = a2 | a3\n121421: a4 = a4 << 0x10\n121424: a5 = a5 << 0x18\n121427: a4 = a4 | a5\n121430: a2 = a2 | a4\n121433: a2 = a2 << 0x20\n121436: t0 = a2 | a1\n121439: a2 = u8 [a0 + 0x1]\n121442: a3 = u8 [a0]\n121444: a4 = u8 [a0 + 0x2]\n121447: a5 = u8 [a0 + 0x3]\n121450: a2 = a2 << 0x8\n121453: a2 = a2 | a3\n121456: a4 = a4 << 0x10\n121459: a5 = a5 << 0x18\n121462: a4 = a4 | a5\n121465: a2 = a2 | a4\n121468: a3 = u8 [a0 + 0x5]\n121471: a4 = u8 [a0 + 0x4]\n121474: a5 = u8 [a0 + 0x6]\n121477: s1 = u8 [a0 + 0x7]\n121480: a3 = a3 << 0x8\n121483: a3 = a3 | a4\n121486: a5 = a5 << 0x10\n121489: s1 = s1 << 0x18\n121492: a5 = a5 | s1\n121495: a3 = a3 | a5\n121498: a3 = a3 << 0x20\n121501: a2 = a2 | a3\n121504: a3 = u8 [a0 + 0x19]\n121507: a4 = u8 [a0 + 0x18]\n121510: a5 = u8 [a0 + 0x1a]\n121513: s1 = u8 [a0 + 0x1b]\n121516: a3 = a3 << 0x8\n121519: a3 = a3 | a4\n121522: a5 = a5 << 0x10\n121525: s1 = s1 << 0x18\n121528: a5 = a5 | s1\n121531: a3 = a3 | a5\n121534: a4 = u8 [a0 + 0x1d]\n121537: a5 = u8 [a0 + 0x1c]\n121540: s1 = u8 [a0 + 0x1e]\n121543: a1 = u8 [a0 + 0x1f]\n121546: a4 = a4 << 0x8\n121549: a4 = a4 | a5\n121552: s1 = s1 << 0x10\n121555: a1 = a1 << 0x18\n121558: a1 = a1 | s1\n121561: a1 = a1 | a4\n121564: a1 = a1 << 0x20\n121567: a3 = a3 | a1\n121570: a1 = u8 [a0 + 0x9]\n121573: a4 = u8 [a0 + 0x8]\n121576: a5 = u8 [a0 + 0xa]\n121579: s1 = u8 [a0 + 0xb]\n121582: a1 = a1 << 0x8\n121585: a1 = a1 | a4\n121588: a5 = a5 << 0x10\n121591: s1 = s1 << 0x18\n121594: a5 = a5 | s1\n121597: a1 = a1 | a5\n121600: a4 = u8 [a0 + 0xd]\n121603: a5 = u8 [a0 + 0xc]\n121606: s1 = u8 [a0 + 0xe]\n121609: a0 = u8 [a0 + 0xf]\n121612: a4 = a4 << 0x8\n121615: a4 = a4 | a5\n121618: s1 = s1 << 0x10\n121621: a0 = a0 << 0x18\n121624: a0 = a0 | s1\n121627: a0 = a0 | a4\n121630: a0 = a0 << 0x20\n121633: a0 = a0 | a1\n121636: s1 = reverse a0\n121638: a1 = reverse a3\n121640: a2 = reverse a2\n121642: a0 = reverse t0\n121644: u64 [sp + 0x58] = a0\n121647: u64 [sp + 0x50] = a2\n121650: a0 = a0 | a2\n121653: a2 = a1\n121655: a1 = a1 | s1\n121658: a1 = a1 | a0\n121661: a1 = a1 >> 0x20\n121664: a0 = a0 | s1\n121667: a0 = a0 << 0x20\n121670: a0 = a0 | a1\n121673: jump @1425 if a0 != 0\n      : @1422 (gas: 5)\n121677: u64 [sp + 0x48] = a2\n121680: i32 a0 = a2 + 0\n121682: a1 = 0x20\n121685: u64 [sp + 0x40] = a0\n121688: ra = 1330, jump @0\n      : @1423 [@dyn 665] (gas: 50)\n121695: u8 [a0 + 31] = 0\n121698: u8 [a0 + 30] = 0\n121701: u8 [a0 + 29] = 0\n121704: u8 [a0 + 28] = 0\n121707: u8 [a0 + 27] = 0\n121710: u8 [a0 + 26] = 0\n121713: u8 [a0 + 25] = 0\n121716: u8 [a0 + 24] = 0\n121719: u8 [a0 + 23] = 0\n121722: u8 [a0 + 22] = 0\n121725: u8 [a0 + 21] = 0\n121728: u8 [a0 + 20] = 0\n121731: u8 [a0 + 19] = 0\n121734: u8 [a0 + 18] = 0\n121737: u8 [a0 + 17] = 0\n121740: u8 [a0 + 16] = 0\n121743: u8 [a0 + 15] = 0\n121746: u8 [a0 + 14] = 0\n121749: u8 [a0 + 13] = 0\n121752: u8 [a0 + 12] = 0\n121755: u8 [a0 + 11] = 0\n121758: u8 [a0 + 10] = 0\n121761: u8 [a0 + 9] = 0\n121764: u8 [a0 + 8] = 0\n121767: u8 [a0 + 7] = 0\n121770: u8 [a0 + 6] = 0\n121773: u8 [a0 + 5] = 0\n121776: u8 [a0 + 4] = 0\n121779: u8 [a0 + 3] = 0xa0\n121784: u8 [a0 + 2] = 0x79\n121788: u8 [a0 + 1] = 0xc3\n121793: u8 [a0 + 0] = 0x8\n121796: a1 = u64 [sp + 0x48]\n121799: a0 = a1 + 0x4\n121802: a1 = a0 <u a1\n121805: a3 = u64 [sp + 0x58]\n121808: a2 = a3 + a1\n121811: a3 = a2 <u a3\n121814: a3 = a1 if a1 == 0\n121817: a3 = a3 + s1\n121820: a1 = a3 <u s1\n121823: a4 = u64 [sp + 0x50]\n121826: a4 = a4 + a1\n121829: u64 [sp + 0x68] = a2\n121832: u64 [sp + 0x60] = a0\n121835: u64 [sp + 0x70] = a3\n121838: a0 = sp + 0x80\n121842: a1 = sp + 0x60\n121845: u64 [sp + 0x78] = a4\n121848: ra = 1332, jump @1404\n      : @1424 [@dyn 666] (gas: 30)\n121854: a0 = u64 [sp + 0x88]\n121858: t0 = u64 [sp + 0x98]\n121862: t1 = u64 [sp + 0x80]\n121866: a3 = u64 [sp + 0x90]\n121870: a1 = u64 [sp + 0x58]\n121873: a4 = a0 ^ a1\n121876: a5 = a0 <u a1\n121879: t2 = a1\n121881: a2 = u64 [sp + 0x48]\n121884: a1 = t1 <u a2\n121887: a5 = a1 if a4 == 0\n121890: a4 = a3 - s1\n121893: a3 = a3 <u s1\n121896: s1 = u64 [sp + 0x50]\n121899: s1 = t0 - s1\n121902: s1 = s1 - a3\n121905: a3 = a4 <u a5\n121908: s1 = s1 - a3\n121911: a4 = a4 - a5\n121914: a0 = a0 - t2\n121917: a1 = a0 - a1\n121920: a0 = t1 - a2\n121923: a1 = a1 | s1\n121926: a2 = a0 | a4\n121929: a2 = a2 | a1\n121932: a1 = a1 | a4\n121935: a2 = a2 >> 0x20\n121938: a1 = a1 << 0x20\n121941: a1 = a1 | a2\n121944: jump @1426 if a1 == 0\n      : @1425 (gas: 1)\n121947: trap\n      : @1426 (gas: 4)\n121948: i32 s1 = a0 + 0\n121950: a0 = u64 [sp + 0x40]\n121953: a1 = s1\n121955: ra = 1334, jump @0\n      : @1427 [@dyn 667] (gas: 6)\n121962: i32 a1 = a0 + 0\n121964: a0 = 0x1\n121967: a2 = s1\n121969: ra = 0x538\n121973: ecalli 12 // 'seal_return'\n121975: fallthrough\n      : @1428 [@dyn 668] (gas: 5)\n121976: u64 [a0 + 24] = 0\n121979: u64 [a0 + 16] = 0\n121982: u64 [a0 + 8] = 0\n121985: u64 [a0 + 0] = 0\n121987: ret\n      : @1429 (gas: 22)\n121989: sp = sp + 0xfffffffffffffdb0\n121993: u64 [sp + 0x248] = ra\n121997: u64 [sp + 0x240] = s0\n122001: u64 [sp + 0x238] = s1\n122005: s0 = sp + 0x250\n122009: sp = sp & 0xfffffffffffffff0\n122012: a5 = u64 [a2 + 0x10]\n122015: s1 = u64 [a2 + 0x18]\n122018: a3 = u64 [a2 + 0x8]\n122021: a4 = u64 [a2]\n122023: u64 [sp + 0x130] = a3\n122027: u64 [sp + 0x120] = s1\n122031: a2 = a3 | s1\n122034: a3 = a4 | a5\n122037: a3 = a3 | a2\n122040: a3 = a3 >> 0x20\n122043: u64 [sp + 0x128] = a5\n122047: a2 = a2 | a5\n122050: a2 = a2 << 0x20\n122053: a2 = a2 | a3\n122056: u64 [sp + 0x138] = a0\n122060: jump @1443 if a2 != 0\n      : @1430 (gas: 13)\n122064: a0 = u64 [a1 + 0x18]\n122067: u64 [sp + 0x100] = a0\n122071: a0 = u64 [a1 + 0x10]\n122074: u64 [sp + 0x108] = a0\n122078: a0 = u64 [a1 + 0x8]\n122081: u64 [sp + 0x110] = a0\n122085: a0 = u64 [a1]\n122087: u64 [sp + 0x118] = a0\n122091: u64 [sp + 0x140] = a4\n122095: i32 a0 = a4 + 0\n122097: a1 = 0x20\n122100: u64 [sp + 0x148] = a0\n122104: ra = 1338, jump @0\n      : @1431 [@dyn 669] (gas: 93)\n122111: a1 = u8 [a0 + 0x9]\n122114: a2 = u8 [a0 + 0x8]\n122117: a3 = u8 [a0 + 0xa]\n122120: a4 = u8 [a0 + 0xb]\n122123: a1 = a1 << 0x8\n122126: a1 = a1 | a2\n122129: a3 = a3 << 0x10\n122132: a4 = a4 << 0x18\n122135: a3 = a3 | a4\n122138: a1 = a1 | a3\n122141: a2 = u8 [a0 + 0xd]\n122144: a3 = u8 [a0 + 0xc]\n122147: a4 = u8 [a0 + 0xe]\n122150: a5 = u8 [a0 + 0xf]\n122153: a2 = a2 << 0x8\n122156: a2 = a2 | a3\n122159: a4 = a4 << 0x10\n122162: a5 = a5 << 0x18\n122165: a4 = a4 | a5\n122168: a2 = a2 | a4\n122171: a2 = a2 << 0x20\n122174: t0 = a2 | a1\n122177: a2 = u8 [a0 + 0x19]\n122180: a3 = u8 [a0 + 0x18]\n122183: a4 = u8 [a0 + 0x1a]\n122186: a5 = u8 [a0 + 0x1b]\n122189: a2 = a2 << 0x8\n122192: a2 = a2 | a3\n122195: a4 = a4 << 0x10\n122198: a5 = a5 << 0x18\n122201: a4 = a4 | a5\n122204: a2 = a2 | a4\n122207: a3 = u8 [a0 + 0x1d]\n122210: a4 = u8 [a0 + 0x1c]\n122213: a5 = u8 [a0 + 0x1e]\n122216: a1 = u8 [a0 + 0x1f]\n122219: a3 = a3 << 0x8\n122222: a3 = a3 | a4\n122225: a5 = a5 << 0x10\n122228: a1 = a1 << 0x18\n122231: a1 = a1 | a5\n122234: a1 = a1 | a3\n122237: a1 = a1 << 0x20\n122240: t1 = a1 | a2\n122243: a1 = u8 [a0 + 0x11]\n122246: a3 = u8 [a0 + 0x10]\n122249: a4 = u8 [a0 + 0x12]\n122252: a5 = u8 [a0 + 0x13]\n122255: a1 = a1 << 0x8\n122258: a1 = a1 | a3\n122261: a4 = a4 << 0x10\n122264: a5 = a5 << 0x18\n122267: a3 = a5 | a4\n122270: a3 = a3 | a1\n122273: a1 = u8 [a0 + 0x1]\n122276: a4 = u8 [a0]\n122278: a5 = u8 [a0 + 0x2]\n122281: s1 = u8 [a0 + 0x3]\n122284: a1 = a1 << 0x8\n122287: a1 = a1 | a4\n122290: a5 = a5 << 0x10\n122293: s1 = s1 << 0x18\n122296: a4 = s1 | a5\n122299: a4 = a4 | a1\n122302: a1 = u8 [a0 + 0x15]\n122305: a5 = u8 [a0 + 0x14]\n122308: s1 = u8 [a0 + 0x16]\n122311: a2 = u8 [a0 + 0x17]\n122314: a1 = a1 << 0x8\n122317: a1 = a1 | a5\n122320: s1 = s1 << 0x10\n122323: a2 = a2 << 0x18\n122326: a2 = a2 | s1\n122329: a1 = a1 | a2\n122332: a2 = u8 [a0 + 0x5]\n122335: a5 = u8 [a0 + 0x4]\n122338: s1 = u8 [a0 + 0x6]\n122341: a0 = u8 [a0 + 0x7]\n122344: a2 = a2 << 0x8\n122347: a2 = a2 | a5\n122350: s1 = s1 << 0x10\n122353: a0 = a0 << 0x18\n122356: a0 = a0 | s1\n122359: a0 = a0 | a2\n122362: a2 = 0x4100000000000000\n122372: a2 = t1 ^ a2\n122375: a2 = t0 | a2\n122378: a0 = a0 | a1\n122381: a0 = a0 << 0x20\n122384: a3 = a3 | a4\n122387: a0 = a0 | a3\n122390: a0 = a0 | a2\n122393: jump @1440 if a0 != 0\n      : @1432 (gas: 14)\n122397: a1 = u64 [sp + 0x148]\n122401: a0 = u64 [sp + 0x128]\n122405: a2 = u64 [sp + 0x120]\n122409: a3 = a0 | a2\n122412: a0 = 0x100000000\n122422: u64 [sp + 0x120] = a0\n122426: a0 = 0xffffffe0\n122436: a2 = u64 [sp + 0x140]\n122440: a0 = a2 <u a0\n122443: s1 = u64 [sp + 0x130]\n122447: a0 = 0 if s1 != 0\n122449: u64 [sp + 0x128] = a3\n122453: a0 = 0 if a3 != 0\n122455: jump @1443 if a0 == 0\n      : @1433 (gas: 3)\n122459: i32 a0 = a1 + 0x20\n122462: a1 = 0x20\n122465: ra = 1340, jump @0\n      : @1434 [@dyn 670] (gas: 8)\n122472: a1 = u64 [sp + 0x120]\n122476: a1 = a1 + 0xffffffffffffffc0\n122479: a2 = u64 [sp + 0x140]\n122483: a1 = a2 <u a1\n122486: a1 = 0 if s1 != 0\n122488: a2 = u64 [sp + 0x128]\n122492: a1 = 0 if a2 != 0\n122494: jump @1443 if a1 == 0\n      : @1435 (gas: 68)\n122498: a1 = u8 [a0 + 0x18]\n122501: u64 [sp + 0x28] = a1\n122504: a1 = u8 [a0 + 0x19]\n122507: u64 [sp + 0x8] = a1\n122510: a1 = u8 [a0 + 0x1a]\n122513: u64 [sp + 0x18] = a1\n122516: a1 = u8 [a0 + 0x1b]\n122519: u64 [sp + 0x10] = a1\n122522: a1 = u8 [a0 + 0x1c]\n122525: u64 [sp + 0x40] = a1\n122528: a1 = u8 [a0 + 0x1d]\n122531: u64 [sp + 0x20] = a1\n122534: a1 = u8 [a0 + 0x1e]\n122537: u64 [sp + 0x38] = a1\n122540: a1 = u8 [a0 + 0x1f]\n122543: u64 [sp + 0x30] = a1\n122546: a1 = u8 [a0 + 0x10]\n122549: u64 [sp + 0x68] = a1\n122552: a1 = u8 [a0 + 0x11]\n122555: u64 [sp + 0x48] = a1\n122558: a1 = u8 [a0 + 0x12]\n122561: u64 [sp + 0x58] = a1\n122564: a1 = u8 [a0 + 0x13]\n122567: u64 [sp + 0x50] = a1\n122570: a1 = u8 [a0 + 0x14]\n122573: u64 [sp + 0x80] = a1\n122577: a1 = u8 [a0 + 0x15]\n122580: u64 [sp + 0x60] = a1\n122583: a1 = u8 [a0 + 0x16]\n122586: u64 [sp + 0x78] = a1\n122589: a1 = u8 [a0 + 0x17]\n122592: u64 [sp + 0x70] = a1\n122595: a1 = u8 [a0 + 0x8]\n122598: u64 [sp + 0xa8] = a1\n122602: a1 = u8 [a0 + 0x9]\n122605: u64 [sp + 0x88] = a1\n122609: a1 = u8 [a0 + 0xa]\n122612: u64 [sp + 0x98] = a1\n122616: a1 = u8 [a0 + 0xb]\n122619: u64 [sp + 0x90] = a1\n122623: a1 = u8 [a0 + 0xc]\n122626: u64 [sp + 0xc0] = a1\n122630: a1 = u8 [a0 + 0xd]\n122633: u64 [sp + 0xa0] = a1\n122637: a1 = u8 [a0 + 0xe]\n122640: u64 [sp + 0xb8] = a1\n122644: a1 = u8 [a0 + 0xf]\n122647: u64 [sp + 0xb0] = a1\n122651: a1 = u8 [a0]\n122653: u64 [sp + 0xe8] = a1\n122657: a1 = u8 [a0 + 0x1]\n122660: u64 [sp + 0xc8] = a1\n122664: a1 = u8 [a0 + 0x2]\n122667: u64 [sp + 0xd8] = a1\n122671: a1 = u8 [a0 + 0x3]\n122674: u64 [sp + 0xd0] = a1\n122678: a1 = u8 [a0 + 0x4]\n122681: u64 [sp + 0x120] = a1\n122685: a1 = u8 [a0 + 0x5]\n122688: u64 [sp + 0xe0] = a1\n122692: a1 = u8 [a0 + 0x6]\n122695: u64 [sp + 0xf8] = a1\n122699: a0 = u8 [a0 + 0x7]\n122702: u64 [sp + 0xf0] = a0\n122706: a0 = u64 [sp + 0x148]\n122710: i32 a0 = a0 + 0x40\n122713: a1 = 0x20\n122716: ra = 1342, jump @0\n      : @1436 [@dyn 671] (gas: 7)\n122723: a1 = 0xffffffa0\n122733: a2 = u64 [sp + 0x140]\n122737: a1 = a2 <u a1\n122740: a1 = 0 if s1 != 0\n122742: a2 = u64 [sp + 0x128]\n122746: a1 = 0 if a2 != 0\n122748: jump @1443 if a1 == 0\n      : @1437 (gas: 197)\n122752: a1 = u64 [sp + 0x8]\n122755: a1 = a1 << 0x8\n122758: a2 = u64 [sp + 0x28]\n122761: a1 = a1 | a2\n122764: a2 = u64 [sp + 0x18]\n122767: a2 = a2 << 0x10\n122770: a3 = u64 [sp + 0x10]\n122773: a3 = a3 << 0x18\n122776: a2 = a2 | a3\n122779: a1 = a1 | a2\n122782: a2 = u64 [sp + 0x20]\n122785: a2 = a2 << 0x8\n122788: a3 = u64 [sp + 0x40]\n122791: a2 = a2 | a3\n122794: a3 = u64 [sp + 0x38]\n122797: a3 = a3 << 0x10\n122800: a4 = u64 [sp + 0x30]\n122803: a4 = a4 << 0x18\n122806: a3 = a3 | a4\n122809: a2 = a2 | a3\n122812: a2 = a2 << 0x20\n122815: a1 = a1 | a2\n122818: u64 [sp + 0x140] = a1\n122822: a1 = u64 [sp + 0x48]\n122825: a1 = a1 << 0x8\n122828: a2 = u64 [sp + 0x68]\n122831: a1 = a1 | a2\n122834: a2 = u64 [sp + 0x58]\n122837: a2 = a2 << 0x10\n122840: a3 = u64 [sp + 0x50]\n122843: a3 = a3 << 0x18\n122846: a2 = a2 | a3\n122849: a1 = a1 | a2\n122852: a2 = u64 [sp + 0x60]\n122855: a2 = a2 << 0x8\n122858: a3 = u64 [sp + 0x80]\n122862: a2 = a2 | a3\n122865: a3 = u64 [sp + 0x78]\n122868: a3 = a3 << 0x10\n122871: a4 = u64 [sp + 0x70]\n122874: a4 = a4 << 0x18\n122877: a3 = a3 | a4\n122880: a2 = a2 | a3\n122883: a2 = a2 << 0x20\n122886: t1 = a2 | a1\n122889: a1 = u64 [sp + 0x88]\n122893: a1 = a1 << 0x8\n122896: a2 = u64 [sp + 0xa8]\n122900: a1 = a1 | a2\n122903: a2 = u64 [sp + 0x98]\n122907: a2 = a2 << 0x10\n122910: a3 = u64 [sp + 0x90]\n122914: a3 = a3 << 0x18\n122917: a2 = a2 | a3\n122920: a1 = a1 | a2\n122923: a2 = u64 [sp + 0xa0]\n122927: a2 = a2 << 0x8\n122930: a3 = u64 [sp + 0xc0]\n122934: a2 = a2 | a3\n122937: a3 = u64 [sp + 0xb8]\n122941: a3 = a3 << 0x10\n122944: a4 = u64 [sp + 0xb0]\n122948: a4 = a4 << 0x18\n122951: a3 = a3 | a4\n122954: a2 = a2 | a3\n122957: a2 = a2 << 0x20\n122960: t2 = a2 | a1\n122963: a1 = u64 [sp + 0xc8]\n122967: a1 = a1 << 0x8\n122970: a2 = u64 [sp + 0xe8]\n122974: a1 = a1 | a2\n122977: a2 = u64 [sp + 0xd8]\n122981: a2 = a2 << 0x10\n122984: a4 = u64 [sp + 0xd0]\n122988: a4 = a4 << 0x18\n122991: a2 = a2 | a4\n122994: a1 = a1 | a2\n122997: a2 = u64 [sp + 0xe0]\n123001: a2 = a2 << 0x8\n123004: a3 = u64 [sp + 0x120]\n123008: a2 = a2 | a3\n123011: a4 = u64 [sp + 0xf8]\n123015: a4 = a4 << 0x10\n123018: a5 = u64 [sp + 0xf0]\n123022: a5 = a5 << 0x18\n123025: a4 = a4 | a5\n123028: a2 = a2 | a4\n123031: a2 = a2 << 0x20\n123034: ra = a2 | a1\n123037: a1 = u8 [a0 + 0x1]\n123040: a2 = u8 [a0]\n123042: a5 = u8 [a0 + 0x2]\n123045: s1 = u8 [a0 + 0x3]\n123048: a1 = a1 << 0x8\n123051: a1 = a1 | a2\n123054: a5 = a5 << 0x10\n123057: s1 = s1 << 0x18\n123060: a5 = a5 | s1\n123063: a1 = a1 | a5\n123066: a2 = u8 [a0 + 0x5]\n123069: a5 = u8 [a0 + 0x4]\n123072: s1 = u8 [a0 + 0x6]\n123075: a3 = u8 [a0 + 0x7]\n123078: a2 = a2 << 0x8\n123081: a2 = a2 | a5\n123084: s1 = s1 << 0x10\n123087: a3 = a3 << 0x18\n123090: a3 = a3 | s1\n123093: a2 = a2 | a3\n123096: a2 = a2 << 0x20\n123099: t0 = a2 | a1\n123102: a1 = u8 [a0 + 0x9]\n123105: a2 = u8 [a0 + 0x8]\n123108: a3 = u8 [a0 + 0xa]\n123111: s1 = u8 [a0 + 0xb]\n123114: a1 = a1 << 0x8\n123117: a1 = a1 | a2\n123120: a3 = a3 << 0x10\n123123: s1 = s1 << 0x18\n123126: a3 = a3 | s1\n123129: a1 = a1 | a3\n123132: a2 = u8 [a0 + 0xd]\n123135: a3 = u8 [a0 + 0xc]\n123138: s1 = u8 [a0 + 0xe]\n123141: a4 = u8 [a0 + 0xf]\n123144: a2 = a2 << 0x8\n123147: a2 = a2 | a3\n123150: s1 = s1 << 0x10\n123153: a4 = a4 << 0x18\n123156: a4 = a4 | s1\n123159: a2 = a2 | a4\n123162: a2 = a2 << 0x20\n123165: a5 = a2 | a1\n123168: a2 = u8 [a0 + 0x11]\n123171: a3 = u8 [a0 + 0x10]\n123174: a4 = u8 [a0 + 0x12]\n123177: s1 = u8 [a0 + 0x13]\n123180: a2 = a2 << 0x8\n123183: a2 = a2 | a3\n123186: a4 = a4 << 0x10\n123189: s1 = s1 << 0x18\n123192: a4 = a4 | s1\n123195: a2 = a2 | a4\n123198: a3 = u8 [a0 + 0x15]\n123201: a4 = u8 [a0 + 0x14]\n123204: s1 = u8 [a0 + 0x16]\n123207: a1 = u8 [a0 + 0x17]\n123210: a3 = a3 << 0x8\n123213: a3 = a3 | a4\n123216: s1 = s1 << 0x10\n123219: a1 = a1 << 0x18\n123222: a1 = a1 | s1\n123225: a1 = a1 | a3\n123228: a1 = a1 << 0x20\n123231: a2 = a2 | a1\n123234: a1 = u8 [a0 + 0x19]\n123237: a3 = u8 [a0 + 0x18]\n123240: a4 = u8 [a0 + 0x1a]\n123243: s1 = u8 [a0 + 0x1b]\n123246: a1 = a1 << 0x8\n123249: a1 = a1 | a3\n123252: a4 = a4 << 0x10\n123255: s1 = s1 << 0x18\n123258: a4 = a4 | s1\n123261: a1 = a1 | a4\n123264: a3 = u8 [a0 + 0x1d]\n123267: a4 = u8 [a0 + 0x1c]\n123270: s1 = u8 [a0 + 0x1e]\n123273: a0 = u8 [a0 + 0x1f]\n123276: a3 = a3 << 0x8\n123279: a3 = a3 | a4\n123282: s1 = s1 << 0x10\n123285: a0 = a0 << 0x18\n123288: a0 = a0 | s1\n123291: a0 = a0 | a3\n123294: a0 = a0 << 0x20\n123297: a0 = a0 | a1\n123300: s1 = reverse ra\n123302: a1 = reverse t2\n123304: u64 [sp + 0xe8] = a1\n123308: a1 = reverse t1\n123310: u64 [sp + 0xf0] = a1\n123314: a1 = u64 [sp + 0x140]\n123318: a1 = reverse a1\n123320: u64 [sp + 0xf8] = a1\n123324: a0 = reverse a0\n123326: u64 [sp + 0x140] = a0\n123330: a0 = reverse a2\n123332: u64 [sp + 0x130] = a0\n123336: a0 = reverse a5\n123338: u64 [sp + 0x128] = a0\n123342: a0 = reverse t0\n123344: u64 [sp + 0x120] = a0\n123348: a0 = u64 [sp + 0x148]\n123352: i32 a0 = a0 + 0x60\n123355: a1 = 0x20\n123358: ra = 1344, jump @0\n      : @1438 [@dyn 672] (gas: 34)\n123365: a0 = u8 [a0]\n123367: u64 [sp + 0x188] = s1\n123371: a1 = u64 [sp + 0xe8]\n123375: u64 [sp + 0x180] = a1\n123379: a1 = u64 [sp + 0xf0]\n123383: u64 [sp + 0x178] = a1\n123387: a1 = u64 [sp + 0xf8]\n123391: u64 [sp + 0x170] = a1\n123395: u64 [sp + 0x190] = a0\n123399: u64 [sp + 424] = 0\n123403: u64 [sp + 416] = 0\n123407: u64 [sp + 408] = 0\n123411: a0 = u64 [sp + 0x100]\n123415: u64 [sp + 0x1c8] = a0\n123419: a0 = u64 [sp + 0x108]\n123423: u64 [sp + 0x1c0] = a0\n123427: a0 = u64 [sp + 0x110]\n123431: u64 [sp + 0x1b8] = a0\n123435: a0 = u64 [sp + 0x118]\n123439: u64 [sp + 0x1b0] = a0\n123443: a0 = u64 [sp + 0x120]\n123447: u64 [sp + 0x168] = a0\n123451: a0 = u64 [sp + 0x128]\n123455: u64 [sp + 0x160] = a0\n123459: a0 = u64 [sp + 0x130]\n123463: u64 [sp + 0x158] = a0\n123467: a0 = sp + 0x1d0\n123471: a1 = sp + 0x1b0\n123475: a2 = sp + 0x190\n123479: a3 = sp + 0x170\n123483: a4 = sp + 0x150\n123487: a5 = u64 [sp + 0x140]\n123491: u64 [sp + 0x150] = a5\n123495: ra = 1346, jump @1476\n      : @1439 [@dyn 673] (gas: 15)\n123501: a5 = u64 [sp + 0x1e8]\n123505: t1 = u64 [sp + 0x1e0]\n123509: s1 = u64 [sp + 0x1d8]\n123513: a0 = u64 [sp + 0x1d0]\n123517: u64 [sp + 0x148] = a0\n123521: a0 = u64 [sp + 0x208]\n123525: u64 [sp + 0x140] = a0\n123529: ra = u64 [sp + 0x200]\n123533: t2 = u64 [sp + 0x1f8]\n123537: a4 = u64 [sp + 0x1f0]\n123541: a0 = u64 [sp + 0x228]\n123545: a3 = u64 [sp + 0x220]\n123549: a2 = u64 [sp + 0x218]\n123553: t0 = u64 [sp + 0x210]\n123557: jump @1442\n      : @1440 (gas: 3)\n123560: a1 = 0x20\n123563: a0 = u64 [sp + 0x148]\n123567: ra = 1348, jump @0\n      : @1441 [@dyn 674] (gas: 103)\n123574: u64 [sp + 328] = 0\n123578: u64 [sp + 304] = 0\n123582: u64 [sp + 296] = 0\n123586: t2 = 0\n123588: ra = 0\n123590: u64 [sp + 320] = 0\n123594: a2 = u8 [a0 + 0x19]\n123597: a3 = u8 [a0 + 0x18]\n123600: a4 = u8 [a0 + 0x1a]\n123603: a5 = u8 [a0 + 0x1b]\n123606: a2 = a2 << 0x8\n123609: a2 = a2 | a3\n123612: a4 = a4 << 0x10\n123615: a5 = a5 << 0x18\n123618: a4 = a4 | a5\n123621: a2 = a2 | a4\n123624: a3 = u8 [a0 + 0x1d]\n123627: a4 = u8 [a0 + 0x1c]\n123630: a5 = u8 [a0 + 0x1e]\n123633: s1 = u8 [a0 + 0x1f]\n123636: a3 = a3 << 0x8\n123639: a3 = a3 | a4\n123642: a5 = a5 << 0x10\n123645: s1 = s1 << 0x18\n123648: a5 = a5 | s1\n123651: a3 = a3 | a5\n123654: a3 = a3 << 0x20\n123657: t0 = a3 | a2\n123660: a2 = u8 [a0 + 0x11]\n123663: a3 = u8 [a0 + 0x10]\n123666: a5 = u8 [a0 + 0x12]\n123669: s1 = u8 [a0 + 0x13]\n123672: a2 = a2 << 0x8\n123675: a2 = a2 | a3\n123678: a5 = a5 << 0x10\n123681: s1 = s1 << 0x18\n123684: a5 = a5 | s1\n123687: a2 = a2 | a5\n123690: a3 = u8 [a0 + 0x15]\n123693: a5 = u8 [a0 + 0x14]\n123696: s1 = u8 [a0 + 0x16]\n123699: a4 = u8 [a0 + 0x17]\n123702: a3 = a3 << 0x8\n123705: a3 = a3 | a5\n123708: s1 = s1 << 0x10\n123711: a4 = a4 << 0x18\n123714: a4 = a4 | s1\n123717: a3 = a3 | a4\n123720: a3 = a3 << 0x20\n123723: a2 = a2 | a3\n123726: a3 = u8 [a0 + 0x9]\n123729: a4 = u8 [a0 + 0x8]\n123732: a5 = u8 [a0 + 0xa]\n123735: s1 = u8 [a0 + 0xb]\n123738: a3 = a3 << 0x8\n123741: a3 = a3 | a4\n123744: a5 = a5 << 0x10\n123747: s1 = s1 << 0x18\n123750: a5 = a5 | s1\n123753: a3 = a3 | a5\n123756: a4 = u8 [a0 + 0xd]\n123759: a5 = u8 [a0 + 0xc]\n123762: s1 = u8 [a0 + 0xe]\n123765: t1 = u8 [a0 + 0xf]\n123768: a4 = a4 << 0x8\n123771: a4 = a4 | a5\n123774: s1 = s1 << 0x10\n123777: t1 = t1 << 0x18\n123780: a5 = t1 | s1\n123783: t1 = 0\n123785: a4 = a4 | a5\n123788: a4 = a4 << 0x20\n123791: a3 = a3 | a4\n123794: a4 = u8 [a0 + 0x1]\n123797: a5 = u8 [a0]\n123799: s1 = u8 [a0 + 0x2]\n123802: a1 = u8 [a0 + 0x3]\n123805: a4 = a4 << 0x8\n123808: a4 = a4 | a5\n123811: s1 = s1 << 0x10\n123814: a1 = a1 << 0x18\n123817: a1 = a1 | s1\n123820: a1 = a1 | a4\n123823: a4 = u8 [a0 + 0x5]\n123826: a5 = u8 [a0 + 0x4]\n123829: s1 = u8 [a0 + 0x6]\n123832: a0 = u8 [a0 + 0x7]\n123835: a4 = a4 << 0x8\n123838: a4 = a4 | a5\n123841: a5 = u64 [sp + 0x128]\n123845: s1 = s1 << 0x10\n123848: a0 = a0 << 0x18\n123851: a0 = a0 | s1\n123854: s1 = u64 [sp + 0x130]\n123858: a0 = a0 | a4\n123861: a0 = a0 << 0x20\n123864: a0 = a0 | a1\n123867: a0 = reverse a0\n123869: a3 = reverse a3\n123871: a2 = reverse a2\n123873: t0 = reverse t0\n123875: a4 = 0x2\n123878: fallthrough\n      : @1442 (gas: 21)\n123879: a1 = u64 [sp + 0x138]\n123883: u64 [a1 + 0x40] = t0\n123886: u64 [a1 + 0x20] = a4\n123889: a4 = u64 [sp + 0x148]\n123893: u64 [a1] = a4\n123895: u64 [a1 + 0x48] = a2\n123898: u64 [a1 + 0x28] = t2\n123901: u64 [a1 + 0x8] = s1\n123904: u64 [a1 + 0x50] = a3\n123907: u64 [a1 + 0x30] = ra\n123910: u64 [a1 + 0x10] = t1\n123913: u64 [a1 + 0x58] = a0\n123916: a0 = u64 [sp + 0x140]\n123920: u64 [a1 + 0x38] = a0\n123923: u64 [a1 + 0x18] = a5\n123926: sp = s0 + 0xfffffffffffffdb0\n123930: ra = u64 [sp + 0x248]\n123934: s0 = u64 [sp + 0x240]\n123938: s1 = u64 [sp + 0x238]\n123942: sp = sp + 0x250\n123946: ret\n      : @1443 (gas: 1)\n123948: trap\n      : @1444 (gas: 15)\n123949: sp = sp + 0xffffffffffffff80\n123952: u64 [sp + 0x78] = ra\n123955: u64 [sp + 0x70] = s0\n123958: u64 [sp + 0x68] = s1\n123961: s0 = sp + 0x80\n123965: sp = sp & 0xfffffffffffffff0\n123968: a3 = u64 [a0 + 0x18]\n123971: a4 = u64 [a0 + 0x10]\n123974: a2 = u64 [a0]\n123976: a0 = u64 [a0 + 0x8]\n123979: a3 = a3 | a4\n123982: a4 = a2 <u 0x4\n123985: a4 = 0 if a0 != 0\n123987: a4 = 0 if a3 != 0\n123989: jump @1447 if a4 == 0\n      : @1445 (gas: 2)\n123992: a0 = a2 & 0x3\n123995: jump @1450 if a0 != 0\n      : @1446 (gas: 6)\n123998: sp = s0 + 0xffffffffffffff80\n124001: ra = u64 [sp + 0x78]\n124004: s0 = u64 [sp + 0x70]\n124007: s1 = u64 [sp + 0x68]\n124010: sp = sp + 0x80\n124014: ret\n      : @1447 (gas: 8)\n124016: u64 [sp + 80] = 0\n124019: u64 [sp + 72] = 0\n124022: u64 [sp + 64] = 0\n124025: a0 = 0x4e487b7100000000\n124035: a1 = sp + 0x40\n124038: u64 [sp + 0x58] = a0\n124041: a0 = 0\n124043: ra = 1350, jump @23\n      : @1448 [@dyn 675] (gas: 7)\n124050: u64 [sp + 56] = 0\n124053: u64 [sp + 48] = 0\n124056: u64 [sp + 32] = 0x21\n124060: a0 = 0x4\n124063: a1 = sp + 0x20\n124066: u64 [sp + 40] = 0\n124069: ra = 1352, jump @23\n      : @1449 [@dyn 676] (gas: 1)\n124076: jump @1461\n      : @1450 (gas: 1)\n124079: jump @1454 if a0 != 1\n      : @1451 (gas: 3)\n124084: a1 = 0x20\n124087: a0 = 0\n124089: ra = 1354, jump @0\n      : @1452 [@dyn 677] (gas: 35)\n124096: u8 [a0 + 31] = 0\n124099: u8 [a0 + 30] = 0\n124102: u8 [a0 + 29] = 0\n124105: u8 [a0 + 28] = 0\n124108: u8 [a0 + 27] = 0\n124111: u8 [a0 + 26] = 0\n124114: u8 [a0 + 25] = 0\n124117: u8 [a0 + 24] = 0\n124120: u8 [a0 + 23] = 0\n124123: u8 [a0 + 22] = 0\n124126: u8 [a0 + 21] = 0\n124129: u8 [a0 + 20] = 0\n124132: u8 [a0 + 19] = 0\n124135: u8 [a0 + 18] = 0\n124138: u8 [a0 + 17] = 0\n124141: u8 [a0 + 16] = 0\n124144: u8 [a0 + 15] = 0\n124147: u8 [a0 + 14] = 0\n124150: u8 [a0 + 13] = 0\n124153: u8 [a0 + 12] = 0\n124156: u8 [a0 + 11] = 0\n124159: u8 [a0 + 10] = 0\n124162: u8 [a0 + 9] = 0\n124165: u8 [a0 + 8] = 0\n124168: u8 [a0 + 7] = 0\n124171: u8 [a0 + 6] = 0\n124174: u8 [a0 + 5] = 0\n124177: u8 [a0 + 4] = 0\n124180: u8 [a0 + 3] = 0xdf\n124185: u8 [a0 + 2] = 0xee\n124190: u8 [a0 + 1] = 0x45\n124194: u8 [a0 + 0] = 0xf6\n124198: a1 = 0x4\n124201: a0 = 0\n124203: ra = 1356, jump @0\n      : @1453 [@dyn 678] (gas: 5)\n124210: i32 a1 = a0 + 0\n124212: a0 = 0x1\n124215: a2 = 0x4\n124218: ecalli 12 // 'seal_return'\n124220: fallthrough\n      : @1454 (gas: 8)\n124221: s1 = u64 [a1 + 0x18]\n124224: a2 = u64 [a1 + 0x10]\n124227: u64 [sp + 0x8] = a2\n124230: a2 = u64 [a1 + 0x8]\n124233: u64 [sp + 0x10] = a2\n124236: a1 = u64 [a1]\n124238: u64 [sp + 0x18] = a1\n124241: jump @1457 if a0 != 2\n      : @1455 (gas: 3)\n124245: a1 = 0x20\n124248: a0 = 0\n124250: ra = 1358, jump @0\n      : @1456 [@dyn 679] (gas: 33)\n124257: u8 [a0 + 31] = 0\n124260: u8 [a0 + 30] = 0\n124263: u8 [a0 + 29] = 0\n124266: u8 [a0 + 28] = 0\n124269: u8 [a0 + 27] = 0\n124272: u8 [a0 + 26] = 0\n124275: u8 [a0 + 25] = 0\n124278: u8 [a0 + 24] = 0\n124281: u8 [a0 + 23] = 0\n124284: u8 [a0 + 22] = 0\n124287: u8 [a0 + 21] = 0\n124290: u8 [a0 + 20] = 0\n124293: u8 [a0 + 19] = 0\n124296: u8 [a0 + 18] = 0\n124299: u8 [a0 + 17] = 0\n124302: u8 [a0 + 16] = 0\n124305: u8 [a0 + 15] = 0\n124308: u8 [a0 + 14] = 0\n124311: u8 [a0 + 13] = 0\n124314: u8 [a0 + 12] = 0\n124317: u8 [a0 + 11] = 0\n124320: u8 [a0 + 10] = 0\n124323: u8 [a0 + 9] = 0\n124326: u8 [a0 + 8] = 0\n124329: u8 [a0 + 7] = 0\n124332: u8 [a0 + 6] = 0\n124335: u8 [a0 + 5] = 0\n124338: u8 [a0 + 4] = 0\n124341: u8 [a0 + 3] = 0xf7\n124346: u8 [a0 + 2] = 0x98\n124351: u8 [a0 + 1] = 0xe6\n124356: a1 = 0xfc\n124360: jump @1459\n      : @1457 (gas: 3)\n124362: a1 = 0x20\n124365: a0 = 0\n124367: ra = 1360, jump @0\n      : @1458 [@dyn 680] (gas: 33)\n124374: u8 [a0 + 31] = 0\n124377: u8 [a0 + 30] = 0\n124380: u8 [a0 + 29] = 0\n124383: u8 [a0 + 28] = 0\n124386: u8 [a0 + 27] = 0\n124389: u8 [a0 + 26] = 0\n124392: u8 [a0 + 25] = 0\n124395: u8 [a0 + 24] = 0\n124398: u8 [a0 + 23] = 0\n124401: u8 [a0 + 22] = 0\n124404: u8 [a0 + 21] = 0\n124407: u8 [a0 + 20] = 0\n124410: u8 [a0 + 19] = 0\n124413: u8 [a0 + 18] = 0\n124416: u8 [a0 + 17] = 0\n124419: u8 [a0 + 16] = 0\n124422: u8 [a0 + 15] = 0\n124425: u8 [a0 + 14] = 0\n124428: u8 [a0 + 13] = 0\n124431: u8 [a0 + 12] = 0\n124434: u8 [a0 + 11] = 0\n124437: u8 [a0 + 10] = 0\n124440: u8 [a0 + 9] = 0\n124443: u8 [a0 + 8] = 0\n124446: u8 [a0 + 7] = 0\n124449: u8 [a0 + 6] = 0\n124452: u8 [a0 + 5] = 0\n124455: u8 [a0 + 4] = 0\n124458: u8 [a0 + 3] = 0xc\n124462: u8 [a0 + 2] = 0xce\n124467: u8 [a0 + 1] = 0x8b\n124472: a1 = 0xd7\n124476: fallthrough\n      : @1459 (gas: 4)\n124477: u8 [a0] = a1\n124479: a0 = 0x4\n124482: a1 = 0x20\n124485: ra = 1362, jump @0\n      : @1460 [@dyn 681] (gas: 68)\n124492: a1 = reverse s1\n124494: a2 = u64 [sp + 0x8]\n124497: a2 = reverse a2\n124499: a3 = u64 [sp + 0x10]\n124502: a3 = reverse a3\n124504: a4 = u64 [sp + 0x18]\n124507: a4 = reverse a4\n124509: a5 = a4 >> 0x38\n124512: u8 [a0 + 0x1f] = a5\n124515: a5 = a4 >> 0x30\n124518: u8 [a0 + 0x1e] = a5\n124521: a5 = a4 >> 0x28\n124524: u8 [a0 + 0x1d] = a5\n124527: a5 = a4 >> 0x20\n124530: u8 [a0 + 0x1c] = a5\n124533: a5 = a4 >> 0x18\n124536: u8 [a0 + 0x1b] = a5\n124539: a5 = a4 >> 0x10\n124542: u8 [a0 + 0x1a] = a5\n124545: a5 = a4 >> 0x8\n124548: u8 [a0 + 0x19] = a5\n124551: u8 [a0 + 0x18] = a4\n124554: a4 = a3 >> 0x38\n124557: u8 [a0 + 0x17] = a4\n124560: a4 = a3 >> 0x30\n124563: u8 [a0 + 0x16] = a4\n124566: a4 = a3 >> 0x28\n124569: u8 [a0 + 0x15] = a4\n124572: a4 = a3 >> 0x20\n124575: u8 [a0 + 0x14] = a4\n124578: a4 = a3 >> 0x18\n124581: u8 [a0 + 0x13] = a4\n124584: a4 = a3 >> 0x10\n124587: u8 [a0 + 0x12] = a4\n124590: a4 = a3 >> 0x8\n124593: u8 [a0 + 0x11] = a4\n124596: u8 [a0 + 0x10] = a3\n124599: a3 = a2 >> 0x38\n124602: u8 [a0 + 0xf] = a3\n124605: a3 = a2 >> 0x30\n124608: u8 [a0 + 0xe] = a3\n124611: a3 = a2 >> 0x28\n124614: u8 [a0 + 0xd] = a3\n124617: a3 = a2 >> 0x20\n124620: u8 [a0 + 0xc] = a3\n124623: a3 = a2 >> 0x18\n124626: u8 [a0 + 0xb] = a3\n124629: a3 = a2 >> 0x10\n124632: u8 [a0 + 0xa] = a3\n124635: a3 = a2 >> 0x8\n124638: u8 [a0 + 0x9] = a3\n124641: u8 [a0 + 0x8] = a2\n124644: u8 [a0] = a1\n124646: a2 = a1 >> 0x38\n124649: u8 [a0 + 0x7] = a2\n124652: a2 = a1 >> 0x30\n124655: u8 [a0 + 0x6] = a2\n124658: a2 = a1 >> 0x28\n124661: u8 [a0 + 0x5] = a2\n124664: a2 = a1 >> 0x20\n124667: u8 [a0 + 0x4] = a2\n124670: a2 = a1 >> 0x18\n124673: u8 [a0 + 0x3] = a2\n124676: a2 = a1 >> 0x10\n124679: u8 [a0 + 0x2] = a2\n124682: a1 = a1 >> 0x8\n124685: u8 [a0 + 0x1] = a1\n124688: fallthrough\n      : @1461 (gas: 3)\n124689: a1 = 0x24\n124692: a0 = 0\n124694: ra = 1364, jump @0\n      : @1462 [@dyn 682] (gas: 6)\n124701: i32 a1 = a0 + 0\n124703: a0 = 0x1\n124706: a2 = 0x24\n124709: ra = 0x556\n124713: ecalli 12 // 'seal_return'\n124715: fallthrough\n      : @1463 [@dyn 683] (gas: 9)\n124716: a2 = u64 [a1 + 0x18]\n124719: a3 = u64 [a1 + 0x10]\n124722: a4 = u64 [a1 + 0x8]\n124725: a1 = u64 [a1]\n124727: u64 [a0 + 0x18] = a2\n124730: u64 [a0 + 0x10] = a3\n124733: u64 [a0 + 0x8] = a4\n124736: u64 [a0] = a1\n124738: ret\n      : @1464 [@dyn 684] (gas: 97)\n124740: a1 = u8 [a0 + 0x11]\n124743: a2 = u8 [a0 + 0x10]\n124746: a3 = u8 [a0 + 0x12]\n124749: a4 = u8 [a0 + 0x13]\n124752: a1 = a1 << 0x8\n124755: a1 = a1 | a2\n124758: a3 = a3 << 0x10\n124761: a4 = a4 << 0x18\n124764: a3 = a3 | a4\n124767: a1 = a1 | a3\n124770: a2 = u8 [a0 + 0x15]\n124773: a3 = u8 [a0 + 0x14]\n124776: a4 = u8 [a0 + 0x16]\n124779: a5 = u8 [a0 + 0x17]\n124782: a2 = a2 << 0x8\n124785: a2 = a2 | a3\n124788: a4 = a4 << 0x10\n124791: a5 = a5 << 0x18\n124794: a4 = a4 | a5\n124797: a2 = a2 | a4\n124800: a2 = a2 << 0x20\n124803: t0 = a2 | a1\n124806: a2 = u8 [a0 + 0x1]\n124809: a3 = u8 [a0]\n124811: a4 = u8 [a0 + 0x2]\n124814: a5 = u8 [a0 + 0x3]\n124817: a2 = a2 << 0x8\n124820: a2 = a2 | a3\n124823: a4 = a4 << 0x10\n124826: a5 = a5 << 0x18\n124829: a4 = a4 | a5\n124832: a2 = a2 | a4\n124835: a3 = u8 [a0 + 0x5]\n124838: a4 = u8 [a0 + 0x4]\n124841: a5 = u8 [a0 + 0x6]\n124844: s1 = u8 [a0 + 0x7]\n124847: a3 = a3 << 0x8\n124850: a3 = a3 | a4\n124853: a5 = a5 << 0x10\n124856: s1 = s1 << 0x18\n124859: a5 = a5 | s1\n124862: a3 = a3 | a5\n124865: a3 = a3 << 0x20\n124868: a2 = a2 | a3\n124871: a3 = u8 [a0 + 0x19]\n124874: a4 = u8 [a0 + 0x18]\n124877: a5 = u8 [a0 + 0x1a]\n124880: s1 = u8 [a0 + 0x1b]\n124883: a3 = a3 << 0x8\n124886: a3 = a3 | a4\n124889: a5 = a5 << 0x10\n124892: s1 = s1 << 0x18\n124895: a5 = a5 | s1\n124898: a3 = a3 | a5\n124901: a4 = u8 [a0 + 0x1d]\n124904: a5 = u8 [a0 + 0x1c]\n124907: s1 = u8 [a0 + 0x1e]\n124910: a1 = u8 [a0 + 0x1f]\n124913: a4 = a4 << 0x8\n124916: a4 = a4 | a5\n124919: s1 = s1 << 0x10\n124922: a1 = a1 << 0x18\n124925: a1 = a1 | s1\n124928: a1 = a1 | a4\n124931: a1 = a1 << 0x20\n124934: a3 = a3 | a1\n124937: a1 = u8 [a0 + 0x9]\n124940: a4 = u8 [a0 + 0x8]\n124943: a5 = u8 [a0 + 0xa]\n124946: s1 = u8 [a0 + 0xb]\n124949: a1 = a1 << 0x8\n124952: a1 = a1 | a4\n124955: a5 = a5 << 0x10\n124958: s1 = s1 << 0x18\n124961: a5 = a5 | s1\n124964: a1 = a1 | a5\n124967: a4 = u8 [a0 + 0xd]\n124970: a5 = u8 [a0 + 0xc]\n124973: s1 = u8 [a0 + 0xe]\n124976: a0 = u8 [a0 + 0xf]\n124979: a4 = a4 << 0x8\n124982: a4 = a4 | a5\n124985: s1 = s1 << 0x10\n124988: a0 = a0 << 0x18\n124991: a0 = a0 | s1\n124994: a0 = a0 | a4\n124997: a0 = a0 << 0x20\n125000: a0 = a0 | a1\n125003: s1 = reverse a0\n125005: a0 = reverse a3\n125007: u64 [sp + 0x8] = a0\n125010: a0 = reverse a2\n125012: u64 [sp + 0x18] = a0\n125015: a0 = reverse t0\n125017: u64 [sp + 0x10] = a0\n125020: ecalli 11 // 'return_data_size'\n125022: fallthrough\n      : @1465 (gas: 11)\n125023: a3 = u64 [sp + 0x8]\n125026: a1 = u64 [sp + 0x18]\n125029: a2 = u64 [sp + 0x10]\n125032: a1 = a1 | a2\n125035: a2 = a3 | s1\n125038: a2 = a2 | a1\n125041: a2 = a2 >> 0x20\n125044: a1 = a1 | s1\n125047: a1 = a1 << 0x20\n125050: a1 = a1 | a2\n125053: jump @1472 if a1 != 0\n      : @1466 (gas: 3)\n125056: s1 = a0\n125058: a0 = a0 >> 0x20\n125061: jump @1472 if a0 != 0\n      : @1467 (gas: 5)\n125064: i32 a0 = a3 + 0\n125066: i32 a1 = s1 + 0\n125068: u64 [sp + 0x18] = a1\n125071: u64 [sp + 0x10] = a0\n125074: ra = 1370, jump @0\n      : @1468 [@dyn 685] (gas: 6)\n125081: u32 [sp + 0x20] = s1\n125084: i32 a0 = a0 + 0\n125086: i32 a1 = sp + 0x20\n125089: a2 = 0\n125091: ecalli 10 // 'return_data_copy'\n125093: fallthrough\n      : @1469 (gas: 3)\n125094: a0 = i32 [sp + 0x20]\n125097: a1 = u64 [sp + 0x18]\n125100: jump @1472 if a0 <u a1\n      : @1470 (gas: 2)\n125103: ecalli 11 // 'return_data_size'\n125105: fallthrough\n      : @1471 (gas: 2)\n125106: a1 = a0 >> 0x20\n125109: jump @1473 if a1 == 0\n      : @1472 (gas: 1)\n125112: trap\n      : @1473 (gas: 4)\n125113: i32 s1 = a0 + 0\n125115: a0 = u64 [sp + 0x10]\n125118: a1 = s1\n125120: ra = 1372, jump @0\n      : @1474 [@dyn 686] (gas: 6)\n125127: i32 a1 = a0 + 0\n125129: a0 = 0x1\n125132: a2 = s1\n125134: ra = 0x55e\n125138: ecalli 12 // 'seal_return'\n125140: fallthrough\n      : @1475 [@dyn 687] (gas: 9)\n125141: a2 = u64 [a1 + 0x18]\n125144: a3 = u64 [a1 + 0x10]\n125147: a4 = u64 [a1 + 0x8]\n125150: a1 = u64 [a1]\n125152: u64 [a0 + 0x18] = a2\n125155: u64 [a0 + 0x10] = a3\n125158: u64 [a0 + 0x8] = a4\n125161: u64 [a0] = a1\n125163: ret\n      : @1476 (gas: 30)\n125165: sp = sp + 0xfffffffffffffec0\n125169: u64 [sp + 0x138] = ra\n125173: u64 [sp + 0x130] = s0\n125177: u64 [sp + 0x128] = s1\n125181: s0 = sp + 0x140\n125185: sp = sp & 0xffffffffffffffe0\n125188: t2 = u64 [a4 + 0x10]\n125191: t1 = u64 [a4]\n125193: ra = u64 [a4 + 0x8]\n125196: t0 = u64 [0x20100]\n125201: s1 = u64 [0x20108]\n125206: a5 = u64 [a4 + 0x18]\n125209: a4 = ra ^ t0\n125212: u64 [sp + 0x90] = a4\n125216: u64 [sp + 0x98] = ra\n125220: t0 = ra <u t0\n125223: u64 [sp + 0x78] = t1\n125226: s1 = t1 <u s1\n125229: a4 = u64 [sp + 0x90]\n125233: s1 = t0 if a4 != 0\n125236: a4 = 0x7fffffffffffffff\n125246: ra = a5 ^ a4\n125249: u64 [sp + 0x80] = a5\n125253: t0 = a5 <u a4\n125256: a4 = t2 <u 0xffffffffffffffff\n125259: a4 = t0 if ra != 0\n125262: t0 = t2\n125264: a5 = ra | ~t2\n125267: a4 = s1 if a5 == 0\n125270: jump @1478 if a4 != 0\n      : @1477 (gas: 8)\n125273: a3 = 0\n125275: s1 = 0\n125277: a2 = 0\n125279: a5 = 0x3\n125282: t1 = u64 [sp + 0x80]\n125286: a1 = u64 [sp + 0x78]\n125289: t2 = u64 [sp + 0x98]\n125293: jump @1494\n      : @1478 (gas: 23)\n125296: u64 [sp + 0x18] = t0\n125299: u64 [sp + 0x10] = a0\n125302: a0 = u64 [a3 + 0x18]\n125305: u64 [sp + 0x20] = a0\n125308: a0 = u64 [a3 + 0x10]\n125311: u64 [sp + 0x28] = a0\n125314: a0 = u64 [a3 + 0x8]\n125317: u64 [sp + 0x30] = a0\n125320: a0 = u64 [a3]\n125322: u64 [sp + 0x38] = a0\n125325: a0 = u64 [a2]\n125327: u64 [sp + 0x40] = a0\n125330: a0 = u64 [a1 + 0x18]\n125333: u64 [sp + 0x50] = a0\n125336: a0 = u64 [a1 + 0x10]\n125339: u64 [sp + 0x58] = a0\n125342: a0 = u64 [a1 + 0x8]\n125345: u64 [sp + 0x60] = a0\n125348: a0 = u64 [a1]\n125350: u64 [sp + 0x68] = a0\n125353: a0 = 0x40\n125356: a1 = 0x20\n125359: ra = 1376, jump @0\n      : @1479 [@dyn 688] (gas: 103)\n125366: a1 = u8 [a0 + 0x11]\n125369: a2 = u8 [a0 + 0x10]\n125372: a3 = u8 [a0 + 0x12]\n125375: a4 = u8 [a0 + 0x13]\n125378: a1 = a1 << 0x8\n125381: a1 = a1 | a2\n125384: a3 = a3 << 0x10\n125387: a4 = a4 << 0x18\n125390: a3 = a3 | a4\n125393: a1 = a1 | a3\n125396: a2 = u8 [a0 + 0x15]\n125399: a3 = u8 [a0 + 0x14]\n125402: a4 = u8 [a0 + 0x16]\n125405: a5 = u8 [a0 + 0x17]\n125408: a2 = a2 << 0x8\n125411: a2 = a2 | a3\n125414: a4 = a4 << 0x10\n125417: a5 = a5 << 0x18\n125420: a4 = a4 | a5\n125423: a2 = a2 | a4\n125426: a2 = a2 << 0x20\n125429: t0 = a2 | a1\n125432: a2 = u8 [a0 + 0x1]\n125435: a3 = u8 [a0]\n125437: a4 = u8 [a0 + 0x2]\n125440: a5 = u8 [a0 + 0x3]\n125443: a2 = a2 << 0x8\n125446: a2 = a2 | a3\n125449: a4 = a4 << 0x10\n125452: a5 = a5 << 0x18\n125455: a4 = a4 | a5\n125458: a2 = a2 | a4\n125461: a3 = u8 [a0 + 0x5]\n125464: a4 = u8 [a0 + 0x4]\n125467: a5 = u8 [a0 + 0x6]\n125470: s1 = u8 [a0 + 0x7]\n125473: a3 = a3 << 0x8\n125476: a3 = a3 | a4\n125479: a5 = a5 << 0x10\n125482: s1 = s1 << 0x18\n125485: a5 = a5 | s1\n125488: a3 = a3 | a5\n125491: a3 = a3 << 0x20\n125494: a2 = a2 | a3\n125497: a3 = u8 [a0 + 0x19]\n125500: a4 = u8 [a0 + 0x18]\n125503: a5 = u8 [a0 + 0x1a]\n125506: s1 = u8 [a0 + 0x1b]\n125509: a3 = a3 << 0x8\n125512: a3 = a3 | a4\n125515: a5 = a5 << 0x10\n125518: s1 = s1 << 0x18\n125521: a5 = a5 | s1\n125524: a3 = a3 | a5\n125527: a4 = u8 [a0 + 0x1d]\n125530: a5 = u8 [a0 + 0x1c]\n125533: s1 = u8 [a0 + 0x1e]\n125536: a1 = u8 [a0 + 0x1f]\n125539: a4 = a4 << 0x8\n125542: a4 = a4 | a5\n125545: s1 = s1 << 0x10\n125548: a1 = a1 << 0x18\n125551: a1 = a1 | s1\n125554: a1 = a1 | a4\n125557: a1 = a1 << 0x20\n125560: a3 = a3 | a1\n125563: a1 = u8 [a0 + 0x9]\n125566: a4 = u8 [a0 + 0x8]\n125569: a5 = u8 [a0 + 0xa]\n125572: s1 = u8 [a0 + 0xb]\n125575: a1 = a1 << 0x8\n125578: a1 = a1 | a4\n125581: a5 = a5 << 0x10\n125584: s1 = s1 << 0x18\n125587: a5 = a5 | s1\n125590: a1 = a1 | a5\n125593: a4 = u8 [a0 + 0xd]\n125596: a5 = u8 [a0 + 0xc]\n125599: s1 = u8 [a0 + 0xe]\n125602: a0 = u8 [a0 + 0xf]\n125605: a4 = a4 << 0x8\n125608: a4 = a4 | a5\n125611: s1 = s1 << 0x10\n125614: a0 = a0 << 0x18\n125617: a0 = a0 | s1\n125620: a0 = a0 | a4\n125623: a0 = a0 << 0x20\n125626: a0 = a0 | a1\n125629: s1 = reverse a0\n125631: a1 = reverse a3\n125633: a2 = reverse a2\n125635: a0 = reverse t0\n125637: u64 [sp + 0x70] = a0\n125640: u64 [sp + 0x48] = a2\n125643: a0 = a0 | a2\n125646: u64 [sp + 0x90] = a1\n125650: a1 = a1 | s1\n125653: a1 = a1 | a0\n125656: a1 = a1 >> 0x20\n125659: a0 = a0 | s1\n125662: a0 = a0 << 0x20\n125665: a0 = a0 | a1\n125668: jump @1495 if a0 != 0\n      : @1480 (gas: 4)\n125672: a0 = i32 [sp + 0x90]\n125676: a1 = 0x20\n125679: u64 [sp + 0x88] = a0\n125683: ra = 1378, jump @0\n      : @1481 [@dyn 689] (gas: 79)\n125690: a1 = u64 [sp + 0x50]\n125693: a1 = reverse a1\n125695: a2 = u64 [sp + 0x58]\n125698: a2 = reverse a2\n125700: a3 = u64 [sp + 0x60]\n125703: a3 = reverse a3\n125705: a4 = u64 [sp + 0x68]\n125708: a4 = reverse a4\n125710: a5 = a4 >> 0x38\n125713: u8 [a0 + 0x1f] = a5\n125716: a5 = a4 >> 0x30\n125719: u8 [a0 + 0x1e] = a5\n125722: a5 = a4 >> 0x28\n125725: u8 [a0 + 0x1d] = a5\n125728: a5 = a4 >> 0x20\n125731: u8 [a0 + 0x1c] = a5\n125734: a5 = a4 >> 0x18\n125737: u8 [a0 + 0x1b] = a5\n125740: a5 = a4 >> 0x10\n125743: u8 [a0 + 0x1a] = a5\n125746: a5 = a4 >> 0x8\n125749: u8 [a0 + 0x19] = a5\n125752: u8 [a0 + 0x18] = a4\n125755: u8 [a0 + 0x10] = a3\n125758: a4 = a3 >> 0x38\n125761: u8 [a0 + 0x17] = a4\n125764: a4 = a3 >> 0x30\n125767: u8 [a0 + 0x16] = a4\n125770: a4 = a3 >> 0x28\n125773: u8 [a0 + 0x15] = a4\n125776: a4 = a3 >> 0x20\n125779: u8 [a0 + 0x14] = a4\n125782: a4 = a3 >> 0x18\n125785: u8 [a0 + 0x13] = a4\n125788: a4 = a3 >> 0x10\n125791: u8 [a0 + 0x12] = a4\n125794: a3 = a3 >> 0x8\n125797: u8 [a0 + 0x11] = a3\n125800: u8 [a0 + 0x8] = a2\n125803: a3 = a2 >> 0x38\n125806: u8 [a0 + 0xf] = a3\n125809: a3 = a2 >> 0x30\n125812: u8 [a0 + 0xe] = a3\n125815: a3 = a2 >> 0x28\n125818: u8 [a0 + 0xd] = a3\n125821: a3 = a2 >> 0x20\n125824: u8 [a0 + 0xc] = a3\n125827: a3 = a2 >> 0x18\n125830: u8 [a0 + 0xb] = a3\n125833: a3 = a2 >> 0x10\n125836: u8 [a0 + 0xa] = a3\n125839: a2 = a2 >> 0x8\n125842: u8 [a0 + 0x9] = a2\n125845: u8 [a0] = a1\n125847: a2 = a1 >> 0x38\n125850: u8 [a0 + 0x7] = a2\n125853: a2 = a1 >> 0x30\n125856: u8 [a0 + 0x6] = a2\n125859: a2 = a1 >> 0x28\n125862: u8 [a0 + 0x5] = a2\n125865: a2 = a1 >> 0x20\n125868: u8 [a0 + 0x4] = a2\n125871: a2 = a1 >> 0x18\n125874: u8 [a0 + 0x3] = a2\n125877: a2 = a1 >> 0x10\n125880: u8 [a0 + 0x2] = a2\n125883: a1 = a1 >> 0x8\n125886: a4 = u64 [sp + 0x48]\n125889: a4 = a4 | s1\n125892: s1 = 0x100000000\n125902: a2 = 0xffffffe0\n125912: a3 = u64 [sp + 0x90]\n125916: a2 = a3 <u a2\n125919: a3 = u64 [sp + 0x70]\n125922: a2 = 0 if a3 != 0\n125924: u64 [sp + 0x68] = a4\n125927: a2 = 0 if a4 != 0\n125929: u8 [a0 + 0x1] = a1\n125932: jump @1495 if a2 == 0\n      : @1482 (gas: 4)\n125936: a0 = u64 [sp + 0x88]\n125940: i32 a0 = a0 + 0x20\n125943: a1 = 0x20\n125946: ra = 1380, jump @0\n      : @1483 [@dyn 690] (gas: 41)\n125953: a1 = u64 [sp + 0x40]\n125956: u8 [a0 + 0x1f] = a1\n125959: u8 [a0 + 30] = 0\n125962: u8 [a0 + 29] = 0\n125965: u8 [a0 + 28] = 0\n125968: u8 [a0 + 27] = 0\n125971: u8 [a0 + 26] = 0\n125974: u8 [a0 + 25] = 0\n125977: u8 [a0 + 24] = 0\n125980: u8 [a0 + 23] = 0\n125983: u8 [a0 + 22] = 0\n125986: u8 [a0 + 21] = 0\n125989: u8 [a0 + 20] = 0\n125992: u8 [a0 + 19] = 0\n125995: u8 [a0 + 18] = 0\n125998: u8 [a0 + 17] = 0\n126001: u8 [a0 + 16] = 0\n126004: u8 [a0 + 15] = 0\n126007: u8 [a0 + 14] = 0\n126010: u8 [a0 + 13] = 0\n126013: u8 [a0 + 12] = 0\n126016: u8 [a0 + 11] = 0\n126019: u8 [a0 + 10] = 0\n126022: u8 [a0 + 9] = 0\n126025: u8 [a0 + 8] = 0\n126028: u8 [a0 + 7] = 0\n126031: u8 [a0 + 6] = 0\n126034: u8 [a0 + 5] = 0\n126037: u8 [a0 + 4] = 0\n126040: u8 [a0 + 3] = 0\n126043: u8 [a0 + 2] = 0\n126046: u8 [a0 + 1] = 0\n126049: a1 = s1 + 0xffffffffffffffc0\n126052: a2 = u64 [sp + 0x90]\n126056: a1 = a2 <u a1\n126059: a2 = u64 [sp + 0x70]\n126062: a1 = 0 if a2 != 0\n126064: s1 = u64 [sp + 0x68]\n126067: a1 = 0 if s1 != 0\n126069: u8 [a0 + 0] = 0\n126071: jump @1495 if a1 == 0\n      : @1484 (gas: 4)\n126075: a0 = u64 [sp + 0x88]\n126079: i32 a0 = a0 + 0x40\n126082: a1 = 0x20\n126085: ra = 1382, jump @0\n      : @1485 [@dyn 691] (gas: 76)\n126092: a1 = u64 [sp + 0x20]\n126095: a1 = reverse a1\n126097: a2 = u64 [sp + 0x28]\n126100: a2 = reverse a2\n126102: a3 = u64 [sp + 0x30]\n126105: a3 = reverse a3\n126107: a4 = u64 [sp + 0x38]\n126110: a4 = reverse a4\n126112: a5 = a4 >> 0x38\n126115: u8 [a0 + 0x1f] = a5\n126118: a5 = a4 >> 0x30\n126121: u8 [a0 + 0x1e] = a5\n126124: a5 = a4 >> 0x28\n126127: u8 [a0 + 0x1d] = a5\n126130: a5 = a4 >> 0x20\n126133: u8 [a0 + 0x1c] = a5\n126136: a5 = a4 >> 0x18\n126139: u8 [a0 + 0x1b] = a5\n126142: a5 = a4 >> 0x10\n126145: u8 [a0 + 0x1a] = a5\n126148: a5 = a4 >> 0x8\n126151: u8 [a0 + 0x19] = a5\n126154: u8 [a0 + 0x18] = a4\n126157: u8 [a0 + 0x10] = a3\n126160: a4 = a3 >> 0x38\n126163: u8 [a0 + 0x17] = a4\n126166: a4 = a3 >> 0x30\n126169: u8 [a0 + 0x16] = a4\n126172: a4 = a3 >> 0x28\n126175: u8 [a0 + 0x15] = a4\n126178: a4 = a3 >> 0x20\n126181: u8 [a0 + 0x14] = a4\n126184: a4 = a3 >> 0x18\n126187: u8 [a0 + 0x13] = a4\n126190: a4 = a3 >> 0x10\n126193: u8 [a0 + 0x12] = a4\n126196: a3 = a3 >> 0x8\n126199: u8 [a0 + 0x11] = a3\n126202: u8 [a0 + 0x8] = a2\n126205: a3 = a2 >> 0x38\n126208: u8 [a0 + 0xf] = a3\n126211: a3 = a2 >> 0x30\n126214: u8 [a0 + 0xe] = a3\n126217: a3 = a2 >> 0x28\n126220: u8 [a0 + 0xd] = a3\n126223: a3 = a2 >> 0x20\n126226: u8 [a0 + 0xc] = a3\n126229: a3 = a2 >> 0x18\n126232: u8 [a0 + 0xb] = a3\n126235: a3 = a2 >> 0x10\n126238: u8 [a0 + 0xa] = a3\n126241: a2 = a2 >> 0x8\n126244: u8 [a0 + 0x9] = a2\n126247: u8 [a0] = a1\n126249: a2 = a1 >> 0x38\n126252: u8 [a0 + 0x7] = a2\n126255: a2 = a1 >> 0x30\n126258: u8 [a0 + 0x6] = a2\n126261: a2 = a1 >> 0x28\n126264: u8 [a0 + 0x5] = a2\n126267: a2 = a1 >> 0x20\n126270: u8 [a0 + 0x4] = a2\n126273: a2 = a1 >> 0x18\n126276: u8 [a0 + 0x3] = a2\n126279: a2 = a1 >> 0x10\n126282: u8 [a0 + 0x2] = a2\n126285: a1 = a1 >> 0x8\n126288: a2 = 0xffffffa0\n126298: a3 = u64 [sp + 0x90]\n126302: a2 = a3 <u a2\n126305: a3 = u64 [sp + 0x70]\n126308: a2 = 0 if a3 != 0\n126310: a2 = 0 if s1 != 0\n126312: u8 [a0 + 0x1] = a1\n126315: s1 = u64 [sp + 0x80]\n126319: jump @1495 if a2 == 0\n      : @1486 (gas: 4)\n126323: a0 = u64 [sp + 0x88]\n126327: i32 a0 = a0 + 0x60\n126330: a1 = 0x20\n126333: ra = 1384, jump @0\n      : @1487 [@dyn 692] (gas: 70)\n126340: a1 = reverse s1\n126342: a2 = u64 [sp + 0x18]\n126345: a2 = reverse a2\n126347: a3 = u64 [sp + 0x98]\n126351: a3 = reverse a3\n126353: a4 = u64 [sp + 0x78]\n126356: a4 = reverse a4\n126358: a5 = a4 >> 0x38\n126361: u8 [a0 + 0x1f] = a5\n126364: a5 = a4 >> 0x30\n126367: u8 [a0 + 0x1e] = a5\n126370: a5 = a4 >> 0x28\n126373: u8 [a0 + 0x1d] = a5\n126376: a5 = a4 >> 0x20\n126379: u8 [a0 + 0x1c] = a5\n126382: a5 = a4 >> 0x18\n126385: u8 [a0 + 0x1b] = a5\n126388: a5 = a4 >> 0x10\n126391: u8 [a0 + 0x1a] = a5\n126394: a5 = a4 >> 0x8\n126397: u8 [a0 + 0x19] = a5\n126400: u8 [a0 + 0x18] = a4\n126403: u8 [a0 + 0x10] = a3\n126406: a4 = a3 >> 0x38\n126409: u8 [a0 + 0x17] = a4\n126412: a4 = a3 >> 0x30\n126415: u8 [a0 + 0x16] = a4\n126418: a4 = a3 >> 0x28\n126421: u8 [a0 + 0x15] = a4\n126424: a4 = a3 >> 0x20\n126427: u8 [a0 + 0x14] = a4\n126430: a4 = a3 >> 0x18\n126433: u8 [a0 + 0x13] = a4\n126436: a4 = a3 >> 0x10\n126439: u8 [a0 + 0x12] = a4\n126442: a3 = a3 >> 0x8\n126445: u8 [a0 + 0x11] = a3\n126448: u8 [a0 + 0x8] = a2\n126451: a3 = a2 >> 0x38\n126454: u8 [a0 + 0xf] = a3\n126457: a3 = a2 >> 0x30\n126460: u8 [a0 + 0xe] = a3\n126463: a3 = a2 >> 0x28\n126466: u8 [a0 + 0xd] = a3\n126469: a3 = a2 >> 0x20\n126472: u8 [a0 + 0xc] = a3\n126475: a3 = a2 >> 0x18\n126478: u8 [a0 + 0xb] = a3\n126481: a3 = a2 >> 0x10\n126484: u8 [a0 + 0xa] = a3\n126487: a2 = a2 >> 0x8\n126490: u8 [a0 + 0x9] = a2\n126493: u8 [a0] = a1\n126495: a2 = a1 >> 0x38\n126498: u8 [a0 + 0x7] = a2\n126501: a2 = a1 >> 0x30\n126504: u8 [a0 + 0x6] = a2\n126507: a2 = a1 >> 0x28\n126510: u8 [a0 + 0x5] = a2\n126513: a2 = a1 >> 0x20\n126516: u8 [a0 + 0x4] = a2\n126519: a2 = a1 >> 0x18\n126522: u8 [a0 + 0x3] = a2\n126525: a2 = a1 >> 0x10\n126528: u8 [a0 + 0x2] = a2\n126531: a1 = a1 >> 0x8\n126534: u8 [a0 + 0x1] = a1\n126537: a1 = 0x20\n126540: a0 = 0\n126542: ra = 1386, jump @0\n      : @1488 [@dyn 693] (gas: 43)\n126549: u8 [a0 + 31] = 0\n126552: u8 [a0 + 30] = 0\n126555: u8 [a0 + 29] = 0\n126558: u8 [a0 + 28] = 0\n126561: u8 [a0 + 27] = 0\n126564: u8 [a0 + 26] = 0\n126567: u8 [a0 + 25] = 0\n126570: u8 [a0 + 24] = 0\n126573: u8 [a0 + 23] = 0\n126576: u8 [a0 + 22] = 0\n126579: u8 [a0 + 21] = 0\n126582: u8 [a0 + 20] = 0\n126585: u8 [a0 + 19] = 0\n126588: u8 [a0 + 18] = 0\n126591: u8 [a0 + 17] = 0\n126594: u8 [a0 + 16] = 0\n126597: u8 [a0 + 15] = 0\n126600: u8 [a0 + 14] = 0\n126603: u8 [a0 + 13] = 0\n126606: u8 [a0 + 12] = 0\n126609: u8 [a0 + 11] = 0\n126612: u8 [a0 + 10] = 0\n126615: u8 [a0 + 9] = 0\n126618: u8 [a0 + 8] = 0\n126621: u8 [a0 + 7] = 0\n126624: u8 [a0 + 6] = 0\n126627: u8 [a0 + 5] = 0\n126630: u8 [a0 + 4] = 0\n126633: u8 [a0 + 3] = 0\n126636: u8 [a0 + 2] = 0\n126639: u8 [a0 + 1] = 0\n126642: u8 [a0 + 0] = 0\n126644: ecalli 9 // 'ref_time_left'\n126646: u64 [sp + 168] = 0\n126650: u64 [sp + 160] = 0\n126654: u32 [sp + 176] = 0x1000000\n126662: u64 [sp + 216] = 0\n126666: u64 [sp + 208] = 0\n126670: u64 [sp + 200] = 0\n126674: u64 [sp + 192] = 0\n126678: a1 = 0x80\n126682: a0 = u64 [sp + 0x88]\n126686: ra = 1388, jump @0\n      : @1489 [@dyn 694] (gas: 4)\n126693: u64 [sp + 0x98] = a0\n126697: a1 = 0x20\n126700: a0 = 0\n126702: ra = 1390, jump @0\n      : @1490 [@dyn 695] (gas: 31)\n126709: u32 [sp + 224] = 0x20\n126714: u64 [sp + 280] = 0\n126718: u64 [sp + 272] = 0\n126722: u64 [sp + 264] = 0\n126726: u64 [sp + 256] = 0\n126730: a1 = sp + 0xa0\n126734: a1 = a1 << 0x20\n126737: a1 = a1 >> 0x20\n126740: a2 = 0x1800000000\n126750: s1 = a1 | a2\n126753: a1 = sp + 0xc0\n126757: a1 = a1 << 0x20\n126760: a1 = a1 >> 0x20\n126763: a2 = sp + 0x100\n126767: a2 = a2 << 0x20\n126770: a3 = a2 | a1\n126773: a1 = u64 [sp + 0x98]\n126777: a1 = a1 << 0x20\n126780: a1 = a1 >> 0x20\n126783: a4 = 0x8000000000\n126793: a4 = a4 | a1\n126796: a0 = a0 << 0x20\n126799: a0 = a0 >> 0x20\n126802: a1 = sp + 0xe0\n126806: a1 = a1 << 0x20\n126809: a5 = a1 | a0\n126812: a1 = 0xffffffffffffffff\n126815: a2 = 0xffffffffffffffff\n126818: a0 = s1\n126820: ecalli 1 // 'call'\n126822: fallthrough\n      : @1491 (gas: 1)\n126823: jump @1496 if a0 != 0\n      : @1492 (gas: 2)\n126827: a1 = 0x20\n126830: ra = 1392, jump @0\n      : @1493 [@dyn 696] (gas: 110)\n126837: a1 = 0\n126839: u64 [sp + 152] = 0\n126843: t0 = 0\n126845: a2 = u8 [a0 + 0x9]\n126848: a3 = u8 [a0 + 0x8]\n126851: a4 = u8 [a0 + 0xa]\n126854: a5 = u8 [a0 + 0xb]\n126857: a2 = a2 << 0x8\n126860: a2 = a2 | a3\n126863: a4 = a4 << 0x10\n126866: a5 = a5 << 0x18\n126869: a4 = a4 | a5\n126872: a2 = a2 | a4\n126875: a3 = u8 [a0 + 0xd]\n126878: a4 = u8 [a0 + 0xc]\n126881: a5 = u8 [a0 + 0xe]\n126884: s1 = u8 [a0 + 0xf]\n126887: a3 = a3 << 0x8\n126890: a3 = a3 | a4\n126893: a5 = a5 << 0x10\n126896: s1 = s1 << 0x18\n126899: a5 = a5 | s1\n126902: a3 = a3 | a5\n126905: a3 = a3 << 0x20\n126908: a2 = a2 | a3\n126911: u64 [sp + 0x90] = a2\n126915: a3 = u8 [a0 + 0x19]\n126918: a4 = u8 [a0 + 0x18]\n126921: a5 = u8 [a0 + 0x1a]\n126924: s1 = u8 [a0 + 0x1b]\n126927: a3 = a3 << 0x8\n126930: a3 = a3 | a4\n126933: a5 = a5 << 0x10\n126936: s1 = s1 << 0x18\n126939: a5 = a5 | s1\n126942: a3 = a3 | a5\n126945: a4 = u8 [a0 + 0x1d]\n126948: a5 = u8 [a0 + 0x1c]\n126951: s1 = u8 [a0 + 0x1e]\n126954: a2 = u8 [a0 + 0x1f]\n126957: a4 = a4 << 0x8\n126960: a4 = a4 | a5\n126963: s1 = s1 << 0x10\n126966: a2 = a2 << 0x18\n126969: a2 = a2 | s1\n126972: a2 = a2 | a4\n126975: a2 = a2 << 0x20\n126978: t1 = a2 | a3\n126981: a2 = u8 [a0 + 0x11]\n126984: a4 = u8 [a0 + 0x10]\n126987: a5 = u8 [a0 + 0x12]\n126990: s1 = u8 [a0 + 0x13]\n126993: a2 = a2 << 0x8\n126996: a2 = a2 | a4\n126999: a5 = a5 << 0x10\n127002: s1 = s1 << 0x18\n127005: a5 = a5 | s1\n127008: a2 = a2 | a5\n127011: a4 = u8 [a0 + 0x15]\n127014: a5 = u8 [a0 + 0x14]\n127017: s1 = u8 [a0 + 0x16]\n127020: a3 = u8 [a0 + 0x17]\n127023: a4 = a4 << 0x8\n127026: a4 = a4 | a5\n127029: s1 = s1 << 0x10\n127032: a3 = a3 << 0x18\n127035: a3 = a3 | s1\n127038: a3 = a3 | a4\n127041: a3 = a3 << 0x20\n127044: a4 = a3 | a2\n127047: a2 = u8 [a0 + 0x1]\n127050: a3 = u8 [a0]\n127052: a5 = u8 [a0 + 0x2]\n127055: s1 = u8 [a0 + 0x3]\n127058: a2 = a2 << 0x8\n127061: a2 = a2 | a3\n127064: a5 = a5 << 0x10\n127067: s1 = s1 << 0x18\n127070: a5 = a5 | s1\n127073: a2 = a2 | a5\n127076: a3 = u8 [a0 + 0x5]\n127079: a5 = u8 [a0 + 0x4]\n127082: s1 = u8 [a0 + 0x6]\n127085: a0 = u8 [a0 + 0x7]\n127088: a3 = a3 << 0x8\n127091: a3 = a3 | a5\n127094: s1 = s1 << 0x10\n127097: a0 = a0 << 0x18\n127100: a0 = a0 | s1\n127103: a0 = a0 | a3\n127106: a0 = a0 << 0x20\n127109: a5 = a0 | a2\n127112: s1 = reverse a4\n127114: a3 = reverse t1\n127116: t1 = 0\n127118: t2 = u64 [sp + 0x98]\n127122: a0 = u64 [sp + 0x90]\n127126: a2 = reverse a0\n127128: a4 = a2 << 0x20\n127131: a4 = a4 >> 0x20\n127134: a0 = a3 | s1\n127137: a0 = a0 | a4\n127140: a4 = reverse a5\n127142: a4 = 0 if a0 == 0\n127144: a2 = 0 if a0 == 0\n127146: s1 = 0 if a0 == 0\n127148: a3 = 0 if a0 == 0\n127150: a5 = a0 <u 0x1\n127153: a0 = u64 [sp + 0x10]\n127156: fallthrough\n      : @1494 (gas: 18)\n127157: u64 [a0 + 0x40] = a1\n127160: u64 [a0 + 0x20] = a5\n127163: u64 [a0] = a3\n127165: u64 [a0 + 0x48] = t2\n127168: u64 [a0 + 40] = 0\n127171: u64 [a0 + 0x8] = s1\n127174: u64 [a0 + 0x50] = t0\n127177: u64 [a0 + 48] = 0\n127180: u64 [a0 + 0x10] = a2\n127183: u64 [a0 + 0x58] = t1\n127186: u64 [a0 + 56] = 0\n127189: u64 [a0 + 0x18] = a4\n127192: sp = s0 + 0xfffffffffffffec0\n127196: ra = u64 [sp + 0x138]\n127200: s0 = u64 [sp + 0x130]\n127204: s1 = u64 [sp + 0x128]\n127208: sp = sp + 0x140\n127212: ret\n      : @1495 (gas: 1)\n127214: trap\n      : @1496 (gas: 11)\n127215: ra = 0x572\n127219: sp = sp + 0xffffffffffffffc0\n127222: u64 [sp + 0x38] = ra\n127225: u64 [sp + 0x30] = s0\n127228: u64 [sp + 0x28] = s1\n127231: s0 = sp + 0x40\n127234: sp = sp & 0xffffffffffffffe0\n127237: a0 = 0x40\n127240: a1 = 0x20\n127243: ra = 0x558\n127247: jump @0\n      : @1497 [@dyn 697] [export #0: 'call'] (gas: 2)\n127251: a0 = 0\n127253: ra = 1396, jump @25\n      : @1498 [@dyn 698] [export #1: 'deploy'] (gas: 2)\n127260: a0 = 0x1\n127263: ra = 1398, jump @25\n      : @1499 [@dyn 699] (gas: 27)\n127270: sp = sp + 0xffffffffffffff60\n127274: u64 [sp + 0x98] = ra\n127278: u64 [sp + 0x90] = s0\n127282: u64 [sp + 0x88] = s1\n127286: s0 = sp + 0xa0\n127290: sp = sp & 0xfffffffffffffff0\n127293: t0 = u64 [a1]\n127295: t1 = u64 [a1 + 0x8]\n127298: t2 = u64 [a1 + 0x10]\n127301: a1 = u64 [a1 + 0x18]\n127304: a3 = u64 [a2]\n127306: a4 = u64 [a2 + 0x8]\n127309: a5 = u64 [a2 + 0x10]\n127312: a2 = u64 [a2 + 0x18]\n127315: s1 = a0\n127317: u64 [sp + 0x18] = a2\n127320: u64 [sp + 0x10] = a5\n127323: u64 [sp + 0x8] = a4\n127326: u64 [sp] = a3\n127328: u64 [sp + 0x38] = a1\n127331: u64 [sp + 0x30] = t2\n127334: u64 [sp + 0x28] = t1\n127337: a0 = sp + 0x40\n127340: a1 = sp + 0x20\n127343: a2 = sp\n127345: u64 [sp + 0x20] = t0\n127348: ra = 1400, jump @174\n      : @1500 [@dyn 700] (gas: 22)\n127355: t0 = u64 [sp + 0x48]\n127358: t1 = u64 [sp + 0x40]\n127361: a2 = u64 [sp + 0x58]\n127364: a3 = u64 [sp + 0x50]\n127367: a4 = u64 [sp + 0x70]\n127370: a5 = u64 [sp + 0x78]\n127373: a0 = u64 [sp + 0x60]\n127376: a1 = u64 [sp + 0x68]\n127379: u64 [s1 + 0x30] = a4\n127382: u64 [s1 + 0x38] = a5\n127385: u64 [s1 + 0x20] = a0\n127388: u64 [s1 + 0x28] = a1\n127391: u64 [s1 + 0x10] = a3\n127394: u64 [s1 + 0x18] = a2\n127397: u64 [s1] = t1\n127399: u64 [s1 + 0x8] = t0\n127402: sp = s0 + 0xffffffffffffff60\n127406: ra = u64 [sp + 0x98]\n127410: s0 = u64 [sp + 0x90]\n127414: s1 = u64 [sp + 0x88]\n127418: sp = sp + 0xa0\n127422: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"buyService(bytes32)": "a2d39038",
							"claimDigest(bytes32,uint256,bytes32)": "928c48fa",
							"claimPayment(bytes32,uint256,bytes32,bytes)": "11e5dd4f",
							"createService(string,uint256,string,string)": "912172fb",
							"listServices()": "de1c5488",
							"nextPurchaseIds(bytes32)": "e8795282",
							"purchases(bytes32,uint256)": "37e5f34b",
							"raiseDispute(bytes32,uint256)": "98238491",
							"resolveDispute(bytes32,uint256,bool)": "faf0bbbf",
							"serviceIds(uint256)": "69d26933",
							"services(bytes32)": "0a790eb7",
							"stakes(bytes32)": "8fee6407",
							"topUpStake(bytes32)": "eaa3668f",
							"updateService(bytes32,string,string)": "7214800f",
							"withdrawStake(bytes32,uint256)": "19dc5716"
						}
					},
					"irOptimized": "/// @use-src 0:\"EscroDotLite.sol\"\nobject \"EscroDot_1157\" {\n    code {\n        {\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            mstore(64, memoryguard(0x80))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            constructor_EscroDot()\n            let _1 := allocate_unbounded()\n            codecopy(_1, dataoffset(\"EscroDot_1157_deployed\"), datasize(\"EscroDot_1157_deployed\"))\n            return(_1, datasize(\"EscroDot_1157_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_rational_by(value) -> cleaned\n        { cleaned := value }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_rational_by_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_rational_by_to_uint256(slot, value)\n        {\n            let convertedValue := convert_rational_by_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        function constructor_EscroDot()\n        {\n            /// @src 0:10888:10889  \"1\"\n            let expr := 0x01\n            update_storage_value_offset_rational_by_to_uint256(0x05, expr)\n        }\n    }\n    /// @use-src 0:\"EscroDotLite.sol\"\n    object \"EscroDot_1157_deployed\" {\n        code {\n            {\n                /// @src 0:8084:17942  \"contract EscroDot {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_224_unsigned(calldataload(0))\n                    switch selector\n                    case 0x0a790eb7 { external_fun_services() }\n                    case 0x11e5dd4f { external_fun_claimPayment() }\n                    case 0x19dc5716 { external_fun_withdrawStake() }\n                    case 0x37e5f34b { external_fun_purchases() }\n                    case 0x69d26933 { external_fun_serviceIds() }\n                    case 0x7214800f { external_fun_updateService() }\n                    case 0x8fee6407 { external_fun_stakes() }\n                    case 0x912172fb { external_fun_createService() }\n                    case 0x928c48fa { external_fun_claimDigest() }\n                    case 0x98238491 { external_fun_raiseDispute() }\n                    case 0xa2d39038 { external_fun_buyService() }\n                    case 0xde1c5488 { external_fun_listServices() }\n                    case 0xe8795282 {\n                        external_fun_nextPurchaseIds()\n                    }\n                    case 0xeaa3668f { external_fun_topUpStake() }\n                    case 0xfaf0bbbf { external_fun_resolveDispute() }\n                    default { }\n                }\n                if iszero(calldatasize()) { stop() }\n                revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            }\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function cleanup_bytes32(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_bytes32(value)\n            {\n                if iszero(eq(value, cleanup_bytes32(value))) { revert(0, 0) }\n            }\n            function abi_decode_t_bytes32(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bytes32(value)\n            }\n            function abi_decode_bytes32(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n            }\n            function convert_bytes32_to_bytes32(value) -> converted\n            {\n                converted := cleanup_bytes32(value)\n            }\n            function mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(slot, key) -> dataSlot\n            {\n                mstore(0, convert_bytes32_to_bytes32(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_string_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_string_storage(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_string(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_string_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_string_storage(value0, pos)\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_string_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            /// @ast-id 356 @src 0:8431:8474  \"mapping(bytes32 => Service) public services\"\n            function getter_fun_services(key) -> ret, ret_1, ret_mpos, ret_3_mpos\n            {\n                let slot := 0\n                slot := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_mpos := copy_array_from_storage_to_memory_string(add(slot, 2))\n                ret_3_mpos := copy_array_from_storage_to_memory_string(add(slot, 3))\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function array_length_string(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_string_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                mcopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := array_length_string(value)\n                pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_address_uint256_string_string(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                mstore(add(headStart, 64), sub(tail, headStart))\n                tail := abi_encode_string(value2, tail)\n                mstore(add(headStart, 96), sub(tail, headStart))\n                tail := abi_encode_string(value3, tail)\n            }\n            function external_fun_services()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_bytes32(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3 := getter_fun_services(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_string_string(memPos, ret, ret_1, ret_2, ret_3)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n            { revert(0, 0) }\n            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            { revert(0, 0) }\n            function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff)\n                {\n                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                }\n                arrayPos := add(offset, 0x20)\n                if gt(add(arrayPos, mul(length, 0x01)), end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n            }\n            function abi_decode_bytes32t_uint256t_bytes32t_bytes_calldata(headStart, dataEnd) -> value0, value1, value2, value3, value4\n            {\n                if slt(sub(dataEnd, headStart), 128)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_t_bytes32(add(headStart, offset_2), dataEnd)\n                let offset_3 := calldataload(add(headStart, 96))\n                if gt(offset_3, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value3, value4 := abi_decode_bytes_calldata(add(headStart, offset_3), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_claimPayment()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3, param_4 := abi_decode_bytes32t_uint256t_bytes32t_bytes_calldata(4, calldatasize())\n                fun_claimPayment(param, param_1, param_2, param_3, param_4)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_withdrawStake()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_bytes32t_uint256(4, calldatasize())\n                fun_withdrawStake(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function mapping_index_access_mapping_bytes32_mapping_uint256_struct_Purchase_storage_of_bytes32(slot, key) -> dataSlot\n            {\n                mstore(0, convert_bytes32_to_bytes32(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_0_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_0_bool(sload(slot))\n            }\n            function shift_right_8_unsigned(value) -> newValue\n            { newValue := shr(8, value) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_8_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(16, value) }\n            function extract_from_storage_value_offset_t_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_2_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_bool(sload(slot))\n            }\n            /// @ast-id 373 @src 0:8747:8812  \"mapping(bytes32 => mapping(uint256 => Purchase)) public purchases\"\n            function getter_fun_purchases(key, key_1) -> ret, ret_1, ret_2, ret_3, ret_4\n            {\n                let slot := 3\n                slot := mapping_index_access_mapping_bytes32_mapping_uint256_struct_Purchase_storage_of_bytes32(slot, key)\n                slot := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key_1)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_t_bool(add(slot, 2))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 2))\n                ret_4 := read_from_storage_split_offset_2_bool(add(slot, 2))\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_uint256_bool_bool_bool(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                tail := add(headStart, 160)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_bool_to_bool(value2, add(headStart, 64))\n                abi_encode_bool_to_bool(value3, add(headStart, 96))\n                abi_encode_bool_to_bool(value4, add(headStart, 128))\n            }\n            function external_fun_purchases()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_bytes32t_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3, ret_4 := getter_fun_purchases(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_bool_bool_bool(memPos, ret, ret_1, ret_2, ret_3, ret_4)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function panic_error_0x32()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x32)\n                revert(0, 0x24)\n            }\n            function array_length_array_bytes32_dyn_storage(value) -> length\n            { length := sload(value) }\n            function array_dataslot_array_bytes32_dyn_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function storage_array_index_access_bytes32_dyn(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_bytes32_dyn_storage(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_bytes32_dyn_storage(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_bytes32(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_bytes32(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_bytes32(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_bytes32(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_bytes32(sload(slot), offset)\n            }\n            /// @ast-id 360 @src 0:8549:8576  \"bytes32[] public serviceIds\"\n            function getter_fun_serviceIds(key) -> ret\n            {\n                let slot := 1\n                let offset := 0\n                if iszero(lt(key, array_length_array_bytes32_dyn_storage(slot))) { revert(0, 0) }\n                slot, offset := storage_array_index_access_bytes32_dyn(slot, key)\n                ret := read_from_storage_split_dynamic_bytes32(slot, offset)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function abi_encode_bytes32_to_bytes32(value, pos)\n            {\n                mstore(pos, cleanup_bytes32(value))\n            }\n            function abi_encode_tuple_bytes32(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n            }\n            function external_fun_serviceIds()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := getter_fun_serviceIds(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_bytes32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_string_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff)\n                {\n                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                }\n                arrayPos := add(offset, 0x20)\n                if gt(add(arrayPos, mul(length, 0x01)), end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n            }\n            function abi_decode_bytes32t_string_calldatat_string_calldata(headStart, dataEnd) -> value0, value1, value2, value3, value4\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n                let offset_1 := calldataload(add(headStart, 32))\n                if gt(offset_1, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value1, value2 := abi_decode_string_calldata(add(headStart, offset_1), dataEnd)\n                let offset_2 := calldataload(add(headStart, 64))\n                if gt(offset_2, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value3, value4 := abi_decode_string_calldata(add(headStart, offset_2), dataEnd)\n            }\n            function external_fun_updateService()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2, param_3, param_4 := abi_decode_bytes32t_string_calldatat_string_calldata(4, calldatasize())\n                fun_updateService(param, param_1, param_2, param_3, param_4)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function mapping_index_access_mapping_bytes32_uint256_of_bytes32(slot, key) -> dataSlot\n            {\n                mstore(0, convert_bytes32_to_bytes32(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 365 @src 0:8640:8681  \"mapping(bytes32 => uint256) public stakes\"\n            function getter_fun_stakes(key) -> ret\n            {\n                let slot := 2\n                let offset := 0\n                slot := mapping_index_access_mapping_bytes32_uint256_of_bytes32(slot, key)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_stakes()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_bytes32(4, calldatasize())\n                let ret := getter_fun_stakes(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_string_calldatat_uint256t_string_calldatat_string_calldata(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n            {\n                if slt(sub(dataEnd, headStart), 128)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := calldataload(add(headStart, 0))\n                if gt(offset, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value0, value1 := abi_decode_string_calldata(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value2 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := calldataload(add(headStart, 64))\n                if gt(offset_2, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value3, value4 := abi_decode_string_calldata(add(headStart, offset_2), dataEnd)\n                let offset_3 := calldataload(add(headStart, 96))\n                if gt(offset_3, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value5, value6 := abi_decode_string_calldata(add(headStart, offset_3), dataEnd)\n            }\n            function external_fun_createService()\n            {\n                let param, param_1, param_2, param_3, param_4, param_5, param_6 := abi_decode_string_calldatat_uint256t_string_calldatat_string_calldata(4, calldatasize())\n                let ret := fun_createService(param, param_1, param_2, param_3, param_4, param_5, param_6)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_bytes32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_bytes32t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_t_bytes32(add(headStart, offset_2), dataEnd)\n            }\n            function external_fun_claimDigest()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_bytes32t_uint256t_bytes32(4, calldatasize())\n                let ret := fun_claimDigest(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_bytes32(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_raiseDispute()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_bytes32t_uint256(4, calldatasize())\n                fun_raiseDispute(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_buyService()\n            {\n                let param := abi_decode_bytes32(4, calldatasize())\n                let ret := fun_buyService(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            function array_length_array_bytes32_dyn(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_array_bytes32_dyn_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_array_bytes32_dyn(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function abi_encode_bytes32(value, pos)\n            {\n                mstore(pos, cleanup_bytes32(value))\n            }\n            function abi_encodeUpdatedPos_bytes32(value0, pos) -> updatedPos\n            {\n                abi_encode_bytes32(value0, pos)\n                updatedPos := add(pos, 0x20)\n            }\n            function array_nextElement_array_bytes32_dyn(ptr) -> next\n            { next := add(ptr, 0x20) }\n            function abi_encode_array_bytes32_dyn_memory_ptr(value, pos) -> end\n            {\n                let length := array_length_array_bytes32_dyn(value)\n                pos := array_storeLengthForEncoding_array_bytes32_dyn_fromStack(pos, length)\n                let baseRef := array_dataslot_array_bytes32_dyn(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := mload(srcPtr)\n                    pos := abi_encodeUpdatedPos_bytes32(elementValue0, pos)\n                    srcPtr := array_nextElement_array_bytes32_dyn(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encode_array_bytes32_dyn(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_array_bytes32_dyn_memory_ptr(value0, tail)\n            }\n            function external_fun_listServices()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := fun_listServices()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_array_bytes32_dyn(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 378 @src 0:8871:8921  \"mapping(bytes32 => uint256) public nextPurchaseIds\"\n            function getter_fun_nextPurchaseIds(key) -> ret\n            {\n                let slot := 4\n                let offset := 0\n                slot := mapping_index_access_mapping_bytes32_uint256_of_bytes32(slot, key)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function external_fun_nextPurchaseIds()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_bytes32(4, calldatasize())\n                let ret := getter_fun_nextPurchaseIds(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_topUpStake()\n            {\n                let param := abi_decode_bytes32(4, calldatasize())\n                fun_topUpStake(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_bool(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_bytes32t_uint256t_bool(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_t_bytes32(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_bool(add(headStart, offset_2), dataEnd)\n            }\n            function external_fun_resolveDispute()\n            {\n                let param, param_1, param_2 := abi_decode_bytes32t_uint256t_bool(4, calldatasize())\n                fun_resolveDispute(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_d228b4ceac16d8e91d6dc7ca8d4a5394f524b2e550555324088cb23b86b87b98()\n            { revert(0, 0) }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_1_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function store_literal_in_memory_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: reentrant call\")\n            }\n            function abi_encode_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 22)\n                store_literal_in_memory_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_2e89(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3(tail)\n            }\n            function require_helper_stringliteral_2e89(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_2e89(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_rational_2_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_2_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_2_by(value)))\n            }\n            function shift_left_0(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @ast-id 512 @src 0:10895:11036  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant_745(var_serviceId, var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_742_length)\n            {\n                /// @src 0:10937:10944  \"_locked\"\n                let _1 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _1\n                /// @src 0:10948:10949  \"1\"\n                let expr_1 := 0x01\n                /// @src 0:10937:10949  \"_locked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                /// @src 0:10929:10976  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                require_helper_stringliteral_2e89(expr_2)\n                /// @src 0:10996:10997  \"2\"\n                let expr_3 := 0x02\n                /// @src 0:10986:10997  \"_locked = 2\"\n                let _2 := convert_rational_2_by_1_to_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x05, _2)\n                /// @src 0:11007:11008  \"_\"\n                modifier_onlyProvider_748(var_serviceId, var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_742_length)\n                /// @src 0:11028:11029  \"1\"\n                let expr_4 := 0x01\n                /// @src 0:11018:11029  \"_locked = 1\"\n                let _3 := convert_rational_1_by_1_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x05, _3)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function store_literal_in_memory_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: caller is not the provid\")\n                mstore(add(memPtr, 32), \"er\")\n            }\n            function abi_encode_stringliteral_4b50(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 34)\n                store_literal_in_memory_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_tuple_stringliteral_4b50(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_4b50(tail)\n            }\n            function require_helper_stringliteral_4b50(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_4b50(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 490 @src 0:10698:10856  \"modifier onlyProvider(bytes32 serviceId) {...\"\n            function modifier_onlyProvider_748(var_serviceId, var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            {\n                /// @src 0:13843:13852  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                let _2 := expr\n                let var_serviceId_1 := _2\n                /// @src 0:10757:10767  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:10771:10779  \"services\"\n                let _6_slot := 0x00\n                let expr_480_slot := _6_slot\n                /// @src 0:10780:10789  \"serviceId\"\n                let _3 := var_serviceId_1\n                let expr_2 := _3\n                /// @src 0:10771:10790  \"services[serviceId]\"\n                let _4 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_480_slot, expr_2)\n                let _9_slot := _4\n                let expr_482_slot := _9_slot\n                /// @src 0:10771:10799  \"services[serviceId].provider\"\n                let _5 := add(expr_482_slot, 0)\n                let _6 := read_from_storage_split_offset_address(_5)\n                let expr_3 := _6\n                /// @src 0:10757:10799  \"msg.sender == services[serviceId].provider\"\n                let expr_4 := eq(cleanup_address(expr_1), cleanup_address(expr_3))\n                /// @src 0:10749:10838  \"require(msg.sender == services[serviceId].provider, \\\"Escrow: caller is not the provider\\\")\"\n                require_helper_stringliteral_4b50(expr_4)\n                /// @src 0:10848:10849  \"_\"\n                fun_claimPayment_inner(var_serviceId, var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function convert_struct_Purchase_storage_to_struct_Purchase_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: payment already claimed\")\n            }\n            function abi_encode_stringliteral_9796(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                store_literal_in_memory_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_9796(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: purchase is in dispute\")\n            }\n            function abi_encode_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 30)\n                store_literal_in_memory_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_14a8(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074(tail)\n            }\n            function require_helper_stringliteral_14a8(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_14a8(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_bytes(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_bytes(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function convert_array_bytes_calldata_to_bytes(value, length) -> converted\n            {\n                converted := abi_decode_available_length_bytes(value, length, calldatasize())\n            }\n            function store_literal_in_memory_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(memPtr)\n            {\n                mstore(add(memPtr, 0), \"SignatureVerifier: Invalid signa\")\n                mstore(add(memPtr, 32), \"ture\")\n            }\n            function abi_encode_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 36)\n                store_literal_in_memory_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_6f31(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496(tail)\n            }\n            function require_helper_stringliteral_6f31(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_6f31(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address_payable(value) -> converted\n            {\n                converted := convert_uint160_to_address_payable(value)\n            }\n            /// @src 0:13653:14496  \"function claimPayment(...\"\n            function fun_claimPayment_inner(var_serviceId, var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            {\n                /// @src 0:13892:13901  \"purchases\"\n                let _slot := 0x03\n                let expr_753_slot := _slot\n                /// @src 0:13902:13911  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 0:13892:13912  \"purchases[serviceId]\"\n                let _2 := mapping_index_access_mapping_bytes32_mapping_uint256_struct_Purchase_storage_of_bytes32(expr_753_slot, expr)\n                let _15_slot := _2\n                let expr_755_slot := _15_slot\n                /// @src 0:13913:13923  \"purchaseId\"\n                let _3 := var_purchaseId\n                let expr_1 := _3\n                /// @src 0:13892:13924  \"purchases[serviceId][purchaseId]\"\n                let _4 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_755_slot, expr_1)\n                let _18_slot := _4\n                let expr_757_slot := _18_slot\n                /// @src 0:13864:13924  \"Purchase storage purchase = purchases[serviceId][purchaseId]\"\n                let var_purchase_752_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_757_slot)\n                /// @src 0:13944:13952  \"purchase\"\n                let _19_slot := var_purchase_752_slot\n                let expr_760_slot := _19_slot\n                /// @src 0:13944:13960  \"purchase.claimed\"\n                let _5 := add(expr_760_slot, 2)\n                let _6 := read_from_storage_split_offset_t_bool(_5)\n                let expr_2 := _6\n                /// @src 0:13943:13960  \"!purchase.claimed\"\n                let expr_3 := cleanup_bool(iszero(expr_2))\n                /// @src 0:13935:13996  \"require(!purchase.claimed, \\\"Escrow: payment already claimed\\\")\"\n                require_helper_stringliteral(expr_3)\n                /// @src 0:14015:14023  \"purchase\"\n                let _22_slot := var_purchase_752_slot\n                let expr_767_slot := _22_slot\n                /// @src 0:14015:14032  \"purchase.disputed\"\n                let _7 := add(expr_767_slot, 2)\n                let _8 := read_from_storage_split_offset_bool(_7)\n                let expr_4 := _8\n                /// @src 0:14014:14032  \"!purchase.disputed\"\n                let expr_5 := cleanup_bool(iszero(expr_4))\n                /// @src 0:14006:14067  \"require(!purchase.disputed, \\\"Escrow: purchase is in dispute\\\")\"\n                require_helper_stringliteral_14a8(expr_5)\n                /// @src 0:14142:14151  \"serviceId\"\n                let _9 := var_serviceId\n                let expr_6 := _9\n                /// @src 0:14153:14163  \"purchaseId\"\n                let _10 := var_purchaseId\n                let expr_7 := _10\n                /// @src 0:14165:14180  \"deliverableHash\"\n                let _11 := var_deliverableHash\n                let expr_8 := _11\n                /// @src 0:14129:14181  \"_claimDigest(serviceId, purchaseId, deliverableHash)\"\n                let expr_9 := fun__claimDigest(expr_6, expr_7, expr_8)\n                /// @src 0:14112:14181  \"bytes32 digest = _claimDigest(serviceId, purchaseId, deliverableHash)\"\n                let var_digest := expr_9\n                /// @src 0:14222:14228  \"digest\"\n                let _12 := var_digest\n                let expr_10 := _12\n                /// @src 0:14230:14244  \"buyerSignature\"\n                let _29_offset := var_buyerSignature_offset\n                let _29_length := var_buyerSignature_length\n                let expr_786_offset := _29_offset\n                let expr_786_length := _29_length\n                /// @src 0:14208:14245  \"ECDSA.recover(digest, buyerSignature)\"\n                let _30_mpos := convert_array_bytes_calldata_to_bytes(expr_786_offset, expr_786_length)\n                let expr_11 := fun_recover(expr_10, _30_mpos)\n                /// @src 0:14191:14245  \"address signer = ECDSA.recover(digest, buyerSignature)\"\n                let var_signer := expr_11\n                /// @src 0:14263:14269  \"signer\"\n                let _13 := var_signer\n                let expr_12 := _13\n                /// @src 0:14273:14281  \"purchase\"\n                let _32_slot := var_purchase_752_slot\n                let expr_791_slot := _32_slot\n                /// @src 0:14273:14287  \"purchase.buyer\"\n                let _14 := add(expr_791_slot, 0)\n                let _15 := read_from_storage_split_offset_address(_14)\n                let expr_13 := _15\n                /// @src 0:14263:14287  \"signer == purchase.buyer\"\n                let expr_14 := eq(cleanup_address(expr_12), cleanup_address(expr_13))\n                /// @src 0:14255:14328  \"require(signer == purchase.buyer, \\\"SignatureVerifier: Invalid signature\\\")\"\n                require_helper_stringliteral_6f31(expr_14)\n                /// @src 0:14358:14362  \"true\"\n                let expr_15 := 0x01\n                /// @src 0:14339:14347  \"purchase\"\n                let _35_slot := var_purchase_752_slot\n                let expr_797_slot := _35_slot\n                /// @src 0:14339:14355  \"purchase.claimed\"\n                let _16 := add(expr_797_slot, 2)\n                /// @src 0:14339:14362  \"purchase.claimed = true\"\n                update_storage_value_offset_bool_to_bool(_16, expr_15)\n                /// @src 0:14389:14397  \"services\"\n                let _37_slot := 0x00\n                let expr_806_slot := _37_slot\n                /// @src 0:14398:14407  \"serviceId\"\n                let _17 := var_serviceId\n                let expr_16 := _17\n                /// @src 0:14389:14408  \"services[serviceId]\"\n                let _18 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_806_slot, expr_16)\n                let _40_slot := _18\n                let expr_808_slot := _40_slot\n                /// @src 0:14389:14417  \"services[serviceId].provider\"\n                let _19 := add(expr_808_slot, 0)\n                let _20 := read_from_storage_split_offset_address(_19)\n                let expr_17 := _20\n                /// @src 0:14381:14418  \"payable(services[serviceId].provider)\"\n                let expr_18 := convert_address_to_address_payable(expr_17)\n                /// @src 0:14420:14428  \"purchase\"\n                let _43_slot := var_purchase_752_slot\n                let expr_811_slot := _43_slot\n                /// @src 0:14420:14435  \"purchase.amount\"\n                let _21 := add(expr_811_slot, 1)\n                let _22 := read_from_storage_split_offset_uint256(_21)\n                let expr_19 := _22\n                fun_sendETH(expr_18, expr_19)\n                /// @src 0:14467:14476  \"serviceId\"\n                let _23 := var_serviceId\n                let expr_20 := _23\n                /// @src 0:14478:14488  \"purchaseId\"\n                let _24 := var_purchaseId\n                let expr_21 := _24\n                /// @src 0:14452:14489  \"PaymentClaimed(serviceId, purchaseId)\"\n                let _25 := 0xa4866d22926279c02afd306c9a2cfcb4cda3611585d882e7f8297946eaa0d85b\n                let _26 := convert_bytes32_to_bytes32(expr_20)\n                let _27 := convert_uint256_to_uint256(expr_21)\n                let _28 := allocate_unbounded()\n                let _29 := abi_encode_tuple(_28)\n                log3(_28, sub(_29, _28), _25, _26, _27)\n            }\n            /// @ast-id 821 @src 0:13653:14496  \"function claimPayment(...\"\n            function fun_claimPayment(var_serviceId, var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            {\n                modifier_nonReentrant_745(var_serviceId, var_purchaseId, var_deliverableHash, var_buyerSignature_offset, var_buyerSignature_length)\n            }\n            /// @ast-id 490 @src 0:10698:10856  \"modifier onlyProvider(bytes32 serviceId) {...\"\n            function modifier_onlyProvider_1037(var_serviceId, var_amount)\n            {\n                /// @src 0:16633:16642  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                let _2 := expr\n                let var_serviceId_1 := _2\n                /// @src 0:10757:10767  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:10771:10779  \"services\"\n                let _55_slot := 0x00\n                let expr_slot := _55_slot\n                /// @src 0:10780:10789  \"serviceId\"\n                let _3 := var_serviceId_1\n                let expr_2 := _3\n                /// @src 0:10771:10790  \"services[serviceId]\"\n                let _4 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_slot, expr_2)\n                let _58_slot := _4\n                let expr_slot_1 := _58_slot\n                /// @src 0:10771:10799  \"services[serviceId].provider\"\n                let _5 := add(expr_slot_1, 0)\n                let _6 := read_from_storage_split_offset_address(_5)\n                let expr_3 := _6\n                /// @src 0:10757:10799  \"msg.sender == services[serviceId].provider\"\n                let expr_4 := eq(cleanup_address(expr_1), cleanup_address(expr_3))\n                /// @src 0:10749:10838  \"require(msg.sender == services[serviceId].provider, \\\"Escrow: caller is not the provider\\\")\"\n                require_helper_stringliteral_4b50(expr_4)\n                /// @src 0:10848:10849  \"_\"\n                fun_withdrawStake_inner(var_serviceId, var_amount)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function store_literal_in_memory_000e36f459ccbf0927d2d329a8004e1e627f49a8095ffb0d2a77bf6c728b2aec(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: insufficient stake balan\")\n                mstore(add(memPtr, 32), \"ce\")\n            }\n            function abi_encode_stringliteral_000e36f459ccbf0927d2d329a8004e1e627f49a8095ffb0d2a77bf6c728b2aec(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 34)\n                store_literal_in_memory_000e36f459ccbf0927d2d329a8004e1e627f49a8095ffb0d2a77bf6c728b2aec(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_000e(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_000e36f459ccbf0927d2d329a8004e1e627f49a8095ffb0d2a77bf6c728b2aec(tail)\n            }\n            function require_helper_stringliteral_000e(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_000e(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function abi_encode_uint256_uint256(headStart, value0, value1) -> tail\n            {\n                tail := add(headStart, 64)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n            }\n            /// @src 0:16553:16886  \"function withdrawStake(bytes32 serviceId, uint256 amount) external onlyProvider(serviceId) {...\"\n            function fun_withdrawStake_inner(var_serviceId, var_amount)\n            {\n                /// @src 0:16662:16668  \"amount\"\n                let _1 := var_amount\n                let expr := _1\n                /// @src 0:16672:16678  \"stakes\"\n                let _62_slot := 0x02\n                let expr_1041_slot := _62_slot\n                /// @src 0:16679:16688  \"serviceId\"\n                let _2 := var_serviceId\n                let expr_1 := _2\n                /// @src 0:16672:16689  \"stakes[serviceId]\"\n                let _3 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1041_slot, expr_1)\n                let _4 := read_from_storage_split_offset_uint256(_3)\n                let expr_2 := _4\n                /// @src 0:16662:16689  \"amount <= stakes[serviceId]\"\n                let expr_3 := iszero(gt(cleanup_uint256(expr), cleanup_uint256(expr_2)))\n                /// @src 0:16654:16728  \"require(amount <= stakes[serviceId], \\\"Escrow: insufficient stake balance\\\")\"\n                require_helper_stringliteral_000e(expr_3)\n                /// @src 0:16759:16765  \"amount\"\n                let _5 := var_amount\n                let expr_4 := _5\n                /// @src 0:16738:16744  \"stakes\"\n                let _67_slot := 0x02\n                let expr_1048_slot := _67_slot\n                /// @src 0:16745:16754  \"serviceId\"\n                let _6 := var_serviceId\n                let expr_5 := _6\n                /// @src 0:16738:16755  \"stakes[serviceId]\"\n                let _7 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1048_slot, expr_5)\n                /// @src 0:16738:16765  \"stakes[serviceId] -= amount\"\n                let _8 := read_from_storage_split_offset_uint256(_7)\n                let expr_6 := checked_sub_uint256(_8, expr_4)\n                update_storage_value_offset_uint256_to_uint256(_7, expr_6)\n                /// @src 0:16792:16802  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:16784:16803  \"payable(msg.sender)\"\n                let expr_8 := convert_address_to_address_payable(expr_7)\n                /// @src 0:16805:16811  \"amount\"\n                let _9 := var_amount\n                let expr_9 := _9\n                fun_sendETH(expr_8, expr_9)\n                /// @src 0:16842:16851  \"serviceId\"\n                let _10 := var_serviceId\n                let expr_10 := _10\n                /// @src 0:16853:16859  \"amount\"\n                let _11 := var_amount\n                let expr_11 := _11\n                /// @src 0:16861:16867  \"stakes\"\n                let _74_slot := 0x02\n                let expr_1066_slot := _74_slot\n                /// @src 0:16868:16877  \"serviceId\"\n                let _12 := var_serviceId\n                let expr_12 := _12\n                /// @src 0:16861:16878  \"stakes[serviceId]\"\n                let _13 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1066_slot, expr_12)\n                let _14 := read_from_storage_split_offset_uint256(_13)\n                let expr_13 := _14\n                /// @src 0:16827:16879  \"StakeWithdrawn(serviceId, amount, stakes[serviceId])\"\n                let _15 := 0x64b42729c893e3b5f300276ef3057e004bd614dfc15219a30a3b069ec4386933\n                let _16 := convert_bytes32_to_bytes32(expr_10)\n                let _17 := allocate_unbounded()\n                let _18 := abi_encode_uint256_uint256(_17, expr_11, expr_13)\n                log2(_17, sub(_18, _17), _15, _16)\n            }\n            /// @ast-id 1072 @src 0:16553:16886  \"function withdrawStake(bytes32 serviceId, uint256 amount) external onlyProvider(serviceId) {...\"\n            function fun_withdrawStake(var_serviceId, var_amount)\n            {\n                modifier_onlyProvider_1037(var_serviceId, var_amount)\n            }\n            /// @ast-id 490 @src 0:10698:10856  \"modifier onlyProvider(bytes32 serviceId) {...\"\n            function modifier_onlyProvider_624(var_serviceId, var_description_618_offset, var_description_length, var_gateway_620_offset, var_gateway_length)\n            {\n                /// @src 0:12496:12505  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                let _2 := expr\n                let var_serviceId_1 := _2\n                /// @src 0:10757:10767  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:10771:10779  \"services\"\n                let _84_slot := 0x00\n                let expr_slot := _84_slot\n                /// @src 0:10780:10789  \"serviceId\"\n                let _3 := var_serviceId_1\n                let expr_2 := _3\n                /// @src 0:10771:10790  \"services[serviceId]\"\n                let _4 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_slot, expr_2)\n                let _87_slot := _4\n                let expr_slot_1 := _87_slot\n                /// @src 0:10771:10799  \"services[serviceId].provider\"\n                let _5 := add(expr_slot_1, 0)\n                let _6 := read_from_storage_split_offset_address(_5)\n                let expr_3 := _6\n                /// @src 0:10757:10799  \"msg.sender == services[serviceId].provider\"\n                let expr_4 := eq(cleanup_address(expr_1), cleanup_address(expr_3))\n                /// @src 0:10749:10838  \"require(msg.sender == services[serviceId].provider, \\\"Escrow: caller is not the provider\\\")\"\n                require_helper_stringliteral_4b50(expr_4)\n                /// @src 0:10848:10849  \"_\"\n                fun_updateService_inner(var_serviceId, var_description_618_offset, var_description_length, var_gateway_620_offset, var_gateway_length)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function convert_array_string_calldata_to_bytes_calldata(value, length) -> converted, outLength\n            {\n                converted := value\n                outLength := length\n            }\n            function array_length_bytes_calldata(value, len) -> length\n            { length := len }\n            function cleanup_t_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_0_by_1_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by_1(value)))\n            }\n            function store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: gateway cannot be empty\")\n            }\n            function abi_encode_stringliteral_795f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                store_literal_in_memory_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_795f(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_795f(tail)\n            }\n            function require_helper_stringliteral_795f(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_795f(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_struct_Service_storage_to_struct_Service_ptr(value) -> converted\n            { converted := value }\n            function array_length_string_calldata(value, len) -> length\n            { length := len }\n            function divide_by_ceil(value) -> result\n            {\n                result := div(add(value, 31), 32)\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function storage_set_to_zero_uint256(slot, offset)\n            {\n                let zero := zero_value_for_split_uint256()\n                update_storage_value_uint256_to_uint256(slot, offset, zero)\n            }\n            function clear_storage_range_bytes1(start, end)\n            {\n                for { } lt(start, end) { start := add(start, 1) }\n                {\n                    storage_set_to_zero_uint256(start, 0)\n                }\n            }\n            function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_string_storage(array)\n                    let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                }\n            }\n            function mask_bytes_dynamic(data, bytes) -> result\n            {\n                let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                result := and(data, mask)\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                data := mask_bytes_dynamic(data, len)\n                used := or(data, mul(2, len))\n            }\n            function copy_byte_array_to_storage_from_string_calldata_to_string(slot, src, len)\n            {\n                let newLen := array_length_string_calldata(src, len)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_string_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, calldataload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := calldataload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := calldataload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_offset_string_calldata_to_string(slot, value, value_1)\n            {\n                copy_byte_array_to_storage_from_string_calldata_to_string(slot, value, value_1)\n            }\n            function abi_encode_string_calldata(start, length, pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                copy_calldata_to_memory_with_cleanup(start, pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_string_calldata_string_calldata(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_string_calldata(value0, value1, tail)\n                mstore(add(headStart, 32), sub(tail, headStart))\n                tail := abi_encode_string_calldata(value2, value3, tail)\n            }\n            /// @src 0:12348:12790  \"function updateService(...\"\n            function fun_updateService_inner(var_serviceId, var_description_offset, var_description_length, var_gateway_offset, var_gateway_length)\n            {\n                /// @src 0:12531:12538  \"gateway\"\n                let _90_offset := var_gateway_offset\n                let _90_length := var_gateway_length\n                let expr_629_offset := _90_offset\n                let expr_629_length := _90_length\n                /// @src 0:12525:12539  \"bytes(gateway)\"\n                let expr_630_offset, expr_630_length := convert_array_string_calldata_to_bytes_calldata(expr_629_offset, expr_629_length)\n                /// @src 0:12525:12546  \"bytes(gateway).length\"\n                let expr := array_length_bytes_calldata(expr_630_offset, expr_630_length)\n                /// @src 0:12549:12550  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:12525:12550  \"bytes(gateway).length > 0\"\n                let expr_2 := gt(cleanup_uint256(expr), convert_rational_0_by_1_to_uint256(expr_1))\n                /// @src 0:12517:12586  \"require(bytes(gateway).length > 0, \\\"Escrow: gateway cannot be empty\\\")\"\n                require_helper_stringliteral_795f(expr_2)\n                /// @src 0:12623:12631  \"services\"\n                let _91_slot := 0x00\n                let expr_640_slot := _91_slot\n                /// @src 0:12632:12641  \"serviceId\"\n                let _1 := var_serviceId\n                let expr_3 := _1\n                /// @src 0:12623:12642  \"services[serviceId]\"\n                let _2 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_640_slot, expr_3)\n                let _94_slot := _2\n                let expr_642_slot := _94_slot\n                /// @src 0:12597:12642  \"Service storage service = services[serviceId]\"\n                let var_service_slot := convert_struct_Service_storage_to_struct_Service_ptr(expr_642_slot)\n                /// @src 0:12674:12685  \"description\"\n                let _95_offset := var_description_offset\n                let _95_length := var_description_length\n                let expr_647_offset := _95_offset\n                let expr_647_length := _95_length\n                /// @src 0:12652:12659  \"service\"\n                let _96_slot := var_service_slot\n                let expr_644_slot := _96_slot\n                /// @src 0:12652:12671  \"service.description\"\n                let _3 := add(expr_644_slot, 2)\n                /// @src 0:12652:12685  \"service.description = description\"\n                update_storage_value_offset_string_calldata_to_string(_3, expr_647_offset, expr_647_length)\n                /// @src 0:12713:12720  \"gateway\"\n                let _offset := var_gateway_offset\n                let _99_length := var_gateway_length\n                let expr_653_offset := _offset\n                let expr_653_length := _99_length\n                /// @src 0:12695:12702  \"service\"\n                let _100_slot := var_service_slot\n                let expr_650_slot := _100_slot\n                /// @src 0:12695:12710  \"service.gateway\"\n                let _4 := add(expr_650_slot, 3)\n                /// @src 0:12695:12720  \"service.gateway = gateway\"\n                update_storage_value_offset_string_calldata_to_string(_4, expr_653_offset, expr_653_length)\n                /// @src 0:12751:12760  \"serviceId\"\n                let _5 := var_serviceId\n                let expr_4 := _5\n                /// @src 0:12762:12773  \"description\"\n                let _104_offset := var_description_offset\n                let _104_length := var_description_length\n                let expr_658_offset := _104_offset\n                let expr_658_length := _104_length\n                /// @src 0:12775:12782  \"gateway\"\n                let _105_offset := var_gateway_offset\n                let _length := var_gateway_length\n                let expr_659_offset := _105_offset\n                let expr_659_length := _length\n                /// @src 0:12736:12783  \"ServiceUpdated(serviceId, description, gateway)\"\n                let _6 := 0x21497be0e43df02886a23556867a8f45757777beed0ae265c79dd7142a1dee26\n                let _7 := convert_bytes32_to_bytes32(expr_4)\n                let _8 := allocate_unbounded()\n                let _9 := abi_encode_string_calldata_string_calldata(_8, expr_658_offset, expr_658_length, expr_659_offset, expr_659_length)\n                log2(_8, sub(_9, _8), _6, _7)\n            }\n            /// @ast-id 663 @src 0:12348:12790  \"function updateService(...\"\n            function fun_updateService(var_serviceId, var_description_offset, var_description_length, var_gateway_offset, var_gateway_length)\n            {\n                modifier_onlyProvider_624(var_serviceId, var_description_offset, var_description_length, var_gateway_offset, var_gateway_length)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function zero_value_for_split_bytes32() -> ret\n            { ret := 0 }\n            function store_literal_in_memory_ebc107df0f8396e461fa828325bd94fa07e75cce07dc97a8ea0cfad373b424fa(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: name cannot be empty\")\n            }\n            function abi_encode_stringliteral_ebc1(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 28)\n                store_literal_in_memory_ebc107df0f8396e461fa828325bd94fa07e75cce07dc97a8ea0cfad373b424fa(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_ebc1(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_ebc1(tail)\n            }\n            function require_helper_stringliteral_ebc1(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_ebc1(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_85130fe0d7a45437938997f7fa6d0a6f9c87fbe8182302908640ac67405ccb33(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: stake must cover at leas\")\n                mstore(add(memPtr, 32), \"t one refund\")\n            }\n            function abi_encode_stringliteral_85130fe0d7a45437938997f7fa6d0a6f9c87fbe8182302908640ac67405ccb33(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 44)\n                store_literal_in_memory_85130fe0d7a45437938997f7fa6d0a6f9c87fbe8182302908640ac67405ccb33(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_8513(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_85130fe0d7a45437938997f7fa6d0a6f9c87fbe8182302908640ac67405ccb33(tail)\n            }\n            function require_helper_stringliteral_8513(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8513(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function array_dataslot_bytes(ptr) -> data\n            {\n                data := ptr\n                data := add(ptr, 0x20)\n            }\n            function array_length_bytes(value) -> length\n            { length := mload(value) }\n            function convert_rational_by_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_t_rational_by_1(value)))\n            }\n            function convert_rational_by_to_address(value) -> converted\n            {\n                converted := convert_rational_by_to_uint160(value)\n            }\n            function store_literal_in_memory_862130f84ef544463dccc158e3c9c7299472608b549f001a27726df2b060806a(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: service name already tak\")\n                mstore(add(memPtr, 32), \"en\")\n            }\n            function abi_encode_stringliteral_862130f84ef544463dccc158e3c9c7299472608b549f001a27726df2b060806a(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 34)\n                store_literal_in_memory_862130f84ef544463dccc158e3c9c7299472608b549f001a27726df2b060806a(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_8621(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_862130f84ef544463dccc158e3c9c7299472608b549f001a27726df2b060806a(tail)\n            }\n            function require_helper_stringliteral_8621(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8621(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function allocate_memory_struct_struct_Service_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(128)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function array_allocation_size_string(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function abi_decode_available_length_string(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_string(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function convert_array_string_calldata_to_string(value, length) -> converted\n            {\n                converted := abi_decode_available_length_string(value, length, calldatasize())\n            }\n            function write_to_memory_string(memPtr, value)\n            { mstore(memPtr, value) }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function read_from_memoryt_string(memPtr) -> value\n            { value := mload(memPtr) }\n            function copy_byte_array_to_storage_from_string_to_string(slot, src)\n            {\n                let newLen := array_length_string(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_string_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_offset_string_to_string(slot, value)\n            {\n                copy_byte_array_to_storage_from_string_to_string(slot, value)\n            }\n            function copy_struct_to_storage_from_struct_Service_to_struct_Service(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_string(memberSrcPtr_2)\n                update_storage_value_offset_string_to_string(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 3)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_string(memberSrcPtr_3)\n                update_storage_value_offset_string_to_string(memberSlot_3, memberValue_3)\n            }\n            function update_storage_value_offset_struct_Service_to_struct_Service(slot, value)\n            {\n                copy_struct_to_storage_from_struct_Service_to_struct_Service(slot, value)\n            }\n            function convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn_ptr(value) -> converted\n            { converted := value }\n            function array_dataslot_array_bytes32_dyn_storage_ptr(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function array_length_array_bytes32_dyn_storage_ptr(value) -> length\n            { length := sload(value) }\n            function storage_array_index_access_bytes32_dyn_ptr(array, index) -> slot, offset\n            {\n                let arrayLength := array_length_array_bytes32_dyn_storage_ptr(array)\n                if iszero(lt(index, arrayLength)) { panic_error_0x32() }\n                let dataArea := array_dataslot_array_bytes32_dyn_storage_ptr(array)\n                slot := add(dataArea, mul(index, 1))\n                offset := 0\n            }\n            function prepare_store_bytes32(value) -> ret\n            {\n                ret := shift_right_0_unsigned(value)\n            }\n            function update_storage_value_bytes32_to_bytes32(slot, offset, value)\n            {\n                let convertedValue := convert_bytes32_to_bytes32(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_bytes32(convertedValue)))\n            }\n            function array_push_from_bytes32_to_array_bytes32_dyn_storage_ptr(array, value0)\n            {\n                let oldLen := sload(array)\n                if iszero(lt(oldLen, 18446744073709551616)) { panic_error_0x41() }\n                sstore(array, add(oldLen, 1))\n                let slot, offset := storage_array_index_access_bytes32_dyn_ptr(array, oldLen)\n                update_storage_value_bytes32_to_bytes32(slot, offset, value0)\n            }\n            function abi_encode_string_calldata_uint256(headStart, value0, value1, value2) -> tail\n            {\n                tail := add(headStart, 64)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_string_calldata(value0, value1, tail)\n                abi_encode_uint256_to_uint256(value2, add(headStart, 32))\n            }\n            /// @ast-id 613 @src 0:11376:12288  \"function createService(...\"\n            function fun_createService(var_name_offset, var_name_length, var_price, var_gateway_519_offset, var_gateway_519_length, var_description_offset, var_description_521_length) -> var_serviceId\n            {\n                /// @src 0:11554:11571  \"bytes32 serviceId\"\n                let zero_t_bytes32 := zero_value_for_split_bytes32()\n                var_serviceId := zero_t_bytes32\n                /// @src 0:11597:11601  \"name\"\n                let _111_offset := var_name_offset\n                let _111_length := var_name_length\n                let expr_offset := _111_offset\n                let expr_529_length := _111_length\n                /// @src 0:11591:11602  \"bytes(name)\"\n                let expr_530_offset, expr_length := convert_array_string_calldata_to_bytes_calldata(expr_offset, expr_529_length)\n                /// @src 0:11591:11609  \"bytes(name).length\"\n                let expr := array_length_bytes_calldata(expr_530_offset, expr_length)\n                /// @src 0:11612:11613  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:11591:11613  \"bytes(name).length > 0\"\n                let expr_2 := gt(cleanup_uint256(expr), convert_rational_0_by_1_to_uint256(expr_1))\n                /// @src 0:11583:11646  \"require(bytes(name).length > 0, \\\"Escrow: name cannot be empty\\\")\"\n                require_helper_stringliteral_ebc1(expr_2)\n                /// @src 0:11664:11673  \"msg.value\"\n                let expr_3 := callvalue()\n                /// @src 0:11677:11682  \"price\"\n                let _1 := var_price\n                let expr_4 := _1\n                /// @src 0:11664:11682  \"msg.value >= price\"\n                let expr_5 := iszero(lt(cleanup_uint256(expr_3), cleanup_uint256(expr_4)))\n                /// @src 0:11656:11731  \"require(msg.value >= price, \\\"Escrow: stake must cover at least one refund\\\")\"\n                require_helper_stringliteral_8513(expr_5)\n                /// @src 0:11755:11762  \"gateway\"\n                let _113_offset := var_gateway_519_offset\n                let _113_length := var_gateway_519_length\n                let expr_548_offset := _113_offset\n                let expr_548_length := _113_length\n                /// @src 0:11749:11763  \"bytes(gateway)\"\n                let expr_549_offset, expr_549_length := convert_array_string_calldata_to_bytes_calldata(expr_548_offset, expr_548_length)\n                /// @src 0:11749:11770  \"bytes(gateway).length\"\n                let expr_6 := array_length_bytes_calldata(expr_549_offset, expr_549_length)\n                /// @src 0:11773:11774  \"0\"\n                let expr_7 := 0x00\n                /// @src 0:11749:11774  \"bytes(gateway).length > 0\"\n                let expr_8 := gt(cleanup_uint256(expr_6), convert_rational_0_by_1_to_uint256(expr_7))\n                /// @src 0:11741:11810  \"require(bytes(gateway).length > 0, \\\"Escrow: gateway cannot be empty\\\")\"\n                require_helper_stringliteral_795f(expr_8)\n                /// @src 0:11849:11853  \"name\"\n                let _114_offset := var_name_offset\n                let _114_length := var_name_length\n                let expr_560_offset := _114_offset\n                let expr_560_length := _114_length\n                /// @src 0:11843:11854  \"bytes(name)\"\n                let expr_561_offset, expr_561_length := convert_array_string_calldata_to_bytes_calldata(expr_560_offset, expr_560_length)\n                /// @src 0:11833:11855  \"keccak256(bytes(name))\"\n                let _115_mpos := convert_array_bytes_calldata_to_bytes(expr_561_offset, expr_561_length)\n                let expr_9 := keccak256(array_dataslot_bytes(_115_mpos), array_length_bytes(_115_mpos))\n                /// @src 0:11821:11855  \"serviceId = keccak256(bytes(name))\"\n                var_serviceId := expr_9\n                /// @src 0:11873:11881  \"services\"\n                let _116_slot := 0x00\n                let expr_566_slot := _116_slot\n                /// @src 0:11882:11891  \"serviceId\"\n                let _2 := var_serviceId\n                let expr_10 := _2\n                /// @src 0:11873:11892  \"services[serviceId]\"\n                let _3 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_566_slot, expr_10)\n                let _119_slot := _3\n                let expr_568_slot := _119_slot\n                /// @src 0:11873:11901  \"services[serviceId].provider\"\n                let _4 := add(expr_568_slot, 0)\n                let _5 := read_from_storage_split_offset_address(_4)\n                let expr_11 := _5\n                /// @src 0:11913:11914  \"0\"\n                let expr_12 := 0x00\n                /// @src 0:11905:11915  \"address(0)\"\n                let expr_13 := convert_rational_by_to_address(expr_12)\n                /// @src 0:11873:11915  \"services[serviceId].provider == address(0)\"\n                let expr_14 := eq(cleanup_address(expr_11), cleanup_address(expr_13))\n                /// @src 0:11865:11954  \"require(services[serviceId].provider == address(0), \\\"Escrow: service name already taken\\\")\"\n                require_helper_stringliteral_8621(expr_14)\n                /// @src 0:12019:12029  \"msg.sender\"\n                let expr_15 := caller()\n                /// @src 0:12050:12055  \"price\"\n                let _6 := var_price\n                let expr_16 := _6\n                /// @src 0:12082:12093  \"description\"\n                let _123_offset := var_description_offset\n                let _123_length := var_description_521_length\n                let expr_585_offset := _123_offset\n                let expr_585_length := _123_length\n                /// @src 0:12116:12123  \"gateway\"\n                let _124_offset := var_gateway_519_offset\n                let _124_length := var_gateway_519_length\n                let expr_586_offset := _124_offset\n                let expr_586_length := _124_length\n                /// @src 0:11987:12134  \"Service({...\"\n                let expr_587_mpos := allocate_memory_struct_struct_Service_storage_ptr()\n                write_to_memory_address(add(expr_587_mpos, 0), expr_15)\n                write_to_memory_uint256(add(expr_587_mpos, 32), expr_16)\n                let _125_mpos := convert_array_string_calldata_to_string(expr_585_offset, expr_585_length)\n                write_to_memory_string(add(expr_587_mpos, 64), _125_mpos)\n                let _mpos := convert_array_string_calldata_to_string(expr_586_offset, expr_586_length)\n                write_to_memory_string(add(expr_587_mpos, 96), _mpos)\n                /// @src 0:11965:11973  \"services\"\n                let _127_slot := 0x00\n                let expr_578_slot := _127_slot\n                /// @src 0:11974:11983  \"serviceId\"\n                let _7 := var_serviceId\n                let expr_17 := _7\n                /// @src 0:11965:11984  \"services[serviceId]\"\n                let _8 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_578_slot, expr_17)\n                /// @src 0:11965:12134  \"services[serviceId] = Service({...\"\n                update_storage_value_offset_struct_Service_to_struct_Service(_8, expr_587_mpos)\n                /// @src 0:12145:12155  \"serviceIds\"\n                let _131_slot := 0x01\n                let expr_590_slot := _131_slot\n                /// @src 0:12145:12160  \"serviceIds.push\"\n                let expr_self_slot := convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn_ptr(expr_590_slot)\n                /// @src 0:12161:12170  \"serviceId\"\n                let _9 := var_serviceId\n                let expr_18 := _9\n                /// @src 0:12145:12171  \"serviceIds.push(serviceId)\"\n                array_push_from_bytes32_to_array_bytes32_dyn_storage_ptr(expr_self_slot, expr_18)\n                /// @src 0:12201:12210  \"msg.value\"\n                let expr_19 := callvalue()\n                /// @src 0:12181:12187  \"stakes\"\n                let _133_slot := 0x02\n                let expr_596_slot := _133_slot\n                /// @src 0:12188:12197  \"serviceId\"\n                let _10 := var_serviceId\n                let expr_20 := _10\n                /// @src 0:12181:12198  \"stakes[serviceId]\"\n                let _11 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_596_slot, expr_20)\n                /// @src 0:12181:12210  \"stakes[serviceId] = msg.value\"\n                update_storage_value_offset_uint256_to_uint256(_11, expr_19)\n                /// @src 0:12242:12251  \"serviceId\"\n                let _12 := var_serviceId\n                let expr_21 := _12\n                /// @src 0:12253:12257  \"name\"\n                let _137_offset := var_name_offset\n                let _137_length := var_name_length\n                let expr_605_offset := _137_offset\n                let expr_605_length := _137_length\n                /// @src 0:12259:12269  \"msg.sender\"\n                let expr_22 := caller()\n                /// @src 0:12271:12280  \"msg.value\"\n                let expr_23 := callvalue()\n                /// @src 0:12226:12281  \"ServiceDeployed(serviceId, name, msg.sender, msg.value)\"\n                let _13 := 0xf64400e1a6f13918e0d52281923ca84f7e8629a8877d7df221b1daee5a7f5a09\n                let _14 := convert_bytes32_to_bytes32(expr_21)\n                let _15 := convert_address_to_address(expr_22)\n                let _16 := allocate_unbounded()\n                let _17 := abi_encode_string_calldata_uint256(_16, expr_605_offset, expr_605_length, expr_23)\n                log3(_16, sub(_17, _16), _13, _14, _15)\n            }\n            /// @ast-id 1103 @src 0:17136:17329  \"function claimDigest(bytes32 serviceId, uint256 purchaseId, bytes32 deliverableHash) external view returns (bytes32) {...\"\n            function fun_claimDigest(var_serviceId, var_purchaseId, var_deliverableHash) -> var_\n            {\n                /// @src 0:17244:17251  \"bytes32\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var_ := zero_bytes32\n                /// @src 0:17283:17292  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 0:17294:17304  \"purchaseId\"\n                let _2 := var_purchaseId\n                let expr_1 := _2\n                /// @src 0:17306:17321  \"deliverableHash\"\n                let _3 := var_deliverableHash\n                let expr_2 := _3\n                /// @src 0:17270:17322  \"_claimDigest(serviceId, purchaseId, deliverableHash)\"\n                let expr_3 := fun__claimDigest(expr, expr_1, expr_2)\n                /// @src 0:17263:17322  \"return _claimDigest(serviceId, purchaseId, deliverableHash)\"\n                var_ := expr_3\n                leave\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function store_literal_in_memory_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: caller is not the buyer\")\n            }\n            function abi_encode_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 31)\n                store_literal_in_memory_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_f4d3(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6(tail)\n            }\n            function require_helper_stringliteral_f4d3(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_f4d3(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: dispute already raised\")\n            }\n            function abi_encode_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 30)\n                store_literal_in_memory_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_3a45(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4(tail)\n            }\n            function require_helper_stringliteral_3a45(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_3a45(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(8, value) }\n            function update_byte_slice_shift_1(value, toInsert) -> result\n            {\n                let mask := 65280\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_t_bool_to_t_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_1(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            /// @ast-id 872 @src 0:14502:14960  \"function raiseDispute(bytes32 serviceId, uint256 purchaseId) external {...\"\n            function fun_raiseDispute(var_serviceId, var_purchaseId)\n            {\n                /// @src 0:14610:14619  \"purchases\"\n                let _147_slot := 0x03\n                let expr_831_slot := _147_slot\n                /// @src 0:14620:14629  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 0:14610:14630  \"purchases[serviceId]\"\n                let _2 := mapping_index_access_mapping_bytes32_mapping_uint256_struct_Purchase_storage_of_bytes32(expr_831_slot, expr)\n                let _150_slot := _2\n                let expr_833_slot := _150_slot\n                /// @src 0:14631:14641  \"purchaseId\"\n                let _3 := var_purchaseId\n                let expr_1 := _3\n                /// @src 0:14610:14642  \"purchases[serviceId][purchaseId]\"\n                let _4 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_833_slot, expr_1)\n                let _153_slot := _4\n                let expr_835_slot := _153_slot\n                /// @src 0:14582:14642  \"Purchase storage purchase = purchases[serviceId][purchaseId]\"\n                let var_purchase_830_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_835_slot)\n                /// @src 0:14661:14671  \"msg.sender\"\n                let expr_2 := caller()\n                /// @src 0:14675:14683  \"purchase\"\n                let _154_slot := var_purchase_830_slot\n                let expr_840_slot := _154_slot\n                /// @src 0:14675:14689  \"purchase.buyer\"\n                let _5 := add(expr_840_slot, 0)\n                let _6 := read_from_storage_split_offset_address(_5)\n                let expr_3 := _6\n                /// @src 0:14661:14689  \"msg.sender == purchase.buyer\"\n                let expr_4 := eq(cleanup_address(expr_2), cleanup_address(expr_3))\n                /// @src 0:14653:14725  \"require(msg.sender == purchase.buyer, \\\"Escrow: caller is not the buyer\\\")\"\n                require_helper_stringliteral_f4d3(expr_4)\n                /// @src 0:14744:14752  \"purchase\"\n                let _157_slot := var_purchase_830_slot\n                let expr_847_slot := _157_slot\n                /// @src 0:14744:14760  \"purchase.claimed\"\n                let _7 := add(expr_847_slot, 2)\n                let _8 := read_from_storage_split_offset_t_bool(_7)\n                let expr_5 := _8\n                /// @src 0:14743:14760  \"!purchase.claimed\"\n                let expr_6 := cleanup_bool(iszero(expr_5))\n                /// @src 0:14735:14796  \"require(!purchase.claimed, \\\"Escrow: payment already claimed\\\")\"\n                require_helper_stringliteral(expr_6)\n                /// @src 0:14815:14823  \"purchase\"\n                let _160_slot := var_purchase_830_slot\n                let expr_854_slot := _160_slot\n                /// @src 0:14815:14832  \"purchase.disputed\"\n                let _9 := add(expr_854_slot, 2)\n                let _10 := read_from_storage_split_offset_bool(_9)\n                let expr_7 := _10\n                /// @src 0:14814:14832  \"!purchase.disputed\"\n                let expr_8 := cleanup_bool(iszero(expr_7))\n                /// @src 0:14806:14867  \"require(!purchase.disputed, \\\"Escrow: dispute already raised\\\")\"\n                require_helper_stringliteral_3a45(expr_8)\n                /// @src 0:14898:14902  \"true\"\n                let expr_9 := 0x01\n                /// @src 0:14878:14886  \"purchase\"\n                let _163_slot := var_purchase_830_slot\n                let expr_860_slot := _163_slot\n                /// @src 0:14878:14895  \"purchase.disputed\"\n                let _11 := add(expr_860_slot, 2)\n                /// @src 0:14878:14902  \"purchase.disputed = true\"\n                update_storage_value_offset_t_bool_to_t_bool(_11, expr_9)\n                /// @src 0:14931:14940  \"serviceId\"\n                let _12 := var_serviceId\n                let expr_10 := _12\n                /// @src 0:14942:14952  \"purchaseId\"\n                let _13 := var_purchaseId\n                let expr_11 := _13\n                /// @src 0:14917:14953  \"DisputeRaised(serviceId, purchaseId)\"\n                let _14 := 0xc6228edd773ffc16c9752602b8c93bca5546bf5871ac1e6ae48c2e5981ea52c8\n                let _15 := convert_bytes32_to_bytes32(expr_10)\n                let _16 := convert_uint256_to_uint256(expr_11)\n                let _17 := allocate_unbounded()\n                let _18 := abi_encode_tuple(_17)\n                log3(_17, sub(_18, _17), _14, _15, _16)\n            }\n            /// @ast-id 512 @src 0:10895:11036  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant(var_purchaseId, var_serviceId) -> _1\n            {\n                _1 := var_purchaseId\n                /// @src 0:10937:10944  \"_locked\"\n                let _2 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _2\n                /// @src 0:10948:10949  \"1\"\n                let expr_1 := 0x01\n                /// @src 0:10937:10949  \"_locked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                /// @src 0:10929:10976  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                require_helper_stringliteral_2e89(expr_2)\n                /// @src 0:10996:10997  \"2\"\n                let expr_3 := 0x02\n                /// @src 0:10986:10997  \"_locked = 2\"\n                let _3 := convert_rational_2_by_1_to_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x05, _3)\n                /// @src 0:11007:11008  \"_\"\n                _1 := fun_buyService_inner(var_purchaseId, var_serviceId)\n                /// @src 0:11028:11029  \"1\"\n                let expr_4 := 0x01\n                /// @src 0:11018:11029  \"_locked = 1\"\n                let _4 := convert_rational_1_by_1_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x05, _4)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function store_literal_in_memory_8f3c3c5ccf4cc0fddd64df7ab4c6b67a3b533f4629722f8679066a66857ef553(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: service does not exist\")\n            }\n            function abi_encode_stringliteral_8f3c3c5ccf4cc0fddd64df7ab4c6b67a3b533f4629722f8679066a66857ef553(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 30)\n                store_literal_in_memory_8f3c3c5ccf4cc0fddd64df7ab4c6b67a3b533f4629722f8679066a66857ef553(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_8f3c(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_8f3c3c5ccf4cc0fddd64df7ab4c6b67a3b533f4629722f8679066a66857ef553(tail)\n            }\n            function require_helper_stringliteral_8f3c(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_8f3c(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: incorrect payment amount\")\n            }\n            function abi_encode_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 32)\n                store_literal_in_memory_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_d266(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f(tail)\n            }\n            function require_helper_stringliteral_d266(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_d266(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function increment_uint256(value) -> ret\n            {\n                value := cleanup_uint256(value)\n                if eq(value, not(0)) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function allocate_memory_struct_struct_Purchase_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(160)\n            }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function shift_left_16(value) -> newValue\n            { newValue := shl(16, value) }\n            function update_byte_slice_shift_2(value, toInsert) -> result\n            {\n                let mask := 16711680\n                toInsert := shift_left_16(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_2_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_2(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function copy_struct_to_storage_from_struct_Purchase_to_struct_Purchase(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_bool(memberSrcPtr_2)\n                update_storage_value_offset_bool_to_bool(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 2)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_t_bool_to_t_bool(memberSlot_3, memberValue_3)\n                let memberSlot_4 := add(slot, 2)\n                let memberSrcPtr_4 := add(value, 128)\n                let memberValue_4 := read_from_memoryt_bool(memberSrcPtr_4)\n                update_storage_value_offset_2_bool_to_bool(memberSlot_4, memberValue_4)\n            }\n            function update_storage_value_offset_struct_Purchase_to_struct_Purchase(slot, value)\n            {\n                copy_struct_to_storage_from_struct_Purchase_to_struct_Purchase(slot, value)\n            }\n            /// @src 0:12888:13555  \"function buyService(bytes32 serviceId) external payable nonReentrant returns (uint256 purchaseId) {...\"\n            function fun_buyService_inner(_1, var_serviceId) -> var_purchaseId\n            {\n                var_purchaseId := _1\n                /// @src 0:13022:13030  \"services\"\n                let _178_slot := 0x00\n                let expr_676_slot := _178_slot\n                /// @src 0:13031:13040  \"serviceId\"\n                let _2 := var_serviceId\n                let expr := _2\n                /// @src 0:13022:13041  \"services[serviceId]\"\n                let _3 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_676_slot, expr)\n                let _181_slot := _3\n                let expr_678_slot := _181_slot\n                /// @src 0:12996:13041  \"Service storage service = services[serviceId]\"\n                let var_service_675_slot := convert_struct_Service_storage_to_struct_Service_ptr(expr_678_slot)\n                /// @src 0:13059:13066  \"service\"\n                let _182_slot := var_service_675_slot\n                let expr_681_slot := _182_slot\n                /// @src 0:13059:13075  \"service.provider\"\n                let _4 := add(expr_681_slot, 0)\n                let _5 := read_from_storage_split_offset_address(_4)\n                let expr_1 := _5\n                /// @src 0:13087:13088  \"0\"\n                let expr_2 := 0x00\n                /// @src 0:13079:13089  \"address(0)\"\n                let expr_3 := convert_rational_by_to_address(expr_2)\n                /// @src 0:13059:13089  \"service.provider != address(0)\"\n                let expr_4 := iszero(eq(cleanup_address(expr_1), cleanup_address(expr_3)))\n                /// @src 0:13051:13124  \"require(service.provider != address(0), \\\"Escrow: service does not exist\\\")\"\n                require_helper_stringliteral_8f3c(expr_4)\n                /// @src 0:13142:13151  \"msg.value\"\n                let expr_5 := callvalue()\n                /// @src 0:13155:13162  \"service\"\n                let _185_slot := var_service_675_slot\n                let expr_694_slot := _185_slot\n                /// @src 0:13155:13168  \"service.price\"\n                let _6 := add(expr_694_slot, 1)\n                let _7 := read_from_storage_split_offset_uint256(_6)\n                let expr_6 := _7\n                /// @src 0:13142:13168  \"msg.value == service.price\"\n                let expr_7 := eq(cleanup_uint256(expr_5), cleanup_uint256(expr_6))\n                /// @src 0:13134:13205  \"require(msg.value == service.price, \\\"Escrow: incorrect payment amount\\\")\"\n                require_helper_stringliteral_d266(expr_7)\n                /// @src 0:13229:13244  \"nextPurchaseIds\"\n                let _188_slot := 0x04\n                let expr_701_slot := _188_slot\n                /// @src 0:13245:13254  \"serviceId\"\n                let _8 := var_serviceId\n                let expr_8 := _8\n                /// @src 0:13229:13255  \"nextPurchaseIds[serviceId]\"\n                let _9 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_701_slot, expr_8)\n                /// @src 0:13229:13257  \"nextPurchaseIds[serviceId]++\"\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let _11 := increment_uint256(_10)\n                update_storage_value_offset_uint256_to_uint256(_9, _11)\n                let expr_9 := _10\n                /// @src 0:13216:13257  \"purchaseId = nextPurchaseIds[serviceId]++\"\n                var_purchaseId := expr_9\n                /// @src 0:13332:13342  \"msg.sender\"\n                let expr_10 := caller()\n                /// @src 0:13364:13373  \"msg.value\"\n                let expr_11 := callvalue()\n                /// @src 0:13396:13401  \"false\"\n                let expr_12 := 0x00\n                /// @src 0:13425:13430  \"false\"\n                let expr_13 := 0x00\n                /// @src 0:13454:13459  \"false\"\n                let expr_14 := 0x00\n                /// @src 0:13302:13470  \"Purchase({...\"\n                let expr_720_mpos := allocate_memory_struct_struct_Purchase_storage_ptr()\n                write_to_memory_address(add(expr_720_mpos, 0), expr_10)\n                write_to_memory_uint256(add(expr_720_mpos, 32), expr_11)\n                write_to_memory_bool(add(expr_720_mpos, 64), expr_12)\n                write_to_memory_bool(add(expr_720_mpos, 96), expr_13)\n                write_to_memory_bool(add(expr_720_mpos, 128), expr_14)\n                /// @src 0:13267:13276  \"purchases\"\n                let _193_slot := 0x03\n                let expr_707_slot := _193_slot\n                /// @src 0:13277:13286  \"serviceId\"\n                let _12 := var_serviceId\n                let expr_15 := _12\n                /// @src 0:13267:13287  \"purchases[serviceId]\"\n                let _13 := mapping_index_access_mapping_bytes32_mapping_uint256_struct_Purchase_storage_of_bytes32(expr_707_slot, expr_15)\n                let _196_slot := _13\n                let expr_710_slot := _196_slot\n                /// @src 0:13288:13298  \"purchaseId\"\n                let _14 := var_purchaseId\n                let expr_16 := _14\n                /// @src 0:13267:13299  \"purchases[serviceId][purchaseId]\"\n                let _15 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_710_slot, expr_16)\n                /// @src 0:13267:13470  \"purchases[serviceId][purchaseId] = Purchase({...\"\n                update_storage_value_offset_struct_Purchase_to_struct_Purchase(_15, expr_720_mpos)\n                /// @src 0:13503:13512  \"serviceId\"\n                let _16 := var_serviceId\n                let expr_17 := _16\n                /// @src 0:13514:13524  \"purchaseId\"\n                let _17 := var_purchaseId\n                let expr_18 := _17\n                /// @src 0:13526:13536  \"msg.sender\"\n                let expr_19 := caller()\n                /// @src 0:13538:13547  \"msg.value\"\n                let expr_20 := callvalue()\n                /// @src 0:13486:13548  \"ServicePurchased(serviceId, purchaseId, msg.sender, msg.value)\"\n                let _18 := 0x28e441787112329c6ca4a49a928d407794bdeda6afbd8361c29b788a6582427e\n                let _19 := convert_bytes32_to_bytes32(expr_17)\n                let _20 := convert_uint256_to_uint256(expr_18)\n                let _21 := convert_address_to_address(expr_19)\n                let _22 := allocate_unbounded()\n                let _23 := abi_encode_uint256(_22, expr_20)\n                log4(_22, sub(_23, _22), _18, _19, _20, _21)\n            }\n            /// @ast-id 733 @src 0:12888:13555  \"function buyService(bytes32 serviceId) external payable nonReentrant returns (uint256 purchaseId) {...\"\n            function fun_buyService(var_serviceId) -> var_purchaseId\n            {\n                /// @src 0:12966:12984  \"uint256 purchaseId\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_purchaseId := zero_uint256\n                var_purchaseId := modifier_nonReentrant(var_purchaseId, var_serviceId)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function zero_value_for_split_array_bytes32_dyn() -> ret\n            { ret := 96 }\n            function array_storeLengthForEncoding_array_bytes32_dyn(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function extract_from_storage_value_offset_bytes32(slot_value) -> value\n            {\n                value := cleanup_from_storage_bytes32(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_offset_bytes32(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bytes32(sload(slot))\n            }\n            function array_nextElement_array_bytes32_dyn_storage(ptr) -> next\n            { next := add(ptr, 0x01) }\n            function abi_encode_array_bytes32_dyn_storage(value, pos) -> end\n            {\n                let length := array_length_array_bytes32_dyn_storage(value)\n                pos := array_storeLengthForEncoding_array_bytes32_dyn(pos, length)\n                let baseRef := array_dataslot_array_bytes32_dyn_storage(value)\n                let srcPtr := baseRef\n                let i := 0\n                for { } lt(i, length) { i := add(i, 1) }\n                {\n                    let elementValue0 := read_from_storage_offset_bytes32(srcPtr)\n                    pos := abi_encodeUpdatedPos_bytes32(elementValue0, pos)\n                    srcPtr := array_nextElement_array_bytes32_dyn_storage(srcPtr)\n                }\n                end := pos\n            }\n            function abi_encodeUpdatedPos_array_bytes32_dyn_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_array_bytes32_dyn_storage(value0, pos)\n            }\n            function copy_array_from_storage_to_memory_array_bytes32_dyn(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_array_bytes32_dyn_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            function convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn(value) -> converted\n            {\n                converted := copy_array_from_storage_to_memory_array_bytes32_dyn(value)\n            }\n            /// @ast-id 1084 @src 0:16937:17039  \"function listServices() external view returns (bytes32[] memory ids) {...\"\n            function fun_listServices() -> var_ids_mpos\n            {\n                /// @src 0:16984:17004  \"bytes32[] memory ids\"\n                let zero_array_bytes32_dyn_mpos := zero_value_for_split_array_bytes32_dyn()\n                var_ids_mpos := zero_array_bytes32_dyn_mpos\n                /// @src 0:17022:17032  \"serviceIds\"\n                let _209_slot := 0x01\n                let expr_1080_slot := _209_slot\n                /// @src 0:17016:17032  \"ids = serviceIds\"\n                var_ids_mpos := convert_array_array_bytes32_dyn_storage_to_array_bytes32_dyn(expr_1080_slot)\n            }\n            /// @ast-id 490 @src 0:10698:10856  \"modifier onlyProvider(bytes32 serviceId) {...\"\n            function modifier_onlyProvider(var_serviceId)\n            {\n                /// @src 0:16326:16335  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                let _2 := expr\n                let var_serviceId_1 := _2\n                /// @src 0:10757:10767  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:10771:10779  \"services\"\n                let _213_slot := 0x00\n                let expr_slot := _213_slot\n                /// @src 0:10780:10789  \"serviceId\"\n                let _3 := var_serviceId_1\n                let expr_2 := _3\n                /// @src 0:10771:10790  \"services[serviceId]\"\n                let _4 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_slot, expr_2)\n                let _216_slot := _4\n                let expr_slot_1 := _216_slot\n                /// @src 0:10771:10799  \"services[serviceId].provider\"\n                let _5 := add(expr_slot_1, 0)\n                let _6 := read_from_storage_split_offset_address(_5)\n                let expr_3 := _6\n                /// @src 0:10757:10799  \"msg.sender == services[serviceId].provider\"\n                let expr_4 := eq(cleanup_address(expr_1), cleanup_address(expr_3))\n                /// @src 0:10749:10838  \"require(msg.sender == services[serviceId].provider, \\\"Escrow: caller is not the provider\\\")\"\n                require_helper_stringliteral_4b50(expr_4)\n                /// @src 0:10848:10849  \"_\"\n                fun_topUpStake_inner(var_serviceId)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @src 0:16257:16453  \"function topUpStake(bytes32 serviceId) external payable onlyProvider(serviceId) {...\"\n            function fun_topUpStake_inner(var_serviceId)\n            {\n                /// @src 0:16368:16377  \"msg.value\"\n                let expr := callvalue()\n                /// @src 0:16347:16353  \"stakes\"\n                let _219_slot := 0x02\n                let expr_1011_slot := _219_slot\n                /// @src 0:16354:16363  \"serviceId\"\n                let _1 := var_serviceId\n                let expr_1 := _1\n                /// @src 0:16347:16364  \"stakes[serviceId]\"\n                let _2 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1011_slot, expr_1)\n                /// @src 0:16347:16377  \"stakes[serviceId] += msg.value\"\n                let _3 := read_from_storage_split_offset_uint256(_2)\n                let expr_2 := checked_add_uint256(_3, expr)\n                update_storage_value_offset_uint256_to_uint256(_2, expr_2)\n                /// @src 0:16406:16415  \"serviceId\"\n                let _4 := var_serviceId\n                let expr_3 := _4\n                /// @src 0:16417:16426  \"msg.value\"\n                let expr_4 := callvalue()\n                /// @src 0:16428:16434  \"stakes\"\n                let _224_slot := 0x02\n                let expr_1022_slot := _224_slot\n                /// @src 0:16435:16444  \"serviceId\"\n                let _5 := var_serviceId\n                let expr_5 := _5\n                /// @src 0:16428:16445  \"stakes[serviceId]\"\n                let _6 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_1022_slot, expr_5)\n                let _7 := read_from_storage_split_offset_uint256(_6)\n                let expr_6 := _7\n                /// @src 0:16392:16446  \"StakeToppedUp(serviceId, msg.value, stakes[serviceId])\"\n                let _8 := 0x077a7ccf44b26a4e3477c9abb31e09a68f3d67436717d4ffa709adb2949dc70b\n                let _9 := convert_bytes32_to_bytes32(expr_3)\n                let _10 := allocate_unbounded()\n                let _11 := abi_encode_uint256_uint256(_10, expr_4, expr_6)\n                log2(_10, sub(_11, _10), _8, _9)\n            }\n            /// @ast-id 1028 @src 0:16257:16453  \"function topUpStake(bytes32 serviceId) external payable onlyProvider(serviceId) {...\"\n            function fun_topUpStake(var_serviceId)\n            {\n                modifier_onlyProvider(var_serviceId)\n            }\n            /// @ast-id 512 @src 0:10895:11036  \"modifier nonReentrant() {...\"\n            function modifier_nonReentrant_882(var_serviceId, var_purchaseId, var_refundBuyer)\n            {\n                /// @src 0:10937:10944  \"_locked\"\n                let _1 := read_from_storage_split_offset_uint256(0x05)\n                let expr := _1\n                /// @src 0:10948:10949  \"1\"\n                let expr_1 := 0x01\n                /// @src 0:10937:10949  \"_locked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_1_by_1_to_uint256(expr_1))\n                /// @src 0:10929:10976  \"require(_locked == 1, \\\"Escrow: reentrant call\\\")\"\n                require_helper_stringliteral_2e89(expr_2)\n                /// @src 0:10996:10997  \"2\"\n                let expr_3 := 0x02\n                /// @src 0:10986:10997  \"_locked = 2\"\n                let _2 := convert_rational_2_by_1_to_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x05, _2)\n                /// @src 0:11007:11008  \"_\"\n                fun_resolveDispute_inner(var_serviceId, var_purchaseId, var_refundBuyer)\n                /// @src 0:11028:11029  \"1\"\n                let expr_4 := 0x01\n                /// @src 0:11018:11029  \"_locked = 1\"\n                let _3 := convert_rational_1_by_1_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x05, _3)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function store_literal_in_memory_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: invalid state\")\n            }\n            function abi_encode_stringliteral_fe47(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 21)\n                store_literal_in_memory_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_fe47(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_fe47(tail)\n            }\n            function require_helper_stringliteral_fe47(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_fe47(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_669b7067ef47fee02a6eccce1a488d51024246971c26d659a9d05c0cfa30020d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: arbiter bond too low\")\n            }\n            function abi_encode_stringliteral_669b(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 28)\n                store_literal_in_memory_669b7067ef47fee02a6eccce1a488d51024246971c26d659a9d05c0cfa30020d(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_669b(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_669b(tail)\n            }\n            function require_helper_stringliteral_669b(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_669b(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_619f09653664230cf7341f5bbe62861fe7c1f6a32021d0d118840640aa76fe28(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: provider stake insuffici\")\n                mstore(add(memPtr, 32), \"ent\")\n            }\n            function abi_encode_stringliteral_619f09653664230cf7341f5bbe62861fe7c1f6a32021d0d118840640aa76fe28(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 35)\n                store_literal_in_memory_619f09653664230cf7341f5bbe62861fe7c1f6a32021d0d118840640aa76fe28(pos)\n                end := add(pos, 64)\n            }\n            function abi_encode_stringliteral_619f(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_619f09653664230cf7341f5bbe62861fe7c1f6a32021d0d118840640aa76fe28(tail)\n            }\n            function require_helper_stringliteral_619f(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_619f(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            /// @src 0:15063:16203  \"function resolveDispute(...\"\n            function fun_resolveDispute_inner(var_serviceId, var_purchaseId, var_refundBuyer)\n            {\n                /// @src 0:15240:15248  \"services\"\n                let _235_slot := 0x00\n                let expr_887_slot := _235_slot\n                /// @src 0:15249:15258  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 0:15240:15259  \"services[serviceId]\"\n                let _2 := mapping_index_access_mapping_bytes32_struct_Service_storage_of_bytes32(expr_887_slot, expr)\n                let _238_slot := _2\n                let expr_889_slot := _238_slot\n                /// @src 0:15214:15259  \"Service storage service = services[serviceId]\"\n                let var_service_886_slot := convert_struct_Service_storage_to_struct_Service_ptr(expr_889_slot)\n                /// @src 0:15297:15306  \"purchases\"\n                let _239_slot := 0x03\n                let expr_894_slot := _239_slot\n                /// @src 0:15307:15316  \"serviceId\"\n                let _3 := var_serviceId\n                let expr_1 := _3\n                /// @src 0:15297:15317  \"purchases[serviceId]\"\n                let _4 := mapping_index_access_mapping_bytes32_mapping_uint256_struct_Purchase_storage_of_bytes32(expr_894_slot, expr_1)\n                let _242_slot := _4\n                let expr_896_slot := _242_slot\n                /// @src 0:15318:15328  \"purchaseId\"\n                let _5 := var_purchaseId\n                let expr_2 := _5\n                /// @src 0:15297:15329  \"purchases[serviceId][purchaseId]\"\n                let _6 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_896_slot, expr_2)\n                let _245_slot := _6\n                let expr_898_slot := _245_slot\n                /// @src 0:15269:15329  \"Purchase storage purchase = purchases[serviceId][purchaseId]\"\n                let var_purchase_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_898_slot)\n                /// @src 0:15348:15355  \"service\"\n                let _246_slot := var_service_886_slot\n                let expr_901_slot := _246_slot\n                /// @src 0:15348:15364  \"service.provider\"\n                let _7 := add(expr_901_slot, 0)\n                let _8 := read_from_storage_split_offset_address(_7)\n                let expr_3 := _8\n                /// @src 0:15376:15377  \"0\"\n                let expr_4 := 0x00\n                /// @src 0:15368:15378  \"address(0)\"\n                let expr_5 := convert_rational_by_to_address(expr_4)\n                /// @src 0:15348:15378  \"service.provider != address(0)\"\n                let expr_6 := iszero(eq(cleanup_address(expr_3), cleanup_address(expr_5)))\n                /// @src 0:15340:15413  \"require(service.provider != address(0), \\\"Escrow: service does not exist\\\")\"\n                require_helper_stringliteral_8f3c(expr_6)\n                /// @src 0:15431:15439  \"purchase\"\n                let _249_slot := var_purchase_slot\n                let expr_912_slot := _249_slot\n                /// @src 0:15431:15448  \"purchase.disputed\"\n                let _9 := add(expr_912_slot, 2)\n                let _10 := read_from_storage_split_offset_bool(_9)\n                let expr_7 := _10\n                /// @src 0:15431:15470  \"purchase.disputed && !purchase.resolved\"\n                let expr_8 := expr_7\n                if expr_8\n                {\n                    /// @src 0:15453:15461  \"purchase\"\n                    let _252_slot := var_purchase_slot\n                    let expr_914_slot := _252_slot\n                    /// @src 0:15453:15470  \"purchase.resolved\"\n                    let _11 := add(expr_914_slot, 2)\n                    let _12 := read_from_storage_split_offset_2_bool(_11)\n                    let expr_9 := _12\n                    /// @src 0:15452:15470  \"!purchase.resolved\"\n                    let expr_10 := cleanup_bool(iszero(expr_9))\n                    /// @src 0:15431:15470  \"purchase.disputed && !purchase.resolved\"\n                    expr_8 := expr_10\n                }\n                /// @src 0:15423:15496  \"require(purchase.disputed && !purchase.resolved, \\\"Escrow: invalid state\\\")\"\n                require_helper_stringliteral_fe47(expr_8)\n                /// @src 0:15514:15523  \"msg.value\"\n                let expr_11 := callvalue()\n                /// @src 0:15527:15534  \"service\"\n                let _255_slot := var_service_886_slot\n                let expr_924_slot := _255_slot\n                /// @src 0:15527:15540  \"service.price\"\n                let _13 := add(expr_924_slot, 1)\n                let _14 := read_from_storage_split_offset_uint256(_13)\n                let expr_12 := _14\n                /// @src 0:15514:15540  \"msg.value >= service.price\"\n                let expr_13 := iszero(lt(cleanup_uint256(expr_11), cleanup_uint256(expr_12)))\n                /// @src 0:15506:15573  \"require(msg.value >= service.price, \\\"Escrow: arbiter bond too low\\\")\"\n                require_helper_stringliteral_669b(expr_13)\n                /// @src 0:15588:15599  \"refundBuyer\"\n                let _15 := var_refundBuyer\n                let expr_14 := _15\n                /// @src 0:15584:15979  \"if (refundBuyer) {...\"\n                switch expr_14\n                case 0 {\n                    /// @src 0:15898:15902  \"true\"\n                    let expr_15 := 0x01\n                    /// @src 0:15878:15886  \"purchase\"\n                    let _259_slot := var_purchase_slot\n                    let expr_965_slot := _259_slot\n                    /// @src 0:15878:15895  \"purchase.resolved\"\n                    let _16 := add(expr_965_slot, 2)\n                    /// @src 0:15878:15902  \"purchase.resolved = true\"\n                    update_storage_value_offset_2_bool_to_bool(_16, expr_15)\n                    /// @src 0:15933:15940  \"service\"\n                    let _261_slot := var_service_886_slot\n                    let expr_974_slot := _261_slot\n                    /// @src 0:15933:15949  \"service.provider\"\n                    let _17 := add(expr_974_slot, 0)\n                    let _18 := read_from_storage_split_offset_address(_17)\n                    let expr_16 := _18\n                    /// @src 0:15925:15950  \"payable(service.provider)\"\n                    let expr_17 := convert_address_to_address_payable(expr_16)\n                    /// @src 0:15952:15960  \"purchase\"\n                    let _264_slot := var_purchase_slot\n                    let expr_977_slot := _264_slot\n                    /// @src 0:15952:15967  \"purchase.amount\"\n                    let _19 := add(expr_977_slot, 1)\n                    let _20 := read_from_storage_split_offset_uint256(_19)\n                    let expr_18 := _20\n                    fun_sendETH(expr_17, expr_18)\n                }\n                default /// @src 0:15584:15979  \"if (refundBuyer) {...\"\n                {\n                    /// @src 0:15623:15629  \"stakes\"\n                    let _267_slot := 0x02\n                    let expr_932_slot := _267_slot\n                    /// @src 0:15630:15639  \"serviceId\"\n                    let _21 := var_serviceId\n                    let expr_19 := _21\n                    /// @src 0:15623:15640  \"stakes[serviceId]\"\n                    let _22 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_932_slot, expr_19)\n                    let _23 := read_from_storage_split_offset_uint256(_22)\n                    let expr_20 := _23\n                    /// @src 0:15644:15651  \"service\"\n                    let _271_slot := var_service_886_slot\n                    let expr_935_slot := _271_slot\n                    /// @src 0:15644:15657  \"service.price\"\n                    let _24 := add(expr_935_slot, 1)\n                    let _25 := read_from_storage_split_offset_uint256(_24)\n                    let expr_21 := _25\n                    /// @src 0:15623:15657  \"stakes[serviceId] >= service.price\"\n                    let expr_22 := iszero(lt(cleanup_uint256(expr_20), cleanup_uint256(expr_21)))\n                    /// @src 0:15615:15697  \"require(stakes[serviceId] >= service.price, \\\"Escrow: provider stake insufficient\\\")\"\n                    require_helper_stringliteral_619f(expr_22)\n                    /// @src 0:15732:15739  \"service\"\n                    let _274_slot := var_service_886_slot\n                    let expr_944_slot := _274_slot\n                    /// @src 0:15732:15745  \"service.price\"\n                    let _26 := add(expr_944_slot, 1)\n                    let _27 := read_from_storage_split_offset_uint256(_26)\n                    let expr_23 := _27\n                    /// @src 0:15711:15717  \"stakes\"\n                    let _277_slot := 0x02\n                    let expr_slot := _277_slot\n                    /// @src 0:15718:15727  \"serviceId\"\n                    let _28 := var_serviceId\n                    let expr_24 := _28\n                    /// @src 0:15711:15728  \"stakes[serviceId]\"\n                    let _29 := mapping_index_access_mapping_bytes32_uint256_of_bytes32(expr_slot, expr_24)\n                    /// @src 0:15711:15745  \"stakes[serviceId] -= service.price\"\n                    let _30 := read_from_storage_split_offset_uint256(_29)\n                    let expr_25 := checked_sub_uint256(_30, expr_23)\n                    update_storage_value_offset_uint256_to_uint256(_29, expr_25)\n                    /// @src 0:15779:15783  \"true\"\n                    let expr_26 := 0x01\n                    /// @src 0:15759:15767  \"purchase\"\n                    let _281_slot := var_purchase_slot\n                    let expr_948_slot := _281_slot\n                    /// @src 0:15759:15776  \"purchase.resolved\"\n                    let _31 := add(expr_948_slot, 2)\n                    /// @src 0:15759:15783  \"purchase.resolved = true\"\n                    update_storage_value_offset_2_bool_to_bool(_31, expr_26)\n                    /// @src 0:15814:15822  \"purchase\"\n                    let _283_slot := var_purchase_slot\n                    let expr_957_slot := _283_slot\n                    /// @src 0:15814:15828  \"purchase.buyer\"\n                    let _32 := add(expr_957_slot, 0)\n                    let _33 := read_from_storage_split_offset_address(_32)\n                    let expr_27 := _33\n                    /// @src 0:15806:15829  \"payable(purchase.buyer)\"\n                    let expr_28 := convert_address_to_address_payable(expr_27)\n                    /// @src 0:15831:15839  \"purchase\"\n                    let _286_slot := var_purchase_slot\n                    let expr_960_slot := _286_slot\n                    /// @src 0:15831:15846  \"purchase.amount\"\n                    let _34 := add(expr_960_slot, 1)\n                    let _35 := read_from_storage_split_offset_uint256(_34)\n                    let expr_29 := _35\n                    fun_sendETH(expr_28, expr_29)\n                }\n                /// @src 0:16094:16104  \"msg.sender\"\n                let expr_30 := caller()\n                /// @src 0:16086:16105  \"payable(msg.sender)\"\n                let expr_31 := convert_address_to_address_payable(expr_30)\n                /// @src 0:16107:16116  \"msg.value\"\n                let expr_32 := callvalue()\n                fun_sendETH(expr_31, expr_32)\n                /// @src 0:16149:16158  \"serviceId\"\n                let _36 := var_serviceId\n                let expr_33 := _36\n                /// @src 0:16160:16170  \"purchaseId\"\n                let _37 := var_purchaseId\n                let expr_34 := _37\n                /// @src 0:16172:16183  \"refundBuyer\"\n                let _38 := var_refundBuyer\n                let expr_35 := _38\n                /// @src 0:16185:16195  \"msg.sender\"\n                let expr_36 := caller()\n                /// @src 0:16133:16196  \"DisputeResolved(serviceId, purchaseId, refundBuyer, msg.sender)\"\n                let _39 := 0xbc15360fdbc18726032673554343b47ea8c03297136da385c28550253778baf5\n                let _40 := convert_bytes32_to_bytes32(expr_33)\n                let _41 := convert_uint256_to_uint256(expr_34)\n                let _42 := convert_address_to_address(expr_36)\n                let _43 := allocate_unbounded()\n                let _44 := abi_encode_bool(_43, expr_35)\n                log4(_43, sub(_44, _43), _39, _40, _41, _42)\n            }\n            /// @ast-id 1002 @src 0:15063:16203  \"function resolveDispute(...\"\n            function fun_resolveDispute(var_serviceId, var_purchaseId, var_refundBuyer)\n            {\n                modifier_nonReentrant_882(var_serviceId, var_purchaseId, var_refundBuyer)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function convert_contract_EscroDot_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function abi_encode_address_bytes32_uint256_bytes32(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_bytes32_to_bytes32(value1, add(headStart, 32))\n                abi_encode_uint256_to_uint256(value2, add(headStart, 64))\n                abi_encode_bytes32_to_bytes32(value3, add(headStart, 96))\n            }\n            /// @ast-id 1129 @src 0:17418:17636  \"function _claimDigest(bytes32 serviceId, uint256 purchaseId, bytes32 deliverableHash) internal view returns (bytes32) {...\"\n            function fun__claimDigest(var_serviceId, var_purchaseId, var_deliverableHash) -> var\n            {\n                /// @src 0:17527:17534  \"bytes32\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var := zero_bytes32\n                /// @src 0:17582:17586  \"this\"\n                let expr_address := address()\n                /// @src 0:17574:17587  \"address(this)\"\n                let expr := convert_contract_EscroDot_to_address(expr_address)\n                /// @src 0:17589:17598  \"serviceId\"\n                let _1 := var_serviceId\n                let expr_1 := _1\n                /// @src 0:17600:17610  \"purchaseId\"\n                let _2 := var_purchaseId\n                let expr_2 := _2\n                /// @src 0:17612:17627  \"deliverableHash\"\n                let _3 := var_deliverableHash\n                let expr_3 := _3\n                /// @src 0:17563:17628  \"abi.encode(address(this), serviceId, purchaseId, deliverableHash)\"\n                let expr_1125_mpos := allocate_unbounded()\n                let _4 := add(expr_1125_mpos, 0x20)\n                let _5 := abi_encode_address_bytes32_uint256_bytes32(_4, expr, expr_1, expr_2, expr_3)\n                mstore(expr_1125_mpos, sub(_5, add(expr_1125_mpos, 0x20)))\n                finalize_allocation(expr_1125_mpos, sub(_5, expr_1125_mpos))\n                /// @src 0:17553:17629  \"keccak256(abi.encode(address(this), serviceId, purchaseId, deliverableHash))\"\n                let expr_4 := keccak256(array_dataslot_bytes(expr_1125_mpos), array_length_bytes(expr_1125_mpos))\n                /// @src 0:17546:17629  \"return keccak256(abi.encode(address(this), serviceId, purchaseId, deliverableHash))\"\n                var := expr_4\n                leave\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function zero_value_for_split_address() -> ret\n            { ret := 0 }\n            /// @ast-id 103 @src 0:4054:4309  \"function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {...\"\n            function fun_recover(var_hash, var_signature_78_mpos) -> var\n            {\n                /// @src 0:4132:4139  \"address\"\n                let zero_address := zero_value_for_split_address()\n                var := zero_address\n                /// @src 0:4222:4226  \"hash\"\n                let _1 := var_hash\n                let expr := _1\n                /// @src 0:4228:4237  \"signature\"\n                let _306_mpos := var_signature_78_mpos\n                let expr_mpos := _306_mpos\n                /// @src 0:4211:4238  \"tryRecover(hash, signature)\"\n                let expr_93_component, expr_93_component_1, expr_93_component_2 := fun_tryRecover(expr, expr_mpos)\n                /// @src 0:4151:4238  \"(address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature)\"\n                let var_recovered := expr_93_component\n                let var_error := expr_93_component_1\n                let var_errorArg := expr_93_component_2\n                /// @src 0:4260:4265  \"error\"\n                let _2 := var_error\n                let expr_1 := _2\n                /// @src 0:4267:4275  \"errorArg\"\n                let _3 := var_errorArg\n                let expr_2 := _3\n                fun_throwError(expr_1, expr_2)\n                /// @src 0:4293:4302  \"recovered\"\n                let _4 := var_recovered\n                let expr_3 := _4\n                /// @src 0:4286:4302  \"return recovered\"\n                var := expr_3\n                leave\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function convert_address_payable_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_stringliteral_c5d2(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                end := add(pos, 0)\n            }\n            function abi_encode_packed_stringliteral_c5d2(pos) -> end\n            {\n                pos := abi_encode_stringliteral_c5d2(pos)\n                end := pos\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            function store_literal_in_memory_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(memPtr)\n            {\n                mstore(add(memPtr, 0), \"Escrow: ETH transfer failed\")\n            }\n            function abi_encode_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 27)\n                store_literal_in_memory_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_c822(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c(tail)\n            }\n            function require_helper_stringliteral_c822(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_c822(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 1152 @src 0:17724:17905  \"function _sendETH(address payable to, uint256 amount) private {...\"\n            function fun_sendETH(var_to, var_amount)\n            {\n                /// @src 0:17815:17817  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 0:17815:17822  \"to.call\"\n                let expr_1140_address := convert_address_payable_to_address(expr)\n                /// @src 0:17830:17836  \"amount\"\n                let _2 := var_amount\n                let expr_1 := _2\n                /// @src 0:17815:17837  \"to.call{value: amount}\"\n                let expr_1142_address := expr_1140_address\n                let expr_value := expr_1\n                /// @src 0:17815:17841  \"to.call{value: amount}(\\\"\\\")\"\n                let _3 := allocate_unbounded()\n                let _4 := sub(abi_encode_packed_stringliteral_c5d2(_3), _3)\n                let expr_1144_component := call(gas(), expr_1142_address, expr_value, _3, _4, 0, 0)\n                pop(extract_returndata())\n                /// @src 0:17796:17841  \"(bool success, ) = to.call{value: amount}(\\\"\\\")\"\n                let var_success := expr_1144_component\n                /// @src 0:17859:17866  \"success\"\n                let _5 := var_success\n                let expr_2 := _5\n                /// @src 0:17851:17898  \"require(success, \\\"Escrow: ETH transfer failed\\\")\"\n                require_helper_stringliteral_c822(expr_2)\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function zero_value_for_split_enum_RecoverError() -> ret\n            { ret := 0 }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function convert_uint256_to_bytes32(value) -> converted\n            {\n                converted := cleanup_bytes32(shift_left_0(cleanup_uint256(value)))\n            }\n            function zero_value_for_split_uint8() -> ret\n            { ret := 0 }\n            /// @ast-id 73 @src 0:2481:3247  \"function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {...\"\n            function fun_tryRecover(var_hash, var_signature_mpos) -> var, var_1, var_2\n            {\n                /// @src 0:2562:2569  \"address\"\n                let zero_t_address := zero_value_for_split_address()\n                var := zero_t_address\n                /// @src 0:2571:2583  \"RecoverError\"\n                let zero_t_enum_RecoverError := zero_value_for_split_enum_RecoverError()\n                var_1 := zero_t_enum_RecoverError\n                /// @src 0:2585:2592  \"bytes32\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var_2 := zero_bytes32\n                /// @src 0:2608:2617  \"signature\"\n                let _318_mpos := var_signature_mpos\n                let expr_35_mpos := _318_mpos\n                /// @src 0:2608:2624  \"signature.length\"\n                let expr := array_length_bytes(expr_35_mpos)\n                /// @src 0:2628:2630  \"65\"\n                let expr_1 := 0x41\n                /// @src 0:2608:2630  \"signature.length == 65\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:2604:3241  \"if (signature.length == 65) {...\"\n                switch expr_2\n                case 0 {\n                    /// @src 0:3163:3164  \"0\"\n                    let expr_3 := 0x00\n                    /// @src 0:3155:3165  \"address(0)\"\n                    let expr_4 := convert_rational_by_to_address(expr_3)\n                    /// @src 0:3154:3230  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    let expr_component := expr_4\n                    /// @src 0:3167:3202  \"RecoverError.InvalidSignatureLength\"\n                    let expr_5 := 2\n                    /// @src 0:3154:3230  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    let expr_component_1 := expr_5\n                    /// @src 0:3212:3221  \"signature\"\n                    let _319_mpos := var_signature_mpos\n                    let expr_65_mpos := _319_mpos\n                    /// @src 0:3212:3228  \"signature.length\"\n                    let expr_6 := array_length_bytes(expr_65_mpos)\n                    /// @src 0:3204:3229  \"bytes32(signature.length)\"\n                    let expr_7 := convert_uint256_to_bytes32(expr_6)\n                    /// @src 0:3154:3230  \"(address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    let expr_component_2 := expr_7\n                    /// @src 0:3147:3230  \"return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length))\"\n                    var := expr_component\n                    var_1 := expr_component_1\n                    var_2 := expr_component_2\n                    leave\n                }\n                default /// @src 0:2604:3241  \"if (signature.length == 65) {...\"\n                {\n                    /// @src 0:2646:2655  \"bytes32 r\"\n                    let var_r\n                    let zero_bytes32_1 := zero_value_for_split_bytes32()\n                    var_r := zero_bytes32_1\n                    /// @src 0:2669:2678  \"bytes32 s\"\n                    let var_s\n                    let zero_bytes32_2 := zero_value_for_split_bytes32()\n                    var_s := zero_bytes32_2\n                    /// @src 0:2692:2699  \"uint8 v\"\n                    let var_v\n                    let zero_uint8 := zero_value_for_split_uint8()\n                    var_v := zero_uint8\n                    /// @src 0:2891:3071  \"assembly {...\"\n                    var_r := mload(add(var_signature_mpos, 0x20))\n                    var_s := mload(add(var_signature_mpos, 0x40))\n                    var_v := byte(0, mload(add(var_signature_mpos, 0x60)))\n                    /// @src 0:3102:3106  \"hash\"\n                    let _1 := var_hash\n                    let expr_8 := _1\n                    /// @src 0:3108:3109  \"v\"\n                    let _2 := var_v\n                    let expr_9 := _2\n                    /// @src 0:3111:3112  \"r\"\n                    let _3 := var_r\n                    let expr_10 := _3\n                    /// @src 0:3114:3115  \"s\"\n                    let _4 := var_s\n                    let expr_11 := _4\n                    /// @src 0:3091:3116  \"tryRecover(hash, v, r, s)\"\n                    let expr_54_component, expr_54_component_1, expr_54_component_2 := fun_tryRecover_261(expr_8, expr_9, expr_10, expr_11)\n                    /// @src 0:3084:3116  \"return tryRecover(hash, v, r, s)\"\n                    var := expr_54_component\n                    var_1 := expr_54_component_1\n                    var_2 := expr_54_component_2\n                    leave\n                }\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function panic_error_0x21()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x21)\n                revert(0, 0x24)\n            }\n            function validator_assert_enum_RecoverError(value)\n            {\n                if iszero(lt(value, 4)) { panic_error_0x21() }\n            }\n            function cleanup_enum_RecoverError(value) -> cleaned\n            {\n                cleaned := value\n                validator_assert_enum_RecoverError(value)\n            }\n            function convert_bytes32_to_uint256(value) -> converted\n            {\n                converted := convert_uint256_to_uint256(shift_right_0_unsigned(value))\n            }\n            /// @ast-id 346 @src 0:7548:8080  \"function _throwError(RecoverError error, bytes32 errorArg) private pure {...\"\n            function fun_throwError(var_error, var_errorArg)\n            {\n                /// @src 0:7634:7639  \"error\"\n                let _1 := var_error\n                let expr := _1\n                /// @src 0:7643:7663  \"RecoverError.NoError\"\n                let expr_1 := 0\n                /// @src 0:7634:7663  \"error == RecoverError.NoError\"\n                let expr_2 := eq(cleanup_enum_RecoverError(expr), cleanup_enum_RecoverError(expr_1))\n                /// @src 0:7630:8074  \"if (error == RecoverError.NoError) {...\"\n                switch expr_2\n                case 0 {\n                    /// @src 0:7730:7735  \"error\"\n                    let _2 := var_error\n                    let expr_3 := _2\n                    /// @src 0:7739:7768  \"RecoverError.InvalidSignature\"\n                    let expr_4 := 1\n                    /// @src 0:7730:7768  \"error == RecoverError.InvalidSignature\"\n                    let expr_5 := eq(cleanup_enum_RecoverError(expr_3), cleanup_enum_RecoverError(expr_4))\n                    /// @src 0:7726:8074  \"if (error == RecoverError.InvalidSignature) {...\"\n                    switch expr_5\n                    case 0 {\n                        /// @src 0:7835:7840  \"error\"\n                        let _3 := var_error\n                        let expr_6 := _3\n                        /// @src 0:7844:7879  \"RecoverError.InvalidSignatureLength\"\n                        let expr_7 := 2\n                        /// @src 0:7835:7879  \"error == RecoverError.InvalidSignatureLength\"\n                        let expr_8 := eq(cleanup_enum_RecoverError(expr_6), cleanup_enum_RecoverError(expr_7))\n                        /// @src 0:7831:8074  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        switch expr_8\n                        case 0 {\n                            /// @src 0:7969:7974  \"error\"\n                            let _4 := var_error\n                            let expr_9 := _4\n                            /// @src 0:7978:8008  \"RecoverError.InvalidSignatureS\"\n                            let expr_10 := 3\n                            /// @src 0:7969:8008  \"error == RecoverError.InvalidSignatureS\"\n                            let expr_11 := eq(cleanup_enum_RecoverError(expr_9), cleanup_enum_RecoverError(expr_10))\n                            /// @src 0:7965:8074  \"if (error == RecoverError.InvalidSignatureS) {...\"\n                            if expr_11\n                            {\n                                /// @src 0:8054:8062  \"errorArg\"\n                                let _5 := var_errorArg\n                                let expr_12 := _5\n                                /// @src 0:8031:8063  \"ECDSAInvalidSignatureS(errorArg)\"\n                                let _6 := 0\n                                mstore(_6, shl(226, 0x35e2f383))\n                                let _7 := abi_encode_tuple_bytes32(add(_6, 4), expr_12)\n                                revert(_6, sub(_7, _6))\n                            }\n                        }\n                        default /// @src 0:7831:8074  \"if (error == RecoverError.InvalidSignatureLength) {...\"\n                        {\n                            /// @src 0:7938:7946  \"errorArg\"\n                            let _8 := var_errorArg\n                            let expr_13 := _8\n                            /// @src 0:7930:7947  \"uint256(errorArg)\"\n                            let expr_14 := convert_bytes32_to_uint256(expr_13)\n                            /// @src 0:7902:7948  \"ECDSAInvalidSignatureLength(uint256(errorArg))\"\n                            let _9 := 0\n                            mstore(_9, shl(224, 0xfce698f7))\n                            let _10 := abi_encode_uint256(add(_9, 4), expr_14)\n                            revert(_9, sub(_10, _9))\n                        }\n                    }\n                    default /// @src 0:7726:8074  \"if (error == RecoverError.InvalidSignature) {...\"\n                    {\n                        /// @src 0:7791:7814  \"ECDSAInvalidSignature()\"\n                        let _11 := 0\n                        mstore(_11, shl(224, 0xf645eedf))\n                        let _12 := abi_encode_tuple(add(_11, 4))\n                        revert(_11, sub(_12, _11))\n                    }\n                }\n                default /// @src 0:7630:8074  \"if (error == RecoverError.NoError) {...\"\n                {\n                    /// @src 0:7679:7686  \"return;\"\n                    leave\n                }\n            }\n            /// @src 0:8084:17942  \"contract EscroDot {...\"\n            function cleanup_rational_by_1(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by_1(value)))\n            }\n            function cleanup_uint8(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function abi_encode_uint8(value, pos)\n            {\n                mstore(pos, cleanup_uint8(value))\n            }\n            function abi_encode_bytes32_uint8_bytes32_bytes32(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 128)\n                abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n                abi_encode_uint8(value1, add(headStart, 32))\n                abi_encode_bytes32_to_bytes32(value2, add(headStart, 64))\n                abi_encode_bytes32_to_bytes32(value3, add(headStart, 96))\n            }\n            function revert_forward()\n            {\n                let pos := allocate_unbounded()\n                returndatacopy(pos, 0, returndatasize())\n                revert(pos, returndatasize())\n            }\n            function convert_rational_by_to_bytes32(value) -> converted\n            {\n                converted := cleanup_bytes32(shift_left_0(cleanup_t_rational_by_1(value)))\n            }\n            /// @ast-id 261 @src 0:5492:7022  \"function tryRecover(...\"\n            function fun_tryRecover_261(var_hash, var_v, var_r, var_s) -> var, var_1, var_2\n            {\n                /// @src 0:5618:5625  \"address\"\n                let zero_address := zero_value_for_split_address()\n                var := zero_address\n                /// @src 0:5627:5639  \"RecoverError\"\n                let zero_enum_RecoverError := zero_value_for_split_enum_RecoverError()\n                var_1 := zero_enum_RecoverError\n                /// @src 0:5641:5648  \"bytes32\"\n                let zero_bytes32 := zero_value_for_split_bytes32()\n                var_2 := zero_bytes32\n                /// @src 0:6546:6547  \"s\"\n                let _1 := var_s\n                let expr := _1\n                /// @src 0:6538:6548  \"uint256(s)\"\n                let expr_1 := convert_bytes32_to_uint256(expr)\n                /// @src 0:6551:6617  \"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\"\n                let expr_2 := 0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n                /// @src 0:6538:6617  \"uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\"\n                let expr_3 := gt(cleanup_uint256(expr_1), convert_t_rational_by_to_t_uint256(expr_2))\n                /// @src 0:6534:6698  \"if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {...\"\n                if expr_3\n                {\n                    /// @src 0:6649:6650  \"0\"\n                    let expr_4 := 0x00\n                    /// @src 0:6641:6651  \"address(0)\"\n                    let expr_5 := convert_rational_by_to_address(expr_4)\n                    /// @src 0:6640:6687  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                    let expr_component := expr_5\n                    /// @src 0:6653:6683  \"RecoverError.InvalidSignatureS\"\n                    let expr_6 := 3\n                    /// @src 0:6640:6687  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                    let expr_218_component := expr_6\n                    /// @src 0:6685:6686  \"s\"\n                    let _2 := var_s\n                    let expr_7 := _2\n                    /// @src 0:6640:6687  \"(address(0), RecoverError.InvalidSignatureS, s)\"\n                    let expr_218_component_1 := expr_7\n                    /// @src 0:6633:6687  \"return (address(0), RecoverError.InvalidSignatureS, s)\"\n                    var := expr_component\n                    var_1 := expr_218_component\n                    var_2 := expr_218_component_1\n                    leave\n                }\n                /// @src 0:6819:6823  \"hash\"\n                let _3 := var_hash\n                let expr_8 := _3\n                /// @src 0:6825:6826  \"v\"\n                let _4 := var_v\n                let expr_9 := _4\n                /// @src 0:6828:6829  \"r\"\n                let _5 := var_r\n                let expr_10 := _5\n                /// @src 0:6831:6832  \"s\"\n                let _6 := var_s\n                let expr_11 := _6\n                /// @src 0:6809:6833  \"ecrecover(hash, v, r, s)\"\n                let _7 := allocate_unbounded()\n                let _8 := abi_encode_bytes32_uint8_bytes32_bytes32(_7, expr_8, expr_9, expr_10, expr_11)\n                mstore(0, 0)\n                let _9 := staticcall(gas(), 1, _7, sub(_8, _7), 0, 32)\n                if iszero(_9) { revert_forward() }\n                let expr_12 := shift_left_0(mload(0))\n                /// @src 0:6792:6833  \"address signer = ecrecover(hash, v, r, s)\"\n                let var_signer := expr_12\n                /// @src 0:6847:6853  \"signer\"\n                let _10 := var_signer\n                let expr_13 := _10\n                /// @src 0:6865:6866  \"0\"\n                let expr_14 := 0x00\n                /// @src 0:6857:6867  \"address(0)\"\n                let expr_15 := convert_rational_by_to_address(expr_14)\n                /// @src 0:6847:6867  \"signer == address(0)\"\n                let expr_16 := eq(cleanup_address(expr_13), cleanup_address(expr_15))\n                /// @src 0:6843:6956  \"if (signer == address(0)) {...\"\n                if expr_16\n                {\n                    /// @src 0:6899:6900  \"0\"\n                    let expr_17 := 0x00\n                    /// @src 0:6891:6901  \"address(0)\"\n                    let expr_18 := convert_rational_by_to_address(expr_17)\n                    /// @src 0:6890:6945  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    let expr_247_component := expr_18\n                    /// @src 0:6903:6932  \"RecoverError.InvalidSignature\"\n                    let expr_19 := 1\n                    /// @src 0:6890:6945  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    let expr_247_component_1 := expr_19\n                    /// @src 0:6942:6943  \"0\"\n                    let expr_20 := 0x00\n                    /// @src 0:6934:6944  \"bytes32(0)\"\n                    let expr_21 := convert_rational_by_to_bytes32(expr_20)\n                    /// @src 0:6890:6945  \"(address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    let expr_247_component_2 := expr_21\n                    /// @src 0:6883:6945  \"return (address(0), RecoverError.InvalidSignature, bytes32(0))\"\n                    var := expr_247_component\n                    var_1 := expr_247_component_1\n                    var_2 := expr_247_component_2\n                    leave\n                }\n                /// @src 0:6974:6980  \"signer\"\n                let _11 := var_signer\n                let expr_22 := _11\n                /// @src 0:6973:7015  \"(signer, RecoverError.NoError, bytes32(0))\"\n                let expr_258_component := expr_22\n                /// @src 0:6982:7002  \"RecoverError.NoError\"\n                let expr_23 := 0\n                /// @src 0:6973:7015  \"(signer, RecoverError.NoError, bytes32(0))\"\n                let expr_258_component_1 := expr_23\n                /// @src 0:7012:7013  \"0\"\n                let expr_24 := 0x00\n                /// @src 0:7004:7014  \"bytes32(0)\"\n                let expr_25 := convert_rational_by_to_bytes32(expr_24)\n                /// @src 0:6973:7015  \"(signer, RecoverError.NoError, bytes32(0))\"\n                let expr_258_component_2 := expr_25\n                /// @src 0:6966:7015  \"return (signer, RecoverError.NoError, bytes32(0))\"\n                var := expr_258_component\n                var_1 := expr_258_component_1\n                var_2 := expr_258_component_2\n                leave\n            }\n        }\n        data \".metadata\" hex\"a2646970667358221220f2d1600cc82ed300f02929abe59e5c6fa6e746acad82eb2fdb7b82604f2ae5d964736f6c634300081c0033\"\n    }\n}\n",
					"hash": "2c96058970b3d27d3c8fc70ba7f9265b0a73af8a353c71477751f3ec69495467",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"EscroDotLite.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "EscroDotLite.sol",
					"exportedSymbols": {
						"ECDSA": [
							347
						],
						"EscroDot": [
							1157
						]
					},
					"id": 1158,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".28"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "58:636:0",
								"text": " @title EscroDot – minimal escrow & staking framework for AI‑agent services\n @author Mike Liu (mikelxc)\n @title EscroDot – AI‑Agent Escrow (v0.4 – Buyer‑Signed Claim + Open Arbiter)\n • Buyer‑signed claim: `claimPayment()` is called by the provider, supplying the buyer's\n   signature. Contract verifies and releases payment.\n • Open Dispute Resolution: Any address can become an arbiter – it just needs to deposit a\n   stake ≥ purchase value when calling `resolveDispute()`. (For brevity we return the stake in\n   the same tx; extend with lock‑and‑slash logic in later versions.)"
							},
							"fullyImplemented": true,
							"id": 347,
							"linearizedBaseContracts": [
								347
							],
							"name": "ECDSA",
							"nameLocation": "704:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 7,
									"members": [
										{
											"id": 3,
											"name": "NoError",
											"nameLocation": "744:7:0",
											"nodeType": "EnumValue",
											"src": "744:7:0"
										},
										{
											"id": 4,
											"name": "InvalidSignature",
											"nameLocation": "761:16:0",
											"nodeType": "EnumValue",
											"src": "761:16:0"
										},
										{
											"id": 5,
											"name": "InvalidSignatureLength",
											"nameLocation": "787:22:0",
											"nodeType": "EnumValue",
											"src": "787:22:0"
										},
										{
											"id": 6,
											"name": "InvalidSignatureS",
											"nameLocation": "819:17:0",
											"nodeType": "EnumValue",
											"src": "819:17:0"
										}
									],
									"name": "RecoverError",
									"nameLocation": "721:12:0",
									"nodeType": "EnumDefinition",
									"src": "716:126:0"
								},
								{
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "848:63:0",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 10,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "922:21:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 9,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "943:2:0"
									},
									"src": "916:30:0"
								},
								{
									"documentation": {
										"id": 11,
										"nodeType": "StructuredDocumentation",
										"src": "952:60:0",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 15,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "1023:27:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 13,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "1059:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 15,
												"src": "1051:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 12,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1051:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1050:16:0"
									},
									"src": "1017:50:0"
								},
								{
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "1073:85:0",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 20,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "1169:22:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 19,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1200:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1192:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 17,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1192:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1191:11:0"
									},
									"src": "1163:40:0"
								},
								{
									"body": {
										"id": 72,
										"nodeType": "Block",
										"src": "2594:653:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 38,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 35,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 25,
															"src": "2608:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 36,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2618:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2608:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 37,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2628:2:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2608:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 70,
													"nodeType": "Block",
													"src": "3133:108:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 59,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3163:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 58,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3155:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 57,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3155:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 60,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3155:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 61,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 7,
																			"src": "3167:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 62,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "3180:22:0",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 5,
																		"src": "3167:35:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$7",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 65,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 25,
																					"src": "3212:9:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 66,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "3222:6:0",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "3212:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 64,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3204:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 63,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "3204:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 67,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3204:25:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 68,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3154:76:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 34,
															"id": 69,
															"nodeType": "Return",
															"src": "3147:83:0"
														}
													]
												},
												"id": 71,
												"nodeType": "IfStatement",
												"src": "2604:637:0",
												"trueBody": {
													"id": 56,
													"nodeType": "Block",
													"src": "2632:495:0",
													"statements": [
														{
															"assignments": [
																40
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 40,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2654:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 56,
																	"src": "2646:9:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 39,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2646:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 41,
															"nodeType": "VariableDeclarationStatement",
															"src": "2646:9:0"
														},
														{
															"assignments": [
																43
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 43,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2677:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 56,
																	"src": "2669:9:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 42,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2669:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 44,
															"nodeType": "VariableDeclarationStatement",
															"src": "2669:9:0"
														},
														{
															"assignments": [
																46
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 46,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2698:1:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 56,
																	"src": "2692:7:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 45,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2692:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 47,
															"nodeType": "VariableDeclarationStatement",
															"src": "2692:7:0"
														},
														{
															"AST": {
																"nativeSrc": "2900:171:0",
																"nodeType": "YulBlock",
																"src": "2900:171:0",
																"statements": [
																	{
																		"nativeSrc": "2918:32:0",
																		"nodeType": "YulAssignment",
																		"src": "2918:32:0",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2933:9:0",
																							"nodeType": "YulIdentifier",
																							"src": "2933:9:0"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2944:4:0",
																							"nodeType": "YulLiteral",
																							"src": "2944:4:0",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2929:3:0",
																						"nodeType": "YulIdentifier",
																						"src": "2929:3:0"
																					},
																					"nativeSrc": "2929:20:0",
																					"nodeType": "YulFunctionCall",
																					"src": "2929:20:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2923:5:0",
																				"nodeType": "YulIdentifier",
																				"src": "2923:5:0"
																			},
																			"nativeSrc": "2923:27:0",
																			"nodeType": "YulFunctionCall",
																			"src": "2923:27:0"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2918:1:0",
																				"nodeType": "YulIdentifier",
																				"src": "2918:1:0"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2967:32:0",
																		"nodeType": "YulAssignment",
																		"src": "2967:32:0",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2982:9:0",
																							"nodeType": "YulIdentifier",
																							"src": "2982:9:0"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2993:4:0",
																							"nodeType": "YulLiteral",
																							"src": "2993:4:0",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2978:3:0",
																						"nodeType": "YulIdentifier",
																						"src": "2978:3:0"
																					},
																					"nativeSrc": "2978:20:0",
																					"nodeType": "YulFunctionCall",
																					"src": "2978:20:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2972:5:0",
																				"nodeType": "YulIdentifier",
																				"src": "2972:5:0"
																			},
																			"nativeSrc": "2972:27:0",
																			"nodeType": "YulFunctionCall",
																			"src": "2972:27:0"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2967:1:0",
																				"nodeType": "YulIdentifier",
																				"src": "2967:1:0"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3016:41:0",
																		"nodeType": "YulAssignment",
																		"src": "3016:41:0",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3026:1:0",
																					"nodeType": "YulLiteral",
																					"src": "3026:1:0",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "3039:9:0",
																									"nodeType": "YulIdentifier",
																									"src": "3039:9:0"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "3050:4:0",
																									"nodeType": "YulLiteral",
																									"src": "3050:4:0",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "3035:3:0",
																								"nodeType": "YulIdentifier",
																								"src": "3035:3:0"
																							},
																							"nativeSrc": "3035:20:0",
																							"nodeType": "YulFunctionCall",
																							"src": "3035:20:0"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "3029:5:0",
																						"nodeType": "YulIdentifier",
																						"src": "3029:5:0"
																					},
																					"nativeSrc": "3029:27:0",
																					"nodeType": "YulFunctionCall",
																					"src": "3029:27:0"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "3021:4:0",
																				"nodeType": "YulIdentifier",
																				"src": "3021:4:0"
																			},
																			"nativeSrc": "3021:36:0",
																			"nodeType": "YulFunctionCall",
																			"src": "3021:36:0"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "3016:1:0",
																				"nodeType": "YulIdentifier",
																				"src": "3016:1:0"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 40,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2918:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 43,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2967:1:0",
																	"valueSize": 1
																},
																{
																	"declaration": 25,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2933:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 25,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2982:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 25,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3039:9:0",
																	"valueSize": 1
																},
																{
																	"declaration": 46,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "3016:1:0",
																	"valueSize": 1
																}
															],
															"id": 48,
															"nodeType": "InlineAssembly",
															"src": "2891:180:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 50,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 23,
																		"src": "3102:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 51,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 46,
																		"src": "3108:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 52,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 40,
																		"src": "3111:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 53,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 43,
																		"src": "3114:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 49,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		73,
																		153,
																		261
																	],
																	"referencedDeclaration": 261,
																	"src": "3091:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3091:25:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 34,
															"id": 55,
															"nodeType": "Return",
															"src": "3084:32:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1209:1267:0",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 73,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2490:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2509:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2501:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 22,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2501:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 25,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2528:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2515:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 24,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2515:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2500:38:0"
									},
									"returnParameters": {
										"id": 34,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2562:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2562:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2571:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$7",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 30,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 29,
														"name": "RecoverError",
														"nameLocations": [
															"2571:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 7,
														"src": "2571:12:0"
													},
													"referencedDeclaration": 7,
													"src": "2571:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 33,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2585:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 32,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2585:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2561:32:0"
									},
									"scope": 347,
									"src": "2481:766:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 102,
										"nodeType": "Block",
										"src": "4141:168:0",
										"statements": [
											{
												"assignments": [
													84,
													87,
													89
												],
												"declarations": [
													{
														"constant": false,
														"id": 84,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4160:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "4152:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 83,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4152:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 87,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4184:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "4171:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 86,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 85,
																"name": "RecoverError",
																"nameLocations": [
																	"4171:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 7,
																"src": "4171:12:0"
															},
															"referencedDeclaration": 7,
															"src": "4171:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 89,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4199:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 102,
														"src": "4191:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 88,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4191:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 94,
												"initialValue": {
													"arguments": [
														{
															"id": 91,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "4222:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 92,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 78,
															"src": "4228:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 90,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															73,
															153,
															261
														],
														"referencedDeclaration": 73,
														"src": "4211:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 93,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4211:27:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4151:87:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 96,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 87,
															"src": "4260:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 97,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 89,
															"src": "4267:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 95,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "4248:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$7_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4248:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "4248:28:0"
											},
											{
												"expression": {
													"id": 100,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 84,
													"src": "4293:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 82,
												"id": 101,
												"nodeType": "Return",
												"src": "4286:16:0"
											}
										]
									},
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "3253:796:0",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4063:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4079:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "4071:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 75,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4071:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "4098:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "4085:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 77,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4085:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4070:38:0"
									},
									"returnParameters": {
										"id": 82,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 81,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 103,
												"src": "4132:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 80,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4132:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4131:9:0"
									},
									"scope": 347,
									"src": "4054:255:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 152,
										"nodeType": "Block",
										"src": "4637:342:0",
										"statements": [
											{
												"id": 151,
												"nodeType": "UncheckedBlock",
												"src": "4647:326:0",
												"statements": [
													{
														"assignments": [
															121
														],
														"declarations": [
															{
																"constant": false,
																"id": 121,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4679:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 151,
																"src": "4671:9:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 120,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4671:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 128,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 122,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 110,
																"src": "4683:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 125,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4696:66:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 124,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4688:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 123,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4688:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 126,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4688:75:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4683:80:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4671:92:0"
													},
													{
														"assignments": [
															130
														],
														"declarations": [
															{
																"constant": false,
																"id": 130,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4880:1:0",
																"nodeType": "VariableDeclaration",
																"scope": 151,
																"src": "4874:7:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 129,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4874:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 143,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 138,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 135,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 110,
																							"src": "4899:2:0",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 134,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4891:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 133,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4891:7:0",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 136,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4891:11:0",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 137,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4906:3:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4891:18:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 139,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4890:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 140,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4913:2:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4890:25:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 132,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4884:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 131,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4884:5:0",
																	"typeDescriptions": {}
																}
															},
															"id": 142,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4884:32:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4874:42:0"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 145,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 106,
																	"src": "4948:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 146,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "4954:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 147,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 108,
																	"src": "4957:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 148,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 121,
																	"src": "4960:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 144,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	73,
																	153,
																	261
																],
																"referencedDeclaration": 261,
																"src": "4937:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 149,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4937:25:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 119,
														"id": 150,
														"nodeType": "Return",
														"src": "4930:32:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 104,
										"nodeType": "StructuredDocumentation",
										"src": "4315:205:0",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 153,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4534:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4553:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4545:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 105,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4545:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4567:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4559:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 107,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4559:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 110,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4578:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4570:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4570:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4544:37:0"
									},
									"returnParameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4605:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 112,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4605:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 116,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4614:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$7",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 115,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 114,
														"name": "RecoverError",
														"nameLocations": [
															"4614:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 7,
														"src": "4614:12:0"
													},
													"referencedDeclaration": 7,
													"src": "4614:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4628:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 117,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4628:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4604:32:0"
									},
									"scope": 347,
									"src": "4525:454:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 185,
										"nodeType": "Block",
										"src": "5192:164:0",
										"statements": [
											{
												"assignments": [
													166,
													169,
													171
												],
												"declarations": [
													{
														"constant": false,
														"id": 166,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "5211:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 185,
														"src": "5203:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 165,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5203:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 169,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "5235:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 185,
														"src": "5222:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 168,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 167,
																"name": "RecoverError",
																"nameLocations": [
																	"5222:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 7,
																"src": "5222:12:0"
															},
															"referencedDeclaration": 7,
															"src": "5222:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 171,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "5250:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 185,
														"src": "5242:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 170,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "5242:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 177,
												"initialValue": {
													"arguments": [
														{
															"id": 173,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "5273:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 174,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "5279:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 175,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 160,
															"src": "5282:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 172,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															73,
															153,
															261
														],
														"referencedDeclaration": 153,
														"src": "5262:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5262:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5202:83:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 179,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "5307:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 180,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 171,
															"src": "5314:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 178,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "5295:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$7_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 181,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5295:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 182,
												"nodeType": "ExpressionStatement",
												"src": "5295:28:0"
											},
											{
												"expression": {
													"id": 183,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 166,
													"src": "5340:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 164,
												"id": 184,
												"nodeType": "Return",
												"src": "5333:16:0"
											}
										]
									},
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "4985:116:0",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "5115:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5131:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "5123:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 155,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5123:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5145:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "5137:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 157,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5137:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "5156:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "5148:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 159,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5148:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5122:37:0"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 163,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 186,
												"src": "5183:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 162,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5183:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5182:9:0"
									},
									"scope": 347,
									"src": "5106:250:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 260,
										"nodeType": "Block",
										"src": "5650:1372:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 207,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 195,
																"src": "6546:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 206,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6538:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 205,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6538:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 208,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6538:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 209,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6551:66:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6538:79:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 221,
												"nodeType": "IfStatement",
												"src": "6534:164:0",
												"trueBody": {
													"id": 220,
													"nodeType": "Block",
													"src": "6619:79:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 213,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6649:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 212,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6641:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 211,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6641:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 214,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6641:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 215,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 7,
																			"src": "6653:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 216,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6666:17:0",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 6,
																		"src": "6653:30:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$7",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 217,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 195,
																		"src": "6685:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 218,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6640:47:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 204,
															"id": 219,
															"nodeType": "Return",
															"src": "6633:54:0"
														}
													]
												}
											},
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6800:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 260,
														"src": "6792:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 222,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6792:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 230,
												"initialValue": {
													"arguments": [
														{
															"id": 225,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 189,
															"src": "6819:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 226,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 191,
															"src": "6825:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 227,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 193,
															"src": "6828:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 228,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 195,
															"src": "6831:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 224,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6809:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 229,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6809:24:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6792:41:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 236,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 231,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "6847:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 234,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6865:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 233,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6857:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 232,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6857:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 235,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6857:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6847:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 250,
												"nodeType": "IfStatement",
												"src": "6843:113:0",
												"trueBody": {
													"id": 249,
													"nodeType": "Block",
													"src": "6869:87:0",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 239,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6899:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 238,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6891:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 237,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6891:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 240,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6891:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 241,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 7,
																			"src": "6903:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 242,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6916:16:0",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 4,
																		"src": "6903:29:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$7",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 245,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6942:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 244,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6934:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 243,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6934:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 246,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6934:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 247,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6890:55:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 204,
															"id": 248,
															"nodeType": "Return",
															"src": "6883:62:0"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 251,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 223,
															"src": "6974:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 252,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "6982:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 253,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6995:7:0",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 3,
															"src": "6982:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7012:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 255,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7004:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 254,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "7004:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 257,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7004:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 258,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6973:42:0",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 204,
												"id": 259,
												"nodeType": "Return",
												"src": "6966:49:0"
											}
										]
									},
									"documentation": {
										"id": 187,
										"nodeType": "StructuredDocumentation",
										"src": "5362:125:0",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5501:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 189,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5529:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5521:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 188,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5521:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 191,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5549:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5543:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 190,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5543:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 193,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5568:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5560:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 192,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5560:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5587:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5579:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 194,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5579:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5511:83:0"
									},
									"returnParameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 198,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5618:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 197,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5618:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5627:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$7",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 200,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 199,
														"name": "RecoverError",
														"nameLocations": [
															"5627:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 7,
														"src": "5627:12:0"
													},
													"referencedDeclaration": 7,
													"src": "5627:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 203,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "5641:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 202,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5641:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5617:32:0"
									},
									"scope": 347,
									"src": "5492:1530:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 296,
										"nodeType": "Block",
										"src": "7249:166:0",
										"statements": [
											{
												"assignments": [
													276,
													279,
													281
												],
												"declarations": [
													{
														"constant": false,
														"id": 276,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "7268:9:0",
														"nodeType": "VariableDeclaration",
														"scope": 296,
														"src": "7260:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 275,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7260:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 279,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "7292:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 296,
														"src": "7279:18:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 278,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 277,
																"name": "RecoverError",
																"nameLocations": [
																	"7279:12:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 7,
																"src": "7279:12:0"
															},
															"referencedDeclaration": 7,
															"src": "7279:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 281,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "7307:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 296,
														"src": "7299:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 280,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "7299:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 288,
												"initialValue": {
													"arguments": [
														{
															"id": 283,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 264,
															"src": "7330:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 284,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 266,
															"src": "7336:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 285,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 268,
															"src": "7339:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 286,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 270,
															"src": "7342:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 282,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															73,
															153,
															261
														],
														"referencedDeclaration": 261,
														"src": "7319:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 287,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7319:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$7_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7259:85:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 290,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 279,
															"src": "7366:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 291,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 281,
															"src": "7373:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 289,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 346,
														"src": "7354:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$7_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7354:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 293,
												"nodeType": "ExpressionStatement",
												"src": "7354:28:0"
											},
											{
												"expression": {
													"id": 294,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 276,
													"src": "7399:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 274,
												"id": 295,
												"nodeType": "Return",
												"src": "7392:16:0"
											}
										]
									},
									"documentation": {
										"id": 262,
										"nodeType": "StructuredDocumentation",
										"src": "7028:122:0",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 297,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "7164:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 264,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "7180:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "7172:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 263,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7172:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "7192:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "7186:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 265,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "7186:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "7203:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "7195:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 267,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7195:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "7214:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "7206:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 269,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7206:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7171:45:0"
									},
									"returnParameters": {
										"id": 274,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 273,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 297,
												"src": "7240:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 272,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7240:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7239:9:0"
									},
									"scope": 347,
									"src": "7155:260:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 345,
										"nodeType": "Block",
										"src": "7620:460:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 309,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 306,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "7634:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 307,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 7,
															"src": "7643:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 308,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7656:7:0",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 3,
														"src": "7643:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7634:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$7",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 315,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 312,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 301,
															"src": "7730:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 313,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 7,
																"src": "7739:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 314,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7752:16:0",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4,
															"src": "7739:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7730:38:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$7",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 323,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 320,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 301,
																"src": "7835:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$7",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 321,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "7844:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 322,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7857:22:0",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 5,
																"src": "7844:35:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$7",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7835:44:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$7",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 335,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 332,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "7969:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$7",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 333,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 7,
																		"src": "7978:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$7_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7991:17:0",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 6,
																	"src": "7978:30:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$7",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7969:39:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 341,
															"nodeType": "IfStatement",
															"src": "7965:109:0",
															"trueBody": {
																"id": 340,
																"nodeType": "Block",
																"src": "8010:64:0",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 337,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 303,
																					"src": "8054:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 336,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 20,
																				"src": "8031:22:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$_t_error_$",
																					"typeString": "function (bytes32) pure returns (error)"
																				}
																			},
																			"id": 338,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8031:32:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 339,
																		"nodeType": "RevertStatement",
																		"src": "8024:39:0"
																	}
																]
															}
														},
														"id": 342,
														"nodeType": "IfStatement",
														"src": "7831:243:0",
														"trueBody": {
															"id": 331,
															"nodeType": "Block",
															"src": "7881:78:0",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 327,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 303,
																						"src": "7938:8:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 326,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7930:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 325,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7930:7:0",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 328,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7930:17:0",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 324,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 15,
																			"src": "7902:27:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (uint256) pure returns (error)"
																			}
																		},
																		"id": 329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7902:46:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 330,
																	"nodeType": "RevertStatement",
																	"src": "7895:53:0"
																}
															]
														}
													},
													"id": 343,
													"nodeType": "IfStatement",
													"src": "7726:348:0",
													"trueBody": {
														"id": 319,
														"nodeType": "Block",
														"src": "7770:55:0",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 316,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 10,
																		"src": "7791:21:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																			"typeString": "function () pure returns (error)"
																		}
																	},
																	"id": 317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7791:23:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 318,
																"nodeType": "RevertStatement",
																"src": "7784:30:0"
															}
														]
													}
												},
												"id": 344,
												"nodeType": "IfStatement",
												"src": "7630:444:0",
												"trueBody": {
													"id": 311,
													"nodeType": "Block",
													"src": "7665:55:0",
													"statements": [
														{
															"functionReturnParameters": 305,
															"id": 310,
															"nodeType": "Return",
															"src": "7679:7:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 298,
										"nodeType": "StructuredDocumentation",
										"src": "7421:122:0",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 346,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7557:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7582:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7569:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$7",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 300,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 299,
														"name": "RecoverError",
														"nameLocations": [
															"7569:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 7,
														"src": "7569:12:0"
													},
													"referencedDeclaration": 7,
													"src": "7569:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$7",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7597:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 346,
												"src": "7589:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 302,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7589:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7568:38:0"
									},
									"returnParameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7620:0:0"
									},
									"scope": 347,
									"src": "7548:532:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1158,
							"src": "696:7386:0",
							"usedErrors": [
								10,
								15,
								20
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "EscroDot",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1157,
							"linearizedBaseContracts": [
								1157
							],
							"name": "EscroDot",
							"nameLocation": "8093:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 350,
									"libraryName": {
										"id": 348,
										"name": "ECDSA",
										"nameLocations": [
											"8114:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 347,
										"src": "8114:5:0"
									},
									"nodeType": "UsingForDirective",
									"src": "8108:24:0",
									"typeName": {
										"id": 349,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "8124:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									}
								},
								{
									"constant": false,
									"documentation": {
										"id": 351,
										"nodeType": "StructuredDocumentation",
										"src": "8383:43:0",
										"text": "@notice Map: serviceId ⇒ Service data"
									},
									"functionSelector": "0a790eb7",
									"id": 356,
									"mutability": "mutable",
									"name": "services",
									"nameLocation": "8466:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 1157,
									"src": "8431:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
										"typeString": "mapping(bytes32 => struct EscroDot.Service)"
									},
									"typeName": {
										"id": 355,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 352,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "8439:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "8431:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
											"typeString": "mapping(bytes32 => struct EscroDot.Service)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 354,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 353,
												"name": "Service",
												"nameLocations": [
													"8450:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 387,
												"src": "8450:7:0"
											},
											"referencedDeclaration": 387,
											"src": "8450:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
												"typeString": "struct EscroDot.Service"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "8481:63:0",
										"text": "@notice List of all serviceIds (for off‑chain pagination)"
									},
									"functionSelector": "69d26933",
									"id": 360,
									"mutability": "mutable",
									"name": "serviceIds",
									"nameLocation": "8566:10:0",
									"nodeType": "VariableDeclaration",
									"scope": 1157,
									"src": "8549:27:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
										"typeString": "bytes32[]"
									},
									"typeName": {
										"baseType": {
											"id": 358,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "8549:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"id": 359,
										"nodeType": "ArrayTypeName",
										"src": "8549:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
											"typeString": "bytes32[]"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 361,
										"nodeType": "StructuredDocumentation",
										"src": "8583:52:0",
										"text": "@notice Map: serviceId ⇒ provider's collateral"
									},
									"functionSelector": "8fee6407",
									"id": 365,
									"mutability": "mutable",
									"name": "stakes",
									"nameLocation": "8675:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 1157,
									"src": "8640:41:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
										"typeString": "mapping(bytes32 => uint256)"
									},
									"typeName": {
										"id": 364,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 362,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "8648:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "8640:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
											"typeString": "mapping(bytes32 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 363,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "8659:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 366,
										"nodeType": "StructuredDocumentation",
										"src": "8688:54:0",
										"text": "@notice Map: serviceId ⇒ purchaseId ⇒ Purchase"
									},
									"functionSelector": "37e5f34b",
									"id": 373,
									"mutability": "mutable",
									"name": "purchases",
									"nameLocation": "8803:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 1157,
									"src": "8747:65:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$_$",
										"typeString": "mapping(bytes32 => mapping(uint256 => struct EscroDot.Purchase))"
									},
									"typeName": {
										"id": 372,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 367,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "8755:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "8747:48:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$_$",
											"typeString": "mapping(bytes32 => mapping(uint256 => struct EscroDot.Purchase))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 371,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 368,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "8774:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "8766:28:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$",
												"typeString": "mapping(uint256 => struct EscroDot.Purchase)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 370,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 369,
													"name": "Purchase",
													"nameLocations": [
														"8785:8:0"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 398,
													"src": "8785:8:0"
												},
												"referencedDeclaration": 398,
												"src": "8785:8:0",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
													"typeString": "struct EscroDot.Purchase"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"documentation": {
										"id": 374,
										"nodeType": "StructuredDocumentation",
										"src": "8819:47:0",
										"text": "@notice Map: serviceId ⇒ next purchase ID"
									},
									"functionSelector": "e8795282",
									"id": 378,
									"mutability": "mutable",
									"name": "nextPurchaseIds",
									"nameLocation": "8906:15:0",
									"nodeType": "VariableDeclaration",
									"scope": 1157,
									"src": "8871:50:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
										"typeString": "mapping(bytes32 => uint256)"
									},
									"typeName": {
										"id": 377,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 375,
											"name": "bytes32",
											"nodeType": "ElementaryTypeName",
											"src": "8879:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											}
										},
										"nodeType": "Mapping",
										"src": "8871:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
											"typeString": "mapping(bytes32 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 376,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "8890:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"canonicalName": "EscroDot.Service",
									"id": 387,
									"members": [
										{
											"constant": false,
											"id": 380,
											"mutability": "mutable",
											"name": "provider",
											"nameLocation": "8961:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 387,
											"src": "8953:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 379,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "8953:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 382,
											"mutability": "mutable",
											"name": "price",
											"nameLocation": "8987:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 387,
											"src": "8979:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 381,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "8979:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 384,
											"mutability": "mutable",
											"name": "description",
											"nameLocation": "9009:11:0",
											"nodeType": "VariableDeclaration",
											"scope": 387,
											"src": "9002:18:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 383,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "9002:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 386,
											"mutability": "mutable",
											"name": "gateway",
											"nameLocation": "9037:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 387,
											"src": "9030:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 385,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "9030:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Service",
									"nameLocation": "8935:7:0",
									"nodeType": "StructDefinition",
									"scope": 1157,
									"src": "8928:123:0",
									"visibility": "public"
								},
								{
									"canonicalName": "EscroDot.Purchase",
									"id": 398,
									"members": [
										{
											"constant": false,
											"id": 389,
											"mutability": "mutable",
											"name": "buyer",
											"nameLocation": "9091:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 398,
											"src": "9083:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 388,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "9083:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 391,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "9114:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 398,
											"src": "9106:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 390,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "9106:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 393,
											"mutability": "mutable",
											"name": "claimed",
											"nameLocation": "9135:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 398,
											"src": "9130:12:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 392,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "9130:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 395,
											"mutability": "mutable",
											"name": "disputed",
											"nameLocation": "9157:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 398,
											"src": "9152:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 394,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "9152:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 397,
											"mutability": "mutable",
											"name": "resolved",
											"nameLocation": "9180:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 398,
											"src": "9175:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 396,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "9175:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Purchase",
									"nameLocation": "9064:8:0",
									"nodeType": "StructDefinition",
									"scope": 1157,
									"src": "9057:138:0",
									"visibility": "public"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 399,
										"nodeType": "StructuredDocumentation",
										"src": "9446:32:0",
										"text": "@notice New service deployed"
									},
									"eventSelector": "f64400e1a6f13918e0d52281923ca84f7e8629a8877d7df221b1daee5a7f5a09",
									"id": 409,
									"name": "ServiceDeployed",
									"nameLocation": "9489:15:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "9521:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "9505:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 400,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9505:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 403,
												"indexed": false,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "9539:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "9532:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 402,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9532:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 405,
												"indexed": true,
												"mutability": "mutable",
												"name": "provider",
												"nameLocation": "9561:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "9545:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9545:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"indexed": false,
												"mutability": "mutable",
												"name": "stake",
												"nameLocation": "9579:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 409,
												"src": "9571:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9571:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9504:81:0"
									},
									"src": "9483:103:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 410,
										"nodeType": "StructuredDocumentation",
										"src": "9592:27:0",
										"text": "@notice Service updated"
									},
									"eventSelector": "21497be0e43df02886a23556867a8f45757777beed0ae265c79dd7142a1dee26",
									"id": 418,
									"name": "ServiceUpdated",
									"nameLocation": "9630:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 412,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "9661:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "9645:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 411,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9645:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 414,
												"indexed": false,
												"mutability": "mutable",
												"name": "description",
												"nameLocation": "9679:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "9672:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 413,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9672:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 416,
												"indexed": false,
												"mutability": "mutable",
												"name": "gateway",
												"nameLocation": "9699:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "9692:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 415,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "9692:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9644:63:0"
									},
									"src": "9624:84:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 419,
										"nodeType": "StructuredDocumentation",
										"src": "9714:42:0",
										"text": "@notice Provider topped up their stake"
									},
									"eventSelector": "077a7ccf44b26a4e3477c9abb31e09a68f3d67436717d4ffa709adb2949dc70b",
									"id": 427,
									"name": "StakeToppedUp",
									"nameLocation": "9767:13:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 421,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "9797:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "9781:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 420,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9781:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9816:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "9808:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9808:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 425,
												"indexed": false,
												"mutability": "mutable",
												"name": "newTotal",
												"nameLocation": "9832:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 427,
												"src": "9824:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 424,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9824:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9780:61:0"
									},
									"src": "9761:81:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 428,
										"nodeType": "StructuredDocumentation",
										"src": "9848:49:0",
										"text": "@notice Provider withdrew part of their stake"
									},
									"eventSelector": "64b42729c893e3b5f300276ef3057e004bd614dfc15219a30a3b069ec4386933",
									"id": 436,
									"name": "StakeWithdrawn",
									"nameLocation": "9908:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 430,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "9939:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "9923:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 429,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9923:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 432,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9958:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "9950:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 431,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9950:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 434,
												"indexed": false,
												"mutability": "mutable",
												"name": "newTotal",
												"nameLocation": "9974:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "9966:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 433,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9966:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9922:61:0"
									},
									"src": "9902:82:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "9990:51:0",
										"text": "@notice Buyer successfully paid for the service"
									},
									"eventSelector": "28e441787112329c6ca4a49a928d407794bdeda6afbd8361c29b788a6582427e",
									"id": 447,
									"name": "ServicePurchased",
									"nameLocation": "10052:16:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 446,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "10085:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "10069:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 438,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10069:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 441,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "10112:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "10096:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 440,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10096:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 443,
												"indexed": true,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "10140:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "10124:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 442,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10124:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 445,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10155:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 447,
												"src": "10147:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 444,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10147:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10068:94:0"
									},
									"src": "10046:117:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 448,
										"nodeType": "StructuredDocumentation",
										"src": "10169:74:0",
										"text": "@notice Provider claimed the locked payment (buyer signature verified)"
									},
									"eventSelector": "a4866d22926279c02afd306c9a2cfcb4cda3611585d882e7f8297946eaa0d85b",
									"id": 454,
									"name": "PaymentClaimed",
									"nameLocation": "10254:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 450,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "10285:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "10269:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 449,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10269:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 452,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "10312:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 454,
												"src": "10296:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 451,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10296:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10268:55:0"
									},
									"src": "10248:76:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 455,
										"nodeType": "StructuredDocumentation",
										"src": "10330:50:0",
										"text": "@notice Buyer flagged the purchase for dispute"
									},
									"eventSelector": "c6228edd773ffc16c9752602b8c93bca5546bf5871ac1e6ae48c2e5981ea52c8",
									"id": 461,
									"name": "DisputeRaised",
									"nameLocation": "10391:13:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 457,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "10421:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "10405:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 456,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10405:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 459,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "10448:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 461,
												"src": "10432:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 458,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10432:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10404:55:0"
									},
									"src": "10385:75:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 462,
										"nodeType": "StructuredDocumentation",
										"src": "10466:42:0",
										"text": "@notice Dispute resolved by an arbiter"
									},
									"eventSelector": "bc15360fdbc18726032673554343b47ea8c03297136da385c28550253778baf5",
									"id": 472,
									"name": "DisputeResolved",
									"nameLocation": "10519:15:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 464,
												"indexed": true,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "10551:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "10535:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 463,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10535:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 466,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "10578:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "10562:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 465,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10562:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 468,
												"indexed": false,
												"mutability": "mutable",
												"name": "refunded",
												"nameLocation": "10595:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "10590:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 467,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10590:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 470,
												"indexed": true,
												"mutability": "mutable",
												"name": "arbiter",
												"nameLocation": "10621:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 472,
												"src": "10605:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 469,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10605:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10534:95:0"
									},
									"src": "10513:117:0"
								},
								{
									"body": {
										"id": 489,
										"nodeType": "Block",
										"src": "10739:117:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 484,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 478,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "10757:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 479,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10761:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "10757:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 480,
																		"name": "services",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 356,
																		"src": "10771:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
																			"typeString": "mapping(bytes32 => struct EscroDot.Service storage ref)"
																		}
																	},
																	"id": 482,
																	"indexExpression": {
																		"id": 481,
																		"name": "serviceId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 475,
																		"src": "10780:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "10771:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$387_storage",
																		"typeString": "struct EscroDot.Service storage ref"
																	}
																},
																"id": 483,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "10791:8:0",
																"memberName": "provider",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 380,
																"src": "10771:28:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10757:42:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a2063616c6c6572206973206e6f74207468652070726f7669646572",
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10801:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825",
																"typeString": "literal_string \"Escrow: caller is not the provider\""
															},
															"value": "Escrow: caller is not the provider"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4b5050ec905dd838e8372c2fcfe7bf0a948b6a470261bf8ce371f4cd66b86825",
																"typeString": "literal_string \"Escrow: caller is not the provider\""
															}
														],
														"id": 477,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10749:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 486,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10749:89:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 487,
												"nodeType": "ExpressionStatement",
												"src": "10749:89:0"
											},
											{
												"id": 488,
												"nodeType": "PlaceholderStatement",
												"src": "10848:1:0"
											}
										]
									},
									"documentation": {
										"id": 473,
										"nodeType": "StructuredDocumentation",
										"src": "10636:57:0",
										"text": "@dev Restrict a function to the provider of a service"
									},
									"id": 490,
									"name": "onlyProvider",
									"nameLocation": "10707:12:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 475,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "10728:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 490,
												"src": "10720:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 474,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10719:19:0"
									},
									"src": "10698:158:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 493,
									"mutability": "mutable",
									"name": "_locked",
									"nameLocation": "10878:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 1157,
									"src": "10862:27:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 491,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "10862:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 492,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "10888:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 511,
										"nodeType": "Block",
										"src": "10919:117:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 498,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 496,
																"name": "_locked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 493,
																"src": "10937:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 497,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10948:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "10937:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207265656e7472616e742063616c6c",
															"id": 499,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10951:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3",
																"typeString": "literal_string \"Escrow: reentrant call\""
															},
															"value": "Escrow: reentrant call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_2e89d81572657c9db39fccacca94dcaadc6d8531ceabea64af8307a82e38b6a3",
																"typeString": "literal_string \"Escrow: reentrant call\""
															}
														],
														"id": 495,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10929:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 500,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10929:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 501,
												"nodeType": "ExpressionStatement",
												"src": "10929:47:0"
											},
											{
												"expression": {
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 502,
														"name": "_locked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 493,
														"src": "10986:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "32",
														"id": 503,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "10996:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_2_by_1",
															"typeString": "int_const 2"
														},
														"value": "2"
													},
													"src": "10986:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 505,
												"nodeType": "ExpressionStatement",
												"src": "10986:11:0"
											},
											{
												"id": 506,
												"nodeType": "PlaceholderStatement",
												"src": "11007:1:0"
											},
											{
												"expression": {
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 507,
														"name": "_locked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 493,
														"src": "11018:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 508,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "11028:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "11018:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 510,
												"nodeType": "ExpressionStatement",
												"src": "11018:11:0"
											}
										]
									},
									"id": 512,
									"name": "nonReentrant",
									"nameLocation": "10904:12:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10916:2:0"
									},
									"src": "10895:141:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 612,
										"nodeType": "Block",
										"src": "11573:715:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 533,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 529,
																			"name": "name",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 515,
																			"src": "11597:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		],
																		"id": 528,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "11591:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 527,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "11591:5:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 530,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "11591:11:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																"id": 531,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11603:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "11591:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 532,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11612:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11591:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a206e616d652063616e6e6f7420626520656d707479",
															"id": 534,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11615:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ebc107df0f8396e461fa828325bd94fa07e75cce07dc97a8ea0cfad373b424fa",
																"typeString": "literal_string \"Escrow: name cannot be empty\""
															},
															"value": "Escrow: name cannot be empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ebc107df0f8396e461fa828325bd94fa07e75cce07dc97a8ea0cfad373b424fa",
																"typeString": "literal_string \"Escrow: name cannot be empty\""
															}
														],
														"id": 526,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11583:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 535,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11583:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 536,
												"nodeType": "ExpressionStatement",
												"src": "11583:63:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 541,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 538,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "11664:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 539,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11668:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "11664:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 540,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 517,
																"src": "11677:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "11664:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207374616b65206d75737420636f766572206174206c65617374206f6e6520726566756e64",
															"id": 542,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11684:46:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_85130fe0d7a45437938997f7fa6d0a6f9c87fbe8182302908640ac67405ccb33",
																"typeString": "literal_string \"Escrow: stake must cover at least one refund\""
															},
															"value": "Escrow: stake must cover at least one refund"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_85130fe0d7a45437938997f7fa6d0a6f9c87fbe8182302908640ac67405ccb33",
																"typeString": "literal_string \"Escrow: stake must cover at least one refund\""
															}
														],
														"id": 537,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11656:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11656:75:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 544,
												"nodeType": "ExpressionStatement",
												"src": "11656:75:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 552,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 548,
																			"name": "gateway",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 519,
																			"src": "11755:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		],
																		"id": 547,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "11749:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 546,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "11749:5:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 549,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "11749:14:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																"id": 550,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11764:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "11749:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 551,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11773:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11749:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20676174657761792063616e6e6f7420626520656d707479",
															"id": 553,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11776:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808",
																"typeString": "literal_string \"Escrow: gateway cannot be empty\""
															},
															"value": "Escrow: gateway cannot be empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808",
																"typeString": "literal_string \"Escrow: gateway cannot be empty\""
															}
														],
														"id": 545,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11741:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 554,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11741:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 555,
												"nodeType": "ExpressionStatement",
												"src": "11741:69:0"
											},
											{
												"expression": {
													"id": 563,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 556,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 524,
														"src": "11821:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 560,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 515,
																		"src": "11849:4:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_calldata_ptr",
																			"typeString": "string calldata"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_calldata_ptr",
																			"typeString": "string calldata"
																		}
																	],
																	"id": 559,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11843:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 558,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "11843:5:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 561,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11843:11:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_calldata_ptr",
																	"typeString": "bytes calldata"
																}
															],
															"id": 557,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "11833:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 562,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11833:22:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "11821:34:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 564,
												"nodeType": "ExpressionStatement",
												"src": "11821:34:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 574,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"baseExpression": {
																		"id": 566,
																		"name": "services",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 356,
																		"src": "11873:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
																			"typeString": "mapping(bytes32 => struct EscroDot.Service storage ref)"
																		}
																	},
																	"id": 568,
																	"indexExpression": {
																		"id": 567,
																		"name": "serviceId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 524,
																		"src": "11882:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "11873:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$387_storage",
																		"typeString": "struct EscroDot.Service storage ref"
																	}
																},
																"id": 569,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "11893:8:0",
																"memberName": "provider",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 380,
																"src": "11873:28:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 572,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11913:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 571,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11905:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 570,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11905:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 573,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11905:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11873:42:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a2073657276696365206e616d6520616c72656164792074616b656e",
															"id": 575,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11917:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_862130f84ef544463dccc158e3c9c7299472608b549f001a27726df2b060806a",
																"typeString": "literal_string \"Escrow: service name already taken\""
															},
															"value": "Escrow: service name already taken"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_862130f84ef544463dccc158e3c9c7299472608b549f001a27726df2b060806a",
																"typeString": "literal_string \"Escrow: service name already taken\""
															}
														],
														"id": 565,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11865:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 576,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11865:89:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 577,
												"nodeType": "ExpressionStatement",
												"src": "11865:89:0"
											},
											{
												"expression": {
													"id": 588,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 578,
															"name": "services",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "11965:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
																"typeString": "mapping(bytes32 => struct EscroDot.Service storage ref)"
															}
														},
														"id": 580,
														"indexExpression": {
															"id": 579,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "11974:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11965:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$387_storage",
															"typeString": "struct EscroDot.Service storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 582,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "12019:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 583,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12023:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "12019:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 584,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 517,
																"src": "12050:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 585,
																"name": "description",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 521,
																"src": "12082:11:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															},
															{
																"id": 586,
																"name": "gateway",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 519,
																"src": "12116:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																},
																{
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															],
															"id": 581,
															"name": "Service",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "11987:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Service_$387_storage_ptr_$",
																"typeString": "type(struct EscroDot.Service storage pointer)"
															}
														},
														"id": 587,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [
															"12009:8:0",
															"12043:5:0",
															"12069:11:0",
															"12107:7:0"
														],
														"names": [
															"provider",
															"price",
															"description",
															"gateway"
														],
														"nodeType": "FunctionCall",
														"src": "11987:147:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$387_memory_ptr",
															"typeString": "struct EscroDot.Service memory"
														}
													},
													"src": "11965:169:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$387_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"id": 589,
												"nodeType": "ExpressionStatement",
												"src": "11965:169:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 593,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "12161:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 590,
															"name": "serviceIds",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 360,
															"src": "12145:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
																"typeString": "bytes32[] storage ref"
															}
														},
														"id": 592,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12156:4:0",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "12145:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_bytes32_$dyn_storage_ptr_$_t_bytes32_$returns$__$attached_to$_t_array$_t_bytes32_$dyn_storage_ptr_$",
															"typeString": "function (bytes32[] storage pointer,bytes32)"
														}
													},
													"id": 594,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12145:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 595,
												"nodeType": "ExpressionStatement",
												"src": "12145:26:0"
											},
											{
												"expression": {
													"id": 601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 596,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "12181:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 598,
														"indexExpression": {
															"id": 597,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "12188:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "12181:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 599,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "12201:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 600,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "12205:5:0",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "12201:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12181:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 602,
												"nodeType": "ExpressionStatement",
												"src": "12181:29:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 604,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 524,
															"src": "12242:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 605,
															"name": "name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 515,
															"src": "12253:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														},
														{
															"expression": {
																"id": 606,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "12259:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "12263:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "12259:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 608,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "12271:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 609,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "12275:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "12271:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 603,
														"name": "ServiceDeployed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "12226:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,string memory,address,uint256)"
														}
													},
													"id": 610,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12226:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 611,
												"nodeType": "EmitStatement",
												"src": "12221:60:0"
											}
										]
									},
									"documentation": {
										"id": 513,
										"nodeType": "StructuredDocumentation",
										"src": "11042:329:0",
										"text": " @notice Create a new service\n @param name         Human‑readable service name (unique)\n @param price        Fixed price in wei\n @param gateway      Service endpoint URL\n @param description  IPFS CID or text description\n `msg.value` – initial stake (must be ≥ `price`)"
									},
									"functionSelector": "912172fb",
									"id": 613,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createService",
									"nameLocation": "11385:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 522,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "11424:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "11408:20:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 514,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "11408:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "11446:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "11438:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 516,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11438:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "gateway",
												"nameLocation": "11477:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "11461:23:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 518,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "11461:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 521,
												"mutability": "mutable",
												"name": "description",
												"nameLocation": "11510:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "11494:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 520,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "11494:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11398:129:0"
									},
									"returnParameters": {
										"id": 525,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 524,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "11562:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 613,
												"src": "11554:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 523,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "11554:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11553:19:0"
									},
									"scope": 1157,
									"src": "11376:912:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 662,
										"nodeType": "Block",
										"src": "12507:283:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 629,
																			"name": "gateway",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 620,
																			"src": "12531:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		],
																		"id": 628,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "12525:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 627,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "12525:5:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 630,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "12525:14:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																"id": 631,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "12540:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "12525:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 632,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12549:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "12525:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20676174657761792063616e6e6f7420626520656d707479",
															"id": 634,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "12552:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808",
																"typeString": "literal_string \"Escrow: gateway cannot be empty\""
															},
															"value": "Escrow: gateway cannot be empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_795fd0ca27f6c51920211b83ec42b0bc0e7c07c6a03bbc395cad7ab0e9ac9808",
																"typeString": "literal_string \"Escrow: gateway cannot be empty\""
															}
														],
														"id": 626,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "12517:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 635,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12517:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 636,
												"nodeType": "ExpressionStatement",
												"src": "12517:69:0"
											},
											{
												"assignments": [
													639
												],
												"declarations": [
													{
														"constant": false,
														"id": 639,
														"mutability": "mutable",
														"name": "service",
														"nameLocation": "12613:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 662,
														"src": "12597:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
															"typeString": "struct EscroDot.Service"
														},
														"typeName": {
															"id": 638,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 637,
																"name": "Service",
																"nameLocations": [
																	"12597:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 387,
																"src": "12597:7:0"
															},
															"referencedDeclaration": 387,
															"src": "12597:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																"typeString": "struct EscroDot.Service"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 643,
												"initialValue": {
													"baseExpression": {
														"id": 640,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "12623:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
															"typeString": "mapping(bytes32 => struct EscroDot.Service storage ref)"
														}
													},
													"id": 642,
													"indexExpression": {
														"id": 641,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 616,
														"src": "12632:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "12623:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$387_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12597:45:0"
											},
											{
												"expression": {
													"id": 648,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 644,
															"name": "service",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "12652:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																"typeString": "struct EscroDot.Service storage pointer"
															}
														},
														"id": 646,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "12660:11:0",
														"memberName": "description",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 384,
														"src": "12652:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 647,
														"name": "description",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 618,
														"src": "12674:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_calldata_ptr",
															"typeString": "string calldata"
														}
													},
													"src": "12652:33:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 649,
												"nodeType": "ExpressionStatement",
												"src": "12652:33:0"
											},
											{
												"expression": {
													"id": 654,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 650,
															"name": "service",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 639,
															"src": "12695:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																"typeString": "struct EscroDot.Service storage pointer"
															}
														},
														"id": 652,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "12703:7:0",
														"memberName": "gateway",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 386,
														"src": "12695:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 653,
														"name": "gateway",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 620,
														"src": "12713:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_calldata_ptr",
															"typeString": "string calldata"
														}
													},
													"src": "12695:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 655,
												"nodeType": "ExpressionStatement",
												"src": "12695:25:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 657,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "12751:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 658,
															"name": "description",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "12762:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														},
														{
															"id": 659,
															"name": "gateway",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 620,
															"src": "12775:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														],
														"id": 656,
														"name": "ServiceUpdated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 418,
														"src": "12736:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bytes32,string memory,string memory)"
														}
													},
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12736:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 661,
												"nodeType": "EmitStatement",
												"src": "12731:52:0"
											}
										]
									},
									"documentation": {
										"id": 614,
										"nodeType": "StructuredDocumentation",
										"src": "12294:49:0",
										"text": " @notice Update service details"
									},
									"functionSelector": "7214800f",
									"id": 663,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 623,
													"name": "serviceId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 616,
													"src": "12496:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 624,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 622,
												"name": "onlyProvider",
												"nameLocations": [
													"12483:12:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 490,
												"src": "12483:12:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "12483:23:0"
										}
									],
									"name": "updateService",
									"nameLocation": "12357:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 621,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "12388:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "12380:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 615,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12380:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 618,
												"mutability": "mutable",
												"name": "description",
												"nameLocation": "12423:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "12407:27:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 617,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12407:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 620,
												"mutability": "mutable",
												"name": "gateway",
												"nameLocation": "12460:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 663,
												"src": "12444:23:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 619,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "12444:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12370:103:0"
									},
									"returnParameters": {
										"id": 625,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12507:0:0"
									},
									"scope": 1157,
									"src": "12348:442:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 732,
										"nodeType": "Block",
										"src": "12986:569:0",
										"statements": [
											{
												"assignments": [
													675
												],
												"declarations": [
													{
														"constant": false,
														"id": 675,
														"mutability": "mutable",
														"name": "service",
														"nameLocation": "13012:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 732,
														"src": "12996:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
															"typeString": "struct EscroDot.Service"
														},
														"typeName": {
															"id": 674,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 673,
																"name": "Service",
																"nameLocations": [
																	"12996:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 387,
																"src": "12996:7:0"
															},
															"referencedDeclaration": 387,
															"src": "12996:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																"typeString": "struct EscroDot.Service"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 679,
												"initialValue": {
													"baseExpression": {
														"id": 676,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "13022:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
															"typeString": "mapping(bytes32 => struct EscroDot.Service storage ref)"
														}
													},
													"id": 678,
													"indexExpression": {
														"id": 677,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 666,
														"src": "13031:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "13022:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$387_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12996:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 687,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 681,
																	"name": "service",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 675,
																	"src": "13059:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 682,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13067:8:0",
																"memberName": "provider",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 380,
																"src": "13059:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 685,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "13087:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 684,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "13079:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 683,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "13079:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 686,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "13079:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "13059:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207365727669636520646f6573206e6f74206578697374",
															"id": 688,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13091:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8f3c3c5ccf4cc0fddd64df7ab4c6b67a3b533f4629722f8679066a66857ef553",
																"typeString": "literal_string \"Escrow: service does not exist\""
															},
															"value": "Escrow: service does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8f3c3c5ccf4cc0fddd64df7ab4c6b67a3b533f4629722f8679066a66857ef553",
																"typeString": "literal_string \"Escrow: service does not exist\""
															}
														],
														"id": 680,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13051:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 689,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13051:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 690,
												"nodeType": "ExpressionStatement",
												"src": "13051:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 696,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 692,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "13142:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 693,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13146:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "13142:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 694,
																	"name": "service",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 675,
																	"src": "13155:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 695,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13163:5:0",
																"memberName": "price",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 382,
																"src": "13155:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "13142:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20696e636f7272656374207061796d656e7420616d6f756e74",
															"id": 697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13170:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f",
																"typeString": "literal_string \"Escrow: incorrect payment amount\""
															},
															"value": "Escrow: incorrect payment amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d26654e37817fcd281ffc8a2fd38caf3de61800dfa91aa7d8d43e623e3aafe6f",
																"typeString": "literal_string \"Escrow: incorrect payment amount\""
															}
														],
														"id": 691,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13134:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 698,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13134:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 699,
												"nodeType": "ExpressionStatement",
												"src": "13134:71:0"
											},
											{
												"expression": {
													"id": 705,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 700,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 671,
														"src": "13216:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 704,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "13229:28:0",
														"subExpression": {
															"baseExpression": {
																"id": 701,
																"name": "nextPurchaseIds",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 378,
																"src": "13229:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																	"typeString": "mapping(bytes32 => uint256)"
																}
															},
															"id": 703,
															"indexExpression": {
																"id": 702,
																"name": "serviceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 666,
																"src": "13245:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "IndexAccess",
															"src": "13229:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "13216:41:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 706,
												"nodeType": "ExpressionStatement",
												"src": "13216:41:0"
											},
											{
												"expression": {
													"id": 721,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 707,
																"name": "purchases",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 373,
																"src": "13267:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$_$",
																	"typeString": "mapping(bytes32 => mapping(uint256 => struct EscroDot.Purchase storage ref))"
																}
															},
															"id": 710,
															"indexExpression": {
																"id": 708,
																"name": "serviceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 666,
																"src": "13277:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "13267:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$",
																"typeString": "mapping(uint256 => struct EscroDot.Purchase storage ref)"
															}
														},
														"id": 711,
														"indexExpression": {
															"id": 709,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 671,
															"src": "13288:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "13267:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$398_storage",
															"typeString": "struct EscroDot.Purchase storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 713,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "13332:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 714,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13336:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "13332:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 715,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "13364:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 716,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13368:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "13364:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 717,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13396:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "66616c7365",
																"id": 718,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13425:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "66616c7365",
																"id": 719,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13454:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 712,
															"name": "Purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "13302:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Purchase_$398_storage_ptr_$",
																"typeString": "type(struct EscroDot.Purchase storage pointer)"
															}
														},
														"id": 720,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [
															"13325:5:0",
															"13356:6:0",
															"13387:7:0",
															"13415:8:0",
															"13444:8:0"
														],
														"names": [
															"buyer",
															"amount",
															"claimed",
															"disputed",
															"resolved"
														],
														"nodeType": "FunctionCall",
														"src": "13302:168:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$398_memory_ptr",
															"typeString": "struct EscroDot.Purchase memory"
														}
													},
													"src": "13267:203:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$398_storage",
														"typeString": "struct EscroDot.Purchase storage ref"
													}
												},
												"id": 722,
												"nodeType": "ExpressionStatement",
												"src": "13267:203:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 724,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 666,
															"src": "13503:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 725,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 671,
															"src": "13514:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 726,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "13526:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 727,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "13530:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "13526:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 728,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "13538:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "13542:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "13538:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 723,
														"name": "ServicePurchased",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 447,
														"src": "13486:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,uint256,address,uint256)"
														}
													},
													"id": 730,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13486:62:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 731,
												"nodeType": "EmitStatement",
												"src": "13481:67:0"
											}
										]
									},
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "12796:87:0",
										"text": " @notice Purchase the service by locking `price` ETH in this contract"
									},
									"functionSelector": "a2d39038",
									"id": 733,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 669,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 668,
												"name": "nonReentrant",
												"nameLocations": [
													"12944:12:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "12944:12:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "12944:12:0"
										}
									],
									"name": "buyService",
									"nameLocation": "12897:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 667,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 666,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "12916:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "12908:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 665,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "12908:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12907:19:0"
									},
									"returnParameters": {
										"id": 672,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 671,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "12974:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 733,
												"src": "12966:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 670,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12966:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12965:20:0"
									},
									"scope": 1157,
									"src": "12888:667:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 820,
										"nodeType": "Block",
										"src": "13854:642:0",
										"statements": [
											{
												"assignments": [
													752
												],
												"declarations": [
													{
														"constant": false,
														"id": 752,
														"mutability": "mutable",
														"name": "purchase",
														"nameLocation": "13881:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 820,
														"src": "13864:25:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
															"typeString": "struct EscroDot.Purchase"
														},
														"typeName": {
															"id": 751,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 750,
																"name": "Purchase",
																"nameLocations": [
																	"13864:8:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 398,
																"src": "13864:8:0"
															},
															"referencedDeclaration": 398,
															"src": "13864:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																"typeString": "struct EscroDot.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 758,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 753,
															"name": "purchases",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 373,
															"src": "13892:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$_$",
																"typeString": "mapping(bytes32 => mapping(uint256 => struct EscroDot.Purchase storage ref))"
															}
														},
														"id": 755,
														"indexExpression": {
															"id": 754,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 736,
															"src": "13902:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "13892:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Purchase storage ref)"
														}
													},
													"id": 757,
													"indexExpression": {
														"id": 756,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 738,
														"src": "13913:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "13892:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$398_storage",
														"typeString": "struct EscroDot.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13864:60:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 762,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "13943:17:0",
															"subExpression": {
																"expression": {
																	"id": 760,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 752,
																	"src": "13944:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 761,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "13953:7:0",
																"memberName": "claimed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 393,
																"src": "13944:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207061796d656e7420616c726561647920636c61696d6564",
															"id": 763,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13962:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8",
																"typeString": "literal_string \"Escrow: payment already claimed\""
															},
															"value": "Escrow: payment already claimed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8",
																"typeString": "literal_string \"Escrow: payment already claimed\""
															}
														],
														"id": 759,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "13935:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 764,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13935:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 765,
												"nodeType": "ExpressionStatement",
												"src": "13935:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 769,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "14014:18:0",
															"subExpression": {
																"expression": {
																	"id": 767,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 752,
																	"src": "14015:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 768,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "14024:8:0",
																"memberName": "disputed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 395,
																"src": "14015:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20707572636861736520697320696e2064697370757465",
															"id": 770,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14034:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074",
																"typeString": "literal_string \"Escrow: purchase is in dispute\""
															},
															"value": "Escrow: purchase is in dispute"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_14a83e89ffe884659c3d3d640bb134ec6b2f8219e6611ab64873434fe5e56074",
																"typeString": "literal_string \"Escrow: purchase is in dispute\""
															}
														],
														"id": 766,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14006:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 771,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14006:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 772,
												"nodeType": "ExpressionStatement",
												"src": "14006:61:0"
											},
											{
												"assignments": [
													774
												],
												"declarations": [
													{
														"constant": false,
														"id": 774,
														"mutability": "mutable",
														"name": "digest",
														"nameLocation": "14120:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 820,
														"src": "14112:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 773,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "14112:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 780,
												"initialValue": {
													"arguments": [
														{
															"id": 776,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 736,
															"src": "14142:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 777,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "14153:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 778,
															"name": "deliverableHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 740,
															"src": "14165:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 775,
														"name": "_claimDigest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1129,
														"src": "14129:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_uint256_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,uint256,bytes32) view returns (bytes32)"
														}
													},
													"id": 779,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14129:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14112:69:0"
											},
											{
												"assignments": [
													782
												],
												"declarations": [
													{
														"constant": false,
														"id": 782,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "14199:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 820,
														"src": "14191:14:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 781,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "14191:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 788,
												"initialValue": {
													"arguments": [
														{
															"id": 785,
															"name": "digest",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 774,
															"src": "14222:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 786,
															"name": "buyerSignature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 742,
															"src": "14230:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_calldata_ptr",
																"typeString": "bytes calldata"
															}
														],
														"expression": {
															"id": 783,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 347,
															"src": "14208:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$347_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 784,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "14214:7:0",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 103,
														"src": "14208:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address)"
														}
													},
													"id": 787,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14208:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14191:54:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 793,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 790,
																"name": "signer",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 782,
																"src": "14263:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 791,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 752,
																	"src": "14273:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 792,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "14282:5:0",
																"memberName": "buyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 389,
																"src": "14273:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "14263:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5369676e617475726556657269666965723a20496e76616c6964207369676e6174757265",
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14289:38:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496",
																"typeString": "literal_string \"SignatureVerifier: Invalid signature\""
															},
															"value": "SignatureVerifier: Invalid signature"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6f312c648402dfce4a3689464087990f1f224d7fba30f1a94fd4b80a3fb21496",
																"typeString": "literal_string \"SignatureVerifier: Invalid signature\""
															}
														],
														"id": 789,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14255:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 795,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14255:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 796,
												"nodeType": "ExpressionStatement",
												"src": "14255:73:0"
											},
											{
												"expression": {
													"id": 801,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 797,
															"name": "purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 752,
															"src": "14339:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																"typeString": "struct EscroDot.Purchase storage pointer"
															}
														},
														"id": 799,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "14348:7:0",
														"memberName": "claimed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 393,
														"src": "14339:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 800,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14358:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "14339:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 802,
												"nodeType": "ExpressionStatement",
												"src": "14339:23:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"baseExpression": {
																			"id": 806,
																			"name": "services",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 356,
																			"src": "14389:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
																				"typeString": "mapping(bytes32 => struct EscroDot.Service storage ref)"
																			}
																		},
																		"id": 808,
																		"indexExpression": {
																			"id": 807,
																			"name": "serviceId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 736,
																			"src": "14398:9:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes32",
																				"typeString": "bytes32"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "14389:19:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Service_$387_storage",
																			"typeString": "struct EscroDot.Service storage ref"
																		}
																	},
																	"id": 809,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "14409:8:0",
																	"memberName": "provider",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 380,
																	"src": "14389:28:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 805,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "14381:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 804,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "14381:8:0",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14381:37:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 811,
																"name": "purchase",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 752,
																"src": "14420:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																	"typeString": "struct EscroDot.Purchase storage pointer"
																}
															},
															"id": 812,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "14429:6:0",
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 391,
															"src": "14420:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 803,
														"name": "_sendETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1152,
														"src": "14372:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 813,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14372:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 814,
												"nodeType": "ExpressionStatement",
												"src": "14372:64:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 816,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 736,
															"src": "14467:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 817,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 738,
															"src": "14478:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 815,
														"name": "PaymentClaimed",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 454,
														"src": "14452:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,uint256)"
														}
													},
													"id": 818,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14452:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 819,
												"nodeType": "EmitStatement",
												"src": "14447:42:0"
											}
										]
									},
									"documentation": {
										"id": 734,
										"nodeType": "StructuredDocumentation",
										"src": "13561:87:0",
										"text": " @notice Provider claims funds by presenting a buyer‑signed message"
									},
									"functionSelector": "11e5dd4f",
									"id": 821,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 745,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 744,
												"name": "nonReentrant",
												"nameLocations": [
													"13817:12:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "13817:12:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "13817:12:0"
										},
										{
											"arguments": [
												{
													"id": 747,
													"name": "serviceId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 736,
													"src": "13843:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 748,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 746,
												"name": "onlyProvider",
												"nameLocations": [
													"13830:12:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 490,
												"src": "13830:12:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "13830:23:0"
										}
									],
									"name": "claimPayment",
									"nameLocation": "13662:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 736,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "13692:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "13684:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 735,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13684:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 738,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "13719:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "13711:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 737,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13711:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 740,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "13747:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "13739:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 739,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "13739:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 742,
												"mutability": "mutable",
												"name": "buyerSignature",
												"nameLocation": "13787:14:0",
												"nodeType": "VariableDeclaration",
												"scope": 821,
												"src": "13772:29:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 741,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "13772:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13674:133:0"
									},
									"returnParameters": {
										"id": 749,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13854:0:0"
									},
									"scope": 1157,
									"src": "13653:843:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 871,
										"nodeType": "Block",
										"src": "14572:388:0",
										"statements": [
											{
												"assignments": [
													830
												],
												"declarations": [
													{
														"constant": false,
														"id": 830,
														"mutability": "mutable",
														"name": "purchase",
														"nameLocation": "14599:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 871,
														"src": "14582:25:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
															"typeString": "struct EscroDot.Purchase"
														},
														"typeName": {
															"id": 829,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 828,
																"name": "Purchase",
																"nameLocations": [
																	"14582:8:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 398,
																"src": "14582:8:0"
															},
															"referencedDeclaration": 398,
															"src": "14582:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																"typeString": "struct EscroDot.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 836,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 831,
															"name": "purchases",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 373,
															"src": "14610:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$_$",
																"typeString": "mapping(bytes32 => mapping(uint256 => struct EscroDot.Purchase storage ref))"
															}
														},
														"id": 833,
														"indexExpression": {
															"id": 832,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 823,
															"src": "14620:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "14610:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Purchase storage ref)"
														}
													},
													"id": 835,
													"indexExpression": {
														"id": 834,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 825,
														"src": "14631:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "14610:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$398_storage",
														"typeString": "struct EscroDot.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14582:60:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 842,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 838,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "14661:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 839,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "14665:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "14661:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 840,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "14675:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 841,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "14684:5:0",
																"memberName": "buyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 389,
																"src": "14675:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "14661:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a2063616c6c6572206973206e6f7420746865206275796572",
															"id": 843,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14691:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6",
																"typeString": "literal_string \"Escrow: caller is not the buyer\""
															},
															"value": "Escrow: caller is not the buyer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f4d3f440880d3992e0b1fbd2da9764667d203fea08a9c7f896c7bae01a463ea6",
																"typeString": "literal_string \"Escrow: caller is not the buyer\""
															}
														],
														"id": 837,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14653:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 844,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14653:72:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 845,
												"nodeType": "ExpressionStatement",
												"src": "14653:72:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 849,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "14743:17:0",
															"subExpression": {
																"expression": {
																	"id": 847,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "14744:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 848,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "14753:7:0",
																"memberName": "claimed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 393,
																"src": "14744:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207061796d656e7420616c726561647920636c61696d6564",
															"id": 850,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14762:33:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8",
																"typeString": "literal_string \"Escrow: payment already claimed\""
															},
															"value": "Escrow: payment already claimed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_97969437c4239b79cd4a3b8f86eff302670ce3bc6c77a379e2cd0d6cdefe52f8",
																"typeString": "literal_string \"Escrow: payment already claimed\""
															}
														],
														"id": 846,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14735:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 851,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14735:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 852,
												"nodeType": "ExpressionStatement",
												"src": "14735:61:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "14814:18:0",
															"subExpression": {
																"expression": {
																	"id": 854,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 830,
																	"src": "14815:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 855,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "14824:8:0",
																"memberName": "disputed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 395,
																"src": "14815:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a206469737075746520616c726561647920726169736564",
															"id": 857,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14834:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4",
																"typeString": "literal_string \"Escrow: dispute already raised\""
															},
															"value": "Escrow: dispute already raised"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3a45946c6170ec0369a7c0c49bdab1644258e4d900067a602c3f2cbe3dbb12b4",
																"typeString": "literal_string \"Escrow: dispute already raised\""
															}
														],
														"id": 853,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "14806:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 858,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14806:61:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 859,
												"nodeType": "ExpressionStatement",
												"src": "14806:61:0"
											},
											{
												"expression": {
													"id": 864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 860,
															"name": "purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 830,
															"src": "14878:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																"typeString": "struct EscroDot.Purchase storage pointer"
															}
														},
														"id": 862,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "14887:8:0",
														"memberName": "disputed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 395,
														"src": "14878:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 863,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "14898:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "14878:24:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 865,
												"nodeType": "ExpressionStatement",
												"src": "14878:24:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 867,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 823,
															"src": "14931:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 868,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 825,
															"src": "14942:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 866,
														"name": "DisputeRaised",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "14917:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,uint256)"
														}
													},
													"id": 869,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14917:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 870,
												"nodeType": "EmitStatement",
												"src": "14912:41:0"
											}
										]
									},
									"functionSelector": "98238491",
									"id": 872,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "raiseDispute",
									"nameLocation": "14511:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 826,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "14532:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "14524:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 822,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "14524:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 825,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "14551:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 872,
												"src": "14543:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 824,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14543:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14523:39:0"
									},
									"returnParameters": {
										"id": 827,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14572:0:0"
									},
									"scope": 1157,
									"src": "14502:458:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1001,
										"nodeType": "Block",
										"src": "15204:999:0",
										"statements": [
											{
												"assignments": [
													886
												],
												"declarations": [
													{
														"constant": false,
														"id": 886,
														"mutability": "mutable",
														"name": "service",
														"nameLocation": "15230:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 1001,
														"src": "15214:23:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
															"typeString": "struct EscroDot.Service"
														},
														"typeName": {
															"id": 885,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 884,
																"name": "Service",
																"nameLocations": [
																	"15214:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 387,
																"src": "15214:7:0"
															},
															"referencedDeclaration": 387,
															"src": "15214:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																"typeString": "struct EscroDot.Service"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 890,
												"initialValue": {
													"baseExpression": {
														"id": 887,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "15240:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_bytes32_$_t_struct$_Service_$387_storage_$",
															"typeString": "mapping(bytes32 => struct EscroDot.Service storage ref)"
														}
													},
													"id": 889,
													"indexExpression": {
														"id": 888,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 875,
														"src": "15249:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "15240:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$387_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15214:45:0"
											},
											{
												"assignments": [
													893
												],
												"declarations": [
													{
														"constant": false,
														"id": 893,
														"mutability": "mutable",
														"name": "purchase",
														"nameLocation": "15286:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 1001,
														"src": "15269:25:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
															"typeString": "struct EscroDot.Purchase"
														},
														"typeName": {
															"id": 892,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 891,
																"name": "Purchase",
																"nameLocations": [
																	"15269:8:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 398,
																"src": "15269:8:0"
															},
															"referencedDeclaration": 398,
															"src": "15269:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																"typeString": "struct EscroDot.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 899,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 894,
															"name": "purchases",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 373,
															"src": "15297:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$_$",
																"typeString": "mapping(bytes32 => mapping(uint256 => struct EscroDot.Purchase storage ref))"
															}
														},
														"id": 896,
														"indexExpression": {
															"id": 895,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "15307:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "15297:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$398_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Purchase storage ref)"
														}
													},
													"id": 898,
													"indexExpression": {
														"id": 897,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 877,
														"src": "15318:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "15297:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$398_storage",
														"typeString": "struct EscroDot.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "15269:60:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 907,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 901,
																	"name": "service",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 886,
																	"src": "15348:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 902,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "15356:8:0",
																"memberName": "provider",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 380,
																"src": "15348:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 905,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15376:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 904,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "15368:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 903,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "15368:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 906,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15368:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "15348:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a207365727669636520646f6573206e6f74206578697374",
															"id": 908,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15380:32:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8f3c3c5ccf4cc0fddd64df7ab4c6b67a3b533f4629722f8679066a66857ef553",
																"typeString": "literal_string \"Escrow: service does not exist\""
															},
															"value": "Escrow: service does not exist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8f3c3c5ccf4cc0fddd64df7ab4c6b67a3b533f4629722f8679066a66857ef553",
																"typeString": "literal_string \"Escrow: service does not exist\""
															}
														],
														"id": 900,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "15340:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 909,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15340:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 910,
												"nodeType": "ExpressionStatement",
												"src": "15340:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 917,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 912,
																	"name": "purchase",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 893,
																	"src": "15431:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 913,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "15440:8:0",
																"memberName": "disputed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 395,
																"src": "15431:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"id": 916,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "15452:18:0",
																"subExpression": {
																	"expression": {
																		"id": 914,
																		"name": "purchase",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 893,
																		"src": "15453:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																			"typeString": "struct EscroDot.Purchase storage pointer"
																		}
																	},
																	"id": 915,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15462:8:0",
																	"memberName": "resolved",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 397,
																	"src": "15453:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "15431:39:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20696e76616c6964207374617465",
															"id": 918,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15472:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e",
																"typeString": "literal_string \"Escrow: invalid state\""
															},
															"value": "Escrow: invalid state"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fe47342cb4e726ab17991fececfe70bedfdf20cc06e074821fd2d38fbe86fc8e",
																"typeString": "literal_string \"Escrow: invalid state\""
															}
														],
														"id": 911,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "15423:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 919,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15423:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 920,
												"nodeType": "ExpressionStatement",
												"src": "15423:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 926,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 922,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "15514:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "15518:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "15514:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"expression": {
																	"id": 924,
																	"name": "service",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 886,
																	"src": "15527:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 925,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "15535:5:0",
																"memberName": "price",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 382,
																"src": "15527:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "15514:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a206172626974657220626f6e6420746f6f206c6f77",
															"id": 927,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15542:30:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_669b7067ef47fee02a6eccce1a488d51024246971c26d659a9d05c0cfa30020d",
																"typeString": "literal_string \"Escrow: arbiter bond too low\""
															},
															"value": "Escrow: arbiter bond too low"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_669b7067ef47fee02a6eccce1a488d51024246971c26d659a9d05c0cfa30020d",
																"typeString": "literal_string \"Escrow: arbiter bond too low\""
															}
														],
														"id": 921,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "15506:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 928,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15506:67:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 929,
												"nodeType": "ExpressionStatement",
												"src": "15506:67:0"
											},
											{
												"condition": {
													"id": 930,
													"name": "refundBuyer",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 879,
													"src": "15588:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 981,
													"nodeType": "Block",
													"src": "15864:115:0",
													"statements": [
														{
															"expression": {
																"id": 969,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 965,
																		"name": "purchase",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 893,
																		"src": "15878:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																			"typeString": "struct EscroDot.Purchase storage pointer"
																		}
																	},
																	"id": 967,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "15887:8:0",
																	"memberName": "resolved",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 397,
																	"src": "15878:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 968,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "15898:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "15878:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 970,
															"nodeType": "ExpressionStatement",
															"src": "15878:24:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 974,
																					"name": "service",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 886,
																					"src": "15933:7:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																						"typeString": "struct EscroDot.Service storage pointer"
																					}
																				},
																				"id": 975,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "15941:8:0",
																				"memberName": "provider",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 380,
																				"src": "15933:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 973,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "15925:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_payable_$",
																				"typeString": "type(address payable)"
																			},
																			"typeName": {
																				"id": 972,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "15925:8:0",
																				"stateMutability": "payable",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 976,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15925:25:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"expression": {
																			"id": 977,
																			"name": "purchase",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 893,
																			"src": "15952:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																				"typeString": "struct EscroDot.Purchase storage pointer"
																			}
																		},
																		"id": 978,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "15961:6:0",
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 391,
																		"src": "15952:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 971,
																	"name": "_sendETH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1152,
																	"src": "15916:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
																		"typeString": "function (address payable,uint256)"
																	}
																},
																"id": 979,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15916:52:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 980,
															"nodeType": "ExpressionStatement",
															"src": "15916:52:0"
														}
													]
												},
												"id": 982,
												"nodeType": "IfStatement",
												"src": "15584:395:0",
												"trueBody": {
													"id": 964,
													"nodeType": "Block",
													"src": "15601:257:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 937,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 932,
																				"name": "stakes",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 365,
																				"src": "15623:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																					"typeString": "mapping(bytes32 => uint256)"
																				}
																			},
																			"id": 934,
																			"indexExpression": {
																				"id": 933,
																				"name": "serviceId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 875,
																				"src": "15630:9:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "15623:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"expression": {
																				"id": 935,
																				"name": "service",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 886,
																				"src": "15644:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																					"typeString": "struct EscroDot.Service storage pointer"
																				}
																			},
																			"id": 936,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "15652:5:0",
																			"memberName": "price",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 382,
																			"src": "15644:13:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "15623:34:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "457363726f773a2070726f7669646572207374616b6520696e73756666696369656e74",
																		"id": 938,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "15659:37:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_619f09653664230cf7341f5bbe62861fe7c1f6a32021d0d118840640aa76fe28",
																			"typeString": "literal_string \"Escrow: provider stake insufficient\""
																		},
																		"value": "Escrow: provider stake insufficient"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_619f09653664230cf7341f5bbe62861fe7c1f6a32021d0d118840640aa76fe28",
																			"typeString": "literal_string \"Escrow: provider stake insufficient\""
																		}
																	],
																	"id": 931,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "15615:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 939,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15615:82:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 940,
															"nodeType": "ExpressionStatement",
															"src": "15615:82:0"
														},
														{
															"expression": {
																"id": 946,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 941,
																		"name": "stakes",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 365,
																		"src": "15711:6:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																			"typeString": "mapping(bytes32 => uint256)"
																		}
																	},
																	"id": 943,
																	"indexExpression": {
																		"id": 942,
																		"name": "serviceId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 875,
																		"src": "15718:9:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "15711:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"expression": {
																		"id": 944,
																		"name": "service",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 886,
																		"src": "15732:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Service_$387_storage_ptr",
																			"typeString": "struct EscroDot.Service storage pointer"
																		}
																	},
																	"id": 945,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "15740:5:0",
																	"memberName": "price",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 382,
																	"src": "15732:13:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "15711:34:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 947,
															"nodeType": "ExpressionStatement",
															"src": "15711:34:0"
														},
														{
															"expression": {
																"id": 952,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 948,
																		"name": "purchase",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 893,
																		"src": "15759:8:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																			"typeString": "struct EscroDot.Purchase storage pointer"
																		}
																	},
																	"id": 950,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "15768:8:0",
																	"memberName": "resolved",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 397,
																	"src": "15759:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 951,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "15779:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "15759:24:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 953,
															"nodeType": "ExpressionStatement",
															"src": "15759:24:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 957,
																					"name": "purchase",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 893,
																					"src": "15814:8:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																						"typeString": "struct EscroDot.Purchase storage pointer"
																					}
																				},
																				"id": 958,
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "15823:5:0",
																				"memberName": "buyer",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 389,
																				"src": "15814:14:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 956,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "15806:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_payable_$",
																				"typeString": "type(address payable)"
																			},
																			"typeName": {
																				"id": 955,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "15806:8:0",
																				"stateMutability": "payable",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 959,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15806:23:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		}
																	},
																	{
																		"expression": {
																			"id": 960,
																			"name": "purchase",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 893,
																			"src": "15831:8:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Purchase_$398_storage_ptr",
																				"typeString": "struct EscroDot.Purchase storage pointer"
																			}
																		},
																		"id": 961,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "15840:6:0",
																		"memberName": "amount",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 391,
																		"src": "15831:15:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address_payable",
																			"typeString": "address payable"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 954,
																	"name": "_sendETH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1152,
																	"src": "15797:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
																		"typeString": "function (address payable,uint256)"
																	}
																},
																"id": 962,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15797:50:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 963,
															"nodeType": "ExpressionStatement",
															"src": "15797:50:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 986,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "16094:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 987,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "16098:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "16094:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 985,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16086:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 984,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16086:8:0",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 988,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16086:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"expression": {
																"id": 989,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "16107:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 990,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "16111:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "16107:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 983,
														"name": "_sendETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1152,
														"src": "16077:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 991,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16077:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 992,
												"nodeType": "ExpressionStatement",
												"src": "16077:40:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 994,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 875,
															"src": "16149:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 995,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 877,
															"src": "16160:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 996,
															"name": "refundBuyer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 879,
															"src": "16172:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"expression": {
																"id": 997,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "16185:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 998,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "16189:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "16185:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 993,
														"name": "DisputeResolved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 472,
														"src": "16133:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_bool_$_t_address_$returns$__$",
															"typeString": "function (bytes32,uint256,bool,address)"
														}
													},
													"id": 999,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16133:63:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1000,
												"nodeType": "EmitStatement",
												"src": "16128:68:0"
											}
										]
									},
									"documentation": {
										"id": 873,
										"nodeType": "StructuredDocumentation",
										"src": "14966:92:0",
										"text": " @notice Resolve a dispute. Anyone can act as arbiter by bonding ≥ price"
									},
									"functionSelector": "faf0bbbf",
									"id": 1002,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 882,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 881,
												"name": "nonReentrant",
												"nameLocations": [
													"15191:12:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 512,
												"src": "15191:12:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "15191:12:0"
										}
									],
									"name": "resolveDispute",
									"nameLocation": "15072:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 880,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 875,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "15104:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "15096:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 874,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "15096:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "15131:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "15123:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15123:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 879,
												"mutability": "mutable",
												"name": "refundBuyer",
												"nameLocation": "15156:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 1002,
												"src": "15151:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 878,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15151:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15086:87:0"
									},
									"returnParameters": {
										"id": 883,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15204:0:0"
									},
									"scope": 1157,
									"src": "15063:1140:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1027,
										"nodeType": "Block",
										"src": "16337:116:0",
										"statements": [
											{
												"expression": {
													"id": 1016,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1011,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "16347:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1013,
														"indexExpression": {
															"id": 1012,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "16354:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "16347:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"expression": {
															"id": 1014,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "16368:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 1015,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "16372:5:0",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "16368:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "16347:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1017,
												"nodeType": "ExpressionStatement",
												"src": "16347:30:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1019,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1005,
															"src": "16406:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"expression": {
																"id": 1020,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "16417:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1021,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "16421:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "16417:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1022,
																"name": "stakes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 365,
																"src": "16428:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																	"typeString": "mapping(bytes32 => uint256)"
																}
															},
															"id": 1024,
															"indexExpression": {
																"id": 1023,
																"name": "serviceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1005,
																"src": "16435:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "16428:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1018,
														"name": "StakeToppedUp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 427,
														"src": "16392:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,uint256,uint256)"
														}
													},
													"id": 1025,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16392:54:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1026,
												"nodeType": "EmitStatement",
												"src": "16387:59:0"
											}
										]
									},
									"documentation": {
										"id": 1003,
										"nodeType": "StructuredDocumentation",
										"src": "16209:43:0",
										"text": "@notice Increase stake for a service "
									},
									"functionSelector": "eaa3668f",
									"id": 1028,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1008,
													"name": "serviceId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1005,
													"src": "16326:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1009,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1007,
												"name": "onlyProvider",
												"nameLocations": [
													"16313:12:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 490,
												"src": "16313:12:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "16313:23:0"
										}
									],
									"name": "topUpStake",
									"nameLocation": "16266:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1005,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "16285:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 1028,
												"src": "16277:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1004,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "16277:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16276:19:0"
									},
									"returnParameters": {
										"id": 1010,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16337:0:0"
									},
									"scope": 1157,
									"src": "16257:196:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1071,
										"nodeType": "Block",
										"src": "16644:242:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1044,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1040,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1033,
																"src": "16662:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"baseExpression": {
																	"id": 1041,
																	"name": "stakes",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 365,
																	"src": "16672:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																		"typeString": "mapping(bytes32 => uint256)"
																	}
																},
																"id": 1043,
																"indexExpression": {
																	"id": 1042,
																	"name": "serviceId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1031,
																	"src": "16679:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "16672:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "16662:27:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20696e73756666696369656e74207374616b652062616c616e6365",
															"id": 1045,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "16691:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_000e36f459ccbf0927d2d329a8004e1e627f49a8095ffb0d2a77bf6c728b2aec",
																"typeString": "literal_string \"Escrow: insufficient stake balance\""
															},
															"value": "Escrow: insufficient stake balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_000e36f459ccbf0927d2d329a8004e1e627f49a8095ffb0d2a77bf6c728b2aec",
																"typeString": "literal_string \"Escrow: insufficient stake balance\""
															}
														],
														"id": 1039,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "16654:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1046,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16654:74:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1047,
												"nodeType": "ExpressionStatement",
												"src": "16654:74:0"
											},
											{
												"expression": {
													"id": 1052,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1048,
															"name": "stakes",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 365,
															"src": "16738:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																"typeString": "mapping(bytes32 => uint256)"
															}
														},
														"id": 1050,
														"indexExpression": {
															"id": 1049,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1031,
															"src": "16745:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "16738:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 1051,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1033,
														"src": "16759:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "16738:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1053,
												"nodeType": "ExpressionStatement",
												"src": "16738:27:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"expression": {
																		"id": 1057,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "16792:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1058,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "16796:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "16792:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1056,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "16784:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 1055,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "16784:8:0",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 1059,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "16784:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"id": 1060,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1033,
															"src": "16805:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1054,
														"name": "_sendETH",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1152,
														"src": "16775:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$",
															"typeString": "function (address payable,uint256)"
														}
													},
													"id": 1061,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16775:37:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1062,
												"nodeType": "ExpressionStatement",
												"src": "16775:37:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1064,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1031,
															"src": "16842:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1065,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1033,
															"src": "16853:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"baseExpression": {
																"id": 1066,
																"name": "stakes",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 365,
																"src": "16861:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_bytes32_$_t_uint256_$",
																	"typeString": "mapping(bytes32 => uint256)"
																}
															},
															"id": 1068,
															"indexExpression": {
																"id": 1067,
																"name": "serviceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1031,
																"src": "16868:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "16861:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1063,
														"name": "StakeWithdrawn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 436,
														"src": "16827:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_bytes32_$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (bytes32,uint256,uint256)"
														}
													},
													"id": 1069,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16827:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1070,
												"nodeType": "EmitStatement",
												"src": "16822:57:0"
											}
										]
									},
									"documentation": {
										"id": 1029,
										"nodeType": "StructuredDocumentation",
										"src": "16459:89:0",
										"text": " @notice Withdraw unused stake (cannot exceed balance held by contract)"
									},
									"functionSelector": "19dc5716",
									"id": 1072,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 1036,
													"name": "serviceId",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1031,
													"src": "16633:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												}
											],
											"id": 1037,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1035,
												"name": "onlyProvider",
												"nameLocations": [
													"16620:12:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 490,
												"src": "16620:12:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "16620:23:0"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "16562:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1034,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1031,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "16584:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "16576:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1030,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "16576:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1033,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "16603:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "16595:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1032,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16595:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16575:35:0"
									},
									"returnParameters": {
										"id": 1038,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16644:0:0"
									},
									"scope": 1157,
									"src": "16553:333:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1083,
										"nodeType": "Block",
										"src": "17006:33:0",
										"statements": [
											{
												"expression": {
													"id": 1081,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1079,
														"name": "ids",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1077,
														"src": "17016:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
															"typeString": "bytes32[] memory"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1080,
														"name": "serviceIds",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 360,
														"src": "17022:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_bytes32_$dyn_storage",
															"typeString": "bytes32[] storage ref"
														}
													},
													"src": "17016:16:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
														"typeString": "bytes32[] memory"
													}
												},
												"id": 1082,
												"nodeType": "ExpressionStatement",
												"src": "17016:16:0"
											}
										]
									},
									"documentation": {
										"id": 1073,
										"nodeType": "StructuredDocumentation",
										"src": "16892:40:0",
										"text": "@return ids Array of all service IDs"
									},
									"functionSelector": "de1c5488",
									"id": 1084,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "listServices",
									"nameLocation": "16946:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1074,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16958:2:0"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "ids",
												"nameLocation": "17001:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 1084,
												"src": "16984:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 1075,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "16984:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 1076,
													"nodeType": "ArrayTypeName",
													"src": "16984:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16983:22:0"
									},
									"scope": 1157,
									"src": "16937:102:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1102,
										"nodeType": "Block",
										"src": "17253:76:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1097,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1087,
															"src": "17283:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1098,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1089,
															"src": "17294:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1099,
															"name": "deliverableHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1091,
															"src": "17306:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1096,
														"name": "_claimDigest",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1129,
														"src": "17270:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$_t_uint256_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,uint256,bytes32) view returns (bytes32)"
														}
													},
													"id": 1100,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17270:52:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1095,
												"id": 1101,
												"nodeType": "Return",
												"src": "17263:59:0"
											}
										]
									},
									"documentation": {
										"id": 1085,
										"nodeType": "StructuredDocumentation",
										"src": "17045:86:0",
										"text": " @dev Compute the digest that a buyer must sign to authorise payment"
									},
									"functionSelector": "928c48fa",
									"id": 1103,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "claimDigest",
									"nameLocation": "17145:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1092,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1087,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "17165:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "17157:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1086,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17157:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1089,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "17184:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "17176:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1088,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17176:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1091,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "17204:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "17196:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1090,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17196:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17156:64:0"
									},
									"returnParameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1103,
												"src": "17244:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1093,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17244:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17243:9:0"
									},
									"scope": 1157,
									"src": "17136:193:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1128,
										"nodeType": "Block",
										"src": "17536:100:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1120,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "17582:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EscroDot_$1157",
																				"typeString": "contract EscroDot"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EscroDot_$1157",
																				"typeString": "contract EscroDot"
																			}
																		],
																		"id": 1119,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "17574:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1118,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "17574:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1121,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "17574:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1122,
																	"name": "serviceId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1106,
																	"src": "17589:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1123,
																	"name": "purchaseId",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1108,
																	"src": "17600:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1124,
																	"name": "deliverableHash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1110,
																	"src": "17612:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"expression": {
																	"id": 1116,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "17563:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1117,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "17567:6:0",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "17563:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1125,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17563:65:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1115,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "17553:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1126,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17553:76:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1114,
												"id": 1127,
												"nodeType": "Return",
												"src": "17546:83:0"
											}
										]
									},
									"documentation": {
										"id": 1104,
										"nodeType": "StructuredDocumentation",
										"src": "17335:78:0",
										"text": " @dev Internal: generate claim digest without message prefix"
									},
									"id": 1129,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_claimDigest",
									"nameLocation": "17427:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1106,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "17448:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "17440:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1105,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17440:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1108,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "17467:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "17459:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1107,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17459:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "17487:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "17479:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1109,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17479:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17439:64:0"
									},
									"returnParameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1129,
												"src": "17527:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1112,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "17527:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17526:9:0"
									},
									"scope": 1157,
									"src": "17418:218:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1151,
										"nodeType": "Block",
										"src": "17786:119:0",
										"statements": [
											{
												"assignments": [
													1138,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1138,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "17802:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 1151,
														"src": "17797:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1137,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "17797:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1145,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1143,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17838:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1139,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "17815:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "17818:4:0",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "17815:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1142,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1141,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1134,
																"src": "17830:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "17815:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17815:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17796:45:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1147,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1138,
															"src": "17859:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457363726f773a20455448207472616e73666572206661696c6564",
															"id": 1148,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17868:29:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c",
																"typeString": "literal_string \"Escrow: ETH transfer failed\""
															},
															"value": "Escrow: ETH transfer failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c822c06e15a2cde2f2544efe014fcb96fb94d60e9f68e69d034597781029ad5c",
																"typeString": "literal_string \"Escrow: ETH transfer failed\""
															}
														],
														"id": 1146,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "17851:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1149,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17851:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1150,
												"nodeType": "ExpressionStatement",
												"src": "17851:47:0"
											}
										]
									},
									"documentation": {
										"id": 1130,
										"nodeType": "StructuredDocumentation",
										"src": "17642:77:0",
										"text": " @dev Internal helper to send ETH and bubble up any failure"
									},
									"id": 1152,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_sendETH",
									"nameLocation": "17733:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "17758:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "17742:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17742:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "17770:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 1152,
												"src": "17762:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17762:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17741:36:0"
									},
									"returnParameters": {
										"id": 1136,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17786:0:0"
									},
									"scope": 1157,
									"src": "17724:181:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 1155,
										"nodeType": "Block",
										"src": "17938:2:0",
										"statements": []
									},
									"id": 1156,
									"implemented": true,
									"kind": "receive",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17918:2:0"
									},
									"returnParameters": {
										"id": 1154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17938:0:0"
									},
									"scope": 1157,
									"src": "17911:29:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1158,
							"src": "8084:9858:0",
							"usedErrors": [
								10,
								15,
								20
							],
							"usedEvents": [
								409,
								418,
								427,
								436,
								447,
								454,
								461,
								472
							]
						}
					],
					"src": "32:17910:0"
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": null,
				"formattedMessage": "\nWarning: It looks like you are using 'ecrecover' to validate a signature of a user account.\nPolkadot comes with native account abstraction support, therefore it is highly recommended NOT\nto rely on the fact that the account has an ECDSA private key attached to it since accounts might\nimplement other signature schemes.\n\n--> EscroDotLite.sol\n",
				"message": "\nWarning: It looks like you are using 'ecrecover' to validate a signature of a user account.\nPolkadot comes with native account abstraction support, therefore it is highly recommended NOT\nto rely on the fact that the account has an ECDSA private key attached to it since accounts might\nimplement other signature schemes.\n",
				"severity": "warning",
				"sourceLocation": {
					"file": "0",
					"start": 6809,
					"end": 6833
				},
				"type": "Warning"
			}
		],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}