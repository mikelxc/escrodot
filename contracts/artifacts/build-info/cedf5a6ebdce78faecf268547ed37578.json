{
	"id": "cedf5a6ebdce78faecf268547ed37578",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.28",
	"solcLongVersion": "0.8.28+commit.7893614a",
	"input": {
		"language": "Solidity",
		"sources": {
			"EscroDot.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.25;\n\n/**\n * @title EscroDot – minimal escrow & staking framework for AI‑agent services\n * @author Mike Liu (mikelxc)\n *\n * Mechanics (v0):\n * 1. Service provider stakes ETH to create a listing with a fixed price & gateway URL.\n * 2. Buyer locks the payment by calling buyService().\n * 3. Provider delivers off‑chain via the gateway and calls deliver() with a hash proof – ETH is released to them immediately.\n * 4. Buyer may raiseDispute() within any agreed timeframe.\n * 5. Arbiter resolves the dispute; on refund the buyer is compensated from the provider’s stake (slash) rather than claw‑back.\n *\n * Notes:\n * • All values are in native ETH. No ERC‑20 support yet.\n * • In production you’d add time‑outs, ERC‑20 support, upgradeability, and signature‑based off‑chain attestations.\n */\ncontract EscroDot {\n    /* -------------------------------------------------------------------------- */\n    /*                                   Types                                    */\n    /* -------------------------------------------------------------------------- */\n\n    struct Service {\n        address owner;   // provider / staking address\n        uint256 price;   // price per purchase (wei)\n        string  gateway; // off‑chain endpoint (IPFS CID / HTTPS URL)\n        uint256 stake;   // remaining stake (wei)\n        bool    active;  // provider can deactivate later\n    }\n\n    struct Purchase {\n        address buyer;\n        uint256 amount;     // equals service.price\n        bool    delivered;  // provider marked deliverable\n        bool    disputed;   // buyer raised dispute\n        bool    resolved;   // arbiter resolved\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                State vars                                  */\n    /* -------------------------------------------------------------------------- */\n\n    address public immutable arbiter;              // trusted dispute resolver\n\n    uint256 public nextServiceId = 1;              // incremental service id\n    mapping(uint256 => uint256) public nextPurchaseId;                  // serviceId => next purchaseId\n\n    mapping(uint256 => Service) public services;                        // serviceId => Service\n    mapping(uint256 => mapping(uint256 => Purchase)) public purchases;  // serviceId => purchaseId => Purchase\n\n    /* -------------------------------------------------------------------------- */\n    /*                                    Misc                                    */\n    /* -------------------------------------------------------------------------- */\n\n    uint256 private _unlocked = 1;                 // gas‑cheap re‑entrancy guard\n    modifier lock() {\n        require(_unlocked == 1, \"LOCKED\");\n        _unlocked = 0;\n        _;\n        _unlocked = 1;\n    }\n\n    function _safeSend(address to, uint256 amount) internal {\n        (bool ok, ) = to.call{value: amount}(\"\");\n        require(ok, \"ETH_SEND_FAIL\");\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                                   Events                                   */\n    /* -------------------------------------------------------------------------- */\n\n    event ServiceCreated(uint256 indexed id, address indexed owner, uint256 price, uint256 stake, string gateway);\n    event ServicePurchased(uint256 indexed id, uint256 indexed purchaseId, address indexed buyer, uint256 amount);\n    event DeliverableProvided(uint256 indexed id, uint256 indexed purchaseId, bytes32 deliverableHash);\n    event DisputeRaised(uint256 indexed id, uint256 indexed purchaseId);\n    event DisputeResolved(uint256 indexed id, uint256 indexed purchaseId, bool refunded);\n\n    /* -------------------------------------------------------------------------- */\n    /*                                 Constructor                                */\n    /* -------------------------------------------------------------------------- */\n\n    constructor(address _arbiter) {\n        require(_arbiter != address(0), \"arbiter = 0\");\n        arbiter = _arbiter;\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                               Core Functions                               */\n    /* -------------------------------------------------------------------------- */\n\n    /**\n     * @dev Provider stakes ETH and creates a service listing.\n     * @param price   Fixed price per purchase (in wei).\n     * @param gateway URL / CID where the AI agent can be invoked.\n     */\n    function createService(uint256 price, string calldata gateway) external payable returns (uint256 serviceId) {\n        require(price > 0, \"price = 0\");\n        require(bytes(gateway).length > 0, \"gateway empty\");\n        require(msg.value >= price, \"stake < price\");\n\n        serviceId = nextServiceId++;\n        services[serviceId] = Service({\n            owner: msg.sender,\n            price: price,\n            gateway: gateway,\n            stake: msg.value,\n            active: true\n        });\n\n        emit ServiceCreated(serviceId, msg.sender, price, msg.value, gateway);\n    }\n\n    /**\n     * @dev Buyer locks payment for a service. Allows multiple purchases.\n     * @return purchaseId A unique purchase identifier for further actions.\n     */\n    function buyService(uint256 serviceId) external payable lock returns (uint256 purchaseId) {\n        Service storage s = services[serviceId];\n        require(s.active, \"inactive\");\n        require(msg.value == s.price, \"wrong amount\");\n\n        purchaseId = nextPurchaseId[serviceId]++;\n        purchases[serviceId][purchaseId] = Purchase({\n            buyer: msg.sender,\n            amount: msg.value,\n            delivered: false,\n            disputed: false,\n            resolved: false\n        });\n\n        emit ServicePurchased(serviceId, purchaseId, msg.sender, msg.value);\n    }\n\n    /**\n     * @dev Provider marks deliverable for a given purchase and receives payment immediately.\n     * @param deliverableHash could be IPFS CID / SHA‑256 of encrypted artifact.\n     */\n    function deliver(uint256 serviceId, uint256 purchaseId, bytes32 deliverableHash) external lock {\n        Service storage s = services[serviceId];\n        require(msg.sender == s.owner, \"not owner\");\n\n        Purchase storage p = purchases[serviceId][purchaseId];\n        require(p.amount > 0 && !p.delivered, \"invalid purchase\");\n\n        p.delivered = true;\n\n        emit DeliverableProvided(serviceId, purchaseId, deliverableHash);\n\n        _safeSend(s.owner, p.amount);\n    }\n\n    /**\n     * @dev Buyer escalates after delivery if unhappy with the output.\n     */\n    function raiseDispute(uint256 serviceId, uint256 purchaseId) external {\n        Purchase storage p = purchases[serviceId][purchaseId];\n        require(msg.sender == p.buyer, \"not buyer\");\n        require(p.delivered, \"not delivered yet\");\n        require(!p.disputed, \"already disputed\");\n\n        p.disputed = true;\n\n        emit DisputeRaised(serviceId, purchaseId);\n    }\n\n    /**\n     * @dev Arbiter decides outcome. If `refund=true` the buyer receives payment back\n     *      using a slash from provider stake. Otherwise dispute is closed.\n     */\n    function resolveDispute(uint256 serviceId, uint256 purchaseId, bool refund) external lock {\n        require(msg.sender == arbiter, \"not arbiter\");\n\n        Purchase storage p = purchases[serviceId][purchaseId];\n        require(p.disputed && !p.resolved, \"no active dispute\");\n\n        p.resolved = true;\n        Service storage s = services[serviceId];\n\n        if (refund) {\n            uint256 refundAmount = p.amount;\n            require(s.stake >= refundAmount, \"insufficient stake\");\n            s.stake -= refundAmount;\n            _safeSend(p.buyer, refundAmount);\n        }\n\n        emit DisputeResolved(serviceId, purchaseId, refund);\n    }\n\n    /* -------------------------------------------------------------------------- */\n    /*                            Provider House‑Keeping                           */\n    /* -------------------------------------------------------------------------- */\n\n    /// @dev Provider can add more stake at any time.\n    function topUpStake(uint256 serviceId) external payable {\n        Service storage s = services[serviceId];\n        require(msg.sender == s.owner, \"not owner\");\n        require(msg.value > 0, \"no value\");\n        s.stake += msg.value;\n    }\n\n    /// @dev Provider may withdraw excess stake when no disputes are unresolved.\n    function withdrawStake(uint256 serviceId, uint256 amount) external lock {\n        Service storage s = services[serviceId];\n        require(msg.sender == s.owner, \"not owner\");\n        require(amount <= s.stake, \"overdraw\");\n        s.stake -= amount;\n        _safeSend(s.owner, amount);\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.deployedBytecode",
						"evm.methodIdentifiers"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"EscroDot.sol": {
				"EscroDot": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_arbiter",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bytes32",
									"name": "deliverableHash",
									"type": "bytes32"
								}
							],
							"name": "DeliverableProvided",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "DisputeRaised",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "refunded",
									"type": "bool"
								}
							],
							"name": "DisputeResolved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "stake",
									"type": "uint256"
								},
								{
									"indexed": false,
									"internalType": "string",
									"name": "gateway",
									"type": "string"
								}
							],
							"name": "ServiceCreated",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "id",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "ServicePurchased",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "arbiter",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "serviceId",
									"type": "uint256"
								}
							],
							"name": "buyService",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "gateway",
									"type": "string"
								}
							],
							"name": "createService",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "serviceId",
									"type": "uint256"
								}
							],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "serviceId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bytes32",
									"name": "deliverableHash",
									"type": "bytes32"
								}
							],
							"name": "deliver",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "nextPurchaseId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nextServiceId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "purchases",
							"outputs": [
								{
									"internalType": "address",
									"name": "buyer",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "delivered",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "disputed",
									"type": "bool"
								},
								{
									"internalType": "bool",
									"name": "resolved",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "serviceId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								}
							],
							"name": "raiseDispute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "serviceId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "purchaseId",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "refund",
									"type": "bool"
								}
							],
							"name": "resolveDispute",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"name": "services",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "price",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "gateway",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "stake",
									"type": "uint256"
								},
								{
									"internalType": "bool",
									"name": "active",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "serviceId",
									"type": "uint256"
								}
							],
							"name": "topUpStake",
							"outputs": [],
							"stateMutability": "payable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "serviceId",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "withdrawStake",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"metadata": {
						"optimizer_settings": {
							"is_debug_logging_enabled": false,
							"is_fallback_to_size_enabled": false,
							"is_verify_each_enabled": false,
							"level_back_end": "Aggressive",
							"level_middle_end": "Aggressive",
							"level_middle_end_size": "Zero"
						},
						"revive_pallet_version": null,
						"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8",
						"solc_metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arbiter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"DeliverableProvided\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"DisputeRaised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"refunded\",\"type\":\"bool\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gateway\",\"type\":\"string\"}],\"name\":\"ServiceCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ServicePurchased\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"arbiter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"}],\"name\":\"buyService\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gateway\",\"type\":\"string\"}],\"name\":\"createService\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"deliverableHash\",\"type\":\"bytes32\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nextPurchaseId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextServiceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"delivered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"disputed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"resolved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"}],\"name\":\"raiseDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"purchaseId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"refund\",\"type\":\"bool\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"services\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"gateway\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"}],\"name\":\"topUpStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serviceId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mike Liu (mikelxc) Mechanics (v0): 1. Service provider stakes ETH to create a listing with a fixed price & gateway URL. 2. Buyer locks the payment by calling buyService(). 3. Provider delivers off\\u2011chain via the gateway and calls deliver() with a hash proof \\u2013 ETH is released to them immediately. 4. Buyer may raiseDispute() within any agreed timeframe. 5. Arbiter resolves the dispute; on refund the buyer is compensated from the provider\\u2019s stake (slash) rather than claw\\u2011back. Notes: \\u2022 All values are in native ETH. No ERC\\u201120 support yet. \\u2022 In production you\\u2019d add time\\u2011outs, ERC\\u201120 support, upgradeability, and signature\\u2011based off\\u2011chain attestations.\",\"kind\":\"dev\",\"methods\":{\"buyService(uint256)\":{\"details\":\"Buyer locks payment for a service. Allows multiple purchases.\",\"returns\":{\"purchaseId\":\"A unique purchase identifier for further actions.\"}},\"createService(uint256,string)\":{\"details\":\"Provider stakes ETH and creates a service listing.\",\"params\":{\"gateway\":\"URL / CID where the AI agent can be invoked.\",\"price\":\"Fixed price per purchase (in wei).\"}},\"deliver(uint256,uint256,bytes32)\":{\"details\":\"Provider marks deliverable for a given purchase and receives payment immediately.\",\"params\":{\"deliverableHash\":\"could be IPFS CID / SHA\\u2011256 of encrypted artifact.\"}},\"raiseDispute(uint256,uint256)\":{\"details\":\"Buyer escalates after delivery if unhappy with the output.\"},\"resolveDispute(uint256,uint256,bool)\":{\"details\":\"Arbiter decides outcome. If `refund=true` the buyer receives payment back      using a slash from provider stake. Otherwise dispute is closed.\"},\"topUpStake(uint256)\":{\"details\":\"Provider can add more stake at any time.\"},\"withdrawStake(uint256,uint256)\":{\"details\":\"Provider may withdraw excess stake when no disputes are unresolved.\"}},\"title\":\"EscroDot \\u2013\\u00a0minimal escrow & staking framework for AI\\u2011agent services\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"EscroDot.sol\":\"EscroDot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":false},\"runs\":200},\"remappings\":[]},\"sources\":{\"EscroDot.sol\":{\"keccak256\":\"0x787d5b27054f6fd1203954a78c5cb674de038d1f5bef5b12d98c7aa4386cb522\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://56c10bfe8f9c227aaae85b8f217d2047a3c7499ab844e32ff3734e1449884296\",\"dweb:/ipfs/QmTsuUv2v4framTUg3jmxvHGH8Ycv1otPmB9evqGWBuakD\"]}},\"version\":1}",
						"solc_version": "0.8.28+commit.7893614a.Emscripten.clang"
					},
					"devdoc": {
						"author": "Mike Liu (mikelxc) Mechanics (v0): 1. Service provider stakes ETH to create a listing with a fixed price & gateway URL. 2. Buyer locks the payment by calling buyService(). 3. Provider delivers off‑chain via the gateway and calls deliver() with a hash proof – ETH is released to them immediately. 4. Buyer may raiseDispute() within any agreed timeframe. 5. Arbiter resolves the dispute; on refund the buyer is compensated from the provider’s stake (slash) rather than claw‑back. Notes: • All values are in native ETH. No ERC‑20 support yet. • In production you’d add time‑outs, ERC‑20 support, upgradeability, and signature‑based off‑chain attestations.",
						"kind": "dev",
						"methods": {
							"buyService(uint256)": {
								"details": "Buyer locks payment for a service. Allows multiple purchases.",
								"returns": {
									"purchaseId": "A unique purchase identifier for further actions."
								}
							},
							"createService(uint256,string)": {
								"details": "Provider stakes ETH and creates a service listing.",
								"params": {
									"gateway": "URL / CID where the AI agent can be invoked.",
									"price": "Fixed price per purchase (in wei)."
								}
							},
							"deliver(uint256,uint256,bytes32)": {
								"details": "Provider marks deliverable for a given purchase and receives payment immediately.",
								"params": {
									"deliverableHash": "could be IPFS CID / SHA‑256 of encrypted artifact."
								}
							},
							"raiseDispute(uint256,uint256)": {
								"details": "Buyer escalates after delivery if unhappy with the output."
							},
							"resolveDispute(uint256,uint256,bool)": {
								"details": "Arbiter decides outcome. If `refund=true` the buyer receives payment back      using a slash from provider stake. Otherwise dispute is closed."
							},
							"topUpStake(uint256)": {
								"details": "Provider can add more stake at any time."
							},
							"withdrawStake(uint256,uint256)": {
								"details": "Provider may withdraw excess stake when no disputes are unresolved."
							}
						},
						"title": "EscroDot – minimal escrow & staking framework for AI‑agent services",
						"version": 1
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					},
					"storageLayout": {
						"storage": [
							{
								"astId": 29,
								"contract": "EscroDot.sol:EscroDot",
								"label": "nextServiceId",
								"offset": 0,
								"slot": "0",
								"type": "t_uint256"
							},
							{
								"astId": 33,
								"contract": "EscroDot.sol:EscroDot",
								"label": "nextPurchaseId",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_uint256,t_uint256)"
							},
							{
								"astId": 38,
								"contract": "EscroDot.sol:EscroDot",
								"label": "services",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_struct(Service)13_storage)"
							},
							{
								"astId": 45,
								"contract": "EscroDot.sol:EscroDot",
								"label": "purchases",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Purchase)24_storage))"
							},
							{
								"astId": 48,
								"contract": "EscroDot.sol:EscroDot",
								"label": "_unlocked",
								"offset": 0,
								"slot": "4",
								"type": "t_uint256"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_uint256,t_mapping(t_uint256,t_struct(Purchase)24_storage))": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => mapping(uint256 => struct EscroDot.Purchase))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_uint256,t_struct(Purchase)24_storage)"
							},
							"t_mapping(t_uint256,t_struct(Purchase)24_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct EscroDot.Purchase)",
								"numberOfBytes": "32",
								"value": "t_struct(Purchase)24_storage"
							},
							"t_mapping(t_uint256,t_struct(Service)13_storage)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => struct EscroDot.Service)",
								"numberOfBytes": "32",
								"value": "t_struct(Service)13_storage"
							},
							"t_mapping(t_uint256,t_uint256)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_struct(Purchase)24_storage": {
								"encoding": "inplace",
								"label": "struct EscroDot.Purchase",
								"members": [
									{
										"astId": 15,
										"contract": "EscroDot.sol:EscroDot",
										"label": "buyer",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 17,
										"contract": "EscroDot.sol:EscroDot",
										"label": "amount",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 19,
										"contract": "EscroDot.sol:EscroDot",
										"label": "delivered",
										"offset": 0,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 21,
										"contract": "EscroDot.sol:EscroDot",
										"label": "disputed",
										"offset": 1,
										"slot": "2",
										"type": "t_bool"
									},
									{
										"astId": 23,
										"contract": "EscroDot.sol:EscroDot",
										"label": "resolved",
										"offset": 2,
										"slot": "2",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "96"
							},
							"t_struct(Service)13_storage": {
								"encoding": "inplace",
								"label": "struct EscroDot.Service",
								"members": [
									{
										"astId": 4,
										"contract": "EscroDot.sol:EscroDot",
										"label": "owner",
										"offset": 0,
										"slot": "0",
										"type": "t_address"
									},
									{
										"astId": 6,
										"contract": "EscroDot.sol:EscroDot",
										"label": "price",
										"offset": 0,
										"slot": "1",
										"type": "t_uint256"
									},
									{
										"astId": 8,
										"contract": "EscroDot.sol:EscroDot",
										"label": "gateway",
										"offset": 0,
										"slot": "2",
										"type": "t_string_storage"
									},
									{
										"astId": 10,
										"contract": "EscroDot.sol:EscroDot",
										"label": "stake",
										"offset": 0,
										"slot": "3",
										"type": "t_uint256"
									},
									{
										"astId": 12,
										"contract": "EscroDot.sol:EscroDot",
										"label": "active",
										"offset": 0,
										"slot": "4",
										"type": "t_bool"
									}
								],
								"numberOfBytes": "160"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"evm": {
						"assembly": "// RO data = 0/0 bytes\n// RW data = 164/65744 bytes\n// Stack size = 16384 bytes\n\n// Instructions = 27275\n// Code size = 86180 bytes\n\n      : @0 (gas: 2)\n     0: i32 a2 = a0 >> 0x10\n     3: jump @6 if a2 != 0\n      : @1 (gas: 2)\n     6: a2 = 0x10001\n    11: jump @6 if a1 >=u a2\n      : @2 (gas: 4)\n    14: a1 = a1 + a0\n    17: i32 a1 = a1 + 0x1f\n    20: a1 = a1 & 0xffffffffffffffe0\n    23: jump @7 if a1 >=u 65537\n      : @3 (gas: 2)\n    29: a3 = i32 [0x200a4]\n    34: jump @5 if a3 >=u a1\n      : @4 (gas: 4)\n    37: u32 [0x200a4] = a1\n    42: a1 = 0x200b0\n    47: a0 = a0 + a1\n    50: ret\n      : @5 (gas: 3)\n    52: a1 = 0x200b0\n    57: a0 = a0 + a1\n    60: ret\n      : @6 (gas: 1)\n    62: trap\n      : @7 (gas: 1)\n    63: trap\n      : @8 (gas: 1)\n    64: jump @22 if a0 == a1\n      : @9 (gas: 9)\n    67: a3 = a1 << 0x20\n    70: a3 = a3 >> 0x20\n    73: a4 = a0 << 0x20\n    76: a4 = a4 >> 0x20\n    79: a4 = a4 + a2\n    82: a3 = a3 - a4\n    85: a4 = a2 << 0x1\n    88: a4 = -a4\n    90: jump @15 if a4 >=u a3\n      : @10 (gas: 1)\n    93: jump @19 if a0 >=u a1\n      : @11 (gas: 1)\n    96: jump @22 if a2 == 0\n      : @12 (gas: 3)\n    99: a2 = a2 + a0\n   102: a3 = a0\n   104: fallthrough\n      : @13 (gas: 6)\n   105: a4 = u8 [a1]\n   107: a1 = a1 + 0x1\n   110: a5 = a3 + 0x1\n   113: u8 [a3] = a4\n   115: a3 = a5\n   117: jump @13 if a5 != a2\n      : @14 (gas: 1)\n   120: jump @22\n      : @15 (gas: 1)\n   122: jump @22 if a2 == 0\n      : @16 (gas: 3)\n   125: a2 = a2 + a0\n   128: a3 = a0\n   130: fallthrough\n      : @17 (gas: 6)\n   131: a4 = u8 [a1]\n   133: a1 = a1 + 0x1\n   136: a5 = a3 + 0x1\n   139: u8 [a3] = a4\n   141: a3 = a5\n   143: jump @17 if a5 != a2\n      : @18 (gas: 1)\n   146: jump @22\n      : @19 (gas: 1)\n   148: jump @22 if a2 == 0\n      : @20 (gas: 2)\n   151: i32 a3 = a2 + 0xffffffffffffffff\n   154: fallthrough\n      : @21 (gas: 7)\n   155: a4 = a1 + a3\n   158: a4 = u8 [a4]\n   160: a2 = a2 + 0xffffffffffffffff\n   163: a5 = a0 + a3\n   166: u8 [a5] = a4\n   168: i32 a3 = a3 + 0xffffffffffffffff\n   171: jump @21 if a2 != 0\n      : @22 (gas: 1)\n   174: ret\n      : @23 (gas: 13)\n   176: sp = sp + 0xffffffffffffffd8\n   179: u64 [sp + 0x20] = ra\n   182: u64 [sp + 0x18] = s0\n   185: u64 [sp + 0x10] = s1\n   188: a2 = u64 [a1]\n   190: u64 [sp + 0x8] = a2\n   193: a2 = u64 [a1 + 0x8]\n   196: u64 [sp] = a2\n   198: s0 = u64 [a1 + 0x10]\n   201: s1 = u64 [a1 + 0x18]\n   204: i32 a0 = a0 + 0\n   206: a1 = 0x20\n   209: ra = 2, jump @0\n      : @24 [@dyn 1] (gas: 71)\n   214: a1 = reverse s1\n   216: a2 = reverse s0\n   218: a3 = u64 [sp]\n   220: a3 = reverse a3\n   222: a4 = u64 [sp + 0x8]\n   225: a4 = reverse a4\n   227: u8 [a0 + 0x18] = a4\n   230: u8 [a0 + 0x10] = a3\n   233: u8 [a0 + 0x8] = a2\n   236: u8 [a0] = a1\n   238: a5 = a4 >> 0x38\n   241: u8 [a0 + 0x1f] = a5\n   244: a5 = a4 >> 0x30\n   247: u8 [a0 + 0x1e] = a5\n   250: a5 = a4 >> 0x28\n   253: u8 [a0 + 0x1d] = a5\n   256: a5 = a4 >> 0x20\n   259: u8 [a0 + 0x1c] = a5\n   262: a5 = a4 >> 0x18\n   265: u8 [a0 + 0x1b] = a5\n   268: a5 = a4 >> 0x10\n   271: u8 [a0 + 0x1a] = a5\n   274: a4 = a4 >> 0x8\n   277: u8 [a0 + 0x19] = a4\n   280: a4 = a3 >> 0x38\n   283: u8 [a0 + 0x17] = a4\n   286: a4 = a3 >> 0x30\n   289: u8 [a0 + 0x16] = a4\n   292: a4 = a3 >> 0x28\n   295: u8 [a0 + 0x15] = a4\n   298: a4 = a3 >> 0x20\n   301: u8 [a0 + 0x14] = a4\n   304: a4 = a3 >> 0x18\n   307: u8 [a0 + 0x13] = a4\n   310: a4 = a3 >> 0x10\n   313: u8 [a0 + 0x12] = a4\n   316: a3 = a3 >> 0x8\n   319: u8 [a0 + 0x11] = a3\n   322: a3 = a2 >> 0x38\n   325: u8 [a0 + 0xf] = a3\n   328: a3 = a2 >> 0x30\n   331: u8 [a0 + 0xe] = a3\n   334: a3 = a2 >> 0x28\n   337: u8 [a0 + 0xd] = a3\n   340: a3 = a2 >> 0x20\n   343: u8 [a0 + 0xc] = a3\n   346: a3 = a2 >> 0x18\n   349: u8 [a0 + 0xb] = a3\n   352: a3 = a2 >> 0x10\n   355: u8 [a0 + 0xa] = a3\n   358: a2 = a2 >> 0x8\n   361: u8 [a0 + 0x9] = a2\n   364: a2 = a1 >> 0x38\n   367: u8 [a0 + 0x7] = a2\n   370: a2 = a1 >> 0x30\n   373: u8 [a0 + 0x6] = a2\n   376: a2 = a1 >> 0x28\n   379: u8 [a0 + 0x5] = a2\n   382: a2 = a1 >> 0x20\n   385: u8 [a0 + 0x4] = a2\n   388: a2 = a1 >> 0x18\n   391: u8 [a0 + 0x3] = a2\n   394: a2 = a1 >> 0x10\n   397: u8 [a0 + 0x2] = a2\n   400: a1 = a1 >> 0x8\n   403: u8 [a0 + 0x1] = a1\n   406: ra = u64 [sp + 0x20]\n   409: s0 = u64 [sp + 0x18]\n   412: s1 = u64 [sp + 0x10]\n   415: sp = sp + 0x28\n   418: ret\n      : @25 (gas: 6)\n   420: sp = sp + 0xfffffffffffffff0\n   423: u64 [sp + 0x8] = ra\n   426: u64 [sp] = s0\n   428: s0 = a0 & 0x1\n   431: ecalli 3 // 'call_data_size'\n   433: fallthrough\n      : @26 (gas: 2)\n   434: u32 [0x200a8] = a0\n   439: jump @28 if s0 == 0\n      : @27 (gas: 1)\n   442: ra = 4, jump @29\n      : @28 [@dyn 2] (gas: 1)\n   446: ra = 6, jump @45\n      : @29 [@dyn 3] (gas: 9)\n   451: sp = sp + 0xffffffffffffff60\n   455: u64 [sp + 0x98] = ra\n   459: u64 [sp + 0x90] = s0\n   463: u64 [sp + 0x88] = s1\n   467: s0 = sp + 0xa0\n   471: sp = sp & 0xffffffffffffffe0\n   474: a0 = 0x40\n   477: a1 = 0x20\n   480: ra = 8, jump @0\n      : @30 [@dyn 4] (gas: 39)\n   485: u8 [a0 + 31] = 0xa0\n   490: u8 [a0 + 30] = 0\n   493: u8 [a0 + 29] = 0\n   496: u8 [a0 + 28] = 0\n   499: u8 [a0 + 27] = 0\n   502: u8 [a0 + 26] = 0\n   505: u8 [a0 + 25] = 0\n   508: u8 [a0 + 24] = 0\n   511: u8 [a0 + 23] = 0\n   514: u8 [a0 + 22] = 0\n   517: u8 [a0 + 21] = 0\n   520: u8 [a0 + 20] = 0\n   523: u8 [a0 + 19] = 0\n   526: u8 [a0 + 18] = 0\n   529: u8 [a0 + 17] = 0\n   532: u8 [a0 + 16] = 0\n   535: u8 [a0 + 15] = 0\n   538: u8 [a0 + 14] = 0\n   541: u8 [a0 + 13] = 0\n   544: u8 [a0 + 12] = 0\n   547: u8 [a0 + 11] = 0\n   550: u8 [a0 + 10] = 0\n   553: u8 [a0 + 9] = 0\n   556: u8 [a0 + 8] = 0\n   559: u8 [a0 + 7] = 0\n   562: u8 [a0 + 6] = 0\n   565: u8 [a0 + 5] = 0\n   568: u8 [a0 + 4] = 0\n   571: u8 [a0 + 3] = 0\n   574: u8 [a0 + 2] = 0\n   577: u8 [a0 + 1] = 0\n   580: u8 [a0 + 0] = 0\n   582: u64 [sp + 120] = 0\n   585: u64 [sp + 96] = 0\n   588: u64 [sp + 104] = 0\n   591: u64 [sp + 112] = 0\n   594: i32 a0 = sp + 0x60\n   597: ecalli 15 // 'value_transferred'\n   599: fallthrough\n      : @31 (gas: 8)\n   600: a0 = u64 [sp + 0x70]\n   603: a1 = u64 [sp + 0x78]\n   606: a2 = u64 [sp + 0x68]\n   609: a3 = u64 [sp + 0x60]\n   612: a1 = a1 | a2\n   615: a0 = a0 | a3\n   618: a0 = a0 | a1\n   621: jump @37 if a0 != 0\n      : @32 (gas: 20)\n   625: a0 = sp + 0x40\n   628: ra = 0xa\n   631: sp = sp + 0xffffffffffffff90\n   634: u64 [sp + 0x68] = ra\n   637: u64 [sp + 0x60] = s0\n   640: u64 [sp + 0x58] = s1\n   643: s0 = sp + 0x70\n   646: sp = sp & 0xfffffffffffffff0\n   649: s1 = i32 [0x200a8]\n   654: u64 [sp + 0x8] = a0\n   657: a0 = s1 << 0x20\n   660: a0 = a0 >> 0x20\n   663: u64 [sp + 40] = 0\n   666: u64 [sp + 32] = 0\n   669: u64 [sp + 0x10] = a0\n   672: a0 = sp + 0x30\n   675: a1 = sp + 0x10\n   678: u64 [sp + 24] = 0\n   681: ra = 0x46\n   684: jump @78\n      : @33 [@dyn 5] (gas: 84)\n   687: a1 = u64 [sp + 0x40]\n   690: a0 = u64 [sp + 0x48]\n   693: a2 = u64 [sp + 0x50]\n   696: a3 = u64 [sp + 0x58]\n   699: u64 [sp + 0x38] = a3\n   702: u64 [sp + 0x30] = a2\n   705: u64 [sp + 0x28] = a0\n   708: a0 = sp + 0x20\n   711: u64 [sp + 0x20] = a1\n   714: ra = 0xc\n   717: sp = sp + 0xffffffffffffff20\n   721: u64 [sp + 0xd8] = ra\n   725: u64 [sp + 0xd0] = s0\n   729: u64 [sp + 0xc8] = s1\n   733: s0 = sp + 0xe0\n   737: sp = sp & 0xffffffffffffffe0\n   740: a1 = u64 [a0 + 0x18]\n   743: u64 [sp] = a1\n   745: a1 = u64 [a0 + 0x8]\n   748: u64 [sp + 0x18] = a1\n   751: a1 = u64 [a0]\n   753: u64 [sp + 0x8] = a1\n   756: a0 = u64 [a0 + 0x10]\n   759: u64 [sp + 0x10] = a0\n   762: u64 [sp + 152] = 0\n   766: u64 [sp + 144] = 0\n   770: u64 [sp + 136] = 0\n   774: u64 [sp + 128] = 0\n   778: u64 [sp + 184] = 0\n   782: u64 [sp + 176] = 0\n   786: u64 [sp + 168] = 0\n   790: u64 [sp + 160] = 0\n   794: u32 [sp + 96] = 0x20\n   798: i32 a1 = sp + 0x80\n   802: i32 a3 = sp + 0xa0\n   806: i32 a4 = sp + 0x60\n   809: a2 = 0xffffffffffffffff\n   812: a0 = 0\n   814: ecalli 7 // 'get_storage'\n   816: u64 [sp + 152] = 0\n   820: u64 [sp + 144] = 0\n   824: u64 [sp + 136] = 0\n   828: u64 [sp + 128] = 0\n   832: u64 [sp + 184] = 0\n   836: u64 [sp + 176] = 0\n   840: u64 [sp + 168] = 0\n   844: u64 [sp + 160] = 0x1\n   849: i32 a1 = sp + 0x80\n   853: i32 a3 = sp + 0xa0\n   857: a2 = 0xffffffffffffffff\n   860: a4 = 0x20\n   863: a0 = 0\n   865: ecalli 14 // 'set_storage'\n   867: u64 [sp + 152] = 0\n   871: u64 [sp + 144] = 0\n   875: u64 [sp + 136] = 0\n   879: u64 [sp + 128] = 0x4\n   884: u64 [sp + 184] = 0\n   888: u64 [sp + 176] = 0\n   892: u64 [sp + 168] = 0\n   896: u64 [sp + 160] = 0\n   900: u32 [sp + 96] = 0x20\n   904: i32 a1 = sp + 0x80\n   908: i32 a3 = sp + 0xa0\n   912: i32 a4 = sp + 0x60\n   915: a2 = 0xffffffffffffffff\n   918: a0 = 0\n   920: ecalli 7 // 'get_storage'\n   922: u64 [sp + 152] = 0\n   926: u64 [sp + 144] = 0\n   930: u64 [sp + 136] = 0\n   934: u64 [sp + 128] = 0x4\n   939: s1 = u64 [sp + 0x8]\n   942: u64 [sp + 184] = 0\n   946: u64 [sp + 176] = 0\n   950: u64 [sp + 168] = 0\n   954: u64 [sp + 160] = 0x1\n   959: i32 a1 = sp + 0x80\n   963: i32 a3 = sp + 0xa0\n   967: a2 = 0xffffffffffffffff\n   970: a4 = 0x20\n   973: a0 = 0\n   975: ecalli 14 // 'set_storage'\n   977: jump @111\n      : @34 [@dyn 6] (gas: 3)\n   980: a0 = 0x40\n   983: a1 = 0x20\n   986: ra = 14, jump @0\n      : @35 [@dyn 7] (gas: 100)\n   991: a1 = u8 [a0 + 0x11]\n   994: a2 = u8 [a0 + 0x10]\n   997: a3 = u8 [a0 + 0x12]\n  1000: a4 = u8 [a0 + 0x13]\n  1003: a1 = a1 << 0x8\n  1006: a1 = a1 | a2\n  1009: a3 = a3 << 0x10\n  1012: a4 = a4 << 0x18\n  1015: a3 = a3 | a4\n  1018: a1 = a1 | a3\n  1021: a2 = u8 [a0 + 0x15]\n  1024: a3 = u8 [a0 + 0x14]\n  1027: a4 = u8 [a0 + 0x16]\n  1030: a5 = u8 [a0 + 0x17]\n  1033: a2 = a2 << 0x8\n  1036: a2 = a2 | a3\n  1039: a4 = a4 << 0x10\n  1042: a5 = a5 << 0x18\n  1045: a4 = a4 | a5\n  1048: a2 = a2 | a4\n  1051: a2 = a2 << 0x20\n  1054: t0 = a2 | a1\n  1057: a2 = u8 [a0 + 0x1]\n  1060: a3 = u8 [a0]\n  1062: a4 = u8 [a0 + 0x2]\n  1065: a5 = u8 [a0 + 0x3]\n  1068: a2 = a2 << 0x8\n  1071: a2 = a2 | a3\n  1074: a4 = a4 << 0x10\n  1077: a5 = a5 << 0x18\n  1080: a4 = a4 | a5\n  1083: a2 = a2 | a4\n  1086: a3 = u8 [a0 + 0x5]\n  1089: a4 = u8 [a0 + 0x4]\n  1092: a5 = u8 [a0 + 0x6]\n  1095: s1 = u8 [a0 + 0x7]\n  1098: a3 = a3 << 0x8\n  1101: a3 = a3 | a4\n  1104: a5 = a5 << 0x10\n  1107: s1 = s1 << 0x18\n  1110: a5 = a5 | s1\n  1113: a3 = a3 | a5\n  1116: a3 = a3 << 0x20\n  1119: a2 = a2 | a3\n  1122: a3 = u8 [a0 + 0x19]\n  1125: a4 = u8 [a0 + 0x18]\n  1128: a5 = u8 [a0 + 0x1a]\n  1131: s1 = u8 [a0 + 0x1b]\n  1134: a3 = a3 << 0x8\n  1137: a3 = a3 | a4\n  1140: a5 = a5 << 0x10\n  1143: s1 = s1 << 0x18\n  1146: a5 = a5 | s1\n  1149: a3 = a3 | a5\n  1152: a4 = u8 [a0 + 0x1d]\n  1155: a5 = u8 [a0 + 0x1c]\n  1158: s1 = u8 [a0 + 0x1e]\n  1161: a1 = u8 [a0 + 0x1f]\n  1164: a4 = a4 << 0x8\n  1167: a4 = a4 | a5\n  1170: s1 = s1 << 0x10\n  1173: a1 = a1 << 0x18\n  1176: a1 = a1 | s1\n  1179: a1 = a1 | a4\n  1182: a1 = a1 << 0x20\n  1185: a3 = a3 | a1\n  1188: a1 = u8 [a0 + 0x9]\n  1191: a4 = u8 [a0 + 0x8]\n  1194: a5 = u8 [a0 + 0xa]\n  1197: s1 = u8 [a0 + 0xb]\n  1200: a1 = a1 << 0x8\n  1203: a1 = a1 | a4\n  1206: a5 = a5 << 0x10\n  1209: s1 = s1 << 0x18\n  1212: a5 = a5 | s1\n  1215: a1 = a1 | a5\n  1218: a4 = u8 [a0 + 0xd]\n  1221: a5 = u8 [a0 + 0xc]\n  1224: s1 = u8 [a0 + 0xe]\n  1227: a0 = u8 [a0 + 0xf]\n  1230: a4 = a4 << 0x8\n  1233: a4 = a4 | a5\n  1236: s1 = s1 << 0x10\n  1239: a0 = a0 << 0x18\n  1242: a0 = a0 | s1\n  1245: a0 = a0 | a4\n  1248: a0 = a0 << 0x20\n  1251: a0 = a0 | a1\n  1254: a0 = reverse a0\n  1256: s1 = reverse a3\n  1258: a1 = reverse a2\n  1260: a2 = reverse t0\n  1262: a1 = a1 | a2\n  1265: a2 = s1 | a0\n  1268: a2 = a2 | a1\n  1271: a2 = a2 >> 0x20\n  1274: a0 = a0 | a1\n  1277: a0 = a0 << 0x20\n  1280: a0 = a0 | a2\n  1283: jump @39 if a0 == 0\n      : @36 (gas: 1)\n  1286: trap\n      : @37 (gas: 3)\n  1287: a0 = 0\n  1289: a1 = 0\n  1291: ra = 16, jump @0\n      : @38 [@dyn 8] (gas: 5)\n  1296: i32 a1 = a0 + 0\n  1298: a0 = 0x1\n  1301: a2 = 0\n  1303: ecalli 12 // 'seal_return'\n  1305: fallthrough\n      : @39 (gas: 4)\n  1306: i32 a0 = s1 + 0\n  1308: u64 [sp + 0x18] = a0\n  1311: a1 = 0\n  1313: ra = 18, jump @0\n      : @40 [@dyn 9] (gas: 7)\n  1318: i32 a0 = a0 + 0\n  1320: a1 = 0\n  1322: a2 = 0\n  1324: ecalli 1 // 'call_data_copy'\n  1326: a0 = 0x80\n  1330: a1 = 0x20\n  1333: ra = 20, jump @0\n      : @41 [@dyn 10] (gas: 99)\n  1338: a1 = u8 [a0 + 0x1]\n  1341: a2 = u8 [a0]\n  1343: a3 = u8 [a0 + 0x2]\n  1346: a4 = u8 [a0 + 0x3]\n  1349: a1 = a1 << 0x8\n  1352: a1 = a1 | a2\n  1355: a3 = a3 << 0x10\n  1358: a4 = a4 << 0x18\n  1361: a3 = a3 | a4\n  1364: a1 = a1 | a3\n  1367: a2 = u8 [a0 + 0x5]\n  1370: a3 = u8 [a0 + 0x4]\n  1373: a4 = u8 [a0 + 0x6]\n  1376: a5 = u8 [a0 + 0x7]\n  1379: a2 = a2 << 0x8\n  1382: a2 = a2 | a3\n  1385: a4 = a4 << 0x10\n  1388: a5 = a5 << 0x18\n  1391: a4 = a4 | a5\n  1394: a2 = a2 | a4\n  1397: a2 = a2 << 0x20\n  1400: t0 = a2 | a1\n  1403: a2 = u8 [a0 + 0x19]\n  1406: a3 = u8 [a0 + 0x18]\n  1409: a4 = u8 [a0 + 0x1a]\n  1412: a5 = u8 [a0 + 0x1b]\n  1415: a2 = a2 << 0x8\n  1418: a2 = a2 | a3\n  1421: a4 = a4 << 0x10\n  1424: a5 = a5 << 0x18\n  1427: a4 = a4 | a5\n  1430: a2 = a2 | a4\n  1433: a3 = u8 [a0 + 0x1d]\n  1436: a4 = u8 [a0 + 0x1c]\n  1439: a5 = u8 [a0 + 0x1e]\n  1442: s1 = u8 [a0 + 0x1f]\n  1445: a3 = a3 << 0x8\n  1448: a3 = a3 | a4\n  1451: a5 = a5 << 0x10\n  1454: s1 = s1 << 0x18\n  1457: a5 = a5 | s1\n  1460: a3 = a3 | a5\n  1463: a3 = a3 << 0x20\n  1466: a2 = a2 | a3\n  1469: a3 = u8 [a0 + 0x11]\n  1472: a4 = u8 [a0 + 0x10]\n  1475: a5 = u8 [a0 + 0x12]\n  1478: s1 = u8 [a0 + 0x13]\n  1481: a3 = a3 << 0x8\n  1484: a3 = a3 | a4\n  1487: a5 = a5 << 0x10\n  1490: s1 = s1 << 0x18\n  1493: a5 = a5 | s1\n  1496: a3 = a3 | a5\n  1499: a4 = u8 [a0 + 0x15]\n  1502: a5 = u8 [a0 + 0x14]\n  1505: s1 = u8 [a0 + 0x16]\n  1508: a1 = u8 [a0 + 0x17]\n  1511: a4 = a4 << 0x8\n  1514: a4 = a4 | a5\n  1517: s1 = s1 << 0x10\n  1520: a1 = a1 << 0x18\n  1523: a1 = a1 | s1\n  1526: a1 = a1 | a4\n  1529: a1 = a1 << 0x20\n  1532: a3 = a3 | a1\n  1535: a1 = u8 [a0 + 0x9]\n  1538: a4 = u8 [a0 + 0x8]\n  1541: a5 = u8 [a0 + 0xa]\n  1544: s1 = u8 [a0 + 0xb]\n  1547: a1 = a1 << 0x8\n  1550: a1 = a1 | a4\n  1553: a5 = a5 << 0x10\n  1556: s1 = s1 << 0x18\n  1559: a5 = a5 | s1\n  1562: a1 = a1 | a5\n  1565: a4 = u8 [a0 + 0xd]\n  1568: a5 = u8 [a0 + 0xc]\n  1571: s1 = u8 [a0 + 0xe]\n  1574: a0 = u8 [a0 + 0xf]\n  1577: a4 = a4 << 0x8\n  1580: a4 = a4 | a5\n  1583: s1 = s1 << 0x10\n  1586: a0 = a0 << 0x18\n  1589: a0 = a0 | s1\n  1592: a0 = a0 | a4\n  1595: a0 = a0 << 0x20\n  1598: a0 = a0 | a1\n  1601: a4 = reverse a0\n  1603: a3 = reverse a3\n  1605: a0 = 0x300b0\n  1610: a2 = reverse a2\n  1612: a5 = reverse t0\n  1614: a1 = i32 [0x200a0]\n  1619: u64 [0x300c8] = a5\n  1624: u64 [0x300b0] = a2\n  1629: u64 [0x300b8] = a3\n  1634: u64 [0x300c0] = a4\n  1639: jump @43 if a1 == 0\n      : @42 (gas: 3)\n  1642: i32 a0 = a0 + 0\n  1644: ecalli 13 // 'set_immutable_data'\n  1646: fallthrough\n      : @43 (gas: 3)\n  1647: a0 = u64 [sp + 0x18]\n  1650: a1 = 0\n  1652: ra = 22, jump @0\n      : @44 [@dyn 11] (gas: 6)\n  1657: i32 a1 = a0 + 0\n  1659: a0 = 0\n  1661: a2 = 0\n  1663: ra = 0x18\n  1666: ecalli 12 // 'seal_return'\n  1668: fallthrough\n      : @45 [@dyn 12] (gas: 8)\n  1669: sp = sp + 0xffffffffffffffc0\n  1672: u64 [sp + 0x38] = ra\n  1675: u64 [sp + 0x30] = s0\n  1678: s0 = sp + 0x40\n  1681: sp = sp & 0xffffffffffffffe0\n  1684: a0 = 0x40\n  1687: a1 = 0x20\n  1690: ra = 26, jump @0\n      : @46 [@dyn 13] (gas: 34)\n  1695: u8 [a0 + 31] = 0x80\n  1700: u8 [a0 + 30] = 0\n  1703: u8 [a0 + 29] = 0\n  1706: u8 [a0 + 28] = 0\n  1709: u8 [a0 + 27] = 0\n  1712: u8 [a0 + 26] = 0\n  1715: u8 [a0 + 25] = 0\n  1718: u8 [a0 + 24] = 0\n  1721: u8 [a0 + 23] = 0\n  1724: u8 [a0 + 22] = 0\n  1727: u8 [a0 + 21] = 0\n  1730: u8 [a0 + 20] = 0\n  1733: u8 [a0 + 19] = 0\n  1736: u8 [a0 + 18] = 0\n  1739: u8 [a0 + 17] = 0\n  1742: u8 [a0 + 16] = 0\n  1745: u8 [a0 + 15] = 0\n  1748: u8 [a0 + 14] = 0\n  1751: u8 [a0 + 13] = 0\n  1754: u8 [a0 + 12] = 0\n  1757: u8 [a0 + 11] = 0\n  1760: u8 [a0 + 10] = 0\n  1763: u8 [a0 + 9] = 0\n  1766: u8 [a0 + 8] = 0\n  1769: u8 [a0 + 7] = 0\n  1772: u8 [a0 + 3] = 0\n  1775: u8 [a0 + 2] = 0\n  1778: u8 [a0 + 1] = 0\n  1781: u8 [a0 + 0] = 0\n  1783: a1 = i32 [0x200a8]\n  1788: u8 [a0 + 6] = 0\n  1791: u8 [a0 + 5] = 0\n  1794: u8 [a0 + 4] = 0\n  1797: jump @67 if a1 <u 4\n      : @47 (gas: 5)\n  1802: i32 a0 = sp + 0\n  1804: a1 = 0\n  1806: ra = 0x1c\n  1809: ecalli 2 // 'call_data_load'\n  1811: fallthrough\n      : @48 [@dyn 14] (gas: 2)\n  1812: a0 = i32 [sp + 0x1c]\n  1815: jump @54 if a0 >s 3314869739\n      : @49 (gas: 3)\n  1822: a1 = 0xffffffffbdfdf000\n  1828: a2 = 0xffffffffbdfdeb86\n  1834: jump @59 if a2 <s a0\n      : @50 (gas: 1)\n  1838: jump @68 if a0 == 2674417815\n      : @51 (gas: 1)\n  1846: jump @72 if a0 == 2886131791\n      : @52 (gas: 1)\n  1854: jump @67 if a0 != 3116241037\n      : @53 (gas: 14)\n  1862: ra = 0x1e\n  1865: sp = sp + 0xffffffffffffff60\n  1869: u64 [sp + 0x98] = ra\n  1873: u64 [sp + 0x90] = s0\n  1877: u64 [sp + 0x88] = s1\n  1881: s0 = sp + 0xa0\n  1885: sp = sp & 0xffffffffffffffe0\n  1888: u64 [sp + 56] = 0\n  1891: u64 [sp + 48] = 0\n  1894: u64 [sp + 40] = 0\n  1897: u64 [sp + 32] = 0\n  1900: i32 a0 = sp + 0x20\n  1903: ecalli 15 // 'value_transferred'\n  1905: jump @192\n      : @54 [@dyn 15] (gas: 3)\n  1908: a1 = 0xfffffffffe25e000\n  1914: a2 = 0xfffffffffe25e009\n  1920: jump @63 if a2 <s a0\n      : @55 (gas: 1)\n  1924: jump @69 if a0 == 3314869740\n      : @56 (gas: 1)\n  1932: jump @73 if a0 == 4059952233\n      : @57 (gas: 1)\n  1940: jump @67 if a0 != 4140121499\n      : @58 (gas: 14)\n  1948: ra = 0x20\n  1951: sp = sp + 0xffffffffffffff60\n  1955: u64 [sp + 0x98] = ra\n  1959: u64 [sp + 0x90] = s0\n  1963: u64 [sp + 0x88] = s1\n  1967: s0 = sp + 0xa0\n  1971: sp = sp & 0xffffffffffffffe0\n  1974: u64 [sp + 56] = 0\n  1977: u64 [sp + 48] = 0\n  1980: u64 [sp + 40] = 0\n  1983: u64 [sp + 32] = 0\n  1986: i32 a0 = sp + 0x20\n  1989: ecalli 15 // 'value_transferred'\n  1991: jump @387\n      : @59 [@dyn 16] (gas: 2)\n  1994: i32 a1 = a1 + 0xfffffffffffffb87\n  1998: jump @70 if a0 == a1\n      : @60 (gas: 1)\n  2002: jump @74 if a0 == 3214340887\n      : @61 (gas: 1)\n  2010: jump @67 if a0 != 3257683779\n      : @62 (gas: 14)\n  2018: ra = 0x22\n  2021: sp = sp + 0xfffffffffffffd40\n  2025: u64 [sp + 0x2b8] = ra\n  2029: u64 [sp + 0x2b0] = s0\n  2033: u64 [sp + 0x2a8] = s1\n  2037: s0 = sp + 0x2c0\n  2041: sp = sp & 0xffffffffffffffe0\n  2044: u64 [sp + 632] = 0\n  2048: u64 [sp + 624] = 0\n  2052: u64 [sp + 616] = 0\n  2056: u64 [sp + 608] = 0\n  2060: i32 a0 = sp + 0x260\n  2064: ecalli 15 // 'value_transferred'\n  2066: jump @349\n      : @63 [@dyn 17] (gas: 2)\n  2069: i32 a1 = a1 + 0xa\n  2072: jump @71 if a0 == a1\n      : @64 (gas: 1)\n  2075: jump @75 if a0 == 918847327\n      : @65 (gas: 1)\n  2083: jump @67 if a0 != 1584505633\n      : @66 (gas: 14)\n  2090: ra = 0x24\n  2093: sp = sp + 0xffffffffffffff00\n  2097: u64 [sp + 0xf8] = ra\n  2101: u64 [sp + 0xf0] = s0\n  2105: u64 [sp + 0xe8] = s1\n  2109: s0 = sp + 0x100\n  2113: sp = sp & 0xffffffffffffffe0\n  2116: u64 [sp + 184] = 0\n  2120: u64 [sp + 176] = 0\n  2124: u64 [sp + 168] = 0\n  2128: u64 [sp + 160] = 0\n  2132: i32 a0 = sp + 0xa0\n  2136: ecalli 15 // 'value_transferred'\n  2138: jump @147\n      : @67 [@dyn 18] (gas: 1)\n  2141: ra = 38, jump @205\n      : @68 [@dyn 19] (gas: 1)\n  2146: ra = 40, jump @165\n      : @69 [@dyn 20] (gas: 1)\n  2151: ra = 42, jump @361\n      : @70 [@dyn 21] (gas: 1)\n  2156: ra = 44, jump @227\n      : @71 [@dyn 22] (gas: 14)\n  2161: ra = 0x2e\n  2164: sp = sp + 0xffffffffffffffa0\n  2167: u64 [sp + 0x58] = ra\n  2170: u64 [sp + 0x50] = s0\n  2173: u64 [sp + 0x48] = s1\n  2176: s0 = sp + 0x60\n  2179: sp = sp & 0xffffffffffffffe0\n  2182: u64 [sp + 56] = 0\n  2185: u64 [sp + 48] = 0\n  2188: u64 [sp + 40] = 0\n  2191: u64 [sp + 32] = 0\n  2194: i32 a0 = sp + 0x20\n  2197: ecalli 15 // 'value_transferred'\n  2199: jump @402\n      : @72 [@dyn 23] (gas: 1)\n  2202: ra = 48, jump @182\n      : @73 [@dyn 24] (gas: 1)\n  2207: ra = 50, jump @371\n      : @74 [@dyn 25] (gas: 14)\n  2212: ra = 0x34\n  2215: sp = sp + 0xfffffffffffffd20\n  2219: u64 [sp + 0x2d8] = ra\n  2223: u64 [sp + 0x2d0] = s0\n  2227: u64 [sp + 0x2c8] = s1\n  2231: s0 = sp + 0x2e0\n  2235: sp = sp & 0xffffffffffffffe0\n  2238: u64 [sp + 664] = 0\n  2242: u64 [sp + 656] = 0\n  2246: u64 [sp + 648] = 0\n  2250: u64 [sp + 640] = 0\n  2254: i32 a0 = sp + 0x280\n  2258: ecalli 15 // 'value_transferred'\n  2260: jump @257\n      : @75 [@dyn 26] (gas: 14)\n  2263: ra = 0x36\n  2266: sp = sp + 0xfffffffffffffea0\n  2270: u64 [sp + 0x158] = ra\n  2274: u64 [sp + 0x150] = s0\n  2278: u64 [sp + 0x148] = s1\n  2282: s0 = sp + 0x160\n  2286: sp = sp & 0xffffffffffffffe0\n  2289: u64 [sp + 312] = 0\n  2293: u64 [sp + 304] = 0\n  2297: u64 [sp + 296] = 0\n  2301: u64 [sp + 288] = 0\n  2305: i32 a0 = sp + 0x120\n  2309: ecalli 15 // 'value_transferred'\n  2311: jump @136\n      : @76 [@dyn 27] (gas: 7)\n  2314: sp = sp + 0xfffffffffffffff0\n  2317: u64 [sp + 0x8] = ra\n  2320: u64 [sp] = s0\n  2322: s0 = a0\n  2324: a0 = 0x40\n  2327: a1 = 0x20\n  2330: ra = 56, jump @0\n      : @77 [@dyn 28] (gas: 100)\n  2335: a1 = u8 [a0 + 0x1]\n  2338: a2 = u8 [a0]\n  2340: a3 = u8 [a0 + 0x2]\n  2343: a4 = u8 [a0 + 0x3]\n  2346: a1 = a1 << 0x8\n  2349: a1 = a1 | a2\n  2352: a3 = a3 << 0x10\n  2355: a4 = a4 << 0x18\n  2358: a3 = a3 | a4\n  2361: a1 = a1 | a3\n  2364: a2 = u8 [a0 + 0x5]\n  2367: a3 = u8 [a0 + 0x4]\n  2370: a4 = u8 [a0 + 0x6]\n  2373: a5 = u8 [a0 + 0x7]\n  2376: a2 = a2 << 0x8\n  2379: a2 = a2 | a3\n  2382: a4 = a4 << 0x10\n  2385: a5 = a5 << 0x18\n  2388: a4 = a4 | a5\n  2391: a2 = a2 | a4\n  2394: a2 = a2 << 0x20\n  2397: t0 = a2 | a1\n  2400: a2 = u8 [a0 + 0x9]\n  2403: a3 = u8 [a0 + 0x8]\n  2406: a4 = u8 [a0 + 0xa]\n  2409: a5 = u8 [a0 + 0xb]\n  2412: a2 = a2 << 0x8\n  2415: a2 = a2 | a3\n  2418: a4 = a4 << 0x10\n  2421: a5 = a5 << 0x18\n  2424: a4 = a4 | a5\n  2427: a2 = a2 | a4\n  2430: a3 = u8 [a0 + 0xd]\n  2433: a4 = u8 [a0 + 0xc]\n  2436: a5 = u8 [a0 + 0xe]\n  2439: a1 = u8 [a0 + 0xf]\n  2442: a3 = a3 << 0x8\n  2445: a3 = a3 | a4\n  2448: a5 = a5 << 0x10\n  2451: a1 = a1 << 0x18\n  2454: a1 = a1 | a5\n  2457: a1 = a1 | a3\n  2460: a1 = a1 << 0x20\n  2463: t1 = a1 | a2\n  2466: a1 = u8 [a0 + 0x11]\n  2469: a3 = u8 [a0 + 0x10]\n  2472: a4 = u8 [a0 + 0x12]\n  2475: a5 = u8 [a0 + 0x13]\n  2478: a1 = a1 << 0x8\n  2481: a1 = a1 | a3\n  2484: a4 = a4 << 0x10\n  2487: a5 = a5 << 0x18\n  2490: a4 = a4 | a5\n  2493: a1 = a1 | a4\n  2496: a3 = u8 [a0 + 0x15]\n  2499: a4 = u8 [a0 + 0x14]\n  2502: a5 = u8 [a0 + 0x16]\n  2505: a2 = u8 [a0 + 0x17]\n  2508: a3 = a3 << 0x8\n  2511: a3 = a3 | a4\n  2514: a5 = a5 << 0x10\n  2517: a2 = a2 << 0x18\n  2520: a2 = a2 | a5\n  2523: a2 = a2 | a3\n  2526: a2 = a2 << 0x20\n  2529: a3 = a2 | a1\n  2532: a1 = u8 [a0 + 0x19]\n  2535: a2 = u8 [a0 + 0x18]\n  2538: a4 = u8 [a0 + 0x1a]\n  2541: a5 = u8 [a0 + 0x1b]\n  2544: a1 = a1 << 0x8\n  2547: a1 = a1 | a2\n  2550: a4 = a4 << 0x10\n  2553: a5 = a5 << 0x18\n  2556: a4 = a4 | a5\n  2559: a1 = a1 | a4\n  2562: a2 = u8 [a0 + 0x1d]\n  2565: a4 = u8 [a0 + 0x1c]\n  2568: a5 = u8 [a0 + 0x1e]\n  2571: a0 = u8 [a0 + 0x1f]\n  2574: a2 = a2 << 0x8\n  2577: a2 = a2 | a4\n  2580: a5 = a5 << 0x10\n  2583: a0 = a0 << 0x18\n  2586: a0 = a0 | a5\n  2589: a0 = a0 | a2\n  2592: a0 = a0 << 0x20\n  2595: a0 = a0 | a1\n  2598: a0 = reverse a0\n  2600: a1 = reverse a3\n  2602: a2 = reverse t1\n  2604: a3 = reverse t0\n  2606: u64 [s0 + 0x18] = a3\n  2609: u64 [s0 + 0x10] = a2\n  2612: u64 [s0 + 0x8] = a1\n  2615: u64 [s0] = a0\n  2617: ra = u64 [sp + 0x8]\n  2620: s0 = u64 [sp]\n  2622: sp = sp + 0x10\n  2625: ret\n      : @78 (gas: 18)\n  2627: sp = sp + 0xffffffffffffff60\n  2631: u64 [sp + 0x98] = ra\n  2635: u64 [sp + 0x90] = s0\n  2639: u64 [sp + 0x88] = s1\n  2643: s0 = sp + 0xa0\n  2647: sp = sp & 0xfffffffffffffff0\n  2650: a2 = u64 [a1 + 0x18]\n  2653: u64 [sp + 0x30] = a2\n  2656: a2 = u64 [a1 + 0x10]\n  2659: u64 [sp + 0x28] = a2\n  2662: a2 = u64 [a1 + 0x8]\n  2665: u64 [sp + 0x20] = a2\n  2668: a1 = u64 [a1]\n  2670: u64 [sp + 0x18] = a1\n  2673: u64 [sp + 0x38] = a0\n  2676: a0 = 0x40\n  2679: a1 = 0x20\n  2682: ra = 58, jump @0\n      : @79 [@dyn 29] (gas: 130)\n  2687: a1 = u8 [a0 + 0x19]\n  2690: a2 = u8 [a0 + 0x18]\n  2693: a3 = u8 [a0 + 0x1a]\n  2696: a4 = u8 [a0 + 0x1b]\n  2699: a1 = a1 << 0x8\n  2702: a1 = a1 | a2\n  2705: a3 = a3 << 0x10\n  2708: a4 = a4 << 0x18\n  2711: a3 = a3 | a4\n  2714: a1 = a1 | a3\n  2717: a2 = u8 [a0 + 0x1d]\n  2720: a3 = u8 [a0 + 0x1c]\n  2723: a4 = u8 [a0 + 0x1e]\n  2726: a5 = u8 [a0 + 0x1f]\n  2729: a2 = a2 << 0x8\n  2732: a2 = a2 | a3\n  2735: a4 = a4 << 0x10\n  2738: a5 = a5 << 0x18\n  2741: a4 = a4 | a5\n  2744: a2 = a2 | a4\n  2747: a2 = a2 << 0x20\n  2750: t0 = a2 | a1\n  2753: a2 = u8 [a0 + 0x11]\n  2756: a3 = u8 [a0 + 0x10]\n  2759: a4 = u8 [a0 + 0x12]\n  2762: a5 = u8 [a0 + 0x13]\n  2765: a2 = a2 << 0x8\n  2768: a2 = a2 | a3\n  2771: a4 = a4 << 0x10\n  2774: a5 = a5 << 0x18\n  2777: a4 = a4 | a5\n  2780: a2 = a2 | a4\n  2783: a3 = u8 [a0 + 0x15]\n  2786: a4 = u8 [a0 + 0x14]\n  2789: a5 = u8 [a0 + 0x16]\n  2792: s1 = u8 [a0 + 0x17]\n  2795: a3 = a3 << 0x8\n  2798: a3 = a3 | a4\n  2801: a5 = a5 << 0x10\n  2804: s1 = s1 << 0x18\n  2807: a5 = a5 | s1\n  2810: a3 = a3 | a5\n  2813: a3 = a3 << 0x20\n  2816: a2 = a2 | a3\n  2819: a3 = u8 [a0 + 0x9]\n  2822: a4 = u8 [a0 + 0x8]\n  2825: a5 = u8 [a0 + 0xa]\n  2828: s1 = u8 [a0 + 0xb]\n  2831: a3 = a3 << 0x8\n  2834: a3 = a3 | a4\n  2837: a5 = a5 << 0x10\n  2840: s1 = s1 << 0x18\n  2843: a5 = a5 | s1\n  2846: a3 = a3 | a5\n  2849: a4 = u8 [a0 + 0xd]\n  2852: a5 = u8 [a0 + 0xc]\n  2855: s1 = u8 [a0 + 0xe]\n  2858: a1 = u8 [a0 + 0xf]\n  2861: a4 = a4 << 0x8\n  2864: a4 = a4 | a5\n  2867: s1 = s1 << 0x10\n  2870: a1 = a1 << 0x18\n  2873: a1 = a1 | s1\n  2876: a1 = a1 | a4\n  2879: a1 = a1 << 0x20\n  2882: a3 = a3 | a1\n  2885: a1 = u8 [a0 + 0x1]\n  2888: a4 = u8 [a0]\n  2890: a5 = u8 [a0 + 0x2]\n  2893: s1 = u8 [a0 + 0x3]\n  2896: a1 = a1 << 0x8\n  2899: a1 = a1 | a4\n  2902: a5 = a5 << 0x10\n  2905: s1 = s1 << 0x18\n  2908: a5 = a5 | s1\n  2911: a1 = a1 | a5\n  2914: a4 = u8 [a0 + 0x5]\n  2917: a5 = u8 [a0 + 0x4]\n  2920: s1 = u8 [a0 + 0x6]\n  2923: a0 = u8 [a0 + 0x7]\n  2926: a4 = a4 << 0x8\n  2929: a4 = a4 | a5\n  2932: s1 = s1 << 0x10\n  2935: a0 = a0 << 0x18\n  2938: a0 = a0 | s1\n  2941: a0 = a0 | a4\n  2944: a0 = a0 << 0x20\n  2947: a0 = a0 | a1\n  2950: t1 = reverse a0\n  2952: t2 = reverse a3\n  2954: s1 = reverse a2\n  2956: a5 = reverse t0\n  2958: a1 = u64 [sp + 0x18]\n  2961: a0 = a1 + 0x1f\n  2964: a1 = a0 <u a1\n  2967: a3 = u64 [sp + 0x20]\n  2970: a2 = a3 + a1\n  2973: a3 = a2 <u a3\n  2976: a3 = a1 if a1 == 0\n  2979: a1 = u64 [sp + 0x28]\n  2982: a3 = a3 + a1\n  2985: a1 = a3 <u a1\n  2988: a4 = u64 [sp + 0x30]\n  2991: a1 = a1 + a4\n  2994: a0 = a0 & 0xffffffffffffffe0\n  2997: a0 = a0 + a5\n  3000: u64 [sp + 0x28] = a5\n  3003: u64 [sp + 0x10] = a0\n  3006: a4 = a0 <u a5\n  3009: a2 = a2 + s1\n  3012: a5 = a2 + a4\n  3015: a2 = a5 ^ s1\n  3018: u64 [sp + 0x30] = s1\n  3021: a0 = a5 <u s1\n  3024: a0 = a4 if a2 == 0\n  3027: a3 = a3 + t2\n  3030: a4 = a3 + a0\n  3033: s1 = a4 <u a3\n  3036: a2 = a3 <u t2\n  3039: a1 = a1 + t1\n  3042: a1 = a1 + a2\n  3045: s1 = s1 + a1\n  3048: a1 = a4 >u 0\n  3050: a2 = s1 >u 0\n  3052: a2 = a1 if s1 == 0\n  3055: a1 = a4 | s1\n  3058: u64 [sp + 0x8] = a5\n  3061: a3 = a5 >u 0\n  3063: a3 = a2 if a1 != 0\n  3066: jump @83 if a3 != 0\n      : @80 (gas: 8)\n  3070: a1 = a4 <u t2\n  3073: a2 = s1 ^ t1\n  3076: a3 = s1 <u t1\n  3079: a3 = a1 if a2 == 0\n  3082: a1 = a4 ^ t2\n  3085: a1 = a1 | a2\n  3088: a0 = a3 if a1 != 0\n  3091: jump @83 if a0 != 0\n      : @81 (gas: 6)\n  3095: a0 = 0x40\n  3098: a1 = 0x20\n  3101: u64 [sp + 0x20] = t2\n  3104: u64 [sp + 0x18] = t1\n  3107: u64 [sp] = a4\n  3109: ra = 60, jump @0\n      : @82 [@dyn 30] (gas: 82)\n  3114: a1 = reverse s1\n  3116: a2 = u64 [sp]\n  3118: a2 = reverse a2\n  3120: a3 = u64 [sp + 0x8]\n  3123: a3 = reverse a3\n  3125: a4 = u64 [sp + 0x10]\n  3128: a4 = reverse a4\n  3130: u8 [a0 + 0x18] = a4\n  3133: a5 = a4 >> 0x38\n  3136: u8 [a0 + 0x1f] = a5\n  3139: a5 = a4 >> 0x30\n  3142: u8 [a0 + 0x1e] = a5\n  3145: a5 = a4 >> 0x28\n  3148: u8 [a0 + 0x1d] = a5\n  3151: a5 = a4 >> 0x20\n  3154: u8 [a0 + 0x1c] = a5\n  3157: a5 = a4 >> 0x18\n  3160: u8 [a0 + 0x1b] = a5\n  3163: a5 = a4 >> 0x10\n  3166: u8 [a0 + 0x1a] = a5\n  3169: a4 = a4 >> 0x8\n  3172: u8 [a0 + 0x19] = a4\n  3175: u8 [a0 + 0x10] = a3\n  3178: a4 = a3 >> 0x38\n  3181: u8 [a0 + 0x17] = a4\n  3184: a4 = a3 >> 0x30\n  3187: u8 [a0 + 0x16] = a4\n  3190: a4 = a3 >> 0x28\n  3193: u8 [a0 + 0x15] = a4\n  3196: a4 = a3 >> 0x20\n  3199: u8 [a0 + 0x14] = a4\n  3202: a4 = a3 >> 0x18\n  3205: u8 [a0 + 0x13] = a4\n  3208: a4 = a3 >> 0x10\n  3211: u8 [a0 + 0x12] = a4\n  3214: a3 = a3 >> 0x8\n  3217: u8 [a0 + 0x11] = a3\n  3220: u8 [a0 + 0x8] = a2\n  3223: a3 = a2 >> 0x38\n  3226: u8 [a0 + 0xf] = a3\n  3229: a3 = a2 >> 0x30\n  3232: u8 [a0 + 0xe] = a3\n  3235: a3 = a2 >> 0x28\n  3238: u8 [a0 + 0xd] = a3\n  3241: a3 = a2 >> 0x20\n  3244: u8 [a0 + 0xc] = a3\n  3247: a3 = a2 >> 0x18\n  3250: u8 [a0 + 0xb] = a3\n  3253: a3 = a2 >> 0x10\n  3256: u8 [a0 + 0xa] = a3\n  3259: a2 = a2 >> 0x8\n  3262: u8 [a0 + 0x9] = a2\n  3265: u8 [a0] = a1\n  3267: a2 = a1 >> 0x38\n  3270: u8 [a0 + 0x7] = a2\n  3273: a2 = a1 >> 0x30\n  3276: u8 [a0 + 0x6] = a2\n  3279: a2 = a1 >> 0x28\n  3282: u8 [a0 + 0x5] = a2\n  3285: a2 = a1 >> 0x20\n  3288: u8 [a0 + 0x4] = a2\n  3291: a2 = a1 >> 0x18\n  3294: u8 [a0 + 0x3] = a2\n  3297: a2 = a1 >> 0x10\n  3300: u8 [a0 + 0x2] = a2\n  3303: a1 = a1 >> 0x8\n  3306: u8 [a0 + 0x1] = a1\n  3309: a0 = u64 [sp + 0x38]\n  3312: a1 = u64 [sp + 0x28]\n  3315: u64 [a0] = a1\n  3317: a1 = u64 [sp + 0x18]\n  3320: u64 [a0 + 0x18] = a1\n  3323: a1 = u64 [sp + 0x30]\n  3326: u64 [a0 + 0x8] = a1\n  3329: a1 = u64 [sp + 0x20]\n  3332: u64 [a0 + 0x10] = a1\n  3335: sp = s0 + 0xffffffffffffff60\n  3339: ra = u64 [sp + 0x98]\n  3343: s0 = u64 [sp + 0x90]\n  3347: s1 = u64 [sp + 0x88]\n  3351: sp = sp + 0xa0\n  3355: ret\n      : @83 (gas: 8)\n  3357: u64 [sp + 112] = 0\n  3360: u64 [sp + 104] = 0\n  3363: u64 [sp + 96] = 0\n  3366: a0 = 0x4e487b7100000000\n  3376: a1 = sp + 0x60\n  3379: u64 [sp + 0x78] = a0\n  3382: a0 = 0\n  3384: ra = 62, jump @23\n      : @84 [@dyn 31] (gas: 7)\n  3389: u64 [sp + 88] = 0\n  3392: u64 [sp + 80] = 0\n  3395: u64 [sp + 64] = 0x41\n  3399: a0 = 0x4\n  3402: a1 = sp + 0x40\n  3405: u64 [sp + 72] = 0\n  3408: ra = 64, jump @23\n      : @85 [@dyn 32] (gas: 3)\n  3413: a1 = 0x24\n  3416: a0 = 0\n  3418: ra = 66, jump @0\n      : @86 [@dyn 33] (gas: 6)\n  3423: i32 a1 = a0 + 0\n  3425: a0 = 0x1\n  3428: a2 = 0x24\n  3431: ra = 0x44\n  3434: ecalli 12 // 'seal_return'\n  3436: fallthrough\n      : @87 [@dyn 34] (gas: 8)\n  3437: a2 = u32 [a1 + 0x10]\n  3440: a3 = u64 [a1 + 0x8]\n  3443: a1 = u64 [a1]\n  3445: u64 [a0 + 24] = 0\n  3448: u64 [a0 + 0x10] = a2\n  3451: u64 [a0 + 0x8] = a3\n  3454: u64 [a0] = a1\n  3456: ret\n      : @88 [@dyn 35] (gas: 12)\n  3458: a1 = u64 [sp + 0x48]\n  3461: a2 = u64 [sp + 0x40]\n  3464: a3 = u64 [sp + 0x38]\n  3467: a0 = u64 [sp + 0x30]\n  3470: a1 = a1 | a3\n  3473: a3 = a0 | a2\n  3476: a3 = a3 | a1\n  3479: a3 = a3 >> 0x20\n  3482: a1 = a1 | a2\n  3485: a1 = a1 << 0x20\n  3488: a1 = a1 | a3\n  3491: jump @95 if a1 != 0\n      : @89 (gas: 4)\n  3495: i32 a0 = a0 + 0\n  3497: u64 [sp] = a0\n  3499: a1 = s1\n  3501: ra = 72, jump @0\n      : @90 [@dyn 36] (gas: 5)\n  3506: i32 a0 = a0 + 0\n  3508: a1 = s1\n  3510: a2 = 0\n  3512: ecalli 1 // 'call_data_copy'\n  3514: fallthrough\n      : @91 (gas: 1)\n  3515: jump @96 if s1 <=u 31\n      : @92 (gas: 3)\n  3520: a1 = 0x20\n  3523: a0 = u64 [sp]\n  3525: ra = 74, jump @0\n      : @93 [@dyn 37] (gas: 54)\n  3530: a1 = u8 [a0 + 0x9]\n  3533: a2 = u8 [a0 + 0x8]\n  3536: a3 = u8 [a0 + 0xa]\n  3539: a4 = u8 [a0 + 0xb]\n  3542: a1 = a1 << 0x8\n  3545: a1 = a1 | a2\n  3548: a3 = a3 << 0x10\n  3551: a4 = a4 << 0x18\n  3554: a3 = a3 | a4\n  3557: a1 = a1 | a3\n  3560: a2 = u8 [a0 + 0xd]\n  3563: a3 = u8 [a0 + 0xc]\n  3566: a4 = u8 [a0 + 0xe]\n  3569: a5 = u8 [a0 + 0xf]\n  3572: a2 = a2 << 0x8\n  3575: a2 = a2 | a3\n  3578: a4 = a4 << 0x10\n  3581: a5 = a5 << 0x18\n  3584: a4 = a4 | a5\n  3587: a2 = a2 | a4\n  3590: a2 = a2 << 0x20\n  3593: a2 = a2 | a1\n  3596: a1 = u8 [a0 + 0x1]\n  3599: a3 = u8 [a0]\n  3601: a4 = u8 [a0 + 0x2]\n  3604: a5 = u8 [a0 + 0x3]\n  3607: a1 = a1 << 0x8\n  3610: a1 = a1 | a3\n  3613: a4 = a4 << 0x10\n  3616: a5 = a5 << 0x18\n  3619: a4 = a4 | a5\n  3622: a1 = a1 | a4\n  3625: a3 = u8 [a0 + 0x5]\n  3628: a4 = u8 [a0 + 0x4]\n  3631: a5 = u8 [a0 + 0x6]\n  3634: s1 = u8 [a0 + 0x7]\n  3637: a3 = a3 << 0x8\n  3640: a3 = a3 | a4\n  3643: a5 = a5 << 0x10\n  3646: s1 = s1 << 0x18\n  3649: a5 = a5 | s1\n  3652: a3 = a3 | a5\n  3655: a3 = a3 << 0x20\n  3658: a1 = a1 | a3\n  3661: t0 = reverse a1\n  3663: a2 = reverse a2\n  3665: a3 = 0x100000000\n  3675: a3 = a3 ^ a2\n  3678: a3 = a3 | t0\n  3681: a4 = a2 >> 0x20\n  3684: a4 = a4 <u 0x1\n  3687: a4 = 0 if t0 != 0\n  3689: a4 = 0 if a3 == 0\n  3691: jump @96 if a4 == 0\n      : @94 (gas: 57)\n  3695: a3 = u8 [a0 + 0x19]\n  3698: a4 = u8 [a0 + 0x18]\n  3701: a5 = u8 [a0 + 0x1a]\n  3704: s1 = u8 [a0 + 0x1b]\n  3707: a3 = a3 << 0x8\n  3710: a3 = a3 | a4\n  3713: a5 = a5 << 0x10\n  3716: s1 = s1 << 0x18\n  3719: a5 = a5 | s1\n  3722: a3 = a3 | a5\n  3725: a4 = u8 [a0 + 0x1d]\n  3728: a5 = u8 [a0 + 0x1c]\n  3731: s1 = u8 [a0 + 0x1e]\n  3734: a1 = u8 [a0 + 0x1f]\n  3737: a4 = a4 << 0x8\n  3740: a4 = a4 | a5\n  3743: s1 = s1 << 0x10\n  3746: a1 = a1 << 0x18\n  3749: a1 = a1 | s1\n  3752: a1 = a1 | a4\n  3755: a1 = a1 << 0x20\n  3758: a3 = a3 | a1\n  3761: a1 = u8 [a0 + 0x11]\n  3764: a4 = u8 [a0 + 0x10]\n  3767: a5 = u8 [a0 + 0x12]\n  3770: s1 = u8 [a0 + 0x13]\n  3773: a1 = a1 << 0x8\n  3776: a1 = a1 | a4\n  3779: a5 = a5 << 0x10\n  3782: s1 = s1 << 0x18\n  3785: a5 = a5 | s1\n  3788: a1 = a1 | a5\n  3791: a4 = u8 [a0 + 0x15]\n  3794: a5 = u8 [a0 + 0x14]\n  3797: s1 = u8 [a0 + 0x16]\n  3800: a0 = u8 [a0 + 0x17]\n  3803: a4 = a4 << 0x8\n  3806: a4 = a4 | a5\n  3809: s1 = s1 << 0x10\n  3812: a0 = a0 << 0x18\n  3815: a0 = a0 | s1\n  3818: a0 = a0 | a4\n  3821: a0 = a0 << 0x20\n  3824: a0 = a0 | a1\n  3827: a0 = reverse a0\n  3829: a1 = reverse a3\n  3831: a3 = u64 [sp + 0x8]\n  3834: u64 [a3] = a1\n  3836: u64 [a3 + 0x8] = a0\n  3839: u64 [a3 + 0x10] = a2\n  3842: u64 [a3 + 0x18] = t0\n  3845: sp = s0 + 0xffffffffffffff90\n  3848: ra = u64 [sp + 0x68]\n  3851: s0 = u64 [sp + 0x60]\n  3854: s1 = u64 [sp + 0x58]\n  3857: sp = sp + 0x70\n  3860: ret\n      : @95 (gas: 1)\n  3862: trap\n      : @96 (gas: 3)\n  3863: a0 = 0\n  3865: a1 = 0\n  3867: ra = 76, jump @0\n      : @97 [@dyn 38] (gas: 6)\n  3872: i32 a1 = a0 + 0\n  3874: a0 = 0x1\n  3877: a2 = 0\n  3879: ra = 0x4e\n  3882: ecalli 12 // 'seal_return'\n  3884: fallthrough\n      : @98 [@dyn 39] (gas: 9)\n  3885: a2 = u64 [a1 + 0x18]\n  3888: a3 = u64 [a1 + 0x10]\n  3891: a4 = u64 [a1 + 0x8]\n  3894: a1 = u64 [a1]\n  3896: u64 [a0 + 0x18] = a2\n  3899: u64 [a0 + 0x10] = a3\n  3902: u64 [a0 + 0x8] = a4\n  3905: u64 [a0] = a1\n  3907: ret\n      : @99 (gas: 20)\n  3909: sp = sp + 0xffffffffffffffb0\n  3912: u64 [sp + 0x48] = ra\n  3915: u64 [sp + 0x40] = s0\n  3918: u64 [sp + 0x38] = s1\n  3921: a4 = u64 [a1 + 0x10]\n  3924: a3 = u64 [a1 + 0x18]\n  3927: a5 = u64 [a1 + 0x8]\n  3930: s0 = u64 [a1]\n  3932: u64 [sp + 0x28] = a3\n  3935: u64 [sp + 0x20] = a5\n  3938: a1 = a5 | a3\n  3941: a3 = s0 | a4\n  3944: a3 = a3 | a1\n  3947: a3 = a3 >> 0x20\n  3950: u64 [sp + 0x30] = a4\n  3953: a1 = a1 | a4\n  3956: a1 = a1 << 0x20\n  3959: a1 = a1 | a3\n  3962: u64 [sp + 0x18] = a0\n  3965: jump @102 if a1 != 0\n      : @100 (gas: 10)\n  3969: a0 = u64 [a2 + 0x18]\n  3972: u64 [sp] = a0\n  3974: s1 = u64 [a2 + 0x10]\n  3977: a0 = u64 [a2 + 0x8]\n  3980: u64 [sp + 0x8] = a0\n  3983: a0 = u64 [a2]\n  3985: u64 [sp + 0x10] = a0\n  3988: i32 a0 = s0 + 0\n  3990: a1 = 0x20\n  3993: ra = 80, jump @0\n      : @101 [@dyn 40] (gas: 88)\n  3998: a1 = u64 [sp]\n  4000: a1 = reverse a1\n  4002: a2 = reverse s1\n  4004: a3 = u64 [sp + 0x8]\n  4007: a3 = reverse a3\n  4009: a4 = u64 [sp + 0x10]\n  4012: a4 = reverse a4\n  4014: a5 = a4 >> 0x38\n  4017: u8 [a0 + 0x1f] = a5\n  4020: a5 = a4 >> 0x30\n  4023: u8 [a0 + 0x1e] = a5\n  4026: a5 = a4 >> 0x28\n  4029: u8 [a0 + 0x1d] = a5\n  4032: a5 = a4 >> 0x20\n  4035: u8 [a0 + 0x1c] = a5\n  4038: a5 = a4 >> 0x18\n  4041: u8 [a0 + 0x1b] = a5\n  4044: a5 = a4 >> 0x10\n  4047: u8 [a0 + 0x1a] = a5\n  4050: a5 = a4 >> 0x8\n  4053: u8 [a0 + 0x19] = a5\n  4056: u8 [a0 + 0x18] = a4\n  4059: u8 [a0 + 0x10] = a3\n  4062: a4 = a3 >> 0x38\n  4065: u8 [a0 + 0x17] = a4\n  4068: a4 = a3 >> 0x30\n  4071: u8 [a0 + 0x16] = a4\n  4074: a4 = a3 >> 0x28\n  4077: u8 [a0 + 0x15] = a4\n  4080: a4 = a3 >> 0x20\n  4083: u8 [a0 + 0x14] = a4\n  4086: a4 = a3 >> 0x18\n  4089: u8 [a0 + 0x13] = a4\n  4092: a4 = a3 >> 0x10\n  4095: u8 [a0 + 0x12] = a4\n  4098: a3 = a3 >> 0x8\n  4101: u8 [a0 + 0x11] = a3\n  4104: u8 [a0 + 0x8] = a2\n  4107: a3 = a2 >> 0x38\n  4110: u8 [a0 + 0xf] = a3\n  4113: a3 = a2 >> 0x30\n  4116: u8 [a0 + 0xe] = a3\n  4119: a3 = a2 >> 0x28\n  4122: u8 [a0 + 0xd] = a3\n  4125: a3 = a2 >> 0x20\n  4128: u8 [a0 + 0xc] = a3\n  4131: a3 = a2 >> 0x18\n  4134: u8 [a0 + 0xb] = a3\n  4137: a3 = a2 >> 0x10\n  4140: u8 [a0 + 0xa] = a3\n  4143: a2 = a2 >> 0x8\n  4146: u8 [a0 + 0x9] = a2\n  4149: u8 [a0] = a1\n  4151: a2 = a1 >> 0x38\n  4154: u8 [a0 + 0x7] = a2\n  4157: a2 = a1 >> 0x30\n  4160: u8 [a0 + 0x6] = a2\n  4163: a2 = a1 >> 0x28\n  4166: u8 [a0 + 0x5] = a2\n  4169: a2 = a1 >> 0x20\n  4172: u8 [a0 + 0x4] = a2\n  4175: a2 = a1 >> 0x18\n  4178: u8 [a0 + 0x3] = a2\n  4181: a2 = a1 >> 0x10\n  4184: u8 [a0 + 0x2] = a2\n  4187: a1 = a1 >> 0x8\n  4190: u8 [a0 + 0x1] = a1\n  4193: a0 = s0 + 0x20\n  4196: a1 = a0 <u s0\n  4199: a3 = u64 [sp + 0x20]\n  4202: a2 = a3 + a1\n  4205: a3 = a2 <u a3\n  4208: a3 = a1 if a1 == 0\n  4211: a1 = u64 [sp + 0x30]\n  4214: a3 = a3 + a1\n  4217: a1 = a3 <u a1\n  4220: a4 = u64 [sp + 0x28]\n  4223: a1 = a1 + a4\n  4226: a4 = u64 [sp + 0x18]\n  4229: u64 [a4] = a0\n  4231: u64 [a4 + 0x8] = a2\n  4234: u64 [a4 + 0x10] = a3\n  4237: u64 [a4 + 0x18] = a1\n  4240: ra = u64 [sp + 0x48]\n  4243: s0 = u64 [sp + 0x40]\n  4246: s1 = u64 [sp + 0x38]\n  4249: sp = sp + 0x50\n  4252: ret\n      : @102 (gas: 1)\n  4254: trap\n      : @103 (gas: 17)\n  4255: sp = sp + 0xffffffffffffffa0\n  4258: u64 [sp + 0x58] = ra\n  4261: u64 [sp + 0x50] = s0\n  4264: u64 [sp + 0x48] = s1\n  4267: a3 = u64 [a1 + 0x18]\n  4270: a4 = u64 [a1 + 0x10]\n  4273: a5 = u64 [a1 + 0x8]\n  4276: s1 = u64 [a1]\n  4278: a1 = a5 | a3\n  4281: a2 = s1 | a4\n  4284: a2 = a2 | a1\n  4287: a2 = a2 >> 0x20\n  4290: a1 = a1 | a4\n  4293: a1 = a1 << 0x20\n  4296: a1 = a1 | a2\n  4299: u64 [sp + 0x28] = a0\n  4302: jump @110 if a1 != 0\n      : @104 (gas: 19)\n  4306: a0 = s1 + 0x20\n  4309: u64 [sp + 0x30] = a0\n  4312: a0 = a0 <u s1\n  4315: a1 = a5 + a0\n  4318: u64 [sp + 0x40] = a1\n  4321: u64 [sp + 0x8] = a5\n  4324: s0 = a1 <u a5\n  4327: s0 = a0 if a0 == 0\n  4330: s0 = s0 + a4\n  4333: u64 [sp + 0x10] = a4\n  4336: a0 = s0 <u a4\n  4339: u64 [sp + 0x18] = a3\n  4342: a0 = a0 + a3\n  4345: u64 [sp + 0x38] = a0\n  4348: u64 [sp] = s1\n  4350: i32 a0 = s1 + 0\n  4352: a1 = 0x20\n  4355: s1 = 0x20\n  4358: ra = 82, jump @0\n      : @105 [@dyn 41] (gas: 45)\n  4363: u8 [a0 + 0x1f] = s1\n  4366: a1 = u64 [sp + 0x30]\n  4369: s1 = a1\n  4371: a1 = a1 | s0\n  4374: a2 = u64 [sp + 0x40]\n  4377: a4 = u64 [sp + 0x38]\n  4380: a2 = a2 | a4\n  4383: a1 = a1 | a2\n  4386: a1 = a1 >> 0x20\n  4389: u64 [sp + 0x20] = s0\n  4392: a2 = a2 | s0\n  4395: a2 = a2 << 0x20\n  4398: a1 = a1 | a2\n  4401: u8 [a0 + 30] = 0\n  4404: u8 [a0 + 29] = 0\n  4407: u8 [a0 + 28] = 0\n  4410: u8 [a0 + 27] = 0\n  4413: u8 [a0 + 26] = 0\n  4416: u8 [a0 + 25] = 0\n  4419: u8 [a0 + 24] = 0\n  4422: u8 [a0 + 23] = 0\n  4425: u8 [a0 + 22] = 0\n  4428: u8 [a0 + 21] = 0\n  4431: u8 [a0 + 20] = 0\n  4434: u8 [a0 + 19] = 0\n  4437: u8 [a0 + 18] = 0\n  4440: u8 [a0 + 17] = 0\n  4443: u8 [a0 + 16] = 0\n  4446: u8 [a0 + 15] = 0\n  4449: u8 [a0 + 14] = 0\n  4452: u8 [a0 + 13] = 0\n  4455: u8 [a0 + 12] = 0\n  4458: u8 [a0 + 11] = 0\n  4461: u8 [a0 + 10] = 0\n  4464: u8 [a0 + 9] = 0\n  4467: u8 [a0 + 8] = 0\n  4470: u8 [a0 + 7] = 0\n  4473: u8 [a0 + 6] = 0\n  4476: u8 [a0 + 5] = 0\n  4479: u8 [a0 + 4] = 0\n  4482: u8 [a0 + 3] = 0\n  4485: u8 [a0 + 2] = 0\n  4488: u8 [a0 + 1] = 0\n  4491: u8 [a0 + 0] = 0\n  4493: jump @110 if a1 != 0\n      : @106 (gas: 4)\n  4497: i32 s0 = s1 + 0\n  4499: a1 = 0x20\n  4502: a0 = s0\n  4504: ra = 84, jump @0\n      : @107 [@dyn 42] (gas: 41)\n  4509: u8 [a0 + 31] = 0xb\n  4513: u8 [a0 + 30] = 0\n  4516: u8 [a0 + 29] = 0\n  4519: u8 [a0 + 28] = 0\n  4522: u8 [a0 + 27] = 0\n  4525: u8 [a0 + 26] = 0\n  4528: u8 [a0 + 25] = 0\n  4531: u8 [a0 + 24] = 0\n  4534: u8 [a0 + 23] = 0\n  4537: u8 [a0 + 22] = 0\n  4540: u8 [a0 + 21] = 0\n  4543: u8 [a0 + 20] = 0\n  4546: u8 [a0 + 19] = 0\n  4549: u8 [a0 + 18] = 0\n  4552: u8 [a0 + 17] = 0\n  4555: u8 [a0 + 16] = 0\n  4558: u8 [a0 + 15] = 0\n  4561: u8 [a0 + 14] = 0\n  4564: u8 [a0 + 13] = 0\n  4567: u8 [a0 + 12] = 0\n  4570: u8 [a0 + 11] = 0\n  4573: u8 [a0 + 10] = 0\n  4576: u8 [a0 + 9] = 0\n  4579: u8 [a0 + 8] = 0\n  4582: u8 [a0 + 7] = 0\n  4585: u8 [a0 + 6] = 0\n  4588: u8 [a0 + 5] = 0\n  4591: u8 [a0 + 4] = 0\n  4594: u8 [a0 + 3] = 0\n  4597: u8 [a0 + 2] = 0\n  4600: u8 [a0 + 1] = 0\n  4603: a1 = u64 [sp + 0x20]\n  4606: a2 = u64 [sp + 0x38]\n  4609: a1 = a1 | a2\n  4612: a2 = 0xffffffe0\n  4622: a2 = s1 <u a2\n  4625: a3 = u64 [sp + 0x40]\n  4628: a2 = 0 if a3 != 0\n  4630: a2 = 0 if a1 != 0\n  4632: u8 [a0 + 0] = 0\n  4634: jump @110 if a2 == 0\n      : @108 (gas: 3)\n  4638: i32 a0 = s0 + 0x20\n  4641: a1 = 0x20\n  4644: ra = 86, jump @0\n      : @109 [@dyn 43] (gas: 54)\n  4649: u8 [a0 + 31] = 0\n  4652: u8 [a0 + 30] = 0\n  4655: u8 [a0 + 29] = 0\n  4658: u8 [a0 + 28] = 0\n  4661: u8 [a0 + 27] = 0\n  4664: u8 [a0 + 26] = 0\n  4667: u8 [a0 + 25] = 0\n  4670: u8 [a0 + 24] = 0\n  4673: u8 [a0 + 23] = 0\n  4676: u8 [a0 + 22] = 0\n  4679: u8 [a0 + 21] = 0\n  4682: u8 [a0 + 20] = 0\n  4685: u8 [a0 + 19] = 0\n  4688: u8 [a0 + 18] = 0\n  4691: u8 [a0 + 17] = 0\n  4694: u8 [a0 + 16] = 0\n  4697: u8 [a0 + 15] = 0\n  4700: u8 [a0 + 14] = 0\n  4703: u8 [a0 + 13] = 0\n  4706: u8 [a0 + 12] = 0\n  4709: u8 [a0 + 11] = 0\n  4712: u8 [a0 + 10] = 0x30\n  4716: u8 [a0 + 9] = 0x20\n  4720: u8 [a0 + 8] = 0x3d\n  4724: u8 [a0 + 7] = 0x20\n  4728: u8 [a0 + 6] = 0x72\n  4732: u8 [a0 + 5] = 0x65\n  4736: u8 [a0 + 4] = 0x74\n  4740: u8 [a0 + 3] = 0x69\n  4744: u8 [a0 + 2] = 0x62\n  4748: u8 [a0 + 1] = 0x72\n  4752: u8 [a0 + 0] = 0x61\n  4755: a1 = u64 [sp]\n  4757: a0 = a1 + 0x60\n  4760: a1 = a0 <u a1\n  4763: a3 = u64 [sp + 0x8]\n  4766: a2 = a3 + a1\n  4769: a3 = a2 <u a3\n  4772: a3 = a1 if a1 == 0\n  4775: a1 = u64 [sp + 0x10]\n  4778: a3 = a3 + a1\n  4781: a1 = a3 <u a1\n  4784: a4 = u64 [sp + 0x18]\n  4787: a1 = a1 + a4\n  4790: a4 = u64 [sp + 0x28]\n  4793: u64 [a4] = a0\n  4795: u64 [a4 + 0x8] = a2\n  4798: u64 [a4 + 0x10] = a3\n  4801: u64 [a4 + 0x18] = a1\n  4804: ra = u64 [sp + 0x58]\n  4807: s0 = u64 [sp + 0x50]\n  4810: s1 = u64 [sp + 0x48]\n  4813: sp = sp + 0x60\n  4816: ret\n      : @110 (gas: 1)\n  4818: trap\n      : @111 (gas: 7)\n  4819: a0 = u64 [sp + 0x10]\n  4822: a0 = a0 << 0x20\n  4825: a0 = a0 >> 0x20\n  4828: a1 = u64 [sp + 0x18]\n  4831: a1 = a1 | s1\n  4834: a0 = a0 | a1\n  4837: jump @114 if a0 == 0\n      : @112 (gas: 3)\n  4841: a0 = 0x80\n  4845: a1 = 0x20\n  4848: ra = 88, jump @0\n      : @113 [@dyn 44] (gas: 73)\n  4853: a1 = u64 [sp]\n  4855: a1 = reverse a1\n  4857: a2 = u64 [sp + 0x10]\n  4860: a2 = reverse a2\n  4862: a3 = u64 [sp + 0x18]\n  4865: a3 = reverse a3\n  4867: a4 = reverse s1\n  4869: u8 [a0 + 0x18] = a4\n  4872: a5 = a4 >> 0x38\n  4875: u8 [a0 + 0x1f] = a5\n  4878: a5 = a4 >> 0x30\n  4881: u8 [a0 + 0x1e] = a5\n  4884: a5 = a4 >> 0x28\n  4887: u8 [a0 + 0x1d] = a5\n  4890: a5 = a4 >> 0x20\n  4893: u8 [a0 + 0x1c] = a5\n  4896: a5 = a4 >> 0x18\n  4899: u8 [a0 + 0x1b] = a5\n  4902: a5 = a4 >> 0x10\n  4905: u8 [a0 + 0x1a] = a5\n  4908: a4 = a4 >> 0x8\n  4911: u8 [a0 + 0x19] = a4\n  4914: u8 [a0 + 0x10] = a3\n  4917: a4 = a3 >> 0x38\n  4920: u8 [a0 + 0x17] = a4\n  4923: a4 = a3 >> 0x30\n  4926: u8 [a0 + 0x16] = a4\n  4929: a4 = a3 >> 0x28\n  4932: u8 [a0 + 0x15] = a4\n  4935: a4 = a3 >> 0x20\n  4938: u8 [a0 + 0x14] = a4\n  4941: a4 = a3 >> 0x18\n  4944: u8 [a0 + 0x13] = a4\n  4947: a4 = a3 >> 0x10\n  4950: u8 [a0 + 0x12] = a4\n  4953: a3 = a3 >> 0x8\n  4956: u8 [a0 + 0x11] = a3\n  4959: u8 [a0 + 0x8] = a2\n  4962: a3 = a2 >> 0x38\n  4965: u8 [a0 + 0xf] = a3\n  4968: a3 = a2 >> 0x30\n  4971: u8 [a0 + 0xe] = a3\n  4974: a3 = a2 >> 0x28\n  4977: u8 [a0 + 0xd] = a3\n  4980: a3 = a2 >> 0x20\n  4983: u8 [a0 + 0xc] = a3\n  4986: a3 = a2 >> 0x18\n  4989: u8 [a0 + 0xb] = a3\n  4992: a3 = a2 >> 0x10\n  4995: u8 [a0 + 0xa] = a3\n  4998: a2 = a2 >> 0x8\n  5001: u8 [a0 + 0x9] = a2\n  5004: u8 [a0] = a1\n  5006: a2 = a1 >> 0x38\n  5009: u8 [a0 + 0x7] = a2\n  5012: a2 = a1 >> 0x30\n  5015: u8 [a0 + 0x6] = a2\n  5018: a2 = a1 >> 0x28\n  5021: u8 [a0 + 0x5] = a2\n  5024: a2 = a1 >> 0x20\n  5027: u8 [a0 + 0x4] = a2\n  5030: a2 = a1 >> 0x18\n  5033: u8 [a0 + 0x3] = a2\n  5036: a2 = a1 >> 0x10\n  5039: u8 [a0 + 0x2] = a2\n  5042: a1 = a1 >> 0x8\n  5045: u8 [a0 + 0x1] = a1\n  5048: sp = s0 + 0xffffffffffffff20\n  5052: ra = u64 [sp + 0xd8]\n  5056: s0 = u64 [sp + 0xd0]\n  5060: s1 = u64 [sp + 0xc8]\n  5064: sp = sp + 0xe0\n  5068: ret\n      : @114 (gas: 3)\n  5070: a0 = 0x40\n  5073: a1 = 0x20\n  5076: ra = 90, jump @0\n      : @115 [@dyn 45] (gas: 103)\n  5081: a1 = u8 [a0 + 0x11]\n  5084: a2 = u8 [a0 + 0x10]\n  5087: a3 = u8 [a0 + 0x12]\n  5090: a4 = u8 [a0 + 0x13]\n  5093: a1 = a1 << 0x8\n  5096: a1 = a1 | a2\n  5099: a3 = a3 << 0x10\n  5102: a4 = a4 << 0x18\n  5105: a3 = a3 | a4\n  5108: a1 = a1 | a3\n  5111: a2 = u8 [a0 + 0x15]\n  5114: a3 = u8 [a0 + 0x14]\n  5117: a4 = u8 [a0 + 0x16]\n  5120: a5 = u8 [a0 + 0x17]\n  5123: a2 = a2 << 0x8\n  5126: a2 = a2 | a3\n  5129: a4 = a4 << 0x10\n  5132: a5 = a5 << 0x18\n  5135: a4 = a4 | a5\n  5138: a2 = a2 | a4\n  5141: a2 = a2 << 0x20\n  5144: t0 = a2 | a1\n  5147: a2 = u8 [a0 + 0x1]\n  5150: a3 = u8 [a0]\n  5152: a4 = u8 [a0 + 0x2]\n  5155: a5 = u8 [a0 + 0x3]\n  5158: a2 = a2 << 0x8\n  5161: a2 = a2 | a3\n  5164: a4 = a4 << 0x10\n  5167: a5 = a5 << 0x18\n  5170: a4 = a4 | a5\n  5173: a2 = a2 | a4\n  5176: a3 = u8 [a0 + 0x5]\n  5179: a4 = u8 [a0 + 0x4]\n  5182: a5 = u8 [a0 + 0x6]\n  5185: s1 = u8 [a0 + 0x7]\n  5188: a3 = a3 << 0x8\n  5191: a3 = a3 | a4\n  5194: a5 = a5 << 0x10\n  5197: s1 = s1 << 0x18\n  5200: a5 = a5 | s1\n  5203: a3 = a3 | a5\n  5206: a3 = a3 << 0x20\n  5209: a2 = a2 | a3\n  5212: a3 = u8 [a0 + 0x19]\n  5215: a4 = u8 [a0 + 0x18]\n  5218: a5 = u8 [a0 + 0x1a]\n  5221: s1 = u8 [a0 + 0x1b]\n  5224: a3 = a3 << 0x8\n  5227: a3 = a3 | a4\n  5230: a5 = a5 << 0x10\n  5233: s1 = s1 << 0x18\n  5236: a5 = a5 | s1\n  5239: a3 = a3 | a5\n  5242: a4 = u8 [a0 + 0x1d]\n  5245: a5 = u8 [a0 + 0x1c]\n  5248: s1 = u8 [a0 + 0x1e]\n  5251: a1 = u8 [a0 + 0x1f]\n  5254: a4 = a4 << 0x8\n  5257: a4 = a4 | a5\n  5260: s1 = s1 << 0x10\n  5263: a1 = a1 << 0x18\n  5266: a1 = a1 | s1\n  5269: a1 = a1 | a4\n  5272: a1 = a1 << 0x20\n  5275: a3 = a3 | a1\n  5278: a1 = u8 [a0 + 0x9]\n  5281: a4 = u8 [a0 + 0x8]\n  5284: a5 = u8 [a0 + 0xa]\n  5287: s1 = u8 [a0 + 0xb]\n  5290: a1 = a1 << 0x8\n  5293: a1 = a1 | a4\n  5296: a5 = a5 << 0x10\n  5299: s1 = s1 << 0x18\n  5302: a5 = a5 | s1\n  5305: a1 = a1 | a5\n  5308: a4 = u8 [a0 + 0xd]\n  5311: a5 = u8 [a0 + 0xc]\n  5314: s1 = u8 [a0 + 0xe]\n  5317: a0 = u8 [a0 + 0xf]\n  5320: a4 = a4 << 0x8\n  5323: a4 = a4 | a5\n  5326: s1 = s1 << 0x10\n  5329: a0 = a0 << 0x18\n  5332: a0 = a0 | s1\n  5335: a0 = a0 | a4\n  5338: a0 = a0 << 0x20\n  5341: a0 = a0 | a1\n  5344: s1 = reverse a0\n  5346: a1 = reverse a3\n  5348: a2 = reverse a2\n  5350: a0 = reverse t0\n  5352: u64 [sp + 0x18] = a0\n  5355: u64 [sp + 0x10] = a2\n  5358: a0 = a0 | a2\n  5361: a2 = a1\n  5363: a1 = a1 | s1\n  5366: a1 = a1 | a0\n  5369: a1 = a1 >> 0x20\n  5372: a0 = a0 | s1\n  5375: a0 = a0 << 0x20\n  5378: a0 = a0 | a1\n  5381: jump @119 if a0 != 0\n      : @116 (gas: 5)\n  5385: u64 [sp + 0x8] = a2\n  5388: i32 a0 = a2 + 0\n  5390: a1 = 0x20\n  5393: u64 [sp] = a0\n  5395: ra = 92, jump @0\n      : @117 [@dyn 46] (gas: 50)\n  5400: u8 [a0 + 31] = 0\n  5403: u8 [a0 + 30] = 0\n  5406: u8 [a0 + 29] = 0\n  5409: u8 [a0 + 28] = 0\n  5412: u8 [a0 + 27] = 0\n  5415: u8 [a0 + 26] = 0\n  5418: u8 [a0 + 25] = 0\n  5421: u8 [a0 + 24] = 0\n  5424: u8 [a0 + 23] = 0\n  5427: u8 [a0 + 22] = 0\n  5430: u8 [a0 + 21] = 0\n  5433: u8 [a0 + 20] = 0\n  5436: u8 [a0 + 19] = 0\n  5439: u8 [a0 + 18] = 0\n  5442: u8 [a0 + 17] = 0\n  5445: u8 [a0 + 16] = 0\n  5448: u8 [a0 + 15] = 0\n  5451: u8 [a0 + 14] = 0\n  5454: u8 [a0 + 13] = 0\n  5457: u8 [a0 + 12] = 0\n  5460: u8 [a0 + 11] = 0\n  5463: u8 [a0 + 10] = 0\n  5466: u8 [a0 + 9] = 0\n  5469: u8 [a0 + 8] = 0\n  5472: u8 [a0 + 7] = 0\n  5475: u8 [a0 + 6] = 0\n  5478: u8 [a0 + 5] = 0\n  5481: u8 [a0 + 4] = 0\n  5484: u8 [a0 + 3] = 0xa0\n  5489: u8 [a0 + 2] = 0x79\n  5493: u8 [a0 + 1] = 0xc3\n  5498: u8 [a0 + 0] = 0x8\n  5501: a1 = u64 [sp + 0x8]\n  5504: a0 = a1 + 0x4\n  5507: a1 = a0 <u a1\n  5510: a3 = u64 [sp + 0x18]\n  5513: a2 = a3 + a1\n  5516: a3 = a2 <u a3\n  5519: a3 = a1 if a1 == 0\n  5522: a3 = a3 + s1\n  5525: a1 = a3 <u s1\n  5528: a4 = u64 [sp + 0x10]\n  5531: a4 = a4 + a1\n  5534: u64 [sp + 0x28] = a2\n  5537: u64 [sp + 0x20] = a0\n  5540: u64 [sp + 0x30] = a3\n  5543: a0 = sp + 0x40\n  5546: a1 = sp + 0x20\n  5549: u64 [sp + 0x38] = a4\n  5552: ra = 94, jump @103\n      : @118 [@dyn 47] (gas: 30)\n  5557: a0 = u64 [sp + 0x48]\n  5560: t0 = u64 [sp + 0x58]\n  5563: t1 = u64 [sp + 0x40]\n  5566: a3 = u64 [sp + 0x50]\n  5569: a1 = u64 [sp + 0x18]\n  5572: a4 = a0 ^ a1\n  5575: a5 = a0 <u a1\n  5578: t2 = a1\n  5580: a2 = u64 [sp + 0x8]\n  5583: a1 = t1 <u a2\n  5586: a5 = a1 if a4 == 0\n  5589: a4 = a3 - s1\n  5592: a3 = a3 <u s1\n  5595: s1 = u64 [sp + 0x10]\n  5598: s1 = t0 - s1\n  5601: s1 = s1 - a3\n  5604: a3 = a4 <u a5\n  5607: s1 = s1 - a3\n  5610: a4 = a4 - a5\n  5613: a0 = a0 - t2\n  5616: a1 = a0 - a1\n  5619: a0 = t1 - a2\n  5622: a1 = a1 | s1\n  5625: a2 = a0 | a4\n  5628: a2 = a2 | a1\n  5631: a1 = a1 | a4\n  5634: a2 = a2 >> 0x20\n  5637: a1 = a1 << 0x20\n  5640: a1 = a1 | a2\n  5643: jump @120 if a1 == 0\n      : @119 (gas: 1)\n  5646: trap\n      : @120 (gas: 4)\n  5647: i32 s1 = a0 + 0\n  5649: a0 = u64 [sp]\n  5651: a1 = s1\n  5653: ra = 96, jump @0\n      : @121 [@dyn 48] (gas: 6)\n  5658: i32 a1 = a0 + 0\n  5660: a0 = 0x1\n  5663: a2 = s1\n  5665: ra = 0x62\n  5668: ecalli 12 // 'seal_return'\n  5670: fallthrough\n      : @122 [@dyn 49] (gas: 6)\n  5671: a1 = u32 [a1 + 0x1c]\n  5674: u64 [a0 + 24] = 0\n  5677: u64 [a0 + 16] = 0\n  5680: u64 [a0 + 8] = 0\n  5683: u64 [a0] = a1\n  5685: ret\n      : @123 (gas: 48)\n  5687: sp = sp + 0xffffffffffffff60\n  5691: u64 [sp + 0x98] = ra\n  5695: u64 [sp + 0x90] = s0\n  5699: u64 [sp + 0x88] = s1\n  5703: s0 = sp + 0xa0\n  5707: sp = sp & 0xffffffffffffffe0\n  5710: t0 = u64 [a1 + 0x10]\n  5713: a5 = u64 [a1 + 0x8]\n  5716: a3 = u64 [a2 + 0x8]\n  5719: t2 = u64 [a1]\n  5721: a4 = u64 [a2]\n  5723: u64 [sp + 0x40] = a4\n  5726: ra = u64 [a2 + 0x10]\n  5729: t1 = a3 ^ a5\n  5732: s1 = a3 <u a5\n  5735: a4 = a4 <u t2\n  5738: u64 [sp + 0x38] = a4\n  5741: s1 = a4 if t1 == 0\n  5744: t1 = u64 [a1 + 0x18]\n  5747: a1 = u64 [a2 + 0x18]\n  5750: u64 [sp + 0x30] = a1\n  5753: a2 = ra - t0\n  5756: a1 = a2 - s1\n  5759: u64 [sp + 0x48] = a1\n  5762: a1 = a2 <u s1\n  5765: u64 [sp + 0x58] = t0\n  5768: a4 = ra <u t0\n  5771: u64 [sp + 0x50] = t1\n  5774: a2 = u64 [sp + 0x30]\n  5777: a2 = a2 - t1\n  5780: a2 = a2 - a4\n  5783: a2 = a2 - a1\n  5786: a1 = a3 - a5\n  5789: a3 = u64 [sp + 0x38]\n  5792: a1 = a1 - a3\n  5795: a3 = u64 [sp + 0x40]\n  5798: a3 = a3 - t2\n  5801: a4 = a1 >u 0\n  5803: a3 = a3 <u 0x60\n  5806: a3 = a3 ^ 0x1\n  5809: a3 = a4 if a1 != 0\n  5812: s1 = a2 >s 0\n  5814: a1 = u64 [sp + 0x48]\n  5817: a4 = a1 >u 0\n  5819: a4 = s1 if a2 != 0\n  5822: a1 = a1 | a2\n  5825: a3 = a4 if a1 != 0\n  5828: jump @133 if a3 == 0\n      : @124 (gas: 12)\n  5832: s1 = a0\n  5834: a2 = u64 [sp + 0x58]\n  5837: a0 = t2 | a2\n  5840: u64 [sp + 0x48] = a5\n  5843: a1 = u64 [sp + 0x50]\n  5846: a1 = a1 | a5\n  5849: a0 = a0 | a1\n  5852: a0 = a0 >> 0x20\n  5855: a1 = a1 | a2\n  5858: a1 = a1 << 0x20\n  5861: a0 = a0 | a1\n  5864: jump @132 if a0 != 0\n      : @125 (gas: 6)\n  5868: i32 a1 = t2 + 0\n  5870: i32 a0 = sp + 0x60\n  5873: u64 [sp + 0x38] = a1\n  5876: u64 [sp + 0x40] = t2\n  5879: ecalli 2 // 'call_data_load'\n  5881: fallthrough\n      : @126 (gas: 13)\n  5882: a0 = u64 [sp + 0x58]\n  5885: a1 = u64 [sp + 0x50]\n  5888: a2 = a0 | a1\n  5891: a0 = 0x100000000\n  5901: u64 [sp + 0x50] = a0\n  5904: a0 = 0xffffffe0\n  5914: a1 = u64 [sp + 0x40]\n  5917: a0 = a1 <u a0\n  5920: a1 = u64 [sp + 0x48]\n  5923: a0 = 0 if a1 != 0\n  5925: u64 [sp + 0x58] = a2\n  5928: a0 = 0 if a2 != 0\n  5930: jump @132 if a0 == 0\n      : @127 (gas: 13)\n  5934: a0 = u64 [sp + 0x78]\n  5937: u64 [sp + 0x30] = a0\n  5940: a0 = u64 [sp + 0x70]\n  5943: u64 [sp + 0x28] = a0\n  5946: a0 = u64 [sp + 0x68]\n  5949: u64 [sp + 0x18] = a0\n  5952: a0 = u64 [sp + 0x60]\n  5955: u64 [sp + 0x20] = a0\n  5958: a0 = u64 [sp + 0x38]\n  5961: i32 a1 = a0 + 0x20\n  5964: i32 a0 = sp + 0x60\n  5967: ecalli 2 // 'call_data_load'\n  5969: fallthrough\n      : @128 (gas: 9)\n  5970: a0 = u64 [sp + 0x50]\n  5973: a0 = a0 + 0xffffffffffffffc0\n  5976: a1 = u64 [sp + 0x40]\n  5979: a0 = a1 <u a0\n  5982: a1 = u64 [sp + 0x48]\n  5985: a0 = 0 if a1 != 0\n  5987: a1 = u64 [sp + 0x58]\n  5990: a0 = 0 if a1 != 0\n  5992: jump @132 if a0 == 0\n      : @129 (gas: 13)\n  5996: a0 = u64 [sp + 0x78]\n  5999: u64 [sp + 0x58] = a0\n  6002: a0 = u64 [sp + 0x70]\n  6005: u64 [sp + 0x50] = a0\n  6008: a0 = u64 [sp + 0x68]\n  6011: u64 [sp + 0x40] = a0\n  6014: a0 = u64 [sp + 0x60]\n  6017: u64 [sp + 0x48] = a0\n  6020: a0 = u64 [sp + 0x38]\n  6023: i32 a1 = a0 + 0x40\n  6026: i32 a0 = sp + 0x60\n  6029: ecalli 2 // 'call_data_load'\n  6031: fallthrough\n      : @130 (gas: 9)\n  6032: a0 = u64 [sp + 0x78]\n  6035: a1 = u64 [sp + 0x70]\n  6038: a2 = u64 [sp + 0x60]\n  6041: a3 = u64 [sp + 0x68]\n  6044: a4 = a1 | a0\n  6047: a5 = a2 <u 0x2\n  6050: a5 = 0 if a3 != 0\n  6052: a5 = 0 if a4 != 0\n  6054: jump @133 if a5 == 0\n      : @131 (gas: 26)\n  6057: u64 [s1 + 0x48] = a3\n  6060: u64 [s1 + 0x40] = a2\n  6063: a2 = u64 [sp + 0x40]\n  6066: u64 [s1 + 0x28] = a2\n  6069: a2 = u64 [sp + 0x48]\n  6072: u64 [s1 + 0x20] = a2\n  6075: a2 = u64 [sp + 0x18]\n  6078: u64 [s1 + 0x8] = a2\n  6081: a2 = u64 [sp + 0x20]\n  6084: u64 [s1] = a2\n  6086: u64 [s1 + 0x50] = a1\n  6089: a1 = u64 [sp + 0x50]\n  6092: u64 [s1 + 0x30] = a1\n  6095: a1 = u64 [sp + 0x28]\n  6098: u64 [s1 + 0x10] = a1\n  6101: u64 [s1 + 0x58] = a0\n  6104: a0 = u64 [sp + 0x58]\n  6107: u64 [s1 + 0x38] = a0\n  6110: a0 = u64 [sp + 0x30]\n  6113: u64 [s1 + 0x18] = a0\n  6116: sp = s0 + 0xffffffffffffff60\n  6120: ra = u64 [sp + 0x98]\n  6124: s0 = u64 [sp + 0x90]\n  6128: s1 = u64 [sp + 0x88]\n  6132: sp = sp + 0xa0\n  6136: ret\n      : @132 (gas: 1)\n  6138: trap\n      : @133 (gas: 3)\n  6139: a0 = 0\n  6141: a1 = 0\n  6143: ra = 100, jump @0\n      : @134 [@dyn 50] (gas: 6)\n  6148: i32 a1 = a0 + 0\n  6150: a0 = 0x1\n  6153: a2 = 0\n  6155: ra = 0x66\n  6158: ecalli 12 // 'seal_return'\n  6160: fallthrough\n      : @135 [@dyn 51] (gas: 9)\n  6161: a2 = u64 [a1 + 0x18]\n  6164: a3 = u64 [a1 + 0x10]\n  6167: a4 = u64 [a1 + 0x8]\n  6170: a1 = u64 [a1]\n  6172: u64 [a0 + 0x18] = a2\n  6175: u64 [a0 + 0x10] = a3\n  6178: u64 [a0 + 0x8] = a4\n  6181: u64 [a0] = a1\n  6183: ret\n      : @136 (gas: 8)\n  6185: a0 = u64 [sp + 0x130]\n  6189: a1 = u64 [sp + 0x138]\n  6193: a2 = u64 [sp + 0x128]\n  6197: a3 = u64 [sp + 0x120]\n  6201: a1 = a1 | a2\n  6204: a0 = a0 | a3\n  6207: a0 = a0 | a1\n  6210: jump @142 if a0 != 0\n      : @137 (gas: 13)\n  6214: a0 = u32 [0x200a8]\n  6219: u64 [sp + 152] = 0\n  6223: u64 [sp + 144] = 0\n  6227: u64 [sp + 136] = 0\n  6231: u64 [sp + 0x80] = a0\n  6235: u64 [sp + 184] = 0\n  6239: u64 [sp + 176] = 0\n  6243: u64 [sp + 160] = 0x4\n  6248: a0 = sp + 0xc0\n  6252: a1 = sp + 0xa0\n  6256: a2 = sp + 0x80\n  6260: u64 [sp + 168] = 0\n  6264: ra = 104, jump @123\n      : @138 [@dyn 52] (gas: 30)\n  6269: a0 = u64 [sp + 0xc0]\n  6273: u64 [sp + 0x18] = a0\n  6276: t1 = u64 [sp + 0xc8]\n  6280: t2 = u64 [sp + 0xd0]\n  6284: ra = u64 [sp + 0xd8]\n  6288: t0 = u64 [sp + 0xe0]\n  6292: a5 = u64 [sp + 0xe8]\n  6296: a4 = u64 [sp + 0xf0]\n  6300: a3 = u64 [sp + 0xf8]\n  6304: a1 = u64 [sp + 0x100]\n  6308: s1 = u64 [sp + 0x108]\n  6312: a2 = u64 [sp + 0x110]\n  6316: a0 = u64 [sp + 0x118]\n  6320: u64 [sp + 0x38] = a0\n  6323: u64 [sp + 0x30] = a2\n  6326: u64 [sp + 0x28] = s1\n  6329: u64 [sp + 0x20] = a1\n  6332: u64 [sp + 0x58] = a3\n  6335: u64 [sp + 0x50] = a4\n  6338: u64 [sp + 0x48] = a5\n  6341: u64 [sp + 0x40] = t0\n  6344: u64 [sp + 0x78] = ra\n  6347: u64 [sp + 0x70] = t2\n  6350: u64 [sp + 0x68] = t1\n  6353: a0 = sp + 0x60\n  6356: a1 = sp + 0x40\n  6359: a2 = sp + 0x20\n  6362: a3 = u64 [sp + 0x18]\n  6365: u64 [sp + 0x60] = a3\n  6368: ra = 106, jump @424\n      : @139 [@dyn 53] (gas: 3)\n  6373: a0 = 0x40\n  6376: a1 = 0x20\n  6379: ra = 108, jump @0\n      : @140 [@dyn 54] (gas: 100)\n  6384: a1 = u8 [a0 + 0x11]\n  6387: a2 = u8 [a0 + 0x10]\n  6390: a3 = u8 [a0 + 0x12]\n  6393: a4 = u8 [a0 + 0x13]\n  6396: a1 = a1 << 0x8\n  6399: a1 = a1 | a2\n  6402: a3 = a3 << 0x10\n  6405: a4 = a4 << 0x18\n  6408: a3 = a3 | a4\n  6411: a1 = a1 | a3\n  6414: a2 = u8 [a0 + 0x15]\n  6417: a3 = u8 [a0 + 0x14]\n  6420: a4 = u8 [a0 + 0x16]\n  6423: a5 = u8 [a0 + 0x17]\n  6426: a2 = a2 << 0x8\n  6429: a2 = a2 | a3\n  6432: a4 = a4 << 0x10\n  6435: a5 = a5 << 0x18\n  6438: a4 = a4 | a5\n  6441: a2 = a2 | a4\n  6444: a2 = a2 << 0x20\n  6447: t0 = a2 | a1\n  6450: a2 = u8 [a0 + 0x1]\n  6453: a3 = u8 [a0]\n  6455: a4 = u8 [a0 + 0x2]\n  6458: a5 = u8 [a0 + 0x3]\n  6461: a2 = a2 << 0x8\n  6464: a2 = a2 | a3\n  6467: a4 = a4 << 0x10\n  6470: a5 = a5 << 0x18\n  6473: a4 = a4 | a5\n  6476: a2 = a2 | a4\n  6479: a3 = u8 [a0 + 0x5]\n  6482: a4 = u8 [a0 + 0x4]\n  6485: a5 = u8 [a0 + 0x6]\n  6488: s1 = u8 [a0 + 0x7]\n  6491: a3 = a3 << 0x8\n  6494: a3 = a3 | a4\n  6497: a5 = a5 << 0x10\n  6500: s1 = s1 << 0x18\n  6503: a5 = a5 | s1\n  6506: a3 = a3 | a5\n  6509: a3 = a3 << 0x20\n  6512: a2 = a2 | a3\n  6515: a3 = u8 [a0 + 0x19]\n  6518: a4 = u8 [a0 + 0x18]\n  6521: a5 = u8 [a0 + 0x1a]\n  6524: s1 = u8 [a0 + 0x1b]\n  6527: a3 = a3 << 0x8\n  6530: a3 = a3 | a4\n  6533: a5 = a5 << 0x10\n  6536: s1 = s1 << 0x18\n  6539: a5 = a5 | s1\n  6542: a3 = a3 | a5\n  6545: a4 = u8 [a0 + 0x1d]\n  6548: a5 = u8 [a0 + 0x1c]\n  6551: s1 = u8 [a0 + 0x1e]\n  6554: a1 = u8 [a0 + 0x1f]\n  6557: a4 = a4 << 0x8\n  6560: a4 = a4 | a5\n  6563: s1 = s1 << 0x10\n  6566: a1 = a1 << 0x18\n  6569: a1 = a1 | s1\n  6572: a1 = a1 | a4\n  6575: a1 = a1 << 0x20\n  6578: a3 = a3 | a1\n  6581: a1 = u8 [a0 + 0x9]\n  6584: a4 = u8 [a0 + 0x8]\n  6587: a5 = u8 [a0 + 0xa]\n  6590: s1 = u8 [a0 + 0xb]\n  6593: a1 = a1 << 0x8\n  6596: a1 = a1 | a4\n  6599: a5 = a5 << 0x10\n  6602: s1 = s1 << 0x18\n  6605: a5 = a5 | s1\n  6608: a1 = a1 | a5\n  6611: a4 = u8 [a0 + 0xd]\n  6614: a5 = u8 [a0 + 0xc]\n  6617: s1 = u8 [a0 + 0xe]\n  6620: a0 = u8 [a0 + 0xf]\n  6623: a4 = a4 << 0x8\n  6626: a4 = a4 | a5\n  6629: s1 = s1 << 0x10\n  6632: a0 = a0 << 0x18\n  6635: a0 = a0 | s1\n  6638: a0 = a0 | a4\n  6641: a0 = a0 << 0x20\n  6644: a0 = a0 | a1\n  6647: a1 = reverse a0\n  6649: a0 = reverse a3\n  6651: a2 = reverse a2\n  6653: a3 = reverse t0\n  6655: a2 = a2 | a3\n  6658: a3 = a0 | a1\n  6661: a3 = a3 | a2\n  6664: a3 = a3 >> 0x20\n  6667: a1 = a1 | a2\n  6670: a1 = a1 << 0x20\n  6673: a1 = a1 | a3\n  6676: jump @144 if a1 == 0\n      : @141 (gas: 1)\n  6679: trap\n      : @142 (gas: 3)\n  6680: a0 = 0\n  6682: a1 = 0\n  6684: ra = 110, jump @0\n      : @143 [@dyn 55] (gas: 7)\n  6689: i32 a1 = a0 + 0\n  6691: a0 = 0x1\n  6694: a2 = 0\n  6696: ecalli 12 // 'seal_return'\n  6698: i32 a0 = a0 + 0\n  6700: ra = 0x70\n  6703: jump @0\n      : @144 (gas: 2)\n  6706: i32 a0 = a0 + 0\n  6708: ra = 112, jump @0\n      : @145 [@dyn 56] (gas: 6)\n  6713: i32 a1 = a0 + 0\n  6715: a0 = 0\n  6717: a2 = 0\n  6719: ra = 0x72\n  6722: ecalli 12 // 'seal_return'\n  6724: fallthrough\n      : @146 [@dyn 57] (gas: 9)\n  6725: a2 = u64 [a1 + 0x18]\n  6728: a3 = u64 [a1 + 0x10]\n  6731: a4 = u64 [a1 + 0x8]\n  6734: a1 = u64 [a1]\n  6736: u64 [a0 + 0x18] = a2\n  6739: u64 [a0 + 0x10] = a3\n  6742: u64 [a0 + 0x8] = a4\n  6745: u64 [a0] = a1\n  6747: ret\n      : @147 (gas: 8)\n  6749: a0 = u64 [sp + 0xb0]\n  6753: a1 = u64 [sp + 0xb8]\n  6757: a2 = u64 [sp + 0xa8]\n  6761: a3 = u64 [sp + 0xa0]\n  6765: a1 = a1 | a2\n  6768: a0 = a0 | a3\n  6771: a0 = a0 | a1\n  6774: jump @153 if a0 != 0\n      : @148 (gas: 2)\n  6778: a0 = i32 [0x200a8]\n  6783: jump @153 if a0 <=u 99\n      : @149 (gas: 51)\n  6788: i32 a0 = sp + 0xc0\n  6792: a1 = 0x4\n  6795: ecalli 2 // 'call_data_load'\n  6797: a0 = u64 [sp + 0xc0]\n  6801: u64 [sp + 0x38] = a0\n  6804: a0 = u64 [sp + 0xc8]\n  6808: u64 [sp + 0x30] = a0\n  6811: a0 = u64 [sp + 0xd0]\n  6815: u64 [sp + 0x28] = a0\n  6818: a0 = u64 [sp + 0xd8]\n  6822: u64 [sp + 0x20] = a0\n  6825: i32 a0 = sp + 0xc0\n  6829: a1 = 0x24\n  6832: ecalli 2 // 'call_data_load'\n  6834: a0 = u64 [sp + 0xc0]\n  6838: u64 [sp + 0x18] = a0\n  6841: a0 = u64 [sp + 0xc8]\n  6845: u64 [sp + 0x10] = a0\n  6848: a0 = u64 [sp + 0xd0]\n  6852: u64 [sp + 0x8] = a0\n  6855: s1 = u64 [sp + 0xd8]\n  6859: i32 a0 = sp + 0xc0\n  6863: a1 = 0x44\n  6866: ecalli 2 // 'call_data_load'\n  6868: a0 = u64 [sp + 0xc0]\n  6872: a1 = u64 [sp + 0xc8]\n  6876: a2 = u64 [sp + 0xd0]\n  6880: a3 = u64 [sp + 0xd8]\n  6884: u64 [sp + 0x58] = a3\n  6887: u64 [sp + 0x50] = a2\n  6890: u64 [sp + 0x48] = a1\n  6893: u64 [sp + 0x40] = a0\n  6896: u64 [sp + 0x78] = s1\n  6899: a0 = u64 [sp + 0x8]\n  6902: u64 [sp + 0x70] = a0\n  6905: a0 = u64 [sp + 0x10]\n  6908: u64 [sp + 0x68] = a0\n  6911: a0 = u64 [sp + 0x18]\n  6914: u64 [sp + 0x60] = a0\n  6917: a0 = u64 [sp + 0x20]\n  6920: u64 [sp + 0x98] = a0\n  6924: a0 = u64 [sp + 0x28]\n  6927: u64 [sp + 0x90] = a0\n  6931: a0 = u64 [sp + 0x30]\n  6934: u64 [sp + 0x88] = a0\n  6938: a0 = sp + 0x80\n  6942: a1 = sp + 0x60\n  6945: a2 = sp + 0x40\n  6948: a3 = u64 [sp + 0x38]\n  6951: u64 [sp + 0x80] = a3\n  6955: ra = 116, jump @519\n      : @150 [@dyn 58] (gas: 3)\n  6960: a0 = 0x40\n  6963: a1 = 0x20\n  6966: ra = 118, jump @0\n      : @151 [@dyn 59] (gas: 100)\n  6971: a1 = u8 [a0 + 0x11]\n  6974: a2 = u8 [a0 + 0x10]\n  6977: a3 = u8 [a0 + 0x12]\n  6980: a4 = u8 [a0 + 0x13]\n  6983: a1 = a1 << 0x8\n  6986: a1 = a1 | a2\n  6989: a3 = a3 << 0x10\n  6992: a4 = a4 << 0x18\n  6995: a3 = a3 | a4\n  6998: a1 = a1 | a3\n  7001: a2 = u8 [a0 + 0x15]\n  7004: a3 = u8 [a0 + 0x14]\n  7007: a4 = u8 [a0 + 0x16]\n  7010: a5 = u8 [a0 + 0x17]\n  7013: a2 = a2 << 0x8\n  7016: a2 = a2 | a3\n  7019: a4 = a4 << 0x10\n  7022: a5 = a5 << 0x18\n  7025: a4 = a4 | a5\n  7028: a2 = a2 | a4\n  7031: a2 = a2 << 0x20\n  7034: t0 = a2 | a1\n  7037: a2 = u8 [a0 + 0x1]\n  7040: a3 = u8 [a0]\n  7042: a4 = u8 [a0 + 0x2]\n  7045: a5 = u8 [a0 + 0x3]\n  7048: a2 = a2 << 0x8\n  7051: a2 = a2 | a3\n  7054: a4 = a4 << 0x10\n  7057: a5 = a5 << 0x18\n  7060: a4 = a4 | a5\n  7063: a2 = a2 | a4\n  7066: a3 = u8 [a0 + 0x5]\n  7069: a4 = u8 [a0 + 0x4]\n  7072: a5 = u8 [a0 + 0x6]\n  7075: s1 = u8 [a0 + 0x7]\n  7078: a3 = a3 << 0x8\n  7081: a3 = a3 | a4\n  7084: a5 = a5 << 0x10\n  7087: s1 = s1 << 0x18\n  7090: a5 = a5 | s1\n  7093: a3 = a3 | a5\n  7096: a3 = a3 << 0x20\n  7099: a2 = a2 | a3\n  7102: a3 = u8 [a0 + 0x19]\n  7105: a4 = u8 [a0 + 0x18]\n  7108: a5 = u8 [a0 + 0x1a]\n  7111: s1 = u8 [a0 + 0x1b]\n  7114: a3 = a3 << 0x8\n  7117: a3 = a3 | a4\n  7120: a5 = a5 << 0x10\n  7123: s1 = s1 << 0x18\n  7126: a5 = a5 | s1\n  7129: a3 = a3 | a5\n  7132: a4 = u8 [a0 + 0x1d]\n  7135: a5 = u8 [a0 + 0x1c]\n  7138: s1 = u8 [a0 + 0x1e]\n  7141: a1 = u8 [a0 + 0x1f]\n  7144: a4 = a4 << 0x8\n  7147: a4 = a4 | a5\n  7150: s1 = s1 << 0x10\n  7153: a1 = a1 << 0x18\n  7156: a1 = a1 | s1\n  7159: a1 = a1 | a4\n  7162: a1 = a1 << 0x20\n  7165: a3 = a3 | a1\n  7168: a1 = u8 [a0 + 0x9]\n  7171: a4 = u8 [a0 + 0x8]\n  7174: a5 = u8 [a0 + 0xa]\n  7177: s1 = u8 [a0 + 0xb]\n  7180: a1 = a1 << 0x8\n  7183: a1 = a1 | a4\n  7186: a5 = a5 << 0x10\n  7189: s1 = s1 << 0x18\n  7192: a5 = a5 | s1\n  7195: a1 = a1 | a5\n  7198: a4 = u8 [a0 + 0xd]\n  7201: a5 = u8 [a0 + 0xc]\n  7204: s1 = u8 [a0 + 0xe]\n  7207: a0 = u8 [a0 + 0xf]\n  7210: a4 = a4 << 0x8\n  7213: a4 = a4 | a5\n  7216: s1 = s1 << 0x10\n  7219: a0 = a0 << 0x18\n  7222: a0 = a0 | s1\n  7225: a0 = a0 | a4\n  7228: a0 = a0 << 0x20\n  7231: a0 = a0 | a1\n  7234: a1 = reverse a0\n  7236: a0 = reverse a3\n  7238: a2 = reverse a2\n  7240: a3 = reverse t0\n  7242: a2 = a2 | a3\n  7245: a3 = a0 | a1\n  7248: a3 = a3 | a2\n  7251: a3 = a3 >> 0x20\n  7254: a1 = a1 | a2\n  7257: a1 = a1 << 0x20\n  7260: a1 = a1 | a3\n  7263: jump @155 if a1 == 0\n      : @152 (gas: 1)\n  7266: trap\n      : @153 (gas: 3)\n  7267: a0 = 0\n  7269: a1 = 0\n  7271: ra = 120, jump @0\n      : @154 [@dyn 60] (gas: 7)\n  7276: i32 a1 = a0 + 0\n  7278: a0 = 0x1\n  7281: a2 = 0\n  7283: ecalli 12 // 'seal_return'\n  7285: i32 a0 = a0 + 0\n  7287: ra = 0x7a\n  7290: jump @0\n      : @155 (gas: 2)\n  7293: i32 a0 = a0 + 0\n  7295: ra = 122, jump @0\n      : @156 [@dyn 61] (gas: 6)\n  7300: i32 a1 = a0 + 0\n  7302: a0 = 0\n  7304: a2 = 0\n  7306: ra = 0x7c\n  7309: ecalli 12 // 'seal_return'\n  7311: fallthrough\n      : @157 [@dyn 62] (gas: 47)\n  7312: sp = sp + 0xffffffffffffff80\n  7315: u64 [sp + 0x78] = ra\n  7318: u64 [sp + 0x70] = s0\n  7321: u64 [sp + 0x68] = s1\n  7324: s0 = sp + 0x80\n  7328: sp = sp & 0xffffffffffffffe0\n  7331: ra = u64 [a1 + 0x10]\n  7334: a5 = u64 [a1 + 0x8]\n  7337: a3 = u64 [a2 + 0x8]\n  7340: t1 = u64 [a1]\n  7342: a4 = u64 [a2]\n  7344: u64 [sp + 0x28] = a4\n  7347: t2 = u64 [a2 + 0x10]\n  7350: t0 = a3 ^ a5\n  7353: s1 = a3 <u a5\n  7356: a4 = a4 <u t1\n  7359: u64 [sp + 0x20] = a4\n  7362: s1 = a4 if t0 == 0\n  7365: t0 = u64 [a1 + 0x18]\n  7368: a1 = u64 [a2 + 0x18]\n  7371: u64 [sp + 0x18] = a1\n  7374: a2 = t2 - ra\n  7377: a1 = a2 - s1\n  7380: u64 [sp + 0x30] = a1\n  7383: a1 = a2 <u s1\n  7386: a4 = t2 <u ra\n  7389: u64 [sp + 0x38] = t0\n  7392: a2 = u64 [sp + 0x18]\n  7395: a2 = a2 - t0\n  7398: a2 = a2 - a4\n  7401: a2 = a2 - a1\n  7404: a1 = a3 - a5\n  7407: a3 = u64 [sp + 0x20]\n  7410: a1 = a1 - a3\n  7413: a3 = u64 [sp + 0x28]\n  7416: a3 = a3 - t1\n  7419: a4 = a1 >u 0\n  7421: a3 = a3 <u 0x40\n  7424: a3 = a3 ^ 0x1\n  7427: a3 = a4 if a1 != 0\n  7430: s1 = a2 >s 0\n  7432: a1 = u64 [sp + 0x30]\n  7435: a4 = a1 >u 0\n  7437: a4 = s1 if a2 != 0\n  7440: a1 = a1 | a2\n  7443: a3 = a4 if a1 != 0\n  7446: jump @163 if a3 == 0\n      : @158 (gas: 12)\n  7450: s1 = a0\n  7452: a0 = t1 | ra\n  7455: u64 [sp + 0x30] = a5\n  7458: a1 = u64 [sp + 0x38]\n  7461: a1 = a1 | a5\n  7464: a0 = a0 | a1\n  7467: a0 = a0 >> 0x20\n  7470: u64 [sp + 0x28] = ra\n  7473: a1 = a1 | ra\n  7476: a1 = a1 << 0x20\n  7479: a0 = a0 | a1\n  7482: jump @162 if a0 != 0\n      : @159 (gas: 6)\n  7486: i32 a1 = t1 + 0\n  7488: i32 a0 = sp + 0x40\n  7491: u64 [sp + 0x18] = a1\n  7494: u64 [sp + 0x20] = t1\n  7497: ecalli 2 // 'call_data_load'\n  7499: fallthrough\n      : @160 (gas: 10)\n  7500: a0 = u64 [sp + 0x28]\n  7503: a1 = u64 [sp + 0x38]\n  7506: a0 = a0 | a1\n  7509: a1 = 0xffffffe0\n  7519: a2 = u64 [sp + 0x20]\n  7522: a1 = a2 <u a1\n  7525: a2 = u64 [sp + 0x30]\n  7528: a1 = 0 if a2 != 0\n  7530: a1 = 0 if a0 != 0\n  7532: jump @162 if a1 == 0\n      : @161 (gas: 34)\n  7535: a0 = u64 [sp + 0x58]\n  7538: u64 [sp + 0x20] = a0\n  7541: a0 = u64 [sp + 0x50]\n  7544: u64 [sp + 0x28] = a0\n  7547: a0 = u64 [sp + 0x48]\n  7550: u64 [sp + 0x30] = a0\n  7553: a0 = u64 [sp + 0x40]\n  7556: u64 [sp + 0x38] = a0\n  7559: a0 = u64 [sp + 0x18]\n  7562: i32 a1 = a0 + 0x20\n  7565: i32 a0 = sp + 0x40\n  7568: ecalli 2 // 'call_data_load'\n  7570: a0 = u64 [sp + 0x58]\n  7573: a1 = u64 [sp + 0x50]\n  7576: a2 = u64 [sp + 0x48]\n  7579: a3 = u64 [sp + 0x40]\n  7582: u64 [s1 + 0x38] = a0\n  7585: u64 [s1 + 0x30] = a1\n  7588: u64 [s1 + 0x28] = a2\n  7591: u64 [s1 + 0x20] = a3\n  7594: a0 = u64 [sp + 0x20]\n  7597: u64 [s1 + 0x18] = a0\n  7600: a0 = u64 [sp + 0x28]\n  7603: u64 [s1 + 0x10] = a0\n  7606: a0 = u64 [sp + 0x30]\n  7609: u64 [s1 + 0x8] = a0\n  7612: a0 = u64 [sp + 0x38]\n  7615: u64 [s1] = a0\n  7617: sp = s0 + 0xffffffffffffff80\n  7620: ra = u64 [sp + 0x78]\n  7623: s0 = u64 [sp + 0x70]\n  7626: s1 = u64 [sp + 0x68]\n  7629: sp = sp + 0x80\n  7633: ret\n      : @162 (gas: 1)\n  7635: trap\n      : @163 (gas: 3)\n  7636: a0 = 0\n  7638: a1 = 0\n  7640: ra = 126, jump @0\n      : @164 [@dyn 63] (gas: 6)\n  7645: i32 a1 = a0 + 0\n  7647: a0 = 0x1\n  7650: a2 = 0\n  7652: ra = 0x80\n  7656: ecalli 12 // 'seal_return'\n  7658: fallthrough\n      : @165 [@dyn 64] (gas: 13)\n  7659: sp = sp + 0xffffffffffffff40\n  7663: u64 [sp + 0xb8] = ra\n  7667: u64 [sp + 0xb0] = s0\n  7671: u64 [sp + 0xa8] = s1\n  7675: s0 = sp + 0xc0\n  7679: sp = sp & 0xffffffffffffffe0\n  7682: u64 [sp + 120] = 0\n  7685: u64 [sp + 112] = 0\n  7688: u64 [sp + 104] = 0\n  7691: u64 [sp + 96] = 0\n  7694: i32 a0 = sp + 0x60\n  7697: ecalli 15 // 'value_transferred'\n  7699: fallthrough\n      : @166 (gas: 8)\n  7700: a0 = u64 [sp + 0x70]\n  7703: a1 = u64 [sp + 0x78]\n  7706: a2 = u64 [sp + 0x68]\n  7709: a3 = u64 [sp + 0x60]\n  7712: a1 = a1 | a2\n  7715: a0 = a0 | a3\n  7718: a0 = a0 | a1\n  7721: jump @172 if a0 != 0\n      : @167 (gas: 2)\n  7725: a0 = i32 [0x200a8]\n  7730: jump @172 if a0 <=u 67\n      : @168 (gas: 56)\n  7735: i32 a0 = sp + 0x80\n  7739: a1 = 0x4\n  7742: ecalli 2 // 'call_data_load'\n  7744: a0 = u64 [sp + 0x80]\n  7748: u64 [sp + 0x18] = a0\n  7751: a0 = u64 [sp + 0x88]\n  7755: u64 [sp + 0x10] = a0\n  7758: a0 = u64 [sp + 0x90]\n  7762: u64 [sp + 0x8] = a0\n  7765: s1 = u64 [sp + 0x98]\n  7769: i32 a0 = sp + 0x80\n  7773: a1 = 0x24\n  7776: ecalli 2 // 'call_data_load'\n  7778: a0 = u64 [sp + 0x80]\n  7782: a1 = u64 [sp + 0x88]\n  7786: a2 = u64 [sp + 0x90]\n  7790: a3 = u64 [sp + 0x98]\n  7794: u64 [sp + 0x38] = a3\n  7797: u64 [sp + 0x30] = a2\n  7800: u64 [sp + 0x28] = a1\n  7803: u64 [sp + 0x20] = a0\n  7806: u64 [sp + 0x58] = s1\n  7809: a0 = u64 [sp + 0x8]\n  7812: u64 [sp + 0x50] = a0\n  7815: a0 = u64 [sp + 0x10]\n  7818: u64 [sp + 0x48] = a0\n  7821: a0 = sp + 0x40\n  7824: a1 = sp + 0x20\n  7827: a2 = u64 [sp + 0x18]\n  7830: u64 [sp + 0x40] = a2\n  7833: ra = 0x82\n  7837: sp = sp + 0xfffffffffffffde0\n  7841: u64 [sp + 0x218] = ra\n  7845: u64 [sp + 0x210] = s0\n  7849: u64 [sp + 0x208] = s1\n  7853: s0 = sp + 0x220\n  7857: sp = sp & 0xffffffffffffffe0\n  7860: a2 = u64 [a1]\n  7862: u64 [sp + 0x78] = a2\n  7865: a2 = u64 [a1 + 0x8]\n  7868: u64 [sp + 0x70] = a2\n  7871: a2 = u64 [a1 + 0x10]\n  7874: u64 [sp + 0x68] = a2\n  7877: a1 = u64 [a1 + 0x18]\n  7880: u64 [sp + 0x60] = a1\n  7883: a1 = u64 [a0]\n  7885: u64 [sp + 0x58] = a1\n  7888: a1 = u64 [a0 + 0x8]\n  7891: u64 [sp + 0x50] = a1\n  7894: a1 = u64 [a0 + 0x10]\n  7897: u64 [sp + 0x48] = a1\n  7900: s1 = u64 [a0 + 0x18]\n  7903: a1 = 0x20\n  7906: a0 = 0\n  7908: ra = 0x232\n  7912: jump @0\n      : @169 [@dyn 65] (gas: 3)\n  7915: a0 = 0x40\n  7918: a1 = 0x20\n  7921: ra = 132, jump @0\n      : @170 [@dyn 66] (gas: 100)\n  7927: a1 = u8 [a0 + 0x11]\n  7930: a2 = u8 [a0 + 0x10]\n  7933: a3 = u8 [a0 + 0x12]\n  7936: a4 = u8 [a0 + 0x13]\n  7939: a1 = a1 << 0x8\n  7942: a1 = a1 | a2\n  7945: a3 = a3 << 0x10\n  7948: a4 = a4 << 0x18\n  7951: a3 = a3 | a4\n  7954: a1 = a1 | a3\n  7957: a2 = u8 [a0 + 0x15]\n  7960: a3 = u8 [a0 + 0x14]\n  7963: a4 = u8 [a0 + 0x16]\n  7966: a5 = u8 [a0 + 0x17]\n  7969: a2 = a2 << 0x8\n  7972: a2 = a2 | a3\n  7975: a4 = a4 << 0x10\n  7978: a5 = a5 << 0x18\n  7981: a4 = a4 | a5\n  7984: a2 = a2 | a4\n  7987: a2 = a2 << 0x20\n  7990: t0 = a2 | a1\n  7993: a2 = u8 [a0 + 0x1]\n  7996: a3 = u8 [a0]\n  7998: a4 = u8 [a0 + 0x2]\n  8001: a5 = u8 [a0 + 0x3]\n  8004: a2 = a2 << 0x8\n  8007: a2 = a2 | a3\n  8010: a4 = a4 << 0x10\n  8013: a5 = a5 << 0x18\n  8016: a4 = a4 | a5\n  8019: a2 = a2 | a4\n  8022: a3 = u8 [a0 + 0x5]\n  8025: a4 = u8 [a0 + 0x4]\n  8028: a5 = u8 [a0 + 0x6]\n  8031: s1 = u8 [a0 + 0x7]\n  8034: a3 = a3 << 0x8\n  8037: a3 = a3 | a4\n  8040: a5 = a5 << 0x10\n  8043: s1 = s1 << 0x18\n  8046: a5 = a5 | s1\n  8049: a3 = a3 | a5\n  8052: a3 = a3 << 0x20\n  8055: a2 = a2 | a3\n  8058: a3 = u8 [a0 + 0x19]\n  8061: a4 = u8 [a0 + 0x18]\n  8064: a5 = u8 [a0 + 0x1a]\n  8067: s1 = u8 [a0 + 0x1b]\n  8070: a3 = a3 << 0x8\n  8073: a3 = a3 | a4\n  8076: a5 = a5 << 0x10\n  8079: s1 = s1 << 0x18\n  8082: a5 = a5 | s1\n  8085: a3 = a3 | a5\n  8088: a4 = u8 [a0 + 0x1d]\n  8091: a5 = u8 [a0 + 0x1c]\n  8094: s1 = u8 [a0 + 0x1e]\n  8097: a1 = u8 [a0 + 0x1f]\n  8100: a4 = a4 << 0x8\n  8103: a4 = a4 | a5\n  8106: s1 = s1 << 0x10\n  8109: a1 = a1 << 0x18\n  8112: a1 = a1 | s1\n  8115: a1 = a1 | a4\n  8118: a1 = a1 << 0x20\n  8121: a3 = a3 | a1\n  8124: a1 = u8 [a0 + 0x9]\n  8127: a4 = u8 [a0 + 0x8]\n  8130: a5 = u8 [a0 + 0xa]\n  8133: s1 = u8 [a0 + 0xb]\n  8136: a1 = a1 << 0x8\n  8139: a1 = a1 | a4\n  8142: a5 = a5 << 0x10\n  8145: s1 = s1 << 0x18\n  8148: a5 = a5 | s1\n  8151: a1 = a1 | a5\n  8154: a4 = u8 [a0 + 0xd]\n  8157: a5 = u8 [a0 + 0xc]\n  8160: s1 = u8 [a0 + 0xe]\n  8163: a0 = u8 [a0 + 0xf]\n  8166: a4 = a4 << 0x8\n  8169: a4 = a4 | a5\n  8172: s1 = s1 << 0x10\n  8175: a0 = a0 << 0x18\n  8178: a0 = a0 | s1\n  8181: a0 = a0 | a4\n  8184: a0 = a0 << 0x20\n  8187: a0 = a0 | a1\n  8190: a1 = reverse a0\n  8192: a0 = reverse a3\n  8194: a2 = reverse a2\n  8196: a3 = reverse t0\n  8198: a2 = a2 | a3\n  8201: a3 = a0 | a1\n  8204: a3 = a3 | a2\n  8207: a3 = a3 >> 0x20\n  8210: a1 = a1 | a2\n  8213: a1 = a1 << 0x20\n  8216: a1 = a1 | a3\n  8219: jump @174 if a1 == 0\n      : @171 (gas: 1)\n  8222: trap\n      : @172 (gas: 3)\n  8223: a0 = 0\n  8225: a1 = 0\n  8227: ra = 134, jump @0\n      : @173 [@dyn 67] (gas: 7)\n  8233: i32 a1 = a0 + 0\n  8235: a0 = 0x1\n  8238: a2 = 0\n  8240: ecalli 12 // 'seal_return'\n  8242: i32 a0 = a0 + 0\n  8244: ra = 0x88\n  8248: jump @0\n      : @174 (gas: 2)\n  8251: i32 a0 = a0 + 0\n  8253: ra = 136, jump @0\n      : @175 [@dyn 68] (gas: 6)\n  8259: i32 a1 = a0 + 0\n  8261: a0 = 0\n  8263: a2 = 0\n  8265: ra = 0x8a\n  8269: ecalli 12 // 'seal_return'\n  8271: fallthrough\n      : @176 [@dyn 69] (gas: 52)\n  8272: sp = sp + 0xffffffffffffff80\n  8275: u64 [sp + 0x78] = ra\n  8278: u64 [sp + 0x70] = s0\n  8281: u64 [sp + 0x68] = s1\n  8284: s0 = sp + 0x80\n  8288: sp = sp & 0xffffffffffffffe0\n  8291: t2 = u64 [a1 + 0x10]\n  8294: a5 = u64 [a1 + 0x8]\n  8297: t0 = u64 [a2 + 0x8]\n  8300: s1 = u64 [a1]\n  8302: u64 [sp + 0x10] = s1\n  8305: a4 = u64 [a2]\n  8307: u64 [sp + 0x18] = a4\n  8310: ra = u64 [a2 + 0x10]\n  8313: a3 = t0 ^ a5\n  8316: u64 [sp + 0x38] = a3\n  8319: a3 = t0 <u a5\n  8322: a4 = a4 <u s1\n  8325: t1 = u64 [sp + 0x38]\n  8328: a3 = a4 if t1 == 0\n  8331: t1 = a4\n  8333: a1 = u64 [a1 + 0x18]\n  8336: u64 [sp + 0x38] = a1\n  8339: a1 = u64 [a2 + 0x18]\n  8342: u64 [sp + 0x20] = a1\n  8345: a1 = ra - t2\n  8348: a2 = a1 - a3\n  8351: u64 [sp + 0x28] = a2\n  8354: a2 = a1 <u a3\n  8357: u64 [sp + 0x30] = t2\n  8360: a3 = ra <u t2\n  8363: a1 = u64 [sp + 0x38]\n  8366: a4 = u64 [sp + 0x20]\n  8369: a1 = a4 - a1\n  8372: a1 = a1 - a3\n  8375: t2 = a1 - a2\n  8378: s1 = t0 - a5\n  8381: a2 = s1 - t1\n  8384: t0 = u64 [sp + 0x10]\n  8387: a1 = u64 [sp + 0x18]\n  8390: a3 = a1 - t0\n  8393: a4 = a2 >u 0\n  8395: a3 = a3 <u 0x20\n  8398: a3 = a3 ^ 0x1\n  8401: a3 = a4 if a2 != 0\n  8404: a2 = t2 >s 0\n  8406: a1 = u64 [sp + 0x28]\n  8409: a4 = a1 >u 0\n  8411: a4 = a2 if t2 != 0\n  8414: a1 = a1 | t2\n  8417: a3 = a4 if a1 != 0\n  8420: jump @180 if a3 == 0\n      : @177 (gas: 11)\n  8423: s1 = a0\n  8425: a2 = u64 [sp + 0x30]\n  8428: a0 = t0 | a2\n  8431: a1 = u64 [sp + 0x38]\n  8434: a1 = a1 | a5\n  8437: a0 = a0 | a1\n  8440: a0 = a0 >> 0x20\n  8443: a1 = a1 | a2\n  8446: a1 = a1 << 0x20\n  8449: a0 = a0 | a1\n  8452: jump @179 if a0 != 0\n      : @178 (gas: 17)\n  8455: i32 a1 = t0 + 0\n  8457: i32 a0 = sp + 0x40\n  8460: ecalli 2 // 'call_data_load'\n  8462: a0 = u64 [sp + 0x58]\n  8465: a1 = u64 [sp + 0x50]\n  8468: a2 = u64 [sp + 0x48]\n  8471: a3 = u64 [sp + 0x40]\n  8474: u64 [s1 + 0x18] = a0\n  8477: u64 [s1 + 0x10] = a1\n  8480: u64 [s1 + 0x8] = a2\n  8483: u64 [s1] = a3\n  8485: sp = s0 + 0xffffffffffffff80\n  8488: ra = u64 [sp + 0x78]\n  8491: s0 = u64 [sp + 0x70]\n  8494: s1 = u64 [sp + 0x68]\n  8497: sp = sp + 0x80\n  8501: ret\n      : @179 (gas: 1)\n  8503: trap\n      : @180 (gas: 3)\n  8504: a0 = 0\n  8506: a1 = 0\n  8508: ra = 140, jump @0\n      : @181 [@dyn 70] (gas: 6)\n  8514: i32 a1 = a0 + 0\n  8516: a0 = 0x1\n  8519: a2 = 0\n  8521: ra = 0x8e\n  8525: ecalli 12 // 'seal_return'\n  8527: fallthrough\n      : @182 [@dyn 71] (gas: 7)\n  8528: sp = sp + 0xffffffffffffffa0\n  8531: u64 [sp + 0x58] = ra\n  8534: u64 [sp + 0x50] = s0\n  8537: s0 = sp + 0x60\n  8540: sp = sp & 0xffffffffffffffe0\n  8543: a0 = i32 [0x200a8]\n  8548: jump @187 if a0 <=u 35\n      : @183 (gas: 32)\n  8553: i32 a0 = sp + 0x20\n  8556: a1 = 0x4\n  8559: ecalli 2 // 'call_data_load'\n  8561: a1 = u64 [sp + 0x20]\n  8564: a0 = u64 [sp + 0x28]\n  8567: a2 = u64 [sp + 0x30]\n  8570: a3 = u64 [sp + 0x38]\n  8573: u64 [sp + 0x18] = a3\n  8576: u64 [sp + 0x10] = a2\n  8579: u64 [sp + 0x8] = a0\n  8582: a0 = sp\n  8584: u64 [sp] = a1\n  8586: ra = 0x90\n  8590: sp = sp + 0xfffffffffffffe60\n  8594: u64 [sp + 0x198] = ra\n  8598: u64 [sp + 0x190] = s0\n  8602: u64 [sp + 0x188] = s1\n  8606: s0 = sp + 0x1a0\n  8610: sp = sp & 0xffffffffffffffe0\n  8613: s1 = sp\n  8615: a1 = u64 [a0]\n  8617: u64 [s1 + 0x38] = a1\n  8620: a1 = u64 [a0 + 0x8]\n  8623: u64 [s1 + 0x30] = a1\n  8626: a1 = u64 [a0 + 0x10]\n  8629: u64 [s1 + 0x28] = a1\n  8632: a0 = u64 [a0 + 0x18]\n  8635: u64 [s1 + 0x20] = a0\n  8638: a1 = 0x20\n  8641: a0 = 0\n  8643: ra = 0x260\n  8647: jump @0\n      : @184 [@dyn 72] (gas: 3)\n  8650: a0 = 0x40\n  8653: a1 = 0x20\n  8656: ra = 146, jump @0\n      : @185 [@dyn 73] (gas: 100)\n  8662: a1 = u8 [a0 + 0x11]\n  8665: a2 = u8 [a0 + 0x10]\n  8668: a3 = u8 [a0 + 0x12]\n  8671: a4 = u8 [a0 + 0x13]\n  8674: a1 = a1 << 0x8\n  8677: a1 = a1 | a2\n  8680: a3 = a3 << 0x10\n  8683: a4 = a4 << 0x18\n  8686: a3 = a3 | a4\n  8689: a1 = a1 | a3\n  8692: a2 = u8 [a0 + 0x15]\n  8695: a3 = u8 [a0 + 0x14]\n  8698: a4 = u8 [a0 + 0x16]\n  8701: a5 = u8 [a0 + 0x17]\n  8704: a2 = a2 << 0x8\n  8707: a2 = a2 | a3\n  8710: a4 = a4 << 0x10\n  8713: a5 = a5 << 0x18\n  8716: a4 = a4 | a5\n  8719: a2 = a2 | a4\n  8722: a2 = a2 << 0x20\n  8725: t0 = a2 | a1\n  8728: a2 = u8 [a0 + 0x1]\n  8731: a3 = u8 [a0]\n  8733: a4 = u8 [a0 + 0x2]\n  8736: a5 = u8 [a0 + 0x3]\n  8739: a2 = a2 << 0x8\n  8742: a2 = a2 | a3\n  8745: a4 = a4 << 0x10\n  8748: a5 = a5 << 0x18\n  8751: a4 = a4 | a5\n  8754: a2 = a2 | a4\n  8757: a3 = u8 [a0 + 0x5]\n  8760: a4 = u8 [a0 + 0x4]\n  8763: a5 = u8 [a0 + 0x6]\n  8766: a1 = u8 [a0 + 0x7]\n  8769: a3 = a3 << 0x8\n  8772: a3 = a3 | a4\n  8775: a5 = a5 << 0x10\n  8778: a1 = a1 << 0x18\n  8781: a1 = a1 | a5\n  8784: a1 = a1 | a3\n  8787: a1 = a1 << 0x20\n  8790: t1 = a1 | a2\n  8793: a1 = u8 [a0 + 0x19]\n  8796: a3 = u8 [a0 + 0x18]\n  8799: a4 = u8 [a0 + 0x1a]\n  8802: a5 = u8 [a0 + 0x1b]\n  8805: a1 = a1 << 0x8\n  8808: a1 = a1 | a3\n  8811: a4 = a4 << 0x10\n  8814: a5 = a5 << 0x18\n  8817: a4 = a4 | a5\n  8820: a1 = a1 | a4\n  8823: a3 = u8 [a0 + 0x1d]\n  8826: a4 = u8 [a0 + 0x1c]\n  8829: a5 = u8 [a0 + 0x1e]\n  8832: a2 = u8 [a0 + 0x1f]\n  8835: a3 = a3 << 0x8\n  8838: a3 = a3 | a4\n  8841: a5 = a5 << 0x10\n  8844: a2 = a2 << 0x18\n  8847: a2 = a2 | a5\n  8850: a2 = a2 | a3\n  8853: a2 = a2 << 0x20\n  8856: a3 = a2 | a1\n  8859: a1 = u8 [a0 + 0x9]\n  8862: a2 = u8 [a0 + 0x8]\n  8865: a4 = u8 [a0 + 0xa]\n  8868: a5 = u8 [a0 + 0xb]\n  8871: a1 = a1 << 0x8\n  8874: a1 = a1 | a2\n  8877: a4 = a4 << 0x10\n  8880: a5 = a5 << 0x18\n  8883: a4 = a4 | a5\n  8886: a1 = a1 | a4\n  8889: a2 = u8 [a0 + 0xd]\n  8892: a4 = u8 [a0 + 0xc]\n  8895: a5 = u8 [a0 + 0xe]\n  8898: a0 = u8 [a0 + 0xf]\n  8901: a2 = a2 << 0x8\n  8904: a2 = a2 | a4\n  8907: a5 = a5 << 0x10\n  8910: a0 = a0 << 0x18\n  8913: a0 = a0 | a5\n  8916: a0 = a0 | a2\n  8919: a0 = a0 << 0x20\n  8922: a0 = a0 | a1\n  8925: a1 = reverse a0\n  8927: a0 = reverse a3\n  8929: a2 = reverse t1\n  8931: a3 = reverse t0\n  8933: a2 = a2 | a3\n  8936: a3 = a0 | a1\n  8939: a3 = a3 | a2\n  8942: a3 = a3 >> 0x20\n  8945: a1 = a1 | a2\n  8948: a1 = a1 << 0x20\n  8951: a1 = a1 | a3\n  8954: jump @189 if a1 == 0\n      : @186 (gas: 1)\n  8957: trap\n      : @187 (gas: 3)\n  8958: a0 = 0\n  8960: a1 = 0\n  8962: ra = 148, jump @0\n      : @188 [@dyn 74] (gas: 7)\n  8968: i32 a1 = a0 + 0\n  8970: a0 = 0x1\n  8973: a2 = 0\n  8975: ecalli 12 // 'seal_return'\n  8977: i32 a0 = a0 + 0\n  8979: ra = 0x96\n  8983: jump @0\n      : @189 (gas: 2)\n  8986: i32 a0 = a0 + 0\n  8988: ra = 150, jump @0\n      : @190 [@dyn 75] (gas: 6)\n  8994: i32 a1 = a0 + 0\n  8996: a0 = 0\n  8998: a2 = 0\n  9000: ra = 0x98\n  9004: ecalli 12 // 'seal_return'\n  9006: fallthrough\n      : @191 [@dyn 76] (gas: 9)\n  9007: a2 = u64 [a1 + 0x18]\n  9010: a3 = u64 [a1 + 0x10]\n  9013: a4 = u64 [a1 + 0x8]\n  9016: a1 = u64 [a1]\n  9018: u64 [a0 + 0x18] = a2\n  9021: u64 [a0 + 0x10] = a3\n  9024: u64 [a0 + 0x8] = a4\n  9027: u64 [a0] = a1\n  9029: ret\n      : @192 (gas: 8)\n  9031: a0 = u64 [sp + 0x30]\n  9034: a1 = u64 [sp + 0x38]\n  9037: a2 = u64 [sp + 0x28]\n  9040: a3 = u64 [sp + 0x20]\n  9043: a1 = a1 | a2\n  9046: a0 = a0 | a3\n  9049: a0 = a0 | a1\n  9052: jump @200 if a0 != 0\n      : @193 (gas: 2)\n  9056: a0 = i32 [0x200a8]\n  9061: jump @200 if a0 <=u 35\n      : @194 (gas: 13)\n  9066: i32 a0 = sp + 0x60\n  9069: a1 = 0x4\n  9072: ecalli 2 // 'call_data_load'\n  9074: a0 = u64 [sp + 0x60]\n  9077: u64 [sp + 0x18] = a0\n  9080: a0 = u64 [sp + 0x68]\n  9083: u64 [sp + 0x10] = a0\n  9086: a0 = u64 [sp + 0x70]\n  9089: u64 [sp + 0x8] = a0\n  9092: s1 = u64 [sp + 0x78]\n  9095: a1 = 0x20\n  9098: a0 = 0\n  9100: ra = 154, jump @0\n      : @195 [@dyn 77] (gas: 70)\n  9106: a1 = reverse s1\n  9108: a2 = u64 [sp + 0x8]\n  9111: a2 = reverse a2\n  9113: a3 = u64 [sp + 0x10]\n  9116: a3 = reverse a3\n  9118: a4 = u64 [sp + 0x18]\n  9121: a4 = reverse a4\n  9123: a5 = a4 >> 0x38\n  9126: u8 [a0 + 0x1f] = a5\n  9129: a5 = a4 >> 0x30\n  9132: u8 [a0 + 0x1e] = a5\n  9135: a5 = a4 >> 0x28\n  9138: u8 [a0 + 0x1d] = a5\n  9141: a5 = a4 >> 0x20\n  9144: u8 [a0 + 0x1c] = a5\n  9147: a5 = a4 >> 0x18\n  9150: u8 [a0 + 0x1b] = a5\n  9153: a5 = a4 >> 0x10\n  9156: u8 [a0 + 0x1a] = a5\n  9159: a5 = a4 >> 0x8\n  9162: u8 [a0 + 0x19] = a5\n  9165: u8 [a0 + 0x18] = a4\n  9168: a4 = a3 >> 0x38\n  9171: u8 [a0 + 0x17] = a4\n  9174: a4 = a3 >> 0x30\n  9177: u8 [a0 + 0x16] = a4\n  9180: a4 = a3 >> 0x28\n  9183: u8 [a0 + 0x15] = a4\n  9186: a4 = a3 >> 0x20\n  9189: u8 [a0 + 0x14] = a4\n  9192: a4 = a3 >> 0x18\n  9195: u8 [a0 + 0x13] = a4\n  9198: a4 = a3 >> 0x10\n  9201: u8 [a0 + 0x12] = a4\n  9204: a4 = a3 >> 0x8\n  9207: u8 [a0 + 0x11] = a4\n  9210: u8 [a0 + 0x10] = a3\n  9213: a3 = a2 >> 0x38\n  9216: u8 [a0 + 0xf] = a3\n  9219: a3 = a2 >> 0x30\n  9222: u8 [a0 + 0xe] = a3\n  9225: a3 = a2 >> 0x28\n  9228: u8 [a0 + 0xd] = a3\n  9231: a3 = a2 >> 0x20\n  9234: u8 [a0 + 0xc] = a3\n  9237: a3 = a2 >> 0x18\n  9240: u8 [a0 + 0xb] = a3\n  9243: a3 = a2 >> 0x10\n  9246: u8 [a0 + 0xa] = a3\n  9249: a3 = a2 >> 0x8\n  9252: u8 [a0 + 0x9] = a3\n  9255: u8 [a0 + 0x8] = a2\n  9258: a2 = a1 >> 0x38\n  9261: u8 [a0 + 0x7] = a2\n  9264: a2 = a1 >> 0x30\n  9267: u8 [a0 + 0x6] = a2\n  9270: a2 = a1 >> 0x28\n  9273: u8 [a0 + 0x5] = a2\n  9276: a2 = a1 >> 0x20\n  9279: u8 [a0 + 0x4] = a2\n  9282: a2 = a1 >> 0x18\n  9285: u8 [a0 + 0x3] = a2\n  9288: a2 = a1 >> 0x10\n  9291: u8 [a0 + 0x2] = a2\n  9294: a2 = a1 >> 0x8\n  9297: u8 [a0 + 0x1] = a2\n  9300: u8 [a0] = a1\n  9302: a0 = 0x20\n  9305: a1 = 0x20\n  9308: ra = 156, jump @0\n      : @196 [@dyn 78] (gas: 35)\n  9314: u8 [a0 + 31] = 0x1\n  9318: u8 [a0 + 30] = 0\n  9321: u8 [a0 + 29] = 0\n  9324: u8 [a0 + 28] = 0\n  9327: u8 [a0 + 27] = 0\n  9330: u8 [a0 + 26] = 0\n  9333: u8 [a0 + 25] = 0\n  9336: u8 [a0 + 24] = 0\n  9339: u8 [a0 + 23] = 0\n  9342: u8 [a0 + 22] = 0\n  9345: u8 [a0 + 21] = 0\n  9348: u8 [a0 + 20] = 0\n  9351: u8 [a0 + 19] = 0\n  9354: u8 [a0 + 18] = 0\n  9357: u8 [a0 + 17] = 0\n  9360: u8 [a0 + 16] = 0\n  9363: u8 [a0 + 15] = 0\n  9366: u8 [a0 + 14] = 0\n  9369: u8 [a0 + 13] = 0\n  9372: u8 [a0 + 12] = 0\n  9375: u8 [a0 + 11] = 0\n  9378: u8 [a0 + 10] = 0\n  9381: u8 [a0 + 9] = 0\n  9384: u8 [a0 + 8] = 0\n  9387: u8 [a0 + 7] = 0\n  9390: u8 [a0 + 6] = 0\n  9393: u8 [a0 + 5] = 0\n  9396: u8 [a0 + 4] = 0\n  9399: u8 [a0 + 3] = 0\n  9402: u8 [a0 + 2] = 0\n  9405: u8 [a0 + 1] = 0\n  9408: u8 [a0 + 0] = 0\n  9410: a1 = 0x40\n  9413: a0 = 0\n  9415: ra = 158, jump @0\n      : @197 [@dyn 79] (gas: 38)\n  9421: i32 a0 = a0 + 0\n  9423: i32 a2 = sp + 0x60\n  9426: a1 = 0x40\n  9429: ecalli 8 // 'hash_keccak_256'\n  9431: a0 = u64 [sp + 0x78]\n  9434: a1 = u64 [sp + 0x70]\n  9437: a2 = u64 [sp + 0x68]\n  9440: a3 = u64 [sp + 0x60]\n  9443: a0 = reverse a0\n  9445: a1 = reverse a1\n  9447: a2 = reverse a2\n  9449: a3 = reverse a3\n  9451: u64 [sp + 0x58] = a3\n  9454: u64 [sp + 0x50] = a2\n  9457: u64 [sp + 0x48] = a1\n  9460: u64 [sp + 0x40] = a0\n  9463: u64 [sp + 120] = 0\n  9466: u64 [sp + 112] = 0\n  9469: u64 [sp + 104] = 0\n  9472: u64 [sp + 96] = 0\n  9475: u32 [sp + 128] = 0x20\n  9480: i32 a1 = sp + 0x40\n  9483: i32 a3 = sp + 0x60\n  9486: i32 a4 = sp + 0x80\n  9490: a2 = 0xffffffffffffffff\n  9493: a0 = 0\n  9495: ecalli 7 // 'get_storage'\n  9497: a0 = u64 [sp + 0x78]\n  9500: u64 [sp] = a0\n  9502: a0 = u64 [sp + 0x70]\n  9505: u64 [sp + 0x8] = a0\n  9508: a0 = u64 [sp + 0x68]\n  9511: u64 [sp + 0x10] = a0\n  9514: a0 = u64 [sp + 0x60]\n  9517: u64 [sp + 0x18] = a0\n  9520: a0 = 0x40\n  9523: a1 = 0x20\n  9526: ra = 160, jump @0\n      : @198 [@dyn 80] (gas: 100)\n  9532: a1 = u8 [a0 + 0x11]\n  9535: a2 = u8 [a0 + 0x10]\n  9538: a3 = u8 [a0 + 0x12]\n  9541: a4 = u8 [a0 + 0x13]\n  9544: a1 = a1 << 0x8\n  9547: a1 = a1 | a2\n  9550: a3 = a3 << 0x10\n  9553: a4 = a4 << 0x18\n  9556: a3 = a3 | a4\n  9559: a1 = a1 | a3\n  9562: a2 = u8 [a0 + 0x15]\n  9565: a3 = u8 [a0 + 0x14]\n  9568: a4 = u8 [a0 + 0x16]\n  9571: a5 = u8 [a0 + 0x17]\n  9574: a2 = a2 << 0x8\n  9577: a2 = a2 | a3\n  9580: a4 = a4 << 0x10\n  9583: a5 = a5 << 0x18\n  9586: a4 = a4 | a5\n  9589: a2 = a2 | a4\n  9592: a2 = a2 << 0x20\n  9595: t0 = a2 | a1\n  9598: a2 = u8 [a0 + 0x1]\n  9601: a3 = u8 [a0]\n  9603: a4 = u8 [a0 + 0x2]\n  9606: a5 = u8 [a0 + 0x3]\n  9609: a2 = a2 << 0x8\n  9612: a2 = a2 | a3\n  9615: a4 = a4 << 0x10\n  9618: a5 = a5 << 0x18\n  9621: a4 = a4 | a5\n  9624: a2 = a2 | a4\n  9627: a3 = u8 [a0 + 0x5]\n  9630: a4 = u8 [a0 + 0x4]\n  9633: a5 = u8 [a0 + 0x6]\n  9636: s1 = u8 [a0 + 0x7]\n  9639: a3 = a3 << 0x8\n  9642: a3 = a3 | a4\n  9645: a5 = a5 << 0x10\n  9648: s1 = s1 << 0x18\n  9651: a5 = a5 | s1\n  9654: a3 = a3 | a5\n  9657: a3 = a3 << 0x20\n  9660: a2 = a2 | a3\n  9663: a3 = u8 [a0 + 0x19]\n  9666: a4 = u8 [a0 + 0x18]\n  9669: a5 = u8 [a0 + 0x1a]\n  9672: s1 = u8 [a0 + 0x1b]\n  9675: a3 = a3 << 0x8\n  9678: a3 = a3 | a4\n  9681: a5 = a5 << 0x10\n  9684: s1 = s1 << 0x18\n  9687: a5 = a5 | s1\n  9690: a3 = a3 | a5\n  9693: a4 = u8 [a0 + 0x1d]\n  9696: a5 = u8 [a0 + 0x1c]\n  9699: s1 = u8 [a0 + 0x1e]\n  9702: a1 = u8 [a0 + 0x1f]\n  9705: a4 = a4 << 0x8\n  9708: a4 = a4 | a5\n  9711: s1 = s1 << 0x10\n  9714: a1 = a1 << 0x18\n  9717: a1 = a1 | s1\n  9720: a1 = a1 | a4\n  9723: a1 = a1 << 0x20\n  9726: a3 = a3 | a1\n  9729: a1 = u8 [a0 + 0x9]\n  9732: a4 = u8 [a0 + 0x8]\n  9735: a5 = u8 [a0 + 0xa]\n  9738: s1 = u8 [a0 + 0xb]\n  9741: a1 = a1 << 0x8\n  9744: a1 = a1 | a4\n  9747: a5 = a5 << 0x10\n  9750: s1 = s1 << 0x18\n  9753: a5 = a5 | s1\n  9756: a1 = a1 | a5\n  9759: a4 = u8 [a0 + 0xd]\n  9762: a5 = u8 [a0 + 0xc]\n  9765: s1 = u8 [a0 + 0xe]\n  9768: a0 = u8 [a0 + 0xf]\n  9771: a4 = a4 << 0x8\n  9774: a4 = a4 | a5\n  9777: s1 = s1 << 0x10\n  9780: a0 = a0 << 0x18\n  9783: a0 = a0 | s1\n  9786: a0 = a0 | a4\n  9789: a0 = a0 << 0x20\n  9792: a0 = a0 | a1\n  9795: a1 = reverse a0\n  9797: a0 = reverse a3\n  9799: a2 = reverse a2\n  9801: a3 = reverse t0\n  9803: a2 = a2 | a3\n  9806: a3 = a0 | a1\n  9809: a3 = a3 | a2\n  9812: a3 = a3 >> 0x20\n  9815: a1 = a1 | a2\n  9818: a1 = a1 << 0x20\n  9821: a1 = a1 | a3\n  9824: jump @202 if a1 == 0\n      : @199 (gas: 1)\n  9827: trap\n      : @200 (gas: 3)\n  9828: a0 = 0\n  9830: a1 = 0\n  9832: ra = 162, jump @0\n      : @201 [@dyn 81] (gas: 5)\n  9838: i32 a1 = a0 + 0\n  9840: a0 = 0x1\n  9843: a2 = 0\n  9845: ecalli 12 // 'seal_return'\n  9847: fallthrough\n      : @202 (gas: 4)\n  9848: i32 s1 = a0 + 0\n  9850: a1 = 0x20\n  9853: a0 = s1\n  9855: ra = 164, jump @0\n      : @203 [@dyn 82] (gas: 71)\n  9861: a1 = u64 [sp]\n  9863: a1 = reverse a1\n  9865: a2 = u64 [sp + 0x8]\n  9868: a2 = reverse a2\n  9870: a3 = u64 [sp + 0x10]\n  9873: a3 = reverse a3\n  9875: a4 = u64 [sp + 0x18]\n  9878: a4 = reverse a4\n  9880: a5 = a4 >> 0x38\n  9883: u8 [a0 + 0x1f] = a5\n  9886: a5 = a4 >> 0x30\n  9889: u8 [a0 + 0x1e] = a5\n  9892: a5 = a4 >> 0x28\n  9895: u8 [a0 + 0x1d] = a5\n  9898: a5 = a4 >> 0x20\n  9901: u8 [a0 + 0x1c] = a5\n  9904: a5 = a4 >> 0x18\n  9907: u8 [a0 + 0x1b] = a5\n  9910: a5 = a4 >> 0x10\n  9913: u8 [a0 + 0x1a] = a5\n  9916: a5 = a4 >> 0x8\n  9919: u8 [a0 + 0x19] = a5\n  9922: u8 [a0 + 0x18] = a4\n  9925: u8 [a0 + 0x10] = a3\n  9928: a4 = a3 >> 0x38\n  9931: u8 [a0 + 0x17] = a4\n  9934: a4 = a3 >> 0x30\n  9937: u8 [a0 + 0x16] = a4\n  9940: a4 = a3 >> 0x28\n  9943: u8 [a0 + 0x15] = a4\n  9946: a4 = a3 >> 0x20\n  9949: u8 [a0 + 0x14] = a4\n  9952: a4 = a3 >> 0x18\n  9955: u8 [a0 + 0x13] = a4\n  9958: a4 = a3 >> 0x10\n  9961: u8 [a0 + 0x12] = a4\n  9964: a3 = a3 >> 0x8\n  9967: u8 [a0 + 0x11] = a3\n  9970: u8 [a0 + 0x8] = a2\n  9973: a3 = a2 >> 0x38\n  9976: u8 [a0 + 0xf] = a3\n  9979: a3 = a2 >> 0x30\n  9982: u8 [a0 + 0xe] = a3\n  9985: a3 = a2 >> 0x28\n  9988: u8 [a0 + 0xd] = a3\n  9991: a3 = a2 >> 0x20\n  9994: u8 [a0 + 0xc] = a3\n  9997: a3 = a2 >> 0x18\n 10000: u8 [a0 + 0xb] = a3\n 10003: a3 = a2 >> 0x10\n 10006: u8 [a0 + 0xa] = a3\n 10009: a2 = a2 >> 0x8\n 10012: u8 [a0 + 0x9] = a2\n 10015: u8 [a0] = a1\n 10017: a2 = a1 >> 0x38\n 10020: u8 [a0 + 0x7] = a2\n 10023: a2 = a1 >> 0x30\n 10026: u8 [a0 + 0x6] = a2\n 10029: a2 = a1 >> 0x28\n 10032: u8 [a0 + 0x5] = a2\n 10035: a2 = a1 >> 0x20\n 10038: u8 [a0 + 0x4] = a2\n 10041: a2 = a1 >> 0x18\n 10044: u8 [a0 + 0x3] = a2\n 10047: a2 = a1 >> 0x10\n 10050: u8 [a0 + 0x2] = a2\n 10053: a1 = a1 >> 0x8\n 10056: u8 [a0 + 0x1] = a1\n 10059: a1 = 0x20\n 10062: a0 = s1\n 10064: ra = 166, jump @0\n      : @204 [@dyn 83] (gas: 6)\n 10070: i32 a1 = a0 + 0\n 10072: a2 = 0x20\n 10075: a0 = 0\n 10077: ra = 0xa8\n 10081: ecalli 12 // 'seal_return'\n 10083: fallthrough\n      : @205 [@dyn 84] (gas: 5)\n 10084: sp = sp + 0xfffffffffffffff8\n 10087: u64 [sp] = ra\n 10089: a0 = 0\n 10091: a1 = 0\n 10093: ra = 170, jump @0\n      : @206 [@dyn 85] (gas: 6)\n 10099: i32 a1 = a0 + 0\n 10101: a0 = 0x1\n 10104: a2 = 0\n 10106: ra = 0xac\n 10110: ecalli 12 // 'seal_return'\n 10112: fallthrough\n      : @207 [@dyn 86] (gas: 37)\n 10113: sp = sp + 0xffffffffffffff60\n 10117: u64 [sp + 0x98] = ra\n 10121: u64 [sp + 0x90] = s0\n 10125: u64 [sp + 0x88] = s1\n 10129: s0 = sp + 0xa0\n 10133: sp = sp & 0xffffffffffffffe0\n 10136: a4 = u64 [a1]\n 10138: s1 = u64 [a2 + 0x8]\n 10141: ra = u64 [a1 + 0x8]\n 10144: t1 = u64 [a2]\n 10146: a3 = a4 + 0x1f\n 10149: u64 [sp + 0x58] = a4\n 10152: t0 = a3 <u a4\n 10155: a5 = ra + t0\n 10158: u64 [sp + 0x40] = t1\n 10161: t1 = a3 <u t1\n 10164: a3 = a5 ^ s1\n 10167: u64 [sp + 0x48] = s1\n 10170: a4 = a5 <u s1\n 10173: a4 = t1 if a3 == 0\n 10176: t2 = u64 [a1 + 0x10]\n 10179: a3 = a5 <u ra\n 10182: a3 = t0 if t0 == 0\n 10185: t0 = u64 [a2 + 0x18]\n 10188: t1 = u64 [a1 + 0x18]\n 10191: s1 = u64 [a2 + 0x10]\n 10194: a3 = a3 + t2\n 10197: a1 = a3 <u t2\n 10200: a1 = a1 + t1\n 10203: a2 = a1 ^ t0\n 10206: a1 = a1 <s t0\n 10209: a5 = a3 <u s1\n 10212: a1 = a5 if a2 == 0\n 10215: a3 = a3 ^ s1\n 10218: a2 = a2 | a3\n 10221: a4 = a1 if a2 != 0\n 10224: jump @214 if a4 == 0\n      : @208 (gas: 14)\n 10228: u64 [sp + 0x28] = t0\n 10231: u64 [sp + 0x30] = s1\n 10234: u64 [sp + 0x38] = a0\n 10237: a0 = u64 [sp + 0x58]\n 10240: a0 = a0 | t2\n 10243: u64 [sp + 0x18] = t1\n 10246: a1 = ra | t1\n 10249: a0 = a0 | a1\n 10252: a0 = a0 >> 0x20\n 10255: u64 [sp + 0x20] = t2\n 10258: a1 = a1 | t2\n 10261: a1 = a1 << 0x20\n 10264: a0 = a0 | a1\n 10267: jump @213 if a0 != 0\n      : @209 (gas: 5)\n 10271: s1 = ra\n 10273: a1 = i32 [sp + 0x58]\n 10276: i32 a0 = sp + 0x60\n 10279: ecalli 2 // 'call_data_load'\n 10281: fallthrough\n      : @210 (gas: 8)\n 10282: a0 = u64 [sp + 0x78]\n 10285: a1 = u64 [sp + 0x70]\n 10288: t1 = u64 [sp + 0x68]\n 10291: u64 [sp + 0x50] = a0\n 10294: a0 = a0 | a1\n 10297: a3 = t1 <u 0x1\n 10300: a3 = 0 if a0 != 0\n 10302: jump @214 if a3 == 0\n      : @211 (gas: 46)\n 10306: a2 = u64 [sp + 0x60]\n 10309: a0 = u64 [sp + 0x58]\n 10312: a4 = a0 + 0x20\n 10315: a0 = a4 <u a0\n 10318: ra = s1 + a0\n 10321: u64 [sp + 0x10] = a4\n 10324: a4 = a4 + a2\n 10327: u64 [sp + 0x58] = a2\n 10330: t0 = a4 <u a2\n 10333: a5 = t1 + ra\n 10336: a5 = a5 + t0\n 10339: a2 = a5 ^ t1\n 10342: a3 = a5 <u t1\n 10345: a3 = t0 if a2 == 0\n 10348: a2 = ra <u s1\n 10351: a2 = a0 if a0 == 0\n 10354: a0 = u64 [sp + 0x20]\n 10357: t2 = a0 + a2\n 10360: s1 = t2 <u a0\n 10363: a0 = u64 [sp + 0x18]\n 10366: a0 = a0 + s1\n 10369: s1 = u64 [sp + 0x48]\n 10372: a2 = a5 ^ s1\n 10375: a5 = s1 <u a5\n 10378: s1 = u64 [sp + 0x40]\n 10381: a4 = s1 <u a4\n 10384: a4 = a5 if a2 != 0\n 10387: a2 = a1 + t2\n 10390: a5 = a2 <u a1\n 10393: s1 = u64 [sp + 0x50]\n 10396: u64 [sp + 0x48] = a0\n 10399: s1 = s1 + a0\n 10402: a5 = a5 + s1\n 10405: a3 = a3 + a2\n 10408: a2 = a3 <u a2\n 10411: a2 = a2 + a5\n 10414: s1 = u64 [sp + 0x28]\n 10417: a5 = a2 ^ s1\n 10420: t0 = s1 <u a2\n 10423: a2 = u64 [sp + 0x30]\n 10426: s1 = a2 <u a3\n 10429: s1 = t0 if a5 != 0\n 10432: a2 = a2 ^ a3\n 10435: a2 = a2 | a5\n 10438: a4 = s1 if a2 != 0\n 10441: jump @214 if a4 != 0\n      : @212 (gas: 19)\n 10444: a2 = u64 [sp + 0x38]\n 10447: a0 = u64 [sp + 0x58]\n 10450: u64 [a2 + 0x20] = a0\n 10453: a0 = u64 [sp + 0x10]\n 10456: u64 [a2] = a0\n 10458: u64 [a2 + 0x28] = t1\n 10461: u64 [a2 + 0x8] = ra\n 10464: u64 [a2 + 0x30] = a1\n 10467: u64 [a2 + 0x10] = t2\n 10470: a0 = u64 [sp + 0x50]\n 10473: u64 [a2 + 0x38] = a0\n 10476: a0 = u64 [sp + 0x48]\n 10479: u64 [a2 + 0x18] = a0\n 10482: sp = s0 + 0xffffffffffffff60\n 10486: ra = u64 [sp + 0x98]\n 10490: s0 = u64 [sp + 0x90]\n 10494: s1 = u64 [sp + 0x88]\n 10498: sp = sp + 0xa0\n 10502: ret\n      : @213 (gas: 1)\n 10504: trap\n      : @214 (gas: 3)\n 10505: a0 = 0\n 10507: a1 = 0\n 10509: ra = 174, jump @0\n      : @215 [@dyn 87] (gas: 6)\n 10515: i32 a1 = a0 + 0\n 10517: a0 = 0x1\n 10520: a2 = 0\n 10522: ra = 0xb0\n 10526: ecalli 12 // 'seal_return'\n 10528: fallthrough\n      : @216 [@dyn 88] (gas: 43)\n 10529: sp = sp + 0xfffffffffffffea0\n 10533: u64 [sp + 0x158] = ra\n 10537: u64 [sp + 0x150] = s0\n 10541: u64 [sp + 0x148] = s1\n 10545: s0 = sp + 0x160\n 10549: sp = sp & 0xffffffffffffffe0\n 10552: t2 = u64 [a2 + 0x8]\n 10555: ra = u64 [a1 + 0x8]\n 10558: s1 = u64 [a2]\n 10560: a5 = u64 [a1]\n 10562: t0 = u64 [a2 + 0x10]\n 10565: a4 = t2 ^ ra\n 10568: a3 = t2 <u ra\n 10571: t1 = s1 <u a5\n 10574: a3 = t1 if a4 == 0\n 10577: a4 = t2 - ra\n 10580: a4 = a4 - t1\n 10583: u64 [sp + 0x48] = s1\n 10586: u64 [sp + 0x78] = a5\n 10589: a5 = s1 - a5\n 10592: a5 = a5 <u 0x40\n 10595: a5 = a5 ^ 0x1\n 10598: t1 = u64 [a1 + 0x10]\n 10601: s1 = a4 >u 0\n 10603: a5 = s1 if a4 != 0\n 10606: a4 = u64 [a2 + 0x18]\n 10609: s1 = u64 [a1 + 0x18]\n 10612: a1 = t0 - t1\n 10615: a2 = a1 - a3\n 10618: a1 = a1 <u a3\n 10621: u64 [sp + 0x70] = t1\n 10624: a3 = t0 <u t1\n 10627: u64 [sp + 0x40] = a4\n 10630: u64 [sp + 0x68] = s1\n 10633: a4 = a4 - s1\n 10636: a4 = a4 - a3\n 10639: a4 = a4 - a1\n 10642: a1 = a4 >s 0\n 10644: a3 = a2 >u 0\n 10646: a3 = a1 if a4 != 0\n 10649: a2 = a2 | a4\n 10652: a5 = a3 if a2 != 0\n 10655: jump @225 if a5 == 0\n      : @217 (gas: 15)\n 10659: s1 = a0\n 10661: u64 [sp + 0x50] = t0\n 10664: u64 [sp + 0x58] = t2\n 10667: a2 = u64 [sp + 0x70]\n 10670: t2 = u64 [sp + 0x78]\n 10673: a0 = t2 | a2\n 10676: a1 = u64 [sp + 0x68]\n 10679: a1 = ra | a1\n 10682: a0 = a0 | a1\n 10685: a0 = a0 >> 0x20\n 10688: a1 = a1 | a2\n 10691: a1 = a1 << 0x20\n 10694: a0 = a0 | a1\n 10697: u64 [sp + 0x60] = ra\n 10700: jump @224 if a0 != 0\n      : @218 (gas: 5)\n 10704: i32 a1 = t2 + 0\n 10706: i32 a0 = sp + 0x120\n 10710: u64 [sp + 0x38] = a1\n 10713: ecalli 2 // 'call_data_load'\n 10715: fallthrough\n      : @219 (gas: 10)\n 10716: a0 = u64 [sp + 0x70]\n 10719: a1 = u64 [sp + 0x68]\n 10722: a0 = a0 | a1\n 10725: a1 = 0xffffffe0\n 10735: a2 = u64 [sp + 0x78]\n 10738: a1 = a2 <u a1\n 10741: a2 = u64 [sp + 0x60]\n 10744: a1 = 0 if a2 != 0\n 10746: a1 = 0 if a0 != 0\n 10748: jump @224 if a1 == 0\n      : @220 (gas: 13)\n 10752: a0 = u64 [sp + 0x138]\n 10756: u64 [sp + 0x28] = a0\n 10759: a0 = u64 [sp + 0x130]\n 10763: u64 [sp + 0x18] = a0\n 10766: a0 = u64 [sp + 0x128]\n 10770: u64 [sp + 0x30] = a0\n 10773: a0 = u64 [sp + 0x120]\n 10777: u64 [sp + 0x20] = a0\n 10780: a0 = u64 [sp + 0x38]\n 10783: i32 a1 = a0 + 0x20\n 10786: i32 a0 = sp + 0x100\n 10790: ecalli 2 // 'call_data_load'\n 10792: fallthrough\n      : @221 (gas: 7)\n 10793: t0 = u64 [sp + 0x118]\n 10797: a1 = u64 [sp + 0x110]\n 10801: a2 = u64 [sp + 0x108]\n 10805: a3 = a1 | t0\n 10808: a4 = a2 <u 0x1\n 10811: a4 = 0 if a3 != 0\n 10813: jump @225 if a4 == 0\n      : @222 (gas: 35)\n 10817: a3 = u64 [sp + 0x100]\n 10821: a4 = u64 [sp + 0x78]\n 10824: a4 = a4 + a3\n 10827: a3 = a4 <u a3\n 10830: a5 = u64 [sp + 0x60]\n 10833: a5 = a5 + a2\n 10836: a5 = a5 + a3\n 10839: a0 = a5 ^ a2\n 10842: a2 = a5 <u a2\n 10845: a2 = a3 if a0 == 0\n 10848: a0 = u64 [sp + 0x70]\n 10851: a0 = a0 + a1\n 10854: a2 = a2 + a0\n 10857: a3 = a2 <u a0\n 10860: a0 = a0 <u a1\n 10863: a1 = u64 [sp + 0x68]\n 10866: t0 = t0 + a1\n 10869: a0 = a0 + t0\n 10872: a3 = a3 + a0\n 10875: a0 = u64 [sp + 0x48]\n 10878: u64 [sp + 0x80] = a0\n 10882: a0 = u64 [sp + 0x58]\n 10885: u64 [sp + 0x88] = a0\n 10889: u64 [sp + 0xa0] = a4\n 10893: a0 = u64 [sp + 0x50]\n 10896: u64 [sp + 0x90] = a0\n 10900: a0 = u64 [sp + 0x40]\n 10903: u64 [sp + 0x98] = a0\n 10907: u64 [sp + 0xa8] = a5\n 10911: u64 [sp + 0xb0] = a2\n 10915: a0 = sp + 0xc0\n 10919: a1 = sp + 0xa0\n 10923: a2 = sp + 0x80\n 10927: u64 [sp + 0xb8] = a3\n 10931: ra = 178, jump @207\n      : @223 [@dyn 89] (gas: 30)\n 10937: t0 = u64 [sp + 0xc8]\n 10941: t1 = u64 [sp + 0xc0]\n 10945: a2 = u64 [sp + 0xd8]\n 10949: a3 = u64 [sp + 0xd0]\n 10953: a4 = u64 [sp + 0xf0]\n 10957: a5 = u64 [sp + 0xf8]\n 10961: a0 = u64 [sp + 0xe0]\n 10965: a1 = u64 [sp + 0xe8]\n 10969: u64 [s1 + 0x50] = a4\n 10972: u64 [s1 + 0x58] = a5\n 10975: u64 [s1 + 0x40] = a0\n 10978: u64 [s1 + 0x48] = a1\n 10981: u64 [s1 + 0x30] = a3\n 10984: u64 [s1 + 0x38] = a2\n 10987: u64 [s1 + 0x20] = t1\n 10990: u64 [s1 + 0x28] = t0\n 10993: a0 = u64 [sp + 0x18]\n 10996: u64 [s1 + 0x10] = a0\n 10999: a0 = u64 [sp + 0x28]\n 11002: u64 [s1 + 0x18] = a0\n 11005: a0 = u64 [sp + 0x20]\n 11008: u64 [s1] = a0\n 11010: a0 = u64 [sp + 0x30]\n 11013: u64 [s1 + 0x8] = a0\n 11016: sp = s0 + 0xfffffffffffffea0\n 11020: ra = u64 [sp + 0x158]\n 11024: s0 = u64 [sp + 0x150]\n 11028: s1 = u64 [sp + 0x148]\n 11032: sp = sp + 0x160\n 11036: ret\n      : @224 (gas: 1)\n 11038: trap\n      : @225 (gas: 3)\n 11039: a0 = 0\n 11041: a1 = 0\n 11043: ra = 180, jump @0\n      : @226 [@dyn 90] (gas: 6)\n 11049: i32 a1 = a0 + 0\n 11051: a0 = 0x1\n 11054: a2 = 0\n 11056: ra = 0xb6\n 11060: ecalli 12 // 'seal_return'\n 11062: fallthrough\n      : @227 [@dyn 91] (gas: 19)\n 11063: sp = sp + 0xfffffffffffffea0\n 11067: u64 [sp + 0x158] = ra\n 11071: u64 [sp + 0x150] = s0\n 11075: u64 [sp + 0x148] = s1\n 11079: s0 = sp + 0x160\n 11083: sp = sp & 0xfffffffffffffff0\n 11086: a0 = u32 [0x200a8]\n 11091: u64 [sp + 184] = 0\n 11095: u64 [sp + 176] = 0\n 11099: u64 [sp + 168] = 0\n 11103: u64 [sp + 0xa0] = a0\n 11107: u64 [sp + 216] = 0\n 11111: u64 [sp + 208] = 0\n 11115: u64 [sp + 192] = 0x4\n 11120: a0 = sp + 0xe0\n 11124: a1 = sp + 0xc0\n 11128: a2 = sp + 0xa0\n 11132: u64 [sp + 200] = 0\n 11136: ra = 184, jump @216\n      : @228 [@dyn 92] (gas: 31)\n 11142: a0 = u64 [sp + 0xe0]\n 11146: u64 [sp + 0x18] = a0\n 11149: t1 = u64 [sp + 0xe8]\n 11153: t2 = u64 [sp + 0xf0]\n 11157: ra = u64 [sp + 0xf8]\n 11161: t0 = u64 [sp + 0x100]\n 11165: a5 = u64 [sp + 0x108]\n 11169: s1 = u64 [sp + 0x110]\n 11173: a4 = u64 [sp + 0x118]\n 11177: a3 = u64 [sp + 0x120]\n 11181: a1 = u64 [sp + 0x128]\n 11185: a2 = u64 [sp + 0x130]\n 11189: a0 = u64 [sp + 0x138]\n 11193: u64 [sp + 0x38] = a0\n 11196: u64 [sp + 0x30] = a2\n 11199: u64 [sp + 0x28] = a1\n 11202: u64 [sp + 0x20] = a3\n 11205: u64 [sp + 0x58] = a4\n 11208: u64 [sp + 0x50] = s1\n 11211: u64 [sp + 0x48] = a5\n 11214: u64 [sp + 0x40] = t0\n 11217: u64 [sp + 0x78] = ra\n 11220: u64 [sp + 0x70] = t2\n 11223: u64 [sp + 0x68] = t1\n 11226: a0 = sp + 0x80\n 11230: a1 = sp + 0x60\n 11233: a2 = sp + 0x40\n 11236: a3 = sp + 0x20\n 11239: a4 = u64 [sp + 0x18]\n 11242: u64 [sp + 0x60] = a4\n 11245: ra = 186, jump @812\n      : @229 [@dyn 93] (gas: 11)\n 11252: a0 = u64 [sp + 0x98]\n 11256: u64 [sp] = a0\n 11258: a0 = u64 [sp + 0x90]\n 11262: u64 [sp + 0x8] = a0\n 11265: a0 = u64 [sp + 0x88]\n 11269: u64 [sp + 0x10] = a0\n 11272: a0 = u64 [sp + 0x80]\n 11276: u64 [sp + 0x18] = a0\n 11279: a0 = 0x40\n 11282: a1 = 0x20\n 11285: ra = 188, jump @0\n      : @230 [@dyn 94] (gas: 100)\n 11291: a1 = u8 [a0 + 0x11]\n 11294: a2 = u8 [a0 + 0x10]\n 11297: a3 = u8 [a0 + 0x12]\n 11300: a4 = u8 [a0 + 0x13]\n 11303: a1 = a1 << 0x8\n 11306: a1 = a1 | a2\n 11309: a3 = a3 << 0x10\n 11312: a4 = a4 << 0x18\n 11315: a3 = a3 | a4\n 11318: a1 = a1 | a3\n 11321: a2 = u8 [a0 + 0x15]\n 11324: a3 = u8 [a0 + 0x14]\n 11327: a4 = u8 [a0 + 0x16]\n 11330: a5 = u8 [a0 + 0x17]\n 11333: a2 = a2 << 0x8\n 11336: a2 = a2 | a3\n 11339: a4 = a4 << 0x10\n 11342: a5 = a5 << 0x18\n 11345: a4 = a4 | a5\n 11348: a2 = a2 | a4\n 11351: a2 = a2 << 0x20\n 11354: t0 = a2 | a1\n 11357: a2 = u8 [a0 + 0x1]\n 11360: a3 = u8 [a0]\n 11362: a4 = u8 [a0 + 0x2]\n 11365: a5 = u8 [a0 + 0x3]\n 11368: a2 = a2 << 0x8\n 11371: a2 = a2 | a3\n 11374: a4 = a4 << 0x10\n 11377: a5 = a5 << 0x18\n 11380: a4 = a4 | a5\n 11383: a2 = a2 | a4\n 11386: a3 = u8 [a0 + 0x5]\n 11389: a4 = u8 [a0 + 0x4]\n 11392: a5 = u8 [a0 + 0x6]\n 11395: s1 = u8 [a0 + 0x7]\n 11398: a3 = a3 << 0x8\n 11401: a3 = a3 | a4\n 11404: a5 = a5 << 0x10\n 11407: s1 = s1 << 0x18\n 11410: a5 = a5 | s1\n 11413: a3 = a3 | a5\n 11416: a3 = a3 << 0x20\n 11419: a2 = a2 | a3\n 11422: a3 = u8 [a0 + 0x19]\n 11425: a4 = u8 [a0 + 0x18]\n 11428: a5 = u8 [a0 + 0x1a]\n 11431: s1 = u8 [a0 + 0x1b]\n 11434: a3 = a3 << 0x8\n 11437: a3 = a3 | a4\n 11440: a5 = a5 << 0x10\n 11443: s1 = s1 << 0x18\n 11446: a5 = a5 | s1\n 11449: a3 = a3 | a5\n 11452: a4 = u8 [a0 + 0x1d]\n 11455: a5 = u8 [a0 + 0x1c]\n 11458: s1 = u8 [a0 + 0x1e]\n 11461: a1 = u8 [a0 + 0x1f]\n 11464: a4 = a4 << 0x8\n 11467: a4 = a4 | a5\n 11470: s1 = s1 << 0x10\n 11473: a1 = a1 << 0x18\n 11476: a1 = a1 | s1\n 11479: a1 = a1 | a4\n 11482: a1 = a1 << 0x20\n 11485: a3 = a3 | a1\n 11488: a1 = u8 [a0 + 0x9]\n 11491: a4 = u8 [a0 + 0x8]\n 11494: a5 = u8 [a0 + 0xa]\n 11497: s1 = u8 [a0 + 0xb]\n 11500: a1 = a1 << 0x8\n 11503: a1 = a1 | a4\n 11506: a5 = a5 << 0x10\n 11509: s1 = s1 << 0x18\n 11512: a5 = a5 | s1\n 11515: a1 = a1 | a5\n 11518: a4 = u8 [a0 + 0xd]\n 11521: a5 = u8 [a0 + 0xc]\n 11524: s1 = u8 [a0 + 0xe]\n 11527: a0 = u8 [a0 + 0xf]\n 11530: a4 = a4 << 0x8\n 11533: a4 = a4 | a5\n 11536: s1 = s1 << 0x10\n 11539: a0 = a0 << 0x18\n 11542: a0 = a0 | s1\n 11545: a0 = a0 | a4\n 11548: a0 = a0 << 0x20\n 11551: a0 = a0 | a1\n 11554: a1 = reverse a0\n 11556: a0 = reverse a3\n 11558: a2 = reverse a2\n 11560: a3 = reverse t0\n 11562: a2 = a2 | a3\n 11565: a3 = a0 | a1\n 11568: a3 = a3 | a2\n 11571: a3 = a3 >> 0x20\n 11574: a1 = a1 | a2\n 11577: a1 = a1 << 0x20\n 11580: a1 = a1 | a3\n 11583: jump @232 if a1 == 0\n      : @231 (gas: 1)\n 11586: trap\n      : @232 (gas: 4)\n 11587: i32 s1 = a0 + 0\n 11589: a1 = 0x20\n 11592: a0 = s1\n 11594: ra = 190, jump @0\n      : @233 [@dyn 95] (gas: 71)\n 11600: a1 = u64 [sp]\n 11602: a1 = reverse a1\n 11604: a2 = u64 [sp + 0x8]\n 11607: a2 = reverse a2\n 11609: a3 = u64 [sp + 0x10]\n 11612: a3 = reverse a3\n 11614: a4 = u64 [sp + 0x18]\n 11617: a4 = reverse a4\n 11619: a5 = a4 >> 0x38\n 11622: u8 [a0 + 0x1f] = a5\n 11625: a5 = a4 >> 0x30\n 11628: u8 [a0 + 0x1e] = a5\n 11631: a5 = a4 >> 0x28\n 11634: u8 [a0 + 0x1d] = a5\n 11637: a5 = a4 >> 0x20\n 11640: u8 [a0 + 0x1c] = a5\n 11643: a5 = a4 >> 0x18\n 11646: u8 [a0 + 0x1b] = a5\n 11649: a5 = a4 >> 0x10\n 11652: u8 [a0 + 0x1a] = a5\n 11655: a5 = a4 >> 0x8\n 11658: u8 [a0 + 0x19] = a5\n 11661: u8 [a0 + 0x18] = a4\n 11664: u8 [a0 + 0x10] = a3\n 11667: a4 = a3 >> 0x38\n 11670: u8 [a0 + 0x17] = a4\n 11673: a4 = a3 >> 0x30\n 11676: u8 [a0 + 0x16] = a4\n 11679: a4 = a3 >> 0x28\n 11682: u8 [a0 + 0x15] = a4\n 11685: a4 = a3 >> 0x20\n 11688: u8 [a0 + 0x14] = a4\n 11691: a4 = a3 >> 0x18\n 11694: u8 [a0 + 0x13] = a4\n 11697: a4 = a3 >> 0x10\n 11700: u8 [a0 + 0x12] = a4\n 11703: a3 = a3 >> 0x8\n 11706: u8 [a0 + 0x11] = a3\n 11709: u8 [a0 + 0x8] = a2\n 11712: a3 = a2 >> 0x38\n 11715: u8 [a0 + 0xf] = a3\n 11718: a3 = a2 >> 0x30\n 11721: u8 [a0 + 0xe] = a3\n 11724: a3 = a2 >> 0x28\n 11727: u8 [a0 + 0xd] = a3\n 11730: a3 = a2 >> 0x20\n 11733: u8 [a0 + 0xc] = a3\n 11736: a3 = a2 >> 0x18\n 11739: u8 [a0 + 0xb] = a3\n 11742: a3 = a2 >> 0x10\n 11745: u8 [a0 + 0xa] = a3\n 11748: a2 = a2 >> 0x8\n 11751: u8 [a0 + 0x9] = a2\n 11754: u8 [a0] = a1\n 11756: a2 = a1 >> 0x38\n 11759: u8 [a0 + 0x7] = a2\n 11762: a2 = a1 >> 0x30\n 11765: u8 [a0 + 0x6] = a2\n 11768: a2 = a1 >> 0x28\n 11771: u8 [a0 + 0x5] = a2\n 11774: a2 = a1 >> 0x20\n 11777: u8 [a0 + 0x4] = a2\n 11780: a2 = a1 >> 0x18\n 11783: u8 [a0 + 0x3] = a2\n 11786: a2 = a1 >> 0x10\n 11789: u8 [a0 + 0x2] = a2\n 11792: a1 = a1 >> 0x8\n 11795: u8 [a0 + 0x1] = a1\n 11798: a1 = 0x20\n 11801: a0 = s1\n 11803: ra = 192, jump @0\n      : @234 [@dyn 96] (gas: 6)\n 11809: i32 a1 = a0 + 0\n 11811: a2 = 0x20\n 11814: a0 = 0\n 11816: ra = 0xc2\n 11820: ecalli 12 // 'seal_return'\n 11822: fallthrough\n      : @235 [@dyn 97] (gas: 25)\n 11823: sp = sp + 0xffffffffffffff80\n 11826: u64 [sp + 0x78] = ra\n 11829: u64 [sp + 0x70] = s0\n 11832: u64 [sp + 0x68] = s1\n 11835: s0 = sp + 0x80\n 11839: sp = sp & 0xffffffffffffffe0\n 11842: a3 = u64 [a1]\n 11844: u64 [sp + 0x30] = a3\n 11847: a3 = u64 [a1 + 0x8]\n 11850: u64 [sp + 0x28] = a3\n 11853: a3 = u64 [a1 + 0x10]\n 11856: u64 [sp + 0x20] = a3\n 11859: a1 = u64 [a1 + 0x18]\n 11862: u64 [sp + 0x18] = a1\n 11865: a1 = u64 [a2]\n 11867: u64 [sp + 0x10] = a1\n 11870: a1 = u64 [a2 + 0x8]\n 11873: u64 [sp + 0x8] = a1\n 11876: a1 = u64 [a2 + 0x10]\n 11879: u64 [sp] = a1\n 11881: s1 = u64 [a2 + 0x18]\n 11884: u64 [sp + 0x38] = a0\n 11887: a1 = 0x20\n 11890: a0 = 0\n 11892: ra = 196, jump @0\n      : @236 [@dyn 98] (gas: 70)\n 11898: a1 = reverse s1\n 11900: a2 = u64 [sp]\n 11902: a2 = reverse a2\n 11904: a3 = u64 [sp + 0x8]\n 11907: a3 = reverse a3\n 11909: a4 = u64 [sp + 0x10]\n 11912: a4 = reverse a4\n 11914: a5 = a4 >> 0x38\n 11917: u8 [a0 + 0x1f] = a5\n 11920: a5 = a4 >> 0x30\n 11923: u8 [a0 + 0x1e] = a5\n 11926: a5 = a4 >> 0x28\n 11929: u8 [a0 + 0x1d] = a5\n 11932: a5 = a4 >> 0x20\n 11935: u8 [a0 + 0x1c] = a5\n 11938: a5 = a4 >> 0x18\n 11941: u8 [a0 + 0x1b] = a5\n 11944: a5 = a4 >> 0x10\n 11947: u8 [a0 + 0x1a] = a5\n 11950: a5 = a4 >> 0x8\n 11953: u8 [a0 + 0x19] = a5\n 11956: u8 [a0 + 0x18] = a4\n 11959: a4 = a3 >> 0x38\n 11962: u8 [a0 + 0x17] = a4\n 11965: a4 = a3 >> 0x30\n 11968: u8 [a0 + 0x16] = a4\n 11971: a4 = a3 >> 0x28\n 11974: u8 [a0 + 0x15] = a4\n 11977: a4 = a3 >> 0x20\n 11980: u8 [a0 + 0x14] = a4\n 11983: a4 = a3 >> 0x18\n 11986: u8 [a0 + 0x13] = a4\n 11989: a4 = a3 >> 0x10\n 11992: u8 [a0 + 0x12] = a4\n 11995: a4 = a3 >> 0x8\n 11998: u8 [a0 + 0x11] = a4\n 12001: u8 [a0 + 0x10] = a3\n 12004: a3 = a2 >> 0x38\n 12007: u8 [a0 + 0xf] = a3\n 12010: a3 = a2 >> 0x30\n 12013: u8 [a0 + 0xe] = a3\n 12016: a3 = a2 >> 0x28\n 12019: u8 [a0 + 0xd] = a3\n 12022: a3 = a2 >> 0x20\n 12025: u8 [a0 + 0xc] = a3\n 12028: a3 = a2 >> 0x18\n 12031: u8 [a0 + 0xb] = a3\n 12034: a3 = a2 >> 0x10\n 12037: u8 [a0 + 0xa] = a3\n 12040: a3 = a2 >> 0x8\n 12043: u8 [a0 + 0x9] = a3\n 12046: u8 [a0 + 0x8] = a2\n 12049: a2 = a1 >> 0x38\n 12052: u8 [a0 + 0x7] = a2\n 12055: a2 = a1 >> 0x30\n 12058: u8 [a0 + 0x6] = a2\n 12061: a2 = a1 >> 0x28\n 12064: u8 [a0 + 0x5] = a2\n 12067: a2 = a1 >> 0x20\n 12070: u8 [a0 + 0x4] = a2\n 12073: a2 = a1 >> 0x18\n 12076: u8 [a0 + 0x3] = a2\n 12079: a2 = a1 >> 0x10\n 12082: u8 [a0 + 0x2] = a2\n 12085: a2 = a1 >> 0x8\n 12088: u8 [a0 + 0x1] = a2\n 12091: u8 [a0] = a1\n 12093: a0 = 0x20\n 12096: a1 = 0x20\n 12099: ra = 198, jump @0\n      : @237 [@dyn 99] (gas: 71)\n 12105: a1 = u64 [sp + 0x18]\n 12108: a1 = reverse a1\n 12110: a2 = u64 [sp + 0x20]\n 12113: a2 = reverse a2\n 12115: a3 = u64 [sp + 0x28]\n 12118: a3 = reverse a3\n 12120: a4 = u64 [sp + 0x30]\n 12123: a4 = reverse a4\n 12125: a5 = a4 >> 0x38\n 12128: u8 [a0 + 0x1f] = a5\n 12131: a5 = a4 >> 0x30\n 12134: u8 [a0 + 0x1e] = a5\n 12137: a5 = a4 >> 0x28\n 12140: u8 [a0 + 0x1d] = a5\n 12143: a5 = a4 >> 0x20\n 12146: u8 [a0 + 0x1c] = a5\n 12149: a5 = a4 >> 0x18\n 12152: u8 [a0 + 0x1b] = a5\n 12155: a5 = a4 >> 0x10\n 12158: u8 [a0 + 0x1a] = a5\n 12161: a5 = a4 >> 0x8\n 12164: u8 [a0 + 0x19] = a5\n 12167: u8 [a0 + 0x18] = a4\n 12170: a4 = a3 >> 0x38\n 12173: u8 [a0 + 0x17] = a4\n 12176: a4 = a3 >> 0x30\n 12179: u8 [a0 + 0x16] = a4\n 12182: a4 = a3 >> 0x28\n 12185: u8 [a0 + 0x15] = a4\n 12188: a4 = a3 >> 0x20\n 12191: u8 [a0 + 0x14] = a4\n 12194: a4 = a3 >> 0x18\n 12197: u8 [a0 + 0x13] = a4\n 12200: a4 = a3 >> 0x10\n 12203: u8 [a0 + 0x12] = a4\n 12206: a4 = a3 >> 0x8\n 12209: u8 [a0 + 0x11] = a4\n 12212: u8 [a0 + 0x10] = a3\n 12215: a3 = a2 >> 0x38\n 12218: u8 [a0 + 0xf] = a3\n 12221: a3 = a2 >> 0x30\n 12224: u8 [a0 + 0xe] = a3\n 12227: a3 = a2 >> 0x28\n 12230: u8 [a0 + 0xd] = a3\n 12233: a3 = a2 >> 0x20\n 12236: u8 [a0 + 0xc] = a3\n 12239: a3 = a2 >> 0x18\n 12242: u8 [a0 + 0xb] = a3\n 12245: a3 = a2 >> 0x10\n 12248: u8 [a0 + 0xa] = a3\n 12251: a3 = a2 >> 0x8\n 12254: u8 [a0 + 0x9] = a3\n 12257: u8 [a0 + 0x8] = a2\n 12260: a2 = a1 >> 0x38\n 12263: u8 [a0 + 0x7] = a2\n 12266: a2 = a1 >> 0x30\n 12269: u8 [a0 + 0x6] = a2\n 12272: a2 = a1 >> 0x28\n 12275: u8 [a0 + 0x5] = a2\n 12278: a2 = a1 >> 0x20\n 12281: u8 [a0 + 0x4] = a2\n 12284: a2 = a1 >> 0x18\n 12287: u8 [a0 + 0x3] = a2\n 12290: a2 = a1 >> 0x10\n 12293: u8 [a0 + 0x2] = a2\n 12296: a2 = a1 >> 0x8\n 12299: u8 [a0 + 0x1] = a2\n 12302: u8 [a0] = a1\n 12304: a1 = 0x40\n 12307: a0 = 0\n 12309: ra = 200, jump @0\n      : @238 [@dyn 100] (gas: 23)\n 12315: i32 a0 = a0 + 0\n 12317: i32 a2 = sp + 0x40\n 12320: a1 = 0x40\n 12323: ecalli 8 // 'hash_keccak_256'\n 12325: a0 = u64 [sp + 0x58]\n 12328: a1 = u64 [sp + 0x50]\n 12331: a2 = u64 [sp + 0x48]\n 12334: a3 = u64 [sp + 0x40]\n 12337: a0 = reverse a0\n 12339: a1 = reverse a1\n 12341: a2 = reverse a2\n 12343: a3 = reverse a3\n 12345: a4 = u64 [sp + 0x38]\n 12348: u64 [a4 + 0x18] = a3\n 12351: u64 [a4 + 0x10] = a2\n 12354: u64 [a4 + 0x8] = a1\n 12357: u64 [a4] = a0\n 12359: sp = s0 + 0xffffffffffffff80\n 12362: ra = u64 [sp + 0x78]\n 12365: s0 = u64 [sp + 0x70]\n 12368: s1 = u64 [sp + 0x68]\n 12371: sp = sp + 0x80\n 12375: ret\n      : @239 [@dyn 101] (gas: 70)\n 12377: a1 = reverse s1\n 12379: a2 = u64 [sp + 0x40]\n 12382: a2 = reverse a2\n 12384: a3 = u64 [sp + 0x48]\n 12387: a3 = reverse a3\n 12389: a4 = u64 [sp + 0x58]\n 12392: a4 = reverse a4\n 12394: a5 = a4 >> 0x38\n 12397: u8 [a0 + 0x1f] = a5\n 12400: a5 = a4 >> 0x30\n 12403: u8 [a0 + 0x1e] = a5\n 12406: a5 = a4 >> 0x28\n 12409: u8 [a0 + 0x1d] = a5\n 12412: a5 = a4 >> 0x20\n 12415: u8 [a0 + 0x1c] = a5\n 12418: a5 = a4 >> 0x18\n 12421: u8 [a0 + 0x1b] = a5\n 12424: a5 = a4 >> 0x10\n 12427: u8 [a0 + 0x1a] = a5\n 12430: a5 = a4 >> 0x8\n 12433: u8 [a0 + 0x19] = a5\n 12436: u8 [a0 + 0x18] = a4\n 12439: a4 = a3 >> 0x38\n 12442: u8 [a0 + 0x17] = a4\n 12445: a4 = a3 >> 0x30\n 12448: u8 [a0 + 0x16] = a4\n 12451: a4 = a3 >> 0x28\n 12454: u8 [a0 + 0x15] = a4\n 12457: a4 = a3 >> 0x20\n 12460: u8 [a0 + 0x14] = a4\n 12463: a4 = a3 >> 0x18\n 12466: u8 [a0 + 0x13] = a4\n 12469: a4 = a3 >> 0x10\n 12472: u8 [a0 + 0x12] = a4\n 12475: a4 = a3 >> 0x8\n 12478: u8 [a0 + 0x11] = a4\n 12481: u8 [a0 + 0x10] = a3\n 12484: a3 = a2 >> 0x38\n 12487: u8 [a0 + 0xf] = a3\n 12490: a3 = a2 >> 0x30\n 12493: u8 [a0 + 0xe] = a3\n 12496: a3 = a2 >> 0x28\n 12499: u8 [a0 + 0xd] = a3\n 12502: a3 = a2 >> 0x20\n 12505: u8 [a0 + 0xc] = a3\n 12508: a3 = a2 >> 0x18\n 12511: u8 [a0 + 0xb] = a3\n 12514: a3 = a2 >> 0x10\n 12517: u8 [a0 + 0xa] = a3\n 12520: a3 = a2 >> 0x8\n 12523: u8 [a0 + 0x9] = a3\n 12526: u8 [a0 + 0x8] = a2\n 12529: a2 = a1 >> 0x38\n 12532: u8 [a0 + 0x7] = a2\n 12535: a2 = a1 >> 0x30\n 12538: u8 [a0 + 0x6] = a2\n 12541: a2 = a1 >> 0x28\n 12544: u8 [a0 + 0x5] = a2\n 12547: a2 = a1 >> 0x20\n 12550: u8 [a0 + 0x4] = a2\n 12553: a2 = a1 >> 0x18\n 12556: u8 [a0 + 0x3] = a2\n 12559: a2 = a1 >> 0x10\n 12562: u8 [a0 + 0x2] = a2\n 12565: a2 = a1 >> 0x8\n 12568: u8 [a0 + 0x1] = a2\n 12571: u8 [a0] = a1\n 12573: a0 = 0x20\n 12576: a1 = 0x20\n 12579: ra = 204, jump @0\n      : @240 [@dyn 102] (gas: 35)\n 12585: u8 [a0 + 31] = 0x3\n 12589: u8 [a0 + 30] = 0\n 12592: u8 [a0 + 29] = 0\n 12595: u8 [a0 + 28] = 0\n 12598: u8 [a0 + 27] = 0\n 12601: u8 [a0 + 26] = 0\n 12604: u8 [a0 + 25] = 0\n 12607: u8 [a0 + 24] = 0\n 12610: u8 [a0 + 23] = 0\n 12613: u8 [a0 + 22] = 0\n 12616: u8 [a0 + 21] = 0\n 12619: u8 [a0 + 20] = 0\n 12622: u8 [a0 + 19] = 0\n 12625: u8 [a0 + 18] = 0\n 12628: u8 [a0 + 17] = 0\n 12631: u8 [a0 + 16] = 0\n 12634: u8 [a0 + 15] = 0\n 12637: u8 [a0 + 14] = 0\n 12640: u8 [a0 + 13] = 0\n 12643: u8 [a0 + 12] = 0\n 12646: u8 [a0 + 11] = 0\n 12649: u8 [a0 + 10] = 0\n 12652: u8 [a0 + 9] = 0\n 12655: u8 [a0 + 8] = 0\n 12658: u8 [a0 + 7] = 0\n 12661: u8 [a0 + 6] = 0\n 12664: u8 [a0 + 5] = 0\n 12667: u8 [a0 + 4] = 0\n 12670: u8 [a0 + 3] = 0\n 12673: u8 [a0 + 2] = 0\n 12676: u8 [a0 + 1] = 0\n 12679: u8 [a0 + 0] = 0\n 12681: a1 = 0x40\n 12684: a0 = 0\n 12686: ra = 206, jump @0\n      : @241 [@dyn 103] (gas: 14)\n 12692: i32 a0 = a0 + 0\n 12694: i32 a2 = sp + 0xa0\n 12698: a1 = 0x40\n 12701: ecalli 8 // 'hash_keccak_256'\n 12703: a0 = u64 [sp + 0xa0]\n 12707: u64 [sp + 0x58] = a0\n 12710: a0 = u64 [sp + 0xa8]\n 12714: u64 [sp + 0x48] = a0\n 12717: a0 = u64 [sp + 0xb0]\n 12721: u64 [sp + 0x40] = a0\n 12724: s1 = u64 [sp + 0xb8]\n 12728: a1 = 0x20\n 12731: a0 = 0\n 12733: ra = 208, jump @0\n      : @242 [@dyn 104] (gas: 71)\n 12739: a1 = u64 [sp + 0x60]\n 12742: a1 = reverse a1\n 12744: a2 = u64 [sp + 0x68]\n 12747: a2 = reverse a2\n 12749: a3 = u64 [sp + 0x70]\n 12752: a3 = reverse a3\n 12754: a4 = u64 [sp + 0x78]\n 12757: a4 = reverse a4\n 12759: a5 = a4 >> 0x38\n 12762: u8 [a0 + 0x1f] = a5\n 12765: a5 = a4 >> 0x30\n 12768: u8 [a0 + 0x1e] = a5\n 12771: a5 = a4 >> 0x28\n 12774: u8 [a0 + 0x1d] = a5\n 12777: a5 = a4 >> 0x20\n 12780: u8 [a0 + 0x1c] = a5\n 12783: a5 = a4 >> 0x18\n 12786: u8 [a0 + 0x1b] = a5\n 12789: a5 = a4 >> 0x10\n 12792: u8 [a0 + 0x1a] = a5\n 12795: a5 = a4 >> 0x8\n 12798: u8 [a0 + 0x19] = a5\n 12801: u8 [a0 + 0x18] = a4\n 12804: a4 = a3 >> 0x38\n 12807: u8 [a0 + 0x17] = a4\n 12810: a4 = a3 >> 0x30\n 12813: u8 [a0 + 0x16] = a4\n 12816: a4 = a3 >> 0x28\n 12819: u8 [a0 + 0x15] = a4\n 12822: a4 = a3 >> 0x20\n 12825: u8 [a0 + 0x14] = a4\n 12828: a4 = a3 >> 0x18\n 12831: u8 [a0 + 0x13] = a4\n 12834: a4 = a3 >> 0x10\n 12837: u8 [a0 + 0x12] = a4\n 12840: a4 = a3 >> 0x8\n 12843: u8 [a0 + 0x11] = a4\n 12846: u8 [a0 + 0x10] = a3\n 12849: a3 = a2 >> 0x38\n 12852: u8 [a0 + 0xf] = a3\n 12855: a3 = a2 >> 0x30\n 12858: u8 [a0 + 0xe] = a3\n 12861: a3 = a2 >> 0x28\n 12864: u8 [a0 + 0xd] = a3\n 12867: a3 = a2 >> 0x20\n 12870: u8 [a0 + 0xc] = a3\n 12873: a3 = a2 >> 0x18\n 12876: u8 [a0 + 0xb] = a3\n 12879: a3 = a2 >> 0x10\n 12882: u8 [a0 + 0xa] = a3\n 12885: a3 = a2 >> 0x8\n 12888: u8 [a0 + 0x9] = a3\n 12891: u8 [a0 + 0x8] = a2\n 12894: a2 = a1 >> 0x38\n 12897: u8 [a0 + 0x7] = a2\n 12900: a2 = a1 >> 0x30\n 12903: u8 [a0 + 0x6] = a2\n 12906: a2 = a1 >> 0x28\n 12909: u8 [a0 + 0x5] = a2\n 12912: a2 = a1 >> 0x20\n 12915: u8 [a0 + 0x4] = a2\n 12918: a2 = a1 >> 0x18\n 12921: u8 [a0 + 0x3] = a2\n 12924: a2 = a1 >> 0x10\n 12927: u8 [a0 + 0x2] = a2\n 12930: a2 = a1 >> 0x8\n 12933: u8 [a0 + 0x1] = a2\n 12936: u8 [a0] = a1\n 12938: a0 = 0x20\n 12941: a1 = 0x20\n 12944: ra = 210, jump @0\n      : @243 [@dyn 105] (gas: 66)\n 12950: a1 = s1 >> 0x38\n 12953: u8 [a0 + 0x1f] = a1\n 12956: a1 = s1 >> 0x30\n 12959: u8 [a0 + 0x1e] = a1\n 12962: a1 = s1 >> 0x28\n 12965: u8 [a0 + 0x1d] = a1\n 12968: a1 = s1 >> 0x20\n 12971: u8 [a0 + 0x1c] = a1\n 12974: a1 = s1 >> 0x18\n 12977: u8 [a0 + 0x1b] = a1\n 12980: a1 = s1 >> 0x10\n 12983: u8 [a0 + 0x1a] = a1\n 12986: a1 = s1 >> 0x8\n 12989: u8 [a0 + 0x19] = a1\n 12992: u8 [a0 + 0x18] = s1\n 12995: a2 = u64 [sp + 0x40]\n 12998: a1 = a2 >> 0x38\n 13001: u8 [a0 + 0x17] = a1\n 13004: a1 = a2 >> 0x30\n 13007: u8 [a0 + 0x16] = a1\n 13010: a1 = a2 >> 0x28\n 13013: u8 [a0 + 0x15] = a1\n 13016: a1 = a2 >> 0x20\n 13019: u8 [a0 + 0x14] = a1\n 13022: a1 = a2 >> 0x18\n 13025: u8 [a0 + 0x13] = a1\n 13028: a1 = a2 >> 0x10\n 13031: u8 [a0 + 0x12] = a1\n 13034: a1 = a2 >> 0x8\n 13037: u8 [a0 + 0x11] = a1\n 13040: u8 [a0 + 0x10] = a2\n 13043: a2 = u64 [sp + 0x48]\n 13046: a1 = a2 >> 0x38\n 13049: u8 [a0 + 0xf] = a1\n 13052: a1 = a2 >> 0x30\n 13055: u8 [a0 + 0xe] = a1\n 13058: a1 = a2 >> 0x28\n 13061: u8 [a0 + 0xd] = a1\n 13064: a1 = a2 >> 0x20\n 13067: u8 [a0 + 0xc] = a1\n 13070: a1 = a2 >> 0x18\n 13073: u8 [a0 + 0xb] = a1\n 13076: a1 = a2 >> 0x10\n 13079: u8 [a0 + 0xa] = a1\n 13082: a1 = a2 >> 0x8\n 13085: u8 [a0 + 0x9] = a1\n 13088: u8 [a0 + 0x8] = a2\n 13091: a2 = u64 [sp + 0x58]\n 13094: a1 = a2 >> 0x38\n 13097: u8 [a0 + 0x7] = a1\n 13100: a1 = a2 >> 0x30\n 13103: u8 [a0 + 0x6] = a1\n 13106: a1 = a2 >> 0x28\n 13109: u8 [a0 + 0x5] = a1\n 13112: a1 = a2 >> 0x20\n 13115: u8 [a0 + 0x4] = a1\n 13118: a1 = a2 >> 0x18\n 13121: u8 [a0 + 0x3] = a1\n 13124: a1 = a2 >> 0x10\n 13127: u8 [a0 + 0x2] = a1\n 13130: a1 = a2 >> 0x8\n 13133: u8 [a0 + 0x1] = a1\n 13136: u8 [a0] = a2\n 13138: a1 = 0x40\n 13141: a0 = 0\n 13143: ra = 212, jump @0\n      : @244 [@dyn 106] (gas: 179)\n 13149: i32 a0 = a0 + 0\n 13151: i32 a2 = sp + 0xa0\n 13155: a1 = 0x40\n 13158: ecalli 8 // 'hash_keccak_256'\n 13160: a0 = u64 [sp + 0xb8]\n 13164: a1 = u64 [sp + 0xb0]\n 13168: a2 = u64 [sp + 0xa8]\n 13172: a3 = u64 [sp + 0xa0]\n 13176: s1 = reverse a0\n 13178: a1 = reverse a1\n 13180: u64 [sp + 0x70] = a1\n 13183: a2 = reverse a2\n 13185: u64 [sp + 0x58] = a2\n 13188: a0 = reverse a3\n 13190: u64 [sp + 0x78] = a0\n 13193: u64 [sp + 0x98] = a0\n 13197: u64 [sp + 0x90] = a2\n 13201: u64 [sp + 0x88] = a1\n 13205: u64 [sp + 0x80] = s1\n 13209: u64 [sp + 0x60] = s1\n 13212: u64 [sp + 184] = 0\n 13216: u64 [sp + 176] = 0\n 13220: u64 [sp + 168] = 0\n 13224: u64 [sp + 160] = 0\n 13228: u32 [sp + 192] = 0x20\n 13233: i32 a1 = sp + 0x80\n 13237: i32 a3 = sp + 0xa0\n 13241: i32 a4 = sp + 0xc0\n 13245: a2 = 0xffffffffffffffff\n 13248: a0 = 0\n 13250: ecalli 7 // 'get_storage'\n 13252: a0 = s1 + 0x1\n 13255: a1 = a0 <u 0x1\n 13258: a2 = u64 [sp + 0x70]\n 13261: a1 = a1 + a2\n 13264: a2 = a0 | a1\n 13267: a2 = a2 <u 0x1\n 13270: a3 = u64 [sp + 0x58]\n 13273: a2 = a2 + a3\n 13276: a3 = a2 <u a3\n 13279: a4 = u64 [sp + 0x78]\n 13282: a3 = a3 + a4\n 13285: u64 [sp + 0x98] = a3\n 13289: u64 [sp + 0x90] = a2\n 13293: a2 = u64 [sp + 0xa0]\n 13297: u64 [sp + 0x48] = a2\n 13300: u64 [sp + 0x88] = a1\n 13304: a1 = u64 [sp + 0xa8]\n 13308: u64 [sp + 0x40] = a1\n 13311: u64 [sp + 0x80] = a0\n 13315: a0 = u32 [sp + 0xb0]\n 13319: u64 [sp + 0x38] = a0\n 13322: u64 [sp + 184] = 0\n 13326: u64 [sp + 176] = 0\n 13330: u64 [sp + 168] = 0\n 13334: u64 [sp + 160] = 0\n 13338: u32 [sp + 192] = 0x20\n 13343: i32 a1 = sp + 0x80\n 13347: i32 a3 = sp + 0xa0\n 13351: i32 a4 = sp + 0xc0\n 13355: a2 = 0xffffffffffffffff\n 13358: a0 = 0\n 13360: ecalli 7 // 'get_storage'\n 13362: a0 = u64 [sp + 0xa0]\n 13366: u64 [sp + 0x30] = a0\n 13369: a0 = u64 [sp + 0xa8]\n 13373: u64 [sp + 0x28] = a0\n 13376: a0 = u64 [sp + 0xb0]\n 13380: u64 [sp + 0x20] = a0\n 13383: a0 = u64 [sp + 0xb8]\n 13387: u64 [sp + 0x18] = a0\n 13390: a0 = u64 [sp + 0x60]\n 13393: a1 = a0 + 0x2\n 13396: a0 = a1 <u a0\n 13399: a2 = a1\n 13401: u64 [sp + 0x68] = a1\n 13404: a1 = u64 [sp + 0x70]\n 13407: a3 = a1 + a0\n 13410: u64 [sp + 0x60] = a3\n 13413: s1 = a3 <u a1\n 13416: s1 = a0 if a0 == 0\n 13419: a0 = u64 [sp + 0x58]\n 13422: s1 = s1 + a0\n 13425: a0 = s1 <u a0\n 13428: a1 = u64 [sp + 0x78]\n 13431: a0 = a0 + a1\n 13434: u64 [sp + 0x78] = a0\n 13437: u64 [sp + 0x98] = a0\n 13441: u64 [sp + 0x90] = s1\n 13445: u64 [sp + 0x88] = a3\n 13449: u64 [sp + 0x80] = a2\n 13453: u64 [sp + 184] = 0\n 13457: u64 [sp + 176] = 0\n 13461: u64 [sp + 168] = 0\n 13465: u64 [sp + 160] = 0\n 13469: u32 [sp + 192] = 0x20\n 13474: i32 a1 = sp + 0x80\n 13478: i32 a3 = sp + 0xa0\n 13482: i32 a4 = sp + 0xc0\n 13486: a2 = 0xffffffffffffffff\n 13489: a0 = 0\n 13491: ecalli 7 // 'get_storage'\n 13493: a0 = u8 [sp + 0xa0]\n 13497: u64 [sp + 0x70] = a0\n 13500: a0 = u64 [sp + 0x78]\n 13503: u64 [sp + 0x98] = a0\n 13507: u64 [sp + 0x90] = s1\n 13511: a0 = u64 [sp + 0x60]\n 13514: u64 [sp + 0x88] = a0\n 13518: a0 = u64 [sp + 0x68]\n 13521: u64 [sp + 0x80] = a0\n 13525: u64 [sp + 184] = 0\n 13529: u64 [sp + 176] = 0\n 13533: u64 [sp + 168] = 0\n 13537: u64 [sp + 160] = 0\n 13541: u32 [sp + 192] = 0x20\n 13546: i32 a1 = sp + 0x80\n 13550: i32 a3 = sp + 0xa0\n 13554: i32 a4 = sp + 0xc0\n 13558: a2 = 0xffffffffffffffff\n 13561: a0 = 0\n 13563: ecalli 7 // 'get_storage'\n 13565: a0 = u8 [sp + 0xa1]\n 13569: u64 [sp + 0x58] = a0\n 13572: a0 = u64 [sp + 0x78]\n 13575: u64 [sp + 0x98] = a0\n 13579: u64 [sp + 0x90] = s1\n 13583: a0 = u64 [sp + 0x60]\n 13586: u64 [sp + 0x88] = a0\n 13590: a0 = u64 [sp + 0x68]\n 13593: u64 [sp + 0x80] = a0\n 13597: u64 [sp + 184] = 0\n 13601: u64 [sp + 176] = 0\n 13605: u64 [sp + 168] = 0\n 13609: u64 [sp + 160] = 0\n 13613: u32 [sp + 192] = 0x20\n 13618: i32 a1 = sp + 0x80\n 13622: i32 a3 = sp + 0xa0\n 13626: i32 a4 = sp + 0xc0\n 13630: a2 = 0xffffffffffffffff\n 13633: a0 = 0\n 13635: ecalli 7 // 'get_storage'\n 13637: a0 = u8 [sp + 0xa2]\n 13641: a1 = u64 [sp + 0x50]\n 13644: u64 [a1 + 152] = 0\n 13648: u64 [a1 + 144] = 0\n 13652: u64 [a1 + 136] = 0\n 13656: u64 [a1 + 0x80] = a0\n 13660: u64 [a1 + 120] = 0\n 13663: u64 [a1 + 112] = 0\n 13666: u64 [a1 + 104] = 0\n 13669: a0 = u64 [sp + 0x58]\n 13672: u64 [a1 + 0x60] = a0\n 13675: u64 [a1 + 88] = 0\n 13678: u64 [a1 + 80] = 0\n 13681: u64 [a1 + 72] = 0\n 13684: a0 = u64 [sp + 0x70]\n 13687: u64 [a1 + 0x40] = a0\n 13690: a0 = u64 [sp + 0x18]\n 13693: u64 [a1 + 0x38] = a0\n 13696: a0 = u64 [sp + 0x20]\n 13699: u64 [a1 + 0x30] = a0\n 13702: a0 = u64 [sp + 0x28]\n 13705: u64 [a1 + 0x28] = a0\n 13708: a0 = u64 [sp + 0x30]\n 13711: u64 [a1 + 0x20] = a0\n 13714: u64 [a1 + 24] = 0\n 13717: a0 = u64 [sp + 0x38]\n 13720: u64 [a1 + 0x10] = a0\n 13723: a0 = u64 [sp + 0x40]\n 13726: u64 [a1 + 0x8] = a0\n 13729: a0 = u64 [sp + 0x48]\n 13732: u64 [a1] = a0\n 13734: sp = s0 + 0xffffffffffffff20\n 13738: ra = u64 [sp + 0xd8]\n 13742: s0 = u64 [sp + 0xd0]\n 13746: s1 = u64 [sp + 0xc8]\n 13750: sp = sp + 0xe0\n 13754: ret\n      : @245 (gas: 21)\n 13756: sp = sp + 0xffffffffffffff30\n 13760: u64 [sp + 0xc8] = ra\n 13764: u64 [sp + 0xc0] = s0\n 13768: u64 [sp + 0xb8] = s1\n 13772: s0 = u64 [a1 + 0x10]\n 13775: t0 = u64 [a1 + 0x18]\n 13778: s1 = u64 [a1 + 0x8]\n 13781: a1 = u64 [a1]\n 13783: u64 [sp + 0xa8] = s1\n 13787: u64 [sp + 0x88] = t0\n 13791: t0 = s1 | t0\n 13794: u64 [sp + 0xb0] = a1\n 13798: s1 = a1 | s0\n 13801: s1 = s1 | t0\n 13804: s1 = s1 >> 0x20\n 13807: u64 [sp + 0x90] = s0\n 13811: a1 = t0 | s0\n 13814: a1 = a1 << 0x20\n 13817: a1 = a1 | s1\n 13820: u64 [sp + 0x40] = a0\n 13823: jump @256 if a1 != 0\n      : @246 (gas: 43)\n 13827: a0 = u64 [sp + 0xd0]\n 13831: a1 = u64 [a0 + 0x18]\n 13834: u64 [sp + 0x18] = a1\n 13837: a1 = u64 [a0 + 0x10]\n 13840: u64 [sp + 0x8] = a1\n 13843: a1 = u64 [a0 + 0x8]\n 13846: u64 [sp + 0x10] = a1\n 13849: a0 = u64 [a0]\n 13851: u64 [sp] = a0\n 13853: a0 = u64 [a5 + 0x18]\n 13856: u64 [sp + 0x38] = a0\n 13859: a0 = u64 [a5 + 0x10]\n 13862: u64 [sp + 0x28] = a0\n 13865: a0 = u64 [a5 + 0x8]\n 13868: u64 [sp + 0x30] = a0\n 13871: a0 = u64 [a5]\n 13873: u64 [sp + 0x20] = a0\n 13876: a0 = u64 [a4 + 0x18]\n 13879: u64 [sp + 0x60] = a0\n 13882: a0 = u64 [a4 + 0x10]\n 13885: u64 [sp + 0x50] = a0\n 13888: a0 = u64 [a4 + 0x8]\n 13891: u64 [sp + 0x58] = a0\n 13894: a0 = u64 [a4]\n 13896: u64 [sp + 0x48] = a0\n 13899: a0 = u64 [a3 + 0x18]\n 13902: u64 [sp + 0x70] = a0\n 13905: a0 = u64 [a3 + 0x10]\n 13908: u64 [sp + 0x78] = a0\n 13911: a0 = u64 [a3 + 0x8]\n 13914: u64 [sp + 0x80] = a0\n 13918: a0 = u64 [a2 + 0x10]\n 13921: a1 = u64 [a3]\n 13923: u64 [sp + 0x68] = a1\n 13926: a1 = u64 [a2 + 0x8]\n 13929: u64 [sp + 0x98] = a1\n 13933: s1 = u64 [a2]\n 13935: a0 = a0 << 0x20\n 13938: s0 = a0 >> 0x20\n 13941: a0 = i32 [sp + 0xb0]\n 13945: a1 = 0x20\n 13948: u64 [sp + 0xa0] = a0\n 13952: ra = 214, jump @0\n      : @247 [@dyn 107] (gas: 66)\n 13958: a1 = reverse s0\n 13960: a2 = u64 [sp + 0x98]\n 13964: a2 = reverse a2\n 13966: a3 = reverse s1\n 13968: a4 = a3 >> 0x38\n 13971: u8 [a0 + 0x1f] = a4\n 13974: a4 = a3 >> 0x30\n 13977: u8 [a0 + 0x1e] = a4\n 13980: a4 = a3 >> 0x28\n 13983: u8 [a0 + 0x1d] = a4\n 13986: a4 = a3 >> 0x20\n 13989: u8 [a0 + 0x1c] = a4\n 13992: a4 = a3 >> 0x18\n 13995: u8 [a0 + 0x1b] = a4\n 13998: a4 = a3 >> 0x10\n 14001: u8 [a0 + 0x1a] = a4\n 14004: a4 = a3 >> 0x8\n 14007: u8 [a0 + 0x19] = a4\n 14010: u8 [a0 + 0x18] = a3\n 14013: u8 [a0 + 0x10] = a2\n 14016: u8 [a0 + 11] = 0\n 14019: u8 [a0 + 10] = 0\n 14022: u8 [a0 + 9] = 0\n 14025: u8 [a0 + 7] = 0\n 14028: u8 [a0 + 6] = 0\n 14031: u8 [a0 + 5] = 0\n 14034: u8 [a0 + 4] = 0\n 14037: u8 [a0 + 3] = 0\n 14040: u8 [a0 + 2] = 0\n 14043: u8 [a0 + 1] = 0\n 14046: u8 [a0 + 0] = 0\n 14048: a3 = a2 >> 0x38\n 14051: u8 [a0 + 0x17] = a3\n 14054: a3 = a2 >> 0x30\n 14057: u8 [a0 + 0x16] = a3\n 14060: a3 = a2 >> 0x28\n 14063: u8 [a0 + 0x15] = a3\n 14066: a3 = a2 >> 0x20\n 14069: u8 [a0 + 0x14] = a3\n 14072: a3 = a2 >> 0x18\n 14075: u8 [a0 + 0x13] = a3\n 14078: a3 = a2 >> 0x10\n 14081: u8 [a0 + 0x12] = a3\n 14084: a2 = a2 >> 0x8\n 14087: u8 [a0 + 0x11] = a2\n 14090: u8 [a0 + 0x8] = a1\n 14093: a2 = a1 >> 0x38\n 14096: u8 [a0 + 0xf] = a2\n 14099: a2 = a1 >> 0x30\n 14102: u8 [a0 + 0xe] = a2\n 14105: a2 = a1 >> 0x28\n 14108: u8 [a0 + 0xd] = a2\n 14111: a1 = a1 >> 0x20\n 14114: a2 = u64 [sp + 0x90]\n 14118: a4 = u64 [sp + 0x88]\n 14122: a4 = a4 | a2\n 14125: s0 = 0x100000000\n 14135: a2 = 0xffffffe0\n 14145: a3 = u64 [sp + 0xb0]\n 14149: a2 = a3 <u a2\n 14152: a3 = u64 [sp + 0xa8]\n 14156: a2 = 0 if a3 != 0\n 14158: u64 [sp + 0x98] = a4\n 14162: a2 = 0 if a4 != 0\n 14164: u8 [a0 + 0xc] = a1\n 14167: jump @256 if a2 == 0\n      : @248 (gas: 4)\n 14171: a0 = u64 [sp + 0xa0]\n 14175: i32 a0 = a0 + 0x20\n 14178: a1 = 0x20\n 14181: ra = 216, jump @0\n      : @249 [@dyn 108] (gas: 76)\n 14187: a1 = u64 [sp + 0x70]\n 14190: a1 = reverse a1\n 14192: a2 = u64 [sp + 0x78]\n 14195: a2 = reverse a2\n 14197: a3 = u64 [sp + 0x80]\n 14201: a3 = reverse a3\n 14203: a4 = u64 [sp + 0x68]\n 14206: a4 = reverse a4\n 14208: a5 = a4 >> 0x38\n 14211: u8 [a0 + 0x1f] = a5\n 14214: a5 = a4 >> 0x30\n 14217: u8 [a0 + 0x1e] = a5\n 14220: a5 = a4 >> 0x28\n 14223: u8 [a0 + 0x1d] = a5\n 14226: a5 = a4 >> 0x20\n 14229: u8 [a0 + 0x1c] = a5\n 14232: a5 = a4 >> 0x18\n 14235: u8 [a0 + 0x1b] = a5\n 14238: a5 = a4 >> 0x10\n 14241: u8 [a0 + 0x1a] = a5\n 14244: a5 = a4 >> 0x8\n 14247: u8 [a0 + 0x19] = a5\n 14250: u8 [a0 + 0x18] = a4\n 14253: u8 [a0 + 0x10] = a3\n 14256: a4 = a3 >> 0x38\n 14259: u8 [a0 + 0x17] = a4\n 14262: a4 = a3 >> 0x30\n 14265: u8 [a0 + 0x16] = a4\n 14268: a4 = a3 >> 0x28\n 14271: u8 [a0 + 0x15] = a4\n 14274: a4 = a3 >> 0x20\n 14277: u8 [a0 + 0x14] = a4\n 14280: a4 = a3 >> 0x18\n 14283: u8 [a0 + 0x13] = a4\n 14286: a4 = a3 >> 0x10\n 14289: u8 [a0 + 0x12] = a4\n 14292: a3 = a3 >> 0x8\n 14295: u8 [a0 + 0x11] = a3\n 14298: u8 [a0 + 0x8] = a2\n 14301: a3 = a2 >> 0x38\n 14304: u8 [a0 + 0xf] = a3\n 14307: a3 = a2 >> 0x30\n 14310: u8 [a0 + 0xe] = a3\n 14313: a3 = a2 >> 0x28\n 14316: u8 [a0 + 0xd] = a3\n 14319: a3 = a2 >> 0x20\n 14322: u8 [a0 + 0xc] = a3\n 14325: a3 = a2 >> 0x18\n 14328: u8 [a0 + 0xb] = a3\n 14331: a3 = a2 >> 0x10\n 14334: u8 [a0 + 0xa] = a3\n 14337: a2 = a2 >> 0x8\n 14340: u8 [a0 + 0x9] = a2\n 14343: u8 [a0] = a1\n 14345: a2 = a1 >> 0x38\n 14348: u8 [a0 + 0x7] = a2\n 14351: a2 = a1 >> 0x30\n 14354: u8 [a0 + 0x6] = a2\n 14357: a2 = a1 >> 0x28\n 14360: u8 [a0 + 0x5] = a2\n 14363: a2 = a1 >> 0x20\n 14366: u8 [a0 + 0x4] = a2\n 14369: a2 = a1 >> 0x18\n 14372: u8 [a0 + 0x3] = a2\n 14375: a2 = a1 >> 0x10\n 14378: u8 [a0 + 0x2] = a2\n 14381: a1 = a1 >> 0x8\n 14384: a2 = s0 + 0xffffffffffffffc0\n 14387: a3 = u64 [sp + 0xb0]\n 14391: a2 = a3 <u a2\n 14394: a3 = u64 [sp + 0xa8]\n 14398: a2 = 0 if a3 != 0\n 14400: a3 = u64 [sp + 0x98]\n 14404: a2 = 0 if a3 != 0\n 14406: u8 [a0 + 0x1] = a1\n 14409: jump @256 if a2 == 0\n      : @250 (gas: 12)\n 14413: a0 = u64 [sp + 0x50]\n 14416: a1 = u64 [sp + 0x48]\n 14419: a0 = a0 | a1\n 14422: a1 = u64 [sp + 0x60]\n 14425: a2 = u64 [sp + 0x58]\n 14428: a1 = a1 | a2\n 14431: a0 = a0 | a1\n 14434: s0 = a0 >u 0\n 14436: a0 = u64 [sp + 0xa0]\n 14440: i32 a0 = a0 + 0x40\n 14443: a1 = 0x20\n 14446: ra = 218, jump @0\n      : @251 [@dyn 109] (gas: 41)\n 14452: u8 [a0 + 30] = 0\n 14455: u8 [a0 + 29] = 0\n 14458: u8 [a0 + 28] = 0\n 14461: u8 [a0 + 27] = 0\n 14464: u8 [a0 + 26] = 0\n 14467: u8 [a0 + 25] = 0\n 14470: u8 [a0 + 24] = 0\n 14473: u8 [a0 + 23] = 0\n 14476: u8 [a0 + 22] = 0\n 14479: u8 [a0 + 21] = 0\n 14482: u8 [a0 + 20] = 0\n 14485: u8 [a0 + 19] = 0\n 14488: u8 [a0 + 18] = 0\n 14491: u8 [a0 + 17] = 0\n 14494: u8 [a0 + 16] = 0\n 14497: u8 [a0 + 15] = 0\n 14500: u8 [a0 + 14] = 0\n 14503: u8 [a0 + 13] = 0\n 14506: u8 [a0 + 12] = 0\n 14509: u8 [a0 + 11] = 0\n 14512: u8 [a0 + 10] = 0\n 14515: u8 [a0 + 9] = 0\n 14518: u8 [a0 + 8] = 0\n 14521: u8 [a0 + 7] = 0\n 14524: u8 [a0 + 6] = 0\n 14527: u8 [a0 + 5] = 0\n 14530: u8 [a0 + 4] = 0\n 14533: u8 [a0 + 3] = 0\n 14536: u8 [a0 + 2] = 0\n 14539: u8 [a0 + 1] = 0\n 14542: u8 [a0 + 0x1f] = s0\n 14545: s0 = 0x100000000\n 14555: a1 = 0xffffffa0\n 14565: a2 = u64 [sp + 0xb0]\n 14569: a1 = a2 <u a1\n 14572: a2 = u64 [sp + 0xa8]\n 14576: a1 = 0 if a2 != 0\n 14578: a2 = u64 [sp + 0x98]\n 14582: a1 = 0 if a2 != 0\n 14584: u8 [a0 + 0] = 0\n 14586: jump @256 if a1 == 0\n      : @252 (gas: 12)\n 14590: a0 = u64 [sp + 0x28]\n 14593: a1 = u64 [sp + 0x20]\n 14596: a0 = a0 | a1\n 14599: a1 = u64 [sp + 0x38]\n 14602: a2 = u64 [sp + 0x30]\n 14605: a1 = a1 | a2\n 14608: a0 = a0 | a1\n 14611: s1 = a0 >u 0\n 14613: a0 = u64 [sp + 0xa0]\n 14617: i32 a0 = a0 + 0x60\n 14620: a1 = 0x20\n 14623: ra = 220, jump @0\n      : @253 [@dyn 110] (gas: 40)\n 14629: u8 [a0 + 30] = 0\n 14632: u8 [a0 + 29] = 0\n 14635: u8 [a0 + 28] = 0\n 14638: u8 [a0 + 27] = 0\n 14641: u8 [a0 + 26] = 0\n 14644: u8 [a0 + 25] = 0\n 14647: u8 [a0 + 24] = 0\n 14650: u8 [a0 + 23] = 0\n 14653: u8 [a0 + 22] = 0\n 14656: u8 [a0 + 21] = 0\n 14659: u8 [a0 + 20] = 0\n 14662: u8 [a0 + 19] = 0\n 14665: u8 [a0 + 18] = 0\n 14668: u8 [a0 + 17] = 0\n 14671: u8 [a0 + 16] = 0\n 14674: u8 [a0 + 15] = 0\n 14677: u8 [a0 + 14] = 0\n 14680: u8 [a0 + 13] = 0\n 14683: u8 [a0 + 12] = 0\n 14686: u8 [a0 + 11] = 0\n 14689: u8 [a0 + 10] = 0\n 14692: u8 [a0 + 9] = 0\n 14695: u8 [a0 + 8] = 0\n 14698: u8 [a0 + 7] = 0\n 14701: u8 [a0 + 6] = 0\n 14704: u8 [a0 + 5] = 0\n 14707: u8 [a0 + 4] = 0\n 14710: u8 [a0 + 3] = 0\n 14713: u8 [a0 + 2] = 0\n 14716: u8 [a0 + 1] = 0\n 14719: u8 [a0 + 0] = 0\n 14721: a1 = s0 + 0xffffffffffffff80\n 14724: a2 = u64 [sp + 0xb0]\n 14728: a1 = a2 <u a1\n 14731: a2 = u64 [sp + 0xa8]\n 14735: a1 = 0 if a2 != 0\n 14737: a2 = u64 [sp + 0x98]\n 14741: a1 = 0 if a2 != 0\n 14743: u8 [a0 + 0x1f] = s1\n 14746: jump @256 if a1 == 0\n      : @254 (gas: 27)\n 14750: a0 = u64 [sp + 0xb0]\n 14754: a1 = a0 + 0xa0\n 14758: u64 [sp + 0x98] = a1\n 14762: a0 = a1 <u a0\n 14765: a1 = u64 [sp + 0xa8]\n 14769: s1 = a1 + a0\n 14772: s0 = s1 <u a1\n 14775: s0 = a0 if a0 == 0\n 14778: a0 = u64 [sp + 0x90]\n 14782: s0 = s0 + a0\n 14785: a0 = s0 <u a0\n 14788: a1 = u64 [sp + 0x88]\n 14792: a0 = a0 + a1\n 14795: u64 [sp + 0xb0] = a0\n 14799: a0 = u64 [sp + 0x8]\n 14802: a1 = u64 [sp]\n 14804: a0 = a0 | a1\n 14807: a1 = u64 [sp + 0x18]\n 14810: a2 = u64 [sp + 0x10]\n 14813: a1 = a1 | a2\n 14816: a0 = a0 | a1\n 14819: a0 = a0 >u 0\n 14821: u64 [sp + 0xa8] = a0\n 14825: a0 = u64 [sp + 0xa0]\n 14829: i32 a0 = a0 + 0x80\n 14833: a1 = 0x20\n 14836: ra = 222, jump @0\n      : @255 [@dyn 111] (gas: 45)\n 14842: u8 [a0 + 30] = 0\n 14845: u8 [a0 + 29] = 0\n 14848: u8 [a0 + 28] = 0\n 14851: u8 [a0 + 27] = 0\n 14854: u8 [a0 + 26] = 0\n 14857: u8 [a0 + 25] = 0\n 14860: u8 [a0 + 24] = 0\n 14863: u8 [a0 + 23] = 0\n 14866: u8 [a0 + 22] = 0\n 14869: u8 [a0 + 21] = 0\n 14872: u8 [a0 + 20] = 0\n 14875: u8 [a0 + 19] = 0\n 14878: u8 [a0 + 18] = 0\n 14881: u8 [a0 + 17] = 0\n 14884: u8 [a0 + 16] = 0\n 14887: u8 [a0 + 15] = 0\n 14890: u8 [a0 + 14] = 0\n 14893: u8 [a0 + 13] = 0\n 14896: u8 [a0 + 12] = 0\n 14899: u8 [a0 + 11] = 0\n 14902: u8 [a0 + 10] = 0\n 14905: u8 [a0 + 9] = 0\n 14908: u8 [a0 + 8] = 0\n 14911: u8 [a0 + 7] = 0\n 14914: u8 [a0 + 6] = 0\n 14917: u8 [a0 + 5] = 0\n 14920: u8 [a0 + 4] = 0\n 14923: u8 [a0 + 3] = 0\n 14926: u8 [a0 + 2] = 0\n 14929: u8 [a0 + 1] = 0\n 14932: u8 [a0 + 0] = 0\n 14934: a1 = u64 [sp + 0xa8]\n 14938: u8 [a0 + 0x1f] = a1\n 14941: a0 = u64 [sp + 0x40]\n 14944: a1 = u64 [sp + 0x98]\n 14948: u64 [a0] = a1\n 14950: a1 = u64 [sp + 0xb0]\n 14954: u64 [a0 + 0x18] = a1\n 14957: u64 [a0 + 0x8] = s1\n 14960: u64 [a0 + 0x10] = s0\n 14963: ra = u64 [sp + 0xc8]\n 14967: s0 = u64 [sp + 0xc0]\n 14971: s1 = u64 [sp + 0xb8]\n 14975: sp = sp + 0xd0\n 14979: ret\n      : @256 (gas: 1)\n 14981: trap\n      : @257 (gas: 8)\n 14982: a0 = u64 [sp + 0x290]\n 14986: a1 = u64 [sp + 0x298]\n 14990: a2 = u64 [sp + 0x288]\n 14994: a3 = u64 [sp + 0x280]\n 14998: a1 = a1 | a2\n 15001: a0 = a0 | a3\n 15004: a0 = a0 | a1\n 15007: jump @265 if a0 != 0\n      : @258 (gas: 2)\n 15011: a0 = i32 [0x200a8]\n 15016: jump @265 if a0 <=u 67\n      : @259 (gas: 58)\n 15021: i32 a0 = sp + 0x2a0\n 15025: a1 = 0x4\n 15028: ecalli 2 // 'call_data_load'\n 15030: a0 = u64 [sp + 0x2a0]\n 15034: u64 [sp + 0xb8] = a0\n 15038: a0 = u64 [sp + 0x2a8]\n 15042: u64 [sp + 0xb0] = a0\n 15046: a0 = u64 [sp + 0x2b0]\n 15050: u64 [sp + 0xa8] = a0\n 15054: s1 = u64 [sp + 0x2b8]\n 15058: i32 a0 = sp + 0x2a0\n 15062: a1 = 0x24\n 15065: ecalli 2 // 'call_data_load'\n 15067: a0 = u64 [sp + 0x2a0]\n 15071: a1 = u64 [sp + 0x2a8]\n 15075: a2 = u64 [sp + 0x2b0]\n 15079: a3 = u64 [sp + 0x2b8]\n 15083: u64 [sp + 0x1b8] = a3\n 15087: u64 [sp + 0x1b0] = a2\n 15091: u64 [sp + 0x1a8] = a1\n 15095: u64 [sp + 0x1a0] = a0\n 15099: u64 [sp + 0x1d8] = s1\n 15103: a0 = u64 [sp + 0xa8]\n 15107: u64 [sp + 0x1d0] = a0\n 15111: a0 = u64 [sp + 0xb0]\n 15115: u64 [sp + 0x1c8] = a0\n 15119: a0 = sp + 0x1e0\n 15123: a1 = sp + 0x1c0\n 15127: a2 = sp + 0x1a0\n 15131: a3 = u64 [sp + 0xb8]\n 15135: u64 [sp + 0x1c0] = a3\n 15139: ra = 0xe0\n 15143: sp = sp + 0xffffffffffffff20\n 15147: u64 [sp + 0xd8] = ra\n 15151: u64 [sp + 0xd0] = s0\n 15155: u64 [sp + 0xc8] = s1\n 15159: s0 = sp + 0xe0\n 15163: sp = sp & 0xffffffffffffffe0\n 15166: a3 = u64 [a2]\n 15168: u64 [sp + 0x78] = a3\n 15171: a3 = u64 [a2 + 0x8]\n 15174: u64 [sp + 0x70] = a3\n 15177: a3 = u64 [a2 + 0x10]\n 15180: u64 [sp + 0x68] = a3\n 15183: a2 = u64 [a2 + 0x18]\n 15186: u64 [sp + 0x60] = a2\n 15189: a2 = u64 [a1]\n 15191: u64 [sp + 0x58] = a2\n 15194: a2 = u64 [a1 + 0x8]\n 15197: u64 [sp + 0x48] = a2\n 15200: a2 = u64 [a1 + 0x10]\n 15203: u64 [sp + 0x40] = a2\n 15206: s1 = u64 [a1 + 0x18]\n 15209: u64 [sp + 0x50] = a0\n 15212: a1 = 0x20\n 15215: a0 = 0\n 15217: ra = 0xca\n 15221: jump @0\n      : @260 [@dyn 112] (gas: 43)\n 15224: a0 = u64 [sp + 0x1e0]\n 15228: u64 [sp + 0xb0] = a0\n 15232: a0 = u64 [sp + 0x1e8]\n 15236: u64 [sp + 0xa8] = a0\n 15240: a0 = u64 [sp + 0x1f0]\n 15244: u64 [sp + 0xa0] = a0\n 15248: a0 = u64 [sp + 0x1f8]\n 15252: u64 [sp + 0x98] = a0\n 15256: a0 = u64 [sp + 0x200]\n 15260: u64 [sp + 0x90] = a0\n 15264: a0 = u64 [sp + 0x208]\n 15268: u64 [sp + 0x88] = a0\n 15272: a0 = u64 [sp + 0x210]\n 15276: u64 [sp + 0x80] = a0\n 15280: a0 = u64 [sp + 0x218]\n 15284: u64 [sp + 0x78] = a0\n 15287: a0 = u64 [sp + 0x220]\n 15291: u64 [sp + 0x70] = a0\n 15294: a0 = u64 [sp + 0x228]\n 15298: u64 [sp + 0x68] = a0\n 15301: a0 = u64 [sp + 0x230]\n 15305: u64 [sp + 0x60] = a0\n 15308: a0 = u64 [sp + 0x238]\n 15312: u64 [sp + 0x58] = a0\n 15315: a0 = u64 [sp + 0x240]\n 15319: u64 [sp + 0x50] = a0\n 15322: a0 = u64 [sp + 0x248]\n 15326: u64 [sp + 0x48] = a0\n 15329: a0 = u64 [sp + 0x250]\n 15333: u64 [sp + 0x40] = a0\n 15336: a0 = u64 [sp + 0x258]\n 15340: u64 [sp + 0x38] = a0\n 15343: a0 = u64 [sp + 0x260]\n 15347: u64 [sp + 0x30] = a0\n 15350: a0 = u64 [sp + 0x268]\n 15354: u64 [sp + 0x28] = a0\n 15357: a0 = u64 [sp + 0x270]\n 15361: u64 [sp + 0x20] = a0\n 15364: a0 = u64 [sp + 0x278]\n 15368: u64 [sp + 0x18] = a0\n 15371: a0 = 0x40\n 15374: a1 = 0x20\n 15377: ra = 226, jump @0\n      : @261 [@dyn 113] (gas: 148)\n 15383: a1 = u8 [a0 + 0x1]\n 15386: a2 = u8 [a0]\n 15388: a3 = u8 [a0 + 0x2]\n 15391: a4 = u8 [a0 + 0x3]\n 15394: a1 = a1 << 0x8\n 15397: a1 = a1 | a2\n 15400: a3 = a3 << 0x10\n 15403: a4 = a4 << 0x18\n 15406: a3 = a3 | a4\n 15409: a1 = a1 | a3\n 15412: a2 = u8 [a0 + 0x5]\n 15415: a3 = u8 [a0 + 0x4]\n 15418: a4 = u8 [a0 + 0x6]\n 15421: a5 = u8 [a0 + 0x7]\n 15424: a2 = a2 << 0x8\n 15427: a2 = a2 | a3\n 15430: a4 = a4 << 0x10\n 15433: a5 = a5 << 0x18\n 15436: a4 = a4 | a5\n 15439: a2 = a2 | a4\n 15442: a2 = a2 << 0x20\n 15445: t0 = a2 | a1\n 15448: a2 = u8 [a0 + 0x9]\n 15451: a3 = u8 [a0 + 0x8]\n 15454: a4 = u8 [a0 + 0xa]\n 15457: a5 = u8 [a0 + 0xb]\n 15460: a2 = a2 << 0x8\n 15463: a2 = a2 | a3\n 15466: a4 = a4 << 0x10\n 15469: a5 = a5 << 0x18\n 15472: a4 = a4 | a5\n 15475: a2 = a2 | a4\n 15478: a3 = u8 [a0 + 0xd]\n 15481: a4 = u8 [a0 + 0xc]\n 15484: a5 = u8 [a0 + 0xe]\n 15487: s1 = u8 [a0 + 0xf]\n 15490: a3 = a3 << 0x8\n 15493: a3 = a3 | a4\n 15496: a5 = a5 << 0x10\n 15499: s1 = s1 << 0x18\n 15502: a5 = a5 | s1\n 15505: a3 = a3 | a5\n 15508: a3 = a3 << 0x20\n 15511: a2 = a2 | a3\n 15514: a3 = u8 [a0 + 0x11]\n 15517: a4 = u8 [a0 + 0x10]\n 15520: a5 = u8 [a0 + 0x12]\n 15523: s1 = u8 [a0 + 0x13]\n 15526: a3 = a3 << 0x8\n 15529: a3 = a3 | a4\n 15532: a5 = a5 << 0x10\n 15535: s1 = s1 << 0x18\n 15538: a5 = a5 | s1\n 15541: a3 = a3 | a5\n 15544: a4 = u8 [a0 + 0x15]\n 15547: a5 = u8 [a0 + 0x14]\n 15550: s1 = u8 [a0 + 0x16]\n 15553: a1 = u8 [a0 + 0x17]\n 15556: a4 = a4 << 0x8\n 15559: a4 = a4 | a5\n 15562: s1 = s1 << 0x10\n 15565: a1 = a1 << 0x18\n 15568: a1 = a1 | s1\n 15571: a1 = a1 | a4\n 15574: a1 = a1 << 0x20\n 15577: a3 = a3 | a1\n 15580: a1 = u8 [a0 + 0x19]\n 15583: a4 = u8 [a0 + 0x18]\n 15586: a5 = u8 [a0 + 0x1a]\n 15589: s1 = u8 [a0 + 0x1b]\n 15592: a1 = a1 << 0x8\n 15595: a1 = a1 | a4\n 15598: a5 = a5 << 0x10\n 15601: s1 = s1 << 0x18\n 15604: a5 = a5 | s1\n 15607: a1 = a1 | a5\n 15610: a4 = u8 [a0 + 0x1d]\n 15613: a5 = u8 [a0 + 0x1c]\n 15616: s1 = u8 [a0 + 0x1e]\n 15619: a0 = u8 [a0 + 0x1f]\n 15622: a4 = a4 << 0x8\n 15625: a4 = a4 | a5\n 15628: s1 = s1 << 0x10\n 15631: a0 = a0 << 0x18\n 15634: a0 = a0 | s1\n 15637: a0 = a0 | a4\n 15640: a0 = a0 << 0x20\n 15643: a0 = a0 | a1\n 15646: s1 = reverse a0\n 15648: a3 = reverse a3\n 15650: u64 [sp + 0x8] = a3\n 15653: a1 = reverse a2\n 15655: u64 [sp + 0x10] = a1\n 15658: a2 = reverse t0\n 15660: u64 [sp + 0xb8] = a2\n 15664: a0 = sp + 0xc0\n 15668: u64 [sp] = a0\n 15670: a0 = u64 [sp + 0x18]\n 15673: u64 [sp + 0xd8] = a0\n 15677: a0 = u64 [sp + 0x20]\n 15680: u64 [sp + 0xd0] = a0\n 15684: a0 = u64 [sp + 0x28]\n 15687: u64 [sp + 0xc8] = a0\n 15691: a0 = u64 [sp + 0x30]\n 15694: u64 [sp + 0xc0] = a0\n 15698: a0 = u64 [sp + 0x38]\n 15701: u64 [sp + 0xf8] = a0\n 15705: a0 = u64 [sp + 0x40]\n 15708: u64 [sp + 0xf0] = a0\n 15712: a0 = u64 [sp + 0x48]\n 15715: u64 [sp + 0xe8] = a0\n 15719: a0 = u64 [sp + 0x50]\n 15722: u64 [sp + 0xe0] = a0\n 15726: a0 = u64 [sp + 0x58]\n 15729: u64 [sp + 0x118] = a0\n 15733: a0 = u64 [sp + 0x60]\n 15736: u64 [sp + 0x110] = a0\n 15740: a0 = u64 [sp + 0x68]\n 15743: u64 [sp + 0x108] = a0\n 15747: a0 = u64 [sp + 0x70]\n 15750: u64 [sp + 0x100] = a0\n 15754: a0 = u64 [sp + 0x78]\n 15757: u64 [sp + 0x138] = a0\n 15761: a0 = u64 [sp + 0x80]\n 15765: u64 [sp + 0x130] = a0\n 15769: a0 = u64 [sp + 0x88]\n 15773: u64 [sp + 0x128] = a0\n 15777: a0 = u64 [sp + 0x90]\n 15781: u64 [sp + 0x120] = a0\n 15785: a0 = u64 [sp + 0x98]\n 15789: u64 [sp + 0x158] = a0\n 15793: a0 = u64 [sp + 0xa0]\n 15797: u64 [sp + 0x150] = a0\n 15801: a0 = u64 [sp + 0xa8]\n 15805: u64 [sp + 0x148] = a0\n 15809: a0 = u64 [sp + 0xb0]\n 15813: u64 [sp + 0x140] = a0\n 15817: u64 [sp + 0x178] = a2\n 15821: u64 [sp + 0x170] = a1\n 15825: u64 [sp + 0x168] = a3\n 15829: a0 = sp + 0x180\n 15833: a1 = sp + 0x160\n 15837: a2 = sp + 0x140\n 15841: a3 = sp + 0x120\n 15845: a4 = sp + 0x100\n 15849: a5 = sp + 0xe0\n 15853: u64 [sp + 0x160] = s1\n 15857: ra = 228, jump @245\n      : @262 [@dyn 114] (gas: 12)\n 15863: a4 = u64 [sp + 0x8]\n 15866: a2 = s1\n 15868: a0 = u64 [sp + 0xb8]\n 15872: a0 = a0 | a4\n 15875: s1 = u64 [sp + 0x10]\n 15878: a1 = a2 | s1\n 15881: a1 = a1 | a0\n 15884: a1 = a1 >> 0x20\n 15887: a0 = a0 | s1\n 15890: a0 = a0 << 0x20\n 15893: a0 = a0 | a1\n 15896: jump @264 if a0 != 0\n      : @263 (gas: 29)\n 15899: a0 = u64 [sp + 0x188]\n 15903: a1 = u64 [sp + 0x198]\n 15907: u64 [sp + 0xb0] = a1\n 15911: t1 = u64 [sp + 0x180]\n 15915: a1 = u64 [sp + 0x190]\n 15919: t2 = a0 ^ a4\n 15922: a5 = a0 <u a4\n 15925: ra = t1 <u a2\n 15928: a5 = ra if t2 == 0\n 15931: a3 = a1 - s1\n 15934: t2 = a3 - a5\n 15937: t0 = a3 <u a5\n 15940: a3 = a1 <u s1\n 15943: a1 = u64 [sp + 0xb8]\n 15947: a5 = u64 [sp + 0xb0]\n 15951: a5 = a5 - a1\n 15954: a5 = a5 - a3\n 15957: a5 = a5 - t0\n 15960: a0 = a0 - a4\n 15963: a0 = a0 - ra\n 15966: s1 = t1 - a2\n 15969: a0 = a0 | a5\n 15972: a1 = s1 | t2\n 15975: a1 = a1 | a0\n 15978: a0 = a0 | t2\n 15981: a1 = a1 >> 0x20\n 15984: a0 = a0 << 0x20\n 15987: a0 = a0 | a1\n 15990: jump @267 if a0 == 0\n      : @264 (gas: 1)\n 15993: trap\n      : @265 (gas: 3)\n 15994: a0 = 0\n 15996: a1 = 0\n 15998: ra = 230, jump @0\n      : @266 [@dyn 115] (gas: 5)\n 16004: i32 a1 = a0 + 0\n 16006: a0 = 0x1\n 16009: a2 = 0\n 16011: ecalli 12 // 'seal_return'\n 16013: fallthrough\n      : @267 (gas: 4)\n 16014: i32 a0 = a2 + 0\n 16016: i32 s1 = s1 + 0\n 16018: a1 = s1\n 16020: ra = 232, jump @0\n      : @268 [@dyn 116] (gas: 6)\n 16026: i32 a1 = a0 + 0\n 16028: a0 = 0\n 16030: a2 = s1\n 16032: ra = 0xea\n 16036: ecalli 12 // 'seal_return'\n 16038: fallthrough\n      : @269 [@dyn 117] (gas: 13)\n 16039: sp = sp + 0xffffffffffffffb0\n 16042: u64 [sp + 0x48] = ra\n 16045: u64 [sp + 0x40] = s0\n 16048: s0 = sp + 0x50\n 16051: sp = sp & 0xfffffffffffffff0\n 16054: u64 [sp + 48] = 0\n 16057: u64 [sp + 40] = 0\n 16060: u64 [sp + 32] = 0\n 16063: a0 = 0x4e487b7100000000\n 16073: a1 = sp + 0x20\n 16076: u64 [sp + 0x38] = a0\n 16079: a0 = 0\n 16081: ra = 236, jump @23\n      : @270 [@dyn 118] (gas: 7)\n 16087: u64 [sp + 24] = 0\n 16090: u64 [sp + 16] = 0\n 16093: u64 [sp + 0] = 0x22\n 16096: a0 = 0x4\n 16099: a1 = sp\n 16101: u64 [sp + 8] = 0\n 16104: ra = 238, jump @23\n      : @271 [@dyn 119] (gas: 3)\n 16110: a1 = 0x24\n 16113: a0 = 0\n 16115: ra = 240, jump @0\n      : @272 [@dyn 120] (gas: 6)\n 16121: i32 a1 = a0 + 0\n 16123: a0 = 0x1\n 16126: a2 = 0x24\n 16129: ra = 0xf2\n 16133: ecalli 12 // 'seal_return'\n 16135: fallthrough\n      : @273 [@dyn 121] (gas: 33)\n 16136: sp = sp + 0xffffffffffffffa0\n 16139: u64 [sp + 0x58] = ra\n 16142: u64 [sp + 0x50] = s0\n 16145: u64 [sp + 0x48] = s1\n 16148: s0 = sp + 0x60\n 16151: sp = sp & 0xfffffffffffffff0\n 16154: a2 = u64 [a1 + 0x10]\n 16157: a5 = u64 [a1 + 0x8]\n 16160: a4 = u64 [a1]\n 16162: a1 = u64 [a1 + 0x18]\n 16165: t0 = a2 << 0x3f\n 16168: a3 = a5 >> 0x1\n 16171: t0 = a3 | t0\n 16174: a3 = a1 << 0x3f\n 16177: a2 = a2 >> 0x1\n 16180: a3 = a3 | a2\n 16183: a5 = a5 << 0x3f\n 16186: a2 = a4 >> 0x1\n 16189: a5 = a5 | a2\n 16192: t1 = a1 >> 0x1\n 16195: a4 = a4 & 0x1\n 16198: a1 = -a4\n 16200: s1 = a4 <u 0x1\n 16203: a2 = a5 & 0x7f\n 16206: t2 = a1 & a3\n 16209: a3 = a1 & t0\n 16212: a2 = a5 if a4 != 0\n 16215: a4 = a1 & t1\n 16218: a1 = a2 <u 0x20\n 16221: a1 = 0 if a3 != 0\n 16223: a5 = t2 | a4\n 16226: a1 = 0 if a5 != 0\n 16228: jump @275 if s1 != a1\n      : @274 (gas: 10)\n 16231: u64 [a0] = a2\n 16233: u64 [a0 + 0x8] = a3\n 16236: u64 [a0 + 0x10] = t2\n 16239: u64 [a0 + 0x18] = a4\n 16242: sp = s0 + 0xffffffffffffffa0\n 16245: ra = u64 [sp + 0x58]\n 16248: s0 = u64 [sp + 0x50]\n 16251: s1 = u64 [sp + 0x48]\n 16254: sp = sp + 0x60\n 16257: ret\n      : @275 (gas: 8)\n 16259: u64 [sp + 48] = 0\n 16262: u64 [sp + 40] = 0\n 16265: u64 [sp + 32] = 0\n 16268: a0 = 0x4e487b7100000000\n 16278: a1 = sp + 0x20\n 16281: u64 [sp + 0x38] = a0\n 16284: a0 = 0\n 16286: ra = 244, jump @23\n      : @276 [@dyn 122] (gas: 7)\n 16292: u64 [sp + 24] = 0\n 16295: u64 [sp + 16] = 0\n 16298: u64 [sp + 0] = 0x22\n 16301: a0 = 0x4\n 16304: a1 = sp\n 16306: u64 [sp + 8] = 0\n 16309: ra = 246, jump @23\n      : @277 [@dyn 123] (gas: 3)\n 16315: a1 = 0x24\n 16318: a0 = 0\n 16320: ra = 248, jump @0\n      : @278 [@dyn 124] (gas: 6)\n 16326: i32 a1 = a0 + 0\n 16328: a0 = 0x1\n 16331: a2 = 0x24\n 16334: ra = 0xfa\n 16338: ecalli 12 // 'seal_return'\n 16340: fallthrough\n      : @279 [@dyn 125] (gas: 17)\n 16341: sp = sp + 0xffffffffffffffa0\n 16344: u64 [sp + 0x58] = ra\n 16347: u64 [sp + 0x50] = s0\n 16350: u64 [sp + 0x48] = s1\n 16353: s0 = sp + 0x60\n 16356: sp = sp & 0xffffffffffffffe0\n 16359: a2 = u64 [a1]\n 16361: u64 [sp + 0x10] = a2\n 16364: a2 = u64 [a1 + 0x8]\n 16367: u64 [sp + 0x8] = a2\n 16370: a2 = u64 [a1 + 0x10]\n 16373: u64 [sp] = a2\n 16375: s1 = u64 [a1 + 0x18]\n 16378: u64 [sp + 0x18] = a0\n 16381: a1 = 0x20\n 16384: a0 = 0\n 16386: ra = 252, jump @0\n      : @280 [@dyn 126] (gas: 70)\n 16392: a1 = reverse s1\n 16394: a2 = u64 [sp]\n 16396: a2 = reverse a2\n 16398: a3 = u64 [sp + 0x8]\n 16401: a3 = reverse a3\n 16403: a4 = u64 [sp + 0x10]\n 16406: a4 = reverse a4\n 16408: a5 = a4 >> 0x38\n 16411: u8 [a0 + 0x1f] = a5\n 16414: a5 = a4 >> 0x30\n 16417: u8 [a0 + 0x1e] = a5\n 16420: a5 = a4 >> 0x28\n 16423: u8 [a0 + 0x1d] = a5\n 16426: a5 = a4 >> 0x20\n 16429: u8 [a0 + 0x1c] = a5\n 16432: a5 = a4 >> 0x18\n 16435: u8 [a0 + 0x1b] = a5\n 16438: a5 = a4 >> 0x10\n 16441: u8 [a0 + 0x1a] = a5\n 16444: a5 = a4 >> 0x8\n 16447: u8 [a0 + 0x19] = a5\n 16450: u8 [a0 + 0x18] = a4\n 16453: a4 = a3 >> 0x38\n 16456: u8 [a0 + 0x17] = a4\n 16459: a4 = a3 >> 0x30\n 16462: u8 [a0 + 0x16] = a4\n 16465: a4 = a3 >> 0x28\n 16468: u8 [a0 + 0x15] = a4\n 16471: a4 = a3 >> 0x20\n 16474: u8 [a0 + 0x14] = a4\n 16477: a4 = a3 >> 0x18\n 16480: u8 [a0 + 0x13] = a4\n 16483: a4 = a3 >> 0x10\n 16486: u8 [a0 + 0x12] = a4\n 16489: a4 = a3 >> 0x8\n 16492: u8 [a0 + 0x11] = a4\n 16495: u8 [a0 + 0x10] = a3\n 16498: a3 = a2 >> 0x38\n 16501: u8 [a0 + 0xf] = a3\n 16504: a3 = a2 >> 0x30\n 16507: u8 [a0 + 0xe] = a3\n 16510: a3 = a2 >> 0x28\n 16513: u8 [a0 + 0xd] = a3\n 16516: a3 = a2 >> 0x20\n 16519: u8 [a0 + 0xc] = a3\n 16522: a3 = a2 >> 0x18\n 16525: u8 [a0 + 0xb] = a3\n 16528: a3 = a2 >> 0x10\n 16531: u8 [a0 + 0xa] = a3\n 16534: a3 = a2 >> 0x8\n 16537: u8 [a0 + 0x9] = a3\n 16540: u8 [a0 + 0x8] = a2\n 16543: a2 = a1 >> 0x38\n 16546: u8 [a0 + 0x7] = a2\n 16549: a2 = a1 >> 0x30\n 16552: u8 [a0 + 0x6] = a2\n 16555: a2 = a1 >> 0x28\n 16558: u8 [a0 + 0x5] = a2\n 16561: a2 = a1 >> 0x20\n 16564: u8 [a0 + 0x4] = a2\n 16567: a2 = a1 >> 0x18\n 16570: u8 [a0 + 0x3] = a2\n 16573: a2 = a1 >> 0x10\n 16576: u8 [a0 + 0x2] = a2\n 16579: a2 = a1 >> 0x8\n 16582: u8 [a0 + 0x1] = a2\n 16585: u8 [a0] = a1\n 16587: a1 = 0x20\n 16590: a0 = 0\n 16592: ra = 254, jump @0\n      : @281 [@dyn 127] (gas: 23)\n 16598: i32 a0 = a0 + 0\n 16600: i32 a2 = sp + 0x20\n 16603: a1 = 0x20\n 16606: ecalli 8 // 'hash_keccak_256'\n 16608: a0 = u64 [sp + 0x38]\n 16611: a1 = u64 [sp + 0x30]\n 16614: a2 = u64 [sp + 0x28]\n 16617: a3 = u64 [sp + 0x20]\n 16620: a0 = reverse a0\n 16622: a1 = reverse a1\n 16624: a2 = reverse a2\n 16626: a3 = reverse a3\n 16628: a4 = u64 [sp + 0x18]\n 16631: u64 [a4 + 0x18] = a3\n 16634: u64 [a4 + 0x10] = a2\n 16637: u64 [a4 + 0x8] = a1\n 16640: u64 [a4] = a0\n 16642: sp = s0 + 0xffffffffffffffa0\n 16645: ra = u64 [sp + 0x58]\n 16648: s0 = u64 [sp + 0x50]\n 16651: s1 = u64 [sp + 0x48]\n 16654: sp = sp + 0x60\n 16657: ret\n      : @282 (gas: 39)\n 16659: sp = sp + 0xfffffffffffffea0\n 16663: u64 [sp + 0x158] = ra\n 16667: u64 [sp + 0x150] = s0\n 16671: u64 [sp + 0x148] = s1\n 16675: s0 = sp + 0x160\n 16679: sp = sp & 0xffffffffffffffe0\n 16682: u64 [sp + 0x8] = a0\n 16685: a0 = u64 [a2 + 0x18]\n 16688: u64 [sp + 0xb0] = a0\n 16692: a0 = u64 [a2 + 0x10]\n 16695: u64 [sp + 0xa8] = a0\n 16699: a0 = u64 [a2 + 0x8]\n 16702: u64 [sp + 0xa0] = a0\n 16706: a0 = u64 [a2]\n 16708: u64 [sp + 0xb8] = a0\n 16712: a4 = u64 [a1 + 0x18]\n 16715: a3 = u64 [a1 + 0x10]\n 16718: a2 = u64 [a1 + 0x8]\n 16721: a0 = u64 [a1]\n 16723: u64 [sp + 0x18] = a4\n 16726: u64 [sp + 0x118] = a4\n 16730: u64 [sp + 0x20] = a3\n 16733: u64 [sp + 0x110] = a3\n 16737: u64 [sp + 0x68] = a2\n 16740: u64 [sp + 0x108] = a2\n 16744: u64 [sp + 0x70] = a0\n 16747: u64 [sp + 0x100] = a0\n 16751: u64 [sp + 312] = 0\n 16755: u64 [sp + 304] = 0\n 16759: u64 [sp + 296] = 0\n 16763: u64 [sp + 288] = 0\n 16767: u32 [sp + 320] = 0x20\n 16772: i32 a1 = sp + 0x100\n 16776: i32 a3 = sp + 0x120\n 16780: i32 a4 = sp + 0x140\n 16784: a2 = 0xffffffffffffffff\n 16787: a0 = 0\n 16789: ecalli 7 // 'get_storage'\n 16791: fallthrough\n      : @283 (gas: 32)\n 16792: t0 = u64 [sp + 0x130]\n 16796: t1 = u64 [sp + 0x128]\n 16800: t2 = u64 [sp + 0x138]\n 16804: a5 = u64 [sp + 0x120]\n 16808: a0 = t0 << 0x3f\n 16811: a1 = t1 >> 0x1\n 16814: a0 = a0 | a1\n 16817: a1 = t2 << 0x3f\n 16820: a2 = t0 >> 0x1\n 16823: a1 = a1 | a2\n 16826: a2 = t1 << 0x3f\n 16829: a3 = a5 >> 0x1\n 16832: a4 = a3 | a2\n 16835: a2 = t2 >> 0x1\n 16838: u64 [sp + 0x78] = a5\n 16841: a5 = a5 & 0x1\n 16844: a3 = -a5\n 16846: ra = a4 & 0x7f\n 16849: a1 = a1 & a3\n 16852: s1 = a3 & a0\n 16855: a4 = ra if a5 == 0\n 16858: a2 = a2 & a3\n 16861: u64 [sp + 0x58] = a4\n 16864: a0 = a4 <u 0x20\n 16867: u64 [sp + 0x48] = s1\n 16870: a0 = 0 if s1 != 0\n 16872: u64 [sp + 0x50] = a1\n 16875: u64 [sp + 0x40] = a2\n 16878: a1 = a1 | a2\n 16881: a0 = 0 if a1 != 0\n 16883: a1 = a5 <u 0x1\n 16886: jump @302 if a1 != a0\n      : @284 (gas: 17)\n 16890: u64 [sp + 0x98] = a5\n 16894: u64 [sp + 0x10] = ra\n 16897: u64 [sp + 0x80] = t1\n 16901: u64 [sp + 0x88] = t0\n 16905: u64 [sp + 0x90] = t2\n 16909: a0 = u64 [sp + 0xb8]\n 16913: a2 = u64 [sp + 0xa8]\n 16917: a0 = a0 | a2\n 16920: a1 = u64 [sp + 0xb0]\n 16924: a3 = u64 [sp + 0xa0]\n 16928: a1 = a1 | a3\n 16931: a0 = a0 | a1\n 16934: a0 = a0 >> 0x20\n 16937: a1 = a1 | a2\n 16940: a1 = a1 << 0x20\n 16943: a0 = a0 | a1\n 16946: jump @301 if a0 != 0\n      : @285 (gas: 4)\n 16950: s1 = u64 [sp + 0xb8]\n 16954: i32 a0 = s1 + 0\n 16956: a1 = 0x20\n 16959: ra = 256, jump @0\n      : @286 [@dyn 128] (gas: 85)\n 16965: a1 = u64 [sp + 0x40]\n 16968: a1 = reverse a1\n 16970: a2 = u64 [sp + 0x58]\n 16973: a2 = reverse a2\n 16975: a3 = a2 >> 0x38\n 16978: u8 [a0 + 0x1f] = a3\n 16981: a3 = a2 >> 0x30\n 16984: u8 [a0 + 0x1e] = a3\n 16987: a3 = a2 >> 0x28\n 16990: u8 [a0 + 0x1d] = a3\n 16993: a3 = a2 >> 0x20\n 16996: u8 [a0 + 0x1c] = a3\n 16999: a3 = a2 >> 0x18\n 17002: u8 [a0 + 0x1b] = a3\n 17005: a3 = a2 >> 0x10\n 17008: u8 [a0 + 0x1a] = a3\n 17011: a3 = a2 >> 0x8\n 17014: u8 [a0 + 0x19] = a3\n 17017: a3 = u64 [sp + 0x48]\n 17020: a3 = reverse a3\n 17022: u8 [a0 + 0x18] = a2\n 17025: a2 = a3 >> 0x38\n 17028: u8 [a0 + 0x17] = a2\n 17031: a2 = a3 >> 0x30\n 17034: u8 [a0 + 0x16] = a2\n 17037: a2 = a3 >> 0x28\n 17040: u8 [a0 + 0x15] = a2\n 17043: a2 = a3 >> 0x20\n 17046: u8 [a0 + 0x14] = a2\n 17049: a2 = a3 >> 0x18\n 17052: u8 [a0 + 0x13] = a2\n 17055: a2 = a3 >> 0x10\n 17058: u8 [a0 + 0x12] = a2\n 17061: a2 = u64 [sp + 0x50]\n 17064: a2 = reverse a2\n 17066: u8 [a0 + 0x10] = a3\n 17069: a3 = a3 >> 0x8\n 17072: u8 [a0 + 0x11] = a3\n 17075: u8 [a0 + 0x8] = a2\n 17078: a3 = a2 >> 0x38\n 17081: u8 [a0 + 0xf] = a3\n 17084: a3 = a2 >> 0x30\n 17087: u8 [a0 + 0xe] = a3\n 17090: a3 = a2 >> 0x28\n 17093: u8 [a0 + 0xd] = a3\n 17096: a3 = a2 >> 0x20\n 17099: u8 [a0 + 0xc] = a3\n 17102: a3 = a2 >> 0x18\n 17105: u8 [a0 + 0xb] = a3\n 17108: a3 = a2 >> 0x10\n 17111: u8 [a0 + 0xa] = a3\n 17114: a2 = a2 >> 0x8\n 17117: u8 [a0 + 0x9] = a2\n 17120: u8 [a0] = a1\n 17122: a2 = a1 >> 0x38\n 17125: u8 [a0 + 0x7] = a2\n 17128: a2 = a1 >> 0x30\n 17131: u8 [a0 + 0x6] = a2\n 17134: a2 = a1 >> 0x28\n 17137: u8 [a0 + 0x5] = a2\n 17140: a2 = a1 >> 0x20\n 17143: u8 [a0 + 0x4] = a2\n 17146: a2 = a1 >> 0x18\n 17149: u8 [a0 + 0x3] = a2\n 17152: a2 = a1 >> 0x10\n 17155: u8 [a0 + 0x2] = a2\n 17158: a1 = a1 >> 0x8\n 17161: u8 [a0 + 0x1] = a1\n 17164: a0 = s1 + 0x20\n 17167: u64 [sp + 0x60] = a0\n 17170: a0 = a0 <u s1\n 17173: a3 = u64 [sp + 0xa0]\n 17177: a1 = a3 + a0\n 17180: u64 [sp + 0x28] = a1\n 17183: a1 = a1 <u a3\n 17186: a1 = a0 if a0 == 0\n 17189: a0 = u64 [sp + 0xa8]\n 17193: a1 = a1 + a0\n 17196: u64 [sp + 0x30] = a1\n 17199: a0 = a1 <u a0\n 17202: a1 = u64 [sp + 0xb0]\n 17206: a0 = a0 + a1\n 17209: u64 [sp + 0x38] = a0\n 17212: a0 = u64 [sp + 0x98]\n 17216: jump @290 if a0 != 0\n      : @287 (gas: 9)\n 17220: a0 = u64 [sp + 0xb0]\n 17224: a1 = u64 [sp + 0xa8]\n 17228: a0 = a0 | a1\n 17231: a1 = 0xffffffe0\n 17241: a2 = u64 [sp + 0xb8]\n 17245: a1 = a2 <u a1\n 17248: a1 = 0 if a3 != 0\n 17250: a1 = 0 if a0 != 0\n 17252: jump @301 if a1 == 0\n      : @288 (gas: 5)\n 17256: a0 = u64 [sp + 0x78]\n 17259: s1 = a0 & 0xffffffffffffff00\n 17263: a0 = i32 [sp + 0x60]\n 17266: a1 = 0x20\n 17269: ra = 258, jump @0\n      : @289 [@dyn 129] (gas: 73)\n 17275: t0 = 0\n 17277: t1 = 0\n 17279: u64 [sp + 176] = 0\n 17283: a3 = reverse s1\n 17285: a4 = a3 >> 0x30\n 17288: u8 [a0 + 0x1e] = a4\n 17291: a4 = a3 >> 0x28\n 17294: u8 [a0 + 0x1d] = a4\n 17297: a4 = a3 >> 0x20\n 17300: u8 [a0 + 0x1c] = a4\n 17303: a4 = a3 >> 0x18\n 17306: u8 [a0 + 0x1b] = a4\n 17309: a4 = a3 >> 0x10\n 17312: u8 [a0 + 0x1a] = a4\n 17315: a1 = u64 [sp + 0x80]\n 17319: a4 = reverse a1\n 17321: u8 [a0 + 0x18] = a3\n 17324: a3 = a3 >> 0x8\n 17327: u8 [a0 + 0x19] = a3\n 17330: a3 = a4 >> 0x38\n 17333: u8 [a0 + 0x17] = a3\n 17336: a3 = a4 >> 0x30\n 17339: u8 [a0 + 0x16] = a3\n 17342: a3 = a4 >> 0x28\n 17345: u8 [a0 + 0x15] = a3\n 17348: a3 = a4 >> 0x20\n 17351: u8 [a0 + 0x14] = a3\n 17354: a3 = a4 >> 0x18\n 17357: u8 [a0 + 0x13] = a3\n 17360: a3 = a4 >> 0x10\n 17363: u8 [a0 + 0x12] = a3\n 17366: a1 = u64 [sp + 0x88]\n 17370: a3 = reverse a1\n 17372: u8 [a0 + 0x10] = a4\n 17375: a4 = a4 >> 0x8\n 17378: u8 [a0 + 0x11] = a4\n 17381: a4 = a3 >> 0x38\n 17384: u8 [a0 + 0xf] = a4\n 17387: a4 = a3 >> 0x30\n 17390: u8 [a0 + 0xe] = a4\n 17393: a4 = a3 >> 0x28\n 17396: u8 [a0 + 0xd] = a4\n 17399: a4 = a3 >> 0x20\n 17402: u8 [a0 + 0xc] = a4\n 17405: a4 = a3 >> 0x18\n 17408: u8 [a0 + 0xb] = a4\n 17411: a4 = a3 >> 0x10\n 17414: u8 [a0 + 0xa] = a4\n 17417: a1 = u64 [sp + 0x90]\n 17421: a4 = reverse a1\n 17423: u8 [a0 + 31] = 0\n 17426: u8 [a0 + 0x8] = a3\n 17429: a3 = a3 >> 0x8\n 17432: u8 [a0 + 0x9] = a3\n 17435: u8 [a0] = a4\n 17437: a3 = a4 >> 0x38\n 17440: u8 [a0 + 0x7] = a3\n 17443: a3 = a4 >> 0x30\n 17446: u8 [a0 + 0x6] = a3\n 17449: a3 = a4 >> 0x28\n 17452: u8 [a0 + 0x5] = a3\n 17455: a3 = a4 >> 0x20\n 17458: u8 [a0 + 0x4] = a3\n 17461: a3 = a4 >> 0x18\n 17464: u8 [a0 + 0x3] = a3\n 17467: a3 = a4 >> 0x10\n 17470: u8 [a0 + 0x2] = a3\n 17473: a4 = a4 >> 0x8\n 17476: u8 [a0 + 0x1] = a4\n 17479: a0 = u64 [sp + 0x10]\n 17482: a0 = a0 >u 0\n 17484: ra = a0 << 0x5\n 17487: jump @300\n      : @290 (gas: 3)\n 17490: a1 = 0x20\n 17493: a0 = 0\n 17495: ra = 260, jump @0\n      : @291 [@dyn 130] (gas: 71)\n 17501: a1 = u64 [sp + 0x18]\n 17504: a1 = reverse a1\n 17506: a2 = u64 [sp + 0x20]\n 17509: a2 = reverse a2\n 17511: a3 = u64 [sp + 0x68]\n 17514: a3 = reverse a3\n 17516: a4 = u64 [sp + 0x70]\n 17519: a4 = reverse a4\n 17521: a5 = a4 >> 0x38\n 17524: u8 [a0 + 0x1f] = a5\n 17527: a5 = a4 >> 0x30\n 17530: u8 [a0 + 0x1e] = a5\n 17533: a5 = a4 >> 0x28\n 17536: u8 [a0 + 0x1d] = a5\n 17539: a5 = a4 >> 0x20\n 17542: u8 [a0 + 0x1c] = a5\n 17545: a5 = a4 >> 0x18\n 17548: u8 [a0 + 0x1b] = a5\n 17551: a5 = a4 >> 0x10\n 17554: u8 [a0 + 0x1a] = a5\n 17557: a5 = a4 >> 0x8\n 17560: u8 [a0 + 0x19] = a5\n 17563: u8 [a0 + 0x18] = a4\n 17566: u8 [a0 + 0x10] = a3\n 17569: a4 = a3 >> 0x38\n 17572: u8 [a0 + 0x17] = a4\n 17575: a4 = a3 >> 0x30\n 17578: u8 [a0 + 0x16] = a4\n 17581: a4 = a3 >> 0x28\n 17584: u8 [a0 + 0x15] = a4\n 17587: a4 = a3 >> 0x20\n 17590: u8 [a0 + 0x14] = a4\n 17593: a4 = a3 >> 0x18\n 17596: u8 [a0 + 0x13] = a4\n 17599: a4 = a3 >> 0x10\n 17602: u8 [a0 + 0x12] = a4\n 17605: a3 = a3 >> 0x8\n 17608: u8 [a0 + 0x11] = a3\n 17611: u8 [a0 + 0x8] = a2\n 17614: a3 = a2 >> 0x38\n 17617: u8 [a0 + 0xf] = a3\n 17620: a3 = a2 >> 0x30\n 17623: u8 [a0 + 0xe] = a3\n 17626: a3 = a2 >> 0x28\n 17629: u8 [a0 + 0xd] = a3\n 17632: a3 = a2 >> 0x20\n 17635: u8 [a0 + 0xc] = a3\n 17638: a3 = a2 >> 0x18\n 17641: u8 [a0 + 0xb] = a3\n 17644: a3 = a2 >> 0x10\n 17647: u8 [a0 + 0xa] = a3\n 17650: a2 = a2 >> 0x8\n 17653: u8 [a0 + 0x9] = a2\n 17656: u8 [a0] = a1\n 17658: a2 = a1 >> 0x38\n 17661: u8 [a0 + 0x7] = a2\n 17664: a2 = a1 >> 0x30\n 17667: u8 [a0 + 0x6] = a2\n 17670: a2 = a1 >> 0x28\n 17673: u8 [a0 + 0x5] = a2\n 17676: a2 = a1 >> 0x20\n 17679: u8 [a0 + 0x4] = a2\n 17682: a2 = a1 >> 0x18\n 17685: u8 [a0 + 0x3] = a2\n 17688: a2 = a1 >> 0x10\n 17691: u8 [a0 + 0x2] = a2\n 17694: a1 = a1 >> 0x8\n 17697: u8 [a0 + 0x1] = a1\n 17700: a1 = 0x20\n 17703: a0 = 0\n 17705: ra = 262, jump @0\n      : @292 [@dyn 131] (gas: 5)\n 17711: i32 a0 = a0 + 0\n 17713: i32 a2 = sp + 0x120\n 17717: a1 = 0x20\n 17720: ecalli 8 // 'hash_keccak_256'\n 17722: fallthrough\n      : @293 (gas: 9)\n 17723: a0 = u64 [sp + 0x78]\n 17726: a0 = a0 <u 0x2\n 17729: a1 = u64 [sp + 0x80]\n 17733: a0 = 0 if a1 != 0\n 17735: a1 = u64 [sp + 0x90]\n 17739: a2 = u64 [sp + 0x88]\n 17743: a1 = a1 | a2\n 17746: a0 = 0 if a1 != 0\n 17748: jump @295 if a0 == 0\n      : @294 (gas: 5)\n 17751: ra = 0\n 17753: t0 = 0\n 17755: t1 = 0\n 17757: u64 [sp + 176] = 0\n 17761: jump @300\n      : @295 (gas: 19)\n 17764: u64 [sp + 168] = 0\n 17768: u64 [sp + 160] = 0\n 17772: s1 = 0\n 17774: u64 [sp + 176] = 0\n 17778: a0 = u64 [sp + 0x120]\n 17782: a1 = u64 [sp + 0x128]\n 17786: a2 = u64 [sp + 0x130]\n 17790: a3 = u64 [sp + 0x138]\n 17794: a0 = reverse a0\n 17796: a5 = reverse a1\n 17798: a1 = reverse a2\n 17800: t2 = reverse a3\n 17802: i32 a3 = sp + 0x100\n 17806: u64 [sp + 0x20] = a3\n 17809: i32 a3 = sp + 0x120\n 17813: u64 [sp + 0x18] = a3\n 17816: i32 a3 = sp + 0x140\n 17820: u64 [sp + 0x10] = a3\n 17823: fallthrough\n      : @296 (gas: 20)\n 17824: u64 [sp + 0x88] = a5\n 17828: u64 [sp + 0x110] = a5\n 17832: u64 [sp + 0xb8] = a1\n 17836: u64 [sp + 0x108] = a1\n 17840: u64 [sp + 0x90] = t2\n 17844: u64 [sp + 0x100] = t2\n 17848: u64 [sp + 0x98] = a0\n 17852: u64 [sp + 0x118] = a0\n 17856: u64 [sp + 312] = 0\n 17860: u64 [sp + 304] = 0\n 17864: u64 [sp + 296] = 0\n 17868: u64 [sp + 288] = 0\n 17872: u32 [sp + 320] = 0x20\n 17877: a2 = 0xffffffffffffffff\n 17880: a0 = 0\n 17882: a1 = u64 [sp + 0x20]\n 17885: a3 = u64 [sp + 0x18]\n 17888: a4 = u64 [sp + 0x10]\n 17891: ecalli 7 // 'get_storage'\n 17893: fallthrough\n      : @297 (gas: 30)\n 17894: a0 = u64 [sp + 0x60]\n 17897: a1 = u64 [sp + 0xa8]\n 17901: a0 = a0 + a1\n 17904: a1 = a0 <u a1\n 17907: a2 = u64 [sp + 0x28]\n 17910: a4 = u64 [sp + 0xa0]\n 17914: a2 = a2 + a4\n 17917: a2 = a2 + a1\n 17920: a3 = a2 ^ a4\n 17923: a4 = a2 <u a4\n 17926: a4 = a1 if a3 == 0\n 17929: a1 = u64 [sp + 0x30]\n 17932: a1 = a1 + s1\n 17935: u64 [sp + 0x80] = s1\n 17939: a3 = a1 <u s1\n 17942: a5 = u64 [sp + 0x38]\n 17945: s1 = u64 [sp + 0xb0]\n 17949: a5 = a5 + s1\n 17952: a3 = a3 + a5\n 17955: a4 = a4 + a1\n 17958: a1 = a4 <u a1\n 17961: a1 = a1 + a3\n 17964: a1 = a1 | a2\n 17967: a2 = a0 | a4\n 17970: a2 = a2 | a1\n 17973: a1 = a1 | a4\n 17976: a2 = a2 >> 0x20\n 17979: a1 = a1 << 0x20\n 17982: a1 = a1 | a2\n 17985: jump @301 if a1 != 0\n      : @298 (gas: 10)\n 17989: a1 = u64 [sp + 0x138]\n 17993: u64 [sp + 0x70] = a1\n 17996: a1 = u64 [sp + 0x130]\n 18000: u64 [sp + 0x78] = a1\n 18003: a1 = u64 [sp + 0x128]\n 18007: u64 [sp + 0x68] = a1\n 18010: s1 = u64 [sp + 0x120]\n 18014: i32 a0 = a0 + 0\n 18016: a1 = 0x20\n 18019: ra = 264, jump @0\n      : @299 [@dyn 132] (gas: 115)\n 18025: a1 = reverse s1\n 18027: a2 = a1 >> 0x38\n 18030: u8 [a0 + 0x1f] = a2\n 18033: a2 = a1 >> 0x30\n 18036: u8 [a0 + 0x1e] = a2\n 18039: a2 = a1 >> 0x28\n 18042: u8 [a0 + 0x1d] = a2\n 18045: a2 = a1 >> 0x20\n 18048: u8 [a0 + 0x1c] = a2\n 18051: a2 = a1 >> 0x18\n 18054: u8 [a0 + 0x1b] = a2\n 18057: a2 = a1 >> 0x10\n 18060: u8 [a0 + 0x1a] = a2\n 18063: a2 = a1 >> 0x8\n 18066: u8 [a0 + 0x19] = a2\n 18069: a2 = u64 [sp + 0x68]\n 18072: a2 = reverse a2\n 18074: u8 [a0 + 0x18] = a1\n 18077: a1 = a2 >> 0x38\n 18080: u8 [a0 + 0x17] = a1\n 18083: a1 = a2 >> 0x30\n 18086: u8 [a0 + 0x16] = a1\n 18089: a1 = a2 >> 0x28\n 18092: u8 [a0 + 0x15] = a1\n 18095: a1 = a2 >> 0x20\n 18098: u8 [a0 + 0x14] = a1\n 18101: a1 = a2 >> 0x18\n 18104: u8 [a0 + 0x13] = a1\n 18107: a1 = a2 >> 0x10\n 18110: u8 [a0 + 0x12] = a1\n 18113: a1 = u64 [sp + 0x70]\n 18116: a1 = reverse a1\n 18118: a3 = u64 [sp + 0x78]\n 18121: a3 = reverse a3\n 18123: u8 [a0 + 0x10] = a2\n 18126: a2 = a2 >> 0x8\n 18129: u8 [a0 + 0x11] = a2\n 18132: u8 [a0 + 0x8] = a3\n 18135: a2 = a3 >> 0x38\n 18138: u8 [a0 + 0xf] = a2\n 18141: a2 = a3 >> 0x30\n 18144: u8 [a0 + 0xe] = a2\n 18147: a2 = a3 >> 0x28\n 18150: u8 [a0 + 0xd] = a2\n 18153: a2 = a3 >> 0x20\n 18156: u8 [a0 + 0xc] = a2\n 18159: a2 = a3 >> 0x18\n 18162: u8 [a0 + 0xb] = a2\n 18165: a2 = a3 >> 0x10\n 18168: u8 [a0 + 0xa] = a2\n 18171: a3 = a3 >> 0x8\n 18174: u8 [a0 + 0x9] = a3\n 18177: u8 [a0] = a1\n 18179: a2 = a1 >> 0x38\n 18182: u8 [a0 + 0x7] = a2\n 18185: a2 = a1 >> 0x30\n 18188: u8 [a0 + 0x6] = a2\n 18191: a2 = a1 >> 0x28\n 18194: u8 [a0 + 0x5] = a2\n 18197: a2 = a1 >> 0x20\n 18200: u8 [a0 + 0x4] = a2\n 18203: a2 = a1 >> 0x18\n 18206: u8 [a0 + 0x3] = a2\n 18209: a2 = a1 >> 0x10\n 18212: u8 [a0 + 0x2] = a2\n 18215: a1 = a1 >> 0x8\n 18218: u8 [a0 + 0x1] = a1\n 18221: t2 = u64 [sp + 0x90]\n 18225: t2 = t2 + 0x1\n 18228: a0 = t2 <u 0x1\n 18231: a1 = u64 [sp + 0xb8]\n 18235: a1 = a1 + a0\n 18238: u64 [sp + 0xb8] = a1\n 18242: a0 = u64 [sp + 0xa8]\n 18246: ra = a0 + 0x20\n 18249: a2 = ra <u a0\n 18252: a0 = u64 [sp + 0xa0]\n 18256: t0 = a0 + a2\n 18259: a3 = t0 <u a0\n 18262: a3 = a2 if a2 == 0\n 18265: a0 = u64 [sp + 0x80]\n 18269: t1 = a0 + a3\n 18272: a3 = t1 <u a0\n 18275: a5 = u64 [sp + 0xb0]\n 18279: a5 = a5 + a3\n 18282: a1 = u64 [sp + 0x50]\n 18285: a0 = t1 <u a1\n 18288: u64 [sp + 0xa8] = a0\n 18292: a2 = u64 [sp + 0x58]\n 18295: a4 = ra <u a2\n 18298: a2 = u64 [sp + 0x48]\n 18301: s1 = t0 ^ a2\n 18304: a3 = t0 <u a2\n 18307: a3 = a4 if s1 == 0\n 18310: a2 = u64 [sp + 0x40]\n 18313: a0 = a5 ^ a2\n 18316: u64 [sp + 0xb0] = a5\n 18320: s1 = a5 <u a2\n 18323: a2 = u64 [sp + 0xa8]\n 18327: s1 = a2 if a0 == 0\n 18330: a4 = t1 ^ a1\n 18333: a1 = u64 [sp + 0xb8]\n 18337: a0 = a0 | a4\n 18340: a5 = t2 | a1\n 18343: a5 = a5 <u 0x1\n 18346: a4 = u64 [sp + 0x88]\n 18350: a5 = a5 + a4\n 18353: a4 = a5 <u a4\n 18356: a3 = s1 if a0 != 0\n 18359: a0 = u64 [sp + 0x98]\n 18363: a0 = a0 + a4\n 18366: u64 [sp + 0xa8] = ra\n 18370: u64 [sp + 0xa0] = t0\n 18374: s1 = t1\n 18376: jump @296 if a3 != 0\n      : @300 (gas: 30)\n 18380: a3 = u64 [sp + 0x60]\n 18383: a3 = a3 + ra\n 18386: a0 = a3 <u ra\n 18389: a4 = u64 [sp + 0x28]\n 18392: a4 = a4 + t0\n 18395: a4 = a4 + a0\n 18398: a5 = a4 ^ t0\n 18401: a1 = a4 <u t0\n 18404: a1 = a0 if a5 == 0\n 18407: a0 = u64 [sp + 0x30]\n 18410: a0 = a0 + t1\n 18413: a1 = a1 + a0\n 18416: a5 = a1 <u a0\n 18419: a0 = a0 <u t1\n 18422: a2 = u64 [sp + 0x38]\n 18425: s1 = u64 [sp + 0xb0]\n 18429: a2 = a2 + s1\n 18432: a0 = a0 + a2\n 18435: a0 = a0 + a5\n 18438: a2 = u64 [sp + 0x8]\n 18441: u64 [a2] = a3\n 18443: u64 [a2 + 0x8] = a4\n 18446: u64 [a2 + 0x10] = a1\n 18449: u64 [a2 + 0x18] = a0\n 18452: sp = s0 + 0xfffffffffffffea0\n 18456: ra = u64 [sp + 0x158]\n 18460: s0 = u64 [sp + 0x150]\n 18464: s1 = u64 [sp + 0x148]\n 18468: sp = sp + 0x160\n 18472: ret\n      : @301 (gas: 1)\n 18474: trap\n      : @302 (gas: 8)\n 18475: u64 [sp + 240] = 0\n 18479: u64 [sp + 232] = 0\n 18483: u64 [sp + 224] = 0\n 18487: a0 = 0x4e487b7100000000\n 18497: a1 = sp + 0xe0\n 18501: u64 [sp + 0xf8] = a0\n 18505: a0 = 0\n 18507: ra = 266, jump @23\n      : @303 [@dyn 133] (gas: 7)\n 18513: u64 [sp + 216] = 0\n 18517: u64 [sp + 208] = 0\n 18521: u64 [sp + 192] = 0x22\n 18526: a0 = 0x4\n 18529: a1 = sp + 0xc0\n 18533: u64 [sp + 200] = 0\n 18537: ra = 268, jump @23\n      : @304 [@dyn 134] (gas: 3)\n 18543: a1 = 0x24\n 18546: a0 = 0\n 18548: ra = 270, jump @0\n      : @305 [@dyn 135] (gas: 6)\n 18554: i32 a1 = a0 + 0\n 18556: a0 = 0x1\n 18559: a2 = 0x24\n 18562: ra = 0x110\n 18566: ecalli 12 // 'seal_return'\n 18568: fallthrough\n      : @306 [@dyn 136] (gas: 27)\n 18569: sp = sp + 0xffffffffffffff80\n 18572: u64 [sp + 0x78] = ra\n 18575: u64 [sp + 0x70] = s0\n 18578: u64 [sp + 0x68] = s1\n 18581: s0 = sp + 0x80\n 18585: sp = sp & 0xfffffffffffffff0\n 18588: t0 = u64 [a1]\n 18590: t1 = u64 [a1 + 0x8]\n 18593: t2 = u64 [a1 + 0x10]\n 18596: a1 = u64 [a1 + 0x18]\n 18599: a3 = u64 [a2]\n 18601: a4 = u64 [a2 + 0x8]\n 18604: a5 = u64 [a2 + 0x10]\n 18607: a2 = u64 [a2 + 0x18]\n 18610: s1 = a0\n 18612: u64 [sp + 0x18] = a2\n 18615: u64 [sp + 0x10] = a5\n 18618: u64 [sp + 0x8] = a4\n 18621: u64 [sp] = a3\n 18623: u64 [sp + 0x38] = a1\n 18626: u64 [sp + 0x30] = t2\n 18629: u64 [sp + 0x28] = t1\n 18632: a0 = sp + 0x40\n 18635: a1 = sp + 0x20\n 18638: a2 = sp\n 18640: u64 [sp + 0x20] = t0\n 18643: ra = 274, jump @282\n      : @307 [@dyn 137] (gas: 14)\n 18649: a0 = u64 [sp + 0x50]\n 18652: a1 = u64 [sp + 0x58]\n 18655: a2 = u64 [sp + 0x40]\n 18658: a3 = u64 [sp + 0x48]\n 18661: u64 [s1 + 0x10] = a0\n 18664: u64 [s1 + 0x18] = a1\n 18667: u64 [s1] = a2\n 18669: u64 [s1 + 0x8] = a3\n 18672: sp = s0 + 0xffffffffffffff80\n 18675: ra = u64 [sp + 0x78]\n 18678: s0 = u64 [sp + 0x70]\n 18681: s1 = u64 [sp + 0x68]\n 18684: sp = sp + 0x80\n 18688: ret\n      : @308 [@dyn 138] (gas: 111)\n 18690: a1 = u8 [a0 + 0x1]\n 18693: a2 = u8 [a0]\n 18695: a3 = u8 [a0 + 0x2]\n 18698: a4 = u8 [a0 + 0x3]\n 18701: a1 = a1 << 0x8\n 18704: a1 = a1 | a2\n 18707: a3 = a3 << 0x10\n 18710: a4 = a4 << 0x18\n 18713: a3 = a3 | a4\n 18716: a1 = a1 | a3\n 18719: a2 = u8 [a0 + 0x5]\n 18722: a3 = u8 [a0 + 0x4]\n 18725: a4 = u8 [a0 + 0x6]\n 18728: a5 = u8 [a0 + 0x7]\n 18731: a2 = a2 << 0x8\n 18734: a2 = a2 | a3\n 18737: a4 = a4 << 0x10\n 18740: a5 = a5 << 0x18\n 18743: a4 = a4 | a5\n 18746: a2 = a2 | a4\n 18749: a2 = a2 << 0x20\n 18752: t0 = a2 | a1\n 18755: a2 = u8 [a0 + 0x9]\n 18758: a3 = u8 [a0 + 0x8]\n 18761: a4 = u8 [a0 + 0xa]\n 18764: a5 = u8 [a0 + 0xb]\n 18767: a2 = a2 << 0x8\n 18770: a2 = a2 | a3\n 18773: a4 = a4 << 0x10\n 18776: a5 = a5 << 0x18\n 18779: a4 = a4 | a5\n 18782: a2 = a2 | a4\n 18785: a3 = u8 [a0 + 0xd]\n 18788: a4 = u8 [a0 + 0xc]\n 18791: a5 = u8 [a0 + 0xe]\n 18794: s1 = u8 [a0 + 0xf]\n 18797: a3 = a3 << 0x8\n 18800: a3 = a3 | a4\n 18803: a5 = a5 << 0x10\n 18806: s1 = s1 << 0x18\n 18809: a5 = a5 | s1\n 18812: a3 = a3 | a5\n 18815: a3 = a3 << 0x20\n 18818: a2 = a2 | a3\n 18821: a3 = u8 [a0 + 0x11]\n 18824: a4 = u8 [a0 + 0x10]\n 18827: a5 = u8 [a0 + 0x12]\n 18830: s1 = u8 [a0 + 0x13]\n 18833: a3 = a3 << 0x8\n 18836: a3 = a3 | a4\n 18839: a5 = a5 << 0x10\n 18842: s1 = s1 << 0x18\n 18845: a5 = a5 | s1\n 18848: a3 = a3 | a5\n 18851: a4 = u8 [a0 + 0x15]\n 18854: a5 = u8 [a0 + 0x14]\n 18857: s1 = u8 [a0 + 0x16]\n 18860: a1 = u8 [a0 + 0x17]\n 18863: a4 = a4 << 0x8\n 18866: a4 = a4 | a5\n 18869: s1 = s1 << 0x10\n 18872: a1 = a1 << 0x18\n 18875: a1 = a1 | s1\n 18878: a1 = a1 | a4\n 18881: a1 = a1 << 0x20\n 18884: a3 = a3 | a1\n 18887: a1 = u8 [a0 + 0x19]\n 18890: a4 = u8 [a0 + 0x18]\n 18893: a5 = u8 [a0 + 0x1a]\n 18896: s1 = u8 [a0 + 0x1b]\n 18899: a1 = a1 << 0x8\n 18902: a1 = a1 | a4\n 18905: a5 = a5 << 0x10\n 18908: s1 = s1 << 0x18\n 18911: a5 = a5 | s1\n 18914: a1 = a1 | a5\n 18917: a4 = u8 [a0 + 0x1d]\n 18920: a5 = u8 [a0 + 0x1c]\n 18923: s1 = u8 [a0 + 0x1e]\n 18926: a0 = u8 [a0 + 0x1f]\n 18929: a4 = a4 << 0x8\n 18932: a4 = a4 | a5\n 18935: s1 = s1 << 0x10\n 18938: a0 = a0 << 0x18\n 18941: a0 = a0 | s1\n 18944: a0 = a0 | a4\n 18947: a0 = a0 << 0x20\n 18950: a0 = a0 | a1\n 18953: a4 = reverse a0\n 18955: u64 [sp + 0x38] = a4\n 18958: s1 = reverse a3\n 18960: a2 = reverse a2\n 18962: u64 [sp + 0x30] = a2\n 18965: a1 = reverse t0\n 18967: u64 [sp + 0x28] = a1\n 18970: a0 = u64 [sp]\n 18972: u64 [sp + 0xb8] = a0\n 18976: a0 = u64 [sp + 0x8]\n 18979: u64 [sp + 0xb0] = a0\n 18983: a0 = u64 [sp + 0x10]\n 18986: u64 [sp + 0xa8] = a0\n 18990: a0 = u64 [sp + 0x20]\n 18993: u64 [sp + 0xa0] = a0\n 18997: u64 [sp + 0x98] = a1\n 19001: u64 [sp + 0x90] = a2\n 19005: u64 [sp + 0x88] = s1\n 19009: a0 = sp + 0xc0\n 19013: a1 = sp + 0xa0\n 19017: a2 = sp + 0x80\n 19021: u64 [sp + 0x80] = a4\n 19025: ra = 278, jump @282\n      : @309 [@dyn 139] (gas: 58)\n 19031: t2 = s1\n 19033: a3 = u64 [sp + 0xc8]\n 19037: a0 = u64 [sp + 0xd8]\n 19041: u64 [sp + 0x10] = a0\n 19044: a4 = u64 [sp + 0xc0]\n 19048: t1 = u64 [sp + 0xd0]\n 19052: a5 = a3 ^ s1\n 19055: a1 = a3 <u s1\n 19058: a2 = u64 [sp + 0x38]\n 19061: s1 = a4 <u a2\n 19064: a1 = s1 if a5 == 0\n 19067: a3 = a3 - t2\n 19070: a3 = a3 - s1\n 19073: u64 [sp + 0x8] = a3\n 19076: a4 = a4 - a2\n 19079: a5 = a4 + 0x1f\n 19082: a4 = a5 <u a4\n 19085: a3 = a3 + a4\n 19088: a5 = a5 & 0xffffffffffffffe0\n 19091: a0 = a3 + t2\n 19094: a2 = a2 + a5\n 19097: u64 [sp + 0x20] = a2\n 19100: a5 = a2 <u a5\n 19103: t0 = a0 + a5\n 19106: a0 = t0 ^ a3\n 19109: a2 = t0 <u a3\n 19112: a2 = a5 if a0 == 0\n 19115: s1 = u64 [sp + 0x30]\n 19118: a0 = t1 - s1\n 19121: a5 = t1 <u s1\n 19124: t1 = s1\n 19126: ra = u64 [sp + 0x28]\n 19129: s1 = u64 [sp + 0x10]\n 19132: s1 = s1 - ra\n 19135: s1 = s1 - a5\n 19138: a5 = a0 <u a1\n 19141: s1 = s1 - a5\n 19144: a0 = a0 - a1\n 19147: a1 = u64 [sp + 0x8]\n 19150: a1 = a3 <u a1\n 19153: a1 = a4 if a4 == 0\n 19156: a1 = a1 + a0\n 19159: a0 = a1 <u a0\n 19162: a3 = a1 + t1\n 19165: a5 = a3 + a2\n 19168: a1 = a3 <u a1\n 19171: a2 = a5 <u a3\n 19174: s1 = s1 + ra\n 19177: a0 = a0 + s1\n 19180: a0 = a0 + a1\n 19183: s1 = a0 + a2\n 19186: a0 = s1 >u 0\n 19188: a1 = a5 >u 0\n 19190: a1 = a0 if s1 != 0\n 19193: a0 = a5 | s1\n 19196: a2 = t0 >u 0\n 19198: a2 = a1 if a0 != 0\n 19201: jump @313 if a2 != 0\n      : @310 (gas: 15)\n 19205: a4 = t1\n 19207: a0 = u64 [sp + 0x38]\n 19210: a1 = u64 [sp + 0x20]\n 19213: a0 = a1 <u a0\n 19216: a1 = t0 ^ t2\n 19219: a2 = t0 <u t2\n 19222: a2 = a0 if a1 == 0\n 19225: a0 = a5 <u t1\n 19228: a1 = s1 ^ ra\n 19231: a3 = s1 <u ra\n 19234: a3 = a0 if a1 == 0\n 19237: a0 = a5 ^ t1\n 19240: a0 = a0 | a1\n 19243: a3 = a2 if a0 == 0\n 19246: jump @313 if a3 != 0\n      : @311 (gas: 6)\n 19250: a0 = 0x40\n 19253: a1 = 0x20\n 19256: u64 [sp + 0x10] = t2\n 19259: u64 [sp + 0x8] = t0\n 19262: u64 [sp] = a5\n 19264: ra = 280, jump @0\n      : @312 [@dyn 140] (gas: 82)\n 19270: a1 = reverse s1\n 19272: a2 = u64 [sp]\n 19274: a2 = reverse a2\n 19276: a3 = u64 [sp + 0x8]\n 19279: a3 = reverse a3\n 19281: a4 = u64 [sp + 0x20]\n 19284: a4 = reverse a4\n 19286: u8 [a0 + 0x18] = a4\n 19289: a5 = a4 >> 0x38\n 19292: u8 [a0 + 0x1f] = a5\n 19295: a5 = a4 >> 0x30\n 19298: u8 [a0 + 0x1e] = a5\n 19301: a5 = a4 >> 0x28\n 19304: u8 [a0 + 0x1d] = a5\n 19307: a5 = a4 >> 0x20\n 19310: u8 [a0 + 0x1c] = a5\n 19313: a5 = a4 >> 0x18\n 19316: u8 [a0 + 0x1b] = a5\n 19319: a5 = a4 >> 0x10\n 19322: u8 [a0 + 0x1a] = a5\n 19325: a4 = a4 >> 0x8\n 19328: u8 [a0 + 0x19] = a4\n 19331: u8 [a0 + 0x10] = a3\n 19334: a4 = a3 >> 0x38\n 19337: u8 [a0 + 0x17] = a4\n 19340: a4 = a3 >> 0x30\n 19343: u8 [a0 + 0x16] = a4\n 19346: a4 = a3 >> 0x28\n 19349: u8 [a0 + 0x15] = a4\n 19352: a4 = a3 >> 0x20\n 19355: u8 [a0 + 0x14] = a4\n 19358: a4 = a3 >> 0x18\n 19361: u8 [a0 + 0x13] = a4\n 19364: a4 = a3 >> 0x10\n 19367: u8 [a0 + 0x12] = a4\n 19370: a3 = a3 >> 0x8\n 19373: u8 [a0 + 0x11] = a3\n 19376: u8 [a0 + 0x8] = a2\n 19379: a3 = a2 >> 0x38\n 19382: u8 [a0 + 0xf] = a3\n 19385: a3 = a2 >> 0x30\n 19388: u8 [a0 + 0xe] = a3\n 19391: a3 = a2 >> 0x28\n 19394: u8 [a0 + 0xd] = a3\n 19397: a3 = a2 >> 0x20\n 19400: u8 [a0 + 0xc] = a3\n 19403: a3 = a2 >> 0x18\n 19406: u8 [a0 + 0xb] = a3\n 19409: a3 = a2 >> 0x10\n 19412: u8 [a0 + 0xa] = a3\n 19415: a2 = a2 >> 0x8\n 19418: u8 [a0 + 0x9] = a2\n 19421: u8 [a0] = a1\n 19423: a2 = a1 >> 0x38\n 19426: u8 [a0 + 0x7] = a2\n 19429: a2 = a1 >> 0x30\n 19432: u8 [a0 + 0x6] = a2\n 19435: a2 = a1 >> 0x28\n 19438: u8 [a0 + 0x5] = a2\n 19441: a2 = a1 >> 0x20\n 19444: u8 [a0 + 0x4] = a2\n 19447: a2 = a1 >> 0x18\n 19450: u8 [a0 + 0x3] = a2\n 19453: a2 = a1 >> 0x10\n 19456: u8 [a0 + 0x2] = a2\n 19459: a1 = a1 >> 0x8\n 19462: u8 [a0 + 0x1] = a1\n 19465: a0 = u64 [sp + 0x18]\n 19468: a1 = u64 [sp + 0x38]\n 19471: u64 [a0] = a1\n 19473: a1 = u64 [sp + 0x28]\n 19476: u64 [a0 + 0x18] = a1\n 19479: a1 = u64 [sp + 0x10]\n 19482: u64 [a0 + 0x8] = a1\n 19485: a1 = u64 [sp + 0x30]\n 19488: u64 [a0 + 0x10] = a1\n 19491: sp = s0 + 0xffffffffffffff00\n 19495: ra = u64 [sp + 0xf8]\n 19499: s0 = u64 [sp + 0xf0]\n 19503: s1 = u64 [sp + 0xe8]\n 19507: sp = sp + 0x100\n 19511: ret\n      : @313 (gas: 8)\n 19513: u64 [sp + 112] = 0\n 19516: u64 [sp + 104] = 0\n 19519: u64 [sp + 96] = 0\n 19522: a0 = 0x4e487b7100000000\n 19532: a1 = sp + 0x60\n 19535: u64 [sp + 0x78] = a0\n 19538: a0 = 0\n 19540: ra = 282, jump @23\n      : @314 [@dyn 141] (gas: 7)\n 19546: u64 [sp + 88] = 0\n 19549: u64 [sp + 80] = 0\n 19552: u64 [sp + 64] = 0x41\n 19556: a0 = 0x4\n 19559: a1 = sp + 0x40\n 19562: u64 [sp + 72] = 0\n 19565: ra = 284, jump @23\n      : @315 [@dyn 142] (gas: 3)\n 19571: a1 = 0x24\n 19574: a0 = 0\n 19576: ra = 286, jump @0\n      : @316 [@dyn 143] (gas: 6)\n 19582: i32 a1 = a0 + 0\n 19584: a0 = 0x1\n 19587: a2 = 0x24\n 19590: ra = 0x120\n 19594: ecalli 12 // 'seal_return'\n 19596: fallthrough\n      : @317 [@dyn 144] (gas: 17)\n 19597: sp = sp + 0xfffffffffffffec0\n 19601: u64 [sp + 0x138] = ra\n 19605: u64 [sp + 0x130] = s0\n 19609: u64 [sp + 0x128] = s1\n 19613: s0 = sp + 0x140\n 19617: sp = sp & 0xffffffffffffffe0\n 19620: a2 = u64 [a1]\n 19622: u64 [sp + 0x98] = a2\n 19626: a2 = u64 [a1 + 0x8]\n 19629: u64 [sp + 0x90] = a2\n 19633: a2 = u64 [a1 + 0x10]\n 19636: u64 [sp + 0x88] = a2\n 19640: s1 = u64 [a1 + 0x18]\n 19643: u64 [sp + 0x78] = a0\n 19646: a1 = 0x20\n 19649: a0 = 0\n 19651: ra = 290, jump @0\n      : @318 [@dyn 145] (gas: 70)\n 19657: a1 = reverse s1\n 19659: a2 = u64 [sp + 0x88]\n 19663: a2 = reverse a2\n 19665: a3 = u64 [sp + 0x90]\n 19669: a3 = reverse a3\n 19671: a4 = u64 [sp + 0x98]\n 19675: a4 = reverse a4\n 19677: a5 = a4 >> 0x38\n 19680: u8 [a0 + 0x1f] = a5\n 19683: a5 = a4 >> 0x30\n 19686: u8 [a0 + 0x1e] = a5\n 19689: a5 = a4 >> 0x28\n 19692: u8 [a0 + 0x1d] = a5\n 19695: a5 = a4 >> 0x20\n 19698: u8 [a0 + 0x1c] = a5\n 19701: a5 = a4 >> 0x18\n 19704: u8 [a0 + 0x1b] = a5\n 19707: a5 = a4 >> 0x10\n 19710: u8 [a0 + 0x1a] = a5\n 19713: a5 = a4 >> 0x8\n 19716: u8 [a0 + 0x19] = a5\n 19719: u8 [a0 + 0x18] = a4\n 19722: a4 = a3 >> 0x38\n 19725: u8 [a0 + 0x17] = a4\n 19728: a4 = a3 >> 0x30\n 19731: u8 [a0 + 0x16] = a4\n 19734: a4 = a3 >> 0x28\n 19737: u8 [a0 + 0x15] = a4\n 19740: a4 = a3 >> 0x20\n 19743: u8 [a0 + 0x14] = a4\n 19746: a4 = a3 >> 0x18\n 19749: u8 [a0 + 0x13] = a4\n 19752: a4 = a3 >> 0x10\n 19755: u8 [a0 + 0x12] = a4\n 19758: a4 = a3 >> 0x8\n 19761: u8 [a0 + 0x11] = a4\n 19764: u8 [a0 + 0x10] = a3\n 19767: a3 = a2 >> 0x38\n 19770: u8 [a0 + 0xf] = a3\n 19773: a3 = a2 >> 0x30\n 19776: u8 [a0 + 0xe] = a3\n 19779: a3 = a2 >> 0x28\n 19782: u8 [a0 + 0xd] = a3\n 19785: a3 = a2 >> 0x20\n 19788: u8 [a0 + 0xc] = a3\n 19791: a3 = a2 >> 0x18\n 19794: u8 [a0 + 0xb] = a3\n 19797: a3 = a2 >> 0x10\n 19800: u8 [a0 + 0xa] = a3\n 19803: a3 = a2 >> 0x8\n 19806: u8 [a0 + 0x9] = a3\n 19809: u8 [a0 + 0x8] = a2\n 19812: a2 = a1 >> 0x38\n 19815: u8 [a0 + 0x7] = a2\n 19818: a2 = a1 >> 0x30\n 19821: u8 [a0 + 0x6] = a2\n 19824: a2 = a1 >> 0x28\n 19827: u8 [a0 + 0x5] = a2\n 19830: a2 = a1 >> 0x20\n 19833: u8 [a0 + 0x4] = a2\n 19836: a2 = a1 >> 0x18\n 19839: u8 [a0 + 0x3] = a2\n 19842: a2 = a1 >> 0x10\n 19845: u8 [a0 + 0x2] = a2\n 19848: a2 = a1 >> 0x8\n 19851: u8 [a0 + 0x1] = a2\n 19854: u8 [a0] = a1\n 19856: a0 = 0x20\n 19859: a1 = 0x20\n 19862: ra = 292, jump @0\n      : @319 [@dyn 146] (gas: 35)\n 19868: u8 [a0 + 31] = 0x2\n 19872: u8 [a0 + 30] = 0\n 19875: u8 [a0 + 29] = 0\n 19878: u8 [a0 + 28] = 0\n 19881: u8 [a0 + 27] = 0\n 19884: u8 [a0 + 26] = 0\n 19887: u8 [a0 + 25] = 0\n 19890: u8 [a0 + 24] = 0\n 19893: u8 [a0 + 23] = 0\n 19896: u8 [a0 + 22] = 0\n 19899: u8 [a0 + 21] = 0\n 19902: u8 [a0 + 20] = 0\n 19905: u8 [a0 + 19] = 0\n 19908: u8 [a0 + 18] = 0\n 19911: u8 [a0 + 17] = 0\n 19914: u8 [a0 + 16] = 0\n 19917: u8 [a0 + 15] = 0\n 19920: u8 [a0 + 14] = 0\n 19923: u8 [a0 + 13] = 0\n 19926: u8 [a0 + 12] = 0\n 19929: u8 [a0 + 11] = 0\n 19932: u8 [a0 + 10] = 0\n 19935: u8 [a0 + 9] = 0\n 19938: u8 [a0 + 8] = 0\n 19941: u8 [a0 + 7] = 0\n 19944: u8 [a0 + 6] = 0\n 19947: u8 [a0 + 5] = 0\n 19950: u8 [a0 + 4] = 0\n 19953: u8 [a0 + 3] = 0\n 19956: u8 [a0 + 2] = 0\n 19959: u8 [a0 + 1] = 0\n 19962: u8 [a0 + 0] = 0\n 19964: a1 = 0x40\n 19967: a0 = 0\n 19969: ra = 294, jump @0\n      : @320 [@dyn 147] (gas: 108)\n 19975: i32 a0 = a0 + 0\n 19977: i32 a2 = sp + 0x100\n 19981: a1 = 0x40\n 19984: ecalli 8 // 'hash_keccak_256'\n 19986: a0 = u64 [sp + 0x118]\n 19990: a1 = u64 [sp + 0x110]\n 19994: a2 = u64 [sp + 0x108]\n 19998: a3 = u64 [sp + 0x100]\n 20002: s1 = reverse a0\n 20004: a1 = reverse a1\n 20006: u64 [sp + 0x98] = a1\n 20010: a2 = reverse a2\n 20012: u64 [sp + 0x80] = a2\n 20016: a0 = reverse a3\n 20018: u64 [sp + 0x90] = a0\n 20022: u64 [sp + 0xf8] = a0\n 20026: u64 [sp + 0xf0] = a2\n 20030: u64 [sp + 0xe8] = a1\n 20034: u64 [sp + 0xe0] = s1\n 20038: u64 [sp + 0x88] = s1\n 20042: u64 [sp + 280] = 0\n 20046: u64 [sp + 272] = 0\n 20050: u64 [sp + 264] = 0\n 20054: u64 [sp + 256] = 0\n 20058: u32 [sp + 288] = 0x20\n 20063: i32 a1 = sp + 0xe0\n 20067: i32 a3 = sp + 0x100\n 20071: i32 a4 = sp + 0x120\n 20075: a2 = 0xffffffffffffffff\n 20078: a0 = 0\n 20080: ecalli 7 // 'get_storage'\n 20082: a0 = s1 + 0x1\n 20085: a1 = a0 <u 0x1\n 20088: a2 = u64 [sp + 0x98]\n 20092: a1 = a1 + a2\n 20095: a2 = a0 | a1\n 20098: a2 = a2 <u 0x1\n 20101: s1 = u64 [sp + 0x80]\n 20105: a2 = a2 + s1\n 20108: a3 = a2 <u s1\n 20111: a4 = u64 [sp + 0x90]\n 20115: a3 = a3 + a4\n 20118: u64 [sp + 0xf8] = a3\n 20122: u64 [sp + 0xf0] = a2\n 20126: a2 = u64 [sp + 0x100]\n 20130: u64 [sp + 0x70] = a2\n 20133: u64 [sp + 0xe8] = a1\n 20137: a1 = u64 [sp + 0x108]\n 20141: u64 [sp + 0x68] = a1\n 20144: u64 [sp + 0xe0] = a0\n 20148: a0 = u32 [sp + 0x110]\n 20152: u64 [sp + 0x60] = a0\n 20155: u64 [sp + 280] = 0\n 20159: u64 [sp + 272] = 0\n 20163: u64 [sp + 264] = 0\n 20167: u64 [sp + 256] = 0\n 20171: u32 [sp + 288] = 0x20\n 20176: i32 a1 = sp + 0xe0\n 20180: i32 a3 = sp + 0x100\n 20184: i32 a4 = sp + 0x120\n 20188: a2 = 0xffffffffffffffff\n 20191: a0 = 0\n 20193: ecalli 7 // 'get_storage'\n 20195: a0 = u64 [sp + 0x100]\n 20199: u64 [sp + 0x58] = a0\n 20202: a0 = u64 [sp + 0x108]\n 20206: u64 [sp + 0x50] = a0\n 20209: a0 = u64 [sp + 0x110]\n 20213: u64 [sp + 0x48] = a0\n 20216: a0 = u64 [sp + 0x118]\n 20220: u64 [sp + 0x40] = a0\n 20223: a0 = u64 [sp + 0x88]\n 20227: a2 = a0 + 0x2\n 20230: a0 = a2 <u a0\n 20233: a3 = u64 [sp + 0x98]\n 20237: a1 = a3 + a0\n 20240: a3 = a1 <u a3\n 20243: a3 = a0 if a0 == 0\n 20246: a3 = a3 + s1\n 20249: a0 = a3 <u s1\n 20252: s1 = u64 [sp + 0x90]\n 20256: a0 = a0 + s1\n 20259: u64 [sp + 0xb8] = a0\n 20263: u64 [sp + 0xb0] = a3\n 20267: u64 [sp + 0xa8] = a1\n 20271: a0 = sp + 0xc0\n 20275: a1 = sp + 0xa0\n 20279: u64 [sp + 0xa0] = a2\n 20283: ra = 0x128\n 20287: sp = sp + 0xffffffffffffff00\n 20291: u64 [sp + 0xf8] = ra\n 20295: u64 [sp + 0xf0] = s0\n 20299: u64 [sp + 0xe8] = s1\n 20303: s0 = sp + 0x100\n 20307: sp = sp & 0xfffffffffffffff0\n 20310: a2 = u64 [a1]\n 20312: u64 [sp + 0x20] = a2\n 20315: a2 = u64 [a1 + 0x8]\n 20318: u64 [sp + 0x10] = a2\n 20321: a2 = u64 [a1 + 0x10]\n 20324: u64 [sp + 0x8] = a2\n 20327: a1 = u64 [a1 + 0x18]\n 20330: u64 [sp] = a1\n 20332: u64 [sp + 0x18] = a0\n 20335: a0 = 0x40\n 20338: a1 = 0x20\n 20341: ra = 0x114\n 20345: jump @0\n      : @321 [@dyn 148] (gas: 110)\n 20348: a0 = u64 [sp + 0xc0]\n 20352: u64 [sp + 0x38] = a0\n 20355: a0 = u64 [sp + 0xc8]\n 20359: u64 [sp + 0x30] = a0\n 20362: a0 = u64 [sp + 0xd0]\n 20366: u64 [sp + 0x28] = a0\n 20369: a0 = u64 [sp + 0xd8]\n 20373: u64 [sp + 0x20] = a0\n 20376: a1 = u64 [sp + 0x88]\n 20380: a0 = a1 + 0x3\n 20383: a1 = a0 <u a1\n 20386: a3 = u64 [sp + 0x98]\n 20390: a2 = a3 + a1\n 20393: a3 = a2 <u a3\n 20396: a3 = a1 if a1 == 0\n 20399: a1 = u64 [sp + 0x80]\n 20403: a3 = a3 + a1\n 20406: a1 = a3 <u a1\n 20409: a1 = a1 + s1\n 20412: u64 [sp + 0xf8] = a1\n 20416: u64 [sp + 0xf0] = a3\n 20420: u64 [sp + 0xe8] = a2\n 20424: u64 [sp + 0xe0] = a0\n 20428: u64 [sp + 280] = 0\n 20432: u64 [sp + 272] = 0\n 20436: u64 [sp + 264] = 0\n 20440: u64 [sp + 256] = 0\n 20444: u32 [sp + 288] = 0x20\n 20449: i32 a1 = sp + 0xe0\n 20453: i32 a3 = sp + 0x100\n 20457: i32 a4 = sp + 0x120\n 20461: a2 = 0xffffffffffffffff\n 20464: a0 = 0\n 20466: ecalli 7 // 'get_storage'\n 20468: s1 = u64 [sp + 0x100]\n 20472: a0 = u64 [sp + 0x108]\n 20476: u64 [sp + 0x18] = a0\n 20479: a0 = u64 [sp + 0x110]\n 20483: u64 [sp + 0x10] = a0\n 20486: a0 = u64 [sp + 0x118]\n 20490: u64 [sp + 0x8] = a0\n 20493: a1 = u64 [sp + 0x88]\n 20497: a0 = a1 + 0x4\n 20500: a1 = a0 <u a1\n 20503: a3 = u64 [sp + 0x98]\n 20507: a2 = a3 + a1\n 20510: a3 = a2 <u a3\n 20513: a3 = a1 if a1 == 0\n 20516: a1 = u64 [sp + 0x80]\n 20520: a3 = a3 + a1\n 20523: a1 = a3 <u a1\n 20526: a4 = u64 [sp + 0x90]\n 20530: a1 = a1 + a4\n 20533: u64 [sp + 0xf8] = a1\n 20537: u64 [sp + 0xf0] = a3\n 20541: u64 [sp + 0xe8] = a2\n 20545: u64 [sp + 0xe0] = a0\n 20549: u64 [sp + 280] = 0\n 20553: u64 [sp + 272] = 0\n 20557: u64 [sp + 264] = 0\n 20561: u64 [sp + 256] = 0\n 20565: u32 [sp + 288] = 0x20\n 20570: i32 a1 = sp + 0xe0\n 20574: i32 a3 = sp + 0x100\n 20578: i32 a4 = sp + 0x120\n 20582: a2 = 0xffffffffffffffff\n 20585: a0 = 0\n 20587: ecalli 7 // 'get_storage'\n 20589: a0 = u8 [sp + 0x100]\n 20593: a1 = u64 [sp + 0x78]\n 20596: u64 [a1 + 0x80] = a0\n 20600: a0 = u64 [sp + 0x8]\n 20603: u64 [a1 + 0x78] = a0\n 20606: a0 = u64 [sp + 0x10]\n 20609: u64 [a1 + 0x70] = a0\n 20612: a0 = u64 [sp + 0x18]\n 20615: u64 [a1 + 0x68] = a0\n 20618: u64 [a1 + 0x60] = s1\n 20621: a0 = u64 [sp + 0x20]\n 20624: u64 [a1 + 0x58] = a0\n 20627: a0 = u64 [sp + 0x28]\n 20630: u64 [a1 + 0x50] = a0\n 20633: a0 = u64 [sp + 0x30]\n 20636: u64 [a1 + 0x48] = a0\n 20639: a0 = u64 [sp + 0x38]\n 20642: u64 [a1 + 0x40] = a0\n 20645: a0 = u64 [sp + 0x40]\n 20648: u64 [a1 + 0x38] = a0\n 20651: a0 = u64 [sp + 0x48]\n 20654: u64 [a1 + 0x30] = a0\n 20657: a0 = u64 [sp + 0x50]\n 20660: u64 [a1 + 0x28] = a0\n 20663: a0 = u64 [sp + 0x58]\n 20666: u64 [a1 + 0x20] = a0\n 20669: a0 = u64 [sp + 0x60]\n 20672: u64 [a1 + 0x10] = a0\n 20675: a0 = u64 [sp + 0x68]\n 20678: u64 [a1 + 0x8] = a0\n 20681: a0 = u64 [sp + 0x70]\n 20684: u64 [a1] = a0\n 20686: u64 [a1 + 152] = 0\n 20690: u64 [a1 + 144] = 0\n 20694: u64 [a1 + 136] = 0\n 20698: u64 [a1 + 24] = 0\n 20701: sp = s0 + 0xfffffffffffffec0\n 20705: ra = u64 [sp + 0x138]\n 20709: s0 = u64 [sp + 0x130]\n 20713: s1 = u64 [sp + 0x128]\n 20717: sp = sp + 0x140\n 20721: ret\n      : @322 (gas: 16)\n 20723: sp = sp + 0xffffffffffffff88\n 20726: u64 [sp + 0x70] = ra\n 20729: u64 [sp + 0x68] = s0\n 20732: u64 [sp + 0x60] = s1\n 20735: a5 = u64 [a1 + 0x10]\n 20738: s1 = u64 [a1 + 0x18]\n 20741: a4 = u64 [a1 + 0x8]\n 20744: s0 = u64 [a1]\n 20746: a1 = a4 | s1\n 20749: a3 = s0 | a5\n 20752: a3 = a3 | a1\n 20755: a3 = a3 >> 0x20\n 20758: a1 = a1 | a5\n 20761: a1 = a1 << 0x20\n 20764: a1 = a1 | a3\n 20767: jump @335 if a1 != 0\n      : @323 (gas: 16)\n 20771: u64 [sp + 0x28] = s1\n 20774: u64 [sp + 0x30] = a5\n 20777: u64 [sp + 0x40] = a4\n 20780: u64 [sp] = a0\n 20782: a0 = u64 [a2 + 0x18]\n 20785: u64 [sp + 0x58] = a0\n 20788: s1 = u64 [a2 + 0x10]\n 20791: a0 = u64 [a2 + 0x8]\n 20794: u64 [sp + 0x50] = a0\n 20797: a0 = u64 [a2]\n 20799: u64 [sp + 0x48] = a0\n 20802: u64 [sp + 0x20] = s0\n 20805: i32 a0 = s0 + 0\n 20807: a1 = 0x20\n 20810: u64 [sp + 0x8] = a0\n 20813: ra = 298, jump @0\n      : @324 [@dyn 149] (gas: 12)\n 20819: t0 = u64 [sp + 0x48]\n 20822: a1 = t0 | s1\n 20825: a2 = u64 [sp + 0x58]\n 20828: a3 = u64 [sp + 0x50]\n 20831: a2 = a2 | a3\n 20834: a1 = a1 | a2\n 20837: a1 = a1 >> 0x20\n 20840: u64 [sp + 0x38] = s1\n 20843: a2 = a2 | s1\n 20846: a2 = a2 << 0x20\n 20849: a1 = a1 | a2\n 20852: jump @335 if a1 != 0\n      : @325 (gas: 93)\n 20856: a1 = u8 [a0 + 0x19]\n 20859: a2 = u8 [a0 + 0x18]\n 20862: a3 = u8 [a0 + 0x1a]\n 20865: a4 = u8 [a0 + 0x1b]\n 20868: a1 = a1 << 0x8\n 20871: a1 = a1 | a2\n 20874: a3 = a3 << 0x10\n 20877: a4 = a4 << 0x18\n 20880: a3 = a3 | a4\n 20883: a1 = a1 | a3\n 20886: a2 = u8 [a0 + 0x1d]\n 20889: a3 = u8 [a0 + 0x1c]\n 20892: a4 = u8 [a0 + 0x1e]\n 20895: a5 = u8 [a0 + 0x1f]\n 20898: a2 = a2 << 0x8\n 20901: a2 = a2 | a3\n 20904: a4 = a4 << 0x10\n 20907: a5 = a5 << 0x18\n 20910: a4 = a4 | a5\n 20913: a2 = a2 | a4\n 20916: a2 = a2 << 0x20\n 20919: a1 = a1 | a2\n 20922: u64 [sp + 0x18] = a1\n 20925: a1 = u8 [a0 + 0x11]\n 20928: a2 = u8 [a0 + 0x10]\n 20931: a3 = u8 [a0 + 0x12]\n 20934: a4 = u8 [a0 + 0x13]\n 20937: a1 = a1 << 0x8\n 20940: a1 = a1 | a2\n 20943: a3 = a3 << 0x10\n 20946: a4 = a4 << 0x18\n 20949: a3 = a3 | a4\n 20952: a1 = a1 | a3\n 20955: a2 = u8 [a0 + 0x15]\n 20958: a3 = u8 [a0 + 0x14]\n 20961: a4 = u8 [a0 + 0x16]\n 20964: a5 = u8 [a0 + 0x17]\n 20967: a2 = a2 << 0x8\n 20970: a2 = a2 | a3\n 20973: a4 = a4 << 0x10\n 20976: a5 = a5 << 0x18\n 20979: a4 = a4 | a5\n 20982: a2 = a2 | a4\n 20985: a2 = a2 << 0x20\n 20988: a1 = a1 | a2\n 20991: u64 [sp + 0x10] = a1\n 20994: a1 = u8 [a0 + 0x9]\n 20997: a2 = u8 [a0 + 0x8]\n 21000: a3 = u8 [a0 + 0xa]\n 21003: a4 = u8 [a0 + 0xb]\n 21006: a1 = a1 << 0x8\n 21009: a1 = a1 | a2\n 21012: a3 = a3 << 0x10\n 21015: a4 = a4 << 0x18\n 21018: a3 = a3 | a4\n 21021: a1 = a1 | a3\n 21024: a2 = u8 [a0 + 0xd]\n 21027: a3 = u8 [a0 + 0xc]\n 21030: a4 = u8 [a0 + 0xe]\n 21033: a5 = u8 [a0 + 0xf]\n 21036: a2 = a2 << 0x8\n 21039: a2 = a2 | a3\n 21042: a4 = a4 << 0x10\n 21045: a5 = a5 << 0x18\n 21048: a4 = a4 | a5\n 21051: a2 = a2 | a4\n 21054: a2 = a2 << 0x20\n 21057: s1 = a2 | a1\n 21060: a1 = u8 [a0 + 0x1]\n 21063: a2 = u8 [a0]\n 21065: a3 = u8 [a0 + 0x2]\n 21068: a4 = u8 [a0 + 0x3]\n 21071: a1 = a1 << 0x8\n 21074: a1 = a1 | a2\n 21077: a3 = a3 << 0x10\n 21080: a4 = a4 << 0x18\n 21083: a3 = a3 | a4\n 21086: a1 = a1 | a3\n 21089: a2 = u8 [a0 + 0x5]\n 21092: a3 = u8 [a0 + 0x4]\n 21095: a4 = u8 [a0 + 0x6]\n 21098: a0 = u8 [a0 + 0x7]\n 21101: a2 = a2 << 0x8\n 21104: a2 = a2 | a3\n 21107: a4 = a4 << 0x10\n 21110: a0 = a0 << 0x18\n 21113: a0 = a0 | a4\n 21116: a0 = a0 | a2\n 21119: a0 = a0 << 0x20\n 21122: s0 = a0 | a1\n 21125: i32 a0 = t0 + 0\n 21127: a1 = 0x20\n 21130: ra = 300, jump @0\n      : @326 [@dyn 150] (gas: 73)\n 21136: a4 = s1\n 21138: a2 = u64 [sp + 0x10]\n 21141: s1 = u64 [sp + 0x18]\n 21144: t0 = u64 [sp + 0x48]\n 21147: a1 = a4 >> 0x38\n 21150: u8 [a0 + 0xf] = a1\n 21153: a1 = a4 >> 0x30\n 21156: u8 [a0 + 0xe] = a1\n 21159: a1 = a4 >> 0x28\n 21162: u8 [a0 + 0xd] = a1\n 21165: a1 = a4 >> 0x20\n 21168: u8 [a0 + 0xc] = a1\n 21171: a1 = a4 >> 0x18\n 21174: u8 [a0 + 0xb] = a1\n 21177: a1 = a4 >> 0x10\n 21180: u8 [a0 + 0xa] = a1\n 21183: a1 = a4 >> 0x8\n 21186: u8 [a0 + 0x9] = a1\n 21189: a1 = s0 >> 0x38\n 21192: u8 [a0 + 0x7] = a1\n 21195: a1 = s0 >> 0x30\n 21198: u8 [a0 + 0x6] = a1\n 21201: a1 = s0 >> 0x28\n 21204: u8 [a0 + 0x5] = a1\n 21207: a1 = s0 >> 0x20\n 21210: u8 [a0 + 0x4] = a1\n 21213: a1 = s0 >> 0x18\n 21216: u8 [a0 + 0x3] = a1\n 21219: a1 = s0 >> 0x10\n 21222: u8 [a0 + 0x2] = a1\n 21225: a1 = s0 >> 0x8\n 21228: u8 [a0 + 0x1] = a1\n 21231: a1 = a2 >> 0x38\n 21234: u8 [a0 + 0x17] = a1\n 21237: a1 = a2 >> 0x30\n 21240: u8 [a0 + 0x16] = a1\n 21243: a1 = a2 >> 0x28\n 21246: u8 [a0 + 0x15] = a1\n 21249: a1 = a2 >> 0x20\n 21252: u8 [a0 + 0x14] = a1\n 21255: a1 = a2 >> 0x18\n 21258: u8 [a0 + 0x13] = a1\n 21261: a1 = a2 >> 0x10\n 21264: u8 [a0 + 0x12] = a1\n 21267: a1 = a2 >> 0x8\n 21270: u8 [a0 + 0x11] = a1\n 21273: a1 = s1 >> 0x38\n 21276: u8 [a0 + 0x1f] = a1\n 21279: a1 = s1 >> 0x30\n 21282: u8 [a0 + 0x1e] = a1\n 21285: a1 = s1 >> 0x28\n 21288: u8 [a0 + 0x1d] = a1\n 21291: a1 = s1 >> 0x20\n 21294: u8 [a0 + 0x1c] = a1\n 21297: a1 = s1 >> 0x18\n 21300: u8 [a0 + 0x1b] = a1\n 21303: a1 = s1 >> 0x10\n 21306: u8 [a0 + 0x1a] = a1\n 21309: a1 = s1 >> 0x8\n 21312: u8 [a0 + 0x19] = a1\n 21315: ra = u64 [sp + 0x58]\n 21318: t2 = u64 [sp + 0x38]\n 21321: t1 = t2 | ra\n 21324: a1 = 0xffffffe0\n 21334: a3 = t0 <u a1\n 21337: a5 = u64 [sp + 0x50]\n 21340: a3 = 0 if a5 != 0\n 21342: a3 = 0 if t1 != 0\n 21344: u8 [a0 + 0x10] = a2\n 21347: u8 [a0 + 0x8] = a4\n 21350: u8 [a0] = s0\n 21352: u8 [a0 + 0x18] = s1\n 21355: jump @335 if a3 == 0\n      : @327 (gas: 9)\n 21359: a0 = u64 [sp + 0x30]\n 21362: a3 = u64 [sp + 0x28]\n 21365: a0 = a0 | a3\n 21368: a3 = u64 [sp + 0x20]\n 21371: a1 = a3 <u a1\n 21374: a3 = u64 [sp + 0x40]\n 21377: a1 = 0 if a3 != 0\n 21379: a1 = 0 if a0 != 0\n 21381: jump @335 if a1 == 0\n      : @328 (gas: 15)\n 21385: a1 = reverse s0\n 21387: a3 = reverse a4\n 21389: a4 = reverse a2\n 21391: s0 = reverse s1\n 21393: a0 = s0 | a3\n 21396: u64 [sp + 0x30] = a1\n 21399: u64 [sp + 0x20] = a4\n 21402: a1 = a1 | a4\n 21405: a0 = a0 | a1\n 21408: a0 = a0 >> 0x20\n 21411: u64 [sp + 0x28] = a3\n 21414: a1 = a1 | a3\n 21417: a1 = a1 << 0x20\n 21420: a0 = a0 | a1\n 21423: jump @335 if a0 != 0\n      : @329 (gas: 19)\n 21427: a3 = t0 + 0x20\n 21430: u64 [sp + 0x40] = a3\n 21433: a0 = a3 <u t0\n 21436: a1 = a5 + a0\n 21439: u64 [sp + 0x48] = a1\n 21442: a1 = a1 <u a5\n 21445: a1 = a0 if a0 == 0\n 21448: a1 = a1 + t2\n 21451: u64 [sp + 0x50] = a1\n 21454: a0 = a1 <u t2\n 21457: a0 = a0 + ra\n 21460: u64 [sp + 0x58] = a0\n 21463: i32 a0 = a3 + 0\n 21465: a1 = u64 [sp + 0x8]\n 21468: i32 a1 = a1 + 0x20\n 21471: u64 [sp + 0x38] = a1\n 21474: i32 s1 = s0 + 0\n 21476: a1 = s1\n 21478: ra = 302, jump @0\n      : @330 [@dyn 151] (gas: 5)\n 21484: u64 [sp + 0x18] = a0\n 21487: a0 = u64 [sp + 0x38]\n 21490: a1 = s1\n 21492: s1 = s0\n 21494: ra = 304, jump @0\n      : @331 [@dyn 152] (gas: 4)\n 21500: a1 = a0\n 21502: a0 = u64 [sp + 0x18]\n 21505: a2 = s0\n 21507: ra = 306, jump @8\n      : @332 [@dyn 153] (gas: 29)\n 21513: a0 = u64 [sp + 0x40]\n 21516: a0 = a0 + s0\n 21519: a1 = a0 <u s0\n 21522: a4 = u64 [sp + 0x20]\n 21525: a2 = u64 [sp + 0x48]\n 21528: a2 = a2 + a4\n 21531: a2 = a2 + a1\n 21534: a3 = a2 ^ a4\n 21537: a4 = a2 <u a4\n 21540: a4 = a1 if a3 == 0\n 21543: a5 = u64 [sp + 0x28]\n 21546: a1 = u64 [sp + 0x50]\n 21549: a1 = a1 + a5\n 21552: a4 = a4 + a1\n 21555: a3 = a4 <u a1\n 21558: a1 = a1 <u a5\n 21561: a5 = u64 [sp + 0x30]\n 21564: s0 = u64 [sp + 0x58]\n 21567: a5 = a5 + s0\n 21570: a1 = a1 + a5\n 21573: a1 = a1 + a3\n 21576: a3 = a0 | a4\n 21579: a1 = a1 | a2\n 21582: a3 = a3 | a1\n 21585: a3 = a3 >> 0x20\n 21588: a1 = a1 | a4\n 21591: a1 = a1 << 0x20\n 21594: a1 = a1 | a3\n 21597: jump @335 if a1 != 0\n      : @333 (gas: 3)\n 21601: i32 a0 = a0 + 0\n 21603: a1 = 0x20\n 21606: ra = 308, jump @0\n      : @334 [@dyn 154] (gas: 56)\n 21612: u8 [a0 + 31] = 0\n 21615: u8 [a0 + 30] = 0\n 21618: u8 [a0 + 29] = 0\n 21621: u8 [a0 + 28] = 0\n 21624: u8 [a0 + 27] = 0\n 21627: u8 [a0 + 26] = 0\n 21630: u8 [a0 + 25] = 0\n 21633: u8 [a0 + 24] = 0\n 21636: u8 [a0 + 23] = 0\n 21639: u8 [a0 + 22] = 0\n 21642: u8 [a0 + 21] = 0\n 21645: u8 [a0 + 20] = 0\n 21648: u8 [a0 + 19] = 0\n 21651: u8 [a0 + 18] = 0\n 21654: u8 [a0 + 17] = 0\n 21657: u8 [a0 + 16] = 0\n 21660: u8 [a0 + 15] = 0\n 21663: u8 [a0 + 14] = 0\n 21666: u8 [a0 + 13] = 0\n 21669: u8 [a0 + 12] = 0\n 21672: u8 [a0 + 11] = 0\n 21675: u8 [a0 + 10] = 0\n 21678: u8 [a0 + 9] = 0\n 21681: u8 [a0 + 8] = 0\n 21684: u8 [a0 + 7] = 0\n 21687: u8 [a0 + 6] = 0\n 21690: u8 [a0 + 5] = 0\n 21693: u8 [a0 + 4] = 0\n 21696: u8 [a0 + 3] = 0\n 21699: u8 [a0 + 2] = 0\n 21702: u8 [a0 + 1] = 0\n 21705: u8 [a0 + 0] = 0\n 21707: a0 = s1 + 0x1f\n 21710: a1 = 0x1ffffffe0\n 21720: a0 = a0 & a1\n 21723: a1 = u64 [sp + 0x40]\n 21726: a1 = a1 + a0\n 21729: a0 = a1 <u a0\n 21732: a2 = u64 [sp + 0x48]\n 21735: a2 = a2 + a0\n 21738: a0 = 0 if a2 != 0\n 21740: a3 = u64 [sp + 0x50]\n 21743: a0 = a0 + a3\n 21746: a3 = a0 <u a3\n 21749: a4 = u64 [sp + 0x58]\n 21752: a3 = a3 + a4\n 21755: a4 = u64 [sp]\n 21757: u64 [a4] = a1\n 21759: u64 [a4 + 0x8] = a2\n 21762: u64 [a4 + 0x10] = a0\n 21765: u64 [a4 + 0x18] = a3\n 21768: ra = u64 [sp + 0x70]\n 21771: s0 = u64 [sp + 0x68]\n 21774: s1 = u64 [sp + 0x60]\n 21777: sp = sp + 0x78\n 21780: ret\n      : @335 (gas: 1)\n 21782: trap\n      : @336 (gas: 23)\n 21783: sp = sp + 0xfffffffffffffec0\n 21787: u64 [sp + 0x138] = ra\n 21791: u64 [sp + 0x130] = s0\n 21795: u64 [sp + 0x128] = s1\n 21799: s0 = sp + 0x140\n 21803: sp = sp & 0xfffffffffffffff0\n 21806: t0 = u64 [a1 + 0x18]\n 21809: t1 = u64 [a1 + 0x10]\n 21812: s1 = u64 [a1 + 0x8]\n 21815: a1 = u64 [a1]\n 21817: u64 [sp + 0xb0] = s1\n 21821: u64 [sp + 0x98] = t0\n 21825: t0 = s1 | t0\n 21828: u64 [sp + 0xb8] = a1\n 21832: s1 = a1 | t1\n 21835: s1 = s1 | t0\n 21838: s1 = s1 >> 0x20\n 21841: u64 [sp + 0x90] = t1\n 21845: a1 = t0 | t1\n 21848: a1 = a1 << 0x20\n 21851: a1 = a1 | s1\n 21854: u64 [sp + 0x40] = a0\n 21857: jump @348 if a1 != 0\n      : @337 (gas: 44)\n 21861: a0 = u64 [s0]\n 21863: a1 = u64 [a0 + 0x18]\n 21866: u64 [sp + 0x18] = a1\n 21869: a1 = u64 [a0 + 0x10]\n 21872: u64 [sp + 0x8] = a1\n 21875: a1 = u64 [a0 + 0x8]\n 21878: u64 [sp + 0x10] = a1\n 21881: a0 = u64 [a0]\n 21883: u64 [sp] = a0\n 21885: a0 = u64 [a5 + 0x18]\n 21888: u64 [sp + 0x20] = a0\n 21891: a0 = u64 [a5 + 0x10]\n 21894: u64 [sp + 0x28] = a0\n 21897: a0 = u64 [a5 + 0x8]\n 21900: u64 [sp + 0x30] = a0\n 21903: a0 = u64 [a5]\n 21905: u64 [sp + 0x38] = a0\n 21908: a0 = u64 [a4 + 0x18]\n 21911: u64 [sp + 0x48] = a0\n 21914: a0 = u64 [a4 + 0x10]\n 21917: u64 [sp + 0x50] = a0\n 21920: a0 = u64 [a4 + 0x8]\n 21923: u64 [sp + 0x58] = a0\n 21926: a0 = u64 [a4]\n 21928: u64 [sp + 0x60] = a0\n 21931: a0 = u64 [a3 + 0x18]\n 21934: u64 [sp + 0x70] = a0\n 21937: a0 = u64 [a3 + 0x10]\n 21940: u64 [sp + 0x78] = a0\n 21943: a0 = u64 [a3 + 0x8]\n 21946: u64 [sp + 0x80] = a0\n 21950: a0 = u64 [a2 + 0x10]\n 21953: a1 = u64 [a3]\n 21955: u64 [sp + 0x68] = a1\n 21958: a1 = u64 [a2 + 0x8]\n 21961: u64 [sp + 0x88] = a1\n 21965: a1 = u64 [a2]\n 21967: u64 [sp + 0xa0] = a1\n 21971: a0 = a0 << 0x20\n 21974: s1 = a0 >> 0x20\n 21977: a0 = i32 [sp + 0xb8]\n 21981: a1 = 0x20\n 21984: u64 [sp + 0xa8] = a0\n 21988: ra = 310, jump @0\n      : @338 [@dyn 155] (gas: 67)\n 21994: a1 = reverse s1\n 21996: a2 = u64 [sp + 0x88]\n 22000: a2 = reverse a2\n 22002: a3 = u64 [sp + 0xa0]\n 22006: a3 = reverse a3\n 22008: a4 = a3 >> 0x38\n 22011: u8 [a0 + 0x1f] = a4\n 22014: a4 = a3 >> 0x30\n 22017: u8 [a0 + 0x1e] = a4\n 22020: a4 = a3 >> 0x28\n 22023: u8 [a0 + 0x1d] = a4\n 22026: a4 = a3 >> 0x20\n 22029: u8 [a0 + 0x1c] = a4\n 22032: a4 = a3 >> 0x18\n 22035: u8 [a0 + 0x1b] = a4\n 22038: a4 = a3 >> 0x10\n 22041: u8 [a0 + 0x1a] = a4\n 22044: a4 = a3 >> 0x8\n 22047: u8 [a0 + 0x19] = a4\n 22050: u8 [a0 + 0x18] = a3\n 22053: u8 [a0 + 0x10] = a2\n 22056: u8 [a0 + 11] = 0\n 22059: u8 [a0 + 10] = 0\n 22062: u8 [a0 + 9] = 0\n 22065: u8 [a0 + 7] = 0\n 22068: u8 [a0 + 6] = 0\n 22071: u8 [a0 + 5] = 0\n 22074: u8 [a0 + 4] = 0\n 22077: u8 [a0 + 3] = 0\n 22080: u8 [a0 + 2] = 0\n 22083: u8 [a0 + 1] = 0\n 22086: u8 [a0 + 0] = 0\n 22088: a3 = a2 >> 0x38\n 22091: u8 [a0 + 0x17] = a3\n 22094: a3 = a2 >> 0x30\n 22097: u8 [a0 + 0x16] = a3\n 22100: a3 = a2 >> 0x28\n 22103: u8 [a0 + 0x15] = a3\n 22106: a3 = a2 >> 0x20\n 22109: u8 [a0 + 0x14] = a3\n 22112: a3 = a2 >> 0x18\n 22115: u8 [a0 + 0x13] = a3\n 22118: a3 = a2 >> 0x10\n 22121: u8 [a0 + 0x12] = a3\n 22124: a2 = a2 >> 0x8\n 22127: u8 [a0 + 0x11] = a2\n 22130: u8 [a0 + 0x8] = a1\n 22133: a2 = a1 >> 0x38\n 22136: u8 [a0 + 0xf] = a2\n 22139: a2 = a1 >> 0x30\n 22142: u8 [a0 + 0xe] = a2\n 22145: a2 = a1 >> 0x28\n 22148: u8 [a0 + 0xd] = a2\n 22151: a1 = a1 >> 0x20\n 22154: a2 = u64 [sp + 0x98]\n 22158: a4 = u64 [sp + 0x90]\n 22162: a4 = a4 | a2\n 22165: s1 = 0x100000000\n 22175: a2 = 0xffffffe0\n 22185: a3 = u64 [sp + 0xb8]\n 22189: a2 = a3 <u a2\n 22192: a3 = u64 [sp + 0xb0]\n 22196: a2 = 0 if a3 != 0\n 22198: u64 [sp + 0xa0] = a4\n 22202: a2 = 0 if a4 != 0\n 22204: u8 [a0 + 0xc] = a1\n 22207: jump @348 if a2 == 0\n      : @339 (gas: 4)\n 22211: a0 = u64 [sp + 0xa8]\n 22215: i32 a0 = a0 + 0x20\n 22218: a1 = 0x20\n 22221: ra = 312, jump @0\n      : @340 [@dyn 156] (gas: 76)\n 22227: a1 = u64 [sp + 0x70]\n 22230: a1 = reverse a1\n 22232: a2 = u64 [sp + 0x78]\n 22235: a2 = reverse a2\n 22237: a3 = u64 [sp + 0x80]\n 22241: a3 = reverse a3\n 22243: a4 = u64 [sp + 0x68]\n 22246: a4 = reverse a4\n 22248: a5 = a4 >> 0x38\n 22251: u8 [a0 + 0x1f] = a5\n 22254: a5 = a4 >> 0x30\n 22257: u8 [a0 + 0x1e] = a5\n 22260: a5 = a4 >> 0x28\n 22263: u8 [a0 + 0x1d] = a5\n 22266: a5 = a4 >> 0x20\n 22269: u8 [a0 + 0x1c] = a5\n 22272: a5 = a4 >> 0x18\n 22275: u8 [a0 + 0x1b] = a5\n 22278: a5 = a4 >> 0x10\n 22281: u8 [a0 + 0x1a] = a5\n 22284: a5 = a4 >> 0x8\n 22287: u8 [a0 + 0x19] = a5\n 22290: u8 [a0 + 0x18] = a4\n 22293: u8 [a0 + 0x10] = a3\n 22296: a4 = a3 >> 0x38\n 22299: u8 [a0 + 0x17] = a4\n 22302: a4 = a3 >> 0x30\n 22305: u8 [a0 + 0x16] = a4\n 22308: a4 = a3 >> 0x28\n 22311: u8 [a0 + 0x15] = a4\n 22314: a4 = a3 >> 0x20\n 22317: u8 [a0 + 0x14] = a4\n 22320: a4 = a3 >> 0x18\n 22323: u8 [a0 + 0x13] = a4\n 22326: a4 = a3 >> 0x10\n 22329: u8 [a0 + 0x12] = a4\n 22332: a3 = a3 >> 0x8\n 22335: u8 [a0 + 0x11] = a3\n 22338: u8 [a0 + 0x8] = a2\n 22341: a3 = a2 >> 0x38\n 22344: u8 [a0 + 0xf] = a3\n 22347: a3 = a2 >> 0x30\n 22350: u8 [a0 + 0xe] = a3\n 22353: a3 = a2 >> 0x28\n 22356: u8 [a0 + 0xd] = a3\n 22359: a3 = a2 >> 0x20\n 22362: u8 [a0 + 0xc] = a3\n 22365: a3 = a2 >> 0x18\n 22368: u8 [a0 + 0xb] = a3\n 22371: a3 = a2 >> 0x10\n 22374: u8 [a0 + 0xa] = a3\n 22377: a2 = a2 >> 0x8\n 22380: u8 [a0 + 0x9] = a2\n 22383: u8 [a0] = a1\n 22385: a2 = a1 >> 0x38\n 22388: u8 [a0 + 0x7] = a2\n 22391: a2 = a1 >> 0x30\n 22394: u8 [a0 + 0x6] = a2\n 22397: a2 = a1 >> 0x28\n 22400: u8 [a0 + 0x5] = a2\n 22403: a2 = a1 >> 0x20\n 22406: u8 [a0 + 0x4] = a2\n 22409: a2 = a1 >> 0x18\n 22412: u8 [a0 + 0x3] = a2\n 22415: a2 = a1 >> 0x10\n 22418: u8 [a0 + 0x2] = a2\n 22421: a1 = a1 >> 0x8\n 22424: a2 = s1 + 0xffffffffffffffc0\n 22427: a3 = u64 [sp + 0xb8]\n 22431: a2 = a3 <u a2\n 22434: a3 = u64 [sp + 0xb0]\n 22438: a2 = 0 if a3 != 0\n 22440: a3 = u64 [sp + 0xa0]\n 22444: a2 = 0 if a3 != 0\n 22446: u8 [a0 + 0x1] = a1\n 22449: jump @348 if a2 == 0\n      : @341 (gas: 19)\n 22453: a0 = u64 [sp + 0xb8]\n 22457: a1 = a0 + 0xa0\n 22461: u64 [sp + 0x88] = a1\n 22465: a0 = a1 <u a0\n 22468: a1 = u64 [sp + 0xb0]\n 22472: a2 = a1 + a0\n 22475: u64 [sp + 0x80] = a2\n 22479: s1 = a2 <u a1\n 22482: s1 = a0 if a0 == 0\n 22485: a0 = u64 [sp + 0x90]\n 22489: s1 = s1 + a0\n 22492: a0 = s1 <u a0\n 22495: a1 = u64 [sp + 0x98]\n 22499: a0 = a0 + a1\n 22502: u64 [sp + 0x98] = a0\n 22506: a0 = u64 [sp + 0xa8]\n 22510: i32 a0 = a0 + 0x40\n 22513: a1 = 0x20\n 22516: ra = 314, jump @0\n      : @342 [@dyn 157] (gas: 51)\n 22522: u8 [a0 + 31] = 0xa0\n 22527: u8 [a0 + 30] = 0\n 22530: u8 [a0 + 29] = 0\n 22533: u8 [a0 + 28] = 0\n 22536: u8 [a0 + 27] = 0\n 22539: u8 [a0 + 26] = 0\n 22542: u8 [a0 + 25] = 0\n 22545: u8 [a0 + 24] = 0\n 22548: u8 [a0 + 23] = 0\n 22551: u8 [a0 + 22] = 0\n 22554: u8 [a0 + 21] = 0\n 22557: u8 [a0 + 20] = 0\n 22560: u8 [a0 + 19] = 0\n 22563: u8 [a0 + 18] = 0\n 22566: u8 [a0 + 17] = 0\n 22569: u8 [a0 + 16] = 0\n 22572: u8 [a0 + 15] = 0\n 22575: u8 [a0 + 14] = 0\n 22578: u8 [a0 + 13] = 0\n 22581: u8 [a0 + 12] = 0\n 22584: u8 [a0 + 11] = 0\n 22587: u8 [a0 + 10] = 0\n 22590: u8 [a0 + 9] = 0\n 22593: u8 [a0 + 8] = 0\n 22596: u8 [a0 + 7] = 0\n 22599: u8 [a0 + 6] = 0\n 22602: u8 [a0 + 5] = 0\n 22605: u8 [a0 + 4] = 0\n 22608: u8 [a0 + 3] = 0\n 22611: u8 [a0 + 2] = 0\n 22614: u8 [a0 + 1] = 0\n 22617: u8 [a0 + 0] = 0\n 22619: a0 = u64 [sp + 0x98]\n 22623: u64 [sp + 0xd8] = a0\n 22627: u64 [sp + 0xd0] = s1\n 22631: a0 = u64 [sp + 0x80]\n 22635: u64 [sp + 0xc8] = a0\n 22639: a0 = u64 [sp + 0x88]\n 22643: u64 [sp + 0xc0] = a0\n 22647: a0 = u64 [sp + 0x48]\n 22650: u64 [sp + 0xf8] = a0\n 22654: a0 = u64 [sp + 0x50]\n 22657: u64 [sp + 0xf0] = a0\n 22661: a0 = u64 [sp + 0x58]\n 22664: u64 [sp + 0xe8] = a0\n 22668: a0 = sp + 0x100\n 22672: a1 = sp + 0xe0\n 22676: a2 = sp + 0xc0\n 22680: a3 = u64 [sp + 0x60]\n 22683: u64 [sp + 0xe0] = a3\n 22687: ra = 316, jump @322\n      : @343 [@dyn 158] (gas: 9)\n 22693: s1 = 0x100000000\n 22703: a0 = 0xffffffa0\n 22713: a1 = u64 [sp + 0xb8]\n 22717: a0 = a1 <u a0\n 22720: a1 = u64 [sp + 0xb0]\n 22724: a0 = 0 if a1 != 0\n 22726: a1 = u64 [sp + 0xa0]\n 22730: a0 = 0 if a1 != 0\n 22732: jump @348 if a0 == 0\n      : @344 (gas: 12)\n 22736: a0 = u64 [sp + 0x118]\n 22740: u64 [sp + 0x90] = a0\n 22744: a0 = u64 [sp + 0x110]\n 22748: u64 [sp + 0x98] = a0\n 22752: a0 = u64 [sp + 0x108]\n 22756: u64 [sp + 0x88] = a0\n 22760: a0 = u64 [sp + 0x100]\n 22764: u64 [sp + 0x80] = a0\n 22768: a0 = u64 [sp + 0xa8]\n 22772: i32 a0 = a0 + 0x60\n 22775: a1 = 0x20\n 22778: ra = 318, jump @0\n      : @345 [@dyn 159] (gas: 76)\n 22784: a1 = u64 [sp + 0x20]\n 22787: a1 = reverse a1\n 22789: a2 = u64 [sp + 0x28]\n 22792: a2 = reverse a2\n 22794: a3 = u64 [sp + 0x30]\n 22797: a3 = reverse a3\n 22799: a4 = u64 [sp + 0x38]\n 22802: a4 = reverse a4\n 22804: a5 = a4 >> 0x38\n 22807: u8 [a0 + 0x1f] = a5\n 22810: a5 = a4 >> 0x30\n 22813: u8 [a0 + 0x1e] = a5\n 22816: a5 = a4 >> 0x28\n 22819: u8 [a0 + 0x1d] = a5\n 22822: a5 = a4 >> 0x20\n 22825: u8 [a0 + 0x1c] = a5\n 22828: a5 = a4 >> 0x18\n 22831: u8 [a0 + 0x1b] = a5\n 22834: a5 = a4 >> 0x10\n 22837: u8 [a0 + 0x1a] = a5\n 22840: a5 = a4 >> 0x8\n 22843: u8 [a0 + 0x19] = a5\n 22846: u8 [a0 + 0x18] = a4\n 22849: u8 [a0 + 0x10] = a3\n 22852: a4 = a3 >> 0x38\n 22855: u8 [a0 + 0x17] = a4\n 22858: a4 = a3 >> 0x30\n 22861: u8 [a0 + 0x16] = a4\n 22864: a4 = a3 >> 0x28\n 22867: u8 [a0 + 0x15] = a4\n 22870: a4 = a3 >> 0x20\n 22873: u8 [a0 + 0x14] = a4\n 22876: a4 = a3 >> 0x18\n 22879: u8 [a0 + 0x13] = a4\n 22882: a4 = a3 >> 0x10\n 22885: u8 [a0 + 0x12] = a4\n 22888: a3 = a3 >> 0x8\n 22891: u8 [a0 + 0x11] = a3\n 22894: u8 [a0 + 0x8] = a2\n 22897: a3 = a2 >> 0x38\n 22900: u8 [a0 + 0xf] = a3\n 22903: a3 = a2 >> 0x30\n 22906: u8 [a0 + 0xe] = a3\n 22909: a3 = a2 >> 0x28\n 22912: u8 [a0 + 0xd] = a3\n 22915: a3 = a2 >> 0x20\n 22918: u8 [a0 + 0xc] = a3\n 22921: a3 = a2 >> 0x18\n 22924: u8 [a0 + 0xb] = a3\n 22927: a3 = a2 >> 0x10\n 22930: u8 [a0 + 0xa] = a3\n 22933: a2 = a2 >> 0x8\n 22936: u8 [a0 + 0x9] = a2\n 22939: u8 [a0] = a1\n 22941: a2 = a1 >> 0x38\n 22944: u8 [a0 + 0x7] = a2\n 22947: a2 = a1 >> 0x30\n 22950: u8 [a0 + 0x6] = a2\n 22953: a2 = a1 >> 0x28\n 22956: u8 [a0 + 0x5] = a2\n 22959: a2 = a1 >> 0x20\n 22962: u8 [a0 + 0x4] = a2\n 22965: a2 = a1 >> 0x18\n 22968: u8 [a0 + 0x3] = a2\n 22971: a2 = a1 >> 0x10\n 22974: u8 [a0 + 0x2] = a2\n 22977: a1 = a1 >> 0x8\n 22980: a2 = s1 + 0xffffffffffffff80\n 22983: a3 = u64 [sp + 0xb8]\n 22987: a2 = a3 <u a2\n 22990: a3 = u64 [sp + 0xb0]\n 22994: a2 = 0 if a3 != 0\n 22996: a3 = u64 [sp + 0xa0]\n 23000: a2 = 0 if a3 != 0\n 23002: u8 [a0 + 0x1] = a1\n 23005: jump @348 if a2 == 0\n      : @346 (gas: 12)\n 23009: a0 = u64 [sp + 0x8]\n 23012: a1 = u64 [sp]\n 23014: a0 = a0 | a1\n 23017: a1 = u64 [sp + 0x18]\n 23020: a2 = u64 [sp + 0x10]\n 23023: a1 = a1 | a2\n 23026: a0 = a0 | a1\n 23029: s1 = a0 >u 0\n 23031: a0 = u64 [sp + 0xa8]\n 23035: i32 a0 = a0 + 0x80\n 23039: a1 = 0x20\n 23042: ra = 320, jump @0\n      : @347 [@dyn 160] (gas: 47)\n 23048: u8 [a0 + 30] = 0\n 23051: u8 [a0 + 29] = 0\n 23054: u8 [a0 + 28] = 0\n 23057: u8 [a0 + 27] = 0\n 23060: u8 [a0 + 26] = 0\n 23063: u8 [a0 + 25] = 0\n 23066: u8 [a0 + 24] = 0\n 23069: u8 [a0 + 23] = 0\n 23072: u8 [a0 + 22] = 0\n 23075: u8 [a0 + 21] = 0\n 23078: u8 [a0 + 20] = 0\n 23081: u8 [a0 + 19] = 0\n 23084: u8 [a0 + 18] = 0\n 23087: u8 [a0 + 17] = 0\n 23090: u8 [a0 + 16] = 0\n 23093: u8 [a0 + 15] = 0\n 23096: u8 [a0 + 14] = 0\n 23099: u8 [a0 + 13] = 0\n 23102: u8 [a0 + 12] = 0\n 23105: u8 [a0 + 11] = 0\n 23108: u8 [a0 + 10] = 0\n 23111: u8 [a0 + 9] = 0\n 23114: u8 [a0 + 8] = 0\n 23117: u8 [a0 + 7] = 0\n 23120: u8 [a0 + 6] = 0\n 23123: u8 [a0 + 5] = 0\n 23126: u8 [a0 + 4] = 0\n 23129: u8 [a0 + 3] = 0\n 23132: u8 [a0 + 2] = 0\n 23135: u8 [a0 + 1] = 0\n 23138: u8 [a0 + 0] = 0\n 23140: u8 [a0 + 0x1f] = s1\n 23143: a0 = u64 [sp + 0x40]\n 23146: a1 = u64 [sp + 0x80]\n 23150: u64 [a0] = a1\n 23152: a1 = u64 [sp + 0x90]\n 23156: u64 [a0 + 0x18] = a1\n 23159: a1 = u64 [sp + 0x88]\n 23163: u64 [a0 + 0x8] = a1\n 23166: a1 = u64 [sp + 0x98]\n 23170: u64 [a0 + 0x10] = a1\n 23173: sp = s0 + 0xfffffffffffffec0\n 23177: ra = u64 [sp + 0x138]\n 23181: s0 = u64 [sp + 0x130]\n 23185: s1 = u64 [sp + 0x128]\n 23189: sp = sp + 0x140\n 23193: ret\n      : @348 (gas: 1)\n 23195: trap\n      : @349 (gas: 8)\n 23196: a0 = u64 [sp + 0x270]\n 23200: a1 = u64 [sp + 0x278]\n 23204: a2 = u64 [sp + 0x268]\n 23208: a3 = u64 [sp + 0x260]\n 23212: a1 = a1 | a2\n 23215: a0 = a0 | a3\n 23218: a0 = a0 | a1\n 23221: jump @357 if a0 != 0\n      : @350 (gas: 2)\n 23225: a0 = i32 [0x200a8]\n 23230: jump @357 if a0 <=u 35\n      : @351 (gas: 14)\n 23235: i32 a0 = sp + 0x280\n 23239: a1 = 0x4\n 23242: ecalli 2 // 'call_data_load'\n 23244: a2 = u64 [sp + 0x280]\n 23248: a0 = u64 [sp + 0x288]\n 23252: a1 = u64 [sp + 0x290]\n 23256: a3 = u64 [sp + 0x298]\n 23260: u64 [sp + 0x1b8] = a3\n 23264: u64 [sp + 0x1b0] = a1\n 23268: u64 [sp + 0x1a8] = a0\n 23272: a0 = sp + 0x1c0\n 23276: a1 = sp + 0x1a0\n 23280: u64 [sp + 0x1a0] = a2\n 23284: ra = 322, jump @317\n      : @352 [@dyn 161] (gas: 43)\n 23290: a0 = u64 [sp + 0x1c0]\n 23294: u64 [sp + 0xb0] = a0\n 23298: a0 = u64 [sp + 0x1c8]\n 23302: u64 [sp + 0xa8] = a0\n 23306: a0 = u64 [sp + 0x1d0]\n 23310: u64 [sp + 0xa0] = a0\n 23314: a0 = u64 [sp + 0x1d8]\n 23318: u64 [sp + 0x98] = a0\n 23322: a0 = u64 [sp + 0x1e0]\n 23326: u64 [sp + 0x90] = a0\n 23330: a0 = u64 [sp + 0x1e8]\n 23334: u64 [sp + 0x88] = a0\n 23338: a0 = u64 [sp + 0x1f0]\n 23342: u64 [sp + 0x80] = a0\n 23346: a0 = u64 [sp + 0x1f8]\n 23350: u64 [sp + 0x78] = a0\n 23353: a0 = u64 [sp + 0x200]\n 23357: u64 [sp + 0x70] = a0\n 23360: a0 = u64 [sp + 0x208]\n 23364: u64 [sp + 0x68] = a0\n 23367: a0 = u64 [sp + 0x210]\n 23371: u64 [sp + 0x60] = a0\n 23374: a0 = u64 [sp + 0x218]\n 23378: u64 [sp + 0x58] = a0\n 23381: a0 = u64 [sp + 0x220]\n 23385: u64 [sp + 0x50] = a0\n 23388: a0 = u64 [sp + 0x228]\n 23392: u64 [sp + 0x48] = a0\n 23395: a0 = u64 [sp + 0x230]\n 23399: u64 [sp + 0x40] = a0\n 23402: a0 = u64 [sp + 0x238]\n 23406: u64 [sp + 0x38] = a0\n 23409: a0 = u64 [sp + 0x240]\n 23413: u64 [sp + 0x30] = a0\n 23416: a0 = u64 [sp + 0x248]\n 23420: u64 [sp + 0x28] = a0\n 23423: a0 = u64 [sp + 0x250]\n 23427: u64 [sp + 0x20] = a0\n 23430: a0 = u64 [sp + 0x258]\n 23434: u64 [sp + 0x18] = a0\n 23437: a0 = 0x40\n 23440: a1 = 0x20\n 23443: ra = 324, jump @0\n      : @353 [@dyn 162] (gas: 148)\n 23449: a1 = u8 [a0 + 0x1]\n 23452: a2 = u8 [a0]\n 23454: a3 = u8 [a0 + 0x2]\n 23457: a4 = u8 [a0 + 0x3]\n 23460: a1 = a1 << 0x8\n 23463: a1 = a1 | a2\n 23466: a3 = a3 << 0x10\n 23469: a4 = a4 << 0x18\n 23472: a3 = a3 | a4\n 23475: a1 = a1 | a3\n 23478: a2 = u8 [a0 + 0x5]\n 23481: a3 = u8 [a0 + 0x4]\n 23484: a4 = u8 [a0 + 0x6]\n 23487: a5 = u8 [a0 + 0x7]\n 23490: a2 = a2 << 0x8\n 23493: a2 = a2 | a3\n 23496: a4 = a4 << 0x10\n 23499: a5 = a5 << 0x18\n 23502: a4 = a4 | a5\n 23505: a2 = a2 | a4\n 23508: a2 = a2 << 0x20\n 23511: t0 = a2 | a1\n 23514: a2 = u8 [a0 + 0x9]\n 23517: a3 = u8 [a0 + 0x8]\n 23520: a4 = u8 [a0 + 0xa]\n 23523: a5 = u8 [a0 + 0xb]\n 23526: a2 = a2 << 0x8\n 23529: a2 = a2 | a3\n 23532: a4 = a4 << 0x10\n 23535: a5 = a5 << 0x18\n 23538: a4 = a4 | a5\n 23541: a2 = a2 | a4\n 23544: a3 = u8 [a0 + 0xd]\n 23547: a4 = u8 [a0 + 0xc]\n 23550: a5 = u8 [a0 + 0xe]\n 23553: s1 = u8 [a0 + 0xf]\n 23556: a3 = a3 << 0x8\n 23559: a3 = a3 | a4\n 23562: a5 = a5 << 0x10\n 23565: s1 = s1 << 0x18\n 23568: a5 = a5 | s1\n 23571: a3 = a3 | a5\n 23574: a3 = a3 << 0x20\n 23577: a2 = a2 | a3\n 23580: a3 = u8 [a0 + 0x11]\n 23583: a4 = u8 [a0 + 0x10]\n 23586: a5 = u8 [a0 + 0x12]\n 23589: s1 = u8 [a0 + 0x13]\n 23592: a3 = a3 << 0x8\n 23595: a3 = a3 | a4\n 23598: a5 = a5 << 0x10\n 23601: s1 = s1 << 0x18\n 23604: a5 = a5 | s1\n 23607: a3 = a3 | a5\n 23610: a4 = u8 [a0 + 0x15]\n 23613: a5 = u8 [a0 + 0x14]\n 23616: s1 = u8 [a0 + 0x16]\n 23619: a1 = u8 [a0 + 0x17]\n 23622: a4 = a4 << 0x8\n 23625: a4 = a4 | a5\n 23628: s1 = s1 << 0x10\n 23631: a1 = a1 << 0x18\n 23634: a1 = a1 | s1\n 23637: a1 = a1 | a4\n 23640: a1 = a1 << 0x20\n 23643: a3 = a3 | a1\n 23646: a1 = u8 [a0 + 0x19]\n 23649: a4 = u8 [a0 + 0x18]\n 23652: a5 = u8 [a0 + 0x1a]\n 23655: s1 = u8 [a0 + 0x1b]\n 23658: a1 = a1 << 0x8\n 23661: a1 = a1 | a4\n 23664: a5 = a5 << 0x10\n 23667: s1 = s1 << 0x18\n 23670: a5 = a5 | s1\n 23673: a1 = a1 | a5\n 23676: a4 = u8 [a0 + 0x1d]\n 23679: a5 = u8 [a0 + 0x1c]\n 23682: s1 = u8 [a0 + 0x1e]\n 23685: a0 = u8 [a0 + 0x1f]\n 23688: a4 = a4 << 0x8\n 23691: a4 = a4 | a5\n 23694: s1 = s1 << 0x10\n 23697: a0 = a0 << 0x18\n 23700: a0 = a0 | s1\n 23703: a0 = a0 | a4\n 23706: a0 = a0 << 0x20\n 23709: a0 = a0 | a1\n 23712: s1 = reverse a0\n 23714: a3 = reverse a3\n 23716: u64 [sp + 0x8] = a3\n 23719: a1 = reverse a2\n 23721: u64 [sp + 0x10] = a1\n 23724: a2 = reverse t0\n 23726: u64 [sp + 0xb8] = a2\n 23730: a0 = sp + 0xc0\n 23734: u64 [sp] = a0\n 23736: a0 = u64 [sp + 0x18]\n 23739: u64 [sp + 0xd8] = a0\n 23743: a0 = u64 [sp + 0x20]\n 23746: u64 [sp + 0xd0] = a0\n 23750: a0 = u64 [sp + 0x28]\n 23753: u64 [sp + 0xc8] = a0\n 23757: a0 = u64 [sp + 0x30]\n 23760: u64 [sp + 0xc0] = a0\n 23764: a0 = u64 [sp + 0x38]\n 23767: u64 [sp + 0xf8] = a0\n 23771: a0 = u64 [sp + 0x40]\n 23774: u64 [sp + 0xf0] = a0\n 23778: a0 = u64 [sp + 0x48]\n 23781: u64 [sp + 0xe8] = a0\n 23785: a0 = u64 [sp + 0x50]\n 23788: u64 [sp + 0xe0] = a0\n 23792: a0 = u64 [sp + 0x58]\n 23795: u64 [sp + 0x118] = a0\n 23799: a0 = u64 [sp + 0x60]\n 23802: u64 [sp + 0x110] = a0\n 23806: a0 = u64 [sp + 0x68]\n 23809: u64 [sp + 0x108] = a0\n 23813: a0 = u64 [sp + 0x70]\n 23816: u64 [sp + 0x100] = a0\n 23820: a0 = u64 [sp + 0x78]\n 23823: u64 [sp + 0x138] = a0\n 23827: a0 = u64 [sp + 0x80]\n 23831: u64 [sp + 0x130] = a0\n 23835: a0 = u64 [sp + 0x88]\n 23839: u64 [sp + 0x128] = a0\n 23843: a0 = u64 [sp + 0x90]\n 23847: u64 [sp + 0x120] = a0\n 23851: a0 = u64 [sp + 0x98]\n 23855: u64 [sp + 0x158] = a0\n 23859: a0 = u64 [sp + 0xa0]\n 23863: u64 [sp + 0x150] = a0\n 23867: a0 = u64 [sp + 0xa8]\n 23871: u64 [sp + 0x148] = a0\n 23875: a0 = u64 [sp + 0xb0]\n 23879: u64 [sp + 0x140] = a0\n 23883: u64 [sp + 0x178] = a2\n 23887: u64 [sp + 0x170] = a1\n 23891: u64 [sp + 0x168] = a3\n 23895: a0 = sp + 0x180\n 23899: a1 = sp + 0x160\n 23903: a2 = sp + 0x140\n 23907: a3 = sp + 0x120\n 23911: a4 = sp + 0x100\n 23915: a5 = sp + 0xe0\n 23919: u64 [sp + 0x160] = s1\n 23923: ra = 326, jump @336\n      : @354 [@dyn 163] (gas: 12)\n 23929: a4 = u64 [sp + 0x8]\n 23932: a2 = s1\n 23934: a0 = u64 [sp + 0xb8]\n 23938: a0 = a0 | a4\n 23941: s1 = u64 [sp + 0x10]\n 23944: a1 = a2 | s1\n 23947: a1 = a1 | a0\n 23950: a1 = a1 >> 0x20\n 23953: a0 = a0 | s1\n 23956: a0 = a0 << 0x20\n 23959: a0 = a0 | a1\n 23962: jump @356 if a0 != 0\n      : @355 (gas: 29)\n 23965: a0 = u64 [sp + 0x188]\n 23969: a1 = u64 [sp + 0x198]\n 23973: u64 [sp + 0xb0] = a1\n 23977: t1 = u64 [sp + 0x180]\n 23981: a1 = u64 [sp + 0x190]\n 23985: t2 = a0 ^ a4\n 23988: a5 = a0 <u a4\n 23991: ra = t1 <u a2\n 23994: a5 = ra if t2 == 0\n 23997: a3 = a1 - s1\n 24000: t2 = a3 - a5\n 24003: t0 = a3 <u a5\n 24006: a3 = a1 <u s1\n 24009: a1 = u64 [sp + 0xb8]\n 24013: a5 = u64 [sp + 0xb0]\n 24017: a5 = a5 - a1\n 24020: a5 = a5 - a3\n 24023: a5 = a5 - t0\n 24026: a0 = a0 - a4\n 24029: a0 = a0 - ra\n 24032: s1 = t1 - a2\n 24035: a0 = a0 | a5\n 24038: a1 = s1 | t2\n 24041: a1 = a1 | a0\n 24044: a0 = a0 | t2\n 24047: a1 = a1 >> 0x20\n 24050: a0 = a0 << 0x20\n 24053: a0 = a0 | a1\n 24056: jump @359 if a0 == 0\n      : @356 (gas: 1)\n 24059: trap\n      : @357 (gas: 3)\n 24060: a0 = 0\n 24062: a1 = 0\n 24064: ra = 328, jump @0\n      : @358 [@dyn 164] (gas: 5)\n 24070: i32 a1 = a0 + 0\n 24072: a0 = 0x1\n 24075: a2 = 0\n 24077: ecalli 12 // 'seal_return'\n 24079: fallthrough\n      : @359 (gas: 4)\n 24080: i32 a0 = a2 + 0\n 24082: i32 s1 = s1 + 0\n 24084: a1 = s1\n 24086: ra = 330, jump @0\n      : @360 [@dyn 165] (gas: 6)\n 24092: i32 a1 = a0 + 0\n 24094: a0 = 0\n 24096: a2 = s1\n 24098: ra = 0x14c\n 24102: ecalli 12 // 'seal_return'\n 24104: fallthrough\n      : @361 [@dyn 166] (gas: 8)\n 24105: sp = sp + 0xffffffffffffff40\n 24109: u64 [sp + 0xb8] = ra\n 24113: u64 [sp + 0xb0] = s0\n 24117: u64 [sp + 0xa8] = s1\n 24121: s0 = sp + 0xc0\n 24125: sp = sp & 0xffffffffffffffe0\n 24128: a0 = i32 [0x200a8]\n 24133: jump @366 if a0 <=u 35\n      : @362 (gas: 18)\n 24138: i32 a0 = sp + 0x80\n 24142: a1 = 0x4\n 24145: ecalli 2 // 'call_data_load'\n 24147: a0 = u64 [sp + 0x80]\n 24151: a1 = u64 [sp + 0x88]\n 24155: a2 = u64 [sp + 0x90]\n 24159: a3 = u64 [sp + 0x98]\n 24163: u64 [sp + 0x38] = a3\n 24166: u64 [sp + 0x30] = a2\n 24169: u64 [sp + 0x28] = a1\n 24172: u64 [sp + 0x20] = a0\n 24175: u64 [sp + 88] = 0\n 24178: u64 [sp + 80] = 0\n 24181: u64 [sp + 72] = 0\n 24184: a0 = sp + 0x60\n 24187: a2 = sp + 0x20\n 24190: u64 [sp + 64] = 0\n 24193: ra = 334, jump @868\n      : @363 [@dyn 167] (gas: 11)\n 24200: a0 = u64 [sp + 0x78]\n 24203: u64 [sp] = a0\n 24205: a0 = u64 [sp + 0x70]\n 24208: u64 [sp + 0x8] = a0\n 24211: a0 = u64 [sp + 0x68]\n 24214: u64 [sp + 0x10] = a0\n 24217: a0 = u64 [sp + 0x60]\n 24220: u64 [sp + 0x18] = a0\n 24223: a0 = 0x40\n 24226: a1 = 0x20\n 24229: ra = 336, jump @0\n      : @364 [@dyn 168] (gas: 100)\n 24235: a1 = u8 [a0 + 0x11]\n 24238: a2 = u8 [a0 + 0x10]\n 24241: a3 = u8 [a0 + 0x12]\n 24244: a4 = u8 [a0 + 0x13]\n 24247: a1 = a1 << 0x8\n 24250: a1 = a1 | a2\n 24253: a3 = a3 << 0x10\n 24256: a4 = a4 << 0x18\n 24259: a3 = a3 | a4\n 24262: a1 = a1 | a3\n 24265: a2 = u8 [a0 + 0x15]\n 24268: a3 = u8 [a0 + 0x14]\n 24271: a4 = u8 [a0 + 0x16]\n 24274: a5 = u8 [a0 + 0x17]\n 24277: a2 = a2 << 0x8\n 24280: a2 = a2 | a3\n 24283: a4 = a4 << 0x10\n 24286: a5 = a5 << 0x18\n 24289: a4 = a4 | a5\n 24292: a2 = a2 | a4\n 24295: a2 = a2 << 0x20\n 24298: t0 = a2 | a1\n 24301: a2 = u8 [a0 + 0x1]\n 24304: a3 = u8 [a0]\n 24306: a4 = u8 [a0 + 0x2]\n 24309: a5 = u8 [a0 + 0x3]\n 24312: a2 = a2 << 0x8\n 24315: a2 = a2 | a3\n 24318: a4 = a4 << 0x10\n 24321: a5 = a5 << 0x18\n 24324: a4 = a4 | a5\n 24327: a2 = a2 | a4\n 24330: a3 = u8 [a0 + 0x5]\n 24333: a4 = u8 [a0 + 0x4]\n 24336: a5 = u8 [a0 + 0x6]\n 24339: s1 = u8 [a0 + 0x7]\n 24342: a3 = a3 << 0x8\n 24345: a3 = a3 | a4\n 24348: a5 = a5 << 0x10\n 24351: s1 = s1 << 0x18\n 24354: a5 = a5 | s1\n 24357: a3 = a3 | a5\n 24360: a3 = a3 << 0x20\n 24363: a2 = a2 | a3\n 24366: a3 = u8 [a0 + 0x19]\n 24369: a4 = u8 [a0 + 0x18]\n 24372: a5 = u8 [a0 + 0x1a]\n 24375: s1 = u8 [a0 + 0x1b]\n 24378: a3 = a3 << 0x8\n 24381: a3 = a3 | a4\n 24384: a5 = a5 << 0x10\n 24387: s1 = s1 << 0x18\n 24390: a5 = a5 | s1\n 24393: a3 = a3 | a5\n 24396: a4 = u8 [a0 + 0x1d]\n 24399: a5 = u8 [a0 + 0x1c]\n 24402: s1 = u8 [a0 + 0x1e]\n 24405: a1 = u8 [a0 + 0x1f]\n 24408: a4 = a4 << 0x8\n 24411: a4 = a4 | a5\n 24414: s1 = s1 << 0x10\n 24417: a1 = a1 << 0x18\n 24420: a1 = a1 | s1\n 24423: a1 = a1 | a4\n 24426: a1 = a1 << 0x20\n 24429: a3 = a3 | a1\n 24432: a1 = u8 [a0 + 0x9]\n 24435: a4 = u8 [a0 + 0x8]\n 24438: a5 = u8 [a0 + 0xa]\n 24441: s1 = u8 [a0 + 0xb]\n 24444: a1 = a1 << 0x8\n 24447: a1 = a1 | a4\n 24450: a5 = a5 << 0x10\n 24453: s1 = s1 << 0x18\n 24456: a5 = a5 | s1\n 24459: a1 = a1 | a5\n 24462: a4 = u8 [a0 + 0xd]\n 24465: a5 = u8 [a0 + 0xc]\n 24468: s1 = u8 [a0 + 0xe]\n 24471: a0 = u8 [a0 + 0xf]\n 24474: a4 = a4 << 0x8\n 24477: a4 = a4 | a5\n 24480: s1 = s1 << 0x10\n 24483: a0 = a0 << 0x18\n 24486: a0 = a0 | s1\n 24489: a0 = a0 | a4\n 24492: a0 = a0 << 0x20\n 24495: a0 = a0 | a1\n 24498: a1 = reverse a0\n 24500: a0 = reverse a3\n 24502: a2 = reverse a2\n 24504: a3 = reverse t0\n 24506: a2 = a2 | a3\n 24509: a3 = a0 | a1\n 24512: a3 = a3 | a2\n 24515: a3 = a3 >> 0x20\n 24518: a1 = a1 | a2\n 24521: a1 = a1 << 0x20\n 24524: a1 = a1 | a3\n 24527: jump @368 if a1 == 0\n      : @365 (gas: 1)\n 24530: trap\n      : @366 (gas: 3)\n 24531: a0 = 0\n 24533: a1 = 0\n 24535: ra = 338, jump @0\n      : @367 [@dyn 169] (gas: 5)\n 24541: i32 a1 = a0 + 0\n 24543: a0 = 0x1\n 24546: a2 = 0\n 24548: ecalli 12 // 'seal_return'\n 24550: fallthrough\n      : @368 (gas: 4)\n 24551: i32 s1 = a0 + 0\n 24553: a1 = 0x20\n 24556: a0 = s1\n 24558: ra = 340, jump @0\n      : @369 [@dyn 170] (gas: 71)\n 24564: a1 = u64 [sp]\n 24566: a1 = reverse a1\n 24568: a2 = u64 [sp + 0x8]\n 24571: a2 = reverse a2\n 24573: a3 = u64 [sp + 0x10]\n 24576: a3 = reverse a3\n 24578: a4 = u64 [sp + 0x18]\n 24581: a4 = reverse a4\n 24583: a5 = a4 >> 0x38\n 24586: u8 [a0 + 0x1f] = a5\n 24589: a5 = a4 >> 0x30\n 24592: u8 [a0 + 0x1e] = a5\n 24595: a5 = a4 >> 0x28\n 24598: u8 [a0 + 0x1d] = a5\n 24601: a5 = a4 >> 0x20\n 24604: u8 [a0 + 0x1c] = a5\n 24607: a5 = a4 >> 0x18\n 24610: u8 [a0 + 0x1b] = a5\n 24613: a5 = a4 >> 0x10\n 24616: u8 [a0 + 0x1a] = a5\n 24619: a5 = a4 >> 0x8\n 24622: u8 [a0 + 0x19] = a5\n 24625: u8 [a0 + 0x18] = a4\n 24628: u8 [a0 + 0x10] = a3\n 24631: a4 = a3 >> 0x38\n 24634: u8 [a0 + 0x17] = a4\n 24637: a4 = a3 >> 0x30\n 24640: u8 [a0 + 0x16] = a4\n 24643: a4 = a3 >> 0x28\n 24646: u8 [a0 + 0x15] = a4\n 24649: a4 = a3 >> 0x20\n 24652: u8 [a0 + 0x14] = a4\n 24655: a4 = a3 >> 0x18\n 24658: u8 [a0 + 0x13] = a4\n 24661: a4 = a3 >> 0x10\n 24664: u8 [a0 + 0x12] = a4\n 24667: a3 = a3 >> 0x8\n 24670: u8 [a0 + 0x11] = a3\n 24673: u8 [a0 + 0x8] = a2\n 24676: a3 = a2 >> 0x38\n 24679: u8 [a0 + 0xf] = a3\n 24682: a3 = a2 >> 0x30\n 24685: u8 [a0 + 0xe] = a3\n 24688: a3 = a2 >> 0x28\n 24691: u8 [a0 + 0xd] = a3\n 24694: a3 = a2 >> 0x20\n 24697: u8 [a0 + 0xc] = a3\n 24700: a3 = a2 >> 0x18\n 24703: u8 [a0 + 0xb] = a3\n 24706: a3 = a2 >> 0x10\n 24709: u8 [a0 + 0xa] = a3\n 24712: a2 = a2 >> 0x8\n 24715: u8 [a0 + 0x9] = a2\n 24718: u8 [a0] = a1\n 24720: a2 = a1 >> 0x38\n 24723: u8 [a0 + 0x7] = a2\n 24726: a2 = a1 >> 0x30\n 24729: u8 [a0 + 0x6] = a2\n 24732: a2 = a1 >> 0x28\n 24735: u8 [a0 + 0x5] = a2\n 24738: a2 = a1 >> 0x20\n 24741: u8 [a0 + 0x4] = a2\n 24744: a2 = a1 >> 0x18\n 24747: u8 [a0 + 0x3] = a2\n 24750: a2 = a1 >> 0x10\n 24753: u8 [a0 + 0x2] = a2\n 24756: a1 = a1 >> 0x8\n 24759: u8 [a0 + 0x1] = a1\n 24762: a1 = 0x20\n 24765: a0 = s1\n 24767: ra = 342, jump @0\n      : @370 [@dyn 171] (gas: 6)\n 24773: i32 a1 = a0 + 0\n 24775: a2 = 0x20\n 24778: a0 = 0\n 24780: ra = 0x158\n 24784: ecalli 12 // 'seal_return'\n 24786: fallthrough\n      : @371 [@dyn 172] (gas: 13)\n 24787: sp = sp + 0xffffffffffffff40\n 24791: u64 [sp + 0xb8] = ra\n 24795: u64 [sp + 0xb0] = s0\n 24799: u64 [sp + 0xa8] = s1\n 24803: s0 = sp + 0xc0\n 24807: sp = sp & 0xffffffffffffffe0\n 24810: u64 [sp + 120] = 0\n 24813: u64 [sp + 112] = 0\n 24816: u64 [sp + 104] = 0\n 24819: u64 [sp + 96] = 0\n 24822: i32 a0 = sp + 0x60\n 24825: ecalli 15 // 'value_transferred'\n 24827: fallthrough\n      : @372 (gas: 8)\n 24828: a0 = u64 [sp + 0x70]\n 24831: a1 = u64 [sp + 0x78]\n 24834: a2 = u64 [sp + 0x68]\n 24837: a3 = u64 [sp + 0x60]\n 24840: a1 = a1 | a2\n 24843: a0 = a0 | a3\n 24846: a0 = a0 | a1\n 24849: jump @378 if a0 != 0\n      : @373 (gas: 2)\n 24853: a0 = i32 [0x200a8]\n 24858: jump @378 if a0 <=u 67\n      : @374 (gas: 31)\n 24863: i32 a0 = sp + 0x80\n 24867: a1 = 0x4\n 24870: ecalli 2 // 'call_data_load'\n 24872: a0 = u64 [sp + 0x80]\n 24876: u64 [sp + 0x18] = a0\n 24879: a0 = u64 [sp + 0x88]\n 24883: u64 [sp + 0x10] = a0\n 24886: a0 = u64 [sp + 0x90]\n 24890: u64 [sp + 0x8] = a0\n 24893: s1 = u64 [sp + 0x98]\n 24897: i32 a0 = sp + 0x80\n 24901: a1 = 0x24\n 24904: ecalli 2 // 'call_data_load'\n 24906: a0 = u64 [sp + 0x80]\n 24910: a1 = u64 [sp + 0x88]\n 24914: a2 = u64 [sp + 0x90]\n 24918: a3 = u64 [sp + 0x98]\n 24922: u64 [sp + 0x38] = a3\n 24925: u64 [sp + 0x30] = a2\n 24928: u64 [sp + 0x28] = a1\n 24931: u64 [sp + 0x20] = a0\n 24934: u64 [sp + 0x58] = s1\n 24937: a0 = u64 [sp + 0x8]\n 24940: u64 [sp + 0x50] = a0\n 24943: a0 = u64 [sp + 0x10]\n 24946: u64 [sp + 0x48] = a0\n 24949: a0 = sp + 0x40\n 24952: a1 = sp + 0x20\n 24955: a2 = u64 [sp + 0x18]\n 24958: u64 [sp + 0x40] = a2\n 24961: ra = 346, jump @975\n      : @375 [@dyn 173] (gas: 3)\n 24968: a0 = 0x40\n 24971: a1 = 0x20\n 24974: ra = 348, jump @0\n      : @376 [@dyn 174] (gas: 100)\n 24980: a1 = u8 [a0 + 0x11]\n 24983: a2 = u8 [a0 + 0x10]\n 24986: a3 = u8 [a0 + 0x12]\n 24989: a4 = u8 [a0 + 0x13]\n 24992: a1 = a1 << 0x8\n 24995: a1 = a1 | a2\n 24998: a3 = a3 << 0x10\n 25001: a4 = a4 << 0x18\n 25004: a3 = a3 | a4\n 25007: a1 = a1 | a3\n 25010: a2 = u8 [a0 + 0x15]\n 25013: a3 = u8 [a0 + 0x14]\n 25016: a4 = u8 [a0 + 0x16]\n 25019: a5 = u8 [a0 + 0x17]\n 25022: a2 = a2 << 0x8\n 25025: a2 = a2 | a3\n 25028: a4 = a4 << 0x10\n 25031: a5 = a5 << 0x18\n 25034: a4 = a4 | a5\n 25037: a2 = a2 | a4\n 25040: a2 = a2 << 0x20\n 25043: t0 = a2 | a1\n 25046: a2 = u8 [a0 + 0x1]\n 25049: a3 = u8 [a0]\n 25051: a4 = u8 [a0 + 0x2]\n 25054: a5 = u8 [a0 + 0x3]\n 25057: a2 = a2 << 0x8\n 25060: a2 = a2 | a3\n 25063: a4 = a4 << 0x10\n 25066: a5 = a5 << 0x18\n 25069: a4 = a4 | a5\n 25072: a2 = a2 | a4\n 25075: a3 = u8 [a0 + 0x5]\n 25078: a4 = u8 [a0 + 0x4]\n 25081: a5 = u8 [a0 + 0x6]\n 25084: s1 = u8 [a0 + 0x7]\n 25087: a3 = a3 << 0x8\n 25090: a3 = a3 | a4\n 25093: a5 = a5 << 0x10\n 25096: s1 = s1 << 0x18\n 25099: a5 = a5 | s1\n 25102: a3 = a3 | a5\n 25105: a3 = a3 << 0x20\n 25108: a2 = a2 | a3\n 25111: a3 = u8 [a0 + 0x19]\n 25114: a4 = u8 [a0 + 0x18]\n 25117: a5 = u8 [a0 + 0x1a]\n 25120: s1 = u8 [a0 + 0x1b]\n 25123: a3 = a3 << 0x8\n 25126: a3 = a3 | a4\n 25129: a5 = a5 << 0x10\n 25132: s1 = s1 << 0x18\n 25135: a5 = a5 | s1\n 25138: a3 = a3 | a5\n 25141: a4 = u8 [a0 + 0x1d]\n 25144: a5 = u8 [a0 + 0x1c]\n 25147: s1 = u8 [a0 + 0x1e]\n 25150: a1 = u8 [a0 + 0x1f]\n 25153: a4 = a4 << 0x8\n 25156: a4 = a4 | a5\n 25159: s1 = s1 << 0x10\n 25162: a1 = a1 << 0x18\n 25165: a1 = a1 | s1\n 25168: a1 = a1 | a4\n 25171: a1 = a1 << 0x20\n 25174: a3 = a3 | a1\n 25177: a1 = u8 [a0 + 0x9]\n 25180: a4 = u8 [a0 + 0x8]\n 25183: a5 = u8 [a0 + 0xa]\n 25186: s1 = u8 [a0 + 0xb]\n 25189: a1 = a1 << 0x8\n 25192: a1 = a1 | a4\n 25195: a5 = a5 << 0x10\n 25198: s1 = s1 << 0x18\n 25201: a5 = a5 | s1\n 25204: a1 = a1 | a5\n 25207: a4 = u8 [a0 + 0xd]\n 25210: a5 = u8 [a0 + 0xc]\n 25213: s1 = u8 [a0 + 0xe]\n 25216: a0 = u8 [a0 + 0xf]\n 25219: a4 = a4 << 0x8\n 25222: a4 = a4 | a5\n 25225: s1 = s1 << 0x10\n 25228: a0 = a0 << 0x18\n 25231: a0 = a0 | s1\n 25234: a0 = a0 | a4\n 25237: a0 = a0 << 0x20\n 25240: a0 = a0 | a1\n 25243: a1 = reverse a0\n 25245: a0 = reverse a3\n 25247: a2 = reverse a2\n 25249: a3 = reverse t0\n 25251: a2 = a2 | a3\n 25254: a3 = a0 | a1\n 25257: a3 = a3 | a2\n 25260: a3 = a3 >> 0x20\n 25263: a1 = a1 | a2\n 25266: a1 = a1 << 0x20\n 25269: a1 = a1 | a3\n 25272: jump @380 if a1 == 0\n      : @377 (gas: 1)\n 25275: trap\n      : @378 (gas: 3)\n 25276: a0 = 0\n 25278: a1 = 0\n 25280: ra = 350, jump @0\n      : @379 [@dyn 175] (gas: 7)\n 25286: i32 a1 = a0 + 0\n 25288: a0 = 0x1\n 25291: a2 = 0\n 25293: ecalli 12 // 'seal_return'\n 25295: i32 a0 = a0 + 0\n 25297: ra = 0x160\n 25301: jump @0\n      : @380 (gas: 2)\n 25304: i32 a0 = a0 + 0\n 25306: ra = 352, jump @0\n      : @381 [@dyn 176] (gas: 6)\n 25312: i32 a1 = a0 + 0\n 25314: a0 = 0\n 25316: a2 = 0\n 25318: ra = 0x162\n 25322: ecalli 12 // 'seal_return'\n 25324: fallthrough\n      : @382 [@dyn 177] (gas: 19)\n 25325: t0 = u64 [a0 + 0x18]\n 25328: t1 = u64 [a1 + 0x18]\n 25331: a4 = u64 [a0 + 0x10]\n 25334: a5 = u64 [a0 + 0x8]\n 25337: a2 = u64 [a1 + 0x8]\n 25340: t2 = u64 [a0]\n 25342: a3 = u64 [a1]\n 25344: a1 = u64 [a1 + 0x10]\n 25347: a0 = a2 ^ a5\n 25350: a2 = a2 <u a5\n 25353: a3 = a3 <u t2\n 25356: a3 = a2 if a0 != 0\n 25359: a0 = a1 - a4\n 25362: a0 = a0 <u a3\n 25365: a1 = a1 <u a4\n 25368: a2 = t1 - t0\n 25371: a2 = a2 - a1\n 25374: a2 = a2 - a0\n 25377: jump @384 if a2 <s 0\n      : @383 (gas: 1)\n 25380: ret\n      : @384 (gas: 5)\n 25382: sp = sp + 0xfffffffffffffff8\n 25385: u64 [sp] = ra\n 25387: a0 = 0\n 25389: a1 = 0\n 25391: ra = 356, jump @0\n      : @385 [@dyn 178] (gas: 6)\n 25397: i32 a1 = a0 + 0\n 25399: a0 = 0x1\n 25402: a2 = 0\n 25404: ra = 0x166\n 25408: ecalli 12 // 'seal_return'\n 25410: fallthrough\n      : @386 [@dyn 179] (gas: 36)\n 25411: sp = sp + 0xffffffffffffffa0\n 25414: u64 [sp + 0x58] = ra\n 25417: u64 [sp + 0x50] = s0\n 25420: u64 [sp + 0x48] = s1\n 25423: s0 = sp + 0x60\n 25426: sp = sp & 0xffffffffffffffe0\n 25429: s1 = a0\n 25431: u64 [sp + 24] = 0\n 25434: u64 [sp + 16] = 0\n 25437: u64 [sp + 8] = 0\n 25440: u64 [sp + 0] = 0\n 25442: u64 [sp + 56] = 0\n 25445: u64 [sp + 48] = 0\n 25448: u64 [sp + 40] = 0\n 25451: u64 [sp + 32] = 0\n 25454: u32 [sp + 64] = 0x20\n 25458: i32 a1 = sp + 0\n 25460: i32 a3 = sp + 0x20\n 25463: i32 a4 = sp + 0x40\n 25466: a2 = 0xffffffffffffffff\n 25469: a0 = 0\n 25471: ecalli 7 // 'get_storage'\n 25473: a0 = u64 [sp + 0x38]\n 25476: a1 = u64 [sp + 0x30]\n 25479: a2 = u64 [sp + 0x28]\n 25482: a3 = u64 [sp + 0x20]\n 25485: u64 [s1 + 0x18] = a0\n 25488: u64 [s1 + 0x10] = a1\n 25491: u64 [s1 + 0x8] = a2\n 25494: u64 [s1] = a3\n 25496: sp = s0 + 0xffffffffffffffa0\n 25499: ra = u64 [sp + 0x58]\n 25502: s0 = u64 [sp + 0x50]\n 25505: s1 = u64 [sp + 0x48]\n 25508: sp = sp + 0x60\n 25511: ret\n      : @387 (gas: 8)\n 25513: a0 = u64 [sp + 0x30]\n 25516: a1 = u64 [sp + 0x38]\n 25519: a2 = u64 [sp + 0x28]\n 25522: a3 = u64 [sp + 0x20]\n 25525: a1 = a1 | a2\n 25528: a0 = a0 | a3\n 25531: a0 = a0 | a1\n 25534: jump @392 if a0 != 0\n      : @388 (gas: 2)\n 25538: a0 = i32 [0x200a8]\n 25543: jump @392 if a0 <=u 3\n      : @389 (gas: 26)\n 25548: u64 [sp + 88] = 0\n 25551: u64 [sp + 80] = 0\n 25554: u64 [sp + 72] = 0\n 25557: u64 [sp + 64] = 0\n 25560: u64 [sp + 120] = 0\n 25563: u64 [sp + 112] = 0\n 25566: u64 [sp + 104] = 0\n 25569: u64 [sp + 96] = 0\n 25572: u32 [sp + 128] = 0x20\n 25577: i32 a1 = sp + 0x40\n 25580: i32 a3 = sp + 0x60\n 25583: i32 a4 = sp + 0x80\n 25587: a2 = 0xffffffffffffffff\n 25590: a0 = 0\n 25592: ecalli 7 // 'get_storage'\n 25594: a0 = u64 [sp + 0x78]\n 25597: u64 [sp] = a0\n 25599: a0 = u64 [sp + 0x70]\n 25602: u64 [sp + 0x8] = a0\n 25605: a0 = u64 [sp + 0x68]\n 25608: u64 [sp + 0x10] = a0\n 25611: a0 = u64 [sp + 0x60]\n 25614: u64 [sp + 0x18] = a0\n 25617: a0 = 0x40\n 25620: a1 = 0x20\n 25623: ra = 360, jump @0\n      : @390 [@dyn 180] (gas: 100)\n 25629: a1 = u8 [a0 + 0x11]\n 25632: a2 = u8 [a0 + 0x10]\n 25635: a3 = u8 [a0 + 0x12]\n 25638: a4 = u8 [a0 + 0x13]\n 25641: a1 = a1 << 0x8\n 25644: a1 = a1 | a2\n 25647: a3 = a3 << 0x10\n 25650: a4 = a4 << 0x18\n 25653: a3 = a3 | a4\n 25656: a1 = a1 | a3\n 25659: a2 = u8 [a0 + 0x15]\n 25662: a3 = u8 [a0 + 0x14]\n 25665: a4 = u8 [a0 + 0x16]\n 25668: a5 = u8 [a0 + 0x17]\n 25671: a2 = a2 << 0x8\n 25674: a2 = a2 | a3\n 25677: a4 = a4 << 0x10\n 25680: a5 = a5 << 0x18\n 25683: a4 = a4 | a5\n 25686: a2 = a2 | a4\n 25689: a2 = a2 << 0x20\n 25692: t0 = a2 | a1\n 25695: a2 = u8 [a0 + 0x1]\n 25698: a3 = u8 [a0]\n 25700: a4 = u8 [a0 + 0x2]\n 25703: a5 = u8 [a0 + 0x3]\n 25706: a2 = a2 << 0x8\n 25709: a2 = a2 | a3\n 25712: a4 = a4 << 0x10\n 25715: a5 = a5 << 0x18\n 25718: a4 = a4 | a5\n 25721: a2 = a2 | a4\n 25724: a3 = u8 [a0 + 0x5]\n 25727: a4 = u8 [a0 + 0x4]\n 25730: a5 = u8 [a0 + 0x6]\n 25733: s1 = u8 [a0 + 0x7]\n 25736: a3 = a3 << 0x8\n 25739: a3 = a3 | a4\n 25742: a5 = a5 << 0x10\n 25745: s1 = s1 << 0x18\n 25748: a5 = a5 | s1\n 25751: a3 = a3 | a5\n 25754: a3 = a3 << 0x20\n 25757: a2 = a2 | a3\n 25760: a3 = u8 [a0 + 0x19]\n 25763: a4 = u8 [a0 + 0x18]\n 25766: a5 = u8 [a0 + 0x1a]\n 25769: s1 = u8 [a0 + 0x1b]\n 25772: a3 = a3 << 0x8\n 25775: a3 = a3 | a4\n 25778: a5 = a5 << 0x10\n 25781: s1 = s1 << 0x18\n 25784: a5 = a5 | s1\n 25787: a3 = a3 | a5\n 25790: a4 = u8 [a0 + 0x1d]\n 25793: a5 = u8 [a0 + 0x1c]\n 25796: s1 = u8 [a0 + 0x1e]\n 25799: a1 = u8 [a0 + 0x1f]\n 25802: a4 = a4 << 0x8\n 25805: a4 = a4 | a5\n 25808: s1 = s1 << 0x10\n 25811: a1 = a1 << 0x18\n 25814: a1 = a1 | s1\n 25817: a1 = a1 | a4\n 25820: a1 = a1 << 0x20\n 25823: a3 = a3 | a1\n 25826: a1 = u8 [a0 + 0x9]\n 25829: a4 = u8 [a0 + 0x8]\n 25832: a5 = u8 [a0 + 0xa]\n 25835: s1 = u8 [a0 + 0xb]\n 25838: a1 = a1 << 0x8\n 25841: a1 = a1 | a4\n 25844: a5 = a5 << 0x10\n 25847: s1 = s1 << 0x18\n 25850: a5 = a5 | s1\n 25853: a1 = a1 | a5\n 25856: a4 = u8 [a0 + 0xd]\n 25859: a5 = u8 [a0 + 0xc]\n 25862: s1 = u8 [a0 + 0xe]\n 25865: a0 = u8 [a0 + 0xf]\n 25868: a4 = a4 << 0x8\n 25871: a4 = a4 | a5\n 25874: s1 = s1 << 0x10\n 25877: a0 = a0 << 0x18\n 25880: a0 = a0 | s1\n 25883: a0 = a0 | a4\n 25886: a0 = a0 << 0x20\n 25889: a0 = a0 | a1\n 25892: a1 = reverse a0\n 25894: a0 = reverse a3\n 25896: a2 = reverse a2\n 25898: a3 = reverse t0\n 25900: a2 = a2 | a3\n 25903: a3 = a0 | a1\n 25906: a3 = a3 | a2\n 25909: a3 = a3 >> 0x20\n 25912: a1 = a1 | a2\n 25915: a1 = a1 << 0x20\n 25918: a1 = a1 | a3\n 25921: jump @394 if a1 == 0\n      : @391 (gas: 1)\n 25924: trap\n      : @392 (gas: 3)\n 25925: a0 = 0\n 25927: a1 = 0\n 25929: ra = 362, jump @0\n      : @393 [@dyn 181] (gas: 5)\n 25935: i32 a1 = a0 + 0\n 25937: a0 = 0x1\n 25940: a2 = 0\n 25942: ecalli 12 // 'seal_return'\n 25944: fallthrough\n      : @394 (gas: 4)\n 25945: i32 s1 = a0 + 0\n 25947: a1 = 0x20\n 25950: a0 = s1\n 25952: ra = 364, jump @0\n      : @395 [@dyn 182] (gas: 71)\n 25958: a1 = u64 [sp]\n 25960: a1 = reverse a1\n 25962: a2 = u64 [sp + 0x8]\n 25965: a2 = reverse a2\n 25967: a3 = u64 [sp + 0x10]\n 25970: a3 = reverse a3\n 25972: a4 = u64 [sp + 0x18]\n 25975: a4 = reverse a4\n 25977: a5 = a4 >> 0x38\n 25980: u8 [a0 + 0x1f] = a5\n 25983: a5 = a4 >> 0x30\n 25986: u8 [a0 + 0x1e] = a5\n 25989: a5 = a4 >> 0x28\n 25992: u8 [a0 + 0x1d] = a5\n 25995: a5 = a4 >> 0x20\n 25998: u8 [a0 + 0x1c] = a5\n 26001: a5 = a4 >> 0x18\n 26004: u8 [a0 + 0x1b] = a5\n 26007: a5 = a4 >> 0x10\n 26010: u8 [a0 + 0x1a] = a5\n 26013: a5 = a4 >> 0x8\n 26016: u8 [a0 + 0x19] = a5\n 26019: u8 [a0 + 0x18] = a4\n 26022: u8 [a0 + 0x10] = a3\n 26025: a4 = a3 >> 0x38\n 26028: u8 [a0 + 0x17] = a4\n 26031: a4 = a3 >> 0x30\n 26034: u8 [a0 + 0x16] = a4\n 26037: a4 = a3 >> 0x28\n 26040: u8 [a0 + 0x15] = a4\n 26043: a4 = a3 >> 0x20\n 26046: u8 [a0 + 0x14] = a4\n 26049: a4 = a3 >> 0x18\n 26052: u8 [a0 + 0x13] = a4\n 26055: a4 = a3 >> 0x10\n 26058: u8 [a0 + 0x12] = a4\n 26061: a3 = a3 >> 0x8\n 26064: u8 [a0 + 0x11] = a3\n 26067: u8 [a0 + 0x8] = a2\n 26070: a3 = a2 >> 0x38\n 26073: u8 [a0 + 0xf] = a3\n 26076: a3 = a2 >> 0x30\n 26079: u8 [a0 + 0xe] = a3\n 26082: a3 = a2 >> 0x28\n 26085: u8 [a0 + 0xd] = a3\n 26088: a3 = a2 >> 0x20\n 26091: u8 [a0 + 0xc] = a3\n 26094: a3 = a2 >> 0x18\n 26097: u8 [a0 + 0xb] = a3\n 26100: a3 = a2 >> 0x10\n 26103: u8 [a0 + 0xa] = a3\n 26106: a2 = a2 >> 0x8\n 26109: u8 [a0 + 0x9] = a2\n 26112: u8 [a0] = a1\n 26114: a2 = a1 >> 0x38\n 26117: u8 [a0 + 0x7] = a2\n 26120: a2 = a1 >> 0x30\n 26123: u8 [a0 + 0x6] = a2\n 26126: a2 = a1 >> 0x28\n 26129: u8 [a0 + 0x5] = a2\n 26132: a2 = a1 >> 0x20\n 26135: u8 [a0 + 0x4] = a2\n 26138: a2 = a1 >> 0x18\n 26141: u8 [a0 + 0x3] = a2\n 26144: a2 = a1 >> 0x10\n 26147: u8 [a0 + 0x2] = a2\n 26150: a1 = a1 >> 0x8\n 26153: u8 [a0 + 0x1] = a1\n 26156: a1 = 0x20\n 26159: a0 = s1\n 26161: ra = 366, jump @0\n      : @396 [@dyn 183] (gas: 6)\n 26167: i32 a1 = a0 + 0\n 26169: a2 = 0x20\n 26172: a0 = 0\n 26174: ra = 0x170\n 26178: ecalli 12 // 'seal_return'\n 26180: fallthrough\n      : @397 [@dyn 184] (gas: 8)\n 26181: sp = sp + 0xffffffffffffffe0\n 26184: u64 [sp + 0x18] = ra\n 26187: u64 [sp + 0x10] = s0\n 26190: u64 [sp + 0x8] = s1\n 26193: s1 = 0x200a0\n 26198: a1 = i32 [0x200a0]\n 26203: s0 = a0\n 26205: jump @400 if a1 == 0\n      : @398 (gas: 6)\n 26208: a0 = 0x300b0\n 26213: i32 a0 = a0 + 0\n 26215: u64 [sp] = a1\n 26217: i32 a1 = s1 + 0\n 26219: ecalli 6 // 'get_immutable_data'\n 26221: fallthrough\n      : @399 (gas: 4)\n 26222: a0 = i32 [0x200a0]\n 26227: u32 [0x200a0] = 0\n 26232: a1 = u64 [sp]\n 26234: jump @401 if a0 <u a1\n      : @400 (gas: 13)\n 26237: a1 = u64 [0x300c8]\n 26242: a2 = u64 [0x300c0]\n 26247: a3 = u64 [0x300b8]\n 26252: a0 = u64 [0x300b0]\n 26257: u64 [s0 + 0x18] = a1\n 26260: u64 [s0 + 0x10] = a2\n 26263: u64 [s0 + 0x8] = a3\n 26266: u64 [s0] = a0\n 26268: ra = u64 [sp + 0x18]\n 26271: s0 = u64 [sp + 0x10]\n 26274: s1 = u64 [sp + 0x8]\n 26277: sp = sp + 0x20\n 26280: ret\n      : @401 (gas: 1)\n 26282: trap\n      : @402 (gas: 8)\n 26283: a0 = u64 [sp + 0x30]\n 26286: a1 = u64 [sp + 0x38]\n 26289: a2 = u64 [sp + 0x28]\n 26292: a3 = u64 [sp + 0x20]\n 26295: a1 = a1 | a2\n 26298: a0 = a0 | a3\n 26301: a0 = a0 | a1\n 26304: jump @410 if a0 != 0\n      : @403 (gas: 2)\n 26308: a0 = i32 [0x200a8]\n 26313: jump @410 if a0 <=u 3\n      : @404 (gas: 3)\n 26318: s1 = 0x200a0\n 26323: a0 = i32 [0x200a0]\n 26328: jump @407 if a0 == 0\n      : @405 (gas: 6)\n 26331: u64 [sp + 0x18] = a0\n 26334: a0 = 0x300b0\n 26339: i32 a0 = a0 + 0\n 26341: i32 a1 = s1 + 0\n 26343: ecalli 6 // 'get_immutable_data'\n 26345: fallthrough\n      : @406 (gas: 4)\n 26346: a0 = i32 [0x200a0]\n 26351: u32 [0x200a0] = 0\n 26356: a1 = u64 [sp + 0x18]\n 26359: jump @409 if a0 <u a1\n      : @407 (gas: 9)\n 26363: a1 = u64 [0x300c0]\n 26368: u64 [sp + 0x8] = a1\n 26371: a1 = u64 [0x300b8]\n 26376: u64 [sp + 0x10] = a1\n 26379: a0 = u64 [0x300b0]\n 26384: u64 [sp + 0x18] = a0\n 26387: a0 = 0x40\n 26390: a1 = 0x20\n 26393: ra = 370, jump @0\n      : @408 [@dyn 185] (gas: 100)\n 26399: a1 = u8 [a0 + 0x11]\n 26402: a2 = u8 [a0 + 0x10]\n 26405: a3 = u8 [a0 + 0x12]\n 26408: a4 = u8 [a0 + 0x13]\n 26411: a1 = a1 << 0x8\n 26414: a1 = a1 | a2\n 26417: a3 = a3 << 0x10\n 26420: a4 = a4 << 0x18\n 26423: a3 = a3 | a4\n 26426: a1 = a1 | a3\n 26429: a2 = u8 [a0 + 0x15]\n 26432: a3 = u8 [a0 + 0x14]\n 26435: a4 = u8 [a0 + 0x16]\n 26438: a5 = u8 [a0 + 0x17]\n 26441: a2 = a2 << 0x8\n 26444: a2 = a2 | a3\n 26447: a4 = a4 << 0x10\n 26450: a5 = a5 << 0x18\n 26453: a4 = a4 | a5\n 26456: a2 = a2 | a4\n 26459: a2 = a2 << 0x20\n 26462: t0 = a2 | a1\n 26465: a2 = u8 [a0 + 0x1]\n 26468: a3 = u8 [a0]\n 26470: a4 = u8 [a0 + 0x2]\n 26473: a5 = u8 [a0 + 0x3]\n 26476: a2 = a2 << 0x8\n 26479: a2 = a2 | a3\n 26482: a4 = a4 << 0x10\n 26485: a5 = a5 << 0x18\n 26488: a4 = a4 | a5\n 26491: a2 = a2 | a4\n 26494: a3 = u8 [a0 + 0x5]\n 26497: a4 = u8 [a0 + 0x4]\n 26500: a5 = u8 [a0 + 0x6]\n 26503: s1 = u8 [a0 + 0x7]\n 26506: a3 = a3 << 0x8\n 26509: a3 = a3 | a4\n 26512: a5 = a5 << 0x10\n 26515: s1 = s1 << 0x18\n 26518: a5 = a5 | s1\n 26521: a3 = a3 | a5\n 26524: a3 = a3 << 0x20\n 26527: a2 = a2 | a3\n 26530: a3 = u8 [a0 + 0x19]\n 26533: a4 = u8 [a0 + 0x18]\n 26536: a5 = u8 [a0 + 0x1a]\n 26539: s1 = u8 [a0 + 0x1b]\n 26542: a3 = a3 << 0x8\n 26545: a3 = a3 | a4\n 26548: a5 = a5 << 0x10\n 26551: s1 = s1 << 0x18\n 26554: a5 = a5 | s1\n 26557: a3 = a3 | a5\n 26560: a4 = u8 [a0 + 0x1d]\n 26563: a5 = u8 [a0 + 0x1c]\n 26566: s1 = u8 [a0 + 0x1e]\n 26569: a1 = u8 [a0 + 0x1f]\n 26572: a4 = a4 << 0x8\n 26575: a4 = a4 | a5\n 26578: s1 = s1 << 0x10\n 26581: a1 = a1 << 0x18\n 26584: a1 = a1 | s1\n 26587: a1 = a1 | a4\n 26590: a1 = a1 << 0x20\n 26593: a3 = a3 | a1\n 26596: a1 = u8 [a0 + 0x9]\n 26599: a4 = u8 [a0 + 0x8]\n 26602: a5 = u8 [a0 + 0xa]\n 26605: s1 = u8 [a0 + 0xb]\n 26608: a1 = a1 << 0x8\n 26611: a1 = a1 | a4\n 26614: a5 = a5 << 0x10\n 26617: s1 = s1 << 0x18\n 26620: a5 = a5 | s1\n 26623: a1 = a1 | a5\n 26626: a4 = u8 [a0 + 0xd]\n 26629: a5 = u8 [a0 + 0xc]\n 26632: s1 = u8 [a0 + 0xe]\n 26635: a0 = u8 [a0 + 0xf]\n 26638: a4 = a4 << 0x8\n 26641: a4 = a4 | a5\n 26644: s1 = s1 << 0x10\n 26647: a0 = a0 << 0x18\n 26650: a0 = a0 | s1\n 26653: a0 = a0 | a4\n 26656: a0 = a0 << 0x20\n 26659: a0 = a0 | a1\n 26662: a1 = reverse a0\n 26664: a0 = reverse a3\n 26666: a2 = reverse a2\n 26668: a3 = reverse t0\n 26670: a2 = a2 | a3\n 26673: a3 = a0 | a1\n 26676: a3 = a3 | a2\n 26679: a3 = a3 >> 0x20\n 26682: a1 = a1 | a2\n 26685: a1 = a1 << 0x20\n 26688: a1 = a1 | a3\n 26691: jump @412 if a1 == 0\n      : @409 (gas: 1)\n 26694: trap\n      : @410 (gas: 3)\n 26695: a0 = 0\n 26697: a1 = 0\n 26699: ra = 372, jump @0\n      : @411 [@dyn 186] (gas: 5)\n 26705: i32 a1 = a0 + 0\n 26707: a0 = 0x1\n 26710: a2 = 0\n 26712: ecalli 12 // 'seal_return'\n 26714: fallthrough\n      : @412 (gas: 7)\n 26715: a1 = u64 [sp + 0x8]\n 26718: a1 = a1 << 0x20\n 26721: s1 = a1 >> 0x20\n 26724: i32 a0 = a0 + 0\n 26726: u64 [sp + 0x8] = a0\n 26729: a1 = 0x20\n 26732: ra = 374, jump @0\n      : @413 [@dyn 187] (gas: 58)\n 26738: a1 = reverse s1\n 26740: a2 = u64 [sp + 0x10]\n 26743: a2 = reverse a2\n 26745: a3 = u64 [sp + 0x18]\n 26748: a3 = reverse a3\n 26750: a4 = a3 >> 0x38\n 26753: u8 [a0 + 0x1f] = a4\n 26756: a4 = a3 >> 0x30\n 26759: u8 [a0 + 0x1e] = a4\n 26762: a4 = a3 >> 0x28\n 26765: u8 [a0 + 0x1d] = a4\n 26768: a4 = a3 >> 0x20\n 26771: u8 [a0 + 0x1c] = a4\n 26774: a4 = a3 >> 0x18\n 26777: u8 [a0 + 0x1b] = a4\n 26780: a4 = a3 >> 0x10\n 26783: u8 [a0 + 0x1a] = a4\n 26786: a4 = a3 >> 0x8\n 26789: u8 [a0 + 0x19] = a4\n 26792: u8 [a0 + 0x18] = a3\n 26795: u8 [a0 + 0x10] = a2\n 26798: u8 [a0 + 11] = 0\n 26801: u8 [a0 + 10] = 0\n 26804: u8 [a0 + 9] = 0\n 26807: u8 [a0 + 7] = 0\n 26810: u8 [a0 + 6] = 0\n 26813: u8 [a0 + 5] = 0\n 26816: u8 [a0 + 4] = 0\n 26819: u8 [a0 + 3] = 0\n 26822: u8 [a0 + 2] = 0\n 26825: u8 [a0 + 1] = 0\n 26828: u8 [a0 + 0] = 0\n 26830: a3 = a2 >> 0x38\n 26833: u8 [a0 + 0x17] = a3\n 26836: a3 = a2 >> 0x30\n 26839: u8 [a0 + 0x16] = a3\n 26842: a3 = a2 >> 0x28\n 26845: u8 [a0 + 0x15] = a3\n 26848: a3 = a2 >> 0x20\n 26851: u8 [a0 + 0x14] = a3\n 26854: a3 = a2 >> 0x18\n 26857: u8 [a0 + 0x13] = a3\n 26860: a3 = a2 >> 0x10\n 26863: u8 [a0 + 0x12] = a3\n 26866: a2 = a2 >> 0x8\n 26869: u8 [a0 + 0x11] = a2\n 26872: u8 [a0 + 0x8] = a1\n 26875: a2 = a1 >> 0x38\n 26878: u8 [a0 + 0xf] = a2\n 26881: a2 = a1 >> 0x30\n 26884: u8 [a0 + 0xe] = a2\n 26887: a2 = a1 >> 0x28\n 26890: u8 [a0 + 0xd] = a2\n 26893: a1 = a1 >> 0x20\n 26896: u8 [a0 + 0xc] = a1\n 26899: a1 = 0x20\n 26902: a0 = u64 [sp + 0x8]\n 26905: ra = 376, jump @0\n      : @414 [@dyn 188] (gas: 6)\n 26911: i32 a1 = a0 + 0\n 26913: a2 = 0x20\n 26916: a0 = 0\n 26918: ra = 0x17a\n 26922: ecalli 12 // 'seal_return'\n 26924: fallthrough\n      : @415 [@dyn 189] (gas: 9)\n 26925: a2 = u64 [a1 + 0x18]\n 26928: a3 = u64 [a1 + 0x10]\n 26931: a4 = u64 [a1 + 0x8]\n 26934: a1 = u64 [a1]\n 26936: u64 [a0 + 0x18] = a2\n 26939: u64 [a0 + 0x10] = a3\n 26942: u64 [a0 + 0x8] = a4\n 26945: u64 [a0] = a1\n 26947: ret\n      : @416 (gas: 17)\n 26949: sp = sp + 0xffffffffffffffa0\n 26952: u64 [sp + 0x58] = ra\n 26955: u64 [sp + 0x50] = s0\n 26958: u64 [sp + 0x48] = s1\n 26961: a3 = u64 [a1 + 0x18]\n 26964: a4 = u64 [a1 + 0x10]\n 26967: a5 = u64 [a1 + 0x8]\n 26970: s1 = u64 [a1]\n 26972: a1 = a5 | a3\n 26975: a2 = s1 | a4\n 26978: a2 = a2 | a1\n 26981: a2 = a2 >> 0x20\n 26984: a1 = a1 | a4\n 26987: a1 = a1 << 0x20\n 26990: a1 = a1 | a2\n 26993: u64 [sp + 0x28] = a0\n 26996: jump @423 if a1 != 0\n      : @417 (gas: 19)\n 27000: a0 = s1 + 0x20\n 27003: u64 [sp + 0x30] = a0\n 27006: a0 = a0 <u s1\n 27009: a1 = a5 + a0\n 27012: u64 [sp + 0x40] = a1\n 27015: u64 [sp + 0x8] = a5\n 27018: s0 = a1 <u a5\n 27021: s0 = a0 if a0 == 0\n 27024: s0 = s0 + a4\n 27027: u64 [sp + 0x10] = a4\n 27030: a0 = s0 <u a4\n 27033: u64 [sp + 0x18] = a3\n 27036: a0 = a0 + a3\n 27039: u64 [sp + 0x38] = a0\n 27042: u64 [sp] = s1\n 27044: i32 a0 = s1 + 0\n 27046: a1 = 0x20\n 27049: s1 = 0x20\n 27052: ra = 380, jump @0\n      : @418 [@dyn 190] (gas: 45)\n 27058: u8 [a0 + 0x1f] = s1\n 27061: a1 = u64 [sp + 0x30]\n 27064: s1 = a1\n 27066: a1 = a1 | s0\n 27069: a2 = u64 [sp + 0x40]\n 27072: a4 = u64 [sp + 0x38]\n 27075: a2 = a2 | a4\n 27078: a1 = a1 | a2\n 27081: a1 = a1 >> 0x20\n 27084: u64 [sp + 0x20] = s0\n 27087: a2 = a2 | s0\n 27090: a2 = a2 << 0x20\n 27093: a1 = a1 | a2\n 27096: u8 [a0 + 30] = 0\n 27099: u8 [a0 + 29] = 0\n 27102: u8 [a0 + 28] = 0\n 27105: u8 [a0 + 27] = 0\n 27108: u8 [a0 + 26] = 0\n 27111: u8 [a0 + 25] = 0\n 27114: u8 [a0 + 24] = 0\n 27117: u8 [a0 + 23] = 0\n 27120: u8 [a0 + 22] = 0\n 27123: u8 [a0 + 21] = 0\n 27126: u8 [a0 + 20] = 0\n 27129: u8 [a0 + 19] = 0\n 27132: u8 [a0 + 18] = 0\n 27135: u8 [a0 + 17] = 0\n 27138: u8 [a0 + 16] = 0\n 27141: u8 [a0 + 15] = 0\n 27144: u8 [a0 + 14] = 0\n 27147: u8 [a0 + 13] = 0\n 27150: u8 [a0 + 12] = 0\n 27153: u8 [a0 + 11] = 0\n 27156: u8 [a0 + 10] = 0\n 27159: u8 [a0 + 9] = 0\n 27162: u8 [a0 + 8] = 0\n 27165: u8 [a0 + 7] = 0\n 27168: u8 [a0 + 6] = 0\n 27171: u8 [a0 + 5] = 0\n 27174: u8 [a0 + 4] = 0\n 27177: u8 [a0 + 3] = 0\n 27180: u8 [a0 + 2] = 0\n 27183: u8 [a0 + 1] = 0\n 27186: u8 [a0 + 0] = 0\n 27188: jump @423 if a1 != 0\n      : @419 (gas: 4)\n 27192: i32 s0 = s1 + 0\n 27194: a1 = 0x20\n 27197: a0 = s0\n 27199: ra = 382, jump @0\n      : @420 [@dyn 191] (gas: 41)\n 27205: u8 [a0 + 31] = 0x6\n 27209: u8 [a0 + 30] = 0\n 27212: u8 [a0 + 29] = 0\n 27215: u8 [a0 + 28] = 0\n 27218: u8 [a0 + 27] = 0\n 27221: u8 [a0 + 26] = 0\n 27224: u8 [a0 + 25] = 0\n 27227: u8 [a0 + 24] = 0\n 27230: u8 [a0 + 23] = 0\n 27233: u8 [a0 + 22] = 0\n 27236: u8 [a0 + 21] = 0\n 27239: u8 [a0 + 20] = 0\n 27242: u8 [a0 + 19] = 0\n 27245: u8 [a0 + 18] = 0\n 27248: u8 [a0 + 17] = 0\n 27251: u8 [a0 + 16] = 0\n 27254: u8 [a0 + 15] = 0\n 27257: u8 [a0 + 14] = 0\n 27260: u8 [a0 + 13] = 0\n 27263: u8 [a0 + 12] = 0\n 27266: u8 [a0 + 11] = 0\n 27269: u8 [a0 + 10] = 0\n 27272: u8 [a0 + 9] = 0\n 27275: u8 [a0 + 8] = 0\n 27278: u8 [a0 + 7] = 0\n 27281: u8 [a0 + 6] = 0\n 27284: u8 [a0 + 5] = 0\n 27287: u8 [a0 + 4] = 0\n 27290: u8 [a0 + 3] = 0\n 27293: u8 [a0 + 2] = 0\n 27296: u8 [a0 + 1] = 0\n 27299: a1 = u64 [sp + 0x20]\n 27302: a2 = u64 [sp + 0x38]\n 27305: a1 = a1 | a2\n 27308: a2 = 0xffffffe0\n 27318: a2 = s1 <u a2\n 27321: a3 = u64 [sp + 0x40]\n 27324: a2 = 0 if a3 != 0\n 27326: a2 = 0 if a1 != 0\n 27328: u8 [a0 + 0] = 0\n 27330: jump @423 if a2 == 0\n      : @421 (gas: 3)\n 27334: i32 a0 = s0 + 0x20\n 27337: a1 = 0x20\n 27340: ra = 384, jump @0\n      : @422 [@dyn 192] (gas: 54)\n 27346: u8 [a0 + 31] = 0\n 27349: u8 [a0 + 30] = 0\n 27352: u8 [a0 + 29] = 0\n 27355: u8 [a0 + 28] = 0\n 27358: u8 [a0 + 27] = 0\n 27361: u8 [a0 + 26] = 0\n 27364: u8 [a0 + 25] = 0\n 27367: u8 [a0 + 24] = 0\n 27370: u8 [a0 + 23] = 0\n 27373: u8 [a0 + 22] = 0\n 27376: u8 [a0 + 21] = 0\n 27379: u8 [a0 + 20] = 0\n 27382: u8 [a0 + 19] = 0\n 27385: u8 [a0 + 18] = 0\n 27388: u8 [a0 + 17] = 0\n 27391: u8 [a0 + 16] = 0\n 27394: u8 [a0 + 15] = 0\n 27397: u8 [a0 + 14] = 0\n 27400: u8 [a0 + 13] = 0\n 27403: u8 [a0 + 12] = 0\n 27406: u8 [a0 + 11] = 0\n 27409: u8 [a0 + 10] = 0\n 27412: u8 [a0 + 9] = 0\n 27415: u8 [a0 + 8] = 0\n 27418: u8 [a0 + 7] = 0\n 27421: u8 [a0 + 6] = 0\n 27424: u8 [a0 + 5] = 0x44\n 27428: u8 [a0 + 4] = 0x45\n 27432: u8 [a0 + 3] = 0x4b\n 27436: u8 [a0 + 2] = 0x43\n 27440: u8 [a0 + 1] = 0x4f\n 27444: u8 [a0 + 0] = 0x4c\n 27447: a1 = u64 [sp]\n 27449: a0 = a1 + 0x60\n 27452: a1 = a0 <u a1\n 27455: a3 = u64 [sp + 0x8]\n 27458: a2 = a3 + a1\n 27461: a3 = a2 <u a3\n 27464: a3 = a1 if a1 == 0\n 27467: a1 = u64 [sp + 0x10]\n 27470: a3 = a3 + a1\n 27473: a1 = a3 <u a1\n 27476: a4 = u64 [sp + 0x18]\n 27479: a1 = a1 + a4\n 27482: a4 = u64 [sp + 0x28]\n 27485: u64 [a4] = a0\n 27487: u64 [a4 + 0x8] = a2\n 27490: u64 [a4 + 0x10] = a3\n 27493: u64 [a4 + 0x18] = a1\n 27496: ra = u64 [sp + 0x58]\n 27499: s0 = u64 [sp + 0x50]\n 27502: s1 = u64 [sp + 0x48]\n 27505: sp = sp + 0x60\n 27508: ret\n      : @423 (gas: 1)\n 27510: trap\n      : @424 (gas: 47)\n 27511: sp = sp + 0xfffffffffffffe80\n 27515: u64 [sp + 0x178] = ra\n 27519: u64 [sp + 0x170] = s0\n 27523: u64 [sp + 0x168] = s1\n 27527: s0 = sp + 0x180\n 27531: sp = sp & 0xffffffffffffffe0\n 27534: a3 = u64 [a2 + 0x18]\n 27537: u64 [sp] = a3\n 27539: a3 = u64 [a2 + 0x10]\n 27542: u64 [sp + 0x8] = a3\n 27545: a3 = u64 [a2 + 0x8]\n 27548: u64 [sp + 0x10] = a3\n 27551: a2 = u64 [a2]\n 27553: u64 [sp + 0x18] = a2\n 27556: a2 = u64 [a1 + 0x18]\n 27559: u64 [sp + 0x20] = a2\n 27562: a2 = u64 [a1 + 0x10]\n 27565: u64 [sp + 0x28] = a2\n 27568: a2 = u64 [a1 + 0x8]\n 27571: u64 [sp + 0x30] = a2\n 27574: a1 = u64 [a1]\n 27576: u64 [sp + 0x38] = a1\n 27579: a1 = u64 [a0 + 0x18]\n 27582: u64 [sp + 0x40] = a1\n 27585: a1 = u64 [a0 + 0x10]\n 27588: u64 [sp + 0x48] = a1\n 27591: a1 = u64 [a0 + 0x8]\n 27594: u64 [sp + 0x50] = a1\n 27597: a0 = u64 [a0]\n 27599: u64 [sp + 0x58] = a0\n 27602: u64 [sp + 312] = 0\n 27606: u64 [sp + 304] = 0\n 27610: u64 [sp + 296] = 0\n 27614: s1 = 0x4\n 27617: u64 [sp + 0x120] = s1\n 27621: u64 [sp + 344] = 0\n 27625: u64 [sp + 336] = 0\n 27629: u64 [sp + 328] = 0\n 27633: u64 [sp + 320] = 0\n 27637: u32 [sp + 256] = 0x20\n 27642: i32 a1 = sp + 0x120\n 27646: i32 a3 = sp + 0x140\n 27650: i32 a4 = sp + 0x100\n 27654: a2 = 0xffffffffffffffff\n 27657: a0 = 0\n 27659: ecalli 7 // 'get_storage'\n 27661: fallthrough\n      : @425 (gas: 9)\n 27662: a0 = u64 [sp + 0x158]\n 27666: a1 = u64 [sp + 0x148]\n 27670: a2 = u64 [sp + 0x140]\n 27674: a3 = u64 [sp + 0x150]\n 27678: a0 = a0 | a1\n 27681: a1 = a2 ^ 0x1\n 27684: a1 = a1 | a3\n 27687: a0 = a0 | a1\n 27690: jump @428 if a0 != 0\n      : @426 (gas: 90)\n 27694: u64 [sp + 312] = 0\n 27698: u64 [sp + 304] = 0\n 27702: u64 [sp + 296] = 0\n 27706: u64 [sp + 288] = 0x4\n 27711: u64 [sp + 344] = 0\n 27715: u64 [sp + 336] = 0\n 27719: u64 [sp + 328] = 0\n 27723: u64 [sp + 320] = 0\n 27727: u32 [sp + 256] = 0x20\n 27732: i32 a1 = sp + 0x120\n 27736: i32 a3 = sp + 0x140\n 27740: i32 a4 = sp + 0x100\n 27744: a2 = 0xffffffffffffffff\n 27747: a0 = 0\n 27749: ecalli 7 // 'get_storage'\n 27751: u64 [sp + 312] = 0\n 27755: u64 [sp + 304] = 0\n 27759: u64 [sp + 296] = 0\n 27763: u64 [sp + 288] = 0x4\n 27768: u64 [sp + 344] = 0\n 27772: u64 [sp + 336] = 0\n 27776: u64 [sp + 328] = 0\n 27780: u64 [sp + 320] = 0\n 27784: i32 a1 = sp + 0x120\n 27788: i32 a3 = sp + 0x140\n 27792: a2 = 0xffffffffffffffff\n 27795: a4 = 0x20\n 27798: a0 = 0\n 27800: ecalli 14 // 'set_storage'\n 27802: a0 = u64 [sp]\n 27804: u64 [sp + 0x78] = a0\n 27807: a0 = u64 [sp + 0x8]\n 27810: u64 [sp + 0x70] = a0\n 27813: a0 = u64 [sp + 0x10]\n 27816: u64 [sp + 0x68] = a0\n 27819: a0 = u64 [sp + 0x18]\n 27822: u64 [sp + 0x60] = a0\n 27825: a0 = u64 [sp + 0x20]\n 27828: u64 [sp + 0x98] = a0\n 27832: a0 = u64 [sp + 0x28]\n 27835: u64 [sp + 0x90] = a0\n 27839: a0 = u64 [sp + 0x30]\n 27842: u64 [sp + 0x88] = a0\n 27846: a0 = u64 [sp + 0x38]\n 27849: u64 [sp + 0x80] = a0\n 27853: a0 = u64 [sp + 0x40]\n 27856: u64 [sp + 0xb8] = a0\n 27860: a0 = u64 [sp + 0x48]\n 27863: u64 [sp + 0xb0] = a0\n 27867: a0 = u64 [sp + 0x50]\n 27870: u64 [sp + 0xa8] = a0\n 27874: a0 = sp + 0xa0\n 27878: a1 = sp + 0x80\n 27882: a2 = sp + 0x60\n 27885: a3 = u64 [sp + 0x58]\n 27888: u64 [sp + 0xa0] = a3\n 27892: ra = 0x182\n 27896: sp = sp + 0xfffffffffffffc40\n 27900: u64 [sp + 0x3b8] = ra\n 27904: u64 [sp + 0x3b0] = s0\n 27908: u64 [sp + 936] = 0x4\n 27913: s0 = sp + 0x3c0\n 27917: sp = sp & 0xffffffffffffffe0\n 27920: a3 = u64 [a2 + 0x18]\n 27923: u64 [sp + 0x120] = a3\n 27927: a3 = u64 [a2 + 0x10]\n 27930: u64 [sp + 0x110] = a3\n 27934: a3 = u64 [a2 + 0x8]\n 27937: u64 [sp + 0x118] = a3\n 27941: a2 = u64 [a2]\n 27943: u64 [sp + 0x108] = a2\n 27947: a2 = u64 [a1 + 0x18]\n 27950: u64 [sp + 0x160] = a2\n 27954: a2 = u64 [a1 + 0x10]\n 27957: u64 [sp + 0x188] = a2\n 27961: a2 = u64 [a1 + 0x8]\n 27964: u64 [sp + 0x190] = a2\n 27968: a1 = u64 [a1]\n 27970: u64 [sp + 0x198] = a1\n 27974: a1 = u64 [a0 + 0x18]\n 27977: u64 [sp + 0x168] = a1\n 27981: a1 = u64 [a0 + 0x10]\n 27984: u64 [sp + 0x170] = a1\n 27988: a1 = u64 [a0 + 0x8]\n 27991: u64 [sp + 0x178] = a1\n 27995: a0 = u64 [a0]\n 27997: u64 [sp + 0x180] = a0\n 28001: i32 a0 = sp + 0x2e0\n 28005: ecalli 4 // 'caller'\n 28007: jump @464\n      : @427 [@dyn 193] (gas: 35)\n 28010: u64 [sp + 312] = 0\n 28014: u64 [sp + 304] = 0\n 28018: u64 [sp + 296] = 0\n 28022: u64 [sp + 0x120] = s1\n 28026: u64 [sp + 344] = 0\n 28030: u64 [sp + 336] = 0\n 28034: u64 [sp + 328] = 0\n 28038: u64 [sp + 320] = 0\n 28042: u32 [sp + 256] = 0x20\n 28047: i32 a1 = sp + 0x120\n 28051: i32 a3 = sp + 0x140\n 28055: i32 a4 = sp + 0x100\n 28059: a2 = 0xffffffffffffffff\n 28062: a0 = 0\n 28064: ecalli 7 // 'get_storage'\n 28066: u64 [sp + 312] = 0\n 28070: u64 [sp + 304] = 0\n 28074: u64 [sp + 296] = 0\n 28078: u64 [sp + 0x120] = s1\n 28082: u64 [sp + 344] = 0\n 28086: u64 [sp + 336] = 0\n 28090: u64 [sp + 328] = 0\n 28094: u64 [sp + 320] = 0x1\n 28099: i32 a1 = sp + 0x120\n 28103: i32 a3 = sp + 0x140\n 28107: a2 = 0xffffffffffffffff\n 28110: a4 = 0x20\n 28113: a0 = 0\n 28115: ecalli 14 // 'set_storage'\n 28117: sp = s0 + 0xfffffffffffffe80\n 28121: ra = u64 [sp + 0x178]\n 28125: s0 = u64 [sp + 0x170]\n 28129: s1 = u64 [sp + 0x168]\n 28133: sp = sp + 0x180\n 28137: ret\n      : @428 (gas: 3)\n 28139: a0 = 0x40\n 28142: a1 = 0x20\n 28145: ra = 388, jump @0\n      : @429 [@dyn 194] (gas: 103)\n 28151: a1 = u8 [a0 + 0x11]\n 28154: a2 = u8 [a0 + 0x10]\n 28157: a3 = u8 [a0 + 0x12]\n 28160: a4 = u8 [a0 + 0x13]\n 28163: a1 = a1 << 0x8\n 28166: a1 = a1 | a2\n 28169: a3 = a3 << 0x10\n 28172: a4 = a4 << 0x18\n 28175: a3 = a3 | a4\n 28178: a1 = a1 | a3\n 28181: a2 = u8 [a0 + 0x15]\n 28184: a3 = u8 [a0 + 0x14]\n 28187: a4 = u8 [a0 + 0x16]\n 28190: a5 = u8 [a0 + 0x17]\n 28193: a2 = a2 << 0x8\n 28196: a2 = a2 | a3\n 28199: a4 = a4 << 0x10\n 28202: a5 = a5 << 0x18\n 28205: a4 = a4 | a5\n 28208: a2 = a2 | a4\n 28211: a2 = a2 << 0x20\n 28214: t0 = a2 | a1\n 28217: a2 = u8 [a0 + 0x1]\n 28220: a3 = u8 [a0]\n 28222: a4 = u8 [a0 + 0x2]\n 28225: a5 = u8 [a0 + 0x3]\n 28228: a2 = a2 << 0x8\n 28231: a2 = a2 | a3\n 28234: a4 = a4 << 0x10\n 28237: a5 = a5 << 0x18\n 28240: a4 = a4 | a5\n 28243: a2 = a2 | a4\n 28246: a3 = u8 [a0 + 0x5]\n 28249: a4 = u8 [a0 + 0x4]\n 28252: a5 = u8 [a0 + 0x6]\n 28255: s1 = u8 [a0 + 0x7]\n 28258: a3 = a3 << 0x8\n 28261: a3 = a3 | a4\n 28264: a5 = a5 << 0x10\n 28267: s1 = s1 << 0x18\n 28270: a5 = a5 | s1\n 28273: a3 = a3 | a5\n 28276: a3 = a3 << 0x20\n 28279: a2 = a2 | a3\n 28282: a3 = u8 [a0 + 0x19]\n 28285: a4 = u8 [a0 + 0x18]\n 28288: a5 = u8 [a0 + 0x1a]\n 28291: s1 = u8 [a0 + 0x1b]\n 28294: a3 = a3 << 0x8\n 28297: a3 = a3 | a4\n 28300: a5 = a5 << 0x10\n 28303: s1 = s1 << 0x18\n 28306: a5 = a5 | s1\n 28309: a3 = a3 | a5\n 28312: a4 = u8 [a0 + 0x1d]\n 28315: a5 = u8 [a0 + 0x1c]\n 28318: s1 = u8 [a0 + 0x1e]\n 28321: a1 = u8 [a0 + 0x1f]\n 28324: a4 = a4 << 0x8\n 28327: a4 = a4 | a5\n 28330: s1 = s1 << 0x10\n 28333: a1 = a1 << 0x18\n 28336: a1 = a1 | s1\n 28339: a1 = a1 | a4\n 28342: a1 = a1 << 0x20\n 28345: a3 = a3 | a1\n 28348: a1 = u8 [a0 + 0x9]\n 28351: a4 = u8 [a0 + 0x8]\n 28354: a5 = u8 [a0 + 0xa]\n 28357: s1 = u8 [a0 + 0xb]\n 28360: a1 = a1 << 0x8\n 28363: a1 = a1 | a4\n 28366: a5 = a5 << 0x10\n 28369: s1 = s1 << 0x18\n 28372: a5 = a5 | s1\n 28375: a1 = a1 | a5\n 28378: a4 = u8 [a0 + 0xd]\n 28381: a5 = u8 [a0 + 0xc]\n 28384: s1 = u8 [a0 + 0xe]\n 28387: a0 = u8 [a0 + 0xf]\n 28390: a4 = a4 << 0x8\n 28393: a4 = a4 | a5\n 28396: s1 = s1 << 0x10\n 28399: a0 = a0 << 0x18\n 28402: a0 = a0 | s1\n 28405: a0 = a0 | a4\n 28408: a0 = a0 << 0x20\n 28411: a0 = a0 | a1\n 28414: s1 = reverse a0\n 28416: a1 = reverse a3\n 28418: a2 = reverse a2\n 28420: a0 = reverse t0\n 28422: u64 [sp + 0x58] = a0\n 28425: u64 [sp + 0x50] = a2\n 28428: a0 = a0 | a2\n 28431: a2 = a1\n 28433: a1 = a1 | s1\n 28436: a1 = a1 | a0\n 28439: a1 = a1 >> 0x20\n 28442: a0 = a0 | s1\n 28445: a0 = a0 << 0x20\n 28448: a0 = a0 | a1\n 28451: jump @433 if a0 != 0\n      : @430 (gas: 5)\n 28455: u64 [sp + 0x48] = a2\n 28458: i32 a0 = a2 + 0\n 28460: a1 = 0x20\n 28463: u64 [sp + 0x40] = a0\n 28466: ra = 390, jump @0\n      : @431 [@dyn 195] (gas: 50)\n 28472: u8 [a0 + 31] = 0\n 28475: u8 [a0 + 30] = 0\n 28478: u8 [a0 + 29] = 0\n 28481: u8 [a0 + 28] = 0\n 28484: u8 [a0 + 27] = 0\n 28487: u8 [a0 + 26] = 0\n 28490: u8 [a0 + 25] = 0\n 28493: u8 [a0 + 24] = 0\n 28496: u8 [a0 + 23] = 0\n 28499: u8 [a0 + 22] = 0\n 28502: u8 [a0 + 21] = 0\n 28505: u8 [a0 + 20] = 0\n 28508: u8 [a0 + 19] = 0\n 28511: u8 [a0 + 18] = 0\n 28514: u8 [a0 + 17] = 0\n 28517: u8 [a0 + 16] = 0\n 28520: u8 [a0 + 15] = 0\n 28523: u8 [a0 + 14] = 0\n 28526: u8 [a0 + 13] = 0\n 28529: u8 [a0 + 12] = 0\n 28532: u8 [a0 + 11] = 0\n 28535: u8 [a0 + 10] = 0\n 28538: u8 [a0 + 9] = 0\n 28541: u8 [a0 + 8] = 0\n 28544: u8 [a0 + 7] = 0\n 28547: u8 [a0 + 6] = 0\n 28550: u8 [a0 + 5] = 0\n 28553: u8 [a0 + 4] = 0\n 28556: u8 [a0 + 3] = 0xa0\n 28561: u8 [a0 + 2] = 0x79\n 28565: u8 [a0 + 1] = 0xc3\n 28570: u8 [a0 + 0] = 0x8\n 28573: a1 = u64 [sp + 0x48]\n 28576: a0 = a1 + 0x4\n 28579: a1 = a0 <u a1\n 28582: a3 = u64 [sp + 0x58]\n 28585: a2 = a3 + a1\n 28588: a3 = a2 <u a3\n 28591: a3 = a1 if a1 == 0\n 28594: a3 = a3 + s1\n 28597: a1 = a3 <u s1\n 28600: a4 = u64 [sp + 0x50]\n 28603: a4 = a4 + a1\n 28606: u64 [sp + 0xc8] = a2\n 28610: u64 [sp + 0xc0] = a0\n 28614: u64 [sp + 0xd0] = a3\n 28618: a0 = sp + 0xe0\n 28622: a1 = sp + 0xc0\n 28626: u64 [sp + 0xd8] = a4\n 28630: ra = 392, jump @416\n      : @432 [@dyn 196] (gas: 30)\n 28636: a0 = u64 [sp + 0xe8]\n 28640: t0 = u64 [sp + 0xf8]\n 28644: t1 = u64 [sp + 0xe0]\n 28648: a3 = u64 [sp + 0xf0]\n 28652: a1 = u64 [sp + 0x58]\n 28655: a4 = a0 ^ a1\n 28658: a5 = a0 <u a1\n 28661: t2 = a1\n 28663: a2 = u64 [sp + 0x48]\n 28666: a1 = t1 <u a2\n 28669: a5 = a1 if a4 == 0\n 28672: a4 = a3 - s1\n 28675: a3 = a3 <u s1\n 28678: s1 = u64 [sp + 0x50]\n 28681: s1 = t0 - s1\n 28684: s1 = s1 - a3\n 28687: a3 = a4 <u a5\n 28690: s1 = s1 - a3\n 28693: a4 = a4 - a5\n 28696: a0 = a0 - t2\n 28699: a1 = a0 - a1\n 28702: a0 = t1 - a2\n 28705: a1 = a1 | s1\n 28708: a2 = a0 | a4\n 28711: a2 = a2 | a1\n 28714: a1 = a1 | a4\n 28717: a2 = a2 >> 0x20\n 28720: a1 = a1 << 0x20\n 28723: a1 = a1 | a2\n 28726: jump @434 if a1 == 0\n      : @433 (gas: 1)\n 28729: trap\n      : @434 (gas: 4)\n 28730: i32 s1 = a0 + 0\n 28732: a0 = u64 [sp + 0x40]\n 28735: a1 = s1\n 28737: ra = 394, jump @0\n      : @435 [@dyn 197] (gas: 6)\n 28743: i32 a1 = a0 + 0\n 28745: a0 = 0x1\n 28748: a2 = s1\n 28750: ra = 0x18c\n 28754: ecalli 12 // 'seal_return'\n 28756: fallthrough\n      : @436 [@dyn 198] (gas: 12)\n 28757: a1 = u64 [a0 + 0x10]\n 28760: a2 = u64 [a0 + 0x18]\n 28763: a3 = u64 [a0 + 0x8]\n 28766: a0 = u64 [a0]\n 28768: a2 = a2 | a3\n 28771: a3 = a0 | a1\n 28774: a3 = a3 | a2\n 28777: a3 = a3 >> 0x20\n 28780: a1 = a1 | a2\n 28783: a1 = a1 << 0x20\n 28786: a1 = a1 | a3\n 28789: jump @439 if a1 != 0\n      : @437 (gas: 7)\n 28793: sp = sp + 0xfffffffffffffff0\n 28796: u64 [sp + 0x8] = ra\n 28799: u64 [sp] = s0\n 28801: i32 a0 = a0 + 0\n 28803: a1 = 0x20\n 28806: s0 = 0x20\n 28809: ra = 398, jump @0\n      : @438 [@dyn 199] (gas: 39)\n 28815: u8 [a0 + 31] = 0\n 28818: u8 [a0 + 30] = 0\n 28821: u8 [a0 + 29] = 0\n 28824: u8 [a0 + 28] = 0\n 28827: u8 [a0 + 27] = 0\n 28830: u8 [a0 + 26] = 0\n 28833: u8 [a0 + 25] = 0\n 28836: u8 [a0 + 24] = 0\n 28839: u8 [a0 + 23] = 0\n 28842: u8 [a0 + 22] = 0\n 28845: u8 [a0 + 21] = 0\n 28848: u8 [a0 + 20] = 0\n 28851: u8 [a0 + 19] = 0\n 28854: u8 [a0 + 18] = 0\n 28857: u8 [a0 + 17] = 0\n 28860: u8 [a0 + 16] = 0\n 28863: u8 [a0 + 15] = 0\n 28866: u8 [a0 + 14] = 0\n 28869: u8 [a0 + 13] = 0\n 28872: u8 [a0 + 12] = 0\n 28875: u8 [a0 + 11] = 0\n 28878: u8 [a0 + 10] = 0x72\n 28882: u8 [a0 + 9] = 0x65\n 28886: a2 = 0x74\n 28889: u8 [a0 + 0x8] = a2\n 28892: u8 [a0 + 7] = 0x69\n 28896: a3 = 0x62\n 28899: u8 [a0 + 0x6] = a3\n 28902: u8 [a0 + 5] = 0x72\n 28906: u8 [a0 + 4] = 0x61\n 28910: u8 [a0 + 0x3] = s0\n 28913: u8 [a0 + 0x2] = a2\n 28916: u8 [a0 + 1] = 0x6f\n 28920: a1 = 0x6e\n 28923: u8 [a0] = a1\n 28925: ra = u64 [sp + 0x8]\n 28928: s0 = u64 [sp]\n 28930: sp = sp + 0x10\n 28933: ret\n      : @439 (gas: 1)\n 28935: trap\n      : @440 (gas: 17)\n 28936: sp = sp + 0xffffffffffffffa0\n 28939: u64 [sp + 0x58] = ra\n 28942: u64 [sp + 0x50] = s0\n 28945: u64 [sp + 0x48] = s1\n 28948: a3 = u64 [a1 + 0x18]\n 28951: a4 = u64 [a1 + 0x10]\n 28954: a5 = u64 [a1 + 0x8]\n 28957: s1 = u64 [a1]\n 28959: a1 = a5 | a3\n 28962: a2 = s1 | a4\n 28965: a2 = a2 | a1\n 28968: a2 = a2 >> 0x20\n 28971: a1 = a1 | a4\n 28974: a1 = a1 << 0x20\n 28977: a1 = a1 | a2\n 28980: u64 [sp + 0x28] = a0\n 28983: jump @447 if a1 != 0\n      : @441 (gas: 19)\n 28987: a0 = s1 + 0x20\n 28990: u64 [sp + 0x30] = a0\n 28993: a0 = a0 <u s1\n 28996: a1 = a5 + a0\n 28999: u64 [sp + 0x40] = a1\n 29002: u64 [sp + 0x8] = a5\n 29005: s0 = a1 <u a5\n 29008: s0 = a0 if a0 == 0\n 29011: s0 = s0 + a4\n 29014: u64 [sp + 0x10] = a4\n 29017: a0 = s0 <u a4\n 29020: u64 [sp + 0x18] = a3\n 29023: a0 = a0 + a3\n 29026: u64 [sp + 0x38] = a0\n 29029: u64 [sp] = s1\n 29031: i32 a0 = s1 + 0\n 29033: a1 = 0x20\n 29036: s1 = 0x20\n 29039: ra = 400, jump @0\n      : @442 [@dyn 200] (gas: 45)\n 29045: u8 [a0 + 0x1f] = s1\n 29048: a1 = u64 [sp + 0x30]\n 29051: s1 = a1\n 29053: a1 = a1 | s0\n 29056: a2 = u64 [sp + 0x40]\n 29059: a4 = u64 [sp + 0x38]\n 29062: a2 = a2 | a4\n 29065: a1 = a1 | a2\n 29068: a1 = a1 >> 0x20\n 29071: u64 [sp + 0x20] = s0\n 29074: a2 = a2 | s0\n 29077: a2 = a2 << 0x20\n 29080: a1 = a1 | a2\n 29083: u8 [a0 + 30] = 0\n 29086: u8 [a0 + 29] = 0\n 29089: u8 [a0 + 28] = 0\n 29092: u8 [a0 + 27] = 0\n 29095: u8 [a0 + 26] = 0\n 29098: u8 [a0 + 25] = 0\n 29101: u8 [a0 + 24] = 0\n 29104: u8 [a0 + 23] = 0\n 29107: u8 [a0 + 22] = 0\n 29110: u8 [a0 + 21] = 0\n 29113: u8 [a0 + 20] = 0\n 29116: u8 [a0 + 19] = 0\n 29119: u8 [a0 + 18] = 0\n 29122: u8 [a0 + 17] = 0\n 29125: u8 [a0 + 16] = 0\n 29128: u8 [a0 + 15] = 0\n 29131: u8 [a0 + 14] = 0\n 29134: u8 [a0 + 13] = 0\n 29137: u8 [a0 + 12] = 0\n 29140: u8 [a0 + 11] = 0\n 29143: u8 [a0 + 10] = 0\n 29146: u8 [a0 + 9] = 0\n 29149: u8 [a0 + 8] = 0\n 29152: u8 [a0 + 7] = 0\n 29155: u8 [a0 + 6] = 0\n 29158: u8 [a0 + 5] = 0\n 29161: u8 [a0 + 4] = 0\n 29164: u8 [a0 + 3] = 0\n 29167: u8 [a0 + 2] = 0\n 29170: u8 [a0 + 1] = 0\n 29173: u8 [a0 + 0] = 0\n 29175: jump @447 if a1 != 0\n      : @443 (gas: 4)\n 29179: i32 s0 = s1 + 0\n 29181: a1 = 0x20\n 29184: a0 = s0\n 29186: ra = 402, jump @0\n      : @444 [@dyn 201] (gas: 41)\n 29192: u8 [a0 + 31] = 0xb\n 29196: u8 [a0 + 30] = 0\n 29199: u8 [a0 + 29] = 0\n 29202: u8 [a0 + 28] = 0\n 29205: u8 [a0 + 27] = 0\n 29208: u8 [a0 + 26] = 0\n 29211: u8 [a0 + 25] = 0\n 29214: u8 [a0 + 24] = 0\n 29217: u8 [a0 + 23] = 0\n 29220: u8 [a0 + 22] = 0\n 29223: u8 [a0 + 21] = 0\n 29226: u8 [a0 + 20] = 0\n 29229: u8 [a0 + 19] = 0\n 29232: u8 [a0 + 18] = 0\n 29235: u8 [a0 + 17] = 0\n 29238: u8 [a0 + 16] = 0\n 29241: u8 [a0 + 15] = 0\n 29244: u8 [a0 + 14] = 0\n 29247: u8 [a0 + 13] = 0\n 29250: u8 [a0 + 12] = 0\n 29253: u8 [a0 + 11] = 0\n 29256: u8 [a0 + 10] = 0\n 29259: u8 [a0 + 9] = 0\n 29262: u8 [a0 + 8] = 0\n 29265: u8 [a0 + 7] = 0\n 29268: u8 [a0 + 6] = 0\n 29271: u8 [a0 + 5] = 0\n 29274: u8 [a0 + 4] = 0\n 29277: u8 [a0 + 3] = 0\n 29280: u8 [a0 + 2] = 0\n 29283: u8 [a0 + 1] = 0\n 29286: a1 = u64 [sp + 0x20]\n 29289: a2 = u64 [sp + 0x38]\n 29292: a1 = a1 | a2\n 29295: a2 = 0xffffffe0\n 29305: a2 = s1 <u a2\n 29308: a3 = u64 [sp + 0x40]\n 29311: a2 = 0 if a3 != 0\n 29313: a2 = 0 if a1 != 0\n 29315: u8 [a0 + 0] = 0\n 29317: jump @447 if a2 == 0\n      : @445 (gas: 3)\n 29321: i32 a0 = s0 + 0x20\n 29324: a1 = 0x20\n 29327: ra = 404, jump @0\n      : @446 [@dyn 202] (gas: 54)\n 29333: u8 [a0 + 31] = 0\n 29336: u8 [a0 + 30] = 0\n 29339: u8 [a0 + 29] = 0\n 29342: u8 [a0 + 28] = 0\n 29345: u8 [a0 + 27] = 0\n 29348: u8 [a0 + 26] = 0\n 29351: u8 [a0 + 25] = 0\n 29354: u8 [a0 + 24] = 0\n 29357: u8 [a0 + 23] = 0\n 29360: u8 [a0 + 22] = 0\n 29363: u8 [a0 + 21] = 0\n 29366: u8 [a0 + 20] = 0\n 29369: u8 [a0 + 19] = 0\n 29372: u8 [a0 + 18] = 0\n 29375: u8 [a0 + 17] = 0\n 29378: u8 [a0 + 16] = 0\n 29381: u8 [a0 + 15] = 0\n 29384: u8 [a0 + 14] = 0\n 29387: u8 [a0 + 13] = 0\n 29390: u8 [a0 + 12] = 0\n 29393: u8 [a0 + 11] = 0\n 29396: u8 [a0 + 10] = 0x72\n 29400: u8 [a0 + 9] = 0x65\n 29404: u8 [a0 + 8] = 0x74\n 29408: u8 [a0 + 7] = 0x69\n 29412: u8 [a0 + 6] = 0x62\n 29416: u8 [a0 + 5] = 0x72\n 29420: u8 [a0 + 4] = 0x61\n 29424: u8 [a0 + 3] = 0x20\n 29428: u8 [a0 + 2] = 0x74\n 29432: u8 [a0 + 1] = 0x6f\n 29436: u8 [a0 + 0] = 0x6e\n 29439: a1 = u64 [sp]\n 29441: a0 = a1 + 0x60\n 29444: a1 = a0 <u a1\n 29447: a3 = u64 [sp + 0x8]\n 29450: a2 = a3 + a1\n 29453: a3 = a2 <u a3\n 29456: a3 = a1 if a1 == 0\n 29459: a1 = u64 [sp + 0x10]\n 29462: a3 = a3 + a1\n 29465: a1 = a3 <u a1\n 29468: a4 = u64 [sp + 0x18]\n 29471: a1 = a1 + a4\n 29474: a4 = u64 [sp + 0x28]\n 29477: u64 [a4] = a0\n 29479: u64 [a4 + 0x8] = a2\n 29482: u64 [a4 + 0x10] = a3\n 29485: u64 [a4 + 0x18] = a1\n 29488: ra = u64 [sp + 0x58]\n 29491: s0 = u64 [sp + 0x50]\n 29494: s1 = u64 [sp + 0x48]\n 29497: sp = sp + 0x60\n 29500: ret\n      : @447 (gas: 1)\n 29502: trap\n      : @448 (gas: 17)\n 29503: sp = sp + 0xffffffffffffffa0\n 29506: u64 [sp + 0x58] = ra\n 29509: u64 [sp + 0x50] = s0\n 29512: u64 [sp + 0x48] = s1\n 29515: a3 = u64 [a1 + 0x18]\n 29518: a4 = u64 [a1 + 0x10]\n 29521: a5 = u64 [a1 + 0x8]\n 29524: s1 = u64 [a1]\n 29526: a1 = a5 | a3\n 29529: a2 = s1 | a4\n 29532: a2 = a2 | a1\n 29535: a2 = a2 >> 0x20\n 29538: a1 = a1 | a4\n 29541: a1 = a1 << 0x20\n 29544: a1 = a1 | a2\n 29547: u64 [sp + 0x28] = a0\n 29550: jump @455 if a1 != 0\n      : @449 (gas: 19)\n 29554: a0 = s1 + 0x20\n 29557: u64 [sp + 0x30] = a0\n 29560: a0 = a0 <u s1\n 29563: a1 = a5 + a0\n 29566: u64 [sp + 0x40] = a1\n 29569: u64 [sp + 0x8] = a5\n 29572: s0 = a1 <u a5\n 29575: s0 = a0 if a0 == 0\n 29578: s0 = s0 + a4\n 29581: u64 [sp + 0x10] = a4\n 29584: a0 = s0 <u a4\n 29587: u64 [sp + 0x18] = a3\n 29590: a0 = a0 + a3\n 29593: u64 [sp + 0x38] = a0\n 29596: u64 [sp] = s1\n 29598: i32 a0 = s1 + 0\n 29600: a1 = 0x20\n 29603: s1 = 0x20\n 29606: ra = 406, jump @0\n      : @450 [@dyn 203] (gas: 45)\n 29612: u8 [a0 + 0x1f] = s1\n 29615: a1 = u64 [sp + 0x30]\n 29618: s1 = a1\n 29620: a1 = a1 | s0\n 29623: a2 = u64 [sp + 0x40]\n 29626: a4 = u64 [sp + 0x38]\n 29629: a2 = a2 | a4\n 29632: a1 = a1 | a2\n 29635: a1 = a1 >> 0x20\n 29638: u64 [sp + 0x20] = s0\n 29641: a2 = a2 | s0\n 29644: a2 = a2 << 0x20\n 29647: a1 = a1 | a2\n 29650: u8 [a0 + 30] = 0\n 29653: u8 [a0 + 29] = 0\n 29656: u8 [a0 + 28] = 0\n 29659: u8 [a0 + 27] = 0\n 29662: u8 [a0 + 26] = 0\n 29665: u8 [a0 + 25] = 0\n 29668: u8 [a0 + 24] = 0\n 29671: u8 [a0 + 23] = 0\n 29674: u8 [a0 + 22] = 0\n 29677: u8 [a0 + 21] = 0\n 29680: u8 [a0 + 20] = 0\n 29683: u8 [a0 + 19] = 0\n 29686: u8 [a0 + 18] = 0\n 29689: u8 [a0 + 17] = 0\n 29692: u8 [a0 + 16] = 0\n 29695: u8 [a0 + 15] = 0\n 29698: u8 [a0 + 14] = 0\n 29701: u8 [a0 + 13] = 0\n 29704: u8 [a0 + 12] = 0\n 29707: u8 [a0 + 11] = 0\n 29710: u8 [a0 + 10] = 0\n 29713: u8 [a0 + 9] = 0\n 29716: u8 [a0 + 8] = 0\n 29719: u8 [a0 + 7] = 0\n 29722: u8 [a0 + 6] = 0\n 29725: u8 [a0 + 5] = 0\n 29728: u8 [a0 + 4] = 0\n 29731: u8 [a0 + 3] = 0\n 29734: u8 [a0 + 2] = 0\n 29737: u8 [a0 + 1] = 0\n 29740: u8 [a0 + 0] = 0\n 29742: jump @455 if a1 != 0\n      : @451 (gas: 4)\n 29746: i32 s0 = s1 + 0\n 29748: a1 = 0x20\n 29751: a0 = s0\n 29753: ra = 408, jump @0\n      : @452 [@dyn 204] (gas: 41)\n 29759: u8 [a0 + 31] = 0x11\n 29763: u8 [a0 + 30] = 0\n 29766: u8 [a0 + 29] = 0\n 29769: u8 [a0 + 28] = 0\n 29772: u8 [a0 + 27] = 0\n 29775: u8 [a0 + 26] = 0\n 29778: u8 [a0 + 25] = 0\n 29781: u8 [a0 + 24] = 0\n 29784: u8 [a0 + 23] = 0\n 29787: u8 [a0 + 22] = 0\n 29790: u8 [a0 + 21] = 0\n 29793: u8 [a0 + 20] = 0\n 29796: u8 [a0 + 19] = 0\n 29799: u8 [a0 + 18] = 0\n 29802: u8 [a0 + 17] = 0\n 29805: u8 [a0 + 16] = 0\n 29808: u8 [a0 + 15] = 0\n 29811: u8 [a0 + 14] = 0\n 29814: u8 [a0 + 13] = 0\n 29817: u8 [a0 + 12] = 0\n 29820: u8 [a0 + 11] = 0\n 29823: u8 [a0 + 10] = 0\n 29826: u8 [a0 + 9] = 0\n 29829: u8 [a0 + 8] = 0\n 29832: u8 [a0 + 7] = 0\n 29835: u8 [a0 + 6] = 0\n 29838: u8 [a0 + 5] = 0\n 29841: u8 [a0 + 4] = 0\n 29844: u8 [a0 + 3] = 0\n 29847: u8 [a0 + 2] = 0\n 29850: u8 [a0 + 1] = 0\n 29853: a1 = u64 [sp + 0x20]\n 29856: a2 = u64 [sp + 0x38]\n 29859: a1 = a1 | a2\n 29862: a2 = 0xffffffe0\n 29872: a2 = s1 <u a2\n 29875: a3 = u64 [sp + 0x40]\n 29878: a2 = 0 if a3 != 0\n 29880: a2 = 0 if a1 != 0\n 29882: u8 [a0 + 0] = 0\n 29884: jump @455 if a2 == 0\n      : @453 (gas: 3)\n 29888: i32 a0 = s0 + 0x20\n 29891: a1 = 0x20\n 29894: ra = 410, jump @0\n      : @454 [@dyn 205] (gas: 54)\n 29900: u8 [a0 + 31] = 0\n 29903: u8 [a0 + 30] = 0\n 29906: u8 [a0 + 29] = 0\n 29909: u8 [a0 + 28] = 0\n 29912: u8 [a0 + 27] = 0\n 29915: u8 [a0 + 26] = 0\n 29918: u8 [a0 + 25] = 0\n 29921: u8 [a0 + 24] = 0\n 29924: u8 [a0 + 23] = 0\n 29927: u8 [a0 + 22] = 0\n 29930: u8 [a0 + 21] = 0\n 29933: u8 [a0 + 20] = 0\n 29936: u8 [a0 + 19] = 0\n 29939: u8 [a0 + 18] = 0\n 29942: u8 [a0 + 17] = 0\n 29945: u8 [a0 + 16] = 0x65\n 29949: u8 [a0 + 15] = 0x74\n 29953: u8 [a0 + 14] = 0x75\n 29957: u8 [a0 + 13] = 0x70\n 29961: u8 [a0 + 12] = 0x73\n 29965: u8 [a0 + 11] = 0x69\n 29969: u8 [a0 + 10] = 0x64\n 29973: u8 [a0 + 9] = 0x20\n 29977: u8 [a0 + 8] = 0x65\n 29981: u8 [a0 + 7] = 0x76\n 29985: u8 [a0 + 6] = 0x69\n 29989: u8 [a0 + 5] = 0x74\n 29993: u8 [a0 + 4] = 0x63\n 29997: u8 [a0 + 3] = 0x61\n 30001: u8 [a0 + 2] = 0x20\n 30005: u8 [a0 + 1] = 0x6f\n 30009: u8 [a0 + 0] = 0x6e\n 30012: a1 = u64 [sp]\n 30014: a0 = a1 + 0x60\n 30017: a1 = a0 <u a1\n 30020: a3 = u64 [sp + 0x8]\n 30023: a2 = a3 + a1\n 30026: a3 = a2 <u a3\n 30029: a3 = a1 if a1 == 0\n 30032: a1 = u64 [sp + 0x10]\n 30035: a3 = a3 + a1\n 30038: a1 = a3 <u a1\n 30041: a4 = u64 [sp + 0x18]\n 30044: a1 = a1 + a4\n 30047: a4 = u64 [sp + 0x28]\n 30050: u64 [a4] = a0\n 30052: u64 [a4 + 0x8] = a2\n 30055: u64 [a4 + 0x10] = a3\n 30058: u64 [a4 + 0x18] = a1\n 30061: ra = u64 [sp + 0x58]\n 30064: s0 = u64 [sp + 0x50]\n 30067: s1 = u64 [sp + 0x48]\n 30070: sp = sp + 0x60\n 30073: ret\n      : @455 (gas: 1)\n 30075: trap\n      : @456 (gas: 17)\n 30076: sp = sp + 0xffffffffffffffa0\n 30079: u64 [sp + 0x58] = ra\n 30082: u64 [sp + 0x50] = s0\n 30085: u64 [sp + 0x48] = s1\n 30088: a3 = u64 [a1 + 0x18]\n 30091: a4 = u64 [a1 + 0x10]\n 30094: a5 = u64 [a1 + 0x8]\n 30097: s1 = u64 [a1]\n 30099: a1 = a5 | a3\n 30102: a2 = s1 | a4\n 30105: a2 = a2 | a1\n 30108: a2 = a2 >> 0x20\n 30111: a1 = a1 | a4\n 30114: a1 = a1 << 0x20\n 30117: a1 = a1 | a2\n 30120: u64 [sp + 0x28] = a0\n 30123: jump @463 if a1 != 0\n      : @457 (gas: 19)\n 30127: a0 = s1 + 0x20\n 30130: u64 [sp + 0x30] = a0\n 30133: a0 = a0 <u s1\n 30136: a1 = a5 + a0\n 30139: u64 [sp + 0x40] = a1\n 30142: u64 [sp + 0x8] = a5\n 30145: s0 = a1 <u a5\n 30148: s0 = a0 if a0 == 0\n 30151: s0 = s0 + a4\n 30154: u64 [sp + 0x10] = a4\n 30157: a0 = s0 <u a4\n 30160: u64 [sp + 0x18] = a3\n 30163: a0 = a0 + a3\n 30166: u64 [sp + 0x38] = a0\n 30169: u64 [sp] = s1\n 30171: i32 a0 = s1 + 0\n 30173: a1 = 0x20\n 30176: s1 = 0x20\n 30179: ra = 412, jump @0\n      : @458 [@dyn 206] (gas: 45)\n 30185: u8 [a0 + 0x1f] = s1\n 30188: a1 = u64 [sp + 0x30]\n 30191: s1 = a1\n 30193: a1 = a1 | s0\n 30196: a2 = u64 [sp + 0x40]\n 30199: a4 = u64 [sp + 0x38]\n 30202: a2 = a2 | a4\n 30205: a1 = a1 | a2\n 30208: a1 = a1 >> 0x20\n 30211: u64 [sp + 0x20] = s0\n 30214: a2 = a2 | s0\n 30217: a2 = a2 << 0x20\n 30220: a1 = a1 | a2\n 30223: u8 [a0 + 30] = 0\n 30226: u8 [a0 + 29] = 0\n 30229: u8 [a0 + 28] = 0\n 30232: u8 [a0 + 27] = 0\n 30235: u8 [a0 + 26] = 0\n 30238: u8 [a0 + 25] = 0\n 30241: u8 [a0 + 24] = 0\n 30244: u8 [a0 + 23] = 0\n 30247: u8 [a0 + 22] = 0\n 30250: u8 [a0 + 21] = 0\n 30253: u8 [a0 + 20] = 0\n 30256: u8 [a0 + 19] = 0\n 30259: u8 [a0 + 18] = 0\n 30262: u8 [a0 + 17] = 0\n 30265: u8 [a0 + 16] = 0\n 30268: u8 [a0 + 15] = 0\n 30271: u8 [a0 + 14] = 0\n 30274: u8 [a0 + 13] = 0\n 30277: u8 [a0 + 12] = 0\n 30280: u8 [a0 + 11] = 0\n 30283: u8 [a0 + 10] = 0\n 30286: u8 [a0 + 9] = 0\n 30289: u8 [a0 + 8] = 0\n 30292: u8 [a0 + 7] = 0\n 30295: u8 [a0 + 6] = 0\n 30298: u8 [a0 + 5] = 0\n 30301: u8 [a0 + 4] = 0\n 30304: u8 [a0 + 3] = 0\n 30307: u8 [a0 + 2] = 0\n 30310: u8 [a0 + 1] = 0\n 30313: u8 [a0 + 0] = 0\n 30315: jump @463 if a1 != 0\n      : @459 (gas: 4)\n 30319: i32 s0 = s1 + 0\n 30321: a1 = 0x20\n 30324: a0 = s0\n 30326: ra = 414, jump @0\n      : @460 [@dyn 207] (gas: 41)\n 30332: u8 [a0 + 31] = 0x12\n 30336: u8 [a0 + 30] = 0\n 30339: u8 [a0 + 29] = 0\n 30342: u8 [a0 + 28] = 0\n 30345: u8 [a0 + 27] = 0\n 30348: u8 [a0 + 26] = 0\n 30351: u8 [a0 + 25] = 0\n 30354: u8 [a0 + 24] = 0\n 30357: u8 [a0 + 23] = 0\n 30360: u8 [a0 + 22] = 0\n 30363: u8 [a0 + 21] = 0\n 30366: u8 [a0 + 20] = 0\n 30369: u8 [a0 + 19] = 0\n 30372: u8 [a0 + 18] = 0\n 30375: u8 [a0 + 17] = 0\n 30378: u8 [a0 + 16] = 0\n 30381: u8 [a0 + 15] = 0\n 30384: u8 [a0 + 14] = 0\n 30387: u8 [a0 + 13] = 0\n 30390: u8 [a0 + 12] = 0\n 30393: u8 [a0 + 11] = 0\n 30396: u8 [a0 + 10] = 0\n 30399: u8 [a0 + 9] = 0\n 30402: u8 [a0 + 8] = 0\n 30405: u8 [a0 + 7] = 0\n 30408: u8 [a0 + 6] = 0\n 30411: u8 [a0 + 5] = 0\n 30414: u8 [a0 + 4] = 0\n 30417: u8 [a0 + 3] = 0\n 30420: u8 [a0 + 2] = 0\n 30423: u8 [a0 + 1] = 0\n 30426: a1 = u64 [sp + 0x20]\n 30429: a2 = u64 [sp + 0x38]\n 30432: a1 = a1 | a2\n 30435: a2 = 0xffffffe0\n 30445: a2 = s1 <u a2\n 30448: a3 = u64 [sp + 0x40]\n 30451: a2 = 0 if a3 != 0\n 30453: a2 = 0 if a1 != 0\n 30455: u8 [a0 + 0] = 0\n 30457: jump @463 if a2 == 0\n      : @461 (gas: 3)\n 30461: i32 a0 = s0 + 0x20\n 30464: a1 = 0x20\n 30467: ra = 416, jump @0\n      : @462 [@dyn 208] (gas: 54)\n 30473: u8 [a0 + 31] = 0\n 30476: u8 [a0 + 30] = 0\n 30479: u8 [a0 + 29] = 0\n 30482: u8 [a0 + 28] = 0\n 30485: u8 [a0 + 27] = 0\n 30488: u8 [a0 + 26] = 0\n 30491: u8 [a0 + 25] = 0\n 30494: u8 [a0 + 24] = 0\n 30497: u8 [a0 + 23] = 0\n 30500: u8 [a0 + 22] = 0\n 30503: u8 [a0 + 21] = 0\n 30506: u8 [a0 + 20] = 0\n 30509: u8 [a0 + 19] = 0\n 30512: u8 [a0 + 18] = 0\n 30515: u8 [a0 + 17] = 0x65\n 30519: u8 [a0 + 16] = 0x6b\n 30523: u8 [a0 + 15] = 0x61\n 30527: u8 [a0 + 14] = 0x74\n 30531: u8 [a0 + 13] = 0x73\n 30535: u8 [a0 + 12] = 0x20\n 30539: u8 [a0 + 11] = 0x74\n 30543: u8 [a0 + 10] = 0x6e\n 30547: u8 [a0 + 9] = 0x65\n 30551: u8 [a0 + 8] = 0x69\n 30555: u8 [a0 + 7] = 0x63\n 30559: u8 [a0 + 6] = 0x69\n 30563: u8 [a0 + 5] = 0x66\n 30567: u8 [a0 + 4] = 0x66\n 30571: u8 [a0 + 3] = 0x75\n 30575: u8 [a0 + 2] = 0x73\n 30579: u8 [a0 + 1] = 0x6e\n 30583: u8 [a0 + 0] = 0x69\n 30586: a1 = u64 [sp]\n 30588: a0 = a1 + 0x60\n 30591: a1 = a0 <u a1\n 30594: a3 = u64 [sp + 0x8]\n 30597: a2 = a3 + a1\n 30600: a3 = a2 <u a3\n 30603: a3 = a1 if a1 == 0\n 30606: a1 = u64 [sp + 0x10]\n 30609: a3 = a3 + a1\n 30612: a1 = a3 <u a1\n 30615: a4 = u64 [sp + 0x18]\n 30618: a1 = a1 + a4\n 30621: a4 = u64 [sp + 0x28]\n 30624: u64 [a4] = a0\n 30626: u64 [a4 + 0x8] = a2\n 30629: u64 [a4 + 0x10] = a3\n 30632: u64 [a4 + 0x18] = a1\n 30635: ra = u64 [sp + 0x58]\n 30638: s0 = u64 [sp + 0x50]\n 30641: s1 = u64 [sp + 0x48]\n 30644: sp = sp + 0x60\n 30647: ret\n      : @463 (gas: 1)\n 30649: trap\n      : @464 (gas: 6)\n 30650: s1 = 0x200a0\n 30655: a4 = i32 [sp + 0x2f0]\n 30659: a2 = u64 [sp + 0x2e0]\n 30663: a0 = i32 [0x200a0]\n 30668: a1 = u64 [sp + 0x2e8]\n 30672: jump @468 if a0 == 0\n      : @465 (gas: 9)\n 30675: u64 [sp + 0x140] = a0\n 30679: a0 = 0x300b0\n 30684: i32 a0 = a0 + 0\n 30686: u64 [sp + 0x148] = a1\n 30690: i32 a1 = s1 + 0\n 30692: u64 [sp + 0x158] = a4\n 30696: u64 [sp + 0x150] = a2\n 30700: ecalli 6 // 'get_immutable_data'\n 30702: fallthrough\n      : @466 (gas: 7)\n 30703: a1 = u64 [sp + 0x148]\n 30707: a2 = u64 [sp + 0x150]\n 30711: a4 = u64 [sp + 0x158]\n 30715: a0 = i32 [0x200a0]\n 30720: u32 [0x200a0] = 0\n 30725: a3 = u64 [sp + 0x140]\n 30729: jump @468 if a0 >=u a3\n      : @467 (gas: 1)\n 30732: jump @510\n      : @468 (gas: 19)\n 30735: a0 = reverse a1\n 30737: a1 = a0 >> 0x20\n 30740: a2 = reverse a2\n 30742: a3 = a2 << 0x20\n 30745: a1 = a1 | a3\n 30748: a0 = a0 << 0x20\n 30751: a4 = reverse a4\n 30753: a4 = a4 >> 0x20\n 30756: a0 = a0 | a4\n 30759: a4 = u64 [0x300b0]\n 30764: a5 = u32 [0x300c0]\n 30769: a2 = a2 >> 0x20\n 30772: a3 = u64 [0x300b8]\n 30777: a0 = a0 ^ a4\n 30780: a2 = a2 ^ a5\n 30783: a0 = a0 | a2\n 30786: a1 = a1 ^ a3\n 30789: a0 = a0 | a1\n 30792: jump @499 if a0 != 0\n      : @469 (gas: 2)\n 30796: a1 = 0x20\n 30799: ra = 418, jump @0\n      : @470 [@dyn 209] (gas: 103)\n 30805: a1 = u64 [sp + 0x168]\n 30809: a1 = reverse a1\n 30811: a2 = u64 [sp + 0x170]\n 30815: a2 = reverse a2\n 30817: a3 = u64 [sp + 0x178]\n 30821: a3 = reverse a3\n 30823: a4 = u64 [sp + 0x180]\n 30827: a4 = reverse a4\n 30829: a5 = a4 >> 0x38\n 30832: u64 [sp + 0x100] = a5\n 30836: u8 [a0 + 0x1f] = a5\n 30839: a5 = a4 >> 0x30\n 30842: u64 [sp + 0xf8] = a5\n 30846: u8 [a0 + 0x1e] = a5\n 30849: a5 = a4 >> 0x28\n 30852: u64 [sp + 0xf0] = a5\n 30856: u8 [a0 + 0x1d] = a5\n 30859: a5 = a4 >> 0x20\n 30862: u64 [sp + 0xe8] = a5\n 30866: u8 [a0 + 0x1c] = a5\n 30869: a5 = a4 >> 0x18\n 30872: u64 [sp + 0xe0] = a5\n 30876: u8 [a0 + 0x1b] = a5\n 30879: a5 = a4 >> 0x10\n 30882: u64 [sp + 0xd8] = a5\n 30886: u8 [a0 + 0x1a] = a5\n 30889: a5 = a4 >> 0x8\n 30892: u64 [sp + 0xd0] = a5\n 30896: u8 [a0 + 0x19] = a5\n 30899: u64 [sp + 0x168] = a4\n 30903: u8 [a0 + 0x18] = a4\n 30906: u8 [a0 + 0x10] = a3\n 30909: a4 = a3 >> 0x38\n 30912: u64 [sp + 0xc8] = a4\n 30916: u8 [a0 + 0x17] = a4\n 30919: a4 = a3 >> 0x30\n 30922: u64 [sp + 0xc0] = a4\n 30926: u8 [a0 + 0x16] = a4\n 30929: a4 = a3 >> 0x28\n 30932: u64 [sp + 0xb8] = a4\n 30936: u8 [a0 + 0x15] = a4\n 30939: a4 = a3 >> 0x20\n 30942: u64 [sp + 0xb0] = a4\n 30946: u8 [a0 + 0x14] = a4\n 30949: a4 = a3 >> 0x18\n 30952: u64 [sp + 0xa8] = a4\n 30956: u8 [a0 + 0x13] = a4\n 30959: a4 = a3 >> 0x10\n 30962: u64 [sp + 0xa0] = a4\n 30966: u8 [a0 + 0x12] = a4\n 30969: u64 [sp + 0x170] = a3\n 30973: a3 = a3 >> 0x8\n 30976: u64 [sp + 0x98] = a3\n 30980: u8 [a0 + 0x11] = a3\n 30983: u8 [a0 + 0x8] = a2\n 30986: a3 = a2 >> 0x38\n 30989: u64 [sp + 0x90] = a3\n 30993: u8 [a0 + 0xf] = a3\n 30996: a3 = a2 >> 0x30\n 30999: u64 [sp + 0x88] = a3\n 31003: u8 [a0 + 0xe] = a3\n 31006: a3 = a2 >> 0x28\n 31009: u64 [sp + 0x80] = a3\n 31013: u8 [a0 + 0xd] = a3\n 31016: a3 = a2 >> 0x20\n 31019: u64 [sp + 0x78] = a3\n 31022: u8 [a0 + 0xc] = a3\n 31025: a3 = a2 >> 0x18\n 31028: u64 [sp + 0x70] = a3\n 31031: u8 [a0 + 0xb] = a3\n 31034: a3 = a2 >> 0x10\n 31037: u64 [sp + 0x68] = a3\n 31040: u8 [a0 + 0xa] = a3\n 31043: u64 [sp + 0x178] = a2\n 31047: a2 = a2 >> 0x8\n 31050: u64 [sp + 0x60] = a2\n 31053: u8 [a0 + 0x9] = a2\n 31056: u8 [a0] = a1\n 31058: a2 = a1 >> 0x38\n 31061: u64 [sp + 0x58] = a2\n 31064: u8 [a0 + 0x7] = a2\n 31067: a2 = a1 >> 0x30\n 31070: u64 [sp + 0x50] = a2\n 31073: u8 [a0 + 0x6] = a2\n 31076: a2 = a1 >> 0x28\n 31079: u64 [sp + 0x48] = a2\n 31082: u8 [a0 + 0x5] = a2\n 31085: a2 = a1 >> 0x20\n 31088: u64 [sp + 0x40] = a2\n 31091: u8 [a0 + 0x4] = a2\n 31094: a2 = a1 >> 0x18\n 31097: u64 [sp + 0x38] = a2\n 31100: u8 [a0 + 0x3] = a2\n 31103: a2 = a1 >> 0x10\n 31106: u64 [sp + 0x30] = a2\n 31109: u8 [a0 + 0x2] = a2\n 31112: u64 [sp + 0x180] = a1\n 31116: a1 = a1 >> 0x8\n 31119: u64 [sp + 0x28] = a1\n 31122: u8 [a0 + 0x1] = a1\n 31125: a0 = 0x20\n 31128: a1 = 0x20\n 31131: ra = 420, jump @0\n      : @471 [@dyn 210] (gas: 35)\n 31137: u8 [a0 + 31] = 0x3\n 31141: u8 [a0 + 30] = 0\n 31144: u8 [a0 + 29] = 0\n 31147: u8 [a0 + 28] = 0\n 31150: u8 [a0 + 27] = 0\n 31153: u8 [a0 + 26] = 0\n 31156: u8 [a0 + 25] = 0\n 31159: u8 [a0 + 24] = 0\n 31162: u8 [a0 + 23] = 0\n 31165: u8 [a0 + 22] = 0\n 31168: u8 [a0 + 21] = 0\n 31171: u8 [a0 + 20] = 0\n 31174: u8 [a0 + 19] = 0\n 31177: u8 [a0 + 18] = 0\n 31180: u8 [a0 + 17] = 0\n 31183: u8 [a0 + 16] = 0\n 31186: u8 [a0 + 15] = 0\n 31189: u8 [a0 + 14] = 0\n 31192: u8 [a0 + 13] = 0\n 31195: u8 [a0 + 12] = 0\n 31198: u8 [a0 + 11] = 0\n 31201: u8 [a0 + 10] = 0\n 31204: u8 [a0 + 9] = 0\n 31207: u8 [a0 + 8] = 0\n 31210: u8 [a0 + 7] = 0\n 31213: u8 [a0 + 6] = 0\n 31216: u8 [a0 + 5] = 0\n 31219: u8 [a0 + 4] = 0\n 31222: u8 [a0 + 3] = 0\n 31225: u8 [a0 + 2] = 0\n 31228: u8 [a0 + 1] = 0\n 31231: u8 [a0 + 0] = 0\n 31233: a1 = 0x40\n 31236: a0 = 0\n 31238: ra = 422, jump @0\n      : @472 [@dyn 211] (gas: 14)\n 31244: i32 a0 = a0 + 0\n 31246: i32 a2 = sp + 0x340\n 31250: a1 = 0x40\n 31253: ecalli 8 // 'hash_keccak_256'\n 31255: a0 = u64 [sp + 0x340]\n 31259: u64 [sp + 0x158] = a0\n 31263: a0 = u64 [sp + 0x348]\n 31267: u64 [sp + 0x150] = a0\n 31271: a0 = u64 [sp + 0x350]\n 31275: u64 [sp + 0x148] = a0\n 31279: s1 = u64 [sp + 0x358]\n 31283: a1 = 0x20\n 31286: a0 = 0\n 31288: ra = 424, jump @0\n      : @473 [@dyn 212] (gas: 75)\n 31294: a1 = u64 [sp + 0x160]\n 31298: a2 = reverse a1\n 31300: a1 = u64 [sp + 0x188]\n 31304: a3 = reverse a1\n 31306: a1 = u64 [sp + 0x190]\n 31310: a4 = reverse a1\n 31312: a1 = u64 [sp + 0x198]\n 31316: a5 = reverse a1\n 31318: a1 = a5 >> 0x38\n 31321: u8 [a0 + 0x1f] = a1\n 31324: a1 = a5 >> 0x30\n 31327: u8 [a0 + 0x1e] = a1\n 31330: a1 = a5 >> 0x28\n 31333: u8 [a0 + 0x1d] = a1\n 31336: a1 = a5 >> 0x20\n 31339: u8 [a0 + 0x1c] = a1\n 31342: a1 = a5 >> 0x18\n 31345: u8 [a0 + 0x1b] = a1\n 31348: a1 = a5 >> 0x10\n 31351: u8 [a0 + 0x1a] = a1\n 31354: a1 = a5 >> 0x8\n 31357: u8 [a0 + 0x19] = a1\n 31360: u64 [sp + 0x8] = a5\n 31363: u8 [a0 + 0x18] = a5\n 31366: a1 = a4 >> 0x38\n 31369: u8 [a0 + 0x17] = a1\n 31372: a1 = a4 >> 0x30\n 31375: u8 [a0 + 0x16] = a1\n 31378: a1 = a4 >> 0x28\n 31381: u8 [a0 + 0x15] = a1\n 31384: a1 = a4 >> 0x20\n 31387: u8 [a0 + 0x14] = a1\n 31390: a1 = a4 >> 0x18\n 31393: u8 [a0 + 0x13] = a1\n 31396: a1 = a4 >> 0x10\n 31399: u8 [a0 + 0x12] = a1\n 31402: a1 = a4 >> 0x8\n 31405: u8 [a0 + 0x11] = a1\n 31408: u64 [sp + 0x10] = a4\n 31411: u8 [a0 + 0x10] = a4\n 31414: a1 = a3 >> 0x38\n 31417: u8 [a0 + 0xf] = a1\n 31420: a1 = a3 >> 0x30\n 31423: u8 [a0 + 0xe] = a1\n 31426: a1 = a3 >> 0x28\n 31429: u8 [a0 + 0xd] = a1\n 31432: a1 = a3 >> 0x20\n 31435: u8 [a0 + 0xc] = a1\n 31438: a1 = a3 >> 0x18\n 31441: u8 [a0 + 0xb] = a1\n 31444: a1 = a3 >> 0x10\n 31447: u8 [a0 + 0xa] = a1\n 31450: a1 = a3 >> 0x8\n 31453: u8 [a0 + 0x9] = a1\n 31456: u64 [sp + 0x18] = a3\n 31459: u8 [a0 + 0x8] = a3\n 31462: a1 = a2 >> 0x38\n 31465: u8 [a0 + 0x7] = a1\n 31468: a1 = a2 >> 0x30\n 31471: u8 [a0 + 0x6] = a1\n 31474: a1 = a2 >> 0x28\n 31477: u8 [a0 + 0x5] = a1\n 31480: a1 = a2 >> 0x20\n 31483: u8 [a0 + 0x4] = a1\n 31486: a1 = a2 >> 0x18\n 31489: u8 [a0 + 0x3] = a1\n 31492: a1 = a2 >> 0x10\n 31495: u8 [a0 + 0x2] = a1\n 31498: a1 = a2 >> 0x8\n 31501: u8 [a0 + 0x1] = a1\n 31504: u64 [sp + 0x20] = a2\n 31507: u8 [a0] = a2\n 31509: a0 = 0x20\n 31512: a1 = 0x20\n 31515: ra = 426, jump @0\n      : @474 [@dyn 213] (gas: 66)\n 31521: a1 = s1 >> 0x38\n 31524: u8 [a0 + 0x1f] = a1\n 31527: a1 = s1 >> 0x30\n 31530: u8 [a0 + 0x1e] = a1\n 31533: a1 = s1 >> 0x28\n 31536: u8 [a0 + 0x1d] = a1\n 31539: a1 = s1 >> 0x20\n 31542: u8 [a0 + 0x1c] = a1\n 31545: a1 = s1 >> 0x18\n 31548: u8 [a0 + 0x1b] = a1\n 31551: a1 = s1 >> 0x10\n 31554: u8 [a0 + 0x1a] = a1\n 31557: a1 = s1 >> 0x8\n 31560: u8 [a0 + 0x19] = a1\n 31563: u8 [a0 + 0x18] = s1\n 31566: a2 = u64 [sp + 0x148]\n 31570: a1 = a2 >> 0x38\n 31573: u8 [a0 + 0x17] = a1\n 31576: a1 = a2 >> 0x30\n 31579: u8 [a0 + 0x16] = a1\n 31582: a1 = a2 >> 0x28\n 31585: u8 [a0 + 0x15] = a1\n 31588: a1 = a2 >> 0x20\n 31591: u8 [a0 + 0x14] = a1\n 31594: a1 = a2 >> 0x18\n 31597: u8 [a0 + 0x13] = a1\n 31600: a1 = a2 >> 0x10\n 31603: u8 [a0 + 0x12] = a1\n 31606: a1 = a2 >> 0x8\n 31609: u8 [a0 + 0x11] = a1\n 31612: u8 [a0 + 0x10] = a2\n 31615: a2 = u64 [sp + 0x150]\n 31619: a1 = a2 >> 0x38\n 31622: u8 [a0 + 0xf] = a1\n 31625: a1 = a2 >> 0x30\n 31628: u8 [a0 + 0xe] = a1\n 31631: a1 = a2 >> 0x28\n 31634: u8 [a0 + 0xd] = a1\n 31637: a1 = a2 >> 0x20\n 31640: u8 [a0 + 0xc] = a1\n 31643: a1 = a2 >> 0x18\n 31646: u8 [a0 + 0xb] = a1\n 31649: a1 = a2 >> 0x10\n 31652: u8 [a0 + 0xa] = a1\n 31655: a1 = a2 >> 0x8\n 31658: u8 [a0 + 0x9] = a1\n 31661: u8 [a0 + 0x8] = a2\n 31664: a2 = u64 [sp + 0x158]\n 31668: a1 = a2 >> 0x38\n 31671: u8 [a0 + 0x7] = a1\n 31674: a1 = a2 >> 0x30\n 31677: u8 [a0 + 0x6] = a1\n 31680: a1 = a2 >> 0x28\n 31683: u8 [a0 + 0x5] = a1\n 31686: a1 = a2 >> 0x20\n 31689: u8 [a0 + 0x4] = a1\n 31692: a1 = a2 >> 0x18\n 31695: u8 [a0 + 0x3] = a1\n 31698: a1 = a2 >> 0x10\n 31701: u8 [a0 + 0x2] = a1\n 31704: a1 = a2 >> 0x8\n 31707: u8 [a0 + 0x1] = a1\n 31710: u8 [a0] = a2\n 31712: a1 = 0x40\n 31715: a0 = 0\n 31717: ra = 428, jump @0\n      : @475 [@dyn 214] (gas: 43)\n 31723: i32 a0 = a0 + 0\n 31725: i32 a2 = sp + 0x340\n 31729: a1 = 0x40\n 31732: ecalli 8 // 'hash_keccak_256'\n 31734: a0 = u64 [sp + 0x340]\n 31738: a1 = u64 [sp + 0x348]\n 31742: a2 = u64 [sp + 0x350]\n 31746: a3 = u64 [sp + 0x358]\n 31750: a5 = reverse a0\n 31752: a4 = reverse a1\n 31754: a1 = reverse a2\n 31756: a0 = reverse a3\n 31758: a2 = a0 + 0x2\n 31761: u64 [sp + 0x140] = a0\n 31765: a0 = a2 <u a0\n 31768: a3 = a1 + a0\n 31771: u64 [sp + 0x138] = a1\n 31775: s1 = a3 <u a1\n 31778: s1 = a0 if a0 == 0\n 31781: s1 = s1 + a4\n 31784: u64 [sp + 0x130] = a4\n 31788: a0 = s1 <u a4\n 31791: u64 [sp + 0x128] = a5\n 31795: a0 = a0 + a5\n 31798: u64 [sp + 0x190] = a3\n 31802: u64 [sp + 0x308] = a3\n 31806: u64 [sp + 0x198] = a2\n 31810: u64 [sp + 0x300] = a2\n 31814: u64 [sp + 0x310] = s1\n 31818: u64 [sp + 0x188] = a0\n 31822: u64 [sp + 0x318] = a0\n 31826: u64 [sp + 856] = 0\n 31830: u64 [sp + 848] = 0\n 31834: u64 [sp + 840] = 0\n 31838: u64 [sp + 832] = 0\n 31842: u32 [sp + 800] = 0x20\n 31847: i32 a1 = sp + 0x300\n 31851: i32 a3 = sp + 0x340\n 31855: i32 a4 = sp + 0x320\n 31859: a2 = 0xffffffffffffffff\n 31862: a0 = 0\n 31864: ecalli 7 // 'get_storage'\n 31866: fallthrough\n      : @476 (gas: 2)\n 31867: a0 = u8 [sp + 0x341]\n 31871: jump @494 if a0 == 0\n      : @477 (gas: 19)\n 31875: u64 [sp + 0x310] = s1\n 31879: a0 = u64 [sp + 0x190]\n 31883: u64 [sp + 0x308] = a0\n 31887: a0 = u64 [sp + 0x198]\n 31891: u64 [sp + 0x300] = a0\n 31895: a0 = u64 [sp + 0x188]\n 31899: u64 [sp + 0x318] = a0\n 31903: u64 [sp + 856] = 0\n 31907: u64 [sp + 848] = 0\n 31911: u64 [sp + 840] = 0\n 31915: u64 [sp + 832] = 0\n 31919: u32 [sp + 800] = 0x20\n 31924: i32 a1 = sp + 0x300\n 31928: i32 a3 = sp + 0x340\n 31932: i32 a4 = sp + 0x320\n 31936: a2 = 0xffffffffffffffff\n 31939: a0 = 0\n 31941: ecalli 7 // 'get_storage'\n 31943: fallthrough\n      : @478 (gas: 2)\n 31944: a0 = u8 [sp + 0x342]\n 31948: jump @494 if a0 != 0\n      : @479 (gas: 45)\n 31952: u64 [sp + 0x310] = s1\n 31956: a0 = u64 [sp + 0x190]\n 31960: u64 [sp + 0x308] = a0\n 31964: a0 = u64 [sp + 0x198]\n 31968: u64 [sp + 0x300] = a0\n 31972: u64 [sp + 0x160] = s1\n 31976: s1 = u64 [sp + 0x188]\n 31980: u64 [sp + 0x318] = s1\n 31984: u64 [sp + 856] = 0\n 31988: u64 [sp + 848] = 0\n 31992: u64 [sp + 840] = 0\n 31996: u64 [sp + 832] = 0\n 32000: u32 [sp + 800] = 0x20\n 32005: i32 a1 = sp + 0x300\n 32009: i32 a3 = sp + 0x340\n 32013: i32 a4 = sp + 0x320\n 32017: a2 = 0xffffffffffffffff\n 32020: a0 = 0\n 32022: ecalli 7 // 'get_storage'\n 32024: a0 = u64 [sp + 0x348]\n 32028: a1 = u64 [sp + 0x350]\n 32032: a2 = u64 [sp + 0x340]\n 32036: a3 = u64 [sp + 0x358]\n 32040: a2 = a2 & 0xffffffffff00ffff\n 32046: a2 = a2 | 0x10000\n 32051: u64 [sp + 0x318] = s1\n 32055: a4 = u64 [sp + 0x160]\n 32059: u64 [sp + 0x310] = a4\n 32063: a4 = u64 [sp + 0x190]\n 32067: u64 [sp + 0x308] = a4\n 32071: a4 = u64 [sp + 0x198]\n 32075: u64 [sp + 0x300] = a4\n 32079: u64 [sp + 0x358] = a3\n 32083: u64 [sp + 0x350] = a1\n 32087: u64 [sp + 0x348] = a0\n 32091: u64 [sp + 0x340] = a2\n 32095: i32 a1 = sp + 0x300\n 32099: i32 a3 = sp + 0x340\n 32103: a2 = 0xffffffffffffffff\n 32106: a4 = 0x20\n 32109: a0 = 0\n 32111: ecalli 14 // 'set_storage'\n 32113: a1 = 0x20\n 32116: a0 = 0\n 32118: ra = 430, jump @0\n      : @480 [@dyn 215] (gas: 67)\n 32124: a1 = u64 [sp + 0x100]\n 32128: u8 [a0 + 0x1f] = a1\n 32131: a1 = u64 [sp + 0xf8]\n 32135: u8 [a0 + 0x1e] = a1\n 32138: a1 = u64 [sp + 0xf0]\n 32142: u8 [a0 + 0x1d] = a1\n 32145: a1 = u64 [sp + 0xe8]\n 32149: u8 [a0 + 0x1c] = a1\n 32152: a1 = u64 [sp + 0xe0]\n 32156: u8 [a0 + 0x1b] = a1\n 32159: a1 = u64 [sp + 0xd8]\n 32163: u8 [a0 + 0x1a] = a1\n 32166: a1 = u64 [sp + 0xd0]\n 32170: u8 [a0 + 0x19] = a1\n 32173: a1 = u64 [sp + 0xc8]\n 32177: u8 [a0 + 0x17] = a1\n 32180: a1 = u64 [sp + 0xc0]\n 32184: u8 [a0 + 0x16] = a1\n 32187: a1 = u64 [sp + 0xb8]\n 32191: u8 [a0 + 0x15] = a1\n 32194: a1 = u64 [sp + 0xb0]\n 32198: u8 [a0 + 0x14] = a1\n 32201: a1 = u64 [sp + 0xa8]\n 32205: u8 [a0 + 0x13] = a1\n 32208: a1 = u64 [sp + 0xa0]\n 32212: u8 [a0 + 0x12] = a1\n 32215: a1 = u64 [sp + 0x98]\n 32219: u8 [a0 + 0x11] = a1\n 32222: a1 = u64 [sp + 0x90]\n 32226: u8 [a0 + 0xf] = a1\n 32229: a1 = u64 [sp + 0x88]\n 32233: u8 [a0 + 0xe] = a1\n 32236: a1 = u64 [sp + 0x80]\n 32240: u8 [a0 + 0xd] = a1\n 32243: a1 = u64 [sp + 0x78]\n 32246: u8 [a0 + 0xc] = a1\n 32249: a1 = u64 [sp + 0x70]\n 32252: u8 [a0 + 0xb] = a1\n 32255: a1 = u64 [sp + 0x68]\n 32258: u8 [a0 + 0xa] = a1\n 32261: a1 = u64 [sp + 0x60]\n 32264: u8 [a0 + 0x9] = a1\n 32267: a1 = u64 [sp + 0x58]\n 32270: u8 [a0 + 0x7] = a1\n 32273: a1 = u64 [sp + 0x50]\n 32276: u8 [a0 + 0x6] = a1\n 32279: a1 = u64 [sp + 0x48]\n 32282: u8 [a0 + 0x5] = a1\n 32285: a1 = u64 [sp + 0x40]\n 32288: u8 [a0 + 0x4] = a1\n 32291: a1 = u64 [sp + 0x38]\n 32294: u8 [a0 + 0x3] = a1\n 32297: a1 = u64 [sp + 0x30]\n 32300: u8 [a0 + 0x2] = a1\n 32303: a1 = u64 [sp + 0x28]\n 32306: u8 [a0 + 0x1] = a1\n 32309: a1 = u64 [sp + 0x168]\n 32313: u8 [a0 + 0x18] = a1\n 32316: a1 = u64 [sp + 0x170]\n 32320: u8 [a0 + 0x10] = a1\n 32323: a1 = u64 [sp + 0x178]\n 32327: u8 [a0 + 0x8] = a1\n 32330: a1 = u64 [sp + 0x180]\n 32334: u8 [a0] = a1\n 32336: a0 = 0x20\n 32339: a1 = 0x20\n 32342: ra = 432, jump @0\n      : @481 [@dyn 216] (gas: 35)\n 32348: u8 [a0 + 31] = 0x2\n 32352: u8 [a0 + 30] = 0\n 32355: u8 [a0 + 29] = 0\n 32358: u8 [a0 + 28] = 0\n 32361: u8 [a0 + 27] = 0\n 32364: u8 [a0 + 26] = 0\n 32367: u8 [a0 + 25] = 0\n 32370: u8 [a0 + 24] = 0\n 32373: u8 [a0 + 23] = 0\n 32376: u8 [a0 + 22] = 0\n 32379: u8 [a0 + 21] = 0\n 32382: u8 [a0 + 20] = 0\n 32385: u8 [a0 + 19] = 0\n 32388: u8 [a0 + 18] = 0\n 32391: u8 [a0 + 17] = 0\n 32394: u8 [a0 + 16] = 0\n 32397: u8 [a0 + 15] = 0\n 32400: u8 [a0 + 14] = 0\n 32403: u8 [a0 + 13] = 0\n 32406: u8 [a0 + 12] = 0\n 32409: u8 [a0 + 11] = 0\n 32412: u8 [a0 + 10] = 0\n 32415: u8 [a0 + 9] = 0\n 32418: u8 [a0 + 8] = 0\n 32421: u8 [a0 + 7] = 0\n 32424: u8 [a0 + 6] = 0\n 32427: u8 [a0 + 5] = 0\n 32430: u8 [a0 + 4] = 0\n 32433: u8 [a0 + 3] = 0\n 32436: u8 [a0 + 2] = 0\n 32439: u8 [a0 + 1] = 0\n 32442: u8 [a0 + 0] = 0\n 32444: a1 = 0x40\n 32447: a0 = 0\n 32449: ra = 434, jump @0\n      : @482 [@dyn 217] (gas: 5)\n 32455: i32 a0 = a0 + 0\n 32457: i32 a2 = sp + 0x340\n 32461: a1 = 0x40\n 32464: ecalli 8 // 'hash_keccak_256'\n 32466: fallthrough\n      : @483 (gas: 9)\n 32467: a0 = u64 [sp + 0x110]\n 32471: a1 = u64 [sp + 0x108]\n 32475: a0 = a0 | a1\n 32478: a1 = u64 [sp + 0x120]\n 32482: a2 = u64 [sp + 0x118]\n 32486: a1 = a1 | a2\n 32489: a0 = a0 | a1\n 32492: u64 [sp + 0x120] = a0\n 32496: jump @489 if a0 == 0\n      : @484 (gas: 78)\n 32500: a0 = u64 [sp + 0x350]\n 32504: a1 = u64 [sp + 0x348]\n 32508: a2 = u64 [sp + 0x140]\n 32512: a2 = a2 + 0x1\n 32515: a3 = a2 <u 0x1\n 32518: a4 = u64 [sp + 0x138]\n 32522: a3 = a3 + a4\n 32525: u64 [sp + 0x300] = a2\n 32529: a2 = a2 | a3\n 32532: u64 [sp + 0x308] = a3\n 32536: a3 = u64 [sp + 0x340]\n 32540: a2 = a2 <u 0x1\n 32543: a4 = u64 [sp + 0x130]\n 32547: a2 = a2 + a4\n 32550: u64 [sp + 0x310] = a2\n 32554: a2 = a2 <u a4\n 32557: a4 = u64 [sp + 0x128]\n 32561: a2 = a2 + a4\n 32564: u64 [sp + 0x318] = a2\n 32568: a2 = u64 [sp + 0x358]\n 32572: a3 = reverse a3\n 32574: u64 [sp + 0x160] = a3\n 32578: a1 = reverse a1\n 32580: u64 [sp + 0x158] = a1\n 32584: a0 = reverse a0\n 32586: u64 [sp + 0x150] = a0\n 32590: a0 = reverse a2\n 32592: u64 [sp + 0x148] = a0\n 32596: u64 [sp + 856] = 0\n 32600: u64 [sp + 848] = 0\n 32604: u64 [sp + 840] = 0\n 32608: u64 [sp + 832] = 0\n 32612: u32 [sp + 800] = 0x20\n 32617: i32 a1 = sp + 0x300\n 32621: i32 a3 = sp + 0x340\n 32625: i32 a4 = sp + 0x320\n 32629: a2 = 0xffffffffffffffff\n 32632: a0 = 0\n 32634: ecalli 7 // 'get_storage'\n 32636: s1 = u64 [sp + 0x358]\n 32640: a0 = u64 [sp + 0x350]\n 32644: u64 [sp + 0x188] = a0\n 32648: a0 = u64 [sp + 0x348]\n 32652: u64 [sp + 0x190] = a0\n 32656: a0 = u64 [sp + 0x340]\n 32660: u64 [sp + 0x198] = a0\n 32664: a0 = u64 [sp + 0x148]\n 32668: a2 = a0 + 0x3\n 32671: a0 = a2 <u a0\n 32674: a1 = u64 [sp + 0x150]\n 32678: a3 = a1 + a0\n 32681: a1 = a3 <u a1\n 32684: a1 = a0 if a0 == 0\n 32687: a0 = u64 [sp + 0x158]\n 32691: a1 = a1 + a0\n 32694: a0 = a1 <u a0\n 32697: a4 = u64 [sp + 0x160]\n 32701: a0 = a0 + a4\n 32704: u64 [sp + 0x118] = a0\n 32708: u64 [sp + 0x318] = a0\n 32712: u64 [sp + 0x148] = a1\n 32716: u64 [sp + 0x310] = a1\n 32720: u64 [sp + 0x150] = a3\n 32724: u64 [sp + 0x308] = a3\n 32728: u64 [sp + 0x158] = a2\n 32732: u64 [sp + 0x300] = a2\n 32736: u64 [sp + 856] = 0\n 32740: u64 [sp + 848] = 0\n 32744: u64 [sp + 840] = 0\n 32748: u64 [sp + 832] = 0\n 32752: u32 [sp + 800] = 0x20\n 32757: i32 a1 = sp + 0x300\n 32761: i32 a3 = sp + 0x340\n 32765: i32 a4 = sp + 0x320\n 32769: a2 = 0xffffffffffffffff\n 32772: a0 = 0\n 32774: ecalli 7 // 'get_storage'\n 32776: fallthrough\n      : @485 (gas: 20)\n 32777: a0 = u64 [sp + 0x358]\n 32781: t0 = u64 [sp + 0x340]\n 32785: a2 = u64 [sp + 0x350]\n 32789: a3 = u64 [sp + 0x348]\n 32793: a4 = a0 ^ s1\n 32796: u64 [sp + 0x160] = s1\n 32800: s1 = a0 <u s1\n 32803: a0 = u64 [sp + 0x188]\n 32807: a5 = a2 <u a0\n 32810: a5 = s1 if a4 != 0\n 32813: a1 = u64 [sp + 0x190]\n 32817: s1 = a3 ^ a1\n 32820: a3 = a3 <u a1\n 32823: a1 = u64 [sp + 0x198]\n 32827: a1 = t0 <u a1\n 32830: a1 = a3 if s1 != 0\n 32833: a0 = a0 ^ a2\n 32836: a0 = a0 | a4\n 32839: a1 = a5 if a0 != 0\n 32842: jump @504 if a1 != 0\n      : @486 (gas: 20)\n 32846: a0 = u64 [sp + 0x148]\n 32850: u64 [sp + 0x310] = a0\n 32854: a0 = u64 [sp + 0x150]\n 32858: u64 [sp + 0x308] = a0\n 32862: a0 = u64 [sp + 0x158]\n 32866: u64 [sp + 0x300] = a0\n 32870: a0 = u64 [sp + 0x118]\n 32874: u64 [sp + 0x318] = a0\n 32878: u64 [sp + 856] = 0\n 32882: u64 [sp + 848] = 0\n 32886: u64 [sp + 840] = 0\n 32890: u64 [sp + 832] = 0\n 32894: u32 [sp + 800] = 0x20\n 32899: i32 a1 = sp + 0x300\n 32903: i32 a3 = sp + 0x340\n 32907: i32 a4 = sp + 0x320\n 32911: a2 = 0xffffffffffffffff\n 32914: a0 = 0\n 32916: ecalli 7 // 'get_storage'\n 32918: fallthrough\n      : @487 (gas: 22)\n 32919: a2 = u64 [sp + 0x358]\n 32923: a3 = u64 [sp + 0x350]\n 32927: t1 = u64 [sp + 0x348]\n 32931: a1 = u64 [sp + 0x340]\n 32935: a4 = u64 [sp + 0x160]\n 32939: a0 = a2 ^ a4\n 32942: a4 = a2 <u a4\n 32945: t0 = u64 [sp + 0x188]\n 32949: a5 = a3 <u t0\n 32952: u64 [sp + 0x108] = a5\n 32956: a4 = a5 if a0 == 0\n 32959: a5 = u64 [sp + 0x190]\n 32963: t2 = t1 ^ a5\n 32966: s1 = t1 <u a5\n 32969: a5 = u64 [sp + 0x198]\n 32973: u64 [sp + 0xf8] = a1\n 32977: ra = a1 <u a5\n 32980: s1 = ra if t2 == 0\n 32983: a5 = a3 ^ t0\n 32986: a0 = a0 | a5\n 32989: a4 = s1 if a0 == 0\n 32992: jump @511 if a4 != 0\n      : @488 (gas: 96)\n 32996: a0 = u64 [sp + 0x188]\n 33000: a0 = a3 - a0\n 33003: a3 = a0 - s1\n 33006: u64 [sp + 0x110] = a3\n 33010: a0 = a0 <u s1\n 33013: a3 = u64 [sp + 0x160]\n 33017: a2 = a2 - a3\n 33020: a1 = u64 [sp + 0x108]\n 33024: s1 = a2 - a1\n 33027: s1 = s1 - a0\n 33030: u64 [sp + 0x108] = s1\n 33034: a0 = u64 [sp + 0x190]\n 33038: a0 = t1 - a0\n 33041: a0 = a0 - ra\n 33044: u64 [sp + 0x100] = a0\n 33048: a0 = u64 [sp + 0x198]\n 33052: a1 = u64 [sp + 0xf8]\n 33056: a0 = a1 - a0\n 33059: u64 [sp + 0xf8] = a0\n 33063: a0 = u64 [sp + 0x148]\n 33067: u64 [sp + 0x310] = a0\n 33071: a0 = u64 [sp + 0x150]\n 33075: u64 [sp + 0x308] = a0\n 33079: a0 = u64 [sp + 0x158]\n 33083: u64 [sp + 0x300] = a0\n 33087: s1 = u64 [sp + 0x118]\n 33091: u64 [sp + 0x318] = s1\n 33095: u64 [sp + 856] = 0\n 33099: u64 [sp + 848] = 0\n 33103: u64 [sp + 840] = 0\n 33107: u64 [sp + 832] = 0\n 33111: u32 [sp + 800] = 0x20\n 33116: i32 a1 = sp + 0x300\n 33120: i32 a3 = sp + 0x340\n 33124: i32 a4 = sp + 0x320\n 33128: a2 = 0xffffffffffffffff\n 33131: a0 = 0\n 33133: ecalli 7 // 'get_storage'\n 33135: u64 [sp + 0x318] = s1\n 33139: a0 = u64 [sp + 0x148]\n 33143: u64 [sp + 0x310] = a0\n 33147: a0 = u64 [sp + 0x150]\n 33151: u64 [sp + 0x308] = a0\n 33155: a0 = u64 [sp + 0x158]\n 33159: u64 [sp + 0x300] = a0\n 33163: a0 = u64 [sp + 0x108]\n 33167: u64 [sp + 0x358] = a0\n 33171: a0 = u64 [sp + 0x110]\n 33175: u64 [sp + 0x350] = a0\n 33179: a0 = u64 [sp + 0x100]\n 33183: u64 [sp + 0x348] = a0\n 33187: a0 = u64 [sp + 0xf8]\n 33191: u64 [sp + 0x340] = a0\n 33195: i32 a1 = sp + 0x300\n 33199: i32 a3 = sp + 0x340\n 33203: a2 = 0xffffffffffffffff\n 33206: a4 = 0x20\n 33209: a0 = 0\n 33211: ecalli 14 // 'set_storage'\n 33213: a0 = u64 [sp + 0x128]\n 33217: u64 [sp + 0x318] = a0\n 33221: a0 = u64 [sp + 0x130]\n 33225: u64 [sp + 0x310] = a0\n 33229: a0 = u64 [sp + 0x138]\n 33233: u64 [sp + 0x308] = a0\n 33237: a0 = u64 [sp + 0x140]\n 33241: u64 [sp + 0x300] = a0\n 33245: u64 [sp + 856] = 0\n 33249: u64 [sp + 848] = 0\n 33253: u64 [sp + 840] = 0\n 33257: u64 [sp + 832] = 0\n 33261: u32 [sp + 800] = 0x20\n 33266: i32 a1 = sp + 0x300\n 33270: i32 a3 = sp + 0x340\n 33274: i32 a4 = sp + 0x320\n 33278: a2 = 0xffffffffffffffff\n 33281: a0 = 0\n 33283: ecalli 7 // 'get_storage'\n 33285: a2 = u64 [sp + 0x340]\n 33289: a0 = u64 [sp + 0x348]\n 33293: a1 = u32 [sp + 0x350]\n 33297: a3 = u64 [sp + 0x160]\n 33301: u64 [sp + 0x278] = a3\n 33305: a3 = u64 [sp + 0x188]\n 33309: u64 [sp + 0x270] = a3\n 33313: a3 = u64 [sp + 0x190]\n 33317: u64 [sp + 0x268] = a3\n 33321: a3 = u64 [sp + 0x198]\n 33325: u64 [sp + 0x260] = a3\n 33329: u64 [sp + 664] = 0\n 33333: u64 [sp + 0x290] = a1\n 33337: u64 [sp + 0x288] = a0\n 33341: a0 = sp + 0x280\n 33345: a1 = sp + 0x260\n 33349: u64 [sp + 0x280] = a2\n 33353: ra = 436, jump @1059\n      : @489 [@dyn 218] (gas: 3)\n 33360: a0 = 0x40\n 33363: a1 = 0x20\n 33366: ra = 438, jump @0\n      : @490 [@dyn 219] (gas: 100)\n 33373: a1 = u8 [a0 + 0x11]\n 33376: a2 = u8 [a0 + 0x10]\n 33379: a3 = u8 [a0 + 0x12]\n 33382: a4 = u8 [a0 + 0x13]\n 33385: a1 = a1 << 0x8\n 33388: a1 = a1 | a2\n 33391: a3 = a3 << 0x10\n 33394: a4 = a4 << 0x18\n 33397: a3 = a3 | a4\n 33400: a1 = a1 | a3\n 33403: a2 = u8 [a0 + 0x15]\n 33406: a3 = u8 [a0 + 0x14]\n 33409: a4 = u8 [a0 + 0x16]\n 33412: a5 = u8 [a0 + 0x17]\n 33415: a2 = a2 << 0x8\n 33418: a2 = a2 | a3\n 33421: a4 = a4 << 0x10\n 33424: a5 = a5 << 0x18\n 33427: a4 = a4 | a5\n 33430: a2 = a2 | a4\n 33433: a2 = a2 << 0x20\n 33436: t0 = a2 | a1\n 33439: a2 = u8 [a0 + 0x1]\n 33442: a3 = u8 [a0]\n 33444: a4 = u8 [a0 + 0x2]\n 33447: a5 = u8 [a0 + 0x3]\n 33450: a2 = a2 << 0x8\n 33453: a2 = a2 | a3\n 33456: a4 = a4 << 0x10\n 33459: a5 = a5 << 0x18\n 33462: a4 = a4 | a5\n 33465: a2 = a2 | a4\n 33468: a3 = u8 [a0 + 0x5]\n 33471: a4 = u8 [a0 + 0x4]\n 33474: a5 = u8 [a0 + 0x6]\n 33477: s1 = u8 [a0 + 0x7]\n 33480: a3 = a3 << 0x8\n 33483: a3 = a3 | a4\n 33486: a5 = a5 << 0x10\n 33489: s1 = s1 << 0x18\n 33492: a5 = a5 | s1\n 33495: a3 = a3 | a5\n 33498: a3 = a3 << 0x20\n 33501: a2 = a2 | a3\n 33504: a3 = u8 [a0 + 0x19]\n 33507: a4 = u8 [a0 + 0x18]\n 33510: a5 = u8 [a0 + 0x1a]\n 33513: s1 = u8 [a0 + 0x1b]\n 33516: a3 = a3 << 0x8\n 33519: a3 = a3 | a4\n 33522: a5 = a5 << 0x10\n 33525: s1 = s1 << 0x18\n 33528: a5 = a5 | s1\n 33531: a3 = a3 | a5\n 33534: a4 = u8 [a0 + 0x1d]\n 33537: a5 = u8 [a0 + 0x1c]\n 33540: s1 = u8 [a0 + 0x1e]\n 33543: a1 = u8 [a0 + 0x1f]\n 33546: a4 = a4 << 0x8\n 33549: a4 = a4 | a5\n 33552: s1 = s1 << 0x10\n 33555: a1 = a1 << 0x18\n 33558: a1 = a1 | s1\n 33561: a1 = a1 | a4\n 33564: a1 = a1 << 0x20\n 33567: a3 = a3 | a1\n 33570: a1 = u8 [a0 + 0x9]\n 33573: a4 = u8 [a0 + 0x8]\n 33576: a5 = u8 [a0 + 0xa]\n 33579: s1 = u8 [a0 + 0xb]\n 33582: a1 = a1 << 0x8\n 33585: a1 = a1 | a4\n 33588: a5 = a5 << 0x10\n 33591: s1 = s1 << 0x18\n 33594: a5 = a5 | s1\n 33597: a1 = a1 | a5\n 33600: a4 = u8 [a0 + 0xd]\n 33603: a5 = u8 [a0 + 0xc]\n 33606: s1 = u8 [a0 + 0xe]\n 33609: a0 = u8 [a0 + 0xf]\n 33612: a4 = a4 << 0x8\n 33615: a4 = a4 | a5\n 33618: s1 = s1 << 0x10\n 33621: a0 = a0 << 0x18\n 33624: a0 = a0 | s1\n 33627: a0 = a0 | a4\n 33630: a0 = a0 << 0x20\n 33633: a0 = a0 | a1\n 33636: a0 = reverse a0\n 33638: s1 = reverse a3\n 33640: a1 = reverse a2\n 33642: a2 = reverse t0\n 33644: a1 = a1 | a2\n 33647: a2 = s1 | a0\n 33650: a2 = a2 | a1\n 33653: a2 = a2 >> 0x20\n 33656: a0 = a0 | a1\n 33659: a0 = a0 << 0x20\n 33662: a0 = a0 | a2\n 33665: jump @510 if a0 != 0\n      : @491 (gas: 7)\n 33669: a0 = u64 [sp + 0x120]\n 33673: a0 = a0 >u 0\n 33675: u64 [sp + 0x198] = a0\n 33679: i32 s1 = s1 + 0\n 33681: a1 = 0x20\n 33684: a0 = s1\n 33686: ra = 440, jump @0\n      : @492 [@dyn 220] (gas: 36)\n 33693: u8 [a0 + 30] = 0\n 33696: u8 [a0 + 29] = 0\n 33699: u8 [a0 + 28] = 0\n 33702: u8 [a0 + 27] = 0\n 33705: u8 [a0 + 26] = 0\n 33708: u8 [a0 + 25] = 0\n 33711: u8 [a0 + 24] = 0\n 33714: u8 [a0 + 23] = 0\n 33717: u8 [a0 + 22] = 0\n 33720: u8 [a0 + 21] = 0\n 33723: u8 [a0 + 20] = 0\n 33726: u8 [a0 + 19] = 0\n 33729: u8 [a0 + 18] = 0\n 33732: u8 [a0 + 17] = 0\n 33735: u8 [a0 + 16] = 0\n 33738: u8 [a0 + 15] = 0\n 33741: u8 [a0 + 14] = 0\n 33744: u8 [a0 + 13] = 0\n 33747: u8 [a0 + 12] = 0\n 33750: u8 [a0 + 11] = 0\n 33753: u8 [a0 + 10] = 0\n 33756: u8 [a0 + 9] = 0\n 33759: u8 [a0 + 8] = 0\n 33762: u8 [a0 + 7] = 0\n 33765: u8 [a0 + 6] = 0\n 33768: u8 [a0 + 5] = 0\n 33771: u8 [a0 + 4] = 0\n 33774: u8 [a0 + 3] = 0\n 33777: u8 [a0 + 2] = 0\n 33780: u8 [a0 + 1] = 0\n 33783: u8 [a0 + 0] = 0\n 33785: a1 = u64 [sp + 0x198]\n 33789: u8 [a0 + 0x1f] = a1\n 33792: a1 = 0x20\n 33795: a0 = s1\n 33797: ra = 442, jump @0\n      : @493 [@dyn 221] (gas: 35)\n 33804: a1 = u64 [0x20000]\n 33809: a2 = u64 [0x20008]\n 33814: a3 = u64 [0x20010]\n 33819: a4 = u64 [0x20018]\n 33824: u64 [sp + 0x358] = a1\n 33828: u64 [sp + 0x350] = a2\n 33832: u64 [sp + 0x348] = a3\n 33836: u64 [sp + 0x340] = a4\n 33840: a1 = u64 [sp + 0x168]\n 33844: u64 [sp + 0x378] = a1\n 33848: a1 = u64 [sp + 0x170]\n 33852: u64 [sp + 0x370] = a1\n 33856: a1 = u64 [sp + 0x178]\n 33860: u64 [sp + 0x368] = a1\n 33864: a1 = u64 [sp + 0x180]\n 33868: u64 [sp + 0x360] = a1\n 33872: a1 = u64 [sp + 0x8]\n 33875: u64 [sp + 0x398] = a1\n 33879: a1 = u64 [sp + 0x10]\n 33882: u64 [sp + 0x390] = a1\n 33886: a1 = u64 [sp + 0x18]\n 33889: u64 [sp + 0x388] = a1\n 33893: a1 = u64 [sp + 0x20]\n 33896: u64 [sp + 0x380] = a1\n 33900: i32 a2 = a0 + 0\n 33902: i32 a0 = sp + 0x340\n 33906: a1 = 0x3\n 33909: a3 = 0x20\n 33912: ecalli 5 // 'deposit_event'\n 33914: sp = s0 + 0xfffffffffffffc40\n 33918: ra = u64 [sp + 0x3b8]\n 33922: s0 = u64 [sp + 0x3b0]\n 33926: s1 = u64 [sp + 0x3a8]\n 33930: sp = sp + 0x3c0\n 33934: ret\n      : @494 (gas: 3)\n 33936: a0 = 0x40\n 33939: a1 = 0x20\n 33942: ra = 444, jump @0\n      : @495 [@dyn 222] (gas: 103)\n 33949: a1 = u8 [a0 + 0x11]\n 33952: a2 = u8 [a0 + 0x10]\n 33955: a3 = u8 [a0 + 0x12]\n 33958: a4 = u8 [a0 + 0x13]\n 33961: a1 = a1 << 0x8\n 33964: a1 = a1 | a2\n 33967: a3 = a3 << 0x10\n 33970: a4 = a4 << 0x18\n 33973: a3 = a3 | a4\n 33976: a1 = a1 | a3\n 33979: a2 = u8 [a0 + 0x15]\n 33982: a3 = u8 [a0 + 0x14]\n 33985: a4 = u8 [a0 + 0x16]\n 33988: a5 = u8 [a0 + 0x17]\n 33991: a2 = a2 << 0x8\n 33994: a2 = a2 | a3\n 33997: a4 = a4 << 0x10\n 34000: a5 = a5 << 0x18\n 34003: a4 = a4 | a5\n 34006: a2 = a2 | a4\n 34009: a2 = a2 << 0x20\n 34012: t0 = a2 | a1\n 34015: a2 = u8 [a0 + 0x1]\n 34018: a3 = u8 [a0]\n 34020: a4 = u8 [a0 + 0x2]\n 34023: a5 = u8 [a0 + 0x3]\n 34026: a2 = a2 << 0x8\n 34029: a2 = a2 | a3\n 34032: a4 = a4 << 0x10\n 34035: a5 = a5 << 0x18\n 34038: a4 = a4 | a5\n 34041: a2 = a2 | a4\n 34044: a3 = u8 [a0 + 0x5]\n 34047: a4 = u8 [a0 + 0x4]\n 34050: a5 = u8 [a0 + 0x6]\n 34053: s1 = u8 [a0 + 0x7]\n 34056: a3 = a3 << 0x8\n 34059: a3 = a3 | a4\n 34062: a5 = a5 << 0x10\n 34065: s1 = s1 << 0x18\n 34068: a5 = a5 | s1\n 34071: a3 = a3 | a5\n 34074: a3 = a3 << 0x20\n 34077: a2 = a2 | a3\n 34080: a3 = u8 [a0 + 0x19]\n 34083: a4 = u8 [a0 + 0x18]\n 34086: a5 = u8 [a0 + 0x1a]\n 34089: s1 = u8 [a0 + 0x1b]\n 34092: a3 = a3 << 0x8\n 34095: a3 = a3 | a4\n 34098: a5 = a5 << 0x10\n 34101: s1 = s1 << 0x18\n 34104: a5 = a5 | s1\n 34107: a3 = a3 | a5\n 34110: a4 = u8 [a0 + 0x1d]\n 34113: a5 = u8 [a0 + 0x1c]\n 34116: s1 = u8 [a0 + 0x1e]\n 34119: a1 = u8 [a0 + 0x1f]\n 34122: a4 = a4 << 0x8\n 34125: a4 = a4 | a5\n 34128: s1 = s1 << 0x10\n 34131: a1 = a1 << 0x18\n 34134: a1 = a1 | s1\n 34137: a1 = a1 | a4\n 34140: a1 = a1 << 0x20\n 34143: a3 = a3 | a1\n 34146: a1 = u8 [a0 + 0x9]\n 34149: a4 = u8 [a0 + 0x8]\n 34152: a5 = u8 [a0 + 0xa]\n 34155: s1 = u8 [a0 + 0xb]\n 34158: a1 = a1 << 0x8\n 34161: a1 = a1 | a4\n 34164: a5 = a5 << 0x10\n 34167: s1 = s1 << 0x18\n 34170: a5 = a5 | s1\n 34173: a1 = a1 | a5\n 34176: a4 = u8 [a0 + 0xd]\n 34179: a5 = u8 [a0 + 0xc]\n 34182: s1 = u8 [a0 + 0xe]\n 34185: a0 = u8 [a0 + 0xf]\n 34188: a4 = a4 << 0x8\n 34191: a4 = a4 | a5\n 34194: s1 = s1 << 0x10\n 34197: a0 = a0 << 0x18\n 34200: a0 = a0 | s1\n 34203: a0 = a0 | a4\n 34206: a0 = a0 << 0x20\n 34209: a0 = a0 | a1\n 34212: s1 = reverse a0\n 34214: a1 = reverse a3\n 34216: a2 = reverse a2\n 34218: a0 = reverse t0\n 34220: u64 [sp + 0x198] = a0\n 34224: u64 [sp + 0x190] = a2\n 34228: a0 = a0 | a2\n 34231: a2 = a1\n 34233: a1 = a1 | s1\n 34236: a1 = a1 | a0\n 34239: a1 = a1 >> 0x20\n 34242: a0 = a0 | s1\n 34245: a0 = a0 << 0x20\n 34248: a0 = a0 | a1\n 34251: jump @510 if a0 != 0\n      : @496 (gas: 5)\n 34255: u64 [sp + 0x188] = a2\n 34259: i32 a0 = a2 + 0\n 34261: a1 = 0x20\n 34264: u64 [sp + 0x180] = a0\n 34268: ra = 446, jump @0\n      : @497 [@dyn 223] (gas: 50)\n 34275: u8 [a0 + 31] = 0\n 34278: u8 [a0 + 30] = 0\n 34281: u8 [a0 + 29] = 0\n 34284: u8 [a0 + 28] = 0\n 34287: u8 [a0 + 27] = 0\n 34290: u8 [a0 + 26] = 0\n 34293: u8 [a0 + 25] = 0\n 34296: u8 [a0 + 24] = 0\n 34299: u8 [a0 + 23] = 0\n 34302: u8 [a0 + 22] = 0\n 34305: u8 [a0 + 21] = 0\n 34308: u8 [a0 + 20] = 0\n 34311: u8 [a0 + 19] = 0\n 34314: u8 [a0 + 18] = 0\n 34317: u8 [a0 + 17] = 0\n 34320: u8 [a0 + 16] = 0\n 34323: u8 [a0 + 15] = 0\n 34326: u8 [a0 + 14] = 0\n 34329: u8 [a0 + 13] = 0\n 34332: u8 [a0 + 12] = 0\n 34335: u8 [a0 + 11] = 0\n 34338: u8 [a0 + 10] = 0\n 34341: u8 [a0 + 9] = 0\n 34344: u8 [a0 + 8] = 0\n 34347: u8 [a0 + 7] = 0\n 34350: u8 [a0 + 6] = 0\n 34353: u8 [a0 + 5] = 0\n 34356: u8 [a0 + 4] = 0\n 34359: u8 [a0 + 3] = 0xa0\n 34364: u8 [a0 + 2] = 0x79\n 34368: u8 [a0 + 1] = 0xc3\n 34373: u8 [a0 + 0] = 0x8\n 34376: a1 = u64 [sp + 0x188]\n 34380: a0 = a1 + 0x4\n 34383: a1 = a0 <u a1\n 34386: a3 = u64 [sp + 0x198]\n 34390: a2 = a3 + a1\n 34393: a3 = a2 <u a3\n 34396: a3 = a1 if a1 == 0\n 34399: a3 = a3 + s1\n 34402: a1 = a3 <u s1\n 34405: a4 = u64 [sp + 0x190]\n 34409: a4 = a4 + a1\n 34412: u64 [sp + 0x1a8] = a2\n 34416: u64 [sp + 0x1a0] = a0\n 34420: u64 [sp + 0x1b0] = a3\n 34424: a0 = sp + 0x1c0\n 34428: a1 = sp + 0x1a0\n 34432: u64 [sp + 0x1b8] = a4\n 34436: ra = 448, jump @448\n      : @498 [@dyn 224] (gas: 5)\n 34442: a0 = u64 [sp + 0x1c8]\n 34446: t0 = u64 [sp + 0x1d8]\n 34450: t1 = u64 [sp + 0x1c0]\n 34454: a3 = u64 [sp + 0x1d0]\n 34458: jump @509\n      : @499 (gas: 3)\n 34461: a0 = 0x40\n 34464: a1 = 0x20\n 34467: ra = 450, jump @0\n      : @500 [@dyn 225] (gas: 103)\n 34474: a1 = u8 [a0 + 0x11]\n 34477: a2 = u8 [a0 + 0x10]\n 34480: a3 = u8 [a0 + 0x12]\n 34483: a4 = u8 [a0 + 0x13]\n 34486: a1 = a1 << 0x8\n 34489: a1 = a1 | a2\n 34492: a3 = a3 << 0x10\n 34495: a4 = a4 << 0x18\n 34498: a3 = a3 | a4\n 34501: a1 = a1 | a3\n 34504: a2 = u8 [a0 + 0x15]\n 34507: a3 = u8 [a0 + 0x14]\n 34510: a4 = u8 [a0 + 0x16]\n 34513: a5 = u8 [a0 + 0x17]\n 34516: a2 = a2 << 0x8\n 34519: a2 = a2 | a3\n 34522: a4 = a4 << 0x10\n 34525: a5 = a5 << 0x18\n 34528: a4 = a4 | a5\n 34531: a2 = a2 | a4\n 34534: a2 = a2 << 0x20\n 34537: t0 = a2 | a1\n 34540: a2 = u8 [a0 + 0x1]\n 34543: a3 = u8 [a0]\n 34545: a4 = u8 [a0 + 0x2]\n 34548: a5 = u8 [a0 + 0x3]\n 34551: a2 = a2 << 0x8\n 34554: a2 = a2 | a3\n 34557: a4 = a4 << 0x10\n 34560: a5 = a5 << 0x18\n 34563: a4 = a4 | a5\n 34566: a2 = a2 | a4\n 34569: a3 = u8 [a0 + 0x5]\n 34572: a4 = u8 [a0 + 0x4]\n 34575: a5 = u8 [a0 + 0x6]\n 34578: s1 = u8 [a0 + 0x7]\n 34581: a3 = a3 << 0x8\n 34584: a3 = a3 | a4\n 34587: a5 = a5 << 0x10\n 34590: s1 = s1 << 0x18\n 34593: a5 = a5 | s1\n 34596: a3 = a3 | a5\n 34599: a3 = a3 << 0x20\n 34602: a2 = a2 | a3\n 34605: a3 = u8 [a0 + 0x19]\n 34608: a4 = u8 [a0 + 0x18]\n 34611: a5 = u8 [a0 + 0x1a]\n 34614: s1 = u8 [a0 + 0x1b]\n 34617: a3 = a3 << 0x8\n 34620: a3 = a3 | a4\n 34623: a5 = a5 << 0x10\n 34626: s1 = s1 << 0x18\n 34629: a5 = a5 | s1\n 34632: a3 = a3 | a5\n 34635: a4 = u8 [a0 + 0x1d]\n 34638: a5 = u8 [a0 + 0x1c]\n 34641: s1 = u8 [a0 + 0x1e]\n 34644: a1 = u8 [a0 + 0x1f]\n 34647: a4 = a4 << 0x8\n 34650: a4 = a4 | a5\n 34653: s1 = s1 << 0x10\n 34656: a1 = a1 << 0x18\n 34659: a1 = a1 | s1\n 34662: a1 = a1 | a4\n 34665: a1 = a1 << 0x20\n 34668: a3 = a3 | a1\n 34671: a1 = u8 [a0 + 0x9]\n 34674: a4 = u8 [a0 + 0x8]\n 34677: a5 = u8 [a0 + 0xa]\n 34680: s1 = u8 [a0 + 0xb]\n 34683: a1 = a1 << 0x8\n 34686: a1 = a1 | a4\n 34689: a5 = a5 << 0x10\n 34692: s1 = s1 << 0x18\n 34695: a5 = a5 | s1\n 34698: a1 = a1 | a5\n 34701: a4 = u8 [a0 + 0xd]\n 34704: a5 = u8 [a0 + 0xc]\n 34707: s1 = u8 [a0 + 0xe]\n 34710: a0 = u8 [a0 + 0xf]\n 34713: a4 = a4 << 0x8\n 34716: a4 = a4 | a5\n 34719: s1 = s1 << 0x10\n 34722: a0 = a0 << 0x18\n 34725: a0 = a0 | s1\n 34728: a0 = a0 | a4\n 34731: a0 = a0 << 0x20\n 34734: a0 = a0 | a1\n 34737: s1 = reverse a0\n 34739: a1 = reverse a3\n 34741: a2 = reverse a2\n 34743: a0 = reverse t0\n 34745: u64 [sp + 0x198] = a0\n 34749: u64 [sp + 0x190] = a2\n 34753: a0 = a0 | a2\n 34756: a2 = a1\n 34758: a1 = a1 | s1\n 34761: a1 = a1 | a0\n 34764: a1 = a1 >> 0x20\n 34767: a0 = a0 | s1\n 34770: a0 = a0 << 0x20\n 34773: a0 = a0 | a1\n 34776: jump @510 if a0 != 0\n      : @501 (gas: 5)\n 34780: u64 [sp + 0x188] = a2\n 34784: i32 a0 = a2 + 0\n 34786: a1 = 0x20\n 34789: u64 [sp + 0x180] = a0\n 34793: ra = 452, jump @0\n      : @502 [@dyn 226] (gas: 50)\n 34800: u8 [a0 + 31] = 0\n 34803: u8 [a0 + 30] = 0\n 34806: u8 [a0 + 29] = 0\n 34809: u8 [a0 + 28] = 0\n 34812: u8 [a0 + 27] = 0\n 34815: u8 [a0 + 26] = 0\n 34818: u8 [a0 + 25] = 0\n 34821: u8 [a0 + 24] = 0\n 34824: u8 [a0 + 23] = 0\n 34827: u8 [a0 + 22] = 0\n 34830: u8 [a0 + 21] = 0\n 34833: u8 [a0 + 20] = 0\n 34836: u8 [a0 + 19] = 0\n 34839: u8 [a0 + 18] = 0\n 34842: u8 [a0 + 17] = 0\n 34845: u8 [a0 + 16] = 0\n 34848: u8 [a0 + 15] = 0\n 34851: u8 [a0 + 14] = 0\n 34854: u8 [a0 + 13] = 0\n 34857: u8 [a0 + 12] = 0\n 34860: u8 [a0 + 11] = 0\n 34863: u8 [a0 + 10] = 0\n 34866: u8 [a0 + 9] = 0\n 34869: u8 [a0 + 8] = 0\n 34872: u8 [a0 + 7] = 0\n 34875: u8 [a0 + 6] = 0\n 34878: u8 [a0 + 5] = 0\n 34881: u8 [a0 + 4] = 0\n 34884: u8 [a0 + 3] = 0xa0\n 34889: u8 [a0 + 2] = 0x79\n 34893: u8 [a0 + 1] = 0xc3\n 34898: u8 [a0 + 0] = 0x8\n 34901: a1 = u64 [sp + 0x188]\n 34905: a0 = a1 + 0x4\n 34908: a1 = a0 <u a1\n 34911: a3 = u64 [sp + 0x198]\n 34915: a2 = a3 + a1\n 34918: a3 = a2 <u a3\n 34921: a3 = a1 if a1 == 0\n 34924: a3 = a3 + s1\n 34927: a1 = a3 <u s1\n 34930: a4 = u64 [sp + 0x190]\n 34934: a4 = a4 + a1\n 34937: u64 [sp + 0x2a8] = a2\n 34941: u64 [sp + 0x2a0] = a0\n 34945: u64 [sp + 0x2b0] = a3\n 34949: a0 = sp + 0x2c0\n 34953: a1 = sp + 0x2a0\n 34957: u64 [sp + 0x2b8] = a4\n 34961: ra = 454, jump @440\n      : @503 [@dyn 227] (gas: 5)\n 34967: a0 = u64 [sp + 0x2c8]\n 34971: t0 = u64 [sp + 0x2d8]\n 34975: t1 = u64 [sp + 0x2c0]\n 34979: a3 = u64 [sp + 0x2d0]\n 34983: jump @509\n      : @504 (gas: 3)\n 34986: a0 = 0x40\n 34989: a1 = 0x20\n 34992: ra = 456, jump @0\n      : @505 [@dyn 228] (gas: 103)\n 34999: a1 = u8 [a0 + 0x11]\n 35002: a2 = u8 [a0 + 0x10]\n 35005: a3 = u8 [a0 + 0x12]\n 35008: a4 = u8 [a0 + 0x13]\n 35011: a1 = a1 << 0x8\n 35014: a1 = a1 | a2\n 35017: a3 = a3 << 0x10\n 35020: a4 = a4 << 0x18\n 35023: a3 = a3 | a4\n 35026: a1 = a1 | a3\n 35029: a2 = u8 [a0 + 0x15]\n 35032: a3 = u8 [a0 + 0x14]\n 35035: a4 = u8 [a0 + 0x16]\n 35038: a5 = u8 [a0 + 0x17]\n 35041: a2 = a2 << 0x8\n 35044: a2 = a2 | a3\n 35047: a4 = a4 << 0x10\n 35050: a5 = a5 << 0x18\n 35053: a4 = a4 | a5\n 35056: a2 = a2 | a4\n 35059: a2 = a2 << 0x20\n 35062: t0 = a2 | a1\n 35065: a2 = u8 [a0 + 0x1]\n 35068: a3 = u8 [a0]\n 35070: a4 = u8 [a0 + 0x2]\n 35073: a5 = u8 [a0 + 0x3]\n 35076: a2 = a2 << 0x8\n 35079: a2 = a2 | a3\n 35082: a4 = a4 << 0x10\n 35085: a5 = a5 << 0x18\n 35088: a4 = a4 | a5\n 35091: a2 = a2 | a4\n 35094: a3 = u8 [a0 + 0x5]\n 35097: a4 = u8 [a0 + 0x4]\n 35100: a5 = u8 [a0 + 0x6]\n 35103: s1 = u8 [a0 + 0x7]\n 35106: a3 = a3 << 0x8\n 35109: a3 = a3 | a4\n 35112: a5 = a5 << 0x10\n 35115: s1 = s1 << 0x18\n 35118: a5 = a5 | s1\n 35121: a3 = a3 | a5\n 35124: a3 = a3 << 0x20\n 35127: a2 = a2 | a3\n 35130: a3 = u8 [a0 + 0x19]\n 35133: a4 = u8 [a0 + 0x18]\n 35136: a5 = u8 [a0 + 0x1a]\n 35139: s1 = u8 [a0 + 0x1b]\n 35142: a3 = a3 << 0x8\n 35145: a3 = a3 | a4\n 35148: a5 = a5 << 0x10\n 35151: s1 = s1 << 0x18\n 35154: a5 = a5 | s1\n 35157: a3 = a3 | a5\n 35160: a4 = u8 [a0 + 0x1d]\n 35163: a5 = u8 [a0 + 0x1c]\n 35166: s1 = u8 [a0 + 0x1e]\n 35169: a1 = u8 [a0 + 0x1f]\n 35172: a4 = a4 << 0x8\n 35175: a4 = a4 | a5\n 35178: s1 = s1 << 0x10\n 35181: a1 = a1 << 0x18\n 35184: a1 = a1 | s1\n 35187: a1 = a1 | a4\n 35190: a1 = a1 << 0x20\n 35193: a3 = a3 | a1\n 35196: a1 = u8 [a0 + 0x9]\n 35199: a4 = u8 [a0 + 0x8]\n 35202: a5 = u8 [a0 + 0xa]\n 35205: s1 = u8 [a0 + 0xb]\n 35208: a1 = a1 << 0x8\n 35211: a1 = a1 | a4\n 35214: a5 = a5 << 0x10\n 35217: s1 = s1 << 0x18\n 35220: a5 = a5 | s1\n 35223: a1 = a1 | a5\n 35226: a4 = u8 [a0 + 0xd]\n 35229: a5 = u8 [a0 + 0xc]\n 35232: s1 = u8 [a0 + 0xe]\n 35235: a0 = u8 [a0 + 0xf]\n 35238: a4 = a4 << 0x8\n 35241: a4 = a4 | a5\n 35244: s1 = s1 << 0x10\n 35247: a0 = a0 << 0x18\n 35250: a0 = a0 | s1\n 35253: a0 = a0 | a4\n 35256: a0 = a0 << 0x20\n 35259: a0 = a0 | a1\n 35262: s1 = reverse a0\n 35264: a1 = reverse a3\n 35266: a2 = reverse a2\n 35268: a0 = reverse t0\n 35270: u64 [sp + 0x198] = a0\n 35274: u64 [sp + 0x190] = a2\n 35278: a0 = a0 | a2\n 35281: a2 = a1\n 35283: a1 = a1 | s1\n 35286: a1 = a1 | a0\n 35289: a1 = a1 >> 0x20\n 35292: a0 = a0 | s1\n 35295: a0 = a0 << 0x20\n 35298: a0 = a0 | a1\n 35301: jump @510 if a0 != 0\n      : @506 (gas: 5)\n 35305: u64 [sp + 0x188] = a2\n 35309: i32 a0 = a2 + 0\n 35311: a1 = 0x20\n 35314: u64 [sp + 0x180] = a0\n 35318: ra = 458, jump @0\n      : @507 [@dyn 229] (gas: 50)\n 35325: u8 [a0 + 31] = 0\n 35328: u8 [a0 + 30] = 0\n 35331: u8 [a0 + 29] = 0\n 35334: u8 [a0 + 28] = 0\n 35337: u8 [a0 + 27] = 0\n 35340: u8 [a0 + 26] = 0\n 35343: u8 [a0 + 25] = 0\n 35346: u8 [a0 + 24] = 0\n 35349: u8 [a0 + 23] = 0\n 35352: u8 [a0 + 22] = 0\n 35355: u8 [a0 + 21] = 0\n 35358: u8 [a0 + 20] = 0\n 35361: u8 [a0 + 19] = 0\n 35364: u8 [a0 + 18] = 0\n 35367: u8 [a0 + 17] = 0\n 35370: u8 [a0 + 16] = 0\n 35373: u8 [a0 + 15] = 0\n 35376: u8 [a0 + 14] = 0\n 35379: u8 [a0 + 13] = 0\n 35382: u8 [a0 + 12] = 0\n 35385: u8 [a0 + 11] = 0\n 35388: u8 [a0 + 10] = 0\n 35391: u8 [a0 + 9] = 0\n 35394: u8 [a0 + 8] = 0\n 35397: u8 [a0 + 7] = 0\n 35400: u8 [a0 + 6] = 0\n 35403: u8 [a0 + 5] = 0\n 35406: u8 [a0 + 4] = 0\n 35409: u8 [a0 + 3] = 0xa0\n 35414: u8 [a0 + 2] = 0x79\n 35418: u8 [a0 + 1] = 0xc3\n 35423: u8 [a0 + 0] = 0x8\n 35426: a1 = u64 [sp + 0x188]\n 35430: a0 = a1 + 0x4\n 35433: a1 = a0 <u a1\n 35436: a3 = u64 [sp + 0x198]\n 35440: a2 = a3 + a1\n 35443: a3 = a2 <u a3\n 35446: a3 = a1 if a1 == 0\n 35449: a3 = a3 + s1\n 35452: a1 = a3 <u s1\n 35455: a4 = u64 [sp + 0x190]\n 35459: a4 = a4 + a1\n 35462: u64 [sp + 0x1e8] = a2\n 35466: u64 [sp + 0x1e0] = a0\n 35470: u64 [sp + 0x1f0] = a3\n 35474: a0 = sp + 0x200\n 35478: a1 = sp + 0x1e0\n 35482: u64 [sp + 0x1f8] = a4\n 35486: ra = 460, jump @456\n      : @508 [@dyn 230] (gas: 5)\n 35492: a0 = u64 [sp + 0x208]\n 35496: t0 = u64 [sp + 0x218]\n 35500: t1 = u64 [sp + 0x200]\n 35504: a3 = u64 [sp + 0x210]\n 35508: fallthrough\n      : @509 (gas: 26)\n 35509: a1 = u64 [sp + 0x198]\n 35513: a4 = a0 ^ a1\n 35516: a5 = a0 <u a1\n 35519: t2 = a1\n 35521: a2 = u64 [sp + 0x188]\n 35525: a1 = t1 <u a2\n 35528: a5 = a1 if a4 == 0\n 35531: a4 = a3 - s1\n 35534: a3 = a3 <u s1\n 35537: s1 = u64 [sp + 0x190]\n 35541: s1 = t0 - s1\n 35544: s1 = s1 - a3\n 35547: a3 = a4 <u a5\n 35550: s1 = s1 - a3\n 35553: a4 = a4 - a5\n 35556: a0 = a0 - t2\n 35559: a1 = a0 - a1\n 35562: a0 = t1 - a2\n 35565: a1 = a1 | s1\n 35568: a2 = a0 | a4\n 35571: a2 = a2 | a1\n 35574: a1 = a1 | a4\n 35577: a2 = a2 >> 0x20\n 35580: a1 = a1 << 0x20\n 35583: a1 = a1 | a2\n 35586: jump @515 if a1 == 0\n      : @510 (gas: 1)\n 35589: trap\n      : @511 (gas: 8)\n 35590: u64 [sp + 592] = 0\n 35594: u64 [sp + 584] = 0\n 35598: u64 [sp + 576] = 0\n 35602: a0 = 0x4e487b7100000000\n 35612: a1 = sp + 0x240\n 35616: u64 [sp + 0x258] = a0\n 35620: a0 = 0\n 35622: ra = 462, jump @23\n      : @512 [@dyn 231] (gas: 7)\n 35629: u64 [sp + 568] = 0\n 35633: u64 [sp + 560] = 0\n 35637: u64 [sp + 544] = 0x11\n 35642: a0 = 0x4\n 35645: a1 = sp + 0x220\n 35649: u64 [sp + 552] = 0\n 35653: ra = 464, jump @23\n      : @513 [@dyn 232] (gas: 3)\n 35660: a1 = 0x24\n 35663: a0 = 0\n 35665: ra = 466, jump @0\n      : @514 [@dyn 233] (gas: 5)\n 35672: i32 a1 = a0 + 0\n 35674: a0 = 0x1\n 35677: a2 = 0x24\n 35680: ecalli 12 // 'seal_return'\n 35682: fallthrough\n      : @515 (gas: 4)\n 35683: i32 s1 = a0 + 0\n 35685: a0 = u64 [sp + 0x180]\n 35689: a1 = s1\n 35691: ra = 468, jump @0\n      : @516 [@dyn 234] (gas: 6)\n 35698: i32 a1 = a0 + 0\n 35700: a0 = 0x1\n 35703: a2 = s1\n 35705: ra = 0x1d6\n 35709: ecalli 12 // 'seal_return'\n 35711: fallthrough\n      : @517 [@dyn 235] (gas: 36)\n 35712: sp = sp + 0xffffffffffffff70\n 35716: u64 [sp + 0x88] = ra\n 35720: u64 [sp + 0x80] = s0\n 35724: u64 [sp + 0x78] = s1\n 35727: s0 = sp + 0x90\n 35731: sp = sp & 0xfffffffffffffff0\n 35734: a3 = u64 [a0]\n 35736: u64 [sp + 0x8] = a3\n 35739: t1 = u64 [a0 + 0x8]\n 35742: t2 = u64 [a0 + 0x10]\n 35745: ra = u64 [a0 + 0x18]\n 35748: t0 = u64 [a1]\n 35750: a4 = u64 [a1 + 0x8]\n 35753: a5 = u64 [a1 + 0x10]\n 35756: a3 = u64 [a1 + 0x18]\n 35759: s1 = u64 [a2]\n 35761: a1 = u64 [a2 + 0x8]\n 35764: a0 = u64 [a2 + 0x10]\n 35767: a2 = u64 [a2 + 0x18]\n 35770: u64 [sp + 0x28] = a2\n 35773: u64 [sp + 0x20] = a0\n 35776: u64 [sp + 0x18] = a1\n 35779: u64 [sp + 0x10] = s1\n 35782: u64 [sp + 0x48] = a3\n 35785: u64 [sp + 0x40] = a5\n 35788: u64 [sp + 0x38] = a4\n 35791: u64 [sp + 0x30] = t0\n 35794: u64 [sp + 0x68] = ra\n 35797: u64 [sp + 0x60] = t2\n 35800: u64 [sp + 0x58] = t1\n 35803: a0 = sp + 0x50\n 35806: a1 = sp + 0x30\n 35809: a2 = sp + 0x10\n 35812: a3 = u64 [sp + 0x8]\n 35815: u64 [sp + 0x50] = a3\n 35818: ra = 472, jump @424\n      : @518 [@dyn 236] (gas: 6)\n 35824: sp = s0 + 0xffffffffffffff70\n 35828: ra = u64 [sp + 0x88]\n 35832: s0 = u64 [sp + 0x80]\n 35836: s1 = u64 [sp + 0x78]\n 35839: sp = sp + 0x90\n 35843: ret\n      : @519 (gas: 47)\n 35845: sp = sp + 0xfffffffffffffe80\n 35849: u64 [sp + 0x178] = ra\n 35853: u64 [sp + 0x170] = s0\n 35857: u64 [sp + 0x168] = s1\n 35861: s0 = sp + 0x180\n 35865: sp = sp & 0xffffffffffffffe0\n 35868: a3 = u64 [a2 + 0x18]\n 35871: u64 [sp] = a3\n 35873: a3 = u64 [a2 + 0x10]\n 35876: u64 [sp + 0x8] = a3\n 35879: a3 = u64 [a2 + 0x8]\n 35882: u64 [sp + 0x10] = a3\n 35885: a2 = u64 [a2]\n 35887: u64 [sp + 0x18] = a2\n 35890: a2 = u64 [a1 + 0x18]\n 35893: u64 [sp + 0x20] = a2\n 35896: a2 = u64 [a1 + 0x10]\n 35899: u64 [sp + 0x28] = a2\n 35902: a2 = u64 [a1 + 0x8]\n 35905: u64 [sp + 0x30] = a2\n 35908: a1 = u64 [a1]\n 35910: u64 [sp + 0x38] = a1\n 35913: a1 = u64 [a0 + 0x18]\n 35916: u64 [sp + 0x40] = a1\n 35919: a1 = u64 [a0 + 0x10]\n 35922: u64 [sp + 0x48] = a1\n 35925: a1 = u64 [a0 + 0x8]\n 35928: u64 [sp + 0x50] = a1\n 35931: a0 = u64 [a0]\n 35933: u64 [sp + 0x58] = a0\n 35936: u64 [sp + 312] = 0\n 35940: u64 [sp + 304] = 0\n 35944: u64 [sp + 296] = 0\n 35948: s1 = 0x4\n 35951: u64 [sp + 0x120] = s1\n 35955: u64 [sp + 344] = 0\n 35959: u64 [sp + 336] = 0\n 35963: u64 [sp + 328] = 0\n 35967: u64 [sp + 320] = 0\n 35971: u32 [sp + 256] = 0x20\n 35976: i32 a1 = sp + 0x120\n 35980: i32 a3 = sp + 0x140\n 35984: i32 a4 = sp + 0x100\n 35988: a2 = 0xffffffffffffffff\n 35991: a0 = 0\n 35993: ecalli 7 // 'get_storage'\n 35995: fallthrough\n      : @520 (gas: 9)\n 35996: a0 = u64 [sp + 0x158]\n 36000: a1 = u64 [sp + 0x148]\n 36004: a2 = u64 [sp + 0x140]\n 36008: a3 = u64 [sp + 0x150]\n 36012: a0 = a0 | a1\n 36015: a1 = a2 ^ 0x1\n 36018: a1 = a1 | a3\n 36021: a0 = a0 | a1\n 36024: jump @523 if a0 != 0\n      : @521 (gas: 90)\n 36028: u64 [sp + 312] = 0\n 36032: u64 [sp + 304] = 0\n 36036: u64 [sp + 296] = 0\n 36040: u64 [sp + 288] = 0x4\n 36045: u64 [sp + 344] = 0\n 36049: u64 [sp + 336] = 0\n 36053: u64 [sp + 328] = 0\n 36057: u64 [sp + 320] = 0\n 36061: u32 [sp + 256] = 0x20\n 36066: i32 a1 = sp + 0x120\n 36070: i32 a3 = sp + 0x140\n 36074: i32 a4 = sp + 0x100\n 36078: a2 = 0xffffffffffffffff\n 36081: a0 = 0\n 36083: ecalli 7 // 'get_storage'\n 36085: u64 [sp + 312] = 0\n 36089: u64 [sp + 304] = 0\n 36093: u64 [sp + 296] = 0\n 36097: u64 [sp + 288] = 0x4\n 36102: u64 [sp + 344] = 0\n 36106: u64 [sp + 336] = 0\n 36110: u64 [sp + 328] = 0\n 36114: u64 [sp + 320] = 0\n 36118: i32 a1 = sp + 0x120\n 36122: i32 a3 = sp + 0x140\n 36126: a2 = 0xffffffffffffffff\n 36129: a4 = 0x20\n 36132: a0 = 0\n 36134: ecalli 14 // 'set_storage'\n 36136: a0 = u64 [sp]\n 36138: u64 [sp + 0x78] = a0\n 36141: a0 = u64 [sp + 0x8]\n 36144: u64 [sp + 0x70] = a0\n 36147: a0 = u64 [sp + 0x10]\n 36150: u64 [sp + 0x68] = a0\n 36153: a0 = u64 [sp + 0x18]\n 36156: u64 [sp + 0x60] = a0\n 36159: a0 = u64 [sp + 0x20]\n 36162: u64 [sp + 0x98] = a0\n 36166: a0 = u64 [sp + 0x28]\n 36169: u64 [sp + 0x90] = a0\n 36173: a0 = u64 [sp + 0x30]\n 36176: u64 [sp + 0x88] = a0\n 36180: a0 = u64 [sp + 0x38]\n 36183: u64 [sp + 0x80] = a0\n 36187: a0 = u64 [sp + 0x40]\n 36190: u64 [sp + 0xb8] = a0\n 36194: a0 = u64 [sp + 0x48]\n 36197: u64 [sp + 0xb0] = a0\n 36201: a0 = u64 [sp + 0x50]\n 36204: u64 [sp + 0xa8] = a0\n 36208: a0 = sp + 0xa0\n 36212: a1 = sp + 0x80\n 36216: a2 = sp + 0x60\n 36219: a3 = u64 [sp + 0x58]\n 36222: u64 [sp + 0xa0] = a3\n 36226: ra = 0x1da\n 36230: sp = sp + 0xfffffffffffffd00\n 36234: u64 [sp + 0x2f8] = ra\n 36238: u64 [sp + 0x2f0] = s0\n 36242: u64 [sp + 744] = 0x4\n 36247: s0 = sp + 0x300\n 36251: sp = sp & 0xffffffffffffffe0\n 36254: a3 = u64 [a2 + 0x18]\n 36257: u64 [sp + 0x10] = a3\n 36260: a3 = u64 [a2 + 0x10]\n 36263: u64 [sp + 0x18] = a3\n 36266: a3 = u64 [a2 + 0x8]\n 36269: u64 [sp + 0x20] = a3\n 36272: a2 = u64 [a2]\n 36274: u64 [sp + 0x28] = a2\n 36277: a2 = u64 [a1 + 0x18]\n 36280: u64 [sp + 0x110] = a2\n 36284: a2 = u64 [a1 + 0x10]\n 36287: u64 [sp + 0x118] = a2\n 36291: a2 = u64 [a1 + 0x8]\n 36294: u64 [sp + 0x120] = a2\n 36298: a1 = u64 [a1]\n 36300: u64 [sp + 0x128] = a1\n 36304: a1 = u64 [a0]\n 36306: u64 [sp + 0x178] = a1\n 36310: a1 = u64 [a0 + 0x8]\n 36313: u64 [sp + 0x170] = a1\n 36317: a1 = u64 [a0 + 0x10]\n 36320: u64 [sp + 0x168] = a1\n 36324: s1 = u64 [a0 + 0x18]\n 36327: a1 = 0x20\n 36330: a0 = 0\n 36332: ra = 0x1f4\n 36336: jump @0\n      : @522 [@dyn 237] (gas: 35)\n 36340: u64 [sp + 312] = 0\n 36344: u64 [sp + 304] = 0\n 36348: u64 [sp + 296] = 0\n 36352: u64 [sp + 0x120] = s1\n 36356: u64 [sp + 344] = 0\n 36360: u64 [sp + 336] = 0\n 36364: u64 [sp + 328] = 0\n 36368: u64 [sp + 320] = 0\n 36372: u32 [sp + 256] = 0x20\n 36377: i32 a1 = sp + 0x120\n 36381: i32 a3 = sp + 0x140\n 36385: i32 a4 = sp + 0x100\n 36389: a2 = 0xffffffffffffffff\n 36392: a0 = 0\n 36394: ecalli 7 // 'get_storage'\n 36396: u64 [sp + 312] = 0\n 36400: u64 [sp + 304] = 0\n 36404: u64 [sp + 296] = 0\n 36408: u64 [sp + 0x120] = s1\n 36412: u64 [sp + 344] = 0\n 36416: u64 [sp + 336] = 0\n 36420: u64 [sp + 328] = 0\n 36424: u64 [sp + 320] = 0x1\n 36429: i32 a1 = sp + 0x120\n 36433: i32 a3 = sp + 0x140\n 36437: a2 = 0xffffffffffffffff\n 36440: a4 = 0x20\n 36443: a0 = 0\n 36445: ecalli 14 // 'set_storage'\n 36447: sp = s0 + 0xfffffffffffffe80\n 36451: ra = u64 [sp + 0x178]\n 36455: s0 = u64 [sp + 0x170]\n 36459: s1 = u64 [sp + 0x168]\n 36463: sp = sp + 0x180\n 36467: ret\n      : @523 (gas: 3)\n 36469: a0 = 0x40\n 36472: a1 = 0x20\n 36475: ra = 476, jump @0\n      : @524 [@dyn 238] (gas: 103)\n 36482: a1 = u8 [a0 + 0x11]\n 36485: a2 = u8 [a0 + 0x10]\n 36488: a3 = u8 [a0 + 0x12]\n 36491: a4 = u8 [a0 + 0x13]\n 36494: a1 = a1 << 0x8\n 36497: a1 = a1 | a2\n 36500: a3 = a3 << 0x10\n 36503: a4 = a4 << 0x18\n 36506: a3 = a3 | a4\n 36509: a1 = a1 | a3\n 36512: a2 = u8 [a0 + 0x15]\n 36515: a3 = u8 [a0 + 0x14]\n 36518: a4 = u8 [a0 + 0x16]\n 36521: a5 = u8 [a0 + 0x17]\n 36524: a2 = a2 << 0x8\n 36527: a2 = a2 | a3\n 36530: a4 = a4 << 0x10\n 36533: a5 = a5 << 0x18\n 36536: a4 = a4 | a5\n 36539: a2 = a2 | a4\n 36542: a2 = a2 << 0x20\n 36545: t0 = a2 | a1\n 36548: a2 = u8 [a0 + 0x1]\n 36551: a3 = u8 [a0]\n 36553: a4 = u8 [a0 + 0x2]\n 36556: a5 = u8 [a0 + 0x3]\n 36559: a2 = a2 << 0x8\n 36562: a2 = a2 | a3\n 36565: a4 = a4 << 0x10\n 36568: a5 = a5 << 0x18\n 36571: a4 = a4 | a5\n 36574: a2 = a2 | a4\n 36577: a3 = u8 [a0 + 0x5]\n 36580: a4 = u8 [a0 + 0x4]\n 36583: a5 = u8 [a0 + 0x6]\n 36586: s1 = u8 [a0 + 0x7]\n 36589: a3 = a3 << 0x8\n 36592: a3 = a3 | a4\n 36595: a5 = a5 << 0x10\n 36598: s1 = s1 << 0x18\n 36601: a5 = a5 | s1\n 36604: a3 = a3 | a5\n 36607: a3 = a3 << 0x20\n 36610: a2 = a2 | a3\n 36613: a3 = u8 [a0 + 0x19]\n 36616: a4 = u8 [a0 + 0x18]\n 36619: a5 = u8 [a0 + 0x1a]\n 36622: s1 = u8 [a0 + 0x1b]\n 36625: a3 = a3 << 0x8\n 36628: a3 = a3 | a4\n 36631: a5 = a5 << 0x10\n 36634: s1 = s1 << 0x18\n 36637: a5 = a5 | s1\n 36640: a3 = a3 | a5\n 36643: a4 = u8 [a0 + 0x1d]\n 36646: a5 = u8 [a0 + 0x1c]\n 36649: s1 = u8 [a0 + 0x1e]\n 36652: a1 = u8 [a0 + 0x1f]\n 36655: a4 = a4 << 0x8\n 36658: a4 = a4 | a5\n 36661: s1 = s1 << 0x10\n 36664: a1 = a1 << 0x18\n 36667: a1 = a1 | s1\n 36670: a1 = a1 | a4\n 36673: a1 = a1 << 0x20\n 36676: a3 = a3 | a1\n 36679: a1 = u8 [a0 + 0x9]\n 36682: a4 = u8 [a0 + 0x8]\n 36685: a5 = u8 [a0 + 0xa]\n 36688: s1 = u8 [a0 + 0xb]\n 36691: a1 = a1 << 0x8\n 36694: a1 = a1 | a4\n 36697: a5 = a5 << 0x10\n 36700: s1 = s1 << 0x18\n 36703: a5 = a5 | s1\n 36706: a1 = a1 | a5\n 36709: a4 = u8 [a0 + 0xd]\n 36712: a5 = u8 [a0 + 0xc]\n 36715: s1 = u8 [a0 + 0xe]\n 36718: a0 = u8 [a0 + 0xf]\n 36721: a4 = a4 << 0x8\n 36724: a4 = a4 | a5\n 36727: s1 = s1 << 0x10\n 36730: a0 = a0 << 0x18\n 36733: a0 = a0 | s1\n 36736: a0 = a0 | a4\n 36739: a0 = a0 << 0x20\n 36742: a0 = a0 | a1\n 36745: s1 = reverse a0\n 36747: a1 = reverse a3\n 36749: a2 = reverse a2\n 36751: a0 = reverse t0\n 36753: u64 [sp + 0x58] = a0\n 36756: u64 [sp + 0x50] = a2\n 36759: a0 = a0 | a2\n 36762: a2 = a1\n 36764: a1 = a1 | s1\n 36767: a1 = a1 | a0\n 36770: a1 = a1 >> 0x20\n 36773: a0 = a0 | s1\n 36776: a0 = a0 << 0x20\n 36779: a0 = a0 | a1\n 36782: jump @528 if a0 != 0\n      : @525 (gas: 5)\n 36786: u64 [sp + 0x48] = a2\n 36789: i32 a0 = a2 + 0\n 36791: a1 = 0x20\n 36794: u64 [sp + 0x40] = a0\n 36797: ra = 478, jump @0\n      : @526 [@dyn 239] (gas: 50)\n 36804: u8 [a0 + 31] = 0\n 36807: u8 [a0 + 30] = 0\n 36810: u8 [a0 + 29] = 0\n 36813: u8 [a0 + 28] = 0\n 36816: u8 [a0 + 27] = 0\n 36819: u8 [a0 + 26] = 0\n 36822: u8 [a0 + 25] = 0\n 36825: u8 [a0 + 24] = 0\n 36828: u8 [a0 + 23] = 0\n 36831: u8 [a0 + 22] = 0\n 36834: u8 [a0 + 21] = 0\n 36837: u8 [a0 + 20] = 0\n 36840: u8 [a0 + 19] = 0\n 36843: u8 [a0 + 18] = 0\n 36846: u8 [a0 + 17] = 0\n 36849: u8 [a0 + 16] = 0\n 36852: u8 [a0 + 15] = 0\n 36855: u8 [a0 + 14] = 0\n 36858: u8 [a0 + 13] = 0\n 36861: u8 [a0 + 12] = 0\n 36864: u8 [a0 + 11] = 0\n 36867: u8 [a0 + 10] = 0\n 36870: u8 [a0 + 9] = 0\n 36873: u8 [a0 + 8] = 0\n 36876: u8 [a0 + 7] = 0\n 36879: u8 [a0 + 6] = 0\n 36882: u8 [a0 + 5] = 0\n 36885: u8 [a0 + 4] = 0\n 36888: u8 [a0 + 3] = 0xa0\n 36893: u8 [a0 + 2] = 0x79\n 36897: u8 [a0 + 1] = 0xc3\n 36902: u8 [a0 + 0] = 0x8\n 36905: a1 = u64 [sp + 0x48]\n 36908: a0 = a1 + 0x4\n 36911: a1 = a0 <u a1\n 36914: a3 = u64 [sp + 0x58]\n 36917: a2 = a3 + a1\n 36920: a3 = a2 <u a3\n 36923: a3 = a1 if a1 == 0\n 36926: a3 = a3 + s1\n 36929: a1 = a3 <u s1\n 36932: a4 = u64 [sp + 0x50]\n 36935: a4 = a4 + a1\n 36938: u64 [sp + 0xc8] = a2\n 36942: u64 [sp + 0xc0] = a0\n 36946: u64 [sp + 0xd0] = a3\n 36950: a0 = sp + 0xe0\n 36954: a1 = sp + 0xc0\n 36958: u64 [sp + 0xd8] = a4\n 36962: ra = 480, jump @416\n      : @527 [@dyn 240] (gas: 30)\n 36968: a0 = u64 [sp + 0xe8]\n 36972: t0 = u64 [sp + 0xf8]\n 36976: t1 = u64 [sp + 0xe0]\n 36980: a3 = u64 [sp + 0xf0]\n 36984: a1 = u64 [sp + 0x58]\n 36987: a4 = a0 ^ a1\n 36990: a5 = a0 <u a1\n 36993: t2 = a1\n 36995: a2 = u64 [sp + 0x48]\n 36998: a1 = t1 <u a2\n 37001: a5 = a1 if a4 == 0\n 37004: a4 = a3 - s1\n 37007: a3 = a3 <u s1\n 37010: s1 = u64 [sp + 0x50]\n 37013: s1 = t0 - s1\n 37016: s1 = s1 - a3\n 37019: a3 = a4 <u a5\n 37022: s1 = s1 - a3\n 37025: a4 = a4 - a5\n 37028: a0 = a0 - t2\n 37031: a1 = a0 - a1\n 37034: a0 = t1 - a2\n 37037: a1 = a1 | s1\n 37040: a2 = a0 | a4\n 37043: a2 = a2 | a1\n 37046: a1 = a1 | a4\n 37049: a2 = a2 >> 0x20\n 37052: a1 = a1 << 0x20\n 37055: a1 = a1 | a2\n 37058: jump @529 if a1 == 0\n      : @528 (gas: 1)\n 37061: trap\n      : @529 (gas: 4)\n 37062: i32 s1 = a0 + 0\n 37064: a0 = u64 [sp + 0x40]\n 37067: a1 = s1\n 37069: ra = 482, jump @0\n      : @530 [@dyn 241] (gas: 6)\n 37076: i32 a1 = a0 + 0\n 37078: a0 = 0x1\n 37081: a2 = s1\n 37083: ra = 0x1e4\n 37087: ecalli 12 // 'seal_return'\n 37089: fallthrough\n      : @531 [@dyn 242] (gas: 12)\n 37090: a1 = u64 [a0 + 0x10]\n 37093: a2 = u64 [a0 + 0x18]\n 37096: a3 = u64 [a0 + 0x8]\n 37099: a0 = u64 [a0]\n 37101: a2 = a2 | a3\n 37104: a3 = a0 | a1\n 37107: a3 = a3 | a2\n 37110: a3 = a3 >> 0x20\n 37113: a1 = a1 | a2\n 37116: a1 = a1 << 0x20\n 37119: a1 = a1 | a3\n 37122: jump @534 if a1 != 0\n      : @532 (gas: 7)\n 37126: sp = sp + 0xfffffffffffffff0\n 37129: u64 [sp + 0x8] = ra\n 37132: u64 [sp] = s0\n 37134: i32 a0 = a0 + 0\n 37136: a1 = 0x20\n 37139: s0 = 0x20\n 37142: ra = 486, jump @0\n      : @533 [@dyn 243] (gas: 39)\n 37149: u8 [a0 + 31] = 0\n 37152: u8 [a0 + 30] = 0\n 37155: u8 [a0 + 29] = 0\n 37158: u8 [a0 + 28] = 0\n 37161: u8 [a0 + 27] = 0\n 37164: u8 [a0 + 26] = 0\n 37167: u8 [a0 + 25] = 0\n 37170: u8 [a0 + 24] = 0\n 37173: u8 [a0 + 23] = 0\n 37176: u8 [a0 + 22] = 0\n 37179: u8 [a0 + 21] = 0\n 37182: u8 [a0 + 20] = 0\n 37185: u8 [a0 + 19] = 0\n 37188: u8 [a0 + 18] = 0\n 37191: u8 [a0 + 17] = 0\n 37194: u8 [a0 + 16] = 0\n 37197: u8 [a0 + 15] = 0\n 37200: u8 [a0 + 14] = 0\n 37203: u8 [a0 + 13] = 0\n 37206: u8 [a0 + 12] = 0\n 37209: u8 [a0 + 11] = 0\n 37212: u8 [a0 + 10] = 0\n 37215: u8 [a0 + 9] = 0\n 37218: u8 [a0 + 8] = 0x72\n 37222: u8 [a0 + 7] = 0x65\n 37226: a1 = 0x6e\n 37229: u8 [a0 + 0x6] = a1\n 37232: u8 [a0 + 5] = 0x77\n 37236: a2 = 0x6f\n 37239: u8 [a0 + 0x4] = a2\n 37242: u8 [a0 + 0x3] = s0\n 37245: a3 = 0x74\n 37248: u8 [a0 + 0x2] = a3\n 37251: u8 [a0 + 0x1] = a2\n 37254: u8 [a0] = a1\n 37256: ra = u64 [sp + 0x8]\n 37259: s0 = u64 [sp]\n 37261: sp = sp + 0x10\n 37264: ret\n      : @534 (gas: 1)\n 37266: trap\n      : @535 (gas: 17)\n 37267: sp = sp + 0xffffffffffffffa0\n 37270: u64 [sp + 0x58] = ra\n 37273: u64 [sp + 0x50] = s0\n 37276: u64 [sp + 0x48] = s1\n 37279: a3 = u64 [a1 + 0x18]\n 37282: a4 = u64 [a1 + 0x10]\n 37285: a5 = u64 [a1 + 0x8]\n 37288: s1 = u64 [a1]\n 37290: a1 = a5 | a3\n 37293: a2 = s1 | a4\n 37296: a2 = a2 | a1\n 37299: a2 = a2 >> 0x20\n 37302: a1 = a1 | a4\n 37305: a1 = a1 << 0x20\n 37308: a1 = a1 | a2\n 37311: u64 [sp + 0x28] = a0\n 37314: jump @542 if a1 != 0\n      : @536 (gas: 19)\n 37318: a0 = s1 + 0x20\n 37321: u64 [sp + 0x30] = a0\n 37324: a0 = a0 <u s1\n 37327: a1 = a5 + a0\n 37330: u64 [sp + 0x40] = a1\n 37333: u64 [sp + 0x8] = a5\n 37336: s0 = a1 <u a5\n 37339: s0 = a0 if a0 == 0\n 37342: s0 = s0 + a4\n 37345: u64 [sp + 0x10] = a4\n 37348: a0 = s0 <u a4\n 37351: u64 [sp + 0x18] = a3\n 37354: a0 = a0 + a3\n 37357: u64 [sp + 0x38] = a0\n 37360: u64 [sp] = s1\n 37362: i32 a0 = s1 + 0\n 37364: a1 = 0x20\n 37367: s1 = 0x20\n 37370: ra = 488, jump @0\n      : @537 [@dyn 244] (gas: 45)\n 37377: u8 [a0 + 0x1f] = s1\n 37380: a1 = u64 [sp + 0x30]\n 37383: s1 = a1\n 37385: a1 = a1 | s0\n 37388: a2 = u64 [sp + 0x40]\n 37391: a4 = u64 [sp + 0x38]\n 37394: a2 = a2 | a4\n 37397: a1 = a1 | a2\n 37400: a1 = a1 >> 0x20\n 37403: u64 [sp + 0x20] = s0\n 37406: a2 = a2 | s0\n 37409: a2 = a2 << 0x20\n 37412: a1 = a1 | a2\n 37415: u8 [a0 + 30] = 0\n 37418: u8 [a0 + 29] = 0\n 37421: u8 [a0 + 28] = 0\n 37424: u8 [a0 + 27] = 0\n 37427: u8 [a0 + 26] = 0\n 37430: u8 [a0 + 25] = 0\n 37433: u8 [a0 + 24] = 0\n 37436: u8 [a0 + 23] = 0\n 37439: u8 [a0 + 22] = 0\n 37442: u8 [a0 + 21] = 0\n 37445: u8 [a0 + 20] = 0\n 37448: u8 [a0 + 19] = 0\n 37451: u8 [a0 + 18] = 0\n 37454: u8 [a0 + 17] = 0\n 37457: u8 [a0 + 16] = 0\n 37460: u8 [a0 + 15] = 0\n 37463: u8 [a0 + 14] = 0\n 37466: u8 [a0 + 13] = 0\n 37469: u8 [a0 + 12] = 0\n 37472: u8 [a0 + 11] = 0\n 37475: u8 [a0 + 10] = 0\n 37478: u8 [a0 + 9] = 0\n 37481: u8 [a0 + 8] = 0\n 37484: u8 [a0 + 7] = 0\n 37487: u8 [a0 + 6] = 0\n 37490: u8 [a0 + 5] = 0\n 37493: u8 [a0 + 4] = 0\n 37496: u8 [a0 + 3] = 0\n 37499: u8 [a0 + 2] = 0\n 37502: u8 [a0 + 1] = 0\n 37505: u8 [a0 + 0] = 0\n 37507: jump @542 if a1 != 0\n      : @538 (gas: 4)\n 37511: i32 s0 = s1 + 0\n 37513: a1 = 0x20\n 37516: a0 = s0\n 37518: ra = 490, jump @0\n      : @539 [@dyn 245] (gas: 41)\n 37525: u8 [a0 + 31] = 0x9\n 37529: u8 [a0 + 30] = 0\n 37532: u8 [a0 + 29] = 0\n 37535: u8 [a0 + 28] = 0\n 37538: u8 [a0 + 27] = 0\n 37541: u8 [a0 + 26] = 0\n 37544: u8 [a0 + 25] = 0\n 37547: u8 [a0 + 24] = 0\n 37550: u8 [a0 + 23] = 0\n 37553: u8 [a0 + 22] = 0\n 37556: u8 [a0 + 21] = 0\n 37559: u8 [a0 + 20] = 0\n 37562: u8 [a0 + 19] = 0\n 37565: u8 [a0 + 18] = 0\n 37568: u8 [a0 + 17] = 0\n 37571: u8 [a0 + 16] = 0\n 37574: u8 [a0 + 15] = 0\n 37577: u8 [a0 + 14] = 0\n 37580: u8 [a0 + 13] = 0\n 37583: u8 [a0 + 12] = 0\n 37586: u8 [a0 + 11] = 0\n 37589: u8 [a0 + 10] = 0\n 37592: u8 [a0 + 9] = 0\n 37595: u8 [a0 + 8] = 0\n 37598: u8 [a0 + 7] = 0\n 37601: u8 [a0 + 6] = 0\n 37604: u8 [a0 + 5] = 0\n 37607: u8 [a0 + 4] = 0\n 37610: u8 [a0 + 3] = 0\n 37613: u8 [a0 + 2] = 0\n 37616: u8 [a0 + 1] = 0\n 37619: a1 = u64 [sp + 0x20]\n 37622: a2 = u64 [sp + 0x38]\n 37625: a1 = a1 | a2\n 37628: a2 = 0xffffffe0\n 37638: a2 = s1 <u a2\n 37641: a3 = u64 [sp + 0x40]\n 37644: a2 = 0 if a3 != 0\n 37646: a2 = 0 if a1 != 0\n 37648: u8 [a0 + 0] = 0\n 37650: jump @542 if a2 == 0\n      : @540 (gas: 3)\n 37654: i32 a0 = s0 + 0x20\n 37657: a1 = 0x20\n 37660: ra = 492, jump @0\n      : @541 [@dyn 246] (gas: 54)\n 37667: u8 [a0 + 31] = 0\n 37670: u8 [a0 + 30] = 0\n 37673: u8 [a0 + 29] = 0\n 37676: u8 [a0 + 28] = 0\n 37679: u8 [a0 + 27] = 0\n 37682: u8 [a0 + 26] = 0\n 37685: u8 [a0 + 25] = 0\n 37688: u8 [a0 + 24] = 0\n 37691: u8 [a0 + 23] = 0\n 37694: u8 [a0 + 22] = 0\n 37697: u8 [a0 + 21] = 0\n 37700: u8 [a0 + 20] = 0\n 37703: u8 [a0 + 19] = 0\n 37706: u8 [a0 + 18] = 0\n 37709: u8 [a0 + 17] = 0\n 37712: u8 [a0 + 16] = 0\n 37715: u8 [a0 + 15] = 0\n 37718: u8 [a0 + 14] = 0\n 37721: u8 [a0 + 13] = 0\n 37724: u8 [a0 + 12] = 0\n 37727: u8 [a0 + 11] = 0\n 37730: u8 [a0 + 10] = 0\n 37733: u8 [a0 + 9] = 0\n 37736: u8 [a0 + 8] = 0x72\n 37740: u8 [a0 + 7] = 0x65\n 37744: u8 [a0 + 6] = 0x6e\n 37748: u8 [a0 + 5] = 0x77\n 37752: u8 [a0 + 4] = 0x6f\n 37756: u8 [a0 + 3] = 0x20\n 37760: u8 [a0 + 2] = 0x74\n 37764: u8 [a0 + 1] = 0x6f\n 37768: u8 [a0 + 0] = 0x6e\n 37771: a1 = u64 [sp]\n 37773: a0 = a1 + 0x60\n 37776: a1 = a0 <u a1\n 37779: a3 = u64 [sp + 0x8]\n 37782: a2 = a3 + a1\n 37785: a3 = a2 <u a3\n 37788: a3 = a1 if a1 == 0\n 37791: a1 = u64 [sp + 0x10]\n 37794: a3 = a3 + a1\n 37797: a1 = a3 <u a1\n 37800: a4 = u64 [sp + 0x18]\n 37803: a1 = a1 + a4\n 37806: a4 = u64 [sp + 0x28]\n 37809: u64 [a4] = a0\n 37811: u64 [a4 + 0x8] = a2\n 37814: u64 [a4 + 0x10] = a3\n 37817: u64 [a4 + 0x18] = a1\n 37820: ra = u64 [sp + 0x58]\n 37823: s0 = u64 [sp + 0x50]\n 37826: s1 = u64 [sp + 0x48]\n 37829: sp = sp + 0x60\n 37832: ret\n      : @542 (gas: 1)\n 37834: trap\n      : @543 (gas: 17)\n 37835: sp = sp + 0xffffffffffffffa0\n 37838: u64 [sp + 0x58] = ra\n 37841: u64 [sp + 0x50] = s0\n 37844: u64 [sp + 0x48] = s1\n 37847: a3 = u64 [a1 + 0x18]\n 37850: a4 = u64 [a1 + 0x10]\n 37853: a5 = u64 [a1 + 0x8]\n 37856: s1 = u64 [a1]\n 37858: a1 = a5 | a3\n 37861: a2 = s1 | a4\n 37864: a2 = a2 | a1\n 37867: a2 = a2 >> 0x20\n 37870: a1 = a1 | a4\n 37873: a1 = a1 << 0x20\n 37876: a1 = a1 | a2\n 37879: u64 [sp + 0x28] = a0\n 37882: jump @550 if a1 != 0\n      : @544 (gas: 19)\n 37886: a0 = s1 + 0x20\n 37889: u64 [sp + 0x30] = a0\n 37892: a0 = a0 <u s1\n 37895: a1 = a5 + a0\n 37898: u64 [sp + 0x40] = a1\n 37901: u64 [sp + 0x8] = a5\n 37904: s0 = a1 <u a5\n 37907: s0 = a0 if a0 == 0\n 37910: s0 = s0 + a4\n 37913: u64 [sp + 0x10] = a4\n 37916: a0 = s0 <u a4\n 37919: u64 [sp + 0x18] = a3\n 37922: a0 = a0 + a3\n 37925: u64 [sp + 0x38] = a0\n 37928: u64 [sp] = s1\n 37930: i32 a0 = s1 + 0\n 37932: a1 = 0x20\n 37935: s1 = 0x20\n 37938: ra = 494, jump @0\n      : @545 [@dyn 247] (gas: 45)\n 37945: u8 [a0 + 0x1f] = s1\n 37948: a1 = u64 [sp + 0x30]\n 37951: s1 = a1\n 37953: a1 = a1 | s0\n 37956: a2 = u64 [sp + 0x40]\n 37959: a4 = u64 [sp + 0x38]\n 37962: a2 = a2 | a4\n 37965: a1 = a1 | a2\n 37968: a1 = a1 >> 0x20\n 37971: u64 [sp + 0x20] = s0\n 37974: a2 = a2 | s0\n 37977: a2 = a2 << 0x20\n 37980: a1 = a1 | a2\n 37983: u8 [a0 + 30] = 0\n 37986: u8 [a0 + 29] = 0\n 37989: u8 [a0 + 28] = 0\n 37992: u8 [a0 + 27] = 0\n 37995: u8 [a0 + 26] = 0\n 37998: u8 [a0 + 25] = 0\n 38001: u8 [a0 + 24] = 0\n 38004: u8 [a0 + 23] = 0\n 38007: u8 [a0 + 22] = 0\n 38010: u8 [a0 + 21] = 0\n 38013: u8 [a0 + 20] = 0\n 38016: u8 [a0 + 19] = 0\n 38019: u8 [a0 + 18] = 0\n 38022: u8 [a0 + 17] = 0\n 38025: u8 [a0 + 16] = 0\n 38028: u8 [a0 + 15] = 0\n 38031: u8 [a0 + 14] = 0\n 38034: u8 [a0 + 13] = 0\n 38037: u8 [a0 + 12] = 0\n 38040: u8 [a0 + 11] = 0\n 38043: u8 [a0 + 10] = 0\n 38046: u8 [a0 + 9] = 0\n 38049: u8 [a0 + 8] = 0\n 38052: u8 [a0 + 7] = 0\n 38055: u8 [a0 + 6] = 0\n 38058: u8 [a0 + 5] = 0\n 38061: u8 [a0 + 4] = 0\n 38064: u8 [a0 + 3] = 0\n 38067: u8 [a0 + 2] = 0\n 38070: u8 [a0 + 1] = 0\n 38073: u8 [a0 + 0] = 0\n 38075: jump @550 if a1 != 0\n      : @546 (gas: 4)\n 38079: i32 s0 = s1 + 0\n 38081: a1 = 0x20\n 38084: a0 = s0\n 38086: ra = 496, jump @0\n      : @547 [@dyn 248] (gas: 41)\n 38093: u8 [a0 + 31] = 0x10\n 38097: u8 [a0 + 30] = 0\n 38100: u8 [a0 + 29] = 0\n 38103: u8 [a0 + 28] = 0\n 38106: u8 [a0 + 27] = 0\n 38109: u8 [a0 + 26] = 0\n 38112: u8 [a0 + 25] = 0\n 38115: u8 [a0 + 24] = 0\n 38118: u8 [a0 + 23] = 0\n 38121: u8 [a0 + 22] = 0\n 38124: u8 [a0 + 21] = 0\n 38127: u8 [a0 + 20] = 0\n 38130: u8 [a0 + 19] = 0\n 38133: u8 [a0 + 18] = 0\n 38136: u8 [a0 + 17] = 0\n 38139: u8 [a0 + 16] = 0\n 38142: u8 [a0 + 15] = 0\n 38145: u8 [a0 + 14] = 0\n 38148: u8 [a0 + 13] = 0\n 38151: u8 [a0 + 12] = 0\n 38154: u8 [a0 + 11] = 0\n 38157: u8 [a0 + 10] = 0\n 38160: u8 [a0 + 9] = 0\n 38163: u8 [a0 + 8] = 0\n 38166: u8 [a0 + 7] = 0\n 38169: u8 [a0 + 6] = 0\n 38172: u8 [a0 + 5] = 0\n 38175: u8 [a0 + 4] = 0\n 38178: u8 [a0 + 3] = 0\n 38181: u8 [a0 + 2] = 0\n 38184: u8 [a0 + 1] = 0\n 38187: a1 = u64 [sp + 0x20]\n 38190: a2 = u64 [sp + 0x38]\n 38193: a1 = a1 | a2\n 38196: a2 = 0xffffffe0\n 38206: a2 = s1 <u a2\n 38209: a3 = u64 [sp + 0x40]\n 38212: a2 = 0 if a3 != 0\n 38214: a2 = 0 if a1 != 0\n 38216: u8 [a0 + 0] = 0\n 38218: jump @550 if a2 == 0\n      : @548 (gas: 3)\n 38222: i32 a0 = s0 + 0x20\n 38225: a1 = 0x20\n 38228: ra = 498, jump @0\n      : @549 [@dyn 249] (gas: 54)\n 38235: u8 [a0 + 31] = 0\n 38238: u8 [a0 + 30] = 0\n 38241: u8 [a0 + 29] = 0\n 38244: u8 [a0 + 28] = 0\n 38247: u8 [a0 + 27] = 0\n 38250: u8 [a0 + 26] = 0\n 38253: u8 [a0 + 25] = 0\n 38256: u8 [a0 + 24] = 0\n 38259: u8 [a0 + 23] = 0\n 38262: u8 [a0 + 22] = 0\n 38265: u8 [a0 + 21] = 0\n 38268: u8 [a0 + 20] = 0\n 38271: u8 [a0 + 19] = 0\n 38274: u8 [a0 + 18] = 0\n 38277: u8 [a0 + 17] = 0\n 38280: u8 [a0 + 16] = 0\n 38283: u8 [a0 + 15] = 0x65\n 38287: u8 [a0 + 14] = 0x73\n 38291: u8 [a0 + 13] = 0x61\n 38295: u8 [a0 + 12] = 0x68\n 38299: u8 [a0 + 11] = 0x63\n 38303: u8 [a0 + 10] = 0x72\n 38307: u8 [a0 + 9] = 0x75\n 38311: u8 [a0 + 8] = 0x70\n 38315: u8 [a0 + 7] = 0x20\n 38319: u8 [a0 + 6] = 0x64\n 38323: u8 [a0 + 5] = 0x69\n 38327: u8 [a0 + 4] = 0x6c\n 38331: u8 [a0 + 3] = 0x61\n 38335: u8 [a0 + 2] = 0x76\n 38339: u8 [a0 + 1] = 0x6e\n 38343: u8 [a0 + 0] = 0x69\n 38346: a1 = u64 [sp]\n 38348: a0 = a1 + 0x60\n 38351: a1 = a0 <u a1\n 38354: a3 = u64 [sp + 0x8]\n 38357: a2 = a3 + a1\n 38360: a3 = a2 <u a3\n 38363: a3 = a1 if a1 == 0\n 38366: a1 = u64 [sp + 0x10]\n 38369: a3 = a3 + a1\n 38372: a1 = a3 <u a1\n 38375: a4 = u64 [sp + 0x18]\n 38378: a1 = a1 + a4\n 38381: a4 = u64 [sp + 0x28]\n 38384: u64 [a4] = a0\n 38386: u64 [a4 + 0x8] = a2\n 38389: u64 [a4 + 0x10] = a3\n 38392: u64 [a4 + 0x18] = a1\n 38395: ra = u64 [sp + 0x58]\n 38398: s0 = u64 [sp + 0x50]\n 38401: s1 = u64 [sp + 0x48]\n 38404: sp = sp + 0x60\n 38407: ret\n      : @550 (gas: 1)\n 38409: trap\n      : @551 [@dyn 250] (gas: 102)\n 38410: a1 = reverse s1\n 38412: a2 = u64 [sp + 0x168]\n 38416: a2 = reverse a2\n 38418: a3 = u64 [sp + 0x170]\n 38422: a4 = reverse a3\n 38424: a3 = u64 [sp + 0x178]\n 38428: a3 = reverse a3\n 38430: u8 [a0 + 0x18] = a3\n 38433: u8 [a0 + 0x10] = a4\n 38436: u8 [a0 + 0x8] = a2\n 38439: u8 [a0] = a1\n 38441: a5 = a3 >> 0x38\n 38444: u64 [sp + 0x108] = a5\n 38448: u8 [a0 + 0x1f] = a5\n 38451: a5 = a3 >> 0x30\n 38454: u64 [sp + 0x100] = a5\n 38458: u8 [a0 + 0x1e] = a5\n 38461: a5 = a3 >> 0x28\n 38464: u64 [sp + 0xf8] = a5\n 38468: u8 [a0 + 0x1d] = a5\n 38471: a5 = a3 >> 0x20\n 38474: u64 [sp + 0xf0] = a5\n 38478: u8 [a0 + 0x1c] = a5\n 38481: a5 = a3 >> 0x18\n 38484: u64 [sp + 0xe8] = a5\n 38488: u8 [a0 + 0x1b] = a5\n 38491: a5 = a3 >> 0x10\n 38494: u64 [sp + 0xe0] = a5\n 38498: u8 [a0 + 0x1a] = a5\n 38501: u64 [sp + 0x140] = a3\n 38505: a3 = a3 >> 0x8\n 38508: u64 [sp + 0xd8] = a3\n 38512: u8 [a0 + 0x19] = a3\n 38515: a3 = a4 >> 0x38\n 38518: u64 [sp + 0xd0] = a3\n 38522: u8 [a0 + 0x17] = a3\n 38525: a3 = a4 >> 0x30\n 38528: u64 [sp + 0xc8] = a3\n 38532: u8 [a0 + 0x16] = a3\n 38535: a3 = a4 >> 0x28\n 38538: u64 [sp + 0xc0] = a3\n 38542: u8 [a0 + 0x15] = a3\n 38545: a3 = a4 >> 0x20\n 38548: u64 [sp + 0xb8] = a3\n 38552: u8 [a0 + 0x14] = a3\n 38555: a3 = a4 >> 0x18\n 38558: u64 [sp + 0xb0] = a3\n 38562: u8 [a0 + 0x13] = a3\n 38565: a3 = a4 >> 0x10\n 38568: u64 [sp + 0xa8] = a3\n 38572: u8 [a0 + 0x12] = a3\n 38575: u64 [sp + 0x148] = a4\n 38579: a4 = a4 >> 0x8\n 38582: u64 [sp + 0xa0] = a4\n 38586: u8 [a0 + 0x11] = a4\n 38589: a3 = a2 >> 0x38\n 38592: u64 [sp + 0x98] = a3\n 38596: u8 [a0 + 0xf] = a3\n 38599: a3 = a2 >> 0x30\n 38602: u64 [sp + 0x90] = a3\n 38606: u8 [a0 + 0xe] = a3\n 38609: a3 = a2 >> 0x28\n 38612: u64 [sp + 0x88] = a3\n 38616: u8 [a0 + 0xd] = a3\n 38619: a3 = a2 >> 0x20\n 38622: u64 [sp + 0x80] = a3\n 38626: u8 [a0 + 0xc] = a3\n 38629: a3 = a2 >> 0x18\n 38632: u64 [sp + 0x78] = a3\n 38635: u8 [a0 + 0xb] = a3\n 38638: a3 = a2 >> 0x10\n 38641: u64 [sp + 0x70] = a3\n 38644: u8 [a0 + 0xa] = a3\n 38647: u64 [sp + 0x150] = a2\n 38651: a2 = a2 >> 0x8\n 38654: u64 [sp + 0x68] = a2\n 38657: u8 [a0 + 0x9] = a2\n 38660: a2 = a1 >> 0x38\n 38663: u64 [sp + 0x60] = a2\n 38666: u8 [a0 + 0x7] = a2\n 38669: a2 = a1 >> 0x30\n 38672: u64 [sp + 0x58] = a2\n 38675: u8 [a0 + 0x6] = a2\n 38678: a2 = a1 >> 0x28\n 38681: u64 [sp + 0x50] = a2\n 38684: u8 [a0 + 0x5] = a2\n 38687: a2 = a1 >> 0x20\n 38690: u64 [sp + 0x48] = a2\n 38693: u8 [a0 + 0x4] = a2\n 38696: a2 = a1 >> 0x18\n 38699: u64 [sp + 0x40] = a2\n 38702: u8 [a0 + 0x3] = a2\n 38705: a2 = a1 >> 0x10\n 38708: u64 [sp + 0x38] = a2\n 38711: u8 [a0 + 0x2] = a2\n 38714: u64 [sp + 0x158] = a1\n 38718: a1 = a1 >> 0x8\n 38721: u64 [sp + 0x30] = a1\n 38724: u8 [a0 + 0x1] = a1\n 38727: a0 = 0x20\n 38730: a1 = 0x20\n 38733: ra = 502, jump @0\n      : @552 [@dyn 251] (gas: 35)\n 38740: u8 [a0 + 31] = 0x2\n 38744: u8 [a0 + 30] = 0\n 38747: u8 [a0 + 29] = 0\n 38750: u8 [a0 + 28] = 0\n 38753: u8 [a0 + 27] = 0\n 38756: u8 [a0 + 26] = 0\n 38759: u8 [a0 + 25] = 0\n 38762: u8 [a0 + 24] = 0\n 38765: u8 [a0 + 23] = 0\n 38768: u8 [a0 + 22] = 0\n 38771: u8 [a0 + 21] = 0\n 38774: u8 [a0 + 20] = 0\n 38777: u8 [a0 + 19] = 0\n 38780: u8 [a0 + 18] = 0\n 38783: u8 [a0 + 17] = 0\n 38786: u8 [a0 + 16] = 0\n 38789: u8 [a0 + 15] = 0\n 38792: u8 [a0 + 14] = 0\n 38795: u8 [a0 + 13] = 0\n 38798: u8 [a0 + 12] = 0\n 38801: u8 [a0 + 11] = 0\n 38804: u8 [a0 + 10] = 0\n 38807: u8 [a0 + 9] = 0\n 38810: u8 [a0 + 8] = 0\n 38813: u8 [a0 + 7] = 0\n 38816: u8 [a0 + 6] = 0\n 38819: u8 [a0 + 5] = 0\n 38822: u8 [a0 + 4] = 0\n 38825: u8 [a0 + 3] = 0\n 38828: u8 [a0 + 2] = 0\n 38831: u8 [a0 + 1] = 0\n 38834: u8 [a0 + 0] = 0\n 38836: a1 = 0x40\n 38839: a0 = 0\n 38841: ra = 504, jump @0\n      : @553 [@dyn 252] (gas: 53)\n 38848: i32 a0 = a0 + 0\n 38850: i32 a2 = sp + 0x260\n 38854: a1 = 0x40\n 38857: ecalli 8 // 'hash_keccak_256'\n 38859: a0 = u64 [sp + 0x278]\n 38863: a1 = u64 [sp + 0x270]\n 38867: a2 = u64 [sp + 0x268]\n 38871: a3 = u64 [sp + 0x260]\n 38875: a0 = reverse a0\n 38877: u64 [sp + 0x178] = a0\n 38881: a0 = reverse a1\n 38883: u64 [sp + 0x170] = a0\n 38887: a0 = reverse a2\n 38889: u64 [sp + 0x168] = a0\n 38893: a0 = reverse a3\n 38895: u64 [sp + 0x160] = a0\n 38899: i32 a0 = sp + 0x240\n 38903: ecalli 4 // 'caller'\n 38905: a0 = u64 [sp + 0x248]\n 38909: a1 = u64 [sp + 0x240]\n 38913: a2 = i32 [sp + 0x250]\n 38917: a0 = reverse a0\n 38919: a3 = a0 >> 0x20\n 38922: s1 = reverse a1\n 38924: a1 = s1 << 0x20\n 38927: a1 = a1 | a3\n 38930: u64 [sp + 0x138] = a1\n 38934: a0 = a0 << 0x20\n 38937: a1 = reverse a2\n 38939: a1 = a1 >> 0x20\n 38942: a0 = a0 | a1\n 38945: u64 [sp + 0x130] = a0\n 38949: s1 = s1 >> 0x20\n 38952: a0 = u64 [sp + 0x160]\n 38956: u64 [sp + 0x2d8] = a0\n 38960: a0 = u64 [sp + 0x168]\n 38964: u64 [sp + 0x2d0] = a0\n 38968: a0 = u64 [sp + 0x170]\n 38972: u64 [sp + 0x2c8] = a0\n 38976: a0 = u64 [sp + 0x178]\n 38980: u64 [sp + 0x2c0] = a0\n 38984: u64 [sp + 632] = 0\n 38988: u64 [sp + 624] = 0\n 38992: u64 [sp + 616] = 0\n 38996: u64 [sp + 608] = 0\n 39000: u32 [sp + 736] = 0x20\n 39005: i32 a1 = sp + 0x2c0\n 39009: i32 a3 = sp + 0x260\n 39013: i32 a4 = sp + 0x2e0\n 39017: a2 = 0xffffffffffffffff\n 39020: a0 = 0\n 39022: ecalli 7 // 'get_storage'\n 39024: fallthrough\n      : @554 (gas: 11)\n 39025: a0 = u32 [sp + 0x270]\n 39029: a1 = u64 [sp + 0x260]\n 39033: a2 = u64 [sp + 0x268]\n 39037: a0 = a0 ^ s1\n 39040: a3 = u64 [sp + 0x130]\n 39044: a1 = a1 ^ a3\n 39047: a0 = a0 | a1\n 39050: a1 = u64 [sp + 0x138]\n 39054: a1 = a1 ^ a2\n 39057: a0 = a0 | a1\n 39060: jump @576 if a0 != 0\n      : @555 (gas: 2)\n 39064: a1 = 0x20\n 39067: ra = 506, jump @0\n      : @556 [@dyn 253] (gas: 67)\n 39074: a1 = u64 [sp + 0x98]\n 39078: u8 [a0 + 0xf] = a1\n 39081: a1 = u64 [sp + 0x90]\n 39085: u8 [a0 + 0xe] = a1\n 39088: a1 = u64 [sp + 0x88]\n 39092: u8 [a0 + 0xd] = a1\n 39095: a1 = u64 [sp + 0x80]\n 39099: u8 [a0 + 0xc] = a1\n 39102: a1 = u64 [sp + 0x78]\n 39105: u8 [a0 + 0xb] = a1\n 39108: a1 = u64 [sp + 0x70]\n 39111: u8 [a0 + 0xa] = a1\n 39114: a1 = u64 [sp + 0x68]\n 39117: u8 [a0 + 0x9] = a1\n 39120: a1 = u64 [sp + 0x60]\n 39123: u8 [a0 + 0x7] = a1\n 39126: a1 = u64 [sp + 0x58]\n 39129: u8 [a0 + 0x6] = a1\n 39132: a1 = u64 [sp + 0x50]\n 39135: u8 [a0 + 0x5] = a1\n 39138: a1 = u64 [sp + 0x48]\n 39141: u8 [a0 + 0x4] = a1\n 39144: a1 = u64 [sp + 0x40]\n 39147: u8 [a0 + 0x3] = a1\n 39150: a1 = u64 [sp + 0x38]\n 39153: u8 [a0 + 0x2] = a1\n 39156: a1 = u64 [sp + 0x30]\n 39159: u8 [a0 + 0x1] = a1\n 39162: a1 = u64 [sp + 0xd0]\n 39166: u8 [a0 + 0x17] = a1\n 39169: a1 = u64 [sp + 0xc8]\n 39173: u8 [a0 + 0x16] = a1\n 39176: a1 = u64 [sp + 0xc0]\n 39180: u8 [a0 + 0x15] = a1\n 39183: a1 = u64 [sp + 0xb8]\n 39187: u8 [a0 + 0x14] = a1\n 39190: a1 = u64 [sp + 0xb0]\n 39194: u8 [a0 + 0x13] = a1\n 39197: a1 = u64 [sp + 0xa8]\n 39201: u8 [a0 + 0x12] = a1\n 39204: a1 = u64 [sp + 0xa0]\n 39208: u8 [a0 + 0x11] = a1\n 39211: a1 = u64 [sp + 0x108]\n 39215: u8 [a0 + 0x1f] = a1\n 39218: a1 = u64 [sp + 0x100]\n 39222: u8 [a0 + 0x1e] = a1\n 39225: a1 = u64 [sp + 0xf8]\n 39229: u8 [a0 + 0x1d] = a1\n 39232: a1 = u64 [sp + 0xf0]\n 39236: u8 [a0 + 0x1c] = a1\n 39239: a1 = u64 [sp + 0xe8]\n 39243: u8 [a0 + 0x1b] = a1\n 39246: a1 = u64 [sp + 0xe0]\n 39250: u8 [a0 + 0x1a] = a1\n 39253: a1 = u64 [sp + 0xd8]\n 39257: u8 [a0 + 0x19] = a1\n 39260: a1 = u64 [sp + 0x148]\n 39264: u8 [a0 + 0x10] = a1\n 39267: a1 = u64 [sp + 0x150]\n 39271: u8 [a0 + 0x8] = a1\n 39274: a1 = u64 [sp + 0x158]\n 39278: u8 [a0] = a1\n 39280: a1 = u64 [sp + 0x140]\n 39284: u8 [a0 + 0x18] = a1\n 39287: a0 = 0x20\n 39290: a1 = 0x20\n 39293: ra = 508, jump @0\n      : @557 [@dyn 254] (gas: 35)\n 39300: u8 [a0 + 31] = 0x3\n 39304: u8 [a0 + 30] = 0\n 39307: u8 [a0 + 29] = 0\n 39310: u8 [a0 + 28] = 0\n 39313: u8 [a0 + 27] = 0\n 39316: u8 [a0 + 26] = 0\n 39319: u8 [a0 + 25] = 0\n 39322: u8 [a0 + 24] = 0\n 39325: u8 [a0 + 23] = 0\n 39328: u8 [a0 + 22] = 0\n 39331: u8 [a0 + 21] = 0\n 39334: u8 [a0 + 20] = 0\n 39337: u8 [a0 + 19] = 0\n 39340: u8 [a0 + 18] = 0\n 39343: u8 [a0 + 17] = 0\n 39346: u8 [a0 + 16] = 0\n 39349: u8 [a0 + 15] = 0\n 39352: u8 [a0 + 14] = 0\n 39355: u8 [a0 + 13] = 0\n 39358: u8 [a0 + 12] = 0\n 39361: u8 [a0 + 11] = 0\n 39364: u8 [a0 + 10] = 0\n 39367: u8 [a0 + 9] = 0\n 39370: u8 [a0 + 8] = 0\n 39373: u8 [a0 + 7] = 0\n 39376: u8 [a0 + 6] = 0\n 39379: u8 [a0 + 5] = 0\n 39382: u8 [a0 + 4] = 0\n 39385: u8 [a0 + 3] = 0\n 39388: u8 [a0 + 2] = 0\n 39391: u8 [a0 + 1] = 0\n 39394: u8 [a0 + 0] = 0\n 39396: a1 = 0x40\n 39399: a0 = 0\n 39401: ra = 510, jump @0\n      : @558 [@dyn 255] (gas: 14)\n 39408: i32 a0 = a0 + 0\n 39410: i32 a2 = sp + 0x260\n 39414: a1 = 0x40\n 39417: ecalli 8 // 'hash_keccak_256'\n 39419: a0 = u64 [sp + 0x260]\n 39423: u64 [sp + 0x138] = a0\n 39427: a0 = u64 [sp + 0x268]\n 39431: u64 [sp + 0x130] = a0\n 39435: a0 = u64 [sp + 0x270]\n 39439: u64 [sp + 0x108] = a0\n 39443: s1 = u64 [sp + 0x278]\n 39447: a1 = 0x20\n 39450: a0 = 0\n 39452: ra = 512, jump @0\n      : @559 [@dyn 256] (gas: 75)\n 39459: a1 = u64 [sp + 0x110]\n 39463: a2 = reverse a1\n 39465: a1 = u64 [sp + 0x118]\n 39469: a3 = reverse a1\n 39471: a1 = u64 [sp + 0x120]\n 39475: a4 = reverse a1\n 39477: a1 = u64 [sp + 0x128]\n 39481: a5 = reverse a1\n 39483: a1 = a5 >> 0x38\n 39486: u8 [a0 + 0x1f] = a1\n 39489: a1 = a5 >> 0x30\n 39492: u8 [a0 + 0x1e] = a1\n 39495: a1 = a5 >> 0x28\n 39498: u8 [a0 + 0x1d] = a1\n 39501: a1 = a5 >> 0x20\n 39504: u8 [a0 + 0x1c] = a1\n 39507: a1 = a5 >> 0x18\n 39510: u8 [a0 + 0x1b] = a1\n 39513: a1 = a5 >> 0x10\n 39516: u8 [a0 + 0x1a] = a1\n 39519: a1 = a5 >> 0x8\n 39522: u8 [a0 + 0x19] = a1\n 39525: u64 [sp + 0x100] = a5\n 39529: u8 [a0 + 0x18] = a5\n 39532: a1 = a4 >> 0x38\n 39535: u8 [a0 + 0x17] = a1\n 39538: a1 = a4 >> 0x30\n 39541: u8 [a0 + 0x16] = a1\n 39544: a1 = a4 >> 0x28\n 39547: u8 [a0 + 0x15] = a1\n 39550: a1 = a4 >> 0x20\n 39553: u8 [a0 + 0x14] = a1\n 39556: a1 = a4 >> 0x18\n 39559: u8 [a0 + 0x13] = a1\n 39562: a1 = a4 >> 0x10\n 39565: u8 [a0 + 0x12] = a1\n 39568: a1 = a4 >> 0x8\n 39571: u8 [a0 + 0x11] = a1\n 39574: u64 [sp + 0x110] = a4\n 39578: u8 [a0 + 0x10] = a4\n 39581: a1 = a3 >> 0x38\n 39584: u8 [a0 + 0xf] = a1\n 39587: a1 = a3 >> 0x30\n 39590: u8 [a0 + 0xe] = a1\n 39593: a1 = a3 >> 0x28\n 39596: u8 [a0 + 0xd] = a1\n 39599: a1 = a3 >> 0x20\n 39602: u8 [a0 + 0xc] = a1\n 39605: a1 = a3 >> 0x18\n 39608: u8 [a0 + 0xb] = a1\n 39611: a1 = a3 >> 0x10\n 39614: u8 [a0 + 0xa] = a1\n 39617: a1 = a3 >> 0x8\n 39620: u8 [a0 + 0x9] = a1\n 39623: u64 [sp + 0x118] = a3\n 39627: u8 [a0 + 0x8] = a3\n 39630: a1 = a2 >> 0x38\n 39633: u8 [a0 + 0x7] = a1\n 39636: a1 = a2 >> 0x30\n 39639: u8 [a0 + 0x6] = a1\n 39642: a1 = a2 >> 0x28\n 39645: u8 [a0 + 0x5] = a1\n 39648: a1 = a2 >> 0x20\n 39651: u8 [a0 + 0x4] = a1\n 39654: a1 = a2 >> 0x18\n 39657: u8 [a0 + 0x3] = a1\n 39660: a1 = a2 >> 0x10\n 39663: u8 [a0 + 0x2] = a1\n 39666: a1 = a2 >> 0x8\n 39669: u8 [a0 + 0x1] = a1\n 39672: u64 [sp + 0x120] = a2\n 39676: u8 [a0] = a2\n 39678: a0 = 0x20\n 39681: a1 = 0x20\n 39684: ra = 514, jump @0\n      : @560 [@dyn 257] (gas: 66)\n 39691: a1 = s1 >> 0x38\n 39694: u8 [a0 + 0x1f] = a1\n 39697: a1 = s1 >> 0x30\n 39700: u8 [a0 + 0x1e] = a1\n 39703: a1 = s1 >> 0x28\n 39706: u8 [a0 + 0x1d] = a1\n 39709: a1 = s1 >> 0x20\n 39712: u8 [a0 + 0x1c] = a1\n 39715: a1 = s1 >> 0x18\n 39718: u8 [a0 + 0x1b] = a1\n 39721: a1 = s1 >> 0x10\n 39724: u8 [a0 + 0x1a] = a1\n 39727: a1 = s1 >> 0x8\n 39730: u8 [a0 + 0x19] = a1\n 39733: u8 [a0 + 0x18] = s1\n 39736: a2 = u64 [sp + 0x108]\n 39740: a1 = a2 >> 0x38\n 39743: u8 [a0 + 0x17] = a1\n 39746: a1 = a2 >> 0x30\n 39749: u8 [a0 + 0x16] = a1\n 39752: a1 = a2 >> 0x28\n 39755: u8 [a0 + 0x15] = a1\n 39758: a1 = a2 >> 0x20\n 39761: u8 [a0 + 0x14] = a1\n 39764: a1 = a2 >> 0x18\n 39767: u8 [a0 + 0x13] = a1\n 39770: a1 = a2 >> 0x10\n 39773: u8 [a0 + 0x12] = a1\n 39776: a1 = a2 >> 0x8\n 39779: u8 [a0 + 0x11] = a1\n 39782: u8 [a0 + 0x10] = a2\n 39785: a2 = u64 [sp + 0x130]\n 39789: a1 = a2 >> 0x38\n 39792: u8 [a0 + 0xf] = a1\n 39795: a1 = a2 >> 0x30\n 39798: u8 [a0 + 0xe] = a1\n 39801: a1 = a2 >> 0x28\n 39804: u8 [a0 + 0xd] = a1\n 39807: a1 = a2 >> 0x20\n 39810: u8 [a0 + 0xc] = a1\n 39813: a1 = a2 >> 0x18\n 39816: u8 [a0 + 0xb] = a1\n 39819: a1 = a2 >> 0x10\n 39822: u8 [a0 + 0xa] = a1\n 39825: a1 = a2 >> 0x8\n 39828: u8 [a0 + 0x9] = a1\n 39831: u8 [a0 + 0x8] = a2\n 39834: a2 = u64 [sp + 0x138]\n 39838: a1 = a2 >> 0x38\n 39841: u8 [a0 + 0x7] = a1\n 39844: a1 = a2 >> 0x30\n 39847: u8 [a0 + 0x6] = a1\n 39850: a1 = a2 >> 0x28\n 39853: u8 [a0 + 0x5] = a1\n 39856: a1 = a2 >> 0x20\n 39859: u8 [a0 + 0x4] = a1\n 39862: a1 = a2 >> 0x18\n 39865: u8 [a0 + 0x3] = a1\n 39868: a1 = a2 >> 0x10\n 39871: u8 [a0 + 0x2] = a1\n 39874: a1 = a2 >> 0x8\n 39877: u8 [a0 + 0x1] = a1\n 39880: u8 [a0] = a2\n 39882: a1 = 0x40\n 39885: a0 = 0\n 39887: ra = 516, jump @0\n      : @561 [@dyn 258] (gas: 43)\n 39894: i32 a0 = a0 + 0\n 39896: i32 a2 = sp + 0x260\n 39900: a1 = 0x40\n 39903: ecalli 8 // 'hash_keccak_256'\n 39905: a0 = u64 [sp + 0x260]\n 39909: a1 = u64 [sp + 0x268]\n 39913: a2 = u64 [sp + 0x270]\n 39917: a3 = u64 [sp + 0x278]\n 39921: a4 = reverse a0\n 39923: s1 = reverse a1\n 39925: a2 = reverse a2\n 39927: a1 = reverse a3\n 39929: u64 [sp + 0x128] = a1\n 39933: a1 = a1 + 0x1\n 39936: a0 = a1 <u 0x1\n 39939: u64 [sp + 0x130] = a2\n 39943: a2 = a2 + a0\n 39946: a0 = a1 | a2\n 39949: a0 = a0 <u 0x1\n 39952: a3 = s1 + a0\n 39955: a0 = a3 <u s1\n 39958: u64 [sp + 0x138] = a4\n 39962: a0 = a0 + a4\n 39965: u64 [sp + 0xf8] = a2\n 39969: u64 [sp + 0x2c8] = a2\n 39973: u64 [sp + 0x108] = a1\n 39977: u64 [sp + 0x2c0] = a1\n 39981: u64 [sp + 0xf0] = a3\n 39985: u64 [sp + 0x2d0] = a3\n 39989: u64 [sp + 0xe8] = a0\n 39993: u64 [sp + 0x2d8] = a0\n 39997: u64 [sp + 632] = 0\n 40001: u64 [sp + 624] = 0\n 40005: u64 [sp + 616] = 0\n 40009: u64 [sp + 608] = 0\n 40013: u32 [sp + 736] = 0x20\n 40018: i32 a1 = sp + 0x2c0\n 40022: i32 a3 = sp + 0x260\n 40026: i32 a4 = sp + 0x2e0\n 40030: a2 = 0xffffffffffffffff\n 40033: a0 = 0\n 40035: ecalli 7 // 'get_storage'\n 40037: fallthrough\n      : @562 (gas: 8)\n 40038: a0 = u64 [sp + 0x270]\n 40042: a1 = u64 [sp + 0x278]\n 40046: a2 = u64 [sp + 0x268]\n 40050: a3 = u64 [sp + 0x260]\n 40054: a1 = a1 | a2\n 40057: a0 = a0 | a3\n 40060: a0 = a0 | a1\n 40063: jump @571 if a0 == 0\n      : @563 (gas: 31)\n 40067: a0 = u64 [sp + 0x128]\n 40071: a2 = a0 + 0x2\n 40074: a0 = a2 <u a0\n 40077: a1 = u64 [sp + 0x130]\n 40081: a3 = a1 + a0\n 40084: a1 = a3 <u a1\n 40087: a1 = a0 if a0 == 0\n 40090: a1 = a1 + s1\n 40093: a0 = a1 <u s1\n 40096: a4 = u64 [sp + 0x138]\n 40100: a0 = a0 + a4\n 40103: u64 [sp + 0x138] = a2\n 40107: u64 [sp + 0x2c0] = a2\n 40111: u64 [sp + 0x130] = a3\n 40115: u64 [sp + 0x2c8] = a3\n 40119: s1 = a1\n 40121: u64 [sp + 0x2d0] = a1\n 40125: u64 [sp + 0x128] = a0\n 40129: u64 [sp + 0x2d8] = a0\n 40133: u64 [sp + 632] = 0\n 40137: u64 [sp + 624] = 0\n 40141: u64 [sp + 616] = 0\n 40145: u64 [sp + 608] = 0\n 40149: u32 [sp + 736] = 0x20\n 40154: i32 a1 = sp + 0x2c0\n 40158: i32 a3 = sp + 0x260\n 40162: i32 a4 = sp + 0x2e0\n 40166: a2 = 0xffffffffffffffff\n 40169: a0 = 0\n 40171: ecalli 7 // 'get_storage'\n 40173: fallthrough\n      : @564 (gas: 2)\n 40174: a0 = u8 [sp + 0x260]\n 40178: jump @571 if a0 != 0\n      : @565 (gas: 45)\n 40182: u64 [sp + 0xe0] = s1\n 40186: u64 [sp + 0x2d0] = s1\n 40190: a0 = u64 [sp + 0x130]\n 40194: u64 [sp + 0x2c8] = a0\n 40198: a0 = u64 [sp + 0x138]\n 40202: u64 [sp + 0x2c0] = a0\n 40206: s1 = u64 [sp + 0x128]\n 40210: u64 [sp + 0x2d8] = s1\n 40214: u64 [sp + 632] = 0\n 40218: u64 [sp + 624] = 0\n 40222: u64 [sp + 616] = 0\n 40226: u64 [sp + 608] = 0\n 40230: u32 [sp + 736] = 0x20\n 40235: i32 a1 = sp + 0x2c0\n 40239: i32 a3 = sp + 0x260\n 40243: i32 a4 = sp + 0x2e0\n 40247: a2 = 0xffffffffffffffff\n 40250: a0 = 0\n 40252: ecalli 7 // 'get_storage'\n 40254: a0 = u64 [sp + 0x260]\n 40258: a1 = u64 [sp + 0x268]\n 40262: a2 = u64 [sp + 0x270]\n 40266: a3 = u64 [sp + 0x278]\n 40270: a0 = a0 & 0xffffffffffffff00\n 40274: a0 = a0 | 0x1\n 40277: u64 [sp + 0x2d8] = s1\n 40281: a4 = u64 [sp + 0xe0]\n 40285: u64 [sp + 0x2d0] = a4\n 40289: a4 = u64 [sp + 0x130]\n 40293: u64 [sp + 0x2c8] = a4\n 40297: a4 = u64 [sp + 0x138]\n 40301: u64 [sp + 0x2c0] = a4\n 40305: u64 [sp + 0x278] = a3\n 40309: u64 [sp + 0x270] = a2\n 40313: u64 [sp + 0x268] = a1\n 40317: u64 [sp + 0x260] = a0\n 40321: i32 a1 = sp + 0x2c0\n 40325: i32 a3 = sp + 0x260\n 40329: a2 = 0xffffffffffffffff\n 40332: a4 = 0x20\n 40335: a0 = 0\n 40337: ecalli 14 // 'set_storage'\n 40339: a0 = 0x40\n 40342: a1 = 0x20\n 40345: ra = 518, jump @0\n      : @566 [@dyn 259] (gas: 100)\n 40352: a1 = u8 [a0 + 0x11]\n 40355: a2 = u8 [a0 + 0x10]\n 40358: a3 = u8 [a0 + 0x12]\n 40361: a4 = u8 [a0 + 0x13]\n 40364: a1 = a1 << 0x8\n 40367: a1 = a1 | a2\n 40370: a3 = a3 << 0x10\n 40373: a4 = a4 << 0x18\n 40376: a3 = a3 | a4\n 40379: a1 = a1 | a3\n 40382: a2 = u8 [a0 + 0x15]\n 40385: a3 = u8 [a0 + 0x14]\n 40388: a4 = u8 [a0 + 0x16]\n 40391: a5 = u8 [a0 + 0x17]\n 40394: a2 = a2 << 0x8\n 40397: a2 = a2 | a3\n 40400: a4 = a4 << 0x10\n 40403: a5 = a5 << 0x18\n 40406: a4 = a4 | a5\n 40409: a2 = a2 | a4\n 40412: a2 = a2 << 0x20\n 40415: t0 = a2 | a1\n 40418: a2 = u8 [a0 + 0x1]\n 40421: a3 = u8 [a0]\n 40423: a4 = u8 [a0 + 0x2]\n 40426: a5 = u8 [a0 + 0x3]\n 40429: a2 = a2 << 0x8\n 40432: a2 = a2 | a3\n 40435: a4 = a4 << 0x10\n 40438: a5 = a5 << 0x18\n 40441: a4 = a4 | a5\n 40444: a2 = a2 | a4\n 40447: a3 = u8 [a0 + 0x5]\n 40450: a4 = u8 [a0 + 0x4]\n 40453: a5 = u8 [a0 + 0x6]\n 40456: s1 = u8 [a0 + 0x7]\n 40459: a3 = a3 << 0x8\n 40462: a3 = a3 | a4\n 40465: a5 = a5 << 0x10\n 40468: s1 = s1 << 0x18\n 40471: a5 = a5 | s1\n 40474: a3 = a3 | a5\n 40477: a3 = a3 << 0x20\n 40480: a2 = a2 | a3\n 40483: a3 = u8 [a0 + 0x19]\n 40486: a4 = u8 [a0 + 0x18]\n 40489: a5 = u8 [a0 + 0x1a]\n 40492: s1 = u8 [a0 + 0x1b]\n 40495: a3 = a3 << 0x8\n 40498: a3 = a3 | a4\n 40501: a5 = a5 << 0x10\n 40504: s1 = s1 << 0x18\n 40507: a5 = a5 | s1\n 40510: a3 = a3 | a5\n 40513: a4 = u8 [a0 + 0x1d]\n 40516: a5 = u8 [a0 + 0x1c]\n 40519: s1 = u8 [a0 + 0x1e]\n 40522: a1 = u8 [a0 + 0x1f]\n 40525: a4 = a4 << 0x8\n 40528: a4 = a4 | a5\n 40531: s1 = s1 << 0x10\n 40534: a1 = a1 << 0x18\n 40537: a1 = a1 | s1\n 40540: a1 = a1 | a4\n 40543: a1 = a1 << 0x20\n 40546: a3 = a3 | a1\n 40549: a1 = u8 [a0 + 0x9]\n 40552: a4 = u8 [a0 + 0x8]\n 40555: a5 = u8 [a0 + 0xa]\n 40558: s1 = u8 [a0 + 0xb]\n 40561: a1 = a1 << 0x8\n 40564: a1 = a1 | a4\n 40567: a5 = a5 << 0x10\n 40570: s1 = s1 << 0x18\n 40573: a5 = a5 | s1\n 40576: a1 = a1 | a5\n 40579: a4 = u8 [a0 + 0xd]\n 40582: a5 = u8 [a0 + 0xc]\n 40585: s1 = u8 [a0 + 0xe]\n 40588: a0 = u8 [a0 + 0xf]\n 40591: a4 = a4 << 0x8\n 40594: a4 = a4 | a5\n 40597: s1 = s1 << 0x10\n 40600: a0 = a0 << 0x18\n 40603: a0 = a0 | s1\n 40606: a0 = a0 | a4\n 40609: a0 = a0 << 0x20\n 40612: a0 = a0 | a1\n 40615: a0 = reverse a0\n 40617: s1 = reverse a3\n 40619: a1 = reverse a2\n 40621: a2 = reverse t0\n 40623: a1 = a1 | a2\n 40626: a2 = s1 | a0\n 40629: a2 = a2 | a1\n 40632: a2 = a2 >> 0x20\n 40635: a0 = a0 | a1\n 40638: a0 = a0 << 0x20\n 40641: a0 = a0 | a2\n 40644: jump @582 if a0 != 0\n      : @567 (gas: 4)\n 40648: i32 s1 = s1 + 0\n 40650: a1 = 0x20\n 40653: a0 = s1\n 40655: ra = 520, jump @0\n      : @568 [@dyn 260] (gas: 71)\n 40662: a1 = u64 [sp + 0x10]\n 40665: a1 = reverse a1\n 40667: a2 = u64 [sp + 0x18]\n 40670: a2 = reverse a2\n 40672: a3 = u64 [sp + 0x20]\n 40675: a3 = reverse a3\n 40677: a4 = u64 [sp + 0x28]\n 40680: a4 = reverse a4\n 40682: a5 = a4 >> 0x38\n 40685: u8 [a0 + 0x1f] = a5\n 40688: a5 = a4 >> 0x30\n 40691: u8 [a0 + 0x1e] = a5\n 40694: a5 = a4 >> 0x28\n 40697: u8 [a0 + 0x1d] = a5\n 40700: a5 = a4 >> 0x20\n 40703: u8 [a0 + 0x1c] = a5\n 40706: a5 = a4 >> 0x18\n 40709: u8 [a0 + 0x1b] = a5\n 40712: a5 = a4 >> 0x10\n 40715: u8 [a0 + 0x1a] = a5\n 40718: a5 = a4 >> 0x8\n 40721: u8 [a0 + 0x19] = a5\n 40724: u8 [a0 + 0x18] = a4\n 40727: u8 [a0 + 0x10] = a3\n 40730: a4 = a3 >> 0x38\n 40733: u8 [a0 + 0x17] = a4\n 40736: a4 = a3 >> 0x30\n 40739: u8 [a0 + 0x16] = a4\n 40742: a4 = a3 >> 0x28\n 40745: u8 [a0 + 0x15] = a4\n 40748: a4 = a3 >> 0x20\n 40751: u8 [a0 + 0x14] = a4\n 40754: a4 = a3 >> 0x18\n 40757: u8 [a0 + 0x13] = a4\n 40760: a4 = a3 >> 0x10\n 40763: u8 [a0 + 0x12] = a4\n 40766: a3 = a3 >> 0x8\n 40769: u8 [a0 + 0x11] = a3\n 40772: u8 [a0 + 0x8] = a2\n 40775: a3 = a2 >> 0x38\n 40778: u8 [a0 + 0xf] = a3\n 40781: a3 = a2 >> 0x30\n 40784: u8 [a0 + 0xe] = a3\n 40787: a3 = a2 >> 0x28\n 40790: u8 [a0 + 0xd] = a3\n 40793: a3 = a2 >> 0x20\n 40796: u8 [a0 + 0xc] = a3\n 40799: a3 = a2 >> 0x18\n 40802: u8 [a0 + 0xb] = a3\n 40805: a3 = a2 >> 0x10\n 40808: u8 [a0 + 0xa] = a3\n 40811: a2 = a2 >> 0x8\n 40814: u8 [a0 + 0x9] = a2\n 40817: u8 [a0] = a1\n 40819: a2 = a1 >> 0x38\n 40822: u8 [a0 + 0x7] = a2\n 40825: a2 = a1 >> 0x30\n 40828: u8 [a0 + 0x6] = a2\n 40831: a2 = a1 >> 0x28\n 40834: u8 [a0 + 0x5] = a2\n 40837: a2 = a1 >> 0x20\n 40840: u8 [a0 + 0x4] = a2\n 40843: a2 = a1 >> 0x18\n 40846: u8 [a0 + 0x3] = a2\n 40849: a2 = a1 >> 0x10\n 40852: u8 [a0 + 0x2] = a2\n 40855: a1 = a1 >> 0x8\n 40858: u8 [a0 + 0x1] = a1\n 40861: a1 = 0x20\n 40864: a0 = s1\n 40866: ra = 522, jump @0\n      : @569 [@dyn 261] (gas: 89)\n 40873: a1 = u64 [0x20020]\n 40878: a2 = u64 [0x20028]\n 40883: a3 = u64 [0x20030]\n 40888: a4 = u64 [0x20038]\n 40893: u64 [sp + 0x278] = a1\n 40897: u64 [sp + 0x270] = a2\n 40901: u64 [sp + 0x268] = a3\n 40905: u64 [sp + 0x260] = a4\n 40909: a1 = u64 [sp + 0x140]\n 40913: u64 [sp + 0x298] = a1\n 40917: a1 = u64 [sp + 0x148]\n 40921: u64 [sp + 0x290] = a1\n 40925: a1 = u64 [sp + 0x150]\n 40929: u64 [sp + 0x288] = a1\n 40933: a1 = u64 [sp + 0x158]\n 40937: u64 [sp + 0x280] = a1\n 40941: a1 = u64 [sp + 0x100]\n 40945: u64 [sp + 0x2b8] = a1\n 40949: a1 = u64 [sp + 0x110]\n 40953: u64 [sp + 0x2b0] = a1\n 40957: a1 = u64 [sp + 0x118]\n 40961: u64 [sp + 0x2a8] = a1\n 40965: a1 = u64 [sp + 0x120]\n 40969: u64 [sp + 0x2a0] = a1\n 40973: i32 a2 = a0 + 0\n 40975: i32 a0 = sp + 0x260\n 40979: a1 = 0x3\n 40982: a3 = 0x20\n 40985: ecalli 5 // 'deposit_event'\n 40987: a0 = u64 [sp + 0x160]\n 40991: u64 [sp + 0x2d8] = a0\n 40995: a0 = u64 [sp + 0x168]\n 40999: u64 [sp + 0x2d0] = a0\n 41003: a0 = u64 [sp + 0x170]\n 41007: u64 [sp + 0x2c8] = a0\n 41011: a0 = u64 [sp + 0x178]\n 41015: u64 [sp + 0x2c0] = a0\n 41019: u64 [sp + 632] = 0\n 41023: u64 [sp + 624] = 0\n 41027: u64 [sp + 616] = 0\n 41031: u64 [sp + 608] = 0\n 41035: u32 [sp + 736] = 0x20\n 41040: i32 a1 = sp + 0x2c0\n 41044: i32 a3 = sp + 0x260\n 41048: i32 a4 = sp + 0x2e0\n 41052: a2 = 0xffffffffffffffff\n 41055: a0 = 0\n 41057: ecalli 7 // 'get_storage'\n 41059: a0 = u64 [sp + 0x260]\n 41063: u64 [sp + 0x178] = a0\n 41067: a0 = u64 [sp + 0x268]\n 41071: u64 [sp + 0x170] = a0\n 41075: s1 = u32 [sp + 0x270]\n 41079: a0 = u64 [sp + 0xe8]\n 41083: u64 [sp + 0x2d8] = a0\n 41087: a0 = u64 [sp + 0xf0]\n 41091: u64 [sp + 0x2d0] = a0\n 41095: a0 = u64 [sp + 0xf8]\n 41099: u64 [sp + 0x2c8] = a0\n 41103: a0 = u64 [sp + 0x108]\n 41107: u64 [sp + 0x2c0] = a0\n 41111: u64 [sp + 632] = 0\n 41115: u64 [sp + 624] = 0\n 41119: u64 [sp + 616] = 0\n 41123: u64 [sp + 608] = 0\n 41127: u32 [sp + 736] = 0x20\n 41132: i32 a1 = sp + 0x2c0\n 41136: i32 a3 = sp + 0x260\n 41140: i32 a4 = sp + 0x2e0\n 41144: a2 = 0xffffffffffffffff\n 41147: a0 = 0\n 41149: ecalli 7 // 'get_storage'\n 41151: a0 = u64 [sp + 0x260]\n 41155: a1 = u64 [sp + 0x268]\n 41159: a2 = u64 [sp + 0x270]\n 41163: a3 = u64 [sp + 0x278]\n 41167: u64 [sp + 0x1d8] = a3\n 41171: u64 [sp + 0x1d0] = a2\n 41175: u64 [sp + 0x1c8] = a1\n 41179: u64 [sp + 0x1c0] = a0\n 41183: u64 [sp + 504] = 0\n 41187: u64 [sp + 0x1f0] = s1\n 41191: a0 = u64 [sp + 0x170]\n 41195: u64 [sp + 0x1e8] = a0\n 41199: a0 = sp + 0x1e0\n 41203: a1 = sp + 0x1c0\n 41207: a2 = u64 [sp + 0x178]\n 41211: u64 [sp + 0x1e0] = a2\n 41215: ra = 524, jump @1059\n      : @570 [@dyn 262] (gas: 6)\n 41222: sp = s0 + 0xfffffffffffffd00\n 41226: ra = u64 [sp + 0x2f8]\n 41230: s0 = u64 [sp + 0x2f0]\n 41234: s1 = u64 [sp + 0x2e8]\n 41238: sp = sp + 0x300\n 41242: ret\n      : @571 (gas: 3)\n 41244: a0 = 0x40\n 41247: a1 = 0x20\n 41250: ra = 526, jump @0\n      : @572 [@dyn 263] (gas: 103)\n 41257: a1 = u8 [a0 + 0x11]\n 41260: a2 = u8 [a0 + 0x10]\n 41263: a3 = u8 [a0 + 0x12]\n 41266: a4 = u8 [a0 + 0x13]\n 41269: a1 = a1 << 0x8\n 41272: a1 = a1 | a2\n 41275: a3 = a3 << 0x10\n 41278: a4 = a4 << 0x18\n 41281: a3 = a3 | a4\n 41284: a1 = a1 | a3\n 41287: a2 = u8 [a0 + 0x15]\n 41290: a3 = u8 [a0 + 0x14]\n 41293: a4 = u8 [a0 + 0x16]\n 41296: a5 = u8 [a0 + 0x17]\n 41299: a2 = a2 << 0x8\n 41302: a2 = a2 | a3\n 41305: a4 = a4 << 0x10\n 41308: a5 = a5 << 0x18\n 41311: a4 = a4 | a5\n 41314: a2 = a2 | a4\n 41317: a2 = a2 << 0x20\n 41320: t0 = a2 | a1\n 41323: a2 = u8 [a0 + 0x1]\n 41326: a3 = u8 [a0]\n 41328: a4 = u8 [a0 + 0x2]\n 41331: a5 = u8 [a0 + 0x3]\n 41334: a2 = a2 << 0x8\n 41337: a2 = a2 | a3\n 41340: a4 = a4 << 0x10\n 41343: a5 = a5 << 0x18\n 41346: a4 = a4 | a5\n 41349: a2 = a2 | a4\n 41352: a3 = u8 [a0 + 0x5]\n 41355: a4 = u8 [a0 + 0x4]\n 41358: a5 = u8 [a0 + 0x6]\n 41361: s1 = u8 [a0 + 0x7]\n 41364: a3 = a3 << 0x8\n 41367: a3 = a3 | a4\n 41370: a5 = a5 << 0x10\n 41373: s1 = s1 << 0x18\n 41376: a5 = a5 | s1\n 41379: a3 = a3 | a5\n 41382: a3 = a3 << 0x20\n 41385: a2 = a2 | a3\n 41388: a3 = u8 [a0 + 0x19]\n 41391: a4 = u8 [a0 + 0x18]\n 41394: a5 = u8 [a0 + 0x1a]\n 41397: s1 = u8 [a0 + 0x1b]\n 41400: a3 = a3 << 0x8\n 41403: a3 = a3 | a4\n 41406: a5 = a5 << 0x10\n 41409: s1 = s1 << 0x18\n 41412: a5 = a5 | s1\n 41415: a3 = a3 | a5\n 41418: a4 = u8 [a0 + 0x1d]\n 41421: a5 = u8 [a0 + 0x1c]\n 41424: s1 = u8 [a0 + 0x1e]\n 41427: a1 = u8 [a0 + 0x1f]\n 41430: a4 = a4 << 0x8\n 41433: a4 = a4 | a5\n 41436: s1 = s1 << 0x10\n 41439: a1 = a1 << 0x18\n 41442: a1 = a1 | s1\n 41445: a1 = a1 | a4\n 41448: a1 = a1 << 0x20\n 41451: a3 = a3 | a1\n 41454: a1 = u8 [a0 + 0x9]\n 41457: a4 = u8 [a0 + 0x8]\n 41460: a5 = u8 [a0 + 0xa]\n 41463: s1 = u8 [a0 + 0xb]\n 41466: a1 = a1 << 0x8\n 41469: a1 = a1 | a4\n 41472: a5 = a5 << 0x10\n 41475: s1 = s1 << 0x18\n 41478: a5 = a5 | s1\n 41481: a1 = a1 | a5\n 41484: a4 = u8 [a0 + 0xd]\n 41487: a5 = u8 [a0 + 0xc]\n 41490: s1 = u8 [a0 + 0xe]\n 41493: a0 = u8 [a0 + 0xf]\n 41496: a4 = a4 << 0x8\n 41499: a4 = a4 | a5\n 41502: s1 = s1 << 0x10\n 41505: a0 = a0 << 0x18\n 41508: a0 = a0 | s1\n 41511: a0 = a0 | a4\n 41514: a0 = a0 << 0x20\n 41517: a0 = a0 | a1\n 41520: s1 = reverse a0\n 41522: a1 = reverse a3\n 41524: a2 = reverse a2\n 41526: a0 = reverse t0\n 41528: u64 [sp + 0x178] = a0\n 41532: u64 [sp + 0x170] = a2\n 41536: a0 = a0 | a2\n 41539: a2 = a1\n 41541: a1 = a1 | s1\n 41544: a1 = a1 | a0\n 41547: a1 = a1 >> 0x20\n 41550: a0 = a0 | s1\n 41553: a0 = a0 << 0x20\n 41556: a0 = a0 | a1\n 41559: jump @582 if a0 != 0\n      : @573 (gas: 5)\n 41563: u64 [sp + 0x168] = a2\n 41567: i32 a0 = a2 + 0\n 41569: a1 = 0x20\n 41572: u64 [sp + 0x160] = a0\n 41576: ra = 528, jump @0\n      : @574 [@dyn 264] (gas: 50)\n 41583: u8 [a0 + 31] = 0\n 41586: u8 [a0 + 30] = 0\n 41589: u8 [a0 + 29] = 0\n 41592: u8 [a0 + 28] = 0\n 41595: u8 [a0 + 27] = 0\n 41598: u8 [a0 + 26] = 0\n 41601: u8 [a0 + 25] = 0\n 41604: u8 [a0 + 24] = 0\n 41607: u8 [a0 + 23] = 0\n 41610: u8 [a0 + 22] = 0\n 41613: u8 [a0 + 21] = 0\n 41616: u8 [a0 + 20] = 0\n 41619: u8 [a0 + 19] = 0\n 41622: u8 [a0 + 18] = 0\n 41625: u8 [a0 + 17] = 0\n 41628: u8 [a0 + 16] = 0\n 41631: u8 [a0 + 15] = 0\n 41634: u8 [a0 + 14] = 0\n 41637: u8 [a0 + 13] = 0\n 41640: u8 [a0 + 12] = 0\n 41643: u8 [a0 + 11] = 0\n 41646: u8 [a0 + 10] = 0\n 41649: u8 [a0 + 9] = 0\n 41652: u8 [a0 + 8] = 0\n 41655: u8 [a0 + 7] = 0\n 41658: u8 [a0 + 6] = 0\n 41661: u8 [a0 + 5] = 0\n 41664: u8 [a0 + 4] = 0\n 41667: u8 [a0 + 3] = 0xa0\n 41672: u8 [a0 + 2] = 0x79\n 41676: u8 [a0 + 1] = 0xc3\n 41681: u8 [a0 + 0] = 0x8\n 41684: a1 = u64 [sp + 0x168]\n 41688: a0 = a1 + 0x4\n 41691: a1 = a0 <u a1\n 41694: a3 = u64 [sp + 0x178]\n 41698: a2 = a3 + a1\n 41701: a3 = a2 <u a3\n 41704: a3 = a1 if a1 == 0\n 41707: a3 = a3 + s1\n 41710: a1 = a3 <u s1\n 41713: a4 = u64 [sp + 0x170]\n 41717: a4 = a4 + a1\n 41720: u64 [sp + 0x188] = a2\n 41724: u64 [sp + 0x180] = a0\n 41728: u64 [sp + 0x190] = a3\n 41732: a0 = sp + 0x1a0\n 41736: a1 = sp + 0x180\n 41740: u64 [sp + 0x198] = a4\n 41744: ra = 530, jump @543\n      : @575 [@dyn 265] (gas: 5)\n 41750: a0 = u64 [sp + 0x1a8]\n 41754: t0 = u64 [sp + 0x1b8]\n 41758: t1 = u64 [sp + 0x1a0]\n 41762: a3 = u64 [sp + 0x1b0]\n 41766: jump @581\n      : @576 (gas: 3)\n 41769: a0 = 0x40\n 41772: a1 = 0x20\n 41775: ra = 532, jump @0\n      : @577 [@dyn 266] (gas: 103)\n 41782: a1 = u8 [a0 + 0x11]\n 41785: a2 = u8 [a0 + 0x10]\n 41788: a3 = u8 [a0 + 0x12]\n 41791: a4 = u8 [a0 + 0x13]\n 41794: a1 = a1 << 0x8\n 41797: a1 = a1 | a2\n 41800: a3 = a3 << 0x10\n 41803: a4 = a4 << 0x18\n 41806: a3 = a3 | a4\n 41809: a1 = a1 | a3\n 41812: a2 = u8 [a0 + 0x15]\n 41815: a3 = u8 [a0 + 0x14]\n 41818: a4 = u8 [a0 + 0x16]\n 41821: a5 = u8 [a0 + 0x17]\n 41824: a2 = a2 << 0x8\n 41827: a2 = a2 | a3\n 41830: a4 = a4 << 0x10\n 41833: a5 = a5 << 0x18\n 41836: a4 = a4 | a5\n 41839: a2 = a2 | a4\n 41842: a2 = a2 << 0x20\n 41845: t0 = a2 | a1\n 41848: a2 = u8 [a0 + 0x1]\n 41851: a3 = u8 [a0]\n 41853: a4 = u8 [a0 + 0x2]\n 41856: a5 = u8 [a0 + 0x3]\n 41859: a2 = a2 << 0x8\n 41862: a2 = a2 | a3\n 41865: a4 = a4 << 0x10\n 41868: a5 = a5 << 0x18\n 41871: a4 = a4 | a5\n 41874: a2 = a2 | a4\n 41877: a3 = u8 [a0 + 0x5]\n 41880: a4 = u8 [a0 + 0x4]\n 41883: a5 = u8 [a0 + 0x6]\n 41886: s1 = u8 [a0 + 0x7]\n 41889: a3 = a3 << 0x8\n 41892: a3 = a3 | a4\n 41895: a5 = a5 << 0x10\n 41898: s1 = s1 << 0x18\n 41901: a5 = a5 | s1\n 41904: a3 = a3 | a5\n 41907: a3 = a3 << 0x20\n 41910: a2 = a2 | a3\n 41913: a3 = u8 [a0 + 0x19]\n 41916: a4 = u8 [a0 + 0x18]\n 41919: a5 = u8 [a0 + 0x1a]\n 41922: s1 = u8 [a0 + 0x1b]\n 41925: a3 = a3 << 0x8\n 41928: a3 = a3 | a4\n 41931: a5 = a5 << 0x10\n 41934: s1 = s1 << 0x18\n 41937: a5 = a5 | s1\n 41940: a3 = a3 | a5\n 41943: a4 = u8 [a0 + 0x1d]\n 41946: a5 = u8 [a0 + 0x1c]\n 41949: s1 = u8 [a0 + 0x1e]\n 41952: a1 = u8 [a0 + 0x1f]\n 41955: a4 = a4 << 0x8\n 41958: a4 = a4 | a5\n 41961: s1 = s1 << 0x10\n 41964: a1 = a1 << 0x18\n 41967: a1 = a1 | s1\n 41970: a1 = a1 | a4\n 41973: a1 = a1 << 0x20\n 41976: a3 = a3 | a1\n 41979: a1 = u8 [a0 + 0x9]\n 41982: a4 = u8 [a0 + 0x8]\n 41985: a5 = u8 [a0 + 0xa]\n 41988: s1 = u8 [a0 + 0xb]\n 41991: a1 = a1 << 0x8\n 41994: a1 = a1 | a4\n 41997: a5 = a5 << 0x10\n 42000: s1 = s1 << 0x18\n 42003: a5 = a5 | s1\n 42006: a1 = a1 | a5\n 42009: a4 = u8 [a0 + 0xd]\n 42012: a5 = u8 [a0 + 0xc]\n 42015: s1 = u8 [a0 + 0xe]\n 42018: a0 = u8 [a0 + 0xf]\n 42021: a4 = a4 << 0x8\n 42024: a4 = a4 | a5\n 42027: s1 = s1 << 0x10\n 42030: a0 = a0 << 0x18\n 42033: a0 = a0 | s1\n 42036: a0 = a0 | a4\n 42039: a0 = a0 << 0x20\n 42042: a0 = a0 | a1\n 42045: s1 = reverse a0\n 42047: a1 = reverse a3\n 42049: a2 = reverse a2\n 42051: a0 = reverse t0\n 42053: u64 [sp + 0x178] = a0\n 42057: u64 [sp + 0x170] = a2\n 42061: a0 = a0 | a2\n 42064: a2 = a1\n 42066: a1 = a1 | s1\n 42069: a1 = a1 | a0\n 42072: a1 = a1 >> 0x20\n 42075: a0 = a0 | s1\n 42078: a0 = a0 << 0x20\n 42081: a0 = a0 | a1\n 42084: jump @582 if a0 != 0\n      : @578 (gas: 5)\n 42088: u64 [sp + 0x168] = a2\n 42092: i32 a0 = a2 + 0\n 42094: a1 = 0x20\n 42097: u64 [sp + 0x160] = a0\n 42101: ra = 534, jump @0\n      : @579 [@dyn 267] (gas: 50)\n 42108: u8 [a0 + 31] = 0\n 42111: u8 [a0 + 30] = 0\n 42114: u8 [a0 + 29] = 0\n 42117: u8 [a0 + 28] = 0\n 42120: u8 [a0 + 27] = 0\n 42123: u8 [a0 + 26] = 0\n 42126: u8 [a0 + 25] = 0\n 42129: u8 [a0 + 24] = 0\n 42132: u8 [a0 + 23] = 0\n 42135: u8 [a0 + 22] = 0\n 42138: u8 [a0 + 21] = 0\n 42141: u8 [a0 + 20] = 0\n 42144: u8 [a0 + 19] = 0\n 42147: u8 [a0 + 18] = 0\n 42150: u8 [a0 + 17] = 0\n 42153: u8 [a0 + 16] = 0\n 42156: u8 [a0 + 15] = 0\n 42159: u8 [a0 + 14] = 0\n 42162: u8 [a0 + 13] = 0\n 42165: u8 [a0 + 12] = 0\n 42168: u8 [a0 + 11] = 0\n 42171: u8 [a0 + 10] = 0\n 42174: u8 [a0 + 9] = 0\n 42177: u8 [a0 + 8] = 0\n 42180: u8 [a0 + 7] = 0\n 42183: u8 [a0 + 6] = 0\n 42186: u8 [a0 + 5] = 0\n 42189: u8 [a0 + 4] = 0\n 42192: u8 [a0 + 3] = 0xa0\n 42197: u8 [a0 + 2] = 0x79\n 42201: u8 [a0 + 1] = 0xc3\n 42206: u8 [a0 + 0] = 0x8\n 42209: a1 = u64 [sp + 0x168]\n 42213: a0 = a1 + 0x4\n 42216: a1 = a0 <u a1\n 42219: a3 = u64 [sp + 0x178]\n 42223: a2 = a3 + a1\n 42226: a3 = a2 <u a3\n 42229: a3 = a1 if a1 == 0\n 42232: a3 = a3 + s1\n 42235: a1 = a3 <u s1\n 42238: a4 = u64 [sp + 0x170]\n 42242: a4 = a4 + a1\n 42245: u64 [sp + 0x208] = a2\n 42249: u64 [sp + 0x200] = a0\n 42253: u64 [sp + 0x210] = a3\n 42257: a0 = sp + 0x220\n 42261: a1 = sp + 0x200\n 42265: u64 [sp + 0x218] = a4\n 42269: ra = 536, jump @535\n      : @580 [@dyn 268] (gas: 5)\n 42275: a0 = u64 [sp + 0x228]\n 42279: t0 = u64 [sp + 0x238]\n 42283: t1 = u64 [sp + 0x220]\n 42287: a3 = u64 [sp + 0x230]\n 42291: fallthrough\n      : @581 (gas: 26)\n 42292: a1 = u64 [sp + 0x178]\n 42296: a4 = a0 ^ a1\n 42299: a5 = a0 <u a1\n 42302: t2 = a1\n 42304: a2 = u64 [sp + 0x168]\n 42308: a1 = t1 <u a2\n 42311: a5 = a1 if a4 == 0\n 42314: a4 = a3 - s1\n 42317: a3 = a3 <u s1\n 42320: s1 = u64 [sp + 0x170]\n 42324: s1 = t0 - s1\n 42327: s1 = s1 - a3\n 42330: a3 = a4 <u a5\n 42333: s1 = s1 - a3\n 42336: a4 = a4 - a5\n 42339: a0 = a0 - t2\n 42342: a1 = a0 - a1\n 42345: a0 = t1 - a2\n 42348: a1 = a1 | s1\n 42351: a2 = a0 | a4\n 42354: a2 = a2 | a1\n 42357: a1 = a1 | a4\n 42360: a2 = a2 >> 0x20\n 42363: a1 = a1 << 0x20\n 42366: a1 = a1 | a2\n 42369: jump @583 if a1 == 0\n      : @582 (gas: 1)\n 42372: trap\n      : @583 (gas: 4)\n 42373: i32 s1 = a0 + 0\n 42375: a0 = u64 [sp + 0x160]\n 42379: a1 = s1\n 42381: ra = 538, jump @0\n      : @584 [@dyn 269] (gas: 6)\n 42388: i32 a1 = a0 + 0\n 42390: a0 = 0x1\n 42393: a2 = s1\n 42395: ra = 0x21c\n 42399: ecalli 12 // 'seal_return'\n 42401: fallthrough\n      : @585 [@dyn 270] (gas: 36)\n 42402: sp = sp + 0xffffffffffffff70\n 42406: u64 [sp + 0x88] = ra\n 42410: u64 [sp + 0x80] = s0\n 42414: u64 [sp + 0x78] = s1\n 42417: s0 = sp + 0x90\n 42421: sp = sp & 0xfffffffffffffff0\n 42424: a3 = u64 [a0]\n 42426: u64 [sp + 0x8] = a3\n 42429: t1 = u64 [a0 + 0x8]\n 42432: t2 = u64 [a0 + 0x10]\n 42435: ra = u64 [a0 + 0x18]\n 42438: t0 = u64 [a1]\n 42440: a4 = u64 [a1 + 0x8]\n 42443: a5 = u64 [a1 + 0x10]\n 42446: a3 = u64 [a1 + 0x18]\n 42449: s1 = u64 [a2]\n 42451: a1 = u64 [a2 + 0x8]\n 42454: a0 = u64 [a2 + 0x10]\n 42457: a2 = u64 [a2 + 0x18]\n 42460: u64 [sp + 0x28] = a2\n 42463: u64 [sp + 0x20] = a0\n 42466: u64 [sp + 0x18] = a1\n 42469: u64 [sp + 0x10] = s1\n 42472: u64 [sp + 0x48] = a3\n 42475: u64 [sp + 0x40] = a5\n 42478: u64 [sp + 0x38] = a4\n 42481: u64 [sp + 0x30] = t0\n 42484: u64 [sp + 0x68] = ra\n 42487: u64 [sp + 0x60] = t2\n 42490: u64 [sp + 0x58] = t1\n 42493: a0 = sp + 0x50\n 42496: a1 = sp + 0x30\n 42499: a2 = sp + 0x10\n 42502: a3 = u64 [sp + 0x8]\n 42505: u64 [sp + 0x50] = a3\n 42508: ra = 542, jump @519\n      : @586 [@dyn 271] (gas: 6)\n 42514: sp = s0 + 0xffffffffffffff70\n 42518: ra = u64 [sp + 0x88]\n 42522: s0 = u64 [sp + 0x80]\n 42526: s1 = u64 [sp + 0x78]\n 42529: sp = sp + 0x90\n 42533: ret\n      : @587 (gas: 17)\n 42535: sp = sp + 0xffffffffffffffa0\n 42538: u64 [sp + 0x58] = ra\n 42541: u64 [sp + 0x50] = s0\n 42544: u64 [sp + 0x48] = s1\n 42547: a3 = u64 [a1 + 0x18]\n 42550: a4 = u64 [a1 + 0x10]\n 42553: a5 = u64 [a1 + 0x8]\n 42556: s1 = u64 [a1]\n 42558: a1 = a5 | a3\n 42561: a2 = s1 | a4\n 42564: a2 = a2 | a1\n 42567: a2 = a2 >> 0x20\n 42570: a1 = a1 | a4\n 42573: a1 = a1 << 0x20\n 42576: a1 = a1 | a2\n 42579: u64 [sp + 0x28] = a0\n 42582: jump @594 if a1 != 0\n      : @588 (gas: 19)\n 42586: a0 = s1 + 0x20\n 42589: u64 [sp + 0x30] = a0\n 42592: a0 = a0 <u s1\n 42595: a1 = a5 + a0\n 42598: u64 [sp + 0x40] = a1\n 42601: u64 [sp + 0x8] = a5\n 42604: s0 = a1 <u a5\n 42607: s0 = a0 if a0 == 0\n 42610: s0 = s0 + a4\n 42613: u64 [sp + 0x10] = a4\n 42616: a0 = s0 <u a4\n 42619: u64 [sp + 0x18] = a3\n 42622: a0 = a0 + a3\n 42625: u64 [sp + 0x38] = a0\n 42628: u64 [sp] = s1\n 42630: i32 a0 = s1 + 0\n 42632: a1 = 0x20\n 42635: s1 = 0x20\n 42638: ra = 544, jump @0\n      : @589 [@dyn 272] (gas: 45)\n 42645: u8 [a0 + 0x1f] = s1\n 42648: a1 = u64 [sp + 0x30]\n 42651: s1 = a1\n 42653: a1 = a1 | s0\n 42656: a2 = u64 [sp + 0x40]\n 42659: a4 = u64 [sp + 0x38]\n 42662: a2 = a2 | a4\n 42665: a1 = a1 | a2\n 42668: a1 = a1 >> 0x20\n 42671: u64 [sp + 0x20] = s0\n 42674: a2 = a2 | s0\n 42677: a2 = a2 << 0x20\n 42680: a1 = a1 | a2\n 42683: u8 [a0 + 30] = 0\n 42686: u8 [a0 + 29] = 0\n 42689: u8 [a0 + 28] = 0\n 42692: u8 [a0 + 27] = 0\n 42695: u8 [a0 + 26] = 0\n 42698: u8 [a0 + 25] = 0\n 42701: u8 [a0 + 24] = 0\n 42704: u8 [a0 + 23] = 0\n 42707: u8 [a0 + 22] = 0\n 42710: u8 [a0 + 21] = 0\n 42713: u8 [a0 + 20] = 0\n 42716: u8 [a0 + 19] = 0\n 42719: u8 [a0 + 18] = 0\n 42722: u8 [a0 + 17] = 0\n 42725: u8 [a0 + 16] = 0\n 42728: u8 [a0 + 15] = 0\n 42731: u8 [a0 + 14] = 0\n 42734: u8 [a0 + 13] = 0\n 42737: u8 [a0 + 12] = 0\n 42740: u8 [a0 + 11] = 0\n 42743: u8 [a0 + 10] = 0\n 42746: u8 [a0 + 9] = 0\n 42749: u8 [a0 + 8] = 0\n 42752: u8 [a0 + 7] = 0\n 42755: u8 [a0 + 6] = 0\n 42758: u8 [a0 + 5] = 0\n 42761: u8 [a0 + 4] = 0\n 42764: u8 [a0 + 3] = 0\n 42767: u8 [a0 + 2] = 0\n 42770: u8 [a0 + 1] = 0\n 42773: u8 [a0 + 0] = 0\n 42775: jump @594 if a1 != 0\n      : @590 (gas: 4)\n 42779: i32 s0 = s1 + 0\n 42781: a1 = 0x20\n 42784: a0 = s0\n 42786: ra = 546, jump @0\n      : @591 [@dyn 273] (gas: 41)\n 42793: u8 [a0 + 31] = 0x9\n 42797: u8 [a0 + 30] = 0\n 42800: u8 [a0 + 29] = 0\n 42803: u8 [a0 + 28] = 0\n 42806: u8 [a0 + 27] = 0\n 42809: u8 [a0 + 26] = 0\n 42812: u8 [a0 + 25] = 0\n 42815: u8 [a0 + 24] = 0\n 42818: u8 [a0 + 23] = 0\n 42821: u8 [a0 + 22] = 0\n 42824: u8 [a0 + 21] = 0\n 42827: u8 [a0 + 20] = 0\n 42830: u8 [a0 + 19] = 0\n 42833: u8 [a0 + 18] = 0\n 42836: u8 [a0 + 17] = 0\n 42839: u8 [a0 + 16] = 0\n 42842: u8 [a0 + 15] = 0\n 42845: u8 [a0 + 14] = 0\n 42848: u8 [a0 + 13] = 0\n 42851: u8 [a0 + 12] = 0\n 42854: u8 [a0 + 11] = 0\n 42857: u8 [a0 + 10] = 0\n 42860: u8 [a0 + 9] = 0\n 42863: u8 [a0 + 8] = 0\n 42866: u8 [a0 + 7] = 0\n 42869: u8 [a0 + 6] = 0\n 42872: u8 [a0 + 5] = 0\n 42875: u8 [a0 + 4] = 0\n 42878: u8 [a0 + 3] = 0\n 42881: u8 [a0 + 2] = 0\n 42884: u8 [a0 + 1] = 0\n 42887: a1 = u64 [sp + 0x20]\n 42890: a2 = u64 [sp + 0x38]\n 42893: a1 = a1 | a2\n 42896: a2 = 0xffffffe0\n 42906: a2 = s1 <u a2\n 42909: a3 = u64 [sp + 0x40]\n 42912: a2 = 0 if a3 != 0\n 42914: a2 = 0 if a1 != 0\n 42916: u8 [a0 + 0] = 0\n 42918: jump @594 if a2 == 0\n      : @592 (gas: 3)\n 42922: i32 a0 = s0 + 0x20\n 42925: a1 = 0x20\n 42928: ra = 548, jump @0\n      : @593 [@dyn 274] (gas: 54)\n 42935: u8 [a0 + 31] = 0\n 42938: u8 [a0 + 30] = 0\n 42941: u8 [a0 + 29] = 0\n 42944: u8 [a0 + 28] = 0\n 42947: u8 [a0 + 27] = 0\n 42950: u8 [a0 + 26] = 0\n 42953: u8 [a0 + 25] = 0\n 42956: u8 [a0 + 24] = 0\n 42959: u8 [a0 + 23] = 0\n 42962: u8 [a0 + 22] = 0\n 42965: u8 [a0 + 21] = 0\n 42968: u8 [a0 + 20] = 0\n 42971: u8 [a0 + 19] = 0\n 42974: u8 [a0 + 18] = 0\n 42977: u8 [a0 + 17] = 0\n 42980: u8 [a0 + 16] = 0\n 42983: u8 [a0 + 15] = 0\n 42986: u8 [a0 + 14] = 0\n 42989: u8 [a0 + 13] = 0\n 42992: u8 [a0 + 12] = 0\n 42995: u8 [a0 + 11] = 0\n 42998: u8 [a0 + 10] = 0\n 43001: u8 [a0 + 9] = 0\n 43004: u8 [a0 + 8] = 0x72\n 43008: u8 [a0 + 7] = 0x65\n 43012: u8 [a0 + 6] = 0x79\n 43016: u8 [a0 + 5] = 0x75\n 43020: u8 [a0 + 4] = 0x62\n 43024: u8 [a0 + 3] = 0x20\n 43028: u8 [a0 + 2] = 0x74\n 43032: u8 [a0 + 1] = 0x6f\n 43036: u8 [a0 + 0] = 0x6e\n 43039: a1 = u64 [sp]\n 43041: a0 = a1 + 0x60\n 43044: a1 = a0 <u a1\n 43047: a3 = u64 [sp + 0x8]\n 43050: a2 = a3 + a1\n 43053: a3 = a2 <u a3\n 43056: a3 = a1 if a1 == 0\n 43059: a1 = u64 [sp + 0x10]\n 43062: a3 = a3 + a1\n 43065: a1 = a3 <u a1\n 43068: a4 = u64 [sp + 0x18]\n 43071: a1 = a1 + a4\n 43074: a4 = u64 [sp + 0x28]\n 43077: u64 [a4] = a0\n 43079: u64 [a4 + 0x8] = a2\n 43082: u64 [a4 + 0x10] = a3\n 43085: u64 [a4 + 0x18] = a1\n 43088: ra = u64 [sp + 0x58]\n 43091: s0 = u64 [sp + 0x50]\n 43094: s1 = u64 [sp + 0x48]\n 43097: sp = sp + 0x60\n 43100: ret\n      : @594 (gas: 1)\n 43102: trap\n      : @595 (gas: 17)\n 43103: sp = sp + 0xffffffffffffffa0\n 43106: u64 [sp + 0x58] = ra\n 43109: u64 [sp + 0x50] = s0\n 43112: u64 [sp + 0x48] = s1\n 43115: a3 = u64 [a1 + 0x18]\n 43118: a4 = u64 [a1 + 0x10]\n 43121: a5 = u64 [a1 + 0x8]\n 43124: s1 = u64 [a1]\n 43126: a1 = a5 | a3\n 43129: a2 = s1 | a4\n 43132: a2 = a2 | a1\n 43135: a2 = a2 >> 0x20\n 43138: a1 = a1 | a4\n 43141: a1 = a1 << 0x20\n 43144: a1 = a1 | a2\n 43147: u64 [sp + 0x28] = a0\n 43150: jump @602 if a1 != 0\n      : @596 (gas: 19)\n 43154: a0 = s1 + 0x20\n 43157: u64 [sp + 0x30] = a0\n 43160: a0 = a0 <u s1\n 43163: a1 = a5 + a0\n 43166: u64 [sp + 0x40] = a1\n 43169: u64 [sp + 0x8] = a5\n 43172: s0 = a1 <u a5\n 43175: s0 = a0 if a0 == 0\n 43178: s0 = s0 + a4\n 43181: u64 [sp + 0x10] = a4\n 43184: a0 = s0 <u a4\n 43187: u64 [sp + 0x18] = a3\n 43190: a0 = a0 + a3\n 43193: u64 [sp + 0x38] = a0\n 43196: u64 [sp] = s1\n 43198: i32 a0 = s1 + 0\n 43200: a1 = 0x20\n 43203: s1 = 0x20\n 43206: ra = 550, jump @0\n      : @597 [@dyn 275] (gas: 45)\n 43213: u8 [a0 + 0x1f] = s1\n 43216: a1 = u64 [sp + 0x30]\n 43219: s1 = a1\n 43221: a1 = a1 | s0\n 43224: a2 = u64 [sp + 0x40]\n 43227: a4 = u64 [sp + 0x38]\n 43230: a2 = a2 | a4\n 43233: a1 = a1 | a2\n 43236: a1 = a1 >> 0x20\n 43239: u64 [sp + 0x20] = s0\n 43242: a2 = a2 | s0\n 43245: a2 = a2 << 0x20\n 43248: a1 = a1 | a2\n 43251: u8 [a0 + 30] = 0\n 43254: u8 [a0 + 29] = 0\n 43257: u8 [a0 + 28] = 0\n 43260: u8 [a0 + 27] = 0\n 43263: u8 [a0 + 26] = 0\n 43266: u8 [a0 + 25] = 0\n 43269: u8 [a0 + 24] = 0\n 43272: u8 [a0 + 23] = 0\n 43275: u8 [a0 + 22] = 0\n 43278: u8 [a0 + 21] = 0\n 43281: u8 [a0 + 20] = 0\n 43284: u8 [a0 + 19] = 0\n 43287: u8 [a0 + 18] = 0\n 43290: u8 [a0 + 17] = 0\n 43293: u8 [a0 + 16] = 0\n 43296: u8 [a0 + 15] = 0\n 43299: u8 [a0 + 14] = 0\n 43302: u8 [a0 + 13] = 0\n 43305: u8 [a0 + 12] = 0\n 43308: u8 [a0 + 11] = 0\n 43311: u8 [a0 + 10] = 0\n 43314: u8 [a0 + 9] = 0\n 43317: u8 [a0 + 8] = 0\n 43320: u8 [a0 + 7] = 0\n 43323: u8 [a0 + 6] = 0\n 43326: u8 [a0 + 5] = 0\n 43329: u8 [a0 + 4] = 0\n 43332: u8 [a0 + 3] = 0\n 43335: u8 [a0 + 2] = 0\n 43338: u8 [a0 + 1] = 0\n 43341: u8 [a0 + 0] = 0\n 43343: jump @602 if a1 != 0\n      : @598 (gas: 4)\n 43347: i32 s0 = s1 + 0\n 43349: a1 = 0x20\n 43352: a0 = s0\n 43354: ra = 552, jump @0\n      : @599 [@dyn 276] (gas: 41)\n 43361: u8 [a0 + 31] = 0x11\n 43365: u8 [a0 + 30] = 0\n 43368: u8 [a0 + 29] = 0\n 43371: u8 [a0 + 28] = 0\n 43374: u8 [a0 + 27] = 0\n 43377: u8 [a0 + 26] = 0\n 43380: u8 [a0 + 25] = 0\n 43383: u8 [a0 + 24] = 0\n 43386: u8 [a0 + 23] = 0\n 43389: u8 [a0 + 22] = 0\n 43392: u8 [a0 + 21] = 0\n 43395: u8 [a0 + 20] = 0\n 43398: u8 [a0 + 19] = 0\n 43401: u8 [a0 + 18] = 0\n 43404: u8 [a0 + 17] = 0\n 43407: u8 [a0 + 16] = 0\n 43410: u8 [a0 + 15] = 0\n 43413: u8 [a0 + 14] = 0\n 43416: u8 [a0 + 13] = 0\n 43419: u8 [a0 + 12] = 0\n 43422: u8 [a0 + 11] = 0\n 43425: u8 [a0 + 10] = 0\n 43428: u8 [a0 + 9] = 0\n 43431: u8 [a0 + 8] = 0\n 43434: u8 [a0 + 7] = 0\n 43437: u8 [a0 + 6] = 0\n 43440: u8 [a0 + 5] = 0\n 43443: u8 [a0 + 4] = 0\n 43446: u8 [a0 + 3] = 0\n 43449: u8 [a0 + 2] = 0\n 43452: u8 [a0 + 1] = 0\n 43455: a1 = u64 [sp + 0x20]\n 43458: a2 = u64 [sp + 0x38]\n 43461: a1 = a1 | a2\n 43464: a2 = 0xffffffe0\n 43474: a2 = s1 <u a2\n 43477: a3 = u64 [sp + 0x40]\n 43480: a2 = 0 if a3 != 0\n 43482: a2 = 0 if a1 != 0\n 43484: u8 [a0 + 0] = 0\n 43486: jump @602 if a2 == 0\n      : @600 (gas: 3)\n 43490: i32 a0 = s0 + 0x20\n 43493: a1 = 0x20\n 43496: ra = 554, jump @0\n      : @601 [@dyn 277] (gas: 55)\n 43503: u8 [a0 + 31] = 0\n 43506: u8 [a0 + 30] = 0\n 43509: u8 [a0 + 29] = 0\n 43512: u8 [a0 + 28] = 0\n 43515: u8 [a0 + 27] = 0\n 43518: u8 [a0 + 26] = 0\n 43521: u8 [a0 + 25] = 0\n 43524: u8 [a0 + 24] = 0\n 43527: u8 [a0 + 23] = 0\n 43530: u8 [a0 + 22] = 0\n 43533: u8 [a0 + 21] = 0\n 43536: u8 [a0 + 20] = 0\n 43539: u8 [a0 + 19] = 0\n 43542: u8 [a0 + 18] = 0\n 43545: u8 [a0 + 17] = 0\n 43548: u8 [a0 + 16] = 0x74\n 43552: u8 [a0 + 15] = 0x65\n 43556: u8 [a0 + 14] = 0x79\n 43560: a5 = 0x20\n 43563: u8 [a0 + 0xd] = a5\n 43566: u8 [a0 + 12] = 0x64\n 43570: u8 [a0 + 11] = 0x65\n 43574: u8 [a0 + 10] = 0x72\n 43578: u8 [a0 + 9] = 0x65\n 43582: u8 [a0 + 8] = 0x76\n 43586: u8 [a0 + 7] = 0x69\n 43590: u8 [a0 + 6] = 0x6c\n 43594: u8 [a0 + 5] = 0x65\n 43598: u8 [a0 + 4] = 0x64\n 43602: u8 [a0 + 0x3] = a5\n 43605: u8 [a0 + 2] = 0x74\n 43609: u8 [a0 + 1] = 0x6f\n 43613: u8 [a0 + 0] = 0x6e\n 43616: a1 = u64 [sp]\n 43618: a0 = a1 + 0x60\n 43621: a1 = a0 <u a1\n 43624: a3 = u64 [sp + 0x8]\n 43627: a2 = a3 + a1\n 43630: a3 = a2 <u a3\n 43633: a3 = a1 if a1 == 0\n 43636: a1 = u64 [sp + 0x10]\n 43639: a3 = a3 + a1\n 43642: a1 = a3 <u a1\n 43645: a4 = u64 [sp + 0x18]\n 43648: a1 = a1 + a4\n 43651: a4 = u64 [sp + 0x28]\n 43654: u64 [a4] = a0\n 43656: u64 [a4 + 0x8] = a2\n 43659: u64 [a4 + 0x10] = a3\n 43662: u64 [a4 + 0x18] = a1\n 43665: ra = u64 [sp + 0x58]\n 43668: s0 = u64 [sp + 0x50]\n 43671: s1 = u64 [sp + 0x48]\n 43674: sp = sp + 0x60\n 43677: ret\n      : @602 (gas: 1)\n 43679: trap\n      : @603 (gas: 17)\n 43680: sp = sp + 0xffffffffffffffa0\n 43683: u64 [sp + 0x58] = ra\n 43686: u64 [sp + 0x50] = s0\n 43689: u64 [sp + 0x48] = s1\n 43692: a3 = u64 [a1 + 0x18]\n 43695: a4 = u64 [a1 + 0x10]\n 43698: a5 = u64 [a1 + 0x8]\n 43701: s1 = u64 [a1]\n 43703: a1 = a5 | a3\n 43706: a2 = s1 | a4\n 43709: a2 = a2 | a1\n 43712: a2 = a2 >> 0x20\n 43715: a1 = a1 | a4\n 43718: a1 = a1 << 0x20\n 43721: a1 = a1 | a2\n 43724: u64 [sp + 0x28] = a0\n 43727: jump @610 if a1 != 0\n      : @604 (gas: 19)\n 43731: a0 = s1 + 0x20\n 43734: u64 [sp + 0x30] = a0\n 43737: a0 = a0 <u s1\n 43740: a1 = a5 + a0\n 43743: u64 [sp + 0x40] = a1\n 43746: u64 [sp + 0x8] = a5\n 43749: s0 = a1 <u a5\n 43752: s0 = a0 if a0 == 0\n 43755: s0 = s0 + a4\n 43758: u64 [sp + 0x10] = a4\n 43761: a0 = s0 <u a4\n 43764: u64 [sp + 0x18] = a3\n 43767: a0 = a0 + a3\n 43770: u64 [sp + 0x38] = a0\n 43773: u64 [sp] = s1\n 43775: i32 a0 = s1 + 0\n 43777: a1 = 0x20\n 43780: s1 = 0x20\n 43783: ra = 556, jump @0\n      : @605 [@dyn 278] (gas: 45)\n 43790: u8 [a0 + 0x1f] = s1\n 43793: a1 = u64 [sp + 0x30]\n 43796: s1 = a1\n 43798: a1 = a1 | s0\n 43801: a2 = u64 [sp + 0x40]\n 43804: a4 = u64 [sp + 0x38]\n 43807: a2 = a2 | a4\n 43810: a1 = a1 | a2\n 43813: a1 = a1 >> 0x20\n 43816: u64 [sp + 0x20] = s0\n 43819: a2 = a2 | s0\n 43822: a2 = a2 << 0x20\n 43825: a1 = a1 | a2\n 43828: u8 [a0 + 30] = 0\n 43831: u8 [a0 + 29] = 0\n 43834: u8 [a0 + 28] = 0\n 43837: u8 [a0 + 27] = 0\n 43840: u8 [a0 + 26] = 0\n 43843: u8 [a0 + 25] = 0\n 43846: u8 [a0 + 24] = 0\n 43849: u8 [a0 + 23] = 0\n 43852: u8 [a0 + 22] = 0\n 43855: u8 [a0 + 21] = 0\n 43858: u8 [a0 + 20] = 0\n 43861: u8 [a0 + 19] = 0\n 43864: u8 [a0 + 18] = 0\n 43867: u8 [a0 + 17] = 0\n 43870: u8 [a0 + 16] = 0\n 43873: u8 [a0 + 15] = 0\n 43876: u8 [a0 + 14] = 0\n 43879: u8 [a0 + 13] = 0\n 43882: u8 [a0 + 12] = 0\n 43885: u8 [a0 + 11] = 0\n 43888: u8 [a0 + 10] = 0\n 43891: u8 [a0 + 9] = 0\n 43894: u8 [a0 + 8] = 0\n 43897: u8 [a0 + 7] = 0\n 43900: u8 [a0 + 6] = 0\n 43903: u8 [a0 + 5] = 0\n 43906: u8 [a0 + 4] = 0\n 43909: u8 [a0 + 3] = 0\n 43912: u8 [a0 + 2] = 0\n 43915: u8 [a0 + 1] = 0\n 43918: u8 [a0 + 0] = 0\n 43920: jump @610 if a1 != 0\n      : @606 (gas: 4)\n 43924: i32 s0 = s1 + 0\n 43926: a1 = 0x20\n 43929: a0 = s0\n 43931: ra = 558, jump @0\n      : @607 [@dyn 279] (gas: 41)\n 43938: u8 [a0 + 31] = 0x10\n 43942: u8 [a0 + 30] = 0\n 43945: u8 [a0 + 29] = 0\n 43948: u8 [a0 + 28] = 0\n 43951: u8 [a0 + 27] = 0\n 43954: u8 [a0 + 26] = 0\n 43957: u8 [a0 + 25] = 0\n 43960: u8 [a0 + 24] = 0\n 43963: u8 [a0 + 23] = 0\n 43966: u8 [a0 + 22] = 0\n 43969: u8 [a0 + 21] = 0\n 43972: u8 [a0 + 20] = 0\n 43975: u8 [a0 + 19] = 0\n 43978: u8 [a0 + 18] = 0\n 43981: u8 [a0 + 17] = 0\n 43984: u8 [a0 + 16] = 0\n 43987: u8 [a0 + 15] = 0\n 43990: u8 [a0 + 14] = 0\n 43993: u8 [a0 + 13] = 0\n 43996: u8 [a0 + 12] = 0\n 43999: u8 [a0 + 11] = 0\n 44002: u8 [a0 + 10] = 0\n 44005: u8 [a0 + 9] = 0\n 44008: u8 [a0 + 8] = 0\n 44011: u8 [a0 + 7] = 0\n 44014: u8 [a0 + 6] = 0\n 44017: u8 [a0 + 5] = 0\n 44020: u8 [a0 + 4] = 0\n 44023: u8 [a0 + 3] = 0\n 44026: u8 [a0 + 2] = 0\n 44029: u8 [a0 + 1] = 0\n 44032: a1 = u64 [sp + 0x20]\n 44035: a2 = u64 [sp + 0x38]\n 44038: a1 = a1 | a2\n 44041: a2 = 0xffffffe0\n 44051: a2 = s1 <u a2\n 44054: a3 = u64 [sp + 0x40]\n 44057: a2 = 0 if a3 != 0\n 44059: a2 = 0 if a1 != 0\n 44061: u8 [a0 + 0] = 0\n 44063: jump @610 if a2 == 0\n      : @608 (gas: 3)\n 44067: i32 a0 = s0 + 0x20\n 44070: a1 = 0x20\n 44073: ra = 560, jump @0\n      : @609 [@dyn 280] (gas: 54)\n 44080: u8 [a0 + 31] = 0\n 44083: u8 [a0 + 30] = 0\n 44086: u8 [a0 + 29] = 0\n 44089: u8 [a0 + 28] = 0\n 44092: u8 [a0 + 27] = 0\n 44095: u8 [a0 + 26] = 0\n 44098: u8 [a0 + 25] = 0\n 44101: u8 [a0 + 24] = 0\n 44104: u8 [a0 + 23] = 0\n 44107: u8 [a0 + 22] = 0\n 44110: u8 [a0 + 21] = 0\n 44113: u8 [a0 + 20] = 0\n 44116: u8 [a0 + 19] = 0\n 44119: u8 [a0 + 18] = 0\n 44122: u8 [a0 + 17] = 0\n 44125: u8 [a0 + 16] = 0\n 44128: u8 [a0 + 15] = 0x64\n 44132: u8 [a0 + 14] = 0x65\n 44136: u8 [a0 + 13] = 0x74\n 44140: u8 [a0 + 12] = 0x75\n 44144: u8 [a0 + 11] = 0x70\n 44148: u8 [a0 + 10] = 0x73\n 44152: u8 [a0 + 9] = 0x69\n 44156: u8 [a0 + 8] = 0x64\n 44160: u8 [a0 + 7] = 0x20\n 44164: u8 [a0 + 6] = 0x79\n 44168: u8 [a0 + 5] = 0x64\n 44172: u8 [a0 + 4] = 0x61\n 44176: u8 [a0 + 3] = 0x65\n 44180: u8 [a0 + 2] = 0x72\n 44184: u8 [a0 + 1] = 0x6c\n 44188: u8 [a0 + 0] = 0x61\n 44191: a1 = u64 [sp]\n 44193: a0 = a1 + 0x60\n 44196: a1 = a0 <u a1\n 44199: a3 = u64 [sp + 0x8]\n 44202: a2 = a3 + a1\n 44205: a3 = a2 <u a3\n 44208: a3 = a1 if a1 == 0\n 44211: a1 = u64 [sp + 0x10]\n 44214: a3 = a3 + a1\n 44217: a1 = a3 <u a1\n 44220: a4 = u64 [sp + 0x18]\n 44223: a1 = a1 + a4\n 44226: a4 = u64 [sp + 0x28]\n 44229: u64 [a4] = a0\n 44231: u64 [a4 + 0x8] = a2\n 44234: u64 [a4 + 0x10] = a3\n 44237: u64 [a4 + 0x18] = a1\n 44240: ra = u64 [sp + 0x58]\n 44243: s0 = u64 [sp + 0x50]\n 44246: s1 = u64 [sp + 0x48]\n 44249: sp = sp + 0x60\n 44252: ret\n      : @610 (gas: 1)\n 44254: trap\n      : @611 [@dyn 281] (gas: 74)\n 44255: a2 = reverse s1\n 44257: a1 = u64 [sp + 0x48]\n 44260: a3 = reverse a1\n 44262: a1 = u64 [sp + 0x50]\n 44265: a5 = reverse a1\n 44267: a1 = u64 [sp + 0x58]\n 44270: a4 = reverse a1\n 44272: u8 [a0 + 0x18] = a4\n 44275: u8 [a0 + 0x10] = a5\n 44278: u8 [a0 + 0x8] = a3\n 44281: u8 [a0] = a2\n 44283: a1 = a4 >> 0x38\n 44286: u8 [a0 + 0x1f] = a1\n 44289: a1 = a4 >> 0x30\n 44292: u8 [a0 + 0x1e] = a1\n 44295: a1 = a4 >> 0x28\n 44298: u8 [a0 + 0x1d] = a1\n 44301: a1 = a4 >> 0x20\n 44304: u8 [a0 + 0x1c] = a1\n 44307: a1 = a4 >> 0x18\n 44310: u8 [a0 + 0x1b] = a1\n 44313: a1 = a4 >> 0x10\n 44316: u8 [a0 + 0x1a] = a1\n 44319: u64 [sp + 0x30] = a4\n 44322: a1 = a4 >> 0x8\n 44325: u8 [a0 + 0x19] = a1\n 44328: a1 = a5 >> 0x38\n 44331: u8 [a0 + 0x17] = a1\n 44334: a1 = a5 >> 0x30\n 44337: u8 [a0 + 0x16] = a1\n 44340: a1 = a5 >> 0x28\n 44343: u8 [a0 + 0x15] = a1\n 44346: a1 = a5 >> 0x20\n 44349: u8 [a0 + 0x14] = a1\n 44352: a1 = a5 >> 0x18\n 44355: u8 [a0 + 0x13] = a1\n 44358: a1 = a5 >> 0x10\n 44361: u8 [a0 + 0x12] = a1\n 44364: u64 [sp + 0x28] = a5\n 44367: a1 = a5 >> 0x8\n 44370: u8 [a0 + 0x11] = a1\n 44373: a1 = a3 >> 0x38\n 44376: u8 [a0 + 0xf] = a1\n 44379: a1 = a3 >> 0x30\n 44382: u8 [a0 + 0xe] = a1\n 44385: a1 = a3 >> 0x28\n 44388: u8 [a0 + 0xd] = a1\n 44391: a1 = a3 >> 0x20\n 44394: u8 [a0 + 0xc] = a1\n 44397: a1 = a3 >> 0x18\n 44400: u8 [a0 + 0xb] = a1\n 44403: a1 = a3 >> 0x10\n 44406: u8 [a0 + 0xa] = a1\n 44409: u64 [sp + 0x38] = a3\n 44412: a1 = a3 >> 0x8\n 44415: u8 [a0 + 0x9] = a1\n 44418: a1 = a2 >> 0x38\n 44421: u8 [a0 + 0x7] = a1\n 44424: a1 = a2 >> 0x30\n 44427: u8 [a0 + 0x6] = a1\n 44430: a1 = a2 >> 0x28\n 44433: u8 [a0 + 0x5] = a1\n 44436: a1 = a2 >> 0x20\n 44439: u8 [a0 + 0x4] = a1\n 44442: a1 = a2 >> 0x18\n 44445: u8 [a0 + 0x3] = a1\n 44448: a1 = a2 >> 0x10\n 44451: u8 [a0 + 0x2] = a1\n 44454: u64 [sp + 0x40] = a2\n 44457: a1 = a2 >> 0x8\n 44460: u8 [a0 + 0x1] = a1\n 44463: a0 = 0x20\n 44466: a1 = 0x20\n 44469: ra = 564, jump @0\n      : @612 [@dyn 282] (gas: 35)\n 44476: u8 [a0 + 31] = 0x3\n 44480: u8 [a0 + 30] = 0\n 44483: u8 [a0 + 29] = 0\n 44486: u8 [a0 + 28] = 0\n 44489: u8 [a0 + 27] = 0\n 44492: u8 [a0 + 26] = 0\n 44495: u8 [a0 + 25] = 0\n 44498: u8 [a0 + 24] = 0\n 44501: u8 [a0 + 23] = 0\n 44504: u8 [a0 + 22] = 0\n 44507: u8 [a0 + 21] = 0\n 44510: u8 [a0 + 20] = 0\n 44513: u8 [a0 + 19] = 0\n 44516: u8 [a0 + 18] = 0\n 44519: u8 [a0 + 17] = 0\n 44522: u8 [a0 + 16] = 0\n 44525: u8 [a0 + 15] = 0\n 44528: u8 [a0 + 14] = 0\n 44531: u8 [a0 + 13] = 0\n 44534: u8 [a0 + 12] = 0\n 44537: u8 [a0 + 11] = 0\n 44540: u8 [a0 + 10] = 0\n 44543: u8 [a0 + 9] = 0\n 44546: u8 [a0 + 8] = 0\n 44549: u8 [a0 + 7] = 0\n 44552: u8 [a0 + 6] = 0\n 44555: u8 [a0 + 5] = 0\n 44558: u8 [a0 + 4] = 0\n 44561: u8 [a0 + 3] = 0\n 44564: u8 [a0 + 2] = 0\n 44567: u8 [a0 + 1] = 0\n 44570: u8 [a0 + 0] = 0\n 44572: a1 = 0x40\n 44575: a0 = 0\n 44577: ra = 566, jump @0\n      : @613 [@dyn 283] (gas: 14)\n 44584: i32 a0 = a0 + 0\n 44586: i32 a2 = sp + 0x1a0\n 44590: a1 = 0x40\n 44593: ecalli 8 // 'hash_keccak_256'\n 44595: a0 = u64 [sp + 0x1a0]\n 44599: u64 [sp + 0x58] = a0\n 44602: a0 = u64 [sp + 0x1a8]\n 44606: u64 [sp + 0x50] = a0\n 44609: a0 = u64 [sp + 0x1b0]\n 44613: u64 [sp + 0x48] = a0\n 44616: s1 = u64 [sp + 0x1b8]\n 44620: a1 = 0x20\n 44623: a0 = 0\n 44625: ra = 568, jump @0\n      : @614 [@dyn 284] (gas: 75)\n 44632: a1 = u64 [sp + 0x60]\n 44635: a2 = reverse a1\n 44637: a1 = u64 [sp + 0x68]\n 44640: a3 = reverse a1\n 44642: a1 = u64 [sp + 0x70]\n 44645: a5 = reverse a1\n 44647: a1 = u64 [sp + 0x78]\n 44650: a4 = reverse a1\n 44652: a1 = a4 >> 0x38\n 44655: u8 [a0 + 0x1f] = a1\n 44658: a1 = a4 >> 0x30\n 44661: u8 [a0 + 0x1e] = a1\n 44664: a1 = a4 >> 0x28\n 44667: u8 [a0 + 0x1d] = a1\n 44670: a1 = a4 >> 0x20\n 44673: u8 [a0 + 0x1c] = a1\n 44676: a1 = a4 >> 0x18\n 44679: u8 [a0 + 0x1b] = a1\n 44682: a1 = a4 >> 0x10\n 44685: u8 [a0 + 0x1a] = a1\n 44688: a1 = a4 >> 0x8\n 44691: u8 [a0 + 0x19] = a1\n 44694: u64 [sp + 0x10] = a4\n 44697: u8 [a0 + 0x18] = a4\n 44700: a1 = a5 >> 0x38\n 44703: u8 [a0 + 0x17] = a1\n 44706: a1 = a5 >> 0x30\n 44709: u8 [a0 + 0x16] = a1\n 44712: a1 = a5 >> 0x28\n 44715: u8 [a0 + 0x15] = a1\n 44718: a1 = a5 >> 0x20\n 44721: u8 [a0 + 0x14] = a1\n 44724: a1 = a5 >> 0x18\n 44727: u8 [a0 + 0x13] = a1\n 44730: a1 = a5 >> 0x10\n 44733: u8 [a0 + 0x12] = a1\n 44736: a1 = a5 >> 0x8\n 44739: u8 [a0 + 0x11] = a1\n 44742: u64 [sp + 0x8] = a5\n 44745: u8 [a0 + 0x10] = a5\n 44748: a1 = a3 >> 0x38\n 44751: u8 [a0 + 0xf] = a1\n 44754: a1 = a3 >> 0x30\n 44757: u8 [a0 + 0xe] = a1\n 44760: a1 = a3 >> 0x28\n 44763: u8 [a0 + 0xd] = a1\n 44766: a1 = a3 >> 0x20\n 44769: u8 [a0 + 0xc] = a1\n 44772: a1 = a3 >> 0x18\n 44775: u8 [a0 + 0xb] = a1\n 44778: a1 = a3 >> 0x10\n 44781: u8 [a0 + 0xa] = a1\n 44784: a1 = a3 >> 0x8\n 44787: u8 [a0 + 0x9] = a1\n 44790: u64 [sp + 0x18] = a3\n 44793: u8 [a0 + 0x8] = a3\n 44796: a1 = a2 >> 0x38\n 44799: u8 [a0 + 0x7] = a1\n 44802: a1 = a2 >> 0x30\n 44805: u8 [a0 + 0x6] = a1\n 44808: a1 = a2 >> 0x28\n 44811: u8 [a0 + 0x5] = a1\n 44814: a1 = a2 >> 0x20\n 44817: u8 [a0 + 0x4] = a1\n 44820: a1 = a2 >> 0x18\n 44823: u8 [a0 + 0x3] = a1\n 44826: a1 = a2 >> 0x10\n 44829: u8 [a0 + 0x2] = a1\n 44832: a1 = a2 >> 0x8\n 44835: u8 [a0 + 0x1] = a1\n 44838: u64 [sp + 0x20] = a2\n 44841: u8 [a0] = a2\n 44843: a0 = 0x20\n 44846: a1 = 0x20\n 44849: ra = 570, jump @0\n      : @615 [@dyn 285] (gas: 66)\n 44856: a1 = s1 >> 0x38\n 44859: u8 [a0 + 0x1f] = a1\n 44862: a1 = s1 >> 0x30\n 44865: u8 [a0 + 0x1e] = a1\n 44868: a1 = s1 >> 0x28\n 44871: u8 [a0 + 0x1d] = a1\n 44874: a1 = s1 >> 0x20\n 44877: u8 [a0 + 0x1c] = a1\n 44880: a1 = s1 >> 0x18\n 44883: u8 [a0 + 0x1b] = a1\n 44886: a1 = s1 >> 0x10\n 44889: u8 [a0 + 0x1a] = a1\n 44892: a1 = s1 >> 0x8\n 44895: u8 [a0 + 0x19] = a1\n 44898: u8 [a0 + 0x18] = s1\n 44901: a2 = u64 [sp + 0x48]\n 44904: a1 = a2 >> 0x38\n 44907: u8 [a0 + 0x17] = a1\n 44910: a1 = a2 >> 0x30\n 44913: u8 [a0 + 0x16] = a1\n 44916: a1 = a2 >> 0x28\n 44919: u8 [a0 + 0x15] = a1\n 44922: a1 = a2 >> 0x20\n 44925: u8 [a0 + 0x14] = a1\n 44928: a1 = a2 >> 0x18\n 44931: u8 [a0 + 0x13] = a1\n 44934: a1 = a2 >> 0x10\n 44937: u8 [a0 + 0x12] = a1\n 44940: a1 = a2 >> 0x8\n 44943: u8 [a0 + 0x11] = a1\n 44946: u8 [a0 + 0x10] = a2\n 44949: a2 = u64 [sp + 0x50]\n 44952: a1 = a2 >> 0x38\n 44955: u8 [a0 + 0xf] = a1\n 44958: a1 = a2 >> 0x30\n 44961: u8 [a0 + 0xe] = a1\n 44964: a1 = a2 >> 0x28\n 44967: u8 [a0 + 0xd] = a1\n 44970: a1 = a2 >> 0x20\n 44973: u8 [a0 + 0xc] = a1\n 44976: a1 = a2 >> 0x18\n 44979: u8 [a0 + 0xb] = a1\n 44982: a1 = a2 >> 0x10\n 44985: u8 [a0 + 0xa] = a1\n 44988: a1 = a2 >> 0x8\n 44991: u8 [a0 + 0x9] = a1\n 44994: u8 [a0 + 0x8] = a2\n 44997: a2 = u64 [sp + 0x58]\n 45000: a1 = a2 >> 0x38\n 45003: u8 [a0 + 0x7] = a1\n 45006: a1 = a2 >> 0x30\n 45009: u8 [a0 + 0x6] = a1\n 45012: a1 = a2 >> 0x28\n 45015: u8 [a0 + 0x5] = a1\n 45018: a1 = a2 >> 0x20\n 45021: u8 [a0 + 0x4] = a1\n 45024: a1 = a2 >> 0x18\n 45027: u8 [a0 + 0x3] = a1\n 45030: a1 = a2 >> 0x10\n 45033: u8 [a0 + 0x2] = a1\n 45036: a1 = a2 >> 0x8\n 45039: u8 [a0 + 0x1] = a1\n 45042: u8 [a0] = a2\n 45044: a1 = 0x40\n 45047: a0 = 0\n 45049: ra = 572, jump @0\n      : @616 [@dyn 286] (gas: 53)\n 45056: i32 a0 = a0 + 0\n 45058: i32 a2 = sp + 0x1a0\n 45062: a1 = 0x40\n 45065: ecalli 8 // 'hash_keccak_256'\n 45067: a0 = u64 [sp + 0x1b8]\n 45071: a1 = u64 [sp + 0x1b0]\n 45075: a2 = u64 [sp + 0x1a8]\n 45079: a3 = u64 [sp + 0x1a0]\n 45083: a0 = reverse a0\n 45085: u64 [sp + 0x70] = a0\n 45088: a0 = reverse a1\n 45090: u64 [sp + 0x50] = a0\n 45093: a0 = reverse a2\n 45095: u64 [sp + 0x78] = a0\n 45098: s1 = reverse a3\n 45100: i32 a0 = sp + 0x140\n 45104: ecalli 4 // 'caller'\n 45106: a0 = u64 [sp + 0x148]\n 45110: a1 = u64 [sp + 0x140]\n 45114: a2 = i32 [sp + 0x150]\n 45118: a0 = reverse a0\n 45120: a3 = a0 >> 0x20\n 45123: a1 = reverse a1\n 45125: a4 = a1 << 0x20\n 45128: a3 = a3 | a4\n 45131: u64 [sp + 0x68] = a3\n 45134: a0 = a0 << 0x20\n 45137: a2 = reverse a2\n 45139: a2 = a2 >> 0x20\n 45142: a0 = a0 | a2\n 45145: u64 [sp + 0x60] = a0\n 45148: a1 = a1 >> 0x20\n 45151: u64 [sp + 0x58] = a1\n 45154: u64 [sp + 0x48] = s1\n 45157: u64 [sp + 0x198] = s1\n 45161: s1 = u64 [sp + 0x50]\n 45164: a0 = u64 [sp + 0x78]\n 45167: u64 [sp + 0x190] = a0\n 45171: u64 [sp + 0x188] = s1\n 45175: a0 = u64 [sp + 0x70]\n 45178: u64 [sp + 0x180] = a0\n 45182: u64 [sp + 440] = 0\n 45186: u64 [sp + 432] = 0\n 45190: u64 [sp + 424] = 0\n 45194: u64 [sp + 416] = 0\n 45198: u32 [sp + 352] = 0x20\n 45203: i32 a1 = sp + 0x180\n 45207: i32 a3 = sp + 0x1a0\n 45211: i32 a4 = sp + 0x160\n 45215: a2 = 0xffffffffffffffff\n 45218: a0 = 0\n 45220: ecalli 7 // 'get_storage'\n 45222: fallthrough\n      : @617 (gas: 12)\n 45223: a0 = u32 [sp + 0x1b0]\n 45227: a1 = u64 [sp + 0x1a0]\n 45231: a2 = u64 [sp + 0x1a8]\n 45235: a3 = u64 [sp + 0x58]\n 45238: a0 = a0 ^ a3\n 45241: a3 = u64 [sp + 0x60]\n 45244: a1 = a1 ^ a3\n 45247: a0 = a0 | a1\n 45250: a1 = u64 [sp + 0x68]\n 45253: a1 = a1 ^ a2\n 45256: a0 = a0 | a1\n 45259: jump @626 if a0 != 0\n      : @618 (gas: 31)\n 45263: a0 = u64 [sp + 0x70]\n 45266: a1 = a0 + 0x2\n 45269: a0 = a1 <u a0\n 45272: a2 = s1 + a0\n 45275: s1 = a2 <u s1\n 45278: s1 = a0 if a0 == 0\n 45281: a0 = u64 [sp + 0x78]\n 45284: a3 = a0 + s1\n 45287: s1 = a2\n 45289: a0 = a3 <u a0\n 45292: a2 = u64 [sp + 0x48]\n 45295: a0 = a0 + a2\n 45298: u64 [sp + 0x78] = a1\n 45301: u64 [sp + 0x180] = a1\n 45305: u64 [sp + 0x188] = s1\n 45309: u64 [sp + 0x70] = a3\n 45312: u64 [sp + 0x190] = a3\n 45316: u64 [sp + 0x68] = a0\n 45319: u64 [sp + 0x198] = a0\n 45323: u64 [sp + 440] = 0\n 45327: u64 [sp + 432] = 0\n 45331: u64 [sp + 424] = 0\n 45335: u64 [sp + 416] = 0\n 45339: u32 [sp + 352] = 0x20\n 45344: i32 a1 = sp + 0x180\n 45348: i32 a3 = sp + 0x1a0\n 45352: i32 a4 = sp + 0x160\n 45356: a2 = 0xffffffffffffffff\n 45359: a0 = 0\n 45361: ecalli 7 // 'get_storage'\n 45363: fallthrough\n      : @619 (gas: 2)\n 45364: a0 = u8 [sp + 0x1a0]\n 45368: jump @631 if a0 == 0\n      : @620 (gas: 19)\n 45372: a0 = u64 [sp + 0x70]\n 45375: u64 [sp + 0x190] = a0\n 45379: u64 [sp + 0x188] = s1\n 45383: a0 = u64 [sp + 0x78]\n 45386: u64 [sp + 0x180] = a0\n 45390: a0 = u64 [sp + 0x68]\n 45393: u64 [sp + 0x198] = a0\n 45397: u64 [sp + 440] = 0\n 45401: u64 [sp + 432] = 0\n 45405: u64 [sp + 424] = 0\n 45409: u64 [sp + 416] = 0\n 45413: u32 [sp + 352] = 0x20\n 45418: i32 a1 = sp + 0x180\n 45422: i32 a3 = sp + 0x1a0\n 45426: i32 a4 = sp + 0x160\n 45430: a2 = 0xffffffffffffffff\n 45433: a0 = 0\n 45435: ecalli 7 // 'get_storage'\n 45437: fallthrough\n      : @621 (gas: 2)\n 45438: a0 = u8 [sp + 0x1a1]\n 45442: jump @636 if a0 != 0\n      : @622 (gas: 45)\n 45446: a0 = u64 [sp + 0x70]\n 45449: u64 [sp + 0x190] = a0\n 45453: u64 [sp + 0x188] = s1\n 45457: u64 [sp + 0x60] = s1\n 45460: a0 = u64 [sp + 0x78]\n 45463: u64 [sp + 0x180] = a0\n 45467: s1 = u64 [sp + 0x68]\n 45470: u64 [sp + 0x198] = s1\n 45474: u64 [sp + 440] = 0\n 45478: u64 [sp + 432] = 0\n 45482: u64 [sp + 424] = 0\n 45486: u64 [sp + 416] = 0\n 45490: u32 [sp + 352] = 0x20\n 45495: i32 a1 = sp + 0x180\n 45499: i32 a3 = sp + 0x1a0\n 45503: i32 a4 = sp + 0x160\n 45507: a2 = 0xffffffffffffffff\n 45510: a0 = 0\n 45512: ecalli 7 // 'get_storage'\n 45514: a0 = u64 [sp + 0x1a8]\n 45518: a1 = u64 [sp + 0x1b0]\n 45522: a2 = u64 [sp + 0x1a0]\n 45526: a3 = u64 [sp + 0x1b8]\n 45530: a2 = a2 & 0xffffffffffff00ff\n 45535: a2 = a2 | 0x100\n 45539: u64 [sp + 0x198] = s1\n 45543: a4 = u64 [sp + 0x70]\n 45546: u64 [sp + 0x190] = a4\n 45550: a4 = u64 [sp + 0x60]\n 45553: u64 [sp + 0x188] = a4\n 45557: a4 = u64 [sp + 0x78]\n 45560: u64 [sp + 0x180] = a4\n 45564: u64 [sp + 0x1b8] = a3\n 45568: u64 [sp + 0x1b0] = a1\n 45572: u64 [sp + 0x1a8] = a0\n 45576: u64 [sp + 0x1a0] = a2\n 45580: i32 a1 = sp + 0x180\n 45584: i32 a3 = sp + 0x1a0\n 45588: a2 = 0xffffffffffffffff\n 45591: a4 = 0x20\n 45594: a0 = 0\n 45596: ecalli 14 // 'set_storage'\n 45598: a0 = 0x40\n 45601: a1 = 0x20\n 45604: ra = 574, jump @0\n      : @623 [@dyn 287] (gas: 100)\n 45611: a1 = u8 [a0 + 0x11]\n 45614: a2 = u8 [a0 + 0x10]\n 45617: a3 = u8 [a0 + 0x12]\n 45620: a4 = u8 [a0 + 0x13]\n 45623: a1 = a1 << 0x8\n 45626: a1 = a1 | a2\n 45629: a3 = a3 << 0x10\n 45632: a4 = a4 << 0x18\n 45635: a3 = a3 | a4\n 45638: a1 = a1 | a3\n 45641: a2 = u8 [a0 + 0x15]\n 45644: a3 = u8 [a0 + 0x14]\n 45647: a4 = u8 [a0 + 0x16]\n 45650: a5 = u8 [a0 + 0x17]\n 45653: a2 = a2 << 0x8\n 45656: a2 = a2 | a3\n 45659: a4 = a4 << 0x10\n 45662: a5 = a5 << 0x18\n 45665: a4 = a4 | a5\n 45668: a2 = a2 | a4\n 45671: a2 = a2 << 0x20\n 45674: t0 = a2 | a1\n 45677: a2 = u8 [a0 + 0x1]\n 45680: a3 = u8 [a0]\n 45682: a4 = u8 [a0 + 0x2]\n 45685: a5 = u8 [a0 + 0x3]\n 45688: a2 = a2 << 0x8\n 45691: a2 = a2 | a3\n 45694: a4 = a4 << 0x10\n 45697: a5 = a5 << 0x18\n 45700: a4 = a4 | a5\n 45703: a2 = a2 | a4\n 45706: a3 = u8 [a0 + 0x5]\n 45709: a4 = u8 [a0 + 0x4]\n 45712: a5 = u8 [a0 + 0x6]\n 45715: s1 = u8 [a0 + 0x7]\n 45718: a3 = a3 << 0x8\n 45721: a3 = a3 | a4\n 45724: a5 = a5 << 0x10\n 45727: s1 = s1 << 0x18\n 45730: a5 = a5 | s1\n 45733: a3 = a3 | a5\n 45736: a3 = a3 << 0x20\n 45739: a2 = a2 | a3\n 45742: a3 = u8 [a0 + 0x19]\n 45745: a4 = u8 [a0 + 0x18]\n 45748: a5 = u8 [a0 + 0x1a]\n 45751: s1 = u8 [a0 + 0x1b]\n 45754: a3 = a3 << 0x8\n 45757: a3 = a3 | a4\n 45760: a5 = a5 << 0x10\n 45763: s1 = s1 << 0x18\n 45766: a5 = a5 | s1\n 45769: a3 = a3 | a5\n 45772: a4 = u8 [a0 + 0x1d]\n 45775: a5 = u8 [a0 + 0x1c]\n 45778: s1 = u8 [a0 + 0x1e]\n 45781: a1 = u8 [a0 + 0x1f]\n 45784: a4 = a4 << 0x8\n 45787: a4 = a4 | a5\n 45790: s1 = s1 << 0x10\n 45793: a1 = a1 << 0x18\n 45796: a1 = a1 | s1\n 45799: a1 = a1 | a4\n 45802: a1 = a1 << 0x20\n 45805: a3 = a3 | a1\n 45808: a1 = u8 [a0 + 0x9]\n 45811: a4 = u8 [a0 + 0x8]\n 45814: a5 = u8 [a0 + 0xa]\n 45817: s1 = u8 [a0 + 0xb]\n 45820: a1 = a1 << 0x8\n 45823: a1 = a1 | a4\n 45826: a5 = a5 << 0x10\n 45829: s1 = s1 << 0x18\n 45832: a5 = a5 | s1\n 45835: a1 = a1 | a5\n 45838: a4 = u8 [a0 + 0xd]\n 45841: a5 = u8 [a0 + 0xc]\n 45844: s1 = u8 [a0 + 0xe]\n 45847: a0 = u8 [a0 + 0xf]\n 45850: a4 = a4 << 0x8\n 45853: a4 = a4 | a5\n 45856: s1 = s1 << 0x10\n 45859: a0 = a0 << 0x18\n 45862: a0 = a0 | s1\n 45865: a0 = a0 | a4\n 45868: a0 = a0 << 0x20\n 45871: a0 = a0 | a1\n 45874: a1 = reverse a0\n 45876: a0 = reverse a3\n 45878: a2 = reverse a2\n 45880: a3 = reverse t0\n 45882: a2 = a2 | a3\n 45885: a3 = a0 | a1\n 45888: a3 = a3 | a2\n 45891: a3 = a3 >> 0x20\n 45894: a1 = a1 | a2\n 45897: a1 = a1 << 0x20\n 45900: a1 = a1 | a3\n 45903: jump @642 if a1 != 0\n      : @624 (gas: 2)\n 45907: i32 a0 = a0 + 0\n 45909: ra = 576, jump @0\n      : @625 [@dyn 288] (gas: 35)\n 45916: a1 = u64 [0x20040]\n 45921: a2 = u64 [0x20048]\n 45926: a3 = u64 [0x20050]\n 45931: a4 = u64 [0x20058]\n 45936: u64 [sp + 0x1b8] = a1\n 45940: u64 [sp + 0x1b0] = a2\n 45944: u64 [sp + 0x1a8] = a3\n 45948: u64 [sp + 0x1a0] = a4\n 45952: a1 = u64 [sp + 0x28]\n 45955: u64 [sp + 0x1d0] = a1\n 45959: a1 = u64 [sp + 0x38]\n 45962: u64 [sp + 0x1c8] = a1\n 45966: a1 = u64 [sp + 0x40]\n 45969: u64 [sp + 0x1c0] = a1\n 45973: a1 = u64 [sp + 0x30]\n 45976: u64 [sp + 0x1d8] = a1\n 45980: a1 = u64 [sp + 0x8]\n 45983: u64 [sp + 0x1f0] = a1\n 45987: a1 = u64 [sp + 0x18]\n 45990: u64 [sp + 0x1e8] = a1\n 45994: a1 = u64 [sp + 0x20]\n 45997: u64 [sp + 0x1e0] = a1\n 46001: a1 = u64 [sp + 0x10]\n 46004: u64 [sp + 0x1f8] = a1\n 46008: i32 a2 = a0 + 0\n 46010: i32 a0 = sp + 0x1a0\n 46014: a1 = 0x3\n 46017: a3 = 0\n 46019: ecalli 5 // 'deposit_event'\n 46021: sp = s0 + 0xfffffffffffffde0\n 46025: ra = u64 [sp + 0x218]\n 46029: s0 = u64 [sp + 0x210]\n 46033: s1 = u64 [sp + 0x208]\n 46037: sp = sp + 0x220\n 46041: ret\n      : @626 (gas: 3)\n 46043: a0 = 0x40\n 46046: a1 = 0x20\n 46049: ra = 578, jump @0\n      : @627 [@dyn 289] (gas: 103)\n 46056: a1 = u8 [a0 + 0x11]\n 46059: a2 = u8 [a0 + 0x10]\n 46062: a3 = u8 [a0 + 0x12]\n 46065: a4 = u8 [a0 + 0x13]\n 46068: a1 = a1 << 0x8\n 46071: a1 = a1 | a2\n 46074: a3 = a3 << 0x10\n 46077: a4 = a4 << 0x18\n 46080: a3 = a3 | a4\n 46083: a1 = a1 | a3\n 46086: a2 = u8 [a0 + 0x15]\n 46089: a3 = u8 [a0 + 0x14]\n 46092: a4 = u8 [a0 + 0x16]\n 46095: a5 = u8 [a0 + 0x17]\n 46098: a2 = a2 << 0x8\n 46101: a2 = a2 | a3\n 46104: a4 = a4 << 0x10\n 46107: a5 = a5 << 0x18\n 46110: a4 = a4 | a5\n 46113: a2 = a2 | a4\n 46116: a2 = a2 << 0x20\n 46119: t0 = a2 | a1\n 46122: a2 = u8 [a0 + 0x1]\n 46125: a3 = u8 [a0]\n 46127: a4 = u8 [a0 + 0x2]\n 46130: a5 = u8 [a0 + 0x3]\n 46133: a2 = a2 << 0x8\n 46136: a2 = a2 | a3\n 46139: a4 = a4 << 0x10\n 46142: a5 = a5 << 0x18\n 46145: a4 = a4 | a5\n 46148: a2 = a2 | a4\n 46151: a3 = u8 [a0 + 0x5]\n 46154: a4 = u8 [a0 + 0x4]\n 46157: a5 = u8 [a0 + 0x6]\n 46160: s1 = u8 [a0 + 0x7]\n 46163: a3 = a3 << 0x8\n 46166: a3 = a3 | a4\n 46169: a5 = a5 << 0x10\n 46172: s1 = s1 << 0x18\n 46175: a5 = a5 | s1\n 46178: a3 = a3 | a5\n 46181: a3 = a3 << 0x20\n 46184: a2 = a2 | a3\n 46187: a3 = u8 [a0 + 0x19]\n 46190: a4 = u8 [a0 + 0x18]\n 46193: a5 = u8 [a0 + 0x1a]\n 46196: s1 = u8 [a0 + 0x1b]\n 46199: a3 = a3 << 0x8\n 46202: a3 = a3 | a4\n 46205: a5 = a5 << 0x10\n 46208: s1 = s1 << 0x18\n 46211: a5 = a5 | s1\n 46214: a3 = a3 | a5\n 46217: a4 = u8 [a0 + 0x1d]\n 46220: a5 = u8 [a0 + 0x1c]\n 46223: s1 = u8 [a0 + 0x1e]\n 46226: a1 = u8 [a0 + 0x1f]\n 46229: a4 = a4 << 0x8\n 46232: a4 = a4 | a5\n 46235: s1 = s1 << 0x10\n 46238: a1 = a1 << 0x18\n 46241: a1 = a1 | s1\n 46244: a1 = a1 | a4\n 46247: a1 = a1 << 0x20\n 46250: a3 = a3 | a1\n 46253: a1 = u8 [a0 + 0x9]\n 46256: a4 = u8 [a0 + 0x8]\n 46259: a5 = u8 [a0 + 0xa]\n 46262: s1 = u8 [a0 + 0xb]\n 46265: a1 = a1 << 0x8\n 46268: a1 = a1 | a4\n 46271: a5 = a5 << 0x10\n 46274: s1 = s1 << 0x18\n 46277: a5 = a5 | s1\n 46280: a1 = a1 | a5\n 46283: a4 = u8 [a0 + 0xd]\n 46286: a5 = u8 [a0 + 0xc]\n 46289: s1 = u8 [a0 + 0xe]\n 46292: a0 = u8 [a0 + 0xf]\n 46295: a4 = a4 << 0x8\n 46298: a4 = a4 | a5\n 46301: s1 = s1 << 0x10\n 46304: a0 = a0 << 0x18\n 46307: a0 = a0 | s1\n 46310: a0 = a0 | a4\n 46313: a0 = a0 << 0x20\n 46316: a0 = a0 | a1\n 46319: s1 = reverse a0\n 46321: a1 = reverse a3\n 46323: a2 = reverse a2\n 46325: a0 = reverse t0\n 46327: u64 [sp + 0x78] = a0\n 46330: u64 [sp + 0x70] = a2\n 46333: a0 = a0 | a2\n 46336: a2 = a1\n 46338: a1 = a1 | s1\n 46341: a1 = a1 | a0\n 46344: a1 = a1 >> 0x20\n 46347: a0 = a0 | s1\n 46350: a0 = a0 << 0x20\n 46353: a0 = a0 | a1\n 46356: jump @642 if a0 != 0\n      : @628 (gas: 5)\n 46360: u64 [sp + 0x68] = a2\n 46363: i32 a0 = a2 + 0\n 46365: a1 = 0x20\n 46368: u64 [sp + 0x60] = a0\n 46371: ra = 580, jump @0\n      : @629 [@dyn 290] (gas: 50)\n 46378: u8 [a0 + 31] = 0\n 46381: u8 [a0 + 30] = 0\n 46384: u8 [a0 + 29] = 0\n 46387: u8 [a0 + 28] = 0\n 46390: u8 [a0 + 27] = 0\n 46393: u8 [a0 + 26] = 0\n 46396: u8 [a0 + 25] = 0\n 46399: u8 [a0 + 24] = 0\n 46402: u8 [a0 + 23] = 0\n 46405: u8 [a0 + 22] = 0\n 46408: u8 [a0 + 21] = 0\n 46411: u8 [a0 + 20] = 0\n 46414: u8 [a0 + 19] = 0\n 46417: u8 [a0 + 18] = 0\n 46420: u8 [a0 + 17] = 0\n 46423: u8 [a0 + 16] = 0\n 46426: u8 [a0 + 15] = 0\n 46429: u8 [a0 + 14] = 0\n 46432: u8 [a0 + 13] = 0\n 46435: u8 [a0 + 12] = 0\n 46438: u8 [a0 + 11] = 0\n 46441: u8 [a0 + 10] = 0\n 46444: u8 [a0 + 9] = 0\n 46447: u8 [a0 + 8] = 0\n 46450: u8 [a0 + 7] = 0\n 46453: u8 [a0 + 6] = 0\n 46456: u8 [a0 + 5] = 0\n 46459: u8 [a0 + 4] = 0\n 46462: u8 [a0 + 3] = 0xa0\n 46467: u8 [a0 + 2] = 0x79\n 46471: u8 [a0 + 1] = 0xc3\n 46476: u8 [a0 + 0] = 0x8\n 46479: a1 = u64 [sp + 0x68]\n 46482: a0 = a1 + 0x4\n 46485: a1 = a0 <u a1\n 46488: a3 = u64 [sp + 0x78]\n 46491: a2 = a3 + a1\n 46494: a3 = a2 <u a3\n 46497: a3 = a1 if a1 == 0\n 46500: a3 = a3 + s1\n 46503: a1 = a3 <u s1\n 46506: a4 = u64 [sp + 0x70]\n 46509: a4 = a4 + a1\n 46512: u64 [sp + 0x108] = a2\n 46516: u64 [sp + 0x100] = a0\n 46520: u64 [sp + 0x110] = a3\n 46524: a0 = sp + 0x120\n 46528: a1 = sp + 0x100\n 46532: u64 [sp + 0x118] = a4\n 46536: ra = 582, jump @587\n      : @630 [@dyn 291] (gas: 5)\n 46542: a0 = u64 [sp + 0x128]\n 46546: t0 = u64 [sp + 0x138]\n 46550: t1 = u64 [sp + 0x120]\n 46554: a3 = u64 [sp + 0x130]\n 46558: jump @641\n      : @631 (gas: 3)\n 46561: a0 = 0x40\n 46564: a1 = 0x20\n 46567: ra = 584, jump @0\n      : @632 [@dyn 292] (gas: 103)\n 46574: a1 = u8 [a0 + 0x11]\n 46577: a2 = u8 [a0 + 0x10]\n 46580: a3 = u8 [a0 + 0x12]\n 46583: a4 = u8 [a0 + 0x13]\n 46586: a1 = a1 << 0x8\n 46589: a1 = a1 | a2\n 46592: a3 = a3 << 0x10\n 46595: a4 = a4 << 0x18\n 46598: a3 = a3 | a4\n 46601: a1 = a1 | a3\n 46604: a2 = u8 [a0 + 0x15]\n 46607: a3 = u8 [a0 + 0x14]\n 46610: a4 = u8 [a0 + 0x16]\n 46613: a5 = u8 [a0 + 0x17]\n 46616: a2 = a2 << 0x8\n 46619: a2 = a2 | a3\n 46622: a4 = a4 << 0x10\n 46625: a5 = a5 << 0x18\n 46628: a4 = a4 | a5\n 46631: a2 = a2 | a4\n 46634: a2 = a2 << 0x20\n 46637: t0 = a2 | a1\n 46640: a2 = u8 [a0 + 0x1]\n 46643: a3 = u8 [a0]\n 46645: a4 = u8 [a0 + 0x2]\n 46648: a5 = u8 [a0 + 0x3]\n 46651: a2 = a2 << 0x8\n 46654: a2 = a2 | a3\n 46657: a4 = a4 << 0x10\n 46660: a5 = a5 << 0x18\n 46663: a4 = a4 | a5\n 46666: a2 = a2 | a4\n 46669: a3 = u8 [a0 + 0x5]\n 46672: a4 = u8 [a0 + 0x4]\n 46675: a5 = u8 [a0 + 0x6]\n 46678: s1 = u8 [a0 + 0x7]\n 46681: a3 = a3 << 0x8\n 46684: a3 = a3 | a4\n 46687: a5 = a5 << 0x10\n 46690: s1 = s1 << 0x18\n 46693: a5 = a5 | s1\n 46696: a3 = a3 | a5\n 46699: a3 = a3 << 0x20\n 46702: a2 = a2 | a3\n 46705: a3 = u8 [a0 + 0x19]\n 46708: a4 = u8 [a0 + 0x18]\n 46711: a5 = u8 [a0 + 0x1a]\n 46714: s1 = u8 [a0 + 0x1b]\n 46717: a3 = a3 << 0x8\n 46720: a3 = a3 | a4\n 46723: a5 = a5 << 0x10\n 46726: s1 = s1 << 0x18\n 46729: a5 = a5 | s1\n 46732: a3 = a3 | a5\n 46735: a4 = u8 [a0 + 0x1d]\n 46738: a5 = u8 [a0 + 0x1c]\n 46741: s1 = u8 [a0 + 0x1e]\n 46744: a1 = u8 [a0 + 0x1f]\n 46747: a4 = a4 << 0x8\n 46750: a4 = a4 | a5\n 46753: s1 = s1 << 0x10\n 46756: a1 = a1 << 0x18\n 46759: a1 = a1 | s1\n 46762: a1 = a1 | a4\n 46765: a1 = a1 << 0x20\n 46768: a3 = a3 | a1\n 46771: a1 = u8 [a0 + 0x9]\n 46774: a4 = u8 [a0 + 0x8]\n 46777: a5 = u8 [a0 + 0xa]\n 46780: s1 = u8 [a0 + 0xb]\n 46783: a1 = a1 << 0x8\n 46786: a1 = a1 | a4\n 46789: a5 = a5 << 0x10\n 46792: s1 = s1 << 0x18\n 46795: a5 = a5 | s1\n 46798: a1 = a1 | a5\n 46801: a4 = u8 [a0 + 0xd]\n 46804: a5 = u8 [a0 + 0xc]\n 46807: s1 = u8 [a0 + 0xe]\n 46810: a0 = u8 [a0 + 0xf]\n 46813: a4 = a4 << 0x8\n 46816: a4 = a4 | a5\n 46819: s1 = s1 << 0x10\n 46822: a0 = a0 << 0x18\n 46825: a0 = a0 | s1\n 46828: a0 = a0 | a4\n 46831: a0 = a0 << 0x20\n 46834: a0 = a0 | a1\n 46837: s1 = reverse a0\n 46839: a1 = reverse a3\n 46841: a2 = reverse a2\n 46843: a0 = reverse t0\n 46845: u64 [sp + 0x78] = a0\n 46848: u64 [sp + 0x70] = a2\n 46851: a0 = a0 | a2\n 46854: a2 = a1\n 46856: a1 = a1 | s1\n 46859: a1 = a1 | a0\n 46862: a1 = a1 >> 0x20\n 46865: a0 = a0 | s1\n 46868: a0 = a0 << 0x20\n 46871: a0 = a0 | a1\n 46874: jump @642 if a0 != 0\n      : @633 (gas: 5)\n 46878: u64 [sp + 0x68] = a2\n 46881: i32 a0 = a2 + 0\n 46883: a1 = 0x20\n 46886: u64 [sp + 0x60] = a0\n 46889: ra = 586, jump @0\n      : @634 [@dyn 293] (gas: 50)\n 46896: u8 [a0 + 31] = 0\n 46899: u8 [a0 + 30] = 0\n 46902: u8 [a0 + 29] = 0\n 46905: u8 [a0 + 28] = 0\n 46908: u8 [a0 + 27] = 0\n 46911: u8 [a0 + 26] = 0\n 46914: u8 [a0 + 25] = 0\n 46917: u8 [a0 + 24] = 0\n 46920: u8 [a0 + 23] = 0\n 46923: u8 [a0 + 22] = 0\n 46926: u8 [a0 + 21] = 0\n 46929: u8 [a0 + 20] = 0\n 46932: u8 [a0 + 19] = 0\n 46935: u8 [a0 + 18] = 0\n 46938: u8 [a0 + 17] = 0\n 46941: u8 [a0 + 16] = 0\n 46944: u8 [a0 + 15] = 0\n 46947: u8 [a0 + 14] = 0\n 46950: u8 [a0 + 13] = 0\n 46953: u8 [a0 + 12] = 0\n 46956: u8 [a0 + 11] = 0\n 46959: u8 [a0 + 10] = 0\n 46962: u8 [a0 + 9] = 0\n 46965: u8 [a0 + 8] = 0\n 46968: u8 [a0 + 7] = 0\n 46971: u8 [a0 + 6] = 0\n 46974: u8 [a0 + 5] = 0\n 46977: u8 [a0 + 4] = 0\n 46980: u8 [a0 + 3] = 0xa0\n 46985: u8 [a0 + 2] = 0x79\n 46989: u8 [a0 + 1] = 0xc3\n 46994: u8 [a0 + 0] = 0x8\n 46997: a1 = u64 [sp + 0x68]\n 47000: a0 = a1 + 0x4\n 47003: a1 = a0 <u a1\n 47006: a3 = u64 [sp + 0x78]\n 47009: a2 = a3 + a1\n 47012: a3 = a2 <u a3\n 47015: a3 = a1 if a1 == 0\n 47018: a3 = a3 + s1\n 47021: a1 = a3 <u s1\n 47024: a4 = u64 [sp + 0x70]\n 47027: a4 = a4 + a1\n 47030: u64 [sp + 0x88] = a2\n 47034: u64 [sp + 0x80] = a0\n 47038: u64 [sp + 0x90] = a3\n 47042: a0 = sp + 0xa0\n 47046: a1 = sp + 0x80\n 47050: u64 [sp + 0x98] = a4\n 47054: ra = 588, jump @595\n      : @635 [@dyn 294] (gas: 5)\n 47060: a0 = u64 [sp + 0xa8]\n 47064: t0 = u64 [sp + 0xb8]\n 47068: t1 = u64 [sp + 0xa0]\n 47072: a3 = u64 [sp + 0xb0]\n 47076: jump @641\n      : @636 (gas: 3)\n 47079: a0 = 0x40\n 47082: a1 = 0x20\n 47085: ra = 590, jump @0\n      : @637 [@dyn 295] (gas: 103)\n 47092: a1 = u8 [a0 + 0x11]\n 47095: a2 = u8 [a0 + 0x10]\n 47098: a3 = u8 [a0 + 0x12]\n 47101: a4 = u8 [a0 + 0x13]\n 47104: a1 = a1 << 0x8\n 47107: a1 = a1 | a2\n 47110: a3 = a3 << 0x10\n 47113: a4 = a4 << 0x18\n 47116: a3 = a3 | a4\n 47119: a1 = a1 | a3\n 47122: a2 = u8 [a0 + 0x15]\n 47125: a3 = u8 [a0 + 0x14]\n 47128: a4 = u8 [a0 + 0x16]\n 47131: a5 = u8 [a0 + 0x17]\n 47134: a2 = a2 << 0x8\n 47137: a2 = a2 | a3\n 47140: a4 = a4 << 0x10\n 47143: a5 = a5 << 0x18\n 47146: a4 = a4 | a5\n 47149: a2 = a2 | a4\n 47152: a2 = a2 << 0x20\n 47155: t0 = a2 | a1\n 47158: a2 = u8 [a0 + 0x1]\n 47161: a3 = u8 [a0]\n 47163: a4 = u8 [a0 + 0x2]\n 47166: a5 = u8 [a0 + 0x3]\n 47169: a2 = a2 << 0x8\n 47172: a2 = a2 | a3\n 47175: a4 = a4 << 0x10\n 47178: a5 = a5 << 0x18\n 47181: a4 = a4 | a5\n 47184: a2 = a2 | a4\n 47187: a3 = u8 [a0 + 0x5]\n 47190: a4 = u8 [a0 + 0x4]\n 47193: a5 = u8 [a0 + 0x6]\n 47196: s1 = u8 [a0 + 0x7]\n 47199: a3 = a3 << 0x8\n 47202: a3 = a3 | a4\n 47205: a5 = a5 << 0x10\n 47208: s1 = s1 << 0x18\n 47211: a5 = a5 | s1\n 47214: a3 = a3 | a5\n 47217: a3 = a3 << 0x20\n 47220: a2 = a2 | a3\n 47223: a3 = u8 [a0 + 0x19]\n 47226: a4 = u8 [a0 + 0x18]\n 47229: a5 = u8 [a0 + 0x1a]\n 47232: s1 = u8 [a0 + 0x1b]\n 47235: a3 = a3 << 0x8\n 47238: a3 = a3 | a4\n 47241: a5 = a5 << 0x10\n 47244: s1 = s1 << 0x18\n 47247: a5 = a5 | s1\n 47250: a3 = a3 | a5\n 47253: a4 = u8 [a0 + 0x1d]\n 47256: a5 = u8 [a0 + 0x1c]\n 47259: s1 = u8 [a0 + 0x1e]\n 47262: a1 = u8 [a0 + 0x1f]\n 47265: a4 = a4 << 0x8\n 47268: a4 = a4 | a5\n 47271: s1 = s1 << 0x10\n 47274: a1 = a1 << 0x18\n 47277: a1 = a1 | s1\n 47280: a1 = a1 | a4\n 47283: a1 = a1 << 0x20\n 47286: a3 = a3 | a1\n 47289: a1 = u8 [a0 + 0x9]\n 47292: a4 = u8 [a0 + 0x8]\n 47295: a5 = u8 [a0 + 0xa]\n 47298: s1 = u8 [a0 + 0xb]\n 47301: a1 = a1 << 0x8\n 47304: a1 = a1 | a4\n 47307: a5 = a5 << 0x10\n 47310: s1 = s1 << 0x18\n 47313: a5 = a5 | s1\n 47316: a1 = a1 | a5\n 47319: a4 = u8 [a0 + 0xd]\n 47322: a5 = u8 [a0 + 0xc]\n 47325: s1 = u8 [a0 + 0xe]\n 47328: a0 = u8 [a0 + 0xf]\n 47331: a4 = a4 << 0x8\n 47334: a4 = a4 | a5\n 47337: s1 = s1 << 0x10\n 47340: a0 = a0 << 0x18\n 47343: a0 = a0 | s1\n 47346: a0 = a0 | a4\n 47349: a0 = a0 << 0x20\n 47352: a0 = a0 | a1\n 47355: s1 = reverse a0\n 47357: a1 = reverse a3\n 47359: a2 = reverse a2\n 47361: a0 = reverse t0\n 47363: u64 [sp + 0x78] = a0\n 47366: u64 [sp + 0x70] = a2\n 47369: a0 = a0 | a2\n 47372: a2 = a1\n 47374: a1 = a1 | s1\n 47377: a1 = a1 | a0\n 47380: a1 = a1 >> 0x20\n 47383: a0 = a0 | s1\n 47386: a0 = a0 << 0x20\n 47389: a0 = a0 | a1\n 47392: jump @642 if a0 != 0\n      : @638 (gas: 5)\n 47396: u64 [sp + 0x68] = a2\n 47399: i32 a0 = a2 + 0\n 47401: a1 = 0x20\n 47404: u64 [sp + 0x60] = a0\n 47407: ra = 592, jump @0\n      : @639 [@dyn 296] (gas: 50)\n 47414: u8 [a0 + 31] = 0\n 47417: u8 [a0 + 30] = 0\n 47420: u8 [a0 + 29] = 0\n 47423: u8 [a0 + 28] = 0\n 47426: u8 [a0 + 27] = 0\n 47429: u8 [a0 + 26] = 0\n 47432: u8 [a0 + 25] = 0\n 47435: u8 [a0 + 24] = 0\n 47438: u8 [a0 + 23] = 0\n 47441: u8 [a0 + 22] = 0\n 47444: u8 [a0 + 21] = 0\n 47447: u8 [a0 + 20] = 0\n 47450: u8 [a0 + 19] = 0\n 47453: u8 [a0 + 18] = 0\n 47456: u8 [a0 + 17] = 0\n 47459: u8 [a0 + 16] = 0\n 47462: u8 [a0 + 15] = 0\n 47465: u8 [a0 + 14] = 0\n 47468: u8 [a0 + 13] = 0\n 47471: u8 [a0 + 12] = 0\n 47474: u8 [a0 + 11] = 0\n 47477: u8 [a0 + 10] = 0\n 47480: u8 [a0 + 9] = 0\n 47483: u8 [a0 + 8] = 0\n 47486: u8 [a0 + 7] = 0\n 47489: u8 [a0 + 6] = 0\n 47492: u8 [a0 + 5] = 0\n 47495: u8 [a0 + 4] = 0\n 47498: u8 [a0 + 3] = 0xa0\n 47503: u8 [a0 + 2] = 0x79\n 47507: u8 [a0 + 1] = 0xc3\n 47512: u8 [a0 + 0] = 0x8\n 47515: a1 = u64 [sp + 0x68]\n 47518: a0 = a1 + 0x4\n 47521: a1 = a0 <u a1\n 47524: a3 = u64 [sp + 0x78]\n 47527: a2 = a3 + a1\n 47530: a3 = a2 <u a3\n 47533: a3 = a1 if a1 == 0\n 47536: a3 = a3 + s1\n 47539: a1 = a3 <u s1\n 47542: a4 = u64 [sp + 0x70]\n 47545: a4 = a4 + a1\n 47548: u64 [sp + 0xc8] = a2\n 47552: u64 [sp + 0xc0] = a0\n 47556: u64 [sp + 0xd0] = a3\n 47560: a0 = sp + 0xe0\n 47564: a1 = sp + 0xc0\n 47568: u64 [sp + 0xd8] = a4\n 47572: ra = 594, jump @603\n      : @640 [@dyn 297] (gas: 5)\n 47578: a0 = u64 [sp + 0xe8]\n 47582: t0 = u64 [sp + 0xf8]\n 47586: t1 = u64 [sp + 0xe0]\n 47590: a3 = u64 [sp + 0xf0]\n 47594: fallthrough\n      : @641 (gas: 26)\n 47595: a1 = u64 [sp + 0x78]\n 47598: a4 = a0 ^ a1\n 47601: a5 = a0 <u a1\n 47604: t2 = a1\n 47606: a2 = u64 [sp + 0x68]\n 47609: a1 = t1 <u a2\n 47612: a5 = a1 if a4 == 0\n 47615: a4 = a3 - s1\n 47618: a3 = a3 <u s1\n 47621: s1 = u64 [sp + 0x70]\n 47624: s1 = t0 - s1\n 47627: s1 = s1 - a3\n 47630: a3 = a4 <u a5\n 47633: s1 = s1 - a3\n 47636: a4 = a4 - a5\n 47639: a0 = a0 - t2\n 47642: a1 = a0 - a1\n 47645: a0 = t1 - a2\n 47648: a1 = a1 | s1\n 47651: a2 = a0 | a4\n 47654: a2 = a2 | a1\n 47657: a1 = a1 | a4\n 47660: a2 = a2 >> 0x20\n 47663: a1 = a1 << 0x20\n 47666: a1 = a1 | a2\n 47669: jump @643 if a1 == 0\n      : @642 (gas: 1)\n 47672: trap\n      : @643 (gas: 4)\n 47673: i32 s1 = a0 + 0\n 47675: a0 = u64 [sp + 0x60]\n 47678: a1 = s1\n 47680: ra = 596, jump @0\n      : @644 [@dyn 298] (gas: 6)\n 47687: i32 a1 = a0 + 0\n 47689: a0 = 0x1\n 47692: a2 = s1\n 47694: ra = 0x256\n 47698: ecalli 12 // 'seal_return'\n 47700: fallthrough\n      : @645 [@dyn 299] (gas: 12)\n 47701: a1 = u64 [a0 + 0x10]\n 47704: a2 = u64 [a0 + 0x18]\n 47707: a3 = u64 [a0 + 0x8]\n 47710: a0 = u64 [a0]\n 47712: a2 = a2 | a3\n 47715: a3 = a0 | a1\n 47718: a3 = a3 | a2\n 47721: a3 = a3 >> 0x20\n 47724: a1 = a1 | a2\n 47727: a1 = a1 << 0x20\n 47730: a1 = a1 | a3\n 47733: jump @648 if a1 != 0\n      : @646 (gas: 7)\n 47737: sp = sp + 0xfffffffffffffff0\n 47740: u64 [sp + 0x8] = ra\n 47743: u64 [sp] = s0\n 47745: i32 a0 = a0 + 0\n 47747: a1 = 0x20\n 47750: s0 = 0x20\n 47753: ra = 600, jump @0\n      : @647 [@dyn 300] (gas: 37)\n 47760: u8 [a0 + 31] = 0\n 47763: u8 [a0 + 30] = 0\n 47766: u8 [a0 + 29] = 0\n 47769: u8 [a0 + 28] = 0\n 47772: u8 [a0 + 27] = 0\n 47775: u8 [a0 + 26] = 0\n 47778: u8 [a0 + 25] = 0\n 47781: u8 [a0 + 24] = 0\n 47784: u8 [a0 + 23] = 0\n 47787: u8 [a0 + 22] = 0\n 47790: u8 [a0 + 21] = 0\n 47793: u8 [a0 + 20] = 0\n 47796: u8 [a0 + 19] = 0\n 47799: u8 [a0 + 18] = 0\n 47802: u8 [a0 + 17] = 0\n 47805: u8 [a0 + 16] = 0\n 47808: u8 [a0 + 15] = 0\n 47811: u8 [a0 + 14] = 0\n 47814: u8 [a0 + 13] = 0\n 47817: u8 [a0 + 12] = 0\n 47820: u8 [a0 + 11] = 0\n 47823: u8 [a0 + 10] = 0\n 47826: u8 [a0 + 9] = 0\n 47829: u8 [a0 + 8] = 0\n 47832: u8 [a0 + 7] = 0x65\n 47836: u8 [a0 + 6] = 0x75\n 47840: u8 [a0 + 5] = 0x6c\n 47844: u8 [a0 + 4] = 0x61\n 47848: u8 [a0 + 3] = 0x76\n 47852: u8 [a0 + 0x2] = s0\n 47855: u8 [a0 + 1] = 0x6f\n 47859: a1 = 0x6e\n 47862: u8 [a0] = a1\n 47864: ra = u64 [sp + 0x8]\n 47867: s0 = u64 [sp]\n 47869: sp = sp + 0x10\n 47872: ret\n      : @648 (gas: 1)\n 47874: trap\n      : @649 (gas: 17)\n 47875: sp = sp + 0xffffffffffffffa0\n 47878: u64 [sp + 0x58] = ra\n 47881: u64 [sp + 0x50] = s0\n 47884: u64 [sp + 0x48] = s1\n 47887: a3 = u64 [a1 + 0x18]\n 47890: a4 = u64 [a1 + 0x10]\n 47893: a5 = u64 [a1 + 0x8]\n 47896: s1 = u64 [a1]\n 47898: a1 = a5 | a3\n 47901: a2 = s1 | a4\n 47904: a2 = a2 | a1\n 47907: a2 = a2 >> 0x20\n 47910: a1 = a1 | a4\n 47913: a1 = a1 << 0x20\n 47916: a1 = a1 | a2\n 47919: u64 [sp + 0x28] = a0\n 47922: jump @656 if a1 != 0\n      : @650 (gas: 19)\n 47926: a0 = s1 + 0x20\n 47929: u64 [sp + 0x30] = a0\n 47932: a0 = a0 <u s1\n 47935: a1 = a5 + a0\n 47938: u64 [sp + 0x40] = a1\n 47941: u64 [sp + 0x8] = a5\n 47944: s0 = a1 <u a5\n 47947: s0 = a0 if a0 == 0\n 47950: s0 = s0 + a4\n 47953: u64 [sp + 0x10] = a4\n 47956: a0 = s0 <u a4\n 47959: u64 [sp + 0x18] = a3\n 47962: a0 = a0 + a3\n 47965: u64 [sp + 0x38] = a0\n 47968: u64 [sp] = s1\n 47970: i32 a0 = s1 + 0\n 47972: a1 = 0x20\n 47975: s1 = 0x20\n 47978: ra = 602, jump @0\n      : @651 [@dyn 301] (gas: 45)\n 47985: u8 [a0 + 0x1f] = s1\n 47988: a1 = u64 [sp + 0x30]\n 47991: s1 = a1\n 47993: a1 = a1 | s0\n 47996: a2 = u64 [sp + 0x40]\n 47999: a4 = u64 [sp + 0x38]\n 48002: a2 = a2 | a4\n 48005: a1 = a1 | a2\n 48008: a1 = a1 >> 0x20\n 48011: u64 [sp + 0x20] = s0\n 48014: a2 = a2 | s0\n 48017: a2 = a2 << 0x20\n 48020: a1 = a1 | a2\n 48023: u8 [a0 + 30] = 0\n 48026: u8 [a0 + 29] = 0\n 48029: u8 [a0 + 28] = 0\n 48032: u8 [a0 + 27] = 0\n 48035: u8 [a0 + 26] = 0\n 48038: u8 [a0 + 25] = 0\n 48041: u8 [a0 + 24] = 0\n 48044: u8 [a0 + 23] = 0\n 48047: u8 [a0 + 22] = 0\n 48050: u8 [a0 + 21] = 0\n 48053: u8 [a0 + 20] = 0\n 48056: u8 [a0 + 19] = 0\n 48059: u8 [a0 + 18] = 0\n 48062: u8 [a0 + 17] = 0\n 48065: u8 [a0 + 16] = 0\n 48068: u8 [a0 + 15] = 0\n 48071: u8 [a0 + 14] = 0\n 48074: u8 [a0 + 13] = 0\n 48077: u8 [a0 + 12] = 0\n 48080: u8 [a0 + 11] = 0\n 48083: u8 [a0 + 10] = 0\n 48086: u8 [a0 + 9] = 0\n 48089: u8 [a0 + 8] = 0\n 48092: u8 [a0 + 7] = 0\n 48095: u8 [a0 + 6] = 0\n 48098: u8 [a0 + 5] = 0\n 48101: u8 [a0 + 4] = 0\n 48104: u8 [a0 + 3] = 0\n 48107: u8 [a0 + 2] = 0\n 48110: u8 [a0 + 1] = 0\n 48113: u8 [a0 + 0] = 0\n 48115: jump @656 if a1 != 0\n      : @652 (gas: 4)\n 48119: i32 s0 = s1 + 0\n 48121: a1 = 0x20\n 48124: a0 = s0\n 48126: ra = 604, jump @0\n      : @653 [@dyn 302] (gas: 41)\n 48133: u8 [a0 + 31] = 0x8\n 48137: u8 [a0 + 30] = 0\n 48140: u8 [a0 + 29] = 0\n 48143: u8 [a0 + 28] = 0\n 48146: u8 [a0 + 27] = 0\n 48149: u8 [a0 + 26] = 0\n 48152: u8 [a0 + 25] = 0\n 48155: u8 [a0 + 24] = 0\n 48158: u8 [a0 + 23] = 0\n 48161: u8 [a0 + 22] = 0\n 48164: u8 [a0 + 21] = 0\n 48167: u8 [a0 + 20] = 0\n 48170: u8 [a0 + 19] = 0\n 48173: u8 [a0 + 18] = 0\n 48176: u8 [a0 + 17] = 0\n 48179: u8 [a0 + 16] = 0\n 48182: u8 [a0 + 15] = 0\n 48185: u8 [a0 + 14] = 0\n 48188: u8 [a0 + 13] = 0\n 48191: u8 [a0 + 12] = 0\n 48194: u8 [a0 + 11] = 0\n 48197: u8 [a0 + 10] = 0\n 48200: u8 [a0 + 9] = 0\n 48203: u8 [a0 + 8] = 0\n 48206: u8 [a0 + 7] = 0\n 48209: u8 [a0 + 6] = 0\n 48212: u8 [a0 + 5] = 0\n 48215: u8 [a0 + 4] = 0\n 48218: u8 [a0 + 3] = 0\n 48221: u8 [a0 + 2] = 0\n 48224: u8 [a0 + 1] = 0\n 48227: a1 = u64 [sp + 0x20]\n 48230: a2 = u64 [sp + 0x38]\n 48233: a1 = a1 | a2\n 48236: a2 = 0xffffffe0\n 48246: a2 = s1 <u a2\n 48249: a3 = u64 [sp + 0x40]\n 48252: a2 = 0 if a3 != 0\n 48254: a2 = 0 if a1 != 0\n 48256: u8 [a0 + 0] = 0\n 48258: jump @656 if a2 == 0\n      : @654 (gas: 3)\n 48262: i32 a0 = s0 + 0x20\n 48265: a1 = 0x20\n 48268: ra = 606, jump @0\n      : @655 [@dyn 303] (gas: 54)\n 48275: u8 [a0 + 31] = 0\n 48278: u8 [a0 + 30] = 0\n 48281: u8 [a0 + 29] = 0\n 48284: u8 [a0 + 28] = 0\n 48287: u8 [a0 + 27] = 0\n 48290: u8 [a0 + 26] = 0\n 48293: u8 [a0 + 25] = 0\n 48296: u8 [a0 + 24] = 0\n 48299: u8 [a0 + 23] = 0\n 48302: u8 [a0 + 22] = 0\n 48305: u8 [a0 + 21] = 0\n 48308: u8 [a0 + 20] = 0\n 48311: u8 [a0 + 19] = 0\n 48314: u8 [a0 + 18] = 0\n 48317: u8 [a0 + 17] = 0\n 48320: u8 [a0 + 16] = 0\n 48323: u8 [a0 + 15] = 0\n 48326: u8 [a0 + 14] = 0\n 48329: u8 [a0 + 13] = 0\n 48332: u8 [a0 + 12] = 0\n 48335: u8 [a0 + 11] = 0\n 48338: u8 [a0 + 10] = 0\n 48341: u8 [a0 + 9] = 0\n 48344: u8 [a0 + 8] = 0\n 48347: u8 [a0 + 7] = 0x65\n 48351: u8 [a0 + 6] = 0x75\n 48355: u8 [a0 + 5] = 0x6c\n 48359: u8 [a0 + 4] = 0x61\n 48363: u8 [a0 + 3] = 0x76\n 48367: u8 [a0 + 2] = 0x20\n 48371: u8 [a0 + 1] = 0x6f\n 48375: u8 [a0 + 0] = 0x6e\n 48378: a1 = u64 [sp]\n 48380: a0 = a1 + 0x60\n 48383: a1 = a0 <u a1\n 48386: a3 = u64 [sp + 0x8]\n 48389: a2 = a3 + a1\n 48392: a3 = a2 <u a3\n 48395: a3 = a1 if a1 == 0\n 48398: a1 = u64 [sp + 0x10]\n 48401: a3 = a3 + a1\n 48404: a1 = a3 <u a1\n 48407: a4 = u64 [sp + 0x18]\n 48410: a1 = a1 + a4\n 48413: a4 = u64 [sp + 0x28]\n 48416: u64 [a4] = a0\n 48418: u64 [a4 + 0x8] = a2\n 48421: u64 [a4 + 0x10] = a3\n 48424: u64 [a4 + 0x18] = a1\n 48427: ra = u64 [sp + 0x58]\n 48430: s0 = u64 [sp + 0x50]\n 48433: s1 = u64 [sp + 0x48]\n 48436: sp = sp + 0x60\n 48439: ret\n      : @656 (gas: 1)\n 48441: trap\n      : @657 [@dyn 304] (gas: 71)\n 48442: a1 = u64 [s1 + 0x20]\n 48445: a1 = reverse a1\n 48447: a2 = u64 [s1 + 0x28]\n 48450: a2 = reverse a2\n 48452: a3 = u64 [s1 + 0x30]\n 48455: a3 = reverse a3\n 48457: a4 = u64 [s1 + 0x38]\n 48460: a4 = reverse a4\n 48462: u8 [a0 + 0x18] = a4\n 48465: u8 [a0 + 0x10] = a3\n 48468: u8 [a0 + 0x8] = a2\n 48471: u8 [a0] = a1\n 48473: a5 = a4 >> 0x38\n 48476: u8 [a0 + 0x1f] = a5\n 48479: a5 = a4 >> 0x30\n 48482: u8 [a0 + 0x1e] = a5\n 48485: a5 = a4 >> 0x28\n 48488: u8 [a0 + 0x1d] = a5\n 48491: a5 = a4 >> 0x20\n 48494: u8 [a0 + 0x1c] = a5\n 48497: a5 = a4 >> 0x18\n 48500: u8 [a0 + 0x1b] = a5\n 48503: a5 = a4 >> 0x10\n 48506: u8 [a0 + 0x1a] = a5\n 48509: a4 = a4 >> 0x8\n 48512: u8 [a0 + 0x19] = a4\n 48515: a4 = a3 >> 0x38\n 48518: u8 [a0 + 0x17] = a4\n 48521: a4 = a3 >> 0x30\n 48524: u8 [a0 + 0x16] = a4\n 48527: a4 = a3 >> 0x28\n 48530: u8 [a0 + 0x15] = a4\n 48533: a4 = a3 >> 0x20\n 48536: u8 [a0 + 0x14] = a4\n 48539: a4 = a3 >> 0x18\n 48542: u8 [a0 + 0x13] = a4\n 48545: a4 = a3 >> 0x10\n 48548: u8 [a0 + 0x12] = a4\n 48551: a3 = a3 >> 0x8\n 48554: u8 [a0 + 0x11] = a3\n 48557: a3 = a2 >> 0x38\n 48560: u8 [a0 + 0xf] = a3\n 48563: a3 = a2 >> 0x30\n 48566: u8 [a0 + 0xe] = a3\n 48569: a3 = a2 >> 0x28\n 48572: u8 [a0 + 0xd] = a3\n 48575: a3 = a2 >> 0x20\n 48578: u8 [a0 + 0xc] = a3\n 48581: a3 = a2 >> 0x18\n 48584: u8 [a0 + 0xb] = a3\n 48587: a3 = a2 >> 0x10\n 48590: u8 [a0 + 0xa] = a3\n 48593: a2 = a2 >> 0x8\n 48596: u8 [a0 + 0x9] = a2\n 48599: a2 = a1 >> 0x38\n 48602: u8 [a0 + 0x7] = a2\n 48605: a2 = a1 >> 0x30\n 48608: u8 [a0 + 0x6] = a2\n 48611: a2 = a1 >> 0x28\n 48614: u8 [a0 + 0x5] = a2\n 48617: a2 = a1 >> 0x20\n 48620: u8 [a0 + 0x4] = a2\n 48623: a2 = a1 >> 0x18\n 48626: u8 [a0 + 0x3] = a2\n 48629: a2 = a1 >> 0x10\n 48632: u8 [a0 + 0x2] = a2\n 48635: a1 = a1 >> 0x8\n 48638: u8 [a0 + 0x1] = a1\n 48641: a0 = 0x20\n 48644: a1 = 0x20\n 48647: ra = 610, jump @0\n      : @658 [@dyn 305] (gas: 35)\n 48654: u8 [a0 + 31] = 0x2\n 48658: u8 [a0 + 30] = 0\n 48661: u8 [a0 + 29] = 0\n 48664: u8 [a0 + 28] = 0\n 48667: u8 [a0 + 27] = 0\n 48670: u8 [a0 + 26] = 0\n 48673: u8 [a0 + 25] = 0\n 48676: u8 [a0 + 24] = 0\n 48679: u8 [a0 + 23] = 0\n 48682: u8 [a0 + 22] = 0\n 48685: u8 [a0 + 21] = 0\n 48688: u8 [a0 + 20] = 0\n 48691: u8 [a0 + 19] = 0\n 48694: u8 [a0 + 18] = 0\n 48697: u8 [a0 + 17] = 0\n 48700: u8 [a0 + 16] = 0\n 48703: u8 [a0 + 15] = 0\n 48706: u8 [a0 + 14] = 0\n 48709: u8 [a0 + 13] = 0\n 48712: u8 [a0 + 12] = 0\n 48715: u8 [a0 + 11] = 0\n 48718: u8 [a0 + 10] = 0\n 48721: u8 [a0 + 9] = 0\n 48724: u8 [a0 + 8] = 0\n 48727: u8 [a0 + 7] = 0\n 48730: u8 [a0 + 6] = 0\n 48733: u8 [a0 + 5] = 0\n 48736: u8 [a0 + 4] = 0\n 48739: u8 [a0 + 3] = 0\n 48742: u8 [a0 + 2] = 0\n 48745: u8 [a0 + 1] = 0\n 48748: u8 [a0 + 0] = 0\n 48750: a1 = 0x40\n 48753: a0 = 0\n 48755: ra = 612, jump @0\n      : @659 [@dyn 306] (gas: 54)\n 48762: i32 a0 = a0 + 0\n 48764: i32 a2 = s1 + 0x160\n 48768: a1 = 0x40\n 48771: ecalli 8 // 'hash_keccak_256'\n 48773: a0 = u64 [s1 + 0x178]\n 48777: a1 = u64 [s1 + 0x170]\n 48781: a2 = u64 [s1 + 0x168]\n 48785: a3 = u64 [s1 + 0x160]\n 48789: a0 = reverse a0\n 48791: u64 [s1 + 0x20] = a0\n 48794: a0 = reverse a1\n 48796: u64 [s1 + 0x28] = a0\n 48799: a0 = reverse a2\n 48801: u64 [s1 + 0x38] = a0\n 48804: a0 = reverse a3\n 48806: u64 [s1 + 0x30] = a0\n 48809: i32 a0 = s1 + 0x100\n 48813: ecalli 4 // 'caller'\n 48815: a0 = u64 [s1 + 0x108]\n 48819: a1 = u64 [s1 + 0x100]\n 48823: a2 = i32 [s1 + 0x110]\n 48827: a0 = reverse a0\n 48829: a3 = a0 >> 0x20\n 48832: a1 = reverse a1\n 48834: a4 = a1 << 0x20\n 48837: a3 = a3 | a4\n 48840: u64 [s1 + 0x18] = a3\n 48843: a0 = a0 << 0x20\n 48846: a2 = reverse a2\n 48848: a2 = a2 >> 0x20\n 48851: a0 = a0 | a2\n 48854: u64 [s1 + 0x10] = a0\n 48857: a1 = a1 >> 0x20\n 48860: u64 [s1 + 0x8] = a1\n 48863: a0 = u64 [s1 + 0x30]\n 48866: u64 [s1 + 0x158] = a0\n 48870: a0 = u64 [s1 + 0x38]\n 48873: u64 [s1 + 0x150] = a0\n 48877: a0 = u64 [s1 + 0x28]\n 48880: u64 [s1 + 0x148] = a0\n 48884: a0 = u64 [s1 + 0x20]\n 48887: u64 [s1 + 0x140] = a0\n 48891: u64 [s1 + 376] = 0\n 48895: u64 [s1 + 368] = 0\n 48899: u64 [s1 + 360] = 0\n 48903: u64 [s1 + 352] = 0\n 48907: u32 [s1 + 288] = 0x20\n 48912: i32 a1 = s1 + 0x140\n 48916: i32 a3 = s1 + 0x160\n 48920: i32 a4 = s1 + 0x120\n 48924: a2 = 0xffffffffffffffff\n 48927: a0 = 0\n 48929: ecalli 7 // 'get_storage'\n 48931: fallthrough\n      : @660 (gas: 12)\n 48932: a0 = u32 [s1 + 0x170]\n 48936: a1 = u64 [s1 + 0x160]\n 48940: a2 = u64 [s1 + 0x168]\n 48944: a3 = u64 [s1 + 0x8]\n 48947: a0 = a0 ^ a3\n 48950: a3 = u64 [s1 + 0x10]\n 48953: a1 = a1 ^ a3\n 48956: a0 = a0 | a1\n 48959: a1 = u64 [s1 + 0x18]\n 48962: a1 = a1 ^ a2\n 48965: a0 = a0 | a1\n 48968: jump @666 if a0 != 0\n      : @661 (gas: 11)\n 48972: a0 = sp + 0xffffffffffffffe0\n 48975: a0 = a0 & 0xffffffffffffffe0\n 48978: u64 [s1 + 0x18] = a0\n 48981: sp = a0\n 48983: u64 [a0 + 24] = 0\n 48986: u64 [a0 + 16] = 0\n 48989: u64 [a0 + 8] = 0\n 48992: u64 [a0 + 0] = 0\n 48994: i32 a0 = a0 + 0\n 48996: ecalli 15 // 'value_transferred'\n 48998: fallthrough\n      : @662 (gas: 9)\n 48999: a3 = u64 [s1 + 0x18]\n 49002: a0 = u64 [a3 + 0x10]\n 49005: a1 = u64 [a3 + 0x18]\n 49008: a2 = u64 [a3 + 0x8]\n 49011: a3 = u64 [a3]\n 49013: a1 = a1 | a2\n 49016: a0 = a0 | a3\n 49019: a0 = a0 | a1\n 49022: jump @671 if a0 == 0\n      : @663 (gas: 51)\n 49026: a0 = sp + 0xffffffffffffffe0\n 49029: a0 = a0 & 0xffffffffffffffe0\n 49032: u64 [s1 + 0x10] = a0\n 49035: sp = a0\n 49037: u64 [a0 + 24] = 0\n 49040: u64 [a0 + 16] = 0\n 49043: u64 [a0 + 8] = 0\n 49046: u64 [a0 + 0] = 0\n 49048: i32 a0 = a0 + 0\n 49050: ecalli 15 // 'value_transferred'\n 49052: a1 = u64 [s1 + 0x10]\n 49055: a0 = u64 [a1 + 0x18]\n 49058: u64 [s1 + 0x8] = a0\n 49061: a0 = u64 [a1 + 0x10]\n 49064: u64 [s1] = a0\n 49066: a0 = u64 [a1]\n 49068: u64 [s1 + 0x18] = a0\n 49071: a0 = u64 [a1 + 0x8]\n 49074: u64 [s1 + 0x10] = a0\n 49077: a0 = u64 [s1 + 0x20]\n 49080: a2 = a0 + 0x3\n 49083: a0 = a2 <u a0\n 49086: a1 = u64 [s1 + 0x28]\n 49089: a3 = a1 + a0\n 49092: a1 = a3 <u a1\n 49095: a1 = a0 if a0 == 0\n 49098: a0 = u64 [s1 + 0x38]\n 49101: a4 = a0 + a1\n 49104: a0 = a4 <u a0\n 49107: a1 = u64 [s1 + 0x30]\n 49110: a0 = a0 + a1\n 49113: u64 [s1 + 0x20] = a0\n 49116: u64 [s1 + 0x158] = a0\n 49120: u64 [s1 + 0x28] = a4\n 49123: u64 [s1 + 0x150] = a4\n 49127: u64 [s1 + 0x30] = a3\n 49130: u64 [s1 + 0x148] = a3\n 49134: u64 [s1 + 0x38] = a2\n 49137: u64 [s1 + 0x140] = a2\n 49141: u64 [s1 + 376] = 0\n 49145: u64 [s1 + 368] = 0\n 49149: u64 [s1 + 360] = 0\n 49153: u64 [s1 + 352] = 0\n 49157: u32 [s1 + 288] = 0x20\n 49162: i32 a1 = s1 + 0x140\n 49166: i32 a3 = s1 + 0x160\n 49170: i32 a4 = s1 + 0x120\n 49174: a2 = 0xffffffffffffffff\n 49177: a0 = 0\n 49179: ecalli 7 // 'get_storage'\n 49181: fallthrough\n      : @664 (gas: 39)\n 49182: a4 = u64 [s1 + 0x168]\n 49186: a2 = u64 [s1 + 0x160]\n 49190: t0 = u64 [s1 + 0x178]\n 49194: t2 = u64 [s1 + 0x170]\n 49198: a5 = u64 [s1 + 0x10]\n 49201: a5 = a5 + a4\n 49204: a1 = u64 [s1 + 0x18]\n 49207: a1 = a1 + a2\n 49210: u64 [s1 + 0x18] = a1\n 49213: a3 = a1 <u a2\n 49216: a5 = a5 + a3\n 49219: t1 = a5 ^ a4\n 49222: u64 [s1 + 0x10] = a5\n 49225: a4 = a5 <u a4\n 49228: a5 = u64 [s1]\n 49230: a5 = a5 + t2\n 49233: a1 = u64 [s1 + 0x8]\n 49236: a1 = a1 + t0\n 49239: a2 = a5 <u t2\n 49242: a1 = a1 + a2\n 49245: a2 = a3\n 49247: a2 = a4 if t1 != 0\n 49250: a0 = a5 + a2\n 49253: a2 = a0 <u a5\n 49256: a5 = a1 + a2\n 49259: a1 = a3 ^ 0x1\n 49262: a2 = a4 ^ 0x1\n 49265: a1 = a2 if t1 != 0\n 49268: a2 = a0 <u t2\n 49271: a3 = a5 ^ t0\n 49274: u64 [s1] = a5\n 49276: a4 = a5 <u t0\n 49279: a4 = a2 if a3 == 0\n 49282: u64 [s1 + 0x8] = a0\n 49285: a0 = a0 ^ t2\n 49288: a0 = a0 | a3\n 49291: a2 = a4 ^ 0x1\n 49294: a1 = a2 if a0 != 0\n 49297: jump @678 if a1 == 0\n      : @665 (gas: 47)\n 49301: a0 = u64 [s1 + 0x28]\n 49304: u64 [s1 + 0x150] = a0\n 49308: a0 = u64 [s1 + 0x30]\n 49311: u64 [s1 + 0x148] = a0\n 49315: a0 = u64 [s1 + 0x38]\n 49318: u64 [s1 + 0x140] = a0\n 49322: a0 = u64 [s1 + 0x20]\n 49325: u64 [s1 + 0x158] = a0\n 49329: u64 [s1 + 376] = 0\n 49333: u64 [s1 + 368] = 0\n 49337: u64 [s1 + 360] = 0\n 49341: u64 [s1 + 352] = 0\n 49345: u32 [s1 + 288] = 0x20\n 49350: i32 a1 = s1 + 0x140\n 49354: i32 a3 = s1 + 0x160\n 49358: i32 a4 = s1 + 0x120\n 49362: a2 = 0xffffffffffffffff\n 49365: a0 = 0\n 49367: ecalli 7 // 'get_storage'\n 49369: a0 = u64 [s1 + 0x20]\n 49372: u64 [s1 + 0x158] = a0\n 49376: a0 = u64 [s1 + 0x28]\n 49379: u64 [s1 + 0x150] = a0\n 49383: a0 = u64 [s1 + 0x30]\n 49386: u64 [s1 + 0x148] = a0\n 49390: a0 = u64 [s1 + 0x38]\n 49393: u64 [s1 + 0x140] = a0\n 49397: a0 = u64 [s1]\n 49399: u64 [s1 + 0x178] = a0\n 49403: a0 = u64 [s1 + 0x8]\n 49406: u64 [s1 + 0x170] = a0\n 49410: a0 = u64 [s1 + 0x10]\n 49413: u64 [s1 + 0x168] = a0\n 49417: a0 = u64 [s1 + 0x18]\n 49420: u64 [s1 + 0x160] = a0\n 49424: i32 a1 = s1 + 0x140\n 49428: i32 a3 = s1 + 0x160\n 49432: a2 = 0xffffffffffffffff\n 49435: a4 = 0x20\n 49438: a0 = 0\n 49440: ecalli 14 // 'set_storage'\n 49442: sp = s0 + 0xfffffffffffffe60\n 49446: ra = u64 [sp + 0x198]\n 49450: s0 = u64 [sp + 0x190]\n 49454: s1 = u64 [sp + 0x188]\n 49458: sp = sp + 0x1a0\n 49462: ret\n      : @666 (gas: 3)\n 49464: a0 = 0x40\n 49467: a1 = 0x20\n 49470: ra = 614, jump @0\n      : @667 [@dyn 307] (gas: 104)\n 49477: a1 = u8 [a0 + 0x11]\n 49480: a2 = u8 [a0 + 0x10]\n 49483: a3 = u8 [a0 + 0x12]\n 49486: a4 = u8 [a0 + 0x13]\n 49489: a1 = a1 << 0x8\n 49492: a1 = a1 | a2\n 49495: a3 = a3 << 0x10\n 49498: a4 = a4 << 0x18\n 49501: a3 = a3 | a4\n 49504: a1 = a1 | a3\n 49507: a2 = u8 [a0 + 0x15]\n 49510: a3 = u8 [a0 + 0x14]\n 49513: a4 = u8 [a0 + 0x16]\n 49516: a5 = u8 [a0 + 0x17]\n 49519: a2 = a2 << 0x8\n 49522: a2 = a2 | a3\n 49525: a4 = a4 << 0x10\n 49528: a5 = a5 << 0x18\n 49531: a4 = a4 | a5\n 49534: a2 = a2 | a4\n 49537: a2 = a2 << 0x20\n 49540: t0 = a2 | a1\n 49543: a2 = u8 [a0 + 0x1]\n 49546: a3 = u8 [a0]\n 49548: a4 = u8 [a0 + 0x2]\n 49551: a5 = u8 [a0 + 0x3]\n 49554: a2 = a2 << 0x8\n 49557: a2 = a2 | a3\n 49560: a4 = a4 << 0x10\n 49563: a5 = a5 << 0x18\n 49566: a4 = a4 | a5\n 49569: a2 = a2 | a4\n 49572: a3 = u8 [a0 + 0x5]\n 49575: a4 = u8 [a0 + 0x4]\n 49578: a5 = u8 [a0 + 0x6]\n 49581: a1 = u8 [a0 + 0x7]\n 49584: a3 = a3 << 0x8\n 49587: a3 = a3 | a4\n 49590: a5 = a5 << 0x10\n 49593: a1 = a1 << 0x18\n 49596: a1 = a1 | a5\n 49599: a1 = a1 | a3\n 49602: a1 = a1 << 0x20\n 49605: t1 = a1 | a2\n 49608: a1 = u8 [a0 + 0x19]\n 49611: a3 = u8 [a0 + 0x18]\n 49614: a4 = u8 [a0 + 0x1a]\n 49617: a5 = u8 [a0 + 0x1b]\n 49620: a1 = a1 << 0x8\n 49623: a1 = a1 | a3\n 49626: a4 = a4 << 0x10\n 49629: a5 = a5 << 0x18\n 49632: a4 = a4 | a5\n 49635: a1 = a1 | a4\n 49638: a3 = u8 [a0 + 0x1d]\n 49641: a4 = u8 [a0 + 0x1c]\n 49644: a5 = u8 [a0 + 0x1e]\n 49647: a2 = u8 [a0 + 0x1f]\n 49650: a3 = a3 << 0x8\n 49653: a3 = a3 | a4\n 49656: a5 = a5 << 0x10\n 49659: a2 = a2 << 0x18\n 49662: a2 = a2 | a5\n 49665: a2 = a2 | a3\n 49668: a2 = a2 << 0x20\n 49671: a3 = a2 | a1\n 49674: a1 = u8 [a0 + 0x9]\n 49677: a2 = u8 [a0 + 0x8]\n 49680: a4 = u8 [a0 + 0xa]\n 49683: a5 = u8 [a0 + 0xb]\n 49686: a1 = a1 << 0x8\n 49689: a1 = a1 | a2\n 49692: a4 = a4 << 0x10\n 49695: a5 = a5 << 0x18\n 49698: a4 = a4 | a5\n 49701: a1 = a1 | a4\n 49704: a2 = u8 [a0 + 0xd]\n 49707: a4 = u8 [a0 + 0xc]\n 49710: a5 = u8 [a0 + 0xe]\n 49713: a0 = u8 [a0 + 0xf]\n 49716: a2 = a2 << 0x8\n 49719: a2 = a2 | a4\n 49722: a5 = a5 << 0x10\n 49725: a0 = a0 << 0x18\n 49728: a0 = a0 | a5\n 49731: a0 = a0 | a2\n 49734: a0 = a0 << 0x20\n 49737: a0 = a0 | a1\n 49740: a4 = reverse a0\n 49742: a1 = reverse a3\n 49744: a2 = reverse t1\n 49746: a0 = reverse t0\n 49748: u64 [s1 + 0x38] = a0\n 49751: u64 [s1 + 0x28] = a2\n 49754: a0 = a0 | a2\n 49757: a2 = a1\n 49759: a1 = a1 | a4\n 49762: a1 = a1 | a0\n 49765: a1 = a1 >> 0x20\n 49768: u64 [s1 + 0x30] = a4\n 49771: a0 = a0 | a4\n 49774: a0 = a0 << 0x20\n 49777: a0 = a0 | a1\n 49780: jump @677 if a0 != 0\n      : @668 (gas: 5)\n 49784: u64 [s1 + 0x20] = a2\n 49787: i32 a0 = a2 + 0\n 49789: a1 = 0x20\n 49792: u64 [s1 + 0x18] = a0\n 49795: ra = 616, jump @0\n      : @669 [@dyn 308] (gas: 51)\n 49802: u8 [a0 + 31] = 0\n 49805: u8 [a0 + 30] = 0\n 49808: u8 [a0 + 29] = 0\n 49811: u8 [a0 + 28] = 0\n 49814: u8 [a0 + 27] = 0\n 49817: u8 [a0 + 26] = 0\n 49820: u8 [a0 + 25] = 0\n 49823: u8 [a0 + 24] = 0\n 49826: u8 [a0 + 23] = 0\n 49829: u8 [a0 + 22] = 0\n 49832: u8 [a0 + 21] = 0\n 49835: u8 [a0 + 20] = 0\n 49838: u8 [a0 + 19] = 0\n 49841: u8 [a0 + 18] = 0\n 49844: u8 [a0 + 17] = 0\n 49847: u8 [a0 + 16] = 0\n 49850: u8 [a0 + 15] = 0\n 49853: u8 [a0 + 14] = 0\n 49856: u8 [a0 + 13] = 0\n 49859: u8 [a0 + 12] = 0\n 49862: u8 [a0 + 11] = 0\n 49865: u8 [a0 + 10] = 0\n 49868: u8 [a0 + 9] = 0\n 49871: u8 [a0 + 8] = 0\n 49874: u8 [a0 + 7] = 0\n 49877: u8 [a0 + 6] = 0\n 49880: u8 [a0 + 5] = 0\n 49883: u8 [a0 + 4] = 0\n 49886: u8 [a0 + 3] = 0xa0\n 49891: u8 [a0 + 2] = 0x79\n 49895: u8 [a0 + 1] = 0xc3\n 49900: u8 [a0 + 0] = 0x8\n 49903: a1 = u64 [s1 + 0x20]\n 49906: a0 = a1 + 0x4\n 49909: a1 = a0 <u a1\n 49912: a3 = u64 [s1 + 0x38]\n 49915: a2 = a3 + a1\n 49918: a3 = a2 <u a3\n 49921: a3 = a1 if a1 == 0\n 49924: a1 = u64 [s1 + 0x30]\n 49927: a3 = a3 + a1\n 49930: a1 = a3 <u a1\n 49933: a4 = u64 [s1 + 0x28]\n 49936: a4 = a4 + a1\n 49939: u64 [s1 + 0xc8] = a2\n 49943: u64 [s1 + 0xc0] = a0\n 49947: u64 [s1 + 0xd0] = a3\n 49951: a0 = s1 + 0xe0\n 49955: a1 = s1 + 0xc0\n 49959: u64 [s1 + 0xd8] = a4\n 49963: ra = 618, jump @535\n      : @670 [@dyn 309] (gas: 5)\n 49969: a0 = u64 [s1 + 0xe8]\n 49973: t0 = u64 [s1 + 0xf8]\n 49977: t1 = u64 [s1 + 0xe0]\n 49981: a3 = u64 [s1 + 0xf0]\n 49985: jump @676\n      : @671 (gas: 3)\n 49988: a0 = 0x40\n 49991: a1 = 0x20\n 49994: ra = 620, jump @0\n      : @672 [@dyn 310] (gas: 104)\n 50001: a1 = u8 [a0 + 0x11]\n 50004: a2 = u8 [a0 + 0x10]\n 50007: a3 = u8 [a0 + 0x12]\n 50010: a4 = u8 [a0 + 0x13]\n 50013: a1 = a1 << 0x8\n 50016: a1 = a1 | a2\n 50019: a3 = a3 << 0x10\n 50022: a4 = a4 << 0x18\n 50025: a3 = a3 | a4\n 50028: a1 = a1 | a3\n 50031: a2 = u8 [a0 + 0x15]\n 50034: a3 = u8 [a0 + 0x14]\n 50037: a4 = u8 [a0 + 0x16]\n 50040: a5 = u8 [a0 + 0x17]\n 50043: a2 = a2 << 0x8\n 50046: a2 = a2 | a3\n 50049: a4 = a4 << 0x10\n 50052: a5 = a5 << 0x18\n 50055: a4 = a4 | a5\n 50058: a2 = a2 | a4\n 50061: a2 = a2 << 0x20\n 50064: t0 = a2 | a1\n 50067: a2 = u8 [a0 + 0x1]\n 50070: a3 = u8 [a0]\n 50072: a4 = u8 [a0 + 0x2]\n 50075: a5 = u8 [a0 + 0x3]\n 50078: a2 = a2 << 0x8\n 50081: a2 = a2 | a3\n 50084: a4 = a4 << 0x10\n 50087: a5 = a5 << 0x18\n 50090: a4 = a4 | a5\n 50093: a2 = a2 | a4\n 50096: a3 = u8 [a0 + 0x5]\n 50099: a4 = u8 [a0 + 0x4]\n 50102: a5 = u8 [a0 + 0x6]\n 50105: a1 = u8 [a0 + 0x7]\n 50108: a3 = a3 << 0x8\n 50111: a3 = a3 | a4\n 50114: a5 = a5 << 0x10\n 50117: a1 = a1 << 0x18\n 50120: a1 = a1 | a5\n 50123: a1 = a1 | a3\n 50126: a1 = a1 << 0x20\n 50129: t1 = a1 | a2\n 50132: a1 = u8 [a0 + 0x19]\n 50135: a3 = u8 [a0 + 0x18]\n 50138: a4 = u8 [a0 + 0x1a]\n 50141: a5 = u8 [a0 + 0x1b]\n 50144: a1 = a1 << 0x8\n 50147: a1 = a1 | a3\n 50150: a4 = a4 << 0x10\n 50153: a5 = a5 << 0x18\n 50156: a4 = a4 | a5\n 50159: a1 = a1 | a4\n 50162: a3 = u8 [a0 + 0x1d]\n 50165: a4 = u8 [a0 + 0x1c]\n 50168: a5 = u8 [a0 + 0x1e]\n 50171: a2 = u8 [a0 + 0x1f]\n 50174: a3 = a3 << 0x8\n 50177: a3 = a3 | a4\n 50180: a5 = a5 << 0x10\n 50183: a2 = a2 << 0x18\n 50186: a2 = a2 | a5\n 50189: a2 = a2 | a3\n 50192: a2 = a2 << 0x20\n 50195: a3 = a2 | a1\n 50198: a1 = u8 [a0 + 0x9]\n 50201: a2 = u8 [a0 + 0x8]\n 50204: a4 = u8 [a0 + 0xa]\n 50207: a5 = u8 [a0 + 0xb]\n 50210: a1 = a1 << 0x8\n 50213: a1 = a1 | a2\n 50216: a4 = a4 << 0x10\n 50219: a5 = a5 << 0x18\n 50222: a4 = a4 | a5\n 50225: a1 = a1 | a4\n 50228: a2 = u8 [a0 + 0xd]\n 50231: a4 = u8 [a0 + 0xc]\n 50234: a5 = u8 [a0 + 0xe]\n 50237: a0 = u8 [a0 + 0xf]\n 50240: a2 = a2 << 0x8\n 50243: a2 = a2 | a4\n 50246: a5 = a5 << 0x10\n 50249: a0 = a0 << 0x18\n 50252: a0 = a0 | a5\n 50255: a0 = a0 | a2\n 50258: a0 = a0 << 0x20\n 50261: a0 = a0 | a1\n 50264: a4 = reverse a0\n 50266: a1 = reverse a3\n 50268: a2 = reverse t1\n 50270: a0 = reverse t0\n 50272: u64 [s1 + 0x38] = a0\n 50275: u64 [s1 + 0x28] = a2\n 50278: a0 = a0 | a2\n 50281: a2 = a1\n 50283: a1 = a1 | a4\n 50286: a1 = a1 | a0\n 50289: a1 = a1 >> 0x20\n 50292: u64 [s1 + 0x30] = a4\n 50295: a0 = a0 | a4\n 50298: a0 = a0 << 0x20\n 50301: a0 = a0 | a1\n 50304: jump @677 if a0 != 0\n      : @673 (gas: 5)\n 50308: u64 [s1 + 0x20] = a2\n 50311: i32 a0 = a2 + 0\n 50313: a1 = 0x20\n 50316: u64 [s1 + 0x18] = a0\n 50319: ra = 622, jump @0\n      : @674 [@dyn 311] (gas: 51)\n 50326: u8 [a0 + 31] = 0\n 50329: u8 [a0 + 30] = 0\n 50332: u8 [a0 + 29] = 0\n 50335: u8 [a0 + 28] = 0\n 50338: u8 [a0 + 27] = 0\n 50341: u8 [a0 + 26] = 0\n 50344: u8 [a0 + 25] = 0\n 50347: u8 [a0 + 24] = 0\n 50350: u8 [a0 + 23] = 0\n 50353: u8 [a0 + 22] = 0\n 50356: u8 [a0 + 21] = 0\n 50359: u8 [a0 + 20] = 0\n 50362: u8 [a0 + 19] = 0\n 50365: u8 [a0 + 18] = 0\n 50368: u8 [a0 + 17] = 0\n 50371: u8 [a0 + 16] = 0\n 50374: u8 [a0 + 15] = 0\n 50377: u8 [a0 + 14] = 0\n 50380: u8 [a0 + 13] = 0\n 50383: u8 [a0 + 12] = 0\n 50386: u8 [a0 + 11] = 0\n 50389: u8 [a0 + 10] = 0\n 50392: u8 [a0 + 9] = 0\n 50395: u8 [a0 + 8] = 0\n 50398: u8 [a0 + 7] = 0\n 50401: u8 [a0 + 6] = 0\n 50404: u8 [a0 + 5] = 0\n 50407: u8 [a0 + 4] = 0\n 50410: u8 [a0 + 3] = 0xa0\n 50415: u8 [a0 + 2] = 0x79\n 50419: u8 [a0 + 1] = 0xc3\n 50424: u8 [a0 + 0] = 0x8\n 50427: a1 = u64 [s1 + 0x20]\n 50430: a0 = a1 + 0x4\n 50433: a1 = a0 <u a1\n 50436: a3 = u64 [s1 + 0x38]\n 50439: a2 = a3 + a1\n 50442: a3 = a2 <u a3\n 50445: a3 = a1 if a1 == 0\n 50448: a1 = u64 [s1 + 0x30]\n 50451: a3 = a3 + a1\n 50454: a1 = a3 <u a1\n 50457: a4 = u64 [s1 + 0x28]\n 50460: a4 = a4 + a1\n 50463: u64 [s1 + 0x48] = a2\n 50466: u64 [s1 + 0x40] = a0\n 50469: u64 [s1 + 0x50] = a3\n 50472: a0 = s1 + 0x60\n 50475: a1 = s1 + 0x40\n 50478: u64 [s1 + 0x58] = a4\n 50481: ra = 624, jump @649\n      : @675 [@dyn 312] (gas: 5)\n 50487: a0 = u64 [s1 + 0x68]\n 50490: t0 = u64 [s1 + 0x78]\n 50493: t1 = u64 [s1 + 0x60]\n 50496: a3 = u64 [s1 + 0x70]\n 50499: fallthrough\n      : @676 (gas: 27)\n 50500: a1 = u64 [s1 + 0x38]\n 50503: a4 = a0 ^ a1\n 50506: a5 = a0 <u a1\n 50509: ra = a1\n 50511: t2 = u64 [s1 + 0x20]\n 50514: a1 = t1 <u t2\n 50517: a5 = a1 if a4 == 0\n 50520: a2 = u64 [s1 + 0x30]\n 50523: a4 = a3 - a2\n 50526: a3 = a3 <u a2\n 50529: a2 = u64 [s1 + 0x28]\n 50532: a2 = t0 - a2\n 50535: a2 = a2 - a3\n 50538: a3 = a4 <u a5\n 50541: a2 = a2 - a3\n 50544: a4 = a4 - a5\n 50547: a0 = a0 - ra\n 50550: a1 = a0 - a1\n 50553: a0 = t1 - t2\n 50556: a1 = a1 | a2\n 50559: a2 = a0 | a4\n 50562: a2 = a2 | a1\n 50565: a1 = a1 | a4\n 50568: a2 = a2 >> 0x20\n 50571: a1 = a1 << 0x20\n 50574: a1 = a1 | a2\n 50577: jump @682 if a1 == 0\n      : @677 (gas: 1)\n 50580: trap\n      : @678 (gas: 8)\n 50581: u64 [s1 + 176] = 0\n 50585: u64 [s1 + 168] = 0\n 50589: u64 [s1 + 160] = 0\n 50593: a0 = 0x4e487b7100000000\n 50603: a1 = s1 + 0xa0\n 50607: u64 [s1 + 0xb8] = a0\n 50611: a0 = 0\n 50613: ra = 626, jump @23\n      : @679 [@dyn 313] (gas: 7)\n 50620: u64 [s1 + 152] = 0\n 50624: u64 [s1 + 144] = 0\n 50628: u64 [s1 + 128] = 0x11\n 50633: a0 = 0x4\n 50636: a1 = s1 + 0x80\n 50640: u64 [s1 + 136] = 0\n 50644: ra = 628, jump @23\n      : @680 [@dyn 314] (gas: 3)\n 50651: a1 = 0x24\n 50654: a0 = 0\n 50656: ra = 630, jump @0\n      : @681 [@dyn 315] (gas: 5)\n 50663: i32 a1 = a0 + 0\n 50665: a0 = 0x1\n 50668: a2 = 0x24\n 50671: ecalli 12 // 'seal_return'\n 50673: fallthrough\n      : @682 (gas: 4)\n 50674: i32 a1 = a0 + 0\n 50676: u64 [s1 + 0x38] = a1\n 50679: a0 = u64 [s1 + 0x18]\n 50682: ra = 632, jump @0\n      : @683 [@dyn 316] (gas: 6)\n 50689: i32 a1 = a0 + 0\n 50691: a0 = 0x1\n 50694: a2 = u64 [s1 + 0x38]\n 50697: ra = 0x27a\n 50701: ecalli 12 // 'seal_return'\n 50703: fallthrough\n      : @684 [@dyn 317] (gas: 5)\n 50704: u64 [a0 + 24] = 0\n 50707: u64 [a0 + 16] = 0\n 50710: u64 [a0 + 8] = 0\n 50713: u64 [a0 + 0] = 0\n 50715: ret\n      : @685 (gas: 17)\n 50717: sp = sp + 0xffffffffffffffa0\n 50720: u64 [sp + 0x58] = ra\n 50723: u64 [sp + 0x50] = s0\n 50726: u64 [sp + 0x48] = s1\n 50729: a3 = u64 [a1 + 0x18]\n 50732: a4 = u64 [a1 + 0x10]\n 50735: a5 = u64 [a1 + 0x8]\n 50738: s1 = u64 [a1]\n 50740: a1 = a5 | a3\n 50743: a2 = s1 | a4\n 50746: a2 = a2 | a1\n 50749: a2 = a2 >> 0x20\n 50752: a1 = a1 | a4\n 50755: a1 = a1 << 0x20\n 50758: a1 = a1 | a2\n 50761: u64 [sp + 0x28] = a0\n 50764: jump @692 if a1 != 0\n      : @686 (gas: 19)\n 50768: a0 = s1 + 0x20\n 50771: u64 [sp + 0x30] = a0\n 50774: a0 = a0 <u s1\n 50777: a1 = a5 + a0\n 50780: u64 [sp + 0x40] = a1\n 50783: u64 [sp + 0x8] = a5\n 50786: s0 = a1 <u a5\n 50789: s0 = a0 if a0 == 0\n 50792: s0 = s0 + a4\n 50795: u64 [sp + 0x10] = a4\n 50798: a0 = s0 <u a4\n 50801: u64 [sp + 0x18] = a3\n 50804: a0 = a0 + a3\n 50807: u64 [sp + 0x38] = a0\n 50810: u64 [sp] = s1\n 50812: i32 a0 = s1 + 0\n 50814: a1 = 0x20\n 50817: s1 = 0x20\n 50820: ra = 636, jump @0\n      : @687 [@dyn 318] (gas: 45)\n 50827: u8 [a0 + 0x1f] = s1\n 50830: a1 = u64 [sp + 0x30]\n 50833: s1 = a1\n 50835: a1 = a1 | s0\n 50838: a2 = u64 [sp + 0x40]\n 50841: a4 = u64 [sp + 0x38]\n 50844: a2 = a2 | a4\n 50847: a1 = a1 | a2\n 50850: a1 = a1 >> 0x20\n 50853: u64 [sp + 0x20] = s0\n 50856: a2 = a2 | s0\n 50859: a2 = a2 << 0x20\n 50862: a1 = a1 | a2\n 50865: u8 [a0 + 30] = 0\n 50868: u8 [a0 + 29] = 0\n 50871: u8 [a0 + 28] = 0\n 50874: u8 [a0 + 27] = 0\n 50877: u8 [a0 + 26] = 0\n 50880: u8 [a0 + 25] = 0\n 50883: u8 [a0 + 24] = 0\n 50886: u8 [a0 + 23] = 0\n 50889: u8 [a0 + 22] = 0\n 50892: u8 [a0 + 21] = 0\n 50895: u8 [a0 + 20] = 0\n 50898: u8 [a0 + 19] = 0\n 50901: u8 [a0 + 18] = 0\n 50904: u8 [a0 + 17] = 0\n 50907: u8 [a0 + 16] = 0\n 50910: u8 [a0 + 15] = 0\n 50913: u8 [a0 + 14] = 0\n 50916: u8 [a0 + 13] = 0\n 50919: u8 [a0 + 12] = 0\n 50922: u8 [a0 + 11] = 0\n 50925: u8 [a0 + 10] = 0\n 50928: u8 [a0 + 9] = 0\n 50931: u8 [a0 + 8] = 0\n 50934: u8 [a0 + 7] = 0\n 50937: u8 [a0 + 6] = 0\n 50940: u8 [a0 + 5] = 0\n 50943: u8 [a0 + 4] = 0\n 50946: u8 [a0 + 3] = 0\n 50949: u8 [a0 + 2] = 0\n 50952: u8 [a0 + 1] = 0\n 50955: u8 [a0 + 0] = 0\n 50957: jump @692 if a1 != 0\n      : @688 (gas: 4)\n 50961: i32 s0 = s1 + 0\n 50963: a1 = 0x20\n 50966: a0 = s0\n 50968: ra = 638, jump @0\n      : @689 [@dyn 319] (gas: 41)\n 50975: u8 [a0 + 31] = 0x9\n 50979: u8 [a0 + 30] = 0\n 50982: u8 [a0 + 29] = 0\n 50985: u8 [a0 + 28] = 0\n 50988: u8 [a0 + 27] = 0\n 50991: u8 [a0 + 26] = 0\n 50994: u8 [a0 + 25] = 0\n 50997: u8 [a0 + 24] = 0\n 51000: u8 [a0 + 23] = 0\n 51003: u8 [a0 + 22] = 0\n 51006: u8 [a0 + 21] = 0\n 51009: u8 [a0 + 20] = 0\n 51012: u8 [a0 + 19] = 0\n 51015: u8 [a0 + 18] = 0\n 51018: u8 [a0 + 17] = 0\n 51021: u8 [a0 + 16] = 0\n 51024: u8 [a0 + 15] = 0\n 51027: u8 [a0 + 14] = 0\n 51030: u8 [a0 + 13] = 0\n 51033: u8 [a0 + 12] = 0\n 51036: u8 [a0 + 11] = 0\n 51039: u8 [a0 + 10] = 0\n 51042: u8 [a0 + 9] = 0\n 51045: u8 [a0 + 8] = 0\n 51048: u8 [a0 + 7] = 0\n 51051: u8 [a0 + 6] = 0\n 51054: u8 [a0 + 5] = 0\n 51057: u8 [a0 + 4] = 0\n 51060: u8 [a0 + 3] = 0\n 51063: u8 [a0 + 2] = 0\n 51066: u8 [a0 + 1] = 0\n 51069: a1 = u64 [sp + 0x20]\n 51072: a2 = u64 [sp + 0x38]\n 51075: a1 = a1 | a2\n 51078: a2 = 0xffffffe0\n 51088: a2 = s1 <u a2\n 51091: a3 = u64 [sp + 0x40]\n 51094: a2 = 0 if a3 != 0\n 51096: a2 = 0 if a1 != 0\n 51098: u8 [a0 + 0] = 0\n 51100: jump @692 if a2 == 0\n      : @690 (gas: 3)\n 51104: i32 a0 = s0 + 0x20\n 51107: a1 = 0x20\n 51110: ra = 640, jump @0\n      : @691 [@dyn 320] (gas: 54)\n 51117: u8 [a0 + 31] = 0\n 51120: u8 [a0 + 30] = 0\n 51123: u8 [a0 + 29] = 0\n 51126: u8 [a0 + 28] = 0\n 51129: u8 [a0 + 27] = 0\n 51132: u8 [a0 + 26] = 0\n 51135: u8 [a0 + 25] = 0\n 51138: u8 [a0 + 24] = 0\n 51141: u8 [a0 + 23] = 0\n 51144: u8 [a0 + 22] = 0\n 51147: u8 [a0 + 21] = 0\n 51150: u8 [a0 + 20] = 0\n 51153: u8 [a0 + 19] = 0\n 51156: u8 [a0 + 18] = 0\n 51159: u8 [a0 + 17] = 0\n 51162: u8 [a0 + 16] = 0\n 51165: u8 [a0 + 15] = 0\n 51168: u8 [a0 + 14] = 0\n 51171: u8 [a0 + 13] = 0\n 51174: u8 [a0 + 12] = 0\n 51177: u8 [a0 + 11] = 0\n 51180: u8 [a0 + 10] = 0\n 51183: u8 [a0 + 9] = 0\n 51186: u8 [a0 + 8] = 0x30\n 51190: u8 [a0 + 7] = 0x20\n 51194: u8 [a0 + 6] = 0x3d\n 51198: u8 [a0 + 5] = 0x20\n 51202: u8 [a0 + 4] = 0x65\n 51206: u8 [a0 + 3] = 0x63\n 51210: u8 [a0 + 2] = 0x69\n 51214: u8 [a0 + 1] = 0x72\n 51218: u8 [a0 + 0] = 0x70\n 51221: a1 = u64 [sp]\n 51223: a0 = a1 + 0x60\n 51226: a1 = a0 <u a1\n 51229: a3 = u64 [sp + 0x8]\n 51232: a2 = a3 + a1\n 51235: a3 = a2 <u a3\n 51238: a3 = a1 if a1 == 0\n 51241: a1 = u64 [sp + 0x10]\n 51244: a3 = a3 + a1\n 51247: a1 = a3 <u a1\n 51250: a4 = u64 [sp + 0x18]\n 51253: a1 = a1 + a4\n 51256: a4 = u64 [sp + 0x28]\n 51259: u64 [a4] = a0\n 51261: u64 [a4 + 0x8] = a2\n 51264: u64 [a4 + 0x10] = a3\n 51267: u64 [a4 + 0x18] = a1\n 51270: ra = u64 [sp + 0x58]\n 51273: s0 = u64 [sp + 0x50]\n 51276: s1 = u64 [sp + 0x48]\n 51279: sp = sp + 0x60\n 51282: ret\n      : @692 (gas: 1)\n 51284: trap\n      : @693 (gas: 17)\n 51285: sp = sp + 0xffffffffffffffa0\n 51288: u64 [sp + 0x58] = ra\n 51291: u64 [sp + 0x50] = s0\n 51294: u64 [sp + 0x48] = s1\n 51297: a3 = u64 [a1 + 0x18]\n 51300: a4 = u64 [a1 + 0x10]\n 51303: a5 = u64 [a1 + 0x8]\n 51306: s1 = u64 [a1]\n 51308: a1 = a5 | a3\n 51311: a2 = s1 | a4\n 51314: a2 = a2 | a1\n 51317: a2 = a2 >> 0x20\n 51320: a1 = a1 | a4\n 51323: a1 = a1 << 0x20\n 51326: a1 = a1 | a2\n 51329: u64 [sp + 0x28] = a0\n 51332: jump @700 if a1 != 0\n      : @694 (gas: 19)\n 51336: a0 = s1 + 0x20\n 51339: u64 [sp + 0x30] = a0\n 51342: a0 = a0 <u s1\n 51345: a1 = a5 + a0\n 51348: u64 [sp + 0x40] = a1\n 51351: u64 [sp + 0x8] = a5\n 51354: s0 = a1 <u a5\n 51357: s0 = a0 if a0 == 0\n 51360: s0 = s0 + a4\n 51363: u64 [sp + 0x10] = a4\n 51366: a0 = s0 <u a4\n 51369: u64 [sp + 0x18] = a3\n 51372: a0 = a0 + a3\n 51375: u64 [sp + 0x38] = a0\n 51378: u64 [sp] = s1\n 51380: i32 a0 = s1 + 0\n 51382: a1 = 0x20\n 51385: s1 = 0x20\n 51388: ra = 642, jump @0\n      : @695 [@dyn 321] (gas: 45)\n 51395: u8 [a0 + 0x1f] = s1\n 51398: a1 = u64 [sp + 0x30]\n 51401: s1 = a1\n 51403: a1 = a1 | s0\n 51406: a2 = u64 [sp + 0x40]\n 51409: a4 = u64 [sp + 0x38]\n 51412: a2 = a2 | a4\n 51415: a1 = a1 | a2\n 51418: a1 = a1 >> 0x20\n 51421: u64 [sp + 0x20] = s0\n 51424: a2 = a2 | s0\n 51427: a2 = a2 << 0x20\n 51430: a1 = a1 | a2\n 51433: u8 [a0 + 30] = 0\n 51436: u8 [a0 + 29] = 0\n 51439: u8 [a0 + 28] = 0\n 51442: u8 [a0 + 27] = 0\n 51445: u8 [a0 + 26] = 0\n 51448: u8 [a0 + 25] = 0\n 51451: u8 [a0 + 24] = 0\n 51454: u8 [a0 + 23] = 0\n 51457: u8 [a0 + 22] = 0\n 51460: u8 [a0 + 21] = 0\n 51463: u8 [a0 + 20] = 0\n 51466: u8 [a0 + 19] = 0\n 51469: u8 [a0 + 18] = 0\n 51472: u8 [a0 + 17] = 0\n 51475: u8 [a0 + 16] = 0\n 51478: u8 [a0 + 15] = 0\n 51481: u8 [a0 + 14] = 0\n 51484: u8 [a0 + 13] = 0\n 51487: u8 [a0 + 12] = 0\n 51490: u8 [a0 + 11] = 0\n 51493: u8 [a0 + 10] = 0\n 51496: u8 [a0 + 9] = 0\n 51499: u8 [a0 + 8] = 0\n 51502: u8 [a0 + 7] = 0\n 51505: u8 [a0 + 6] = 0\n 51508: u8 [a0 + 5] = 0\n 51511: u8 [a0 + 4] = 0\n 51514: u8 [a0 + 3] = 0\n 51517: u8 [a0 + 2] = 0\n 51520: u8 [a0 + 1] = 0\n 51523: u8 [a0 + 0] = 0\n 51525: jump @700 if a1 != 0\n      : @696 (gas: 4)\n 51529: i32 s0 = s1 + 0\n 51531: a1 = 0x20\n 51534: a0 = s0\n 51536: ra = 644, jump @0\n      : @697 [@dyn 322] (gas: 41)\n 51543: u8 [a0 + 31] = 0xd\n 51547: u8 [a0 + 30] = 0\n 51550: u8 [a0 + 29] = 0\n 51553: u8 [a0 + 28] = 0\n 51556: u8 [a0 + 27] = 0\n 51559: u8 [a0 + 26] = 0\n 51562: u8 [a0 + 25] = 0\n 51565: u8 [a0 + 24] = 0\n 51568: u8 [a0 + 23] = 0\n 51571: u8 [a0 + 22] = 0\n 51574: u8 [a0 + 21] = 0\n 51577: u8 [a0 + 20] = 0\n 51580: u8 [a0 + 19] = 0\n 51583: u8 [a0 + 18] = 0\n 51586: u8 [a0 + 17] = 0\n 51589: u8 [a0 + 16] = 0\n 51592: u8 [a0 + 15] = 0\n 51595: u8 [a0 + 14] = 0\n 51598: u8 [a0 + 13] = 0\n 51601: u8 [a0 + 12] = 0\n 51604: u8 [a0 + 11] = 0\n 51607: u8 [a0 + 10] = 0\n 51610: u8 [a0 + 9] = 0\n 51613: u8 [a0 + 8] = 0\n 51616: u8 [a0 + 7] = 0\n 51619: u8 [a0 + 6] = 0\n 51622: u8 [a0 + 5] = 0\n 51625: u8 [a0 + 4] = 0\n 51628: u8 [a0 + 3] = 0\n 51631: u8 [a0 + 2] = 0\n 51634: u8 [a0 + 1] = 0\n 51637: a1 = u64 [sp + 0x20]\n 51640: a2 = u64 [sp + 0x38]\n 51643: a1 = a1 | a2\n 51646: a2 = 0xffffffe0\n 51656: a2 = s1 <u a2\n 51659: a3 = u64 [sp + 0x40]\n 51662: a2 = 0 if a3 != 0\n 51664: a2 = 0 if a1 != 0\n 51666: u8 [a0 + 0] = 0\n 51668: jump @700 if a2 == 0\n      : @698 (gas: 3)\n 51672: i32 a0 = s0 + 0x20\n 51675: a1 = 0x20\n 51678: ra = 646, jump @0\n      : @699 [@dyn 323] (gas: 54)\n 51685: u8 [a0 + 31] = 0\n 51688: u8 [a0 + 30] = 0\n 51691: u8 [a0 + 29] = 0\n 51694: u8 [a0 + 28] = 0\n 51697: u8 [a0 + 27] = 0\n 51700: u8 [a0 + 26] = 0\n 51703: u8 [a0 + 25] = 0\n 51706: u8 [a0 + 24] = 0\n 51709: u8 [a0 + 23] = 0\n 51712: u8 [a0 + 22] = 0\n 51715: u8 [a0 + 21] = 0\n 51718: u8 [a0 + 20] = 0\n 51721: u8 [a0 + 19] = 0\n 51724: u8 [a0 + 18] = 0\n 51727: u8 [a0 + 17] = 0\n 51730: u8 [a0 + 16] = 0\n 51733: u8 [a0 + 15] = 0\n 51736: u8 [a0 + 14] = 0\n 51739: u8 [a0 + 13] = 0\n 51742: u8 [a0 + 12] = 0x79\n 51746: u8 [a0 + 11] = 0x74\n 51750: u8 [a0 + 10] = 0x70\n 51754: u8 [a0 + 9] = 0x6d\n 51758: u8 [a0 + 8] = 0x65\n 51762: u8 [a0 + 7] = 0x20\n 51766: u8 [a0 + 6] = 0x79\n 51770: u8 [a0 + 5] = 0x61\n 51774: u8 [a0 + 4] = 0x77\n 51778: u8 [a0 + 3] = 0x65\n 51782: u8 [a0 + 2] = 0x74\n 51786: u8 [a0 + 1] = 0x61\n 51790: u8 [a0 + 0] = 0x67\n 51793: a1 = u64 [sp]\n 51795: a0 = a1 + 0x60\n 51798: a1 = a0 <u a1\n 51801: a3 = u64 [sp + 0x8]\n 51804: a2 = a3 + a1\n 51807: a3 = a2 <u a3\n 51810: a3 = a1 if a1 == 0\n 51813: a1 = u64 [sp + 0x10]\n 51816: a3 = a3 + a1\n 51819: a1 = a3 <u a1\n 51822: a4 = u64 [sp + 0x18]\n 51825: a1 = a1 + a4\n 51828: a4 = u64 [sp + 0x28]\n 51831: u64 [a4] = a0\n 51833: u64 [a4 + 0x8] = a2\n 51836: u64 [a4 + 0x10] = a3\n 51839: u64 [a4 + 0x18] = a1\n 51842: ra = u64 [sp + 0x58]\n 51845: s0 = u64 [sp + 0x50]\n 51848: s1 = u64 [sp + 0x48]\n 51851: sp = sp + 0x60\n 51854: ret\n      : @700 (gas: 1)\n 51856: trap\n      : @701 (gas: 17)\n 51857: sp = sp + 0xffffffffffffffa0\n 51860: u64 [sp + 0x58] = ra\n 51863: u64 [sp + 0x50] = s0\n 51866: u64 [sp + 0x48] = s1\n 51869: a3 = u64 [a1 + 0x18]\n 51872: a4 = u64 [a1 + 0x10]\n 51875: a5 = u64 [a1 + 0x8]\n 51878: s1 = u64 [a1]\n 51880: a1 = a5 | a3\n 51883: a2 = s1 | a4\n 51886: a2 = a2 | a1\n 51889: a2 = a2 >> 0x20\n 51892: a1 = a1 | a4\n 51895: a1 = a1 << 0x20\n 51898: a1 = a1 | a2\n 51901: u64 [sp + 0x28] = a0\n 51904: jump @708 if a1 != 0\n      : @702 (gas: 19)\n 51908: a0 = s1 + 0x20\n 51911: u64 [sp + 0x30] = a0\n 51914: a0 = a0 <u s1\n 51917: a1 = a5 + a0\n 51920: u64 [sp + 0x40] = a1\n 51923: u64 [sp + 0x8] = a5\n 51926: s0 = a1 <u a5\n 51929: s0 = a0 if a0 == 0\n 51932: s0 = s0 + a4\n 51935: u64 [sp + 0x10] = a4\n 51938: a0 = s0 <u a4\n 51941: u64 [sp + 0x18] = a3\n 51944: a0 = a0 + a3\n 51947: u64 [sp + 0x38] = a0\n 51950: u64 [sp] = s1\n 51952: i32 a0 = s1 + 0\n 51954: a1 = 0x20\n 51957: s1 = 0x20\n 51960: ra = 648, jump @0\n      : @703 [@dyn 324] (gas: 45)\n 51967: u8 [a0 + 0x1f] = s1\n 51970: a1 = u64 [sp + 0x30]\n 51973: s1 = a1\n 51975: a1 = a1 | s0\n 51978: a2 = u64 [sp + 0x40]\n 51981: a4 = u64 [sp + 0x38]\n 51984: a2 = a2 | a4\n 51987: a1 = a1 | a2\n 51990: a1 = a1 >> 0x20\n 51993: u64 [sp + 0x20] = s0\n 51996: a2 = a2 | s0\n 51999: a2 = a2 << 0x20\n 52002: a1 = a1 | a2\n 52005: u8 [a0 + 30] = 0\n 52008: u8 [a0 + 29] = 0\n 52011: u8 [a0 + 28] = 0\n 52014: u8 [a0 + 27] = 0\n 52017: u8 [a0 + 26] = 0\n 52020: u8 [a0 + 25] = 0\n 52023: u8 [a0 + 24] = 0\n 52026: u8 [a0 + 23] = 0\n 52029: u8 [a0 + 22] = 0\n 52032: u8 [a0 + 21] = 0\n 52035: u8 [a0 + 20] = 0\n 52038: u8 [a0 + 19] = 0\n 52041: u8 [a0 + 18] = 0\n 52044: u8 [a0 + 17] = 0\n 52047: u8 [a0 + 16] = 0\n 52050: u8 [a0 + 15] = 0\n 52053: u8 [a0 + 14] = 0\n 52056: u8 [a0 + 13] = 0\n 52059: u8 [a0 + 12] = 0\n 52062: u8 [a0 + 11] = 0\n 52065: u8 [a0 + 10] = 0\n 52068: u8 [a0 + 9] = 0\n 52071: u8 [a0 + 8] = 0\n 52074: u8 [a0 + 7] = 0\n 52077: u8 [a0 + 6] = 0\n 52080: u8 [a0 + 5] = 0\n 52083: u8 [a0 + 4] = 0\n 52086: u8 [a0 + 3] = 0\n 52089: u8 [a0 + 2] = 0\n 52092: u8 [a0 + 1] = 0\n 52095: u8 [a0 + 0] = 0\n 52097: jump @708 if a1 != 0\n      : @704 (gas: 4)\n 52101: i32 s0 = s1 + 0\n 52103: a1 = 0x20\n 52106: a0 = s0\n 52108: ra = 650, jump @0\n      : @705 [@dyn 325] (gas: 41)\n 52115: u8 [a0 + 31] = 0xd\n 52119: u8 [a0 + 30] = 0\n 52122: u8 [a0 + 29] = 0\n 52125: u8 [a0 + 28] = 0\n 52128: u8 [a0 + 27] = 0\n 52131: u8 [a0 + 26] = 0\n 52134: u8 [a0 + 25] = 0\n 52137: u8 [a0 + 24] = 0\n 52140: u8 [a0 + 23] = 0\n 52143: u8 [a0 + 22] = 0\n 52146: u8 [a0 + 21] = 0\n 52149: u8 [a0 + 20] = 0\n 52152: u8 [a0 + 19] = 0\n 52155: u8 [a0 + 18] = 0\n 52158: u8 [a0 + 17] = 0\n 52161: u8 [a0 + 16] = 0\n 52164: u8 [a0 + 15] = 0\n 52167: u8 [a0 + 14] = 0\n 52170: u8 [a0 + 13] = 0\n 52173: u8 [a0 + 12] = 0\n 52176: u8 [a0 + 11] = 0\n 52179: u8 [a0 + 10] = 0\n 52182: u8 [a0 + 9] = 0\n 52185: u8 [a0 + 8] = 0\n 52188: u8 [a0 + 7] = 0\n 52191: u8 [a0 + 6] = 0\n 52194: u8 [a0 + 5] = 0\n 52197: u8 [a0 + 4] = 0\n 52200: u8 [a0 + 3] = 0\n 52203: u8 [a0 + 2] = 0\n 52206: u8 [a0 + 1] = 0\n 52209: a1 = u64 [sp + 0x20]\n 52212: a2 = u64 [sp + 0x38]\n 52215: a1 = a1 | a2\n 52218: a2 = 0xffffffe0\n 52228: a2 = s1 <u a2\n 52231: a3 = u64 [sp + 0x40]\n 52234: a2 = 0 if a3 != 0\n 52236: a2 = 0 if a1 != 0\n 52238: u8 [a0 + 0] = 0\n 52240: jump @708 if a2 == 0\n      : @706 (gas: 3)\n 52244: i32 a0 = s0 + 0x20\n 52247: a1 = 0x20\n 52250: ra = 652, jump @0\n      : @707 [@dyn 326] (gas: 54)\n 52257: u8 [a0 + 31] = 0\n 52260: u8 [a0 + 30] = 0\n 52263: u8 [a0 + 29] = 0\n 52266: u8 [a0 + 28] = 0\n 52269: u8 [a0 + 27] = 0\n 52272: u8 [a0 + 26] = 0\n 52275: u8 [a0 + 25] = 0\n 52278: u8 [a0 + 24] = 0\n 52281: u8 [a0 + 23] = 0\n 52284: u8 [a0 + 22] = 0\n 52287: u8 [a0 + 21] = 0\n 52290: u8 [a0 + 20] = 0\n 52293: u8 [a0 + 19] = 0\n 52296: u8 [a0 + 18] = 0\n 52299: u8 [a0 + 17] = 0\n 52302: u8 [a0 + 16] = 0\n 52305: u8 [a0 + 15] = 0\n 52308: u8 [a0 + 14] = 0\n 52311: u8 [a0 + 13] = 0\n 52314: u8 [a0 + 12] = 0x65\n 52318: u8 [a0 + 11] = 0x63\n 52322: u8 [a0 + 10] = 0x69\n 52326: u8 [a0 + 9] = 0x72\n 52330: u8 [a0 + 8] = 0x70\n 52334: u8 [a0 + 7] = 0x20\n 52338: u8 [a0 + 6] = 0x3c\n 52342: u8 [a0 + 5] = 0x20\n 52346: u8 [a0 + 4] = 0x65\n 52350: u8 [a0 + 3] = 0x6b\n 52354: u8 [a0 + 2] = 0x61\n 52358: u8 [a0 + 1] = 0x74\n 52362: u8 [a0 + 0] = 0x73\n 52365: a1 = u64 [sp]\n 52367: a0 = a1 + 0x60\n 52370: a1 = a0 <u a1\n 52373: a3 = u64 [sp + 0x8]\n 52376: a2 = a3 + a1\n 52379: a3 = a2 <u a3\n 52382: a3 = a1 if a1 == 0\n 52385: a1 = u64 [sp + 0x10]\n 52388: a3 = a3 + a1\n 52391: a1 = a3 <u a1\n 52394: a4 = u64 [sp + 0x18]\n 52397: a1 = a1 + a4\n 52400: a4 = u64 [sp + 0x28]\n 52403: u64 [a4] = a0\n 52405: u64 [a4 + 0x8] = a2\n 52408: u64 [a4 + 0x10] = a3\n 52411: u64 [a4 + 0x18] = a1\n 52414: ra = u64 [sp + 0x58]\n 52417: s0 = u64 [sp + 0x50]\n 52420: s1 = u64 [sp + 0x48]\n 52423: sp = sp + 0x60\n 52426: ret\n      : @708 (gas: 1)\n 52428: trap\n      : @709 (gas: 16)\n 52429: sp = sp + 0xfffffffffffffee0\n 52433: u64 [sp + 0x118] = ra\n 52437: u64 [sp + 0x110] = s0\n 52441: u64 [sp + 0x108] = s1\n 52445: s0 = sp + 0x120\n 52449: sp = sp & 0xfffffffffffffff0\n 52452: a4 = u64 [a2 + 0x18]\n 52455: a5 = u64 [a2 + 0x10]\n 52458: s1 = u64 [a2 + 0x8]\n 52461: u64 [sp + 0x50] = a4\n 52464: u64 [sp + 0x48] = a5\n 52467: a4 = a4 | a5\n 52470: a5 = s1 <u 0x1\n 52473: a5 = 0 if a4 != 0\n 52475: u64 [sp] = a0\n 52477: jump @723 if a5 == 0\n      : @710 (gas: 35)\n 52481: a0 = u64 [a3 + 0x18]\n 52484: u64 [sp + 0x18] = a0\n 52487: a0 = u64 [a3 + 0x10]\n 52490: u64 [sp + 0x20] = a0\n 52493: a0 = u64 [a3 + 0x8]\n 52496: u64 [sp + 0x8] = a0\n 52499: a0 = u64 [a3]\n 52501: u64 [sp + 0x10] = a0\n 52504: a2 = u64 [a2]\n 52506: a0 = u64 [a1 + 0x18]\n 52509: u64 [sp + 0x70] = a0\n 52512: a0 = u64 [a1 + 0x10]\n 52515: u64 [sp + 0x78] = a0\n 52518: a0 = u64 [a1 + 0x8]\n 52521: u64 [sp + 0x68] = a0\n 52524: a0 = u64 [a1]\n 52526: u64 [sp + 0x60] = a0\n 52529: a0 = a2 + 0x1f\n 52532: u64 [sp + 0x40] = a2\n 52535: a1 = a0 <u a2\n 52538: a1 = a1 + s1\n 52541: a1 = a1 & 0x1\n 52544: a0 = a0 & 0xffffffffffffffe0\n 52547: a2 = a0 + 0x20\n 52550: a0 = a2 <u a0\n 52553: a3 = a1 + a0\n 52556: a4 = a3 <u a1\n 52559: a4 = a0 if a0 == 0\n 52562: u64 [sp + 216] = 0\n 52566: u64 [sp + 0xc0] = a2\n 52570: u64 [sp + 0xc8] = a3\n 52574: a0 = sp + 0xe0\n 52578: a1 = sp + 0xc0\n 52582: u64 [sp + 0xd0] = a4\n 52586: ra = 654, jump @78\n      : @711 [@dyn 327] (gas: 15)\n 52593: a0 = u64 [sp + 0xf8]\n 52597: a2 = u64 [sp + 0xf0]\n 52601: a1 = u64 [sp + 0xe8]\n 52605: a3 = u64 [sp + 0xe0]\n 52609: u64 [sp + 0x58] = a0\n 52612: u64 [sp + 0x30] = a1\n 52615: a0 = a0 | a1\n 52618: a1 = a3 | a2\n 52621: a1 = a1 | a0\n 52624: a1 = a1 >> 0x20\n 52627: u64 [sp + 0x38] = a2\n 52630: a0 = a0 | a2\n 52633: a0 = a0 << 0x20\n 52636: a0 = a0 | a1\n 52639: jump @722 if a0 != 0\n      : @712 (gas: 4)\n 52643: u64 [sp + 0x28] = a3\n 52646: i32 a0 = a3 + 0\n 52648: a1 = 0x20\n 52651: ra = 656, jump @0\n      : @713 [@dyn 328] (gas: 102)\n 52658: t2 = u64 [sp + 0x40]\n 52661: a1 = u64 [sp + 0x60]\n 52664: a1 = a1 + t2\n 52667: a3 = a1 <u t2\n 52670: a2 = u64 [sp + 0x68]\n 52673: a2 = a2 + s1\n 52676: a4 = a2 + a3\n 52679: a5 = a4 ^ s1\n 52682: a2 = a4 <u s1\n 52685: a2 = a3 if a5 == 0\n 52688: a5 = u64 [sp + 0x8]\n 52691: a3 = a4 ^ a5\n 52694: a4 = a5 <u a4\n 52697: a5 = u64 [sp + 0x10]\n 52700: a1 = a5 <u a1\n 52703: ra = u64 [sp + 0x48]\n 52706: a5 = u64 [sp + 0x78]\n 52709: a5 = a5 + ra\n 52712: a1 = a4 if a3 != 0\n 52715: a3 = a5 <u ra\n 52718: t1 = u64 [sp + 0x50]\n 52721: a4 = u64 [sp + 0x70]\n 52724: a4 = a4 + t1\n 52727: a3 = a3 + a4\n 52730: a2 = a2 + a5\n 52733: a4 = a2 <u a5\n 52736: a3 = a3 + a4\n 52739: a5 = u64 [sp + 0x18]\n 52742: a4 = a3 ^ a5\n 52745: a3 = a5 <u a3\n 52748: t0 = u64 [sp + 0x20]\n 52751: a5 = t0 <u a2\n 52754: a3 = a5 if a4 == 0\n 52757: a2 = a2 ^ t0\n 52760: a2 = a2 | a4\n 52763: a1 = a3 if a2 != 0\n 52766: a2 = reverse t2\n 52768: a3 = a2 >> 0x38\n 52771: u8 [a0 + 0x1f] = a3\n 52774: a3 = a2 >> 0x30\n 52777: u8 [a0 + 0x1e] = a3\n 52780: a3 = a2 >> 0x28\n 52783: u8 [a0 + 0x1d] = a3\n 52786: a3 = a2 >> 0x20\n 52789: u8 [a0 + 0x1c] = a3\n 52792: a3 = a2 >> 0x18\n 52795: u8 [a0 + 0x1b] = a3\n 52798: a3 = a2 >> 0x10\n 52801: u8 [a0 + 0x1a] = a3\n 52804: a3 = a2 >> 0x8\n 52807: u8 [a0 + 0x19] = a3\n 52810: a3 = reverse s1\n 52812: u8 [a0 + 0x18] = a2\n 52815: a2 = a3 >> 0x38\n 52818: u8 [a0 + 0x17] = a2\n 52821: a2 = a3 >> 0x30\n 52824: u8 [a0 + 0x16] = a2\n 52827: a2 = a3 >> 0x28\n 52830: u8 [a0 + 0x15] = a2\n 52833: a2 = a3 >> 0x20\n 52836: u8 [a0 + 0x14] = a2\n 52839: a2 = a3 >> 0x18\n 52842: u8 [a0 + 0x13] = a2\n 52845: a2 = a3 >> 0x10\n 52848: u8 [a0 + 0x12] = a2\n 52851: a2 = reverse ra\n 52853: u8 [a0 + 0x10] = a3\n 52856: a3 = a3 >> 0x8\n 52859: u8 [a0 + 0x11] = a3\n 52862: a3 = a2 >> 0x38\n 52865: u8 [a0 + 0xf] = a3\n 52868: a3 = a2 >> 0x30\n 52871: u8 [a0 + 0xe] = a3\n 52874: a3 = a2 >> 0x28\n 52877: u8 [a0 + 0xd] = a3\n 52880: a3 = a2 >> 0x20\n 52883: u8 [a0 + 0xc] = a3\n 52886: a3 = a2 >> 0x18\n 52889: u8 [a0 + 0xb] = a3\n 52892: a3 = a2 >> 0x10\n 52895: u8 [a0 + 0xa] = a3\n 52898: a3 = reverse t1\n 52900: u8 [a0 + 0x8] = a2\n 52903: a2 = a2 >> 0x8\n 52906: u8 [a0 + 0x9] = a2\n 52909: a2 = a3 >> 0x38\n 52912: u8 [a0 + 0x7] = a2\n 52915: a2 = a3 >> 0x30\n 52918: u8 [a0 + 0x6] = a2\n 52921: a2 = a3 >> 0x28\n 52924: u8 [a0 + 0x5] = a2\n 52927: a2 = a3 >> 0x20\n 52930: u8 [a0 + 0x4] = a2\n 52933: a2 = a3 >> 0x18\n 52936: u8 [a0 + 0x3] = a2\n 52939: a2 = a3 >> 0x10\n 52942: u8 [a0 + 0x2] = a2\n 52945: u8 [a0] = a3\n 52947: a3 = a3 >> 0x8\n 52950: u8 [a0 + 0x1] = a3\n 52953: t0 = u64 [sp + 0x60]\n 52956: jump @727 if a1 != 0\n      : @714 (gas: 12)\n 52960: a2 = u64 [sp + 0x78]\n 52963: a0 = t0 | a2\n 52966: a1 = u64 [sp + 0x70]\n 52969: a3 = u64 [sp + 0x68]\n 52972: a1 = a1 | a3\n 52975: a0 = a0 | a1\n 52978: a0 = a0 >> 0x20\n 52981: a1 = a1 | a2\n 52984: a1 = a1 << 0x20\n 52987: a0 = a0 | a1\n 52990: a3 = u64 [sp + 0x58]\n 52993: jump @722 if a0 != 0\n      : @715 (gas: 11)\n 52997: a0 = t2 | ra\n 53000: a1 = s1 | t1\n 53003: a0 = a0 | a1\n 53006: a0 = a0 >> 0x20\n 53009: a1 = a1 | ra\n 53012: a1 = a1 << 0x20\n 53015: a0 = a0 | a1\n 53018: a2 = u64 [sp + 0x38]\n 53021: a4 = u64 [sp + 0x30]\n 53024: a5 = u64 [sp + 0x28]\n 53027: jump @722 if a0 != 0\n      : @716 (gas: 7)\n 53031: u64 [sp + 0x78] = s1\n 53034: a0 = a2 | a3\n 53037: a1 = 0xffffffe0\n 53047: a1 = a5 <u a1\n 53050: a1 = 0 if a4 != 0\n 53052: a1 = 0 if a0 != 0\n 53054: jump @722 if a1 == 0\n      : @717 (gas: 16)\n 53058: s1 = a5 + 0x20\n 53061: a0 = s1 <u a5\n 53064: a1 = a4 + a0\n 53067: u64 [sp + 0x20] = a1\n 53070: a1 = a1 <u a4\n 53073: a1 = a0 if a0 == 0\n 53076: a1 = a1 + a2\n 53079: u64 [sp + 0x68] = a1\n 53082: a0 = a1 <u a2\n 53085: u64 [sp + 0x70] = a0\n 53088: i32 t0 = t0 + 0\n 53090: u64 [sp + 0x60] = t0\n 53093: i32 a0 = s1 + 0\n 53095: i32 a1 = t2 + 0\n 53097: u64 [sp + 0x18] = a1\n 53100: ra = 658, jump @0\n      : @718 [@dyn 329] (gas: 5)\n 53107: i32 a0 = a0 + 0\n 53109: a1 = u64 [sp + 0x18]\n 53112: a2 = u64 [sp + 0x60]\n 53115: ecalli 1 // 'call_data_copy'\n 53117: fallthrough\n      : @719 (gas: 31)\n 53118: a0 = u64 [sp + 0x40]\n 53121: a0 = a0 + s1\n 53124: a1 = a0 <u s1\n 53127: a2 = u64 [sp + 0x78]\n 53130: a4 = u64 [sp + 0x20]\n 53133: a2 = a2 + a4\n 53136: a2 = a2 + a1\n 53139: a3 = a2 ^ a4\n 53142: a4 = a2 <u a4\n 53145: a4 = a1 if a3 == 0\n 53148: a1 = u64 [sp + 0x48]\n 53151: a3 = u64 [sp + 0x68]\n 53154: a1 = a1 + a3\n 53157: a4 = a4 + a1\n 53160: t0 = a4 <u a1\n 53163: a1 = a1 <u a3\n 53166: a5 = u64 [sp + 0x50]\n 53169: s1 = u64 [sp + 0x58]\n 53172: a5 = a5 + s1\n 53175: a3 = u64 [sp + 0x70]\n 53178: a5 = a5 + a3\n 53181: a1 = a1 + a5\n 53184: a1 = a1 + t0\n 53187: a3 = a0 | a4\n 53190: a1 = a1 | a2\n 53193: a3 = a3 | a1\n 53196: a3 = a3 >> 0x20\n 53199: a1 = a1 | a4\n 53202: a1 = a1 << 0x20\n 53205: a1 = a1 | a3\n 53208: jump @722 if a1 != 0\n      : @720 (gas: 3)\n 53212: i32 a0 = a0 + 0\n 53214: a1 = 0x20\n 53217: ra = 660, jump @0\n      : @721 [@dyn 330] (gas: 46)\n 53224: u8 [a0 + 31] = 0\n 53227: u8 [a0 + 30] = 0\n 53230: u8 [a0 + 29] = 0\n 53233: u8 [a0 + 28] = 0\n 53236: u8 [a0 + 27] = 0\n 53239: u8 [a0 + 26] = 0\n 53242: u8 [a0 + 25] = 0\n 53245: u8 [a0 + 24] = 0\n 53248: u8 [a0 + 23] = 0\n 53251: u8 [a0 + 22] = 0\n 53254: u8 [a0 + 21] = 0\n 53257: u8 [a0 + 20] = 0\n 53260: u8 [a0 + 19] = 0\n 53263: u8 [a0 + 18] = 0\n 53266: u8 [a0 + 17] = 0\n 53269: u8 [a0 + 16] = 0\n 53272: u8 [a0 + 15] = 0\n 53275: u8 [a0 + 14] = 0\n 53278: u8 [a0 + 13] = 0\n 53281: u8 [a0 + 12] = 0\n 53284: u8 [a0 + 11] = 0\n 53287: u8 [a0 + 10] = 0\n 53290: u8 [a0 + 9] = 0\n 53293: u8 [a0 + 8] = 0\n 53296: u8 [a0 + 7] = 0\n 53299: u8 [a0 + 6] = 0\n 53302: u8 [a0 + 5] = 0\n 53305: u8 [a0 + 4] = 0\n 53308: u8 [a0 + 3] = 0\n 53311: u8 [a0 + 2] = 0\n 53314: u8 [a0 + 1] = 0\n 53317: u8 [a0 + 0] = 0\n 53319: a0 = u64 [sp]\n 53321: a1 = u64 [sp + 0x28]\n 53324: u64 [a0] = a1\n 53326: u64 [a0 + 0x18] = s1\n 53329: a1 = u64 [sp + 0x30]\n 53332: u64 [a0 + 0x8] = a1\n 53335: a1 = u64 [sp + 0x38]\n 53338: u64 [a0 + 0x10] = a1\n 53341: sp = s0 + 0xfffffffffffffee0\n 53345: ra = u64 [sp + 0x118]\n 53349: s0 = u64 [sp + 0x110]\n 53353: s1 = u64 [sp + 0x108]\n 53357: sp = sp + 0x120\n 53361: ret\n      : @722 (gas: 1)\n 53363: trap\n      : @723 (gas: 8)\n 53364: u64 [sp + 176] = 0\n 53368: u64 [sp + 168] = 0\n 53372: u64 [sp + 160] = 0\n 53376: a0 = 0x4e487b7100000000\n 53386: a1 = sp + 0xa0\n 53390: u64 [sp + 0xb8] = a0\n 53394: a0 = 0\n 53396: ra = 662, jump @23\n      : @724 [@dyn 331] (gas: 7)\n 53403: u64 [sp + 152] = 0\n 53407: u64 [sp + 144] = 0\n 53411: u64 [sp + 128] = 0x41\n 53416: a0 = 0x4\n 53419: a1 = sp + 0x80\n 53423: u64 [sp + 136] = 0\n 53427: ra = 664, jump @23\n      : @725 [@dyn 332] (gas: 3)\n 53434: a1 = 0x24\n 53437: a0 = 0\n 53439: ra = 666, jump @0\n      : @726 [@dyn 333] (gas: 5)\n 53446: i32 a1 = a0 + 0\n 53448: a0 = 0x1\n 53451: a2 = 0x24\n 53454: ecalli 12 // 'seal_return'\n 53456: fallthrough\n      : @727 (gas: 3)\n 53457: a0 = 0\n 53459: a1 = 0\n 53461: ra = 668, jump @0\n      : @728 [@dyn 334] (gas: 6)\n 53468: i32 a1 = a0 + 0\n 53470: a0 = 0x1\n 53473: a2 = 0\n 53475: ra = 0x29e\n 53479: ecalli 12 // 'seal_return'\n 53481: fallthrough\n      : @729 [@dyn 335] (gas: 33)\n 53482: sp = sp + 0xffffffffffffff60\n 53486: u64 [sp + 0x98] = ra\n 53490: u64 [sp + 0x90] = s0\n 53494: u64 [sp + 0x88] = s1\n 53498: s0 = sp + 0xa0\n 53502: sp = sp & 0xfffffffffffffff0\n 53505: t0 = u64 [a1]\n 53507: t1 = u64 [a1 + 0x8]\n 53510: t2 = u64 [a1 + 0x10]\n 53513: ra = u64 [a1 + 0x18]\n 53516: a4 = u64 [a2]\n 53518: a3 = u64 [a2 + 0x8]\n 53521: a5 = u64 [a2 + 0x10]\n 53524: a2 = u64 [a2 + 0x18]\n 53527: a1 = u32 [0x200a8]\n 53532: s1 = a0\n 53534: u64 [sp + 24] = 0\n 53537: u64 [sp + 16] = 0\n 53540: u64 [sp + 8] = 0\n 53543: u64 [sp] = a1\n 53545: u64 [sp + 0x38] = a2\n 53548: u64 [sp + 0x30] = a5\n 53551: u64 [sp + 0x28] = a3\n 53554: u64 [sp + 0x20] = a4\n 53557: u64 [sp + 0x58] = ra\n 53560: u64 [sp + 0x50] = t2\n 53563: u64 [sp + 0x48] = t1\n 53566: a0 = sp + 0x60\n 53569: a1 = sp + 0x40\n 53572: a2 = sp + 0x20\n 53575: a3 = sp\n 53577: u64 [sp + 0x40] = t0\n 53580: ra = 672, jump @709\n      : @730 [@dyn 336] (gas: 14)\n 53586: a0 = u64 [sp + 0x70]\n 53589: a1 = u64 [sp + 0x78]\n 53592: a2 = u64 [sp + 0x60]\n 53595: a3 = u64 [sp + 0x68]\n 53598: u64 [s1 + 0x10] = a0\n 53601: u64 [s1 + 0x18] = a1\n 53604: u64 [s1] = a2\n 53606: u64 [s1 + 0x8] = a3\n 53609: sp = s0 + 0xffffffffffffff60\n 53613: ra = u64 [sp + 0x98]\n 53617: s0 = u64 [sp + 0x90]\n 53621: s1 = u64 [sp + 0x88]\n 53625: sp = sp + 0xa0\n 53629: ret\n      : @731 (gas: 15)\n 53631: sp = sp + 0xffffffffffffff20\n 53635: u64 [sp + 0xd8] = ra\n 53639: u64 [sp + 0xd0] = s0\n 53643: u64 [sp + 0xc8] = s1\n 53647: s0 = sp + 0xe0\n 53651: sp = sp & 0xffffffffffffffe0\n 53654: t0 = u64 [a1 + 0x18]\n 53657: a5 = u64 [a1 + 0x10]\n 53660: a4 = u64 [a1]\n 53662: s1 = u64 [a1 + 0x8]\n 53665: a1 = a5 | t0\n 53668: a3 = a4 <u 0x20\n 53671: a3 = 0 if s1 != 0\n 53673: a3 = 0 if a1 != 0\n 53675: jump @739 if a3 != 0\n      : @732 (gas: 23)\n 53679: a1 = u64 [a2 + 0x18]\n 53682: u64 [sp + 0x50] = a1\n 53685: a1 = u64 [a2 + 0x10]\n 53688: u64 [sp + 0x40] = a1\n 53691: a1 = u64 [a2 + 0x8]\n 53694: u64 [sp + 0x58] = a1\n 53697: a1 = u64 [a2]\n 53699: u64 [sp + 0x20] = a1\n 53702: a1 = u64 [a0 + 0x18]\n 53705: u64 [sp] = a1\n 53707: a1 = u64 [a0 + 0x10]\n 53710: u64 [sp + 0x8] = a1\n 53713: a1 = u64 [a0 + 0x8]\n 53716: u64 [sp + 0x10] = a1\n 53719: a0 = u64 [a0]\n 53721: u64 [sp + 0x18] = a0\n 53724: a1 = 0x20\n 53727: a0 = 0\n 53729: u64 [sp + 0x28] = t0\n 53732: u64 [sp + 0x48] = a5\n 53735: u64 [sp + 0x38] = s1\n 53738: u64 [sp + 0x30] = a4\n 53741: ra = 674, jump @0\n      : @733 [@dyn 337] (gas: 71)\n 53748: a1 = u64 [sp]\n 53750: a1 = reverse a1\n 53752: a2 = u64 [sp + 0x8]\n 53755: a2 = reverse a2\n 53757: a3 = u64 [sp + 0x10]\n 53760: a3 = reverse a3\n 53762: a4 = u64 [sp + 0x18]\n 53765: a4 = reverse a4\n 53767: a5 = a4 >> 0x38\n 53770: u8 [a0 + 0x1f] = a5\n 53773: a5 = a4 >> 0x30\n 53776: u8 [a0 + 0x1e] = a5\n 53779: a5 = a4 >> 0x28\n 53782: u8 [a0 + 0x1d] = a5\n 53785: a5 = a4 >> 0x20\n 53788: u8 [a0 + 0x1c] = a5\n 53791: a5 = a4 >> 0x18\n 53794: u8 [a0 + 0x1b] = a5\n 53797: a5 = a4 >> 0x10\n 53800: u8 [a0 + 0x1a] = a5\n 53803: a5 = a4 >> 0x8\n 53806: u8 [a0 + 0x19] = a5\n 53809: u8 [a0 + 0x18] = a4\n 53812: u8 [a0 + 0x10] = a3\n 53815: a4 = a3 >> 0x38\n 53818: u8 [a0 + 0x17] = a4\n 53821: a4 = a3 >> 0x30\n 53824: u8 [a0 + 0x16] = a4\n 53827: a4 = a3 >> 0x28\n 53830: u8 [a0 + 0x15] = a4\n 53833: a4 = a3 >> 0x20\n 53836: u8 [a0 + 0x14] = a4\n 53839: a4 = a3 >> 0x18\n 53842: u8 [a0 + 0x13] = a4\n 53845: a4 = a3 >> 0x10\n 53848: u8 [a0 + 0x12] = a4\n 53851: a3 = a3 >> 0x8\n 53854: u8 [a0 + 0x11] = a3\n 53857: u8 [a0 + 0x8] = a2\n 53860: a3 = a2 >> 0x38\n 53863: u8 [a0 + 0xf] = a3\n 53866: a3 = a2 >> 0x30\n 53869: u8 [a0 + 0xe] = a3\n 53872: a3 = a2 >> 0x28\n 53875: u8 [a0 + 0xd] = a3\n 53878: a3 = a2 >> 0x20\n 53881: u8 [a0 + 0xc] = a3\n 53884: a3 = a2 >> 0x18\n 53887: u8 [a0 + 0xb] = a3\n 53890: a3 = a2 >> 0x10\n 53893: u8 [a0 + 0xa] = a3\n 53896: a2 = a2 >> 0x8\n 53899: u8 [a0 + 0x9] = a2\n 53902: u8 [a0] = a1\n 53904: a2 = a1 >> 0x38\n 53907: u8 [a0 + 0x7] = a2\n 53910: a2 = a1 >> 0x30\n 53913: u8 [a0 + 0x6] = a2\n 53916: a2 = a1 >> 0x28\n 53919: u8 [a0 + 0x5] = a2\n 53922: a2 = a1 >> 0x20\n 53925: u8 [a0 + 0x4] = a2\n 53928: a2 = a1 >> 0x18\n 53931: u8 [a0 + 0x3] = a2\n 53934: a2 = a1 >> 0x10\n 53937: u8 [a0 + 0x2] = a2\n 53940: a1 = a1 >> 0x8\n 53943: u8 [a0 + 0x1] = a1\n 53946: a1 = 0x20\n 53949: a0 = 0\n 53951: ra = 676, jump @0\n      : @734 [@dyn 338] (gas: 5)\n 53958: i32 a0 = a0 + 0\n 53960: i32 a2 = sp + 0xa0\n 53964: a1 = 0x20\n 53967: ecalli 8 // 'hash_keccak_256'\n 53969: fallthrough\n      : @735 (gas: 112)\n 53970: a2 = u64 [sp + 0x20]\n 53973: a1 = a2 + 0x1f\n 53976: a0 = a1 <u a2\n 53979: t1 = a2\n 53981: a4 = u64 [sp + 0x58]\n 53984: a3 = a4 + a0\n 53987: a2 = a3 <u a4\n 53990: t0 = a4\n 53992: a2 = a0 if a0 == 0\n 53995: s1 = u64 [sp + 0x40]\n 53998: a2 = a2 + s1\n 54001: u64 [sp + 0x18] = a2\n 54004: a2 = a2 << 0x3b\n 54007: a4 = a3 >> 0x5\n 54010: a2 = a2 | a4\n 54013: a3 = a3 << 0x3b\n 54016: a1 = a1 >> 0x5\n 54019: a5 = a1 | a3\n 54022: a1 = t1 <u 0x20\n 54025: a1 = 0 if t0 != 0\n 54027: a3 = u64 [sp + 0xb8]\n 54031: t1 = u64 [sp + 0xb0]\n 54035: a0 = u64 [sp + 0x50]\n 54038: a4 = s1 | a0\n 54041: a1 = 0 if a4 != 0\n 54043: a4 = reverse a3\n 54045: s1 = reverse t1\n 54047: a2 = 0 if a1 != 0\n 54049: a5 = 0 if a1 != 0\n 54051: a5 = a5 + a4\n 54054: u64 [sp + 0x58] = a5\n 54057: a5 = a5 <u a4\n 54060: a3 = s1 + a5\n 54063: t0 = a3 + a2\n 54066: a3 = t0 ^ s1\n 54069: ra = t0 <u s1\n 54072: ra = a5 if a3 == 0\n 54075: a0 = u64 [sp + 0x30]\n 54078: t2 = a0 + 0x1f\n 54081: a0 = t2 <u a0\n 54084: a2 = u64 [sp + 0x38]\n 54087: a3 = a2 + a0\n 54090: a5 = a3 <u a2\n 54093: a5 = a0 if a0 == 0\n 54096: a0 = u64 [sp + 0x48]\n 54099: a5 = a5 + a0\n 54102: a0 = a5 << 0x3b\n 54105: a2 = a3 >> 0x5\n 54108: a0 = a0 | a2\n 54111: a3 = a3 << 0x3b\n 54114: a2 = t2 >> 0x5\n 54117: a2 = a2 | a3\n 54120: t2 = a4 + a2\n 54123: a2 = t2 <u a4\n 54126: a3 = s1 + a2\n 54129: t1 = a3 + a0\n 54132: a0 = t1 ^ s1\n 54135: a3 = t1 <u s1\n 54138: a3 = a2 if a0 == 0\n 54141: a4 = u64 [sp + 0x18]\n 54144: a0 = u64 [sp + 0x40]\n 54147: a0 = a4 <u a0\n 54150: a2 = u64 [sp + 0x50]\n 54153: a0 = a0 + a2\n 54156: a2 = a4 >> 0x5\n 54159: a4 = a0 << 0x3b\n 54162: a2 = a2 | a4\n 54165: a0 = a0 >> 0x5\n 54168: a4 = u64 [sp + 0xa8]\n 54172: s1 = u64 [sp + 0xa0]\n 54176: a2 = 0 if a1 != 0\n 54178: a0 = 0 if a1 != 0\n 54180: a1 = reverse a4\n 54182: a4 = reverse s1\n 54184: u64 [sp + 0x50] = a4\n 54187: a0 = a0 + a4\n 54190: a2 = a2 + a1\n 54193: s1 = a2 <u a1\n 54196: a0 = a0 + s1\n 54199: a4 = a2 + ra\n 54202: s1 = a4 <u a2\n 54205: s1 = s1 + a0\n 54208: a0 = u64 [sp + 0x48]\n 54211: a0 = a5 <u a0\n 54214: a2 = u64 [sp + 0x28]\n 54217: a0 = a0 + a2\n 54220: a5 = a5 >> 0x5\n 54223: a2 = a0 << 0x3b\n 54226: a2 = a2 | a5\n 54229: a5 = u64 [sp + 0x58]\n 54232: a0 = a0 >> 0x5\n 54235: a2 = a2 + a1\n 54238: ra = a2 + a3\n 54241: a1 = a2 <u a1\n 54244: a2 = ra <u a2\n 54247: a3 = u64 [sp + 0x50]\n 54250: a0 = a0 + a3\n 54253: a0 = a0 + a1\n 54256: a3 = a0 + a2\n 54259: a0 = t0 ^ t1\n 54262: a1 = t0 <u t1\n 54265: a2 = a5 <u t2\n 54268: a2 = a1 if a0 != 0\n 54271: a0 = a4 <u ra\n 54274: a1 = s1 ^ a3\n 54277: u64 [sp + 0x40] = a3\n 54280: a3 = s1 <u a3\n 54283: a3 = a0 if a1 == 0\n 54286: a0 = a4 ^ ra\n 54289: a0 = a0 | a1\n 54292: a2 = a3 if a0 != 0\n 54295: jump @739 if a2 == 0\n      : @736 (gas: 5)\n 54299: a0 = a4\n 54301: u64 [sp + 0x38] = t2\n 54304: u64 [sp + 0x30] = t1\n 54307: u64 [sp + 0x28] = ra\n 54310: fallthrough\n      : @737 (gas: 36)\n 54311: u64 [sp + 0x48] = a0\n 54314: u64 [sp + 0x50] = t0\n 54317: u64 [sp + 0x58] = a5\n 54320: u64 [sp + 0x90] = a0\n 54324: u64 [sp + 0x88] = t0\n 54328: u64 [sp + 0x80] = a5\n 54332: u64 [sp + 0x98] = s1\n 54336: u64 [sp + 184] = 0\n 54340: u64 [sp + 176] = 0\n 54344: u64 [sp + 168] = 0\n 54348: u64 [sp + 160] = 0\n 54352: u32 [sp + 96] = 0x20\n 54356: i32 a1 = sp + 0x80\n 54360: i32 a3 = sp + 0xa0\n 54364: i32 a4 = sp + 0x60\n 54367: a2 = 0xffffffffffffffff\n 54370: a0 = 0\n 54372: ecalli 7 // 'get_storage'\n 54374: u64 [sp + 0x98] = s1\n 54378: a0 = u64 [sp + 0x48]\n 54381: u64 [sp + 0x90] = a0\n 54385: a0 = u64 [sp + 0x50]\n 54388: u64 [sp + 0x88] = a0\n 54392: a0 = u64 [sp + 0x58]\n 54395: u64 [sp + 0x80] = a0\n 54399: u64 [sp + 184] = 0\n 54403: u64 [sp + 176] = 0\n 54407: u64 [sp + 168] = 0\n 54411: u64 [sp + 160] = 0\n 54415: i32 a1 = sp + 0x80\n 54419: i32 a3 = sp + 0xa0\n 54423: a2 = 0xffffffffffffffff\n 54426: a4 = 0x20\n 54429: a0 = 0\n 54431: ecalli 14 // 'set_storage'\n 54433: fallthrough\n      : @738 (gas: 27)\n 54434: ra = u64 [sp + 0x28]\n 54437: t1 = u64 [sp + 0x30]\n 54440: t2 = u64 [sp + 0x38]\n 54443: t0 = u64 [sp + 0x50]\n 54446: a5 = u64 [sp + 0x58]\n 54449: a5 = a5 + 0x1\n 54452: a0 = a5 <u 0x1\n 54455: t0 = t0 + a0\n 54458: a0 = a5 | t0\n 54461: a0 = a0 <u 0x1\n 54464: a1 = u64 [sp + 0x48]\n 54467: a0 = a0 + a1\n 54470: a1 = a0 <u a1\n 54473: s1 = s1 + a1\n 54476: a1 = a5 <u t2\n 54479: a2 = t0 ^ t1\n 54482: a3 = t0 <u t1\n 54485: a3 = a1 if a2 == 0\n 54488: a1 = a0 <u ra\n 54491: a4 = u64 [sp + 0x40]\n 54494: a2 = s1 ^ a4\n 54497: a4 = s1 <u a4\n 54500: a4 = a1 if a2 == 0\n 54503: a1 = a0 ^ ra\n 54506: a1 = a1 | a2\n 54509: a4 = a3 if a1 == 0\n 54512: jump @737 if a4 != 0\n      : @739 (gas: 6)\n 54516: sp = s0 + 0xffffffffffffff20\n 54520: ra = u64 [sp + 0xd8]\n 54524: s0 = u64 [sp + 0xd0]\n 54528: s1 = u64 [sp + 0xc8]\n 54532: sp = sp + 0xe0\n 54536: ret\n      : @740 (gas: 21)\n 54538: sp = sp + 0xfffffffffffffd40\n 54542: u64 [sp + 0x2b8] = ra\n 54546: u64 [sp + 0x2b0] = s0\n 54550: u64 [sp + 0x2a8] = s1\n 54554: s0 = sp + 0x2c0\n 54558: sp = sp & 0xffffffffffffffe0\n 54561: a3 = u64 [a1 + 0x10]\n 54564: a2 = u64 [a1 + 0x18]\n 54567: a4 = u64 [a1 + 0x8]\n 54570: a5 = u64 [a1]\n 54572: u64 [sp + 0x98] = a2\n 54576: u64 [sp + 0x88] = a4\n 54580: a1 = a4 | a2\n 54583: a2 = a5 | a3\n 54586: a2 = a2 | a1\n 54589: a2 = a2 >> 0x20\n 54592: u64 [sp + 0x90] = a3\n 54596: a1 = a1 | a3\n 54599: a1 = a1 << 0x20\n 54602: a1 = a1 | a2\n 54605: jump @770 if a1 != 0\n      : @741 (gas: 13)\n 54609: a1 = u64 [a0 + 0x18]\n 54612: u64 [sp + 0x40] = a1\n 54615: a1 = u64 [a0 + 0x10]\n 54618: u64 [sp + 0x58] = a1\n 54621: a1 = u64 [a0 + 0x8]\n 54624: u64 [sp + 0x48] = a1\n 54627: a0 = u64 [a0]\n 54629: u64 [sp + 0x50] = a0\n 54632: u64 [sp + 0x80] = a5\n 54636: i32 a0 = a5 + 0\n 54638: a1 = 0x20\n 54641: u64 [sp + 0x18] = a0\n 54644: ra = 678, jump @0\n      : @742 [@dyn 339] (gas: 80)\n 54651: a1 = u8 [a0 + 0x9]\n 54654: a2 = u8 [a0 + 0x8]\n 54657: a3 = u8 [a0 + 0xa]\n 54660: a4 = u8 [a0 + 0xb]\n 54663: a1 = a1 << 0x8\n 54666: a1 = a1 | a2\n 54669: a3 = a3 << 0x10\n 54672: a4 = a4 << 0x18\n 54675: a3 = a3 | a4\n 54678: a1 = a1 | a3\n 54681: a2 = u8 [a0 + 0xd]\n 54684: a3 = u8 [a0 + 0xc]\n 54687: a4 = u8 [a0 + 0xe]\n 54690: a5 = u8 [a0 + 0xf]\n 54693: a2 = a2 << 0x8\n 54696: a2 = a2 | a3\n 54699: a4 = a4 << 0x10\n 54702: a5 = a5 << 0x18\n 54705: a4 = a4 | a5\n 54708: a2 = a2 | a4\n 54711: a2 = a2 << 0x20\n 54714: t0 = a2 | a1\n 54717: a1 = u8 [a0 + 0x1]\n 54720: a2 = u8 [a0]\n 54722: a3 = u8 [a0 + 0x2]\n 54725: a4 = u8 [a0 + 0x3]\n 54728: a1 = a1 << 0x8\n 54731: a1 = a1 | a2\n 54734: a3 = a3 << 0x10\n 54737: a4 = a4 << 0x18\n 54740: a3 = a3 | a4\n 54743: a1 = a1 | a3\n 54746: a2 = u8 [a0 + 0x5]\n 54749: a3 = u8 [a0 + 0x4]\n 54752: a4 = u8 [a0 + 0x6]\n 54755: a5 = u8 [a0 + 0x7]\n 54758: a2 = a2 << 0x8\n 54761: a2 = a2 | a3\n 54764: a4 = a4 << 0x10\n 54767: a5 = a5 << 0x18\n 54770: a4 = a4 | a5\n 54773: a2 = a2 | a4\n 54776: a2 = a2 << 0x20\n 54779: s1 = a2 | a1\n 54782: a1 = u8 [a0 + 0x11]\n 54785: a2 = u8 [a0 + 0x10]\n 54788: a3 = u8 [a0 + 0x12]\n 54791: a4 = u8 [a0 + 0x13]\n 54794: a1 = a1 << 0x8\n 54797: a1 = a1 | a2\n 54800: a3 = a3 << 0x10\n 54803: a4 = a4 << 0x18\n 54806: a3 = a3 | a4\n 54809: a1 = a1 | a3\n 54812: a2 = u8 [a0 + 0x15]\n 54815: a3 = u8 [a0 + 0x14]\n 54818: a4 = u8 [a0 + 0x16]\n 54821: a5 = u8 [a0 + 0x17]\n 54824: a2 = a2 << 0x8\n 54827: a2 = a2 | a3\n 54830: a4 = a4 << 0x10\n 54833: a5 = a5 << 0x18\n 54836: a4 = a4 | a5\n 54839: a2 = a2 | a4\n 54842: a2 = a2 << 0x20\n 54845: a1 = a1 | a2\n 54848: u64 [sp + 0x60] = a1\n 54851: a1 = reverse a1\n 54853: u64 [sp + 0x68] = s1\n 54856: a3 = reverse s1\n 54858: u64 [sp + 0x70] = t0\n 54861: a2 = reverse t0\n 54863: u64 [sp + 0x30] = a2\n 54866: u64 [sp + 0x28] = a3\n 54869: a2 = a2 | a3\n 54872: u64 [sp + 0x38] = a1\n 54875: a1 = a1 <u 0x1\n 54878: u64 [sp + 0xd8] = a2\n 54882: a1 = 0 if a2 != 0\n 54884: jump @771 if a1 == 0\n      : @743 (gas: 36)\n 54888: a1 = u8 [a0 + 0x18]\n 54891: u64 [sp + 0xb8] = a1\n 54895: a1 = u8 [a0 + 0x19]\n 54898: u64 [sp + 0x78] = a1\n 54901: a1 = u8 [a0 + 0x1a]\n 54904: u64 [sp + 0xa8] = a1\n 54908: a1 = u8 [a0 + 0x1b]\n 54911: u64 [sp + 0xa0] = a1\n 54915: a1 = u8 [a0 + 0x1c]\n 54918: u64 [sp + 0xd0] = a1\n 54922: a1 = u8 [a0 + 0x1d]\n 54925: u64 [sp + 0xb0] = a1\n 54929: a1 = u8 [a0 + 0x1e]\n 54932: u64 [sp + 0xc8] = a1\n 54936: a0 = u8 [a0 + 0x1f]\n 54939: u64 [sp + 0xc0] = a0\n 54943: u32 [sp + 576] = 0x20\n 54948: a0 = u64 [sp + 0x58]\n 54951: u64 [sp + 0x270] = a0\n 54955: a0 = u64 [sp + 0x48]\n 54958: u64 [sp + 0x268] = a0\n 54962: a0 = u64 [sp + 0x50]\n 54965: u64 [sp + 0x260] = a0\n 54969: s1 = u64 [sp + 0x40]\n 54972: u64 [sp + 0x278] = s1\n 54976: u64 [sp + 664] = 0\n 54980: u64 [sp + 656] = 0\n 54984: u64 [sp + 648] = 0\n 54988: u64 [sp + 640] = 0\n 54992: i32 a1 = sp + 0x260\n 54996: i32 a3 = sp + 0x280\n 55000: i32 a4 = sp + 0x240\n 55004: a2 = 0xffffffffffffffff\n 55007: a0 = 0\n 55009: ecalli 7 // 'get_storage'\n 55011: fallthrough\n      : @744 (gas: 28)\n 55012: a0 = u64 [sp + 0x290]\n 55016: a1 = u64 [sp + 0x288]\n 55020: a2 = u64 [sp + 0x280]\n 55024: a3 = u64 [sp + 0x298]\n 55028: a4 = a0 << 0x3f\n 55031: a5 = a1 >> 0x1\n 55034: a4 = a4 | a5\n 55037: a5 = a3 << 0x3f\n 55040: a0 = a0 >> 0x1\n 55043: t2 = s1\n 55045: s1 = a0 | a5\n 55048: a1 = a1 << 0x3f\n 55051: a5 = a2 >> 0x1\n 55054: a1 = a1 | a5\n 55057: a5 = a3 >> 0x1\n 55060: a2 = a2 & 0x1\n 55063: a0 = -a2\n 55065: t0 = a2 <u 0x1\n 55068: a3 = a1 & 0x7f\n 55071: t1 = a0 & s1\n 55074: a4 = a4 & a0\n 55077: a3 = a1 if a2 != 0\n 55080: a1 = a0 & a5\n 55083: a0 = a3 <u 0x20\n 55086: a0 = 0 if a4 != 0\n 55088: a2 = t1 | a1\n 55091: a0 = 0 if a2 != 0\n 55093: jump @773 if t0 != a0\n      : @745 (gas: 47)\n 55097: a0 = u64 [sp + 0x78]\n 55100: a0 = a0 << 0x8\n 55103: a2 = u64 [sp + 0xb8]\n 55107: a0 = a0 | a2\n 55110: a2 = u64 [sp + 0xa8]\n 55114: a2 = a2 << 0x10\n 55117: a5 = u64 [sp + 0xa0]\n 55121: a5 = a5 << 0x18\n 55124: a2 = a2 | a5\n 55127: a0 = a0 | a2\n 55130: a2 = u64 [sp + 0xb0]\n 55134: a2 = a2 << 0x8\n 55137: a5 = u64 [sp + 0xd0]\n 55141: a2 = a2 | a5\n 55144: a5 = u64 [sp + 0xc8]\n 55148: a5 = a5 << 0x10\n 55151: s1 = u64 [sp + 0xc0]\n 55155: s1 = s1 << 0x18\n 55158: a5 = a5 | s1\n 55161: a2 = a2 | a5\n 55164: a2 = a2 << 0x20\n 55167: a0 = a0 | a2\n 55170: u64 [sp + 0xd0] = a0\n 55174: a0 = reverse a0\n 55176: u64 [sp + 0x20] = a0\n 55179: u64 [sp + 0x1e0] = a0\n 55183: u64 [sp + 0x200] = a3\n 55187: a0 = u64 [sp + 0x50]\n 55190: u64 [sp + 0x220] = a0\n 55194: a0 = u64 [sp + 0x38]\n 55197: u64 [sp + 0x1e8] = a0\n 55201: u64 [sp + 0x208] = a4\n 55205: a0 = u64 [sp + 0x48]\n 55208: u64 [sp + 0x228] = a0\n 55212: a0 = u64 [sp + 0x30]\n 55215: u64 [sp + 0x1f0] = a0\n 55219: u64 [sp + 0x210] = t1\n 55223: a0 = u64 [sp + 0x58]\n 55226: u64 [sp + 0x230] = a0\n 55230: s1 = u64 [sp + 0x28]\n 55233: u64 [sp + 0x1f8] = s1\n 55237: u64 [sp + 0x218] = a1\n 55241: a0 = sp + 0x220\n 55245: a1 = sp + 0x200\n 55249: a2 = sp + 0x1e0\n 55253: u64 [sp + 0x238] = t2\n 55257: ra = 680, jump @731\n      : @746 [@dyn 340] (gas: 16)\n 55263: a3 = u64 [sp + 0x20]\n 55266: a2 = u64 [sp + 0x38]\n 55269: a0 = a2 >u 0\n 55271: a1 = a3 <u 0x20\n 55274: a1 = a1 ^ 0x1\n 55277: a1 = a0 if a2 != 0\n 55280: a0 = u64 [sp + 0x30]\n 55283: a0 = a0 >u 0\n 55285: a2 = s1 >u 0\n 55287: a2 = a0 if s1 == 0\n 55290: a0 = u64 [sp + 0xd8]\n 55294: a2 = a1 if a0 == 0\n 55297: a4 = u64 [sp + 0x40]\n 55300: a5 = u64 [sp + 0x58]\n 55303: s1 = u64 [sp + 0x50]\n 55306: jump @757 if a2 == 0\n      : @747 (gas: 5)\n 55310: a3 = a3 & 0xffffffffffffffe0\n 55313: u64 [sp + 0x18] = a3\n 55316: a1 = 0x20\n 55319: a0 = 0\n 55321: ra = 682, jump @0\n      : @748 [@dyn 341] (gas: 70)\n 55328: a1 = u64 [sp + 0x40]\n 55331: a1 = reverse a1\n 55333: a2 = u64 [sp + 0x58]\n 55336: a2 = reverse a2\n 55338: a3 = u64 [sp + 0x48]\n 55341: a3 = reverse a3\n 55343: a4 = reverse s1\n 55345: a5 = a4 >> 0x38\n 55348: u8 [a0 + 0x1f] = a5\n 55351: a5 = a4 >> 0x30\n 55354: u8 [a0 + 0x1e] = a5\n 55357: a5 = a4 >> 0x28\n 55360: u8 [a0 + 0x1d] = a5\n 55363: a5 = a4 >> 0x20\n 55366: u8 [a0 + 0x1c] = a5\n 55369: a5 = a4 >> 0x18\n 55372: u8 [a0 + 0x1b] = a5\n 55375: a5 = a4 >> 0x10\n 55378: u8 [a0 + 0x1a] = a5\n 55381: a5 = a4 >> 0x8\n 55384: u8 [a0 + 0x19] = a5\n 55387: u8 [a0 + 0x18] = a4\n 55390: u8 [a0 + 0x10] = a3\n 55393: a4 = a3 >> 0x38\n 55396: u8 [a0 + 0x17] = a4\n 55399: a4 = a3 >> 0x30\n 55402: u8 [a0 + 0x16] = a4\n 55405: a4 = a3 >> 0x28\n 55408: u8 [a0 + 0x15] = a4\n 55411: a4 = a3 >> 0x20\n 55414: u8 [a0 + 0x14] = a4\n 55417: a4 = a3 >> 0x18\n 55420: u8 [a0 + 0x13] = a4\n 55423: a4 = a3 >> 0x10\n 55426: u8 [a0 + 0x12] = a4\n 55429: a3 = a3 >> 0x8\n 55432: u8 [a0 + 0x11] = a3\n 55435: u8 [a0 + 0x8] = a2\n 55438: a3 = a2 >> 0x38\n 55441: u8 [a0 + 0xf] = a3\n 55444: a3 = a2 >> 0x30\n 55447: u8 [a0 + 0xe] = a3\n 55450: a3 = a2 >> 0x28\n 55453: u8 [a0 + 0xd] = a3\n 55456: a3 = a2 >> 0x20\n 55459: u8 [a0 + 0xc] = a3\n 55462: a3 = a2 >> 0x18\n 55465: u8 [a0 + 0xb] = a3\n 55468: a3 = a2 >> 0x10\n 55471: u8 [a0 + 0xa] = a3\n 55474: a2 = a2 >> 0x8\n 55477: u8 [a0 + 0x9] = a2\n 55480: u8 [a0] = a1\n 55482: a2 = a1 >> 0x38\n 55485: u8 [a0 + 0x7] = a2\n 55488: a2 = a1 >> 0x30\n 55491: u8 [a0 + 0x6] = a2\n 55494: a2 = a1 >> 0x28\n 55497: u8 [a0 + 0x5] = a2\n 55500: a2 = a1 >> 0x20\n 55503: u8 [a0 + 0x4] = a2\n 55506: a2 = a1 >> 0x18\n 55509: u8 [a0 + 0x3] = a2\n 55512: a2 = a1 >> 0x10\n 55515: u8 [a0 + 0x2] = a2\n 55518: a1 = a1 >> 0x8\n 55521: u8 [a0 + 0x1] = a1\n 55524: a1 = 0x20\n 55527: a0 = 0\n 55529: ra = 684, jump @0\n      : @749 [@dyn 342] (gas: 5)\n 55536: i32 a0 = a0 + 0\n 55538: i32 a2 = sp + 0x280\n 55542: a1 = 0x20\n 55545: ecalli 8 // 'hash_keccak_256'\n 55547: fallthrough\n      : @750 (gas: 13)\n 55548: a0 = u64 [sp + 0x280]\n 55552: a1 = u64 [sp + 0x288]\n 55556: a2 = u64 [sp + 0x290]\n 55560: a3 = u64 [sp + 0x298]\n 55564: a0 = reverse a0\n 55566: u64 [sp + 0xd0] = a0\n 55570: t0 = reverse a1\n 55572: a0 = reverse a2\n 55574: u64 [sp + 0xd8] = a0\n 55578: a0 = reverse a3\n 55580: u64 [sp + 0xc0] = a0\n 55584: a0 = u64 [sp + 0x18]\n 55587: jump @761 if a0 == 0\n      : @751 (gas: 118)\n 55591: u64 [sp + 176] = 0\n 55595: u64 [sp + 184] = 0\n 55599: u64 [sp + 168] = 0\n 55603: ra = u64 [sp + 0x80]\n 55607: s1 = ra + 0x20\n 55610: a0 = s1 <u ra\n 55613: t2 = u64 [sp + 0x88]\n 55617: a2 = t2 + a0\n 55620: a3 = a2 <u t2\n 55623: a3 = a0 if a0 == 0\n 55626: t1 = u64 [sp + 0x90]\n 55630: a3 = a3 + t1\n 55633: a0 = a3 <u t1\n 55636: u64 [sp + 0xc8] = t0\n 55640: t0 = u64 [sp + 0x98]\n 55644: t0 = t0 + a0\n 55647: a4 = a3 >u 0\n 55649: a5 = t0 >u 0\n 55651: a5 = a4 if t0 == 0\n 55654: a4 = 0x100000000\n 55664: a1 = s1\n 55666: a0 = maxu(s1, a4)\n 55669: s1 = a4 if a5 == 0\n 55672: a1 = a4 if a2 == 0\n 55675: a0 = a1 if a2 != 0\n 55678: a1 = a3 | t0\n 55681: a0 = s1 if a1 != 0\n 55684: a4 = a2\n 55686: a4 = 0 if a5 == 0\n 55688: a4 = a2 if a1 == 0\n 55691: a1 = a3\n 55693: a1 = 0 if t0 == 0\n 55695: a1 = a3 if t0 == 0\n 55698: a2 = t2 ^ 0xffffffffffffffff\n 55701: a4 = a4 + a2\n 55704: a3 = ra ^ 0xffffffffffffffff\n 55707: a0 = a0 + a3\n 55710: a3 = a0 <u a3\n 55713: a4 = a4 + a3\n 55716: a5 = a4 ^ a2\n 55719: a2 = a4 <u a2\n 55722: a2 = a3 if a5 == 0\n 55725: a5 = t1 ^ 0xffffffffffffffff\n 55728: u64 [sp + 0x78] = a5\n 55731: a5 = a5 + a1\n 55734: s1 = a5 + a2\n 55737: a1 = s1 << 0x3b\n 55740: a2 = a4 >> 0x5\n 55743: a1 = a1 | a2\n 55746: a4 = a4 << 0x3b\n 55749: a0 = a0 >> 0x5\n 55752: a2 = a0 | a4\n 55755: u64 [sp + 0xa0] = a2\n 55759: a4 = u64 [sp + 0x18]\n 55762: a0 = a4 <u 0x1\n 55765: a3 = -a0\n 55767: ra = a0 << 0x3b\n 55770: a4 = a4 + 0xffffffffffffffff\n 55773: a4 = a4 >> 0x5\n 55776: a0 = a4 - ra\n 55779: t2 = a1 ^ a3\n 55782: a4 = a1 <u a3\n 55785: t1 = a2 <u a0\n 55788: t1 = a4 if t2 != 0\n 55791: a2 = u64 [sp + 0x98]\n 55795: a4 = a2 ^ 0xffffffffffffffff\n 55798: t0 = t0 + a4\n 55801: a2 = u64 [sp + 0x78]\n 55804: a4 = a5 <u a2\n 55807: a4 = a4 + t0\n 55810: a5 = s1 <u a5\n 55813: a4 = a4 + a5\n 55816: s1 = s1 >> 0x5\n 55819: a5 = a4 << 0x3b\n 55822: a5 = a5 | s1\n 55825: a4 = a4 >> 0x5\n 55828: s1 = a3 >> 0x5\n 55831: t0 = s1 - ra\n 55834: a2 = a5 <u t0\n 55837: t2 = a4 ^ s1\n 55840: ra = a4 <u s1\n 55843: ra = a2 if t2 == 0\n 55846: a2 = a5 ^ t0\n 55849: a2 = a2 | t2\n 55852: ra = t1 if a2 == 0\n 55855: a2 = u64 [sp + 0xa0]\n 55859: a2 = a0 if ra == 0\n 55862: a1 = a3 if ra == 0\n 55865: a4 = s1 if ra == 0\n 55868: a5 = t0 if ra == 0\n 55871: a0 = a5 >> 0x3b\n 55874: a4 = a4 << 0x5\n 55877: t0 = a4 | a0\n 55880: a4 = u64 [sp + 0xb0]\n 55884: a0 = a1 >> 0x3b\n 55887: a5 = a5 << 0x5\n 55890: t2 = a5 | a0\n 55893: a5 = u64 [sp + 0xb8]\n 55897: a3 = a2 >> 0x3b\n 55900: a1 = a1 << 0x5\n 55903: a0 = a1 | a3\n 55906: t1 = a2 << 0x5\n 55909: a3 = t1 + 0x40\n 55912: u64 [sp + 0x78] = a3\n 55915: a3 = a3 <u t1\n 55918: s1 = u64 [sp + 0xa8]\n 55922: a1 = a0 + a3\n 55925: u64 [sp + 0x70] = a1\n 55928: a1 = a1 <u a0\n 55931: a1 = a3 if a3 == 0\n 55934: a1 = a1 + t2\n 55937: u64 [sp + 0x68] = a1\n 55940: a1 = a1 <u t2\n 55943: a1 = a1 + t0\n 55946: u64 [sp + 0x60] = a1\n 55949: a2 = 0x20\n 55952: a3 = u64 [sp + 0xc8]\n 55956: fallthrough\n      : @752 (gas: 31)\n 55957: u64 [sp + 0xa8] = s1\n 55961: u64 [sp + 0xc8] = a3\n 55965: a0 = u64 [sp + 0x80]\n 55969: a0 = a0 + a2\n 55972: u64 [sp + 0xa0] = a2\n 55976: a1 = a0 <u a2\n 55979: a2 = u64 [sp + 0x88]\n 55983: a2 = a2 + a4\n 55986: a2 = a2 + a1\n 55989: a3 = a2 ^ a4\n 55992: u64 [sp + 0xb0] = a4\n 55996: a4 = a2 <u a4\n 55999: a4 = a1 if a3 == 0\n 56002: a1 = u64 [sp + 0x90]\n 56006: a1 = a1 + a5\n 56009: u64 [sp + 0xb8] = a5\n 56013: a3 = a1 <u a5\n 56016: a5 = u64 [sp + 0x98]\n 56020: a5 = a5 + s1\n 56023: a3 = a3 + a5\n 56026: a4 = a4 + a1\n 56029: a1 = a4 <u a1\n 56032: a1 = a1 + a3\n 56035: a1 = a1 | a2\n 56038: a2 = a0 | a4\n 56041: a2 = a2 | a1\n 56044: a1 = a1 | a4\n 56047: a2 = a2 >> 0x20\n 56050: a1 = a1 << 0x20\n 56053: a1 = a1 | a2\n 56056: jump @770 if a1 != 0\n      : @753 (gas: 3)\n 56060: i32 a0 = a0 + 0\n 56062: a1 = 0x20\n 56065: ra = 686, jump @0\n      : @754 [@dyn 343] (gas: 111)\n 56072: a1 = u8 [a0 + 0x1]\n 56075: a2 = u8 [a0]\n 56077: a3 = u8 [a0 + 0x2]\n 56080: a4 = u8 [a0 + 0x3]\n 56083: a1 = a1 << 0x8\n 56086: a1 = a1 | a2\n 56089: a3 = a3 << 0x10\n 56092: a4 = a4 << 0x18\n 56095: a3 = a3 | a4\n 56098: a1 = a1 | a3\n 56101: a2 = u8 [a0 + 0x5]\n 56104: a3 = u8 [a0 + 0x4]\n 56107: a4 = u8 [a0 + 0x6]\n 56110: a5 = u8 [a0 + 0x7]\n 56113: a2 = a2 << 0x8\n 56116: a2 = a2 | a3\n 56119: a4 = a4 << 0x10\n 56122: a5 = a5 << 0x18\n 56125: a4 = a4 | a5\n 56128: a2 = a2 | a4\n 56131: a2 = a2 << 0x20\n 56134: t0 = a2 | a1\n 56137: a2 = u8 [a0 + 0x9]\n 56140: a3 = u8 [a0 + 0x8]\n 56143: a4 = u8 [a0 + 0xa]\n 56146: a5 = u8 [a0 + 0xb]\n 56149: a2 = a2 << 0x8\n 56152: a2 = a2 | a3\n 56155: a4 = a4 << 0x10\n 56158: a5 = a5 << 0x18\n 56161: a4 = a4 | a5\n 56164: a2 = a2 | a4\n 56167: a3 = u8 [a0 + 0xd]\n 56170: a4 = u8 [a0 + 0xc]\n 56173: a5 = u8 [a0 + 0xe]\n 56176: s1 = u8 [a0 + 0xf]\n 56179: a3 = a3 << 0x8\n 56182: a3 = a3 | a4\n 56185: a5 = a5 << 0x10\n 56188: s1 = s1 << 0x18\n 56191: a5 = a5 | s1\n 56194: a3 = a3 | a5\n 56197: a3 = a3 << 0x20\n 56200: a2 = a2 | a3\n 56203: a3 = u8 [a0 + 0x11]\n 56206: a4 = u8 [a0 + 0x10]\n 56209: a5 = u8 [a0 + 0x12]\n 56212: s1 = u8 [a0 + 0x13]\n 56215: a3 = a3 << 0x8\n 56218: a3 = a3 | a4\n 56221: a5 = a5 << 0x10\n 56224: s1 = s1 << 0x18\n 56227: a5 = a5 | s1\n 56230: a3 = a3 | a5\n 56233: a4 = u8 [a0 + 0x15]\n 56236: a5 = u8 [a0 + 0x14]\n 56239: s1 = u8 [a0 + 0x16]\n 56242: a1 = u8 [a0 + 0x17]\n 56245: a4 = a4 << 0x8\n 56248: a4 = a4 | a5\n 56251: s1 = s1 << 0x10\n 56254: a1 = a1 << 0x18\n 56257: a1 = a1 | s1\n 56260: a1 = a1 | a4\n 56263: a1 = a1 << 0x20\n 56266: a3 = a3 | a1\n 56269: a1 = u8 [a0 + 0x19]\n 56272: a4 = u8 [a0 + 0x18]\n 56275: a5 = u8 [a0 + 0x1a]\n 56278: s1 = u8 [a0 + 0x1b]\n 56281: a1 = a1 << 0x8\n 56284: a1 = a1 | a4\n 56287: a5 = a5 << 0x10\n 56290: s1 = s1 << 0x18\n 56293: a5 = a5 | s1\n 56296: a1 = a1 | a5\n 56299: a4 = u8 [a0 + 0x1d]\n 56302: a5 = u8 [a0 + 0x1c]\n 56305: s1 = u8 [a0 + 0x1e]\n 56308: a0 = u8 [a0 + 0x1f]\n 56311: a4 = a4 << 0x8\n 56314: a4 = a4 | a5\n 56317: s1 = s1 << 0x10\n 56320: a0 = a0 << 0x18\n 56323: a0 = a0 | s1\n 56326: a0 = a0 | a4\n 56329: a0 = a0 << 0x20\n 56332: a0 = a0 | a1\n 56335: a0 = reverse a0\n 56337: a1 = reverse a3\n 56339: a2 = reverse a2\n 56341: a3 = reverse t0\n 56343: a4 = u64 [sp + 0xd0]\n 56347: u64 [sp + 0x278] = a4\n 56351: a4 = u64 [sp + 0xc8]\n 56355: u64 [sp + 0x270] = a4\n 56359: a4 = u64 [sp + 0xd8]\n 56363: u64 [sp + 0x268] = a4\n 56367: s1 = u64 [sp + 0xc0]\n 56371: u64 [sp + 0x260] = s1\n 56375: u64 [sp + 0x298] = a3\n 56379: u64 [sp + 0x290] = a2\n 56383: u64 [sp + 0x288] = a1\n 56387: u64 [sp + 0x280] = a0\n 56391: i32 a1 = sp + 0x260\n 56395: i32 a3 = sp + 0x280\n 56399: a2 = 0xffffffffffffffff\n 56402: a4 = 0x20\n 56405: a0 = 0\n 56407: ecalli 14 // 'set_storage'\n 56409: fallthrough\n      : @755 (gas: 42)\n 56410: s1 = s1 + 0x1\n 56413: a0 = s1 <u 0x1\n 56416: a1 = u64 [sp + 0xd8]\n 56420: a1 = a1 + a0\n 56423: u64 [sp + 0xc0] = s1\n 56427: u64 [sp + 0xd8] = a1\n 56431: a0 = s1 | a1\n 56434: a0 = a0 <u 0x1\n 56437: a1 = u64 [sp + 0xc8]\n 56441: t0 = a1 + a0\n 56444: a2 = t0 <u a1\n 56447: a0 = u64 [sp + 0xa0]\n 56451: a1 = a0 + 0x20\n 56454: a0 = a1 <u a0\n 56457: a3 = u64 [sp + 0xb0]\n 56461: t2 = a3 + a0\n 56464: a3 = t2 <u a3\n 56467: a3 = a0 if a0 == 0\n 56470: a4 = u64 [sp + 0xb8]\n 56474: a0 = a4 + a3\n 56477: a3 = a0 <u a4\n 56480: s1 = u64 [sp + 0xa8]\n 56484: s1 = s1 + a3\n 56487: a3 = u64 [sp + 0x68]\n 56490: a3 = a3 ^ a0\n 56493: a4 = u64 [sp + 0x78]\n 56496: a4 = a4 ^ a1\n 56499: a3 = a3 | a4\n 56502: a4 = u64 [sp + 0x60]\n 56505: a4 = a4 ^ s1\n 56508: a5 = u64 [sp + 0x70]\n 56511: a5 = t2 ^ a5\n 56514: a4 = a4 | a5\n 56517: t1 = a3 | a4\n 56520: a3 = u64 [sp + 0xd0]\n 56524: a3 = a3 + a2\n 56527: u64 [sp + 0xd0] = a3\n 56531: a2 = a1\n 56533: a4 = t2\n 56535: a5 = a0\n 56537: a3 = t0\n 56539: jump @752 if t1 != 0\n      : @756 (gas: 1)\n 56543: jump @762\n      : @757 (gas: 8)\n 56546: a0 = u64 [sp + 0x68]\n 56549: a1 = u64 [sp + 0x60]\n 56552: a0 = a0 | a1\n 56555: a1 = u64 [sp + 0x70]\n 56558: a2 = u64 [sp + 0xd0]\n 56562: a1 = a1 | a2\n 56565: a0 = a0 | a1\n 56568: jump @767 if a0 == 0\n      : @758 (gas: 10)\n 56572: a0 = u64 [sp + 0x98]\n 56576: a1 = u64 [sp + 0x90]\n 56580: a0 = a0 | a1\n 56583: a1 = 0xffffffe0\n 56593: a2 = u64 [sp + 0x80]\n 56597: a1 = a2 <u a1\n 56600: a2 = u64 [sp + 0x88]\n 56604: a1 = 0 if a2 != 0\n 56606: a1 = 0 if a0 != 0\n 56608: jump @770 if a1 == 0\n      : @759 (gas: 4)\n 56612: a0 = u64 [sp + 0x18]\n 56615: i32 a0 = a0 + 0x20\n 56618: a1 = 0x20\n 56621: ra = 688, jump @0\n      : @760 [@dyn 344] (gas: 280)\n 56628: a1 = u8 [a0 + 0x19]\n 56631: a2 = u8 [a0 + 0x18]\n 56634: a3 = u8 [a0 + 0x1a]\n 56637: a4 = u8 [a0 + 0x1b]\n 56640: a1 = a1 << 0x8\n 56643: a1 = a1 | a2\n 56646: a3 = a3 << 0x10\n 56649: a4 = a4 << 0x18\n 56652: a3 = a3 | a4\n 56655: a1 = a1 | a3\n 56658: a2 = u8 [a0 + 0x1d]\n 56661: a3 = u8 [a0 + 0x1c]\n 56664: a4 = u8 [a0 + 0x1e]\n 56667: a5 = u8 [a0 + 0x1f]\n 56670: a2 = a2 << 0x8\n 56673: a2 = a2 | a3\n 56676: a4 = a4 << 0x10\n 56679: a5 = a5 << 0x18\n 56682: a4 = a4 | a5\n 56685: a2 = a2 | a4\n 56688: a2 = a2 << 0x20\n 56691: t0 = a2 | a1\n 56694: a1 = u8 [a0 + 0x11]\n 56697: a2 = u8 [a0 + 0x10]\n 56700: a3 = u8 [a0 + 0x12]\n 56703: a4 = u8 [a0 + 0x13]\n 56706: a1 = a1 << 0x8\n 56709: a1 = a1 | a2\n 56712: a3 = a3 << 0x10\n 56715: a4 = a4 << 0x18\n 56718: a3 = a3 | a4\n 56721: a1 = a1 | a3\n 56724: a2 = u8 [a0 + 0x15]\n 56727: a3 = u8 [a0 + 0x14]\n 56730: a4 = u8 [a0 + 0x16]\n 56733: a5 = u8 [a0 + 0x17]\n 56736: a2 = a2 << 0x8\n 56739: a2 = a2 | a3\n 56742: a4 = a4 << 0x10\n 56745: a5 = a5 << 0x18\n 56748: a4 = a4 | a5\n 56751: a2 = a2 | a4\n 56754: a2 = a2 << 0x20\n 56757: a1 = a1 | a2\n 56760: u64 [sp + 0xd8] = a1\n 56764: a1 = u8 [a0 + 0x9]\n 56767: a3 = u8 [a0 + 0x8]\n 56770: a4 = u8 [a0 + 0xa]\n 56773: a5 = u8 [a0 + 0xb]\n 56776: a1 = a1 << 0x8\n 56779: a1 = a1 | a3\n 56782: a4 = a4 << 0x10\n 56785: a5 = a5 << 0x18\n 56788: a4 = a4 | a5\n 56791: a1 = a1 | a4\n 56794: a3 = u8 [a0 + 0xd]\n 56797: a4 = u8 [a0 + 0xc]\n 56800: a5 = u8 [a0 + 0xe]\n 56803: s1 = u8 [a0 + 0xf]\n 56806: a3 = a3 << 0x8\n 56809: a3 = a3 | a4\n 56812: a5 = a5 << 0x10\n 56815: s1 = s1 << 0x18\n 56818: a5 = a5 | s1\n 56821: a3 = a3 | a5\n 56824: a3 = a3 << 0x20\n 56827: a1 = a1 | a3\n 56830: u64 [sp + 0xd0] = a1\n 56834: a1 = u8 [a0 + 0x1]\n 56837: a4 = u8 [a0]\n 56839: a5 = u8 [a0 + 0x2]\n 56842: s1 = u8 [a0 + 0x3]\n 56845: a1 = a1 << 0x8\n 56848: a1 = a1 | a4\n 56851: a5 = a5 << 0x10\n 56854: s1 = s1 << 0x18\n 56857: a5 = a5 | s1\n 56860: a1 = a1 | a5\n 56863: a4 = u8 [a0 + 0x5]\n 56866: a5 = u8 [a0 + 0x4]\n 56869: s1 = u8 [a0 + 0x6]\n 56872: a0 = u8 [a0 + 0x7]\n 56875: a4 = a4 << 0x8\n 56878: a4 = a4 | a5\n 56881: s1 = s1 << 0x10\n 56884: a0 = a0 << 0x18\n 56887: a0 = a0 | s1\n 56890: a0 = a0 | a4\n 56893: a0 = a0 << 0x20\n 56896: ra = a0 | a1\n 56899: u8 [sp + 479] = 0\n 56903: u8 [sp + 478] = 0\n 56907: u8 [sp + 477] = 0\n 56911: u8 [sp + 476] = 0\n 56915: u8 [sp + 475] = 0\n 56919: u8 [sp + 474] = 0\n 56923: u8 [sp + 473] = 0\n 56927: u8 [sp + 472] = 0\n 56931: u8 [sp + 471] = 0\n 56935: u8 [sp + 470] = 0\n 56939: u8 [sp + 469] = 0\n 56943: u8 [sp + 468] = 0\n 56947: u8 [sp + 467] = 0\n 56951: u8 [sp + 466] = 0\n 56955: u8 [sp + 465] = 0\n 56959: u8 [sp + 464] = 0\n 56963: u8 [sp + 463] = 0\n 56967: u8 [sp + 462] = 0\n 56971: u8 [sp + 461] = 0\n 56975: u8 [sp + 460] = 0\n 56979: u8 [sp + 459] = 0\n 56983: u8 [sp + 458] = 0\n 56987: u8 [sp + 457] = 0\n 56991: u8 [sp + 456] = 0\n 56995: u8 [sp + 455] = 0\n 56999: u8 [sp + 454] = 0\n 57003: u8 [sp + 453] = 0\n 57007: u8 [sp + 452] = 0\n 57011: u8 [sp + 451] = 0\n 57015: u8 [sp + 450] = 0\n 57019: u8 [sp + 449] = 0\n 57023: u8 [sp + 448] = 0\n 57027: u8 [sp + 447] = 0xff\n 57033: u8 [sp + 446] = 0xff\n 57039: u8 [sp + 445] = 0xff\n 57045: u8 [sp + 443] = 0xff\n 57051: u8 [sp + 440] = 0xffffffffffffffff\n 57056: u8 [sp + 439] = 0xff\n 57062: u8 [sp + 438] = 0xff\n 57068: u8 [sp + 437] = 0xff\n 57074: u8 [sp + 435] = 0xff\n 57080: u8 [sp + 432] = 0xffffffffffffffff\n 57085: u8 [sp + 431] = 0xff\n 57091: u8 [sp + 430] = 0xff\n 57097: u8 [sp + 429] = 0xff\n 57103: u8 [sp + 427] = 0xff\n 57109: u8 [sp + 424] = 0xffffffffffffffff\n 57114: u8 [sp + 423] = 0xff\n 57120: u8 [sp + 422] = 0xff\n 57126: u8 [sp + 421] = 0xff\n 57132: u8 [sp + 419] = 0xff\n 57138: u8 [sp + 416] = 0xffffffffffffffff\n 57143: a1 = 0xffffffff\n 57153: u8 [sp + 0x1bc] = a1\n 57157: a5 = 0xffffffffffff\n 57167: u8 [sp + 0x1ba] = a5\n 57171: a4 = 0xffffffffffffff\n 57181: u8 [sp + 0x1b9] = a4\n 57185: u8 [sp + 0x1b4] = a1\n 57189: u8 [sp + 0x1b2] = a5\n 57193: u8 [sp + 0x1b1] = a4\n 57197: u8 [sp + 0x1ac] = a1\n 57201: u8 [sp + 0x1aa] = a5\n 57205: u8 [sp + 0x1a9] = a4\n 57209: u8 [sp + 0x1a4] = a1\n 57213: u8 [sp + 0x1a2] = a5\n 57217: u8 [sp + 0x1a1] = a4\n 57221: t2 = u64 [sp + 0x20]\n 57224: a4 = t2 & 0x1f\n 57227: a1 = sp + 0x1a0\n 57231: a4 = a4 + a1\n 57234: a1 = u8 [a4 + 0x19]\n 57237: a5 = u8 [a4 + 0x18]\n 57240: s1 = u8 [a4 + 0x1a]\n 57243: a2 = u8 [a4 + 0x1b]\n 57246: a1 = a1 << 0x8\n 57249: a1 = a1 | a5\n 57252: s1 = s1 << 0x10\n 57255: a2 = a2 << 0x18\n 57258: a2 = a2 | s1\n 57261: a1 = a1 | a2\n 57264: a2 = u8 [a4 + 0x1d]\n 57267: a5 = u8 [a4 + 0x1c]\n 57270: s1 = u8 [a4 + 0x1e]\n 57273: a3 = u8 [a4 + 0x1f]\n 57276: a2 = a2 << 0x8\n 57279: a2 = a2 | a5\n 57282: s1 = s1 << 0x10\n 57285: a3 = a3 << 0x18\n 57288: a3 = a3 | s1\n 57291: a2 = a2 | a3\n 57294: a2 = a2 << 0x20\n 57297: t1 = a2 | a1\n 57300: a1 = u8 [a4 + 0x11]\n 57303: a2 = u8 [a4 + 0x10]\n 57306: a3 = u8 [a4 + 0x12]\n 57309: s1 = u8 [a4 + 0x13]\n 57312: a1 = a1 << 0x8\n 57315: a1 = a1 | a2\n 57318: a3 = a3 << 0x10\n 57321: s1 = s1 << 0x18\n 57324: a3 = a3 | s1\n 57327: a1 = a1 | a3\n 57330: a2 = u8 [a4 + 0x15]\n 57333: a3 = u8 [a4 + 0x14]\n 57336: s1 = u8 [a4 + 0x16]\n 57339: a0 = u8 [a4 + 0x17]\n 57342: a2 = a2 << 0x8\n 57345: a2 = a2 | a3\n 57348: s1 = s1 << 0x10\n 57351: a0 = a0 << 0x18\n 57354: a0 = a0 | s1\n 57357: a0 = a0 | a2\n 57360: a0 = a0 << 0x20\n 57363: s1 = a0 | a1\n 57366: a0 = u8 [a4 + 0x9]\n 57369: a1 = u8 [a4 + 0x8]\n 57372: a2 = u8 [a4 + 0xa]\n 57375: a3 = u8 [a4 + 0xb]\n 57378: a0 = a0 << 0x8\n 57381: a0 = a0 | a1\n 57384: a2 = a2 << 0x10\n 57387: a3 = a3 << 0x18\n 57390: a2 = a2 | a3\n 57393: a5 = a2 | a0\n 57396: a1 = u8 [a4 + 0xd]\n 57399: a2 = u8 [a4 + 0xc]\n 57402: a3 = u8 [a4 + 0xe]\n 57405: a0 = u8 [a4 + 0xf]\n 57408: a1 = a1 << 0x8\n 57411: a1 = a1 | a2\n 57414: a3 = a3 << 0x10\n 57417: a0 = a0 << 0x18\n 57420: a0 = a0 | a3\n 57423: a0 = a0 | a1\n 57426: a0 = a0 << 0x20\n 57429: a1 = a0 | a5\n 57432: a0 = u8 [a4 + 0x1]\n 57435: a2 = u8 [a4]\n 57437: a3 = u8 [a4 + 0x2]\n 57440: a5 = u8 [a4 + 0x3]\n 57443: a0 = a0 << 0x8\n 57446: a0 = a0 | a2\n 57449: a3 = a3 << 0x10\n 57452: a5 = a5 << 0x18\n 57455: a3 = a3 | a5\n 57458: a0 = a0 | a3\n 57461: a2 = u8 [a4 + 0x5]\n 57464: a3 = u8 [a4 + 0x4]\n 57467: a5 = u8 [a4 + 0x6]\n 57470: a4 = u8 [a4 + 0x7]\n 57473: a2 = a2 << 0x8\n 57476: a2 = a2 | a3\n 57479: a5 = a5 << 0x10\n 57482: a4 = a4 << 0x18\n 57485: a4 = a4 | a5\n 57488: a2 = a2 | a4\n 57491: a2 = a2 << 0x20\n 57494: a0 = a0 | a2\n 57497: a2 = reverse t0\n 57499: t0 = a2 & ~a0\n 57502: a0 = u64 [sp + 0xd8]\n 57506: a0 = reverse a0\n 57508: a2 = a0 & ~a1\n 57511: a0 = reverse ra\n 57513: a1 = u64 [sp + 0xd0]\n 57517: a1 = reverse a1\n 57519: a1 = a1 & ~s1\n 57522: a0 = a0 & ~t1\n 57525: a4 = t2 >> 0x3f\n 57528: a3 = u64 [sp + 0x38]\n 57531: a5 = a3 << 0x1\n 57534: a4 = a4 | a5\n 57537: a5 = a3 >> 0x3f\n 57540: a3 = u64 [sp + 0x30]\n 57543: s1 = a3 << 0x1\n 57546: a5 = a5 | s1\n 57549: s1 = a3 >> 0x3f\n 57552: a3 = u64 [sp + 0x28]\n 57555: a3 = a3 << 0x1\n 57558: a3 = a3 | s1\n 57561: t1 = a0 | a3\n 57564: a1 = a1 | a5\n 57567: a2 = a2 | a4\n 57570: a3 = t2 << 0x1\n 57573: a3 = t0 | a3\n 57576: a4 = u64 [sp + 0x40]\n 57579: a5 = u64 [sp + 0x58]\n 57582: s1 = u64 [sp + 0x50]\n 57585: jump @768\n      : @761 (gas: 4)\n 57588: t2 = 0\n 57590: s1 = 0\n 57592: a1 = 0x20\n 57595: fallthrough\n      : @762 (gas: 10)\n 57596: a5 = u64 [sp + 0x20]\n 57599: a2 = u64 [sp + 0x18]\n 57602: a2 = a2 ^ a5\n 57605: a3 = u64 [sp + 0x30]\n 57608: a2 = a2 | a3\n 57611: a3 = u64 [sp + 0x38]\n 57614: a4 = u64 [sp + 0x28]\n 57617: a3 = a3 | a4\n 57620: a2 = a2 | a3\n 57623: jump @766 if a2 == 0\n      : @763 (gas: 27)\n 57627: u64 [sp + 0xc8] = t0\n 57631: a2 = u64 [sp + 0x80]\n 57635: a2 = a2 + a1\n 57638: a3 = a2 <u a1\n 57641: a4 = u64 [sp + 0x88]\n 57645: a4 = a4 + t2\n 57648: a4 = a4 + a3\n 57651: a5 = a4 ^ t2\n 57654: a1 = a4 <u t2\n 57657: a1 = a3 if a5 == 0\n 57660: a3 = u64 [sp + 0x90]\n 57664: a3 = a3 + a0\n 57667: a1 = a1 + a3\n 57670: a5 = a1 <u a3\n 57673: a0 = a3 <u a0\n 57676: a3 = u64 [sp + 0x98]\n 57680: a3 = a3 + s1\n 57683: a0 = a0 + a3\n 57686: a0 = a0 + a5\n 57689: a3 = a2 | a1\n 57692: a0 = a0 | a4\n 57695: a3 = a3 | a0\n 57698: a3 = a3 >> 0x20\n 57701: a0 = a0 | a1\n 57704: a0 = a0 << 0x20\n 57707: a0 = a0 | a3\n 57710: jump @770 if a0 != 0\n      : @764 (gas: 3)\n 57714: i32 a0 = a2 + 0\n 57716: a1 = 0x20\n 57719: ra = 690, jump @0\n      : @765 [@dyn 345] (gas: 277)\n 57726: a1 = u8 [a0 + 0x19]\n 57729: a2 = u8 [a0 + 0x18]\n 57732: a3 = u8 [a0 + 0x1a]\n 57735: a4 = u8 [a0 + 0x1b]\n 57738: a1 = a1 << 0x8\n 57741: a1 = a1 | a2\n 57744: a3 = a3 << 0x10\n 57747: a4 = a4 << 0x18\n 57750: a3 = a3 | a4\n 57753: a1 = a1 | a3\n 57756: a2 = u8 [a0 + 0x1d]\n 57759: a3 = u8 [a0 + 0x1c]\n 57762: a4 = u8 [a0 + 0x1e]\n 57765: a5 = u8 [a0 + 0x1f]\n 57768: a2 = a2 << 0x8\n 57771: a2 = a2 | a3\n 57774: a4 = a4 << 0x10\n 57777: a5 = a5 << 0x18\n 57780: a4 = a4 | a5\n 57783: a2 = a2 | a4\n 57786: a2 = a2 << 0x20\n 57789: a1 = a1 | a2\n 57792: u64 [sp + 0xb8] = a1\n 57796: a1 = u8 [a0 + 0x11]\n 57799: a2 = u8 [a0 + 0x10]\n 57802: a3 = u8 [a0 + 0x12]\n 57805: a4 = u8 [a0 + 0x13]\n 57808: a1 = a1 << 0x8\n 57811: a1 = a1 | a2\n 57814: a3 = a3 << 0x10\n 57817: a4 = a4 << 0x18\n 57820: a3 = a3 | a4\n 57823: a1 = a1 | a3\n 57826: a2 = u8 [a0 + 0x15]\n 57829: a3 = u8 [a0 + 0x14]\n 57832: a4 = u8 [a0 + 0x16]\n 57835: a5 = u8 [a0 + 0x17]\n 57838: a2 = a2 << 0x8\n 57841: a2 = a2 | a3\n 57844: a4 = a4 << 0x10\n 57847: a5 = a5 << 0x18\n 57850: a4 = a4 | a5\n 57853: a2 = a2 | a4\n 57856: a2 = a2 << 0x20\n 57859: t1 = a2 | a1\n 57862: a1 = u8 [a0 + 0x9]\n 57865: a3 = u8 [a0 + 0x8]\n 57868: a4 = u8 [a0 + 0xa]\n 57871: a5 = u8 [a0 + 0xb]\n 57874: a1 = a1 << 0x8\n 57877: a1 = a1 | a3\n 57880: a4 = a4 << 0x10\n 57883: a5 = a5 << 0x18\n 57886: a4 = a4 | a5\n 57889: a1 = a1 | a4\n 57892: a3 = u8 [a0 + 0xd]\n 57895: a4 = u8 [a0 + 0xc]\n 57898: a5 = u8 [a0 + 0xe]\n 57901: s1 = u8 [a0 + 0xf]\n 57904: a3 = a3 << 0x8\n 57907: a3 = a3 | a4\n 57910: a5 = a5 << 0x10\n 57913: s1 = s1 << 0x18\n 57916: a5 = a5 | s1\n 57919: a3 = a3 | a5\n 57922: a3 = a3 << 0x20\n 57925: t2 = a3 | a1\n 57928: a1 = u8 [a0 + 0x1]\n 57931: a4 = u8 [a0]\n 57933: a5 = u8 [a0 + 0x2]\n 57936: s1 = u8 [a0 + 0x3]\n 57939: a1 = a1 << 0x8\n 57942: a1 = a1 | a4\n 57945: a5 = a5 << 0x10\n 57948: s1 = s1 << 0x18\n 57951: a5 = a5 | s1\n 57954: a1 = a1 | a5\n 57957: a4 = u8 [a0 + 0x5]\n 57960: a5 = u8 [a0 + 0x4]\n 57963: s1 = u8 [a0 + 0x6]\n 57966: a0 = u8 [a0 + 0x7]\n 57969: a4 = a4 << 0x8\n 57972: a4 = a4 | a5\n 57975: s1 = s1 << 0x10\n 57978: a0 = a0 << 0x18\n 57981: a0 = a0 | s1\n 57984: a0 = a0 | a4\n 57987: a0 = a0 << 0x20\n 57990: ra = a0 | a1\n 57993: u8 [sp + 415] = 0\n 57997: u8 [sp + 414] = 0\n 58001: u8 [sp + 413] = 0\n 58005: u8 [sp + 412] = 0\n 58009: u8 [sp + 411] = 0\n 58013: u8 [sp + 410] = 0\n 58017: u8 [sp + 409] = 0\n 58021: u8 [sp + 408] = 0\n 58025: u8 [sp + 407] = 0\n 58029: u8 [sp + 406] = 0\n 58033: u8 [sp + 405] = 0\n 58037: u8 [sp + 404] = 0\n 58041: u8 [sp + 403] = 0\n 58045: u8 [sp + 402] = 0\n 58049: u8 [sp + 401] = 0\n 58053: u8 [sp + 400] = 0\n 58057: u8 [sp + 399] = 0\n 58061: u8 [sp + 398] = 0\n 58065: u8 [sp + 397] = 0\n 58069: u8 [sp + 396] = 0\n 58073: u8 [sp + 395] = 0\n 58077: u8 [sp + 394] = 0\n 58081: u8 [sp + 393] = 0\n 58085: u8 [sp + 392] = 0\n 58089: u8 [sp + 391] = 0\n 58093: u8 [sp + 390] = 0\n 58097: u8 [sp + 389] = 0\n 58101: u8 [sp + 388] = 0\n 58105: u8 [sp + 387] = 0\n 58109: u8 [sp + 386] = 0\n 58113: u8 [sp + 385] = 0\n 58117: u8 [sp + 384] = 0\n 58121: u8 [sp + 383] = 0xff\n 58127: u8 [sp + 382] = 0xff\n 58133: u8 [sp + 381] = 0xff\n 58139: u8 [sp + 379] = 0xff\n 58145: u8 [sp + 376] = 0xffffffffffffffff\n 58150: u8 [sp + 375] = 0xff\n 58156: u8 [sp + 374] = 0xff\n 58162: u8 [sp + 373] = 0xff\n 58168: u8 [sp + 371] = 0xff\n 58174: u8 [sp + 368] = 0xffffffffffffffff\n 58179: u8 [sp + 367] = 0xff\n 58185: u8 [sp + 366] = 0xff\n 58191: u8 [sp + 365] = 0xff\n 58197: u8 [sp + 363] = 0xff\n 58203: u8 [sp + 360] = 0xffffffffffffffff\n 58208: u8 [sp + 359] = 0xff\n 58214: u8 [sp + 358] = 0xff\n 58220: u8 [sp + 357] = 0xff\n 58226: u8 [sp + 355] = 0xff\n 58232: u8 [sp + 352] = 0xffffffffffffffff\n 58237: a1 = 0xffffffff\n 58247: u8 [sp + 0x17c] = a1\n 58251: a5 = 0xffffffffffff\n 58261: u8 [sp + 0x17a] = a5\n 58265: a4 = 0xffffffffffffff\n 58275: u8 [sp + 0x179] = a4\n 58279: u8 [sp + 0x174] = a1\n 58283: u8 [sp + 0x172] = a5\n 58287: u8 [sp + 0x171] = a4\n 58291: u8 [sp + 0x16c] = a1\n 58295: u8 [sp + 0x16a] = a5\n 58299: u8 [sp + 0x169] = a4\n 58303: u8 [sp + 0x164] = a1\n 58307: u8 [sp + 0x162] = a5\n 58311: u8 [sp + 0x161] = a4\n 58315: a4 = u64 [sp + 0x20]\n 58318: a4 = a4 & 0x1f\n 58321: a1 = sp + 0x160\n 58325: a4 = a4 + a1\n 58328: a1 = u8 [a4 + 0x19]\n 58331: a5 = u8 [a4 + 0x18]\n 58334: s1 = u8 [a4 + 0x1a]\n 58337: a2 = u8 [a4 + 0x1b]\n 58340: a1 = a1 << 0x8\n 58343: a1 = a1 | a5\n 58346: s1 = s1 << 0x10\n 58349: a2 = a2 << 0x18\n 58352: a2 = a2 | s1\n 58355: a1 = a1 | a2\n 58358: a2 = u8 [a4 + 0x1d]\n 58361: a5 = u8 [a4 + 0x1c]\n 58364: s1 = u8 [a4 + 0x1e]\n 58367: a3 = u8 [a4 + 0x1f]\n 58370: a2 = a2 << 0x8\n 58373: a2 = a2 | a5\n 58376: s1 = s1 << 0x10\n 58379: a3 = a3 << 0x18\n 58382: a3 = a3 | s1\n 58385: a2 = a2 | a3\n 58388: a2 = a2 << 0x20\n 58391: t0 = a2 | a1\n 58394: a1 = u8 [a4 + 0x11]\n 58397: a2 = u8 [a4 + 0x10]\n 58400: a3 = u8 [a4 + 0x12]\n 58403: s1 = u8 [a4 + 0x13]\n 58406: a1 = a1 << 0x8\n 58409: a1 = a1 | a2\n 58412: a3 = a3 << 0x10\n 58415: s1 = s1 << 0x18\n 58418: a3 = a3 | s1\n 58421: a1 = a1 | a3\n 58424: a2 = u8 [a4 + 0x15]\n 58427: a3 = u8 [a4 + 0x14]\n 58430: s1 = u8 [a4 + 0x16]\n 58433: a0 = u8 [a4 + 0x17]\n 58436: a2 = a2 << 0x8\n 58439: a2 = a2 | a3\n 58442: s1 = s1 << 0x10\n 58445: a0 = a0 << 0x18\n 58448: a0 = a0 | s1\n 58451: a0 = a0 | a2\n 58454: a0 = a0 << 0x20\n 58457: s1 = a0 | a1\n 58460: a0 = u8 [a4 + 0x9]\n 58463: a1 = u8 [a4 + 0x8]\n 58466: a2 = u8 [a4 + 0xa]\n 58469: a3 = u8 [a4 + 0xb]\n 58472: a0 = a0 << 0x8\n 58475: a0 = a0 | a1\n 58478: a2 = a2 << 0x10\n 58481: a3 = a3 << 0x18\n 58484: a2 = a2 | a3\n 58487: a5 = a2 | a0\n 58490: a1 = u8 [a4 + 0xd]\n 58493: a2 = u8 [a4 + 0xc]\n 58496: a3 = u8 [a4 + 0xe]\n 58499: a0 = u8 [a4 + 0xf]\n 58502: a1 = a1 << 0x8\n 58505: a1 = a1 | a2\n 58508: a3 = a3 << 0x10\n 58511: a0 = a0 << 0x18\n 58514: a0 = a0 | a3\n 58517: a0 = a0 | a1\n 58520: a0 = a0 << 0x20\n 58523: a1 = a0 | a5\n 58526: a0 = u8 [a4 + 0x1]\n 58529: a2 = u8 [a4]\n 58531: a3 = u8 [a4 + 0x2]\n 58534: a5 = u8 [a4 + 0x3]\n 58537: a0 = a0 << 0x8\n 58540: a0 = a0 | a2\n 58543: a3 = a3 << 0x10\n 58546: a5 = a5 << 0x18\n 58549: a3 = a3 | a5\n 58552: a0 = a0 | a3\n 58555: a2 = u8 [a4 + 0x5]\n 58558: a3 = u8 [a4 + 0x4]\n 58561: a5 = u8 [a4 + 0x6]\n 58564: a4 = u8 [a4 + 0x7]\n 58567: a2 = a2 << 0x8\n 58570: a2 = a2 | a3\n 58573: a5 = a5 << 0x10\n 58576: a4 = a4 << 0x18\n 58579: a4 = a4 | a5\n 58582: a2 = a2 | a4\n 58585: a2 = a2 << 0x20\n 58588: a0 = a0 | a2\n 58591: a2 = u64 [sp + 0xb8]\n 58595: a2 = reverse a2\n 58597: a0 = a2 & ~a0\n 58600: a2 = reverse t1\n 58602: a1 = a2 & ~a1\n 58605: a2 = reverse t2\n 58607: a2 = a2 & ~s1\n 58610: a3 = reverse ra\n 58612: a3 = a3 & ~t0\n 58615: a4 = u64 [sp + 0xd0]\n 58619: u64 [sp + 0x278] = a4\n 58623: a4 = u64 [sp + 0xc8]\n 58627: u64 [sp + 0x270] = a4\n 58631: a4 = u64 [sp + 0xd8]\n 58635: u64 [sp + 0x268] = a4\n 58639: a4 = u64 [sp + 0xc0]\n 58643: u64 [sp + 0x260] = a4\n 58647: u64 [sp + 0x298] = a3\n 58651: u64 [sp + 0x290] = a2\n 58655: u64 [sp + 0x288] = a1\n 58659: u64 [sp + 0x280] = a0\n 58663: i32 a1 = sp + 0x260\n 58667: i32 a3 = sp + 0x280\n 58671: a2 = 0xffffffffffffffff\n 58674: a4 = 0x20\n 58677: a0 = 0\n 58679: ecalli 14 // 'set_storage'\n 58681: a5 = u64 [sp + 0x20]\n 58684: fallthrough\n      : @766 (gas: 27)\n 58685: a2 = u64 [sp + 0x30]\n 58688: a0 = a2 >> 0x3f\n 58691: a1 = u64 [sp + 0x28]\n 58694: a1 = a1 << 0x1\n 58697: a0 = a0 | a1\n 58700: a3 = u64 [sp + 0x38]\n 58703: a1 = a3 >> 0x3f\n 58706: a2 = a2 << 0x1\n 58709: a1 = a1 | a2\n 58712: a2 = a5 >> 0x3f\n 58715: a3 = a3 << 0x1\n 58718: a2 = a2 | a3\n 58721: a3 = a5 << 0x1\n 58724: a3 = a3 + 0x1\n 58727: a4 = u64 [sp + 0x48]\n 58730: u64 [sp + 0x268] = a4\n 58734: a4 = u64 [sp + 0x50]\n 58737: u64 [sp + 0x260] = a4\n 58741: a4 = u64 [sp + 0x58]\n 58744: u64 [sp + 0x270] = a4\n 58748: a4 = u64 [sp + 0x40]\n 58751: u64 [sp + 0x278] = a4\n 58755: u64 [sp + 0x280] = a3\n 58759: u64 [sp + 0x288] = a2\n 58763: u64 [sp + 0x290] = a1\n 58767: u64 [sp + 0x298] = a0\n 58771: jump @769\n      : @767 (gas: 5)\n 58773: a3 = 0\n 58775: a2 = 0\n 58777: a1 = 0\n 58779: t1 = 0\n 58781: fallthrough\n      : @768 (gas: 10)\n 58782: a0 = u64 [sp + 0x48]\n 58785: u64 [sp + 0x268] = a0\n 58789: u64 [sp + 0x260] = s1\n 58793: u64 [sp + 0x270] = a5\n 58797: u64 [sp + 0x278] = a4\n 58801: u64 [sp + 0x280] = a3\n 58805: u64 [sp + 0x288] = a2\n 58809: u64 [sp + 0x290] = a1\n 58813: u64 [sp + 0x298] = t1\n 58817: fallthrough\n      : @769 (gas: 12)\n 58818: i32 a1 = sp + 0x260\n 58822: i32 a3 = sp + 0x280\n 58826: a2 = 0xffffffffffffffff\n 58829: a4 = 0x20\n 58832: a0 = 0\n 58834: ecalli 14 // 'set_storage'\n 58836: sp = s0 + 0xfffffffffffffd40\n 58840: ra = u64 [sp + 0x2b8]\n 58844: s0 = u64 [sp + 0x2b0]\n 58848: s1 = u64 [sp + 0x2a8]\n 58852: sp = sp + 0x2c0\n 58856: ret\n      : @770 (gas: 1)\n 58858: trap\n      : @771 (gas: 8)\n 58859: u64 [sp + 272] = 0\n 58863: u64 [sp + 264] = 0\n 58867: u64 [sp + 256] = 0\n 58871: a0 = 0x4e487b7100000000\n 58881: a1 = sp + 0x100\n 58885: u64 [sp + 0x118] = a0\n 58889: a0 = 0\n 58891: ra = 692, jump @23\n      : @772 [@dyn 346] (gas: 8)\n 58898: u64 [sp + 248] = 0\n 58902: u64 [sp + 240] = 0\n 58906: u64 [sp + 224] = 0x41\n 58911: a0 = 0x4\n 58914: a1 = sp + 0xe0\n 58918: u64 [sp + 232] = 0\n 58922: ra = 0x2b8\n 58926: jump @23\n      : @773 (gas: 8)\n 58930: u64 [sp + 336] = 0\n 58934: u64 [sp + 328] = 0\n 58938: u64 [sp + 320] = 0\n 58942: a0 = 0x4e487b7100000000\n 58952: a1 = sp + 0x140\n 58956: u64 [sp + 0x158] = a0\n 58960: a0 = 0\n 58962: ra = 694, jump @23\n      : @774 [@dyn 347] (gas: 7)\n 58969: u64 [sp + 312] = 0\n 58973: u64 [sp + 304] = 0\n 58977: u64 [sp + 288] = 0x22\n 58982: a0 = 0x4\n 58985: a1 = sp + 0x120\n 58989: u64 [sp + 296] = 0\n 58993: ra = 696, jump @23\n      : @775 [@dyn 348] (gas: 3)\n 59000: a1 = 0x24\n 59003: a0 = 0\n 59005: ra = 698, jump @0\n      : @776 [@dyn 349] (gas: 6)\n 59012: i32 a1 = a0 + 0\n 59014: a0 = 0x1\n 59017: a2 = 0x24\n 59020: ra = 0x2bc\n 59024: ecalli 12 // 'seal_return'\n 59026: fallthrough\n      : @777 [@dyn 350] (gas: 24)\n 59027: sp = sp + 0xffffffffffffffb0\n 59030: u64 [sp + 0x48] = ra\n 59033: u64 [sp + 0x40] = s0\n 59036: s0 = sp + 0x50\n 59039: sp = sp & 0xfffffffffffffff0\n 59042: t0 = u64 [a0]\n 59044: t1 = u64 [a0 + 0x8]\n 59047: a4 = u64 [a0 + 0x10]\n 59050: a0 = u64 [a0 + 0x18]\n 59053: a5 = u64 [a1]\n 59055: a2 = u64 [a1 + 0x8]\n 59058: a3 = u64 [a1 + 0x10]\n 59061: a1 = u64 [a1 + 0x18]\n 59064: u64 [sp + 0x18] = a1\n 59067: u64 [sp + 0x10] = a3\n 59070: u64 [sp + 0x8] = a2\n 59073: u64 [sp] = a5\n 59075: u64 [sp + 0x38] = a0\n 59078: u64 [sp + 0x30] = a4\n 59081: u64 [sp + 0x28] = t1\n 59084: a0 = sp + 0x20\n 59087: a1 = sp\n 59089: u64 [sp + 0x20] = t0\n 59092: ra = 702, jump @740\n      : @778 [@dyn 351] (gas: 5)\n 59098: sp = s0 + 0xffffffffffffffb0\n 59101: ra = u64 [sp + 0x48]\n 59104: s0 = u64 [sp + 0x40]\n 59107: sp = sp + 0x50\n 59110: ret\n      : @779 (gas: 22)\n 59112: sp = sp + 0xfffffffffffffea0\n 59116: u64 [sp + 0x158] = ra\n 59120: u64 [sp + 0x150] = s0\n 59124: u64 [sp + 0x148] = s1\n 59128: s0 = sp + 0x160\n 59132: sp = sp & 0xffffffffffffffe0\n 59135: a4 = u64 [a1 + 0x10]\n 59138: a5 = u64 [a1 + 0x18]\n 59141: a2 = u64 [a1 + 0x8]\n 59144: a3 = u64 [a1]\n 59146: u64 [sp + 0x70] = a2\n 59149: u64 [sp + 0x58] = a5\n 59152: a1 = a2 | a5\n 59155: u64 [sp + 0x80] = a3\n 59159: a2 = a3 | a4\n 59162: a2 = a2 | a1\n 59165: a2 = a2 >> 0x20\n 59168: u64 [sp + 0x60] = a4\n 59171: a1 = a1 | a4\n 59174: a1 = a1 << 0x20\n 59177: a1 = a1 | a2\n 59180: jump @794 if a1 != 0\n      : @780 (gas: 12)\n 59184: a1 = u64 [a0 + 0x18]\n 59187: u64 [sp + 0x78] = a1\n 59190: a1 = u64 [a0 + 0x10]\n 59193: u64 [sp + 0x98] = a1\n 59197: a1 = u64 [a0 + 0x8]\n 59200: u64 [sp + 0x90] = a1\n 59204: a0 = u64 [a0]\n 59206: u64 [sp + 0x88] = a0\n 59210: a0 = i32 [sp + 0x80]\n 59214: a1 = 0x20\n 59217: u64 [sp + 0x68] = a0\n 59220: ra = 704, jump @0\n      : @781 [@dyn 352] (gas: 105)\n 59227: a1 = u8 [a0 + 0x11]\n 59230: a2 = u8 [a0 + 0x10]\n 59233: a3 = u8 [a0 + 0x12]\n 59236: a4 = u8 [a0 + 0x13]\n 59239: a1 = a1 << 0x8\n 59242: a1 = a1 | a2\n 59245: a3 = a3 << 0x10\n 59248: a4 = a4 << 0x18\n 59251: a3 = a3 | a4\n 59254: a1 = a1 | a3\n 59257: a2 = u8 [a0 + 0x15]\n 59260: a3 = u8 [a0 + 0x14]\n 59263: a4 = u8 [a0 + 0x16]\n 59266: a5 = u8 [a0 + 0x17]\n 59269: a2 = a2 << 0x8\n 59272: a2 = a2 | a3\n 59275: a4 = a4 << 0x10\n 59278: a5 = a5 << 0x18\n 59281: a4 = a4 | a5\n 59284: a2 = a2 | a4\n 59287: a2 = a2 << 0x20\n 59290: a1 = a1 | a2\n 59293: a2 = u8 [a0 + 0x19]\n 59296: a3 = u8 [a0 + 0x18]\n 59299: a4 = u8 [a0 + 0x1a]\n 59302: a5 = u8 [a0 + 0x1b]\n 59305: a2 = a2 << 0x8\n 59308: a2 = a2 | a3\n 59311: a4 = a4 << 0x10\n 59314: a5 = a5 << 0x18\n 59317: a4 = a4 | a5\n 59320: a2 = a2 | a4\n 59323: a3 = u8 [a0 + 0x1d]\n 59326: a4 = u8 [a0 + 0x1c]\n 59329: a5 = u8 [a0 + 0x1e]\n 59332: s1 = u8 [a0 + 0x1f]\n 59335: a3 = a3 << 0x8\n 59338: a3 = a3 | a4\n 59341: a5 = a5 << 0x10\n 59344: s1 = s1 << 0x18\n 59347: a5 = a5 | s1\n 59350: a3 = a3 | a5\n 59353: a3 = a3 << 0x20\n 59356: a2 = a2 | a3\n 59359: a3 = u8 [a0 + 0xd]\n 59362: a4 = u8 [a0 + 0xc]\n 59365: a5 = u8 [a0 + 0xe]\n 59368: a0 = u8 [a0 + 0xf]\n 59371: a3 = a3 << 0x8\n 59374: a3 = a3 | a4\n 59377: a5 = a5 << 0x10\n 59380: a0 = a0 << 0x18\n 59383: a0 = a0 | a5\n 59386: a0 = a0 | a3\n 59389: a2 = reverse a2\n 59391: u64 [sp + 0x50] = a2\n 59394: a1 = reverse a1\n 59396: u64 [sp + 0x48] = a1\n 59399: s1 = reverse a0\n 59401: s1 = s1 >> 0x20\n 59404: u64 [sp + 0x40] = s1\n 59407: s1 = u64 [sp + 0x78]\n 59410: u64 [sp + 0x118] = s1\n 59414: a0 = u64 [sp + 0x98]\n 59418: u64 [sp + 0x110] = a0\n 59422: a0 = u64 [sp + 0x90]\n 59426: u64 [sp + 0x108] = a0\n 59430: a0 = u64 [sp + 0x88]\n 59434: u64 [sp + 0x100] = a0\n 59438: u64 [sp + 312] = 0\n 59442: u64 [sp + 304] = 0\n 59446: u64 [sp + 296] = 0\n 59450: u64 [sp + 288] = 0\n 59454: u32 [sp + 224] = 0x20\n 59459: i32 a1 = sp + 0x100\n 59463: i32 a3 = sp + 0x120\n 59467: i32 a4 = sp + 0xe0\n 59471: a2 = 0xffffffffffffffff\n 59474: a0 = 0\n 59476: ecalli 7 // 'get_storage'\n 59478: a0 = u32 [sp + 0x134]\n 59482: a0 = a0 << 0x20\n 59485: a1 = u64 [sp + 0x138]\n 59489: a2 = u64 [sp + 0x40]\n 59492: a0 = a0 | a2\n 59495: u64 [sp + 0x118] = s1\n 59499: a2 = u64 [sp + 0x98]\n 59503: u64 [sp + 0x110] = a2\n 59507: a2 = u64 [sp + 0x90]\n 59511: u64 [sp + 0x108] = a2\n 59515: a2 = u64 [sp + 0x88]\n 59519: u64 [sp + 0x100] = a2\n 59523: u64 [sp + 0x138] = a1\n 59527: u64 [sp + 0x130] = a0\n 59531: a0 = u64 [sp + 0x48]\n 59534: u64 [sp + 0x128] = a0\n 59538: a0 = u64 [sp + 0x50]\n 59541: u64 [sp + 0x120] = a0\n 59545: i32 a1 = sp + 0x100\n 59549: i32 a3 = sp + 0x120\n 59553: a2 = 0xffffffffffffffff\n 59556: a4 = 0x20\n 59559: a0 = 0\n 59561: ecalli 14 // 'set_storage'\n 59563: fallthrough\n      : @782 (gas: 13)\n 59564: a0 = u64 [sp + 0x60]\n 59567: a2 = u64 [sp + 0x58]\n 59570: a2 = a2 | a0\n 59573: a0 = 0x100000000\n 59583: u64 [sp + 0x40] = a0\n 59586: a0 = 0xffffffe0\n 59596: a1 = u64 [sp + 0x80]\n 59600: a0 = a1 <u a0\n 59603: a1 = u64 [sp + 0x70]\n 59606: a0 = 0 if a1 != 0\n 59608: u64 [sp + 0x60] = a2\n 59611: a0 = 0 if a2 != 0\n 59613: jump @794 if a0 == 0\n      : @783 (gas: 20)\n 59617: a0 = u64 [sp + 0x88]\n 59621: a2 = a0 + 0x1\n 59624: u64 [sp + 0x48] = a2\n 59627: a0 = a2 <u 0x1\n 59630: a1 = u64 [sp + 0x90]\n 59634: a0 = a0 + a1\n 59637: u64 [sp + 0x58] = a0\n 59640: a0 = a0 | a2\n 59643: a0 = a0 <u 0x1\n 59646: a1 = u64 [sp + 0x98]\n 59650: a0 = a0 + a1\n 59653: u64 [sp + 0x50] = a0\n 59656: a0 = a0 <u a1\n 59659: a1 = u64 [sp + 0x78]\n 59662: a0 = a0 + a1\n 59665: u64 [sp + 0x38] = a0\n 59668: a0 = u64 [sp + 0x68]\n 59671: i32 a0 = a0 + 0x20\n 59674: a1 = 0x20\n 59677: ra = 706, jump @0\n      : @784 [@dyn 353] (gas: 137)\n 59684: a1 = u8 [a0 + 0x1]\n 59687: a2 = u8 [a0]\n 59689: a3 = u8 [a0 + 0x2]\n 59692: a4 = u8 [a0 + 0x3]\n 59695: a1 = a1 << 0x8\n 59698: a1 = a1 | a2\n 59701: a3 = a3 << 0x10\n 59704: a4 = a4 << 0x18\n 59707: a3 = a3 | a4\n 59710: a1 = a1 | a3\n 59713: a2 = u8 [a0 + 0x5]\n 59716: a3 = u8 [a0 + 0x4]\n 59719: a4 = u8 [a0 + 0x6]\n 59722: a5 = u8 [a0 + 0x7]\n 59725: a2 = a2 << 0x8\n 59728: a2 = a2 | a3\n 59731: a4 = a4 << 0x10\n 59734: a5 = a5 << 0x18\n 59737: a4 = a4 | a5\n 59740: a2 = a2 | a4\n 59743: a2 = a2 << 0x20\n 59746: t0 = a2 | a1\n 59749: a2 = u8 [a0 + 0x9]\n 59752: a3 = u8 [a0 + 0x8]\n 59755: a4 = u8 [a0 + 0xa]\n 59758: a5 = u8 [a0 + 0xb]\n 59761: a2 = a2 << 0x8\n 59764: a2 = a2 | a3\n 59767: a4 = a4 << 0x10\n 59770: a5 = a5 << 0x18\n 59773: a4 = a4 | a5\n 59776: a2 = a2 | a4\n 59779: a3 = u8 [a0 + 0xd]\n 59782: a4 = u8 [a0 + 0xc]\n 59785: a5 = u8 [a0 + 0xe]\n 59788: s1 = u8 [a0 + 0xf]\n 59791: a3 = a3 << 0x8\n 59794: a3 = a3 | a4\n 59797: a5 = a5 << 0x10\n 59800: s1 = s1 << 0x18\n 59803: a5 = a5 | s1\n 59806: a3 = a3 | a5\n 59809: a3 = a3 << 0x20\n 59812: a2 = a2 | a3\n 59815: a3 = u8 [a0 + 0x11]\n 59818: a4 = u8 [a0 + 0x10]\n 59821: a5 = u8 [a0 + 0x12]\n 59824: s1 = u8 [a0 + 0x13]\n 59827: a3 = a3 << 0x8\n 59830: a3 = a3 | a4\n 59833: a5 = a5 << 0x10\n 59836: s1 = s1 << 0x18\n 59839: a5 = a5 | s1\n 59842: a3 = a3 | a5\n 59845: a4 = u8 [a0 + 0x15]\n 59848: a5 = u8 [a0 + 0x14]\n 59851: s1 = u8 [a0 + 0x16]\n 59854: a1 = u8 [a0 + 0x17]\n 59857: a4 = a4 << 0x8\n 59860: a4 = a4 | a5\n 59863: s1 = s1 << 0x10\n 59866: a1 = a1 << 0x18\n 59869: a1 = a1 | s1\n 59872: a1 = a1 | a4\n 59875: a1 = a1 << 0x20\n 59878: a3 = a3 | a1\n 59881: a1 = u8 [a0 + 0x19]\n 59884: a4 = u8 [a0 + 0x18]\n 59887: a5 = u8 [a0 + 0x1a]\n 59890: s1 = u8 [a0 + 0x1b]\n 59893: a1 = a1 << 0x8\n 59896: a1 = a1 | a4\n 59899: a5 = a5 << 0x10\n 59902: s1 = s1 << 0x18\n 59905: a5 = a5 | s1\n 59908: a1 = a1 | a5\n 59911: a4 = u8 [a0 + 0x1d]\n 59914: a5 = u8 [a0 + 0x1c]\n 59917: s1 = u8 [a0 + 0x1e]\n 59920: a0 = u8 [a0 + 0x1f]\n 59923: a4 = a4 << 0x8\n 59926: a4 = a4 | a5\n 59929: s1 = s1 << 0x10\n 59932: a0 = a0 << 0x18\n 59935: a0 = a0 | s1\n 59938: a0 = a0 | a4\n 59941: a0 = a0 << 0x20\n 59944: a0 = a0 | a1\n 59947: u32 [sp + 224] = 0x20\n 59952: a0 = reverse a0\n 59954: u64 [sp + 0x30] = a0\n 59957: a0 = reverse a3\n 59959: u64 [sp + 0x28] = a0\n 59962: a0 = reverse a2\n 59964: u64 [sp + 0x20] = a0\n 59967: a0 = reverse t0\n 59969: u64 [sp + 0x18] = a0\n 59972: a0 = u64 [sp + 0x50]\n 59975: u64 [sp + 0x110] = a0\n 59979: a0 = u64 [sp + 0x58]\n 59982: u64 [sp + 0x108] = a0\n 59986: a0 = u64 [sp + 0x48]\n 59989: u64 [sp + 0x100] = a0\n 59993: s1 = u64 [sp + 0x38]\n 59996: u64 [sp + 0x118] = s1\n 60000: u64 [sp + 312] = 0\n 60004: u64 [sp + 304] = 0\n 60008: u64 [sp + 296] = 0\n 60012: u64 [sp + 288] = 0\n 60016: i32 a1 = sp + 0x100\n 60020: i32 a3 = sp + 0x120\n 60024: i32 a4 = sp + 0xe0\n 60028: a2 = 0xffffffffffffffff\n 60031: a0 = 0\n 60033: ecalli 7 // 'get_storage'\n 60035: u64 [sp + 0x118] = s1\n 60039: a0 = u64 [sp + 0x50]\n 60042: u64 [sp + 0x110] = a0\n 60046: a0 = u64 [sp + 0x58]\n 60049: u64 [sp + 0x108] = a0\n 60053: a0 = u64 [sp + 0x48]\n 60056: u64 [sp + 0x100] = a0\n 60060: a0 = u64 [sp + 0x18]\n 60063: u64 [sp + 0x138] = a0\n 60067: a0 = u64 [sp + 0x20]\n 60070: u64 [sp + 0x130] = a0\n 60074: a0 = u64 [sp + 0x28]\n 60077: u64 [sp + 0x128] = a0\n 60081: a0 = u64 [sp + 0x30]\n 60084: u64 [sp + 0x120] = a0\n 60088: i32 a1 = sp + 0x100\n 60092: i32 a3 = sp + 0x120\n 60096: a2 = 0xffffffffffffffff\n 60099: a4 = 0x20\n 60102: a0 = 0\n 60104: ecalli 14 // 'set_storage'\n 60106: fallthrough\n      : @785 (gas: 9)\n 60107: a0 = u64 [sp + 0x40]\n 60110: a0 = a0 + 0xffffffffffffffc0\n 60113: a1 = u64 [sp + 0x80]\n 60117: a0 = a1 <u a0\n 60120: a1 = u64 [sp + 0x70]\n 60123: a0 = 0 if a1 != 0\n 60125: a1 = u64 [sp + 0x60]\n 60128: a0 = 0 if a1 != 0\n 60130: jump @794 if a0 == 0\n      : @786 (gas: 20)\n 60134: a0 = u64 [sp + 0x88]\n 60138: a1 = a0 + 0x2\n 60141: u64 [sp + 0x58] = a1\n 60144: a0 = a1 <u a0\n 60147: a1 = u64 [sp + 0x90]\n 60151: a2 = a1 + a0\n 60154: u64 [sp + 0x50] = a2\n 60157: s1 = a2 <u a1\n 60160: s1 = a0 if a0 == 0\n 60163: a0 = u64 [sp + 0x98]\n 60167: s1 = s1 + a0\n 60170: u64 [sp + 0x40] = s1\n 60173: a0 = s1 <u a0\n 60176: a1 = u64 [sp + 0x78]\n 60179: a0 = a0 + a1\n 60182: u64 [sp + 0x48] = a0\n 60185: a0 = u64 [sp + 0x68]\n 60188: i32 a0 = a0 + 0x40\n 60191: a1 = 0x20\n 60194: ra = 708, jump @0\n      : @787 [@dyn 354] (gas: 107)\n 60201: a1 = u8 [a0 + 0x1]\n 60204: a2 = u8 [a0]\n 60206: a3 = u8 [a0 + 0x2]\n 60209: a4 = u8 [a0 + 0x3]\n 60212: a1 = a1 << 0x8\n 60215: a1 = a1 | a2\n 60218: a3 = a3 << 0x10\n 60221: a4 = a4 << 0x18\n 60224: a3 = a3 | a4\n 60227: a1 = a1 | a3\n 60230: a2 = u8 [a0 + 0x5]\n 60233: a3 = u8 [a0 + 0x4]\n 60236: a4 = u8 [a0 + 0x6]\n 60239: a5 = u8 [a0 + 0x7]\n 60242: a2 = a2 << 0x8\n 60245: a2 = a2 | a3\n 60248: a4 = a4 << 0x10\n 60251: a5 = a5 << 0x18\n 60254: a4 = a4 | a5\n 60257: a2 = a2 | a4\n 60260: a2 = a2 << 0x20\n 60263: t0 = a2 | a1\n 60266: a2 = u8 [a0 + 0x9]\n 60269: a3 = u8 [a0 + 0x8]\n 60272: a4 = u8 [a0 + 0xa]\n 60275: a5 = u8 [a0 + 0xb]\n 60278: a2 = a2 << 0x8\n 60281: a2 = a2 | a3\n 60284: a4 = a4 << 0x10\n 60287: a5 = a5 << 0x18\n 60290: a4 = a4 | a5\n 60293: a2 = a2 | a4\n 60296: a3 = u8 [a0 + 0xd]\n 60299: a4 = u8 [a0 + 0xc]\n 60302: a5 = u8 [a0 + 0xe]\n 60305: a1 = u8 [a0 + 0xf]\n 60308: a3 = a3 << 0x8\n 60311: a3 = a3 | a4\n 60314: a5 = a5 << 0x10\n 60317: a1 = a1 << 0x18\n 60320: a1 = a1 | a5\n 60323: a1 = a1 | a3\n 60326: a1 = a1 << 0x20\n 60329: a2 = a2 | a1\n 60332: a1 = u8 [a0 + 0x11]\n 60335: a3 = u8 [a0 + 0x10]\n 60338: a4 = u8 [a0 + 0x12]\n 60341: a5 = u8 [a0 + 0x13]\n 60344: a1 = a1 << 0x8\n 60347: a1 = a1 | a3\n 60350: a4 = a4 << 0x10\n 60353: a5 = a5 << 0x18\n 60356: a4 = a4 | a5\n 60359: a1 = a1 | a4\n 60362: a3 = u8 [a0 + 0x15]\n 60365: a4 = u8 [a0 + 0x14]\n 60368: a5 = u8 [a0 + 0x16]\n 60371: s1 = u8 [a0 + 0x17]\n 60374: a3 = a3 << 0x8\n 60377: a3 = a3 | a4\n 60380: a5 = a5 << 0x10\n 60383: s1 = s1 << 0x18\n 60386: a5 = a5 | s1\n 60389: a3 = a3 | a5\n 60392: a3 = a3 << 0x20\n 60395: a3 = a3 | a1\n 60398: a1 = u8 [a0 + 0x19]\n 60401: a4 = u8 [a0 + 0x18]\n 60404: a5 = u8 [a0 + 0x1a]\n 60407: s1 = u8 [a0 + 0x1b]\n 60410: a1 = a1 << 0x8\n 60413: a1 = a1 | a4\n 60416: a5 = a5 << 0x10\n 60419: s1 = s1 << 0x18\n 60422: a5 = a5 | s1\n 60425: a1 = a1 | a5\n 60428: a4 = u8 [a0 + 0x1d]\n 60431: a5 = u8 [a0 + 0x1c]\n 60434: s1 = u8 [a0 + 0x1e]\n 60437: a0 = u8 [a0 + 0x1f]\n 60440: a4 = a4 << 0x8\n 60443: a4 = a4 | a5\n 60446: s1 = s1 << 0x10\n 60449: a0 = a0 << 0x18\n 60452: a0 = a0 | s1\n 60455: a0 = a0 | a4\n 60458: a0 = a0 << 0x20\n 60461: a0 = a0 | a1\n 60464: a4 = reverse a0\n 60466: a0 = reverse a3\n 60468: a1 = reverse a2\n 60470: a2 = reverse t0\n 60472: a3 = u64 [sp + 0x50]\n 60475: u64 [sp + 0xc8] = a3\n 60479: a3 = u64 [sp + 0x58]\n 60482: u64 [sp + 0xc0] = a3\n 60486: a3 = u64 [sp + 0x40]\n 60489: u64 [sp + 0xd0] = a3\n 60493: a3 = u64 [sp + 0x48]\n 60496: u64 [sp + 0xd8] = a3\n 60500: u64 [sp + 0xb8] = a2\n 60504: u64 [sp + 0xb0] = a1\n 60508: u64 [sp + 0xa8] = a0\n 60512: a0 = sp + 0xc0\n 60516: a1 = sp + 0xa0\n 60520: u64 [sp + 0xa0] = a4\n 60524: ra = 710, jump @740\n      : @788 [@dyn 355] (gas: 10)\n 60530: a0 = 0x100000000\n 60540: u64 [sp + 0x40] = a0\n 60543: a0 = 0xffffffa0\n 60553: a1 = u64 [sp + 0x80]\n 60557: a0 = a1 <u a0\n 60560: a1 = u64 [sp + 0x70]\n 60563: a0 = 0 if a1 != 0\n 60565: a1 = u64 [sp + 0x60]\n 60568: a0 = 0 if a1 != 0\n 60570: jump @794 if a0 == 0\n      : @789 (gas: 20)\n 60574: a0 = u64 [sp + 0x88]\n 60578: a1 = a0 + 0x3\n 60581: u64 [sp + 0x48] = a1\n 60584: a0 = a1 <u a0\n 60587: a1 = u64 [sp + 0x90]\n 60591: a2 = a1 + a0\n 60594: u64 [sp + 0x58] = a2\n 60597: a1 = a2 <u a1\n 60600: a1 = a0 if a0 == 0\n 60603: a0 = u64 [sp + 0x98]\n 60607: a1 = a1 + a0\n 60610: u64 [sp + 0x50] = a1\n 60613: a0 = a1 <u a0\n 60616: a1 = u64 [sp + 0x78]\n 60619: a0 = a0 + a1\n 60622: u64 [sp + 0x38] = a0\n 60625: a0 = u64 [sp + 0x68]\n 60628: i32 a0 = a0 + 0x60\n 60631: a1 = 0x20\n 60634: ra = 712, jump @0\n      : @790 [@dyn 356] (gas: 137)\n 60641: a1 = u8 [a0 + 0x1]\n 60644: a2 = u8 [a0]\n 60646: a3 = u8 [a0 + 0x2]\n 60649: a4 = u8 [a0 + 0x3]\n 60652: a1 = a1 << 0x8\n 60655: a1 = a1 | a2\n 60658: a3 = a3 << 0x10\n 60661: a4 = a4 << 0x18\n 60664: a3 = a3 | a4\n 60667: a1 = a1 | a3\n 60670: a2 = u8 [a0 + 0x5]\n 60673: a3 = u8 [a0 + 0x4]\n 60676: a4 = u8 [a0 + 0x6]\n 60679: a5 = u8 [a0 + 0x7]\n 60682: a2 = a2 << 0x8\n 60685: a2 = a2 | a3\n 60688: a4 = a4 << 0x10\n 60691: a5 = a5 << 0x18\n 60694: a4 = a4 | a5\n 60697: a2 = a2 | a4\n 60700: a2 = a2 << 0x20\n 60703: t0 = a2 | a1\n 60706: a2 = u8 [a0 + 0x9]\n 60709: a3 = u8 [a0 + 0x8]\n 60712: a4 = u8 [a0 + 0xa]\n 60715: a5 = u8 [a0 + 0xb]\n 60718: a2 = a2 << 0x8\n 60721: a2 = a2 | a3\n 60724: a4 = a4 << 0x10\n 60727: a5 = a5 << 0x18\n 60730: a4 = a4 | a5\n 60733: a2 = a2 | a4\n 60736: a3 = u8 [a0 + 0xd]\n 60739: a4 = u8 [a0 + 0xc]\n 60742: a5 = u8 [a0 + 0xe]\n 60745: s1 = u8 [a0 + 0xf]\n 60748: a3 = a3 << 0x8\n 60751: a3 = a3 | a4\n 60754: a5 = a5 << 0x10\n 60757: s1 = s1 << 0x18\n 60760: a5 = a5 | s1\n 60763: a3 = a3 | a5\n 60766: a3 = a3 << 0x20\n 60769: a2 = a2 | a3\n 60772: a3 = u8 [a0 + 0x11]\n 60775: a4 = u8 [a0 + 0x10]\n 60778: a5 = u8 [a0 + 0x12]\n 60781: s1 = u8 [a0 + 0x13]\n 60784: a3 = a3 << 0x8\n 60787: a3 = a3 | a4\n 60790: a5 = a5 << 0x10\n 60793: s1 = s1 << 0x18\n 60796: a5 = a5 | s1\n 60799: a3 = a3 | a5\n 60802: a4 = u8 [a0 + 0x15]\n 60805: a5 = u8 [a0 + 0x14]\n 60808: s1 = u8 [a0 + 0x16]\n 60811: a1 = u8 [a0 + 0x17]\n 60814: a4 = a4 << 0x8\n 60817: a4 = a4 | a5\n 60820: s1 = s1 << 0x10\n 60823: a1 = a1 << 0x18\n 60826: a1 = a1 | s1\n 60829: a1 = a1 | a4\n 60832: a1 = a1 << 0x20\n 60835: a3 = a3 | a1\n 60838: a1 = u8 [a0 + 0x19]\n 60841: a4 = u8 [a0 + 0x18]\n 60844: a5 = u8 [a0 + 0x1a]\n 60847: s1 = u8 [a0 + 0x1b]\n 60850: a1 = a1 << 0x8\n 60853: a1 = a1 | a4\n 60856: a5 = a5 << 0x10\n 60859: s1 = s1 << 0x18\n 60862: a5 = a5 | s1\n 60865: a1 = a1 | a5\n 60868: a4 = u8 [a0 + 0x1d]\n 60871: a5 = u8 [a0 + 0x1c]\n 60874: s1 = u8 [a0 + 0x1e]\n 60877: a0 = u8 [a0 + 0x1f]\n 60880: a4 = a4 << 0x8\n 60883: a4 = a4 | a5\n 60886: s1 = s1 << 0x10\n 60889: a0 = a0 << 0x18\n 60892: a0 = a0 | s1\n 60895: a0 = a0 | a4\n 60898: a0 = a0 << 0x20\n 60901: a0 = a0 | a1\n 60904: u32 [sp + 224] = 0x20\n 60909: a0 = reverse a0\n 60911: u64 [sp + 0x30] = a0\n 60914: a0 = reverse a3\n 60916: u64 [sp + 0x28] = a0\n 60919: a0 = reverse a2\n 60921: u64 [sp + 0x20] = a0\n 60924: a0 = reverse t0\n 60926: u64 [sp + 0x18] = a0\n 60929: a0 = u64 [sp + 0x50]\n 60932: u64 [sp + 0x110] = a0\n 60936: a0 = u64 [sp + 0x58]\n 60939: u64 [sp + 0x108] = a0\n 60943: a0 = u64 [sp + 0x48]\n 60946: u64 [sp + 0x100] = a0\n 60950: s1 = u64 [sp + 0x38]\n 60953: u64 [sp + 0x118] = s1\n 60957: u64 [sp + 312] = 0\n 60961: u64 [sp + 304] = 0\n 60965: u64 [sp + 296] = 0\n 60969: u64 [sp + 288] = 0\n 60973: i32 a1 = sp + 0x100\n 60977: i32 a3 = sp + 0x120\n 60981: i32 a4 = sp + 0xe0\n 60985: a2 = 0xffffffffffffffff\n 60988: a0 = 0\n 60990: ecalli 7 // 'get_storage'\n 60992: u64 [sp + 0x118] = s1\n 60996: a0 = u64 [sp + 0x50]\n 60999: u64 [sp + 0x110] = a0\n 61003: a0 = u64 [sp + 0x58]\n 61006: u64 [sp + 0x108] = a0\n 61010: a0 = u64 [sp + 0x48]\n 61013: u64 [sp + 0x100] = a0\n 61017: a0 = u64 [sp + 0x18]\n 61020: u64 [sp + 0x138] = a0\n 61024: a0 = u64 [sp + 0x20]\n 61027: u64 [sp + 0x130] = a0\n 61031: a0 = u64 [sp + 0x28]\n 61034: u64 [sp + 0x128] = a0\n 61038: a0 = u64 [sp + 0x30]\n 61041: u64 [sp + 0x120] = a0\n 61045: i32 a1 = sp + 0x100\n 61049: i32 a3 = sp + 0x120\n 61053: a2 = 0xffffffffffffffff\n 61056: a4 = 0x20\n 61059: a0 = 0\n 61061: ecalli 14 // 'set_storage'\n 61063: fallthrough\n      : @791 (gas: 9)\n 61064: a0 = u64 [sp + 0x40]\n 61067: a0 = a0 + 0xffffffffffffff80\n 61070: a1 = u64 [sp + 0x80]\n 61074: a0 = a1 <u a0\n 61077: a1 = u64 [sp + 0x70]\n 61080: a0 = 0 if a1 != 0\n 61082: a1 = u64 [sp + 0x60]\n 61085: a0 = 0 if a1 != 0\n 61087: jump @794 if a0 == 0\n      : @792 (gas: 20)\n 61091: a0 = u64 [sp + 0x88]\n 61095: a1 = a0 + 0x4\n 61098: u64 [sp + 0x80] = a1\n 61102: a0 = a1 <u a0\n 61105: a1 = u64 [sp + 0x90]\n 61109: a2 = a1 + a0\n 61112: u64 [sp + 0x88] = a2\n 61116: a1 = a2 <u a1\n 61119: a1 = a0 if a0 == 0\n 61122: a0 = u64 [sp + 0x98]\n 61126: a1 = a1 + a0\n 61129: u64 [sp + 0x90] = a1\n 61133: a0 = a1 <u a0\n 61136: a1 = u64 [sp + 0x78]\n 61139: a0 = a0 + a1\n 61142: u64 [sp + 0x98] = a0\n 61146: a0 = u64 [sp + 0x68]\n 61149: i32 a0 = a0 + 0x80\n 61153: a1 = 0x20\n 61156: ra = 714, jump @0\n      : @793 [@dyn 357] (gas: 140)\n 61163: a1 = u8 [a0 + 0x11]\n 61166: a2 = u8 [a0 + 0x10]\n 61169: a3 = u8 [a0 + 0x12]\n 61172: a4 = u8 [a0 + 0x13]\n 61175: a1 = a1 << 0x8\n 61178: a1 = a1 | a2\n 61181: a3 = a3 << 0x10\n 61184: a4 = a4 << 0x18\n 61187: a3 = a3 | a4\n 61190: t0 = a3 | a1\n 61193: a1 = u8 [a0 + 0x1]\n 61196: a2 = u8 [a0]\n 61198: a3 = u8 [a0 + 0x2]\n 61201: a4 = u8 [a0 + 0x3]\n 61204: a1 = a1 << 0x8\n 61207: a1 = a1 | a2\n 61210: a3 = a3 << 0x10\n 61213: a4 = a4 << 0x18\n 61216: a2 = a4 | a3\n 61219: t1 = a2 | a1\n 61222: a1 = u8 [a0 + 0x15]\n 61225: a3 = u8 [a0 + 0x14]\n 61228: a4 = u8 [a0 + 0x16]\n 61231: a5 = u8 [a0 + 0x17]\n 61234: a1 = a1 << 0x8\n 61237: a1 = a1 | a3\n 61240: a4 = a4 << 0x10\n 61243: a5 = a5 << 0x18\n 61246: a3 = a5 | a4\n 61249: t2 = a3 | a1\n 61252: a1 = u8 [a0 + 0x5]\n 61255: a4 = u8 [a0 + 0x4]\n 61258: a5 = u8 [a0 + 0x6]\n 61261: s1 = u8 [a0 + 0x7]\n 61264: a1 = a1 << 0x8\n 61267: a1 = a1 | a4\n 61270: a5 = a5 << 0x10\n 61273: s1 = s1 << 0x18\n 61276: a4 = s1 | a5\n 61279: ra = a4 | a1\n 61282: a1 = u8 [a0 + 0x19]\n 61285: a5 = u8 [a0 + 0x18]\n 61288: s1 = u8 [a0 + 0x1a]\n 61291: a2 = u8 [a0 + 0x1b]\n 61294: a1 = a1 << 0x8\n 61297: a1 = a1 | a5\n 61300: s1 = s1 << 0x10\n 61303: a2 = a2 << 0x18\n 61306: a2 = a2 | s1\n 61309: a5 = a2 | a1\n 61312: a1 = u8 [a0 + 0x9]\n 61315: a2 = u8 [a0 + 0x8]\n 61318: s1 = u8 [a0 + 0xa]\n 61321: a3 = u8 [a0 + 0xb]\n 61324: a1 = a1 << 0x8\n 61327: a1 = a1 | a2\n 61330: s1 = s1 << 0x10\n 61333: a3 = a3 << 0x18\n 61336: a3 = a3 | s1\n 61339: a1 = a1 | a3\n 61342: a2 = u8 [a0 + 0x1d]\n 61345: a3 = u8 [a0 + 0x1c]\n 61348: s1 = u8 [a0 + 0x1e]\n 61351: a4 = u8 [a0 + 0x1f]\n 61354: a2 = a2 << 0x8\n 61357: a2 = a2 | a3\n 61360: s1 = s1 << 0x10\n 61363: a4 = a4 << 0x18\n 61366: a4 = a4 | s1\n 61369: a2 = a2 | a4\n 61372: a3 = u8 [a0 + 0xd]\n 61375: a4 = u8 [a0 + 0xc]\n 61378: s1 = u8 [a0 + 0xe]\n 61381: a0 = u8 [a0 + 0xf]\n 61384: a3 = a3 << 0x8\n 61387: a3 = a3 | a4\n 61390: s1 = s1 << 0x10\n 61393: a0 = a0 << 0x18\n 61396: a0 = a0 | s1\n 61399: a0 = a0 | a3\n 61402: a0 = a0 | a2\n 61405: a1 = a1 | a5\n 61408: a0 = a0 << 0x20\n 61411: a0 = a0 | a1\n 61414: a1 = ra | t2\n 61417: a2 = t1 | t0\n 61420: a1 = a1 << 0x20\n 61423: a1 = a1 | a2\n 61426: a0 = a0 | a1\n 61429: u32 [sp + 224] = 0x20\n 61434: a0 = a0 >u 0\n 61436: u64 [sp + 0x78] = a0\n 61439: a0 = u64 [sp + 0x90]\n 61443: u64 [sp + 0x110] = a0\n 61447: a0 = u64 [sp + 0x88]\n 61451: u64 [sp + 0x108] = a0\n 61455: a0 = u64 [sp + 0x80]\n 61459: u64 [sp + 0x100] = a0\n 61463: s1 = u64 [sp + 0x98]\n 61467: u64 [sp + 0x118] = s1\n 61471: u64 [sp + 312] = 0\n 61475: u64 [sp + 304] = 0\n 61479: u64 [sp + 296] = 0\n 61483: u64 [sp + 288] = 0\n 61487: i32 a1 = sp + 0x100\n 61491: i32 a3 = sp + 0x120\n 61495: i32 a4 = sp + 0xe0\n 61499: a2 = 0xffffffffffffffff\n 61502: a0 = 0\n 61504: ecalli 7 // 'get_storage'\n 61506: a0 = u64 [sp + 0x120]\n 61510: a1 = u64 [sp + 0x128]\n 61514: a2 = u64 [sp + 0x130]\n 61518: a3 = u64 [sp + 0x138]\n 61522: a0 = a0 & 0xffffffffffffff00\n 61526: a4 = u64 [sp + 0x78]\n 61529: a0 = a0 | a4\n 61532: u64 [sp + 0x118] = s1\n 61536: a4 = u64 [sp + 0x90]\n 61540: u64 [sp + 0x110] = a4\n 61544: a4 = u64 [sp + 0x88]\n 61548: u64 [sp + 0x108] = a4\n 61552: a4 = u64 [sp + 0x80]\n 61556: u64 [sp + 0x100] = a4\n 61560: u64 [sp + 0x138] = a3\n 61564: u64 [sp + 0x130] = a2\n 61568: u64 [sp + 0x128] = a1\n 61572: u64 [sp + 0x120] = a0\n 61576: i32 a1 = sp + 0x100\n 61580: i32 a3 = sp + 0x120\n 61584: a2 = 0xffffffffffffffff\n 61587: a4 = 0x20\n 61590: a0 = 0\n 61592: ecalli 14 // 'set_storage'\n 61594: sp = s0 + 0xfffffffffffffea0\n 61598: ra = u64 [sp + 0x158]\n 61602: s0 = u64 [sp + 0x150]\n 61606: s1 = u64 [sp + 0x148]\n 61610: sp = sp + 0x160\n 61614: ret\n      : @794 (gas: 1)\n 61616: trap\n      : @795 (gas: 20)\n 61617: sp = sp + 0xffffffffffffff48\n 61621: u64 [sp + 0xb0] = ra\n 61625: u64 [sp + 0xa8] = s0\n 61629: u64 [sp + 0xa0] = s1\n 61633: t1 = u64 [a1 + 0x18]\n 61636: s0 = u64 [a1 + 0x10]\n 61639: s1 = u64 [a1 + 0x8]\n 61642: t0 = u64 [a1]\n 61644: u64 [sp + 0x88] = s1\n 61648: u64 [sp + 0x98] = t1\n 61652: a1 = s1 | t1\n 61655: s1 = t0 | s0\n 61658: s1 = s1 | a1\n 61661: s1 = s1 >> 0x20\n 61664: u64 [sp + 0x90] = s0\n 61668: a1 = a1 | s0\n 61671: a1 = a1 << 0x20\n 61674: a1 = a1 | s1\n 61677: u64 [sp] = a0\n 61679: jump @811 if a1 != 0\n      : @796 (gas: 36)\n 61683: a0 = u64 [a5 + 0x18]\n 61686: u64 [sp + 0x68] = a0\n 61689: a0 = u64 [a5 + 0x10]\n 61692: u64 [sp + 0x60] = a0\n 61695: a0 = u64 [a5 + 0x8]\n 61698: u64 [sp + 0x58] = a0\n 61701: a0 = u64 [a5]\n 61703: u64 [sp + 0x80] = a0\n 61707: a0 = u64 [a4 + 0x18]\n 61710: u64 [sp + 0x10] = a0\n 61713: a0 = u64 [a4 + 0x10]\n 61716: u64 [sp + 0x18] = a0\n 61719: a0 = u64 [a4 + 0x8]\n 61722: u64 [sp + 0x8] = a0\n 61725: a0 = u64 [a4]\n 61727: u64 [sp + 0x20] = a0\n 61730: a0 = u64 [a3 + 0x18]\n 61733: u64 [sp + 0x28] = a0\n 61736: a0 = u64 [a3 + 0x10]\n 61739: u64 [sp + 0x30] = a0\n 61742: a0 = u64 [a3 + 0x8]\n 61745: u64 [sp + 0x38] = a0\n 61748: a0 = u64 [a3]\n 61750: u64 [sp + 0x40] = a0\n 61753: a0 = u64 [a2 + 0x18]\n 61756: u64 [sp + 0x48] = a0\n 61759: s1 = u64 [a2 + 0x10]\n 61762: a0 = u64 [a2 + 0x8]\n 61765: u64 [sp + 0x50] = a0\n 61768: a0 = u64 [a2]\n 61770: u64 [sp + 0x70] = a0\n 61773: i32 a0 = t0 + 0\n 61775: a1 = 0x20\n 61778: u64 [sp + 0x78] = a0\n 61781: s0 = t0\n 61783: ra = 716, jump @0\n      : @797 [@dyn 358] (gas: 79)\n 61790: a1 = u64 [sp + 0x48]\n 61793: a1 = reverse a1\n 61795: a2 = reverse s1\n 61797: a3 = u64 [sp + 0x50]\n 61800: a3 = reverse a3\n 61802: a4 = u64 [sp + 0x70]\n 61805: a4 = reverse a4\n 61807: a5 = a4 >> 0x38\n 61810: u8 [a0 + 0x1f] = a5\n 61813: a5 = a4 >> 0x30\n 61816: u8 [a0 + 0x1e] = a5\n 61819: a5 = a4 >> 0x28\n 61822: u8 [a0 + 0x1d] = a5\n 61825: a5 = a4 >> 0x20\n 61828: u8 [a0 + 0x1c] = a5\n 61831: a5 = a4 >> 0x18\n 61834: u8 [a0 + 0x1b] = a5\n 61837: a5 = a4 >> 0x10\n 61840: u8 [a0 + 0x1a] = a5\n 61843: a5 = a4 >> 0x8\n 61846: u8 [a0 + 0x19] = a5\n 61849: u8 [a0 + 0x18] = a4\n 61852: u8 [a0 + 0x10] = a3\n 61855: a4 = a3 >> 0x38\n 61858: u8 [a0 + 0x17] = a4\n 61861: a4 = a3 >> 0x30\n 61864: u8 [a0 + 0x16] = a4\n 61867: a4 = a3 >> 0x28\n 61870: u8 [a0 + 0x15] = a4\n 61873: a4 = a3 >> 0x20\n 61876: u8 [a0 + 0x14] = a4\n 61879: a4 = a3 >> 0x18\n 61882: u8 [a0 + 0x13] = a4\n 61885: a4 = a3 >> 0x10\n 61888: u8 [a0 + 0x12] = a4\n 61891: a3 = a3 >> 0x8\n 61894: u8 [a0 + 0x11] = a3\n 61897: u8 [a0 + 0x8] = a2\n 61900: a3 = a2 >> 0x38\n 61903: u8 [a0 + 0xf] = a3\n 61906: a3 = a2 >> 0x30\n 61909: u8 [a0 + 0xe] = a3\n 61912: a3 = a2 >> 0x28\n 61915: u8 [a0 + 0xd] = a3\n 61918: a3 = a2 >> 0x20\n 61921: u8 [a0 + 0xc] = a3\n 61924: a3 = a2 >> 0x18\n 61927: u8 [a0 + 0xb] = a3\n 61930: a3 = a2 >> 0x10\n 61933: u8 [a0 + 0xa] = a3\n 61936: a2 = a2 >> 0x8\n 61939: u8 [a0 + 0x9] = a2\n 61942: u8 [a0] = a1\n 61944: a2 = a1 >> 0x38\n 61947: u8 [a0 + 0x7] = a2\n 61950: a2 = a1 >> 0x30\n 61953: u8 [a0 + 0x6] = a2\n 61956: a2 = a1 >> 0x28\n 61959: u8 [a0 + 0x5] = a2\n 61962: a2 = a1 >> 0x20\n 61965: u8 [a0 + 0x4] = a2\n 61968: a2 = a1 >> 0x18\n 61971: u8 [a0 + 0x3] = a2\n 61974: a2 = a1 >> 0x10\n 61977: u8 [a0 + 0x2] = a2\n 61980: a1 = a1 >> 0x8\n 61983: a2 = u64 [sp + 0x98]\n 61987: a3 = u64 [sp + 0x90]\n 61991: a3 = a3 | a2\n 61994: s1 = 0x100000000\n 62004: a2 = 0xffffffe0\n 62014: u64 [sp + 0x70] = s0\n 62017: a2 = s0 <u a2\n 62020: s0 = a3\n 62022: a3 = u64 [sp + 0x88]\n 62026: a2 = 0 if a3 != 0\n 62028: a2 = 0 if s0 != 0\n 62030: u8 [a0 + 0x1] = a1\n 62033: jump @811 if a2 == 0\n      : @798 (gas: 4)\n 62037: a0 = u64 [sp + 0x78]\n 62040: i32 a0 = a0 + 0x20\n 62043: a1 = 0x20\n 62046: ra = 718, jump @0\n      : @799 [@dyn 359] (gas: 75)\n 62053: a1 = u64 [sp + 0x28]\n 62056: a1 = reverse a1\n 62058: a2 = u64 [sp + 0x30]\n 62061: a2 = reverse a2\n 62063: a3 = u64 [sp + 0x38]\n 62066: a3 = reverse a3\n 62068: a4 = u64 [sp + 0x40]\n 62071: a4 = reverse a4\n 62073: a5 = a4 >> 0x38\n 62076: u8 [a0 + 0x1f] = a5\n 62079: a5 = a4 >> 0x30\n 62082: u8 [a0 + 0x1e] = a5\n 62085: a5 = a4 >> 0x28\n 62088: u8 [a0 + 0x1d] = a5\n 62091: a5 = a4 >> 0x20\n 62094: u8 [a0 + 0x1c] = a5\n 62097: a5 = a4 >> 0x18\n 62100: u8 [a0 + 0x1b] = a5\n 62103: a5 = a4 >> 0x10\n 62106: u8 [a0 + 0x1a] = a5\n 62109: a5 = a4 >> 0x8\n 62112: u8 [a0 + 0x19] = a5\n 62115: u8 [a0 + 0x18] = a4\n 62118: u8 [a0 + 0x10] = a3\n 62121: a4 = a3 >> 0x38\n 62124: u8 [a0 + 0x17] = a4\n 62127: a4 = a3 >> 0x30\n 62130: u8 [a0 + 0x16] = a4\n 62133: a4 = a3 >> 0x28\n 62136: u8 [a0 + 0x15] = a4\n 62139: a4 = a3 >> 0x20\n 62142: u8 [a0 + 0x14] = a4\n 62145: a4 = a3 >> 0x18\n 62148: u8 [a0 + 0x13] = a4\n 62151: a4 = a3 >> 0x10\n 62154: u8 [a0 + 0x12] = a4\n 62157: a3 = a3 >> 0x8\n 62160: u8 [a0 + 0x11] = a3\n 62163: u8 [a0 + 0x8] = a2\n 62166: a3 = a2 >> 0x38\n 62169: u8 [a0 + 0xf] = a3\n 62172: a3 = a2 >> 0x30\n 62175: u8 [a0 + 0xe] = a3\n 62178: a3 = a2 >> 0x28\n 62181: u8 [a0 + 0xd] = a3\n 62184: a3 = a2 >> 0x20\n 62187: u8 [a0 + 0xc] = a3\n 62190: a3 = a2 >> 0x18\n 62193: u8 [a0 + 0xb] = a3\n 62196: a3 = a2 >> 0x10\n 62199: u8 [a0 + 0xa] = a3\n 62202: a2 = a2 >> 0x8\n 62205: u8 [a0 + 0x9] = a2\n 62208: u8 [a0] = a1\n 62210: a2 = a1 >> 0x38\n 62213: u8 [a0 + 0x7] = a2\n 62216: a2 = a1 >> 0x30\n 62219: u8 [a0 + 0x6] = a2\n 62222: a2 = a1 >> 0x28\n 62225: u8 [a0 + 0x5] = a2\n 62228: a2 = a1 >> 0x20\n 62231: u8 [a0 + 0x4] = a2\n 62234: a2 = a1 >> 0x18\n 62237: u8 [a0 + 0x3] = a2\n 62240: a2 = a1 >> 0x10\n 62243: u8 [a0 + 0x2] = a2\n 62246: a1 = a1 >> 0x8\n 62249: a2 = s1 + 0xffffffffffffffc0\n 62252: a4 = u64 [sp + 0x70]\n 62255: a2 = a4 <u a2\n 62258: a3 = u64 [sp + 0x88]\n 62262: a2 = 0 if a3 != 0\n 62264: a2 = 0 if s0 != 0\n 62266: u8 [a0 + 0x1] = a1\n 62269: jump @811 if a2 == 0\n      : @800 (gas: 16)\n 62273: s0 = a4 + 0x60\n 62276: a0 = s0 <u a4\n 62279: a2 = a3 + a0\n 62282: u64 [sp + 0x50] = a2\n 62285: s1 = a2 <u a3\n 62288: s1 = a0 if a0 == 0\n 62291: a0 = u64 [sp + 0x90]\n 62295: s1 = s1 + a0\n 62298: a0 = s1 <u a0\n 62301: a1 = u64 [sp + 0x98]\n 62305: a0 = a0 + a1\n 62308: u64 [sp + 0x48] = a0\n 62311: a0 = u64 [sp + 0x78]\n 62314: i32 a0 = a0 + 0x40\n 62317: a1 = 0x20\n 62320: ra = 720, jump @0\n      : @801 [@dyn 360] (gas: 43)\n 62327: u8 [a0 + 31] = 0x60\n 62331: a1 = s0 | s1\n 62334: a2 = u64 [sp + 0x50]\n 62337: a4 = u64 [sp + 0x48]\n 62340: a2 = a2 | a4\n 62343: a1 = a1 | a2\n 62346: a1 = a1 >> 0x20\n 62349: u64 [sp + 0x78] = s1\n 62352: a2 = a2 | s1\n 62355: a2 = a2 << 0x20\n 62358: a1 = a1 | a2\n 62361: u8 [a0 + 30] = 0\n 62364: u8 [a0 + 29] = 0\n 62367: u8 [a0 + 28] = 0\n 62370: u8 [a0 + 27] = 0\n 62373: u8 [a0 + 26] = 0\n 62376: u8 [a0 + 25] = 0\n 62379: u8 [a0 + 24] = 0\n 62382: u8 [a0 + 23] = 0\n 62385: u8 [a0 + 22] = 0\n 62388: u8 [a0 + 21] = 0\n 62391: u8 [a0 + 20] = 0\n 62394: u8 [a0 + 19] = 0\n 62397: u8 [a0 + 18] = 0\n 62400: u8 [a0 + 17] = 0\n 62403: u8 [a0 + 16] = 0\n 62406: u8 [a0 + 15] = 0\n 62409: u8 [a0 + 14] = 0\n 62412: u8 [a0 + 13] = 0\n 62415: u8 [a0 + 12] = 0\n 62418: u8 [a0 + 11] = 0\n 62421: u8 [a0 + 10] = 0\n 62424: u8 [a0 + 9] = 0\n 62427: u8 [a0 + 8] = 0\n 62430: u8 [a0 + 7] = 0\n 62433: u8 [a0 + 6] = 0\n 62436: u8 [a0 + 5] = 0\n 62439: u8 [a0 + 4] = 0\n 62442: u8 [a0 + 3] = 0\n 62445: u8 [a0 + 2] = 0\n 62448: u8 [a0 + 1] = 0\n 62451: u8 [a0 + 0] = 0\n 62453: jump @811 if a1 != 0\n      : @802 (gas: 4)\n 62457: u64 [sp + 0x40] = s0\n 62460: i32 a0 = s0 + 0\n 62462: a1 = 0x20\n 62465: ra = 722, jump @0\n      : @803 [@dyn 361] (gas: 80)\n 62472: t1 = u64 [sp + 0x80]\n 62476: a1 = reverse t1\n 62478: a2 = a1 >> 0x38\n 62481: u8 [a0 + 0x1f] = a2\n 62484: a2 = a1 >> 0x30\n 62487: u8 [a0 + 0x1e] = a2\n 62490: a2 = a1 >> 0x28\n 62493: u8 [a0 + 0x1d] = a2\n 62496: a2 = a1 >> 0x20\n 62499: u8 [a0 + 0x1c] = a2\n 62502: a2 = a1 >> 0x18\n 62505: u8 [a0 + 0x1b] = a2\n 62508: a2 = a1 >> 0x10\n 62511: u8 [a0 + 0x1a] = a2\n 62514: a2 = a1 >> 0x8\n 62517: u8 [a0 + 0x19] = a2\n 62520: t0 = u64 [sp + 0x58]\n 62523: a2 = reverse t0\n 62525: u8 [a0 + 0x18] = a1\n 62528: a1 = a2 >> 0x38\n 62531: u8 [a0 + 0x17] = a1\n 62534: a1 = a2 >> 0x30\n 62537: u8 [a0 + 0x16] = a1\n 62540: a1 = a2 >> 0x28\n 62543: u8 [a0 + 0x15] = a1\n 62546: a1 = a2 >> 0x20\n 62549: u8 [a0 + 0x14] = a1\n 62552: a1 = a2 >> 0x18\n 62555: u8 [a0 + 0x13] = a1\n 62558: a1 = a2 >> 0x10\n 62561: u8 [a0 + 0x12] = a1\n 62564: s0 = u64 [sp + 0x60]\n 62567: a3 = reverse s0\n 62569: u8 [a0 + 0x10] = a2\n 62572: a2 = a2 >> 0x8\n 62575: u8 [a0 + 0x11] = a2\n 62578: a1 = a3 >> 0x38\n 62581: u8 [a0 + 0xf] = a1\n 62584: a1 = a3 >> 0x30\n 62587: u8 [a0 + 0xe] = a1\n 62590: a1 = a3 >> 0x28\n 62593: u8 [a0 + 0xd] = a1\n 62596: a1 = a3 >> 0x20\n 62599: u8 [a0 + 0xc] = a1\n 62602: a1 = a3 >> 0x18\n 62605: u8 [a0 + 0xb] = a1\n 62608: a1 = a3 >> 0x10\n 62611: u8 [a0 + 0xa] = a1\n 62614: a5 = u64 [sp + 0x68]\n 62617: a1 = reverse a5\n 62619: u8 [a0 + 0x8] = a3\n 62622: a3 = a3 >> 0x8\n 62625: u8 [a0 + 0x9] = a3\n 62628: a2 = a1 >> 0x38\n 62631: u8 [a0 + 0x7] = a2\n 62634: a2 = a1 >> 0x30\n 62637: u8 [a0 + 0x6] = a2\n 62640: a2 = a1 >> 0x28\n 62643: u8 [a0 + 0x5] = a2\n 62646: a2 = a1 >> 0x20\n 62649: u8 [a0 + 0x4] = a2\n 62652: a2 = a1 >> 0x18\n 62655: u8 [a0 + 0x3] = a2\n 62658: a2 = a1 >> 0x10\n 62661: u8 [a0 + 0x2] = a2\n 62664: a2 = u64 [sp + 0x10]\n 62667: a4 = u64 [sp + 0x8]\n 62670: a4 = a4 | a2\n 62673: t2 = u64 [sp + 0x20]\n 62676: a2 = u64 [sp + 0x18]\n 62679: a3 = t2 | a2\n 62682: a3 = a3 | a4\n 62685: a2 = a2 | a4\n 62688: a3 = a3 >> 0x20\n 62691: a2 = a2 << 0x20\n 62694: a2 = a2 | a3\n 62697: u8 [a0] = a1\n 62699: a1 = a1 >> 0x8\n 62702: u8 [a0 + 0x1] = a1\n 62705: jump @811 if a2 != 0\n      : @804 (gas: 9)\n 62709: a0 = t1 | s0\n 62712: a1 = t0 | a5\n 62715: a0 = a0 | a1\n 62718: a0 = a0 >> 0x20\n 62721: a1 = a1 | s0\n 62724: a1 = a1 << 0x20\n 62727: a0 = a0 | a1\n 62730: a5 = u64 [sp + 0x70]\n 62733: jump @811 if a0 != 0\n      : @805 (gas: 12)\n 62737: a0 = u64 [sp + 0x78]\n 62740: a1 = u64 [sp + 0x48]\n 62743: a0 = a0 | a1\n 62746: a1 = 0xffffffe0\n 62756: a2 = u64 [sp + 0x40]\n 62759: a1 = a2 <u a1\n 62762: a2 = u64 [sp + 0x50]\n 62765: a1 = 0 if a2 != 0\n 62767: a1 = 0 if a0 != 0\n 62769: a2 = u64 [sp + 0x98]\n 62773: a3 = u64 [sp + 0x90]\n 62777: jump @811 if a1 == 0\n      : @806 (gas: 18)\n 62781: s1 = a5 + 0x80\n 62785: a0 = s1 <u a5\n 62788: a1 = u64 [sp + 0x88]\n 62792: a4 = a1 + a0\n 62795: u64 [sp + 0x78] = a4\n 62798: a1 = a4 <u a1\n 62801: a1 = a0 if a0 == 0\n 62804: a1 = a1 + a3\n 62807: u64 [sp + 0x88] = a1\n 62811: a0 = a1 <u a3\n 62814: a0 = a0 + a2\n 62817: u64 [sp + 0x98] = a0\n 62821: i32 t2 = t2 + 0\n 62823: u64 [sp + 0x90] = t2\n 62827: i32 a0 = s1 + 0\n 62829: i32 s0 = t1 + 0\n 62831: a1 = s0\n 62833: ra = 724, jump @0\n      : @807 [@dyn 362] (gas: 6)\n 62840: i32 a0 = a0 + 0\n 62842: a1 = s0\n 62844: s0 = u64 [sp + 0x78]\n 62847: a2 = u64 [sp + 0x90]\n 62851: ecalli 1 // 'call_data_copy'\n 62853: fallthrough\n      : @808 (gas: 29)\n 62854: a0 = u64 [sp + 0x80]\n 62858: a0 = a0 + s1\n 62861: u64 [sp + 0x90] = s1\n 62865: a1 = a0 <u s1\n 62868: a2 = u64 [sp + 0x58]\n 62871: a2 = a2 + s0\n 62874: a2 = a2 + a1\n 62877: a3 = a2 ^ s0\n 62880: a4 = a2 <u s0\n 62883: s0 = u64 [sp + 0x98]\n 62887: a4 = a1 if a3 == 0\n 62890: a1 = u64 [sp + 0x60]\n 62893: a5 = u64 [sp + 0x88]\n 62897: a1 = a1 + a5\n 62900: a4 = a4 + a1\n 62903: a3 = a4 <u a1\n 62906: a1 = a1 <u a5\n 62909: a5 = u64 [sp + 0x68]\n 62912: a5 = a5 + s0\n 62915: a1 = a1 + a5\n 62918: a1 = a1 + a3\n 62921: a3 = a0 | a4\n 62924: a1 = a1 | a2\n 62927: a3 = a3 | a1\n 62930: a3 = a3 >> 0x20\n 62933: a1 = a1 | a4\n 62936: a1 = a1 << 0x20\n 62939: a1 = a1 | a3\n 62942: jump @811 if a1 != 0\n      : @809 (gas: 3)\n 62946: i32 a0 = a0 + 0\n 62948: a1 = 0x20\n 62951: ra = 726, jump @0\n      : @810 [@dyn 363] (gas: 56)\n 62958: u8 [a0 + 31] = 0\n 62961: u8 [a0 + 30] = 0\n 62964: u8 [a0 + 29] = 0\n 62967: u8 [a0 + 28] = 0\n 62970: u8 [a0 + 27] = 0\n 62973: u8 [a0 + 26] = 0\n 62976: u8 [a0 + 25] = 0\n 62979: u8 [a0 + 24] = 0\n 62982: u8 [a0 + 23] = 0\n 62985: u8 [a0 + 22] = 0\n 62988: u8 [a0 + 21] = 0\n 62991: u8 [a0 + 20] = 0\n 62994: u8 [a0 + 19] = 0\n 62997: u8 [a0 + 18] = 0\n 63000: u8 [a0 + 17] = 0\n 63003: u8 [a0 + 16] = 0\n 63006: u8 [a0 + 15] = 0\n 63009: u8 [a0 + 14] = 0\n 63012: u8 [a0 + 13] = 0\n 63015: u8 [a0 + 12] = 0\n 63018: u8 [a0 + 11] = 0\n 63021: u8 [a0 + 10] = 0\n 63024: u8 [a0 + 9] = 0\n 63027: u8 [a0 + 8] = 0\n 63030: u8 [a0 + 7] = 0\n 63033: u8 [a0 + 6] = 0\n 63036: u8 [a0 + 5] = 0\n 63039: u8 [a0 + 4] = 0\n 63042: u8 [a0 + 3] = 0\n 63045: u8 [a0 + 2] = 0\n 63048: u8 [a0 + 1] = 0\n 63051: u8 [a0 + 0] = 0\n 63053: a0 = u64 [sp + 0x80]\n 63057: a0 = a0 + 0x1f\n 63060: a1 = 0x1ffffffe0\n 63070: a0 = a0 & a1\n 63073: a1 = u64 [sp + 0x90]\n 63077: a1 = a1 + a0\n 63080: a0 = a1 <u a0\n 63083: a2 = u64 [sp + 0x78]\n 63086: a2 = a2 + a0\n 63089: a0 = 0 if a2 != 0\n 63091: a3 = u64 [sp + 0x88]\n 63095: a0 = a0 + a3\n 63098: a3 = a0 <u a3\n 63101: a3 = a3 + s0\n 63104: a4 = u64 [sp]\n 63106: u64 [a4] = a1\n 63108: u64 [a4 + 0x8] = a2\n 63111: u64 [a4 + 0x10] = a0\n 63114: u64 [a4 + 0x18] = a3\n 63117: ra = u64 [sp + 0xb0]\n 63121: s0 = u64 [sp + 0xa8]\n 63125: s1 = u64 [sp + 0xa0]\n 63129: sp = sp + 0xb8\n 63133: ret\n      : @811 (gas: 1)\n 63135: trap\n      : @812 (gas: 19)\n 63136: sp = sp + 0xfffffffffffffb20\n 63140: u64 [sp + 0x4d8] = ra\n 63144: u64 [sp + 0x4d0] = s0\n 63148: u64 [sp + 0x4c8] = s1\n 63152: s0 = sp + 0x4e0\n 63156: sp = sp & 0xffffffffffffffe0\n 63159: s1 = sp\n 63161: t0 = u64 [a1 + 0x10]\n 63164: t1 = u64 [a1 + 0x18]\n 63167: a4 = u64 [a1 + 0x8]\n 63170: a5 = u64 [a1]\n 63172: u64 [s1 + 0xf0] = a4\n 63176: u64 [s1 + 0xe8] = t1\n 63180: a1 = a4 | t1\n 63183: u64 [s1 + 0x100] = t0\n 63187: u64 [s1 + 0xf8] = a5\n 63191: a4 = a5 | t0\n 63194: a1 = a1 | a4\n 63197: jump @845 if a1 == 0\n      : @813 (gas: 13)\n 63201: u64 [s1 + 0x38] = a0\n 63204: a4 = u64 [a3 + 0x18]\n 63207: a1 = u64 [a3 + 0x10]\n 63210: a0 = u64 [a3]\n 63212: a3 = u64 [a3 + 0x8]\n 63215: u64 [s1 + 0xd8] = a0\n 63219: u64 [s1 + 0xd0] = a1\n 63223: a0 = a0 | a1\n 63226: u64 [s1 + 0xc8] = a4\n 63230: u64 [s1 + 0xc0] = a3\n 63234: a1 = a3 | a4\n 63237: a0 = a0 | a1\n 63240: jump @815 if a0 != 0\n      : @814 (gas: 1)\n 63243: jump @850\n      : @815 (gas: 19)\n 63246: a0 = u64 [a2 + 0x18]\n 63249: u64 [s1 + 0xa0] = a0\n 63253: a0 = u64 [a2 + 0x10]\n 63256: u64 [s1 + 0xa8] = a0\n 63260: a0 = u64 [a2 + 0x8]\n 63263: u64 [s1 + 0xb0] = a0\n 63267: a0 = u64 [a2]\n 63269: u64 [s1 + 0xb8] = a0\n 63273: a0 = sp + 0xffffffffffffffe0\n 63276: a0 = a0 & 0xffffffffffffffe0\n 63279: u64 [s1 + 0x118] = a0\n 63283: sp = a0\n 63285: u64 [a0 + 24] = 0\n 63288: u64 [a0 + 16] = 0\n 63291: u64 [a0 + 8] = 0\n 63294: u64 [a0 + 0] = 0\n 63296: i32 a0 = a0 + 0\n 63298: ecalli 15 // 'value_transferred'\n 63300: fallthrough\n      : @816 (gas: 21)\n 63301: a1 = u64 [s1 + 0x118]\n 63305: a0 = u64 [a1 + 0x18]\n 63308: t0 = u64 [a1]\n 63310: a2 = u64 [a1 + 0x10]\n 63313: a3 = u64 [a1 + 0x8]\n 63316: a1 = u64 [s1 + 0xe8]\n 63320: a4 = a0 ^ a1\n 63323: a1 = a0 <u a1\n 63326: a0 = u64 [s1 + 0x100]\n 63330: a5 = a2 <u a0\n 63333: a5 = a1 if a4 != 0\n 63336: a1 = u64 [s1 + 0xf0]\n 63340: t1 = a3 ^ a1\n 63343: a3 = a3 <u a1\n 63346: a1 = u64 [s1 + 0xf8]\n 63350: a1 = t0 <u a1\n 63353: a1 = a3 if t1 != 0\n 63356: a0 = a0 ^ a2\n 63359: a0 = a0 | a4\n 63362: a1 = a5 if a0 != 0\n 63365: jump @818 if a1 == 0\n      : @817 (gas: 1)\n 63368: jump @855\n      : @818 (gas: 16)\n 63371: u64 [s1 + 1112] = 0\n 63375: u64 [s1 + 1104] = 0\n 63379: u64 [s1 + 1096] = 0\n 63383: u64 [s1 + 1088] = 0\n 63387: u64 [s1 + 1144] = 0\n 63391: u64 [s1 + 1136] = 0\n 63395: u64 [s1 + 1128] = 0\n 63399: u64 [s1 + 1120] = 0\n 63403: u32 [s1 + 1056] = 0x20\n 63408: i32 a1 = s1 + 0x440\n 63412: i32 a3 = s1 + 0x460\n 63416: i32 a4 = s1 + 0x420\n 63420: a2 = 0xffffffffffffffff\n 63423: a0 = 0\n 63425: ecalli 7 // 'get_storage'\n 63427: fallthrough\n      : @819 (gas: 24)\n 63428: a0 = u64 [s1 + 0x460]\n 63432: a2 = u64 [s1 + 0x478]\n 63436: a1 = u64 [s1 + 0x468]\n 63440: a3 = u64 [s1 + 0x470]\n 63444: u64 [s1 + 0x88] = a0\n 63448: a4 = a0 + 0x1\n 63451: a0 = a4 <u 0x1\n 63454: u64 [s1 + 0x80] = a1\n 63458: a1 = a1 + a0\n 63461: a0 = a4 | a1\n 63464: a0 = a0 <u 0x1\n 63467: a5 = a3 + a0\n 63470: u64 [s1 + 0x70] = a3\n 63473: a0 = a5 <u a3\n 63476: u64 [s1 + 0x78] = a2\n 63479: a0 = a0 + a2\n 63482: u64 [s1 + 0x110] = a1\n 63486: u64 [s1 + 0xe0] = a0\n 63490: a0 = a0 | a1\n 63493: u64 [s1 + 0x118] = a4\n 63497: u64 [s1 + 0x108] = a5\n 63501: a1 = a4 | a5\n 63504: a0 = a0 | a1\n 63507: jump @821 if a0 != 0\n      : @820 (gas: 1)\n 63510: jump @862\n      : @821 (gas: 67)\n 63513: u64 [s1 + 1112] = 0\n 63517: u64 [s1 + 1104] = 0\n 63521: u64 [s1 + 1096] = 0\n 63525: u64 [s1 + 1088] = 0\n 63529: u64 [s1 + 1144] = 0\n 63533: u64 [s1 + 1136] = 0\n 63537: u64 [s1 + 1128] = 0\n 63541: u64 [s1 + 1120] = 0\n 63545: u32 [s1 + 1056] = 0x20\n 63550: i32 a1 = s1 + 0x440\n 63554: i32 a3 = s1 + 0x460\n 63558: i32 a4 = s1 + 0x420\n 63562: a2 = 0xffffffffffffffff\n 63565: a0 = 0\n 63567: ecalli 7 // 'get_storage'\n 63569: u64 [s1 + 1112] = 0\n 63573: u64 [s1 + 1104] = 0\n 63577: u64 [s1 + 1096] = 0\n 63581: u64 [s1 + 1088] = 0\n 63585: a0 = u64 [s1 + 0xe0]\n 63589: u64 [s1 + 0x478] = a0\n 63593: a0 = u64 [s1 + 0x108]\n 63597: u64 [s1 + 0x470] = a0\n 63601: a0 = u64 [s1 + 0x110]\n 63605: u64 [s1 + 0x468] = a0\n 63609: a0 = u64 [s1 + 0x118]\n 63613: u64 [s1 + 0x460] = a0\n 63617: i32 a1 = s1 + 0x440\n 63621: i32 a3 = s1 + 0x460\n 63625: a2 = 0xffffffffffffffff\n 63628: a4 = 0x20\n 63631: a0 = 0\n 63633: ecalli 14 // 'set_storage'\n 63635: i32 a0 = s1 + 0x3e0\n 63639: ecalli 4 // 'caller'\n 63641: a0 = u32 [s1 + 0x3f0]\n 63645: u64 [s1 + 0x108] = a0\n 63649: a0 = u64 [s1 + 0x3e8]\n 63653: u64 [s1 + 0x68] = a0\n 63656: a0 = u64 [s1 + 0x3e0]\n 63660: u64 [s1 + 0xe0] = a0\n 63664: a0 = sp + 0xffffffffffffffe0\n 63667: a0 = a0 & 0xffffffffffffffe0\n 63670: u64 [s1 + 0x118] = a0\n 63674: sp = a0\n 63676: u64 [a0 + 24] = 0\n 63679: u64 [a0 + 16] = 0\n 63682: u64 [a0 + 8] = 0\n 63685: u64 [a0 + 0] = 0\n 63687: i32 a0 = a0 + 0\n 63689: ecalli 15 // 'value_transferred'\n 63691: a1 = u64 [s1 + 0x118]\n 63695: a0 = u64 [a1 + 0x18]\n 63698: u64 [s1 + 0x40] = a0\n 63701: a0 = u64 [a1 + 0x10]\n 63704: u64 [s1 + 0x48] = a0\n 63707: a0 = u64 [a1 + 0x8]\n 63710: u64 [s1 + 0x50] = a0\n 63713: a0 = u64 [a1]\n 63715: u64 [s1 + 0x58] = a0\n 63718: u64 [s1 + 952] = 0\n 63722: u64 [s1 + 944] = 0\n 63726: u64 [s1 + 928] = 0xa0\n 63732: a0 = s1 + 0x3c0\n 63736: a1 = s1 + 0x3a0\n 63740: u64 [s1 + 936] = 0\n 63744: ra = 728, jump @78\n      : @822 [@dyn 364] (gas: 16)\n 63751: a2 = u64 [s1 + 0x3d8]\n 63755: a3 = u64 [s1 + 0x3d0]\n 63759: a0 = u64 [s1 + 0x3c8]\n 63763: a1 = u64 [s1 + 0x3c0]\n 63767: u64 [s1 + 0x110] = a0\n 63771: u64 [s1 + 0x90] = a2\n 63775: a0 = a0 | a2\n 63778: u64 [s1 + 0x118] = a1\n 63782: a1 = a1 | a3\n 63785: a1 = a1 | a0\n 63788: a1 = a1 >> 0x20\n 63791: u64 [s1 + 0x98] = a3\n 63795: a0 = a0 | a3\n 63798: a0 = a0 << 0x20\n 63801: a0 = a0 | a1\n 63804: jump @824 if a0 == 0\n      : @823 (gas: 1)\n 63807: jump @861\n      : @824 (gas: 18)\n 63810: a0 = u64 [s1 + 0xe0]\n 63814: a0 = reverse a0\n 63816: a0 = a0 << 0x20\n 63819: a1 = u64 [s1 + 0x68]\n 63822: a1 = reverse a1\n 63824: a2 = a1 >> 0x20\n 63827: a0 = a0 | a2\n 63830: u64 [s1 + 0x68] = a0\n 63833: a1 = a1 << 0x20\n 63836: a0 = u64 [s1 + 0x108]\n 63840: a0 = reverse a0\n 63842: a0 = a0 >> 0x20\n 63845: a0 = a0 | a1\n 63848: u64 [s1 + 0x60] = a0\n 63851: a0 = i32 [s1 + 0x118]\n 63855: a1 = 0x20\n 63858: u64 [s1 + 0x108] = a0\n 63862: ra = 730, jump @0\n      : @825 [@dyn 365] (gas: 67)\n 63869: a1 = u64 [s1 + 0x60]\n 63872: a1 = reverse a1\n 63874: a2 = u64 [s1 + 0x68]\n 63877: a2 = reverse a2\n 63879: a4 = u64 [s1 + 0xe0]\n 63883: a3 = a4 >> 0x18\n 63886: u8 [a0 + 0xf] = a3\n 63889: a3 = a4 >> 0x10\n 63892: u8 [a0 + 0xe] = a3\n 63895: a3 = a4 >> 0x8\n 63898: u8 [a0 + 0xd] = a3\n 63901: u8 [a0 + 0xc] = a4\n 63904: u8 [a0 + 11] = 0\n 63907: u8 [a0 + 10] = 0\n 63910: u8 [a0 + 9] = 0\n 63913: u8 [a0 + 8] = 0\n 63916: u8 [a0 + 7] = 0\n 63919: u8 [a0 + 6] = 0\n 63922: u8 [a0 + 5] = 0\n 63925: u8 [a0 + 4] = 0\n 63928: u8 [a0 + 3] = 0\n 63931: u8 [a0 + 2] = 0\n 63934: u8 [a0 + 1] = 0\n 63937: u8 [a0 + 0] = 0\n 63939: u8 [a0 + 0x10] = a2\n 63942: u8 [a0 + 0x18] = a1\n 63945: a3 = a2 >> 0x38\n 63948: u8 [a0 + 0x17] = a3\n 63951: a3 = a2 >> 0x30\n 63954: u8 [a0 + 0x16] = a3\n 63957: a3 = a2 >> 0x28\n 63960: u8 [a0 + 0x15] = a3\n 63963: a3 = a2 >> 0x20\n 63966: u8 [a0 + 0x14] = a3\n 63969: a3 = a2 >> 0x18\n 63972: u8 [a0 + 0x13] = a3\n 63975: a3 = a2 >> 0x10\n 63978: u8 [a0 + 0x12] = a3\n 63981: a2 = a2 >> 0x8\n 63984: u8 [a0 + 0x11] = a2\n 63987: a2 = a1 >> 0x38\n 63990: u8 [a0 + 0x1f] = a2\n 63993: a2 = a1 >> 0x30\n 63996: u8 [a0 + 0x1e] = a2\n 63999: a2 = a1 >> 0x28\n 64002: u8 [a0 + 0x1d] = a2\n 64005: a2 = a1 >> 0x20\n 64008: u8 [a0 + 0x1c] = a2\n 64011: a2 = a1 >> 0x18\n 64014: u8 [a0 + 0x1b] = a2\n 64017: a2 = a1 >> 0x10\n 64020: u8 [a0 + 0x1a] = a2\n 64023: a1 = a1 >> 0x8\n 64026: a2 = u64 [s1 + 0x90]\n 64030: a4 = u64 [s1 + 0x98]\n 64034: a4 = a4 | a2\n 64037: a2 = 0x100000000\n 64047: u64 [s1 + 0x68] = a2\n 64050: a2 = 0xffffffe0\n 64060: a3 = u64 [s1 + 0x118]\n 64064: a2 = a3 <u a2\n 64067: a3 = u64 [s1 + 0x110]\n 64071: a2 = 0 if a3 != 0\n 64073: u64 [s1 + 0xe0] = a4\n 64077: a2 = 0 if a4 != 0\n 64079: u8 [a0 + 0x19] = a1\n 64082: jump @827 if a2 != 0\n      : @826 (gas: 1)\n 64085: jump @861\n      : @827 (gas: 4)\n 64088: a0 = u64 [s1 + 0x108]\n 64092: i32 a0 = a0 + 0x20\n 64095: a1 = 0x20\n 64098: ra = 732, jump @0\n      : @828 [@dyn 366] (gas: 94)\n 64105: a1 = u64 [s1 + 0xe8]\n 64109: a1 = reverse a1\n 64111: a2 = u64 [s1 + 0x100]\n 64115: a2 = reverse a2\n 64117: a3 = u64 [s1 + 0xf0]\n 64121: a3 = reverse a3\n 64123: a4 = u64 [s1 + 0xf8]\n 64127: a4 = reverse a4\n 64129: a5 = a4 >> 0x38\n 64132: u8 [a0 + 0x1f] = a5\n 64135: a5 = a4 >> 0x30\n 64138: u8 [a0 + 0x1e] = a5\n 64141: a5 = a4 >> 0x28\n 64144: u8 [a0 + 0x1d] = a5\n 64147: a5 = a4 >> 0x20\n 64150: u8 [a0 + 0x1c] = a5\n 64153: a5 = a4 >> 0x18\n 64156: u8 [a0 + 0x1b] = a5\n 64159: a5 = a4 >> 0x10\n 64162: u8 [a0 + 0x1a] = a5\n 64165: a5 = a4 >> 0x8\n 64168: u8 [a0 + 0x19] = a5\n 64171: u8 [a0 + 0x18] = a4\n 64174: u8 [a0 + 0x10] = a3\n 64177: a4 = a3 >> 0x38\n 64180: u8 [a0 + 0x17] = a4\n 64183: a4 = a3 >> 0x30\n 64186: u8 [a0 + 0x16] = a4\n 64189: a4 = a3 >> 0x28\n 64192: u8 [a0 + 0x15] = a4\n 64195: a4 = a3 >> 0x20\n 64198: u8 [a0 + 0x14] = a4\n 64201: a4 = a3 >> 0x18\n 64204: u8 [a0 + 0x13] = a4\n 64207: a4 = a3 >> 0x10\n 64210: u8 [a0 + 0x12] = a4\n 64213: a3 = a3 >> 0x8\n 64216: u8 [a0 + 0x11] = a3\n 64219: u8 [a0 + 0x8] = a2\n 64222: a3 = a2 >> 0x38\n 64225: u8 [a0 + 0xf] = a3\n 64228: a3 = a2 >> 0x30\n 64231: u8 [a0 + 0xe] = a3\n 64234: a3 = a2 >> 0x28\n 64237: u8 [a0 + 0xd] = a3\n 64240: a3 = a2 >> 0x20\n 64243: u8 [a0 + 0xc] = a3\n 64246: a3 = a2 >> 0x18\n 64249: u8 [a0 + 0xb] = a3\n 64252: a3 = a2 >> 0x10\n 64255: u8 [a0 + 0xa] = a3\n 64258: a2 = a2 >> 0x8\n 64261: u8 [a0 + 0x9] = a2\n 64264: u8 [a0] = a1\n 64266: a2 = a1 >> 0x38\n 64269: u8 [a0 + 0x7] = a2\n 64272: a2 = a1 >> 0x30\n 64275: u8 [a0 + 0x6] = a2\n 64278: a2 = a1 >> 0x28\n 64281: a3 = a1 >> 0x18\n 64284: u8 [a0 + 0x3] = a3\n 64287: a3 = a1 >> 0x10\n 64290: u8 [a0 + 0x2] = a3\n 64293: a3 = a1 >> 0x8\n 64296: u8 [a0 + 0x1] = a3\n 64299: a3 = u32 [0x200a8]\n 64304: u8 [a0 + 0x5] = a2\n 64307: a1 = a1 >> 0x20\n 64310: u8 [a0 + 0x4] = a1\n 64313: u64 [s1 + 824] = 0\n 64317: u64 [s1 + 816] = 0\n 64321: u64 [s1 + 808] = 0\n 64325: u64 [s1 + 0x320] = a3\n 64329: a0 = u64 [s1 + 0xc8]\n 64333: u64 [s1 + 0x358] = a0\n 64337: a0 = u64 [s1 + 0xd0]\n 64341: u64 [s1 + 0x350] = a0\n 64345: a0 = u64 [s1 + 0xc0]\n 64349: u64 [s1 + 0x348] = a0\n 64353: a0 = u64 [s1 + 0xd8]\n 64357: u64 [s1 + 0x340] = a0\n 64361: a0 = u64 [s1 + 0xa0]\n 64365: u64 [s1 + 0x378] = a0\n 64369: a0 = u64 [s1 + 0xa8]\n 64373: u64 [s1 + 0x370] = a0\n 64377: a0 = u64 [s1 + 0xb0]\n 64381: u64 [s1 + 0x368] = a0\n 64385: a0 = s1 + 0x380\n 64389: a1 = s1 + 0x360\n 64393: a2 = s1 + 0x340\n 64397: a3 = s1 + 0x320\n 64401: a4 = u64 [s1 + 0xb8]\n 64405: u64 [s1 + 0x360] = a4\n 64409: ra = 734, jump @709\n      : @829 [@dyn 367] (gas: 9)\n 64415: a0 = u64 [s1 + 0x68]\n 64418: a0 = a0 + 0xffffffffffffffc0\n 64421: a1 = u64 [s1 + 0x118]\n 64425: a0 = a1 <u a0\n 64428: a1 = u64 [s1 + 0x110]\n 64432: a0 = 0 if a1 != 0\n 64434: a1 = u64 [s1 + 0xe0]\n 64438: a0 = 0 if a1 != 0\n 64440: jump @861 if a0 == 0\n      : @830 (gas: 12)\n 64444: a0 = u64 [s1 + 0x398]\n 64448: u64 [s1 + 0x28] = a0\n 64451: a0 = u64 [s1 + 0x390]\n 64455: u64 [s1 + 0x30] = a0\n 64458: a0 = u64 [s1 + 0x388]\n 64462: u64 [s1 + 0x60] = a0\n 64465: a0 = u64 [s1 + 0x380]\n 64469: u64 [s1 + 0x68] = a0\n 64472: a0 = u64 [s1 + 0x108]\n 64476: i32 a0 = a0 + 0x40\n 64479: a1 = 0x20\n 64482: ra = 736, jump @0\n      : @831 [@dyn 368] (gas: 78)\n 64489: a1 = u64 [s1 + 0x28]\n 64492: a1 = reverse a1\n 64494: a2 = u64 [s1 + 0x30]\n 64497: a2 = reverse a2\n 64499: a3 = u64 [s1 + 0x60]\n 64502: a3 = reverse a3\n 64504: a4 = u64 [s1 + 0x68]\n 64507: a4 = reverse a4\n 64509: a5 = a4 >> 0x38\n 64512: u8 [a0 + 0x1f] = a5\n 64515: a5 = a4 >> 0x30\n 64518: u8 [a0 + 0x1e] = a5\n 64521: a5 = a4 >> 0x28\n 64524: u8 [a0 + 0x1d] = a5\n 64527: a5 = a4 >> 0x20\n 64530: u8 [a0 + 0x1c] = a5\n 64533: a5 = a4 >> 0x18\n 64536: u8 [a0 + 0x1b] = a5\n 64539: a5 = a4 >> 0x10\n 64542: u8 [a0 + 0x1a] = a5\n 64545: a5 = a4 >> 0x8\n 64548: u8 [a0 + 0x19] = a5\n 64551: u8 [a0 + 0x18] = a4\n 64554: u8 [a0 + 0x10] = a3\n 64557: a4 = a3 >> 0x38\n 64560: u8 [a0 + 0x17] = a4\n 64563: a4 = a3 >> 0x30\n 64566: u8 [a0 + 0x16] = a4\n 64569: a4 = a3 >> 0x28\n 64572: u8 [a0 + 0x15] = a4\n 64575: a4 = a3 >> 0x20\n 64578: u8 [a0 + 0x14] = a4\n 64581: a4 = a3 >> 0x18\n 64584: u8 [a0 + 0x13] = a4\n 64587: a4 = a3 >> 0x10\n 64590: u8 [a0 + 0x12] = a4\n 64593: a3 = a3 >> 0x8\n 64596: u8 [a0 + 0x11] = a3\n 64599: u8 [a0 + 0x8] = a2\n 64602: a3 = a2 >> 0x38\n 64605: u8 [a0 + 0xf] = a3\n 64608: a3 = a2 >> 0x30\n 64611: u8 [a0 + 0xe] = a3\n 64614: a3 = a2 >> 0x28\n 64617: u8 [a0 + 0xd] = a3\n 64620: a3 = a2 >> 0x20\n 64623: u8 [a0 + 0xc] = a3\n 64626: a3 = a2 >> 0x18\n 64629: u8 [a0 + 0xb] = a3\n 64632: a3 = a2 >> 0x10\n 64635: u8 [a0 + 0xa] = a3\n 64638: a2 = a2 >> 0x8\n 64641: u8 [a0 + 0x9] = a2\n 64644: u8 [a0] = a1\n 64646: a2 = a1 >> 0x38\n 64649: u8 [a0 + 0x7] = a2\n 64652: a2 = a1 >> 0x30\n 64655: u8 [a0 + 0x6] = a2\n 64658: a2 = a1 >> 0x28\n 64661: u8 [a0 + 0x5] = a2\n 64664: a2 = a1 >> 0x20\n 64667: u8 [a0 + 0x4] = a2\n 64670: a2 = a1 >> 0x18\n 64673: u8 [a0 + 0x3] = a2\n 64676: a2 = a1 >> 0x10\n 64679: u8 [a0 + 0x2] = a2\n 64682: a1 = a1 >> 0x8\n 64685: a2 = 0x100000000\n 64695: u64 [s1 + 0x68] = a2\n 64698: a2 = 0xffffffa0\n 64708: a3 = u64 [s1 + 0x118]\n 64712: a2 = a3 <u a2\n 64715: a3 = u64 [s1 + 0x110]\n 64719: a2 = 0 if a3 != 0\n 64721: a3 = u64 [s1 + 0xe0]\n 64725: a2 = 0 if a3 != 0\n 64727: u8 [a0 + 0x1] = a1\n 64730: jump @861 if a2 == 0\n      : @832 (gas: 4)\n 64734: a0 = u64 [s1 + 0x108]\n 64738: i32 a0 = a0 + 0x60\n 64741: a1 = 0x20\n 64744: ra = 738, jump @0\n      : @833 [@dyn 369] (gas: 77)\n 64751: a1 = u64 [s1 + 0x40]\n 64754: a1 = reverse a1\n 64756: a2 = u64 [s1 + 0x48]\n 64759: a2 = reverse a2\n 64761: a3 = u64 [s1 + 0x50]\n 64764: a3 = reverse a3\n 64766: a4 = u64 [s1 + 0x58]\n 64769: a4 = reverse a4\n 64771: a5 = a4 >> 0x38\n 64774: u8 [a0 + 0x1f] = a5\n 64777: a5 = a4 >> 0x30\n 64780: u8 [a0 + 0x1e] = a5\n 64783: a5 = a4 >> 0x28\n 64786: u8 [a0 + 0x1d] = a5\n 64789: a5 = a4 >> 0x20\n 64792: u8 [a0 + 0x1c] = a5\n 64795: a5 = a4 >> 0x18\n 64798: u8 [a0 + 0x1b] = a5\n 64801: a5 = a4 >> 0x10\n 64804: u8 [a0 + 0x1a] = a5\n 64807: a5 = a4 >> 0x8\n 64810: u8 [a0 + 0x19] = a5\n 64813: u8 [a0 + 0x18] = a4\n 64816: u8 [a0 + 0x10] = a3\n 64819: a4 = a3 >> 0x38\n 64822: u8 [a0 + 0x17] = a4\n 64825: a4 = a3 >> 0x30\n 64828: u8 [a0 + 0x16] = a4\n 64831: a4 = a3 >> 0x28\n 64834: u8 [a0 + 0x15] = a4\n 64837: a4 = a3 >> 0x20\n 64840: u8 [a0 + 0x14] = a4\n 64843: a4 = a3 >> 0x18\n 64846: u8 [a0 + 0x13] = a4\n 64849: a4 = a3 >> 0x10\n 64852: u8 [a0 + 0x12] = a4\n 64855: a3 = a3 >> 0x8\n 64858: u8 [a0 + 0x11] = a3\n 64861: u8 [a0 + 0x8] = a2\n 64864: a3 = a2 >> 0x38\n 64867: u8 [a0 + 0xf] = a3\n 64870: a3 = a2 >> 0x30\n 64873: u8 [a0 + 0xe] = a3\n 64876: a3 = a2 >> 0x28\n 64879: u8 [a0 + 0xd] = a3\n 64882: a3 = a2 >> 0x20\n 64885: u8 [a0 + 0xc] = a3\n 64888: a3 = a2 >> 0x18\n 64891: u8 [a0 + 0xb] = a3\n 64894: a3 = a2 >> 0x10\n 64897: u8 [a0 + 0xa] = a3\n 64900: a2 = a2 >> 0x8\n 64903: u8 [a0 + 0x9] = a2\n 64906: u8 [a0] = a1\n 64908: a2 = a1 >> 0x38\n 64911: u8 [a0 + 0x7] = a2\n 64914: a2 = a1 >> 0x30\n 64917: u8 [a0 + 0x6] = a2\n 64920: a2 = a1 >> 0x28\n 64923: u8 [a0 + 0x5] = a2\n 64926: a2 = a1 >> 0x20\n 64929: u8 [a0 + 0x4] = a2\n 64932: a2 = a1 >> 0x18\n 64935: u8 [a0 + 0x3] = a2\n 64938: a2 = a1 >> 0x10\n 64941: u8 [a0 + 0x2] = a2\n 64944: a1 = a1 >> 0x8\n 64947: a2 = u64 [s1 + 0x68]\n 64950: a2 = a2 + 0xffffffffffffff80\n 64953: a3 = u64 [s1 + 0x118]\n 64957: a2 = a3 <u a2\n 64960: a3 = u64 [s1 + 0x110]\n 64964: a2 = 0 if a3 != 0\n 64966: a3 = u64 [s1 + 0xe0]\n 64970: a2 = 0 if a3 != 0\n 64972: u8 [a0 + 0x1] = a1\n 64975: jump @861 if a2 == 0\n      : @834 (gas: 4)\n 64979: a0 = u64 [s1 + 0x108]\n 64983: i32 a0 = a0 + 0x80\n 64987: a1 = 0x20\n 64990: ra = 740, jump @0\n      : @835 [@dyn 370] (gas: 35)\n 64997: u8 [a0 + 31] = 0x1\n 65001: u8 [a0 + 30] = 0\n 65004: u8 [a0 + 29] = 0\n 65007: u8 [a0 + 28] = 0\n 65010: u8 [a0 + 27] = 0\n 65013: u8 [a0 + 26] = 0\n 65016: u8 [a0 + 25] = 0\n 65019: u8 [a0 + 24] = 0\n 65022: u8 [a0 + 23] = 0\n 65025: u8 [a0 + 22] = 0\n 65028: u8 [a0 + 21] = 0\n 65031: u8 [a0 + 20] = 0\n 65034: u8 [a0 + 19] = 0\n 65037: u8 [a0 + 18] = 0\n 65040: u8 [a0 + 17] = 0\n 65043: u8 [a0 + 16] = 0\n 65046: u8 [a0 + 15] = 0\n 65049: u8 [a0 + 14] = 0\n 65052: u8 [a0 + 13] = 0\n 65055: u8 [a0 + 12] = 0\n 65058: u8 [a0 + 11] = 0\n 65061: u8 [a0 + 10] = 0\n 65064: u8 [a0 + 9] = 0\n 65067: u8 [a0 + 8] = 0\n 65070: u8 [a0 + 7] = 0\n 65073: u8 [a0 + 6] = 0\n 65076: u8 [a0 + 5] = 0\n 65079: u8 [a0 + 4] = 0\n 65082: u8 [a0 + 3] = 0\n 65085: u8 [a0 + 2] = 0\n 65088: u8 [a0 + 1] = 0\n 65091: u8 [a0 + 0] = 0\n 65093: a1 = 0x20\n 65096: a0 = 0\n 65098: ra = 742, jump @0\n      : @836 [@dyn 371] (gas: 75)\n 65105: a1 = u64 [s1 + 0x78]\n 65108: a2 = reverse a1\n 65110: a1 = u64 [s1 + 0x70]\n 65113: a3 = reverse a1\n 65115: a1 = u64 [s1 + 0x80]\n 65119: a5 = reverse a1\n 65121: a1 = u64 [s1 + 0x88]\n 65125: a4 = reverse a1\n 65127: a1 = a4 >> 0x38\n 65130: u8 [a0 + 0x1f] = a1\n 65133: a1 = a4 >> 0x30\n 65136: u8 [a0 + 0x1e] = a1\n 65139: a1 = a4 >> 0x28\n 65142: u8 [a0 + 0x1d] = a1\n 65145: a1 = a4 >> 0x20\n 65148: u8 [a0 + 0x1c] = a1\n 65151: a1 = a4 >> 0x18\n 65154: u8 [a0 + 0x1b] = a1\n 65157: a1 = a4 >> 0x10\n 65160: u8 [a0 + 0x1a] = a1\n 65163: a1 = a4 >> 0x8\n 65166: u8 [a0 + 0x19] = a1\n 65169: u64 [s1 + 0x40] = a4\n 65172: u8 [a0 + 0x18] = a4\n 65175: a1 = a5 >> 0x38\n 65178: u8 [a0 + 0x17] = a1\n 65181: a1 = a5 >> 0x30\n 65184: u8 [a0 + 0x16] = a1\n 65187: a1 = a5 >> 0x28\n 65190: u8 [a0 + 0x15] = a1\n 65193: a1 = a5 >> 0x20\n 65196: u8 [a0 + 0x14] = a1\n 65199: a1 = a5 >> 0x18\n 65202: u8 [a0 + 0x13] = a1\n 65205: a1 = a5 >> 0x10\n 65208: u8 [a0 + 0x12] = a1\n 65211: a1 = a5 >> 0x8\n 65214: u8 [a0 + 0x11] = a1\n 65217: u64 [s1 + 0x30] = a5\n 65220: u8 [a0 + 0x10] = a5\n 65223: a1 = a3 >> 0x38\n 65226: u8 [a0 + 0xf] = a1\n 65229: a1 = a3 >> 0x30\n 65232: u8 [a0 + 0xe] = a1\n 65235: a1 = a3 >> 0x28\n 65238: u8 [a0 + 0xd] = a1\n 65241: a1 = a3 >> 0x20\n 65244: u8 [a0 + 0xc] = a1\n 65247: a1 = a3 >> 0x18\n 65250: u8 [a0 + 0xb] = a1\n 65253: a1 = a3 >> 0x10\n 65256: u8 [a0 + 0xa] = a1\n 65259: a1 = a3 >> 0x8\n 65262: u8 [a0 + 0x9] = a1\n 65265: u64 [s1 + 0x48] = a3\n 65268: u8 [a0 + 0x8] = a3\n 65271: a1 = a2 >> 0x38\n 65274: u8 [a0 + 0x7] = a1\n 65277: a1 = a2 >> 0x30\n 65280: u8 [a0 + 0x6] = a1\n 65283: a1 = a2 >> 0x28\n 65286: u8 [a0 + 0x5] = a1\n 65289: a1 = a2 >> 0x20\n 65292: u8 [a0 + 0x4] = a1\n 65295: a1 = a2 >> 0x18\n 65298: u8 [a0 + 0x3] = a1\n 65301: a1 = a2 >> 0x10\n 65304: u8 [a0 + 0x2] = a1\n 65307: a1 = a2 >> 0x8\n 65310: u8 [a0 + 0x1] = a1\n 65313: u64 [s1 + 0x50] = a2\n 65316: u8 [a0] = a2\n 65318: a0 = 0x20\n 65321: a1 = 0x20\n 65324: ra = 744, jump @0\n      : @837 [@dyn 372] (gas: 35)\n 65331: u8 [a0 + 31] = 0x2\n 65335: u8 [a0 + 30] = 0\n 65338: u8 [a0 + 29] = 0\n 65341: u8 [a0 + 28] = 0\n 65344: u8 [a0 + 27] = 0\n 65347: u8 [a0 + 26] = 0\n 65350: u8 [a0 + 25] = 0\n 65353: u8 [a0 + 24] = 0\n 65356: u8 [a0 + 23] = 0\n 65359: u8 [a0 + 22] = 0\n 65362: u8 [a0 + 21] = 0\n 65365: u8 [a0 + 20] = 0\n 65368: u8 [a0 + 19] = 0\n 65371: u8 [a0 + 18] = 0\n 65374: u8 [a0 + 17] = 0\n 65377: u8 [a0 + 16] = 0\n 65380: u8 [a0 + 15] = 0\n 65383: u8 [a0 + 14] = 0\n 65386: u8 [a0 + 13] = 0\n 65389: u8 [a0 + 12] = 0\n 65392: u8 [a0 + 11] = 0\n 65395: u8 [a0 + 10] = 0\n 65398: u8 [a0 + 9] = 0\n 65401: u8 [a0 + 8] = 0\n 65404: u8 [a0 + 7] = 0\n 65407: u8 [a0 + 6] = 0\n 65410: u8 [a0 + 5] = 0\n 65413: u8 [a0 + 4] = 0\n 65416: u8 [a0 + 3] = 0\n 65419: u8 [a0 + 2] = 0\n 65422: u8 [a0 + 1] = 0\n 65425: u8 [a0 + 0] = 0\n 65427: a1 = 0x40\n 65430: a0 = 0\n 65432: ra = 746, jump @0\n      : @838 [@dyn 373] (gas: 27)\n 65439: i32 a0 = a0 + 0\n 65441: i32 a2 = s1 + 0x460\n 65445: a1 = 0x40\n 65448: ecalli 8 // 'hash_keccak_256'\n 65450: a0 = u64 [s1 + 0x478]\n 65454: a1 = u64 [s1 + 0x470]\n 65458: a2 = u64 [s1 + 0x468]\n 65462: a3 = u64 [s1 + 0x460]\n 65466: a4 = reverse a0\n 65468: a0 = reverse a1\n 65470: a1 = reverse a2\n 65472: a2 = reverse a3\n 65474: a3 = u64 [s1 + 0x90]\n 65478: u64 [s1 + 0x2f8] = a3\n 65482: a3 = u64 [s1 + 0x98]\n 65486: u64 [s1 + 0x2f0] = a3\n 65490: a3 = u64 [s1 + 0x110]\n 65494: u64 [s1 + 0x2e8] = a3\n 65498: a3 = u64 [s1 + 0x118]\n 65502: u64 [s1 + 0x2e0] = a3\n 65506: u64 [s1 + 0x318] = a2\n 65510: u64 [s1 + 0x310] = a1\n 65514: u64 [s1 + 0x308] = a0\n 65518: a0 = s1 + 0x300\n 65522: a1 = s1 + 0x2e0\n 65526: u64 [s1 + 0x300] = a4\n 65530: ra = 748, jump @779\n      : @839 [@dyn 374] (gas: 30)\n 65536: i32 a0 = s1 + 0x400\n 65540: ecalli 4 // 'caller'\n 65542: a0 = u32 [s1 + 0x410]\n 65546: u64 [s1 + 0x28] = a0\n 65549: a0 = u64 [s1 + 0x408]\n 65553: u64 [s1 + 0x20] = a0\n 65556: a0 = u64 [s1 + 0x400]\n 65560: u64 [s1 + 0x108] = a0\n 65564: a0 = sp + 0xffffffffffffffe0\n 65567: a0 = a0 & 0xffffffffffffffe0\n 65570: u64 [s1 + 0x118] = a0\n 65574: sp = a0\n 65576: u64 [a0 + 24] = 0\n 65579: u64 [a0 + 16] = 0\n 65582: u64 [a0 + 8] = 0\n 65585: u64 [a0 + 0] = 0\n 65587: i32 a0 = a0 + 0\n 65589: ecalli 15 // 'value_transferred'\n 65591: a1 = u64 [s1 + 0x118]\n 65595: a0 = u64 [a1]\n 65597: u64 [s1 + 0xe0] = a0\n 65601: a0 = u64 [a1 + 0x8]\n 65604: u64 [s1 + 0x98] = a0\n 65608: a0 = u64 [a1 + 0x10]\n 65611: u64 [s1 + 0x90] = a0\n 65615: a0 = u64 [a1 + 0x18]\n 65618: u64 [s1 + 0x68] = a0\n 65621: a0 = 0x40\n 65624: a1 = 0x20\n 65627: ra = 750, jump @0\n      : @840 [@dyn 375] (gas: 139)\n 65634: a1 = u8 [a0 + 0x1]\n 65637: a2 = u8 [a0]\n 65639: a3 = u8 [a0 + 0x2]\n 65642: a4 = u8 [a0 + 0x3]\n 65645: a1 = a1 << 0x8\n 65648: a1 = a1 | a2\n 65651: a3 = a3 << 0x10\n 65654: a4 = a4 << 0x18\n 65657: a3 = a3 | a4\n 65660: a1 = a1 | a3\n 65663: a2 = u8 [a0 + 0x5]\n 65666: a3 = u8 [a0 + 0x4]\n 65669: a4 = u8 [a0 + 0x6]\n 65672: a5 = u8 [a0 + 0x7]\n 65675: a2 = a2 << 0x8\n 65678: a2 = a2 | a3\n 65681: a4 = a4 << 0x10\n 65684: a5 = a5 << 0x18\n 65687: a4 = a4 | a5\n 65690: a2 = a2 | a4\n 65693: a2 = a2 << 0x20\n 65696: t0 = a2 | a1\n 65699: a2 = u8 [a0 + 0x9]\n 65702: a3 = u8 [a0 + 0x8]\n 65705: a4 = u8 [a0 + 0xa]\n 65708: a5 = u8 [a0 + 0xb]\n 65711: a2 = a2 << 0x8\n 65714: a2 = a2 | a3\n 65717: a4 = a4 << 0x10\n 65720: a5 = a5 << 0x18\n 65723: a4 = a4 | a5\n 65726: a2 = a2 | a4\n 65729: a3 = u8 [a0 + 0xd]\n 65732: a4 = u8 [a0 + 0xc]\n 65735: a5 = u8 [a0 + 0xe]\n 65738: a1 = u8 [a0 + 0xf]\n 65741: a3 = a3 << 0x8\n 65744: a3 = a3 | a4\n 65747: a5 = a5 << 0x10\n 65750: a1 = a1 << 0x18\n 65753: a1 = a1 | a5\n 65756: a1 = a1 | a3\n 65759: a1 = a1 << 0x20\n 65762: t1 = a1 | a2\n 65765: a1 = u8 [a0 + 0x11]\n 65768: a3 = u8 [a0 + 0x10]\n 65771: a4 = u8 [a0 + 0x12]\n 65774: a5 = u8 [a0 + 0x13]\n 65777: a1 = a1 << 0x8\n 65780: a1 = a1 | a3\n 65783: a4 = a4 << 0x10\n 65786: a5 = a5 << 0x18\n 65789: a4 = a4 | a5\n 65792: a1 = a1 | a4\n 65795: a3 = u8 [a0 + 0x15]\n 65798: a4 = u8 [a0 + 0x14]\n 65801: a5 = u8 [a0 + 0x16]\n 65804: a2 = u8 [a0 + 0x17]\n 65807: a3 = a3 << 0x8\n 65810: a3 = a3 | a4\n 65813: a5 = a5 << 0x10\n 65816: a2 = a2 << 0x18\n 65819: a2 = a2 | a5\n 65822: a2 = a2 | a3\n 65825: a2 = a2 << 0x20\n 65828: a3 = a2 | a1\n 65831: a1 = u8 [a0 + 0x19]\n 65834: a2 = u8 [a0 + 0x18]\n 65837: a4 = u8 [a0 + 0x1a]\n 65840: a5 = u8 [a0 + 0x1b]\n 65843: a1 = a1 << 0x8\n 65846: a1 = a1 | a2\n 65849: a4 = a4 << 0x10\n 65852: a5 = a5 << 0x18\n 65855: a4 = a4 | a5\n 65858: a1 = a1 | a4\n 65861: a2 = u8 [a0 + 0x1d]\n 65864: a4 = u8 [a0 + 0x1c]\n 65867: a5 = u8 [a0 + 0x1e]\n 65870: a0 = u8 [a0 + 0x1f]\n 65873: a2 = a2 << 0x8\n 65876: a2 = a2 | a4\n 65879: a5 = a5 << 0x10\n 65882: a0 = a0 << 0x18\n 65885: a0 = a0 | a5\n 65888: a0 = a0 | a2\n 65891: a0 = a0 << 0x20\n 65894: a0 = a0 | a1\n 65897: t2 = reverse a0\n 65899: u64 [s1 + 0x118] = t2\n 65903: a2 = reverse a3\n 65905: u64 [s1 + 0x58] = a2\n 65908: a1 = reverse t1\n 65910: u64 [s1 + 0x60] = a1\n 65913: a3 = reverse t0\n 65915: u64 [s1 + 0x110] = a3\n 65919: a0 = u64 [s1 + 0xc8]\n 65923: u64 [s1 + 0x238] = a0\n 65927: a0 = u64 [s1 + 0xd0]\n 65931: u64 [s1 + 0x230] = a0\n 65935: a0 = u64 [s1 + 0xc0]\n 65939: u64 [s1 + 0x228] = a0\n 65943: a0 = u64 [s1 + 0xd8]\n 65947: u64 [s1 + 0x220] = a0\n 65951: a0 = u64 [s1 + 0xa0]\n 65955: u64 [s1 + 0x258] = a0\n 65959: a0 = u64 [s1 + 0xa8]\n 65963: u64 [s1 + 0x250] = a0\n 65967: a0 = u64 [s1 + 0xb0]\n 65971: u64 [s1 + 0x248] = a0\n 65975: a0 = u64 [s1 + 0xb8]\n 65979: u64 [s1 + 0x240] = a0\n 65983: a0 = u64 [s1 + 0x68]\n 65986: u64 [s1 + 0x278] = a0\n 65990: a0 = u64 [s1 + 0x90]\n 65994: u64 [s1 + 0x270] = a0\n 65998: a0 = u64 [s1 + 0x98]\n 66002: u64 [s1 + 0x268] = a0\n 66006: a0 = u64 [s1 + 0xe0]\n 66010: u64 [s1 + 0x260] = a0\n 66014: a0 = u64 [s1 + 0xe8]\n 66018: u64 [s1 + 0x298] = a0\n 66022: a0 = u64 [s1 + 0x100]\n 66026: u64 [s1 + 0x290] = a0\n 66030: a0 = u64 [s1 + 0xf0]\n 66034: u64 [s1 + 0x288] = a0\n 66038: a0 = u64 [s1 + 0xf8]\n 66042: u64 [s1 + 0x280] = a0\n 66046: u64 [s1 + 0x2b8] = a3\n 66050: u64 [s1 + 0x2b0] = a1\n 66054: u64 [s1 + 0x2a8] = a2\n 66058: a0 = s1 + 0x2c0\n 66062: a1 = s1 + 0x2a0\n 66066: a2 = s1 + 0x280\n 66070: a3 = s1 + 0x260\n 66074: a4 = s1 + 0x240\n 66078: a5 = s1 + 0x220\n 66082: u64 [s1 + 0x2a0] = t2\n 66086: ra = 752, jump @795\n      : @841 [@dyn 376] (gas: 12)\n 66092: a2 = u64 [s1 + 0x58]\n 66095: a0 = u64 [s1 + 0x110]\n 66099: a0 = a0 | a2\n 66102: a3 = u64 [s1 + 0x60]\n 66105: a1 = u64 [s1 + 0x118]\n 66109: a1 = a1 | a3\n 66112: a1 = a1 | a0\n 66115: a1 = a1 >> 0x20\n 66118: a0 = a0 | a3\n 66121: a0 = a0 << 0x20\n 66124: a0 = a0 | a1\n 66127: jump @861 if a0 != 0\n      : @842 (gas: 33)\n 66131: ra = a3\n 66133: a0 = u64 [s1 + 0x2c8]\n 66137: a1 = u64 [s1 + 0x2d8]\n 66141: u64 [s1 + 0x100] = a1\n 66145: t2 = u64 [s1 + 0x2c0]\n 66149: a3 = u64 [s1 + 0x2d0]\n 66153: a4 = a0 ^ a2\n 66156: a5 = a0 <u a2\n 66159: t0 = u64 [s1 + 0x118]\n 66163: a1 = t2 <u t0\n 66166: a5 = a1 if a4 == 0\n 66169: a4 = a3 - ra\n 66172: t1 = a4 - a5\n 66175: a4 = a4 <u a5\n 66178: u64 [s1 + 0xf8] = a4\n 66182: a3 = a3 <u ra\n 66185: a5 = u64 [s1 + 0x110]\n 66189: a4 = u64 [s1 + 0x100]\n 66193: a5 = a4 - a5\n 66196: a5 = a5 - a3\n 66199: a3 = u64 [s1 + 0xf8]\n 66203: a5 = a5 - a3\n 66206: a0 = a0 - a2\n 66209: a0 = a0 - a1\n 66212: a1 = t2 - t0\n 66215: a0 = a0 | a5\n 66218: a3 = a1 | t1\n 66221: a3 = a3 | a0\n 66224: a0 = a0 | t1\n 66227: a3 = a3 >> 0x20\n 66230: a0 = a0 << 0x20\n 66233: a0 = a0 | a3\n 66236: jump @861 if a0 != 0\n      : @843 (gas: 18)\n 66240: a0 = u64 [s1 + 0x108]\n 66244: a0 = reverse a0\n 66246: a0 = a0 << 0x20\n 66249: a2 = u64 [s1 + 0x20]\n 66252: a2 = reverse a2\n 66254: a3 = a2 >> 0x20\n 66257: a0 = a0 | a3\n 66260: u64 [s1 + 0x110] = a0\n 66264: a2 = a2 << 0x20\n 66267: a0 = u64 [s1 + 0x28]\n 66270: a0 = reverse a0\n 66272: a0 = a0 >> 0x20\n 66275: a0 = a0 | a2\n 66278: u64 [s1 + 0x100] = a0\n 66282: a0 = i32 [s1 + 0x118]\n 66286: i32 a1 = a1 + 0\n 66288: u64 [s1 + 0x118] = a1\n 66292: ra = 754, jump @0\n      : @844 [@dyn 377] (gas: 46)\n 66299: a1 = u64 [0x20060]\n 66304: a2 = u64 [0x20068]\n 66309: a3 = u64 [0x20070]\n 66314: a4 = u64 [0x20078]\n 66319: u64 [s1 + 0x478] = a1\n 66323: u64 [s1 + 0x470] = a2\n 66327: u64 [s1 + 0x468] = a3\n 66331: u64 [s1 + 0x460] = a4\n 66335: a1 = u64 [s1 + 0x30]\n 66338: u64 [s1 + 0x490] = a1\n 66342: a1 = u64 [s1 + 0x48]\n 66345: u64 [s1 + 0x488] = a1\n 66349: a1 = u64 [s1 + 0x50]\n 66352: u64 [s1 + 0x480] = a1\n 66356: a1 = u64 [s1 + 0x40]\n 66359: u64 [s1 + 0x498] = a1\n 66363: a1 = u64 [s1 + 0x100]\n 66367: a1 = reverse a1\n 66369: a2 = u64 [s1 + 0x110]\n 66373: a2 = reverse a2\n 66375: a3 = u64 [s1 + 0x108]\n 66379: a3 = a3 << 0x20\n 66382: u64 [s1 + 0x4a8] = a3\n 66386: u64 [s1 + 1184] = 0\n 66390: u64 [s1 + 0x4b0] = a2\n 66394: u64 [s1 + 0x4b8] = a1\n 66398: i32 a2 = a0 + 0\n 66400: i32 a0 = s1 + 0x460\n 66404: a1 = 0x3\n 66407: a3 = u64 [s1 + 0x118]\n 66411: ecalli 5 // 'deposit_event'\n 66413: a0 = u64 [s1 + 0x38]\n 66416: a1 = u64 [s1 + 0x78]\n 66419: u64 [a0 + 0x18] = a1\n 66422: a1 = u64 [s1 + 0x70]\n 66425: u64 [a0 + 0x10] = a1\n 66428: a1 = u64 [s1 + 0x80]\n 66432: u64 [a0 + 0x8] = a1\n 66435: a1 = u64 [s1 + 0x88]\n 66439: u64 [a0] = a1\n 66441: sp = s0 + 0xfffffffffffffb20\n 66445: ra = u64 [sp + 0x4d8]\n 66449: s0 = u64 [sp + 0x4d0]\n 66453: s1 = u64 [sp + 0x4c8]\n 66457: sp = sp + 0x4e0\n 66461: ret\n      : @845 (gas: 3)\n 66463: a0 = 0x40\n 66466: a1 = 0x20\n 66469: ra = 756, jump @0\n      : @846 [@dyn 378] (gas: 104)\n 66476: a1 = u8 [a0 + 0x11]\n 66479: a2 = u8 [a0 + 0x10]\n 66482: a3 = u8 [a0 + 0x12]\n 66485: a4 = u8 [a0 + 0x13]\n 66488: a1 = a1 << 0x8\n 66491: a1 = a1 | a2\n 66494: a3 = a3 << 0x10\n 66497: a4 = a4 << 0x18\n 66500: a3 = a3 | a4\n 66503: a1 = a1 | a3\n 66506: a2 = u8 [a0 + 0x15]\n 66509: a3 = u8 [a0 + 0x14]\n 66512: a4 = u8 [a0 + 0x16]\n 66515: a5 = u8 [a0 + 0x17]\n 66518: a2 = a2 << 0x8\n 66521: a2 = a2 | a3\n 66524: a4 = a4 << 0x10\n 66527: a5 = a5 << 0x18\n 66530: a4 = a4 | a5\n 66533: a2 = a2 | a4\n 66536: a2 = a2 << 0x20\n 66539: t0 = a2 | a1\n 66542: a2 = u8 [a0 + 0x1]\n 66545: a3 = u8 [a0]\n 66547: a4 = u8 [a0 + 0x2]\n 66550: a5 = u8 [a0 + 0x3]\n 66553: a2 = a2 << 0x8\n 66556: a2 = a2 | a3\n 66559: a4 = a4 << 0x10\n 66562: a5 = a5 << 0x18\n 66565: a4 = a4 | a5\n 66568: a2 = a2 | a4\n 66571: a3 = u8 [a0 + 0x5]\n 66574: a4 = u8 [a0 + 0x4]\n 66577: a5 = u8 [a0 + 0x6]\n 66580: a1 = u8 [a0 + 0x7]\n 66583: a3 = a3 << 0x8\n 66586: a3 = a3 | a4\n 66589: a5 = a5 << 0x10\n 66592: a1 = a1 << 0x18\n 66595: a1 = a1 | a5\n 66598: a1 = a1 | a3\n 66601: a1 = a1 << 0x20\n 66604: t1 = a1 | a2\n 66607: a1 = u8 [a0 + 0x19]\n 66610: a3 = u8 [a0 + 0x18]\n 66613: a4 = u8 [a0 + 0x1a]\n 66616: a5 = u8 [a0 + 0x1b]\n 66619: a1 = a1 << 0x8\n 66622: a1 = a1 | a3\n 66625: a4 = a4 << 0x10\n 66628: a5 = a5 << 0x18\n 66631: a4 = a4 | a5\n 66634: a1 = a1 | a4\n 66637: a3 = u8 [a0 + 0x1d]\n 66640: a4 = u8 [a0 + 0x1c]\n 66643: a5 = u8 [a0 + 0x1e]\n 66646: a2 = u8 [a0 + 0x1f]\n 66649: a3 = a3 << 0x8\n 66652: a3 = a3 | a4\n 66655: a5 = a5 << 0x10\n 66658: a2 = a2 << 0x18\n 66661: a2 = a2 | a5\n 66664: a2 = a2 | a3\n 66667: a2 = a2 << 0x20\n 66670: a3 = a2 | a1\n 66673: a1 = u8 [a0 + 0x9]\n 66676: a2 = u8 [a0 + 0x8]\n 66679: a4 = u8 [a0 + 0xa]\n 66682: a5 = u8 [a0 + 0xb]\n 66685: a1 = a1 << 0x8\n 66688: a1 = a1 | a2\n 66691: a4 = a4 << 0x10\n 66694: a5 = a5 << 0x18\n 66697: a4 = a4 | a5\n 66700: a1 = a1 | a4\n 66703: a2 = u8 [a0 + 0xd]\n 66706: a4 = u8 [a0 + 0xc]\n 66709: a5 = u8 [a0 + 0xe]\n 66712: a0 = u8 [a0 + 0xf]\n 66715: a2 = a2 << 0x8\n 66718: a2 = a2 | a4\n 66721: a5 = a5 << 0x10\n 66724: a0 = a0 << 0x18\n 66727: a0 = a0 | a5\n 66730: a0 = a0 | a2\n 66733: a0 = a0 << 0x20\n 66736: a0 = a0 | a1\n 66739: a4 = reverse a0\n 66741: a1 = reverse a3\n 66743: a2 = reverse t1\n 66745: a0 = reverse t0\n 66747: u64 [s1 + 0x118] = a0\n 66751: u64 [s1 + 0x108] = a2\n 66755: a0 = a0 | a2\n 66758: a2 = a1\n 66760: a1 = a1 | a4\n 66763: a1 = a1 | a0\n 66766: a1 = a1 >> 0x20\n 66769: u64 [s1 + 0x110] = a4\n 66773: a0 = a0 | a4\n 66776: a0 = a0 << 0x20\n 66779: a0 = a0 | a1\n 66782: jump @861 if a0 != 0\n      : @847 (gas: 5)\n 66786: u64 [s1 + 0x100] = a2\n 66790: i32 a0 = a2 + 0\n 66792: a1 = 0x20\n 66795: u64 [s1 + 0xf8] = a0\n 66799: ra = 758, jump @0\n      : @848 [@dyn 379] (gas: 51)\n 66806: u8 [a0 + 31] = 0\n 66809: u8 [a0 + 30] = 0\n 66812: u8 [a0 + 29] = 0\n 66815: u8 [a0 + 28] = 0\n 66818: u8 [a0 + 27] = 0\n 66821: u8 [a0 + 26] = 0\n 66824: u8 [a0 + 25] = 0\n 66827: u8 [a0 + 24] = 0\n 66830: u8 [a0 + 23] = 0\n 66833: u8 [a0 + 22] = 0\n 66836: u8 [a0 + 21] = 0\n 66839: u8 [a0 + 20] = 0\n 66842: u8 [a0 + 19] = 0\n 66845: u8 [a0 + 18] = 0\n 66848: u8 [a0 + 17] = 0\n 66851: u8 [a0 + 16] = 0\n 66854: u8 [a0 + 15] = 0\n 66857: u8 [a0 + 14] = 0\n 66860: u8 [a0 + 13] = 0\n 66863: u8 [a0 + 12] = 0\n 66866: u8 [a0 + 11] = 0\n 66869: u8 [a0 + 10] = 0\n 66872: u8 [a0 + 9] = 0\n 66875: u8 [a0 + 8] = 0\n 66878: u8 [a0 + 7] = 0\n 66881: u8 [a0 + 6] = 0\n 66884: u8 [a0 + 5] = 0\n 66887: u8 [a0 + 4] = 0\n 66890: u8 [a0 + 3] = 0xa0\n 66895: u8 [a0 + 2] = 0x79\n 66899: u8 [a0 + 1] = 0xc3\n 66904: u8 [a0 + 0] = 0x8\n 66907: a1 = u64 [s1 + 0x100]\n 66911: a0 = a1 + 0x4\n 66914: a1 = a0 <u a1\n 66917: a3 = u64 [s1 + 0x118]\n 66921: a2 = a3 + a1\n 66924: a3 = a2 <u a3\n 66927: a3 = a1 if a1 == 0\n 66930: a1 = u64 [s1 + 0x110]\n 66934: a3 = a3 + a1\n 66937: a1 = a3 <u a1\n 66940: a4 = u64 [s1 + 0x108]\n 66944: a4 = a4 + a1\n 66947: u64 [s1 + 0x128] = a2\n 66951: u64 [s1 + 0x120] = a0\n 66955: u64 [s1 + 0x130] = a3\n 66959: a0 = s1 + 0x140\n 66963: a1 = s1 + 0x120\n 66967: u64 [s1 + 0x138] = a4\n 66971: ra = 760, jump @685\n      : @849 [@dyn 380] (gas: 5)\n 66977: a0 = u64 [s1 + 0x148]\n 66981: t0 = u64 [s1 + 0x158]\n 66985: t1 = u64 [s1 + 0x140]\n 66989: a3 = u64 [s1 + 0x150]\n 66993: jump @860\n      : @850 (gas: 3)\n 66996: a0 = 0x40\n 66999: a1 = 0x20\n 67002: ra = 762, jump @0\n      : @851 [@dyn 381] (gas: 104)\n 67009: a1 = u8 [a0 + 0x11]\n 67012: a2 = u8 [a0 + 0x10]\n 67015: a3 = u8 [a0 + 0x12]\n 67018: a4 = u8 [a0 + 0x13]\n 67021: a1 = a1 << 0x8\n 67024: a1 = a1 | a2\n 67027: a3 = a3 << 0x10\n 67030: a4 = a4 << 0x18\n 67033: a3 = a3 | a4\n 67036: a1 = a1 | a3\n 67039: a2 = u8 [a0 + 0x15]\n 67042: a3 = u8 [a0 + 0x14]\n 67045: a4 = u8 [a0 + 0x16]\n 67048: a5 = u8 [a0 + 0x17]\n 67051: a2 = a2 << 0x8\n 67054: a2 = a2 | a3\n 67057: a4 = a4 << 0x10\n 67060: a5 = a5 << 0x18\n 67063: a4 = a4 | a5\n 67066: a2 = a2 | a4\n 67069: a2 = a2 << 0x20\n 67072: t0 = a2 | a1\n 67075: a2 = u8 [a0 + 0x1]\n 67078: a3 = u8 [a0]\n 67080: a4 = u8 [a0 + 0x2]\n 67083: a5 = u8 [a0 + 0x3]\n 67086: a2 = a2 << 0x8\n 67089: a2 = a2 | a3\n 67092: a4 = a4 << 0x10\n 67095: a5 = a5 << 0x18\n 67098: a4 = a4 | a5\n 67101: a2 = a2 | a4\n 67104: a3 = u8 [a0 + 0x5]\n 67107: a4 = u8 [a0 + 0x4]\n 67110: a5 = u8 [a0 + 0x6]\n 67113: a1 = u8 [a0 + 0x7]\n 67116: a3 = a3 << 0x8\n 67119: a3 = a3 | a4\n 67122: a5 = a5 << 0x10\n 67125: a1 = a1 << 0x18\n 67128: a1 = a1 | a5\n 67131: a1 = a1 | a3\n 67134: a1 = a1 << 0x20\n 67137: t1 = a1 | a2\n 67140: a1 = u8 [a0 + 0x19]\n 67143: a3 = u8 [a0 + 0x18]\n 67146: a4 = u8 [a0 + 0x1a]\n 67149: a5 = u8 [a0 + 0x1b]\n 67152: a1 = a1 << 0x8\n 67155: a1 = a1 | a3\n 67158: a4 = a4 << 0x10\n 67161: a5 = a5 << 0x18\n 67164: a4 = a4 | a5\n 67167: a1 = a1 | a4\n 67170: a3 = u8 [a0 + 0x1d]\n 67173: a4 = u8 [a0 + 0x1c]\n 67176: a5 = u8 [a0 + 0x1e]\n 67179: a2 = u8 [a0 + 0x1f]\n 67182: a3 = a3 << 0x8\n 67185: a3 = a3 | a4\n 67188: a5 = a5 << 0x10\n 67191: a2 = a2 << 0x18\n 67194: a2 = a2 | a5\n 67197: a2 = a2 | a3\n 67200: a2 = a2 << 0x20\n 67203: a3 = a2 | a1\n 67206: a1 = u8 [a0 + 0x9]\n 67209: a2 = u8 [a0 + 0x8]\n 67212: a4 = u8 [a0 + 0xa]\n 67215: a5 = u8 [a0 + 0xb]\n 67218: a1 = a1 << 0x8\n 67221: a1 = a1 | a2\n 67224: a4 = a4 << 0x10\n 67227: a5 = a5 << 0x18\n 67230: a4 = a4 | a5\n 67233: a1 = a1 | a4\n 67236: a2 = u8 [a0 + 0xd]\n 67239: a4 = u8 [a0 + 0xc]\n 67242: a5 = u8 [a0 + 0xe]\n 67245: a0 = u8 [a0 + 0xf]\n 67248: a2 = a2 << 0x8\n 67251: a2 = a2 | a4\n 67254: a5 = a5 << 0x10\n 67257: a0 = a0 << 0x18\n 67260: a0 = a0 | a5\n 67263: a0 = a0 | a2\n 67266: a0 = a0 << 0x20\n 67269: a0 = a0 | a1\n 67272: a4 = reverse a0\n 67274: a1 = reverse a3\n 67276: a2 = reverse t1\n 67278: a0 = reverse t0\n 67280: u64 [s1 + 0x118] = a0\n 67284: u64 [s1 + 0x108] = a2\n 67288: a0 = a0 | a2\n 67291: a2 = a1\n 67293: a1 = a1 | a4\n 67296: a1 = a1 | a0\n 67299: a1 = a1 >> 0x20\n 67302: u64 [s1 + 0x110] = a4\n 67306: a0 = a0 | a4\n 67309: a0 = a0 << 0x20\n 67312: a0 = a0 | a1\n 67315: jump @861 if a0 != 0\n      : @852 (gas: 5)\n 67319: u64 [s1 + 0x100] = a2\n 67323: i32 a0 = a2 + 0\n 67325: a1 = 0x20\n 67328: u64 [s1 + 0xf8] = a0\n 67332: ra = 764, jump @0\n      : @853 [@dyn 382] (gas: 51)\n 67339: u8 [a0 + 31] = 0\n 67342: u8 [a0 + 30] = 0\n 67345: u8 [a0 + 29] = 0\n 67348: u8 [a0 + 28] = 0\n 67351: u8 [a0 + 27] = 0\n 67354: u8 [a0 + 26] = 0\n 67357: u8 [a0 + 25] = 0\n 67360: u8 [a0 + 24] = 0\n 67363: u8 [a0 + 23] = 0\n 67366: u8 [a0 + 22] = 0\n 67369: u8 [a0 + 21] = 0\n 67372: u8 [a0 + 20] = 0\n 67375: u8 [a0 + 19] = 0\n 67378: u8 [a0 + 18] = 0\n 67381: u8 [a0 + 17] = 0\n 67384: u8 [a0 + 16] = 0\n 67387: u8 [a0 + 15] = 0\n 67390: u8 [a0 + 14] = 0\n 67393: u8 [a0 + 13] = 0\n 67396: u8 [a0 + 12] = 0\n 67399: u8 [a0 + 11] = 0\n 67402: u8 [a0 + 10] = 0\n 67405: u8 [a0 + 9] = 0\n 67408: u8 [a0 + 8] = 0\n 67411: u8 [a0 + 7] = 0\n 67414: u8 [a0 + 6] = 0\n 67417: u8 [a0 + 5] = 0\n 67420: u8 [a0 + 4] = 0\n 67423: u8 [a0 + 3] = 0xa0\n 67428: u8 [a0 + 2] = 0x79\n 67432: u8 [a0 + 1] = 0xc3\n 67437: u8 [a0 + 0] = 0x8\n 67440: a1 = u64 [s1 + 0x100]\n 67444: a0 = a1 + 0x4\n 67447: a1 = a0 <u a1\n 67450: a3 = u64 [s1 + 0x118]\n 67454: a2 = a3 + a1\n 67457: a3 = a2 <u a3\n 67460: a3 = a1 if a1 == 0\n 67463: a1 = u64 [s1 + 0x110]\n 67467: a3 = a3 + a1\n 67470: a1 = a3 <u a1\n 67473: a4 = u64 [s1 + 0x108]\n 67477: a4 = a4 + a1\n 67480: u64 [s1 + 0x168] = a2\n 67484: u64 [s1 + 0x160] = a0\n 67488: u64 [s1 + 0x170] = a3\n 67492: a0 = s1 + 0x180\n 67496: a1 = s1 + 0x160\n 67500: u64 [s1 + 0x178] = a4\n 67504: ra = 766, jump @693\n      : @854 [@dyn 383] (gas: 5)\n 67510: a0 = u64 [s1 + 0x188]\n 67514: t0 = u64 [s1 + 0x198]\n 67518: t1 = u64 [s1 + 0x180]\n 67522: a3 = u64 [s1 + 0x190]\n 67526: jump @860\n      : @855 (gas: 3)\n 67529: a0 = 0x40\n 67532: a1 = 0x20\n 67535: ra = 768, jump @0\n      : @856 [@dyn 384] (gas: 104)\n 67542: a1 = u8 [a0 + 0x11]\n 67545: a2 = u8 [a0 + 0x10]\n 67548: a3 = u8 [a0 + 0x12]\n 67551: a4 = u8 [a0 + 0x13]\n 67554: a1 = a1 << 0x8\n 67557: a1 = a1 | a2\n 67560: a3 = a3 << 0x10\n 67563: a4 = a4 << 0x18\n 67566: a3 = a3 | a4\n 67569: a1 = a1 | a3\n 67572: a2 = u8 [a0 + 0x15]\n 67575: a3 = u8 [a0 + 0x14]\n 67578: a4 = u8 [a0 + 0x16]\n 67581: a5 = u8 [a0 + 0x17]\n 67584: a2 = a2 << 0x8\n 67587: a2 = a2 | a3\n 67590: a4 = a4 << 0x10\n 67593: a5 = a5 << 0x18\n 67596: a4 = a4 | a5\n 67599: a2 = a2 | a4\n 67602: a2 = a2 << 0x20\n 67605: t0 = a2 | a1\n 67608: a2 = u8 [a0 + 0x1]\n 67611: a3 = u8 [a0]\n 67613: a4 = u8 [a0 + 0x2]\n 67616: a5 = u8 [a0 + 0x3]\n 67619: a2 = a2 << 0x8\n 67622: a2 = a2 | a3\n 67625: a4 = a4 << 0x10\n 67628: a5 = a5 << 0x18\n 67631: a4 = a4 | a5\n 67634: a2 = a2 | a4\n 67637: a3 = u8 [a0 + 0x5]\n 67640: a4 = u8 [a0 + 0x4]\n 67643: a5 = u8 [a0 + 0x6]\n 67646: a1 = u8 [a0 + 0x7]\n 67649: a3 = a3 << 0x8\n 67652: a3 = a3 | a4\n 67655: a5 = a5 << 0x10\n 67658: a1 = a1 << 0x18\n 67661: a1 = a1 | a5\n 67664: a1 = a1 | a3\n 67667: a1 = a1 << 0x20\n 67670: t1 = a1 | a2\n 67673: a1 = u8 [a0 + 0x19]\n 67676: a3 = u8 [a0 + 0x18]\n 67679: a4 = u8 [a0 + 0x1a]\n 67682: a5 = u8 [a0 + 0x1b]\n 67685: a1 = a1 << 0x8\n 67688: a1 = a1 | a3\n 67691: a4 = a4 << 0x10\n 67694: a5 = a5 << 0x18\n 67697: a4 = a4 | a5\n 67700: a1 = a1 | a4\n 67703: a3 = u8 [a0 + 0x1d]\n 67706: a4 = u8 [a0 + 0x1c]\n 67709: a5 = u8 [a0 + 0x1e]\n 67712: a2 = u8 [a0 + 0x1f]\n 67715: a3 = a3 << 0x8\n 67718: a3 = a3 | a4\n 67721: a5 = a5 << 0x10\n 67724: a2 = a2 << 0x18\n 67727: a2 = a2 | a5\n 67730: a2 = a2 | a3\n 67733: a2 = a2 << 0x20\n 67736: a3 = a2 | a1\n 67739: a1 = u8 [a0 + 0x9]\n 67742: a2 = u8 [a0 + 0x8]\n 67745: a4 = u8 [a0 + 0xa]\n 67748: a5 = u8 [a0 + 0xb]\n 67751: a1 = a1 << 0x8\n 67754: a1 = a1 | a2\n 67757: a4 = a4 << 0x10\n 67760: a5 = a5 << 0x18\n 67763: a4 = a4 | a5\n 67766: a1 = a1 | a4\n 67769: a2 = u8 [a0 + 0xd]\n 67772: a4 = u8 [a0 + 0xc]\n 67775: a5 = u8 [a0 + 0xe]\n 67778: a0 = u8 [a0 + 0xf]\n 67781: a2 = a2 << 0x8\n 67784: a2 = a2 | a4\n 67787: a5 = a5 << 0x10\n 67790: a0 = a0 << 0x18\n 67793: a0 = a0 | a5\n 67796: a0 = a0 | a2\n 67799: a0 = a0 << 0x20\n 67802: a0 = a0 | a1\n 67805: a4 = reverse a0\n 67807: a1 = reverse a3\n 67809: a2 = reverse t1\n 67811: a0 = reverse t0\n 67813: u64 [s1 + 0x118] = a0\n 67817: u64 [s1 + 0x108] = a2\n 67821: a0 = a0 | a2\n 67824: a2 = a1\n 67826: a1 = a1 | a4\n 67829: a1 = a1 | a0\n 67832: a1 = a1 >> 0x20\n 67835: u64 [s1 + 0x110] = a4\n 67839: a0 = a0 | a4\n 67842: a0 = a0 << 0x20\n 67845: a0 = a0 | a1\n 67848: jump @861 if a0 != 0\n      : @857 (gas: 5)\n 67852: u64 [s1 + 0x100] = a2\n 67856: i32 a0 = a2 + 0\n 67858: a1 = 0x20\n 67861: u64 [s1 + 0xf8] = a0\n 67865: ra = 770, jump @0\n      : @858 [@dyn 385] (gas: 51)\n 67872: u8 [a0 + 31] = 0\n 67875: u8 [a0 + 30] = 0\n 67878: u8 [a0 + 29] = 0\n 67881: u8 [a0 + 28] = 0\n 67884: u8 [a0 + 27] = 0\n 67887: u8 [a0 + 26] = 0\n 67890: u8 [a0 + 25] = 0\n 67893: u8 [a0 + 24] = 0\n 67896: u8 [a0 + 23] = 0\n 67899: u8 [a0 + 22] = 0\n 67902: u8 [a0 + 21] = 0\n 67905: u8 [a0 + 20] = 0\n 67908: u8 [a0 + 19] = 0\n 67911: u8 [a0 + 18] = 0\n 67914: u8 [a0 + 17] = 0\n 67917: u8 [a0 + 16] = 0\n 67920: u8 [a0 + 15] = 0\n 67923: u8 [a0 + 14] = 0\n 67926: u8 [a0 + 13] = 0\n 67929: u8 [a0 + 12] = 0\n 67932: u8 [a0 + 11] = 0\n 67935: u8 [a0 + 10] = 0\n 67938: u8 [a0 + 9] = 0\n 67941: u8 [a0 + 8] = 0\n 67944: u8 [a0 + 7] = 0\n 67947: u8 [a0 + 6] = 0\n 67950: u8 [a0 + 5] = 0\n 67953: u8 [a0 + 4] = 0\n 67956: u8 [a0 + 3] = 0xa0\n 67961: u8 [a0 + 2] = 0x79\n 67965: u8 [a0 + 1] = 0xc3\n 67970: u8 [a0 + 0] = 0x8\n 67973: a1 = u64 [s1 + 0x100]\n 67977: a0 = a1 + 0x4\n 67980: a1 = a0 <u a1\n 67983: a3 = u64 [s1 + 0x118]\n 67987: a2 = a3 + a1\n 67990: a3 = a2 <u a3\n 67993: a3 = a1 if a1 == 0\n 67996: a1 = u64 [s1 + 0x110]\n 68000: a3 = a3 + a1\n 68003: a1 = a3 <u a1\n 68006: a4 = u64 [s1 + 0x108]\n 68010: a4 = a4 + a1\n 68013: u64 [s1 + 0x1a8] = a2\n 68017: u64 [s1 + 0x1a0] = a0\n 68021: u64 [s1 + 0x1b0] = a3\n 68025: a0 = s1 + 0x1c0\n 68029: a1 = s1 + 0x1a0\n 68033: u64 [s1 + 0x1b8] = a4\n 68037: ra = 772, jump @701\n      : @859 [@dyn 386] (gas: 5)\n 68043: a0 = u64 [s1 + 0x1c8]\n 68047: t0 = u64 [s1 + 0x1d8]\n 68051: t1 = u64 [s1 + 0x1c0]\n 68055: a3 = u64 [s1 + 0x1d0]\n 68059: fallthrough\n      : @860 (gas: 27)\n 68060: a1 = u64 [s1 + 0x118]\n 68064: a4 = a0 ^ a1\n 68067: a5 = a0 <u a1\n 68070: ra = a1\n 68072: t2 = u64 [s1 + 0x100]\n 68076: a1 = t1 <u t2\n 68079: a5 = a1 if a4 == 0\n 68082: a2 = u64 [s1 + 0x110]\n 68086: a4 = a3 - a2\n 68089: a3 = a3 <u a2\n 68092: a2 = u64 [s1 + 0x108]\n 68096: a2 = t0 - a2\n 68099: a2 = a2 - a3\n 68102: a3 = a4 <u a5\n 68105: a2 = a2 - a3\n 68108: a4 = a4 - a5\n 68111: a0 = a0 - ra\n 68114: a1 = a0 - a1\n 68117: a0 = t1 - t2\n 68120: a1 = a1 | a2\n 68123: a2 = a0 | a4\n 68126: a2 = a2 | a1\n 68129: a1 = a1 | a4\n 68132: a2 = a2 >> 0x20\n 68135: a1 = a1 << 0x20\n 68138: a1 = a1 | a2\n 68141: jump @866 if a1 == 0\n      : @861 (gas: 1)\n 68144: trap\n      : @862 (gas: 8)\n 68145: u64 [s1 + 528] = 0\n 68149: u64 [s1 + 520] = 0\n 68153: u64 [s1 + 512] = 0\n 68157: a0 = 0x4e487b7100000000\n 68167: a1 = s1 + 0x200\n 68171: u64 [s1 + 0x218] = a0\n 68175: a0 = 0\n 68177: ra = 774, jump @23\n      : @863 [@dyn 387] (gas: 7)\n 68184: u64 [s1 + 504] = 0\n 68188: u64 [s1 + 496] = 0\n 68192: u64 [s1 + 480] = 0x11\n 68197: a0 = 0x4\n 68200: a1 = s1 + 0x1e0\n 68204: u64 [s1 + 488] = 0\n 68208: ra = 776, jump @23\n      : @864 [@dyn 388] (gas: 3)\n 68215: a1 = 0x24\n 68218: a0 = 0\n 68220: ra = 778, jump @0\n      : @865 [@dyn 389] (gas: 5)\n 68227: i32 a1 = a0 + 0\n 68229: a0 = 0x1\n 68232: a2 = 0x24\n 68235: ecalli 12 // 'seal_return'\n 68237: fallthrough\n      : @866 (gas: 4)\n 68238: i32 a1 = a0 + 0\n 68240: u64 [s1 + 0x118] = a1\n 68244: a0 = u64 [s1 + 0xf8]\n 68248: ra = 780, jump @0\n      : @867 [@dyn 390] (gas: 6)\n 68255: i32 a1 = a0 + 0\n 68257: a0 = 0x1\n 68260: a2 = u64 [s1 + 0x118]\n 68264: ra = 0x30e\n 68268: ecalli 12 // 'seal_return'\n 68270: fallthrough\n      : @868 [@dyn 391] (gas: 32)\n 68271: sp = sp + 0xfffffffffffffea0\n 68275: u64 [sp + 0x158] = ra\n 68279: u64 [sp + 0x150] = s0\n 68283: u64 [sp + 0x148] = s1\n 68287: s0 = sp + 0x160\n 68291: sp = sp & 0xffffffffffffffe0\n 68294: u64 [sp + 0x38] = a0\n 68297: a0 = u64 [a2 + 0x18]\n 68300: u64 [sp + 0x18] = a0\n 68303: a0 = u64 [a2 + 0x10]\n 68306: u64 [sp + 0x20] = a0\n 68309: a0 = u64 [a2 + 0x8]\n 68312: u64 [sp + 0x28] = a0\n 68315: a0 = u64 [a2]\n 68317: u64 [sp + 0x30] = a0\n 68320: u64 [sp + 280] = 0\n 68324: u64 [sp + 272] = 0\n 68328: u64 [sp + 264] = 0\n 68332: s1 = 0x4\n 68335: u64 [sp + 0x100] = s1\n 68339: u64 [sp + 312] = 0\n 68343: u64 [sp + 304] = 0\n 68347: u64 [sp + 296] = 0\n 68351: u64 [sp + 288] = 0\n 68355: u32 [sp + 224] = 0x20\n 68360: i32 a1 = sp + 0x100\n 68364: i32 a3 = sp + 0x120\n 68368: i32 a4 = sp + 0xe0\n 68372: a2 = 0xffffffffffffffff\n 68375: a0 = 0\n 68377: ecalli 7 // 'get_storage'\n 68379: fallthrough\n      : @869 (gas: 9)\n 68380: a0 = u64 [sp + 0x138]\n 68384: a1 = u64 [sp + 0x128]\n 68388: a2 = u64 [sp + 0x120]\n 68392: a3 = u64 [sp + 0x130]\n 68396: a0 = a0 | a1\n 68399: a1 = a2 ^ 0x1\n 68402: a1 = a1 | a3\n 68405: a0 = a0 | a1\n 68408: jump @872 if a0 != 0\n      : @870 (gas: 60)\n 68412: u64 [sp + 280] = 0\n 68416: u64 [sp + 272] = 0\n 68420: u64 [sp + 264] = 0\n 68424: u64 [sp + 256] = 0x4\n 68429: u64 [sp + 312] = 0\n 68433: u64 [sp + 304] = 0\n 68437: u64 [sp + 296] = 0\n 68441: u64 [sp + 288] = 0\n 68445: u32 [sp + 224] = 0x20\n 68450: i32 a1 = sp + 0x100\n 68454: i32 a3 = sp + 0x120\n 68458: i32 a4 = sp + 0xe0\n 68462: a2 = 0xffffffffffffffff\n 68465: a0 = 0\n 68467: ecalli 7 // 'get_storage'\n 68469: u64 [sp + 280] = 0\n 68473: u64 [sp + 272] = 0\n 68477: u64 [sp + 264] = 0\n 68481: u64 [sp + 256] = 0x4\n 68486: u64 [sp + 312] = 0\n 68490: u64 [sp + 304] = 0\n 68494: u64 [sp + 296] = 0\n 68498: u64 [sp + 288] = 0\n 68502: i32 a1 = sp + 0x100\n 68506: i32 a3 = sp + 0x120\n 68510: a2 = 0xffffffffffffffff\n 68513: a4 = 0x20\n 68516: a0 = 0\n 68518: ecalli 14 // 'set_storage'\n 68520: a0 = u64 [sp + 0x18]\n 68523: u64 [sp + 0x58] = a0\n 68526: a0 = u64 [sp + 0x20]\n 68529: u64 [sp + 0x50] = a0\n 68532: a0 = u64 [sp + 0x28]\n 68535: u64 [sp + 0x48] = a0\n 68538: a0 = sp + 0x80\n 68542: a2 = sp + 0x40\n 68545: a3 = u64 [sp + 0x30]\n 68548: u64 [sp + 0x40] = a3\n 68551: ra = 0x310\n 68555: sp = sp + 0xfffffffffffffc00\n 68559: u64 [sp + 0x3f8] = ra\n 68563: u64 [sp + 0x3f0] = s0\n 68567: u64 [sp + 1000] = 0x4\n 68572: s0 = sp + 0x400\n 68576: sp = sp & 0xffffffffffffffe0\n 68579: s1 = sp\n 68581: a1 = u64 [a2]\n 68583: u64 [s1 + 0x198] = a1\n 68587: a1 = u64 [a2 + 0x8]\n 68590: u64 [s1 + 0x190] = a1\n 68594: a1 = u64 [a2 + 0x10]\n 68597: u64 [s1 + 0x188] = a1\n 68601: a1 = u64 [a2 + 0x18]\n 68604: u64 [s1 + 0x180] = a1\n 68608: u64 [s1 + 0x18] = a0\n 68611: a1 = 0x20\n 68614: a0 = 0\n 68616: ra = 0x334\n 68620: jump @0\n      : @871 [@dyn 392] (gas: 52)\n 68624: a0 = u64 [sp + 0x80]\n 68628: u64 [sp + 0x30] = a0\n 68631: a0 = u64 [sp + 0x88]\n 68635: u64 [sp + 0x28] = a0\n 68638: a0 = u64 [sp + 0x90]\n 68642: u64 [sp + 0x20] = a0\n 68645: a0 = u64 [sp + 0x98]\n 68649: u64 [sp + 0x18] = a0\n 68652: u64 [sp + 280] = 0\n 68656: u64 [sp + 272] = 0\n 68660: u64 [sp + 264] = 0\n 68664: u64 [sp + 256] = 0x4\n 68669: u64 [sp + 312] = 0\n 68673: u64 [sp + 304] = 0\n 68677: u64 [sp + 296] = 0\n 68681: u64 [sp + 288] = 0\n 68685: u32 [sp + 224] = 0x20\n 68690: i32 a1 = sp + 0x100\n 68694: i32 a3 = sp + 0x120\n 68698: i32 a4 = sp + 0xe0\n 68702: a2 = 0xffffffffffffffff\n 68705: a0 = 0\n 68707: ecalli 7 // 'get_storage'\n 68709: u64 [sp + 280] = 0\n 68713: u64 [sp + 272] = 0\n 68717: u64 [sp + 264] = 0\n 68721: u64 [sp + 256] = 0x4\n 68726: u64 [sp + 312] = 0\n 68730: u64 [sp + 304] = 0\n 68734: u64 [sp + 296] = 0\n 68738: u64 [sp + 288] = 0x1\n 68743: i32 a1 = sp + 0x100\n 68747: i32 a3 = sp + 0x120\n 68751: a2 = 0xffffffffffffffff\n 68754: a4 = 0x20\n 68757: a0 = 0\n 68759: ecalli 14 // 'set_storage'\n 68761: a0 = u64 [sp + 0x38]\n 68764: a1 = u64 [sp + 0x18]\n 68767: u64 [a0 + 0x18] = a1\n 68770: a1 = u64 [sp + 0x20]\n 68773: u64 [a0 + 0x10] = a1\n 68776: a1 = u64 [sp + 0x28]\n 68779: u64 [a0 + 0x8] = a1\n 68782: a1 = u64 [sp + 0x30]\n 68785: u64 [a0] = a1\n 68787: sp = s0 + 0xfffffffffffffea0\n 68791: ra = u64 [sp + 0x158]\n 68795: s0 = u64 [sp + 0x150]\n 68799: s1 = u64 [sp + 0x148]\n 68803: sp = sp + 0x160\n 68807: ret\n      : @872 (gas: 3)\n 68809: a0 = 0x40\n 68812: a1 = 0x20\n 68815: ra = 786, jump @0\n      : @873 [@dyn 393] (gas: 103)\n 68822: a1 = u8 [a0 + 0x11]\n 68825: a2 = u8 [a0 + 0x10]\n 68828: a3 = u8 [a0 + 0x12]\n 68831: a4 = u8 [a0 + 0x13]\n 68834: a1 = a1 << 0x8\n 68837: a1 = a1 | a2\n 68840: a3 = a3 << 0x10\n 68843: a4 = a4 << 0x18\n 68846: a3 = a3 | a4\n 68849: a1 = a1 | a3\n 68852: a2 = u8 [a0 + 0x15]\n 68855: a3 = u8 [a0 + 0x14]\n 68858: a4 = u8 [a0 + 0x16]\n 68861: a5 = u8 [a0 + 0x17]\n 68864: a2 = a2 << 0x8\n 68867: a2 = a2 | a3\n 68870: a4 = a4 << 0x10\n 68873: a5 = a5 << 0x18\n 68876: a4 = a4 | a5\n 68879: a2 = a2 | a4\n 68882: a2 = a2 << 0x20\n 68885: t0 = a2 | a1\n 68888: a2 = u8 [a0 + 0x1]\n 68891: a3 = u8 [a0]\n 68893: a4 = u8 [a0 + 0x2]\n 68896: a5 = u8 [a0 + 0x3]\n 68899: a2 = a2 << 0x8\n 68902: a2 = a2 | a3\n 68905: a4 = a4 << 0x10\n 68908: a5 = a5 << 0x18\n 68911: a4 = a4 | a5\n 68914: a2 = a2 | a4\n 68917: a3 = u8 [a0 + 0x5]\n 68920: a4 = u8 [a0 + 0x4]\n 68923: a5 = u8 [a0 + 0x6]\n 68926: s1 = u8 [a0 + 0x7]\n 68929: a3 = a3 << 0x8\n 68932: a3 = a3 | a4\n 68935: a5 = a5 << 0x10\n 68938: s1 = s1 << 0x18\n 68941: a5 = a5 | s1\n 68944: a3 = a3 | a5\n 68947: a3 = a3 << 0x20\n 68950: a2 = a2 | a3\n 68953: a3 = u8 [a0 + 0x19]\n 68956: a4 = u8 [a0 + 0x18]\n 68959: a5 = u8 [a0 + 0x1a]\n 68962: s1 = u8 [a0 + 0x1b]\n 68965: a3 = a3 << 0x8\n 68968: a3 = a3 | a4\n 68971: a5 = a5 << 0x10\n 68974: s1 = s1 << 0x18\n 68977: a5 = a5 | s1\n 68980: a3 = a3 | a5\n 68983: a4 = u8 [a0 + 0x1d]\n 68986: a5 = u8 [a0 + 0x1c]\n 68989: s1 = u8 [a0 + 0x1e]\n 68992: a1 = u8 [a0 + 0x1f]\n 68995: a4 = a4 << 0x8\n 68998: a4 = a4 | a5\n 69001: s1 = s1 << 0x10\n 69004: a1 = a1 << 0x18\n 69007: a1 = a1 | s1\n 69010: a1 = a1 | a4\n 69013: a1 = a1 << 0x20\n 69016: a3 = a3 | a1\n 69019: a1 = u8 [a0 + 0x9]\n 69022: a4 = u8 [a0 + 0x8]\n 69025: a5 = u8 [a0 + 0xa]\n 69028: s1 = u8 [a0 + 0xb]\n 69031: a1 = a1 << 0x8\n 69034: a1 = a1 | a4\n 69037: a5 = a5 << 0x10\n 69040: s1 = s1 << 0x18\n 69043: a5 = a5 | s1\n 69046: a1 = a1 | a5\n 69049: a4 = u8 [a0 + 0xd]\n 69052: a5 = u8 [a0 + 0xc]\n 69055: s1 = u8 [a0 + 0xe]\n 69058: a0 = u8 [a0 + 0xf]\n 69061: a4 = a4 << 0x8\n 69064: a4 = a4 | a5\n 69067: s1 = s1 << 0x10\n 69070: a0 = a0 << 0x18\n 69073: a0 = a0 | s1\n 69076: a0 = a0 | a4\n 69079: a0 = a0 << 0x20\n 69082: a0 = a0 | a1\n 69085: s1 = reverse a0\n 69087: a1 = reverse a3\n 69089: a2 = reverse a2\n 69091: a0 = reverse t0\n 69093: u64 [sp + 0x38] = a0\n 69096: u64 [sp + 0x30] = a2\n 69099: a0 = a0 | a2\n 69102: a2 = a1\n 69104: a1 = a1 | s1\n 69107: a1 = a1 | a0\n 69110: a1 = a1 >> 0x20\n 69113: a0 = a0 | s1\n 69116: a0 = a0 << 0x20\n 69119: a0 = a0 | a1\n 69122: jump @877 if a0 != 0\n      : @874 (gas: 5)\n 69126: u64 [sp + 0x28] = a2\n 69129: i32 a0 = a2 + 0\n 69131: a1 = 0x20\n 69134: u64 [sp + 0x20] = a0\n 69137: ra = 788, jump @0\n      : @875 [@dyn 394] (gas: 50)\n 69144: u8 [a0 + 31] = 0\n 69147: u8 [a0 + 30] = 0\n 69150: u8 [a0 + 29] = 0\n 69153: u8 [a0 + 28] = 0\n 69156: u8 [a0 + 27] = 0\n 69159: u8 [a0 + 26] = 0\n 69162: u8 [a0 + 25] = 0\n 69165: u8 [a0 + 24] = 0\n 69168: u8 [a0 + 23] = 0\n 69171: u8 [a0 + 22] = 0\n 69174: u8 [a0 + 21] = 0\n 69177: u8 [a0 + 20] = 0\n 69180: u8 [a0 + 19] = 0\n 69183: u8 [a0 + 18] = 0\n 69186: u8 [a0 + 17] = 0\n 69189: u8 [a0 + 16] = 0\n 69192: u8 [a0 + 15] = 0\n 69195: u8 [a0 + 14] = 0\n 69198: u8 [a0 + 13] = 0\n 69201: u8 [a0 + 12] = 0\n 69204: u8 [a0 + 11] = 0\n 69207: u8 [a0 + 10] = 0\n 69210: u8 [a0 + 9] = 0\n 69213: u8 [a0 + 8] = 0\n 69216: u8 [a0 + 7] = 0\n 69219: u8 [a0 + 6] = 0\n 69222: u8 [a0 + 5] = 0\n 69225: u8 [a0 + 4] = 0\n 69228: u8 [a0 + 3] = 0xa0\n 69233: u8 [a0 + 2] = 0x79\n 69237: u8 [a0 + 1] = 0xc3\n 69242: u8 [a0 + 0] = 0x8\n 69245: a1 = u64 [sp + 0x28]\n 69248: a0 = a1 + 0x4\n 69251: a1 = a0 <u a1\n 69254: a3 = u64 [sp + 0x38]\n 69257: a2 = a3 + a1\n 69260: a3 = a2 <u a3\n 69263: a3 = a1 if a1 == 0\n 69266: a3 = a3 + s1\n 69269: a1 = a3 <u s1\n 69272: a4 = u64 [sp + 0x30]\n 69275: a4 = a4 + a1\n 69278: u64 [sp + 0xa8] = a2\n 69282: u64 [sp + 0xa0] = a0\n 69286: u64 [sp + 0xb0] = a3\n 69290: a0 = sp + 0xc0\n 69294: a1 = sp + 0xa0\n 69298: u64 [sp + 0xb8] = a4\n 69302: ra = 790, jump @416\n      : @876 [@dyn 395] (gas: 30)\n 69309: a0 = u64 [sp + 0xc8]\n 69313: t0 = u64 [sp + 0xd8]\n 69317: t1 = u64 [sp + 0xc0]\n 69321: a3 = u64 [sp + 0xd0]\n 69325: a1 = u64 [sp + 0x38]\n 69328: a4 = a0 ^ a1\n 69331: a5 = a0 <u a1\n 69334: t2 = a1\n 69336: a2 = u64 [sp + 0x28]\n 69339: a1 = t1 <u a2\n 69342: a5 = a1 if a4 == 0\n 69345: a4 = a3 - s1\n 69348: a3 = a3 <u s1\n 69351: s1 = u64 [sp + 0x30]\n 69354: s1 = t0 - s1\n 69357: s1 = s1 - a3\n 69360: a3 = a4 <u a5\n 69363: s1 = s1 - a3\n 69366: a4 = a4 - a5\n 69369: a0 = a0 - t2\n 69372: a1 = a0 - a1\n 69375: a0 = t1 - a2\n 69378: a1 = a1 | s1\n 69381: a2 = a0 | a4\n 69384: a2 = a2 | a1\n 69387: a1 = a1 | a4\n 69390: a2 = a2 >> 0x20\n 69393: a1 = a1 << 0x20\n 69396: a1 = a1 | a2\n 69399: jump @878 if a1 == 0\n      : @877 (gas: 1)\n 69402: trap\n      : @878 (gas: 4)\n 69403: i32 s1 = a0 + 0\n 69405: a0 = u64 [sp + 0x20]\n 69408: a1 = s1\n 69410: ra = 792, jump @0\n      : @879 [@dyn 396] (gas: 6)\n 69417: i32 a1 = a0 + 0\n 69419: a0 = 0x1\n 69422: a2 = s1\n 69424: ra = 0x31a\n 69428: ecalli 12 // 'seal_return'\n 69430: fallthrough\n      : @880 [@dyn 397] (gas: 12)\n 69431: a1 = u64 [a0 + 0x10]\n 69434: a2 = u64 [a0 + 0x18]\n 69437: a3 = u64 [a0 + 0x8]\n 69440: a0 = u64 [a0]\n 69442: a2 = a2 | a3\n 69445: a3 = a0 | a1\n 69448: a3 = a3 | a2\n 69451: a3 = a3 >> 0x20\n 69454: a1 = a1 | a2\n 69457: a1 = a1 << 0x20\n 69460: a1 = a1 | a3\n 69463: jump @883 if a1 != 0\n      : @881 (gas: 5)\n 69467: sp = sp + 0xfffffffffffffff8\n 69470: u64 [sp] = ra\n 69472: i32 a0 = a0 + 0\n 69474: a1 = 0x20\n 69477: ra = 796, jump @0\n      : @882 [@dyn 398] (gas: 37)\n 69484: u8 [a0 + 31] = 0\n 69487: u8 [a0 + 30] = 0\n 69490: u8 [a0 + 29] = 0\n 69493: u8 [a0 + 28] = 0\n 69496: u8 [a0 + 27] = 0\n 69499: u8 [a0 + 26] = 0\n 69502: u8 [a0 + 25] = 0\n 69505: u8 [a0 + 24] = 0\n 69508: u8 [a0 + 23] = 0\n 69511: u8 [a0 + 22] = 0\n 69514: u8 [a0 + 21] = 0\n 69517: u8 [a0 + 20] = 0\n 69520: u8 [a0 + 19] = 0\n 69523: u8 [a0 + 18] = 0\n 69526: u8 [a0 + 17] = 0\n 69529: u8 [a0 + 16] = 0\n 69532: u8 [a0 + 15] = 0\n 69535: u8 [a0 + 14] = 0\n 69538: u8 [a0 + 13] = 0\n 69541: u8 [a0 + 12] = 0\n 69544: u8 [a0 + 11] = 0\n 69547: u8 [a0 + 10] = 0\n 69550: u8 [a0 + 9] = 0\n 69553: u8 [a0 + 8] = 0\n 69556: u8 [a0 + 7] = 0x65\n 69560: u8 [a0 + 6] = 0x76\n 69564: a1 = 0x69\n 69567: u8 [a0 + 0x5] = a1\n 69570: u8 [a0 + 4] = 0x74\n 69574: u8 [a0 + 3] = 0x63\n 69578: u8 [a0 + 2] = 0x61\n 69582: a2 = 0x6e\n 69585: u8 [a0 + 0x1] = a2\n 69588: u8 [a0] = a1\n 69590: ra = u64 [sp]\n 69592: sp = sp + 0x8\n 69595: ret\n      : @883 (gas: 1)\n 69597: trap\n      : @884 (gas: 17)\n 69598: sp = sp + 0xffffffffffffffa0\n 69601: u64 [sp + 0x58] = ra\n 69604: u64 [sp + 0x50] = s0\n 69607: u64 [sp + 0x48] = s1\n 69610: a3 = u64 [a1 + 0x18]\n 69613: a4 = u64 [a1 + 0x10]\n 69616: a5 = u64 [a1 + 0x8]\n 69619: s1 = u64 [a1]\n 69621: a1 = a5 | a3\n 69624: a2 = s1 | a4\n 69627: a2 = a2 | a1\n 69630: a2 = a2 >> 0x20\n 69633: a1 = a1 | a4\n 69636: a1 = a1 << 0x20\n 69639: a1 = a1 | a2\n 69642: u64 [sp + 0x28] = a0\n 69645: jump @891 if a1 != 0\n      : @885 (gas: 19)\n 69649: a0 = s1 + 0x20\n 69652: u64 [sp + 0x30] = a0\n 69655: a0 = a0 <u s1\n 69658: a1 = a5 + a0\n 69661: u64 [sp + 0x40] = a1\n 69664: u64 [sp + 0x8] = a5\n 69667: s0 = a1 <u a5\n 69670: s0 = a0 if a0 == 0\n 69673: s0 = s0 + a4\n 69676: u64 [sp + 0x10] = a4\n 69679: a0 = s0 <u a4\n 69682: u64 [sp + 0x18] = a3\n 69685: a0 = a0 + a3\n 69688: u64 [sp + 0x38] = a0\n 69691: u64 [sp] = s1\n 69693: i32 a0 = s1 + 0\n 69695: a1 = 0x20\n 69698: s1 = 0x20\n 69701: ra = 798, jump @0\n      : @886 [@dyn 399] (gas: 45)\n 69708: u8 [a0 + 0x1f] = s1\n 69711: a1 = u64 [sp + 0x30]\n 69714: s1 = a1\n 69716: a1 = a1 | s0\n 69719: a2 = u64 [sp + 0x40]\n 69722: a4 = u64 [sp + 0x38]\n 69725: a2 = a2 | a4\n 69728: a1 = a1 | a2\n 69731: a1 = a1 >> 0x20\n 69734: u64 [sp + 0x20] = s0\n 69737: a2 = a2 | s0\n 69740: a2 = a2 << 0x20\n 69743: a1 = a1 | a2\n 69746: u8 [a0 + 30] = 0\n 69749: u8 [a0 + 29] = 0\n 69752: u8 [a0 + 28] = 0\n 69755: u8 [a0 + 27] = 0\n 69758: u8 [a0 + 26] = 0\n 69761: u8 [a0 + 25] = 0\n 69764: u8 [a0 + 24] = 0\n 69767: u8 [a0 + 23] = 0\n 69770: u8 [a0 + 22] = 0\n 69773: u8 [a0 + 21] = 0\n 69776: u8 [a0 + 20] = 0\n 69779: u8 [a0 + 19] = 0\n 69782: u8 [a0 + 18] = 0\n 69785: u8 [a0 + 17] = 0\n 69788: u8 [a0 + 16] = 0\n 69791: u8 [a0 + 15] = 0\n 69794: u8 [a0 + 14] = 0\n 69797: u8 [a0 + 13] = 0\n 69800: u8 [a0 + 12] = 0\n 69803: u8 [a0 + 11] = 0\n 69806: u8 [a0 + 10] = 0\n 69809: u8 [a0 + 9] = 0\n 69812: u8 [a0 + 8] = 0\n 69815: u8 [a0 + 7] = 0\n 69818: u8 [a0 + 6] = 0\n 69821: u8 [a0 + 5] = 0\n 69824: u8 [a0 + 4] = 0\n 69827: u8 [a0 + 3] = 0\n 69830: u8 [a0 + 2] = 0\n 69833: u8 [a0 + 1] = 0\n 69836: u8 [a0 + 0] = 0\n 69838: jump @891 if a1 != 0\n      : @887 (gas: 4)\n 69842: i32 s0 = s1 + 0\n 69844: a1 = 0x20\n 69847: a0 = s0\n 69849: ra = 800, jump @0\n      : @888 [@dyn 400] (gas: 41)\n 69856: u8 [a0 + 31] = 0x8\n 69860: u8 [a0 + 30] = 0\n 69863: u8 [a0 + 29] = 0\n 69866: u8 [a0 + 28] = 0\n 69869: u8 [a0 + 27] = 0\n 69872: u8 [a0 + 26] = 0\n 69875: u8 [a0 + 25] = 0\n 69878: u8 [a0 + 24] = 0\n 69881: u8 [a0 + 23] = 0\n 69884: u8 [a0 + 22] = 0\n 69887: u8 [a0 + 21] = 0\n 69890: u8 [a0 + 20] = 0\n 69893: u8 [a0 + 19] = 0\n 69896: u8 [a0 + 18] = 0\n 69899: u8 [a0 + 17] = 0\n 69902: u8 [a0 + 16] = 0\n 69905: u8 [a0 + 15] = 0\n 69908: u8 [a0 + 14] = 0\n 69911: u8 [a0 + 13] = 0\n 69914: u8 [a0 + 12] = 0\n 69917: u8 [a0 + 11] = 0\n 69920: u8 [a0 + 10] = 0\n 69923: u8 [a0 + 9] = 0\n 69926: u8 [a0 + 8] = 0\n 69929: u8 [a0 + 7] = 0\n 69932: u8 [a0 + 6] = 0\n 69935: u8 [a0 + 5] = 0\n 69938: u8 [a0 + 4] = 0\n 69941: u8 [a0 + 3] = 0\n 69944: u8 [a0 + 2] = 0\n 69947: u8 [a0 + 1] = 0\n 69950: a1 = u64 [sp + 0x20]\n 69953: a2 = u64 [sp + 0x38]\n 69956: a1 = a1 | a2\n 69959: a2 = 0xffffffe0\n 69969: a2 = s1 <u a2\n 69972: a3 = u64 [sp + 0x40]\n 69975: a2 = 0 if a3 != 0\n 69977: a2 = 0 if a1 != 0\n 69979: u8 [a0 + 0] = 0\n 69981: jump @891 if a2 == 0\n      : @889 (gas: 3)\n 69985: i32 a0 = s0 + 0x20\n 69988: a1 = 0x20\n 69991: ra = 802, jump @0\n      : @890 [@dyn 401] (gas: 54)\n 69998: u8 [a0 + 31] = 0\n 70001: u8 [a0 + 30] = 0\n 70004: u8 [a0 + 29] = 0\n 70007: u8 [a0 + 28] = 0\n 70010: u8 [a0 + 27] = 0\n 70013: u8 [a0 + 26] = 0\n 70016: u8 [a0 + 25] = 0\n 70019: u8 [a0 + 24] = 0\n 70022: u8 [a0 + 23] = 0\n 70025: u8 [a0 + 22] = 0\n 70028: u8 [a0 + 21] = 0\n 70031: u8 [a0 + 20] = 0\n 70034: u8 [a0 + 19] = 0\n 70037: u8 [a0 + 18] = 0\n 70040: u8 [a0 + 17] = 0\n 70043: u8 [a0 + 16] = 0\n 70046: u8 [a0 + 15] = 0\n 70049: u8 [a0 + 14] = 0\n 70052: u8 [a0 + 13] = 0\n 70055: u8 [a0 + 12] = 0\n 70058: u8 [a0 + 11] = 0\n 70061: u8 [a0 + 10] = 0\n 70064: u8 [a0 + 9] = 0\n 70067: u8 [a0 + 8] = 0\n 70070: u8 [a0 + 7] = 0x65\n 70074: u8 [a0 + 6] = 0x76\n 70078: u8 [a0 + 5] = 0x69\n 70082: u8 [a0 + 4] = 0x74\n 70086: u8 [a0 + 3] = 0x63\n 70090: u8 [a0 + 2] = 0x61\n 70094: u8 [a0 + 1] = 0x6e\n 70098: u8 [a0 + 0] = 0x69\n 70101: a1 = u64 [sp]\n 70103: a0 = a1 + 0x60\n 70106: a1 = a0 <u a1\n 70109: a3 = u64 [sp + 0x8]\n 70112: a2 = a3 + a1\n 70115: a3 = a2 <u a3\n 70118: a3 = a1 if a1 == 0\n 70121: a1 = u64 [sp + 0x10]\n 70124: a3 = a3 + a1\n 70127: a1 = a3 <u a1\n 70130: a4 = u64 [sp + 0x18]\n 70133: a1 = a1 + a4\n 70136: a4 = u64 [sp + 0x28]\n 70139: u64 [a4] = a0\n 70141: u64 [a4 + 0x8] = a2\n 70144: u64 [a4 + 0x10] = a3\n 70147: u64 [a4 + 0x18] = a1\n 70150: ra = u64 [sp + 0x58]\n 70153: s0 = u64 [sp + 0x50]\n 70156: s1 = u64 [sp + 0x48]\n 70159: sp = sp + 0x60\n 70162: ret\n      : @891 (gas: 1)\n 70164: trap\n      : @892 (gas: 17)\n 70165: sp = sp + 0xffffffffffffffa0\n 70168: u64 [sp + 0x58] = ra\n 70171: u64 [sp + 0x50] = s0\n 70174: u64 [sp + 0x48] = s1\n 70177: a3 = u64 [a1 + 0x18]\n 70180: a4 = u64 [a1 + 0x10]\n 70183: a5 = u64 [a1 + 0x8]\n 70186: s1 = u64 [a1]\n 70188: a1 = a5 | a3\n 70191: a2 = s1 | a4\n 70194: a2 = a2 | a1\n 70197: a2 = a2 >> 0x20\n 70200: a1 = a1 | a4\n 70203: a1 = a1 << 0x20\n 70206: a1 = a1 | a2\n 70209: u64 [sp + 0x28] = a0\n 70212: jump @899 if a1 != 0\n      : @893 (gas: 19)\n 70216: a0 = s1 + 0x20\n 70219: u64 [sp + 0x30] = a0\n 70222: a0 = a0 <u s1\n 70225: a1 = a5 + a0\n 70228: u64 [sp + 0x40] = a1\n 70231: u64 [sp + 0x8] = a5\n 70234: s0 = a1 <u a5\n 70237: s0 = a0 if a0 == 0\n 70240: s0 = s0 + a4\n 70243: u64 [sp + 0x10] = a4\n 70246: a0 = s0 <u a4\n 70249: u64 [sp + 0x18] = a3\n 70252: a0 = a0 + a3\n 70255: u64 [sp + 0x38] = a0\n 70258: u64 [sp] = s1\n 70260: i32 a0 = s1 + 0\n 70262: a1 = 0x20\n 70265: s1 = 0x20\n 70268: ra = 804, jump @0\n      : @894 [@dyn 402] (gas: 45)\n 70275: u8 [a0 + 0x1f] = s1\n 70278: a1 = u64 [sp + 0x30]\n 70281: s1 = a1\n 70283: a1 = a1 | s0\n 70286: a2 = u64 [sp + 0x40]\n 70289: a4 = u64 [sp + 0x38]\n 70292: a2 = a2 | a4\n 70295: a1 = a1 | a2\n 70298: a1 = a1 >> 0x20\n 70301: u64 [sp + 0x20] = s0\n 70304: a2 = a2 | s0\n 70307: a2 = a2 << 0x20\n 70310: a1 = a1 | a2\n 70313: u8 [a0 + 30] = 0\n 70316: u8 [a0 + 29] = 0\n 70319: u8 [a0 + 28] = 0\n 70322: u8 [a0 + 27] = 0\n 70325: u8 [a0 + 26] = 0\n 70328: u8 [a0 + 25] = 0\n 70331: u8 [a0 + 24] = 0\n 70334: u8 [a0 + 23] = 0\n 70337: u8 [a0 + 22] = 0\n 70340: u8 [a0 + 21] = 0\n 70343: u8 [a0 + 20] = 0\n 70346: u8 [a0 + 19] = 0\n 70349: u8 [a0 + 18] = 0\n 70352: u8 [a0 + 17] = 0\n 70355: u8 [a0 + 16] = 0\n 70358: u8 [a0 + 15] = 0\n 70361: u8 [a0 + 14] = 0\n 70364: u8 [a0 + 13] = 0\n 70367: u8 [a0 + 12] = 0\n 70370: u8 [a0 + 11] = 0\n 70373: u8 [a0 + 10] = 0\n 70376: u8 [a0 + 9] = 0\n 70379: u8 [a0 + 8] = 0\n 70382: u8 [a0 + 7] = 0\n 70385: u8 [a0 + 6] = 0\n 70388: u8 [a0 + 5] = 0\n 70391: u8 [a0 + 4] = 0\n 70394: u8 [a0 + 3] = 0\n 70397: u8 [a0 + 2] = 0\n 70400: u8 [a0 + 1] = 0\n 70403: u8 [a0 + 0] = 0\n 70405: jump @899 if a1 != 0\n      : @895 (gas: 4)\n 70409: i32 s0 = s1 + 0\n 70411: a1 = 0x20\n 70414: a0 = s0\n 70416: ra = 806, jump @0\n      : @896 [@dyn 403] (gas: 41)\n 70423: u8 [a0 + 31] = 0xc\n 70427: u8 [a0 + 30] = 0\n 70430: u8 [a0 + 29] = 0\n 70433: u8 [a0 + 28] = 0\n 70436: u8 [a0 + 27] = 0\n 70439: u8 [a0 + 26] = 0\n 70442: u8 [a0 + 25] = 0\n 70445: u8 [a0 + 24] = 0\n 70448: u8 [a0 + 23] = 0\n 70451: u8 [a0 + 22] = 0\n 70454: u8 [a0 + 21] = 0\n 70457: u8 [a0 + 20] = 0\n 70460: u8 [a0 + 19] = 0\n 70463: u8 [a0 + 18] = 0\n 70466: u8 [a0 + 17] = 0\n 70469: u8 [a0 + 16] = 0\n 70472: u8 [a0 + 15] = 0\n 70475: u8 [a0 + 14] = 0\n 70478: u8 [a0 + 13] = 0\n 70481: u8 [a0 + 12] = 0\n 70484: u8 [a0 + 11] = 0\n 70487: u8 [a0 + 10] = 0\n 70490: u8 [a0 + 9] = 0\n 70493: u8 [a0 + 8] = 0\n 70496: u8 [a0 + 7] = 0\n 70499: u8 [a0 + 6] = 0\n 70502: u8 [a0 + 5] = 0\n 70505: u8 [a0 + 4] = 0\n 70508: u8 [a0 + 3] = 0\n 70511: u8 [a0 + 2] = 0\n 70514: u8 [a0 + 1] = 0\n 70517: a1 = u64 [sp + 0x20]\n 70520: a2 = u64 [sp + 0x38]\n 70523: a1 = a1 | a2\n 70526: a2 = 0xffffffe0\n 70536: a2 = s1 <u a2\n 70539: a3 = u64 [sp + 0x40]\n 70542: a2 = 0 if a3 != 0\n 70544: a2 = 0 if a1 != 0\n 70546: u8 [a0 + 0] = 0\n 70548: jump @899 if a2 == 0\n      : @897 (gas: 3)\n 70552: i32 a0 = s0 + 0x20\n 70555: a1 = 0x20\n 70558: ra = 808, jump @0\n      : @898 [@dyn 404] (gas: 54)\n 70565: u8 [a0 + 31] = 0\n 70568: u8 [a0 + 30] = 0\n 70571: u8 [a0 + 29] = 0\n 70574: u8 [a0 + 28] = 0\n 70577: u8 [a0 + 27] = 0\n 70580: u8 [a0 + 26] = 0\n 70583: u8 [a0 + 25] = 0\n 70586: u8 [a0 + 24] = 0\n 70589: u8 [a0 + 23] = 0\n 70592: u8 [a0 + 22] = 0\n 70595: u8 [a0 + 21] = 0\n 70598: u8 [a0 + 20] = 0\n 70601: u8 [a0 + 19] = 0\n 70604: u8 [a0 + 18] = 0\n 70607: u8 [a0 + 17] = 0\n 70610: u8 [a0 + 16] = 0\n 70613: u8 [a0 + 15] = 0\n 70616: u8 [a0 + 14] = 0\n 70619: u8 [a0 + 13] = 0\n 70622: u8 [a0 + 12] = 0\n 70625: u8 [a0 + 11] = 0x74\n 70629: u8 [a0 + 10] = 0x6e\n 70633: u8 [a0 + 9] = 0x75\n 70637: u8 [a0 + 8] = 0x6f\n 70641: u8 [a0 + 7] = 0x6d\n 70645: u8 [a0 + 6] = 0x61\n 70649: u8 [a0 + 5] = 0x20\n 70653: u8 [a0 + 4] = 0x67\n 70657: u8 [a0 + 3] = 0x6e\n 70661: u8 [a0 + 2] = 0x6f\n 70665: u8 [a0 + 1] = 0x72\n 70669: u8 [a0 + 0] = 0x77\n 70672: a1 = u64 [sp]\n 70674: a0 = a1 + 0x60\n 70677: a1 = a0 <u a1\n 70680: a3 = u64 [sp + 0x8]\n 70683: a2 = a3 + a1\n 70686: a3 = a2 <u a3\n 70689: a3 = a1 if a1 == 0\n 70692: a1 = u64 [sp + 0x10]\n 70695: a3 = a3 + a1\n 70698: a1 = a3 <u a1\n 70701: a4 = u64 [sp + 0x18]\n 70704: a1 = a1 + a4\n 70707: a4 = u64 [sp + 0x28]\n 70710: u64 [a4] = a0\n 70712: u64 [a4 + 0x8] = a2\n 70715: u64 [a4 + 0x10] = a3\n 70718: u64 [a4 + 0x18] = a1\n 70721: ra = u64 [sp + 0x58]\n 70724: s0 = u64 [sp + 0x50]\n 70727: s1 = u64 [sp + 0x48]\n 70730: sp = sp + 0x60\n 70733: ret\n      : @899 (gas: 1)\n 70735: trap\n      : @900 (gas: 22)\n 70736: sp = sp + 0xfffffffffffffee0\n 70740: u64 [sp + 0x118] = ra\n 70744: u64 [sp + 0x110] = s0\n 70748: u64 [sp + 0x108] = s1\n 70752: s0 = sp + 0x120\n 70756: sp = sp & 0xffffffffffffffe0\n 70759: a4 = u64 [a1 + 0x10]\n 70762: a5 = u64 [a1 + 0x18]\n 70765: a2 = u64 [a1 + 0x8]\n 70768: a3 = u64 [a1]\n 70770: u64 [sp + 0x70] = a2\n 70773: u64 [sp + 0x58] = a5\n 70776: a1 = a2 | a5\n 70779: u64 [sp + 0x80] = a3\n 70783: a2 = a3 | a4\n 70786: a2 = a2 | a1\n 70789: a2 = a2 >> 0x20\n 70792: u64 [sp + 0x78] = a4\n 70795: a1 = a1 | a4\n 70798: a1 = a1 << 0x20\n 70801: a1 = a1 | a2\n 70804: jump @915 if a1 != 0\n      : @901 (gas: 12)\n 70808: a1 = u64 [a0 + 0x18]\n 70811: u64 [sp + 0x60] = a1\n 70814: a1 = u64 [a0 + 0x10]\n 70817: u64 [sp + 0x88] = a1\n 70821: a1 = u64 [a0 + 0x8]\n 70824: u64 [sp + 0x90] = a1\n 70828: a0 = u64 [a0]\n 70830: u64 [sp + 0x98] = a0\n 70834: a0 = i32 [sp + 0x80]\n 70838: a1 = 0x20\n 70841: u64 [sp + 0x68] = a0\n 70844: ra = 810, jump @0\n      : @902 [@dyn 405] (gas: 105)\n 70851: a1 = u8 [a0 + 0x11]\n 70854: a2 = u8 [a0 + 0x10]\n 70857: a3 = u8 [a0 + 0x12]\n 70860: a4 = u8 [a0 + 0x13]\n 70863: a1 = a1 << 0x8\n 70866: a1 = a1 | a2\n 70869: a3 = a3 << 0x10\n 70872: a4 = a4 << 0x18\n 70875: a3 = a3 | a4\n 70878: a1 = a1 | a3\n 70881: a2 = u8 [a0 + 0x15]\n 70884: a3 = u8 [a0 + 0x14]\n 70887: a4 = u8 [a0 + 0x16]\n 70890: a5 = u8 [a0 + 0x17]\n 70893: a2 = a2 << 0x8\n 70896: a2 = a2 | a3\n 70899: a4 = a4 << 0x10\n 70902: a5 = a5 << 0x18\n 70905: a4 = a4 | a5\n 70908: a2 = a2 | a4\n 70911: a2 = a2 << 0x20\n 70914: a1 = a1 | a2\n 70917: a2 = u8 [a0 + 0x19]\n 70920: a3 = u8 [a0 + 0x18]\n 70923: a4 = u8 [a0 + 0x1a]\n 70926: a5 = u8 [a0 + 0x1b]\n 70929: a2 = a2 << 0x8\n 70932: a2 = a2 | a3\n 70935: a4 = a4 << 0x10\n 70938: a5 = a5 << 0x18\n 70941: a4 = a4 | a5\n 70944: a2 = a2 | a4\n 70947: a3 = u8 [a0 + 0x1d]\n 70950: a4 = u8 [a0 + 0x1c]\n 70953: a5 = u8 [a0 + 0x1e]\n 70956: s1 = u8 [a0 + 0x1f]\n 70959: a3 = a3 << 0x8\n 70962: a3 = a3 | a4\n 70965: a5 = a5 << 0x10\n 70968: s1 = s1 << 0x18\n 70971: a5 = a5 | s1\n 70974: a3 = a3 | a5\n 70977: a3 = a3 << 0x20\n 70980: a2 = a2 | a3\n 70983: a3 = u8 [a0 + 0xd]\n 70986: a4 = u8 [a0 + 0xc]\n 70989: a5 = u8 [a0 + 0xe]\n 70992: a0 = u8 [a0 + 0xf]\n 70995: a3 = a3 << 0x8\n 70998: a3 = a3 | a4\n 71001: a5 = a5 << 0x10\n 71004: a0 = a0 << 0x18\n 71007: a0 = a0 | a5\n 71010: a0 = a0 | a3\n 71013: a2 = reverse a2\n 71015: u64 [sp + 0x50] = a2\n 71018: a1 = reverse a1\n 71020: u64 [sp + 0x48] = a1\n 71023: s1 = reverse a0\n 71025: s1 = s1 >> 0x20\n 71028: u64 [sp + 0x40] = s1\n 71031: s1 = u64 [sp + 0x60]\n 71034: u64 [sp + 0xd8] = s1\n 71038: a0 = u64 [sp + 0x88]\n 71042: u64 [sp + 0xd0] = a0\n 71046: a0 = u64 [sp + 0x90]\n 71050: u64 [sp + 0xc8] = a0\n 71054: a0 = u64 [sp + 0x98]\n 71058: u64 [sp + 0xc0] = a0\n 71062: u64 [sp + 248] = 0\n 71066: u64 [sp + 240] = 0\n 71070: u64 [sp + 232] = 0\n 71074: u64 [sp + 224] = 0\n 71078: u32 [sp + 160] = 0x20\n 71083: i32 a1 = sp + 0xc0\n 71087: i32 a3 = sp + 0xe0\n 71091: i32 a4 = sp + 0xa0\n 71095: a2 = 0xffffffffffffffff\n 71098: a0 = 0\n 71100: ecalli 7 // 'get_storage'\n 71102: a0 = u32 [sp + 0xf4]\n 71106: a0 = a0 << 0x20\n 71109: a1 = u64 [sp + 0xf8]\n 71113: a2 = u64 [sp + 0x40]\n 71116: a0 = a0 | a2\n 71119: u64 [sp + 0xd8] = s1\n 71123: a2 = u64 [sp + 0x88]\n 71127: u64 [sp + 0xd0] = a2\n 71131: a2 = u64 [sp + 0x90]\n 71135: u64 [sp + 0xc8] = a2\n 71139: a2 = u64 [sp + 0x98]\n 71143: u64 [sp + 0xc0] = a2\n 71147: u64 [sp + 0xf8] = a1\n 71151: u64 [sp + 0xf0] = a0\n 71155: a0 = u64 [sp + 0x48]\n 71158: u64 [sp + 0xe8] = a0\n 71162: a0 = u64 [sp + 0x50]\n 71165: u64 [sp + 0xe0] = a0\n 71169: i32 a1 = sp + 0xc0\n 71173: i32 a3 = sp + 0xe0\n 71177: a2 = 0xffffffffffffffff\n 71180: a4 = 0x20\n 71183: a0 = 0\n 71185: ecalli 14 // 'set_storage'\n 71187: fallthrough\n      : @903 (gas: 13)\n 71188: a0 = u64 [sp + 0x78]\n 71191: a2 = u64 [sp + 0x58]\n 71194: a2 = a2 | a0\n 71197: a0 = 0x100000000\n 71207: u64 [sp + 0x40] = a0\n 71210: a0 = 0xffffffe0\n 71220: a1 = u64 [sp + 0x80]\n 71224: a0 = a1 <u a0\n 71227: a1 = u64 [sp + 0x70]\n 71230: a0 = 0 if a1 != 0\n 71232: u64 [sp + 0x58] = a2\n 71235: a0 = 0 if a2 != 0\n 71237: jump @915 if a0 == 0\n      : @904 (gas: 20)\n 71241: a0 = u64 [sp + 0x98]\n 71245: a2 = a0 + 0x1\n 71248: u64 [sp + 0x48] = a2\n 71251: a0 = a2 <u 0x1\n 71254: a1 = u64 [sp + 0x90]\n 71258: a0 = a0 + a1\n 71261: u64 [sp + 0x78] = a0\n 71264: a0 = a0 | a2\n 71267: a0 = a0 <u 0x1\n 71270: a1 = u64 [sp + 0x88]\n 71274: a0 = a0 + a1\n 71277: u64 [sp + 0x50] = a0\n 71280: a0 = a0 <u a1\n 71283: a1 = u64 [sp + 0x60]\n 71286: a0 = a0 + a1\n 71289: u64 [sp + 0x38] = a0\n 71292: a0 = u64 [sp + 0x68]\n 71295: i32 a0 = a0 + 0x20\n 71298: a1 = 0x20\n 71301: ra = 812, jump @0\n      : @905 [@dyn 406] (gas: 137)\n 71308: a1 = u8 [a0 + 0x1]\n 71311: a2 = u8 [a0]\n 71313: a3 = u8 [a0 + 0x2]\n 71316: a4 = u8 [a0 + 0x3]\n 71319: a1 = a1 << 0x8\n 71322: a1 = a1 | a2\n 71325: a3 = a3 << 0x10\n 71328: a4 = a4 << 0x18\n 71331: a3 = a3 | a4\n 71334: a1 = a1 | a3\n 71337: a2 = u8 [a0 + 0x5]\n 71340: a3 = u8 [a0 + 0x4]\n 71343: a4 = u8 [a0 + 0x6]\n 71346: a5 = u8 [a0 + 0x7]\n 71349: a2 = a2 << 0x8\n 71352: a2 = a2 | a3\n 71355: a4 = a4 << 0x10\n 71358: a5 = a5 << 0x18\n 71361: a4 = a4 | a5\n 71364: a2 = a2 | a4\n 71367: a2 = a2 << 0x20\n 71370: t0 = a2 | a1\n 71373: a2 = u8 [a0 + 0x9]\n 71376: a3 = u8 [a0 + 0x8]\n 71379: a4 = u8 [a0 + 0xa]\n 71382: a5 = u8 [a0 + 0xb]\n 71385: a2 = a2 << 0x8\n 71388: a2 = a2 | a3\n 71391: a4 = a4 << 0x10\n 71394: a5 = a5 << 0x18\n 71397: a4 = a4 | a5\n 71400: a2 = a2 | a4\n 71403: a3 = u8 [a0 + 0xd]\n 71406: a4 = u8 [a0 + 0xc]\n 71409: a5 = u8 [a0 + 0xe]\n 71412: s1 = u8 [a0 + 0xf]\n 71415: a3 = a3 << 0x8\n 71418: a3 = a3 | a4\n 71421: a5 = a5 << 0x10\n 71424: s1 = s1 << 0x18\n 71427: a5 = a5 | s1\n 71430: a3 = a3 | a5\n 71433: a3 = a3 << 0x20\n 71436: a2 = a2 | a3\n 71439: a3 = u8 [a0 + 0x11]\n 71442: a4 = u8 [a0 + 0x10]\n 71445: a5 = u8 [a0 + 0x12]\n 71448: s1 = u8 [a0 + 0x13]\n 71451: a3 = a3 << 0x8\n 71454: a3 = a3 | a4\n 71457: a5 = a5 << 0x10\n 71460: s1 = s1 << 0x18\n 71463: a5 = a5 | s1\n 71466: a3 = a3 | a5\n 71469: a4 = u8 [a0 + 0x15]\n 71472: a5 = u8 [a0 + 0x14]\n 71475: s1 = u8 [a0 + 0x16]\n 71478: a1 = u8 [a0 + 0x17]\n 71481: a4 = a4 << 0x8\n 71484: a4 = a4 | a5\n 71487: s1 = s1 << 0x10\n 71490: a1 = a1 << 0x18\n 71493: a1 = a1 | s1\n 71496: a1 = a1 | a4\n 71499: a1 = a1 << 0x20\n 71502: a3 = a3 | a1\n 71505: a1 = u8 [a0 + 0x19]\n 71508: a4 = u8 [a0 + 0x18]\n 71511: a5 = u8 [a0 + 0x1a]\n 71514: s1 = u8 [a0 + 0x1b]\n 71517: a1 = a1 << 0x8\n 71520: a1 = a1 | a4\n 71523: a5 = a5 << 0x10\n 71526: s1 = s1 << 0x18\n 71529: a5 = a5 | s1\n 71532: a1 = a1 | a5\n 71535: a4 = u8 [a0 + 0x1d]\n 71538: a5 = u8 [a0 + 0x1c]\n 71541: s1 = u8 [a0 + 0x1e]\n 71544: a0 = u8 [a0 + 0x1f]\n 71547: a4 = a4 << 0x8\n 71550: a4 = a4 | a5\n 71553: s1 = s1 << 0x10\n 71556: a0 = a0 << 0x18\n 71559: a0 = a0 | s1\n 71562: a0 = a0 | a4\n 71565: a0 = a0 << 0x20\n 71568: a0 = a0 | a1\n 71571: u32 [sp + 160] = 0x20\n 71576: a0 = reverse a0\n 71578: u64 [sp + 0x30] = a0\n 71581: a0 = reverse a3\n 71583: u64 [sp + 0x28] = a0\n 71586: a0 = reverse a2\n 71588: u64 [sp + 0x20] = a0\n 71591: a0 = reverse t0\n 71593: u64 [sp + 0x18] = a0\n 71596: a0 = u64 [sp + 0x50]\n 71599: u64 [sp + 0xd0] = a0\n 71603: a0 = u64 [sp + 0x78]\n 71606: u64 [sp + 0xc8] = a0\n 71610: a0 = u64 [sp + 0x48]\n 71613: u64 [sp + 0xc0] = a0\n 71617: s1 = u64 [sp + 0x38]\n 71620: u64 [sp + 0xd8] = s1\n 71624: u64 [sp + 248] = 0\n 71628: u64 [sp + 240] = 0\n 71632: u64 [sp + 232] = 0\n 71636: u64 [sp + 224] = 0\n 71640: i32 a1 = sp + 0xc0\n 71644: i32 a3 = sp + 0xe0\n 71648: i32 a4 = sp + 0xa0\n 71652: a2 = 0xffffffffffffffff\n 71655: a0 = 0\n 71657: ecalli 7 // 'get_storage'\n 71659: u64 [sp + 0xd8] = s1\n 71663: a0 = u64 [sp + 0x50]\n 71666: u64 [sp + 0xd0] = a0\n 71670: a0 = u64 [sp + 0x78]\n 71673: u64 [sp + 0xc8] = a0\n 71677: a0 = u64 [sp + 0x48]\n 71680: u64 [sp + 0xc0] = a0\n 71684: a0 = u64 [sp + 0x18]\n 71687: u64 [sp + 0xf8] = a0\n 71691: a0 = u64 [sp + 0x20]\n 71694: u64 [sp + 0xf0] = a0\n 71698: a0 = u64 [sp + 0x28]\n 71701: u64 [sp + 0xe8] = a0\n 71705: a0 = u64 [sp + 0x30]\n 71708: u64 [sp + 0xe0] = a0\n 71712: i32 a1 = sp + 0xc0\n 71716: i32 a3 = sp + 0xe0\n 71720: a2 = 0xffffffffffffffff\n 71723: a4 = 0x20\n 71726: a0 = 0\n 71728: ecalli 14 // 'set_storage'\n 71730: fallthrough\n      : @906 (gas: 9)\n 71731: a0 = u64 [sp + 0x40]\n 71734: a0 = a0 + 0xffffffffffffffc0\n 71737: a1 = u64 [sp + 0x80]\n 71741: a0 = a1 <u a0\n 71744: a1 = u64 [sp + 0x70]\n 71747: a0 = 0 if a1 != 0\n 71749: a1 = u64 [sp + 0x58]\n 71752: a0 = 0 if a1 != 0\n 71754: jump @915 if a0 == 0\n      : @907 (gas: 20)\n 71758: a0 = u64 [sp + 0x98]\n 71762: a1 = a0 + 0x2\n 71765: u64 [sp + 0x78] = a1\n 71768: a0 = a1 <u a0\n 71771: a1 = u64 [sp + 0x90]\n 71775: a2 = a1 + a0\n 71778: u64 [sp + 0x98] = a2\n 71782: a1 = a2 <u a1\n 71785: a1 = a0 if a0 == 0\n 71788: a0 = u64 [sp + 0x88]\n 71792: a1 = a1 + a0\n 71795: u64 [sp + 0x90] = a1\n 71799: a0 = a1 <u a0\n 71802: a1 = u64 [sp + 0x60]\n 71805: a0 = a0 + a1\n 71808: u64 [sp + 0x88] = a0\n 71812: a0 = u64 [sp + 0x68]\n 71815: i32 a0 = a0 + 0x40\n 71818: a1 = 0x20\n 71821: ra = 814, jump @0\n      : @908 [@dyn 407] (gas: 135)\n 71828: a1 = u8 [a0 + 0x11]\n 71831: a2 = u8 [a0 + 0x10]\n 71834: a3 = u8 [a0 + 0x12]\n 71837: a4 = u8 [a0 + 0x13]\n 71840: a1 = a1 << 0x8\n 71843: a1 = a1 | a2\n 71846: a3 = a3 << 0x10\n 71849: a4 = a4 << 0x18\n 71852: a3 = a3 | a4\n 71855: t0 = a3 | a1\n 71858: a2 = u8 [a0 + 0x1]\n 71861: a3 = u8 [a0]\n 71863: a4 = u8 [a0 + 0x2]\n 71866: a5 = u8 [a0 + 0x3]\n 71869: a2 = a2 << 0x8\n 71872: a2 = a2 | a3\n 71875: a4 = a4 << 0x10\n 71878: a5 = a5 << 0x18\n 71881: a4 = a4 | a5\n 71884: t1 = a4 | a2\n 71887: a3 = u8 [a0 + 0x15]\n 71890: a4 = u8 [a0 + 0x14]\n 71893: a5 = u8 [a0 + 0x16]\n 71896: s1 = u8 [a0 + 0x17]\n 71899: a3 = a3 << 0x8\n 71902: a3 = a3 | a4\n 71905: a5 = a5 << 0x10\n 71908: s1 = s1 << 0x18\n 71911: a5 = a5 | s1\n 71914: t2 = a5 | a3\n 71917: a4 = u8 [a0 + 0x5]\n 71920: a5 = u8 [a0 + 0x4]\n 71923: s1 = u8 [a0 + 0x6]\n 71926: a1 = u8 [a0 + 0x7]\n 71929: a4 = a4 << 0x8\n 71932: a4 = a4 | a5\n 71935: s1 = s1 << 0x10\n 71938: a1 = a1 << 0x18\n 71941: a1 = a1 | s1\n 71944: ra = a1 | a4\n 71947: a1 = u8 [a0 + 0x19]\n 71950: a5 = u8 [a0 + 0x18]\n 71953: s1 = u8 [a0 + 0x1a]\n 71956: a2 = u8 [a0 + 0x1b]\n 71959: a1 = a1 << 0x8\n 71962: a1 = a1 | a5\n 71965: s1 = s1 << 0x10\n 71968: a2 = a2 << 0x18\n 71971: a2 = a2 | s1\n 71974: a5 = a2 | a1\n 71977: a1 = u8 [a0 + 0x9]\n 71980: a2 = u8 [a0 + 0x8]\n 71983: s1 = u8 [a0 + 0xa]\n 71986: a3 = u8 [a0 + 0xb]\n 71989: a1 = a1 << 0x8\n 71992: a1 = a1 | a2\n 71995: s1 = s1 << 0x10\n 71998: a3 = a3 << 0x18\n 72001: a3 = a3 | s1\n 72004: s1 = a3 | a1\n 72007: a1 = u8 [a0 + 0x1d]\n 72010: a2 = u8 [a0 + 0x1c]\n 72013: a3 = u8 [a0 + 0x1e]\n 72016: a4 = u8 [a0 + 0x1f]\n 72019: a1 = a1 << 0x8\n 72022: a1 = a1 | a2\n 72025: a3 = a3 << 0x10\n 72028: a4 = a4 << 0x18\n 72031: a3 = a3 | a4\n 72034: a1 = a1 | a3\n 72037: a2 = u8 [a0 + 0xd]\n 72040: a3 = u8 [a0 + 0xc]\n 72043: a4 = u8 [a0 + 0xe]\n 72046: a0 = u8 [a0 + 0xf]\n 72049: a2 = a2 << 0x8\n 72052: a2 = a2 | a3\n 72055: a4 = a4 << 0x10\n 72058: a0 = a0 << 0x18\n 72061: a0 = a0 | a4\n 72064: a0 = a0 | a2\n 72067: a0 = a0 | a1\n 72070: a5 = a5 | s1\n 72073: a0 = a0 << 0x20\n 72076: a0 = a0 | a5\n 72079: a1 = ra | t2\n 72082: a2 = t1 | t0\n 72085: a1 = a1 << 0x20\n 72088: a1 = a1 | a2\n 72091: a0 = a0 | a1\n 72094: a0 = a0 >u 0\n 72096: u64 [sp + 0x60] = a0\n 72099: a0 = u64 [sp + 0x88]\n 72103: u64 [sp + 0xd8] = a0\n 72107: a0 = u64 [sp + 0x90]\n 72111: u64 [sp + 0xd0] = a0\n 72115: a0 = u64 [sp + 0x98]\n 72119: u64 [sp + 0xc8] = a0\n 72123: s1 = u64 [sp + 0x78]\n 72126: u64 [sp + 0xc0] = s1\n 72130: u64 [sp + 248] = 0\n 72134: u64 [sp + 240] = 0\n 72138: u64 [sp + 232] = 0\n 72142: u64 [sp + 224] = 0\n 72146: u32 [sp + 160] = 0x20\n 72151: i32 a1 = sp + 0xc0\n 72155: i32 a3 = sp + 0xe0\n 72159: i32 a4 = sp + 0xa0\n 72163: a2 = 0xffffffffffffffff\n 72166: a0 = 0\n 72168: ecalli 7 // 'get_storage'\n 72170: a0 = u64 [sp + 0xe0]\n 72174: a1 = u64 [sp + 0xe8]\n 72178: a2 = u64 [sp + 0xf0]\n 72182: a3 = u64 [sp + 0xf8]\n 72186: a0 = a0 & 0xffffffffffffff00\n 72190: a4 = u64 [sp + 0x60]\n 72193: a0 = a0 | a4\n 72196: a4 = u64 [sp + 0x88]\n 72200: u64 [sp + 0xd8] = a4\n 72204: a4 = u64 [sp + 0x90]\n 72208: u64 [sp + 0xd0] = a4\n 72212: a4 = u64 [sp + 0x98]\n 72216: u64 [sp + 0xc8] = a4\n 72220: u64 [sp + 0xc0] = s1\n 72224: u64 [sp + 0xf8] = a3\n 72228: u64 [sp + 0xf0] = a2\n 72232: u64 [sp + 0xe8] = a1\n 72236: u64 [sp + 0xe0] = a0\n 72240: i32 a1 = sp + 0xc0\n 72244: i32 a3 = sp + 0xe0\n 72248: a2 = 0xffffffffffffffff\n 72251: a4 = 0x20\n 72254: a0 = 0\n 72256: ecalli 14 // 'set_storage'\n 72258: fallthrough\n      : @909 (gas: 10)\n 72259: a0 = 0x100000000\n 72269: u64 [sp + 0x60] = a0\n 72272: a0 = 0xffffffa0\n 72282: a1 = u64 [sp + 0x80]\n 72286: a0 = a1 <u a0\n 72289: a1 = u64 [sp + 0x70]\n 72292: a0 = 0 if a1 != 0\n 72294: a1 = u64 [sp + 0x58]\n 72297: a0 = 0 if a1 != 0\n 72299: jump @915 if a0 == 0\n      : @910 (gas: 4)\n 72303: a0 = u64 [sp + 0x68]\n 72306: i32 a0 = a0 + 0x60\n 72309: a1 = 0x20\n 72312: ra = 816, jump @0\n      : @911 [@dyn 408] (gas: 135)\n 72319: a1 = u8 [a0 + 0x1d]\n 72322: a2 = u8 [a0 + 0x1c]\n 72325: a3 = u8 [a0 + 0x1e]\n 72328: a4 = u8 [a0 + 0x1f]\n 72331: a1 = a1 << 0x8\n 72334: a1 = a1 | a2\n 72337: a3 = a3 << 0x10\n 72340: a4 = a4 << 0x18\n 72343: a3 = a3 | a4\n 72346: a1 = a1 | a3\n 72349: a2 = u8 [a0 + 0xd]\n 72352: a3 = u8 [a0 + 0xc]\n 72355: a4 = u8 [a0 + 0xe]\n 72358: a5 = u8 [a0 + 0xf]\n 72361: a2 = a2 << 0x8\n 72364: a2 = a2 | a3\n 72367: a4 = a4 << 0x10\n 72370: a5 = a5 << 0x18\n 72373: a4 = a4 | a5\n 72376: a2 = a2 | a4\n 72379: a1 = a1 | a2\n 72382: a1 = a1 << 0x20\n 72385: a2 = u8 [a0 + 0x9]\n 72388: a3 = u8 [a0 + 0x8]\n 72391: a4 = u8 [a0 + 0xa]\n 72394: a5 = u8 [a0 + 0xb]\n 72397: a2 = a2 << 0x8\n 72400: a2 = a2 | a3\n 72403: a4 = a4 << 0x10\n 72406: a5 = a5 << 0x18\n 72409: a4 = a4 | a5\n 72412: a2 = a2 | a4\n 72415: a3 = u8 [a0 + 0x19]\n 72418: a4 = u8 [a0 + 0x18]\n 72421: a5 = u8 [a0 + 0x1a]\n 72424: s1 = u8 [a0 + 0x1b]\n 72427: a3 = a3 << 0x8\n 72430: a3 = a3 | a4\n 72433: a5 = a5 << 0x10\n 72436: s1 = s1 << 0x18\n 72439: a5 = a5 | s1\n 72442: a3 = a3 | a5\n 72445: a2 = a2 | a3\n 72448: a1 = a1 | a2\n 72451: a2 = u8 [a0 + 0x15]\n 72454: a3 = u8 [a0 + 0x14]\n 72457: a4 = u8 [a0 + 0x16]\n 72460: a5 = u8 [a0 + 0x17]\n 72463: a2 = a2 << 0x8\n 72466: a2 = a2 | a3\n 72469: a4 = a4 << 0x10\n 72472: a5 = a5 << 0x18\n 72475: a4 = a4 | a5\n 72478: a2 = a2 | a4\n 72481: a3 = u8 [a0 + 0x5]\n 72484: a4 = u8 [a0 + 0x4]\n 72487: a5 = u8 [a0 + 0x6]\n 72490: s1 = u8 [a0 + 0x7]\n 72493: a3 = a3 << 0x8\n 72496: a3 = a3 | a4\n 72499: a5 = a5 << 0x10\n 72502: s1 = s1 << 0x18\n 72505: a5 = a5 | s1\n 72508: a3 = a3 | a5\n 72511: a2 = a2 | a3\n 72514: a3 = u8 [a0 + 0x1]\n 72517: a4 = u8 [a0]\n 72519: a5 = u8 [a0 + 0x2]\n 72522: s1 = u8 [a0 + 0x3]\n 72525: a3 = a3 << 0x8\n 72528: a3 = a3 | a4\n 72531: a5 = a5 << 0x10\n 72534: s1 = s1 << 0x18\n 72537: a4 = u8 [a0 + 0x11]\n 72540: a5 = a5 | s1\n 72543: a3 = a3 | a5\n 72546: a5 = u8 [a0 + 0x10]\n 72549: a4 = a4 << 0x8\n 72552: s1 = u8 [a0 + 0x12]\n 72555: a0 = u8 [a0 + 0x13]\n 72558: a4 = a4 | a5\n 72561: a2 = a2 << 0x20\n 72564: s1 = s1 << 0x10\n 72567: a0 = a0 << 0x18\n 72570: a0 = a0 | s1\n 72573: a0 = a0 | a4\n 72576: a0 = a0 | a3\n 72579: a0 = a0 | a2\n 72582: a0 = a0 | a1\n 72585: s1 = a0 >u 0\n 72587: a0 = u64 [sp + 0x88]\n 72591: u64 [sp + 0xd8] = a0\n 72595: a0 = u64 [sp + 0x90]\n 72599: u64 [sp + 0xd0] = a0\n 72603: a0 = u64 [sp + 0x98]\n 72607: u64 [sp + 0xc8] = a0\n 72611: a0 = u64 [sp + 0x78]\n 72614: u64 [sp + 0xc0] = a0\n 72618: u64 [sp + 248] = 0\n 72622: u64 [sp + 240] = 0\n 72626: u64 [sp + 232] = 0\n 72630: u64 [sp + 224] = 0\n 72634: u32 [sp + 160] = 0x20\n 72639: i32 a1 = sp + 0xc0\n 72643: i32 a3 = sp + 0xe0\n 72647: i32 a4 = sp + 0xa0\n 72651: a2 = 0xffffffffffffffff\n 72654: a0 = 0\n 72656: ecalli 7 // 'get_storage'\n 72658: a0 = u64 [sp + 0xe8]\n 72662: a1 = u64 [sp + 0xf0]\n 72666: a2 = u64 [sp + 0xf8]\n 72670: a3 = u64 [sp + 0xe0]\n 72674: s1 = s1 << 0x8\n 72677: a3 = a3 & 0xffffffffffff00ff\n 72682: a3 = a3 | s1\n 72685: a4 = u64 [sp + 0x88]\n 72689: u64 [sp + 0xd8] = a4\n 72693: a4 = u64 [sp + 0x90]\n 72697: u64 [sp + 0xd0] = a4\n 72701: a4 = u64 [sp + 0x98]\n 72705: u64 [sp + 0xc8] = a4\n 72709: a4 = u64 [sp + 0x78]\n 72712: u64 [sp + 0xc0] = a4\n 72716: u64 [sp + 0xf8] = a2\n 72720: u64 [sp + 0xf0] = a1\n 72724: u64 [sp + 0xe8] = a0\n 72728: u64 [sp + 0xe0] = a3\n 72732: i32 a1 = sp + 0xc0\n 72736: i32 a3 = sp + 0xe0\n 72740: a2 = 0xffffffffffffffff\n 72743: a4 = 0x20\n 72746: a0 = 0\n 72748: ecalli 14 // 'set_storage'\n 72750: fallthrough\n      : @912 (gas: 9)\n 72751: a0 = u64 [sp + 0x60]\n 72754: a0 = a0 + 0xffffffffffffff80\n 72757: a1 = u64 [sp + 0x80]\n 72761: a0 = a1 <u a0\n 72764: a1 = u64 [sp + 0x70]\n 72767: a0 = 0 if a1 != 0\n 72769: a1 = u64 [sp + 0x58]\n 72772: a0 = 0 if a1 != 0\n 72774: jump @915 if a0 == 0\n      : @913 (gas: 4)\n 72778: a0 = u64 [sp + 0x68]\n 72781: i32 a0 = a0 + 0x80\n 72785: a1 = 0x20\n 72788: ra = 818, jump @0\n      : @914 [@dyn 409] (gas: 140)\n 72795: a1 = u8 [a0 + 0x1d]\n 72798: a2 = u8 [a0 + 0x1c]\n 72801: a3 = u8 [a0 + 0x1e]\n 72804: a4 = u8 [a0 + 0x1f]\n 72807: a1 = a1 << 0x8\n 72810: a1 = a1 | a2\n 72813: a3 = a3 << 0x10\n 72816: a4 = a4 << 0x18\n 72819: a3 = a3 | a4\n 72822: a1 = a1 | a3\n 72825: a2 = u8 [a0 + 0xd]\n 72828: a3 = u8 [a0 + 0xc]\n 72831: a4 = u8 [a0 + 0xe]\n 72834: a5 = u8 [a0 + 0xf]\n 72837: a2 = a2 << 0x8\n 72840: a2 = a2 | a3\n 72843: a4 = a4 << 0x10\n 72846: a5 = a5 << 0x18\n 72849: a4 = a4 | a5\n 72852: a2 = a2 | a4\n 72855: a1 = a1 | a2\n 72858: a1 = a1 << 0x20\n 72861: a2 = u8 [a0 + 0x9]\n 72864: a3 = u8 [a0 + 0x8]\n 72867: a4 = u8 [a0 + 0xa]\n 72870: a5 = u8 [a0 + 0xb]\n 72873: a2 = a2 << 0x8\n 72876: a2 = a2 | a3\n 72879: a4 = a4 << 0x10\n 72882: a5 = a5 << 0x18\n 72885: a4 = a4 | a5\n 72888: a2 = a2 | a4\n 72891: a3 = u8 [a0 + 0x19]\n 72894: a4 = u8 [a0 + 0x18]\n 72897: a5 = u8 [a0 + 0x1a]\n 72900: s1 = u8 [a0 + 0x1b]\n 72903: a3 = a3 << 0x8\n 72906: a3 = a3 | a4\n 72909: a5 = a5 << 0x10\n 72912: s1 = s1 << 0x18\n 72915: a5 = a5 | s1\n 72918: a3 = a3 | a5\n 72921: a2 = a2 | a3\n 72924: a1 = a1 | a2\n 72927: a2 = u8 [a0 + 0x15]\n 72930: a3 = u8 [a0 + 0x14]\n 72933: a4 = u8 [a0 + 0x16]\n 72936: a5 = u8 [a0 + 0x17]\n 72939: a2 = a2 << 0x8\n 72942: a2 = a2 | a3\n 72945: a4 = a4 << 0x10\n 72948: a5 = a5 << 0x18\n 72951: a4 = a4 | a5\n 72954: a2 = a2 | a4\n 72957: a3 = u8 [a0 + 0x5]\n 72960: a4 = u8 [a0 + 0x4]\n 72963: a5 = u8 [a0 + 0x6]\n 72966: s1 = u8 [a0 + 0x7]\n 72969: a3 = a3 << 0x8\n 72972: a3 = a3 | a4\n 72975: a5 = a5 << 0x10\n 72978: s1 = s1 << 0x18\n 72981: a5 = a5 | s1\n 72984: a3 = a3 | a5\n 72987: a2 = a2 | a3\n 72990: a3 = u8 [a0 + 0x1]\n 72993: a4 = u8 [a0]\n 72995: a5 = u8 [a0 + 0x2]\n 72998: s1 = u8 [a0 + 0x3]\n 73001: a3 = a3 << 0x8\n 73004: a3 = a3 | a4\n 73007: a5 = a5 << 0x10\n 73010: s1 = s1 << 0x18\n 73013: a4 = u8 [a0 + 0x11]\n 73016: a5 = a5 | s1\n 73019: a3 = a3 | a5\n 73022: a5 = u8 [a0 + 0x10]\n 73025: a4 = a4 << 0x8\n 73028: s1 = u8 [a0 + 0x12]\n 73031: a0 = u8 [a0 + 0x13]\n 73034: a4 = a4 | a5\n 73037: a2 = a2 << 0x20\n 73040: s1 = s1 << 0x10\n 73043: a0 = a0 << 0x18\n 73046: a0 = a0 | s1\n 73049: a0 = a0 | a4\n 73052: a0 = a0 | a3\n 73055: a0 = a0 | a2\n 73058: a0 = a0 | a1\n 73061: s1 = a0 >u 0\n 73063: a0 = u64 [sp + 0x88]\n 73067: u64 [sp + 0xd8] = a0\n 73071: a0 = u64 [sp + 0x90]\n 73075: u64 [sp + 0xd0] = a0\n 73079: a0 = u64 [sp + 0x98]\n 73083: u64 [sp + 0xc8] = a0\n 73087: a0 = u64 [sp + 0x78]\n 73090: u64 [sp + 0xc0] = a0\n 73094: u64 [sp + 248] = 0\n 73098: u64 [sp + 240] = 0\n 73102: u64 [sp + 232] = 0\n 73106: u64 [sp + 224] = 0\n 73110: u32 [sp + 160] = 0x20\n 73115: i32 a1 = sp + 0xc0\n 73119: i32 a3 = sp + 0xe0\n 73123: i32 a4 = sp + 0xa0\n 73127: a2 = 0xffffffffffffffff\n 73130: a0 = 0\n 73132: ecalli 7 // 'get_storage'\n 73134: a0 = u64 [sp + 0xe8]\n 73138: a1 = u64 [sp + 0xf0]\n 73142: a2 = u64 [sp + 0xf8]\n 73146: a3 = u64 [sp + 0xe0]\n 73150: s1 = s1 << 0x10\n 73153: a3 = a3 & 0xffffffffff00ffff\n 73159: a3 = a3 | s1\n 73162: a4 = u64 [sp + 0x88]\n 73166: u64 [sp + 0xd8] = a4\n 73170: a4 = u64 [sp + 0x90]\n 73174: u64 [sp + 0xd0] = a4\n 73178: a4 = u64 [sp + 0x98]\n 73182: u64 [sp + 0xc8] = a4\n 73186: a4 = u64 [sp + 0x78]\n 73189: u64 [sp + 0xc0] = a4\n 73193: u64 [sp + 0xf8] = a2\n 73197: u64 [sp + 0xf0] = a1\n 73201: u64 [sp + 0xe8] = a0\n 73205: u64 [sp + 0xe0] = a3\n 73209: i32 a1 = sp + 0xc0\n 73213: i32 a3 = sp + 0xe0\n 73217: a2 = 0xffffffffffffffff\n 73220: a4 = 0x20\n 73223: a0 = 0\n 73225: ecalli 14 // 'set_storage'\n 73227: sp = s0 + 0xfffffffffffffee0\n 73231: ra = u64 [sp + 0x118]\n 73235: s0 = u64 [sp + 0x110]\n 73239: s1 = u64 [sp + 0x108]\n 73243: sp = sp + 0x120\n 73247: ret\n      : @915 (gas: 1)\n 73249: trap\n      : @916 [@dyn 410] (gas: 103)\n 73250: a1 = u64 [s1 + 0x180]\n 73254: a1 = reverse a1\n 73256: a2 = u64 [s1 + 0x188]\n 73260: a2 = reverse a2\n 73262: a3 = u64 [s1 + 0x190]\n 73266: a3 = reverse a3\n 73268: a4 = u64 [s1 + 0x198]\n 73272: a4 = reverse a4\n 73274: a5 = a4 >> 0x38\n 73277: u64 [s1 + 0x158] = a5\n 73281: u8 [a0 + 0x1f] = a5\n 73284: a5 = a4 >> 0x30\n 73287: u64 [s1 + 0x150] = a5\n 73291: u8 [a0 + 0x1e] = a5\n 73294: a5 = a4 >> 0x28\n 73297: u64 [s1 + 0x148] = a5\n 73301: u8 [a0 + 0x1d] = a5\n 73304: a5 = a4 >> 0x20\n 73307: u64 [s1 + 0x140] = a5\n 73311: u8 [a0 + 0x1c] = a5\n 73314: a5 = a4 >> 0x18\n 73317: u64 [s1 + 0x138] = a5\n 73321: u8 [a0 + 0x1b] = a5\n 73324: a5 = a4 >> 0x10\n 73327: u64 [s1 + 0x130] = a5\n 73331: u8 [a0 + 0x1a] = a5\n 73334: a5 = a4 >> 0x8\n 73337: u64 [s1 + 0x128] = a5\n 73341: u8 [a0 + 0x19] = a5\n 73344: u64 [s1 + 0x168] = a4\n 73348: u8 [a0 + 0x18] = a4\n 73351: a4 = a3 >> 0x38\n 73354: u64 [s1 + 0x120] = a4\n 73358: u8 [a0 + 0x17] = a4\n 73361: a4 = a3 >> 0x30\n 73364: u64 [s1 + 0x118] = a4\n 73368: u8 [a0 + 0x16] = a4\n 73371: a4 = a3 >> 0x28\n 73374: u64 [s1 + 0x110] = a4\n 73378: u8 [a0 + 0x15] = a4\n 73381: a4 = a3 >> 0x20\n 73384: u64 [s1 + 0x108] = a4\n 73388: u8 [a0 + 0x14] = a4\n 73391: a4 = a3 >> 0x18\n 73394: u64 [s1 + 0x100] = a4\n 73398: u8 [a0 + 0x13] = a4\n 73401: a4 = a3 >> 0x10\n 73404: u64 [s1 + 0xf8] = a4\n 73408: u8 [a0 + 0x12] = a4\n 73411: a4 = a3 >> 0x8\n 73414: u64 [s1 + 0xf0] = a4\n 73418: u8 [a0 + 0x11] = a4\n 73421: u64 [s1 + 0x170] = a3\n 73425: u8 [a0 + 0x10] = a3\n 73428: a3 = a2 >> 0x38\n 73431: u64 [s1 + 0xe8] = a3\n 73435: u8 [a0 + 0xf] = a3\n 73438: a3 = a2 >> 0x30\n 73441: u64 [s1 + 0xe0] = a3\n 73445: u8 [a0 + 0xe] = a3\n 73448: a3 = a2 >> 0x28\n 73451: u64 [s1 + 0xd8] = a3\n 73455: u8 [a0 + 0xd] = a3\n 73458: a3 = a2 >> 0x20\n 73461: u64 [s1 + 0xd0] = a3\n 73465: u8 [a0 + 0xc] = a3\n 73468: a3 = a2 >> 0x18\n 73471: u64 [s1 + 0xc8] = a3\n 73475: u8 [a0 + 0xb] = a3\n 73478: a3 = a2 >> 0x10\n 73481: u64 [s1 + 0xc0] = a3\n 73485: u8 [a0 + 0xa] = a3\n 73488: a3 = a2 >> 0x8\n 73491: u64 [s1 + 0xb8] = a3\n 73495: u8 [a0 + 0x9] = a3\n 73498: u64 [s1 + 0x178] = a2\n 73502: u8 [a0 + 0x8] = a2\n 73505: a2 = a1 >> 0x38\n 73508: u64 [s1 + 0xb0] = a2\n 73512: u8 [a0 + 0x7] = a2\n 73515: a2 = a1 >> 0x30\n 73518: u64 [s1 + 0xa8] = a2\n 73522: u8 [a0 + 0x6] = a2\n 73525: a2 = a1 >> 0x28\n 73528: u64 [s1 + 0xa0] = a2\n 73532: u8 [a0 + 0x5] = a2\n 73535: a2 = a1 >> 0x20\n 73538: u64 [s1 + 0x98] = a2\n 73542: u8 [a0 + 0x4] = a2\n 73545: a2 = a1 >> 0x18\n 73548: u64 [s1 + 0x90] = a2\n 73552: u8 [a0 + 0x3] = a2\n 73555: a2 = a1 >> 0x10\n 73558: u64 [s1 + 0x88] = a2\n 73562: u8 [a0 + 0x2] = a2\n 73565: a2 = a1 >> 0x8\n 73568: u64 [s1 + 0x80] = a2\n 73572: u8 [a0 + 0x1] = a2\n 73575: u64 [s1 + 0x180] = a1\n 73579: u8 [a0] = a1\n 73581: a0 = 0x20\n 73584: a1 = 0x20\n 73587: ra = 822, jump @0\n      : @917 [@dyn 411] (gas: 35)\n 73594: u8 [a0 + 31] = 0x2\n 73598: u8 [a0 + 30] = 0\n 73601: u8 [a0 + 29] = 0\n 73604: u8 [a0 + 28] = 0\n 73607: u8 [a0 + 27] = 0\n 73610: u8 [a0 + 26] = 0\n 73613: u8 [a0 + 25] = 0\n 73616: u8 [a0 + 24] = 0\n 73619: u8 [a0 + 23] = 0\n 73622: u8 [a0 + 22] = 0\n 73625: u8 [a0 + 21] = 0\n 73628: u8 [a0 + 20] = 0\n 73631: u8 [a0 + 19] = 0\n 73634: u8 [a0 + 18] = 0\n 73637: u8 [a0 + 17] = 0\n 73640: u8 [a0 + 16] = 0\n 73643: u8 [a0 + 15] = 0\n 73646: u8 [a0 + 14] = 0\n 73649: u8 [a0 + 13] = 0\n 73652: u8 [a0 + 12] = 0\n 73655: u8 [a0 + 11] = 0\n 73658: u8 [a0 + 10] = 0\n 73661: u8 [a0 + 9] = 0\n 73664: u8 [a0 + 8] = 0\n 73667: u8 [a0 + 7] = 0\n 73670: u8 [a0 + 6] = 0\n 73673: u8 [a0 + 5] = 0\n 73676: u8 [a0 + 4] = 0\n 73679: u8 [a0 + 3] = 0\n 73682: u8 [a0 + 2] = 0\n 73685: u8 [a0 + 1] = 0\n 73688: u8 [a0 + 0] = 0\n 73690: a1 = 0x40\n 73693: a0 = 0\n 73695: ra = 824, jump @0\n      : @918 [@dyn 412] (gas: 40)\n 73702: i32 a0 = a0 + 0\n 73704: i32 a2 = s1 + 0x360\n 73708: a1 = 0x40\n 73711: ecalli 8 // 'hash_keccak_256'\n 73713: a0 = u64 [s1 + 0x360]\n 73717: a1 = u64 [s1 + 0x368]\n 73721: a2 = u64 [s1 + 0x370]\n 73725: a3 = u64 [s1 + 0x378]\n 73729: t0 = reverse a0\n 73731: a5 = reverse a1\n 73733: a2 = reverse a2\n 73735: a1 = reverse a3\n 73737: a0 = a1 + 0x4\n 73740: u64 [s1 + 0x160] = a1\n 73744: a1 = a0 <u a1\n 73747: a4 = a2 + a1\n 73750: u64 [s1 + 0x188] = a2\n 73754: a3 = a4 <u a2\n 73757: a3 = a1 if a1 == 0\n 73760: a3 = a3 + a5\n 73763: u64 [s1 + 0x190] = a5\n 73767: a1 = a3 <u a5\n 73770: u64 [s1 + 0x198] = t0\n 73774: a1 = a1 + t0\n 73777: u64 [s1 + 0x348] = a4\n 73781: u64 [s1 + 0x340] = a0\n 73785: u64 [s1 + 0x350] = a3\n 73789: u64 [s1 + 0x358] = a1\n 73793: u64 [s1 + 888] = 0\n 73797: u64 [s1 + 880] = 0\n 73801: u64 [s1 + 872] = 0\n 73805: u64 [s1 + 864] = 0\n 73809: u32 [s1 + 800] = 0x20\n 73814: i32 a1 = s1 + 0x340\n 73818: i32 a3 = s1 + 0x360\n 73822: i32 a4 = s1 + 0x320\n 73826: a2 = 0xffffffffffffffff\n 73829: a0 = 0\n 73831: ecalli 7 // 'get_storage'\n 73833: fallthrough\n      : @919 (gas: 2)\n 73834: a0 = u8 [s1 + 0x360]\n 73838: jump @921 if a0 != 0\n      : @920 (gas: 1)\n 73841: jump @955\n      : @921 (gas: 47)\n 73844: a0 = sp + 0xffffffffffffffe0\n 73847: a0 = a0 & 0xffffffffffffffe0\n 73850: u64 [s1 + 0x60] = a0\n 73853: sp = a0\n 73855: u64 [a0 + 24] = 0\n 73858: u64 [a0 + 16] = 0\n 73861: u64 [a0 + 8] = 0\n 73864: u64 [a0 + 0] = 0\n 73866: i32 a0 = a0 + 0\n 73868: ecalli 15 // 'value_transferred'\n 73870: a1 = u64 [s1 + 0x60]\n 73873: a0 = u64 [a1]\n 73875: u64 [s1 + 0x78] = a0\n 73878: a0 = u64 [a1 + 0x10]\n 73881: u64 [s1 + 0x70] = a0\n 73884: a0 = u64 [a1 + 0x8]\n 73887: u64 [s1 + 0x68] = a0\n 73890: a0 = u64 [a1 + 0x18]\n 73893: u64 [s1 + 0x60] = a0\n 73896: a0 = u64 [s1 + 0x160]\n 73900: a0 = a0 + 0x1\n 73903: a1 = a0 <u 0x1\n 73906: a2 = u64 [s1 + 0x188]\n 73910: a1 = a1 + a2\n 73913: a2 = a0 | a1\n 73916: a2 = a2 <u 0x1\n 73919: a3 = u64 [s1 + 0x190]\n 73923: a2 = a2 + a3\n 73926: a3 = a2 <u a3\n 73929: a4 = u64 [s1 + 0x198]\n 73933: a3 = a3 + a4\n 73936: u64 [s1 + 0x358] = a3\n 73940: u64 [s1 + 0x350] = a2\n 73944: u64 [s1 + 0x348] = a1\n 73948: u64 [s1 + 0x340] = a0\n 73952: u64 [s1 + 888] = 0\n 73956: u64 [s1 + 880] = 0\n 73960: u64 [s1 + 872] = 0\n 73964: u64 [s1 + 864] = 0\n 73968: u32 [s1 + 800] = 0x20\n 73973: i32 a1 = s1 + 0x340\n 73977: i32 a3 = s1 + 0x360\n 73981: i32 a4 = s1 + 0x320\n 73985: a2 = 0xffffffffffffffff\n 73988: a0 = 0\n 73990: ecalli 7 // 'get_storage'\n 73992: fallthrough\n      : @922 (gas: 16)\n 73993: a0 = u64 [s1 + 0x378]\n 73997: a1 = u64 [s1 + 0x368]\n 74001: a2 = u64 [s1 + 0x360]\n 74005: a3 = u64 [s1 + 0x370]\n 74009: a4 = u64 [s1 + 0x60]\n 74012: a0 = a0 ^ a4\n 74015: a4 = u64 [s1 + 0x68]\n 74018: a1 = a1 ^ a4\n 74021: a0 = a0 | a1\n 74024: a1 = u64 [s1 + 0x70]\n 74027: a1 = a1 ^ a3\n 74030: a3 = u64 [s1 + 0x78]\n 74033: a2 = a2 ^ a3\n 74036: a1 = a1 | a2\n 74039: a0 = a0 | a1\n 74042: jump @924 if a0 == 0\n      : @923 (gas: 1)\n 74045: jump @960\n      : @924 (gas: 2)\n 74048: a1 = 0x20\n 74051: ra = 826, jump @0\n      : @925 [@dyn 413] (gas: 67)\n 74058: a1 = u64 [s1 + 0x170]\n 74062: u8 [a0 + 0x10] = a1\n 74065: a1 = u64 [s1 + 0xe8]\n 74069: u8 [a0 + 0xf] = a1\n 74072: a1 = u64 [s1 + 0xe0]\n 74076: u8 [a0 + 0xe] = a1\n 74079: a1 = u64 [s1 + 0xd8]\n 74083: u8 [a0 + 0xd] = a1\n 74086: a1 = u64 [s1 + 0xd0]\n 74090: u8 [a0 + 0xc] = a1\n 74093: a1 = u64 [s1 + 0xc8]\n 74097: u8 [a0 + 0xb] = a1\n 74100: a1 = u64 [s1 + 0xc0]\n 74104: u8 [a0 + 0xa] = a1\n 74107: a1 = u64 [s1 + 0xb8]\n 74111: u8 [a0 + 0x9] = a1\n 74114: a1 = u64 [s1 + 0x178]\n 74118: u8 [a0 + 0x8] = a1\n 74121: a1 = u64 [s1 + 0xb0]\n 74125: u8 [a0 + 0x7] = a1\n 74128: a1 = u64 [s1 + 0xa8]\n 74132: u8 [a0 + 0x6] = a1\n 74135: a1 = u64 [s1 + 0xa0]\n 74139: u8 [a0 + 0x5] = a1\n 74142: a1 = u64 [s1 + 0x98]\n 74146: u8 [a0 + 0x4] = a1\n 74149: a1 = u64 [s1 + 0x90]\n 74153: u8 [a0 + 0x3] = a1\n 74156: a1 = u64 [s1 + 0x88]\n 74160: u8 [a0 + 0x2] = a1\n 74163: a1 = u64 [s1 + 0x80]\n 74167: u8 [a0 + 0x1] = a1\n 74170: a1 = u64 [s1 + 0x180]\n 74174: u8 [a0] = a1\n 74176: a1 = u64 [s1 + 0x168]\n 74180: u8 [a0 + 0x18] = a1\n 74183: a1 = u64 [s1 + 0x120]\n 74187: u8 [a0 + 0x17] = a1\n 74190: a1 = u64 [s1 + 0x118]\n 74194: u8 [a0 + 0x16] = a1\n 74197: a1 = u64 [s1 + 0x110]\n 74201: u8 [a0 + 0x15] = a1\n 74204: a1 = u64 [s1 + 0x108]\n 74208: u8 [a0 + 0x14] = a1\n 74211: a1 = u64 [s1 + 0x100]\n 74215: u8 [a0 + 0x13] = a1\n 74218: a1 = u64 [s1 + 0xf8]\n 74222: u8 [a0 + 0x12] = a1\n 74225: a1 = u64 [s1 + 0xf0]\n 74229: u8 [a0 + 0x11] = a1\n 74232: a1 = u64 [s1 + 0x158]\n 74236: u8 [a0 + 0x1f] = a1\n 74239: a1 = u64 [s1 + 0x150]\n 74243: u8 [a0 + 0x1e] = a1\n 74246: a1 = u64 [s1 + 0x148]\n 74250: u8 [a0 + 0x1d] = a1\n 74253: a1 = u64 [s1 + 0x140]\n 74257: u8 [a0 + 0x1c] = a1\n 74260: a1 = u64 [s1 + 0x138]\n 74264: u8 [a0 + 0x1b] = a1\n 74267: a1 = u64 [s1 + 0x130]\n 74271: u8 [a0 + 0x1a] = a1\n 74274: a1 = u64 [s1 + 0x128]\n 74278: u8 [a0 + 0x19] = a1\n 74281: a0 = 0x20\n 74284: a1 = 0x20\n 74287: ra = 828, jump @0\n      : @926 [@dyn 414] (gas: 35)\n 74294: u8 [a0 + 31] = 0x1\n 74298: u8 [a0 + 30] = 0\n 74301: u8 [a0 + 29] = 0\n 74304: u8 [a0 + 28] = 0\n 74307: u8 [a0 + 27] = 0\n 74310: u8 [a0 + 26] = 0\n 74313: u8 [a0 + 25] = 0\n 74316: u8 [a0 + 24] = 0\n 74319: u8 [a0 + 23] = 0\n 74322: u8 [a0 + 22] = 0\n 74325: u8 [a0 + 21] = 0\n 74328: u8 [a0 + 20] = 0\n 74331: u8 [a0 + 19] = 0\n 74334: u8 [a0 + 18] = 0\n 74337: u8 [a0 + 17] = 0\n 74340: u8 [a0 + 16] = 0\n 74343: u8 [a0 + 15] = 0\n 74346: u8 [a0 + 14] = 0\n 74349: u8 [a0 + 13] = 0\n 74352: u8 [a0 + 12] = 0\n 74355: u8 [a0 + 11] = 0\n 74358: u8 [a0 + 10] = 0\n 74361: u8 [a0 + 9] = 0\n 74364: u8 [a0 + 8] = 0\n 74367: u8 [a0 + 7] = 0\n 74370: u8 [a0 + 6] = 0\n 74373: u8 [a0 + 5] = 0\n 74376: u8 [a0 + 4] = 0\n 74379: u8 [a0 + 3] = 0\n 74382: u8 [a0 + 2] = 0\n 74385: u8 [a0 + 1] = 0\n 74388: u8 [a0 + 0] = 0\n 74390: a1 = 0x40\n 74393: a0 = 0\n 74395: ra = 830, jump @0\n      : @927 [@dyn 415] (gas: 32)\n 74402: i32 a0 = a0 + 0\n 74404: i32 a2 = s1 + 0x360\n 74408: a1 = 0x40\n 74411: ecalli 8 // 'hash_keccak_256'\n 74413: a0 = u64 [s1 + 0x378]\n 74417: a1 = u64 [s1 + 0x370]\n 74421: a2 = u64 [s1 + 0x368]\n 74425: a3 = u64 [s1 + 0x360]\n 74429: a0 = reverse a0\n 74431: a1 = reverse a1\n 74433: a2 = reverse a2\n 74435: a3 = reverse a3\n 74437: u64 [s1 + 0x160] = a3\n 74441: u64 [s1 + 0x358] = a3\n 74445: u64 [s1 + 0x188] = a2\n 74449: u64 [s1 + 0x350] = a2\n 74453: u64 [s1 + 0x190] = a1\n 74457: u64 [s1 + 0x348] = a1\n 74461: u64 [s1 + 0x198] = a0\n 74465: u64 [s1 + 0x340] = a0\n 74469: u64 [s1 + 888] = 0\n 74473: u64 [s1 + 880] = 0\n 74477: u64 [s1 + 872] = 0\n 74481: u64 [s1 + 864] = 0\n 74485: u32 [s1 + 800] = 0x20\n 74490: i32 a1 = s1 + 0x340\n 74494: i32 a3 = s1 + 0x360\n 74498: i32 a4 = s1 + 0x320\n 74502: a2 = 0xffffffffffffffff\n 74505: a0 = 0\n 74507: ecalli 7 // 'get_storage'\n 74509: fallthrough\n      : @928 (gas: 24)\n 74510: a0 = u64 [s1 + 0x360]\n 74514: a2 = u64 [s1 + 0x378]\n 74518: a1 = u64 [s1 + 0x368]\n 74522: a3 = u64 [s1 + 0x370]\n 74526: u64 [s1 + 0x68] = a0\n 74529: a4 = a0 + 0x1\n 74532: a0 = a4 <u 0x1\n 74535: u64 [s1 + 0x60] = a1\n 74538: a1 = a1 + a0\n 74541: a0 = a4 | a1\n 74544: a0 = a0 <u 0x1\n 74547: a5 = a3 + a0\n 74550: u64 [s1 + 0x50] = a3\n 74553: a0 = a5 <u a3\n 74556: u64 [s1 + 0x58] = a2\n 74559: a0 = a0 + a2\n 74562: u64 [s1 + 0x70] = a1\n 74565: u64 [s1 + 0x40] = a0\n 74568: a0 = a0 | a1\n 74571: u64 [s1 + 0x78] = a4\n 74574: u64 [s1 + 0x48] = a5\n 74577: a1 = a4 | a5\n 74580: a0 = a0 | a1\n 74583: jump @930 if a0 != 0\n      : @929 (gas: 1)\n 74586: jump @967\n      : @930 (gas: 75)\n 74589: a0 = u64 [s1 + 0x188]\n 74593: u64 [s1 + 0x350] = a0\n 74597: a0 = u64 [s1 + 0x190]\n 74601: u64 [s1 + 0x348] = a0\n 74605: a0 = u64 [s1 + 0x198]\n 74609: u64 [s1 + 0x340] = a0\n 74613: a0 = u64 [s1 + 0x160]\n 74617: u64 [s1 + 0x358] = a0\n 74621: u64 [s1 + 888] = 0\n 74625: u64 [s1 + 880] = 0\n 74629: u64 [s1 + 872] = 0\n 74633: u64 [s1 + 864] = 0\n 74637: u32 [s1 + 800] = 0x20\n 74642: i32 a1 = s1 + 0x340\n 74646: i32 a3 = s1 + 0x360\n 74650: i32 a4 = s1 + 0x320\n 74654: a2 = 0xffffffffffffffff\n 74657: a0 = 0\n 74659: ecalli 7 // 'get_storage'\n 74661: a0 = u64 [s1 + 0x160]\n 74665: u64 [s1 + 0x358] = a0\n 74669: a0 = u64 [s1 + 0x188]\n 74673: u64 [s1 + 0x350] = a0\n 74677: a0 = u64 [s1 + 0x190]\n 74681: u64 [s1 + 0x348] = a0\n 74685: a0 = u64 [s1 + 0x198]\n 74689: u64 [s1 + 0x340] = a0\n 74693: a0 = u64 [s1 + 0x40]\n 74696: u64 [s1 + 0x378] = a0\n 74700: a0 = u64 [s1 + 0x48]\n 74703: u64 [s1 + 0x370] = a0\n 74707: a0 = u64 [s1 + 0x70]\n 74710: u64 [s1 + 0x368] = a0\n 74714: a0 = u64 [s1 + 0x78]\n 74717: u64 [s1 + 0x360] = a0\n 74721: i32 a1 = s1 + 0x340\n 74725: i32 a3 = s1 + 0x360\n 74729: a2 = 0xffffffffffffffff\n 74732: a4 = 0x20\n 74735: a0 = 0\n 74737: ecalli 14 // 'set_storage'\n 74739: i32 a0 = s1 + 0x2e0\n 74743: ecalli 4 // 'caller'\n 74745: a0 = u32 [s1 + 0x2f0]\n 74749: u64 [s1 + 0x188] = a0\n 74753: a0 = u64 [s1 + 0x2e8]\n 74757: u64 [s1 + 0x48] = a0\n 74760: a0 = u64 [s1 + 0x2e0]\n 74764: u64 [s1 + 0x160] = a0\n 74768: a0 = sp + 0xffffffffffffffe0\n 74771: a0 = a0 & 0xffffffffffffffe0\n 74774: u64 [s1 + 0x198] = a0\n 74778: sp = a0\n 74780: u64 [a0 + 24] = 0\n 74783: u64 [a0 + 16] = 0\n 74786: u64 [a0 + 8] = 0\n 74789: u64 [a0 + 0] = 0\n 74791: i32 a0 = a0 + 0\n 74793: ecalli 15 // 'value_transferred'\n 74795: a1 = u64 [s1 + 0x198]\n 74799: a0 = u64 [a1 + 0x18]\n 74802: u64 [s1 + 0x28] = a0\n 74805: a0 = u64 [a1 + 0x10]\n 74808: u64 [s1 + 0x30] = a0\n 74811: a0 = u64 [a1 + 0x8]\n 74814: u64 [s1 + 0x38] = a0\n 74817: a0 = u64 [a1]\n 74819: u64 [s1 + 0x40] = a0\n 74822: u64 [s1 + 632] = 0\n 74826: u64 [s1 + 624] = 0\n 74830: u64 [s1 + 608] = 0xa0\n 74836: a0 = s1 + 0x280\n 74840: a1 = s1 + 0x260\n 74844: u64 [s1 + 616] = 0\n 74848: ra = 832, jump @78\n      : @931 [@dyn 416] (gas: 16)\n 74855: a2 = u64 [s1 + 0x298]\n 74859: a3 = u64 [s1 + 0x290]\n 74863: a0 = u64 [s1 + 0x288]\n 74867: a1 = u64 [s1 + 0x280]\n 74871: u64 [s1 + 0x190] = a0\n 74875: u64 [s1 + 0x70] = a2\n 74878: a0 = a0 | a2\n 74881: u64 [s1 + 0x198] = a1\n 74885: a1 = a1 | a3\n 74888: a1 = a1 | a0\n 74891: a1 = a1 >> 0x20\n 74894: u64 [s1 + 0x78] = a3\n 74897: a0 = a0 | a3\n 74900: a0 = a0 << 0x20\n 74903: a0 = a0 | a1\n 74906: jump @933 if a0 == 0\n      : @932 (gas: 1)\n 74909: jump @966\n      : @933 (gas: 18)\n 74912: a0 = u64 [s1 + 0x160]\n 74916: a0 = reverse a0\n 74918: a0 = a0 << 0x20\n 74921: a1 = u64 [s1 + 0x48]\n 74924: a1 = reverse a1\n 74926: a2 = a1 >> 0x20\n 74929: a0 = a0 | a2\n 74932: u64 [s1 + 0x48] = a0\n 74935: a1 = a1 << 0x20\n 74938: a0 = u64 [s1 + 0x188]\n 74942: a0 = reverse a0\n 74944: a0 = a0 >> 0x20\n 74947: a0 = a0 | a1\n 74950: u64 [s1 + 0x20] = a0\n 74953: a0 = i32 [s1 + 0x198]\n 74957: a1 = 0x20\n 74960: u64 [s1 + 0x188] = a0\n 74964: ra = 834, jump @0\n      : @934 [@dyn 417] (gas: 67)\n 74971: a1 = u64 [s1 + 0x20]\n 74974: a1 = reverse a1\n 74976: a2 = u64 [s1 + 0x48]\n 74979: a2 = reverse a2\n 74981: a4 = u64 [s1 + 0x160]\n 74985: a3 = a4 >> 0x18\n 74988: u8 [a0 + 0xf] = a3\n 74991: a3 = a4 >> 0x10\n 74994: u8 [a0 + 0xe] = a3\n 74997: a3 = a4 >> 0x8\n 75000: u8 [a0 + 0xd] = a3\n 75003: u8 [a0 + 0xc] = a4\n 75006: u8 [a0 + 11] = 0\n 75009: u8 [a0 + 10] = 0\n 75012: u8 [a0 + 9] = 0\n 75015: u8 [a0 + 8] = 0\n 75018: u8 [a0 + 7] = 0\n 75021: u8 [a0 + 6] = 0\n 75024: u8 [a0 + 5] = 0\n 75027: u8 [a0 + 4] = 0\n 75030: u8 [a0 + 3] = 0\n 75033: u8 [a0 + 2] = 0\n 75036: u8 [a0 + 1] = 0\n 75039: u8 [a0 + 0] = 0\n 75041: u8 [a0 + 0x10] = a2\n 75044: u8 [a0 + 0x18] = a1\n 75047: a3 = a2 >> 0x38\n 75050: u8 [a0 + 0x17] = a3\n 75053: a3 = a2 >> 0x30\n 75056: u8 [a0 + 0x16] = a3\n 75059: a3 = a2 >> 0x28\n 75062: u8 [a0 + 0x15] = a3\n 75065: a3 = a2 >> 0x20\n 75068: u8 [a0 + 0x14] = a3\n 75071: a3 = a2 >> 0x18\n 75074: u8 [a0 + 0x13] = a3\n 75077: a3 = a2 >> 0x10\n 75080: u8 [a0 + 0x12] = a3\n 75083: a2 = a2 >> 0x8\n 75086: u8 [a0 + 0x11] = a2\n 75089: a2 = a1 >> 0x38\n 75092: u8 [a0 + 0x1f] = a2\n 75095: a2 = a1 >> 0x30\n 75098: u8 [a0 + 0x1e] = a2\n 75101: a2 = a1 >> 0x28\n 75104: u8 [a0 + 0x1d] = a2\n 75107: a2 = a1 >> 0x20\n 75110: u8 [a0 + 0x1c] = a2\n 75113: a2 = a1 >> 0x18\n 75116: u8 [a0 + 0x1b] = a2\n 75119: a2 = a1 >> 0x10\n 75122: u8 [a0 + 0x1a] = a2\n 75125: a1 = a1 >> 0x8\n 75128: a2 = u64 [s1 + 0x70]\n 75131: a4 = u64 [s1 + 0x78]\n 75134: a4 = a4 | a2\n 75137: a2 = 0x100000000\n 75147: u64 [s1 + 0x48] = a2\n 75150: a2 = 0xffffffe0\n 75160: a3 = u64 [s1 + 0x198]\n 75164: a2 = a3 <u a2\n 75167: a3 = u64 [s1 + 0x190]\n 75171: a2 = 0 if a3 != 0\n 75173: u64 [s1 + 0x160] = a4\n 75177: a2 = 0 if a4 != 0\n 75179: u8 [a0 + 0x19] = a1\n 75182: jump @936 if a2 != 0\n      : @935 (gas: 1)\n 75185: jump @966\n      : @936 (gas: 4)\n 75188: a0 = u64 [s1 + 0x188]\n 75192: i32 a0 = a0 + 0x20\n 75195: a1 = 0x20\n 75198: ra = 836, jump @0\n      : @937 [@dyn 418] (gas: 77)\n 75205: a1 = u64 [s1 + 0x28]\n 75208: a1 = reverse a1\n 75210: a2 = u64 [s1 + 0x30]\n 75213: a2 = reverse a2\n 75215: a3 = u64 [s1 + 0x38]\n 75218: a3 = reverse a3\n 75220: a4 = u64 [s1 + 0x40]\n 75223: a4 = reverse a4\n 75225: a5 = a4 >> 0x38\n 75228: u8 [a0 + 0x1f] = a5\n 75231: a5 = a4 >> 0x30\n 75234: u8 [a0 + 0x1e] = a5\n 75237: a5 = a4 >> 0x28\n 75240: u8 [a0 + 0x1d] = a5\n 75243: a5 = a4 >> 0x20\n 75246: u8 [a0 + 0x1c] = a5\n 75249: a5 = a4 >> 0x18\n 75252: u8 [a0 + 0x1b] = a5\n 75255: a5 = a4 >> 0x10\n 75258: u8 [a0 + 0x1a] = a5\n 75261: a5 = a4 >> 0x8\n 75264: u8 [a0 + 0x19] = a5\n 75267: u8 [a0 + 0x18] = a4\n 75270: u8 [a0 + 0x10] = a3\n 75273: a4 = a3 >> 0x38\n 75276: u8 [a0 + 0x17] = a4\n 75279: a4 = a3 >> 0x30\n 75282: u8 [a0 + 0x16] = a4\n 75285: a4 = a3 >> 0x28\n 75288: u8 [a0 + 0x15] = a4\n 75291: a4 = a3 >> 0x20\n 75294: u8 [a0 + 0x14] = a4\n 75297: a4 = a3 >> 0x18\n 75300: u8 [a0 + 0x13] = a4\n 75303: a4 = a3 >> 0x10\n 75306: u8 [a0 + 0x12] = a4\n 75309: a3 = a3 >> 0x8\n 75312: u8 [a0 + 0x11] = a3\n 75315: u8 [a0 + 0x8] = a2\n 75318: a3 = a2 >> 0x38\n 75321: u8 [a0 + 0xf] = a3\n 75324: a3 = a2 >> 0x30\n 75327: u8 [a0 + 0xe] = a3\n 75330: a3 = a2 >> 0x28\n 75333: u8 [a0 + 0xd] = a3\n 75336: a3 = a2 >> 0x20\n 75339: u8 [a0 + 0xc] = a3\n 75342: a3 = a2 >> 0x18\n 75345: u8 [a0 + 0xb] = a3\n 75348: a3 = a2 >> 0x10\n 75351: u8 [a0 + 0xa] = a3\n 75354: a2 = a2 >> 0x8\n 75357: u8 [a0 + 0x9] = a2\n 75360: u8 [a0] = a1\n 75362: a2 = a1 >> 0x38\n 75365: u8 [a0 + 0x7] = a2\n 75368: a2 = a1 >> 0x30\n 75371: u8 [a0 + 0x6] = a2\n 75374: a2 = a1 >> 0x28\n 75377: u8 [a0 + 0x5] = a2\n 75380: a2 = a1 >> 0x20\n 75383: u8 [a0 + 0x4] = a2\n 75386: a2 = a1 >> 0x18\n 75389: u8 [a0 + 0x3] = a2\n 75392: a2 = a1 >> 0x10\n 75395: u8 [a0 + 0x2] = a2\n 75398: a1 = a1 >> 0x8\n 75401: a2 = u64 [s1 + 0x48]\n 75404: a2 = a2 + 0xffffffffffffffc0\n 75407: a3 = u64 [s1 + 0x198]\n 75411: a2 = a3 <u a2\n 75414: a3 = u64 [s1 + 0x190]\n 75418: a2 = 0 if a3 != 0\n 75420: a3 = u64 [s1 + 0x160]\n 75424: a2 = 0 if a3 != 0\n 75426: u8 [a0 + 0x1] = a1\n 75429: jump @966 if a2 == 0\n      : @938 (gas: 4)\n 75433: a0 = u64 [s1 + 0x188]\n 75437: i32 a0 = a0 + 0x40\n 75440: a1 = 0x20\n 75443: ra = 838, jump @0\n      : @939 [@dyn 419] (gas: 42)\n 75450: u8 [a0 + 31] = 0\n 75453: u8 [a0 + 30] = 0\n 75456: u8 [a0 + 29] = 0\n 75459: u8 [a0 + 28] = 0\n 75462: u8 [a0 + 27] = 0\n 75465: u8 [a0 + 26] = 0\n 75468: u8 [a0 + 25] = 0\n 75471: u8 [a0 + 24] = 0\n 75474: u8 [a0 + 23] = 0\n 75477: u8 [a0 + 22] = 0\n 75480: u8 [a0 + 21] = 0\n 75483: u8 [a0 + 20] = 0\n 75486: u8 [a0 + 19] = 0\n 75489: u8 [a0 + 18] = 0\n 75492: u8 [a0 + 17] = 0\n 75495: u8 [a0 + 16] = 0\n 75498: u8 [a0 + 15] = 0\n 75501: u8 [a0 + 14] = 0\n 75504: u8 [a0 + 13] = 0\n 75507: u8 [a0 + 12] = 0\n 75510: u8 [a0 + 11] = 0\n 75513: u8 [a0 + 10] = 0\n 75516: u8 [a0 + 9] = 0\n 75519: u8 [a0 + 8] = 0\n 75522: u8 [a0 + 7] = 0\n 75525: u8 [a0 + 6] = 0\n 75528: u8 [a0 + 5] = 0\n 75531: u8 [a0 + 4] = 0\n 75534: u8 [a0 + 3] = 0\n 75537: u8 [a0 + 2] = 0\n 75540: u8 [a0 + 1] = 0\n 75543: a1 = 0x100000000\n 75553: u64 [s1 + 0x48] = a1\n 75556: a1 = 0xffffffa0\n 75566: a2 = u64 [s1 + 0x198]\n 75570: a1 = a2 <u a1\n 75573: a2 = u64 [s1 + 0x190]\n 75577: a1 = 0 if a2 != 0\n 75579: a2 = u64 [s1 + 0x160]\n 75583: a1 = 0 if a2 != 0\n 75585: u8 [a0 + 0] = 0\n 75587: jump @966 if a1 == 0\n      : @940 (gas: 4)\n 75591: a0 = u64 [s1 + 0x188]\n 75595: i32 a0 = a0 + 0x60\n 75598: a1 = 0x20\n 75601: ra = 840, jump @0\n      : @941 [@dyn 420] (gas: 41)\n 75608: u8 [a0 + 31] = 0\n 75611: u8 [a0 + 30] = 0\n 75614: u8 [a0 + 29] = 0\n 75617: u8 [a0 + 28] = 0\n 75620: u8 [a0 + 27] = 0\n 75623: u8 [a0 + 26] = 0\n 75626: u8 [a0 + 25] = 0\n 75629: u8 [a0 + 24] = 0\n 75632: u8 [a0 + 23] = 0\n 75635: u8 [a0 + 22] = 0\n 75638: u8 [a0 + 21] = 0\n 75641: u8 [a0 + 20] = 0\n 75644: u8 [a0 + 19] = 0\n 75647: u8 [a0 + 18] = 0\n 75650: u8 [a0 + 17] = 0\n 75653: u8 [a0 + 16] = 0\n 75656: u8 [a0 + 15] = 0\n 75659: u8 [a0 + 14] = 0\n 75662: u8 [a0 + 13] = 0\n 75665: u8 [a0 + 12] = 0\n 75668: u8 [a0 + 11] = 0\n 75671: u8 [a0 + 10] = 0\n 75674: u8 [a0 + 9] = 0\n 75677: u8 [a0 + 8] = 0\n 75680: u8 [a0 + 7] = 0\n 75683: u8 [a0 + 6] = 0\n 75686: u8 [a0 + 5] = 0\n 75689: u8 [a0 + 4] = 0\n 75692: u8 [a0 + 3] = 0\n 75695: u8 [a0 + 2] = 0\n 75698: u8 [a0 + 1] = 0\n 75701: a1 = u64 [s1 + 0x48]\n 75704: a1 = a1 + 0xffffffffffffff80\n 75707: a2 = u64 [s1 + 0x198]\n 75711: a1 = a2 <u a1\n 75714: a2 = u64 [s1 + 0x190]\n 75718: a1 = 0 if a2 != 0\n 75720: a2 = u64 [s1 + 0x160]\n 75724: a1 = 0 if a2 != 0\n 75726: u8 [a0 + 0] = 0\n 75728: jump @966 if a1 == 0\n      : @942 (gas: 4)\n 75732: a0 = u64 [s1 + 0x188]\n 75736: i32 a0 = a0 + 0x80\n 75740: a1 = 0x20\n 75743: ra = 842, jump @0\n      : @943 [@dyn 421] (gas: 35)\n 75750: u8 [a0 + 31] = 0\n 75753: u8 [a0 + 30] = 0\n 75756: u8 [a0 + 29] = 0\n 75759: u8 [a0 + 28] = 0\n 75762: u8 [a0 + 27] = 0\n 75765: u8 [a0 + 26] = 0\n 75768: u8 [a0 + 25] = 0\n 75771: u8 [a0 + 24] = 0\n 75774: u8 [a0 + 23] = 0\n 75777: u8 [a0 + 22] = 0\n 75780: u8 [a0 + 21] = 0\n 75783: u8 [a0 + 20] = 0\n 75786: u8 [a0 + 19] = 0\n 75789: u8 [a0 + 18] = 0\n 75792: u8 [a0 + 17] = 0\n 75795: u8 [a0 + 16] = 0\n 75798: u8 [a0 + 15] = 0\n 75801: u8 [a0 + 14] = 0\n 75804: u8 [a0 + 13] = 0\n 75807: u8 [a0 + 12] = 0\n 75810: u8 [a0 + 11] = 0\n 75813: u8 [a0 + 10] = 0\n 75816: u8 [a0 + 9] = 0\n 75819: u8 [a0 + 8] = 0\n 75822: u8 [a0 + 7] = 0\n 75825: u8 [a0 + 6] = 0\n 75828: u8 [a0 + 5] = 0\n 75831: u8 [a0 + 4] = 0\n 75834: u8 [a0 + 3] = 0\n 75837: u8 [a0 + 2] = 0\n 75840: u8 [a0 + 1] = 0\n 75843: u8 [a0 + 0] = 0\n 75845: a1 = 0x20\n 75848: a0 = 0\n 75850: ra = 844, jump @0\n      : @944 [@dyn 422] (gas: 67)\n 75857: a1 = u64 [s1 + 0x158]\n 75861: u8 [a0 + 0x1f] = a1\n 75864: a1 = u64 [s1 + 0x150]\n 75868: u8 [a0 + 0x1e] = a1\n 75871: a1 = u64 [s1 + 0x148]\n 75875: u8 [a0 + 0x1d] = a1\n 75878: a1 = u64 [s1 + 0x140]\n 75882: u8 [a0 + 0x1c] = a1\n 75885: a1 = u64 [s1 + 0x138]\n 75889: u8 [a0 + 0x1b] = a1\n 75892: a1 = u64 [s1 + 0x130]\n 75896: u8 [a0 + 0x1a] = a1\n 75899: a1 = u64 [s1 + 0x128]\n 75903: u8 [a0 + 0x19] = a1\n 75906: a1 = u64 [s1 + 0x120]\n 75910: u8 [a0 + 0x17] = a1\n 75913: a1 = u64 [s1 + 0x118]\n 75917: u8 [a0 + 0x16] = a1\n 75920: a1 = u64 [s1 + 0x110]\n 75924: u8 [a0 + 0x15] = a1\n 75927: a1 = u64 [s1 + 0x108]\n 75931: u8 [a0 + 0x14] = a1\n 75934: a1 = u64 [s1 + 0x100]\n 75938: u8 [a0 + 0x13] = a1\n 75941: a1 = u64 [s1 + 0xf8]\n 75945: u8 [a0 + 0x12] = a1\n 75948: a1 = u64 [s1 + 0xf0]\n 75952: u8 [a0 + 0x11] = a1\n 75955: a1 = u64 [s1 + 0xe8]\n 75959: u8 [a0 + 0xf] = a1\n 75962: a1 = u64 [s1 + 0xe0]\n 75966: u8 [a0 + 0xe] = a1\n 75969: a1 = u64 [s1 + 0xd8]\n 75973: u8 [a0 + 0xd] = a1\n 75976: a1 = u64 [s1 + 0xd0]\n 75980: u8 [a0 + 0xc] = a1\n 75983: a1 = u64 [s1 + 0xc8]\n 75987: u8 [a0 + 0xb] = a1\n 75990: a1 = u64 [s1 + 0xc0]\n 75994: u8 [a0 + 0xa] = a1\n 75997: a1 = u64 [s1 + 0xb8]\n 76001: u8 [a0 + 0x9] = a1\n 76004: a1 = u64 [s1 + 0xb0]\n 76008: u8 [a0 + 0x7] = a1\n 76011: a1 = u64 [s1 + 0xa8]\n 76015: u8 [a0 + 0x6] = a1\n 76018: a1 = u64 [s1 + 0xa0]\n 76022: u8 [a0 + 0x5] = a1\n 76025: a1 = u64 [s1 + 0x98]\n 76029: u8 [a0 + 0x4] = a1\n 76032: a1 = u64 [s1 + 0x90]\n 76036: u8 [a0 + 0x3] = a1\n 76039: a1 = u64 [s1 + 0x88]\n 76043: u8 [a0 + 0x2] = a1\n 76046: a1 = u64 [s1 + 0x80]\n 76050: u8 [a0 + 0x1] = a1\n 76053: a1 = u64 [s1 + 0x168]\n 76057: u8 [a0 + 0x18] = a1\n 76060: a1 = u64 [s1 + 0x170]\n 76064: u8 [a0 + 0x10] = a1\n 76067: a1 = u64 [s1 + 0x178]\n 76071: u8 [a0 + 0x8] = a1\n 76074: a1 = u64 [s1 + 0x180]\n 76078: u8 [a0] = a1\n 76080: a0 = 0x20\n 76083: a1 = 0x20\n 76086: ra = 846, jump @0\n      : @945 [@dyn 423] (gas: 35)\n 76093: u8 [a0 + 31] = 0x3\n 76097: u8 [a0 + 30] = 0\n 76100: u8 [a0 + 29] = 0\n 76103: u8 [a0 + 28] = 0\n 76106: u8 [a0 + 27] = 0\n 76109: u8 [a0 + 26] = 0\n 76112: u8 [a0 + 25] = 0\n 76115: u8 [a0 + 24] = 0\n 76118: u8 [a0 + 23] = 0\n 76121: u8 [a0 + 22] = 0\n 76124: u8 [a0 + 21] = 0\n 76127: u8 [a0 + 20] = 0\n 76130: u8 [a0 + 19] = 0\n 76133: u8 [a0 + 18] = 0\n 76136: u8 [a0 + 17] = 0\n 76139: u8 [a0 + 16] = 0\n 76142: u8 [a0 + 15] = 0\n 76145: u8 [a0 + 14] = 0\n 76148: u8 [a0 + 13] = 0\n 76151: u8 [a0 + 12] = 0\n 76154: u8 [a0 + 11] = 0\n 76157: u8 [a0 + 10] = 0\n 76160: u8 [a0 + 9] = 0\n 76163: u8 [a0 + 8] = 0\n 76166: u8 [a0 + 7] = 0\n 76169: u8 [a0 + 6] = 0\n 76172: u8 [a0 + 5] = 0\n 76175: u8 [a0 + 4] = 0\n 76178: u8 [a0 + 3] = 0\n 76181: u8 [a0 + 2] = 0\n 76184: u8 [a0 + 1] = 0\n 76187: u8 [a0 + 0] = 0\n 76189: a1 = 0x40\n 76192: a0 = 0\n 76194: ra = 848, jump @0\n      : @946 [@dyn 424] (gas: 15)\n 76201: i32 a0 = a0 + 0\n 76203: i32 a2 = s1 + 0x360\n 76207: a1 = 0x40\n 76210: ecalli 8 // 'hash_keccak_256'\n 76212: a0 = u64 [s1 + 0x360]\n 76216: u64 [s1 + 0x188] = a0\n 76220: a0 = u64 [s1 + 0x368]\n 76224: u64 [s1 + 0x160] = a0\n 76228: a0 = u64 [s1 + 0x370]\n 76232: u64 [s1 + 0x158] = a0\n 76236: a0 = u64 [s1 + 0x378]\n 76240: u64 [s1 + 0x150] = a0\n 76244: a1 = 0x20\n 76247: a0 = 0\n 76249: ra = 850, jump @0\n      : @947 [@dyn 425] (gas: 75)\n 76256: a1 = u64 [s1 + 0x58]\n 76259: a2 = reverse a1\n 76261: a1 = u64 [s1 + 0x50]\n 76264: a3 = reverse a1\n 76266: a1 = u64 [s1 + 0x60]\n 76269: a4 = reverse a1\n 76271: a1 = u64 [s1 + 0x68]\n 76274: a5 = reverse a1\n 76276: a1 = a5 >> 0x38\n 76279: u8 [a0 + 0x1f] = a1\n 76282: a1 = a5 >> 0x30\n 76285: u8 [a0 + 0x1e] = a1\n 76288: a1 = a5 >> 0x28\n 76291: u8 [a0 + 0x1d] = a1\n 76294: a1 = a5 >> 0x20\n 76297: u8 [a0 + 0x1c] = a1\n 76300: a1 = a5 >> 0x18\n 76303: u8 [a0 + 0x1b] = a1\n 76306: a1 = a5 >> 0x10\n 76309: u8 [a0 + 0x1a] = a1\n 76312: a1 = a5 >> 0x8\n 76315: u8 [a0 + 0x19] = a1\n 76318: u64 [s1 + 0x130] = a5\n 76322: u8 [a0 + 0x18] = a5\n 76325: a1 = a4 >> 0x38\n 76328: u8 [a0 + 0x17] = a1\n 76331: a1 = a4 >> 0x30\n 76334: u8 [a0 + 0x16] = a1\n 76337: a1 = a4 >> 0x28\n 76340: u8 [a0 + 0x15] = a1\n 76343: a1 = a4 >> 0x20\n 76346: u8 [a0 + 0x14] = a1\n 76349: a1 = a4 >> 0x18\n 76352: u8 [a0 + 0x13] = a1\n 76355: a1 = a4 >> 0x10\n 76358: u8 [a0 + 0x12] = a1\n 76361: a1 = a4 >> 0x8\n 76364: u8 [a0 + 0x11] = a1\n 76367: u64 [s1 + 0x138] = a4\n 76371: u8 [a0 + 0x10] = a4\n 76374: a1 = a3 >> 0x38\n 76377: u8 [a0 + 0xf] = a1\n 76380: a1 = a3 >> 0x30\n 76383: u8 [a0 + 0xe] = a1\n 76386: a1 = a3 >> 0x28\n 76389: u8 [a0 + 0xd] = a1\n 76392: a1 = a3 >> 0x20\n 76395: u8 [a0 + 0xc] = a1\n 76398: a1 = a3 >> 0x18\n 76401: u8 [a0 + 0xb] = a1\n 76404: a1 = a3 >> 0x10\n 76407: u8 [a0 + 0xa] = a1\n 76410: a1 = a3 >> 0x8\n 76413: u8 [a0 + 0x9] = a1\n 76416: u64 [s1 + 0x140] = a3\n 76420: u8 [a0 + 0x8] = a3\n 76423: a1 = a2 >> 0x38\n 76426: u8 [a0 + 0x7] = a1\n 76429: a1 = a2 >> 0x30\n 76432: u8 [a0 + 0x6] = a1\n 76435: a1 = a2 >> 0x28\n 76438: u8 [a0 + 0x5] = a1\n 76441: a1 = a2 >> 0x20\n 76444: u8 [a0 + 0x4] = a1\n 76447: a1 = a2 >> 0x18\n 76450: u8 [a0 + 0x3] = a1\n 76453: a1 = a2 >> 0x10\n 76456: u8 [a0 + 0x2] = a1\n 76459: a1 = a2 >> 0x8\n 76462: u8 [a0 + 0x1] = a1\n 76465: u64 [s1 + 0x148] = a2\n 76469: u8 [a0] = a2\n 76471: a0 = 0x20\n 76474: a1 = 0x20\n 76477: ra = 852, jump @0\n      : @948 [@dyn 426] (gas: 67)\n 76484: a2 = u64 [s1 + 0x150]\n 76488: a1 = a2 >> 0x38\n 76491: u8 [a0 + 0x1f] = a1\n 76494: a1 = a2 >> 0x30\n 76497: u8 [a0 + 0x1e] = a1\n 76500: a1 = a2 >> 0x28\n 76503: u8 [a0 + 0x1d] = a1\n 76506: a1 = a2 >> 0x20\n 76509: u8 [a0 + 0x1c] = a1\n 76512: a1 = a2 >> 0x18\n 76515: u8 [a0 + 0x1b] = a1\n 76518: a1 = a2 >> 0x10\n 76521: u8 [a0 + 0x1a] = a1\n 76524: a1 = a2 >> 0x8\n 76527: u8 [a0 + 0x19] = a1\n 76530: u8 [a0 + 0x18] = a2\n 76533: a2 = u64 [s1 + 0x158]\n 76537: a1 = a2 >> 0x38\n 76540: u8 [a0 + 0x17] = a1\n 76543: a1 = a2 >> 0x30\n 76546: u8 [a0 + 0x16] = a1\n 76549: a1 = a2 >> 0x28\n 76552: u8 [a0 + 0x15] = a1\n 76555: a1 = a2 >> 0x20\n 76558: u8 [a0 + 0x14] = a1\n 76561: a1 = a2 >> 0x18\n 76564: u8 [a0 + 0x13] = a1\n 76567: a1 = a2 >> 0x10\n 76570: u8 [a0 + 0x12] = a1\n 76573: a1 = a2 >> 0x8\n 76576: u8 [a0 + 0x11] = a1\n 76579: u8 [a0 + 0x10] = a2\n 76582: a2 = u64 [s1 + 0x160]\n 76586: a1 = a2 >> 0x38\n 76589: u8 [a0 + 0xf] = a1\n 76592: a1 = a2 >> 0x30\n 76595: u8 [a0 + 0xe] = a1\n 76598: a1 = a2 >> 0x28\n 76601: u8 [a0 + 0xd] = a1\n 76604: a1 = a2 >> 0x20\n 76607: u8 [a0 + 0xc] = a1\n 76610: a1 = a2 >> 0x18\n 76613: u8 [a0 + 0xb] = a1\n 76616: a1 = a2 >> 0x10\n 76619: u8 [a0 + 0xa] = a1\n 76622: a1 = a2 >> 0x8\n 76625: u8 [a0 + 0x9] = a1\n 76628: u8 [a0 + 0x8] = a2\n 76631: a2 = u64 [s1 + 0x188]\n 76635: a1 = a2 >> 0x38\n 76638: u8 [a0 + 0x7] = a1\n 76641: a1 = a2 >> 0x30\n 76644: u8 [a0 + 0x6] = a1\n 76647: a1 = a2 >> 0x28\n 76650: u8 [a0 + 0x5] = a1\n 76653: a1 = a2 >> 0x20\n 76656: u8 [a0 + 0x4] = a1\n 76659: a1 = a2 >> 0x18\n 76662: u8 [a0 + 0x3] = a1\n 76665: a1 = a2 >> 0x10\n 76668: u8 [a0 + 0x2] = a1\n 76671: a1 = a2 >> 0x8\n 76674: u8 [a0 + 0x1] = a1\n 76677: u8 [a0] = a2\n 76679: a1 = 0x40\n 76682: a0 = 0\n 76684: ra = 854, jump @0\n      : @949 [@dyn 427] (gas: 27)\n 76691: i32 a0 = a0 + 0\n 76693: i32 a2 = s1 + 0x360\n 76697: a1 = 0x40\n 76700: ecalli 8 // 'hash_keccak_256'\n 76702: a0 = u64 [s1 + 0x378]\n 76706: a1 = u64 [s1 + 0x370]\n 76710: a2 = u64 [s1 + 0x368]\n 76714: a3 = u64 [s1 + 0x360]\n 76718: a4 = reverse a0\n 76720: a0 = reverse a1\n 76722: a1 = reverse a2\n 76724: a2 = reverse a3\n 76726: a3 = u64 [s1 + 0x70]\n 76729: u64 [s1 + 0x238] = a3\n 76733: a3 = u64 [s1 + 0x78]\n 76736: u64 [s1 + 0x230] = a3\n 76740: a3 = u64 [s1 + 0x190]\n 76744: u64 [s1 + 0x228] = a3\n 76748: a3 = u64 [s1 + 0x198]\n 76752: u64 [s1 + 0x220] = a3\n 76756: u64 [s1 + 0x258] = a2\n 76760: u64 [s1 + 0x250] = a1\n 76764: u64 [s1 + 0x248] = a0\n 76768: a0 = s1 + 0x240\n 76772: a1 = s1 + 0x220\n 76776: u64 [s1 + 0x240] = a4\n 76780: ra = 856, jump @900\n      : @950 [@dyn 428] (gas: 30)\n 76786: i32 a0 = s1 + 0x300\n 76790: ecalli 4 // 'caller'\n 76792: a0 = u32 [s1 + 0x310]\n 76796: u64 [s1 + 0x188] = a0\n 76800: a0 = u64 [s1 + 0x308]\n 76804: u64 [s1 + 0x128] = a0\n 76808: a0 = u64 [s1 + 0x300]\n 76812: u64 [s1 + 0x198] = a0\n 76816: a0 = sp + 0xffffffffffffffe0\n 76819: a0 = a0 & 0xffffffffffffffe0\n 76822: u64 [s1 + 0x190] = a0\n 76826: sp = a0\n 76828: u64 [a0 + 24] = 0\n 76831: u64 [a0 + 16] = 0\n 76834: u64 [a0 + 8] = 0\n 76837: u64 [a0 + 0] = 0\n 76839: i32 a0 = a0 + 0\n 76841: ecalli 15 // 'value_transferred'\n 76843: a1 = u64 [s1 + 0x190]\n 76847: a0 = u64 [a1 + 0x18]\n 76850: u64 [s1 + 0x150] = a0\n 76854: a0 = u64 [a1 + 0x10]\n 76857: u64 [s1 + 0x158] = a0\n 76861: a0 = u64 [a1 + 0x8]\n 76864: u64 [s1 + 0x160] = a0\n 76868: a0 = u64 [a1]\n 76870: u64 [s1 + 0x190] = a0\n 76874: a0 = 0x40\n 76877: a1 = 0x20\n 76880: ra = 858, jump @0\n      : @951 [@dyn 429] (gas: 100)\n 76887: a1 = u8 [a0 + 0x11]\n 76890: a2 = u8 [a0 + 0x10]\n 76893: a3 = u8 [a0 + 0x12]\n 76896: a4 = u8 [a0 + 0x13]\n 76899: a1 = a1 << 0x8\n 76902: a1 = a1 | a2\n 76905: a3 = a3 << 0x10\n 76908: a4 = a4 << 0x18\n 76911: a3 = a3 | a4\n 76914: a1 = a1 | a3\n 76917: a2 = u8 [a0 + 0x15]\n 76920: a3 = u8 [a0 + 0x14]\n 76923: a4 = u8 [a0 + 0x16]\n 76926: a5 = u8 [a0 + 0x17]\n 76929: a2 = a2 << 0x8\n 76932: a2 = a2 | a3\n 76935: a4 = a4 << 0x10\n 76938: a5 = a5 << 0x18\n 76941: a4 = a4 | a5\n 76944: a2 = a2 | a4\n 76947: a2 = a2 << 0x20\n 76950: t0 = a2 | a1\n 76953: a2 = u8 [a0 + 0x1]\n 76956: a3 = u8 [a0]\n 76958: a4 = u8 [a0 + 0x2]\n 76961: a5 = u8 [a0 + 0x3]\n 76964: a2 = a2 << 0x8\n 76967: a2 = a2 | a3\n 76970: a4 = a4 << 0x10\n 76973: a5 = a5 << 0x18\n 76976: a4 = a4 | a5\n 76979: a2 = a2 | a4\n 76982: a3 = u8 [a0 + 0x5]\n 76985: a4 = u8 [a0 + 0x4]\n 76988: a5 = u8 [a0 + 0x6]\n 76991: a1 = u8 [a0 + 0x7]\n 76994: a3 = a3 << 0x8\n 76997: a3 = a3 | a4\n 77000: a5 = a5 << 0x10\n 77003: a1 = a1 << 0x18\n 77006: a1 = a1 | a5\n 77009: a1 = a1 | a3\n 77012: a1 = a1 << 0x20\n 77015: t1 = a1 | a2\n 77018: a1 = u8 [a0 + 0x19]\n 77021: a3 = u8 [a0 + 0x18]\n 77024: a4 = u8 [a0 + 0x1a]\n 77027: a5 = u8 [a0 + 0x1b]\n 77030: a1 = a1 << 0x8\n 77033: a1 = a1 | a3\n 77036: a4 = a4 << 0x10\n 77039: a5 = a5 << 0x18\n 77042: a4 = a4 | a5\n 77045: a1 = a1 | a4\n 77048: a3 = u8 [a0 + 0x1d]\n 77051: a4 = u8 [a0 + 0x1c]\n 77054: a5 = u8 [a0 + 0x1e]\n 77057: a2 = u8 [a0 + 0x1f]\n 77060: a3 = a3 << 0x8\n 77063: a3 = a3 | a4\n 77066: a5 = a5 << 0x10\n 77069: a2 = a2 << 0x18\n 77072: a2 = a2 | a5\n 77075: a2 = a2 | a3\n 77078: a2 = a2 << 0x20\n 77081: a3 = a2 | a1\n 77084: a1 = u8 [a0 + 0x9]\n 77087: a2 = u8 [a0 + 0x8]\n 77090: a4 = u8 [a0 + 0xa]\n 77093: a5 = u8 [a0 + 0xb]\n 77096: a1 = a1 << 0x8\n 77099: a1 = a1 | a2\n 77102: a4 = a4 << 0x10\n 77105: a5 = a5 << 0x18\n 77108: a4 = a4 | a5\n 77111: a1 = a1 | a4\n 77114: a2 = u8 [a0 + 0xd]\n 77117: a4 = u8 [a0 + 0xc]\n 77120: a5 = u8 [a0 + 0xe]\n 77123: a0 = u8 [a0 + 0xf]\n 77126: a2 = a2 << 0x8\n 77129: a2 = a2 | a4\n 77132: a5 = a5 << 0x10\n 77135: a0 = a0 << 0x18\n 77138: a0 = a0 | a5\n 77141: a0 = a0 | a2\n 77144: a0 = a0 << 0x20\n 77147: a0 = a0 | a1\n 77150: a1 = reverse a0\n 77152: a0 = reverse a3\n 77154: a2 = reverse t1\n 77156: a3 = reverse t0\n 77158: a2 = a2 | a3\n 77161: a3 = a0 | a1\n 77164: a3 = a3 | a2\n 77167: a3 = a3 >> 0x20\n 77170: a1 = a1 | a2\n 77173: a1 = a1 << 0x20\n 77176: a1 = a1 | a3\n 77179: jump @966 if a1 != 0\n      : @952 (gas: 18)\n 77183: a1 = u64 [s1 + 0x128]\n 77187: a1 = reverse a1\n 77189: a2 = a1 << 0x20\n 77192: a3 = u64 [s1 + 0x188]\n 77196: a3 = reverse a3\n 77198: a3 = a3 >> 0x20\n 77201: a2 = a2 | a3\n 77204: u64 [s1 + 0x188] = a2\n 77208: a2 = u64 [s1 + 0x198]\n 77212: a2 = reverse a2\n 77214: a2 = a2 << 0x20\n 77217: a1 = a1 >> 0x20\n 77220: a1 = a1 | a2\n 77223: u64 [s1 + 0x128] = a1\n 77227: i32 a0 = a0 + 0\n 77229: u64 [s1 + 0x120] = a0\n 77233: a1 = 0x20\n 77236: ra = 860, jump @0\n      : @953 [@dyn 430] (gas: 71)\n 77243: a1 = u64 [s1 + 0x150]\n 77247: a1 = reverse a1\n 77249: a2 = u64 [s1 + 0x158]\n 77253: a2 = reverse a2\n 77255: a3 = u64 [s1 + 0x160]\n 77259: a3 = reverse a3\n 77261: a4 = u64 [s1 + 0x190]\n 77265: a4 = reverse a4\n 77267: a5 = a4 >> 0x38\n 77270: u8 [a0 + 0x1f] = a5\n 77273: a5 = a4 >> 0x30\n 77276: u8 [a0 + 0x1e] = a5\n 77279: a5 = a4 >> 0x28\n 77282: u8 [a0 + 0x1d] = a5\n 77285: a5 = a4 >> 0x20\n 77288: u8 [a0 + 0x1c] = a5\n 77291: a5 = a4 >> 0x18\n 77294: u8 [a0 + 0x1b] = a5\n 77297: a5 = a4 >> 0x10\n 77300: u8 [a0 + 0x1a] = a5\n 77303: a5 = a4 >> 0x8\n 77306: u8 [a0 + 0x19] = a5\n 77309: u8 [a0 + 0x18] = a4\n 77312: u8 [a0 + 0x10] = a3\n 77315: a4 = a3 >> 0x38\n 77318: u8 [a0 + 0x17] = a4\n 77321: a4 = a3 >> 0x30\n 77324: u8 [a0 + 0x16] = a4\n 77327: a4 = a3 >> 0x28\n 77330: u8 [a0 + 0x15] = a4\n 77333: a4 = a3 >> 0x20\n 77336: u8 [a0 + 0x14] = a4\n 77339: a4 = a3 >> 0x18\n 77342: u8 [a0 + 0x13] = a4\n 77345: a4 = a3 >> 0x10\n 77348: u8 [a0 + 0x12] = a4\n 77351: a3 = a3 >> 0x8\n 77354: u8 [a0 + 0x11] = a3\n 77357: u8 [a0 + 0x8] = a2\n 77360: a3 = a2 >> 0x38\n 77363: u8 [a0 + 0xf] = a3\n 77366: a3 = a2 >> 0x30\n 77369: u8 [a0 + 0xe] = a3\n 77372: a3 = a2 >> 0x28\n 77375: u8 [a0 + 0xd] = a3\n 77378: a3 = a2 >> 0x20\n 77381: u8 [a0 + 0xc] = a3\n 77384: a3 = a2 >> 0x18\n 77387: u8 [a0 + 0xb] = a3\n 77390: a3 = a2 >> 0x10\n 77393: u8 [a0 + 0xa] = a3\n 77396: a2 = a2 >> 0x8\n 77399: u8 [a0 + 0x9] = a2\n 77402: u8 [a0] = a1\n 77404: a2 = a1 >> 0x38\n 77407: u8 [a0 + 0x7] = a2\n 77410: a2 = a1 >> 0x30\n 77413: u8 [a0 + 0x6] = a2\n 77416: a2 = a1 >> 0x28\n 77419: u8 [a0 + 0x5] = a2\n 77422: a2 = a1 >> 0x20\n 77425: u8 [a0 + 0x4] = a2\n 77428: a2 = a1 >> 0x18\n 77431: u8 [a0 + 0x3] = a2\n 77434: a2 = a1 >> 0x10\n 77437: u8 [a0 + 0x2] = a2\n 77440: a1 = a1 >> 0x8\n 77443: u8 [a0 + 0x1] = a1\n 77446: a1 = 0x20\n 77449: a0 = u64 [s1 + 0x120]\n 77453: ra = 862, jump @0\n      : @954 [@dyn 431] (gas: 54)\n 77460: a1 = u64 [0x20080]\n 77465: a2 = u64 [0x20088]\n 77470: a3 = u64 [0x20090]\n 77475: a4 = u64 [0x20098]\n 77480: u64 [s1 + 0x378] = a1\n 77484: u64 [s1 + 0x370] = a2\n 77488: u64 [s1 + 0x368] = a3\n 77492: u64 [s1 + 0x360] = a4\n 77496: a1 = u64 [s1 + 0x168]\n 77500: u64 [s1 + 0x398] = a1\n 77504: a1 = u64 [s1 + 0x170]\n 77508: u64 [s1 + 0x390] = a1\n 77512: a1 = u64 [s1 + 0x178]\n 77516: u64 [s1 + 0x388] = a1\n 77520: a1 = u64 [s1 + 0x180]\n 77524: u64 [s1 + 0x380] = a1\n 77528: a1 = u64 [s1 + 0x130]\n 77532: u64 [s1 + 0x3b8] = a1\n 77536: a1 = u64 [s1 + 0x138]\n 77540: u64 [s1 + 0x3b0] = a1\n 77544: a1 = u64 [s1 + 0x140]\n 77548: u64 [s1 + 0x3a8] = a1\n 77552: a1 = u64 [s1 + 0x148]\n 77556: u64 [s1 + 0x3a0] = a1\n 77560: a1 = u64 [s1 + 0x188]\n 77564: a1 = reverse a1\n 77566: u64 [s1 + 0x3d8] = a1\n 77570: a1 = u64 [s1 + 0x128]\n 77574: a1 = reverse a1\n 77576: u64 [s1 + 0x3d0] = a1\n 77580: a1 = u64 [s1 + 0x198]\n 77584: a1 = a1 << 0x20\n 77587: u64 [s1 + 0x3c8] = a1\n 77591: u64 [s1 + 960] = 0\n 77595: i32 a2 = a0 + 0\n 77597: i32 a0 = s1 + 0x360\n 77601: a1 = 0x4\n 77604: a3 = 0x20\n 77607: ecalli 5 // 'deposit_event'\n 77609: a0 = u64 [s1 + 0x18]\n 77612: a1 = u64 [s1 + 0x58]\n 77615: u64 [a0 + 0x18] = a1\n 77618: a1 = u64 [s1 + 0x50]\n 77621: u64 [a0 + 0x10] = a1\n 77624: a1 = u64 [s1 + 0x60]\n 77627: u64 [a0 + 0x8] = a1\n 77630: a1 = u64 [s1 + 0x68]\n 77633: u64 [a0] = a1\n 77635: sp = s0 + 0xfffffffffffffc00\n 77639: ra = u64 [sp + 0x3f8]\n 77643: s0 = u64 [sp + 0x3f0]\n 77647: s1 = u64 [sp + 0x3e8]\n 77651: sp = sp + 0x400\n 77655: ret\n      : @955 (gas: 3)\n 77657: a0 = 0x40\n 77660: a1 = 0x20\n 77663: ra = 864, jump @0\n      : @956 [@dyn 432] (gas: 104)\n 77670: a1 = u8 [a0 + 0x11]\n 77673: a2 = u8 [a0 + 0x10]\n 77676: a3 = u8 [a0 + 0x12]\n 77679: a4 = u8 [a0 + 0x13]\n 77682: a1 = a1 << 0x8\n 77685: a1 = a1 | a2\n 77688: a3 = a3 << 0x10\n 77691: a4 = a4 << 0x18\n 77694: a3 = a3 | a4\n 77697: a1 = a1 | a3\n 77700: a2 = u8 [a0 + 0x15]\n 77703: a3 = u8 [a0 + 0x14]\n 77706: a4 = u8 [a0 + 0x16]\n 77709: a5 = u8 [a0 + 0x17]\n 77712: a2 = a2 << 0x8\n 77715: a2 = a2 | a3\n 77718: a4 = a4 << 0x10\n 77721: a5 = a5 << 0x18\n 77724: a4 = a4 | a5\n 77727: a2 = a2 | a4\n 77730: a2 = a2 << 0x20\n 77733: t0 = a2 | a1\n 77736: a2 = u8 [a0 + 0x1]\n 77739: a3 = u8 [a0]\n 77741: a4 = u8 [a0 + 0x2]\n 77744: a5 = u8 [a0 + 0x3]\n 77747: a2 = a2 << 0x8\n 77750: a2 = a2 | a3\n 77753: a4 = a4 << 0x10\n 77756: a5 = a5 << 0x18\n 77759: a4 = a4 | a5\n 77762: a2 = a2 | a4\n 77765: a3 = u8 [a0 + 0x5]\n 77768: a4 = u8 [a0 + 0x4]\n 77771: a5 = u8 [a0 + 0x6]\n 77774: a1 = u8 [a0 + 0x7]\n 77777: a3 = a3 << 0x8\n 77780: a3 = a3 | a4\n 77783: a5 = a5 << 0x10\n 77786: a1 = a1 << 0x18\n 77789: a1 = a1 | a5\n 77792: a1 = a1 | a3\n 77795: a1 = a1 << 0x20\n 77798: t1 = a1 | a2\n 77801: a1 = u8 [a0 + 0x19]\n 77804: a3 = u8 [a0 + 0x18]\n 77807: a4 = u8 [a0 + 0x1a]\n 77810: a5 = u8 [a0 + 0x1b]\n 77813: a1 = a1 << 0x8\n 77816: a1 = a1 | a3\n 77819: a4 = a4 << 0x10\n 77822: a5 = a5 << 0x18\n 77825: a4 = a4 | a5\n 77828: a1 = a1 | a4\n 77831: a3 = u8 [a0 + 0x1d]\n 77834: a4 = u8 [a0 + 0x1c]\n 77837: a5 = u8 [a0 + 0x1e]\n 77840: a2 = u8 [a0 + 0x1f]\n 77843: a3 = a3 << 0x8\n 77846: a3 = a3 | a4\n 77849: a5 = a5 << 0x10\n 77852: a2 = a2 << 0x18\n 77855: a2 = a2 | a5\n 77858: a2 = a2 | a3\n 77861: a2 = a2 << 0x20\n 77864: a3 = a2 | a1\n 77867: a1 = u8 [a0 + 0x9]\n 77870: a2 = u8 [a0 + 0x8]\n 77873: a4 = u8 [a0 + 0xa]\n 77876: a5 = u8 [a0 + 0xb]\n 77879: a1 = a1 << 0x8\n 77882: a1 = a1 | a2\n 77885: a4 = a4 << 0x10\n 77888: a5 = a5 << 0x18\n 77891: a4 = a4 | a5\n 77894: a1 = a1 | a4\n 77897: a2 = u8 [a0 + 0xd]\n 77900: a4 = u8 [a0 + 0xc]\n 77903: a5 = u8 [a0 + 0xe]\n 77906: a0 = u8 [a0 + 0xf]\n 77909: a2 = a2 << 0x8\n 77912: a2 = a2 | a4\n 77915: a5 = a5 << 0x10\n 77918: a0 = a0 << 0x18\n 77921: a0 = a0 | a5\n 77924: a0 = a0 | a2\n 77927: a0 = a0 << 0x20\n 77930: a0 = a0 | a1\n 77933: a4 = reverse a0\n 77935: a1 = reverse a3\n 77937: a2 = reverse t1\n 77939: a0 = reverse t0\n 77941: u64 [s1 + 0x198] = a0\n 77945: u64 [s1 + 0x188] = a2\n 77949: a0 = a0 | a2\n 77952: a2 = a1\n 77954: a1 = a1 | a4\n 77957: a1 = a1 | a0\n 77960: a1 = a1 >> 0x20\n 77963: u64 [s1 + 0x190] = a4\n 77967: a0 = a0 | a4\n 77970: a0 = a0 << 0x20\n 77973: a0 = a0 | a1\n 77976: jump @966 if a0 != 0\n      : @957 (gas: 5)\n 77980: u64 [s1 + 0x180] = a2\n 77984: i32 a0 = a2 + 0\n 77986: a1 = 0x20\n 77989: u64 [s1 + 0x178] = a0\n 77993: ra = 866, jump @0\n      : @958 [@dyn 433] (gas: 51)\n 78000: u8 [a0 + 31] = 0\n 78003: u8 [a0 + 30] = 0\n 78006: u8 [a0 + 29] = 0\n 78009: u8 [a0 + 28] = 0\n 78012: u8 [a0 + 27] = 0\n 78015: u8 [a0 + 26] = 0\n 78018: u8 [a0 + 25] = 0\n 78021: u8 [a0 + 24] = 0\n 78024: u8 [a0 + 23] = 0\n 78027: u8 [a0 + 22] = 0\n 78030: u8 [a0 + 21] = 0\n 78033: u8 [a0 + 20] = 0\n 78036: u8 [a0 + 19] = 0\n 78039: u8 [a0 + 18] = 0\n 78042: u8 [a0 + 17] = 0\n 78045: u8 [a0 + 16] = 0\n 78048: u8 [a0 + 15] = 0\n 78051: u8 [a0 + 14] = 0\n 78054: u8 [a0 + 13] = 0\n 78057: u8 [a0 + 12] = 0\n 78060: u8 [a0 + 11] = 0\n 78063: u8 [a0 + 10] = 0\n 78066: u8 [a0 + 9] = 0\n 78069: u8 [a0 + 8] = 0\n 78072: u8 [a0 + 7] = 0\n 78075: u8 [a0 + 6] = 0\n 78078: u8 [a0 + 5] = 0\n 78081: u8 [a0 + 4] = 0\n 78084: u8 [a0 + 3] = 0xa0\n 78089: u8 [a0 + 2] = 0x79\n 78093: u8 [a0 + 1] = 0xc3\n 78098: u8 [a0 + 0] = 0x8\n 78101: a1 = u64 [s1 + 0x180]\n 78105: a0 = a1 + 0x4\n 78108: a1 = a0 <u a1\n 78111: a3 = u64 [s1 + 0x198]\n 78115: a2 = a3 + a1\n 78118: a3 = a2 <u a3\n 78121: a3 = a1 if a1 == 0\n 78124: a1 = u64 [s1 + 0x190]\n 78128: a3 = a3 + a1\n 78131: a1 = a3 <u a1\n 78134: a4 = u64 [s1 + 0x188]\n 78138: a4 = a4 + a1\n 78141: u64 [s1 + 0x1a8] = a2\n 78145: u64 [s1 + 0x1a0] = a0\n 78149: u64 [s1 + 0x1b0] = a3\n 78153: a0 = s1 + 0x1c0\n 78157: a1 = s1 + 0x1a0\n 78161: u64 [s1 + 0x1b8] = a4\n 78165: ra = 868, jump @884\n      : @959 [@dyn 434] (gas: 5)\n 78171: a0 = u64 [s1 + 0x1c8]\n 78175: t0 = u64 [s1 + 0x1d8]\n 78179: t1 = u64 [s1 + 0x1c0]\n 78183: a3 = u64 [s1 + 0x1d0]\n 78187: jump @965\n      : @960 (gas: 3)\n 78190: a0 = 0x40\n 78193: a1 = 0x20\n 78196: ra = 870, jump @0\n      : @961 [@dyn 435] (gas: 104)\n 78203: a1 = u8 [a0 + 0x11]\n 78206: a2 = u8 [a0 + 0x10]\n 78209: a3 = u8 [a0 + 0x12]\n 78212: a4 = u8 [a0 + 0x13]\n 78215: a1 = a1 << 0x8\n 78218: a1 = a1 | a2\n 78221: a3 = a3 << 0x10\n 78224: a4 = a4 << 0x18\n 78227: a3 = a3 | a4\n 78230: a1 = a1 | a3\n 78233: a2 = u8 [a0 + 0x15]\n 78236: a3 = u8 [a0 + 0x14]\n 78239: a4 = u8 [a0 + 0x16]\n 78242: a5 = u8 [a0 + 0x17]\n 78245: a2 = a2 << 0x8\n 78248: a2 = a2 | a3\n 78251: a4 = a4 << 0x10\n 78254: a5 = a5 << 0x18\n 78257: a4 = a4 | a5\n 78260: a2 = a2 | a4\n 78263: a2 = a2 << 0x20\n 78266: t0 = a2 | a1\n 78269: a2 = u8 [a0 + 0x1]\n 78272: a3 = u8 [a0]\n 78274: a4 = u8 [a0 + 0x2]\n 78277: a5 = u8 [a0 + 0x3]\n 78280: a2 = a2 << 0x8\n 78283: a2 = a2 | a3\n 78286: a4 = a4 << 0x10\n 78289: a5 = a5 << 0x18\n 78292: a4 = a4 | a5\n 78295: a2 = a2 | a4\n 78298: a3 = u8 [a0 + 0x5]\n 78301: a4 = u8 [a0 + 0x4]\n 78304: a5 = u8 [a0 + 0x6]\n 78307: a1 = u8 [a0 + 0x7]\n 78310: a3 = a3 << 0x8\n 78313: a3 = a3 | a4\n 78316: a5 = a5 << 0x10\n 78319: a1 = a1 << 0x18\n 78322: a1 = a1 | a5\n 78325: a1 = a1 | a3\n 78328: a1 = a1 << 0x20\n 78331: t1 = a1 | a2\n 78334: a1 = u8 [a0 + 0x19]\n 78337: a3 = u8 [a0 + 0x18]\n 78340: a4 = u8 [a0 + 0x1a]\n 78343: a5 = u8 [a0 + 0x1b]\n 78346: a1 = a1 << 0x8\n 78349: a1 = a1 | a3\n 78352: a4 = a4 << 0x10\n 78355: a5 = a5 << 0x18\n 78358: a4 = a4 | a5\n 78361: a1 = a1 | a4\n 78364: a3 = u8 [a0 + 0x1d]\n 78367: a4 = u8 [a0 + 0x1c]\n 78370: a5 = u8 [a0 + 0x1e]\n 78373: a2 = u8 [a0 + 0x1f]\n 78376: a3 = a3 << 0x8\n 78379: a3 = a3 | a4\n 78382: a5 = a5 << 0x10\n 78385: a2 = a2 << 0x18\n 78388: a2 = a2 | a5\n 78391: a2 = a2 | a3\n 78394: a2 = a2 << 0x20\n 78397: a3 = a2 | a1\n 78400: a1 = u8 [a0 + 0x9]\n 78403: a2 = u8 [a0 + 0x8]\n 78406: a4 = u8 [a0 + 0xa]\n 78409: a5 = u8 [a0 + 0xb]\n 78412: a1 = a1 << 0x8\n 78415: a1 = a1 | a2\n 78418: a4 = a4 << 0x10\n 78421: a5 = a5 << 0x18\n 78424: a4 = a4 | a5\n 78427: a1 = a1 | a4\n 78430: a2 = u8 [a0 + 0xd]\n 78433: a4 = u8 [a0 + 0xc]\n 78436: a5 = u8 [a0 + 0xe]\n 78439: a0 = u8 [a0 + 0xf]\n 78442: a2 = a2 << 0x8\n 78445: a2 = a2 | a4\n 78448: a5 = a5 << 0x10\n 78451: a0 = a0 << 0x18\n 78454: a0 = a0 | a5\n 78457: a0 = a0 | a2\n 78460: a0 = a0 << 0x20\n 78463: a0 = a0 | a1\n 78466: a4 = reverse a0\n 78468: a1 = reverse a3\n 78470: a2 = reverse t1\n 78472: a0 = reverse t0\n 78474: u64 [s1 + 0x198] = a0\n 78478: u64 [s1 + 0x188] = a2\n 78482: a0 = a0 | a2\n 78485: a2 = a1\n 78487: a1 = a1 | a4\n 78490: a1 = a1 | a0\n 78493: a1 = a1 >> 0x20\n 78496: u64 [s1 + 0x190] = a4\n 78500: a0 = a0 | a4\n 78503: a0 = a0 << 0x20\n 78506: a0 = a0 | a1\n 78509: jump @966 if a0 != 0\n      : @962 (gas: 5)\n 78513: u64 [s1 + 0x180] = a2\n 78517: i32 a0 = a2 + 0\n 78519: a1 = 0x20\n 78522: u64 [s1 + 0x178] = a0\n 78526: ra = 872, jump @0\n      : @963 [@dyn 436] (gas: 51)\n 78533: u8 [a0 + 31] = 0\n 78536: u8 [a0 + 30] = 0\n 78539: u8 [a0 + 29] = 0\n 78542: u8 [a0 + 28] = 0\n 78545: u8 [a0 + 27] = 0\n 78548: u8 [a0 + 26] = 0\n 78551: u8 [a0 + 25] = 0\n 78554: u8 [a0 + 24] = 0\n 78557: u8 [a0 + 23] = 0\n 78560: u8 [a0 + 22] = 0\n 78563: u8 [a0 + 21] = 0\n 78566: u8 [a0 + 20] = 0\n 78569: u8 [a0 + 19] = 0\n 78572: u8 [a0 + 18] = 0\n 78575: u8 [a0 + 17] = 0\n 78578: u8 [a0 + 16] = 0\n 78581: u8 [a0 + 15] = 0\n 78584: u8 [a0 + 14] = 0\n 78587: u8 [a0 + 13] = 0\n 78590: u8 [a0 + 12] = 0\n 78593: u8 [a0 + 11] = 0\n 78596: u8 [a0 + 10] = 0\n 78599: u8 [a0 + 9] = 0\n 78602: u8 [a0 + 8] = 0\n 78605: u8 [a0 + 7] = 0\n 78608: u8 [a0 + 6] = 0\n 78611: u8 [a0 + 5] = 0\n 78614: u8 [a0 + 4] = 0\n 78617: u8 [a0 + 3] = 0xa0\n 78622: u8 [a0 + 2] = 0x79\n 78626: u8 [a0 + 1] = 0xc3\n 78631: u8 [a0 + 0] = 0x8\n 78634: a1 = u64 [s1 + 0x180]\n 78638: a0 = a1 + 0x4\n 78641: a1 = a0 <u a1\n 78644: a3 = u64 [s1 + 0x198]\n 78648: a2 = a3 + a1\n 78651: a3 = a2 <u a3\n 78654: a3 = a1 if a1 == 0\n 78657: a1 = u64 [s1 + 0x190]\n 78661: a3 = a3 + a1\n 78664: a1 = a3 <u a1\n 78667: a4 = u64 [s1 + 0x188]\n 78671: a4 = a4 + a1\n 78674: u64 [s1 + 0x2a8] = a2\n 78678: u64 [s1 + 0x2a0] = a0\n 78682: u64 [s1 + 0x2b0] = a3\n 78686: a0 = s1 + 0x2c0\n 78690: a1 = s1 + 0x2a0\n 78694: u64 [s1 + 0x2b8] = a4\n 78698: ra = 874, jump @892\n      : @964 [@dyn 437] (gas: 5)\n 78704: a0 = u64 [s1 + 0x2c8]\n 78708: t0 = u64 [s1 + 0x2d8]\n 78712: t1 = u64 [s1 + 0x2c0]\n 78716: a3 = u64 [s1 + 0x2d0]\n 78720: fallthrough\n      : @965 (gas: 27)\n 78721: a1 = u64 [s1 + 0x198]\n 78725: a4 = a0 ^ a1\n 78728: a5 = a0 <u a1\n 78731: ra = a1\n 78733: t2 = u64 [s1 + 0x180]\n 78737: a1 = t1 <u t2\n 78740: a5 = a1 if a4 == 0\n 78743: a2 = u64 [s1 + 0x190]\n 78747: a4 = a3 - a2\n 78750: a3 = a3 <u a2\n 78753: a2 = u64 [s1 + 0x188]\n 78757: a2 = t0 - a2\n 78760: a2 = a2 - a3\n 78763: a3 = a4 <u a5\n 78766: a2 = a2 - a3\n 78769: a4 = a4 - a5\n 78772: a0 = a0 - ra\n 78775: a1 = a0 - a1\n 78778: a0 = t1 - t2\n 78781: a1 = a1 | a2\n 78784: a2 = a0 | a4\n 78787: a2 = a2 | a1\n 78790: a1 = a1 | a4\n 78793: a2 = a2 >> 0x20\n 78796: a1 = a1 << 0x20\n 78799: a1 = a1 | a2\n 78802: jump @971 if a1 == 0\n      : @966 (gas: 1)\n 78805: trap\n      : @967 (gas: 8)\n 78806: u64 [s1 + 528] = 0\n 78810: u64 [s1 + 520] = 0\n 78814: u64 [s1 + 512] = 0\n 78818: a0 = 0x4e487b7100000000\n 78828: a1 = s1 + 0x200\n 78832: u64 [s1 + 0x218] = a0\n 78836: a0 = 0\n 78838: ra = 876, jump @23\n      : @968 [@dyn 438] (gas: 7)\n 78845: u64 [s1 + 504] = 0\n 78849: u64 [s1 + 496] = 0\n 78853: u64 [s1 + 480] = 0x11\n 78858: a0 = 0x4\n 78861: a1 = s1 + 0x1e0\n 78865: u64 [s1 + 488] = 0\n 78869: ra = 878, jump @23\n      : @969 [@dyn 439] (gas: 3)\n 78876: a1 = 0x24\n 78879: a0 = 0\n 78881: ra = 880, jump @0\n      : @970 [@dyn 440] (gas: 5)\n 78888: i32 a1 = a0 + 0\n 78890: a0 = 0x1\n 78893: a2 = 0x24\n 78896: ecalli 12 // 'seal_return'\n 78898: fallthrough\n      : @971 (gas: 4)\n 78899: i32 a1 = a0 + 0\n 78901: u64 [s1 + 0x198] = a1\n 78905: a0 = u64 [s1 + 0x178]\n 78909: ra = 882, jump @0\n      : @972 [@dyn 441] (gas: 6)\n 78916: i32 a1 = a0 + 0\n 78918: a0 = 0x1\n 78921: a2 = u64 [s1 + 0x198]\n 78925: ra = 0x374\n 78929: ecalli 12 // 'seal_return'\n 78931: fallthrough\n      : @973 [@dyn 442] (gas: 22)\n 78932: sp = sp + 0xffffffffffffff80\n 78935: u64 [sp + 0x78] = ra\n 78938: u64 [sp + 0x70] = s0\n 78941: u64 [sp + 0x68] = s1\n 78944: s0 = sp + 0x80\n 78948: sp = sp & 0xfffffffffffffff0\n 78951: a2 = u64 [a1]\n 78953: a3 = u64 [a1 + 0x8]\n 78956: a4 = u64 [a1 + 0x10]\n 78959: a1 = u64 [a1 + 0x18]\n 78962: s1 = a0\n 78964: u64 [sp + 0x18] = a1\n 78967: u64 [sp + 0x10] = a4\n 78970: u64 [sp + 0x8] = a3\n 78973: u64 [sp] = a2\n 78975: u64 [sp + 56] = 0\n 78978: u64 [sp + 48] = 0\n 78981: u64 [sp + 40] = 0\n 78984: a0 = sp + 0x40\n 78987: a2 = sp\n 78989: u64 [sp + 32] = 0\n 78992: ra = 886, jump @868\n      : @974 [@dyn 443] (gas: 14)\n 78998: a0 = u64 [sp + 0x50]\n 79001: a1 = u64 [sp + 0x58]\n 79004: a2 = u64 [sp + 0x40]\n 79007: a3 = u64 [sp + 0x48]\n 79010: u64 [s1 + 0x10] = a0\n 79013: u64 [s1 + 0x18] = a1\n 79016: u64 [s1] = a2\n 79018: u64 [s1 + 0x8] = a3\n 79021: sp = s0 + 0xffffffffffffff80\n 79024: ra = u64 [sp + 0x78]\n 79027: s0 = u64 [sp + 0x70]\n 79030: s1 = u64 [sp + 0x68]\n 79033: sp = sp + 0x80\n 79037: ret\n      : @975 (gas: 39)\n 79039: sp = sp + 0xfffffffffffffec0\n 79043: u64 [sp + 0x138] = ra\n 79047: u64 [sp + 0x130] = s0\n 79051: u64 [sp + 0x128] = s1\n 79055: s0 = sp + 0x140\n 79059: sp = sp & 0xffffffffffffffe0\n 79062: a2 = u64 [a1 + 0x18]\n 79065: u64 [sp] = a2\n 79067: a2 = u64 [a1 + 0x10]\n 79070: u64 [sp + 0x8] = a2\n 79073: a2 = u64 [a1 + 0x8]\n 79076: u64 [sp + 0x10] = a2\n 79079: a1 = u64 [a1]\n 79081: u64 [sp + 0x18] = a1\n 79084: a1 = u64 [a0 + 0x18]\n 79087: u64 [sp + 0x20] = a1\n 79090: a1 = u64 [a0 + 0x10]\n 79093: u64 [sp + 0x28] = a1\n 79096: a1 = u64 [a0 + 0x8]\n 79099: u64 [sp + 0x30] = a1\n 79102: a0 = u64 [a0]\n 79104: u64 [sp + 0x38] = a0\n 79107: u64 [sp + 248] = 0\n 79111: u64 [sp + 240] = 0\n 79115: u64 [sp + 232] = 0\n 79119: s1 = 0x4\n 79122: u64 [sp + 0xe0] = s1\n 79126: u64 [sp + 280] = 0\n 79130: u64 [sp + 272] = 0\n 79134: u64 [sp + 264] = 0\n 79138: u64 [sp + 256] = 0\n 79142: u32 [sp + 192] = 0x20\n 79147: i32 a1 = sp + 0xe0\n 79151: i32 a3 = sp + 0x100\n 79155: i32 a4 = sp + 0xc0\n 79159: a2 = 0xffffffffffffffff\n 79162: a0 = 0\n 79164: ecalli 7 // 'get_storage'\n 79166: fallthrough\n      : @976 (gas: 9)\n 79167: a0 = u64 [sp + 0x118]\n 79171: a1 = u64 [sp + 0x108]\n 79175: a2 = u64 [sp + 0x100]\n 79179: a3 = u64 [sp + 0x110]\n 79183: a0 = a0 | a1\n 79186: a1 = a2 ^ 0x1\n 79189: a1 = a1 | a3\n 79192: a0 = a0 | a1\n 79195: jump @979 if a0 != 0\n      : @977 (gas: 73)\n 79199: u64 [sp + 248] = 0\n 79203: u64 [sp + 240] = 0\n 79207: u64 [sp + 232] = 0\n 79211: u64 [sp + 224] = 0x4\n 79216: u64 [sp + 280] = 0\n 79220: u64 [sp + 272] = 0\n 79224: u64 [sp + 264] = 0\n 79228: u64 [sp + 256] = 0\n 79232: u32 [sp + 192] = 0x20\n 79237: i32 a1 = sp + 0xe0\n 79241: i32 a3 = sp + 0x100\n 79245: i32 a4 = sp + 0xc0\n 79249: a2 = 0xffffffffffffffff\n 79252: a0 = 0\n 79254: ecalli 7 // 'get_storage'\n 79256: u64 [sp + 248] = 0\n 79260: u64 [sp + 240] = 0\n 79264: u64 [sp + 232] = 0\n 79268: u64 [sp + 224] = 0x4\n 79273: u64 [sp + 280] = 0\n 79277: u64 [sp + 272] = 0\n 79281: u64 [sp + 264] = 0\n 79285: u64 [sp + 256] = 0\n 79289: i32 a1 = sp + 0xe0\n 79293: i32 a3 = sp + 0x100\n 79297: a2 = 0xffffffffffffffff\n 79300: a4 = 0x20\n 79303: a0 = 0\n 79305: ecalli 14 // 'set_storage'\n 79307: a0 = u64 [sp]\n 79309: u64 [sp + 0x58] = a0\n 79312: a0 = u64 [sp + 0x8]\n 79315: u64 [sp + 0x50] = a0\n 79318: a0 = u64 [sp + 0x10]\n 79321: u64 [sp + 0x48] = a0\n 79324: a0 = u64 [sp + 0x18]\n 79327: u64 [sp + 0x40] = a0\n 79330: a0 = u64 [sp + 0x20]\n 79333: u64 [sp + 0x78] = a0\n 79336: a0 = u64 [sp + 0x28]\n 79339: u64 [sp + 0x70] = a0\n 79342: a0 = u64 [sp + 0x30]\n 79345: u64 [sp + 0x68] = a0\n 79348: a0 = sp + 0x60\n 79351: a1 = sp + 0x40\n 79354: a2 = u64 [sp + 0x38]\n 79357: u64 [sp + 0x60] = a2\n 79360: ra = 0x378\n 79364: sp = sp + 0xfffffffffffffe00\n 79368: u64 [sp + 0x1f8] = ra\n 79372: u64 [sp + 0x1f0] = s0\n 79376: u64 [sp + 488] = 0x4\n 79381: s0 = sp + 0x200\n 79385: sp = sp & 0xffffffffffffffe0\n 79388: a2 = u64 [a1 + 0x18]\n 79391: u64 [sp + 0x60] = a2\n 79394: a2 = u64 [a1 + 0x10]\n 79397: u64 [sp + 0x68] = a2\n 79400: a2 = u64 [a1 + 0x8]\n 79403: u64 [sp + 0x70] = a2\n 79406: a1 = u64 [a1]\n 79408: u64 [sp + 0x78] = a1\n 79411: a1 = u64 [a0]\n 79413: u64 [sp + 0x58] = a1\n 79416: a1 = u64 [a0 + 0x8]\n 79419: u64 [sp + 0x50] = a1\n 79422: a1 = u64 [a0 + 0x10]\n 79425: u64 [sp + 0x48] = a1\n 79428: s1 = u64 [a0 + 0x18]\n 79431: a1 = 0x20\n 79434: a0 = 0\n 79436: ra = 0x38c\n 79440: jump @0\n      : @978 [@dyn 444] (gas: 35)\n 79444: u64 [sp + 248] = 0\n 79448: u64 [sp + 240] = 0\n 79452: u64 [sp + 232] = 0\n 79456: u64 [sp + 0xe0] = s1\n 79460: u64 [sp + 280] = 0\n 79464: u64 [sp + 272] = 0\n 79468: u64 [sp + 264] = 0\n 79472: u64 [sp + 256] = 0\n 79476: u32 [sp + 192] = 0x20\n 79481: i32 a1 = sp + 0xe0\n 79485: i32 a3 = sp + 0x100\n 79489: i32 a4 = sp + 0xc0\n 79493: a2 = 0xffffffffffffffff\n 79496: a0 = 0\n 79498: ecalli 7 // 'get_storage'\n 79500: u64 [sp + 248] = 0\n 79504: u64 [sp + 240] = 0\n 79508: u64 [sp + 232] = 0\n 79512: u64 [sp + 0xe0] = s1\n 79516: u64 [sp + 280] = 0\n 79520: u64 [sp + 272] = 0\n 79524: u64 [sp + 264] = 0\n 79528: u64 [sp + 256] = 0x1\n 79533: i32 a1 = sp + 0xe0\n 79537: i32 a3 = sp + 0x100\n 79541: a2 = 0xffffffffffffffff\n 79544: a4 = 0x20\n 79547: a0 = 0\n 79549: ecalli 14 // 'set_storage'\n 79551: sp = s0 + 0xfffffffffffffec0\n 79555: ra = u64 [sp + 0x138]\n 79559: s0 = u64 [sp + 0x130]\n 79563: s1 = u64 [sp + 0x128]\n 79567: sp = sp + 0x140\n 79571: ret\n      : @979 (gas: 3)\n 79573: a0 = 0x40\n 79576: a1 = 0x20\n 79579: ra = 890, jump @0\n      : @980 [@dyn 445] (gas: 103)\n 79586: a1 = u8 [a0 + 0x11]\n 79589: a2 = u8 [a0 + 0x10]\n 79592: a3 = u8 [a0 + 0x12]\n 79595: a4 = u8 [a0 + 0x13]\n 79598: a1 = a1 << 0x8\n 79601: a1 = a1 | a2\n 79604: a3 = a3 << 0x10\n 79607: a4 = a4 << 0x18\n 79610: a3 = a3 | a4\n 79613: a1 = a1 | a3\n 79616: a2 = u8 [a0 + 0x15]\n 79619: a3 = u8 [a0 + 0x14]\n 79622: a4 = u8 [a0 + 0x16]\n 79625: a5 = u8 [a0 + 0x17]\n 79628: a2 = a2 << 0x8\n 79631: a2 = a2 | a3\n 79634: a4 = a4 << 0x10\n 79637: a5 = a5 << 0x18\n 79640: a4 = a4 | a5\n 79643: a2 = a2 | a4\n 79646: a2 = a2 << 0x20\n 79649: t0 = a2 | a1\n 79652: a2 = u8 [a0 + 0x1]\n 79655: a3 = u8 [a0]\n 79657: a4 = u8 [a0 + 0x2]\n 79660: a5 = u8 [a0 + 0x3]\n 79663: a2 = a2 << 0x8\n 79666: a2 = a2 | a3\n 79669: a4 = a4 << 0x10\n 79672: a5 = a5 << 0x18\n 79675: a4 = a4 | a5\n 79678: a2 = a2 | a4\n 79681: a3 = u8 [a0 + 0x5]\n 79684: a4 = u8 [a0 + 0x4]\n 79687: a5 = u8 [a0 + 0x6]\n 79690: s1 = u8 [a0 + 0x7]\n 79693: a3 = a3 << 0x8\n 79696: a3 = a3 | a4\n 79699: a5 = a5 << 0x10\n 79702: s1 = s1 << 0x18\n 79705: a5 = a5 | s1\n 79708: a3 = a3 | a5\n 79711: a3 = a3 << 0x20\n 79714: a2 = a2 | a3\n 79717: a3 = u8 [a0 + 0x19]\n 79720: a4 = u8 [a0 + 0x18]\n 79723: a5 = u8 [a0 + 0x1a]\n 79726: s1 = u8 [a0 + 0x1b]\n 79729: a3 = a3 << 0x8\n 79732: a3 = a3 | a4\n 79735: a5 = a5 << 0x10\n 79738: s1 = s1 << 0x18\n 79741: a5 = a5 | s1\n 79744: a3 = a3 | a5\n 79747: a4 = u8 [a0 + 0x1d]\n 79750: a5 = u8 [a0 + 0x1c]\n 79753: s1 = u8 [a0 + 0x1e]\n 79756: a1 = u8 [a0 + 0x1f]\n 79759: a4 = a4 << 0x8\n 79762: a4 = a4 | a5\n 79765: s1 = s1 << 0x10\n 79768: a1 = a1 << 0x18\n 79771: a1 = a1 | s1\n 79774: a1 = a1 | a4\n 79777: a1 = a1 << 0x20\n 79780: a3 = a3 | a1\n 79783: a1 = u8 [a0 + 0x9]\n 79786: a4 = u8 [a0 + 0x8]\n 79789: a5 = u8 [a0 + 0xa]\n 79792: s1 = u8 [a0 + 0xb]\n 79795: a1 = a1 << 0x8\n 79798: a1 = a1 | a4\n 79801: a5 = a5 << 0x10\n 79804: s1 = s1 << 0x18\n 79807: a5 = a5 | s1\n 79810: a1 = a1 | a5\n 79813: a4 = u8 [a0 + 0xd]\n 79816: a5 = u8 [a0 + 0xc]\n 79819: s1 = u8 [a0 + 0xe]\n 79822: a0 = u8 [a0 + 0xf]\n 79825: a4 = a4 << 0x8\n 79828: a4 = a4 | a5\n 79831: s1 = s1 << 0x10\n 79834: a0 = a0 << 0x18\n 79837: a0 = a0 | s1\n 79840: a0 = a0 | a4\n 79843: a0 = a0 << 0x20\n 79846: a0 = a0 | a1\n 79849: s1 = reverse a0\n 79851: a1 = reverse a3\n 79853: a2 = reverse a2\n 79855: a0 = reverse t0\n 79857: u64 [sp + 0x38] = a0\n 79860: u64 [sp + 0x30] = a2\n 79863: a0 = a0 | a2\n 79866: a2 = a1\n 79868: a1 = a1 | s1\n 79871: a1 = a1 | a0\n 79874: a1 = a1 >> 0x20\n 79877: a0 = a0 | s1\n 79880: a0 = a0 << 0x20\n 79883: a0 = a0 | a1\n 79886: jump @984 if a0 != 0\n      : @981 (gas: 5)\n 79890: u64 [sp + 0x28] = a2\n 79893: i32 a0 = a2 + 0\n 79895: a1 = 0x20\n 79898: u64 [sp + 0x20] = a0\n 79901: ra = 892, jump @0\n      : @982 [@dyn 446] (gas: 50)\n 79908: u8 [a0 + 31] = 0\n 79911: u8 [a0 + 30] = 0\n 79914: u8 [a0 + 29] = 0\n 79917: u8 [a0 + 28] = 0\n 79920: u8 [a0 + 27] = 0\n 79923: u8 [a0 + 26] = 0\n 79926: u8 [a0 + 25] = 0\n 79929: u8 [a0 + 24] = 0\n 79932: u8 [a0 + 23] = 0\n 79935: u8 [a0 + 22] = 0\n 79938: u8 [a0 + 21] = 0\n 79941: u8 [a0 + 20] = 0\n 79944: u8 [a0 + 19] = 0\n 79947: u8 [a0 + 18] = 0\n 79950: u8 [a0 + 17] = 0\n 79953: u8 [a0 + 16] = 0\n 79956: u8 [a0 + 15] = 0\n 79959: u8 [a0 + 14] = 0\n 79962: u8 [a0 + 13] = 0\n 79965: u8 [a0 + 12] = 0\n 79968: u8 [a0 + 11] = 0\n 79971: u8 [a0 + 10] = 0\n 79974: u8 [a0 + 9] = 0\n 79977: u8 [a0 + 8] = 0\n 79980: u8 [a0 + 7] = 0\n 79983: u8 [a0 + 6] = 0\n 79986: u8 [a0 + 5] = 0\n 79989: u8 [a0 + 4] = 0\n 79992: u8 [a0 + 3] = 0xa0\n 79997: u8 [a0 + 2] = 0x79\n 80001: u8 [a0 + 1] = 0xc3\n 80006: u8 [a0 + 0] = 0x8\n 80009: a1 = u64 [sp + 0x28]\n 80012: a0 = a1 + 0x4\n 80015: a1 = a0 <u a1\n 80018: a3 = u64 [sp + 0x38]\n 80021: a2 = a3 + a1\n 80024: a3 = a2 <u a3\n 80027: a3 = a1 if a1 == 0\n 80030: a3 = a3 + s1\n 80033: a1 = a3 <u s1\n 80036: a4 = u64 [sp + 0x30]\n 80039: a4 = a4 + a1\n 80042: u64 [sp + 0x88] = a2\n 80046: u64 [sp + 0x80] = a0\n 80050: u64 [sp + 0x90] = a3\n 80054: a0 = sp + 0xa0\n 80058: a1 = sp + 0x80\n 80062: u64 [sp + 0x98] = a4\n 80066: ra = 894, jump @416\n      : @983 [@dyn 447] (gas: 30)\n 80073: a0 = u64 [sp + 0xa8]\n 80077: t0 = u64 [sp + 0xb8]\n 80081: t1 = u64 [sp + 0xa0]\n 80085: a3 = u64 [sp + 0xb0]\n 80089: a1 = u64 [sp + 0x38]\n 80092: a4 = a0 ^ a1\n 80095: a5 = a0 <u a1\n 80098: t2 = a1\n 80100: a2 = u64 [sp + 0x28]\n 80103: a1 = t1 <u a2\n 80106: a5 = a1 if a4 == 0\n 80109: a4 = a3 - s1\n 80112: a3 = a3 <u s1\n 80115: s1 = u64 [sp + 0x30]\n 80118: s1 = t0 - s1\n 80121: s1 = s1 - a3\n 80124: a3 = a4 <u a5\n 80127: s1 = s1 - a3\n 80130: a4 = a4 - a5\n 80133: a0 = a0 - t2\n 80136: a1 = a0 - a1\n 80139: a0 = t1 - a2\n 80142: a1 = a1 | s1\n 80145: a2 = a0 | a4\n 80148: a2 = a2 | a1\n 80151: a1 = a1 | a4\n 80154: a2 = a2 >> 0x20\n 80157: a1 = a1 << 0x20\n 80160: a1 = a1 | a2\n 80163: jump @985 if a1 == 0\n      : @984 (gas: 1)\n 80166: trap\n      : @985 (gas: 4)\n 80167: i32 s1 = a0 + 0\n 80169: a0 = u64 [sp + 0x20]\n 80172: a1 = s1\n 80174: ra = 896, jump @0\n      : @986 [@dyn 448] (gas: 6)\n 80181: i32 a1 = a0 + 0\n 80183: a0 = 0x1\n 80186: a2 = s1\n 80188: ra = 0x382\n 80192: ecalli 12 // 'seal_return'\n 80194: fallthrough\n      : @987 [@dyn 449] (gas: 12)\n 80195: a1 = u64 [a0 + 0x10]\n 80198: a2 = u64 [a0 + 0x18]\n 80201: a3 = u64 [a0 + 0x8]\n 80204: a0 = u64 [a0]\n 80206: a2 = a2 | a3\n 80209: a3 = a0 | a1\n 80212: a3 = a3 | a2\n 80215: a3 = a3 >> 0x20\n 80218: a1 = a1 | a2\n 80221: a1 = a1 << 0x20\n 80224: a1 = a1 | a3\n 80227: jump @990 if a1 != 0\n      : @988 (gas: 5)\n 80231: sp = sp + 0xfffffffffffffff8\n 80234: u64 [sp] = ra\n 80236: i32 a0 = a0 + 0\n 80238: a1 = 0x20\n 80241: ra = 900, jump @0\n      : @989 [@dyn 450] (gas: 37)\n 80248: u8 [a0 + 31] = 0\n 80251: u8 [a0 + 30] = 0\n 80254: u8 [a0 + 29] = 0\n 80257: u8 [a0 + 28] = 0\n 80260: u8 [a0 + 27] = 0\n 80263: u8 [a0 + 26] = 0\n 80266: u8 [a0 + 25] = 0\n 80269: u8 [a0 + 24] = 0\n 80272: u8 [a0 + 23] = 0\n 80275: u8 [a0 + 22] = 0\n 80278: u8 [a0 + 21] = 0\n 80281: u8 [a0 + 20] = 0\n 80284: u8 [a0 + 19] = 0\n 80287: u8 [a0 + 18] = 0\n 80290: u8 [a0 + 17] = 0\n 80293: u8 [a0 + 16] = 0\n 80296: u8 [a0 + 15] = 0\n 80299: u8 [a0 + 14] = 0\n 80302: u8 [a0 + 13] = 0\n 80305: u8 [a0 + 12] = 0\n 80308: u8 [a0 + 11] = 0\n 80311: u8 [a0 + 10] = 0\n 80314: u8 [a0 + 9] = 0\n 80317: u8 [a0 + 8] = 0\n 80320: u8 [a0 + 7] = 0x77\n 80324: u8 [a0 + 6] = 0x61\n 80328: u8 [a0 + 5] = 0x72\n 80332: a2 = 0x64\n 80335: u8 [a0 + 0x4] = a2\n 80338: u8 [a0 + 3] = 0x72\n 80342: u8 [a0 + 2] = 0x65\n 80346: u8 [a0 + 1] = 0x76\n 80350: a1 = 0x6f\n 80353: u8 [a0] = a1\n 80355: ra = u64 [sp]\n 80357: sp = sp + 0x8\n 80360: ret\n      : @990 (gas: 1)\n 80362: trap\n      : @991 (gas: 17)\n 80363: sp = sp + 0xffffffffffffffa0\n 80366: u64 [sp + 0x58] = ra\n 80369: u64 [sp + 0x50] = s0\n 80372: u64 [sp + 0x48] = s1\n 80375: a3 = u64 [a1 + 0x18]\n 80378: a4 = u64 [a1 + 0x10]\n 80381: a5 = u64 [a1 + 0x8]\n 80384: s1 = u64 [a1]\n 80386: a1 = a5 | a3\n 80389: a2 = s1 | a4\n 80392: a2 = a2 | a1\n 80395: a2 = a2 >> 0x20\n 80398: a1 = a1 | a4\n 80401: a1 = a1 << 0x20\n 80404: a1 = a1 | a2\n 80407: u64 [sp + 0x28] = a0\n 80410: jump @998 if a1 != 0\n      : @992 (gas: 19)\n 80414: a0 = s1 + 0x20\n 80417: u64 [sp + 0x30] = a0\n 80420: a0 = a0 <u s1\n 80423: a1 = a5 + a0\n 80426: u64 [sp + 0x40] = a1\n 80429: u64 [sp + 0x8] = a5\n 80432: s0 = a1 <u a5\n 80435: s0 = a0 if a0 == 0\n 80438: s0 = s0 + a4\n 80441: u64 [sp + 0x10] = a4\n 80444: a0 = s0 <u a4\n 80447: u64 [sp + 0x18] = a3\n 80450: a0 = a0 + a3\n 80453: u64 [sp + 0x38] = a0\n 80456: u64 [sp] = s1\n 80458: i32 a0 = s1 + 0\n 80460: a1 = 0x20\n 80463: s1 = 0x20\n 80466: ra = 902, jump @0\n      : @993 [@dyn 451] (gas: 45)\n 80473: u8 [a0 + 0x1f] = s1\n 80476: a1 = u64 [sp + 0x30]\n 80479: s1 = a1\n 80481: a1 = a1 | s0\n 80484: a2 = u64 [sp + 0x40]\n 80487: a4 = u64 [sp + 0x38]\n 80490: a2 = a2 | a4\n 80493: a1 = a1 | a2\n 80496: a1 = a1 >> 0x20\n 80499: u64 [sp + 0x20] = s0\n 80502: a2 = a2 | s0\n 80505: a2 = a2 << 0x20\n 80508: a1 = a1 | a2\n 80511: u8 [a0 + 30] = 0\n 80514: u8 [a0 + 29] = 0\n 80517: u8 [a0 + 28] = 0\n 80520: u8 [a0 + 27] = 0\n 80523: u8 [a0 + 26] = 0\n 80526: u8 [a0 + 25] = 0\n 80529: u8 [a0 + 24] = 0\n 80532: u8 [a0 + 23] = 0\n 80535: u8 [a0 + 22] = 0\n 80538: u8 [a0 + 21] = 0\n 80541: u8 [a0 + 20] = 0\n 80544: u8 [a0 + 19] = 0\n 80547: u8 [a0 + 18] = 0\n 80550: u8 [a0 + 17] = 0\n 80553: u8 [a0 + 16] = 0\n 80556: u8 [a0 + 15] = 0\n 80559: u8 [a0 + 14] = 0\n 80562: u8 [a0 + 13] = 0\n 80565: u8 [a0 + 12] = 0\n 80568: u8 [a0 + 11] = 0\n 80571: u8 [a0 + 10] = 0\n 80574: u8 [a0 + 9] = 0\n 80577: u8 [a0 + 8] = 0\n 80580: u8 [a0 + 7] = 0\n 80583: u8 [a0 + 6] = 0\n 80586: u8 [a0 + 5] = 0\n 80589: u8 [a0 + 4] = 0\n 80592: u8 [a0 + 3] = 0\n 80595: u8 [a0 + 2] = 0\n 80598: u8 [a0 + 1] = 0\n 80601: u8 [a0 + 0] = 0\n 80603: jump @998 if a1 != 0\n      : @994 (gas: 4)\n 80607: i32 s0 = s1 + 0\n 80609: a1 = 0x20\n 80612: a0 = s0\n 80614: ra = 904, jump @0\n      : @995 [@dyn 452] (gas: 41)\n 80621: u8 [a0 + 31] = 0x8\n 80625: u8 [a0 + 30] = 0\n 80628: u8 [a0 + 29] = 0\n 80631: u8 [a0 + 28] = 0\n 80634: u8 [a0 + 27] = 0\n 80637: u8 [a0 + 26] = 0\n 80640: u8 [a0 + 25] = 0\n 80643: u8 [a0 + 24] = 0\n 80646: u8 [a0 + 23] = 0\n 80649: u8 [a0 + 22] = 0\n 80652: u8 [a0 + 21] = 0\n 80655: u8 [a0 + 20] = 0\n 80658: u8 [a0 + 19] = 0\n 80661: u8 [a0 + 18] = 0\n 80664: u8 [a0 + 17] = 0\n 80667: u8 [a0 + 16] = 0\n 80670: u8 [a0 + 15] = 0\n 80673: u8 [a0 + 14] = 0\n 80676: u8 [a0 + 13] = 0\n 80679: u8 [a0 + 12] = 0\n 80682: u8 [a0 + 11] = 0\n 80685: u8 [a0 + 10] = 0\n 80688: u8 [a0 + 9] = 0\n 80691: u8 [a0 + 8] = 0\n 80694: u8 [a0 + 7] = 0\n 80697: u8 [a0 + 6] = 0\n 80700: u8 [a0 + 5] = 0\n 80703: u8 [a0 + 4] = 0\n 80706: u8 [a0 + 3] = 0\n 80709: u8 [a0 + 2] = 0\n 80712: u8 [a0 + 1] = 0\n 80715: a1 = u64 [sp + 0x20]\n 80718: a2 = u64 [sp + 0x38]\n 80721: a1 = a1 | a2\n 80724: a2 = 0xffffffe0\n 80734: a2 = s1 <u a2\n 80737: a3 = u64 [sp + 0x40]\n 80740: a2 = 0 if a3 != 0\n 80742: a2 = 0 if a1 != 0\n 80744: u8 [a0 + 0] = 0\n 80746: jump @998 if a2 == 0\n      : @996 (gas: 3)\n 80750: i32 a0 = s0 + 0x20\n 80753: a1 = 0x20\n 80756: ra = 906, jump @0\n      : @997 [@dyn 453] (gas: 54)\n 80763: u8 [a0 + 31] = 0\n 80766: u8 [a0 + 30] = 0\n 80769: u8 [a0 + 29] = 0\n 80772: u8 [a0 + 28] = 0\n 80775: u8 [a0 + 27] = 0\n 80778: u8 [a0 + 26] = 0\n 80781: u8 [a0 + 25] = 0\n 80784: u8 [a0 + 24] = 0\n 80787: u8 [a0 + 23] = 0\n 80790: u8 [a0 + 22] = 0\n 80793: u8 [a0 + 21] = 0\n 80796: u8 [a0 + 20] = 0\n 80799: u8 [a0 + 19] = 0\n 80802: u8 [a0 + 18] = 0\n 80805: u8 [a0 + 17] = 0\n 80808: u8 [a0 + 16] = 0\n 80811: u8 [a0 + 15] = 0\n 80814: u8 [a0 + 14] = 0\n 80817: u8 [a0 + 13] = 0\n 80820: u8 [a0 + 12] = 0\n 80823: u8 [a0 + 11] = 0\n 80826: u8 [a0 + 10] = 0\n 80829: u8 [a0 + 9] = 0\n 80832: u8 [a0 + 8] = 0\n 80835: u8 [a0 + 7] = 0x77\n 80839: u8 [a0 + 6] = 0x61\n 80843: u8 [a0 + 5] = 0x72\n 80847: u8 [a0 + 4] = 0x64\n 80851: u8 [a0 + 3] = 0x72\n 80855: u8 [a0 + 2] = 0x65\n 80859: u8 [a0 + 1] = 0x76\n 80863: u8 [a0 + 0] = 0x6f\n 80866: a1 = u64 [sp]\n 80868: a0 = a1 + 0x60\n 80871: a1 = a0 <u a1\n 80874: a3 = u64 [sp + 0x8]\n 80877: a2 = a3 + a1\n 80880: a3 = a2 <u a3\n 80883: a3 = a1 if a1 == 0\n 80886: a1 = u64 [sp + 0x10]\n 80889: a3 = a3 + a1\n 80892: a1 = a3 <u a1\n 80895: a4 = u64 [sp + 0x18]\n 80898: a1 = a1 + a4\n 80901: a4 = u64 [sp + 0x28]\n 80904: u64 [a4] = a0\n 80906: u64 [a4 + 0x8] = a2\n 80909: u64 [a4 + 0x10] = a3\n 80912: u64 [a4 + 0x18] = a1\n 80915: ra = u64 [sp + 0x58]\n 80918: s0 = u64 [sp + 0x50]\n 80921: s1 = u64 [sp + 0x48]\n 80924: sp = sp + 0x60\n 80927: ret\n      : @998 (gas: 1)\n 80929: trap\n      : @999 [@dyn 454] (gas: 70)\n 80930: a1 = reverse s1\n 80932: a2 = u64 [sp + 0x48]\n 80935: a2 = reverse a2\n 80937: a3 = u64 [sp + 0x50]\n 80940: a3 = reverse a3\n 80942: a4 = u64 [sp + 0x58]\n 80945: a4 = reverse a4\n 80947: u8 [a0 + 0x18] = a4\n 80950: u8 [a0 + 0x10] = a3\n 80953: u8 [a0 + 0x8] = a2\n 80956: u8 [a0] = a1\n 80958: a5 = a4 >> 0x38\n 80961: u8 [a0 + 0x1f] = a5\n 80964: a5 = a4 >> 0x30\n 80967: u8 [a0 + 0x1e] = a5\n 80970: a5 = a4 >> 0x28\n 80973: u8 [a0 + 0x1d] = a5\n 80976: a5 = a4 >> 0x20\n 80979: u8 [a0 + 0x1c] = a5\n 80982: a5 = a4 >> 0x18\n 80985: u8 [a0 + 0x1b] = a5\n 80988: a5 = a4 >> 0x10\n 80991: u8 [a0 + 0x1a] = a5\n 80994: a4 = a4 >> 0x8\n 80997: u8 [a0 + 0x19] = a4\n 81000: a4 = a3 >> 0x38\n 81003: u8 [a0 + 0x17] = a4\n 81006: a4 = a3 >> 0x30\n 81009: u8 [a0 + 0x16] = a4\n 81012: a4 = a3 >> 0x28\n 81015: u8 [a0 + 0x15] = a4\n 81018: a4 = a3 >> 0x20\n 81021: u8 [a0 + 0x14] = a4\n 81024: a4 = a3 >> 0x18\n 81027: u8 [a0 + 0x13] = a4\n 81030: a4 = a3 >> 0x10\n 81033: u8 [a0 + 0x12] = a4\n 81036: a3 = a3 >> 0x8\n 81039: u8 [a0 + 0x11] = a3\n 81042: a3 = a2 >> 0x38\n 81045: u8 [a0 + 0xf] = a3\n 81048: a3 = a2 >> 0x30\n 81051: u8 [a0 + 0xe] = a3\n 81054: a3 = a2 >> 0x28\n 81057: u8 [a0 + 0xd] = a3\n 81060: a3 = a2 >> 0x20\n 81063: u8 [a0 + 0xc] = a3\n 81066: a3 = a2 >> 0x18\n 81069: u8 [a0 + 0xb] = a3\n 81072: a3 = a2 >> 0x10\n 81075: u8 [a0 + 0xa] = a3\n 81078: a2 = a2 >> 0x8\n 81081: u8 [a0 + 0x9] = a2\n 81084: a2 = a1 >> 0x38\n 81087: u8 [a0 + 0x7] = a2\n 81090: a2 = a1 >> 0x30\n 81093: u8 [a0 + 0x6] = a2\n 81096: a2 = a1 >> 0x28\n 81099: u8 [a0 + 0x5] = a2\n 81102: a2 = a1 >> 0x20\n 81105: u8 [a0 + 0x4] = a2\n 81108: a2 = a1 >> 0x18\n 81111: u8 [a0 + 0x3] = a2\n 81114: a2 = a1 >> 0x10\n 81117: u8 [a0 + 0x2] = a2\n 81120: a1 = a1 >> 0x8\n 81123: u8 [a0 + 0x1] = a1\n 81126: a0 = 0x20\n 81129: a1 = 0x20\n 81132: ra = 910, jump @0\n      : @1000 [@dyn 455] (gas: 35)\n 81139: u8 [a0 + 31] = 0x2\n 81143: u8 [a0 + 30] = 0\n 81146: u8 [a0 + 29] = 0\n 81149: u8 [a0 + 28] = 0\n 81152: u8 [a0 + 27] = 0\n 81155: u8 [a0 + 26] = 0\n 81158: u8 [a0 + 25] = 0\n 81161: u8 [a0 + 24] = 0\n 81164: u8 [a0 + 23] = 0\n 81167: u8 [a0 + 22] = 0\n 81170: u8 [a0 + 21] = 0\n 81173: u8 [a0 + 20] = 0\n 81176: u8 [a0 + 19] = 0\n 81179: u8 [a0 + 18] = 0\n 81182: u8 [a0 + 17] = 0\n 81185: u8 [a0 + 16] = 0\n 81188: u8 [a0 + 15] = 0\n 81191: u8 [a0 + 14] = 0\n 81194: u8 [a0 + 13] = 0\n 81197: u8 [a0 + 12] = 0\n 81200: u8 [a0 + 11] = 0\n 81203: u8 [a0 + 10] = 0\n 81206: u8 [a0 + 9] = 0\n 81209: u8 [a0 + 8] = 0\n 81212: u8 [a0 + 7] = 0\n 81215: u8 [a0 + 6] = 0\n 81218: u8 [a0 + 5] = 0\n 81221: u8 [a0 + 4] = 0\n 81224: u8 [a0 + 3] = 0\n 81227: u8 [a0 + 2] = 0\n 81230: u8 [a0 + 1] = 0\n 81233: u8 [a0 + 0] = 0\n 81235: a1 = 0x40\n 81238: a0 = 0\n 81240: ra = 912, jump @0\n      : @1001 [@dyn 456] (gas: 53)\n 81247: i32 a0 = a0 + 0\n 81249: i32 a2 = sp + 0x1c0\n 81253: a1 = 0x40\n 81256: ecalli 8 // 'hash_keccak_256'\n 81258: a0 = u64 [sp + 0x1d8]\n 81262: a1 = u64 [sp + 0x1d0]\n 81266: a2 = u64 [sp + 0x1c8]\n 81270: a3 = u64 [sp + 0x1c0]\n 81274: a0 = reverse a0\n 81276: u64 [sp + 0x58] = a0\n 81279: a0 = reverse a1\n 81281: u64 [sp + 0x50] = a0\n 81284: a0 = reverse a2\n 81286: u64 [sp + 0x48] = a0\n 81289: a0 = reverse a3\n 81291: u64 [sp + 0x40] = a0\n 81294: i32 a0 = sp + 0x180\n 81298: ecalli 4 // 'caller'\n 81300: a0 = u64 [sp + 0x188]\n 81304: a1 = u64 [sp + 0x180]\n 81308: a2 = i32 [sp + 0x190]\n 81312: a0 = reverse a0\n 81314: a3 = a0 >> 0x20\n 81317: s1 = reverse a1\n 81319: a1 = s1 << 0x20\n 81322: a1 = a1 | a3\n 81325: u64 [sp + 0x38] = a1\n 81328: a0 = a0 << 0x20\n 81331: a1 = reverse a2\n 81333: a1 = a1 >> 0x20\n 81336: a0 = a0 | a1\n 81339: u64 [sp + 0x30] = a0\n 81342: s1 = s1 >> 0x20\n 81345: a0 = u64 [sp + 0x40]\n 81348: u64 [sp + 0x1b8] = a0\n 81352: a0 = u64 [sp + 0x48]\n 81355: u64 [sp + 0x1b0] = a0\n 81359: a0 = u64 [sp + 0x50]\n 81362: u64 [sp + 0x1a8] = a0\n 81366: a0 = u64 [sp + 0x58]\n 81369: u64 [sp + 0x1a0] = a0\n 81373: u64 [sp + 472] = 0\n 81377: u64 [sp + 464] = 0\n 81381: u64 [sp + 456] = 0\n 81385: u64 [sp + 448] = 0\n 81389: u32 [sp + 480] = 0x20\n 81394: i32 a1 = sp + 0x1a0\n 81398: i32 a3 = sp + 0x1c0\n 81402: i32 a4 = sp + 0x1e0\n 81406: a2 = 0xffffffffffffffff\n 81409: a0 = 0\n 81411: ecalli 7 // 'get_storage'\n 81413: fallthrough\n      : @1002 (gas: 11)\n 81414: a0 = u32 [sp + 0x1d0]\n 81418: a1 = u64 [sp + 0x1c0]\n 81422: a2 = u64 [sp + 0x1c8]\n 81426: a0 = a0 ^ s1\n 81429: a3 = u64 [sp + 0x30]\n 81432: a1 = a1 ^ a3\n 81435: a0 = a0 | a1\n 81438: a1 = u64 [sp + 0x38]\n 81441: a1 = a1 ^ a2\n 81444: a0 = a0 | a1\n 81447: jump @1009 if a0 != 0\n      : @1003 (gas: 32)\n 81451: a0 = u64 [sp + 0x58]\n 81454: a2 = a0 + 0x3\n 81457: a0 = a2 <u a0\n 81460: a1 = u64 [sp + 0x50]\n 81463: a3 = a1 + a0\n 81466: a1 = a3 <u a1\n 81469: a1 = a0 if a0 == 0\n 81472: a0 = u64 [sp + 0x48]\n 81475: a1 = a1 + a0\n 81478: a0 = a1 <u a0\n 81481: a4 = u64 [sp + 0x40]\n 81484: a0 = a0 + a4\n 81487: u64 [sp + 0x38] = a2\n 81490: u64 [sp + 0x1a0] = a2\n 81494: u64 [sp + 0x30] = a3\n 81497: u64 [sp + 0x1a8] = a3\n 81501: u64 [sp + 0x28] = a1\n 81504: u64 [sp + 0x1b0] = a1\n 81508: u64 [sp + 0x20] = a0\n 81511: u64 [sp + 0x1b8] = a0\n 81515: u64 [sp + 472] = 0\n 81519: u64 [sp + 464] = 0\n 81523: u64 [sp + 456] = 0\n 81527: u64 [sp + 448] = 0\n 81531: u32 [sp + 480] = 0x20\n 81536: i32 a1 = sp + 0x1a0\n 81540: i32 a3 = sp + 0x1c0\n 81544: i32 a4 = sp + 0x1e0\n 81548: a2 = 0xffffffffffffffff\n 81551: a0 = 0\n 81553: ecalli 7 // 'get_storage'\n 81555: fallthrough\n      : @1004 (gas: 20)\n 81556: a0 = u64 [sp + 0x1d8]\n 81560: a1 = u64 [sp + 0x1c0]\n 81564: t1 = u64 [sp + 0x1d0]\n 81568: a3 = u64 [sp + 0x1c8]\n 81572: a2 = u64 [sp + 0x60]\n 81575: a4 = a0 ^ a2\n 81578: a0 = a0 <u a2\n 81581: a2 = u64 [sp + 0x68]\n 81584: a5 = t1 <u a2\n 81587: a5 = a0 if a4 != 0\n 81590: a0 = u64 [sp + 0x70]\n 81593: t0 = a3 ^ a0\n 81596: a3 = a3 <u a0\n 81599: s1 = u64 [sp + 0x78]\n 81602: a1 = a1 <u s1\n 81605: a1 = a3 if t0 != 0\n 81608: a0 = t1 ^ a2\n 81611: a0 = a0 | a4\n 81614: a1 = a5 if a0 != 0\n 81617: jump @1014 if a1 != 0\n      : @1005 (gas: 20)\n 81621: a0 = u64 [sp + 0x28]\n 81624: u64 [sp + 0x1b0] = a0\n 81628: a0 = u64 [sp + 0x30]\n 81631: u64 [sp + 0x1a8] = a0\n 81635: a0 = u64 [sp + 0x38]\n 81638: u64 [sp + 0x1a0] = a0\n 81642: a0 = u64 [sp + 0x20]\n 81645: u64 [sp + 0x1b8] = a0\n 81649: u64 [sp + 472] = 0\n 81653: u64 [sp + 464] = 0\n 81657: u64 [sp + 456] = 0\n 81661: u64 [sp + 448] = 0\n 81665: u32 [sp + 480] = 0x20\n 81670: i32 a1 = sp + 0x1a0\n 81674: i32 a3 = sp + 0x1c0\n 81678: i32 a4 = sp + 0x1e0\n 81682: a2 = 0xffffffffffffffff\n 81685: a0 = 0\n 81687: ecalli 7 // 'get_storage'\n 81689: fallthrough\n      : @1006 (gas: 22)\n 81690: a2 = u64 [sp + 0x1d8]\n 81694: a3 = u64 [sp + 0x1d0]\n 81698: t1 = u64 [sp + 0x1c8]\n 81702: a1 = u64 [sp + 0x1c0]\n 81706: a4 = u64 [sp + 0x60]\n 81709: a0 = a2 ^ a4\n 81712: a4 = a2 <u a4\n 81715: t0 = u64 [sp + 0x68]\n 81718: a5 = a3 <u t0\n 81721: u64 [sp + 0x10] = a5\n 81724: a4 = a5 if a0 == 0\n 81727: a5 = u64 [sp + 0x70]\n 81730: t2 = t1 ^ a5\n 81733: s1 = t1 <u a5\n 81736: a5 = u64 [sp + 0x78]\n 81739: u64 [sp] = a1\n 81741: ra = a1 <u a5\n 81744: s1 = ra if t2 == 0\n 81747: a5 = a3 ^ t0\n 81750: a0 = a0 | a5\n 81753: a4 = s1 if a0 == 0\n 81756: jump @1021 if a4 != 0\n      : @1007 (gas: 96)\n 81760: a0 = u64 [sp + 0x68]\n 81763: a0 = a3 - a0\n 81766: a3 = a0 - s1\n 81769: u64 [sp + 0x18] = a3\n 81772: a0 = a0 <u s1\n 81775: a3 = u64 [sp + 0x60]\n 81778: a2 = a2 - a3\n 81781: a1 = u64 [sp + 0x10]\n 81784: a2 = a2 - a1\n 81787: a2 = a2 - a0\n 81790: u64 [sp + 0x10] = a2\n 81793: a0 = u64 [sp + 0x70]\n 81796: a0 = t1 - a0\n 81799: a0 = a0 - ra\n 81802: u64 [sp + 0x8] = a0\n 81805: a0 = u64 [sp + 0x78]\n 81808: a1 = u64 [sp]\n 81810: a0 = a1 - a0\n 81813: u64 [sp] = a0\n 81815: a0 = u64 [sp + 0x28]\n 81818: u64 [sp + 0x1b0] = a0\n 81822: a0 = u64 [sp + 0x30]\n 81825: u64 [sp + 0x1a8] = a0\n 81829: a0 = u64 [sp + 0x38]\n 81832: u64 [sp + 0x1a0] = a0\n 81836: s1 = u64 [sp + 0x20]\n 81839: u64 [sp + 0x1b8] = s1\n 81843: u64 [sp + 472] = 0\n 81847: u64 [sp + 464] = 0\n 81851: u64 [sp + 456] = 0\n 81855: u64 [sp + 448] = 0\n 81859: u32 [sp + 480] = 0x20\n 81864: i32 a1 = sp + 0x1a0\n 81868: i32 a3 = sp + 0x1c0\n 81872: i32 a4 = sp + 0x1e0\n 81876: a2 = 0xffffffffffffffff\n 81879: a0 = 0\n 81881: ecalli 7 // 'get_storage'\n 81883: u64 [sp + 0x1b8] = s1\n 81887: a0 = u64 [sp + 0x28]\n 81890: u64 [sp + 0x1b0] = a0\n 81894: a0 = u64 [sp + 0x30]\n 81897: u64 [sp + 0x1a8] = a0\n 81901: a0 = u64 [sp + 0x38]\n 81904: u64 [sp + 0x1a0] = a0\n 81908: a0 = u64 [sp + 0x10]\n 81911: u64 [sp + 0x1d8] = a0\n 81915: a0 = u64 [sp + 0x18]\n 81918: u64 [sp + 0x1d0] = a0\n 81922: a0 = u64 [sp + 0x8]\n 81925: u64 [sp + 0x1c8] = a0\n 81929: a0 = u64 [sp]\n 81931: u64 [sp + 0x1c0] = a0\n 81935: i32 a1 = sp + 0x1a0\n 81939: i32 a3 = sp + 0x1c0\n 81943: a2 = 0xffffffffffffffff\n 81946: a4 = 0x20\n 81949: a0 = 0\n 81951: ecalli 14 // 'set_storage'\n 81953: a0 = u64 [sp + 0x40]\n 81956: u64 [sp + 0x1b8] = a0\n 81960: a0 = u64 [sp + 0x48]\n 81963: u64 [sp + 0x1b0] = a0\n 81967: a0 = u64 [sp + 0x50]\n 81970: u64 [sp + 0x1a8] = a0\n 81974: a0 = u64 [sp + 0x58]\n 81977: u64 [sp + 0x1a0] = a0\n 81981: u64 [sp + 472] = 0\n 81985: u64 [sp + 464] = 0\n 81989: u64 [sp + 456] = 0\n 81993: u64 [sp + 448] = 0\n 81997: u32 [sp + 480] = 0x20\n 82002: i32 a1 = sp + 0x1a0\n 82006: i32 a3 = sp + 0x1c0\n 82010: i32 a4 = sp + 0x1e0\n 82014: a2 = 0xffffffffffffffff\n 82017: a0 = 0\n 82019: ecalli 7 // 'get_storage'\n 82021: a2 = u64 [sp + 0x1c0]\n 82025: a0 = u64 [sp + 0x1c8]\n 82029: a1 = u32 [sp + 0x1d0]\n 82033: a3 = u64 [sp + 0x60]\n 82036: u64 [sp + 0x118] = a3\n 82040: a3 = u64 [sp + 0x68]\n 82043: u64 [sp + 0x110] = a3\n 82047: a3 = u64 [sp + 0x70]\n 82050: u64 [sp + 0x108] = a3\n 82054: a3 = u64 [sp + 0x78]\n 82057: u64 [sp + 0x100] = a3\n 82061: u64 [sp + 312] = 0\n 82065: u64 [sp + 0x130] = a1\n 82069: u64 [sp + 0x128] = a0\n 82073: a0 = sp + 0x120\n 82077: a1 = sp + 0x100\n 82081: u64 [sp + 0x120] = a2\n 82085: ra = 914, jump @1059\n      : @1008 [@dyn 457] (gas: 6)\n 82091: sp = s0 + 0xfffffffffffffe00\n 82095: ra = u64 [sp + 0x1f8]\n 82099: s0 = u64 [sp + 0x1f0]\n 82103: s1 = u64 [sp + 0x1e8]\n 82107: sp = sp + 0x200\n 82111: ret\n      : @1009 (gas: 3)\n 82113: a0 = 0x40\n 82116: a1 = 0x20\n 82119: ra = 916, jump @0\n      : @1010 [@dyn 458] (gas: 103)\n 82126: a1 = u8 [a0 + 0x11]\n 82129: a2 = u8 [a0 + 0x10]\n 82132: a3 = u8 [a0 + 0x12]\n 82135: a4 = u8 [a0 + 0x13]\n 82138: a1 = a1 << 0x8\n 82141: a1 = a1 | a2\n 82144: a3 = a3 << 0x10\n 82147: a4 = a4 << 0x18\n 82150: a3 = a3 | a4\n 82153: a1 = a1 | a3\n 82156: a2 = u8 [a0 + 0x15]\n 82159: a3 = u8 [a0 + 0x14]\n 82162: a4 = u8 [a0 + 0x16]\n 82165: a5 = u8 [a0 + 0x17]\n 82168: a2 = a2 << 0x8\n 82171: a2 = a2 | a3\n 82174: a4 = a4 << 0x10\n 82177: a5 = a5 << 0x18\n 82180: a4 = a4 | a5\n 82183: a2 = a2 | a4\n 82186: a2 = a2 << 0x20\n 82189: t0 = a2 | a1\n 82192: a2 = u8 [a0 + 0x1]\n 82195: a3 = u8 [a0]\n 82197: a4 = u8 [a0 + 0x2]\n 82200: a5 = u8 [a0 + 0x3]\n 82203: a2 = a2 << 0x8\n 82206: a2 = a2 | a3\n 82209: a4 = a4 << 0x10\n 82212: a5 = a5 << 0x18\n 82215: a4 = a4 | a5\n 82218: a2 = a2 | a4\n 82221: a3 = u8 [a0 + 0x5]\n 82224: a4 = u8 [a0 + 0x4]\n 82227: a5 = u8 [a0 + 0x6]\n 82230: s1 = u8 [a0 + 0x7]\n 82233: a3 = a3 << 0x8\n 82236: a3 = a3 | a4\n 82239: a5 = a5 << 0x10\n 82242: s1 = s1 << 0x18\n 82245: a5 = a5 | s1\n 82248: a3 = a3 | a5\n 82251: a3 = a3 << 0x20\n 82254: a2 = a2 | a3\n 82257: a3 = u8 [a0 + 0x19]\n 82260: a4 = u8 [a0 + 0x18]\n 82263: a5 = u8 [a0 + 0x1a]\n 82266: s1 = u8 [a0 + 0x1b]\n 82269: a3 = a3 << 0x8\n 82272: a3 = a3 | a4\n 82275: a5 = a5 << 0x10\n 82278: s1 = s1 << 0x18\n 82281: a5 = a5 | s1\n 82284: a3 = a3 | a5\n 82287: a4 = u8 [a0 + 0x1d]\n 82290: a5 = u8 [a0 + 0x1c]\n 82293: s1 = u8 [a0 + 0x1e]\n 82296: a1 = u8 [a0 + 0x1f]\n 82299: a4 = a4 << 0x8\n 82302: a4 = a4 | a5\n 82305: s1 = s1 << 0x10\n 82308: a1 = a1 << 0x18\n 82311: a1 = a1 | s1\n 82314: a1 = a1 | a4\n 82317: a1 = a1 << 0x20\n 82320: a3 = a3 | a1\n 82323: a1 = u8 [a0 + 0x9]\n 82326: a4 = u8 [a0 + 0x8]\n 82329: a5 = u8 [a0 + 0xa]\n 82332: s1 = u8 [a0 + 0xb]\n 82335: a1 = a1 << 0x8\n 82338: a1 = a1 | a4\n 82341: a5 = a5 << 0x10\n 82344: s1 = s1 << 0x18\n 82347: a5 = a5 | s1\n 82350: a1 = a1 | a5\n 82353: a4 = u8 [a0 + 0xd]\n 82356: a5 = u8 [a0 + 0xc]\n 82359: s1 = u8 [a0 + 0xe]\n 82362: a0 = u8 [a0 + 0xf]\n 82365: a4 = a4 << 0x8\n 82368: a4 = a4 | a5\n 82371: s1 = s1 << 0x10\n 82374: a0 = a0 << 0x18\n 82377: a0 = a0 | s1\n 82380: a0 = a0 | a4\n 82383: a0 = a0 << 0x20\n 82386: a0 = a0 | a1\n 82389: s1 = reverse a0\n 82391: a1 = reverse a3\n 82393: a2 = reverse a2\n 82395: a0 = reverse t0\n 82397: u64 [sp + 0x78] = a0\n 82400: u64 [sp + 0x70] = a2\n 82403: a0 = a0 | a2\n 82406: a2 = a1\n 82408: a1 = a1 | s1\n 82411: a1 = a1 | a0\n 82414: a1 = a1 >> 0x20\n 82417: a0 = a0 | s1\n 82420: a0 = a0 << 0x20\n 82423: a0 = a0 | a1\n 82426: jump @1020 if a0 != 0\n      : @1011 (gas: 5)\n 82430: u64 [sp + 0x68] = a2\n 82433: i32 a0 = a2 + 0\n 82435: a1 = 0x20\n 82438: u64 [sp + 0x60] = a0\n 82441: ra = 918, jump @0\n      : @1012 [@dyn 459] (gas: 50)\n 82448: u8 [a0 + 31] = 0\n 82451: u8 [a0 + 30] = 0\n 82454: u8 [a0 + 29] = 0\n 82457: u8 [a0 + 28] = 0\n 82460: u8 [a0 + 27] = 0\n 82463: u8 [a0 + 26] = 0\n 82466: u8 [a0 + 25] = 0\n 82469: u8 [a0 + 24] = 0\n 82472: u8 [a0 + 23] = 0\n 82475: u8 [a0 + 22] = 0\n 82478: u8 [a0 + 21] = 0\n 82481: u8 [a0 + 20] = 0\n 82484: u8 [a0 + 19] = 0\n 82487: u8 [a0 + 18] = 0\n 82490: u8 [a0 + 17] = 0\n 82493: u8 [a0 + 16] = 0\n 82496: u8 [a0 + 15] = 0\n 82499: u8 [a0 + 14] = 0\n 82502: u8 [a0 + 13] = 0\n 82505: u8 [a0 + 12] = 0\n 82508: u8 [a0 + 11] = 0\n 82511: u8 [a0 + 10] = 0\n 82514: u8 [a0 + 9] = 0\n 82517: u8 [a0 + 8] = 0\n 82520: u8 [a0 + 7] = 0\n 82523: u8 [a0 + 6] = 0\n 82526: u8 [a0 + 5] = 0\n 82529: u8 [a0 + 4] = 0\n 82532: u8 [a0 + 3] = 0xa0\n 82537: u8 [a0 + 2] = 0x79\n 82541: u8 [a0 + 1] = 0xc3\n 82546: u8 [a0 + 0] = 0x8\n 82549: a1 = u64 [sp + 0x68]\n 82552: a0 = a1 + 0x4\n 82555: a1 = a0 <u a1\n 82558: a3 = u64 [sp + 0x78]\n 82561: a2 = a3 + a1\n 82564: a3 = a2 <u a3\n 82567: a3 = a1 if a1 == 0\n 82570: a3 = a3 + s1\n 82573: a1 = a3 <u s1\n 82576: a4 = u64 [sp + 0x70]\n 82579: a4 = a4 + a1\n 82582: u64 [sp + 0x148] = a2\n 82586: u64 [sp + 0x140] = a0\n 82590: u64 [sp + 0x150] = a3\n 82594: a0 = sp + 0x160\n 82598: a1 = sp + 0x140\n 82602: u64 [sp + 0x158] = a4\n 82606: ra = 920, jump @535\n      : @1013 [@dyn 460] (gas: 5)\n 82613: a0 = u64 [sp + 0x168]\n 82617: t0 = u64 [sp + 0x178]\n 82621: t1 = u64 [sp + 0x160]\n 82625: a3 = u64 [sp + 0x170]\n 82629: jump @1019\n      : @1014 (gas: 3)\n 82632: a0 = 0x40\n 82635: a1 = 0x20\n 82638: ra = 922, jump @0\n      : @1015 [@dyn 461] (gas: 103)\n 82645: a1 = u8 [a0 + 0x11]\n 82648: a2 = u8 [a0 + 0x10]\n 82651: a3 = u8 [a0 + 0x12]\n 82654: a4 = u8 [a0 + 0x13]\n 82657: a1 = a1 << 0x8\n 82660: a1 = a1 | a2\n 82663: a3 = a3 << 0x10\n 82666: a4 = a4 << 0x18\n 82669: a3 = a3 | a4\n 82672: a1 = a1 | a3\n 82675: a2 = u8 [a0 + 0x15]\n 82678: a3 = u8 [a0 + 0x14]\n 82681: a4 = u8 [a0 + 0x16]\n 82684: a5 = u8 [a0 + 0x17]\n 82687: a2 = a2 << 0x8\n 82690: a2 = a2 | a3\n 82693: a4 = a4 << 0x10\n 82696: a5 = a5 << 0x18\n 82699: a4 = a4 | a5\n 82702: a2 = a2 | a4\n 82705: a2 = a2 << 0x20\n 82708: t0 = a2 | a1\n 82711: a2 = u8 [a0 + 0x1]\n 82714: a3 = u8 [a0]\n 82716: a4 = u8 [a0 + 0x2]\n 82719: a5 = u8 [a0 + 0x3]\n 82722: a2 = a2 << 0x8\n 82725: a2 = a2 | a3\n 82728: a4 = a4 << 0x10\n 82731: a5 = a5 << 0x18\n 82734: a4 = a4 | a5\n 82737: a2 = a2 | a4\n 82740: a3 = u8 [a0 + 0x5]\n 82743: a4 = u8 [a0 + 0x4]\n 82746: a5 = u8 [a0 + 0x6]\n 82749: s1 = u8 [a0 + 0x7]\n 82752: a3 = a3 << 0x8\n 82755: a3 = a3 | a4\n 82758: a5 = a5 << 0x10\n 82761: s1 = s1 << 0x18\n 82764: a5 = a5 | s1\n 82767: a3 = a3 | a5\n 82770: a3 = a3 << 0x20\n 82773: a2 = a2 | a3\n 82776: a3 = u8 [a0 + 0x19]\n 82779: a4 = u8 [a0 + 0x18]\n 82782: a5 = u8 [a0 + 0x1a]\n 82785: s1 = u8 [a0 + 0x1b]\n 82788: a3 = a3 << 0x8\n 82791: a3 = a3 | a4\n 82794: a5 = a5 << 0x10\n 82797: s1 = s1 << 0x18\n 82800: a5 = a5 | s1\n 82803: a3 = a3 | a5\n 82806: a4 = u8 [a0 + 0x1d]\n 82809: a5 = u8 [a0 + 0x1c]\n 82812: s1 = u8 [a0 + 0x1e]\n 82815: a1 = u8 [a0 + 0x1f]\n 82818: a4 = a4 << 0x8\n 82821: a4 = a4 | a5\n 82824: s1 = s1 << 0x10\n 82827: a1 = a1 << 0x18\n 82830: a1 = a1 | s1\n 82833: a1 = a1 | a4\n 82836: a1 = a1 << 0x20\n 82839: a3 = a3 | a1\n 82842: a1 = u8 [a0 + 0x9]\n 82845: a4 = u8 [a0 + 0x8]\n 82848: a5 = u8 [a0 + 0xa]\n 82851: s1 = u8 [a0 + 0xb]\n 82854: a1 = a1 << 0x8\n 82857: a1 = a1 | a4\n 82860: a5 = a5 << 0x10\n 82863: s1 = s1 << 0x18\n 82866: a5 = a5 | s1\n 82869: a1 = a1 | a5\n 82872: a4 = u8 [a0 + 0xd]\n 82875: a5 = u8 [a0 + 0xc]\n 82878: s1 = u8 [a0 + 0xe]\n 82881: a0 = u8 [a0 + 0xf]\n 82884: a4 = a4 << 0x8\n 82887: a4 = a4 | a5\n 82890: s1 = s1 << 0x10\n 82893: a0 = a0 << 0x18\n 82896: a0 = a0 | s1\n 82899: a0 = a0 | a4\n 82902: a0 = a0 << 0x20\n 82905: a0 = a0 | a1\n 82908: s1 = reverse a0\n 82910: a1 = reverse a3\n 82912: a2 = reverse a2\n 82914: a0 = reverse t0\n 82916: u64 [sp + 0x78] = a0\n 82919: u64 [sp + 0x70] = a2\n 82922: a0 = a0 | a2\n 82925: a2 = a1\n 82927: a1 = a1 | s1\n 82930: a1 = a1 | a0\n 82933: a1 = a1 >> 0x20\n 82936: a0 = a0 | s1\n 82939: a0 = a0 << 0x20\n 82942: a0 = a0 | a1\n 82945: jump @1020 if a0 != 0\n      : @1016 (gas: 5)\n 82949: u64 [sp + 0x68] = a2\n 82952: i32 a0 = a2 + 0\n 82954: a1 = 0x20\n 82957: u64 [sp + 0x60] = a0\n 82960: ra = 924, jump @0\n      : @1017 [@dyn 462] (gas: 50)\n 82967: u8 [a0 + 31] = 0\n 82970: u8 [a0 + 30] = 0\n 82973: u8 [a0 + 29] = 0\n 82976: u8 [a0 + 28] = 0\n 82979: u8 [a0 + 27] = 0\n 82982: u8 [a0 + 26] = 0\n 82985: u8 [a0 + 25] = 0\n 82988: u8 [a0 + 24] = 0\n 82991: u8 [a0 + 23] = 0\n 82994: u8 [a0 + 22] = 0\n 82997: u8 [a0 + 21] = 0\n 83000: u8 [a0 + 20] = 0\n 83003: u8 [a0 + 19] = 0\n 83006: u8 [a0 + 18] = 0\n 83009: u8 [a0 + 17] = 0\n 83012: u8 [a0 + 16] = 0\n 83015: u8 [a0 + 15] = 0\n 83018: u8 [a0 + 14] = 0\n 83021: u8 [a0 + 13] = 0\n 83024: u8 [a0 + 12] = 0\n 83027: u8 [a0 + 11] = 0\n 83030: u8 [a0 + 10] = 0\n 83033: u8 [a0 + 9] = 0\n 83036: u8 [a0 + 8] = 0\n 83039: u8 [a0 + 7] = 0\n 83042: u8 [a0 + 6] = 0\n 83045: u8 [a0 + 5] = 0\n 83048: u8 [a0 + 4] = 0\n 83051: u8 [a0 + 3] = 0xa0\n 83056: u8 [a0 + 2] = 0x79\n 83060: u8 [a0 + 1] = 0xc3\n 83065: u8 [a0 + 0] = 0x8\n 83068: a1 = u64 [sp + 0x68]\n 83071: a0 = a1 + 0x4\n 83074: a1 = a0 <u a1\n 83077: a3 = u64 [sp + 0x78]\n 83080: a2 = a3 + a1\n 83083: a3 = a2 <u a3\n 83086: a3 = a1 if a1 == 0\n 83089: a3 = a3 + s1\n 83092: a1 = a3 <u s1\n 83095: a4 = u64 [sp + 0x70]\n 83098: a4 = a4 + a1\n 83101: u64 [sp + 0x88] = a2\n 83105: u64 [sp + 0x80] = a0\n 83109: u64 [sp + 0x90] = a3\n 83113: a0 = sp + 0xa0\n 83117: a1 = sp + 0x80\n 83121: u64 [sp + 0x98] = a4\n 83125: ra = 926, jump @991\n      : @1018 [@dyn 463] (gas: 5)\n 83131: a0 = u64 [sp + 0xa8]\n 83135: t0 = u64 [sp + 0xb8]\n 83139: t1 = u64 [sp + 0xa0]\n 83143: a3 = u64 [sp + 0xb0]\n 83147: fallthrough\n      : @1019 (gas: 26)\n 83148: a1 = u64 [sp + 0x78]\n 83151: a4 = a0 ^ a1\n 83154: a5 = a0 <u a1\n 83157: t2 = a1\n 83159: a2 = u64 [sp + 0x68]\n 83162: a1 = t1 <u a2\n 83165: a5 = a1 if a4 == 0\n 83168: a4 = a3 - s1\n 83171: a3 = a3 <u s1\n 83174: s1 = u64 [sp + 0x70]\n 83177: s1 = t0 - s1\n 83180: s1 = s1 - a3\n 83183: a3 = a4 <u a5\n 83186: s1 = s1 - a3\n 83189: a4 = a4 - a5\n 83192: a0 = a0 - t2\n 83195: a1 = a0 - a1\n 83198: a0 = t1 - a2\n 83201: a1 = a1 | s1\n 83204: a2 = a0 | a4\n 83207: a2 = a2 | a1\n 83210: a1 = a1 | a4\n 83213: a2 = a2 >> 0x20\n 83216: a1 = a1 << 0x20\n 83219: a1 = a1 | a2\n 83222: jump @1025 if a1 == 0\n      : @1020 (gas: 1)\n 83225: trap\n      : @1021 (gas: 8)\n 83226: u64 [sp + 240] = 0\n 83230: u64 [sp + 232] = 0\n 83234: u64 [sp + 224] = 0\n 83238: a0 = 0x4e487b7100000000\n 83248: a1 = sp + 0xe0\n 83252: u64 [sp + 0xf8] = a0\n 83256: a0 = 0\n 83258: ra = 928, jump @23\n      : @1022 [@dyn 464] (gas: 7)\n 83265: u64 [sp + 216] = 0\n 83269: u64 [sp + 208] = 0\n 83273: u64 [sp + 192] = 0x11\n 83278: a0 = 0x4\n 83281: a1 = sp + 0xc0\n 83285: u64 [sp + 200] = 0\n 83289: ra = 930, jump @23\n      : @1023 [@dyn 465] (gas: 3)\n 83296: a1 = 0x24\n 83299: a0 = 0\n 83301: ra = 932, jump @0\n      : @1024 [@dyn 466] (gas: 5)\n 83308: i32 a1 = a0 + 0\n 83310: a0 = 0x1\n 83313: a2 = 0x24\n 83316: ecalli 12 // 'seal_return'\n 83318: fallthrough\n      : @1025 (gas: 4)\n 83319: i32 s1 = a0 + 0\n 83321: a0 = u64 [sp + 0x60]\n 83324: a1 = s1\n 83326: ra = 934, jump @0\n      : @1026 [@dyn 467] (gas: 6)\n 83333: i32 a1 = a0 + 0\n 83335: a0 = 0x1\n 83338: a2 = s1\n 83340: ra = 0x3a8\n 83344: ecalli 12 // 'seal_return'\n 83346: fallthrough\n      : @1027 [@dyn 468] (gas: 24)\n 83347: sp = sp + 0xffffffffffffffb0\n 83350: u64 [sp + 0x48] = ra\n 83353: u64 [sp + 0x40] = s0\n 83356: s0 = sp + 0x50\n 83359: sp = sp & 0xfffffffffffffff0\n 83362: t0 = u64 [a0]\n 83364: t1 = u64 [a0 + 0x8]\n 83367: a4 = u64 [a0 + 0x10]\n 83370: a0 = u64 [a0 + 0x18]\n 83373: a5 = u64 [a1]\n 83375: a2 = u64 [a1 + 0x8]\n 83378: a3 = u64 [a1 + 0x10]\n 83381: a1 = u64 [a1 + 0x18]\n 83384: u64 [sp + 0x18] = a1\n 83387: u64 [sp + 0x10] = a3\n 83390: u64 [sp + 0x8] = a2\n 83393: u64 [sp] = a5\n 83395: u64 [sp + 0x38] = a0\n 83398: u64 [sp + 0x30] = a4\n 83401: u64 [sp + 0x28] = t1\n 83404: a0 = sp + 0x20\n 83407: a1 = sp\n 83409: u64 [sp + 0x20] = t0\n 83412: ra = 938, jump @975\n      : @1028 [@dyn 469] (gas: 5)\n 83418: sp = s0 + 0xffffffffffffffb0\n 83421: ra = u64 [sp + 0x48]\n 83424: s0 = u64 [sp + 0x40]\n 83427: sp = sp + 0x50\n 83430: ret\n      : @1029 (gas: 16)\n 83432: sp = sp + 0xffffffffffffff20\n 83436: u64 [sp + 0xd8] = ra\n 83440: u64 [sp + 0xd0] = s0\n 83444: u64 [sp + 0xc8] = s1\n 83448: s0 = sp + 0xe0\n 83452: sp = sp & 0xfffffffffffffff0\n 83455: a3 = u64 [a1 + 0x18]\n 83458: a2 = u64 [a1 + 0x10]\n 83461: a4 = u64 [a1 + 0x8]\n 83464: u64 [sp + 0x10] = a2\n 83467: u64 [sp + 0x8] = a3\n 83470: a2 = a2 | a3\n 83473: a3 = a4 <u 0x1\n 83476: a3 = 0 if a2 != 0\n 83478: u64 [sp + 0x38] = a0\n 83481: jump @1035 if a3 == 0\n      : @1030 (gas: 19)\n 83485: s1 = u64 [a1]\n 83487: a0 = s1 + 0x1f\n 83490: a1 = a0 <u s1\n 83493: u64 [sp + 0x18] = a4\n 83496: a1 = a1 + a4\n 83499: a1 = a1 & 0x1\n 83502: a0 = a0 & 0xffffffffffffffe0\n 83505: a2 = a0 + 0x20\n 83508: a0 = a2 <u a0\n 83511: a3 = a1 + a0\n 83514: a4 = a3 <u a1\n 83517: a4 = a0 if a0 == 0\n 83520: u64 [sp + 152] = 0\n 83524: u64 [sp + 0x80] = a2\n 83528: u64 [sp + 0x88] = a3\n 83532: a0 = sp + 0xa0\n 83536: a1 = sp + 0x80\n 83540: u64 [sp + 0x90] = a4\n 83544: ra = 940, jump @78\n      : @1031 [@dyn 470] (gas: 15)\n 83551: a0 = u64 [sp + 0xb8]\n 83555: a2 = u64 [sp + 0xb0]\n 83559: a1 = u64 [sp + 0xa8]\n 83563: a3 = u64 [sp + 0xa0]\n 83567: u64 [sp + 0x28] = a0\n 83570: u64 [sp + 0x20] = a1\n 83573: a0 = a0 | a1\n 83576: a1 = a3 | a2\n 83579: a1 = a1 | a0\n 83582: a1 = a1 >> 0x20\n 83585: u64 [sp + 0x30] = a2\n 83588: a0 = a0 | a2\n 83591: a0 = a0 << 0x20\n 83594: a0 = a0 | a1\n 83597: jump @1034 if a0 != 0\n      : @1032 (gas: 4)\n 83601: i32 a0 = a3 + 0\n 83603: a1 = 0x20\n 83606: u64 [sp] = a3\n 83608: ra = 942, jump @0\n      : @1033 [@dyn 471] (gas: 82)\n 83615: a1 = u64 [sp + 0x8]\n 83618: a1 = reverse a1\n 83620: a2 = u64 [sp + 0x10]\n 83623: a2 = reverse a2\n 83625: a3 = u64 [sp + 0x18]\n 83628: a3 = reverse a3\n 83630: a4 = reverse s1\n 83632: a5 = a4 >> 0x38\n 83635: u8 [a0 + 0x1f] = a5\n 83638: a5 = a4 >> 0x30\n 83641: u8 [a0 + 0x1e] = a5\n 83644: a5 = a4 >> 0x28\n 83647: u8 [a0 + 0x1d] = a5\n 83650: a5 = a4 >> 0x20\n 83653: u8 [a0 + 0x1c] = a5\n 83656: a5 = a4 >> 0x18\n 83659: u8 [a0 + 0x1b] = a5\n 83662: a5 = a4 >> 0x10\n 83665: u8 [a0 + 0x1a] = a5\n 83668: a5 = a4 >> 0x8\n 83671: u8 [a0 + 0x19] = a5\n 83674: u8 [a0 + 0x18] = a4\n 83677: u8 [a0 + 0x10] = a3\n 83680: a4 = a3 >> 0x38\n 83683: u8 [a0 + 0x17] = a4\n 83686: a4 = a3 >> 0x30\n 83689: u8 [a0 + 0x16] = a4\n 83692: a4 = a3 >> 0x28\n 83695: u8 [a0 + 0x15] = a4\n 83698: a4 = a3 >> 0x20\n 83701: u8 [a0 + 0x14] = a4\n 83704: a4 = a3 >> 0x18\n 83707: u8 [a0 + 0x13] = a4\n 83710: a4 = a3 >> 0x10\n 83713: u8 [a0 + 0x12] = a4\n 83716: a3 = a3 >> 0x8\n 83719: u8 [a0 + 0x11] = a3\n 83722: u8 [a0 + 0x8] = a2\n 83725: a3 = a2 >> 0x38\n 83728: u8 [a0 + 0xf] = a3\n 83731: a3 = a2 >> 0x30\n 83734: u8 [a0 + 0xe] = a3\n 83737: a3 = a2 >> 0x28\n 83740: u8 [a0 + 0xd] = a3\n 83743: a3 = a2 >> 0x20\n 83746: u8 [a0 + 0xc] = a3\n 83749: a3 = a2 >> 0x18\n 83752: u8 [a0 + 0xb] = a3\n 83755: a3 = a2 >> 0x10\n 83758: u8 [a0 + 0xa] = a3\n 83761: a2 = a2 >> 0x8\n 83764: u8 [a0 + 0x9] = a2\n 83767: u8 [a0] = a1\n 83769: a2 = a1 >> 0x38\n 83772: u8 [a0 + 0x7] = a2\n 83775: a2 = a1 >> 0x30\n 83778: u8 [a0 + 0x6] = a2\n 83781: a2 = a1 >> 0x28\n 83784: u8 [a0 + 0x5] = a2\n 83787: a2 = a1 >> 0x20\n 83790: u8 [a0 + 0x4] = a2\n 83793: a2 = a1 >> 0x18\n 83796: u8 [a0 + 0x3] = a2\n 83799: a2 = a1 >> 0x10\n 83802: u8 [a0 + 0x2] = a2\n 83805: a1 = a1 >> 0x8\n 83808: u8 [a0 + 0x1] = a1\n 83811: a0 = u64 [sp + 0x38]\n 83814: a1 = u64 [sp]\n 83816: u64 [a0] = a1\n 83818: a1 = u64 [sp + 0x28]\n 83821: u64 [a0 + 0x18] = a1\n 83824: a1 = u64 [sp + 0x20]\n 83827: u64 [a0 + 0x8] = a1\n 83830: a1 = u64 [sp + 0x30]\n 83833: u64 [a0 + 0x10] = a1\n 83836: sp = s0 + 0xffffffffffffff20\n 83840: ra = u64 [sp + 0xd8]\n 83844: s0 = u64 [sp + 0xd0]\n 83848: s1 = u64 [sp + 0xc8]\n 83852: sp = sp + 0xe0\n 83856: ret\n      : @1034 (gas: 1)\n 83858: trap\n      : @1035 (gas: 8)\n 83859: u64 [sp + 112] = 0\n 83862: u64 [sp + 104] = 0\n 83865: u64 [sp + 96] = 0\n 83868: a0 = 0x4e487b7100000000\n 83878: a1 = sp + 0x60\n 83881: u64 [sp + 0x78] = a0\n 83884: a0 = 0\n 83886: ra = 944, jump @23\n      : @1036 [@dyn 472] (gas: 7)\n 83893: u64 [sp + 88] = 0\n 83896: u64 [sp + 80] = 0\n 83899: u64 [sp + 64] = 0x41\n 83903: a0 = 0x4\n 83906: a1 = sp + 0x40\n 83909: u64 [sp + 72] = 0\n 83912: ra = 946, jump @23\n      : @1037 [@dyn 473] (gas: 3)\n 83919: a1 = 0x24\n 83922: a0 = 0\n 83924: ra = 948, jump @0\n      : @1038 [@dyn 474] (gas: 6)\n 83931: i32 a1 = a0 + 0\n 83933: a0 = 0x1\n 83936: a2 = 0x24\n 83939: ra = 0x3b6\n 83943: ecalli 12 // 'seal_return'\n 83945: fallthrough\n      : @1039 [@dyn 475] (gas: 6)\n 83946: u64 [a0 + 24] = 0\n 83949: u64 [a0 + 16] = 0\n 83952: u64 [a0 + 8] = 0\n 83955: a1 = 0x60\n 83958: u64 [a0] = a1\n 83960: ret\n      : @1040 (gas: 1)\n 83962: jump @1049 if a0 == 0\n      : @1041 (gas: 9)\n 83966: u64 [sp + 0x20] = s1\n 83969: ecalli 11 // 'return_data_size'\n 83971: u64 [sp + 88] = 0\n 83974: u64 [sp + 80] = 0\n 83977: u64 [sp + 0x40] = a0\n 83980: a0 = sp + 0x60\n 83983: a1 = sp + 0x40\n 83986: u64 [sp + 72] = 0\n 83989: ra = 952, jump @1029\n      : @1042 [@dyn 476] (gas: 9)\n 83995: a0 = u64 [sp + 0x78]\n 83998: u64 [sp + 0x38] = a0\n 84001: a0 = u64 [sp + 0x70]\n 84004: u64 [sp + 0x30] = a0\n 84007: a0 = u64 [sp + 0x68]\n 84010: u64 [sp + 0x28] = a0\n 84013: s1 = u64 [sp + 0x60]\n 84016: ecalli 11 // 'return_data_size'\n 84018: fallthrough\n      : @1043 (gas: 20)\n 84019: a1 = s1 + 0x20\n 84022: u64 [sp + 0x18] = s1\n 84025: a2 = a1 <u s1\n 84028: a4 = u64 [sp + 0x28]\n 84031: a3 = a4 + a2\n 84034: a4 = a3 <u a4\n 84037: a4 = a2 if a2 == 0\n 84040: a2 = u64 [sp + 0x30]\n 84043: a4 = a4 + a2\n 84046: a2 = a4 <u a2\n 84049: a5 = u64 [sp + 0x38]\n 84052: a2 = a2 + a5\n 84055: a5 = a1 | a4\n 84058: a2 = a2 | a3\n 84061: a5 = a5 | a2\n 84064: a5 = a5 >> 0x20\n 84067: a2 = a2 | a4\n 84070: a2 = a2 << 0x20\n 84073: a2 = a2 | a5\n 84076: jump @1048 if a2 != 0\n      : @1044 (gas: 3)\n 84079: s1 = a0\n 84081: a0 = a0 >> 0x20\n 84084: jump @1048 if a0 != 0\n      : @1045 (gas: 4)\n 84087: i32 a0 = a1 + 0\n 84089: i32 a1 = s1 + 0\n 84091: u64 [sp + 0x10] = a1\n 84094: ra = 954, jump @0\n      : @1046 [@dyn 477] (gas: 6)\n 84101: u32 [sp + 0x80] = s1\n 84105: i32 a0 = a0 + 0\n 84107: i32 a1 = sp + 0x80\n 84111: a2 = 0\n 84113: ecalli 10 // 'return_data_copy'\n 84115: fallthrough\n      : @1047 (gas: 8)\n 84116: a0 = i32 [sp + 0x80]\n 84120: s1 = u64 [sp + 0x20]\n 84123: a1 = u64 [sp + 0x38]\n 84126: a2 = u64 [sp + 0x30]\n 84129: a3 = u64 [sp + 0x28]\n 84132: a4 = u64 [sp + 0x18]\n 84135: a5 = u64 [sp + 0x10]\n 84138: jump @1050 if a0 >=u a5\n      : @1048 (gas: 1)\n 84141: trap\n      : @1049 (gas: 5)\n 84142: a3 = 0\n 84144: a2 = 0\n 84146: a1 = 0\n 84148: a4 = 0x60\n 84151: fallthrough\n      : @1050 (gas: 10)\n 84152: u64 [s1] = a4\n 84154: u64 [s1 + 0x8] = a3\n 84157: u64 [s1 + 0x10] = a2\n 84160: u64 [s1 + 0x18] = a1\n 84163: sp = s0 + 0xffffffffffffff60\n 84167: ra = u64 [sp + 0x98]\n 84171: s0 = u64 [sp + 0x90]\n 84175: s1 = u64 [sp + 0x88]\n 84179: sp = sp + 0xa0\n 84183: ret\n      : @1051 (gas: 17)\n 84185: sp = sp + 0xffffffffffffffa0\n 84188: u64 [sp + 0x58] = ra\n 84191: u64 [sp + 0x50] = s0\n 84194: u64 [sp + 0x48] = s1\n 84197: a3 = u64 [a1 + 0x18]\n 84200: a4 = u64 [a1 + 0x10]\n 84203: a5 = u64 [a1 + 0x8]\n 84206: s1 = u64 [a1]\n 84208: a1 = a5 | a3\n 84211: a2 = s1 | a4\n 84214: a2 = a2 | a1\n 84217: a2 = a2 >> 0x20\n 84220: a1 = a1 | a4\n 84223: a1 = a1 << 0x20\n 84226: a1 = a1 | a2\n 84229: u64 [sp + 0x28] = a0\n 84232: jump @1058 if a1 != 0\n      : @1052 (gas: 19)\n 84236: a0 = s1 + 0x20\n 84239: u64 [sp + 0x30] = a0\n 84242: a0 = a0 <u s1\n 84245: a1 = a5 + a0\n 84248: u64 [sp + 0x40] = a1\n 84251: u64 [sp + 0x8] = a5\n 84254: s0 = a1 <u a5\n 84257: s0 = a0 if a0 == 0\n 84260: s0 = s0 + a4\n 84263: u64 [sp + 0x10] = a4\n 84266: a0 = s0 <u a4\n 84269: u64 [sp + 0x18] = a3\n 84272: a0 = a0 + a3\n 84275: u64 [sp + 0x38] = a0\n 84278: u64 [sp] = s1\n 84280: i32 a0 = s1 + 0\n 84282: a1 = 0x20\n 84285: s1 = 0x20\n 84288: ra = 956, jump @0\n      : @1053 [@dyn 478] (gas: 45)\n 84295: u8 [a0 + 0x1f] = s1\n 84298: a1 = u64 [sp + 0x30]\n 84301: s1 = a1\n 84303: a1 = a1 | s0\n 84306: a2 = u64 [sp + 0x40]\n 84309: a4 = u64 [sp + 0x38]\n 84312: a2 = a2 | a4\n 84315: a1 = a1 | a2\n 84318: a1 = a1 >> 0x20\n 84321: u64 [sp + 0x20] = s0\n 84324: a2 = a2 | s0\n 84327: a2 = a2 << 0x20\n 84330: a1 = a1 | a2\n 84333: u8 [a0 + 30] = 0\n 84336: u8 [a0 + 29] = 0\n 84339: u8 [a0 + 28] = 0\n 84342: u8 [a0 + 27] = 0\n 84345: u8 [a0 + 26] = 0\n 84348: u8 [a0 + 25] = 0\n 84351: u8 [a0 + 24] = 0\n 84354: u8 [a0 + 23] = 0\n 84357: u8 [a0 + 22] = 0\n 84360: u8 [a0 + 21] = 0\n 84363: u8 [a0 + 20] = 0\n 84366: u8 [a0 + 19] = 0\n 84369: u8 [a0 + 18] = 0\n 84372: u8 [a0 + 17] = 0\n 84375: u8 [a0 + 16] = 0\n 84378: u8 [a0 + 15] = 0\n 84381: u8 [a0 + 14] = 0\n 84384: u8 [a0 + 13] = 0\n 84387: u8 [a0 + 12] = 0\n 84390: u8 [a0 + 11] = 0\n 84393: u8 [a0 + 10] = 0\n 84396: u8 [a0 + 9] = 0\n 84399: u8 [a0 + 8] = 0\n 84402: u8 [a0 + 7] = 0\n 84405: u8 [a0 + 6] = 0\n 84408: u8 [a0 + 5] = 0\n 84411: u8 [a0 + 4] = 0\n 84414: u8 [a0 + 3] = 0\n 84417: u8 [a0 + 2] = 0\n 84420: u8 [a0 + 1] = 0\n 84423: u8 [a0 + 0] = 0\n 84425: jump @1058 if a1 != 0\n      : @1054 (gas: 4)\n 84429: i32 s0 = s1 + 0\n 84431: a1 = 0x20\n 84434: a0 = s0\n 84436: ra = 958, jump @0\n      : @1055 [@dyn 479] (gas: 41)\n 84443: u8 [a0 + 31] = 0xd\n 84447: u8 [a0 + 30] = 0\n 84450: u8 [a0 + 29] = 0\n 84453: u8 [a0 + 28] = 0\n 84456: u8 [a0 + 27] = 0\n 84459: u8 [a0 + 26] = 0\n 84462: u8 [a0 + 25] = 0\n 84465: u8 [a0 + 24] = 0\n 84468: u8 [a0 + 23] = 0\n 84471: u8 [a0 + 22] = 0\n 84474: u8 [a0 + 21] = 0\n 84477: u8 [a0 + 20] = 0\n 84480: u8 [a0 + 19] = 0\n 84483: u8 [a0 + 18] = 0\n 84486: u8 [a0 + 17] = 0\n 84489: u8 [a0 + 16] = 0\n 84492: u8 [a0 + 15] = 0\n 84495: u8 [a0 + 14] = 0\n 84498: u8 [a0 + 13] = 0\n 84501: u8 [a0 + 12] = 0\n 84504: u8 [a0 + 11] = 0\n 84507: u8 [a0 + 10] = 0\n 84510: u8 [a0 + 9] = 0\n 84513: u8 [a0 + 8] = 0\n 84516: u8 [a0 + 7] = 0\n 84519: u8 [a0 + 6] = 0\n 84522: u8 [a0 + 5] = 0\n 84525: u8 [a0 + 4] = 0\n 84528: u8 [a0 + 3] = 0\n 84531: u8 [a0 + 2] = 0\n 84534: u8 [a0 + 1] = 0\n 84537: a1 = u64 [sp + 0x20]\n 84540: a2 = u64 [sp + 0x38]\n 84543: a1 = a1 | a2\n 84546: a2 = 0xffffffe0\n 84556: a2 = s1 <u a2\n 84559: a3 = u64 [sp + 0x40]\n 84562: a2 = 0 if a3 != 0\n 84564: a2 = 0 if a1 != 0\n 84566: u8 [a0 + 0] = 0\n 84568: jump @1058 if a2 == 0\n      : @1056 (gas: 3)\n 84572: i32 a0 = s0 + 0x20\n 84575: a1 = 0x20\n 84578: ra = 960, jump @0\n      : @1057 [@dyn 480] (gas: 54)\n 84585: u8 [a0 + 31] = 0\n 84588: u8 [a0 + 30] = 0\n 84591: u8 [a0 + 29] = 0\n 84594: u8 [a0 + 28] = 0\n 84597: u8 [a0 + 27] = 0\n 84600: u8 [a0 + 26] = 0\n 84603: u8 [a0 + 25] = 0\n 84606: u8 [a0 + 24] = 0\n 84609: u8 [a0 + 23] = 0\n 84612: u8 [a0 + 22] = 0\n 84615: u8 [a0 + 21] = 0\n 84618: u8 [a0 + 20] = 0\n 84621: u8 [a0 + 19] = 0\n 84624: u8 [a0 + 18] = 0\n 84627: u8 [a0 + 17] = 0\n 84630: u8 [a0 + 16] = 0\n 84633: u8 [a0 + 15] = 0\n 84636: u8 [a0 + 14] = 0\n 84639: u8 [a0 + 13] = 0\n 84642: u8 [a0 + 12] = 0x4c\n 84646: u8 [a0 + 11] = 0x49\n 84650: u8 [a0 + 10] = 0x41\n 84654: u8 [a0 + 9] = 0x46\n 84658: u8 [a0 + 8] = 0x5f\n 84662: u8 [a0 + 7] = 0x44\n 84666: u8 [a0 + 6] = 0x4e\n 84670: u8 [a0 + 5] = 0x45\n 84674: u8 [a0 + 4] = 0x53\n 84678: u8 [a0 + 3] = 0x5f\n 84682: u8 [a0 + 2] = 0x48\n 84686: u8 [a0 + 1] = 0x54\n 84690: u8 [a0 + 0] = 0x45\n 84693: a1 = u64 [sp]\n 84695: a0 = a1 + 0x60\n 84698: a1 = a0 <u a1\n 84701: a3 = u64 [sp + 0x8]\n 84704: a2 = a3 + a1\n 84707: a3 = a2 <u a3\n 84710: a3 = a1 if a1 == 0\n 84713: a1 = u64 [sp + 0x10]\n 84716: a3 = a3 + a1\n 84719: a1 = a3 <u a1\n 84722: a4 = u64 [sp + 0x18]\n 84725: a1 = a1 + a4\n 84728: a4 = u64 [sp + 0x28]\n 84731: u64 [a4] = a0\n 84733: u64 [a4 + 0x8] = a2\n 84736: u64 [a4 + 0x10] = a3\n 84739: u64 [a4 + 0x18] = a1\n 84742: ra = u64 [sp + 0x58]\n 84745: s0 = u64 [sp + 0x50]\n 84748: s1 = u64 [sp + 0x48]\n 84751: sp = sp + 0x60\n 84754: ret\n      : @1058 (gas: 1)\n 84756: trap\n      : @1059 (gas: 23)\n 84757: sp = sp + 0xfffffffffffffea0\n 84761: u64 [sp + 0x158] = ra\n 84765: u64 [sp + 0x150] = s0\n 84769: u64 [sp + 0x148] = s1\n 84773: s0 = sp + 0x160\n 84777: sp = sp & 0xffffffffffffffe0\n 84780: a2 = u64 [a1]\n 84782: u64 [sp + 0x58] = a2\n 84785: a2 = u64 [a1 + 0x8]\n 84788: u64 [sp + 0x50] = a2\n 84791: a2 = u64 [a1 + 0x10]\n 84794: u64 [sp + 0x48] = a2\n 84797: a1 = u64 [a1 + 0x18]\n 84800: u64 [sp + 0x40] = a1\n 84803: a1 = u64 [a0]\n 84805: u64 [sp + 0x38] = a1\n 84808: a1 = u64 [a0 + 0x10]\n 84811: u64 [sp + 0x30] = a1\n 84814: a0 = u64 [a0 + 0x8]\n 84817: u64 [sp + 0x28] = a0\n 84820: a0 = 0x40\n 84823: a1 = 0x20\n 84826: ra = 962, jump @0\n      : @1060 [@dyn 481] (gas: 97)\n 84833: a1 = u8 [a0 + 0x11]\n 84836: a2 = u8 [a0 + 0x10]\n 84839: a3 = u8 [a0 + 0x12]\n 84842: a4 = u8 [a0 + 0x13]\n 84845: a1 = a1 << 0x8\n 84848: a1 = a1 | a2\n 84851: a3 = a3 << 0x10\n 84854: a4 = a4 << 0x18\n 84857: a3 = a3 | a4\n 84860: a1 = a1 | a3\n 84863: a2 = u8 [a0 + 0x15]\n 84866: a3 = u8 [a0 + 0x14]\n 84869: a4 = u8 [a0 + 0x16]\n 84872: a5 = u8 [a0 + 0x17]\n 84875: a2 = a2 << 0x8\n 84878: a2 = a2 | a3\n 84881: a4 = a4 << 0x10\n 84884: a5 = a5 << 0x18\n 84887: a4 = a4 | a5\n 84890: a2 = a2 | a4\n 84893: a2 = a2 << 0x20\n 84896: t0 = a2 | a1\n 84899: a2 = u8 [a0 + 0x1]\n 84902: a3 = u8 [a0]\n 84904: a4 = u8 [a0 + 0x2]\n 84907: a5 = u8 [a0 + 0x3]\n 84910: a2 = a2 << 0x8\n 84913: a2 = a2 | a3\n 84916: a4 = a4 << 0x10\n 84919: a5 = a5 << 0x18\n 84922: a4 = a4 | a5\n 84925: a2 = a2 | a4\n 84928: a3 = u8 [a0 + 0x5]\n 84931: a4 = u8 [a0 + 0x4]\n 84934: a5 = u8 [a0 + 0x6]\n 84937: s1 = u8 [a0 + 0x7]\n 84940: a3 = a3 << 0x8\n 84943: a3 = a3 | a4\n 84946: a5 = a5 << 0x10\n 84949: s1 = s1 << 0x18\n 84952: a5 = a5 | s1\n 84955: a3 = a3 | a5\n 84958: a3 = a3 << 0x20\n 84961: a2 = a2 | a3\n 84964: a3 = u8 [a0 + 0x19]\n 84967: a4 = u8 [a0 + 0x18]\n 84970: a5 = u8 [a0 + 0x1a]\n 84973: s1 = u8 [a0 + 0x1b]\n 84976: a3 = a3 << 0x8\n 84979: a3 = a3 | a4\n 84982: a5 = a5 << 0x10\n 84985: s1 = s1 << 0x18\n 84988: a5 = a5 | s1\n 84991: a3 = a3 | a5\n 84994: a4 = u8 [a0 + 0x1d]\n 84997: a5 = u8 [a0 + 0x1c]\n 85000: s1 = u8 [a0 + 0x1e]\n 85003: a1 = u8 [a0 + 0x1f]\n 85006: a4 = a4 << 0x8\n 85009: a4 = a4 | a5\n 85012: s1 = s1 << 0x10\n 85015: a1 = a1 << 0x18\n 85018: a1 = a1 | s1\n 85021: a1 = a1 | a4\n 85024: a1 = a1 << 0x20\n 85027: a3 = a3 | a1\n 85030: a1 = u8 [a0 + 0x9]\n 85033: a4 = u8 [a0 + 0x8]\n 85036: a5 = u8 [a0 + 0xa]\n 85039: s1 = u8 [a0 + 0xb]\n 85042: a1 = a1 << 0x8\n 85045: a1 = a1 | a4\n 85048: a5 = a5 << 0x10\n 85051: s1 = s1 << 0x18\n 85054: a5 = a5 | s1\n 85057: a1 = a1 | a5\n 85060: a4 = u8 [a0 + 0xd]\n 85063: a5 = u8 [a0 + 0xc]\n 85066: s1 = u8 [a0 + 0xe]\n 85069: a0 = u8 [a0 + 0xf]\n 85072: a4 = a4 << 0x8\n 85075: a4 = a4 | a5\n 85078: s1 = s1 << 0x10\n 85081: a0 = a0 << 0x18\n 85084: a0 = a0 | s1\n 85087: a0 = a0 | a4\n 85090: a0 = a0 << 0x20\n 85093: a0 = a0 | a1\n 85096: s1 = reverse a0\n 85098: a0 = reverse a3\n 85100: u64 [sp + 0x10] = a0\n 85103: a0 = reverse a2\n 85105: u64 [sp + 0x20] = a0\n 85108: a0 = reverse t0\n 85110: u64 [sp + 0x18] = a0\n 85113: ecalli 9 // 'ref_time_left'\n 85115: fallthrough\n      : @1061 (gas: 36)\n 85116: u64 [sp + 0x8] = a0\n 85119: a0 = u64 [sp + 0x28]\n 85122: a0 = reverse a0\n 85124: a1 = u64 [sp + 0x30]\n 85127: a1 = reverse a1\n 85129: a1 = a1 >> 0x20\n 85132: a2 = a0 << 0x20\n 85135: a1 = a1 | a2\n 85138: a0 = a0 >> 0x20\n 85141: a2 = u64 [sp + 0x38]\n 85144: a2 = reverse a2\n 85146: a3 = a2 << 0x20\n 85149: a0 = a0 | a3\n 85152: u64 [sp + 0xc8] = a0\n 85156: u64 [sp + 0xc0] = a1\n 85160: a2 = a2 >> 0x20\n 85163: u32 [sp + 0xd0] = a2\n 85167: a2 = u64 [sp + 0x10]\n 85170: a0 = u64 [sp + 0x40]\n 85173: u64 [sp + 0xf8] = a0\n 85177: a0 = u64 [sp + 0x48]\n 85180: u64 [sp + 0xf0] = a0\n 85184: a0 = u64 [sp + 0x50]\n 85187: u64 [sp + 0xe8] = a0\n 85191: a0 = u64 [sp + 0x20]\n 85194: a1 = u64 [sp + 0x18]\n 85197: a0 = a0 | a1\n 85200: a1 = a2 | s1\n 85203: a1 = a1 | a0\n 85206: a0 = a0 | s1\n 85209: a1 = a1 >> 0x20\n 85212: a0 = a0 << 0x20\n 85215: a0 = a0 | a1\n 85218: a1 = u64 [sp + 0x58]\n 85221: u64 [sp + 0xe0] = a1\n 85225: jump @1072 if a0 != 0\n      : @1062 (gas: 3)\n 85229: i32 a0 = a2 + 0\n 85231: a1 = 0\n 85233: ra = 964, jump @0\n      : @1063 [@dyn 482] (gas: 4)\n 85240: u64 [sp + 0x58] = a0\n 85243: a0 = 0\n 85245: a1 = 0\n 85247: ra = 966, jump @0\n      : @1064 [@dyn 483] (gas: 43)\n 85254: u32 [sp + 256] = 0\n 85258: a2 = u64 [sp + 0x8]\n 85261: a1 = a2 >u 0x8fc\n 85265: a2 = -a1\n 85267: u64 [sp + 0x138] = a2\n 85271: u64 [sp + 0x130] = a2\n 85275: u64 [sp + 0x128] = a2\n 85279: u64 [sp + 0x120] = a2\n 85283: a2 = sp + 0xc0\n 85287: a2 = a2 << 0x20\n 85290: a2 = a2 >> 0x20\n 85293: a1 = a1 << 0x23\n 85296: s1 = a1 | a2\n 85299: a1 = sp + 0xe0\n 85303: a1 = a1 << 0x20\n 85306: a1 = a1 >> 0x20\n 85309: a2 = sp + 0x120\n 85313: a2 = a2 << 0x20\n 85316: a3 = a2 | a1\n 85319: a4 = u64 [sp + 0x58]\n 85322: a4 = a4 << 0x20\n 85325: a4 = a4 >> 0x20\n 85328: a0 = a0 << 0x20\n 85331: a0 = a0 >> 0x20\n 85334: a1 = sp + 0x100\n 85338: a1 = a1 << 0x20\n 85341: a5 = a1 | a0\n 85344: a1 = 0xffffffffffffffff\n 85347: a2 = 0xffffffffffffffff\n 85350: a0 = s1\n 85352: ecalli 0 // 'call'\n 85353: s1 = a0\n 85355: a0 = sp + 0xa0\n 85359: ra = 0x3c8\n 85363: sp = sp + 0xffffffffffffff60\n 85367: u64 [sp + 0x98] = ra\n 85371: u64 [sp + 0x90] = s0\n 85375: u64 [sp + 0x88] = s1\n 85379: s0 = sp + 0xa0\n 85383: sp = sp & 0xffffffffffffffe0\n 85386: s1 = a0\n 85388: ecalli 11 // 'return_data_size'\n 85390: jump @1040\n      : @1065 [@dyn 484] (gas: 1)\n 85393: jump @1067 if s1 != 0\n      : @1066 (gas: 6)\n 85396: sp = s0 + 0xfffffffffffffea0\n 85400: ra = u64 [sp + 0x158]\n 85404: s0 = u64 [sp + 0x150]\n 85408: s1 = u64 [sp + 0x148]\n 85412: sp = sp + 0x160\n 85416: ret\n      : @1067 (gas: 3)\n 85418: a0 = 0x40\n 85421: a1 = 0x20\n 85424: ra = 970, jump @0\n      : @1068 [@dyn 485] (gas: 103)\n 85431: a1 = u8 [a0 + 0x11]\n 85434: a2 = u8 [a0 + 0x10]\n 85437: a3 = u8 [a0 + 0x12]\n 85440: a4 = u8 [a0 + 0x13]\n 85443: a1 = a1 << 0x8\n 85446: a1 = a1 | a2\n 85449: a3 = a3 << 0x10\n 85452: a4 = a4 << 0x18\n 85455: a3 = a3 | a4\n 85458: a1 = a1 | a3\n 85461: a2 = u8 [a0 + 0x15]\n 85464: a3 = u8 [a0 + 0x14]\n 85467: a4 = u8 [a0 + 0x16]\n 85470: a5 = u8 [a0 + 0x17]\n 85473: a2 = a2 << 0x8\n 85476: a2 = a2 | a3\n 85479: a4 = a4 << 0x10\n 85482: a5 = a5 << 0x18\n 85485: a4 = a4 | a5\n 85488: a2 = a2 | a4\n 85491: a2 = a2 << 0x20\n 85494: t0 = a2 | a1\n 85497: a2 = u8 [a0 + 0x1]\n 85500: a3 = u8 [a0]\n 85502: a4 = u8 [a0 + 0x2]\n 85505: a5 = u8 [a0 + 0x3]\n 85508: a2 = a2 << 0x8\n 85511: a2 = a2 | a3\n 85514: a4 = a4 << 0x10\n 85517: a5 = a5 << 0x18\n 85520: a4 = a4 | a5\n 85523: a2 = a2 | a4\n 85526: a3 = u8 [a0 + 0x5]\n 85529: a4 = u8 [a0 + 0x4]\n 85532: a5 = u8 [a0 + 0x6]\n 85535: s1 = u8 [a0 + 0x7]\n 85538: a3 = a3 << 0x8\n 85541: a3 = a3 | a4\n 85544: a5 = a5 << 0x10\n 85547: s1 = s1 << 0x18\n 85550: a5 = a5 | s1\n 85553: a3 = a3 | a5\n 85556: a3 = a3 << 0x20\n 85559: a2 = a2 | a3\n 85562: a3 = u8 [a0 + 0x19]\n 85565: a4 = u8 [a0 + 0x18]\n 85568: a5 = u8 [a0 + 0x1a]\n 85571: s1 = u8 [a0 + 0x1b]\n 85574: a3 = a3 << 0x8\n 85577: a3 = a3 | a4\n 85580: a5 = a5 << 0x10\n 85583: s1 = s1 << 0x18\n 85586: a5 = a5 | s1\n 85589: a3 = a3 | a5\n 85592: a4 = u8 [a0 + 0x1d]\n 85595: a5 = u8 [a0 + 0x1c]\n 85598: s1 = u8 [a0 + 0x1e]\n 85601: a1 = u8 [a0 + 0x1f]\n 85604: a4 = a4 << 0x8\n 85607: a4 = a4 | a5\n 85610: s1 = s1 << 0x10\n 85613: a1 = a1 << 0x18\n 85616: a1 = a1 | s1\n 85619: a1 = a1 | a4\n 85622: a1 = a1 << 0x20\n 85625: a3 = a3 | a1\n 85628: a1 = u8 [a0 + 0x9]\n 85631: a4 = u8 [a0 + 0x8]\n 85634: a5 = u8 [a0 + 0xa]\n 85637: s1 = u8 [a0 + 0xb]\n 85640: a1 = a1 << 0x8\n 85643: a1 = a1 | a4\n 85646: a5 = a5 << 0x10\n 85649: s1 = s1 << 0x18\n 85652: a5 = a5 | s1\n 85655: a1 = a1 | a5\n 85658: a4 = u8 [a0 + 0xd]\n 85661: a5 = u8 [a0 + 0xc]\n 85664: s1 = u8 [a0 + 0xe]\n 85667: a0 = u8 [a0 + 0xf]\n 85670: a4 = a4 << 0x8\n 85673: a4 = a4 | a5\n 85676: s1 = s1 << 0x10\n 85679: a0 = a0 << 0x18\n 85682: a0 = a0 | s1\n 85685: a0 = a0 | a4\n 85688: a0 = a0 << 0x20\n 85691: a0 = a0 | a1\n 85694: s1 = reverse a0\n 85696: a1 = reverse a3\n 85698: a2 = reverse a2\n 85700: a0 = reverse t0\n 85702: u64 [sp + 0x58] = a0\n 85705: u64 [sp + 0x50] = a2\n 85708: a0 = a0 | a2\n 85711: a2 = a1\n 85713: a1 = a1 | s1\n 85716: a1 = a1 | a0\n 85719: a1 = a1 >> 0x20\n 85722: a0 = a0 | s1\n 85725: a0 = a0 << 0x20\n 85728: a0 = a0 | a1\n 85731: jump @1072 if a0 != 0\n      : @1069 (gas: 5)\n 85735: u64 [sp + 0x48] = a2\n 85738: i32 a0 = a2 + 0\n 85740: a1 = 0x20\n 85743: u64 [sp + 0x40] = a0\n 85746: ra = 972, jump @0\n      : @1070 [@dyn 486] (gas: 50)\n 85753: u8 [a0 + 31] = 0\n 85756: u8 [a0 + 30] = 0\n 85759: u8 [a0 + 29] = 0\n 85762: u8 [a0 + 28] = 0\n 85765: u8 [a0 + 27] = 0\n 85768: u8 [a0 + 26] = 0\n 85771: u8 [a0 + 25] = 0\n 85774: u8 [a0 + 24] = 0\n 85777: u8 [a0 + 23] = 0\n 85780: u8 [a0 + 22] = 0\n 85783: u8 [a0 + 21] = 0\n 85786: u8 [a0 + 20] = 0\n 85789: u8 [a0 + 19] = 0\n 85792: u8 [a0 + 18] = 0\n 85795: u8 [a0 + 17] = 0\n 85798: u8 [a0 + 16] = 0\n 85801: u8 [a0 + 15] = 0\n 85804: u8 [a0 + 14] = 0\n 85807: u8 [a0 + 13] = 0\n 85810: u8 [a0 + 12] = 0\n 85813: u8 [a0 + 11] = 0\n 85816: u8 [a0 + 10] = 0\n 85819: u8 [a0 + 9] = 0\n 85822: u8 [a0 + 8] = 0\n 85825: u8 [a0 + 7] = 0\n 85828: u8 [a0 + 6] = 0\n 85831: u8 [a0 + 5] = 0\n 85834: u8 [a0 + 4] = 0\n 85837: u8 [a0 + 3] = 0xa0\n 85842: u8 [a0 + 2] = 0x79\n 85846: u8 [a0 + 1] = 0xc3\n 85851: u8 [a0 + 0] = 0x8\n 85854: a1 = u64 [sp + 0x48]\n 85857: a0 = a1 + 0x4\n 85860: a1 = a0 <u a1\n 85863: a3 = u64 [sp + 0x58]\n 85866: a2 = a3 + a1\n 85869: a3 = a2 <u a3\n 85872: a3 = a1 if a1 == 0\n 85875: a3 = a3 + s1\n 85878: a1 = a3 <u s1\n 85881: a4 = u64 [sp + 0x50]\n 85884: a4 = a4 + a1\n 85887: u64 [sp + 0x68] = a2\n 85890: u64 [sp + 0x60] = a0\n 85893: u64 [sp + 0x70] = a3\n 85896: a0 = sp + 0x80\n 85900: a1 = sp + 0x60\n 85903: u64 [sp + 0x78] = a4\n 85906: ra = 974, jump @1051\n      : @1071 [@dyn 487] (gas: 30)\n 85912: a0 = u64 [sp + 0x88]\n 85916: t0 = u64 [sp + 0x98]\n 85920: t1 = u64 [sp + 0x80]\n 85924: a3 = u64 [sp + 0x90]\n 85928: a1 = u64 [sp + 0x58]\n 85931: a4 = a0 ^ a1\n 85934: a5 = a0 <u a1\n 85937: t2 = a1\n 85939: a2 = u64 [sp + 0x48]\n 85942: a1 = t1 <u a2\n 85945: a5 = a1 if a4 == 0\n 85948: a4 = a3 - s1\n 85951: a3 = a3 <u s1\n 85954: s1 = u64 [sp + 0x50]\n 85957: s1 = t0 - s1\n 85960: s1 = s1 - a3\n 85963: a3 = a4 <u a5\n 85966: s1 = s1 - a3\n 85969: a4 = a4 - a5\n 85972: a0 = a0 - t2\n 85975: a1 = a0 - a1\n 85978: a0 = t1 - a2\n 85981: a1 = a1 | s1\n 85984: a2 = a0 | a4\n 85987: a2 = a2 | a1\n 85990: a1 = a1 | a4\n 85993: a2 = a2 >> 0x20\n 85996: a1 = a1 << 0x20\n 85999: a1 = a1 | a2\n 86002: jump @1073 if a1 == 0\n      : @1072 (gas: 1)\n 86005: trap\n      : @1073 (gas: 4)\n 86006: i32 s1 = a0 + 0\n 86008: a0 = u64 [sp + 0x40]\n 86011: a1 = s1\n 86013: ra = 976, jump @0\n      : @1074 [@dyn 488] (gas: 7)\n 86020: i32 a1 = a0 + 0\n 86022: a0 = 0x1\n 86025: a2 = s1\n 86027: ecalli 12 // 'seal_return'\n 86029: a0 = 0\n 86031: ra = 0x3d2\n 86035: jump @25\n      : @1075 [export #0: 'call'] (gas: 2)\n 86039: a0 = 0\n 86041: ra = 978, jump @25\n      : @1076 [@dyn 489] [export #1: 'deploy'] (gas: 2)\n 86048: a0 = 0x1\n 86051: ra = 980, jump @25\n      : @1077 [@dyn 490] (gas: 27)\n 86058: sp = sp + 0xffffffffffffff80\n 86061: u64 [sp + 0x78] = ra\n 86064: u64 [sp + 0x70] = s0\n 86067: u64 [sp + 0x68] = s1\n 86070: s0 = sp + 0x80\n 86074: sp = sp & 0xfffffffffffffff0\n 86077: t0 = u64 [a1]\n 86079: t1 = u64 [a1 + 0x8]\n 86082: t2 = u64 [a1 + 0x10]\n 86085: a1 = u64 [a1 + 0x18]\n 86088: a3 = u64 [a2]\n 86090: a4 = u64 [a2 + 0x8]\n 86093: a5 = u64 [a2 + 0x10]\n 86096: a2 = u64 [a2 + 0x18]\n 86099: s1 = a0\n 86101: u64 [sp + 0x18] = a2\n 86104: u64 [sp + 0x10] = a5\n 86107: u64 [sp + 0x8] = a4\n 86110: u64 [sp] = a3\n 86112: u64 [sp + 0x38] = a1\n 86115: u64 [sp + 0x30] = t2\n 86118: u64 [sp + 0x28] = t1\n 86121: a0 = sp + 0x40\n 86124: a1 = sp + 0x20\n 86127: a2 = sp\n 86129: u64 [sp + 0x20] = t0\n 86132: ra = 982, jump @99\n      : @1078 [@dyn 491] (gas: 14)\n 86139: a0 = u64 [sp + 0x50]\n 86142: a1 = u64 [sp + 0x58]\n 86145: a2 = u64 [sp + 0x40]\n 86148: a3 = u64 [sp + 0x48]\n 86151: u64 [s1 + 0x10] = a0\n 86154: u64 [s1 + 0x18] = a1\n 86157: u64 [s1] = a2\n 86159: u64 [s1 + 0x8] = a3\n 86162: sp = s0 + 0xffffffffffffff80\n 86165: ra = u64 [sp + 0x78]\n 86168: s0 = u64 [sp + 0x70]\n 86171: s1 = u64 [sp + 0x68]\n 86174: sp = sp + 0x80\n 86178: ret\n",
						"bytecode": {
							"object": ""
						},
						"deployedBytecode": {
							"object": ""
						},
						"methodIdentifiers": {
							"arbiter()": "fe25e00a",
							"buyService(uint256)": "c594e5ec",
							"createService(uint256,string)": "bdfdeb87",
							"deliver(uint256,uint256,bytes32)": "5e71a321",
							"nextPurchaseId(uint256)": "b9be108d",
							"nextServiceId()": "f6c53d9b",
							"purchases(uint256,uint256)": "bf96f317",
							"raiseDispute(uint256,uint256)": "9f686097",
							"resolveDispute(uint256,uint256,bool)": "36c47f5f",
							"services(uint256)": "c22c4f43",
							"topUpStake(uint256)": "ac06e04f",
							"withdrawStake(uint256,uint256)": "f1fdf469"
						}
					},
					"irOptimized": "/// @use-src 0:\"EscroDot.sol\"\nobject \"EscroDot_577\" {\n    code {\n        {\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            mstore(64, memoryguard(0xa0))\n            if callvalue()\n            {\n                revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            }\n            let _1 := copy_arguments_for_constructor_object_EscroDot()\n            constructor_EscroDot(_1)\n            let _2 := allocate_unbounded()\n            codecopy(_2, dataoffset(\"EscroDot_577_deployed\"), datasize(\"EscroDot_577_deployed\"))\n            setimmutable(_2, \"26\", mload(128))\n            return(_2, datasize(\"EscroDot_577_deployed\"))\n        }\n        function allocate_unbounded() -> memPtr\n        { memPtr := mload(64) }\n        function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n        { revert(0, 0) }\n        function round_up_to_mul_of(value) -> result\n        {\n            result := and(add(value, 31), not(31))\n        }\n        function panic_error_0x41()\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x41)\n            revert(0, 0x24)\n        }\n        function finalize_allocation(memPtr, size)\n        {\n            let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n            if or(gt(newFreePtr, sub(shl(64, 1), 1)), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n            mstore(64, newFreePtr)\n        }\n        function allocate_memory(size) -> memPtr\n        {\n            memPtr := allocate_unbounded()\n            finalize_allocation(memPtr, size)\n        }\n        function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n        { revert(0, 0) }\n        function cleanup_uint160(value) -> cleaned\n        {\n            cleaned := and(value, sub(shl(160, 1), 1))\n        }\n        function cleanup_address(value) -> cleaned\n        {\n            cleaned := cleanup_uint160(value)\n        }\n        function validator_revert_address(value)\n        {\n            if iszero(eq(value, cleanup_address(value))) { revert(0, 0) }\n        }\n        function abi_decode_address_fromMemory(offset, end) -> value\n        {\n            value := mload(offset)\n            validator_revert_address(value)\n        }\n        function abi_decode_tuple_address_fromMemory(headStart, dataEnd) -> value0\n        {\n            if slt(sub(dataEnd, headStart), 32)\n            {\n                revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            }\n            let offset := 0\n            value0 := abi_decode_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n        function copy_arguments_for_constructor_object_EscroDot() -> ret_param\n        {\n            let programSize := datasize(\"EscroDot_577\")\n            let argSize := sub(codesize(), programSize)\n            let memoryDataOffset := allocate_memory(argSize)\n            codecopy(memoryDataOffset, programSize, argSize)\n            ret_param := abi_decode_tuple_address_fromMemory(memoryDataOffset, add(memoryDataOffset, argSize))\n        }\n        function shift_left(value) -> newValue\n        { newValue := shl(0, value) }\n        function update_byte_slice_shift(value, toInsert) -> result\n        {\n            let mask := not(0)\n            toInsert := shift_left(toInsert)\n            value := and(value, not(mask))\n            result := or(value, and(toInsert, mask))\n        }\n        function cleanup_rational_by(value) -> cleaned\n        { cleaned := value }\n        function cleanup_uint256(value) -> cleaned\n        { cleaned := value }\n        function identity(value) -> ret\n        { ret := value }\n        function convert_rational_by_to_uint256(value) -> converted\n        {\n            converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n        }\n        function prepare_store_uint256(value) -> ret\n        { ret := value }\n        function update_storage_value_offset_rational_by_to_uint256(slot, value)\n        {\n            let convertedValue := convert_rational_by_to_uint256(value)\n            sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n        }\n        function cleanup_t_rational_by(value) -> cleaned\n        { cleaned := value }\n        function convert_rational_by_to_uint160(value) -> converted\n        {\n            converted := cleanup_uint160(identity(cleanup_t_rational_by(value)))\n        }\n        function convert_rational_by_to_address(value) -> converted\n        {\n            converted := convert_rational_by_to_uint160(value)\n        }\n        function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n        {\n            mstore(pos, length)\n            updated_pos := add(pos, 0x20)\n        }\n        function store_literal_in_memory_7038a94b7cf20b5f5dc0b98e4876eb3fd8ea55b5dd666e49539c0f37f0c5ccb5(memPtr)\n        {\n            mstore(add(memPtr, 0), \"arbiter = 0\")\n        }\n        function abi_encode_stringliteral_7038a94b7cf20b5f5dc0b98e4876eb3fd8ea55b5dd666e49539c0f37f0c5ccb5(pos) -> end\n        {\n            pos := array_storeLengthForEncoding_string(pos, 11)\n            store_literal_in_memory_7038a94b7cf20b5f5dc0b98e4876eb3fd8ea55b5dd666e49539c0f37f0c5ccb5(pos)\n            end := add(pos, 32)\n        }\n        function abi_encode_stringliteral(headStart) -> tail\n        {\n            tail := add(headStart, 32)\n            mstore(add(headStart, 0), sub(tail, headStart))\n            tail := abi_encode_stringliteral_7038a94b7cf20b5f5dc0b98e4876eb3fd8ea55b5dd666e49539c0f37f0c5ccb5(tail)\n        }\n        function require_helper_stringliteral(condition)\n        {\n            if iszero(condition)\n            {\n                let memPtr := allocate_unbounded()\n                mstore(memPtr, shl(229, 4594637))\n                let end := abi_encode_stringliteral(add(memPtr, 4))\n                revert(memPtr, sub(end, memPtr))\n            }\n        }\n        /// @ast-id 153 @src 0:4093:4214  \"constructor(address _arbiter) {...\"\n        function constructor_EscroDot(var_arbiter)\n        {\n            /// @src 0:2096:2097  \"1\"\n            let expr := 0x01\n            update_storage_value_offset_rational_by_to_uint256(0x00, expr)\n            /// @src 0:2739:2740  \"1\"\n            let expr_1 := 0x01\n            update_storage_value_offset_rational_by_to_uint256(0x04, expr_1)\n            /// @src 0:4141:4149  \"_arbiter\"\n            let _1 := var_arbiter\n            let expr_2 := _1\n            /// @src 0:4161:4162  \"0\"\n            let expr_3 := 0x00\n            /// @src 0:4153:4163  \"address(0)\"\n            let expr_4 := convert_rational_by_to_address(expr_3)\n            /// @src 0:4141:4163  \"_arbiter != address(0)\"\n            let expr_5 := iszero(eq(cleanup_address(expr_2), cleanup_address(expr_4)))\n            /// @src 0:4133:4179  \"require(_arbiter != address(0), \\\"arbiter = 0\\\")\"\n            require_helper_stringliteral(expr_5)\n            /// @src 0:4199:4207  \"_arbiter\"\n            let _2 := var_arbiter\n            let expr_6 := _2\n            /// @src 0:4189:4207  \"arbiter = _arbiter\"\n            let _3 := expr_6\n            mstore(128, _3)\n        }\n    }\n    /// @use-src 0:\"EscroDot.sol\"\n    object \"EscroDot_577_deployed\" {\n        code {\n            {\n                /// @src 0:870:8934  \"contract EscroDot {...\"\n                mstore(64, memoryguard(0x80))\n                if iszero(lt(calldatasize(), 4))\n                {\n                    let selector := shift_right_224_unsigned(calldataload(0))\n                    switch selector\n                    case 0x36c47f5f { external_fun_resolveDispute() }\n                    case 0x5e71a321 { external_fun_deliver() }\n                    case 0x9f686097 { external_fun_raiseDispute() }\n                    case 0xac06e04f { external_fun_topUpStake() }\n                    case 0xb9be108d { external_fun_nextPurchaseId() }\n                    case 0xbdfdeb87 { external_fun_createService() }\n                    case 0xbf96f317 { external_fun_purchases() }\n                    case 0xc22c4f43 { external_fun_services() }\n                    case 0xc594e5ec { external_fun_buyService() }\n                    case 0xf1fdf469 { external_fun_withdrawStake() }\n                    case 0xf6c53d9b { external_fun_nextServiceId() }\n                    case 0xfe25e00a { external_fun_arbiter() }\n                    default { }\n                }\n                revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            }\n            function shift_right_224_unsigned(value) -> newValue\n            { newValue := shr(224, value) }\n            function allocate_unbounded() -> memPtr\n            { memPtr := mload(64) }\n            function revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n            { revert(0, 0) }\n            function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n            { revert(0, 0) }\n            function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n            { revert(0, 0) }\n            function cleanup_uint256(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_uint256(value)\n            {\n                if iszero(eq(value, cleanup_uint256(value))) { revert(0, 0) }\n            }\n            function abi_decode_uint256(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_uint256(value)\n            }\n            function cleanup_bool(value) -> cleaned\n            {\n                cleaned := iszero(iszero(value))\n            }\n            function validator_revert_bool(value)\n            {\n                if iszero(eq(value, cleanup_bool(value))) { revert(0, 0) }\n            }\n            function abi_decode_bool(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bool(value)\n            }\n            function abi_decode_uint256t_uint256t_bool(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_bool(add(headStart, offset_2), dataEnd)\n            }\n            function abi_encode_tuple(headStart) -> tail\n            { tail := add(headStart, 0) }\n            function external_fun_resolveDispute()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_uint256t_uint256t_bool(4, calldatasize())\n                fun_resolveDispute(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function cleanup_bytes32(value) -> cleaned\n            { cleaned := value }\n            function validator_revert_bytes32(value)\n            {\n                if iszero(eq(value, cleanup_bytes32(value))) { revert(0, 0) }\n            }\n            function abi_decode_bytes32(offset, end) -> value\n            {\n                value := calldataload(offset)\n                validator_revert_bytes32(value)\n            }\n            function abi_decode_uint256t_uint256t_bytes32(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 96)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n                let offset_2 := 64\n                value2 := abi_decode_bytes32(add(headStart, offset_2), dataEnd)\n            }\n            function external_fun_deliver()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1, param_2 := abi_decode_uint256t_uint256t_bytes32(4, calldatasize())\n                fun_deliver(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_uint256t_uint256(headStart, dataEnd) -> value0, value1\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := 32\n                value1 := abi_decode_uint256(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_raiseDispute()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_uint256(4, calldatasize())\n                fun_raiseDispute(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode_tuple_uint256(headStart, dataEnd) -> value0\n            {\n                if slt(sub(dataEnd, headStart), 32)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n            }\n            function external_fun_topUpStake()\n            {\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                fun_topUpStake(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function identity(value) -> ret\n            { ret := value }\n            function convert_uint256_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_uint256(value)))\n            }\n            function mapping_index_access_mapping_uint256_uint256_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_unsigned_dynamic(bits, value) -> newValue\n            { newValue := shr(bits, value) }\n            function cleanup_from_storage_uint256(value) -> cleaned\n            { cleaned := value }\n            function extract_from_storage_value_dynamict_uint256(slot_value, offset) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_unsigned_dynamic(mul(offset, 8), slot_value))\n            }\n            function read_from_storage_split_dynamic_uint256(slot, offset) -> value\n            {\n                value := extract_from_storage_value_dynamict_uint256(sload(slot), offset)\n            }\n            /// @ast-id 33 @src 0:2142:2191  \"mapping(uint256 => uint256) public nextPurchaseId\"\n            function getter_fun_nextPurchaseId(key) -> ret\n            {\n                let slot := 1\n                let offset := 0\n                slot := mapping_index_access_mapping_uint256_uint256_of_uint256(slot, key)\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function abi_encode_uint256_to_uint256(value, pos)\n            {\n                mstore(pos, cleanup_uint256(value))\n            }\n            function abi_encode_uint256(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n            }\n            function external_fun_nextPurchaseId()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := getter_fun_nextPurchaseId(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n            { revert(0, 0) }\n            function revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n            { revert(0, 0) }\n            function revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n            { revert(0, 0) }\n            function abi_decode_string_calldata(offset, end) -> arrayPos, length\n            {\n                if iszero(slt(add(offset, 0x1f), end))\n                {\n                    revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d()\n                }\n                length := calldataload(offset)\n                if gt(length, 0xffffffffffffffff)\n                {\n                    revert_error_15abf5612cd996bc235ba1e55a4a30ac60e6bb601ff7ba4ad3f179b6be8d0490()\n                }\n                arrayPos := add(offset, 0x20)\n                if gt(add(arrayPos, mul(length, 0x01)), end)\n                {\n                    revert_error_81385d8c0b31fffe14be1da910c8bd3a80be4cfa248e04f42ec0faea3132a8ef()\n                }\n            }\n            function abi_decode_uint256t_string_calldata(headStart, dataEnd) -> value0, value1, value2\n            {\n                if slt(sub(dataEnd, headStart), 64)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n                let offset := 0\n                value0 := abi_decode_uint256(add(headStart, offset), dataEnd)\n                let offset_1 := calldataload(add(headStart, 32))\n                if gt(offset_1, 0xffffffffffffffff)\n                {\n                    revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db()\n                }\n                value1, value2 := abi_decode_string_calldata(add(headStart, offset_1), dataEnd)\n            }\n            function external_fun_createService()\n            {\n                let param, param_1, param_2 := abi_decode_uint256t_string_calldata(4, calldatasize())\n                let ret := fun_createService(param, param_1, param_2)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function mapping_index_access_mapping_uint256_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function shift_right_0_unsigned(value) -> newValue\n            { newValue := shr(0, value) }\n            function cleanup_from_storage_address(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function extract_from_storage_value_offset_address(slot_value) -> value\n            {\n                value := cleanup_from_storage_address(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_address(slot) -> value\n            {\n                value := extract_from_storage_value_offset_address(sload(slot))\n            }\n            function extract_from_storage_value_offset_uint256(slot_value) -> value\n            {\n                value := cleanup_from_storage_uint256(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_uint256(slot) -> value\n            {\n                value := extract_from_storage_value_offset_uint256(sload(slot))\n            }\n            function cleanup_from_storage_bool(value) -> cleaned\n            { cleaned := and(value, 0xff) }\n            function extract_from_storage_value_offset_0_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_0_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_t_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_0_bool(sload(slot))\n            }\n            function shift_right_8_unsigned(value) -> newValue\n            { newValue := shr(8, value) }\n            function extract_from_storage_value_offset_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_8_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_bool(sload(slot))\n            }\n            function shift_right_unsigned(value) -> newValue\n            { newValue := shr(16, value) }\n            function extract_from_storage_value_offset_t_bool(slot_value) -> value\n            {\n                value := cleanup_from_storage_bool(shift_right_unsigned(slot_value))\n            }\n            function read_from_storage_split_offset_2_bool(slot) -> value\n            {\n                value := extract_from_storage_value_offset_t_bool(sload(slot))\n            }\n            /// @ast-id 45 @src 0:2343:2408  \"mapping(uint256 => mapping(uint256 => Purchase)) public purchases\"\n            function getter_fun_purchases(key, key_1) -> ret, ret_1, ret_2, ret_3, ret_4\n            {\n                let slot := 3\n                slot := mapping_index_access_mapping_uint256_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key)\n                slot := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(slot, key_1)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_2 := read_from_storage_split_offset_t_bool(add(slot, 2))\n                ret_3 := read_from_storage_split_offset_bool(add(slot, 2))\n                ret_4 := read_from_storage_split_offset_2_bool(add(slot, 2))\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function cleanup_uint160(value) -> cleaned\n            {\n                cleaned := and(value, sub(shl(160, 1), 1))\n            }\n            function cleanup_address(value) -> cleaned\n            {\n                cleaned := cleanup_uint160(value)\n            }\n            function abi_encode_address(value, pos)\n            {\n                mstore(pos, cleanup_address(value))\n            }\n            function abi_encode_bool_to_bool(value, pos)\n            {\n                mstore(pos, cleanup_bool(value))\n            }\n            function abi_encode_address_uint256_bool_bool_bool(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                tail := add(headStart, 160)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                abi_encode_bool_to_bool(value2, add(headStart, 64))\n                abi_encode_bool_to_bool(value3, add(headStart, 96))\n                abi_encode_bool_to_bool(value4, add(headStart, 128))\n            }\n            function external_fun_purchases()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3, ret_4 := getter_fun_purchases(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_bool_bool_bool(memPos, ret, ret_1, ret_2, ret_3, ret_4)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function mapping_index_access_mapping_uint256_struct_Service_storage_of_uint256(slot, key) -> dataSlot\n            {\n                mstore(0, convert_uint256_to_uint256(key))\n                mstore(0x20, slot)\n                dataSlot := keccak256(0, 0x40)\n            }\n            function panic_error_0x22()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x22)\n                revert(0, 0x24)\n            }\n            function extract_byte_array_length(data) -> length\n            {\n                length := div(data, 2)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32)) { panic_error_0x22() }\n            }\n            function array_storeLengthForEncoding_string(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function array_dataslot_string_storage(ptr) -> data\n            {\n                data := ptr\n                mstore(0, ptr)\n                data := keccak256(0, 0x20)\n            }\n            function abi_encode_string_storage(value, pos) -> ret\n            {\n                let slotValue := sload(value)\n                let length := extract_byte_array_length(slotValue)\n                pos := array_storeLengthForEncoding_string(pos, length)\n                switch and(slotValue, 1)\n                case 0 {\n                    mstore(pos, and(slotValue, not(0xff)))\n                    ret := add(pos, mul(0x20, iszero(iszero(length))))\n                }\n                case 1 {\n                    let dataPos := array_dataslot_string_storage(value)\n                    let i := 0\n                    for { } lt(i, length) { i := add(i, 0x20) }\n                    {\n                        mstore(add(pos, i), sload(dataPos))\n                        dataPos := add(dataPos, 1)\n                    }\n                    ret := add(pos, i)\n                }\n            }\n            function abi_encodeUpdatedPos_string_storage(value0, pos) -> updatedPos\n            {\n                updatedPos := abi_encode_string_storage(value0, pos)\n            }\n            function round_up_to_mul_of(value) -> result\n            {\n                result := and(add(value, 31), not(31))\n            }\n            function panic_error_0x41()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x41)\n                revert(0, 0x24)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, round_up_to_mul_of(size))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n                mstore(64, newFreePtr)\n            }\n            function copy_array_from_storage_to_memory_string(slot) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                let end := abi_encodeUpdatedPos_string_storage(slot, memPtr)\n                finalize_allocation(memPtr, sub(end, memPtr))\n            }\n            /// @ast-id 38 @src 0:2247:2290  \"mapping(uint256 => Service) public services\"\n            function getter_fun_services(key) -> ret, ret_1, ret_mpos, ret_2, ret_3\n            {\n                let slot := 2\n                slot := mapping_index_access_mapping_uint256_struct_Service_storage_of_uint256(slot, key)\n                ret := read_from_storage_split_offset_address(add(slot, 0))\n                ret_1 := read_from_storage_split_offset_uint256(add(slot, 1))\n                ret_mpos := copy_array_from_storage_to_memory_string(add(slot, 2))\n                ret_2 := read_from_storage_split_offset_uint256(add(slot, 3))\n                ret_3 := read_from_storage_split_offset_t_bool(add(slot, 4))\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function array_length_string(value) -> length\n            { length := mload(value) }\n            function array_storeLengthForEncoding_string_fromStack(pos, length) -> updated_pos\n            {\n                mstore(pos, length)\n                updated_pos := add(pos, 0x20)\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                mcopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_encode_string(value, pos) -> end\n            {\n                let length := array_length_string(value)\n                pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_address_uint256_string_uint256_bool(headStart, value0, value1, value2, value3, value4) -> tail\n            {\n                tail := add(headStart, 160)\n                abi_encode_address(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                mstore(add(headStart, 64), sub(tail, headStart))\n                tail := abi_encode_string(value2, tail)\n                abi_encode_uint256_to_uint256(value3, add(headStart, 96))\n                abi_encode_bool_to_bool(value4, add(headStart, 128))\n            }\n            function external_fun_services()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret, ret_1, ret_2, ret_3, ret_4 := getter_fun_services(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_address_uint256_string_uint256_bool(memPos, ret, ret_1, ret_2, ret_3, ret_4)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_buyService()\n            {\n                let param := abi_decode_tuple_uint256(4, calldatasize())\n                let ret := fun_buyService(param)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function external_fun_withdrawStake()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                let param, param_1 := abi_decode_uint256t_uint256(4, calldatasize())\n                fun_withdrawStake(param, param_1)\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple(memPos)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function abi_decode(headStart, dataEnd)\n            {\n                if slt(sub(dataEnd, headStart), 0)\n                {\n                    revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b()\n                }\n            }\n            /// @ast-id 29 @src 0:2065:2097  \"uint256 public nextServiceId = 1\"\n            function getter_fun_nextServiceId() -> ret\n            {\n                let slot := 0\n                let offset := 0\n                ret := read_from_storage_split_dynamic_uint256(slot, offset)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function external_fun_nextServiceId()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_nextServiceId()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_uint256(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            /// @ast-id 26 @src 0:1985:2017  \"address public immutable arbiter\"\n            function getter_fun_arbiter() -> rval\n            { rval := loadimmutable(\"26\") }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function abi_encode_tuple_address(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_address(value0, add(headStart, 0))\n            }\n            function external_fun_arbiter()\n            {\n                if callvalue()\n                {\n                    revert_error_ca66f745a3ce8ff40e2ccaf1ad45db7774001b90d25810abd9040049be7bf4bb()\n                }\n                abi_decode(4, calldatasize())\n                let ret := getter_fun_arbiter()\n                let memPos := allocate_unbounded()\n                let memEnd := abi_encode_tuple_address(memPos, ret)\n                return(memPos, sub(memEnd, memPos))\n            }\n            function revert_error_42b3090547df1d2001c96683413b8cf91c1b902ef5e3cb8d9f6f304cf7446f74()\n            { revert(0, 0) }\n            function cleanup_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_rational_by_to_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_rational_by(value)))\n            }\n            function store_literal_in_memory_eb4a01a12a4bbfa1bc780c16c5b2b6720cdf4f3c29cabd8c0f76fec3a575096b(memPtr)\n            {\n                mstore(add(memPtr, 0), \"LOCKED\")\n            }\n            function abi_encode_stringliteral_eb4a(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 6)\n                store_literal_in_memory_eb4a01a12a4bbfa1bc780c16c5b2b6720cdf4f3c29cabd8c0f76fec3a575096b(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_eb4a(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_eb4a(tail)\n            }\n            function require_helper_stringliteral_eb4a(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_eb4a(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function cleanup_t_rational_by(value) -> cleaned\n            { cleaned := value }\n            function convert_t_rational_by_to_t_uint256(value) -> converted\n            {\n                converted := cleanup_uint256(identity(cleanup_t_rational_by(value)))\n            }\n            function shift_left_0(value) -> newValue\n            { newValue := shl(0, value) }\n            function update_byte_slice_shift(value, toInsert) -> result\n            {\n                let mask := not(0)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function prepare_store_uint256(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_uint256_to_uint256(slot, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_shift(sload(slot), prepare_store_uint256(convertedValue)))\n            }\n            /// @ast-id 67 @src 0:2797:2920  \"modifier lock() {...\"\n            function modifier_lock_414(var_serviceId, var_purchaseId, var_refund)\n            {\n                /// @src 0:2831:2840  \"_unlocked\"\n                let _1 := read_from_storage_split_offset_uint256(0x04)\n                let expr := _1\n                /// @src 0:2844:2845  \"1\"\n                let expr_1 := 0x01\n                /// @src 0:2831:2845  \"_unlocked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:2823:2856  \"require(_unlocked == 1, \\\"LOCKED\\\")\"\n                require_helper_stringliteral_eb4a(expr_2)\n                /// @src 0:2878:2879  \"0\"\n                let expr_3 := 0x00\n                /// @src 0:2866:2879  \"_unlocked = 0\"\n                let _2 := convert_t_rational_by_to_t_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x04, _2)\n                /// @src 0:2889:2890  \"_\"\n                fun_resolveDispute_inner(var_serviceId, var_purchaseId, var_refund)\n                /// @src 0:2912:2913  \"1\"\n                let expr_4 := 0x01\n                /// @src 0:2900:2913  \"_unlocked = 1\"\n                let _3 := convert_rational_by_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x04, _3)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function store_literal_in_memory_3c714372baa5ff217959295689d0137e94ebd0eb36840e2f5be8dbd420f88aac(memPtr)\n            {\n                mstore(add(memPtr, 0), \"not arbiter\")\n            }\n            function abi_encode_stringliteral_3c714372baa5ff217959295689d0137e94ebd0eb36840e2f5be8dbd420f88aac(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 11)\n                store_literal_in_memory_3c714372baa5ff217959295689d0137e94ebd0eb36840e2f5be8dbd420f88aac(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_3c71(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_3c714372baa5ff217959295689d0137e94ebd0eb36840e2f5be8dbd420f88aac(tail)\n            }\n            function require_helper_stringliteral_3c71(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_3c71(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_struct_Purchase_storage_to_struct_Purchase_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_5fcebd5e1817174d270c522123bcbeab50aaaf6a2da96c6947b8b5b81d8558ca(memPtr)\n            {\n                mstore(add(memPtr, 0), \"no active dispute\")\n            }\n            function abi_encode_stringliteral_5fcebd5e1817174d270c522123bcbeab50aaaf6a2da96c6947b8b5b81d8558ca(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 17)\n                store_literal_in_memory_5fcebd5e1817174d270c522123bcbeab50aaaf6a2da96c6947b8b5b81d8558ca(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_5fce(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_5fcebd5e1817174d270c522123bcbeab50aaaf6a2da96c6947b8b5b81d8558ca(tail)\n            }\n            function require_helper_stringliteral_5fce(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_5fce(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left_16(value) -> newValue\n            { newValue := shl(16, value) }\n            function update_byte_slice_shift_2(value, toInsert) -> result\n            {\n                let mask := 16711680\n                toInsert := shift_left_16(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_bool_to_bool(value) -> converted\n            {\n                converted := cleanup_bool(value)\n            }\n            function prepare_store_bool(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_2_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_2(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function convert_struct_Service_storage_to_struct_Service_ptr(value) -> converted\n            { converted := value }\n            function store_literal_in_memory_242cb42cb24d3b9049247cd85e3974f65c88308deea9d57f37fbab7ee6001e56(memPtr)\n            {\n                mstore(add(memPtr, 0), \"insufficient stake\")\n            }\n            function abi_encode_stringliteral_242cb42cb24d3b9049247cd85e3974f65c88308deea9d57f37fbab7ee6001e56(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 18)\n                store_literal_in_memory_242cb42cb24d3b9049247cd85e3974f65c88308deea9d57f37fbab7ee6001e56(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_242c(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_242cb42cb24d3b9049247cd85e3974f65c88308deea9d57f37fbab7ee6001e56(tail)\n            }\n            function require_helper_stringliteral_242c(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_242c(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function panic_error_0x11()\n            {\n                mstore(0, shl(224, 0x4e487b71))\n                mstore(4, 0x11)\n                revert(0, 0x24)\n            }\n            function checked_sub_uint256(x, y) -> diff\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                diff := sub(x, y)\n                if gt(diff, x) { panic_error_0x11() }\n            }\n            function abi_encode_bool(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bool_to_bool(value0, add(headStart, 0))\n            }\n            /// @src 0:7346:7995  \"function resolveDispute(uint256 serviceId, uint256 purchaseId, bool refund) external lock {...\"\n            function fun_resolveDispute_inner(var_serviceId, var_purchaseId, var_refund)\n            {\n                /// @src 0:7454:7464  \"msg.sender\"\n                let expr := caller()\n                /// @src 0:7468:7475  \"arbiter\"\n                let _1 := loadimmutable(\"26\")\n                let expr_1 := _1\n                /// @src 0:7454:7475  \"msg.sender == arbiter\"\n                let expr_2 := eq(cleanup_address(expr), cleanup_address(expr_1))\n                /// @src 0:7446:7491  \"require(msg.sender == arbiter, \\\"not arbiter\\\")\"\n                require_helper_stringliteral_3c71(expr_2)\n                /// @src 0:7523:7532  \"purchases\"\n                let _5_slot := 0x03\n                let expr_427_slot := _5_slot\n                /// @src 0:7533:7542  \"serviceId\"\n                let _2 := var_serviceId\n                let expr_3 := _2\n                /// @src 0:7523:7543  \"purchases[serviceId]\"\n                let _3 := mapping_index_access_mapping_uint256_mapping_uint256_struct_Purchase_storage_of_uint256(expr_427_slot, expr_3)\n                let _8_slot := _3\n                let expr_slot := _8_slot\n                /// @src 0:7544:7554  \"purchaseId\"\n                let _4 := var_purchaseId\n                let expr_4 := _4\n                /// @src 0:7523:7555  \"purchases[serviceId][purchaseId]\"\n                let _5 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_slot, expr_4)\n                let _11_slot := _5\n                let expr_431_slot := _11_slot\n                /// @src 0:7502:7555  \"Purchase storage p = purchases[serviceId][purchaseId]\"\n                let var_p_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_431_slot)\n                /// @src 0:7573:7574  \"p\"\n                let _slot := var_p_slot\n                let expr_434_slot := _slot\n                /// @src 0:7573:7583  \"p.disputed\"\n                let _6 := add(expr_434_slot, 2)\n                let _7 := read_from_storage_split_offset_bool(_6)\n                let expr_5 := _7\n                /// @src 0:7573:7598  \"p.disputed && !p.resolved\"\n                let expr_6 := expr_5\n                if expr_6\n                {\n                    /// @src 0:7588:7589  \"p\"\n                    let _15_slot := var_p_slot\n                    let expr_436_slot := _15_slot\n                    /// @src 0:7588:7598  \"p.resolved\"\n                    let _8 := add(expr_436_slot, 2)\n                    let _9 := read_from_storage_split_offset_2_bool(_8)\n                    let expr_7 := _9\n                    /// @src 0:7587:7598  \"!p.resolved\"\n                    let expr_8 := cleanup_bool(iszero(expr_7))\n                    /// @src 0:7573:7598  \"p.disputed && !p.resolved\"\n                    expr_6 := expr_8\n                }\n                /// @src 0:7565:7620  \"require(p.disputed && !p.resolved, \\\"no active dispute\\\")\"\n                require_helper_stringliteral_5fce(expr_6)\n                /// @src 0:7644:7648  \"true\"\n                let expr_9 := 0x01\n                /// @src 0:7631:7632  \"p\"\n                let _18_slot := var_p_slot\n                let expr_443_slot := _18_slot\n                /// @src 0:7631:7641  \"p.resolved\"\n                let _10 := add(expr_443_slot, 2)\n                /// @src 0:7631:7648  \"p.resolved = true\"\n                update_storage_value_offset_2_bool_to_bool(_10, expr_9)\n                /// @src 0:7678:7686  \"services\"\n                let _20_slot := 0x02\n                let expr_452_slot := _20_slot\n                /// @src 0:7687:7696  \"serviceId\"\n                let _11 := var_serviceId\n                let expr_10 := _11\n                /// @src 0:7678:7697  \"services[serviceId]\"\n                let _12 := mapping_index_access_mapping_uint256_struct_Service_storage_of_uint256(expr_452_slot, expr_10)\n                let _23_slot := _12\n                let expr_454_slot := _23_slot\n                /// @src 0:7658:7697  \"Service storage s = services[serviceId]\"\n                let var_s_451_slot := convert_struct_Service_storage_to_struct_Service_ptr(expr_454_slot)\n                /// @src 0:7712:7718  \"refund\"\n                let _13 := var_refund\n                let expr_11 := _13\n                /// @src 0:7708:7927  \"if (refund) {...\"\n                if expr_11\n                {\n                    /// @src 0:7757:7758  \"p\"\n                    let _25_slot := var_p_slot\n                    let expr_459_slot := _25_slot\n                    /// @src 0:7757:7765  \"p.amount\"\n                    let _14 := add(expr_459_slot, 1)\n                    let _15 := read_from_storage_split_offset_uint256(_14)\n                    let expr_12 := _15\n                    /// @src 0:7734:7765  \"uint256 refundAmount = p.amount\"\n                    let var_refundAmount := expr_12\n                    /// @src 0:7787:7788  \"s\"\n                    let _28_slot := var_s_451_slot\n                    let expr_463_slot := _28_slot\n                    /// @src 0:7787:7794  \"s.stake\"\n                    let _16 := add(expr_463_slot, 3)\n                    let _17 := read_from_storage_split_offset_uint256(_16)\n                    let expr_13 := _17\n                    /// @src 0:7798:7810  \"refundAmount\"\n                    let _18 := var_refundAmount\n                    let expr_14 := _18\n                    /// @src 0:7787:7810  \"s.stake >= refundAmount\"\n                    let expr_15 := iszero(lt(cleanup_uint256(expr_13), cleanup_uint256(expr_14)))\n                    /// @src 0:7779:7833  \"require(s.stake >= refundAmount, \\\"insufficient stake\\\")\"\n                    require_helper_stringliteral_242c(expr_15)\n                    /// @src 0:7858:7870  \"refundAmount\"\n                    let _19 := var_refundAmount\n                    let expr_16 := _19\n                    /// @src 0:7847:7848  \"s\"\n                    let _33_slot := var_s_451_slot\n                    let expr_470_slot := _33_slot\n                    /// @src 0:7847:7854  \"s.stake\"\n                    let _20 := add(expr_470_slot, 3)\n                    /// @src 0:7847:7870  \"s.stake -= refundAmount\"\n                    let _21 := read_from_storage_split_offset_uint256(_20)\n                    let expr_17 := checked_sub_uint256(_21, expr_16)\n                    update_storage_value_offset_uint256_to_uint256(_20, expr_17)\n                    /// @src 0:7894:7895  \"p\"\n                    let _36_slot := var_p_slot\n                    let expr_477_slot := _36_slot\n                    /// @src 0:7894:7901  \"p.buyer\"\n                    let _22 := add(expr_477_slot, 0)\n                    let _23 := read_from_storage_split_offset_address(_22)\n                    let expr_18 := _23\n                    /// @src 0:7903:7915  \"refundAmount\"\n                    let _24 := var_refundAmount\n                    let expr_19 := _24\n                    fun_safeSend(expr_18, expr_19)\n                }\n                /// @src 0:7958:7967  \"serviceId\"\n                let _25 := var_serviceId\n                let expr_20 := _25\n                /// @src 0:7969:7979  \"purchaseId\"\n                let _26 := var_purchaseId\n                let expr_21 := _26\n                /// @src 0:7981:7987  \"refund\"\n                let _27 := var_refund\n                let expr_22 := _27\n                /// @src 0:7942:7988  \"DisputeResolved(serviceId, purchaseId, refund)\"\n                let _28 := 0xc84a77110774854ab237145b108e924962dbaa5191275eb044a6cb09621c4a94\n                let _29 := convert_uint256_to_uint256(expr_20)\n                let _30 := convert_uint256_to_uint256(expr_21)\n                let _31 := allocate_unbounded()\n                let _32 := abi_encode_bool(_31, expr_22)\n                log3(_31, sub(_32, _31), _28, _29, _30)\n            }\n            /// @ast-id 491 @src 0:7346:7995  \"function resolveDispute(uint256 serviceId, uint256 purchaseId, bool refund) external lock {...\"\n            function fun_resolveDispute(var_serviceId, var_purchaseId, var_refund)\n            {\n                modifier_lock_414(var_serviceId, var_purchaseId, var_refund)\n            }\n            /// @ast-id 67 @src 0:2797:2920  \"modifier lock() {...\"\n            function modifier_lock(var_serviceId, var_purchaseId, var_deliverableHash)\n            {\n                /// @src 0:2831:2840  \"_unlocked\"\n                let _1 := read_from_storage_split_offset_uint256(0x04)\n                let expr := _1\n                /// @src 0:2844:2845  \"1\"\n                let expr_1 := 0x01\n                /// @src 0:2831:2845  \"_unlocked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:2823:2856  \"require(_unlocked == 1, \\\"LOCKED\\\")\"\n                require_helper_stringliteral_eb4a(expr_2)\n                /// @src 0:2878:2879  \"0\"\n                let expr_3 := 0x00\n                /// @src 0:2866:2879  \"_unlocked = 0\"\n                let _2 := convert_t_rational_by_to_t_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x04, _2)\n                /// @src 0:2889:2890  \"_\"\n                fun_deliver_inner(var_serviceId, var_purchaseId, var_deliverableHash)\n                /// @src 0:2912:2913  \"1\"\n                let expr_4 := 0x01\n                /// @src 0:2900:2913  \"_unlocked = 1\"\n                let _3 := convert_rational_by_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x04, _3)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function store_literal_in_memory_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e(memPtr)\n            {\n                mstore(add(memPtr, 0), \"not owner\")\n            }\n            function abi_encode_stringliteral_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 9)\n                store_literal_in_memory_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_f288(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e(tail)\n            }\n            function require_helper_stringliteral_f288(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_f288(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_362ca1baaafe92a19c5b7b1402b374cebc53e6b3ac91ddf0886e177fe4ff89ed(memPtr)\n            {\n                mstore(add(memPtr, 0), \"invalid purchase\")\n            }\n            function abi_encode_stringliteral_362c(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 16)\n                store_literal_in_memory_362ca1baaafe92a19c5b7b1402b374cebc53e6b3ac91ddf0886e177fe4ff89ed(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_362c(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_362c(tail)\n            }\n            function require_helper_stringliteral_362c(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_362c(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function update_byte_slice_shift_0(value, toInsert) -> result\n            {\n                let mask := 255\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_bool_to_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_0(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            function abi_encode_bytes32_to_bytes32(value, pos)\n            {\n                mstore(pos, cleanup_bytes32(value))\n            }\n            function abi_encode_bytes32(headStart, value0) -> tail\n            {\n                tail := add(headStart, 32)\n                abi_encode_bytes32_to_bytes32(value0, add(headStart, 0))\n            }\n            /// @src 0:6217:6695  \"function deliver(uint256 serviceId, uint256 purchaseId, bytes32 deliverableHash) external lock {...\"\n            function fun_deliver_inner(var_serviceId, var_purchaseId, var_deliverableHash)\n            {\n                /// @src 0:6342:6350  \"services\"\n                let _51_slot := 0x02\n                let expr_299_slot := _51_slot\n                /// @src 0:6351:6360  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 0:6342:6361  \"services[serviceId]\"\n                let _2 := mapping_index_access_mapping_uint256_struct_Service_storage_of_uint256(expr_299_slot, expr)\n                let _54_slot := _2\n                let expr_301_slot := _54_slot\n                /// @src 0:6322:6361  \"Service storage s = services[serviceId]\"\n                let var_s_slot := convert_struct_Service_storage_to_struct_Service_ptr(expr_301_slot)\n                /// @src 0:6379:6389  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:6393:6394  \"s\"\n                let _55_slot := var_s_slot\n                let expr_306_slot := _55_slot\n                /// @src 0:6393:6400  \"s.owner\"\n                let _3 := add(expr_306_slot, 0)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_2 := _4\n                /// @src 0:6379:6400  \"msg.sender == s.owner\"\n                let expr_3 := eq(cleanup_address(expr_1), cleanup_address(expr_2))\n                /// @src 0:6371:6414  \"require(msg.sender == s.owner, \\\"not owner\\\")\"\n                require_helper_stringliteral_f288(expr_3)\n                /// @src 0:6446:6455  \"purchases\"\n                let _58_slot := 0x03\n                let expr_315_slot := _58_slot\n                /// @src 0:6456:6465  \"serviceId\"\n                let _5 := var_serviceId\n                let expr_4 := _5\n                /// @src 0:6446:6466  \"purchases[serviceId]\"\n                let _6 := mapping_index_access_mapping_uint256_mapping_uint256_struct_Purchase_storage_of_uint256(expr_315_slot, expr_4)\n                let _61_slot := _6\n                let expr_317_slot := _61_slot\n                /// @src 0:6467:6477  \"purchaseId\"\n                let _7 := var_purchaseId\n                let expr_5 := _7\n                /// @src 0:6446:6478  \"purchases[serviceId][purchaseId]\"\n                let _8 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_317_slot, expr_5)\n                let _64_slot := _8\n                let expr_319_slot := _64_slot\n                /// @src 0:6425:6478  \"Purchase storage p = purchases[serviceId][purchaseId]\"\n                let var_p_314_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_319_slot)\n                /// @src 0:6496:6497  \"p\"\n                let _65_slot := var_p_314_slot\n                let expr_322_slot := _65_slot\n                /// @src 0:6496:6504  \"p.amount\"\n                let _9 := add(expr_322_slot, 1)\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let expr_6 := _10\n                /// @src 0:6507:6508  \"0\"\n                let expr_7 := 0x00\n                /// @src 0:6496:6508  \"p.amount > 0\"\n                let expr_8 := gt(cleanup_uint256(expr_6), convert_t_rational_by_to_t_uint256(expr_7))\n                /// @src 0:6496:6524  \"p.amount > 0 && !p.delivered\"\n                let expr_9 := expr_8\n                if expr_9\n                {\n                    /// @src 0:6513:6514  \"p\"\n                    let _68_slot := var_p_314_slot\n                    let expr_326_slot := _68_slot\n                    /// @src 0:6513:6524  \"p.delivered\"\n                    let _11 := add(expr_326_slot, 2)\n                    let _12 := read_from_storage_split_offset_t_bool(_11)\n                    let expr_10 := _12\n                    /// @src 0:6512:6524  \"!p.delivered\"\n                    let expr_11 := cleanup_bool(iszero(expr_10))\n                    /// @src 0:6496:6524  \"p.amount > 0 && !p.delivered\"\n                    expr_9 := expr_11\n                }\n                /// @src 0:6488:6545  \"require(p.amount > 0 && !p.delivered, \\\"invalid purchase\\\")\"\n                require_helper_stringliteral_362c(expr_9)\n                /// @src 0:6570:6574  \"true\"\n                let expr_12 := 0x01\n                /// @src 0:6556:6557  \"p\"\n                let _71_slot := var_p_314_slot\n                let expr_333_slot := _71_slot\n                /// @src 0:6556:6567  \"p.delivered\"\n                let _13 := add(expr_333_slot, 2)\n                /// @src 0:6556:6574  \"p.delivered = true\"\n                update_storage_value_offset_bool_to_bool(_13, expr_12)\n                /// @src 0:6610:6619  \"serviceId\"\n                let _14 := var_serviceId\n                let expr_13 := _14\n                /// @src 0:6621:6631  \"purchaseId\"\n                let _15 := var_purchaseId\n                let expr_14 := _15\n                /// @src 0:6633:6648  \"deliverableHash\"\n                let _16 := var_deliverableHash\n                let expr_15 := _16\n                /// @src 0:6590:6649  \"DeliverableProvided(serviceId, purchaseId, deliverableHash)\"\n                let _17 := 0x17f49827452e5e9720f21b66427e0af5d65d54620e68dea6d200efc03168100b\n                let _18 := convert_uint256_to_uint256(expr_13)\n                let _19 := convert_uint256_to_uint256(expr_14)\n                let _20 := allocate_unbounded()\n                let _21 := abi_encode_bytes32(_20, expr_15)\n                log3(_20, sub(_21, _20), _17, _18, _19)\n                /// @src 0:6670:6671  \"s\"\n                let _81_slot := var_s_slot\n                let expr_346_slot := _81_slot\n                /// @src 0:6670:6677  \"s.owner\"\n                let _22 := add(expr_346_slot, 0)\n                let _23 := read_from_storage_split_offset_address(_22)\n                let expr_16 := _23\n                /// @src 0:6679:6680  \"p\"\n                let _84_slot := var_p_314_slot\n                let expr_348_slot := _84_slot\n                /// @src 0:6679:6687  \"p.amount\"\n                let _24 := add(expr_348_slot, 1)\n                let _25 := read_from_storage_split_offset_uint256(_24)\n                let expr_17 := _25\n                fun_safeSend(expr_16, expr_17)\n            }\n            /// @ast-id 353 @src 0:6217:6695  \"function deliver(uint256 serviceId, uint256 purchaseId, bytes32 deliverableHash) external lock {...\"\n            function fun_deliver(var_serviceId, var_purchaseId, var_deliverableHash)\n            {\n                modifier_lock(var_serviceId, var_purchaseId, var_deliverableHash)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function store_literal_in_memory_7d2df0608d025cbc5c8d732150d5f9f80e45895879c4b36d791be191af160cc9(memPtr)\n            {\n                mstore(add(memPtr, 0), \"not buyer\")\n            }\n            function abi_encode_stringliteral_7d2d(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 9)\n                store_literal_in_memory_7d2df0608d025cbc5c8d732150d5f9f80e45895879c4b36d791be191af160cc9(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_7d2d(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_7d2d(tail)\n            }\n            function require_helper_stringliteral_7d2d(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_7d2d(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_f35c20ce4fb680e4a5cf2a14d39f4b62b8575a788c7a0bbbe5adde7bf100481d(memPtr)\n            {\n                mstore(add(memPtr, 0), \"not delivered yet\")\n            }\n            function abi_encode_stringliteral_f35c20ce4fb680e4a5cf2a14d39f4b62b8575a788c7a0bbbe5adde7bf100481d(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 17)\n                store_literal_in_memory_f35c20ce4fb680e4a5cf2a14d39f4b62b8575a788c7a0bbbe5adde7bf100481d(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_f35c(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_f35c20ce4fb680e4a5cf2a14d39f4b62b8575a788c7a0bbbe5adde7bf100481d(tail)\n            }\n            function require_helper_stringliteral_f35c(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_f35c(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_d6de15bfb825bd264653ef010b7e69ee8b9435a8d737c726852164c1f4f04f17(memPtr)\n            {\n                mstore(add(memPtr, 0), \"already disputed\")\n            }\n            function abi_encode_stringliteral_d6de15bfb825bd264653ef010b7e69ee8b9435a8d737c726852164c1f4f04f17(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 16)\n                store_literal_in_memory_d6de15bfb825bd264653ef010b7e69ee8b9435a8d737c726852164c1f4f04f17(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_d6de(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_d6de15bfb825bd264653ef010b7e69ee8b9435a8d737c726852164c1f4f04f17(tail)\n            }\n            function require_helper_stringliteral_d6de(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_d6de(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function shift_left(value) -> newValue\n            { newValue := shl(8, value) }\n            function update_byte_slice_shift_1(value, toInsert) -> result\n            {\n                let mask := 65280\n                toInsert := shift_left(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_offset_t_bool_to_t_bool(slot, value)\n            {\n                let convertedValue := convert_bool_to_bool(value)\n                sstore(slot, update_byte_slice_shift_1(sload(slot), prepare_store_bool(convertedValue)))\n            }\n            /// @ast-id 404 @src 0:6788:7162  \"function raiseDispute(uint256 serviceId, uint256 purchaseId) external {...\"\n            function fun_raiseDispute(var_serviceId, var_purchaseId)\n            {\n                /// @src 0:6889:6898  \"purchases\"\n                let _87_slot := 0x03\n                let expr_364_slot := _87_slot\n                /// @src 0:6899:6908  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 0:6889:6909  \"purchases[serviceId]\"\n                let _2 := mapping_index_access_mapping_uint256_mapping_uint256_struct_Purchase_storage_of_uint256(expr_364_slot, expr)\n                let _90_slot := _2\n                let expr_366_slot := _90_slot\n                /// @src 0:6910:6920  \"purchaseId\"\n                let _3 := var_purchaseId\n                let expr_1 := _3\n                /// @src 0:6889:6921  \"purchases[serviceId][purchaseId]\"\n                let _4 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_366_slot, expr_1)\n                let _93_slot := _4\n                let expr_368_slot := _93_slot\n                /// @src 0:6868:6921  \"Purchase storage p = purchases[serviceId][purchaseId]\"\n                let var_p_363_slot := convert_struct_Purchase_storage_to_struct_Purchase_ptr(expr_368_slot)\n                /// @src 0:6939:6949  \"msg.sender\"\n                let expr_2 := caller()\n                /// @src 0:6953:6954  \"p\"\n                let _94_slot := var_p_363_slot\n                let expr_373_slot := _94_slot\n                /// @src 0:6953:6960  \"p.buyer\"\n                let _5 := add(expr_373_slot, 0)\n                let _6 := read_from_storage_split_offset_address(_5)\n                let expr_3 := _6\n                /// @src 0:6939:6960  \"msg.sender == p.buyer\"\n                let expr_4 := eq(cleanup_address(expr_2), cleanup_address(expr_3))\n                /// @src 0:6931:6974  \"require(msg.sender == p.buyer, \\\"not buyer\\\")\"\n                require_helper_stringliteral_7d2d(expr_4)\n                /// @src 0:6992:6993  \"p\"\n                let _97_slot := var_p_363_slot\n                let expr_380_slot := _97_slot\n                /// @src 0:6992:7003  \"p.delivered\"\n                let _7 := add(expr_380_slot, 2)\n                let _8 := read_from_storage_split_offset_t_bool(_7)\n                let expr_5 := _8\n                /// @src 0:6984:7025  \"require(p.delivered, \\\"not delivered yet\\\")\"\n                require_helper_stringliteral_f35c(expr_5)\n                /// @src 0:7044:7045  \"p\"\n                let _100_slot := var_p_363_slot\n                let expr_386_slot := _100_slot\n                /// @src 0:7044:7054  \"p.disputed\"\n                let _9 := add(expr_386_slot, 2)\n                let _10 := read_from_storage_split_offset_bool(_9)\n                let expr_6 := _10\n                /// @src 0:7043:7054  \"!p.disputed\"\n                let expr_7 := cleanup_bool(iszero(expr_6))\n                /// @src 0:7035:7075  \"require(!p.disputed, \\\"already disputed\\\")\"\n                require_helper_stringliteral_d6de(expr_7)\n                /// @src 0:7099:7103  \"true\"\n                let expr_8 := 0x01\n                /// @src 0:7086:7087  \"p\"\n                let _103_slot := var_p_363_slot\n                let expr_392_slot := _103_slot\n                /// @src 0:7086:7096  \"p.disputed\"\n                let _11 := add(expr_392_slot, 2)\n                /// @src 0:7086:7103  \"p.disputed = true\"\n                update_storage_value_offset_t_bool_to_t_bool(_11, expr_8)\n                /// @src 0:7133:7142  \"serviceId\"\n                let _12 := var_serviceId\n                let expr_9 := _12\n                /// @src 0:7144:7154  \"purchaseId\"\n                let _13 := var_purchaseId\n                let expr_10 := _13\n                /// @src 0:7119:7155  \"DisputeRaised(serviceId, purchaseId)\"\n                let _14 := 0x1954f0ea9e3f5fbdc693320e038db1549f419ae5351b74d36cee7c9ef13dd2b6\n                let _15 := convert_uint256_to_uint256(expr_9)\n                let _16 := convert_uint256_to_uint256(expr_10)\n                let _17 := allocate_unbounded()\n                let _18 := abi_encode_tuple(_17)\n                log3(_17, sub(_18, _17), _14, _15, _16)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function store_literal_in_memory_e47dd74d3dec6073032d2947860a6d59251a411fea3b4cc7f146be40dd3778ad(memPtr)\n            {\n                mstore(add(memPtr, 0), \"no value\")\n            }\n            function abi_encode_stringliteral_e47dd74d3dec6073032d2947860a6d59251a411fea3b4cc7f146be40dd3778ad(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 8)\n                store_literal_in_memory_e47dd74d3dec6073032d2947860a6d59251a411fea3b4cc7f146be40dd3778ad(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_e47d(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_e47dd74d3dec6073032d2947860a6d59251a411fea3b4cc7f146be40dd3778ad(tail)\n            }\n            function require_helper_stringliteral_e47d(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_e47d(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function checked_add_uint256(x, y) -> sum\n            {\n                x := cleanup_uint256(x)\n                y := cleanup_uint256(y)\n                sum := add(x, y)\n                if gt(x, sum) { panic_error_0x11() }\n            }\n            /// @ast-id 529 @src 0:8314:8553  \"function topUpStake(uint256 serviceId) external payable {...\"\n            function fun_topUpStake(var_serviceId)\n            {\n                /// @src 0:8400:8408  \"services\"\n                let _112_slot := 0x02\n                let expr_500_slot := _112_slot\n                /// @src 0:8409:8418  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 0:8400:8419  \"services[serviceId]\"\n                let _2 := mapping_index_access_mapping_uint256_struct_Service_storage_of_uint256(expr_500_slot, expr)\n                let _115_slot := _2\n                let expr_502_slot := _115_slot\n                /// @src 0:8380:8419  \"Service storage s = services[serviceId]\"\n                let var_s_499_slot := convert_struct_Service_storage_to_struct_Service_ptr(expr_502_slot)\n                /// @src 0:8437:8447  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:8451:8452  \"s\"\n                let _116_slot := var_s_499_slot\n                let expr_507_slot := _116_slot\n                /// @src 0:8451:8458  \"s.owner\"\n                let _3 := add(expr_507_slot, 0)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_2 := _4\n                /// @src 0:8437:8458  \"msg.sender == s.owner\"\n                let expr_3 := eq(cleanup_address(expr_1), cleanup_address(expr_2))\n                /// @src 0:8429:8472  \"require(msg.sender == s.owner, \\\"not owner\\\")\"\n                require_helper_stringliteral_f288(expr_3)\n                /// @src 0:8490:8499  \"msg.value\"\n                let expr_4 := callvalue()\n                /// @src 0:8502:8503  \"0\"\n                let expr_5 := 0x00\n                /// @src 0:8490:8503  \"msg.value > 0\"\n                let expr_6 := gt(cleanup_uint256(expr_4), convert_t_rational_by_to_t_uint256(expr_5))\n                /// @src 0:8482:8516  \"require(msg.value > 0, \\\"no value\\\")\"\n                require_helper_stringliteral_e47d(expr_6)\n                /// @src 0:8537:8546  \"msg.value\"\n                let expr_7 := callvalue()\n                /// @src 0:8526:8527  \"s\"\n                let _119_slot := var_s_499_slot\n                let expr_521_slot := _119_slot\n                /// @src 0:8526:8533  \"s.stake\"\n                let _5 := add(expr_521_slot, 3)\n                /// @src 0:8526:8546  \"s.stake += msg.value\"\n                let _6 := read_from_storage_split_offset_uint256(_5)\n                let expr_8 := checked_add_uint256(_6, expr_7)\n                update_storage_value_offset_uint256_to_uint256(_5, expr_8)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function zero_value_for_split_uint256() -> ret\n            { ret := 0 }\n            function store_literal_in_memory_b012239bb341fc3aa6e36817a7c10c262bcbc141e99583a4906f137d1c73446e(memPtr)\n            {\n                mstore(add(memPtr, 0), \"price = 0\")\n            }\n            function abi_encode_stringliteral_b012(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 9)\n                store_literal_in_memory_b012239bb341fc3aa6e36817a7c10c262bcbc141e99583a4906f137d1c73446e(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_tuple_stringliteral_b012(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_b012(tail)\n            }\n            function require_helper_stringliteral_b012(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_tuple_stringliteral_b012(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function convert_array_string_calldata_to_bytes_calldata(value, length) -> converted, outLength\n            {\n                converted := value\n                outLength := length\n            }\n            function array_length_bytes_calldata(value, len) -> length\n            { length := len }\n            function store_literal_in_memory_d55a6ddb4b4b2c07556d9759db900c1c4b9b9be9b3a43d353ca3b76560b42cb0(memPtr)\n            {\n                mstore(add(memPtr, 0), \"gateway empty\")\n            }\n            function abi_encode_stringliteral_d55a6ddb4b4b2c07556d9759db900c1c4b9b9be9b3a43d353ca3b76560b42cb0(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 13)\n                store_literal_in_memory_d55a6ddb4b4b2c07556d9759db900c1c4b9b9be9b3a43d353ca3b76560b42cb0(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_d55a(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_d55a6ddb4b4b2c07556d9759db900c1c4b9b9be9b3a43d353ca3b76560b42cb0(tail)\n            }\n            function require_helper_stringliteral_d55a(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_d55a(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_75bada284880e1d4595f86322984b565973726c9e2d576dc7097327aebdaf519(memPtr)\n            {\n                mstore(add(memPtr, 0), \"stake < price\")\n            }\n            function abi_encode_stringliteral_75bada284880e1d4595f86322984b565973726c9e2d576dc7097327aebdaf519(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 13)\n                store_literal_in_memory_75bada284880e1d4595f86322984b565973726c9e2d576dc7097327aebdaf519(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_75ba(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_75bada284880e1d4595f86322984b565973726c9e2d576dc7097327aebdaf519(tail)\n            }\n            function require_helper_stringliteral_75ba(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_75ba(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function increment_uint256(value) -> ret\n            {\n                value := cleanup_uint256(value)\n                if eq(value, not(0)) { panic_error_0x11() }\n                ret := add(value, 1)\n            }\n            function allocate_memory(size) -> memPtr\n            {\n                memPtr := allocate_unbounded()\n                finalize_allocation(memPtr, size)\n            }\n            function allocate_memory_struct_struct_Service_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(160)\n            }\n            function write_to_memory_address(memPtr, value)\n            {\n                mstore(memPtr, cleanup_address(value))\n            }\n            function write_to_memory_uint256(memPtr, value)\n            {\n                mstore(memPtr, cleanup_uint256(value))\n            }\n            function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n            { revert(0, 0) }\n            function array_allocation_size_string(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function copy_calldata_to_memory_with_cleanup(src, dst, length)\n            {\n                calldatacopy(dst, src, length)\n                mstore(add(dst, length), 0)\n            }\n            function abi_decode_available_length_string(src, length, end) -> array\n            {\n                array := allocate_memory(array_allocation_size_string(length))\n                mstore(array, length)\n                let dst := add(array, 0x20)\n                if gt(add(src, length), end)\n                {\n                    revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae()\n                }\n                copy_calldata_to_memory_with_cleanup(src, dst, length)\n            }\n            function convert_array_string_calldata_to_string(value, length) -> converted\n            {\n                converted := abi_decode_available_length_string(value, length, calldatasize())\n            }\n            function write_to_memory_string(memPtr, value)\n            { mstore(memPtr, value) }\n            function write_to_memory_bool(memPtr, value)\n            {\n                mstore(memPtr, cleanup_bool(value))\n            }\n            function read_from_memoryt_address(ptr) -> returnValue\n            {\n                let value := cleanup_address(mload(ptr))\n                returnValue := value\n            }\n            function update_byte_slice_20_shift(value, toInsert) -> result\n            {\n                let mask := sub(shl(160, 1), 1)\n                toInsert := shift_left_0(toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function convert_uint160_to_uint160(value) -> converted\n            {\n                converted := cleanup_uint160(identity(cleanup_uint160(value)))\n            }\n            function convert_uint160_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_uint160(value)\n            }\n            function convert_address_to_address(value) -> converted\n            {\n                converted := convert_uint160_to_address(value)\n            }\n            function prepare_store_address(value) -> ret\n            { ret := value }\n            function update_storage_value_offset_address_to_address(slot, value)\n            {\n                let convertedValue := convert_address_to_address(value)\n                sstore(slot, update_byte_slice_20_shift(sload(slot), prepare_store_address(convertedValue)))\n            }\n            function read_from_memoryt_uint256(ptr) -> returnValue\n            {\n                let value := cleanup_uint256(mload(ptr))\n                returnValue := value\n            }\n            function read_from_memoryt_string(memPtr) -> value\n            { value := mload(memPtr) }\n            function divide_by_ceil(value) -> result\n            {\n                result := div(add(value, 31), 32)\n            }\n            function shift_left_dynamic(bits, value) -> newValue\n            { newValue := shl(bits, value) }\n            function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result\n            {\n                let shiftBits := mul(shiftBytes, 8)\n                let mask := shift_left_dynamic(shiftBits, not(0))\n                toInsert := shift_left_dynamic(shiftBits, toInsert)\n                value := and(value, not(mask))\n                result := or(value, and(toInsert, mask))\n            }\n            function update_storage_value_uint256_to_uint256(slot, offset, value)\n            {\n                let convertedValue := convert_uint256_to_uint256(value)\n                sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_uint256(convertedValue)))\n            }\n            function storage_set_to_zero_uint256(slot, offset)\n            {\n                let zero := zero_value_for_split_uint256()\n                update_storage_value_uint256_to_uint256(slot, offset, zero)\n            }\n            function clear_storage_range_bytes1(start, end)\n            {\n                for { } lt(start, end) { start := add(start, 1) }\n                {\n                    storage_set_to_zero_uint256(start, 0)\n                }\n            }\n            function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n            {\n                if gt(len, 31)\n                {\n                    let dataArea := array_dataslot_string_storage(array)\n                    let deleteStart := add(dataArea, divide_by_ceil(startIndex))\n                    if lt(startIndex, 32) { deleteStart := dataArea }\n                    clear_storage_range_bytes1(deleteStart, add(dataArea, divide_by_ceil(len)))\n                }\n            }\n            function mask_bytes_dynamic(data, bytes) -> result\n            {\n                let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n                result := and(data, mask)\n            }\n            function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n            {\n                data := mask_bytes_dynamic(data, len)\n                used := or(data, mul(2, len))\n            }\n            function copy_byte_array_to_storage_from_string_to_string(slot, src)\n            {\n                let newLen := array_length_string(src)\n                if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n                let oldLen := extract_byte_array_length(sload(slot))\n                clean_up_bytearray_end_slots_string_storage(slot, oldLen, newLen)\n                let srcOffset := 0\n                srcOffset := 0x20\n                switch gt(newLen, 31)\n                case 1 {\n                    let loopEnd := and(newLen, not(0x1f))\n                    let dstPtr := array_dataslot_string_storage(slot)\n                    let i := 0\n                    for { } lt(i, loopEnd) { i := add(i, 0x20) }\n                    {\n                        sstore(dstPtr, mload(add(src, srcOffset)))\n                        dstPtr := add(dstPtr, 1)\n                        srcOffset := add(srcOffset, 32)\n                    }\n                    if lt(loopEnd, newLen)\n                    {\n                        let lastValue := mload(add(src, srcOffset))\n                        sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n                    }\n                    sstore(slot, add(mul(newLen, 2), 1))\n                }\n                default {\n                    let value := 0\n                    if newLen\n                    {\n                        value := mload(add(src, srcOffset))\n                    }\n                    sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n                }\n            }\n            function update_storage_value_offset_string_to_string(slot, value)\n            {\n                copy_byte_array_to_storage_from_string_to_string(slot, value)\n            }\n            function read_from_memoryt_bool(ptr) -> returnValue\n            {\n                let value := cleanup_bool(mload(ptr))\n                returnValue := value\n            }\n            function copy_struct_to_storage_from_struct_Service_to_struct_Service(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_string(memberSrcPtr_2)\n                update_storage_value_offset_string_to_string(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 3)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_uint256(memberSrcPtr_3)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_3, memberValue_3)\n                let memberSlot_4 := add(slot, 4)\n                let memberSrcPtr_4 := add(value, 128)\n                let memberValue_4 := read_from_memoryt_bool(memberSrcPtr_4)\n                update_storage_value_offset_bool_to_bool(memberSlot_4, memberValue_4)\n            }\n            function update_storage_value_offset_struct_Service_to_struct_Service(slot, value)\n            {\n                copy_struct_to_storage_from_struct_Service_to_struct_Service(slot, value)\n            }\n            function abi_encode_string_calldata(start, length, pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, length)\n                copy_calldata_to_memory_with_cleanup(start, pos, length)\n                end := add(pos, round_up_to_mul_of(length))\n            }\n            function abi_encode_uint256_uint256_string_calldata(headStart, value0, value1, value2, value3) -> tail\n            {\n                tail := add(headStart, 96)\n                abi_encode_uint256_to_uint256(value0, add(headStart, 0))\n                abi_encode_uint256_to_uint256(value1, add(headStart, 32))\n                mstore(add(headStart, 64), sub(tail, headStart))\n                tail := abi_encode_string_calldata(value2, value3, tail)\n            }\n            /// @ast-id 219 @src 0:4679:5262  \"function createService(uint256 price, string calldata gateway) external payable returns (uint256 serviceId) {...\"\n            function fun_createService(var_price, var_gateway_offset, var_gateway_length) -> var_serviceId\n            {\n                /// @src 0:4768:4785  \"uint256 serviceId\"\n                let zero_t_uint256 := zero_value_for_split_uint256()\n                var_serviceId := zero_t_uint256\n                /// @src 0:4805:4810  \"price\"\n                let _1 := var_price\n                let expr := _1\n                /// @src 0:4813:4814  \"0\"\n                let expr_1 := 0x00\n                /// @src 0:4805:4814  \"price > 0\"\n                let expr_2 := gt(cleanup_uint256(expr), convert_t_rational_by_to_t_uint256(expr_1))\n                /// @src 0:4797:4828  \"require(price > 0, \\\"price = 0\\\")\"\n                require_helper_stringliteral_b012(expr_2)\n                /// @src 0:4852:4859  \"gateway\"\n                let _124_offset := var_gateway_offset\n                let _124_length := var_gateway_length\n                let expr_offset := _124_offset\n                let expr_173_length := _124_length\n                /// @src 0:4846:4860  \"bytes(gateway)\"\n                let expr_174_offset, expr_174_length := convert_array_string_calldata_to_bytes_calldata(expr_offset, expr_173_length)\n                /// @src 0:4846:4867  \"bytes(gateway).length\"\n                let expr_3 := array_length_bytes_calldata(expr_174_offset, expr_174_length)\n                /// @src 0:4870:4871  \"0\"\n                let expr_4 := 0x00\n                /// @src 0:4846:4871  \"bytes(gateway).length > 0\"\n                let expr_5 := gt(cleanup_uint256(expr_3), convert_t_rational_by_to_t_uint256(expr_4))\n                /// @src 0:4838:4889  \"require(bytes(gateway).length > 0, \\\"gateway empty\\\")\"\n                require_helper_stringliteral_d55a(expr_5)\n                /// @src 0:4907:4916  \"msg.value\"\n                let expr_6 := callvalue()\n                /// @src 0:4920:4925  \"price\"\n                let _2 := var_price\n                let expr_7 := _2\n                /// @src 0:4907:4925  \"msg.value >= price\"\n                let expr_8 := iszero(lt(cleanup_uint256(expr_6), cleanup_uint256(expr_7)))\n                /// @src 0:4899:4943  \"require(msg.value >= price, \\\"stake < price\\\")\"\n                require_helper_stringliteral_75ba(expr_8)\n                /// @src 0:4966:4981  \"nextServiceId++\"\n                let _3 := read_from_storage_split_offset_uint256(0x00)\n                let _4 := increment_uint256(_3)\n                update_storage_value_offset_uint256_to_uint256(0x00, _4)\n                let expr_9 := _3\n                /// @src 0:4954:4981  \"serviceId = nextServiceId++\"\n                var_serviceId := expr_9\n                /// @src 0:5042:5052  \"msg.sender\"\n                let expr_10 := caller()\n                /// @src 0:5073:5078  \"price\"\n                let _5 := var_price\n                let expr_11 := _5\n                /// @src 0:5101:5108  \"gateway\"\n                let _offset := var_gateway_offset\n                let _129_length := var_gateway_length\n                let expr_201_offset := _offset\n                let expr_201_length := _129_length\n                /// @src 0:5129:5138  \"msg.value\"\n                let expr_12 := callvalue()\n                /// @src 0:5160:5164  \"true\"\n                let expr_13 := 0x01\n                /// @src 0:5013:5175  \"Service({...\"\n                let expr_mpos := allocate_memory_struct_struct_Service_storage_ptr()\n                write_to_memory_address(add(expr_mpos, 0), expr_10)\n                write_to_memory_uint256(add(expr_mpos, 32), expr_11)\n                let _mpos := convert_array_string_calldata_to_string(expr_201_offset, expr_201_length)\n                write_to_memory_string(add(expr_mpos, 64), _mpos)\n                write_to_memory_uint256(add(expr_mpos, 96), expr_12)\n                write_to_memory_bool(add(expr_mpos, 128), expr_13)\n                /// @src 0:4991:4999  \"services\"\n                let _131_slot := 0x02\n                let expr_194_slot := _131_slot\n                /// @src 0:5000:5009  \"serviceId\"\n                let _6 := var_serviceId\n                let expr_14 := _6\n                /// @src 0:4991:5010  \"services[serviceId]\"\n                let _7 := mapping_index_access_mapping_uint256_struct_Service_storage_of_uint256(expr_194_slot, expr_14)\n                /// @src 0:4991:5175  \"services[serviceId] = Service({...\"\n                update_storage_value_offset_struct_Service_to_struct_Service(_7, expr_mpos)\n                /// @src 0:5206:5215  \"serviceId\"\n                let _8 := var_serviceId\n                let expr_15 := _8\n                /// @src 0:5217:5227  \"msg.sender\"\n                let expr_16 := caller()\n                /// @src 0:5229:5234  \"price\"\n                let _9 := var_price\n                let expr_17 := _9\n                /// @src 0:5236:5245  \"msg.value\"\n                let expr_18 := callvalue()\n                /// @src 0:5247:5254  \"gateway\"\n                let _137_offset := var_gateway_offset\n                let _length := var_gateway_length\n                let expr_215_offset := _137_offset\n                let expr_length := _length\n                /// @src 0:5191:5255  \"ServiceCreated(serviceId, msg.sender, price, msg.value, gateway)\"\n                let _10 := 0xe52b4cac100a9ec9e8218c236c0428efde70f39f09110bd4149a4b229b339ca7\n                let _11 := convert_uint256_to_uint256(expr_15)\n                let _12 := convert_address_to_address(expr_16)\n                let _13 := allocate_unbounded()\n                let _14 := abi_encode_uint256_uint256_string_calldata(_13, expr_17, expr_18, expr_215_offset, expr_length)\n                log3(_13, sub(_14, _13), _10, _11, _12)\n            }\n            /// @ast-id 67 @src 0:2797:2920  \"modifier lock() {...\"\n            function modifier_lock_225(var_purchaseId, var_serviceId) -> _1\n            {\n                _1 := var_purchaseId\n                /// @src 0:2831:2840  \"_unlocked\"\n                let _2 := read_from_storage_split_offset_uint256(0x04)\n                let expr := _2\n                /// @src 0:2844:2845  \"1\"\n                let expr_1 := 0x01\n                /// @src 0:2831:2845  \"_unlocked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:2823:2856  \"require(_unlocked == 1, \\\"LOCKED\\\")\"\n                require_helper_stringliteral_eb4a(expr_2)\n                /// @src 0:2878:2879  \"0\"\n                let expr_3 := 0x00\n                /// @src 0:2866:2879  \"_unlocked = 0\"\n                let _3 := convert_t_rational_by_to_t_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x04, _3)\n                /// @src 0:2889:2890  \"_\"\n                _1 := fun_buyService_inner(var_purchaseId, var_serviceId)\n                /// @src 0:2912:2913  \"1\"\n                let expr_4 := 0x01\n                /// @src 0:2900:2913  \"_unlocked = 1\"\n                let _4 := convert_rational_by_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x04, _4)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function store_literal_in_memory_356250a37e7b79ef3e2fe3277f6474c0525db5da262fe508599c7b0d71c99b35(memPtr)\n            {\n                mstore(add(memPtr, 0), \"inactive\")\n            }\n            function abi_encode_stringliteral_356250a37e7b79ef3e2fe3277f6474c0525db5da262fe508599c7b0d71c99b35(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 8)\n                store_literal_in_memory_356250a37e7b79ef3e2fe3277f6474c0525db5da262fe508599c7b0d71c99b35(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_356250a37e7b79ef3e2fe3277f6474c0525db5da262fe508599c7b0d71c99b35(tail)\n            }\n            function require_helper_stringliteral(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function store_literal_in_memory_3ff52a90b3b8231ec9d74666d7041d38cdee4c38c09ac2f4d22016a00aabab27(memPtr)\n            {\n                mstore(add(memPtr, 0), \"wrong amount\")\n            }\n            function abi_encode_stringliteral_3ff52a90b3b8231ec9d74666d7041d38cdee4c38c09ac2f4d22016a00aabab27(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 12)\n                store_literal_in_memory_3ff52a90b3b8231ec9d74666d7041d38cdee4c38c09ac2f4d22016a00aabab27(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_3ff5(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_3ff52a90b3b8231ec9d74666d7041d38cdee4c38c09ac2f4d22016a00aabab27(tail)\n            }\n            function require_helper_stringliteral_3ff5(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_3ff5(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            function allocate_memory_struct_struct_Purchase_storage_ptr() -> memPtr\n            {\n                memPtr := allocate_memory(160)\n            }\n            function copy_struct_to_storage_from_struct_Purchase_to_struct_Purchase(slot, value)\n            {\n                let memberSlot := add(slot, 0)\n                let memberSrcPtr := add(value, 0)\n                let memberValue := read_from_memoryt_address(memberSrcPtr)\n                update_storage_value_offset_address_to_address(memberSlot, memberValue)\n                let memberSlot_1 := add(slot, 1)\n                let memberSrcPtr_1 := add(value, 32)\n                let memberValue_1 := read_from_memoryt_uint256(memberSrcPtr_1)\n                update_storage_value_offset_uint256_to_uint256(memberSlot_1, memberValue_1)\n                let memberSlot_2 := add(slot, 2)\n                let memberSrcPtr_2 := add(value, 64)\n                let memberValue_2 := read_from_memoryt_bool(memberSrcPtr_2)\n                update_storage_value_offset_bool_to_bool(memberSlot_2, memberValue_2)\n                let memberSlot_3 := add(slot, 2)\n                let memberSrcPtr_3 := add(value, 96)\n                let memberValue_3 := read_from_memoryt_bool(memberSrcPtr_3)\n                update_storage_value_offset_t_bool_to_t_bool(memberSlot_3, memberValue_3)\n                let memberSlot_4 := add(slot, 2)\n                let memberSrcPtr_4 := add(value, 128)\n                let memberValue_4 := read_from_memoryt_bool(memberSrcPtr_4)\n                update_storage_value_offset_2_bool_to_bool(memberSlot_4, memberValue_4)\n            }\n            function update_storage_value_offset_struct_Purchase_to_struct_Purchase(slot, value)\n            {\n                copy_struct_to_storage_from_struct_Purchase_to_struct_Purchase(slot, value)\n            }\n            /// @src 0:5434:6018  \"function buyService(uint256 serviceId) external payable lock returns (uint256 purchaseId) {...\"\n            function fun_buyService_inner(_1, var_serviceId) -> var_purchaseId\n            {\n                var_purchaseId := _1\n                /// @src 0:5554:5562  \"services\"\n                let _149_slot := 0x02\n                let expr_232_slot := _149_slot\n                /// @src 0:5563:5572  \"serviceId\"\n                let _2 := var_serviceId\n                let expr := _2\n                /// @src 0:5554:5573  \"services[serviceId]\"\n                let _3 := mapping_index_access_mapping_uint256_struct_Service_storage_of_uint256(expr_232_slot, expr)\n                let _152_slot := _3\n                let expr_234_slot := _152_slot\n                /// @src 0:5534:5573  \"Service storage s = services[serviceId]\"\n                let var_s_231_slot := convert_struct_Service_storage_to_struct_Service_ptr(expr_234_slot)\n                /// @src 0:5591:5592  \"s\"\n                let _153_slot := var_s_231_slot\n                let expr_237_slot := _153_slot\n                /// @src 0:5591:5599  \"s.active\"\n                let _4 := add(expr_237_slot, 4)\n                let _5 := read_from_storage_split_offset_t_bool(_4)\n                let expr_1 := _5\n                /// @src 0:5583:5612  \"require(s.active, \\\"inactive\\\")\"\n                require_helper_stringliteral(expr_1)\n                /// @src 0:5630:5639  \"msg.value\"\n                let expr_2 := callvalue()\n                /// @src 0:5643:5644  \"s\"\n                let _156_slot := var_s_231_slot\n                let expr_245_slot := _156_slot\n                /// @src 0:5643:5650  \"s.price\"\n                let _6 := add(expr_245_slot, 1)\n                let _7 := read_from_storage_split_offset_uint256(_6)\n                let expr_3 := _7\n                /// @src 0:5630:5650  \"msg.value == s.price\"\n                let expr_4 := eq(cleanup_uint256(expr_2), cleanup_uint256(expr_3))\n                /// @src 0:5622:5667  \"require(msg.value == s.price, \\\"wrong amount\\\")\"\n                require_helper_stringliteral_3ff5(expr_4)\n                /// @src 0:5691:5705  \"nextPurchaseId\"\n                let _159_slot := 0x01\n                let expr_252_slot := _159_slot\n                /// @src 0:5706:5715  \"serviceId\"\n                let _8 := var_serviceId\n                let expr_5 := _8\n                /// @src 0:5691:5716  \"nextPurchaseId[serviceId]\"\n                let _9 := mapping_index_access_mapping_uint256_uint256_of_uint256(expr_252_slot, expr_5)\n                /// @src 0:5691:5718  \"nextPurchaseId[serviceId]++\"\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let _11 := increment_uint256(_10)\n                update_storage_value_offset_uint256_to_uint256(_9, _11)\n                let expr_6 := _10\n                /// @src 0:5678:5718  \"purchaseId = nextPurchaseId[serviceId]++\"\n                var_purchaseId := expr_6\n                /// @src 0:5793:5803  \"msg.sender\"\n                let expr_7 := caller()\n                /// @src 0:5825:5834  \"msg.value\"\n                let expr_8 := callvalue()\n                /// @src 0:5859:5864  \"false\"\n                let expr_9 := 0x00\n                /// @src 0:5888:5893  \"false\"\n                let expr_10 := 0x00\n                /// @src 0:5917:5922  \"false\"\n                let expr_11 := 0x00\n                /// @src 0:5763:5933  \"Purchase({...\"\n                let expr_271_mpos := allocate_memory_struct_struct_Purchase_storage_ptr()\n                write_to_memory_address(add(expr_271_mpos, 0), expr_7)\n                write_to_memory_uint256(add(expr_271_mpos, 32), expr_8)\n                write_to_memory_bool(add(expr_271_mpos, 64), expr_9)\n                write_to_memory_bool(add(expr_271_mpos, 96), expr_10)\n                write_to_memory_bool(add(expr_271_mpos, 128), expr_11)\n                /// @src 0:5728:5737  \"purchases\"\n                let _164_slot := 0x03\n                let expr_258_slot := _164_slot\n                /// @src 0:5738:5747  \"serviceId\"\n                let _12 := var_serviceId\n                let expr_12 := _12\n                /// @src 0:5728:5748  \"purchases[serviceId]\"\n                let _13 := mapping_index_access_mapping_uint256_mapping_uint256_struct_Purchase_storage_of_uint256(expr_258_slot, expr_12)\n                let _167_slot := _13\n                let expr_261_slot := _167_slot\n                /// @src 0:5749:5759  \"purchaseId\"\n                let _14 := var_purchaseId\n                let expr_13 := _14\n                /// @src 0:5728:5760  \"purchases[serviceId][purchaseId]\"\n                let _15 := mapping_index_access_mapping_uint256_struct_Purchase_storage_of_uint256(expr_261_slot, expr_13)\n                /// @src 0:5728:5933  \"purchases[serviceId][purchaseId] = Purchase({...\"\n                update_storage_value_offset_struct_Purchase_to_struct_Purchase(_15, expr_271_mpos)\n                /// @src 0:5966:5975  \"serviceId\"\n                let _16 := var_serviceId\n                let expr_14 := _16\n                /// @src 0:5977:5987  \"purchaseId\"\n                let _17 := var_purchaseId\n                let expr_15 := _17\n                /// @src 0:5989:5999  \"msg.sender\"\n                let expr_16 := caller()\n                /// @src 0:6001:6010  \"msg.value\"\n                let expr_17 := callvalue()\n                /// @src 0:5949:6011  \"ServicePurchased(serviceId, purchaseId, msg.sender, msg.value)\"\n                let _18 := 0xe481f81086d7f3247fa6ccef833a2a621b37635cf6040bf67ebaa15e196fcafc\n                let _19 := convert_uint256_to_uint256(expr_14)\n                let _20 := convert_uint256_to_uint256(expr_15)\n                let _21 := convert_address_to_address(expr_16)\n                let _22 := allocate_unbounded()\n                let _23 := abi_encode_uint256(_22, expr_17)\n                log4(_22, sub(_23, _22), _18, _19, _20, _21)\n            }\n            /// @ast-id 284 @src 0:5434:6018  \"function buyService(uint256 serviceId) external payable lock returns (uint256 purchaseId) {...\"\n            function fun_buyService(var_serviceId) -> var_purchaseId\n            {\n                /// @src 0:5504:5522  \"uint256 purchaseId\"\n                let zero_uint256 := zero_value_for_split_uint256()\n                var_purchaseId := zero_uint256\n                var_purchaseId := modifier_lock_225(var_purchaseId, var_serviceId)\n            }\n            /// @ast-id 67 @src 0:2797:2920  \"modifier lock() {...\"\n            function modifier_lock_537(var_serviceId, var_amount)\n            {\n                /// @src 0:2831:2840  \"_unlocked\"\n                let _1 := read_from_storage_split_offset_uint256(0x04)\n                let expr := _1\n                /// @src 0:2844:2845  \"1\"\n                let expr_1 := 0x01\n                /// @src 0:2831:2845  \"_unlocked == 1\"\n                let expr_2 := eq(cleanup_uint256(expr), convert_rational_by_to_uint256(expr_1))\n                /// @src 0:2823:2856  \"require(_unlocked == 1, \\\"LOCKED\\\")\"\n                require_helper_stringliteral_eb4a(expr_2)\n                /// @src 0:2878:2879  \"0\"\n                let expr_3 := 0x00\n                /// @src 0:2866:2879  \"_unlocked = 0\"\n                let _2 := convert_t_rational_by_to_t_uint256(expr_3)\n                update_storage_value_offset_uint256_to_uint256(0x04, _2)\n                /// @src 0:2889:2890  \"_\"\n                fun_withdrawStake_inner(var_serviceId, var_amount)\n                /// @src 0:2912:2913  \"1\"\n                let expr_4 := 0x01\n                /// @src 0:2900:2913  \"_unlocked = 1\"\n                let _3 := convert_rational_by_to_uint256(expr_4)\n                update_storage_value_offset_uint256_to_uint256(0x04, _3)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function store_literal_in_memory_a47afe8971c9970f106e0998d552a4722cb904bdb4f28cc25fd57f86ca9ec8d5(memPtr)\n            {\n                mstore(add(memPtr, 0), \"overdraw\")\n            }\n            function abi_encode_stringliteral_a47afe8971c9970f106e0998d552a4722cb904bdb4f28cc25fd57f86ca9ec8d5(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 8)\n                store_literal_in_memory_a47afe8971c9970f106e0998d552a4722cb904bdb4f28cc25fd57f86ca9ec8d5(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_a47a(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_a47afe8971c9970f106e0998d552a4722cb904bdb4f28cc25fd57f86ca9ec8d5(tail)\n            }\n            function require_helper_stringliteral_a47a(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_a47a(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @src 0:8640:8932  \"function withdrawStake(uint256 serviceId, uint256 amount) external lock {...\"\n            function fun_withdrawStake_inner(var_serviceId, var_amount)\n            {\n                /// @src 0:8742:8750  \"services\"\n                let _182_slot := 0x02\n                let expr_542_slot := _182_slot\n                /// @src 0:8751:8760  \"serviceId\"\n                let _1 := var_serviceId\n                let expr := _1\n                /// @src 0:8742:8761  \"services[serviceId]\"\n                let _2 := mapping_index_access_mapping_uint256_struct_Service_storage_of_uint256(expr_542_slot, expr)\n                let _185_slot := _2\n                let expr_544_slot := _185_slot\n                /// @src 0:8722:8761  \"Service storage s = services[serviceId]\"\n                let var_s_541_slot := convert_struct_Service_storage_to_struct_Service_ptr(expr_544_slot)\n                /// @src 0:8779:8789  \"msg.sender\"\n                let expr_1 := caller()\n                /// @src 0:8793:8794  \"s\"\n                let _186_slot := var_s_541_slot\n                let expr_549_slot := _186_slot\n                /// @src 0:8793:8800  \"s.owner\"\n                let _3 := add(expr_549_slot, 0)\n                let _4 := read_from_storage_split_offset_address(_3)\n                let expr_2 := _4\n                /// @src 0:8779:8800  \"msg.sender == s.owner\"\n                let expr_3 := eq(cleanup_address(expr_1), cleanup_address(expr_2))\n                /// @src 0:8771:8814  \"require(msg.sender == s.owner, \\\"not owner\\\")\"\n                require_helper_stringliteral_f288(expr_3)\n                /// @src 0:8832:8838  \"amount\"\n                let _5 := var_amount\n                let expr_4 := _5\n                /// @src 0:8842:8843  \"s\"\n                let _190_slot := var_s_541_slot\n                let expr_557_slot := _190_slot\n                /// @src 0:8842:8849  \"s.stake\"\n                let _6 := add(expr_557_slot, 3)\n                let _7 := read_from_storage_split_offset_uint256(_6)\n                let expr_5 := _7\n                /// @src 0:8832:8849  \"amount <= s.stake\"\n                let expr_6 := iszero(gt(cleanup_uint256(expr_4), cleanup_uint256(expr_5)))\n                /// @src 0:8824:8862  \"require(amount <= s.stake, \\\"overdraw\\\")\"\n                require_helper_stringliteral_a47a(expr_6)\n                /// @src 0:8883:8889  \"amount\"\n                let _8 := var_amount\n                let expr_7 := _8\n                /// @src 0:8872:8873  \"s\"\n                let _194_slot := var_s_541_slot\n                let expr_563_slot := _194_slot\n                /// @src 0:8872:8879  \"s.stake\"\n                let _9 := add(expr_563_slot, 3)\n                /// @src 0:8872:8889  \"s.stake -= amount\"\n                let _10 := read_from_storage_split_offset_uint256(_9)\n                let expr_8 := checked_sub_uint256(_10, expr_7)\n                update_storage_value_offset_uint256_to_uint256(_9, expr_8)\n                /// @src 0:8909:8910  \"s\"\n                let _197_slot := var_s_541_slot\n                let expr_570_slot := _197_slot\n                /// @src 0:8909:8916  \"s.owner\"\n                let _11 := add(expr_570_slot, 0)\n                let _12 := read_from_storage_split_offset_address(_11)\n                let expr_9 := _12\n                /// @src 0:8918:8924  \"amount\"\n                let _13 := var_amount\n                let expr_10 := _13\n                fun_safeSend(expr_9, expr_10)\n            }\n            /// @ast-id 576 @src 0:8640:8932  \"function withdrawStake(uint256 serviceId, uint256 amount) external lock {...\"\n            function fun_withdrawStake(var_serviceId, var_amount)\n            {\n                modifier_lock_537(var_serviceId, var_amount)\n            }\n            /// @src 0:870:8934  \"contract EscroDot {...\"\n            function array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, length) -> updated_pos\n            { updated_pos := pos }\n            function abi_encode_stringliteral_c5d2(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_bytes_nonPadded_inplace(pos, 0)\n                end := add(pos, 0)\n            }\n            function abi_encode_packed_stringliteral_c5d2(pos) -> end\n            {\n                pos := abi_encode_stringliteral_c5d2(pos)\n                end := pos\n            }\n            function array_allocation_size_bytes(length) -> size\n            {\n                if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n                size := round_up_to_mul_of(length)\n                size := add(size, 0x20)\n            }\n            function allocate_memory_array_bytes(length) -> memPtr\n            {\n                let allocSize := array_allocation_size_bytes(length)\n                memPtr := allocate_memory(allocSize)\n                mstore(memPtr, length)\n            }\n            function zero_value_for_split_bytes() -> ret\n            { ret := 96 }\n            function extract_returndata() -> data\n            {\n                switch returndatasize()\n                case 0 {\n                    data := zero_value_for_split_bytes()\n                }\n                default {\n                    data := allocate_memory_array_bytes(returndatasize())\n                    returndatacopy(add(data, 0x20), 0, returndatasize())\n                }\n            }\n            function store_literal_in_memory_69c28b82926e5246d25e8125e137290b566a72aaf511cb63498c079ca6b63ddb(memPtr)\n            {\n                mstore(add(memPtr, 0), \"ETH_SEND_FAIL\")\n            }\n            function abi_encode_stringliteral_69c28b82926e5246d25e8125e137290b566a72aaf511cb63498c079ca6b63ddb(pos) -> end\n            {\n                pos := array_storeLengthForEncoding_string_fromStack(pos, 13)\n                store_literal_in_memory_69c28b82926e5246d25e8125e137290b566a72aaf511cb63498c079ca6b63ddb(pos)\n                end := add(pos, 32)\n            }\n            function abi_encode_stringliteral_69c2(headStart) -> tail\n            {\n                tail := add(headStart, 32)\n                mstore(add(headStart, 0), sub(tail, headStart))\n                tail := abi_encode_stringliteral_69c28b82926e5246d25e8125e137290b566a72aaf511cb63498c079ca6b63ddb(tail)\n            }\n            function require_helper_stringliteral_69c2(condition)\n            {\n                if iszero(condition)\n                {\n                    let memPtr := allocate_unbounded()\n                    mstore(memPtr, shl(229, 4594637))\n                    let end := abi_encode_stringliteral_69c2(add(memPtr, 4))\n                    revert(memPtr, sub(end, memPtr))\n                }\n            }\n            /// @ast-id 89 @src 0:2926:3077  \"function _safeSend(address to, uint256 amount) internal {...\"\n            function fun_safeSend(var_to, var_amount)\n            {\n                /// @src 0:3006:3008  \"to\"\n                let _1 := var_to\n                let expr := _1\n                /// @src 0:3006:3013  \"to.call\"\n                let expr_77_address := expr\n                /// @src 0:3021:3027  \"amount\"\n                let _2 := var_amount\n                let expr_1 := _2\n                /// @src 0:3006:3028  \"to.call{value: amount}\"\n                let expr_address := expr_77_address\n                let expr_value := expr_1\n                /// @src 0:3006:3032  \"to.call{value: amount}(\\\"\\\")\"\n                let _3 := allocate_unbounded()\n                let _4 := sub(abi_encode_packed_stringliteral_c5d2(_3), _3)\n                let expr_component := call(gas(), expr_address, expr_value, _3, _4, 0, 0)\n                pop(extract_returndata())\n                /// @src 0:2992:3032  \"(bool ok, ) = to.call{value: amount}(\\\"\\\")\"\n                let var_ok := expr_component\n                /// @src 0:3050:3052  \"ok\"\n                let _5 := var_ok\n                let expr_2 := _5\n                /// @src 0:3042:3070  \"require(ok, \\\"ETH_SEND_FAIL\\\")\"\n                require_helper_stringliteral_69c2(expr_2)\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212206222d33617577ce6435c6e9e7d40438c0acb5eb472aa98d51b9f72306b2b2b2064736f6c634300081c0033\"\n    }\n}\n",
					"hash": "56a2ac78da71e8f286bd43fb14c8cee61a233d947515b820bf59f55ca8ccf5fe",
					"factoryDependencies": {}
				}
			}
		},
		"sources": {
			"EscroDot.sol": {
				"id": 0,
				"ast": {
					"absolutePath": "EscroDot.sol",
					"exportedSymbols": {
						"EscroDot": [
							577
						]
					},
					"id": 578,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".25"
							],
							"nodeType": "PragmaDirective",
							"src": "32:24:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "EscroDot",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "58:811:0",
								"text": " @title EscroDot – minimal escrow & staking framework for AI‑agent services\n @author Mike Liu (mikelxc)\n Mechanics (v0):\n 1. Service provider stakes ETH to create a listing with a fixed price & gateway URL.\n 2. Buyer locks the payment by calling buyService().\n 3. Provider delivers off‑chain via the gateway and calls deliver() with a hash proof – ETH is released to them immediately.\n 4. Buyer may raiseDispute() within any agreed timeframe.\n 5. Arbiter resolves the dispute; on refund the buyer is compensated from the provider’s stake (slash) rather than claw‑back.\n Notes:\n • All values are in native ETH. No ERC‑20 support yet.\n • In production you’d add time‑outs, ERC‑20 support, upgradeability, and signature‑based off‑chain attestations."
							},
							"fullyImplemented": true,
							"id": 577,
							"linearizedBaseContracts": [
								577
							],
							"name": "EscroDot",
							"nameLocation": "879:8:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "EscroDot.Service",
									"id": 13,
									"members": [
										{
											"constant": false,
											"id": 4,
											"mutability": "mutable",
											"name": "owner",
											"nameLocation": "1183:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 13,
											"src": "1175:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 3,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1175:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 6,
											"mutability": "mutable",
											"name": "price",
											"nameLocation": "1238:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 13,
											"src": "1230:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 5,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1230:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 8,
											"mutability": "mutable",
											"name": "gateway",
											"nameLocation": "1291:7:0",
											"nodeType": "VariableDeclaration",
											"scope": 13,
											"src": "1283:15:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 7,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1283:6:0",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 10,
											"mutability": "mutable",
											"name": "stake",
											"nameLocation": "1363:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 13,
											"src": "1355:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 9,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1355:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 12,
											"mutability": "mutable",
											"name": "active",
											"nameLocation": "1413:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 13,
											"src": "1405:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 11,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1405:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Service",
									"nameLocation": "1157:7:0",
									"nodeType": "StructDefinition",
									"scope": 577,
									"src": "1150:310:0",
									"visibility": "public"
								},
								{
									"canonicalName": "EscroDot.Purchase",
									"id": 24,
									"members": [
										{
											"constant": false,
											"id": 15,
											"mutability": "mutable",
											"name": "buyer",
											"nameLocation": "1500:5:0",
											"nodeType": "VariableDeclaration",
											"scope": 24,
											"src": "1492:13:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 14,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1492:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 17,
											"mutability": "mutable",
											"name": "amount",
											"nameLocation": "1523:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 24,
											"src": "1515:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 16,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1515:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 19,
											"mutability": "mutable",
											"name": "delivered",
											"nameLocation": "1575:9:0",
											"nodeType": "VariableDeclaration",
											"scope": 24,
											"src": "1567:17:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 18,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1567:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 21,
											"mutability": "mutable",
											"name": "disputed",
											"nameLocation": "1634:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 24,
											"src": "1626:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 20,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1626:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 23,
											"mutability": "mutable",
											"name": "resolved",
											"nameLocation": "1686:8:0",
											"nodeType": "VariableDeclaration",
											"scope": 24,
											"src": "1678:16:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 22,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1678:4:0",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Purchase",
									"nameLocation": "1473:8:0",
									"nodeType": "StructDefinition",
									"scope": 577,
									"src": "1466:257:0",
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fe25e00a",
									"id": 26,
									"mutability": "immutable",
									"name": "arbiter",
									"nameLocation": "2010:7:0",
									"nodeType": "VariableDeclaration",
									"scope": 577,
									"src": "1985:32:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 25,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1985:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f6c53d9b",
									"id": 29,
									"mutability": "mutable",
									"name": "nextServiceId",
									"nameLocation": "2080:13:0",
									"nodeType": "VariableDeclaration",
									"scope": 577,
									"src": "2065:32:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 27,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2065:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 28,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2096:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "b9be108d",
									"id": 33,
									"mutability": "mutable",
									"name": "nextPurchaseId",
									"nameLocation": "2177:14:0",
									"nodeType": "VariableDeclaration",
									"scope": 577,
									"src": "2142:49:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
										"typeString": "mapping(uint256 => uint256)"
									},
									"typeName": {
										"id": 32,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 30,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2150:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "2142:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
											"typeString": "mapping(uint256 => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 31,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2161:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "c22c4f43",
									"id": 38,
									"mutability": "mutable",
									"name": "services",
									"nameLocation": "2282:8:0",
									"nodeType": "VariableDeclaration",
									"scope": 577,
									"src": "2247:43:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Service_$13_storage_$",
										"typeString": "mapping(uint256 => struct EscroDot.Service)"
									},
									"typeName": {
										"id": 37,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 34,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2255:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "2247:27:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Service_$13_storage_$",
											"typeString": "mapping(uint256 => struct EscroDot.Service)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 36,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 35,
												"name": "Service",
												"nameLocations": [
													"2266:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 13,
												"src": "2266:7:0"
											},
											"referencedDeclaration": 13,
											"src": "2266:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
												"typeString": "struct EscroDot.Service"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "bf96f317",
									"id": 45,
									"mutability": "mutable",
									"name": "purchases",
									"nameLocation": "2399:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 577,
									"src": "2343:65:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$_$",
										"typeString": "mapping(uint256 => mapping(uint256 => struct EscroDot.Purchase))"
									},
									"typeName": {
										"id": 44,
										"keyName": "",
										"keyNameLocation": "-1:-1:-1",
										"keyType": {
											"id": 39,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2351:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "2343:48:0",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$_$",
											"typeString": "mapping(uint256 => mapping(uint256 => struct EscroDot.Purchase))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 43,
											"keyName": "",
											"keyNameLocation": "-1:-1:-1",
											"keyType": {
												"id": 40,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "2370:7:0",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"nodeType": "Mapping",
											"src": "2362:28:0",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$",
												"typeString": "mapping(uint256 => struct EscroDot.Purchase)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 42,
												"nodeType": "UserDefinedTypeName",
												"pathNode": {
													"id": 41,
													"name": "Purchase",
													"nameLocations": [
														"2381:8:0"
													],
													"nodeType": "IdentifierPath",
													"referencedDeclaration": 24,
													"src": "2381:8:0"
												},
												"referencedDeclaration": 24,
												"src": "2381:8:0",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
													"typeString": "struct EscroDot.Purchase"
												}
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 48,
									"mutability": "mutable",
									"name": "_unlocked",
									"nameLocation": "2727:9:0",
									"nodeType": "VariableDeclaration",
									"scope": 577,
									"src": "2711:29:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 46,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2711:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"value": {
										"hexValue": "31",
										"id": 47,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "2739:1:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_1_by_1",
											"typeString": "int_const 1"
										},
										"value": "1"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "2813:107:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 51,
																"name": "_unlocked",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 48,
																"src": "2831:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2844:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "2831:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4c4f434b4544",
															"id": 54,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2847:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_eb4a01a12a4bbfa1bc780c16c5b2b6720cdf4f3c29cabd8c0f76fec3a575096b",
																"typeString": "literal_string \"LOCKED\""
															},
															"value": "LOCKED"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_eb4a01a12a4bbfa1bc780c16c5b2b6720cdf4f3c29cabd8c0f76fec3a575096b",
																"typeString": "literal_string \"LOCKED\""
															}
														],
														"id": 50,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2823:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 55,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2823:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 56,
												"nodeType": "ExpressionStatement",
												"src": "2823:33:0"
											},
											{
												"expression": {
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 57,
														"name": "_unlocked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "2866:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 58,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2878:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2866:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "2866:13:0"
											},
											{
												"id": 61,
												"nodeType": "PlaceholderStatement",
												"src": "2889:1:0"
											},
											{
												"expression": {
													"id": 64,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 62,
														"name": "_unlocked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 48,
														"src": "2900:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 63,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2912:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2900:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 65,
												"nodeType": "ExpressionStatement",
												"src": "2900:13:0"
											}
										]
									},
									"id": 67,
									"name": "lock",
									"nameLocation": "2806:4:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 49,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2810:2:0"
									},
									"src": "2797:123:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 88,
										"nodeType": "Block",
										"src": "2982:95:0",
										"statements": [
											{
												"assignments": [
													75,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 75,
														"mutability": "mutable",
														"name": "ok",
														"nameLocation": "2998:2:0",
														"nodeType": "VariableDeclaration",
														"scope": 88,
														"src": "2993:7:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 74,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2993:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 82,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 80,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3029:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 76,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 69,
																"src": "3006:2:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 77,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3009:4:0",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3006:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 79,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 78,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 71,
																"src": "3021:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3006:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 81,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3006:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2992:40:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 84,
															"name": "ok",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 75,
															"src": "3050:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4554485f53454e445f4641494c",
															"id": 85,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3054:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_69c28b82926e5246d25e8125e137290b566a72aaf511cb63498c079ca6b63ddb",
																"typeString": "literal_string \"ETH_SEND_FAIL\""
															},
															"value": "ETH_SEND_FAIL"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_69c28b82926e5246d25e8125e137290b566a72aaf511cb63498c079ca6b63ddb",
																"typeString": "literal_string \"ETH_SEND_FAIL\""
															}
														],
														"id": 83,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3042:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 86,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3042:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 87,
												"nodeType": "ExpressionStatement",
												"src": "3042:28:0"
											}
										]
									},
									"id": 89,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeSend",
									"nameLocation": "2935:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2953:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "2945:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 68,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2945:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 71,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2965:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 89,
												"src": "2957:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 70,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2957:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2944:28:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2982:0:0"
									},
									"scope": 577,
									"src": "2926:151:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"anonymous": false,
									"eventSelector": "e52b4cac100a9ec9e8218c236c0428efde70f39f09110bd4149a4b229b339ca7",
									"id": 101,
									"name": "ServiceCreated",
									"nameLocation": "3345:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 100,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 91,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3376:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "3360:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 90,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3360:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 93,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3396:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "3380:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 92,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3380:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 95,
												"indexed": false,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "3411:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "3403:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 94,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 97,
												"indexed": false,
												"mutability": "mutable",
												"name": "stake",
												"nameLocation": "3426:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "3418:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 96,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3418:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 99,
												"indexed": false,
												"mutability": "mutable",
												"name": "gateway",
												"nameLocation": "3440:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 101,
												"src": "3433:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 98,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3433:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3359:89:0"
									},
									"src": "3339:110:0"
								},
								{
									"anonymous": false,
									"eventSelector": "e481f81086d7f3247fa6ccef833a2a621b37635cf6040bf67ebaa15e196fcafc",
									"id": 111,
									"name": "ServicePurchased",
									"nameLocation": "3460:16:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3493:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "3477:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3477:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 105,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "3513:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "3497:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 104,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3497:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 107,
												"indexed": true,
												"mutability": "mutable",
												"name": "buyer",
												"nameLocation": "3541:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "3525:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 106,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3525:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 109,
												"indexed": false,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "3556:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 111,
												"src": "3548:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 108,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3548:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3476:87:0"
									},
									"src": "3454:110:0"
								},
								{
									"anonymous": false,
									"eventSelector": "17f49827452e5e9720f21b66427e0af5d65d54620e68dea6d200efc03168100b",
									"id": 119,
									"name": "DeliverableProvided",
									"nameLocation": "3575:19:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 118,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 113,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3611:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "3595:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 112,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3595:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 115,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "3631:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "3615:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 114,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3615:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 117,
												"indexed": false,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "3651:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "3643:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 116,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3643:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3594:73:0"
									},
									"src": "3569:99:0"
								},
								{
									"anonymous": false,
									"eventSelector": "1954f0ea9e3f5fbdc693320e038db1549f419ae5351b74d36cee7c9ef13dd2b6",
									"id": 125,
									"name": "DisputeRaised",
									"nameLocation": "3679:13:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 121,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3709:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "3693:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3693:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 123,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "3729:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "3713:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3713:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3692:48:0"
									},
									"src": "3673:68:0"
								},
								{
									"anonymous": false,
									"eventSelector": "c84a77110774854ab237145b108e924962dbaa5191275eb044a6cb09621c4a94",
									"id": 133,
									"name": "DisputeResolved",
									"nameLocation": "3752:15:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"indexed": true,
												"mutability": "mutable",
												"name": "id",
												"nameLocation": "3784:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "3768:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 126,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3768:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 129,
												"indexed": true,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "3804:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "3788:26:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 128,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3788:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 131,
												"indexed": false,
												"mutability": "mutable",
												"name": "refunded",
												"nameLocation": "3821:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 133,
												"src": "3816:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 130,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3816:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3767:63:0"
									},
									"src": "3746:85:0"
								},
								{
									"body": {
										"id": 152,
										"nodeType": "Block",
										"src": "4123:91:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 144,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 139,
																"name": "_arbiter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 135,
																"src": "4141:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 142,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4161:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 141,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4153:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 140,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "4153:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 143,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4153:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "4141:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "61726269746572203d2030",
															"id": 145,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4165:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7038a94b7cf20b5f5dc0b98e4876eb3fd8ea55b5dd666e49539c0f37f0c5ccb5",
																"typeString": "literal_string \"arbiter = 0\""
															},
															"value": "arbiter = 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7038a94b7cf20b5f5dc0b98e4876eb3fd8ea55b5dd666e49539c0f37f0c5ccb5",
																"typeString": "literal_string \"arbiter = 0\""
															}
														],
														"id": 138,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4133:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 146,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4133:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 147,
												"nodeType": "ExpressionStatement",
												"src": "4133:46:0"
											},
											{
												"expression": {
													"id": 150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 148,
														"name": "arbiter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 26,
														"src": "4189:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 149,
														"name": "_arbiter",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 135,
														"src": "4199:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4189:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 151,
												"nodeType": "ExpressionStatement",
												"src": "4189:18:0"
											}
										]
									},
									"id": 153,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 136,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 135,
												"mutability": "mutable",
												"name": "_arbiter",
												"nameLocation": "4113:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 153,
												"src": "4105:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 134,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4105:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4104:18:0"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4123:0:0"
									},
									"scope": 577,
									"src": "4093:121:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 218,
										"nodeType": "Block",
										"src": "4787:475:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 166,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 164,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 156,
																"src": "4805:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 165,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4813:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4805:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7072696365203d2030",
															"id": 167,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4816:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b012239bb341fc3aa6e36817a7c10c262bcbc141e99583a4906f137d1c73446e",
																"typeString": "literal_string \"price = 0\""
															},
															"value": "price = 0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b012239bb341fc3aa6e36817a7c10c262bcbc141e99583a4906f137d1c73446e",
																"typeString": "literal_string \"price = 0\""
															}
														],
														"id": 163,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4797:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4797:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 169,
												"nodeType": "ExpressionStatement",
												"src": "4797:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 173,
																			"name": "gateway",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 158,
																			"src": "4852:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_calldata_ptr",
																				"typeString": "string calldata"
																			}
																		],
																		"id": 172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4846:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 171,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4846:5:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 174,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4846:14:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_calldata_ptr",
																		"typeString": "bytes calldata"
																	}
																},
																"id": 175,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4861:6:0",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4846:21:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 176,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4870:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4846:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6761746577617920656d707479",
															"id": 178,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4873:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d55a6ddb4b4b2c07556d9759db900c1c4b9b9be9b3a43d353ca3b76560b42cb0",
																"typeString": "literal_string \"gateway empty\""
															},
															"value": "gateway empty"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d55a6ddb4b4b2c07556d9759db900c1c4b9b9be9b3a43d353ca3b76560b42cb0",
																"typeString": "literal_string \"gateway empty\""
															}
														],
														"id": 170,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4838:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 179,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4838:51:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 180,
												"nodeType": "ExpressionStatement",
												"src": "4838:51:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 185,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 182,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "4907:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4911:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "4907:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 184,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 156,
																"src": "4920:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4907:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7374616b65203c207072696365",
															"id": 186,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4927:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_75bada284880e1d4595f86322984b565973726c9e2d576dc7097327aebdaf519",
																"typeString": "literal_string \"stake < price\""
															},
															"value": "stake < price"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_75bada284880e1d4595f86322984b565973726c9e2d576dc7097327aebdaf519",
																"typeString": "literal_string \"stake < price\""
															}
														],
														"id": 181,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4899:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4899:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 188,
												"nodeType": "ExpressionStatement",
												"src": "4899:44:0"
											},
											{
												"expression": {
													"id": 192,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 189,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 161,
														"src": "4954:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 191,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4966:15:0",
														"subExpression": {
															"id": 190,
															"name": "nextServiceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 29,
															"src": "4966:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4954:27:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 193,
												"nodeType": "ExpressionStatement",
												"src": "4954:27:0"
											},
											{
												"expression": {
													"id": 206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 194,
															"name": "services",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 38,
															"src": "4991:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Service_$13_storage_$",
																"typeString": "mapping(uint256 => struct EscroDot.Service storage ref)"
															}
														},
														"id": 196,
														"indexExpression": {
															"id": 195,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 161,
															"src": "5000:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "4991:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$13_storage",
															"typeString": "struct EscroDot.Service storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 198,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5042:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 199,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5046:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5042:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 200,
																"name": "price",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 156,
																"src": "5073:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"id": 201,
																"name": "gateway",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 158,
																"src": "5101:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																}
															},
															{
																"expression": {
																	"id": 202,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5129:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 203,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5133:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "5129:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "74727565",
																"id": 204,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5160:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_string_calldata_ptr",
																	"typeString": "string calldata"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 197,
															"name": "Service",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 13,
															"src": "5013:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Service_$13_storage_ptr_$",
																"typeString": "type(struct EscroDot.Service storage pointer)"
															}
														},
														"id": 205,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [
															"5035:5:0",
															"5066:5:0",
															"5092:7:0",
															"5122:5:0",
															"5152:6:0"
														],
														"names": [
															"owner",
															"price",
															"gateway",
															"stake",
															"active"
														],
														"nodeType": "FunctionCall",
														"src": "5013:162:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$13_memory_ptr",
															"typeString": "struct EscroDot.Service memory"
														}
													},
													"src": "4991:184:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$13_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"id": 207,
												"nodeType": "ExpressionStatement",
												"src": "4991:184:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 209,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 161,
															"src": "5206:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 210,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5217:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5221:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5217:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 212,
															"name": "price",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "5229:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 213,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5236:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5240:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "5236:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 215,
															"name": "gateway",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "5247:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_string_calldata_ptr",
																"typeString": "string calldata"
															}
														],
														"id": 208,
														"name": "ServiceCreated",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "5191:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_address_$_t_uint256_$_t_uint256_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (uint256,address,uint256,uint256,string memory)"
														}
													},
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5191:64:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 217,
												"nodeType": "EmitStatement",
												"src": "5186:69:0"
											}
										]
									},
									"documentation": {
										"id": 154,
										"nodeType": "StructuredDocumentation",
										"src": "4476:198:0",
										"text": " @dev Provider stakes ETH and creates a service listing.\n @param price   Fixed price per purchase (in wei).\n @param gateway URL / CID where the AI agent can be invoked."
									},
									"functionSelector": "bdfdeb87",
									"id": 219,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "createService",
									"nameLocation": "4688:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "price",
												"nameLocation": "4710:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4702:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 155,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4702:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "gateway",
												"nameLocation": "4733:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4717:23:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 157,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4717:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4701:40:0"
									},
									"returnParameters": {
										"id": 162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 161,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "4776:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "4768:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 160,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4768:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4767:19:0"
									},
									"scope": 577,
									"src": "4679:583:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 283,
										"nodeType": "Block",
										"src": "5524:494:0",
										"statements": [
											{
												"assignments": [
													231
												],
												"declarations": [
													{
														"constant": false,
														"id": 231,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "5550:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 283,
														"src": "5534:17:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
															"typeString": "struct EscroDot.Service"
														},
														"typeName": {
															"id": 230,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 229,
																"name": "Service",
																"nameLocations": [
																	"5534:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 13,
																"src": "5534:7:0"
															},
															"referencedDeclaration": 13,
															"src": "5534:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																"typeString": "struct EscroDot.Service"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 235,
												"initialValue": {
													"baseExpression": {
														"id": 232,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "5554:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Service_$13_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Service storage ref)"
														}
													},
													"id": 234,
													"indexExpression": {
														"id": 233,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 222,
														"src": "5563:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5554:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$13_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5534:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 237,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 231,
																"src": "5591:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																	"typeString": "struct EscroDot.Service storage pointer"
																}
															},
															"id": 238,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5593:6:0",
															"memberName": "active",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 12,
															"src": "5591:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e616374697665",
															"id": 239,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5601:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_356250a37e7b79ef3e2fe3277f6474c0525db5da262fe508599c7b0d71c99b35",
																"typeString": "literal_string \"inactive\""
															},
															"value": "inactive"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_356250a37e7b79ef3e2fe3277f6474c0525db5da262fe508599c7b0d71c99b35",
																"typeString": "literal_string \"inactive\""
															}
														],
														"id": 236,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5583:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 240,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5583:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 241,
												"nodeType": "ExpressionStatement",
												"src": "5583:29:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 243,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5630:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 244,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5634:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "5630:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 245,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 231,
																	"src": "5643:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 246,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5645:5:0",
																"memberName": "price",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 6,
																"src": "5643:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5630:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "77726f6e6720616d6f756e74",
															"id": 248,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5652:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3ff52a90b3b8231ec9d74666d7041d38cdee4c38c09ac2f4d22016a00aabab27",
																"typeString": "literal_string \"wrong amount\""
															},
															"value": "wrong amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3ff52a90b3b8231ec9d74666d7041d38cdee4c38c09ac2f4d22016a00aabab27",
																"typeString": "literal_string \"wrong amount\""
															}
														],
														"id": 242,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5622:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 249,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5622:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 250,
												"nodeType": "ExpressionStatement",
												"src": "5622:45:0"
											},
											{
												"expression": {
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 251,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 227,
														"src": "5678:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 255,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "5691:27:0",
														"subExpression": {
															"baseExpression": {
																"id": 252,
																"name": "nextPurchaseId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 33,
																"src": "5691:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_uint256_$",
																	"typeString": "mapping(uint256 => uint256)"
																}
															},
															"id": 254,
															"indexExpression": {
																"id": 253,
																"name": "serviceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "5706:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": true,
															"nodeType": "IndexAccess",
															"src": "5691:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "5678:40:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "5678:40:0"
											},
											{
												"expression": {
													"id": 272,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 258,
																"name": "purchases",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 45,
																"src": "5728:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$_$",
																	"typeString": "mapping(uint256 => mapping(uint256 => struct EscroDot.Purchase storage ref))"
																}
															},
															"id": 261,
															"indexExpression": {
																"id": 259,
																"name": "serviceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 222,
																"src": "5738:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "5728:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$",
																"typeString": "mapping(uint256 => struct EscroDot.Purchase storage ref)"
															}
														},
														"id": 262,
														"indexExpression": {
															"id": 260,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 227,
															"src": "5749:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "5728:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$24_storage",
															"typeString": "struct EscroDot.Purchase storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 264,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5793:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 265,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5797:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "5793:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"expression": {
																	"id": 266,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "5825:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "5829:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "5825:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															{
																"hexValue": "66616c7365",
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5859:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "66616c7365",
																"id": 269,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5888:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															{
																"hexValue": "66616c7365",
																"id": 270,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5917:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																{
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															],
															"id": 263,
															"name": "Purchase",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 24,
															"src": "5763:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_struct$_Purchase_$24_storage_ptr_$",
																"typeString": "type(struct EscroDot.Purchase storage pointer)"
															}
														},
														"id": 271,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "structConstructorCall",
														"lValueRequested": false,
														"nameLocations": [
															"5786:5:0",
															"5817:6:0",
															"5848:9:0",
															"5878:8:0",
															"5907:8:0"
														],
														"names": [
															"buyer",
															"amount",
															"delivered",
															"disputed",
															"resolved"
														],
														"nodeType": "FunctionCall",
														"src": "5763:170:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$24_memory_ptr",
															"typeString": "struct EscroDot.Purchase memory"
														}
													},
													"src": "5728:205:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$24_storage",
														"typeString": "struct EscroDot.Purchase storage ref"
													}
												},
												"id": 273,
												"nodeType": "ExpressionStatement",
												"src": "5728:205:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 275,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 222,
															"src": "5966:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 276,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 227,
															"src": "5977:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"expression": {
																"id": 277,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "5989:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 278,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5993:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "5989:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 279,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "6001:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 280,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6005:5:0",
															"memberName": "value",
															"nodeType": "MemberAccess",
															"src": "6001:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 274,
														"name": "ServicePurchased",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 111,
														"src": "5949:16:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256,address,uint256)"
														}
													},
													"id": 281,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5949:62:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 282,
												"nodeType": "EmitStatement",
												"src": "5944:67:0"
											}
										]
									},
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "5268:161:0",
										"text": " @dev Buyer locks payment for a service. Allows multiple purchases.\n @return purchaseId A unique purchase identifier for further actions."
									},
									"functionSelector": "c594e5ec",
									"id": 284,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 225,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 224,
												"name": "lock",
												"nameLocations": [
													"5490:4:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 67,
												"src": "5490:4:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "5490:4:0"
										}
									],
									"name": "buyService",
									"nameLocation": "5443:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 223,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "5462:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "5454:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 221,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5454:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5453:19:0"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "5512:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "5504:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5504:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5503:20:0"
									},
									"scope": 577,
									"src": "5434:584:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 352,
										"nodeType": "Block",
										"src": "6312:383:0",
										"statements": [
											{
												"assignments": [
													298
												],
												"declarations": [
													{
														"constant": false,
														"id": 298,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "6338:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 352,
														"src": "6322:17:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
															"typeString": "struct EscroDot.Service"
														},
														"typeName": {
															"id": 297,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 296,
																"name": "Service",
																"nameLocations": [
																	"6322:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 13,
																"src": "6322:7:0"
															},
															"referencedDeclaration": 13,
															"src": "6322:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																"typeString": "struct EscroDot.Service"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 302,
												"initialValue": {
													"baseExpression": {
														"id": 299,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "6342:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Service_$13_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Service storage ref)"
														}
													},
													"id": 301,
													"indexExpression": {
														"id": 300,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 287,
														"src": "6351:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6342:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$13_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6322:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 308,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 304,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6379:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 305,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6383:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6379:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 306,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 298,
																	"src": "6393:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 307,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6395:5:0",
																"memberName": "owner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 4,
																"src": "6393:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "6379:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f74206f776e6572",
															"id": 309,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6402:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e",
																"typeString": "literal_string \"not owner\""
															},
															"value": "not owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e",
																"typeString": "literal_string \"not owner\""
															}
														],
														"id": 303,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6371:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6371:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 311,
												"nodeType": "ExpressionStatement",
												"src": "6371:43:0"
											},
											{
												"assignments": [
													314
												],
												"declarations": [
													{
														"constant": false,
														"id": 314,
														"mutability": "mutable",
														"name": "p",
														"nameLocation": "6442:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 352,
														"src": "6425:18:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
															"typeString": "struct EscroDot.Purchase"
														},
														"typeName": {
															"id": 313,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 312,
																"name": "Purchase",
																"nameLocations": [
																	"6425:8:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 24,
																"src": "6425:8:0"
															},
															"referencedDeclaration": 24,
															"src": "6425:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																"typeString": "struct EscroDot.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 320,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 315,
															"name": "purchases",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "6446:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$_$",
																"typeString": "mapping(uint256 => mapping(uint256 => struct EscroDot.Purchase storage ref))"
															}
														},
														"id": 317,
														"indexExpression": {
															"id": 316,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 287,
															"src": "6456:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6446:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Purchase storage ref)"
														}
													},
													"id": 319,
													"indexExpression": {
														"id": 318,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 289,
														"src": "6467:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6446:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$24_storage",
														"typeString": "struct EscroDot.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6425:53:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 325,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 322,
																		"name": "p",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 314,
																		"src": "6496:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																			"typeString": "struct EscroDot.Purchase storage pointer"
																		}
																	},
																	"id": 323,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6498:6:0",
																	"memberName": "amount",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 17,
																	"src": "6496:8:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 324,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6507:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6496:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"id": 328,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "6512:12:0",
																"subExpression": {
																	"expression": {
																		"id": 326,
																		"name": "p",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 314,
																		"src": "6513:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																			"typeString": "struct EscroDot.Purchase storage pointer"
																		}
																	},
																	"id": 327,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "6515:9:0",
																	"memberName": "delivered",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 19,
																	"src": "6513:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "6496:28:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "696e76616c6964207075726368617365",
															"id": 330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6526:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_362ca1baaafe92a19c5b7b1402b374cebc53e6b3ac91ddf0886e177fe4ff89ed",
																"typeString": "literal_string \"invalid purchase\""
															},
															"value": "invalid purchase"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_362ca1baaafe92a19c5b7b1402b374cebc53e6b3ac91ddf0886e177fe4ff89ed",
																"typeString": "literal_string \"invalid purchase\""
															}
														],
														"id": 321,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6488:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 331,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6488:57:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 332,
												"nodeType": "ExpressionStatement",
												"src": "6488:57:0"
											},
											{
												"expression": {
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 333,
															"name": "p",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 314,
															"src": "6556:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																"typeString": "struct EscroDot.Purchase storage pointer"
															}
														},
														"id": 335,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6558:9:0",
														"memberName": "delivered",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 19,
														"src": "6556:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 336,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6570:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6556:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 338,
												"nodeType": "ExpressionStatement",
												"src": "6556:18:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 340,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 287,
															"src": "6610:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 341,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 289,
															"src": "6621:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 342,
															"name": "deliverableHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 291,
															"src": "6633:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 339,
														"name": "DeliverableProvided",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 119,
														"src": "6590:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_bytes32_$returns$__$",
															"typeString": "function (uint256,uint256,bytes32)"
														}
													},
													"id": 343,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6590:59:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 344,
												"nodeType": "EmitStatement",
												"src": "6585:64:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 346,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 298,
																"src": "6670:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																	"typeString": "struct EscroDot.Service storage pointer"
																}
															},
															"id": 347,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6672:5:0",
															"memberName": "owner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4,
															"src": "6670:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 348,
																"name": "p",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 314,
																"src": "6679:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																	"typeString": "struct EscroDot.Purchase storage pointer"
																}
															},
															"id": 349,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6681:6:0",
															"memberName": "amount",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 17,
															"src": "6679:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 345,
														"name": "_safeSend",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 89,
														"src": "6660:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 350,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6660:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 351,
												"nodeType": "ExpressionStatement",
												"src": "6660:28:0"
											}
										]
									},
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "6024:188:0",
										"text": " @dev Provider marks deliverable for a given purchase and receives payment immediately.\n @param deliverableHash could be IPFS CID / SHA‑256 of encrypted artifact."
									},
									"functionSelector": "5e71a321",
									"id": 353,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 294,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 293,
												"name": "lock",
												"nameLocations": [
													"6307:4:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 67,
												"src": "6307:4:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "6307:4:0"
										}
									],
									"name": "deliver",
									"nameLocation": "6226:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "6242:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "6234:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 286,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6234:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "6261:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "6253:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 288,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6253:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 291,
												"mutability": "mutable",
												"name": "deliverableHash",
												"nameLocation": "6281:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 353,
												"src": "6273:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 290,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6273:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6233:64:0"
									},
									"returnParameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6312:0:0"
									},
									"scope": 577,
									"src": "6217:478:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 403,
										"nodeType": "Block",
										"src": "6858:304:0",
										"statements": [
											{
												"assignments": [
													363
												],
												"declarations": [
													{
														"constant": false,
														"id": 363,
														"mutability": "mutable",
														"name": "p",
														"nameLocation": "6885:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 403,
														"src": "6868:18:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
															"typeString": "struct EscroDot.Purchase"
														},
														"typeName": {
															"id": 362,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 361,
																"name": "Purchase",
																"nameLocations": [
																	"6868:8:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 24,
																"src": "6868:8:0"
															},
															"referencedDeclaration": 24,
															"src": "6868:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																"typeString": "struct EscroDot.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 369,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 364,
															"name": "purchases",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "6889:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$_$",
																"typeString": "mapping(uint256 => mapping(uint256 => struct EscroDot.Purchase storage ref))"
															}
														},
														"id": 366,
														"indexExpression": {
															"id": 365,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "6899:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "6889:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Purchase storage ref)"
														}
													},
													"id": 368,
													"indexExpression": {
														"id": 367,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 358,
														"src": "6910:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6889:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$24_storage",
														"typeString": "struct EscroDot.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6868:53:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 371,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "6939:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 372,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6943:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "6939:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 373,
																	"name": "p",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 363,
																	"src": "6953:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 374,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "6955:5:0",
																"memberName": "buyer",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 15,
																"src": "6953:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "6939:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f74206275796572",
															"id": 376,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "6962:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7d2df0608d025cbc5c8d732150d5f9f80e45895879c4b36d791be191af160cc9",
																"typeString": "literal_string \"not buyer\""
															},
															"value": "not buyer"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7d2df0608d025cbc5c8d732150d5f9f80e45895879c4b36d791be191af160cc9",
																"typeString": "literal_string \"not buyer\""
															}
														],
														"id": 370,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6931:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 377,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6931:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 378,
												"nodeType": "ExpressionStatement",
												"src": "6931:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 380,
																"name": "p",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 363,
																"src": "6992:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																	"typeString": "struct EscroDot.Purchase storage pointer"
																}
															},
															"id": 381,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6994:9:0",
															"memberName": "delivered",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 19,
															"src": "6992:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f742064656c69766572656420796574",
															"id": 382,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7005:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f35c20ce4fb680e4a5cf2a14d39f4b62b8575a788c7a0bbbe5adde7bf100481d",
																"typeString": "literal_string \"not delivered yet\""
															},
															"value": "not delivered yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f35c20ce4fb680e4a5cf2a14d39f4b62b8575a788c7a0bbbe5adde7bf100481d",
																"typeString": "literal_string \"not delivered yet\""
															}
														],
														"id": 379,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "6984:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6984:41:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 384,
												"nodeType": "ExpressionStatement",
												"src": "6984:41:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 388,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "7043:11:0",
															"subExpression": {
																"expression": {
																	"id": 386,
																	"name": "p",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 363,
																	"src": "7044:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 387,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7046:8:0",
																"memberName": "disputed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 21,
																"src": "7044:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "616c7265616479206469737075746564",
															"id": 389,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7056:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d6de15bfb825bd264653ef010b7e69ee8b9435a8d737c726852164c1f4f04f17",
																"typeString": "literal_string \"already disputed\""
															},
															"value": "already disputed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d6de15bfb825bd264653ef010b7e69ee8b9435a8d737c726852164c1f4f04f17",
																"typeString": "literal_string \"already disputed\""
															}
														],
														"id": 385,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7035:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 390,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7035:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 391,
												"nodeType": "ExpressionStatement",
												"src": "7035:40:0"
											},
											{
												"expression": {
													"id": 396,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 392,
															"name": "p",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 363,
															"src": "7086:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																"typeString": "struct EscroDot.Purchase storage pointer"
															}
														},
														"id": 394,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7088:8:0",
														"memberName": "disputed",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 21,
														"src": "7086:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 395,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7099:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "7086:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 397,
												"nodeType": "ExpressionStatement",
												"src": "7086:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 399,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 356,
															"src": "7133:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 400,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 358,
															"src": "7144:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 398,
														"name": "DisputeRaised",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "7119:13:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$returns$__$",
															"typeString": "function (uint256,uint256)"
														}
													},
													"id": 401,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7119:36:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 402,
												"nodeType": "EmitStatement",
												"src": "7114:41:0"
											}
										]
									},
									"documentation": {
										"id": 354,
										"nodeType": "StructuredDocumentation",
										"src": "6701:82:0",
										"text": " @dev Buyer escalates after delivery if unhappy with the output."
									},
									"functionSelector": "9f686097",
									"id": 404,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "raiseDispute",
									"nameLocation": "6797:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "6818:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "6810:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6810:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "6837:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 404,
												"src": "6829:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6829:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6809:39:0"
									},
									"returnParameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6858:0:0"
									},
									"scope": 577,
									"src": "6788:374:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 490,
										"nodeType": "Block",
										"src": "7436:559:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 420,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 417,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "7454:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 418,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7458:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "7454:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 419,
																"name": "arbiter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 26,
																"src": "7468:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "7454:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f742061726269746572",
															"id": 421,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7477:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3c714372baa5ff217959295689d0137e94ebd0eb36840e2f5be8dbd420f88aac",
																"typeString": "literal_string \"not arbiter\""
															},
															"value": "not arbiter"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_3c714372baa5ff217959295689d0137e94ebd0eb36840e2f5be8dbd420f88aac",
																"typeString": "literal_string \"not arbiter\""
															}
														],
														"id": 416,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7446:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 422,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7446:45:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 423,
												"nodeType": "ExpressionStatement",
												"src": "7446:45:0"
											},
											{
												"assignments": [
													426
												],
												"declarations": [
													{
														"constant": false,
														"id": 426,
														"mutability": "mutable",
														"name": "p",
														"nameLocation": "7519:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 490,
														"src": "7502:18:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
															"typeString": "struct EscroDot.Purchase"
														},
														"typeName": {
															"id": 425,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 424,
																"name": "Purchase",
																"nameLocations": [
																	"7502:8:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 24,
																"src": "7502:8:0"
															},
															"referencedDeclaration": 24,
															"src": "7502:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																"typeString": "struct EscroDot.Purchase"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 432,
												"initialValue": {
													"baseExpression": {
														"baseExpression": {
															"id": 427,
															"name": "purchases",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 45,
															"src": "7523:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$_$",
																"typeString": "mapping(uint256 => mapping(uint256 => struct EscroDot.Purchase storage ref))"
															}
														},
														"id": 429,
														"indexExpression": {
															"id": 428,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "7533:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "7523:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Purchase_$24_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Purchase storage ref)"
														}
													},
													"id": 431,
													"indexExpression": {
														"id": 430,
														"name": "purchaseId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 409,
														"src": "7544:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7523:32:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Purchase_$24_storage",
														"typeString": "struct EscroDot.Purchase storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7502:53:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 434,
																	"name": "p",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 426,
																	"src": "7573:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 435,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7575:8:0",
																"memberName": "disputed",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 21,
																"src": "7573:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"id": 438,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "7587:11:0",
																"subExpression": {
																	"expression": {
																		"id": 436,
																		"name": "p",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 426,
																		"src": "7588:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																			"typeString": "struct EscroDot.Purchase storage pointer"
																		}
																	},
																	"id": 437,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "7590:8:0",
																	"memberName": "resolved",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 23,
																	"src": "7588:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "7573:25:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f206163746976652064697370757465",
															"id": 440,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7600:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5fcebd5e1817174d270c522123bcbeab50aaaf6a2da96c6947b8b5b81d8558ca",
																"typeString": "literal_string \"no active dispute\""
															},
															"value": "no active dispute"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5fcebd5e1817174d270c522123bcbeab50aaaf6a2da96c6947b8b5b81d8558ca",
																"typeString": "literal_string \"no active dispute\""
															}
														],
														"id": 433,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7565:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7565:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 442,
												"nodeType": "ExpressionStatement",
												"src": "7565:55:0"
											},
											{
												"expression": {
													"id": 447,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 443,
															"name": "p",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 426,
															"src": "7631:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																"typeString": "struct EscroDot.Purchase storage pointer"
															}
														},
														"id": 445,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "7633:8:0",
														"memberName": "resolved",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 23,
														"src": "7631:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 446,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "7644:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "7631:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 448,
												"nodeType": "ExpressionStatement",
												"src": "7631:17:0"
											},
											{
												"assignments": [
													451
												],
												"declarations": [
													{
														"constant": false,
														"id": 451,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "7674:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 490,
														"src": "7658:17:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
															"typeString": "struct EscroDot.Service"
														},
														"typeName": {
															"id": 450,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 449,
																"name": "Service",
																"nameLocations": [
																	"7658:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 13,
																"src": "7658:7:0"
															},
															"referencedDeclaration": 13,
															"src": "7658:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																"typeString": "struct EscroDot.Service"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 455,
												"initialValue": {
													"baseExpression": {
														"id": 452,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "7678:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Service_$13_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Service storage ref)"
														}
													},
													"id": 454,
													"indexExpression": {
														"id": 453,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 407,
														"src": "7687:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "7678:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$13_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7658:39:0"
											},
											{
												"condition": {
													"id": 456,
													"name": "refund",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 411,
													"src": "7712:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 483,
												"nodeType": "IfStatement",
												"src": "7708:219:0",
												"trueBody": {
													"id": 482,
													"nodeType": "Block",
													"src": "7720:207:0",
													"statements": [
														{
															"assignments": [
																458
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 458,
																	"mutability": "mutable",
																	"name": "refundAmount",
																	"nameLocation": "7742:12:0",
																	"nodeType": "VariableDeclaration",
																	"scope": 482,
																	"src": "7734:20:0",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 457,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "7734:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 461,
															"initialValue": {
																"expression": {
																	"id": 459,
																	"name": "p",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 426,
																	"src": "7757:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																		"typeString": "struct EscroDot.Purchase storage pointer"
																	}
																},
																"id": 460,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "7759:6:0",
																"memberName": "amount",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 17,
																"src": "7757:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "7734:31:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 466,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 463,
																				"name": "s",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 451,
																				"src": "7787:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																					"typeString": "struct EscroDot.Service storage pointer"
																				}
																			},
																			"id": 464,
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "7789:5:0",
																			"memberName": "stake",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 10,
																			"src": "7787:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 465,
																			"name": "refundAmount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 458,
																			"src": "7798:12:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7787:23:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "696e73756666696369656e74207374616b65",
																		"id": 467,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "7812:20:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_242cb42cb24d3b9049247cd85e3974f65c88308deea9d57f37fbab7ee6001e56",
																			"typeString": "literal_string \"insufficient stake\""
																		},
																		"value": "insufficient stake"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_242cb42cb24d3b9049247cd85e3974f65c88308deea9d57f37fbab7ee6001e56",
																			"typeString": "literal_string \"insufficient stake\""
																		}
																	],
																	"id": 462,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "7779:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 468,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7779:54:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 469,
															"nodeType": "ExpressionStatement",
															"src": "7779:54:0"
														},
														{
															"expression": {
																"id": 474,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 470,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 451,
																		"src": "7847:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																			"typeString": "struct EscroDot.Service storage pointer"
																		}
																	},
																	"id": 472,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "7849:5:0",
																	"memberName": "stake",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 10,
																	"src": "7847:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "-=",
																"rightHandSide": {
																	"id": 473,
																	"name": "refundAmount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 458,
																	"src": "7858:12:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7847:23:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 475,
															"nodeType": "ExpressionStatement",
															"src": "7847:23:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"expression": {
																			"id": 477,
																			"name": "p",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 426,
																			"src": "7894:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_struct$_Purchase_$24_storage_ptr",
																				"typeString": "struct EscroDot.Purchase storage pointer"
																			}
																		},
																		"id": 478,
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "7896:5:0",
																		"memberName": "buyer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 15,
																		"src": "7894:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 479,
																		"name": "refundAmount",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 458,
																		"src": "7903:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 476,
																	"name": "_safeSend",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 89,
																	"src": "7884:9:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,uint256)"
																	}
																},
																"id": 480,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7884:32:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 481,
															"nodeType": "ExpressionStatement",
															"src": "7884:32:0"
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 485,
															"name": "serviceId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 407,
															"src": "7958:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 486,
															"name": "purchaseId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 409,
															"src": "7969:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 487,
															"name": "refund",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "7981:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 484,
														"name": "DisputeResolved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "7942:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (uint256,uint256,bool)"
														}
													},
													"id": 488,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7942:46:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 489,
												"nodeType": "EmitStatement",
												"src": "7937:51:0"
											}
										]
									},
									"documentation": {
										"id": 405,
										"nodeType": "StructuredDocumentation",
										"src": "7168:173:0",
										"text": " @dev Arbiter decides outcome. If `refund=true` the buyer receives payment back\n      using a slash from provider stake. Otherwise dispute is closed."
									},
									"functionSelector": "36c47f5f",
									"id": 491,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 414,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 413,
												"name": "lock",
												"nameLocations": [
													"7431:4:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 67,
												"src": "7431:4:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "7431:4:0"
										}
									],
									"name": "resolveDispute",
									"nameLocation": "7355:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "7378:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7370:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 406,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7370:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 409,
												"mutability": "mutable",
												"name": "purchaseId",
												"nameLocation": "7397:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7389:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 408,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7389:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "refund",
												"nameLocation": "7414:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 491,
												"src": "7409:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 410,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7409:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7369:52:0"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7436:0:0"
									},
									"scope": 577,
									"src": "7346:649:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 528,
										"nodeType": "Block",
										"src": "8370:183:0",
										"statements": [
											{
												"assignments": [
													499
												],
												"declarations": [
													{
														"constant": false,
														"id": 499,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "8396:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 528,
														"src": "8380:17:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
															"typeString": "struct EscroDot.Service"
														},
														"typeName": {
															"id": 498,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 497,
																"name": "Service",
																"nameLocations": [
																	"8380:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 13,
																"src": "8380:7:0"
															},
															"referencedDeclaration": 13,
															"src": "8380:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																"typeString": "struct EscroDot.Service"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 503,
												"initialValue": {
													"baseExpression": {
														"id": 500,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "8400:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Service_$13_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Service storage ref)"
														}
													},
													"id": 502,
													"indexExpression": {
														"id": 501,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 494,
														"src": "8409:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8400:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$13_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8380:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 509,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 505,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "8437:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 506,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8441:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "8437:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 507,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 499,
																	"src": "8451:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 508,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8453:5:0",
																"memberName": "owner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 4,
																"src": "8451:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8437:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f74206f776e6572",
															"id": 510,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8460:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e",
																"typeString": "literal_string \"not owner\""
															},
															"value": "not owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e",
																"typeString": "literal_string \"not owner\""
															}
														],
														"id": 504,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8429:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 511,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8429:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 512,
												"nodeType": "ExpressionStatement",
												"src": "8429:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 514,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "8490:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 515,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8494:5:0",
																"memberName": "value",
																"nodeType": "MemberAccess",
																"src": "8490:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 516,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8502:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "8490:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f2076616c7565",
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8505:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_e47dd74d3dec6073032d2947860a6d59251a411fea3b4cc7f146be40dd3778ad",
																"typeString": "literal_string \"no value\""
															},
															"value": "no value"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_e47dd74d3dec6073032d2947860a6d59251a411fea3b4cc7f146be40dd3778ad",
																"typeString": "literal_string \"no value\""
															}
														],
														"id": 513,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8482:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 519,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8482:34:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 520,
												"nodeType": "ExpressionStatement",
												"src": "8482:34:0"
											},
											{
												"expression": {
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 521,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 499,
															"src": "8526:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																"typeString": "struct EscroDot.Service storage pointer"
															}
														},
														"id": 523,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8528:5:0",
														"memberName": "stake",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 10,
														"src": "8526:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"expression": {
															"id": 524,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "8537:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 525,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "8541:5:0",
														"memberName": "value",
														"nodeType": "MemberAccess",
														"src": "8537:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8526:20:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "8526:20:0"
											}
										]
									},
									"documentation": {
										"id": 492,
										"nodeType": "StructuredDocumentation",
										"src": "8260:49:0",
										"text": "@dev Provider can add more stake at any time."
									},
									"functionSelector": "ac06e04f",
									"id": 529,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "topUpStake",
									"nameLocation": "8323:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 494,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "8342:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 529,
												"src": "8334:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 493,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8334:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8333:19:0"
									},
									"returnParameters": {
										"id": 496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8370:0:0"
									},
									"scope": 577,
									"src": "8314:239:0",
									"stateMutability": "payable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 575,
										"nodeType": "Block",
										"src": "8712:220:0",
										"statements": [
											{
												"assignments": [
													541
												],
												"declarations": [
													{
														"constant": false,
														"id": 541,
														"mutability": "mutable",
														"name": "s",
														"nameLocation": "8738:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 575,
														"src": "8722:17:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
															"typeString": "struct EscroDot.Service"
														},
														"typeName": {
															"id": 540,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 539,
																"name": "Service",
																"nameLocations": [
																	"8722:7:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 13,
																"src": "8722:7:0"
															},
															"referencedDeclaration": 13,
															"src": "8722:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																"typeString": "struct EscroDot.Service"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 545,
												"initialValue": {
													"baseExpression": {
														"id": 542,
														"name": "services",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 38,
														"src": "8742:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_struct$_Service_$13_storage_$",
															"typeString": "mapping(uint256 => struct EscroDot.Service storage ref)"
														}
													},
													"id": 544,
													"indexExpression": {
														"id": 543,
														"name": "serviceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "8751:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8742:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Service_$13_storage",
														"typeString": "struct EscroDot.Service storage ref"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8722:39:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 551,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 547,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "8779:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8783:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "8779:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 549,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 541,
																	"src": "8793:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 550,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8795:5:0",
																"memberName": "owner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 4,
																"src": "8793:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8779:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f74206f776e6572",
															"id": 552,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8802:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e",
																"typeString": "literal_string \"not owner\""
															},
															"value": "not owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f2881edc58d5a08d0243d7f8afdab31d949d85825e628e4b88558657a031f74e",
																"typeString": "literal_string \"not owner\""
															}
														],
														"id": 546,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8771:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 553,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8771:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 554,
												"nodeType": "ExpressionStatement",
												"src": "8771:43:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 559,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 556,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 534,
																"src": "8832:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"expression": {
																	"id": 557,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 541,
																	"src": "8842:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																		"typeString": "struct EscroDot.Service storage pointer"
																	}
																},
																"id": 558,
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "8844:5:0",
																"memberName": "stake",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 10,
																"src": "8842:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8832:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6f76657264726177",
															"id": 560,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8851:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a47afe8971c9970f106e0998d552a4722cb904bdb4f28cc25fd57f86ca9ec8d5",
																"typeString": "literal_string \"overdraw\""
															},
															"value": "overdraw"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a47afe8971c9970f106e0998d552a4722cb904bdb4f28cc25fd57f86ca9ec8d5",
																"typeString": "literal_string \"overdraw\""
															}
														],
														"id": 555,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8824:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 561,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8824:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 562,
												"nodeType": "ExpressionStatement",
												"src": "8824:38:0"
											},
											{
												"expression": {
													"id": 567,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 563,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 541,
															"src": "8872:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																"typeString": "struct EscroDot.Service storage pointer"
															}
														},
														"id": 565,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "8874:5:0",
														"memberName": "stake",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 10,
														"src": "8872:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "-=",
													"rightHandSide": {
														"id": 566,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 534,
														"src": "8883:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "8872:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 568,
												"nodeType": "ExpressionStatement",
												"src": "8872:17:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 570,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 541,
																"src": "8909:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_Service_$13_storage_ptr",
																	"typeString": "struct EscroDot.Service storage pointer"
																}
															},
															"id": 571,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "8911:5:0",
															"memberName": "owner",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 4,
															"src": "8909:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 572,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "8918:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 569,
														"name": "_safeSend",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 89,
														"src": "8899:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 573,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8899:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 574,
												"nodeType": "ExpressionStatement",
												"src": "8899:26:0"
											}
										]
									},
									"documentation": {
										"id": 530,
										"nodeType": "StructuredDocumentation",
										"src": "8559:76:0",
										"text": "@dev Provider may withdraw excess stake when no disputes are unresolved."
									},
									"functionSelector": "f1fdf469",
									"id": 576,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 537,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 536,
												"name": "lock",
												"nameLocations": [
													"8707:4:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 67,
												"src": "8707:4:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "8707:4:0"
										}
									],
									"name": "withdrawStake",
									"nameLocation": "8649:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 532,
												"mutability": "mutable",
												"name": "serviceId",
												"nameLocation": "8671:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "8663:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 531,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8663:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8690:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 576,
												"src": "8682:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 533,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8682:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8662:35:0"
									},
									"returnParameters": {
										"id": 538,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8712:0:0"
									},
									"scope": 577,
									"src": "8640:292:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 578,
							"src": "870:8064:0",
							"usedErrors": [],
							"usedEvents": [
								101,
								111,
								119,
								125,
								133
							]
						}
					],
					"src": "32:8903:0"
				}
			}
		},
		"errors": [],
		"version": "0.8.28",
		"long_version": "0.8.28+commit.7893614a.Emscripten.clang",
		"revive_version": "0.1.0-dev.12+commit.66f9a4d.llvm-18.1.8"
	}
}